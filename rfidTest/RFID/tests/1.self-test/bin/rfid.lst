
bin/rfid.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  0000040e  000004a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000040e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000040  00800122  00800122  000004c4  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000004c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000054  00000000  00000000  00000b90  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00000be4  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000080  00000000  00000000  00000bf5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000f21  00000000  00000000  00000c75  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000005ea  00000000  00000000  00001b96  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000495  00000000  00000000  00002180  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000188  00000000  00000000  00002618  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000001ff  00000000  00000000  000027a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000062b  00000000  00000000  0000299f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000040  00000000  00000000  00002fca  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	ee e0       	ldi	r30, 0x0E	; 14
  48:	f4 e0       	ldi	r31, 0x04	; 4
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	a2 32       	cpi	r26, 0x22	; 34
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	11 e0       	ldi	r17, 0x01	; 1
  58:	a2 e2       	ldi	r26, 0x22	; 34
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	a2 36       	cpi	r26, 0x62	; 98
  62:	b1 07       	cpc	r27, r17
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	4d d1       	rcall	.+666    	; 0x302 <main>
  68:	d0 c1       	rjmp	.+928    	; 0x40a <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=(~(0x0f<<LCD_DATA_POS));
  6c:	8a b1       	in	r24, 0x0a	; 10
  6e:	80 7f       	andi	r24, 0xF0	; 240
  70:	8a b9       	out	0x0a, r24	; 10

	//change LCD mode
	SET_RW();		//Read mode
  72:	5e 9a       	sbi	0x0b, 6	; 11
	CLEAR_RS();		//Read status
  74:	5d 98       	cbi	0x0b, 5	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  76:	00 c0       	rjmp	.+0      	; 0x78 <LCDBusyLoop+0xc>
  78:	00 c0       	rjmp	.+0      	; 0x7a <LCDBusyLoop+0xe>

	
	do
	{

		SET_E();
  7a:	5c 9a       	sbi	0x0b, 4	; 11
  7c:	00 c0       	rjmp	.+0      	; 0x7e <LCDBusyLoop+0x12>
  7e:	00 c0       	rjmp	.+0      	; 0x80 <LCDBusyLoop+0x14>

		//Wait tDA for data to become available
		_delay_us(0.5);

		status=(LCD_DATA_PIN>>LCD_DATA_POS);
  80:	89 b1       	in	r24, 0x09	; 9
		status=status<<4;
  82:	82 95       	swap	r24
  84:	80 7f       	andi	r24, 0xF0	; 240
  86:	00 c0       	rjmp	.+0      	; 0x88 <LCDBusyLoop+0x1c>
  88:	00 c0       	rjmp	.+0      	; 0x8a <LCDBusyLoop+0x1e>

		_delay_us(0.5);

		//Pull E low
		CLEAR_E();
  8a:	5c 98       	cbi	0x0b, 4	; 11
  8c:	92 e0       	ldi	r25, 0x02	; 2
  8e:	9a 95       	dec	r25
  90:	f1 f7       	brne	.-4      	; 0x8e <LCDBusyLoop+0x22>
  92:	00 c0       	rjmp	.+0      	; 0x94 <LCDBusyLoop+0x28>
		_delay_us(1);	//tEL

		SET_E();
  94:	5c 9a       	sbi	0x0b, 4	; 11
  96:	00 c0       	rjmp	.+0      	; 0x98 <LCDBusyLoop+0x2c>
  98:	00 c0       	rjmp	.+0      	; 0x9a <LCDBusyLoop+0x2e>
		_delay_us(0.5);

		temp=(LCD_DATA_PIN>>LCD_DATA_POS);
  9a:	99 b1       	in	r25, 0x09	; 9
  9c:	00 c0       	rjmp	.+0      	; 0x9e <LCDBusyLoop+0x32>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <LCDBusyLoop+0x34>
		status=status|temp;

		busy=status & 0b10000000;

		_delay_us(0.5);
		CLEAR_E();
  a0:	5c 98       	cbi	0x0b, 4	; 11
  a2:	92 e0       	ldi	r25, 0x02	; 2
  a4:	9a 95       	dec	r25
  a6:	f1 f7       	brne	.-4      	; 0xa4 <LCDBusyLoop+0x38>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <LCDBusyLoop+0x3e>
		_delay_us(1);	//tEL
	}while(busy);
  aa:	87 fd       	sbrc	r24, 7
  ac:	e6 cf       	rjmp	.-52     	; 0x7a <LCDBusyLoop+0xe>

	CLEAR_RW();		//write mode
  ae:	5e 98       	cbi	0x0b, 6	; 11
	//Change Port to output
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
  b0:	8a b1       	in	r24, 0x0a	; 10
  b2:	8f 60       	ori	r24, 0x0F	; 15
  b4:	8a b9       	out	0x0a, r24	; 10
  b6:	08 95       	ret

000000b8 <LCDByte>:
//NOTE: THIS FUNCTION RETURS ONLY WHEN LCD HAS PROCESSED THE COMMAND

uint8_t hn,ln;			//Nibbles
uint8_t temp;

hn=c>>4;
  b8:	28 2f       	mov	r18, r24
  ba:	22 95       	swap	r18
  bc:	2f 70       	andi	r18, 0x0F	; 15
ln=(c & 0x0F);
  be:	8f 70       	andi	r24, 0x0F	; 15

if(isdata==0)
  c0:	61 11       	cpse	r22, r1
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <LCDByte+0x10>
	CLEAR_RS();
  c4:	5d 98       	cbi	0x0b, 5	; 11
  c6:	01 c0       	rjmp	.+2      	; 0xca <LCDByte+0x12>
else
	SET_RS();
  c8:	5d 9a       	sbi	0x0b, 5	; 11
  ca:	00 c0       	rjmp	.+0      	; 0xcc <LCDByte+0x14>
  cc:	00 c0       	rjmp	.+0      	; 0xce <LCDByte+0x16>

_delay_us(0.500);		//tAS

SET_E();
  ce:	5c 9a       	sbi	0x0b, 4	; 11

//Send high nibble

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((hn<<LCD_DATA_POS));
  d0:	9b b1       	in	r25, 0x0b	; 11
  d2:	90 7f       	andi	r25, 0xF0	; 240
  d4:	92 2b       	or	r25, r18
LCD_DATA_PORT=temp;
  d6:	9b b9       	out	0x0b, r25	; 11
  d8:	92 e0       	ldi	r25, 0x02	; 2
  da:	9a 95       	dec	r25
  dc:	f1 f7       	brne	.-4      	; 0xda <LCDByte+0x22>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <LCDByte+0x28>

_delay_us(1);			//tEH

//Now data lines are stable pull E low for transmission

CLEAR_E();
  e0:	5c 98       	cbi	0x0b, 4	; 11
  e2:	92 e0       	ldi	r25, 0x02	; 2
  e4:	9a 95       	dec	r25
  e6:	f1 f7       	brne	.-4      	; 0xe4 <LCDByte+0x2c>
  e8:	00 c0       	rjmp	.+0      	; 0xea <LCDByte+0x32>

_delay_us(1);

//Send the lower nibble
SET_E();
  ea:	5c 9a       	sbi	0x0b, 4	; 11

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((ln<<LCD_DATA_POS));
  ec:	9b b1       	in	r25, 0x0b	; 11
  ee:	90 7f       	andi	r25, 0xF0	; 240
  f0:	98 2b       	or	r25, r24

LCD_DATA_PORT=temp;
  f2:	9b b9       	out	0x0b, r25	; 11
  f4:	82 e0       	ldi	r24, 0x02	; 2
  f6:	8a 95       	dec	r24
  f8:	f1 f7       	brne	.-4      	; 0xf6 <LCDByte+0x3e>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <LCDByte+0x44>

_delay_us(1);			//tEH

//SEND

CLEAR_E();
  fc:	5c 98       	cbi	0x0b, 4	; 11
  fe:	92 e0       	ldi	r25, 0x02	; 2
 100:	9a 95       	dec	r25
 102:	f1 f7       	brne	.-4      	; 0x100 <LCDByte+0x48>
 104:	00 c0       	rjmp	.+0      	; 0x106 <LCDByte+0x4e>

_delay_us(1);			//tEL

LCDBusyLoop();
 106:	b2 cf       	rjmp	.-156    	; 0x6c <LCDBusyLoop>

00000108 <LCDInit>:
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);

}

void LCDInit(uint8_t style)
{
 108:	cf 93       	push	r28
 10a:	df 93       	push	r29
 10c:	1f 92       	push	r1
 10e:	cd b7       	in	r28, 0x3d	; 61
 110:	de b7       	in	r29, 0x3e	; 62
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 112:	ef e5       	ldi	r30, 0x5F	; 95
 114:	fa ee       	ldi	r31, 0xEA	; 234
 116:	31 97       	sbiw	r30, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <LCDInit+0xe>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <LCDInit+0x14>
 11c:	00 00       	nop
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
 11e:	9a b1       	in	r25, 0x0a	; 10
 120:	9f 60       	ori	r25, 0x0F	; 15
 122:	9a b9       	out	0x0a, r25	; 10
	LCD_E_DDR|=(1<<LCD_E_POS);
 124:	54 9a       	sbi	0x0a, 4	; 10
	LCD_RS_DDR|=(1<<LCD_RS_POS);
 126:	55 9a       	sbi	0x0a, 5	; 10
	LCD_RW_DDR|=(1<<LCD_RW_POS);
 128:	56 9a       	sbi	0x0a, 6	; 10

	LCD_DATA_PORT&=(~(0x0F<<LCD_DATA_POS));
 12a:	9b b1       	in	r25, 0x0b	; 11
 12c:	90 7f       	andi	r25, 0xF0	; 240
 12e:	9b b9       	out	0x0b, r25	; 11
	CLEAR_E();
 130:	5c 98       	cbi	0x0b, 4	; 11
	CLEAR_RW();
 132:	5e 98       	cbi	0x0b, 6	; 11
	CLEAR_RS();
 134:	5d 98       	cbi	0x0b, 5	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 136:	00 c0       	rjmp	.+0      	; 0x138 <LCDInit+0x30>
 138:	00 00       	nop

	//Set 4-bit mode
	_delay_us(0.3);	//tAS

	SET_E();
 13a:	5c 9a       	sbi	0x0b, 4	; 11
	LCD_DATA_PORT|=((0b00000010)<<LCD_DATA_POS); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
 13c:	59 9a       	sbi	0x0b, 1	; 11
 13e:	f2 e0       	ldi	r31, 0x02	; 2
 140:	fa 95       	dec	r31
 142:	f1 f7       	brne	.-4      	; 0x140 <LCDInit+0x38>
 144:	00 c0       	rjmp	.+0      	; 0x146 <LCDInit+0x3e>
	_delay_us(1);
	CLEAR_E();
 146:	5c 98       	cbi	0x0b, 4	; 11
 148:	92 e0       	ldi	r25, 0x02	; 2
 14a:	9a 95       	dec	r25
 14c:	f1 f7       	brne	.-4      	; 0x14a <LCDInit+0x42>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <LCDInit+0x48>
	_delay_us(1);
	
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
 150:	89 83       	std	Y+1, r24	; 0x01
 152:	8c df       	rcall	.-232    	; 0x6c <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
 154:	60 e0       	ldi	r22, 0x00	; 0
 156:	89 81       	ldd	r24, Y+1	; 0x01
 158:	8c 60       	ori	r24, 0x0C	; 12
 15a:	ae df       	rcall	.-164    	; 0xb8 <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
 15c:	60 e0       	ldi	r22, 0x00	; 0
 15e:	88 e2       	ldi	r24, 0x28	; 40
 160:	ab df       	rcall	.-170    	; 0xb8 <LCDByte>
	}

	#endif

	x|=0b10000000;
  	LCDCmd(x);
 162:	60 e0       	ldi	r22, 0x00	; 0
 164:	80 e8       	ldi	r24, 0x80	; 128
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format

	
	LCDGotoXY(0,0);

}
 166:	0f 90       	pop	r0
 168:	df 91       	pop	r29
 16a:	cf 91       	pop	r28
	}

	#endif

	x|=0b10000000;
  	LCDCmd(x);
 16c:	a5 cf       	rjmp	.-182    	; 0xb8 <LCDByte>

0000016e <LCDWriteString>:
	
	LCDGotoXY(0,0);

}
void LCDWriteString(const char *msg)
{
 16e:	0f 93       	push	r16
 170:	1f 93       	push	r17
 172:	cf 93       	push	r28
 174:	df 93       	push	r29
 176:	ec 01       	movw	r28, r24
		
	In the same way you can insert any syblom numbered 0-7 	


	*****************************************************************/
 while(*msg!='\0')
 178:	16 c0       	rjmp	.+44     	; 0x1a6 <LCDWriteString+0x38>
 {
 	//Custom Char Support
	if(*msg=='%')
 17a:	85 32       	cpi	r24, 0x25	; 37
 17c:	79 f4       	brne	.+30     	; 0x19c <LCDWriteString+0x2e>
	{
		msg++;
 17e:	8e 01       	movw	r16, r28
 180:	0f 5f       	subi	r16, 0xFF	; 255
 182:	1f 4f       	sbci	r17, 0xFF	; 255
		int8_t cc=*msg-'0';
 184:	89 81       	ldd	r24, Y+1	; 0x01
 186:	80 53       	subi	r24, 0x30	; 48

		if(cc>=0 && cc<=7)
		{
			LCDData(cc);
 188:	61 e0       	ldi	r22, 0x01	; 1
	if(*msg=='%')
	{
		msg++;
		int8_t cc=*msg-'0';

		if(cc>=0 && cc<=7)
 18a:	88 30       	cpi	r24, 0x08	; 8
 18c:	08 f4       	brcc	.+2      	; 0x190 <LCDWriteString+0x22>
 18e:	04 c0       	rjmp	.+8      	; 0x198 <LCDWriteString+0x2a>
		{
			LCDData(cc);
		}
		else
		{
			LCDData('%');
 190:	85 e2       	ldi	r24, 0x25	; 37
 192:	92 df       	rcall	.-220    	; 0xb8 <LCDByte>
			LCDData(*msg);
 194:	61 e0       	ldi	r22, 0x01	; 1
 196:	89 81       	ldd	r24, Y+1	; 0x01
 198:	8f df       	rcall	.-226    	; 0xb8 <LCDByte>
 19a:	03 c0       	rjmp	.+6      	; 0x1a2 <LCDWriteString+0x34>
		}
	}
	else
	{
		LCDData(*msg);
 19c:	61 e0       	ldi	r22, 0x01	; 1
 19e:	8c df       	rcall	.-232    	; 0xb8 <LCDByte>
 1a0:	8e 01       	movw	r16, r28
	}
	msg++;
 1a2:	e8 01       	movw	r28, r16
 1a4:	21 96       	adiw	r28, 0x01	; 1
		
	In the same way you can insert any syblom numbered 0-7 	


	*****************************************************************/
 while(*msg!='\0')
 1a6:	88 81       	ld	r24, Y
 1a8:	81 11       	cpse	r24, r1
 1aa:	e7 cf       	rjmp	.-50     	; 0x17a <LCDWriteString+0xc>
	{
		LCDData(*msg);
	}
	msg++;
 }
}
 1ac:	df 91       	pop	r29
 1ae:	cf 91       	pop	r28
 1b0:	1f 91       	pop	r17
 1b2:	0f 91       	pop	r16
 1b4:	08 95       	ret

000001b6 <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
 1b6:	0f 93       	push	r16
 1b8:	1f 93       	push	r17
 1ba:	cf 93       	push	r28
 1bc:	df 93       	push	r29
 1be:	00 d0       	rcall	.+0      	; 0x1c0 <LCDWriteInt+0xa>
 1c0:	00 d0       	rcall	.+0      	; 0x1c2 <LCDWriteInt+0xc>
 1c2:	1f 92       	push	r1
 1c4:	cd b7       	in	r28, 0x3d	; 61
 1c6:	de b7       	in	r29, 0x3e	; 62
 1c8:	9b 01       	movw	r18, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
 1ca:	fe 01       	movw	r30, r28
 1cc:	31 96       	adiw	r30, 0x01	; 1
 1ce:	45 e0       	ldi	r20, 0x05	; 5
 1d0:	df 01       	movw	r26, r30
 1d2:	1d 92       	st	X+, r1
 1d4:	4a 95       	dec	r20
 1d6:	e9 f7       	brne	.-6      	; 0x1d2 <LCDWriteInt+0x1c>
 1d8:	fe 01       	movw	r30, r28
 1da:	36 96       	adiw	r30, 0x06	; 6
	int i=4,j=0;
	while(val)
	{
	str[i]=val%10;
 1dc:	0a e0       	ldi	r16, 0x0A	; 10
 1de:	10 e0       	ldi	r17, 0x00	; 0

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 1e0:	04 c0       	rjmp	.+8      	; 0x1ea <LCDWriteInt+0x34>
	{
	str[i]=val%10;
 1e2:	b8 01       	movw	r22, r16
 1e4:	eb d0       	rcall	.+470    	; 0x3bc <__divmodhi4>
 1e6:	82 93       	st	-Z, r24
	val=val/10;
 1e8:	cb 01       	movw	r24, r22

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 1ea:	00 97       	sbiw	r24, 0x00	; 0
 1ec:	d1 f7       	brne	.-12     	; 0x1e2 <LCDWriteInt+0x2c>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
 1ee:	2f 3f       	cpi	r18, 0xFF	; 255
 1f0:	bf ef       	ldi	r27, 0xFF	; 255
 1f2:	3b 07       	cpc	r19, r27
 1f4:	51 f4       	brne	.+20     	; 0x20a <LCDWriteInt+0x54>
 1f6:	fe 01       	movw	r30, r28
 1f8:	31 96       	adiw	r30, 0x01	; 1
	}
	msg++;
 }
}

void LCDWriteInt(int val,unsigned int field_length)
 1fa:	cf 01       	movw	r24, r30
 1fc:	8f 01       	movw	r16, r30
 1fe:	08 1b       	sub	r16, r24
 200:	19 0b       	sbc	r17, r25
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
		while(str[j]==0) j++;
 202:	21 91       	ld	r18, Z+
 204:	22 23       	and	r18, r18
 206:	d1 f3       	breq	.-12     	; 0x1fc <LCDWriteInt+0x46>
 208:	11 c0       	rjmp	.+34     	; 0x22c <LCDWriteInt+0x76>
	else
		j=5-field_length;
 20a:	05 e0       	ldi	r16, 0x05	; 5
 20c:	10 e0       	ldi	r17, 0x00	; 0
 20e:	02 1b       	sub	r16, r18
 210:	13 0b       	sbc	r17, r19
 212:	0c c0       	rjmp	.+24     	; 0x22c <LCDWriteInt+0x76>
	}
	msg++;
 }
}

void LCDWriteInt(int val,unsigned int field_length)
 214:	e1 e0       	ldi	r30, 0x01	; 1
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	ec 0f       	add	r30, r28
 21a:	fd 1f       	adc	r31, r29
 21c:	e0 0f       	add	r30, r16
 21e:	f1 1f       	adc	r31, r17
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
 220:	80 81       	ld	r24, Z
 222:	61 e0       	ldi	r22, 0x01	; 1
 224:	80 5d       	subi	r24, 0xD0	; 208
 226:	48 df       	rcall	.-368    	; 0xb8 <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
 228:	0f 5f       	subi	r16, 0xFF	; 255
 22a:	1f 4f       	sbci	r17, 0xFF	; 255
 22c:	05 30       	cpi	r16, 0x05	; 5
 22e:	11 05       	cpc	r17, r1
 230:	8c f3       	brlt	.-30     	; 0x214 <LCDWriteInt+0x5e>
	{
	LCDData(48+str[i]);
	}
}
 232:	0f 90       	pop	r0
 234:	0f 90       	pop	r0
 236:	0f 90       	pop	r0
 238:	0f 90       	pop	r0
 23a:	0f 90       	pop	r0
 23c:	df 91       	pop	r29
 23e:	cf 91       	pop	r28
 240:	1f 91       	pop	r17
 242:	0f 91       	pop	r16
 244:	08 95       	ret

00000246 <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 	if(x>=20) return;
 246:	84 31       	cpi	r24, 0x14	; 20
 248:	70 f4       	brcc	.+28     	; 0x266 <LCDGotoXY+0x20>

	#ifdef LCD_TYPE_204
	
	switch(y)
 24a:	62 30       	cpi	r22, 0x02	; 2
 24c:	31 f0       	breq	.+12     	; 0x25a <LCDGotoXY+0x14>
 24e:	63 30       	cpi	r22, 0x03	; 3
 250:	31 f0       	breq	.+12     	; 0x25e <LCDGotoXY+0x18>
 252:	61 30       	cpi	r22, 0x01	; 1
 254:	29 f4       	brne	.+10     	; 0x260 <LCDGotoXY+0x1a>
	{
		case 0:
			break;
		case 1:
			x|=0b01000000;
 256:	80 64       	ori	r24, 0x40	; 64
 258:	03 c0       	rjmp	.+6      	; 0x260 <LCDGotoXY+0x1a>
			break;
		case 2:
			x+=0x14;
 25a:	8c 5e       	subi	r24, 0xEC	; 236
 25c:	01 c0       	rjmp	.+2      	; 0x260 <LCDGotoXY+0x1a>
			break;
		case 3:
			x+=0x54;
 25e:	8c 5a       	subi	r24, 0xAC	; 172
	}

	#endif

	x|=0b10000000;
  	LCDCmd(x);
 260:	60 e0       	ldi	r22, 0x00	; 0
 262:	80 68       	ori	r24, 0x80	; 128
 264:	29 cf       	rjmp	.-430    	; 0xb8 <LCDByte>
 266:	08 95       	ret

00000268 <LCDHexDumpXY>:
}



void LCDHexDumpXY(uint8_t x, uint8_t y,uint8_t d)
{
 268:	cf 93       	push	r28
 26a:	c4 2f       	mov	r28, r20
	LCDGotoXY(x,y);
 26c:	ec df       	rcall	.-40     	; 0x246 <LCDGotoXY>
	uint8_t byte = '0';
	(((d>>4)&0x0F)<=9) ? (byte='0'+((d>>4)&0x0F)) : (byte='A'+ ((d>>4)&0x0F)-0x0A);
 26e:	9c 2f       	mov	r25, r28
 270:	92 95       	swap	r25
 272:	9f 70       	andi	r25, 0x0F	; 15
 274:	29 2f       	mov	r18, r25
 276:	30 e0       	ldi	r19, 0x00	; 0
 278:	89 2f       	mov	r24, r25
 27a:	2a 30       	cpi	r18, 0x0A	; 10
 27c:	31 05       	cpc	r19, r1
 27e:	14 f4       	brge	.+4      	; 0x284 <LCDHexDumpXY+0x1c>
 280:	80 5d       	subi	r24, 0xD0	; 208
 282:	01 c0       	rjmp	.+2      	; 0x286 <LCDHexDumpXY+0x1e>
 284:	89 5c       	subi	r24, 0xC9	; 201
	LCDByte(byte,1);
 286:	61 e0       	ldi	r22, 0x01	; 1
 288:	17 df       	rcall	.-466    	; 0xb8 <LCDByte>
	LCDBusyLoop();
 28a:	f0 de       	rcall	.-544    	; 0x6c <LCDBusyLoop>
	
	((d&0x0F)<=9) ? (byte='0'+ (d&0x0F)) : (byte='A'+ (d&0x0F)-0x0A);
 28c:	8c 2f       	mov	r24, r28
 28e:	8f 70       	andi	r24, 0x0F	; 15
 290:	28 2f       	mov	r18, r24
 292:	30 e0       	ldi	r19, 0x00	; 0
 294:	2a 30       	cpi	r18, 0x0A	; 10
 296:	31 05       	cpc	r19, r1
 298:	14 f4       	brge	.+4      	; 0x29e <LCDHexDumpXY+0x36>
 29a:	80 5d       	subi	r24, 0xD0	; 208
 29c:	01 c0       	rjmp	.+2      	; 0x2a0 <LCDHexDumpXY+0x38>
 29e:	89 5c       	subi	r24, 0xC9	; 201
	LCDByte(byte,1);
 2a0:	61 e0       	ldi	r22, 0x01	; 1
 2a2:	0a df       	rcall	.-492    	; 0xb8 <LCDByte>
	LCDBusyLoop();
}
 2a4:	cf 91       	pop	r28
	LCDByte(byte,1);
	LCDBusyLoop();
	
	((d&0x0F)<=9) ? (byte='0'+ (d&0x0F)) : (byte='A'+ (d&0x0F)-0x0A);
	LCDByte(byte,1);
	LCDBusyLoop();
 2a6:	e2 ce       	rjmp	.-572    	; 0x6c <LCDBusyLoop>

000002a8 <mfrc522_init>:
#if 1
#include <lcd.h>
#endif

void mfrc522_init()
{
 2a8:	08 95       	ret

000002aa <mfrc522_write>:
	
}

void mfrc522_write(uint8_t reg, uint8_t data)
{
 2aa:	cf 93       	push	r28
 2ac:	df 93       	push	r29
 2ae:	1f 92       	push	r1
 2b0:	cd b7       	in	r28, 0x3d	; 61
 2b2:	de b7       	in	r29, 0x3e	; 62
	uint8_t d_test;
	ENABLE_CHIP();
 2b4:	2a 98       	cbi	0x05, 2	; 5
	spi_transmit((reg<<1)&0x7E);
 2b6:	88 0f       	add	r24, r24
 2b8:	8e 77       	andi	r24, 0x7E	; 126
 2ba:	69 83       	std	Y+1, r22	; 0x01
 2bc:	1c d0       	rcall	.+56     	; 0x2f6 <spi_transmit>
	spi_transmit(data);
 2be:	69 81       	ldd	r22, Y+1	; 0x01
 2c0:	86 2f       	mov	r24, r22
 2c2:	19 d0       	rcall	.+50     	; 0x2f6 <spi_transmit>
	DISABLE_CHIP();
 2c4:	2a 9a       	sbi	0x05, 2	; 5
}
 2c6:	0f 90       	pop	r0
 2c8:	df 91       	pop	r29
 2ca:	cf 91       	pop	r28
 2cc:	08 95       	ret

000002ce <mfrc522_read>:

uint8_t mfrc522_read(uint8_t reg)
{
	uint8_t data;	
	ENABLE_CHIP();
 2ce:	2a 98       	cbi	0x05, 2	; 5
	spi_transmit(((reg<<1)&0x7E)|0x80);
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	88 0f       	add	r24, r24
 2d4:	99 1f       	adc	r25, r25
 2d6:	8e 77       	andi	r24, 0x7E	; 126
 2d8:	99 27       	eor	r25, r25
 2da:	80 68       	ori	r24, 0x80	; 128
 2dc:	0c d0       	rcall	.+24     	; 0x2f6 <spi_transmit>
	data = spi_transmit(0x00);
 2de:	80 e0       	ldi	r24, 0x00	; 0
 2e0:	0a d0       	rcall	.+20     	; 0x2f6 <spi_transmit>
	DISABLE_CHIP();
 2e2:	2a 9a       	sbi	0x05, 2	; 5
	return data;
}
 2e4:	08 95       	ret

000002e6 <mfrc522_reset>:

void mfrc522_reset()
{
	mfrc522_write(CommandReg,SoftReset_CMD);
 2e6:	6f e0       	ldi	r22, 0x0F	; 15
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	df cf       	rjmp	.-66     	; 0x2aa <mfrc522_write>

000002ec <spi_init>:
#include <spi.h>

#if SPI_CONFIG_AS_MASTER
void spi_init()
{
	SPI_DDR = (1<<SPI_MOSI)|(1<<SPI_SCK)|(1<<SPI_SS);
 2ec:	8c e2       	ldi	r24, 0x2C	; 44
 2ee:	84 b9       	out	0x04, r24	; 4
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);//prescaler 16
 2f0:	81 e5       	ldi	r24, 0x51	; 81
 2f2:	8c bd       	out	0x2c, r24	; 44
 2f4:	08 95       	ret

000002f6 <spi_transmit>:
}


uint8_t spi_transmit(uint8_t data)
{
	SPDR = data;
 2f6:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
 2f8:	0d b4       	in	r0, 0x2d	; 45
 2fa:	07 fe       	sbrs	r0, 7
 2fc:	fd cf       	rjmp	.-6      	; 0x2f8 <spi_transmit+0x2>
	
	return SPDR;
 2fe:	8e b5       	in	r24, 0x2e	; 46
}
 300:	08 95       	ret

00000302 <main>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 302:	2f e7       	ldi	r18, 0x7F	; 127
 304:	88 e3       	ldi	r24, 0x38	; 56
 306:	91 e0       	ldi	r25, 0x01	; 1
 308:	21 50       	subi	r18, 0x01	; 1
 30a:	80 40       	sbci	r24, 0x00	; 0
 30c:	90 40       	sbci	r25, 0x00	; 0
 30e:	e1 f7       	brne	.-8      	; 0x308 <main+0x6>
 310:	00 c0       	rjmp	.+0      	; 0x312 <main+0x10>
 312:	00 00       	nop
 
int main()
{
	uint8_t byte;
	_delay_ms(50);
	LCDInit(LS_BLINK);
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	f8 de       	rcall	.-528    	; 0x108 <LCDInit>
	LCDWriteStringXY(2,0,"RFID Reader");
 318:	60 e0       	ldi	r22, 0x00	; 0
 31a:	82 e0       	ldi	r24, 0x02	; 2
 31c:	94 df       	rcall	.-216    	; 0x246 <LCDGotoXY>
 31e:	80 e0       	ldi	r24, 0x00	; 0
 320:	91 e0       	ldi	r25, 0x01	; 1
 322:	25 df       	rcall	.-438    	; 0x16e <LCDWriteString>
	LCDWriteStringXY(5,1,VERSION_STR);
 324:	61 e0       	ldi	r22, 0x01	; 1
 326:	85 e0       	ldi	r24, 0x05	; 5
 328:	8e df       	rcall	.-228    	; 0x246 <LCDGotoXY>
 32a:	8c e0       	ldi	r24, 0x0C	; 12
 32c:	91 e0       	ldi	r25, 0x01	; 1
 32e:	1f df       	rcall	.-450    	; 0x16e <LCDWriteString>
	
	
	spi_init();
 330:	dd df       	rcall	.-70     	; 0x2ec <spi_init>
 332:	2f ef       	ldi	r18, 0xFF	; 255
 334:	89 e6       	ldi	r24, 0x69	; 105
 336:	98 e1       	ldi	r25, 0x18	; 24
 338:	21 50       	subi	r18, 0x01	; 1
 33a:	80 40       	sbci	r24, 0x00	; 0
 33c:	90 40       	sbci	r25, 0x00	; 0
 33e:	e1 f7       	brne	.-8      	; 0x338 <main+0x36>
 340:	00 c0       	rjmp	.+0      	; 0x342 <main+0x40>
 342:	00 00       	nop
	_delay_ms(1000);
	LCDClear();
 344:	60 e0       	ldi	r22, 0x00	; 0
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	b7 de       	rcall	.-658    	; 0xb8 <LCDByte>
	LCDWriteStringXY(0,0,"FIFO Data : 0x");
 34a:	60 e0       	ldi	r22, 0x00	; 0
 34c:	80 e0       	ldi	r24, 0x00	; 0
 34e:	7b df       	rcall	.-266    	; 0x246 <LCDGotoXY>
 350:	82 e1       	ldi	r24, 0x12	; 18
 352:	91 e0       	ldi	r25, 0x01	; 1
 354:	0c df       	rcall	.-488    	; 0x16e <LCDWriteString>
	
	mfrc522_reset();
 356:	c7 df       	rcall	.-114    	; 0x2e6 <mfrc522_reset>
 358:	c9 e1       	ldi	r28, 0x19	; 25
	for(byte = 0 ; byte<25; byte ++)
		mfrc522_write(FIFODataReg,0x00);
 35a:	60 e0       	ldi	r22, 0x00	; 0
 35c:	89 e0       	ldi	r24, 0x09	; 9
 35e:	a5 df       	rcall	.-182    	; 0x2aa <mfrc522_write>
 360:	c1 50       	subi	r28, 0x01	; 1
	_delay_ms(1000);
	LCDClear();
	LCDWriteStringXY(0,0,"FIFO Data : 0x");
	
	mfrc522_reset();
	for(byte = 0 ; byte<25; byte ++)
 362:	d9 f7       	brne	.-10     	; 0x35a <main+0x58>
		mfrc522_write(FIFODataReg,0x00);
	mfrc522_write(CommandReg,Mem_CMD);
 364:	61 e0       	ldi	r22, 0x01	; 1
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	a0 df       	rcall	.-192    	; 0x2aa <mfrc522_write>
	mfrc522_write(AutoTestReg,0x09);
 36a:	69 e0       	ldi	r22, 0x09	; 9
 36c:	86 e3       	ldi	r24, 0x36	; 54
 36e:	9d df       	rcall	.-198    	; 0x2aa <mfrc522_write>
	mfrc522_write(FIFODataReg,0x00);
 370:	60 e0       	ldi	r22, 0x00	; 0
 372:	89 e0       	ldi	r24, 0x09	; 9
 374:	9a df       	rcall	.-204    	; 0x2aa <mfrc522_write>
	mfrc522_write(CommandReg,CalcCRC_CMD);
 376:	63 e0       	ldi	r22, 0x03	; 3
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	97 df       	rcall	.-210    	; 0x2aa <mfrc522_write>
 37c:	2f ef       	ldi	r18, 0xFF	; 255
 37e:	84 e3       	ldi	r24, 0x34	; 52
 380:	9c e0       	ldi	r25, 0x0C	; 12
 382:	21 50       	subi	r18, 0x01	; 1
 384:	80 40       	sbci	r24, 0x00	; 0
 386:	90 40       	sbci	r25, 0x00	; 0
 388:	e1 f7       	brne	.-8      	; 0x382 <main+0x80>
 38a:	00 c0       	rjmp	.+0      	; 0x38c <main+0x8a>
 38c:	00 00       	nop
 38e:	c2 e2       	ldi	r28, 0x22	; 34
 390:	d1 e0       	ldi	r29, 0x01	; 1
	_delay_ms(500);
	for(byte = 0; byte<	64; byte++)
	{
		SelfTestBuffer[byte] = mfrc522_read(FIFODataReg);
 392:	89 e0       	ldi	r24, 0x09	; 9
 394:	9c df       	rcall	.-200    	; 0x2ce <mfrc522_read>
 396:	89 93       	st	Y+, r24
		LCDHexDumpXY(14,0,SelfTestBuffer[byte]);
 398:	48 2f       	mov	r20, r24
 39a:	60 e0       	ldi	r22, 0x00	; 0
 39c:	8e e0       	ldi	r24, 0x0E	; 14
 39e:	64 df       	rcall	.-312    	; 0x268 <LCDHexDumpXY>
 3a0:	2f ef       	ldi	r18, 0xFF	; 255
 3a2:	8e e9       	ldi	r24, 0x9E	; 158
 3a4:	94 e2       	ldi	r25, 0x24	; 36
 3a6:	21 50       	subi	r18, 0x01	; 1
 3a8:	80 40       	sbci	r24, 0x00	; 0
 3aa:	90 40       	sbci	r25, 0x00	; 0
 3ac:	e1 f7       	brne	.-8      	; 0x3a6 <main+0xa4>
 3ae:	00 c0       	rjmp	.+0      	; 0x3b0 <main+0xae>
 3b0:	00 00       	nop
	mfrc522_write(CommandReg,Mem_CMD);
	mfrc522_write(AutoTestReg,0x09);
	mfrc522_write(FIFODataReg,0x00);
	mfrc522_write(CommandReg,CalcCRC_CMD);
	_delay_ms(500);
	for(byte = 0; byte<	64; byte++)
 3b2:	21 e0       	ldi	r18, 0x01	; 1
 3b4:	c2 36       	cpi	r28, 0x62	; 98
 3b6:	d2 07       	cpc	r29, r18
 3b8:	61 f7       	brne	.-40     	; 0x392 <main+0x90>
 3ba:	ff cf       	rjmp	.-2      	; 0x3ba <main+0xb8>

000003bc <__divmodhi4>:
 3bc:	97 fb       	bst	r25, 7
 3be:	07 2e       	mov	r0, r23
 3c0:	16 f4       	brtc	.+4      	; 0x3c6 <__divmodhi4+0xa>
 3c2:	00 94       	com	r0
 3c4:	06 d0       	rcall	.+12     	; 0x3d2 <__divmodhi4_neg1>
 3c6:	77 fd       	sbrc	r23, 7
 3c8:	08 d0       	rcall	.+16     	; 0x3da <__divmodhi4_neg2>
 3ca:	0b d0       	rcall	.+22     	; 0x3e2 <__udivmodhi4>
 3cc:	07 fc       	sbrc	r0, 7
 3ce:	05 d0       	rcall	.+10     	; 0x3da <__divmodhi4_neg2>
 3d0:	3e f4       	brtc	.+14     	; 0x3e0 <__divmodhi4_exit>

000003d2 <__divmodhi4_neg1>:
 3d2:	90 95       	com	r25
 3d4:	81 95       	neg	r24
 3d6:	9f 4f       	sbci	r25, 0xFF	; 255
 3d8:	08 95       	ret

000003da <__divmodhi4_neg2>:
 3da:	70 95       	com	r23
 3dc:	61 95       	neg	r22
 3de:	7f 4f       	sbci	r23, 0xFF	; 255

000003e0 <__divmodhi4_exit>:
 3e0:	08 95       	ret

000003e2 <__udivmodhi4>:
 3e2:	aa 1b       	sub	r26, r26
 3e4:	bb 1b       	sub	r27, r27
 3e6:	51 e1       	ldi	r21, 0x11	; 17
 3e8:	07 c0       	rjmp	.+14     	; 0x3f8 <__udivmodhi4_ep>

000003ea <__udivmodhi4_loop>:
 3ea:	aa 1f       	adc	r26, r26
 3ec:	bb 1f       	adc	r27, r27
 3ee:	a6 17       	cp	r26, r22
 3f0:	b7 07       	cpc	r27, r23
 3f2:	10 f0       	brcs	.+4      	; 0x3f8 <__udivmodhi4_ep>
 3f4:	a6 1b       	sub	r26, r22
 3f6:	b7 0b       	sbc	r27, r23

000003f8 <__udivmodhi4_ep>:
 3f8:	88 1f       	adc	r24, r24
 3fa:	99 1f       	adc	r25, r25
 3fc:	5a 95       	dec	r21
 3fe:	a9 f7       	brne	.-22     	; 0x3ea <__udivmodhi4_loop>
 400:	80 95       	com	r24
 402:	90 95       	com	r25
 404:	bc 01       	movw	r22, r24
 406:	cd 01       	movw	r24, r26
 408:	08 95       	ret

0000040a <_exit>:
 40a:	f8 94       	cli

0000040c <__stop_program>:
 40c:	ff cf       	rjmp	.-2      	; 0x40c <__stop_program>
