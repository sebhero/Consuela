
Movement2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004204  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00084204  00084204  0000c204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000a6c  20070000  0008420c  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000000d4  20070a6c  00084c78  00010a6c  2**2
                  ALLOC
  4 .stack        00002000  20070b40  00084d4c  00010a6c  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00010a6c  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  00010a95  2**0
                  CONTENTS, READONLY
  7 .debug_info   0000cf69  00000000  00000000  00010af0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000021a7  00000000  00000000  0001da59  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000b88  00000000  00000000  0001fc00  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000a68  00000000  00000000  00020788  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00016c77  00000000  00000000  000211f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000e0f2  00000000  00000000  00037e67  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00061641  00000000  00000000  00045f59  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000022f4  00000000  00000000  000a759c  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00005346  00000000  00000000  000a9890  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20072b40 	.word	0x20072b40
   80004:	00080cc5 	.word	0x00080cc5
   80008:	00080cc1 	.word	0x00080cc1
   8000c:	00080cc1 	.word	0x00080cc1
   80010:	00080cc1 	.word	0x00080cc1
   80014:	00080cc1 	.word	0x00080cc1
   80018:	00080cc1 	.word	0x00080cc1
	...
   8002c:	00080cc1 	.word	0x00080cc1
   80030:	00080cc1 	.word	0x00080cc1
   80034:	00000000 	.word	0x00000000
   80038:	00080cc1 	.word	0x00080cc1
   8003c:	00080cc1 	.word	0x00080cc1
   80040:	00080cc1 	.word	0x00080cc1
   80044:	00080cc1 	.word	0x00080cc1
   80048:	00080cc1 	.word	0x00080cc1
   8004c:	00080cc1 	.word	0x00080cc1
   80050:	00080cc1 	.word	0x00080cc1
   80054:	00080cc1 	.word	0x00080cc1
   80058:	00080cc1 	.word	0x00080cc1
   8005c:	00080cc1 	.word	0x00080cc1
   80060:	00080cc1 	.word	0x00080cc1
   80064:	00080cc1 	.word	0x00080cc1
   80068:	00000000 	.word	0x00000000
   8006c:	00080b0d 	.word	0x00080b0d
   80070:	00080b21 	.word	0x00080b21
   80074:	00080b35 	.word	0x00080b35
   80078:	00080b49 	.word	0x00080b49
	...
   80084:	00080cc1 	.word	0x00080cc1
   80088:	00080cc1 	.word	0x00080cc1
   8008c:	00080cc1 	.word	0x00080cc1
   80090:	00080cc1 	.word	0x00080cc1
   80094:	00080cc1 	.word	0x00080cc1
   80098:	00080cc1 	.word	0x00080cc1
   8009c:	00080cc1 	.word	0x00080cc1
   800a0:	00080cc1 	.word	0x00080cc1
   800a4:	00000000 	.word	0x00000000
   800a8:	00080cc1 	.word	0x00080cc1
   800ac:	00080709 	.word	0x00080709
   800b0:	000806d5 	.word	0x000806d5
   800b4:	00080cc1 	.word	0x00080cc1
   800b8:	00080cc1 	.word	0x00080cc1
   800bc:	00080cc1 	.word	0x00080cc1
   800c0:	00080cc1 	.word	0x00080cc1
   800c4:	00080cc1 	.word	0x00080cc1
   800c8:	00080cc1 	.word	0x00080cc1
   800cc:	00080cc1 	.word	0x00080cc1
   800d0:	00080cc1 	.word	0x00080cc1
   800d4:	00080cc1 	.word	0x00080cc1
   800d8:	00080cc1 	.word	0x00080cc1
   800dc:	00080cc1 	.word	0x00080cc1
   800e0:	00080cc1 	.word	0x00080cc1
   800e4:	00080cc1 	.word	0x00080cc1
   800e8:	00080cc1 	.word	0x00080cc1
   800ec:	00080cc1 	.word	0x00080cc1
   800f0:	00080cc1 	.word	0x00080cc1

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070a6c 	.word	0x20070a6c
   80110:	00000000 	.word	0x00000000
   80114:	0008420c 	.word	0x0008420c

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b06      	ldr	r3, [pc, #24]	; (80134 <frame_dummy+0x1c>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4806      	ldr	r0, [pc, #24]	; (80138 <frame_dummy+0x20>)
   80120:	4906      	ldr	r1, [pc, #24]	; (8013c <frame_dummy+0x24>)
   80122:	f3af 8000 	nop.w
   80126:	4806      	ldr	r0, [pc, #24]	; (80140 <frame_dummy+0x28>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b113      	cbz	r3, 80132 <frame_dummy+0x1a>
   8012c:	4b05      	ldr	r3, [pc, #20]	; (80144 <frame_dummy+0x2c>)
   8012e:	b103      	cbz	r3, 80132 <frame_dummy+0x1a>
   80130:	4798      	blx	r3
   80132:	bd08      	pop	{r3, pc}
   80134:	00000000 	.word	0x00000000
   80138:	0008420c 	.word	0x0008420c
   8013c:	20070a70 	.word	0x20070a70
   80140:	0008420c 	.word	0x0008420c
   80144:	00000000 	.word	0x00000000

00080148 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   80148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8014c:	460c      	mov	r4, r1
   8014e:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
   80150:	b960      	cbnz	r0, 8016c <_read+0x24>
		return -1;
	}

	for (; len > 0; --len) {
   80152:	2a00      	cmp	r2, #0
   80154:	dd0e      	ble.n	80174 <_read+0x2c>
   80156:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   80158:	4e09      	ldr	r6, [pc, #36]	; (80180 <_read+0x38>)
   8015a:	4d0a      	ldr	r5, [pc, #40]	; (80184 <_read+0x3c>)
   8015c:	6830      	ldr	r0, [r6, #0]
   8015e:	4621      	mov	r1, r4
   80160:	682b      	ldr	r3, [r5, #0]
   80162:	4798      	blx	r3
		ptr++;
   80164:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   80166:	42bc      	cmp	r4, r7
   80168:	d1f8      	bne.n	8015c <_read+0x14>
   8016a:	e006      	b.n	8017a <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
   8016c:	f04f 30ff 	mov.w	r0, #4294967295
   80170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len > 0; --len) {
   80174:	2000      	movs	r0, #0
   80176:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
   8017a:	4640      	mov	r0, r8
	}
	return nChars;
}
   8017c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80180:	20070b38 	.word	0x20070b38
   80184:	20070b30 	.word	0x20070b30

00080188 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   80188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8018c:	460e      	mov	r6, r1
   8018e:	4615      	mov	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   80190:	3801      	subs	r0, #1
   80192:	2802      	cmp	r0, #2
   80194:	d80f      	bhi.n	801b6 <_write+0x2e>
		return -1;
	}

	for (; len != 0; --len) {
   80196:	b192      	cbz	r2, 801be <_write+0x36>
   80198:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
   8019a:	f8df 803c 	ldr.w	r8, [pc, #60]	; 801d8 <_write+0x50>
   8019e:	4f0d      	ldr	r7, [pc, #52]	; (801d4 <_write+0x4c>)
   801a0:	f8d8 0000 	ldr.w	r0, [r8]
   801a4:	5d31      	ldrb	r1, [r6, r4]
   801a6:	683b      	ldr	r3, [r7, #0]
   801a8:	4798      	blx	r3
   801aa:	2800      	cmp	r0, #0
   801ac:	db0a      	blt.n	801c4 <_write+0x3c>
			return -1;
		}
		++nChars;
   801ae:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   801b0:	42a5      	cmp	r5, r4
   801b2:	d1f5      	bne.n	801a0 <_write+0x18>
   801b4:	e00a      	b.n	801cc <_write+0x44>
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
   801b6:	f04f 30ff 	mov.w	r0, #4294967295
   801ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len != 0; --len) {
   801be:	2000      	movs	r0, #0
   801c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
   801c4:	f04f 30ff 	mov.w	r0, #4294967295
   801c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		++nChars;
   801cc:	4620      	mov	r0, r4
	}
	return nChars;
}
   801ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   801d2:	bf00      	nop
   801d4:	20070b34 	.word	0x20070b34
   801d8:	20070b38 	.word	0x20070b38

000801dc <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
   801dc:	b4f0      	push	{r4, r5, r6, r7}
   801de:	b08c      	sub	sp, #48	; 0x30
   801e0:	4607      	mov	r7, r0
   801e2:	460e      	mov	r6, r1
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
   801e4:	ac01      	add	r4, sp, #4
   801e6:	4d12      	ldr	r5, [pc, #72]	; (80230 <pwm_clocks_generate+0x54>)
   801e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   801ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   801ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   801ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   801f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   801f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   801f8:	466a      	mov	r2, sp
			{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
   801fa:	2300      	movs	r3, #0
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   801fc:	f852 4f04 	ldr.w	r4, [r2, #4]!
   80200:	fbb6 f4f4 	udiv	r4, r6, r4
   80204:	fbb4 f4f7 	udiv	r4, r4, r7
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
   80208:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   8020c:	d903      	bls.n	80216 <pwm_clocks_generate+0x3a>
			break;
		}
		ul_pre++;
   8020e:	3301      	adds	r3, #1
	} while (ul_pre < PWM_CLOCK_PRE_MAX);
   80210:	2b0b      	cmp	r3, #11
   80212:	d1f3      	bne.n	801fc <pwm_clocks_generate+0x20>
   80214:	e004      	b.n	80220 <pwm_clocks_generate+0x44>

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
   80216:	2b0a      	cmp	r3, #10
   80218:	d805      	bhi.n	80226 <pwm_clocks_generate+0x4a>
		return ul_div | (ul_pre << 8);
   8021a:	ea44 2003 	orr.w	r0, r4, r3, lsl #8
   8021e:	e004      	b.n	8022a <pwm_clocks_generate+0x4e>
	} else {
		return PWM_INVALID_ARGUMENT;
   80220:	f64f 70ff 	movw	r0, #65535	; 0xffff
   80224:	e001      	b.n	8022a <pwm_clocks_generate+0x4e>
   80226:	f64f 70ff 	movw	r0, #65535	; 0xffff
	}
}
   8022a:	b00c      	add	sp, #48	; 0x30
   8022c:	bcf0      	pop	{r4, r5, r6, r7}
   8022e:	4770      	bx	lr
   80230:	0008411c 	.word	0x0008411c

00080234 <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
   80234:	b570      	push	{r4, r5, r6, lr}
   80236:	4606      	mov	r6, r0
   80238:	460c      	mov	r4, r1
	uint32_t clock = 0;
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
   8023a:	6808      	ldr	r0, [r1, #0]
   8023c:	b140      	cbz	r0, 80250 <pwm_init+0x1c>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
   8023e:	6889      	ldr	r1, [r1, #8]
   80240:	4b0b      	ldr	r3, [pc, #44]	; (80270 <pwm_init+0x3c>)
   80242:	4798      	blx	r3
   80244:	4605      	mov	r5, r0
		if (result == PWM_INVALID_ARGUMENT) {
   80246:	f64f 73ff 	movw	r3, #65535	; 0xffff
   8024a:	4298      	cmp	r0, r3
   8024c:	d101      	bne.n	80252 <pwm_init+0x1e>
   8024e:	e00e      	b.n	8026e <pwm_init+0x3a>
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
	uint32_t clock = 0;
   80250:	2500      	movs	r5, #0

		clock = result;
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
   80252:	6860      	ldr	r0, [r4, #4]
   80254:	b140      	cbz	r0, 80268 <pwm_init+0x34>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
   80256:	68a1      	ldr	r1, [r4, #8]
   80258:	4b05      	ldr	r3, [pc, #20]	; (80270 <pwm_init+0x3c>)
   8025a:	4798      	blx	r3

		if (result == PWM_INVALID_ARGUMENT) {
   8025c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   80260:	4298      	cmp	r0, r3
   80262:	d004      	beq.n	8026e <pwm_init+0x3a>
			return result;
		}

		clock |= (result << 16);
   80264:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
	}
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
   80268:	6035      	str	r5, [r6, #0]
#endif
	return 0;
   8026a:	2000      	movs	r0, #0
   8026c:	bd70      	pop	{r4, r5, r6, pc}
}
   8026e:	bd70      	pop	{r4, r5, r6, pc}
   80270:	000801dd 	.word	0x000801dd

00080274 <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
   80274:	b470      	push	{r4, r5, r6}
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;
   80276:	680b      	ldr	r3, [r1, #0]

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
   80278:	8a8c      	ldrh	r4, [r1, #20]
{
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   8027a:	684a      	ldr	r2, [r1, #4]
   8027c:	f002 020f 	and.w	r2, r2, #15
   80280:	4314      	orrs	r4, r2
			(p_channel->polarity << 9) |
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
			(p_channel->counter_event) |
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
   80282:	890d      	ldrh	r5, [r1, #8]
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
   80284:	432c      	orrs	r4, r5
   80286:	7a8a      	ldrb	r2, [r1, #10]
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
			(p_channel->counter_event) |
   80288:	ea44 2442 	orr.w	r4, r4, r2, lsl #9
			(p_channel->b_deadtime_generator << 16) |
   8028c:	7d8a      	ldrb	r2, [r1, #22]
   8028e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
			(p_channel->b_pwmh_output_inverted << 17) |
   80292:	7dca      	ldrb	r2, [r1, #23]
   80294:	ea44 4442 	orr.w	r4, r4, r2, lsl #17
			(p_channel->b_pwml_output_inverted << 18) |
   80298:	7e0a      	ldrb	r2, [r1, #24]
{
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   8029a:	ea44 4482 	orr.w	r4, r4, r2, lsl #18
   8029e:	eb00 1243 	add.w	r2, r0, r3, lsl #5
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = tmp_reg;
   802a2:	f8c2 4200 	str.w	r4, [r2, #512]	; 0x200

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
   802a6:	68cc      	ldr	r4, [r1, #12]
   802a8:	f8c2 4204 	str.w	r4, [r2, #516]	; 0x204

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
   802ac:	690c      	ldr	r4, [r1, #16]
   802ae:	f8c2 420c 	str.w	r4, [r2, #524]	; 0x20c
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
   802b2:	7d8a      	ldrb	r2, [r1, #22]
   802b4:	b13a      	cbz	r2, 802c6 <pwm_channel_init+0x52>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
   802b6:	8b8c      	ldrh	r4, [r1, #28]
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
   802b8:	8b4a      	ldrh	r2, [r1, #26]
   802ba:	ea42 4404 	orr.w	r4, r2, r4, lsl #16
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
   802be:	eb00 1243 	add.w	r2, r0, r3, lsl #5
   802c2:	f8c2 4218 	str.w	r4, [r2, #536]	; 0x218
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
   802c6:	6c85      	ldr	r5, [r0, #72]	; 0x48
   802c8:	f04f 1201 	mov.w	r2, #65537	; 0x10001
   802cc:	409a      	lsls	r2, r3
   802ce:	43d2      	mvns	r2, r2
   802d0:	4015      	ands	r5, r2
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
			(((p_channel->output_selection.b_override_pwml) << ch_num)
   802d2:	7fce      	ldrb	r6, [r1, #31]
   802d4:	409e      	lsls	r6, r3
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
   802d6:	7f8c      	ldrb	r4, [r1, #30]
   802d8:	409c      	lsls	r4, r3
   802da:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   802de:	432c      	orrs	r4, r5
			(((p_channel->output_selection.b_override_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OS = tmp_reg;
   802e0:	6484      	str	r4, [r0, #72]	; 0x48

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
   802e2:	6c44      	ldr	r4, [r0, #68]	; 0x44
   802e4:	4022      	ands	r2, r4
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
			(((p_channel->output_selection.override_level_pwml) << ch_num)
   802e6:	f891 5021 	ldrb.w	r5, [r1, #33]	; 0x21
   802ea:	409d      	lsls	r5, r3
					<< 16);
	p_pwm->PWM_OS = tmp_reg;

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
   802ec:	f891 4020 	ldrb.w	r4, [r1, #32]
   802f0:	409c      	lsls	r4, r3
   802f2:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   802f6:	4322      	orrs	r2, r4
			(((p_channel->output_selection.override_level_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OOV = tmp_reg;
   802f8:	6442      	str	r2, [r0, #68]	; 0x44

	/* Sync Channels Mode Register */
	uint32_t channel = (1 << ch_num);
   802fa:	2201      	movs	r2, #1
   802fc:	409a      	lsls	r2, r3
	if (p_channel->b_sync_ch) {
   802fe:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
   80302:	b11c      	cbz	r4, 8030c <pwm_channel_init+0x98>
		p_pwm->PWM_SCM |= channel;
   80304:	6a04      	ldr	r4, [r0, #32]
   80306:	4314      	orrs	r4, r2
   80308:	6204      	str	r4, [r0, #32]
   8030a:	e003      	b.n	80314 <pwm_channel_init+0xa0>
	} else {
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
   8030c:	6a04      	ldr	r4, [r0, #32]
   8030e:	ea24 0402 	bic.w	r4, r4, r2
   80312:	6204      	str	r4, [r0, #32]
		} else {
			p_pwm->PWM_FPV1 &= (~((0x01 << ch_num) << 16));
		}
	}
#else
	if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
   80314:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
   80318:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= (0x01 << ch_num);
   8031a:	6e84      	ldr	r4, [r0, #104]	; 0x68
   8031c:	bf0c      	ite	eq
   8031e:	4314      	orreq	r4, r2
	} else {
		p_pwm->PWM_FPV &= (~(0x01 << ch_num));
   80320:	4394      	bicne	r4, r2
   80322:	6684      	str	r4, [r0, #104]	; 0x68
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
   80324:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
   80328:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= ((0x01 << ch_num) << 16);
   8032a:	6e84      	ldr	r4, [r0, #104]	; 0x68
   8032c:	bf0c      	ite	eq
   8032e:	ea44 4202 	orreq.w	r2, r4, r2, lsl #16
	} else {
		p_pwm->PWM_FPV &= (~((0x01 << ch_num) << 16));
   80332:	ea24 4202 	bicne.w	r2, r4, r2, lsl #16
   80336:	6682      	str	r2, [r0, #104]	; 0x68
	}
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
   80338:	2b03      	cmp	r3, #3
   8033a:	d80c      	bhi.n	80356 <pwm_channel_init+0xe2>
		ch_num *= 8;
		fault_enable_reg = p_pwm->PWM_FPE1;
   8033c:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
		ch_num *= 8;
   8033e:	00db      	lsls	r3, r3, #3
		fault_enable_reg = p_pwm->PWM_FPE1;
		fault_enable_reg &= ~(0xFF << ch_num);
   80340:	22ff      	movs	r2, #255	; 0xff
   80342:	409a      	lsls	r2, r3
   80344:	ea24 0202 	bic.w	r2, r4, r2
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   80348:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
   8034c:	fa01 f303 	lsl.w	r3, r1, r3
   80350:	4313      	orrs	r3, r2
		p_pwm->PWM_FPE1 = fault_enable_reg;
   80352:	66c3      	str	r3, [r0, #108]	; 0x6c
   80354:	e00c      	b.n	80370 <pwm_channel_init+0xfc>
	} else {
		ch_num -= 4;
   80356:	3b04      	subs	r3, #4
		ch_num *= 8;
		fault_enable_reg = p_pwm->PWM_FPE2;
   80358:	6f04      	ldr	r4, [r0, #112]	; 0x70
		fault_enable_reg &= ~(0xFF << ch_num);
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
		p_pwm->PWM_FPE1 = fault_enable_reg;
	} else {
		ch_num -= 4;
		ch_num *= 8;
   8035a:	00db      	lsls	r3, r3, #3
		fault_enable_reg = p_pwm->PWM_FPE2;
		fault_enable_reg &= ~(0xFF << ch_num);
   8035c:	22ff      	movs	r2, #255	; 0xff
   8035e:	409a      	lsls	r2, r3
   80360:	ea24 0202 	bic.w	r2, r4, r2
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   80364:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
   80368:	fa01 f303 	lsl.w	r3, r1, r3
   8036c:	4313      	orrs	r3, r2
		p_pwm->PWM_FPE2 = fault_enable_reg;
   8036e:	6703      	str	r3, [r0, #112]	; 0x70
			PWM_CAE_ADEDGV(p_channel->ul_additional_edge) |
			p_channel->additional_edge_mode;
#endif

	return 0;
}
   80370:	2000      	movs	r0, #0
   80372:	bc70      	pop	{r4, r5, r6}
   80374:	4770      	bx	lr
   80376:	bf00      	nop

00080378 <pwm_channel_update_duty>:
 *
 * \retval 0 if changing succeeds, otherwise fails.
 */
uint32_t pwm_channel_update_duty(Pwm *p_pwm, pwm_channel_t *p_channel,
		uint32_t ul_duty)
{
   80378:	b410      	push	{r4}
	uint32_t ch_num = p_channel->channel;
   8037a:	680c      	ldr	r4, [r1, #0]

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
   8037c:	690b      	ldr	r3, [r1, #16]
   8037e:	4293      	cmp	r3, r2
   80380:	d306      	bcc.n	80390 <pwm_channel_update_duty+0x18>
		return PWM_INVALID_ARGUMENT;
	} else {
		/* Save new duty cycle value */
		p_channel->ul_duty = ul_duty;
   80382:	60ca      	str	r2, [r1, #12]
		mode &= ~PWM_CMR_CPD;
		p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = mode;

		p_pwm->PWM_CH_NUM[ch_num].PWM_CUPD = ul_duty;
#else
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
   80384:	eb00 1044 	add.w	r0, r0, r4, lsl #5
   80388:	f8c0 2208 	str.w	r2, [r0, #520]	; 0x208
#endif
	}

	return 0;
   8038c:	2000      	movs	r0, #0
   8038e:	e001      	b.n	80394 <pwm_channel_update_duty+0x1c>
{
	uint32_t ch_num = p_channel->channel;

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
		return PWM_INVALID_ARGUMENT;
   80390:	f64f 70ff 	movw	r0, #65535	; 0xffff
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
#endif
	}

	return 0;
}
   80394:	f85d 4b04 	ldr.w	r4, [sp], #4
   80398:	4770      	bx	lr
   8039a:	bf00      	nop

0008039c <pwm_channel_enable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_ENA = (1 << ul_channel);
   8039c:	2301      	movs	r3, #1
   8039e:	fa03 f101 	lsl.w	r1, r3, r1
   803a2:	6041      	str	r1, [r0, #4]
   803a4:	4770      	bx	lr
   803a6:	bf00      	nop

000803a8 <pwm_channel_disable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_DIS = (1 << ul_channel);
   803a8:	2301      	movs	r3, #1
   803aa:	fa03 f101 	lsl.w	r1, r3, r1
   803ae:	6081      	str	r1, [r0, #8]
   803b0:	4770      	bx	lr
   803b2:	bf00      	nop

000803b4 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
   803b4:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   803b6:	0189      	lsls	r1, r1, #6
   803b8:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   803ba:	2402      	movs	r4, #2
   803bc:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   803be:	f04f 31ff 	mov.w	r1, #4294967295
   803c2:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   803c4:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   803c6:	605a      	str	r2, [r3, #4]
}
   803c8:	f85d 4b04 	ldr.w	r4, [sp], #4
   803cc:	4770      	bx	lr
   803ce:	bf00      	nop

000803d0 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   803d0:	0189      	lsls	r1, r1, #6
   803d2:	2305      	movs	r3, #5
   803d4:	5043      	str	r3, [r0, r1]
   803d6:	4770      	bx	lr

000803d8 <tc_read_ra>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	return p_tc->TC_CHANNEL[ul_channel].TC_RA;
   803d8:	eb00 1181 	add.w	r1, r0, r1, lsl #6
   803dc:	6948      	ldr	r0, [r1, #20]
}
   803de:	4770      	bx	lr

000803e0 <tc_read_rb>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	return p_tc->TC_CHANNEL[ul_channel].TC_RB;
   803e0:	eb00 1181 	add.w	r1, r0, r1, lsl #6
   803e4:	6988      	ldr	r0, [r1, #24]
}
   803e6:	4770      	bx	lr

000803e8 <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   803e8:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
   803ec:	624a      	str	r2, [r1, #36]	; 0x24
   803ee:	4770      	bx	lr

000803f0 <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   803f0:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
   803f4:	6a08      	ldr	r0, [r1, #32]
}
   803f6:	4770      	bx	lr

000803f8 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   803f8:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   803fa:	23ac      	movs	r3, #172	; 0xac
   803fc:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   803fe:	680a      	ldr	r2, [r1, #0]
   80400:	684b      	ldr	r3, [r1, #4]
   80402:	fbb2 f3f3 	udiv	r3, r2, r3
   80406:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   80408:	1e5c      	subs	r4, r3, #1
   8040a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   8040e:	4294      	cmp	r4, r2
   80410:	d80a      	bhi.n	80428 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
   80412:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   80414:	688b      	ldr	r3, [r1, #8]
   80416:	6043      	str	r3, [r0, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   80418:	f240 2302 	movw	r3, #514	; 0x202
   8041c:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80420:	2350      	movs	r3, #80	; 0x50
   80422:	6003      	str	r3, [r0, #0]

	return 0;
   80424:	2000      	movs	r0, #0
   80426:	e000      	b.n	8042a <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
   80428:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
   8042a:	f85d 4b04 	ldr.w	r4, [sp], #4
   8042e:	4770      	bx	lr

00080430 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   80430:	6943      	ldr	r3, [r0, #20]
   80432:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   80436:	bf1a      	itte	ne
   80438:	61c1      	strne	r1, [r0, #28]
	return 0;
   8043a:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
   8043c:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
   8043e:	4770      	bx	lr

00080440 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   80440:	6943      	ldr	r3, [r0, #20]
   80442:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   80446:	bf1d      	ittte	ne
   80448:	6983      	ldrne	r3, [r0, #24]
   8044a:	700b      	strbne	r3, [r1, #0]
	return 0;
   8044c:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
   8044e:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
   80450:	4770      	bx	lr
   80452:	bf00      	nop

00080454 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   80454:	6943      	ldr	r3, [r0, #20]
   80456:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   8045a:	bf1d      	ittte	ne
   8045c:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   80460:	61c1      	strne	r1, [r0, #28]
	return 0;
   80462:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
   80464:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
   80466:	4770      	bx	lr

00080468 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   80468:	6943      	ldr	r3, [r0, #20]
   8046a:	f013 0f01 	tst.w	r3, #1
   8046e:	d005      	beq.n	8047c <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   80470:	6983      	ldr	r3, [r0, #24]
   80472:	f3c3 0308 	ubfx	r3, r3, #0, #9
   80476:	600b      	str	r3, [r1, #0]

	return 0;
   80478:	2000      	movs	r0, #0
   8047a:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   8047c:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   8047e:	4770      	bx	lr

00080480 <pulse_timer_init_channel>:

 /*
 * \brief Initialize the specified pulse timer channel
 *
 */
static void pulse_timer_init_channel(uint32_t ch_n) {
   80480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   80484:	4606      	mov	r6, r0

	ioport_set_pin_dir(pulse_timers[ch_n].pin, IOPORT_DIR_INPUT);
   80486:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   8048a:	4b3b      	ldr	r3, [pc, #236]	; (80578 <pulse_timer_init_channel+0xf8>)
   8048c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   80490:	6944      	ldr	r4, [r0, #20]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
   80492:	0963      	lsrs	r3, r4, #5
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   80494:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80498:	f203 7307 	addw	r3, r3, #1799	; 0x707
   8049c:	025b      	lsls	r3, r3, #9
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
   8049e:	f004 041f 	and.w	r4, r4, #31
   804a2:	2201      	movs	r2, #1
   804a4:	fa02 f404 	lsl.w	r4, r2, r4
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   804a8:	615c      	str	r4, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   804aa:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
	ioport_set_pin_mode(pulse_timers[ch_n].pin, pulse_timers[ch_n].mux | pulse_timers[ch_n].ioport_mode);
   804ae:	6943      	ldr	r3, [r0, #20]
   804b0:	69c4      	ldr	r4, [r0, #28]
   804b2:	6981      	ldr	r1, [r0, #24]
   804b4:	4321      	orrs	r1, r4
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
   804b6:	f003 001f 	and.w	r0, r3, #31
   804ba:	4082      	lsls	r2, r0
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
   804bc:	095b      	lsrs	r3, r3, #5
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   804be:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   804c2:	f203 7307 	addw	r3, r3, #1799	; 0x707
   804c6:	025b      	lsls	r3, r3, #9
__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
   804c8:	f011 0f08 	tst.w	r1, #8
		base->PIO_PUER = mask;
   804cc:	bf14      	ite	ne
   804ce:	665a      	strne	r2, [r3, #100]	; 0x64
	} else {
		base->PIO_PUDR = mask;
   804d0:	661a      	streq	r2, [r3, #96]	; 0x60
	} else {
		base->PIO_PPDDR = mask;
	}
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
   804d2:	f011 0f20 	tst.w	r1, #32
		base->PIO_MDER = mask;
   804d6:	bf14      	ite	ne
   804d8:	651a      	strne	r2, [r3, #80]	; 0x50
	} else {
		base->PIO_MDDR = mask;
   804da:	655a      	streq	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
   804dc:	f011 0fc0 	tst.w	r1, #192	; 0xc0
		base->PIO_IFER = mask;
   804e0:	bf14      	ite	ne
   804e2:	621a      	strne	r2, [r3, #32]
	} else {
		base->PIO_IFDR = mask;
   804e4:	625a      	streq	r2, [r3, #36]	; 0x24
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
   804e6:	f011 0f80 	tst.w	r1, #128	; 0x80
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
   804ea:	bf14      	ite	ne
   804ec:	f8c3 2084 	strne.w	r2, [r3, #132]	; 0x84
#else
		base->PIO_IFSCER = mask;
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
   804f0:	f8c3 2080 	streq.w	r2, [r3, #128]	; 0x80
		base->PIO_IFSCDR = mask;
#endif
	}

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
   804f4:	f011 0f01 	tst.w	r1, #1
		base->PIO_ABSR |= mask;
   804f8:	6f19      	ldr	r1, [r3, #112]	; 0x70
   804fa:	bf14      	ite	ne
   804fc:	430a      	orrne	r2, r1
	} else {
		base->PIO_ABSR &= ~mask;
   804fe:	ea21 0202 	biceq.w	r2, r1, r2
   80502:	671a      	str	r2, [r3, #112]	; 0x70
	ioport_disable_pin(pulse_timers[ch_n].pin);
   80504:	4d1c      	ldr	r5, [pc, #112]	; (80578 <pulse_timer_init_channel+0xf8>)
   80506:	ea4f 09c6 	mov.w	r9, r6, lsl #3
   8050a:	eb09 0706 	add.w	r7, r9, r6
   8050e:	00bf      	lsls	r7, r7, #2
   80510:	19ec      	adds	r4, r5, r7
   80512:	6963      	ldr	r3, [r4, #20]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
   80514:	f003 021f 	and.w	r2, r3, #31
   80518:	f04f 0801 	mov.w	r8, #1
   8051c:	fa08 f202 	lsl.w	r2, r8, r2
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
   80520:	095b      	lsrs	r3, r3, #5
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   80522:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80526:	f203 7307 	addw	r3, r3, #1799	; 0x707
   8052a:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
   8052c:	605a      	str	r2, [r3, #4]

	pmc_set_writeprotect(false);
   8052e:	2000      	movs	r0, #0
   80530:	4b12      	ldr	r3, [pc, #72]	; (8057c <pulse_timer_init_channel+0xfc>)
   80532:	4798      	blx	r3
	pmc_enable_periph_clk(pulse_timers[ch_n].id);
   80534:	68a0      	ldr	r0, [r4, #8]
   80536:	4b12      	ldr	r3, [pc, #72]	; (80580 <pulse_timer_init_channel+0x100>)
   80538:	4798      	blx	r3

	tc_init(pulse_timers[ch_n].tc, pulse_timers[ch_n].tc_ch, pulse_timers[ch_n].tc_mode);
   8053a:	59e8      	ldr	r0, [r5, r7]
   8053c:	6861      	ldr	r1, [r4, #4]
   8053e:	6922      	ldr	r2, [r4, #16]
   80540:	4b10      	ldr	r3, [pc, #64]	; (80584 <pulse_timer_init_channel+0x104>)
   80542:	4798      	blx	r3

	tc_start(pulse_timers[ch_n].tc, pulse_timers[ch_n].tc_ch);
   80544:	59e8      	ldr	r0, [r5, r7]
   80546:	6861      	ldr	r1, [r4, #4]
   80548:	4b0f      	ldr	r3, [pc, #60]	; (80588 <pulse_timer_init_channel+0x108>)
   8054a:	4798      	blx	r3
	tc_enable_interrupt(pulse_timers[ch_n].tc, pulse_timers[ch_n].tc_ch, TC_IER_LDRBS );
   8054c:	59e8      	ldr	r0, [r5, r7]
   8054e:	6861      	ldr	r1, [r4, #4]
   80550:	2240      	movs	r2, #64	; 0x40
   80552:	4b0e      	ldr	r3, [pc, #56]	; (8058c <pulse_timer_init_channel+0x10c>)
   80554:	4798      	blx	r3
	NVIC_DisableIRQ(pulse_timers[ch_n].IRQn);
   80556:	444e      	add	r6, r9
   80558:	eb05 0586 	add.w	r5, r5, r6, lsl #2
   8055c:	7b2b      	ldrb	r3, [r5, #12]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
   8055e:	b259      	sxtb	r1, r3
   80560:	0949      	lsrs	r1, r1, #5
   80562:	f003 031f 	and.w	r3, r3, #31
   80566:	fa08 f303 	lsl.w	r3, r8, r3
   8056a:	3120      	adds	r1, #32
   8056c:	4a08      	ldr	r2, [pc, #32]	; (80590 <pulse_timer_init_channel+0x110>)
   8056e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
   80572:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80576:	bf00      	nop
   80578:	200701b0 	.word	0x200701b0
   8057c:	00080c9d 	.word	0x00080c9d
   80580:	00080c45 	.word	0x00080c45
   80584:	000803b5 	.word	0x000803b5
   80588:	000803d1 	.word	0x000803d1
   8058c:	000803e9 	.word	0x000803e9
   80590:	e000e100 	.word	0xe000e100

00080594 <pulse_init_channel>:
 * \brief Initialize the specified pulse channel
 *
 * \note Need to call pulse_start(ch_n) to start output
 *
 */
 static void pulse_init_channel(uint32_t ch_n) {
   80594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80598:	4604      	mov	r4, r0
    ioport_set_pin_mode(pulse_channels[ch_n].pin, pulse_channels[ch_n].mux);
   8059a:	ebc0 1200 	rsb	r2, r0, r0, lsl #4
   8059e:	4b29      	ldr	r3, [pc, #164]	; (80644 <pulse_init_channel+0xb0>)
   805a0:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   805a4:	6b13      	ldr	r3, [r2, #48]	; 0x30
   805a6:	6b51      	ldr	r1, [r2, #52]	; 0x34
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
   805a8:	f003 021f 	and.w	r2, r3, #31
   805ac:	2001      	movs	r0, #1
   805ae:	fa00 f202 	lsl.w	r2, r0, r2
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
   805b2:	095b      	lsrs	r3, r3, #5
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   805b4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   805b8:	f203 7307 	addw	r3, r3, #1799	; 0x707
   805bc:	025b      	lsls	r3, r3, #9
__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
   805be:	f011 0f08 	tst.w	r1, #8
		base->PIO_PUER = mask;
   805c2:	bf14      	ite	ne
   805c4:	665a      	strne	r2, [r3, #100]	; 0x64
	} else {
		base->PIO_PUDR = mask;
   805c6:	661a      	streq	r2, [r3, #96]	; 0x60
	} else {
		base->PIO_PPDDR = mask;
	}
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
   805c8:	f011 0f20 	tst.w	r1, #32
		base->PIO_MDER = mask;
   805cc:	bf14      	ite	ne
   805ce:	651a      	strne	r2, [r3, #80]	; 0x50
	} else {
		base->PIO_MDDR = mask;
   805d0:	655a      	streq	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
   805d2:	f011 0fc0 	tst.w	r1, #192	; 0xc0
		base->PIO_IFER = mask;
   805d6:	bf14      	ite	ne
   805d8:	621a      	strne	r2, [r3, #32]
	} else {
		base->PIO_IFDR = mask;
   805da:	625a      	streq	r2, [r3, #36]	; 0x24
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
   805dc:	f011 0f80 	tst.w	r1, #128	; 0x80
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
   805e0:	bf14      	ite	ne
   805e2:	f8c3 2084 	strne.w	r2, [r3, #132]	; 0x84
#else
		base->PIO_IFSCER = mask;
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
   805e6:	f8c3 2080 	streq.w	r2, [r3, #128]	; 0x80
		base->PIO_IFSCDR = mask;
#endif
	}

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
   805ea:	f011 0f01 	tst.w	r1, #1
		base->PIO_ABSR |= mask;
   805ee:	6f19      	ldr	r1, [r3, #112]	; 0x70
   805f0:	bf14      	ite	ne
   805f2:	430a      	orrne	r2, r1
	} else {
		base->PIO_ABSR &= ~mask;
   805f4:	ea21 0202 	biceq.w	r2, r1, r2
   805f8:	671a      	str	r2, [r3, #112]	; 0x70
    ioport_disable_pin(pulse_channels[ch_n].pin);
   805fa:	4d12      	ldr	r5, [pc, #72]	; (80644 <pulse_init_channel+0xb0>)
   805fc:	0127      	lsls	r7, r4, #4
   805fe:	ebc4 0807 	rsb	r8, r4, r7
   80602:	ea4f 0888 	mov.w	r8, r8, lsl #2
   80606:	eb05 0608 	add.w	r6, r5, r8
   8060a:	6b33      	ldr	r3, [r6, #48]	; 0x30
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
   8060c:	f003 021f 	and.w	r2, r3, #31
   80610:	2101      	movs	r1, #1
   80612:	fa01 f202 	lsl.w	r2, r1, r2
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
   80616:	095b      	lsrs	r3, r3, #5
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   80618:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   8061c:	f203 7307 	addw	r3, r3, #1799	; 0x707
   80620:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
   80622:	605a      	str	r2, [r3, #4]

    pmc_enable_periph_clk(pulse_channels[ch_n].id);
   80624:	6af0      	ldr	r0, [r6, #44]	; 0x2c
   80626:	4b08      	ldr	r3, [pc, #32]	; (80648 <pulse_init_channel+0xb4>)
   80628:	4798      	blx	r3
    pwm_channel_disable(pulse_channels[ch_n].pwm, pulse_channels[ch_n].pwm_channel.channel);
   8062a:	f855 0008 	ldr.w	r0, [r5, r8]
   8062e:	6871      	ldr	r1, [r6, #4]
   80630:	4b06      	ldr	r3, [pc, #24]	; (8064c <pulse_init_channel+0xb8>)
   80632:	4798      	blx	r3
    pwm_init(pulse_channels[ch_n].pwm, &pulse_clock_setting);
   80634:	1b3c      	subs	r4, r7, r4
   80636:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   8063a:	4905      	ldr	r1, [pc, #20]	; (80650 <pulse_init_channel+0xbc>)
   8063c:	4b05      	ldr	r3, [pc, #20]	; (80654 <pulse_init_channel+0xc0>)
   8063e:	4798      	blx	r3
   80640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80644:	20070138 	.word	0x20070138
   80648:	00080c45 	.word	0x00080c45
   8064c:	000803a9 	.word	0x000803a9
   80650:	200701f8 	.word	0x200701f8
   80654:	00080235 	.word	0x00080235

00080658 <pulse_timer_start>:

void pulse_timer_start(uint32_t ch_n) {
	//tc_write_ra(pulse_timers[ch_n].tc, pulse_timers[ch_n].tc_ch, 0U);
	//tc_write_rb(pulse_timers[ch_n].tc, pulse_timers[ch_n].tc_ch, 0U);
	//tc_write_rb(pulse_timers[ch_n].tc, pulse_timers[ch_n].tc_ch, 0U);
	NVIC_EnableIRQ(pulse_timers[ch_n].IRQn);
   80658:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   8065c:	4b07      	ldr	r3, [pc, #28]	; (8067c <pulse_timer_start+0x24>)
   8065e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   80662:	7b03      	ldrb	r3, [r0, #12]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   80664:	b259      	sxtb	r1, r3
   80666:	0949      	lsrs	r1, r1, #5
   80668:	f003 031f 	and.w	r3, r3, #31
   8066c:	2201      	movs	r2, #1
   8066e:	fa02 f303 	lsl.w	r3, r2, r3
   80672:	4a03      	ldr	r2, [pc, #12]	; (80680 <pulse_timer_start+0x28>)
   80674:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
   80678:	4770      	bx	lr
   8067a:	bf00      	nop
   8067c:	200701b0 	.word	0x200701b0
   80680:	e000e100 	.word	0xe000e100

00080684 <pulse_timer_get>:
}

uint32_t pulse_timer_get(uint32_t ch_n) {
   80684:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   80688:	4605      	mov	r5, r0
	uint32_t rb = tc_read_rb(pulse_timers[ch_n].tc, pulse_timers[ch_n].tc_ch);
   8068a:	4c0f      	ldr	r4, [pc, #60]	; (806c8 <pulse_timer_get+0x44>)
   8068c:	00c7      	lsls	r7, r0, #3
   8068e:	183e      	adds	r6, r7, r0
   80690:	00b6      	lsls	r6, r6, #2
   80692:	eb04 0806 	add.w	r8, r4, r6
   80696:	59a0      	ldr	r0, [r4, r6]
   80698:	f8d8 1004 	ldr.w	r1, [r8, #4]
   8069c:	4b0b      	ldr	r3, [pc, #44]	; (806cc <pulse_timer_get+0x48>)
   8069e:	4798      	blx	r3
   806a0:	4681      	mov	r9, r0
	uint32_t ra = tc_read_ra(pulse_timers[ch_n].tc, pulse_timers[ch_n].tc_ch);
   806a2:	59a0      	ldr	r0, [r4, r6]
   806a4:	f8d8 1004 	ldr.w	r1, [r8, #4]
   806a8:	4b09      	ldr	r3, [pc, #36]	; (806d0 <pulse_timer_get+0x4c>)
   806aa:	4798      	blx	r3
	uint32_t diff = rb - ra;
   806ac:	ebc0 0009 	rsb	r0, r0, r9
	// Need a better way to do this calculation
	// Calculate the duration in microseconds.
	uint32_t duration = (diff ) / (((CHIP_FREQ_CPU_MAX / pulse_timers[ch_n].divider)/1000)/1000);
   806b0:	443d      	add	r5, r7
   806b2:	eb04 0485 	add.w	r4, r4, r5, lsl #2
   806b6:	6a23      	ldr	r3, [r4, #32]
   806b8:	2254      	movs	r2, #84	; 0x54
   806ba:	fbb2 f3f3 	udiv	r3, r2, r3
	return duration;
}
   806be:	fbb0 f0f3 	udiv	r0, r0, r3
   806c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   806c6:	bf00      	nop
   806c8:	200701b0 	.word	0x200701b0
   806cc:	000803e1 	.word	0x000803e1
   806d0:	000803d9 	.word	0x000803d9

000806d4 <TC1_Handler>:

void TC1_Handler(void) {
   806d4:	b510      	push	{r4, lr}
	tc_get_status(pulse_timers[TC1_Handler_pulse_timer_idx].tc, pulse_timers[TC1_Handler_pulse_timer_idx].tc_ch);
   806d6:	4c09      	ldr	r4, [pc, #36]	; (806fc <TC1_Handler+0x28>)
   806d8:	6820      	ldr	r0, [r4, #0]
   806da:	6861      	ldr	r1, [r4, #4]
   806dc:	4b08      	ldr	r3, [pc, #32]	; (80700 <TC1_Handler+0x2c>)
   806de:	4798      	blx	r3
	NVIC_DisableIRQ(pulse_timers[TC1_Handler_pulse_timer_idx].IRQn);
   806e0:	7b23      	ldrb	r3, [r4, #12]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
   806e2:	b259      	sxtb	r1, r3
   806e4:	0949      	lsrs	r1, r1, #5
   806e6:	f003 031f 	and.w	r3, r3, #31
   806ea:	2201      	movs	r2, #1
   806ec:	fa02 f303 	lsl.w	r3, r2, r3
   806f0:	3120      	adds	r1, #32
   806f2:	4a04      	ldr	r2, [pc, #16]	; (80704 <TC1_Handler+0x30>)
   806f4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
   806f8:	bd10      	pop	{r4, pc}
   806fa:	bf00      	nop
   806fc:	200701b0 	.word	0x200701b0
   80700:	000803f1 	.word	0x000803f1
   80704:	e000e100 	.word	0xe000e100

00080708 <TC0_Handler>:
}

void TC0_Handler(void) {
   80708:	b510      	push	{r4, lr}
	tc_get_status(pulse_timers[TC2_Handler_pulse_timer_idx].tc, pulse_timers[TC2_Handler_pulse_timer_idx].tc_ch);
   8070a:	4c09      	ldr	r4, [pc, #36]	; (80730 <TC0_Handler+0x28>)
   8070c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   8070e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   80710:	4b08      	ldr	r3, [pc, #32]	; (80734 <TC0_Handler+0x2c>)
   80712:	4798      	blx	r3
	NVIC_DisableIRQ(pulse_timers[TC2_Handler_pulse_timer_idx].IRQn);
   80714:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   80718:	b259      	sxtb	r1, r3
   8071a:	0949      	lsrs	r1, r1, #5
   8071c:	f003 031f 	and.w	r3, r3, #31
   80720:	2201      	movs	r2, #1
   80722:	fa02 f303 	lsl.w	r3, r2, r3
   80726:	3120      	adds	r1, #32
   80728:	4a03      	ldr	r2, [pc, #12]	; (80738 <TC0_Handler+0x30>)
   8072a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
   8072e:	bd10      	pop	{r4, pc}
   80730:	200701b0 	.word	0x200701b0
   80734:	000803f1 	.word	0x000803f1
   80738:	e000e100 	.word	0xe000e100

0008073c <pulse_init>:
}


void pulse_init() {
   8073c:	b510      	push	{r4, lr}
    pulse_init_channel(0);
   8073e:	2000      	movs	r0, #0
   80740:	4c04      	ldr	r4, [pc, #16]	; (80754 <pulse_init+0x18>)
   80742:	47a0      	blx	r4
    pulse_init_channel(1);
   80744:	2001      	movs	r0, #1
   80746:	47a0      	blx	r4
	pulse_timer_init_channel(0);
   80748:	2000      	movs	r0, #0
   8074a:	4c03      	ldr	r4, [pc, #12]	; (80758 <pulse_init+0x1c>)
   8074c:	47a0      	blx	r4
	pulse_timer_init_channel(1);
   8074e:	2001      	movs	r0, #1
   80750:	47a0      	blx	r4
   80752:	bd10      	pop	{r4, pc}
   80754:	00080595 	.word	0x00080595
   80758:	00080481 	.word	0x00080481

0008075c <pulse_start>:
}

void pulse_start(uint32_t ch_n) {
   8075c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8075e:	4606      	mov	r6, r0
    pwm_channel_init(pulse_channels[ch_n].pwm, &(pulse_channels[ch_n].pwm_channel));
   80760:	4c08      	ldr	r4, [pc, #32]	; (80784 <pulse_start+0x28>)
   80762:	0107      	lsls	r7, r0, #4
   80764:	1a3d      	subs	r5, r7, r0
   80766:	00ad      	lsls	r5, r5, #2
   80768:	1961      	adds	r1, r4, r5
   8076a:	5960      	ldr	r0, [r4, r5]
   8076c:	3104      	adds	r1, #4
   8076e:	4b06      	ldr	r3, [pc, #24]	; (80788 <pulse_start+0x2c>)
   80770:	4798      	blx	r3
    pwm_channel_enable(pulse_channels[ch_n].pwm, pulse_channels[ch_n].pwm_channel.channel);
   80772:	1bbe      	subs	r6, r7, r6
   80774:	eb04 0686 	add.w	r6, r4, r6, lsl #2
   80778:	5960      	ldr	r0, [r4, r5]
   8077a:	6871      	ldr	r1, [r6, #4]
   8077c:	4b03      	ldr	r3, [pc, #12]	; (8078c <pulse_start+0x30>)
   8077e:	4798      	blx	r3
   80780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80782:	bf00      	nop
   80784:	20070138 	.word	0x20070138
   80788:	00080275 	.word	0x00080275
   8078c:	0008039d 	.word	0x0008039d

00080790 <pulse_set_period>:

void pulse_stop(uint32_t ch_n) {
    pwm_channel_enable(pulse_channels[ch_n].pwm, pulse_channels[ch_n].pwm_channel.channel);
}

uint32_t pulse_set_period(uint32_t ch_n, uint32_t period_us) {
   80790:	b510      	push	{r4, lr}
   80792:	460a      	mov	r2, r1
    if(period_us > pulse_channels[ch_n].dty_max) {
   80794:	ebc0 1100 	rsb	r1, r0, r0, lsl #4
   80798:	4b09      	ldr	r3, [pc, #36]	; (807c0 <pulse_set_period+0x30>)
   8079a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   8079e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   807a0:	4293      	cmp	r3, r2
   807a2:	d30b      	bcc.n	807bc <pulse_set_period+0x2c>
        return 1;
    }
    pwm_channel_update_duty(pulse_channels[ch_n].pwm, &(pulse_channels[ch_n].pwm_channel), period_us);
   807a4:	4b06      	ldr	r3, [pc, #24]	; (807c0 <pulse_set_period+0x30>)
   807a6:	0101      	lsls	r1, r0, #4
   807a8:	1a0c      	subs	r4, r1, r0
   807aa:	eb03 0184 	add.w	r1, r3, r4, lsl #2
   807ae:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   807b2:	3104      	adds	r1, #4
   807b4:	4b03      	ldr	r3, [pc, #12]	; (807c4 <pulse_set_period+0x34>)
   807b6:	4798      	blx	r3
    return 0;
   807b8:	2000      	movs	r0, #0
   807ba:	bd10      	pop	{r4, pc}
    pwm_channel_enable(pulse_channels[ch_n].pwm, pulse_channels[ch_n].pwm_channel.channel);
}

uint32_t pulse_set_period(uint32_t ch_n, uint32_t period_us) {
    if(period_us > pulse_channels[ch_n].dty_max) {
        return 1;
   807bc:	2001      	movs	r0, #1
    }
    pwm_channel_update_duty(pulse_channels[ch_n].pwm, &(pulse_channels[ch_n].pwm_channel), period_us);
    return 0;
   807be:	bd10      	pop	{r4, pc}
   807c0:	20070138 	.word	0x20070138
   807c4:	00080379 	.word	0x00080379

000807c8 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   807c8:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   807ca:	480e      	ldr	r0, [pc, #56]	; (80804 <sysclk_init+0x3c>)
   807cc:	4b0e      	ldr	r3, [pc, #56]	; (80808 <sysclk_init+0x40>)
   807ce:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   807d0:	2000      	movs	r0, #0
   807d2:	213e      	movs	r1, #62	; 0x3e
   807d4:	4b0d      	ldr	r3, [pc, #52]	; (8080c <sysclk_init+0x44>)
   807d6:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   807d8:	4c0d      	ldr	r4, [pc, #52]	; (80810 <sysclk_init+0x48>)
   807da:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   807dc:	2800      	cmp	r0, #0
   807de:	d0fc      	beq.n	807da <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   807e0:	4b0c      	ldr	r3, [pc, #48]	; (80814 <sysclk_init+0x4c>)
   807e2:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   807e4:	4a0c      	ldr	r2, [pc, #48]	; (80818 <sysclk_init+0x50>)
   807e6:	4b0d      	ldr	r3, [pc, #52]	; (8081c <sysclk_init+0x54>)
   807e8:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   807ea:	4c0d      	ldr	r4, [pc, #52]	; (80820 <sysclk_init+0x58>)
   807ec:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   807ee:	2800      	cmp	r0, #0
   807f0:	d0fc      	beq.n	807ec <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   807f2:	2010      	movs	r0, #16
   807f4:	4b0b      	ldr	r3, [pc, #44]	; (80824 <sysclk_init+0x5c>)
   807f6:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   807f8:	4b0b      	ldr	r3, [pc, #44]	; (80828 <sysclk_init+0x60>)
   807fa:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   807fc:	4801      	ldr	r0, [pc, #4]	; (80804 <sysclk_init+0x3c>)
   807fe:	4b02      	ldr	r3, [pc, #8]	; (80808 <sysclk_init+0x40>)
   80800:	4798      	blx	r3
   80802:	bd10      	pop	{r4, pc}
   80804:	0501bd00 	.word	0x0501bd00
   80808:	200700b1 	.word	0x200700b1
   8080c:	00080bc1 	.word	0x00080bc1
   80810:	00080c15 	.word	0x00080c15
   80814:	00080c25 	.word	0x00080c25
   80818:	200d3f01 	.word	0x200d3f01
   8081c:	400e0600 	.word	0x400e0600
   80820:	00080c35 	.word	0x00080c35
   80824:	00080b5d 	.word	0x00080b5d
   80828:	00080d75 	.word	0x00080d75

0008082c <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   8082c:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   8082e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   80832:	4b13      	ldr	r3, [pc, #76]	; (80880 <board_init+0x54>)
   80834:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   80836:	200b      	movs	r0, #11
   80838:	4c12      	ldr	r4, [pc, #72]	; (80884 <board_init+0x58>)
   8083a:	47a0      	blx	r4
   8083c:	200c      	movs	r0, #12
   8083e:	47a0      	blx	r4
   80840:	200d      	movs	r0, #13
   80842:	47a0      	blx	r4
   80844:	200e      	movs	r0, #14
   80846:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   80848:	203b      	movs	r0, #59	; 0x3b
   8084a:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8084e:	4c0e      	ldr	r4, [pc, #56]	; (80888 <board_init+0x5c>)
   80850:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   80852:	2055      	movs	r0, #85	; 0x55
   80854:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80858:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   8085a:	2056      	movs	r0, #86	; 0x56
   8085c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80860:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   80862:	2068      	movs	r0, #104	; 0x68
   80864:	4909      	ldr	r1, [pc, #36]	; (8088c <board_init+0x60>)
   80866:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   80868:	205c      	movs	r0, #92	; 0x5c
   8086a:	4909      	ldr	r1, [pc, #36]	; (80890 <board_init+0x64>)
   8086c:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   8086e:	4809      	ldr	r0, [pc, #36]	; (80894 <board_init+0x68>)
   80870:	f44f 7140 	mov.w	r1, #768	; 0x300
   80874:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   80878:	4b07      	ldr	r3, [pc, #28]	; (80898 <board_init+0x6c>)
   8087a:	4798      	blx	r3
   8087c:	bd10      	pop	{r4, pc}
   8087e:	bf00      	nop
   80880:	400e1a50 	.word	0x400e1a50
   80884:	00080c45 	.word	0x00080c45
   80888:	00080941 	.word	0x00080941
   8088c:	28000079 	.word	0x28000079
   80890:	28000001 	.word	0x28000001
   80894:	400e0e00 	.word	0x400e0e00
   80898:	00080a15 	.word	0x00080a15

0008089c <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   8089c:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   8089e:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   808a2:	d016      	beq.n	808d2 <pio_set_peripheral+0x36>
   808a4:	d804      	bhi.n	808b0 <pio_set_peripheral+0x14>
   808a6:	b1c1      	cbz	r1, 808da <pio_set_peripheral+0x3e>
   808a8:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   808ac:	d00a      	beq.n	808c4 <pio_set_peripheral+0x28>
   808ae:	e013      	b.n	808d8 <pio_set_peripheral+0x3c>
   808b0:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   808b4:	d011      	beq.n	808da <pio_set_peripheral+0x3e>
   808b6:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   808ba:	d00e      	beq.n	808da <pio_set_peripheral+0x3e>
   808bc:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   808c0:	d10a      	bne.n	808d8 <pio_set_peripheral+0x3c>
   808c2:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   808c4:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   808c6:	6f01      	ldr	r1, [r0, #112]	; 0x70
   808c8:	400b      	ands	r3, r1
   808ca:	ea23 0302 	bic.w	r3, r3, r2
   808ce:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   808d0:	e002      	b.n	808d8 <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   808d2:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   808d4:	4313      	orrs	r3, r2
   808d6:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   808d8:	6042      	str	r2, [r0, #4]
   808da:	4770      	bx	lr

000808dc <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   808dc:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   808de:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   808e2:	bf14      	ite	ne
   808e4:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   808e6:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   808e8:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   808ec:	bf14      	ite	ne
   808ee:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   808f0:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   808f2:	f012 0f02 	tst.w	r2, #2
   808f6:	d002      	beq.n	808fe <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   808f8:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   808fc:	e004      	b.n	80908 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   808fe:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   80902:	bf18      	it	ne
   80904:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   80908:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   8090a:	6001      	str	r1, [r0, #0]
   8090c:	4770      	bx	lr
   8090e:	bf00      	nop

00080910 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   80910:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   80912:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80914:	9c01      	ldr	r4, [sp, #4]
   80916:	b10c      	cbz	r4, 8091c <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   80918:	6641      	str	r1, [r0, #100]	; 0x64
   8091a:	e000      	b.n	8091e <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8091c:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   8091e:	b10b      	cbz	r3, 80924 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   80920:	6501      	str	r1, [r0, #80]	; 0x50
   80922:	e000      	b.n	80926 <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   80924:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   80926:	b10a      	cbz	r2, 8092c <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   80928:	6301      	str	r1, [r0, #48]	; 0x30
   8092a:	e000      	b.n	8092e <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   8092c:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   8092e:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   80930:	6001      	str	r1, [r0, #0]
}
   80932:	f85d 4b04 	ldr.w	r4, [sp], #4
   80936:	4770      	bx	lr

00080938 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   80938:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   8093a:	4770      	bx	lr

0008093c <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   8093c:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   8093e:	4770      	bx	lr

00080940 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   80940:	b570      	push	{r4, r5, r6, lr}
   80942:	b082      	sub	sp, #8
   80944:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   80946:	0944      	lsrs	r4, r0, #5
   80948:	f504 1400 	add.w	r4, r4, #2097152	; 0x200000
   8094c:	f204 7407 	addw	r4, r4, #1799	; 0x707
   80950:	0266      	lsls	r6, r4, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   80952:	f001 44f0 	and.w	r4, r1, #2013265920	; 0x78000000
   80956:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   8095a:	d030      	beq.n	809be <pio_configure_pin+0x7e>
   8095c:	d806      	bhi.n	8096c <pio_configure_pin+0x2c>
   8095e:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   80962:	d00a      	beq.n	8097a <pio_configure_pin+0x3a>
   80964:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   80968:	d018      	beq.n	8099c <pio_configure_pin+0x5c>
   8096a:	e049      	b.n	80a00 <pio_configure_pin+0xc0>
   8096c:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   80970:	d030      	beq.n	809d4 <pio_configure_pin+0x94>
   80972:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   80976:	d02d      	beq.n	809d4 <pio_configure_pin+0x94>
   80978:	e042      	b.n	80a00 <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   8097a:	f000 001f 	and.w	r0, r0, #31
   8097e:	2401      	movs	r4, #1
   80980:	4084      	lsls	r4, r0
   80982:	4630      	mov	r0, r6
   80984:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80988:	4622      	mov	r2, r4
   8098a:	4b1f      	ldr	r3, [pc, #124]	; (80a08 <pio_configure_pin+0xc8>)
   8098c:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8098e:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80992:	bf14      	ite	ne
   80994:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80996:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80998:	2001      	movs	r0, #1
   8099a:	e032      	b.n	80a02 <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   8099c:	f000 001f 	and.w	r0, r0, #31
   809a0:	2401      	movs	r4, #1
   809a2:	4084      	lsls	r4, r0
   809a4:	4630      	mov	r0, r6
   809a6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   809aa:	4622      	mov	r2, r4
   809ac:	4b16      	ldr	r3, [pc, #88]	; (80a08 <pio_configure_pin+0xc8>)
   809ae:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   809b0:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   809b4:	bf14      	ite	ne
   809b6:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   809b8:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   809ba:	2001      	movs	r0, #1
   809bc:	e021      	b.n	80a02 <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   809be:	f000 011f 	and.w	r1, r0, #31
   809c2:	2401      	movs	r4, #1
   809c4:	4630      	mov	r0, r6
   809c6:	fa04 f101 	lsl.w	r1, r4, r1
   809ca:	462a      	mov	r2, r5
   809cc:	4b0f      	ldr	r3, [pc, #60]	; (80a0c <pio_configure_pin+0xcc>)
   809ce:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   809d0:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   809d2:	e016      	b.n	80a02 <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   809d4:	f000 011f 	and.w	r1, r0, #31
   809d8:	2401      	movs	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   809da:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   809de:	ea05 0304 	and.w	r3, r5, r4
   809e2:	9300      	str	r3, [sp, #0]
   809e4:	4630      	mov	r0, r6
   809e6:	fa04 f101 	lsl.w	r1, r4, r1
   809ea:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   809ee:	bf14      	ite	ne
   809f0:	2200      	movne	r2, #0
   809f2:	2201      	moveq	r2, #1
   809f4:	f3c5 0380 	ubfx	r3, r5, #2, #1
   809f8:	4d05      	ldr	r5, [pc, #20]	; (80a10 <pio_configure_pin+0xd0>)
   809fa:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
   809fc:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   809fe:	e000      	b.n	80a02 <pio_configure_pin+0xc2>

	default:
		return 0;
   80a00:	2000      	movs	r0, #0
	}

	return 1;
}
   80a02:	b002      	add	sp, #8
   80a04:	bd70      	pop	{r4, r5, r6, pc}
   80a06:	bf00      	nop
   80a08:	0008089d 	.word	0x0008089d
   80a0c:	000808dd 	.word	0x000808dd
   80a10:	00080911 	.word	0x00080911

00080a14 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   80a14:	b5f0      	push	{r4, r5, r6, r7, lr}
   80a16:	b083      	sub	sp, #12
   80a18:	4607      	mov	r7, r0
   80a1a:	460e      	mov	r6, r1
   80a1c:	4615      	mov	r5, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   80a1e:	f002 44f0 	and.w	r4, r2, #2013265920	; 0x78000000
   80a22:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   80a26:	d026      	beq.n	80a76 <pio_configure_pin_group+0x62>
   80a28:	d806      	bhi.n	80a38 <pio_configure_pin_group+0x24>
   80a2a:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   80a2e:	d00a      	beq.n	80a46 <pio_configure_pin_group+0x32>
   80a30:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   80a34:	d013      	beq.n	80a5e <pio_configure_pin_group+0x4a>
   80a36:	e034      	b.n	80aa2 <pio_configure_pin_group+0x8e>
   80a38:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   80a3c:	d01f      	beq.n	80a7e <pio_configure_pin_group+0x6a>
   80a3e:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   80a42:	d01c      	beq.n	80a7e <pio_configure_pin_group+0x6a>
   80a44:	e02d      	b.n	80aa2 <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   80a46:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80a4a:	4632      	mov	r2, r6
   80a4c:	4b16      	ldr	r3, [pc, #88]	; (80aa8 <pio_configure_pin_group+0x94>)
   80a4e:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80a50:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80a54:	bf14      	ite	ne
   80a56:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80a58:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80a5a:	2001      	movs	r0, #1
   80a5c:	e022      	b.n	80aa4 <pio_configure_pin_group+0x90>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   80a5e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80a62:	4632      	mov	r2, r6
   80a64:	4b10      	ldr	r3, [pc, #64]	; (80aa8 <pio_configure_pin_group+0x94>)
   80a66:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80a68:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80a6c:	bf14      	ite	ne
   80a6e:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80a70:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80a72:	2001      	movs	r0, #1
   80a74:	e016      	b.n	80aa4 <pio_configure_pin_group+0x90>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   80a76:	4b0d      	ldr	r3, [pc, #52]	; (80aac <pio_configure_pin_group+0x98>)
   80a78:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80a7a:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   80a7c:	e012      	b.n	80aa4 <pio_configure_pin_group+0x90>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80a7e:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   80a82:	f005 0301 	and.w	r3, r5, #1
   80a86:	9300      	str	r3, [sp, #0]
   80a88:	4638      	mov	r0, r7
   80a8a:	4631      	mov	r1, r6
   80a8c:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80a90:	bf14      	ite	ne
   80a92:	2200      	movne	r2, #0
   80a94:	2201      	moveq	r2, #1
   80a96:	f3c5 0380 	ubfx	r3, r5, #2, #1
   80a9a:	4c05      	ldr	r4, [pc, #20]	; (80ab0 <pio_configure_pin_group+0x9c>)
   80a9c:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   80a9e:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   80aa0:	e000      	b.n	80aa4 <pio_configure_pin_group+0x90>

	default:
		return 0;
   80aa2:	2000      	movs	r0, #0
	}

	return 1;
}
   80aa4:	b003      	add	sp, #12
   80aa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80aa8:	0008089d 	.word	0x0008089d
   80aac:	000808dd 	.word	0x000808dd
   80ab0:	00080911 	.word	0x00080911

00080ab4 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   80ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80ab8:	4604      	mov	r4, r0
   80aba:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   80abc:	4b10      	ldr	r3, [pc, #64]	; (80b00 <pio_handler_process+0x4c>)
   80abe:	4798      	blx	r3
   80ac0:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   80ac2:	4620      	mov	r0, r4
   80ac4:	4b0f      	ldr	r3, [pc, #60]	; (80b04 <pio_handler_process+0x50>)
   80ac6:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   80ac8:	4005      	ands	r5, r0
   80aca:	d017      	beq.n	80afc <pio_handler_process+0x48>
   80acc:	4f0e      	ldr	r7, [pc, #56]	; (80b08 <pio_handler_process+0x54>)
   80ace:	f107 040c 	add.w	r4, r7, #12
   80ad2:	376c      	adds	r7, #108	; 0x6c
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   80ad4:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   80ad8:	42b3      	cmp	r3, r6
   80ada:	d10a      	bne.n	80af2 <pio_handler_process+0x3e>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   80adc:	f854 1c08 	ldr.w	r1, [r4, #-8]
   80ae0:	4229      	tst	r1, r5
   80ae2:	d006      	beq.n	80af2 <pio_handler_process+0x3e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   80ae4:	6823      	ldr	r3, [r4, #0]
   80ae6:	4630      	mov	r0, r6
   80ae8:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   80aea:	f854 3c08 	ldr.w	r3, [r4, #-8]
   80aee:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   80af2:	42bc      	cmp	r4, r7
   80af4:	d002      	beq.n	80afc <pio_handler_process+0x48>
   80af6:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   80af8:	2d00      	cmp	r5, #0
   80afa:	d1eb      	bne.n	80ad4 <pio_handler_process+0x20>
   80afc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80b00:	00080939 	.word	0x00080939
   80b04:	0008093d 	.word	0x0008093d
   80b08:	20070a88 	.word	0x20070a88

00080b0c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   80b0c:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   80b0e:	4802      	ldr	r0, [pc, #8]	; (80b18 <PIOA_Handler+0xc>)
   80b10:	210b      	movs	r1, #11
   80b12:	4b02      	ldr	r3, [pc, #8]	; (80b1c <PIOA_Handler+0x10>)
   80b14:	4798      	blx	r3
   80b16:	bd08      	pop	{r3, pc}
   80b18:	400e0e00 	.word	0x400e0e00
   80b1c:	00080ab5 	.word	0x00080ab5

00080b20 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   80b20:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   80b22:	4802      	ldr	r0, [pc, #8]	; (80b2c <PIOB_Handler+0xc>)
   80b24:	210c      	movs	r1, #12
   80b26:	4b02      	ldr	r3, [pc, #8]	; (80b30 <PIOB_Handler+0x10>)
   80b28:	4798      	blx	r3
   80b2a:	bd08      	pop	{r3, pc}
   80b2c:	400e1000 	.word	0x400e1000
   80b30:	00080ab5 	.word	0x00080ab5

00080b34 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   80b34:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   80b36:	4802      	ldr	r0, [pc, #8]	; (80b40 <PIOC_Handler+0xc>)
   80b38:	210d      	movs	r1, #13
   80b3a:	4b02      	ldr	r3, [pc, #8]	; (80b44 <PIOC_Handler+0x10>)
   80b3c:	4798      	blx	r3
   80b3e:	bd08      	pop	{r3, pc}
   80b40:	400e1200 	.word	0x400e1200
   80b44:	00080ab5 	.word	0x00080ab5

00080b48 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   80b48:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   80b4a:	4802      	ldr	r0, [pc, #8]	; (80b54 <PIOD_Handler+0xc>)
   80b4c:	210e      	movs	r1, #14
   80b4e:	4b02      	ldr	r3, [pc, #8]	; (80b58 <PIOD_Handler+0x10>)
   80b50:	4798      	blx	r3
   80b52:	bd08      	pop	{r3, pc}
   80b54:	400e1400 	.word	0x400e1400
   80b58:	00080ab5 	.word	0x00080ab5

00080b5c <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   80b5c:	4b17      	ldr	r3, [pc, #92]	; (80bbc <pmc_switch_mck_to_pllack+0x60>)
   80b5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80b60:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   80b64:	4310      	orrs	r0, r2
   80b66:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80b68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80b6a:	f013 0f08 	tst.w	r3, #8
   80b6e:	d109      	bne.n	80b84 <pmc_switch_mck_to_pllack+0x28>
   80b70:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80b74:	4911      	ldr	r1, [pc, #68]	; (80bbc <pmc_switch_mck_to_pllack+0x60>)
   80b76:	e001      	b.n	80b7c <pmc_switch_mck_to_pllack+0x20>
			--ul_timeout) {
		if (ul_timeout == 0) {
   80b78:	3b01      	subs	r3, #1
   80b7a:	d019      	beq.n	80bb0 <pmc_switch_mck_to_pllack+0x54>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80b7c:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80b7e:	f012 0f08 	tst.w	r2, #8
   80b82:	d0f9      	beq.n	80b78 <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   80b84:	4b0d      	ldr	r3, [pc, #52]	; (80bbc <pmc_switch_mck_to_pllack+0x60>)
   80b86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80b88:	f022 0203 	bic.w	r2, r2, #3
   80b8c:	f042 0202 	orr.w	r2, r2, #2
   80b90:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80b92:	6e98      	ldr	r0, [r3, #104]	; 0x68
   80b94:	f010 0008 	ands.w	r0, r0, #8
   80b98:	d10c      	bne.n	80bb4 <pmc_switch_mck_to_pllack+0x58>
   80b9a:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80b9e:	4907      	ldr	r1, [pc, #28]	; (80bbc <pmc_switch_mck_to_pllack+0x60>)
   80ba0:	e001      	b.n	80ba6 <pmc_switch_mck_to_pllack+0x4a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   80ba2:	3b01      	subs	r3, #1
   80ba4:	d008      	beq.n	80bb8 <pmc_switch_mck_to_pllack+0x5c>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80ba6:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80ba8:	f012 0f08 	tst.w	r2, #8
   80bac:	d0f9      	beq.n	80ba2 <pmc_switch_mck_to_pllack+0x46>
   80bae:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   80bb0:	2001      	movs	r0, #1
   80bb2:	4770      	bx	lr
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   80bb4:	2000      	movs	r0, #0
   80bb6:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   80bb8:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   80bba:	4770      	bx	lr
   80bbc:	400e0600 	.word	0x400e0600

00080bc0 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   80bc0:	b138      	cbz	r0, 80bd2 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80bc2:	4911      	ldr	r1, [pc, #68]	; (80c08 <pmc_switch_mainck_to_xtal+0x48>)
   80bc4:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   80bc6:	4a11      	ldr	r2, [pc, #68]	; (80c0c <pmc_switch_mainck_to_xtal+0x4c>)
   80bc8:	401a      	ands	r2, r3
   80bca:	4b11      	ldr	r3, [pc, #68]	; (80c10 <pmc_switch_mainck_to_xtal+0x50>)
   80bcc:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80bce:	620b      	str	r3, [r1, #32]
   80bd0:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80bd2:	4a0d      	ldr	r2, [pc, #52]	; (80c08 <pmc_switch_mainck_to_xtal+0x48>)
   80bd4:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   80bd6:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   80bda:	f023 0303 	bic.w	r3, r3, #3
   80bde:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   80be2:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   80be6:	0209      	lsls	r1, r1, #8
   80be8:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   80bea:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80bec:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   80bee:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80bf0:	f013 0f01 	tst.w	r3, #1
   80bf4:	d0fb      	beq.n	80bee <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   80bf6:	4a04      	ldr	r2, [pc, #16]	; (80c08 <pmc_switch_mainck_to_xtal+0x48>)
   80bf8:	6a13      	ldr	r3, [r2, #32]
   80bfa:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   80bfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   80c02:	6213      	str	r3, [r2, #32]
   80c04:	4770      	bx	lr
   80c06:	bf00      	nop
   80c08:	400e0600 	.word	0x400e0600
   80c0c:	fec8fffc 	.word	0xfec8fffc
   80c10:	01370002 	.word	0x01370002

00080c14 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   80c14:	4b02      	ldr	r3, [pc, #8]	; (80c20 <pmc_osc_is_ready_mainck+0xc>)
   80c16:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80c18:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   80c1c:	4770      	bx	lr
   80c1e:	bf00      	nop
   80c20:	400e0600 	.word	0x400e0600

00080c24 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   80c24:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   80c28:	4b01      	ldr	r3, [pc, #4]	; (80c30 <pmc_disable_pllack+0xc>)
   80c2a:	629a      	str	r2, [r3, #40]	; 0x28
   80c2c:	4770      	bx	lr
   80c2e:	bf00      	nop
   80c30:	400e0600 	.word	0x400e0600

00080c34 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   80c34:	4b02      	ldr	r3, [pc, #8]	; (80c40 <pmc_is_locked_pllack+0xc>)
   80c36:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80c38:	f000 0002 	and.w	r0, r0, #2
   80c3c:	4770      	bx	lr
   80c3e:	bf00      	nop
   80c40:	400e0600 	.word	0x400e0600

00080c44 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   80c44:	282c      	cmp	r0, #44	; 0x2c
   80c46:	d820      	bhi.n	80c8a <pmc_enable_periph_clk+0x46>
		return 1;
	}

	if (ul_id < 32) {
   80c48:	281f      	cmp	r0, #31
   80c4a:	d80d      	bhi.n	80c68 <pmc_enable_periph_clk+0x24>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   80c4c:	4b12      	ldr	r3, [pc, #72]	; (80c98 <pmc_enable_periph_clk+0x54>)
   80c4e:	699a      	ldr	r2, [r3, #24]
   80c50:	2301      	movs	r3, #1
   80c52:	4083      	lsls	r3, r0
   80c54:	401a      	ands	r2, r3
   80c56:	4293      	cmp	r3, r2
   80c58:	d019      	beq.n	80c8e <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER0 = 1 << ul_id;
   80c5a:	2301      	movs	r3, #1
   80c5c:	fa03 f000 	lsl.w	r0, r3, r0
   80c60:	4b0d      	ldr	r3, [pc, #52]	; (80c98 <pmc_enable_periph_clk+0x54>)
   80c62:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80c64:	2000      	movs	r0, #0
   80c66:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80c68:	4b0b      	ldr	r3, [pc, #44]	; (80c98 <pmc_enable_periph_clk+0x54>)
   80c6a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
	} else {
		ul_id -= 32;
   80c6e:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80c70:	2301      	movs	r3, #1
   80c72:	4083      	lsls	r3, r0
   80c74:	401a      	ands	r2, r3
   80c76:	4293      	cmp	r3, r2
   80c78:	d00b      	beq.n	80c92 <pmc_enable_periph_clk+0x4e>
			PMC->PMC_PCER1 = 1 << ul_id;
   80c7a:	2301      	movs	r3, #1
   80c7c:	fa03 f000 	lsl.w	r0, r3, r0
   80c80:	4b05      	ldr	r3, [pc, #20]	; (80c98 <pmc_enable_periph_clk+0x54>)
   80c82:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   80c86:	2000      	movs	r0, #0
   80c88:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   80c8a:	2001      	movs	r0, #1
   80c8c:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80c8e:	2000      	movs	r0, #0
   80c90:	4770      	bx	lr
   80c92:	2000      	movs	r0, #0
}
   80c94:	4770      	bx	lr
   80c96:	bf00      	nop
   80c98:	400e0600 	.word	0x400e0600

00080c9c <pmc_set_writeprotect>:
 *
 * \param ul_enable 1 to enable, 0 to disable.
 */
void pmc_set_writeprotect(uint32_t ul_enable)
{
	if (ul_enable) {
   80c9c:	b120      	cbz	r0, 80ca8 <pmc_set_writeprotect+0xc>
		PMC->PMC_WPMR = PMC_WPMR_WPKEY_PASSWD | PMC_WPMR_WPEN;
   80c9e:	4a05      	ldr	r2, [pc, #20]	; (80cb4 <pmc_set_writeprotect+0x18>)
   80ca0:	4b05      	ldr	r3, [pc, #20]	; (80cb8 <pmc_set_writeprotect+0x1c>)
   80ca2:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
   80ca6:	4770      	bx	lr
	} else {
		PMC->PMC_WPMR = PMC_WPMR_WPKEY_PASSWD;
   80ca8:	4a04      	ldr	r2, [pc, #16]	; (80cbc <pmc_set_writeprotect+0x20>)
   80caa:	4b03      	ldr	r3, [pc, #12]	; (80cb8 <pmc_set_writeprotect+0x1c>)
   80cac:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
   80cb0:	4770      	bx	lr
   80cb2:	bf00      	nop
   80cb4:	504d4301 	.word	0x504d4301
   80cb8:	400e0600 	.word	0x400e0600
   80cbc:	504d4300 	.word	0x504d4300

00080cc0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80cc0:	e7fe      	b.n	80cc0 <Dummy_Handler>
   80cc2:	bf00      	nop

00080cc4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   80cc4:	b510      	push	{r4, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   80cc6:	4b1e      	ldr	r3, [pc, #120]	; (80d40 <Reset_Handler+0x7c>)
   80cc8:	4a1e      	ldr	r2, [pc, #120]	; (80d44 <Reset_Handler+0x80>)
   80cca:	429a      	cmp	r2, r3
   80ccc:	d003      	beq.n	80cd6 <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   80cce:	4b1e      	ldr	r3, [pc, #120]	; (80d48 <Reset_Handler+0x84>)
   80cd0:	4a1b      	ldr	r2, [pc, #108]	; (80d40 <Reset_Handler+0x7c>)
   80cd2:	429a      	cmp	r2, r3
   80cd4:	d304      	bcc.n	80ce0 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80cd6:	4b1d      	ldr	r3, [pc, #116]	; (80d4c <Reset_Handler+0x88>)
   80cd8:	4a1d      	ldr	r2, [pc, #116]	; (80d50 <Reset_Handler+0x8c>)
   80cda:	429a      	cmp	r2, r3
   80cdc:	d30f      	bcc.n	80cfe <Reset_Handler+0x3a>
   80cde:	e01a      	b.n	80d16 <Reset_Handler+0x52>
   80ce0:	4b1c      	ldr	r3, [pc, #112]	; (80d54 <Reset_Handler+0x90>)
   80ce2:	4c1d      	ldr	r4, [pc, #116]	; (80d58 <Reset_Handler+0x94>)
   80ce4:	1ae4      	subs	r4, r4, r3
   80ce6:	f024 0403 	bic.w	r4, r4, #3
   80cea:	3404      	adds	r4, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   80cec:	2300      	movs	r3, #0
			*pDest++ = *pSrc++;
   80cee:	4814      	ldr	r0, [pc, #80]	; (80d40 <Reset_Handler+0x7c>)
   80cf0:	4914      	ldr	r1, [pc, #80]	; (80d44 <Reset_Handler+0x80>)
   80cf2:	585a      	ldr	r2, [r3, r1]
   80cf4:	501a      	str	r2, [r3, r0]
   80cf6:	3304      	adds	r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   80cf8:	42a3      	cmp	r3, r4
   80cfa:	d1fa      	bne.n	80cf2 <Reset_Handler+0x2e>
   80cfc:	e7eb      	b.n	80cd6 <Reset_Handler+0x12>
   80cfe:	4b17      	ldr	r3, [pc, #92]	; (80d5c <Reset_Handler+0x98>)
   80d00:	4917      	ldr	r1, [pc, #92]	; (80d60 <Reset_Handler+0x9c>)
   80d02:	1ac9      	subs	r1, r1, r3
   80d04:	f021 0103 	bic.w	r1, r1, #3
   80d08:	1d1a      	adds	r2, r3, #4
   80d0a:	4411      	add	r1, r2
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   80d0c:	2200      	movs	r2, #0
   80d0e:	f843 2f04 	str.w	r2, [r3, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80d12:	428b      	cmp	r3, r1
   80d14:	d1fb      	bne.n	80d0e <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   80d16:	4a13      	ldr	r2, [pc, #76]	; (80d64 <Reset_Handler+0xa0>)
   80d18:	f022 4360 	bic.w	r3, r2, #3758096384	; 0xe0000000
   80d1c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   80d20:	4911      	ldr	r1, [pc, #68]	; (80d68 <Reset_Handler+0xa4>)
   80d22:	608b      	str	r3, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   80d24:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
   80d28:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
   80d2c:	d203      	bcs.n	80d36 <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   80d2e:	688a      	ldr	r2, [r1, #8]
   80d30:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   80d34:	608a      	str	r2, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   80d36:	4b0d      	ldr	r3, [pc, #52]	; (80d6c <Reset_Handler+0xa8>)
   80d38:	4798      	blx	r3

	/* Branch to main function */
	main();
   80d3a:	4b0d      	ldr	r3, [pc, #52]	; (80d70 <Reset_Handler+0xac>)
   80d3c:	4798      	blx	r3
   80d3e:	e7fe      	b.n	80d3e <Reset_Handler+0x7a>
   80d40:	20070000 	.word	0x20070000
   80d44:	0008420c 	.word	0x0008420c
   80d48:	20070a6c 	.word	0x20070a6c
   80d4c:	20070b40 	.word	0x20070b40
   80d50:	20070a6c 	.word	0x20070a6c
   80d54:	20070004 	.word	0x20070004
   80d58:	20070a6f 	.word	0x20070a6f
   80d5c:	20070a68 	.word	0x20070a68
   80d60:	20070b3b 	.word	0x20070b3b
   80d64:	00080000 	.word	0x00080000
   80d68:	e000ed00 	.word	0xe000ed00
   80d6c:	00081189 	.word	0x00081189
   80d70:	000810ad 	.word	0x000810ad

00080d74 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   80d74:	4b3e      	ldr	r3, [pc, #248]	; (80e70 <SystemCoreClockUpdate+0xfc>)
   80d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80d78:	f003 0303 	and.w	r3, r3, #3
   80d7c:	2b03      	cmp	r3, #3
   80d7e:	d85f      	bhi.n	80e40 <SystemCoreClockUpdate+0xcc>
   80d80:	e8df f003 	tbb	[pc, r3]
   80d84:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   80d88:	4b3a      	ldr	r3, [pc, #232]	; (80e74 <SystemCoreClockUpdate+0x100>)
   80d8a:	695b      	ldr	r3, [r3, #20]
   80d8c:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   80d90:	bf14      	ite	ne
   80d92:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   80d96:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   80d9a:	4b37      	ldr	r3, [pc, #220]	; (80e78 <SystemCoreClockUpdate+0x104>)
   80d9c:	601a      	str	r2, [r3, #0]
   80d9e:	e04f      	b.n	80e40 <SystemCoreClockUpdate+0xcc>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80da0:	4b33      	ldr	r3, [pc, #204]	; (80e70 <SystemCoreClockUpdate+0xfc>)
   80da2:	6a1b      	ldr	r3, [r3, #32]
   80da4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80da8:	d003      	beq.n	80db2 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80daa:	4a34      	ldr	r2, [pc, #208]	; (80e7c <SystemCoreClockUpdate+0x108>)
   80dac:	4b32      	ldr	r3, [pc, #200]	; (80e78 <SystemCoreClockUpdate+0x104>)
   80dae:	601a      	str	r2, [r3, #0]
   80db0:	e046      	b.n	80e40 <SystemCoreClockUpdate+0xcc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80db2:	4a33      	ldr	r2, [pc, #204]	; (80e80 <SystemCoreClockUpdate+0x10c>)
   80db4:	4b30      	ldr	r3, [pc, #192]	; (80e78 <SystemCoreClockUpdate+0x104>)
   80db6:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80db8:	4b2d      	ldr	r3, [pc, #180]	; (80e70 <SystemCoreClockUpdate+0xfc>)
   80dba:	6a1b      	ldr	r3, [r3, #32]
   80dbc:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80dc0:	2b10      	cmp	r3, #16
   80dc2:	d002      	beq.n	80dca <SystemCoreClockUpdate+0x56>
   80dc4:	2b20      	cmp	r3, #32
   80dc6:	d004      	beq.n	80dd2 <SystemCoreClockUpdate+0x5e>
   80dc8:	e03a      	b.n	80e40 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   80dca:	4a2e      	ldr	r2, [pc, #184]	; (80e84 <SystemCoreClockUpdate+0x110>)
   80dcc:	4b2a      	ldr	r3, [pc, #168]	; (80e78 <SystemCoreClockUpdate+0x104>)
   80dce:	601a      	str	r2, [r3, #0]
				break;
   80dd0:	e036      	b.n	80e40 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   80dd2:	4a2a      	ldr	r2, [pc, #168]	; (80e7c <SystemCoreClockUpdate+0x108>)
   80dd4:	4b28      	ldr	r3, [pc, #160]	; (80e78 <SystemCoreClockUpdate+0x104>)
   80dd6:	601a      	str	r2, [r3, #0]
				break;
   80dd8:	e032      	b.n	80e40 <SystemCoreClockUpdate+0xcc>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80dda:	4b25      	ldr	r3, [pc, #148]	; (80e70 <SystemCoreClockUpdate+0xfc>)
   80ddc:	6a1b      	ldr	r3, [r3, #32]
   80dde:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80de2:	d003      	beq.n	80dec <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80de4:	4a25      	ldr	r2, [pc, #148]	; (80e7c <SystemCoreClockUpdate+0x108>)
   80de6:	4b24      	ldr	r3, [pc, #144]	; (80e78 <SystemCoreClockUpdate+0x104>)
   80de8:	601a      	str	r2, [r3, #0]
   80dea:	e012      	b.n	80e12 <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80dec:	4a24      	ldr	r2, [pc, #144]	; (80e80 <SystemCoreClockUpdate+0x10c>)
   80dee:	4b22      	ldr	r3, [pc, #136]	; (80e78 <SystemCoreClockUpdate+0x104>)
   80df0:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80df2:	4b1f      	ldr	r3, [pc, #124]	; (80e70 <SystemCoreClockUpdate+0xfc>)
   80df4:	6a1b      	ldr	r3, [r3, #32]
   80df6:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80dfa:	2b10      	cmp	r3, #16
   80dfc:	d002      	beq.n	80e04 <SystemCoreClockUpdate+0x90>
   80dfe:	2b20      	cmp	r3, #32
   80e00:	d004      	beq.n	80e0c <SystemCoreClockUpdate+0x98>
   80e02:	e006      	b.n	80e12 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   80e04:	4a1f      	ldr	r2, [pc, #124]	; (80e84 <SystemCoreClockUpdate+0x110>)
   80e06:	4b1c      	ldr	r3, [pc, #112]	; (80e78 <SystemCoreClockUpdate+0x104>)
   80e08:	601a      	str	r2, [r3, #0]
				break;
   80e0a:	e002      	b.n	80e12 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   80e0c:	4a1b      	ldr	r2, [pc, #108]	; (80e7c <SystemCoreClockUpdate+0x108>)
   80e0e:	4b1a      	ldr	r3, [pc, #104]	; (80e78 <SystemCoreClockUpdate+0x104>)
   80e10:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   80e12:	4b17      	ldr	r3, [pc, #92]	; (80e70 <SystemCoreClockUpdate+0xfc>)
   80e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80e16:	f003 0303 	and.w	r3, r3, #3
   80e1a:	2b02      	cmp	r3, #2
   80e1c:	d10d      	bne.n	80e3a <SystemCoreClockUpdate+0xc6>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80e1e:	4b14      	ldr	r3, [pc, #80]	; (80e70 <SystemCoreClockUpdate+0xfc>)
   80e20:	6a98      	ldr	r0, [r3, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80e22:	6a99      	ldr	r1, [r3, #40]	; 0x28
   80e24:	4b14      	ldr	r3, [pc, #80]	; (80e78 <SystemCoreClockUpdate+0x104>)
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80e26:	f3c0 400a 	ubfx	r0, r0, #16, #11
   80e2a:	681a      	ldr	r2, [r3, #0]
   80e2c:	fb00 2202 	mla	r2, r0, r2, r2
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80e30:	b2c9      	uxtb	r1, r1
   80e32:	fbb2 f2f1 	udiv	r2, r2, r1
   80e36:	601a      	str	r2, [r3, #0]
   80e38:	e002      	b.n	80e40 <SystemCoreClockUpdate+0xcc>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   80e3a:	4a13      	ldr	r2, [pc, #76]	; (80e88 <SystemCoreClockUpdate+0x114>)
   80e3c:	4b0e      	ldr	r3, [pc, #56]	; (80e78 <SystemCoreClockUpdate+0x104>)
   80e3e:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   80e40:	4b0b      	ldr	r3, [pc, #44]	; (80e70 <SystemCoreClockUpdate+0xfc>)
   80e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80e44:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80e48:	2b70      	cmp	r3, #112	; 0x70
   80e4a:	d107      	bne.n	80e5c <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
   80e4c:	4b0a      	ldr	r3, [pc, #40]	; (80e78 <SystemCoreClockUpdate+0x104>)
   80e4e:	681a      	ldr	r2, [r3, #0]
   80e50:	490e      	ldr	r1, [pc, #56]	; (80e8c <SystemCoreClockUpdate+0x118>)
   80e52:	fba1 0202 	umull	r0, r2, r1, r2
   80e56:	0852      	lsrs	r2, r2, #1
   80e58:	601a      	str	r2, [r3, #0]
   80e5a:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   80e5c:	4b04      	ldr	r3, [pc, #16]	; (80e70 <SystemCoreClockUpdate+0xfc>)
   80e5e:	6b19      	ldr	r1, [r3, #48]	; 0x30
   80e60:	4b05      	ldr	r3, [pc, #20]	; (80e78 <SystemCoreClockUpdate+0x104>)
   80e62:	f3c1 1102 	ubfx	r1, r1, #4, #3
   80e66:	681a      	ldr	r2, [r3, #0]
   80e68:	40ca      	lsrs	r2, r1
   80e6a:	601a      	str	r2, [r3, #0]
   80e6c:	4770      	bx	lr
   80e6e:	bf00      	nop
   80e70:	400e0600 	.word	0x400e0600
   80e74:	400e1a10 	.word	0x400e1a10
   80e78:	20070204 	.word	0x20070204
   80e7c:	00b71b00 	.word	0x00b71b00
   80e80:	003d0900 	.word	0x003d0900
   80e84:	007a1200 	.word	0x007a1200
   80e88:	0e4e1c00 	.word	0x0e4e1c00
   80e8c:	aaaaaaab 	.word	0xaaaaaaab

00080e90 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   80e90:	4b09      	ldr	r3, [pc, #36]	; (80eb8 <_sbrk+0x28>)
   80e92:	681b      	ldr	r3, [r3, #0]
   80e94:	b913      	cbnz	r3, 80e9c <_sbrk+0xc>
		heap = (unsigned char *)&_end;
   80e96:	4a09      	ldr	r2, [pc, #36]	; (80ebc <_sbrk+0x2c>)
   80e98:	4b07      	ldr	r3, [pc, #28]	; (80eb8 <_sbrk+0x28>)
   80e9a:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   80e9c:	4b06      	ldr	r3, [pc, #24]	; (80eb8 <_sbrk+0x28>)
   80e9e:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   80ea0:	181a      	adds	r2, r3, r0
   80ea2:	4907      	ldr	r1, [pc, #28]	; (80ec0 <_sbrk+0x30>)
   80ea4:	4291      	cmp	r1, r2
   80ea6:	db04      	blt.n	80eb2 <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
   80ea8:	4610      	mov	r0, r2
   80eaa:	4a03      	ldr	r2, [pc, #12]	; (80eb8 <_sbrk+0x28>)
   80eac:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   80eae:	4618      	mov	r0, r3
   80eb0:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
   80eb2:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
   80eb6:	4770      	bx	lr
   80eb8:	20070af8 	.word	0x20070af8
   80ebc:	20072b40 	.word	0x20072b40
   80ec0:	20087ffc 	.word	0x20087ffc

00080ec4 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   80ec4:	f04f 30ff 	mov.w	r0, #4294967295
   80ec8:	4770      	bx	lr
   80eca:	bf00      	nop

00080ecc <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   80ecc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   80ed0:	604b      	str	r3, [r1, #4]

	return 0;
}
   80ed2:	2000      	movs	r0, #0
   80ed4:	4770      	bx	lr
   80ed6:	bf00      	nop

00080ed8 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   80ed8:	2001      	movs	r0, #1
   80eda:	4770      	bx	lr

00080edc <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   80edc:	2000      	movs	r0, #0
   80ede:	4770      	bx	lr

00080ee0 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   80ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
   80ee2:	b083      	sub	sp, #12
   80ee4:	4604      	mov	r4, r0
   80ee6:	460d      	mov	r5, r1
	uint32_t val = 0;
   80ee8:	2300      	movs	r3, #0
   80eea:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   80eec:	4b1f      	ldr	r3, [pc, #124]	; (80f6c <usart_serial_getchar+0x8c>)
   80eee:	4298      	cmp	r0, r3
   80ef0:	d107      	bne.n	80f02 <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
   80ef2:	461f      	mov	r7, r3
   80ef4:	4e1e      	ldr	r6, [pc, #120]	; (80f70 <usart_serial_getchar+0x90>)
   80ef6:	4638      	mov	r0, r7
   80ef8:	4629      	mov	r1, r5
   80efa:	47b0      	blx	r6
   80efc:	2800      	cmp	r0, #0
   80efe:	d1fa      	bne.n	80ef6 <usart_serial_getchar+0x16>
   80f00:	e019      	b.n	80f36 <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80f02:	4b1c      	ldr	r3, [pc, #112]	; (80f74 <usart_serial_getchar+0x94>)
   80f04:	4298      	cmp	r0, r3
   80f06:	d109      	bne.n	80f1c <usart_serial_getchar+0x3c>
		while (usart_read(p_usart, &val));
   80f08:	461f      	mov	r7, r3
   80f0a:	4e1b      	ldr	r6, [pc, #108]	; (80f78 <usart_serial_getchar+0x98>)
   80f0c:	4638      	mov	r0, r7
   80f0e:	a901      	add	r1, sp, #4
   80f10:	47b0      	blx	r6
   80f12:	2800      	cmp	r0, #0
   80f14:	d1fa      	bne.n	80f0c <usart_serial_getchar+0x2c>
		*data = (uint8_t)(val & 0xFF);
   80f16:	9b01      	ldr	r3, [sp, #4]
   80f18:	702b      	strb	r3, [r5, #0]
   80f1a:	e019      	b.n	80f50 <usart_serial_getchar+0x70>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80f1c:	4b17      	ldr	r3, [pc, #92]	; (80f7c <usart_serial_getchar+0x9c>)
   80f1e:	4298      	cmp	r0, r3
   80f20:	d109      	bne.n	80f36 <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
   80f22:	461e      	mov	r6, r3
   80f24:	4c14      	ldr	r4, [pc, #80]	; (80f78 <usart_serial_getchar+0x98>)
   80f26:	4630      	mov	r0, r6
   80f28:	a901      	add	r1, sp, #4
   80f2a:	47a0      	blx	r4
   80f2c:	2800      	cmp	r0, #0
   80f2e:	d1fa      	bne.n	80f26 <usart_serial_getchar+0x46>
		*data = (uint8_t)(val & 0xFF);
   80f30:	9b01      	ldr	r3, [sp, #4]
   80f32:	702b      	strb	r3, [r5, #0]
   80f34:	e018      	b.n	80f68 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80f36:	4b12      	ldr	r3, [pc, #72]	; (80f80 <usart_serial_getchar+0xa0>)
   80f38:	429c      	cmp	r4, r3
   80f3a:	d109      	bne.n	80f50 <usart_serial_getchar+0x70>
		while (usart_read(p_usart, &val));
   80f3c:	461e      	mov	r6, r3
   80f3e:	4c0e      	ldr	r4, [pc, #56]	; (80f78 <usart_serial_getchar+0x98>)
   80f40:	4630      	mov	r0, r6
   80f42:	a901      	add	r1, sp, #4
   80f44:	47a0      	blx	r4
   80f46:	2800      	cmp	r0, #0
   80f48:	d1fa      	bne.n	80f40 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
   80f4a:	9b01      	ldr	r3, [sp, #4]
   80f4c:	702b      	strb	r3, [r5, #0]
   80f4e:	e00b      	b.n	80f68 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80f50:	4b0c      	ldr	r3, [pc, #48]	; (80f84 <usart_serial_getchar+0xa4>)
   80f52:	429c      	cmp	r4, r3
   80f54:	d108      	bne.n	80f68 <usart_serial_getchar+0x88>
		while (usart_read(p_usart, &val));
   80f56:	461e      	mov	r6, r3
   80f58:	4c07      	ldr	r4, [pc, #28]	; (80f78 <usart_serial_getchar+0x98>)
   80f5a:	4630      	mov	r0, r6
   80f5c:	a901      	add	r1, sp, #4
   80f5e:	47a0      	blx	r4
   80f60:	2800      	cmp	r0, #0
   80f62:	d1fa      	bne.n	80f5a <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
   80f64:	9b01      	ldr	r3, [sp, #4]
   80f66:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   80f68:	b003      	add	sp, #12
   80f6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80f6c:	400e0800 	.word	0x400e0800
   80f70:	00080441 	.word	0x00080441
   80f74:	40098000 	.word	0x40098000
   80f78:	00080469 	.word	0x00080469
   80f7c:	4009c000 	.word	0x4009c000
   80f80:	400a0000 	.word	0x400a0000
   80f84:	400a4000 	.word	0x400a4000

00080f88 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   80f88:	b570      	push	{r4, r5, r6, lr}
   80f8a:	460c      	mov	r4, r1
#ifdef UART
	if (UART == (Uart*)p_usart) {
   80f8c:	4b21      	ldr	r3, [pc, #132]	; (81014 <usart_serial_putchar+0x8c>)
   80f8e:	4298      	cmp	r0, r3
   80f90:	d107      	bne.n	80fa2 <usart_serial_putchar+0x1a>
		while (uart_write((Uart*)p_usart, c)!=0);
   80f92:	461e      	mov	r6, r3
   80f94:	4d20      	ldr	r5, [pc, #128]	; (81018 <usart_serial_putchar+0x90>)
   80f96:	4630      	mov	r0, r6
   80f98:	4621      	mov	r1, r4
   80f9a:	47a8      	blx	r5
   80f9c:	2800      	cmp	r0, #0
   80f9e:	d1fa      	bne.n	80f96 <usart_serial_putchar+0xe>
   80fa0:	e02b      	b.n	80ffa <usart_serial_putchar+0x72>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80fa2:	4b1e      	ldr	r3, [pc, #120]	; (8101c <usart_serial_putchar+0x94>)
   80fa4:	4298      	cmp	r0, r3
   80fa6:	d107      	bne.n	80fb8 <usart_serial_putchar+0x30>
		while (usart_write(p_usart, c)!=0);
   80fa8:	461e      	mov	r6, r3
   80faa:	4d1d      	ldr	r5, [pc, #116]	; (81020 <usart_serial_putchar+0x98>)
   80fac:	4630      	mov	r0, r6
   80fae:	4621      	mov	r1, r4
   80fb0:	47a8      	blx	r5
   80fb2:	2800      	cmp	r0, #0
   80fb4:	d1fa      	bne.n	80fac <usart_serial_putchar+0x24>
   80fb6:	e022      	b.n	80ffe <usart_serial_putchar+0x76>
		return 1;
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80fb8:	4b1a      	ldr	r3, [pc, #104]	; (81024 <usart_serial_putchar+0x9c>)
   80fba:	4298      	cmp	r0, r3
   80fbc:	d107      	bne.n	80fce <usart_serial_putchar+0x46>
		while (usart_write(p_usart, c)!=0);
   80fbe:	461e      	mov	r6, r3
   80fc0:	4d17      	ldr	r5, [pc, #92]	; (81020 <usart_serial_putchar+0x98>)
   80fc2:	4630      	mov	r0, r6
   80fc4:	4621      	mov	r1, r4
   80fc6:	47a8      	blx	r5
   80fc8:	2800      	cmp	r0, #0
   80fca:	d1fa      	bne.n	80fc2 <usart_serial_putchar+0x3a>
   80fcc:	e019      	b.n	81002 <usart_serial_putchar+0x7a>
		return 1;
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80fce:	4b16      	ldr	r3, [pc, #88]	; (81028 <usart_serial_putchar+0xa0>)
   80fd0:	4298      	cmp	r0, r3
   80fd2:	d107      	bne.n	80fe4 <usart_serial_putchar+0x5c>
		while (usart_write(p_usart, c)!=0);
   80fd4:	461e      	mov	r6, r3
   80fd6:	4d12      	ldr	r5, [pc, #72]	; (81020 <usart_serial_putchar+0x98>)
   80fd8:	4630      	mov	r0, r6
   80fda:	4621      	mov	r1, r4
   80fdc:	47a8      	blx	r5
   80fde:	2800      	cmp	r0, #0
   80fe0:	d1fa      	bne.n	80fd8 <usart_serial_putchar+0x50>
   80fe2:	e010      	b.n	81006 <usart_serial_putchar+0x7e>
		return 1;
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80fe4:	4b11      	ldr	r3, [pc, #68]	; (8102c <usart_serial_putchar+0xa4>)
   80fe6:	4298      	cmp	r0, r3
   80fe8:	d10f      	bne.n	8100a <usart_serial_putchar+0x82>
		while (usart_write(p_usart, c)!=0);
   80fea:	461e      	mov	r6, r3
   80fec:	4d0c      	ldr	r5, [pc, #48]	; (81020 <usart_serial_putchar+0x98>)
   80fee:	4630      	mov	r0, r6
   80ff0:	4621      	mov	r1, r4
   80ff2:	47a8      	blx	r5
   80ff4:	2800      	cmp	r0, #0
   80ff6:	d1fa      	bne.n	80fee <usart_serial_putchar+0x66>
   80ff8:	e009      	b.n	8100e <usart_serial_putchar+0x86>
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
   80ffa:	2001      	movs	r0, #1
   80ffc:	bd70      	pop	{r4, r5, r6, pc}
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   80ffe:	2001      	movs	r0, #1
   81000:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   81002:	2001      	movs	r0, #1
   81004:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   81006:	2001      	movs	r0, #1
   81008:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   8100a:	2000      	movs	r0, #0
   8100c:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   8100e:	2001      	movs	r0, #1
	}
# endif
#endif /* ifdef USART */

	return 0;
}
   81010:	bd70      	pop	{r4, r5, r6, pc}
   81012:	bf00      	nop
   81014:	400e0800 	.word	0x400e0800
   81018:	00080431 	.word	0x00080431
   8101c:	40098000 	.word	0x40098000
   81020:	00080455 	.word	0x00080455
   81024:	4009c000 	.word	0x4009c000
   81028:	400a0000 	.word	0x400a0000
   8102c:	400a4000 	.word	0x400a4000

00081030 <configure_console>:
#define pulsev_timer 1

// Define a name for the pulse and say which channel and period to use


void configure_console() {
   81030:	b530      	push	{r4, r5, lr}
   81032:	b085      	sub	sp, #20
   81034:	2008      	movs	r0, #8
   81036:	4d12      	ldr	r5, [pc, #72]	; (81080 <configure_console+0x50>)
   81038:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   8103a:	4c12      	ldr	r4, [pc, #72]	; (81084 <configure_console+0x54>)
   8103c:	4b12      	ldr	r3, [pc, #72]	; (81088 <configure_console+0x58>)
   8103e:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   81040:	4a12      	ldr	r2, [pc, #72]	; (8108c <configure_console+0x5c>)
   81042:	4b13      	ldr	r3, [pc, #76]	; (81090 <configure_console+0x60>)
   81044:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   81046:	4a13      	ldr	r2, [pc, #76]	; (81094 <configure_console+0x64>)
   81048:	4b13      	ldr	r3, [pc, #76]	; (81098 <configure_console+0x68>)
   8104a:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   8104c:	4b13      	ldr	r3, [pc, #76]	; (8109c <configure_console+0x6c>)
   8104e:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   81050:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   81054:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   81056:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8105a:	9303      	str	r3, [sp, #12]
   8105c:	2008      	movs	r0, #8
   8105e:	47a8      	blx	r5
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   81060:	4620      	mov	r0, r4
   81062:	a901      	add	r1, sp, #4
   81064:	4b0e      	ldr	r3, [pc, #56]	; (810a0 <configure_console+0x70>)
   81066:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   81068:	4d0e      	ldr	r5, [pc, #56]	; (810a4 <configure_console+0x74>)
   8106a:	682b      	ldr	r3, [r5, #0]
   8106c:	6898      	ldr	r0, [r3, #8]
   8106e:	2100      	movs	r1, #0
   81070:	4c0d      	ldr	r4, [pc, #52]	; (810a8 <configure_console+0x78>)
   81072:	47a0      	blx	r4
	setbuf(stdin, NULL);
   81074:	682b      	ldr	r3, [r5, #0]
   81076:	6858      	ldr	r0, [r3, #4]
   81078:	2100      	movs	r1, #0
   8107a:	47a0      	blx	r4
		.baudrate = CONF_UART_BAUDRATE,
		.paritytype = CONF_UART_PARITY
	};
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
}
   8107c:	b005      	add	sp, #20
   8107e:	bd30      	pop	{r4, r5, pc}
   81080:	00080c45 	.word	0x00080c45
   81084:	400e0800 	.word	0x400e0800
   81088:	20070b38 	.word	0x20070b38
   8108c:	00080f89 	.word	0x00080f89
   81090:	20070b34 	.word	0x20070b34
   81094:	00080ee1 	.word	0x00080ee1
   81098:	20070b30 	.word	0x20070b30
   8109c:	0501bd00 	.word	0x0501bd00
   810a0:	000803f9 	.word	0x000803f9
   810a4:	20070630 	.word	0x20070630
   810a8:	00081295 	.word	0x00081295

000810ac <main>:

int main (void)
{
   810ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sysclk_init();
   810b0:	4b27      	ldr	r3, [pc, #156]	; (81150 <main+0xa4>)
   810b2:	4798      	blx	r3

	board_init();
   810b4:	4b27      	ldr	r3, [pc, #156]	; (81154 <main+0xa8>)
   810b6:	4798      	blx	r3
	
	configure_console();
   810b8:	4b27      	ldr	r3, [pc, #156]	; (81158 <main+0xac>)
   810ba:	4798      	blx	r3
	printf("\nHello, World!");
   810bc:	4827      	ldr	r0, [pc, #156]	; (8115c <main+0xb0>)
   810be:	4b28      	ldr	r3, [pc, #160]	; (81160 <main+0xb4>)
   810c0:	4798      	blx	r3
	
	// Initialize the pulse channels
	pulse_init();
   810c2:	4b28      	ldr	r3, [pc, #160]	; (81164 <main+0xb8>)
   810c4:	4798      	blx	r3
	// Set the period
	pulse_set_period(pulseh_ch, 1500);
   810c6:	2000      	movs	r0, #0
   810c8:	f240 51dc 	movw	r1, #1500	; 0x5dc
   810cc:	4c26      	ldr	r4, [pc, #152]	; (81168 <main+0xbc>)
   810ce:	47a0      	blx	r4
	pulse_set_period(pulsev_ch, 1500);
   810d0:	2001      	movs	r0, #1
   810d2:	f240 51dc 	movw	r1, #1500	; 0x5dc
   810d6:	47a0      	blx	r4
	// Start the pulse output
	// Output will be on digital pin 35(PIO_PC3_IDX) for pulse channel 0
	// and on digital pin 37(PIO_PC5_IDX) for channel 1
	pulse_start(pulseh_ch);
   810d8:	2000      	movs	r0, #0
   810da:	4d24      	ldr	r5, [pc, #144]	; (8116c <main+0xc0>)
   810dc:	47a8      	blx	r5
	pulse_start(pulsev_ch);
   810de:	2001      	movs	r0, #1
   810e0:	47a8      	blx	r5
	uint32_t state = 0;
	uint32_t channel = 0;
	uint32_t periodv = 1700;
	uint32_t periodh = 1700;
	uint32_t result = 0;
	pulse_set_period(pulsev_ch, periodv);
   810e2:	2001      	movs	r0, #1
   810e4:	f240 61a4 	movw	r1, #1700	; 0x6a4
   810e8:	47a0      	blx	r4
	pulse_set_period(pulseh_ch, periodh);
   810ea:	2000      	movs	r0, #0
   810ec:	f240 61a4 	movw	r1, #1700	; 0x6a4
   810f0:	47a0      	blx	r4
	pulse_start(pulsev_ch);
	
	uint32_t state = 0;
	uint32_t channel = 0;
	uint32_t periodv = 1700;
	uint32_t periodh = 1700;
   810f2:	f240 64a4 	movw	r4, #1700	; 0x6a4
	pulse_set_period(pulsev_ch, periodv);
	pulse_set_period(pulseh_ch, periodh);
	while(1) {
			
			
			pulse_timer_start(pulseh_timer);
   810f6:	f8df 8084 	ldr.w	r8, [pc, #132]	; 8117c <main+0xd0>
			pulse_timer_start(pulsev_timer);
			delay_ms(50);
   810fa:	f8df a084 	ldr.w	sl, [pc, #132]	; 81180 <main+0xd4>
   810fe:	f8df 9084 	ldr.w	r9, [pc, #132]	; 81184 <main+0xd8>
	pulse_set_period(pulsev_ch, periodv);
	pulse_set_period(pulseh_ch, periodh);
	while(1) {
			
			
			pulse_timer_start(pulseh_timer);
   81102:	2000      	movs	r0, #0
   81104:	47c0      	blx	r8
			pulse_timer_start(pulsev_timer);
   81106:	2001      	movs	r0, #1
   81108:	47c0      	blx	r8
			delay_ms(50);
   8110a:	4650      	mov	r0, sl
   8110c:	47c8      	blx	r9
			uint32_t pulseh_us = pulse_timer_get(pulseh_timer);
   8110e:	2000      	movs	r0, #0
   81110:	4e17      	ldr	r6, [pc, #92]	; (81170 <main+0xc4>)
   81112:	47b0      	blx	r6
   81114:	4605      	mov	r5, r0
			uint32_t pulsev_us = pulse_timer_get(pulsev_timer);
   81116:	2001      	movs	r0, #1
   81118:	47b0      	blx	r6
   8111a:	4606      	mov	r6, r0
			if(pulseh_us > pulsev_us) {
   8111c:	4285      	cmp	r5, r0
				periodh += 6;
   8111e:	bf8c      	ite	hi
   81120:	3406      	addhi	r4, #6
			} else {
				periodh -= 5;
   81122:	3c05      	subls	r4, #5
			}
			
			if(periodh<1500){
				periodh = periodv;
   81124:	f240 63a4 	movw	r3, #1700	; 0x6a4
   81128:	f240 52db 	movw	r2, #1499	; 0x5db
   8112c:	4294      	cmp	r4, r2
   8112e:	bf98      	it	ls
   81130:	461c      	movls	r4, r3
			}
			pulse_set_period(pulsev_ch, periodv);
   81132:	2001      	movs	r0, #1
   81134:	4619      	mov	r1, r3
   81136:	4f0c      	ldr	r7, [pc, #48]	; (81168 <main+0xbc>)
   81138:	47b8      	blx	r7
			pulse_set_period(pulseh_ch, periodh);
   8113a:	2000      	movs	r0, #0
   8113c:	4621      	mov	r1, r4
   8113e:	47b8      	blx	r7
			
			printf("\n\rPulse h length: %lu", pulseh_us);
   81140:	480c      	ldr	r0, [pc, #48]	; (81174 <main+0xc8>)
   81142:	4629      	mov	r1, r5
   81144:	4d06      	ldr	r5, [pc, #24]	; (81160 <main+0xb4>)
   81146:	47a8      	blx	r5
			printf("\n\rPulse v length: %lu", pulsev_us);
   81148:	480b      	ldr	r0, [pc, #44]	; (81178 <main+0xcc>)
   8114a:	4631      	mov	r1, r6
   8114c:	47a8      	blx	r5
			
			//period = period + 100;
			
			
			//delay_ms(1000);
	}
   8114e:	e7d8      	b.n	81102 <main+0x56>
   81150:	000807c9 	.word	0x000807c9
   81154:	0008082d 	.word	0x0008082d
   81158:	00081031 	.word	0x00081031
   8115c:	00084148 	.word	0x00084148
   81160:	000811d9 	.word	0x000811d9
   81164:	0008073d 	.word	0x0008073d
   81168:	00080791 	.word	0x00080791
   8116c:	0008075d 	.word	0x0008075d
   81170:	00080685 	.word	0x00080685
   81174:	00084158 	.word	0x00084158
   81178:	00084170 	.word	0x00084170
   8117c:	00080659 	.word	0x00080659
   81180:	000493e0 	.word	0x000493e0
   81184:	20070001 	.word	0x20070001

00081188 <__libc_init_array>:
   81188:	b570      	push	{r4, r5, r6, lr}
   8118a:	4e0f      	ldr	r6, [pc, #60]	; (811c8 <__libc_init_array+0x40>)
   8118c:	4d0f      	ldr	r5, [pc, #60]	; (811cc <__libc_init_array+0x44>)
   8118e:	1b76      	subs	r6, r6, r5
   81190:	10b6      	asrs	r6, r6, #2
   81192:	d007      	beq.n	811a4 <__libc_init_array+0x1c>
   81194:	3d04      	subs	r5, #4
   81196:	2400      	movs	r4, #0
   81198:	3401      	adds	r4, #1
   8119a:	f855 3f04 	ldr.w	r3, [r5, #4]!
   8119e:	4798      	blx	r3
   811a0:	42a6      	cmp	r6, r4
   811a2:	d1f9      	bne.n	81198 <__libc_init_array+0x10>
   811a4:	4e0a      	ldr	r6, [pc, #40]	; (811d0 <__libc_init_array+0x48>)
   811a6:	4d0b      	ldr	r5, [pc, #44]	; (811d4 <__libc_init_array+0x4c>)
   811a8:	f003 f81a 	bl	841e0 <_init>
   811ac:	1b76      	subs	r6, r6, r5
   811ae:	10b6      	asrs	r6, r6, #2
   811b0:	d008      	beq.n	811c4 <__libc_init_array+0x3c>
   811b2:	3d04      	subs	r5, #4
   811b4:	2400      	movs	r4, #0
   811b6:	3401      	adds	r4, #1
   811b8:	f855 3f04 	ldr.w	r3, [r5, #4]!
   811bc:	4798      	blx	r3
   811be:	42a6      	cmp	r6, r4
   811c0:	d1f9      	bne.n	811b6 <__libc_init_array+0x2e>
   811c2:	bd70      	pop	{r4, r5, r6, pc}
   811c4:	bd70      	pop	{r4, r5, r6, pc}
   811c6:	bf00      	nop
   811c8:	000841ec 	.word	0x000841ec
   811cc:	000841ec 	.word	0x000841ec
   811d0:	000841f4 	.word	0x000841f4
   811d4:	000841ec 	.word	0x000841ec

000811d8 <iprintf>:
   811d8:	b40f      	push	{r0, r1, r2, r3}
   811da:	b510      	push	{r4, lr}
   811dc:	4b07      	ldr	r3, [pc, #28]	; (811fc <iprintf+0x24>)
   811de:	b082      	sub	sp, #8
   811e0:	ac04      	add	r4, sp, #16
   811e2:	f854 2b04 	ldr.w	r2, [r4], #4
   811e6:	6818      	ldr	r0, [r3, #0]
   811e8:	4623      	mov	r3, r4
   811ea:	6881      	ldr	r1, [r0, #8]
   811ec:	9401      	str	r4, [sp, #4]
   811ee:	f000 f915 	bl	8141c <_vfiprintf_r>
   811f2:	b002      	add	sp, #8
   811f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   811f8:	b004      	add	sp, #16
   811fa:	4770      	bx	lr
   811fc:	20070630 	.word	0x20070630

00081200 <memset>:
   81200:	b4f0      	push	{r4, r5, r6, r7}
   81202:	0784      	lsls	r4, r0, #30
   81204:	d043      	beq.n	8128e <memset+0x8e>
   81206:	1e54      	subs	r4, r2, #1
   81208:	2a00      	cmp	r2, #0
   8120a:	d03e      	beq.n	8128a <memset+0x8a>
   8120c:	b2cd      	uxtb	r5, r1
   8120e:	4603      	mov	r3, r0
   81210:	e003      	b.n	8121a <memset+0x1a>
   81212:	1e62      	subs	r2, r4, #1
   81214:	2c00      	cmp	r4, #0
   81216:	d038      	beq.n	8128a <memset+0x8a>
   81218:	4614      	mov	r4, r2
   8121a:	f803 5b01 	strb.w	r5, [r3], #1
   8121e:	079a      	lsls	r2, r3, #30
   81220:	d1f7      	bne.n	81212 <memset+0x12>
   81222:	2c03      	cmp	r4, #3
   81224:	d92a      	bls.n	8127c <memset+0x7c>
   81226:	b2cd      	uxtb	r5, r1
   81228:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   8122c:	2c0f      	cmp	r4, #15
   8122e:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   81232:	d915      	bls.n	81260 <memset+0x60>
   81234:	f1a4 0710 	sub.w	r7, r4, #16
   81238:	093f      	lsrs	r7, r7, #4
   8123a:	f103 0610 	add.w	r6, r3, #16
   8123e:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   81242:	461a      	mov	r2, r3
   81244:	6015      	str	r5, [r2, #0]
   81246:	6055      	str	r5, [r2, #4]
   81248:	6095      	str	r5, [r2, #8]
   8124a:	60d5      	str	r5, [r2, #12]
   8124c:	3210      	adds	r2, #16
   8124e:	42b2      	cmp	r2, r6
   81250:	d1f8      	bne.n	81244 <memset+0x44>
   81252:	f004 040f 	and.w	r4, r4, #15
   81256:	3701      	adds	r7, #1
   81258:	2c03      	cmp	r4, #3
   8125a:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   8125e:	d90d      	bls.n	8127c <memset+0x7c>
   81260:	461e      	mov	r6, r3
   81262:	4622      	mov	r2, r4
   81264:	3a04      	subs	r2, #4
   81266:	2a03      	cmp	r2, #3
   81268:	f846 5b04 	str.w	r5, [r6], #4
   8126c:	d8fa      	bhi.n	81264 <memset+0x64>
   8126e:	1f22      	subs	r2, r4, #4
   81270:	f022 0203 	bic.w	r2, r2, #3
   81274:	3204      	adds	r2, #4
   81276:	4413      	add	r3, r2
   81278:	f004 0403 	and.w	r4, r4, #3
   8127c:	b12c      	cbz	r4, 8128a <memset+0x8a>
   8127e:	b2c9      	uxtb	r1, r1
   81280:	441c      	add	r4, r3
   81282:	f803 1b01 	strb.w	r1, [r3], #1
   81286:	42a3      	cmp	r3, r4
   81288:	d1fb      	bne.n	81282 <memset+0x82>
   8128a:	bcf0      	pop	{r4, r5, r6, r7}
   8128c:	4770      	bx	lr
   8128e:	4614      	mov	r4, r2
   81290:	4603      	mov	r3, r0
   81292:	e7c6      	b.n	81222 <memset+0x22>

00081294 <setbuf>:
   81294:	2900      	cmp	r1, #0
   81296:	bf0c      	ite	eq
   81298:	2202      	moveq	r2, #2
   8129a:	2200      	movne	r2, #0
   8129c:	f44f 6380 	mov.w	r3, #1024	; 0x400
   812a0:	f000 b800 	b.w	812a4 <setvbuf>

000812a4 <setvbuf>:
   812a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   812a8:	4d3c      	ldr	r5, [pc, #240]	; (8139c <setvbuf+0xf8>)
   812aa:	4604      	mov	r4, r0
   812ac:	682d      	ldr	r5, [r5, #0]
   812ae:	4688      	mov	r8, r1
   812b0:	4616      	mov	r6, r2
   812b2:	461f      	mov	r7, r3
   812b4:	b115      	cbz	r5, 812bc <setvbuf+0x18>
   812b6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   812b8:	2b00      	cmp	r3, #0
   812ba:	d04f      	beq.n	8135c <setvbuf+0xb8>
   812bc:	2e02      	cmp	r6, #2
   812be:	d830      	bhi.n	81322 <setvbuf+0x7e>
   812c0:	2f00      	cmp	r7, #0
   812c2:	db2e      	blt.n	81322 <setvbuf+0x7e>
   812c4:	4628      	mov	r0, r5
   812c6:	4621      	mov	r1, r4
   812c8:	f001 f826 	bl	82318 <_fflush_r>
   812cc:	89a3      	ldrh	r3, [r4, #12]
   812ce:	2200      	movs	r2, #0
   812d0:	6062      	str	r2, [r4, #4]
   812d2:	61a2      	str	r2, [r4, #24]
   812d4:	061a      	lsls	r2, r3, #24
   812d6:	d428      	bmi.n	8132a <setvbuf+0x86>
   812d8:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   812dc:	b29b      	uxth	r3, r3
   812de:	2e02      	cmp	r6, #2
   812e0:	81a3      	strh	r3, [r4, #12]
   812e2:	d02d      	beq.n	81340 <setvbuf+0x9c>
   812e4:	f1b8 0f00 	cmp.w	r8, #0
   812e8:	d03c      	beq.n	81364 <setvbuf+0xc0>
   812ea:	2e01      	cmp	r6, #1
   812ec:	d013      	beq.n	81316 <setvbuf+0x72>
   812ee:	b29b      	uxth	r3, r3
   812f0:	f003 0008 	and.w	r0, r3, #8
   812f4:	4a2a      	ldr	r2, [pc, #168]	; (813a0 <setvbuf+0xfc>)
   812f6:	b280      	uxth	r0, r0
   812f8:	63ea      	str	r2, [r5, #60]	; 0x3c
   812fa:	f8c4 8000 	str.w	r8, [r4]
   812fe:	f8c4 8010 	str.w	r8, [r4, #16]
   81302:	6167      	str	r7, [r4, #20]
   81304:	b178      	cbz	r0, 81326 <setvbuf+0x82>
   81306:	f013 0f03 	tst.w	r3, #3
   8130a:	bf18      	it	ne
   8130c:	2700      	movne	r7, #0
   8130e:	60a7      	str	r7, [r4, #8]
   81310:	2000      	movs	r0, #0
   81312:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81316:	f043 0301 	orr.w	r3, r3, #1
   8131a:	427a      	negs	r2, r7
   8131c:	81a3      	strh	r3, [r4, #12]
   8131e:	61a2      	str	r2, [r4, #24]
   81320:	e7e5      	b.n	812ee <setvbuf+0x4a>
   81322:	f04f 30ff 	mov.w	r0, #4294967295
   81326:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8132a:	4628      	mov	r0, r5
   8132c:	6921      	ldr	r1, [r4, #16]
   8132e:	f001 f953 	bl	825d8 <_free_r>
   81332:	89a3      	ldrh	r3, [r4, #12]
   81334:	2e02      	cmp	r6, #2
   81336:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   8133a:	b29b      	uxth	r3, r3
   8133c:	81a3      	strh	r3, [r4, #12]
   8133e:	d1d1      	bne.n	812e4 <setvbuf+0x40>
   81340:	2000      	movs	r0, #0
   81342:	f104 0243 	add.w	r2, r4, #67	; 0x43
   81346:	f043 0302 	orr.w	r3, r3, #2
   8134a:	2500      	movs	r5, #0
   8134c:	2101      	movs	r1, #1
   8134e:	81a3      	strh	r3, [r4, #12]
   81350:	60a5      	str	r5, [r4, #8]
   81352:	6022      	str	r2, [r4, #0]
   81354:	6122      	str	r2, [r4, #16]
   81356:	6161      	str	r1, [r4, #20]
   81358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8135c:	4628      	mov	r0, r5
   8135e:	f000 fff7 	bl	82350 <__sinit>
   81362:	e7ab      	b.n	812bc <setvbuf+0x18>
   81364:	2f00      	cmp	r7, #0
   81366:	bf08      	it	eq
   81368:	f44f 6780 	moveq.w	r7, #1024	; 0x400
   8136c:	4638      	mov	r0, r7
   8136e:	f001 fc29 	bl	82bc4 <malloc>
   81372:	4680      	mov	r8, r0
   81374:	b128      	cbz	r0, 81382 <setvbuf+0xde>
   81376:	89a3      	ldrh	r3, [r4, #12]
   81378:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   8137c:	b29b      	uxth	r3, r3
   8137e:	81a3      	strh	r3, [r4, #12]
   81380:	e7b3      	b.n	812ea <setvbuf+0x46>
   81382:	f44f 6080 	mov.w	r0, #1024	; 0x400
   81386:	f001 fc1d 	bl	82bc4 <malloc>
   8138a:	4680      	mov	r8, r0
   8138c:	b918      	cbnz	r0, 81396 <setvbuf+0xf2>
   8138e:	89a3      	ldrh	r3, [r4, #12]
   81390:	f04f 30ff 	mov.w	r0, #4294967295
   81394:	e7d5      	b.n	81342 <setvbuf+0x9e>
   81396:	f44f 6780 	mov.w	r7, #1024	; 0x400
   8139a:	e7ec      	b.n	81376 <setvbuf+0xd2>
   8139c:	20070630 	.word	0x20070630
   813a0:	00082345 	.word	0x00082345

000813a4 <__sprint_r.part.0>:
   813a4:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   813a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   813aa:	049c      	lsls	r4, r3, #18
   813ac:	460e      	mov	r6, r1
   813ae:	4680      	mov	r8, r0
   813b0:	4691      	mov	r9, r2
   813b2:	d52a      	bpl.n	8140a <__sprint_r.part.0+0x66>
   813b4:	6893      	ldr	r3, [r2, #8]
   813b6:	6812      	ldr	r2, [r2, #0]
   813b8:	f102 0a08 	add.w	sl, r2, #8
   813bc:	b31b      	cbz	r3, 81406 <__sprint_r.part.0+0x62>
   813be:	e91a 00a0 	ldmdb	sl, {r5, r7}
   813c2:	08bf      	lsrs	r7, r7, #2
   813c4:	d017      	beq.n	813f6 <__sprint_r.part.0+0x52>
   813c6:	3d04      	subs	r5, #4
   813c8:	2400      	movs	r4, #0
   813ca:	e001      	b.n	813d0 <__sprint_r.part.0+0x2c>
   813cc:	42a7      	cmp	r7, r4
   813ce:	d010      	beq.n	813f2 <__sprint_r.part.0+0x4e>
   813d0:	4640      	mov	r0, r8
   813d2:	f855 1f04 	ldr.w	r1, [r5, #4]!
   813d6:	4632      	mov	r2, r6
   813d8:	f001 f850 	bl	8247c <_fputwc_r>
   813dc:	1c43      	adds	r3, r0, #1
   813de:	f104 0401 	add.w	r4, r4, #1
   813e2:	d1f3      	bne.n	813cc <__sprint_r.part.0+0x28>
   813e4:	2300      	movs	r3, #0
   813e6:	f8c9 3008 	str.w	r3, [r9, #8]
   813ea:	f8c9 3004 	str.w	r3, [r9, #4]
   813ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   813f2:	f8d9 3008 	ldr.w	r3, [r9, #8]
   813f6:	eba3 0387 	sub.w	r3, r3, r7, lsl #2
   813fa:	f8c9 3008 	str.w	r3, [r9, #8]
   813fe:	f10a 0a08 	add.w	sl, sl, #8
   81402:	2b00      	cmp	r3, #0
   81404:	d1db      	bne.n	813be <__sprint_r.part.0+0x1a>
   81406:	2000      	movs	r0, #0
   81408:	e7ec      	b.n	813e4 <__sprint_r.part.0+0x40>
   8140a:	f001 f9b1 	bl	82770 <__sfvwrite_r>
   8140e:	2300      	movs	r3, #0
   81410:	f8c9 3008 	str.w	r3, [r9, #8]
   81414:	f8c9 3004 	str.w	r3, [r9, #4]
   81418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0008141c <_vfiprintf_r>:
   8141c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81420:	b0b1      	sub	sp, #196	; 0xc4
   81422:	461c      	mov	r4, r3
   81424:	9102      	str	r1, [sp, #8]
   81426:	4690      	mov	r8, r2
   81428:	9308      	str	r3, [sp, #32]
   8142a:	9006      	str	r0, [sp, #24]
   8142c:	b118      	cbz	r0, 81436 <_vfiprintf_r+0x1a>
   8142e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   81430:	2b00      	cmp	r3, #0
   81432:	f000 80e8 	beq.w	81606 <_vfiprintf_r+0x1ea>
   81436:	9d02      	ldr	r5, [sp, #8]
   81438:	89ab      	ldrh	r3, [r5, #12]
   8143a:	b29a      	uxth	r2, r3
   8143c:	0490      	lsls	r0, r2, #18
   8143e:	d407      	bmi.n	81450 <_vfiprintf_r+0x34>
   81440:	6e6a      	ldr	r2, [r5, #100]	; 0x64
   81442:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   81446:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
   8144a:	81ab      	strh	r3, [r5, #12]
   8144c:	b29a      	uxth	r2, r3
   8144e:	6669      	str	r1, [r5, #100]	; 0x64
   81450:	0711      	lsls	r1, r2, #28
   81452:	f140 80b7 	bpl.w	815c4 <_vfiprintf_r+0x1a8>
   81456:	f8dd b008 	ldr.w	fp, [sp, #8]
   8145a:	f8db 3010 	ldr.w	r3, [fp, #16]
   8145e:	2b00      	cmp	r3, #0
   81460:	f000 80b0 	beq.w	815c4 <_vfiprintf_r+0x1a8>
   81464:	f002 021a 	and.w	r2, r2, #26
   81468:	2a0a      	cmp	r2, #10
   8146a:	f000 80b7 	beq.w	815dc <_vfiprintf_r+0x1c0>
   8146e:	2300      	movs	r3, #0
   81470:	f10d 0980 	add.w	r9, sp, #128	; 0x80
   81474:	930a      	str	r3, [sp, #40]	; 0x28
   81476:	9315      	str	r3, [sp, #84]	; 0x54
   81478:	9314      	str	r3, [sp, #80]	; 0x50
   8147a:	9309      	str	r3, [sp, #36]	; 0x24
   8147c:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
   81480:	464e      	mov	r6, r9
   81482:	f898 3000 	ldrb.w	r3, [r8]
   81486:	2b00      	cmp	r3, #0
   81488:	f000 84c8 	beq.w	81e1c <_vfiprintf_r+0xa00>
   8148c:	2b25      	cmp	r3, #37	; 0x25
   8148e:	f000 84c5 	beq.w	81e1c <_vfiprintf_r+0xa00>
   81492:	f108 0201 	add.w	r2, r8, #1
   81496:	e001      	b.n	8149c <_vfiprintf_r+0x80>
   81498:	2b25      	cmp	r3, #37	; 0x25
   8149a:	d004      	beq.n	814a6 <_vfiprintf_r+0x8a>
   8149c:	7813      	ldrb	r3, [r2, #0]
   8149e:	4614      	mov	r4, r2
   814a0:	3201      	adds	r2, #1
   814a2:	2b00      	cmp	r3, #0
   814a4:	d1f8      	bne.n	81498 <_vfiprintf_r+0x7c>
   814a6:	ebc8 0504 	rsb	r5, r8, r4
   814aa:	b195      	cbz	r5, 814d2 <_vfiprintf_r+0xb6>
   814ac:	9b14      	ldr	r3, [sp, #80]	; 0x50
   814ae:	9a15      	ldr	r2, [sp, #84]	; 0x54
   814b0:	3301      	adds	r3, #1
   814b2:	442a      	add	r2, r5
   814b4:	2b07      	cmp	r3, #7
   814b6:	f8c6 8000 	str.w	r8, [r6]
   814ba:	6075      	str	r5, [r6, #4]
   814bc:	9215      	str	r2, [sp, #84]	; 0x54
   814be:	9314      	str	r3, [sp, #80]	; 0x50
   814c0:	dd7b      	ble.n	815ba <_vfiprintf_r+0x19e>
   814c2:	2a00      	cmp	r2, #0
   814c4:	f040 84d5 	bne.w	81e72 <_vfiprintf_r+0xa56>
   814c8:	9809      	ldr	r0, [sp, #36]	; 0x24
   814ca:	9214      	str	r2, [sp, #80]	; 0x50
   814cc:	4428      	add	r0, r5
   814ce:	464e      	mov	r6, r9
   814d0:	9009      	str	r0, [sp, #36]	; 0x24
   814d2:	7823      	ldrb	r3, [r4, #0]
   814d4:	2b00      	cmp	r3, #0
   814d6:	f000 83ed 	beq.w	81cb4 <_vfiprintf_r+0x898>
   814da:	2100      	movs	r1, #0
   814dc:	f04f 0200 	mov.w	r2, #0
   814e0:	f04f 3cff 	mov.w	ip, #4294967295
   814e4:	7863      	ldrb	r3, [r4, #1]
   814e6:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
   814ea:	9104      	str	r1, [sp, #16]
   814ec:	468a      	mov	sl, r1
   814ee:	f104 0801 	add.w	r8, r4, #1
   814f2:	4608      	mov	r0, r1
   814f4:	4665      	mov	r5, ip
   814f6:	f108 0801 	add.w	r8, r8, #1
   814fa:	f1a3 0220 	sub.w	r2, r3, #32
   814fe:	2a58      	cmp	r2, #88	; 0x58
   81500:	f200 82d9 	bhi.w	81ab6 <_vfiprintf_r+0x69a>
   81504:	e8df f012 	tbh	[pc, r2, lsl #1]
   81508:	02d702cb 	.word	0x02d702cb
   8150c:	02d202d7 	.word	0x02d202d7
   81510:	02d702d7 	.word	0x02d702d7
   81514:	02d702d7 	.word	0x02d702d7
   81518:	02d702d7 	.word	0x02d702d7
   8151c:	028f0282 	.word	0x028f0282
   81520:	008402d7 	.word	0x008402d7
   81524:	02d70293 	.word	0x02d70293
   81528:	0196012b 	.word	0x0196012b
   8152c:	01960196 	.word	0x01960196
   81530:	01960196 	.word	0x01960196
   81534:	01960196 	.word	0x01960196
   81538:	01960196 	.word	0x01960196
   8153c:	02d702d7 	.word	0x02d702d7
   81540:	02d702d7 	.word	0x02d702d7
   81544:	02d702d7 	.word	0x02d702d7
   81548:	02d702d7 	.word	0x02d702d7
   8154c:	02d702d7 	.word	0x02d702d7
   81550:	02d70130 	.word	0x02d70130
   81554:	02d702d7 	.word	0x02d702d7
   81558:	02d702d7 	.word	0x02d702d7
   8155c:	02d702d7 	.word	0x02d702d7
   81560:	02d702d7 	.word	0x02d702d7
   81564:	017b02d7 	.word	0x017b02d7
   81568:	02d702d7 	.word	0x02d702d7
   8156c:	02d702d7 	.word	0x02d702d7
   81570:	01a402d7 	.word	0x01a402d7
   81574:	02d702d7 	.word	0x02d702d7
   81578:	02d701bf 	.word	0x02d701bf
   8157c:	02d702d7 	.word	0x02d702d7
   81580:	02d702d7 	.word	0x02d702d7
   81584:	02d702d7 	.word	0x02d702d7
   81588:	02d702d7 	.word	0x02d702d7
   8158c:	01e402d7 	.word	0x01e402d7
   81590:	02d701fa 	.word	0x02d701fa
   81594:	02d702d7 	.word	0x02d702d7
   81598:	01fa0216 	.word	0x01fa0216
   8159c:	02d702d7 	.word	0x02d702d7
   815a0:	02d7021b 	.word	0x02d7021b
   815a4:	00890228 	.word	0x00890228
   815a8:	027d0266 	.word	0x027d0266
   815ac:	023a02d7 	.word	0x023a02d7
   815b0:	011902d7 	.word	0x011902d7
   815b4:	02d702d7 	.word	0x02d702d7
   815b8:	02af      	.short	0x02af
   815ba:	3608      	adds	r6, #8
   815bc:	9809      	ldr	r0, [sp, #36]	; 0x24
   815be:	4428      	add	r0, r5
   815c0:	9009      	str	r0, [sp, #36]	; 0x24
   815c2:	e786      	b.n	814d2 <_vfiprintf_r+0xb6>
   815c4:	9806      	ldr	r0, [sp, #24]
   815c6:	9902      	ldr	r1, [sp, #8]
   815c8:	f000 fd90 	bl	820ec <__swsetup_r>
   815cc:	b9b0      	cbnz	r0, 815fc <_vfiprintf_r+0x1e0>
   815ce:	9d02      	ldr	r5, [sp, #8]
   815d0:	89aa      	ldrh	r2, [r5, #12]
   815d2:	f002 021a 	and.w	r2, r2, #26
   815d6:	2a0a      	cmp	r2, #10
   815d8:	f47f af49 	bne.w	8146e <_vfiprintf_r+0x52>
   815dc:	f8dd b008 	ldr.w	fp, [sp, #8]
   815e0:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
   815e4:	2b00      	cmp	r3, #0
   815e6:	f6ff af42 	blt.w	8146e <_vfiprintf_r+0x52>
   815ea:	9806      	ldr	r0, [sp, #24]
   815ec:	4659      	mov	r1, fp
   815ee:	4642      	mov	r2, r8
   815f0:	4623      	mov	r3, r4
   815f2:	f000 fd3d 	bl	82070 <__sbprintf>
   815f6:	b031      	add	sp, #196	; 0xc4
   815f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   815fc:	f04f 30ff 	mov.w	r0, #4294967295
   81600:	b031      	add	sp, #196	; 0xc4
   81602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81606:	f000 fea3 	bl	82350 <__sinit>
   8160a:	e714      	b.n	81436 <_vfiprintf_r+0x1a>
   8160c:	4240      	negs	r0, r0
   8160e:	9308      	str	r3, [sp, #32]
   81610:	f04a 0a04 	orr.w	sl, sl, #4
   81614:	f898 3000 	ldrb.w	r3, [r8]
   81618:	e76d      	b.n	814f6 <_vfiprintf_r+0xda>
   8161a:	f01a 0320 	ands.w	r3, sl, #32
   8161e:	9004      	str	r0, [sp, #16]
   81620:	46ac      	mov	ip, r5
   81622:	f000 80f4 	beq.w	8180e <_vfiprintf_r+0x3f2>
   81626:	f8dd b020 	ldr.w	fp, [sp, #32]
   8162a:	f10b 0307 	add.w	r3, fp, #7
   8162e:	f023 0307 	bic.w	r3, r3, #7
   81632:	f103 0408 	add.w	r4, r3, #8
   81636:	9408      	str	r4, [sp, #32]
   81638:	e9d3 4500 	ldrd	r4, r5, [r3]
   8163c:	2300      	movs	r3, #0
   8163e:	f04f 0000 	mov.w	r0, #0
   81642:	2100      	movs	r1, #0
   81644:	f88d 0047 	strb.w	r0, [sp, #71]	; 0x47
   81648:	f8cd c014 	str.w	ip, [sp, #20]
   8164c:	9107      	str	r1, [sp, #28]
   8164e:	f1bc 0f00 	cmp.w	ip, #0
   81652:	bfa8      	it	ge
   81654:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
   81658:	ea54 0205 	orrs.w	r2, r4, r5
   8165c:	f040 80ad 	bne.w	817ba <_vfiprintf_r+0x39e>
   81660:	f1bc 0f00 	cmp.w	ip, #0
   81664:	f040 80a9 	bne.w	817ba <_vfiprintf_r+0x39e>
   81668:	2b00      	cmp	r3, #0
   8166a:	f040 83c0 	bne.w	81dee <_vfiprintf_r+0x9d2>
   8166e:	f01a 0f01 	tst.w	sl, #1
   81672:	f000 83bc 	beq.w	81dee <_vfiprintf_r+0x9d2>
   81676:	2330      	movs	r3, #48	; 0x30
   81678:	af30      	add	r7, sp, #192	; 0xc0
   8167a:	f807 3d41 	strb.w	r3, [r7, #-65]!
   8167e:	ebc7 0409 	rsb	r4, r7, r9
   81682:	9405      	str	r4, [sp, #20]
   81684:	f8dd b014 	ldr.w	fp, [sp, #20]
   81688:	9c07      	ldr	r4, [sp, #28]
   8168a:	45e3      	cmp	fp, ip
   8168c:	bfb8      	it	lt
   8168e:	46e3      	movlt	fp, ip
   81690:	f8cd b00c 	str.w	fp, [sp, #12]
   81694:	b11c      	cbz	r4, 8169e <_vfiprintf_r+0x282>
   81696:	f10b 0b01 	add.w	fp, fp, #1
   8169a:	f8cd b00c 	str.w	fp, [sp, #12]
   8169e:	f01a 0502 	ands.w	r5, sl, #2
   816a2:	9507      	str	r5, [sp, #28]
   816a4:	d005      	beq.n	816b2 <_vfiprintf_r+0x296>
   816a6:	f8dd b00c 	ldr.w	fp, [sp, #12]
   816aa:	f10b 0b02 	add.w	fp, fp, #2
   816ae:	f8cd b00c 	str.w	fp, [sp, #12]
   816b2:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
   816b6:	930b      	str	r3, [sp, #44]	; 0x2c
   816b8:	f040 821b 	bne.w	81af2 <_vfiprintf_r+0x6d6>
   816bc:	9d04      	ldr	r5, [sp, #16]
   816be:	f8dd b00c 	ldr.w	fp, [sp, #12]
   816c2:	ebcb 0405 	rsb	r4, fp, r5
   816c6:	2c00      	cmp	r4, #0
   816c8:	f340 8213 	ble.w	81af2 <_vfiprintf_r+0x6d6>
   816cc:	2c10      	cmp	r4, #16
   816ce:	f340 8489 	ble.w	81fe4 <_vfiprintf_r+0xbc8>
   816d2:	4dbe      	ldr	r5, [pc, #760]	; (819cc <_vfiprintf_r+0x5b0>)
   816d4:	9a15      	ldr	r2, [sp, #84]	; 0x54
   816d6:	462b      	mov	r3, r5
   816d8:	9814      	ldr	r0, [sp, #80]	; 0x50
   816da:	4625      	mov	r5, r4
   816dc:	f04f 0b10 	mov.w	fp, #16
   816e0:	4664      	mov	r4, ip
   816e2:	46b4      	mov	ip, r6
   816e4:	461e      	mov	r6, r3
   816e6:	e006      	b.n	816f6 <_vfiprintf_r+0x2da>
   816e8:	1c83      	adds	r3, r0, #2
   816ea:	f10c 0c08 	add.w	ip, ip, #8
   816ee:	4608      	mov	r0, r1
   816f0:	3d10      	subs	r5, #16
   816f2:	2d10      	cmp	r5, #16
   816f4:	dd11      	ble.n	8171a <_vfiprintf_r+0x2fe>
   816f6:	1c41      	adds	r1, r0, #1
   816f8:	3210      	adds	r2, #16
   816fa:	2907      	cmp	r1, #7
   816fc:	9215      	str	r2, [sp, #84]	; 0x54
   816fe:	e88c 0840 	stmia.w	ip, {r6, fp}
   81702:	9114      	str	r1, [sp, #80]	; 0x50
   81704:	ddf0      	ble.n	816e8 <_vfiprintf_r+0x2cc>
   81706:	2a00      	cmp	r2, #0
   81708:	f040 81e6 	bne.w	81ad8 <_vfiprintf_r+0x6bc>
   8170c:	3d10      	subs	r5, #16
   8170e:	2d10      	cmp	r5, #16
   81710:	f04f 0301 	mov.w	r3, #1
   81714:	4610      	mov	r0, r2
   81716:	46cc      	mov	ip, r9
   81718:	dced      	bgt.n	816f6 <_vfiprintf_r+0x2da>
   8171a:	4631      	mov	r1, r6
   8171c:	4666      	mov	r6, ip
   8171e:	46a4      	mov	ip, r4
   81720:	462c      	mov	r4, r5
   81722:	460d      	mov	r5, r1
   81724:	4422      	add	r2, r4
   81726:	2b07      	cmp	r3, #7
   81728:	9215      	str	r2, [sp, #84]	; 0x54
   8172a:	6035      	str	r5, [r6, #0]
   8172c:	6074      	str	r4, [r6, #4]
   8172e:	9314      	str	r3, [sp, #80]	; 0x50
   81730:	f300 836d 	bgt.w	81e0e <_vfiprintf_r+0x9f2>
   81734:	3608      	adds	r6, #8
   81736:	1c59      	adds	r1, r3, #1
   81738:	e1de      	b.n	81af8 <_vfiprintf_r+0x6dc>
   8173a:	f01a 0f20 	tst.w	sl, #32
   8173e:	9004      	str	r0, [sp, #16]
   81740:	46ac      	mov	ip, r5
   81742:	f000 808d 	beq.w	81860 <_vfiprintf_r+0x444>
   81746:	9d08      	ldr	r5, [sp, #32]
   81748:	1deb      	adds	r3, r5, #7
   8174a:	f023 0307 	bic.w	r3, r3, #7
   8174e:	f103 0b08 	add.w	fp, r3, #8
   81752:	e9d3 4500 	ldrd	r4, r5, [r3]
   81756:	f8cd b020 	str.w	fp, [sp, #32]
   8175a:	2301      	movs	r3, #1
   8175c:	e76f      	b.n	8163e <_vfiprintf_r+0x222>
   8175e:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
   81762:	f898 3000 	ldrb.w	r3, [r8]
   81766:	e6c6      	b.n	814f6 <_vfiprintf_r+0xda>
   81768:	f04a 0a10 	orr.w	sl, sl, #16
   8176c:	f01a 0f20 	tst.w	sl, #32
   81770:	9004      	str	r0, [sp, #16]
   81772:	46ac      	mov	ip, r5
   81774:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   81778:	f000 80c8 	beq.w	8190c <_vfiprintf_r+0x4f0>
   8177c:	9c08      	ldr	r4, [sp, #32]
   8177e:	1de1      	adds	r1, r4, #7
   81780:	f021 0107 	bic.w	r1, r1, #7
   81784:	e9d1 2300 	ldrd	r2, r3, [r1]
   81788:	3108      	adds	r1, #8
   8178a:	9108      	str	r1, [sp, #32]
   8178c:	4614      	mov	r4, r2
   8178e:	461d      	mov	r5, r3
   81790:	2a00      	cmp	r2, #0
   81792:	f173 0b00 	sbcs.w	fp, r3, #0
   81796:	f2c0 83ce 	blt.w	81f36 <_vfiprintf_r+0xb1a>
   8179a:	f1bc 0f00 	cmp.w	ip, #0
   8179e:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
   817a2:	bfa8      	it	ge
   817a4:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
   817a8:	ea54 0205 	orrs.w	r2, r4, r5
   817ac:	9007      	str	r0, [sp, #28]
   817ae:	f8cd c014 	str.w	ip, [sp, #20]
   817b2:	f04f 0301 	mov.w	r3, #1
   817b6:	f43f af53 	beq.w	81660 <_vfiprintf_r+0x244>
   817ba:	2b01      	cmp	r3, #1
   817bc:	f000 8319 	beq.w	81df2 <_vfiprintf_r+0x9d6>
   817c0:	2b02      	cmp	r3, #2
   817c2:	f10d 037f 	add.w	r3, sp, #127	; 0x7f
   817c6:	f040 824c 	bne.w	81c62 <_vfiprintf_r+0x846>
   817ca:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   817ce:	4619      	mov	r1, r3
   817d0:	f004 000f 	and.w	r0, r4, #15
   817d4:	0922      	lsrs	r2, r4, #4
   817d6:	f81b 0000 	ldrb.w	r0, [fp, r0]
   817da:	ea42 7205 	orr.w	r2, r2, r5, lsl #28
   817de:	092b      	lsrs	r3, r5, #4
   817e0:	7008      	strb	r0, [r1, #0]
   817e2:	ea52 0003 	orrs.w	r0, r2, r3
   817e6:	460f      	mov	r7, r1
   817e8:	4614      	mov	r4, r2
   817ea:	461d      	mov	r5, r3
   817ec:	f101 31ff 	add.w	r1, r1, #4294967295
   817f0:	d1ee      	bne.n	817d0 <_vfiprintf_r+0x3b4>
   817f2:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   817f6:	ebc7 0309 	rsb	r3, r7, r9
   817fa:	9305      	str	r3, [sp, #20]
   817fc:	e742      	b.n	81684 <_vfiprintf_r+0x268>
   817fe:	f04a 0a10 	orr.w	sl, sl, #16
   81802:	f01a 0320 	ands.w	r3, sl, #32
   81806:	9004      	str	r0, [sp, #16]
   81808:	46ac      	mov	ip, r5
   8180a:	f47f af0c 	bne.w	81626 <_vfiprintf_r+0x20a>
   8180e:	f01a 0210 	ands.w	r2, sl, #16
   81812:	f040 8311 	bne.w	81e38 <_vfiprintf_r+0xa1c>
   81816:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
   8181a:	f000 830d 	beq.w	81e38 <_vfiprintf_r+0xa1c>
   8181e:	f8dd b020 	ldr.w	fp, [sp, #32]
   81822:	4613      	mov	r3, r2
   81824:	f8bb 4000 	ldrh.w	r4, [fp]
   81828:	f10b 0b04 	add.w	fp, fp, #4
   8182c:	2500      	movs	r5, #0
   8182e:	f8cd b020 	str.w	fp, [sp, #32]
   81832:	e704      	b.n	8163e <_vfiprintf_r+0x222>
   81834:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   81838:	2000      	movs	r0, #0
   8183a:	f818 3b01 	ldrb.w	r3, [r8], #1
   8183e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   81842:	eb02 0040 	add.w	r0, r2, r0, lsl #1
   81846:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   8184a:	2a09      	cmp	r2, #9
   8184c:	d9f5      	bls.n	8183a <_vfiprintf_r+0x41e>
   8184e:	e654      	b.n	814fa <_vfiprintf_r+0xde>
   81850:	f04a 0a10 	orr.w	sl, sl, #16
   81854:	f01a 0f20 	tst.w	sl, #32
   81858:	9004      	str	r0, [sp, #16]
   8185a:	46ac      	mov	ip, r5
   8185c:	f47f af73 	bne.w	81746 <_vfiprintf_r+0x32a>
   81860:	f01a 0f10 	tst.w	sl, #16
   81864:	f040 82ef 	bne.w	81e46 <_vfiprintf_r+0xa2a>
   81868:	f01a 0f40 	tst.w	sl, #64	; 0x40
   8186c:	f000 82eb 	beq.w	81e46 <_vfiprintf_r+0xa2a>
   81870:	f8dd b020 	ldr.w	fp, [sp, #32]
   81874:	2500      	movs	r5, #0
   81876:	f8bb 4000 	ldrh.w	r4, [fp]
   8187a:	f10b 0b04 	add.w	fp, fp, #4
   8187e:	2301      	movs	r3, #1
   81880:	f8cd b020 	str.w	fp, [sp, #32]
   81884:	e6db      	b.n	8163e <_vfiprintf_r+0x222>
   81886:	46ac      	mov	ip, r5
   81888:	4d51      	ldr	r5, [pc, #324]	; (819d0 <_vfiprintf_r+0x5b4>)
   8188a:	f01a 0f20 	tst.w	sl, #32
   8188e:	9004      	str	r0, [sp, #16]
   81890:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   81894:	950a      	str	r5, [sp, #40]	; 0x28
   81896:	f000 80f0 	beq.w	81a7a <_vfiprintf_r+0x65e>
   8189a:	9d08      	ldr	r5, [sp, #32]
   8189c:	1dea      	adds	r2, r5, #7
   8189e:	f022 0207 	bic.w	r2, r2, #7
   818a2:	f102 0b08 	add.w	fp, r2, #8
   818a6:	f8cd b020 	str.w	fp, [sp, #32]
   818aa:	e9d2 4500 	ldrd	r4, r5, [r2]
   818ae:	f01a 0f01 	tst.w	sl, #1
   818b2:	f000 82aa 	beq.w	81e0a <_vfiprintf_r+0x9ee>
   818b6:	ea54 0b05 	orrs.w	fp, r4, r5
   818ba:	f000 82a6 	beq.w	81e0a <_vfiprintf_r+0x9ee>
   818be:	2230      	movs	r2, #48	; 0x30
   818c0:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
   818c4:	f04a 0a02 	orr.w	sl, sl, #2
   818c8:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   818cc:	2302      	movs	r3, #2
   818ce:	e6b6      	b.n	8163e <_vfiprintf_r+0x222>
   818d0:	9b08      	ldr	r3, [sp, #32]
   818d2:	f8dd b020 	ldr.w	fp, [sp, #32]
   818d6:	681b      	ldr	r3, [r3, #0]
   818d8:	2401      	movs	r4, #1
   818da:	f04f 0500 	mov.w	r5, #0
   818de:	f10b 0b04 	add.w	fp, fp, #4
   818e2:	9004      	str	r0, [sp, #16]
   818e4:	9403      	str	r4, [sp, #12]
   818e6:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
   818ea:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   818ee:	f8cd b020 	str.w	fp, [sp, #32]
   818f2:	9405      	str	r4, [sp, #20]
   818f4:	af16      	add	r7, sp, #88	; 0x58
   818f6:	f04f 0c00 	mov.w	ip, #0
   818fa:	e6d0      	b.n	8169e <_vfiprintf_r+0x282>
   818fc:	f01a 0f20 	tst.w	sl, #32
   81900:	9004      	str	r0, [sp, #16]
   81902:	46ac      	mov	ip, r5
   81904:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   81908:	f47f af38 	bne.w	8177c <_vfiprintf_r+0x360>
   8190c:	f01a 0f10 	tst.w	sl, #16
   81910:	f040 82a7 	bne.w	81e62 <_vfiprintf_r+0xa46>
   81914:	f01a 0f40 	tst.w	sl, #64	; 0x40
   81918:	f000 82a3 	beq.w	81e62 <_vfiprintf_r+0xa46>
   8191c:	f8dd b020 	ldr.w	fp, [sp, #32]
   81920:	f9bb 4000 	ldrsh.w	r4, [fp]
   81924:	f10b 0b04 	add.w	fp, fp, #4
   81928:	17e5      	asrs	r5, r4, #31
   8192a:	4622      	mov	r2, r4
   8192c:	462b      	mov	r3, r5
   8192e:	f8cd b020 	str.w	fp, [sp, #32]
   81932:	e72d      	b.n	81790 <_vfiprintf_r+0x374>
   81934:	f04a 0a40 	orr.w	sl, sl, #64	; 0x40
   81938:	f898 3000 	ldrb.w	r3, [r8]
   8193c:	e5db      	b.n	814f6 <_vfiprintf_r+0xda>
   8193e:	f898 3000 	ldrb.w	r3, [r8]
   81942:	4642      	mov	r2, r8
   81944:	2b6c      	cmp	r3, #108	; 0x6c
   81946:	bf03      	ittte	eq
   81948:	f108 0801 	addeq.w	r8, r8, #1
   8194c:	f04a 0a20 	orreq.w	sl, sl, #32
   81950:	7853      	ldrbeq	r3, [r2, #1]
   81952:	f04a 0a10 	orrne.w	sl, sl, #16
   81956:	e5ce      	b.n	814f6 <_vfiprintf_r+0xda>
   81958:	f01a 0f20 	tst.w	sl, #32
   8195c:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   81960:	f000 82f7 	beq.w	81f52 <_vfiprintf_r+0xb36>
   81964:	9c08      	ldr	r4, [sp, #32]
   81966:	6821      	ldr	r1, [r4, #0]
   81968:	9c09      	ldr	r4, [sp, #36]	; 0x24
   8196a:	17e5      	asrs	r5, r4, #31
   8196c:	462b      	mov	r3, r5
   8196e:	9d08      	ldr	r5, [sp, #32]
   81970:	4622      	mov	r2, r4
   81972:	3504      	adds	r5, #4
   81974:	9508      	str	r5, [sp, #32]
   81976:	e9c1 2300 	strd	r2, r3, [r1]
   8197a:	e582      	b.n	81482 <_vfiprintf_r+0x66>
   8197c:	9c08      	ldr	r4, [sp, #32]
   8197e:	46ac      	mov	ip, r5
   81980:	6827      	ldr	r7, [r4, #0]
   81982:	f04f 0500 	mov.w	r5, #0
   81986:	9004      	str	r0, [sp, #16]
   81988:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
   8198c:	3404      	adds	r4, #4
   8198e:	2f00      	cmp	r7, #0
   81990:	f000 8332 	beq.w	81ff8 <_vfiprintf_r+0xbdc>
   81994:	f1bc 0f00 	cmp.w	ip, #0
   81998:	4638      	mov	r0, r7
   8199a:	f2c0 8307 	blt.w	81fac <_vfiprintf_r+0xb90>
   8199e:	4662      	mov	r2, ip
   819a0:	2100      	movs	r1, #0
   819a2:	f8cd c004 	str.w	ip, [sp, #4]
   819a6:	f001 fbb1 	bl	8310c <memchr>
   819aa:	f8dd c004 	ldr.w	ip, [sp, #4]
   819ae:	2800      	cmp	r0, #0
   819b0:	f000 833a 	beq.w	82028 <_vfiprintf_r+0xc0c>
   819b4:	1bc0      	subs	r0, r0, r7
   819b6:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
   819ba:	4560      	cmp	r0, ip
   819bc:	bfa8      	it	ge
   819be:	4660      	movge	r0, ip
   819c0:	9005      	str	r0, [sp, #20]
   819c2:	9408      	str	r4, [sp, #32]
   819c4:	9507      	str	r5, [sp, #28]
   819c6:	f04f 0c00 	mov.w	ip, #0
   819ca:	e65b      	b.n	81684 <_vfiprintf_r+0x268>
   819cc:	000841d0 	.word	0x000841d0
   819d0:	00084190 	.word	0x00084190
   819d4:	9b08      	ldr	r3, [sp, #32]
   819d6:	f8dd b020 	ldr.w	fp, [sp, #32]
   819da:	9004      	str	r0, [sp, #16]
   819dc:	48b2      	ldr	r0, [pc, #712]	; (81ca8 <_vfiprintf_r+0x88c>)
   819de:	681c      	ldr	r4, [r3, #0]
   819e0:	2230      	movs	r2, #48	; 0x30
   819e2:	2378      	movs	r3, #120	; 0x78
   819e4:	f10b 0b04 	add.w	fp, fp, #4
   819e8:	46ac      	mov	ip, r5
   819ea:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
   819ee:	f04a 0a02 	orr.w	sl, sl, #2
   819f2:	f8cd b020 	str.w	fp, [sp, #32]
   819f6:	2500      	movs	r5, #0
   819f8:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   819fc:	900a      	str	r0, [sp, #40]	; 0x28
   819fe:	2302      	movs	r3, #2
   81a00:	e61d      	b.n	8163e <_vfiprintf_r+0x222>
   81a02:	f04a 0a20 	orr.w	sl, sl, #32
   81a06:	f898 3000 	ldrb.w	r3, [r8]
   81a0a:	e574      	b.n	814f6 <_vfiprintf_r+0xda>
   81a0c:	f8dd b020 	ldr.w	fp, [sp, #32]
   81a10:	f8db 0000 	ldr.w	r0, [fp]
   81a14:	f10b 0304 	add.w	r3, fp, #4
   81a18:	2800      	cmp	r0, #0
   81a1a:	f6ff adf7 	blt.w	8160c <_vfiprintf_r+0x1f0>
   81a1e:	9308      	str	r3, [sp, #32]
   81a20:	f898 3000 	ldrb.w	r3, [r8]
   81a24:	e567      	b.n	814f6 <_vfiprintf_r+0xda>
   81a26:	f898 3000 	ldrb.w	r3, [r8]
   81a2a:	212b      	movs	r1, #43	; 0x2b
   81a2c:	e563      	b.n	814f6 <_vfiprintf_r+0xda>
   81a2e:	f898 3000 	ldrb.w	r3, [r8]
   81a32:	f108 0401 	add.w	r4, r8, #1
   81a36:	2b2a      	cmp	r3, #42	; 0x2a
   81a38:	f000 8305 	beq.w	82046 <_vfiprintf_r+0xc2a>
   81a3c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   81a40:	2a09      	cmp	r2, #9
   81a42:	bf98      	it	ls
   81a44:	2500      	movls	r5, #0
   81a46:	f200 82fa 	bhi.w	8203e <_vfiprintf_r+0xc22>
   81a4a:	f814 3b01 	ldrb.w	r3, [r4], #1
   81a4e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   81a52:	eb02 0545 	add.w	r5, r2, r5, lsl #1
   81a56:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   81a5a:	2a09      	cmp	r2, #9
   81a5c:	d9f5      	bls.n	81a4a <_vfiprintf_r+0x62e>
   81a5e:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
   81a62:	46a0      	mov	r8, r4
   81a64:	e549      	b.n	814fa <_vfiprintf_r+0xde>
   81a66:	4c90      	ldr	r4, [pc, #576]	; (81ca8 <_vfiprintf_r+0x88c>)
   81a68:	f01a 0f20 	tst.w	sl, #32
   81a6c:	9004      	str	r0, [sp, #16]
   81a6e:	46ac      	mov	ip, r5
   81a70:	940a      	str	r4, [sp, #40]	; 0x28
   81a72:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   81a76:	f47f af10 	bne.w	8189a <_vfiprintf_r+0x47e>
   81a7a:	f01a 0f10 	tst.w	sl, #16
   81a7e:	f040 81ea 	bne.w	81e56 <_vfiprintf_r+0xa3a>
   81a82:	f01a 0f40 	tst.w	sl, #64	; 0x40
   81a86:	f000 81e6 	beq.w	81e56 <_vfiprintf_r+0xa3a>
   81a8a:	f8dd b020 	ldr.w	fp, [sp, #32]
   81a8e:	2500      	movs	r5, #0
   81a90:	f8bb 4000 	ldrh.w	r4, [fp]
   81a94:	f10b 0b04 	add.w	fp, fp, #4
   81a98:	f8cd b020 	str.w	fp, [sp, #32]
   81a9c:	e707      	b.n	818ae <_vfiprintf_r+0x492>
   81a9e:	f898 3000 	ldrb.w	r3, [r8]
   81aa2:	2900      	cmp	r1, #0
   81aa4:	f47f ad27 	bne.w	814f6 <_vfiprintf_r+0xda>
   81aa8:	2120      	movs	r1, #32
   81aaa:	e524      	b.n	814f6 <_vfiprintf_r+0xda>
   81aac:	f04a 0a01 	orr.w	sl, sl, #1
   81ab0:	f898 3000 	ldrb.w	r3, [r8]
   81ab4:	e51f      	b.n	814f6 <_vfiprintf_r+0xda>
   81ab6:	9004      	str	r0, [sp, #16]
   81ab8:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   81abc:	2b00      	cmp	r3, #0
   81abe:	f000 80f9 	beq.w	81cb4 <_vfiprintf_r+0x898>
   81ac2:	2501      	movs	r5, #1
   81ac4:	f04f 0b00 	mov.w	fp, #0
   81ac8:	9503      	str	r5, [sp, #12]
   81aca:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   81ace:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
   81ad2:	9505      	str	r5, [sp, #20]
   81ad4:	af16      	add	r7, sp, #88	; 0x58
   81ad6:	e70e      	b.n	818f6 <_vfiprintf_r+0x4da>
   81ad8:	9806      	ldr	r0, [sp, #24]
   81ada:	9902      	ldr	r1, [sp, #8]
   81adc:	aa13      	add	r2, sp, #76	; 0x4c
   81ade:	f7ff fc61 	bl	813a4 <__sprint_r.part.0>
   81ae2:	2800      	cmp	r0, #0
   81ae4:	f040 80ed 	bne.w	81cc2 <_vfiprintf_r+0x8a6>
   81ae8:	9814      	ldr	r0, [sp, #80]	; 0x50
   81aea:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81aec:	1c43      	adds	r3, r0, #1
   81aee:	46cc      	mov	ip, r9
   81af0:	e5fe      	b.n	816f0 <_vfiprintf_r+0x2d4>
   81af2:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81af4:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81af6:	1c59      	adds	r1, r3, #1
   81af8:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
   81afc:	b168      	cbz	r0, 81b1a <_vfiprintf_r+0x6fe>
   81afe:	3201      	adds	r2, #1
   81b00:	f10d 0047 	add.w	r0, sp, #71	; 0x47
   81b04:	2301      	movs	r3, #1
   81b06:	2907      	cmp	r1, #7
   81b08:	9215      	str	r2, [sp, #84]	; 0x54
   81b0a:	9114      	str	r1, [sp, #80]	; 0x50
   81b0c:	e886 0009 	stmia.w	r6, {r0, r3}
   81b10:	f300 8160 	bgt.w	81dd4 <_vfiprintf_r+0x9b8>
   81b14:	460b      	mov	r3, r1
   81b16:	3608      	adds	r6, #8
   81b18:	3101      	adds	r1, #1
   81b1a:	9c07      	ldr	r4, [sp, #28]
   81b1c:	b164      	cbz	r4, 81b38 <_vfiprintf_r+0x71c>
   81b1e:	3202      	adds	r2, #2
   81b20:	a812      	add	r0, sp, #72	; 0x48
   81b22:	2302      	movs	r3, #2
   81b24:	2907      	cmp	r1, #7
   81b26:	9215      	str	r2, [sp, #84]	; 0x54
   81b28:	9114      	str	r1, [sp, #80]	; 0x50
   81b2a:	e886 0009 	stmia.w	r6, {r0, r3}
   81b2e:	f300 8157 	bgt.w	81de0 <_vfiprintf_r+0x9c4>
   81b32:	460b      	mov	r3, r1
   81b34:	3608      	adds	r6, #8
   81b36:	3101      	adds	r1, #1
   81b38:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   81b3a:	2d80      	cmp	r5, #128	; 0x80
   81b3c:	f000 8101 	beq.w	81d42 <_vfiprintf_r+0x926>
   81b40:	9d05      	ldr	r5, [sp, #20]
   81b42:	ebc5 040c 	rsb	r4, r5, ip
   81b46:	2c00      	cmp	r4, #0
   81b48:	dd2f      	ble.n	81baa <_vfiprintf_r+0x78e>
   81b4a:	2c10      	cmp	r4, #16
   81b4c:	4d57      	ldr	r5, [pc, #348]	; (81cac <_vfiprintf_r+0x890>)
   81b4e:	dd22      	ble.n	81b96 <_vfiprintf_r+0x77a>
   81b50:	4630      	mov	r0, r6
   81b52:	f04f 0b10 	mov.w	fp, #16
   81b56:	462e      	mov	r6, r5
   81b58:	4625      	mov	r5, r4
   81b5a:	9c06      	ldr	r4, [sp, #24]
   81b5c:	e006      	b.n	81b6c <_vfiprintf_r+0x750>
   81b5e:	f103 0c02 	add.w	ip, r3, #2
   81b62:	3008      	adds	r0, #8
   81b64:	460b      	mov	r3, r1
   81b66:	3d10      	subs	r5, #16
   81b68:	2d10      	cmp	r5, #16
   81b6a:	dd10      	ble.n	81b8e <_vfiprintf_r+0x772>
   81b6c:	1c59      	adds	r1, r3, #1
   81b6e:	3210      	adds	r2, #16
   81b70:	2907      	cmp	r1, #7
   81b72:	9215      	str	r2, [sp, #84]	; 0x54
   81b74:	e880 0840 	stmia.w	r0, {r6, fp}
   81b78:	9114      	str	r1, [sp, #80]	; 0x50
   81b7a:	ddf0      	ble.n	81b5e <_vfiprintf_r+0x742>
   81b7c:	2a00      	cmp	r2, #0
   81b7e:	d163      	bne.n	81c48 <_vfiprintf_r+0x82c>
   81b80:	3d10      	subs	r5, #16
   81b82:	2d10      	cmp	r5, #16
   81b84:	f04f 0c01 	mov.w	ip, #1
   81b88:	4613      	mov	r3, r2
   81b8a:	4648      	mov	r0, r9
   81b8c:	dcee      	bgt.n	81b6c <_vfiprintf_r+0x750>
   81b8e:	462c      	mov	r4, r5
   81b90:	4661      	mov	r1, ip
   81b92:	4635      	mov	r5, r6
   81b94:	4606      	mov	r6, r0
   81b96:	4422      	add	r2, r4
   81b98:	2907      	cmp	r1, #7
   81b9a:	9215      	str	r2, [sp, #84]	; 0x54
   81b9c:	6035      	str	r5, [r6, #0]
   81b9e:	6074      	str	r4, [r6, #4]
   81ba0:	9114      	str	r1, [sp, #80]	; 0x50
   81ba2:	f300 80c1 	bgt.w	81d28 <_vfiprintf_r+0x90c>
   81ba6:	3608      	adds	r6, #8
   81ba8:	3101      	adds	r1, #1
   81baa:	9d05      	ldr	r5, [sp, #20]
   81bac:	2907      	cmp	r1, #7
   81bae:	442a      	add	r2, r5
   81bb0:	9215      	str	r2, [sp, #84]	; 0x54
   81bb2:	6037      	str	r7, [r6, #0]
   81bb4:	6075      	str	r5, [r6, #4]
   81bb6:	9114      	str	r1, [sp, #80]	; 0x50
   81bb8:	f340 80c1 	ble.w	81d3e <_vfiprintf_r+0x922>
   81bbc:	2a00      	cmp	r2, #0
   81bbe:	f040 8130 	bne.w	81e22 <_vfiprintf_r+0xa06>
   81bc2:	9214      	str	r2, [sp, #80]	; 0x50
   81bc4:	464e      	mov	r6, r9
   81bc6:	f01a 0f04 	tst.w	sl, #4
   81bca:	f000 808b 	beq.w	81ce4 <_vfiprintf_r+0x8c8>
   81bce:	9d04      	ldr	r5, [sp, #16]
   81bd0:	f8dd b00c 	ldr.w	fp, [sp, #12]
   81bd4:	ebcb 0405 	rsb	r4, fp, r5
   81bd8:	2c00      	cmp	r4, #0
   81bda:	f340 8083 	ble.w	81ce4 <_vfiprintf_r+0x8c8>
   81bde:	2c10      	cmp	r4, #16
   81be0:	f340 821e 	ble.w	82020 <_vfiprintf_r+0xc04>
   81be4:	9914      	ldr	r1, [sp, #80]	; 0x50
   81be6:	4d32      	ldr	r5, [pc, #200]	; (81cb0 <_vfiprintf_r+0x894>)
   81be8:	2710      	movs	r7, #16
   81bea:	f8dd a018 	ldr.w	sl, [sp, #24]
   81bee:	f8dd b008 	ldr.w	fp, [sp, #8]
   81bf2:	e005      	b.n	81c00 <_vfiprintf_r+0x7e4>
   81bf4:	1c88      	adds	r0, r1, #2
   81bf6:	3608      	adds	r6, #8
   81bf8:	4619      	mov	r1, r3
   81bfa:	3c10      	subs	r4, #16
   81bfc:	2c10      	cmp	r4, #16
   81bfe:	dd10      	ble.n	81c22 <_vfiprintf_r+0x806>
   81c00:	1c4b      	adds	r3, r1, #1
   81c02:	3210      	adds	r2, #16
   81c04:	2b07      	cmp	r3, #7
   81c06:	9215      	str	r2, [sp, #84]	; 0x54
   81c08:	e886 00a0 	stmia.w	r6, {r5, r7}
   81c0c:	9314      	str	r3, [sp, #80]	; 0x50
   81c0e:	ddf1      	ble.n	81bf4 <_vfiprintf_r+0x7d8>
   81c10:	2a00      	cmp	r2, #0
   81c12:	d17d      	bne.n	81d10 <_vfiprintf_r+0x8f4>
   81c14:	3c10      	subs	r4, #16
   81c16:	2c10      	cmp	r4, #16
   81c18:	f04f 0001 	mov.w	r0, #1
   81c1c:	4611      	mov	r1, r2
   81c1e:	464e      	mov	r6, r9
   81c20:	dcee      	bgt.n	81c00 <_vfiprintf_r+0x7e4>
   81c22:	4422      	add	r2, r4
   81c24:	2807      	cmp	r0, #7
   81c26:	9215      	str	r2, [sp, #84]	; 0x54
   81c28:	6035      	str	r5, [r6, #0]
   81c2a:	6074      	str	r4, [r6, #4]
   81c2c:	9014      	str	r0, [sp, #80]	; 0x50
   81c2e:	dd59      	ble.n	81ce4 <_vfiprintf_r+0x8c8>
   81c30:	2a00      	cmp	r2, #0
   81c32:	d14f      	bne.n	81cd4 <_vfiprintf_r+0x8b8>
   81c34:	9c09      	ldr	r4, [sp, #36]	; 0x24
   81c36:	f8dd b00c 	ldr.w	fp, [sp, #12]
   81c3a:	9d04      	ldr	r5, [sp, #16]
   81c3c:	45ab      	cmp	fp, r5
   81c3e:	bfac      	ite	ge
   81c40:	445c      	addge	r4, fp
   81c42:	1964      	addlt	r4, r4, r5
   81c44:	9409      	str	r4, [sp, #36]	; 0x24
   81c46:	e05e      	b.n	81d06 <_vfiprintf_r+0x8ea>
   81c48:	4620      	mov	r0, r4
   81c4a:	9902      	ldr	r1, [sp, #8]
   81c4c:	aa13      	add	r2, sp, #76	; 0x4c
   81c4e:	f7ff fba9 	bl	813a4 <__sprint_r.part.0>
   81c52:	2800      	cmp	r0, #0
   81c54:	d135      	bne.n	81cc2 <_vfiprintf_r+0x8a6>
   81c56:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81c58:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81c5a:	f103 0c01 	add.w	ip, r3, #1
   81c5e:	4648      	mov	r0, r9
   81c60:	e781      	b.n	81b66 <_vfiprintf_r+0x74a>
   81c62:	08e0      	lsrs	r0, r4, #3
   81c64:	ea40 7045 	orr.w	r0, r0, r5, lsl #29
   81c68:	f004 0207 	and.w	r2, r4, #7
   81c6c:	08e9      	lsrs	r1, r5, #3
   81c6e:	3230      	adds	r2, #48	; 0x30
   81c70:	ea50 0b01 	orrs.w	fp, r0, r1
   81c74:	461f      	mov	r7, r3
   81c76:	701a      	strb	r2, [r3, #0]
   81c78:	4604      	mov	r4, r0
   81c7a:	460d      	mov	r5, r1
   81c7c:	f103 33ff 	add.w	r3, r3, #4294967295
   81c80:	d1ef      	bne.n	81c62 <_vfiprintf_r+0x846>
   81c82:	f01a 0f01 	tst.w	sl, #1
   81c86:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   81c8a:	4639      	mov	r1, r7
   81c8c:	f000 80b9 	beq.w	81e02 <_vfiprintf_r+0x9e6>
   81c90:	2a30      	cmp	r2, #48	; 0x30
   81c92:	f43f acf4 	beq.w	8167e <_vfiprintf_r+0x262>
   81c96:	461f      	mov	r7, r3
   81c98:	ebc7 0509 	rsb	r5, r7, r9
   81c9c:	2330      	movs	r3, #48	; 0x30
   81c9e:	9505      	str	r5, [sp, #20]
   81ca0:	f801 3c01 	strb.w	r3, [r1, #-1]
   81ca4:	e4ee      	b.n	81684 <_vfiprintf_r+0x268>
   81ca6:	bf00      	nop
   81ca8:	000841a4 	.word	0x000841a4
   81cac:	000841c0 	.word	0x000841c0
   81cb0:	000841d0 	.word	0x000841d0
   81cb4:	9b15      	ldr	r3, [sp, #84]	; 0x54
   81cb6:	b123      	cbz	r3, 81cc2 <_vfiprintf_r+0x8a6>
   81cb8:	9806      	ldr	r0, [sp, #24]
   81cba:	9902      	ldr	r1, [sp, #8]
   81cbc:	aa13      	add	r2, sp, #76	; 0x4c
   81cbe:	f7ff fb71 	bl	813a4 <__sprint_r.part.0>
   81cc2:	9c02      	ldr	r4, [sp, #8]
   81cc4:	89a3      	ldrh	r3, [r4, #12]
   81cc6:	065b      	lsls	r3, r3, #25
   81cc8:	f53f ac98 	bmi.w	815fc <_vfiprintf_r+0x1e0>
   81ccc:	9809      	ldr	r0, [sp, #36]	; 0x24
   81cce:	b031      	add	sp, #196	; 0xc4
   81cd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81cd4:	9806      	ldr	r0, [sp, #24]
   81cd6:	9902      	ldr	r1, [sp, #8]
   81cd8:	aa13      	add	r2, sp, #76	; 0x4c
   81cda:	f7ff fb63 	bl	813a4 <__sprint_r.part.0>
   81cde:	2800      	cmp	r0, #0
   81ce0:	d1ef      	bne.n	81cc2 <_vfiprintf_r+0x8a6>
   81ce2:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81ce4:	9c09      	ldr	r4, [sp, #36]	; 0x24
   81ce6:	f8dd b00c 	ldr.w	fp, [sp, #12]
   81cea:	9d04      	ldr	r5, [sp, #16]
   81cec:	45ab      	cmp	fp, r5
   81cee:	bfac      	ite	ge
   81cf0:	445c      	addge	r4, fp
   81cf2:	1964      	addlt	r4, r4, r5
   81cf4:	9409      	str	r4, [sp, #36]	; 0x24
   81cf6:	b132      	cbz	r2, 81d06 <_vfiprintf_r+0x8ea>
   81cf8:	9806      	ldr	r0, [sp, #24]
   81cfa:	9902      	ldr	r1, [sp, #8]
   81cfc:	aa13      	add	r2, sp, #76	; 0x4c
   81cfe:	f7ff fb51 	bl	813a4 <__sprint_r.part.0>
   81d02:	2800      	cmp	r0, #0
   81d04:	d1dd      	bne.n	81cc2 <_vfiprintf_r+0x8a6>
   81d06:	2000      	movs	r0, #0
   81d08:	9014      	str	r0, [sp, #80]	; 0x50
   81d0a:	464e      	mov	r6, r9
   81d0c:	f7ff bbb9 	b.w	81482 <_vfiprintf_r+0x66>
   81d10:	4650      	mov	r0, sl
   81d12:	4659      	mov	r1, fp
   81d14:	aa13      	add	r2, sp, #76	; 0x4c
   81d16:	f7ff fb45 	bl	813a4 <__sprint_r.part.0>
   81d1a:	2800      	cmp	r0, #0
   81d1c:	d1d1      	bne.n	81cc2 <_vfiprintf_r+0x8a6>
   81d1e:	9914      	ldr	r1, [sp, #80]	; 0x50
   81d20:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81d22:	1c48      	adds	r0, r1, #1
   81d24:	464e      	mov	r6, r9
   81d26:	e768      	b.n	81bfa <_vfiprintf_r+0x7de>
   81d28:	2a00      	cmp	r2, #0
   81d2a:	f040 80f7 	bne.w	81f1c <_vfiprintf_r+0xb00>
   81d2e:	9c05      	ldr	r4, [sp, #20]
   81d30:	2301      	movs	r3, #1
   81d32:	9720      	str	r7, [sp, #128]	; 0x80
   81d34:	9421      	str	r4, [sp, #132]	; 0x84
   81d36:	9415      	str	r4, [sp, #84]	; 0x54
   81d38:	4622      	mov	r2, r4
   81d3a:	9314      	str	r3, [sp, #80]	; 0x50
   81d3c:	464e      	mov	r6, r9
   81d3e:	3608      	adds	r6, #8
   81d40:	e741      	b.n	81bc6 <_vfiprintf_r+0x7aa>
   81d42:	9d04      	ldr	r5, [sp, #16]
   81d44:	f8dd b00c 	ldr.w	fp, [sp, #12]
   81d48:	ebcb 0405 	rsb	r4, fp, r5
   81d4c:	2c00      	cmp	r4, #0
   81d4e:	f77f aef7 	ble.w	81b40 <_vfiprintf_r+0x724>
   81d52:	2c10      	cmp	r4, #16
   81d54:	4da6      	ldr	r5, [pc, #664]	; (81ff0 <_vfiprintf_r+0xbd4>)
   81d56:	f340 8170 	ble.w	8203a <_vfiprintf_r+0xc1e>
   81d5a:	4629      	mov	r1, r5
   81d5c:	f04f 0b10 	mov.w	fp, #16
   81d60:	4625      	mov	r5, r4
   81d62:	4664      	mov	r4, ip
   81d64:	46b4      	mov	ip, r6
   81d66:	460e      	mov	r6, r1
   81d68:	e006      	b.n	81d78 <_vfiprintf_r+0x95c>
   81d6a:	1c98      	adds	r0, r3, #2
   81d6c:	f10c 0c08 	add.w	ip, ip, #8
   81d70:	460b      	mov	r3, r1
   81d72:	3d10      	subs	r5, #16
   81d74:	2d10      	cmp	r5, #16
   81d76:	dd0f      	ble.n	81d98 <_vfiprintf_r+0x97c>
   81d78:	1c59      	adds	r1, r3, #1
   81d7a:	3210      	adds	r2, #16
   81d7c:	2907      	cmp	r1, #7
   81d7e:	9215      	str	r2, [sp, #84]	; 0x54
   81d80:	e88c 0840 	stmia.w	ip, {r6, fp}
   81d84:	9114      	str	r1, [sp, #80]	; 0x50
   81d86:	ddf0      	ble.n	81d6a <_vfiprintf_r+0x94e>
   81d88:	b9ba      	cbnz	r2, 81dba <_vfiprintf_r+0x99e>
   81d8a:	3d10      	subs	r5, #16
   81d8c:	2d10      	cmp	r5, #16
   81d8e:	f04f 0001 	mov.w	r0, #1
   81d92:	4613      	mov	r3, r2
   81d94:	46cc      	mov	ip, r9
   81d96:	dcef      	bgt.n	81d78 <_vfiprintf_r+0x95c>
   81d98:	4633      	mov	r3, r6
   81d9a:	4666      	mov	r6, ip
   81d9c:	46a4      	mov	ip, r4
   81d9e:	462c      	mov	r4, r5
   81da0:	461d      	mov	r5, r3
   81da2:	4422      	add	r2, r4
   81da4:	2807      	cmp	r0, #7
   81da6:	9215      	str	r2, [sp, #84]	; 0x54
   81da8:	6035      	str	r5, [r6, #0]
   81daa:	6074      	str	r4, [r6, #4]
   81dac:	9014      	str	r0, [sp, #80]	; 0x50
   81dae:	f300 80af 	bgt.w	81f10 <_vfiprintf_r+0xaf4>
   81db2:	3608      	adds	r6, #8
   81db4:	1c41      	adds	r1, r0, #1
   81db6:	4603      	mov	r3, r0
   81db8:	e6c2      	b.n	81b40 <_vfiprintf_r+0x724>
   81dba:	9806      	ldr	r0, [sp, #24]
   81dbc:	9902      	ldr	r1, [sp, #8]
   81dbe:	aa13      	add	r2, sp, #76	; 0x4c
   81dc0:	f7ff faf0 	bl	813a4 <__sprint_r.part.0>
   81dc4:	2800      	cmp	r0, #0
   81dc6:	f47f af7c 	bne.w	81cc2 <_vfiprintf_r+0x8a6>
   81dca:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81dcc:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81dce:	1c58      	adds	r0, r3, #1
   81dd0:	46cc      	mov	ip, r9
   81dd2:	e7ce      	b.n	81d72 <_vfiprintf_r+0x956>
   81dd4:	2a00      	cmp	r2, #0
   81dd6:	d179      	bne.n	81ecc <_vfiprintf_r+0xab0>
   81dd8:	4619      	mov	r1, r3
   81dda:	464e      	mov	r6, r9
   81ddc:	4613      	mov	r3, r2
   81dde:	e69c      	b.n	81b1a <_vfiprintf_r+0x6fe>
   81de0:	2a00      	cmp	r2, #0
   81de2:	f040 8084 	bne.w	81eee <_vfiprintf_r+0xad2>
   81de6:	2101      	movs	r1, #1
   81de8:	4613      	mov	r3, r2
   81dea:	464e      	mov	r6, r9
   81dec:	e6a4      	b.n	81b38 <_vfiprintf_r+0x71c>
   81dee:	464f      	mov	r7, r9
   81df0:	e448      	b.n	81684 <_vfiprintf_r+0x268>
   81df2:	2d00      	cmp	r5, #0
   81df4:	bf08      	it	eq
   81df6:	2c0a      	cmpeq	r4, #10
   81df8:	d246      	bcs.n	81e88 <_vfiprintf_r+0xa6c>
   81dfa:	3430      	adds	r4, #48	; 0x30
   81dfc:	af30      	add	r7, sp, #192	; 0xc0
   81dfe:	f807 4d41 	strb.w	r4, [r7, #-65]!
   81e02:	ebc7 0309 	rsb	r3, r7, r9
   81e06:	9305      	str	r3, [sp, #20]
   81e08:	e43c      	b.n	81684 <_vfiprintf_r+0x268>
   81e0a:	2302      	movs	r3, #2
   81e0c:	e417      	b.n	8163e <_vfiprintf_r+0x222>
   81e0e:	2a00      	cmp	r2, #0
   81e10:	f040 80af 	bne.w	81f72 <_vfiprintf_r+0xb56>
   81e14:	4613      	mov	r3, r2
   81e16:	2101      	movs	r1, #1
   81e18:	464e      	mov	r6, r9
   81e1a:	e66d      	b.n	81af8 <_vfiprintf_r+0x6dc>
   81e1c:	4644      	mov	r4, r8
   81e1e:	f7ff bb58 	b.w	814d2 <_vfiprintf_r+0xb6>
   81e22:	9806      	ldr	r0, [sp, #24]
   81e24:	9902      	ldr	r1, [sp, #8]
   81e26:	aa13      	add	r2, sp, #76	; 0x4c
   81e28:	f7ff fabc 	bl	813a4 <__sprint_r.part.0>
   81e2c:	2800      	cmp	r0, #0
   81e2e:	f47f af48 	bne.w	81cc2 <_vfiprintf_r+0x8a6>
   81e32:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81e34:	464e      	mov	r6, r9
   81e36:	e6c6      	b.n	81bc6 <_vfiprintf_r+0x7aa>
   81e38:	9d08      	ldr	r5, [sp, #32]
   81e3a:	682c      	ldr	r4, [r5, #0]
   81e3c:	3504      	adds	r5, #4
   81e3e:	9508      	str	r5, [sp, #32]
   81e40:	2500      	movs	r5, #0
   81e42:	f7ff bbfc 	b.w	8163e <_vfiprintf_r+0x222>
   81e46:	9d08      	ldr	r5, [sp, #32]
   81e48:	2301      	movs	r3, #1
   81e4a:	682c      	ldr	r4, [r5, #0]
   81e4c:	3504      	adds	r5, #4
   81e4e:	9508      	str	r5, [sp, #32]
   81e50:	2500      	movs	r5, #0
   81e52:	f7ff bbf4 	b.w	8163e <_vfiprintf_r+0x222>
   81e56:	9d08      	ldr	r5, [sp, #32]
   81e58:	682c      	ldr	r4, [r5, #0]
   81e5a:	3504      	adds	r5, #4
   81e5c:	9508      	str	r5, [sp, #32]
   81e5e:	2500      	movs	r5, #0
   81e60:	e525      	b.n	818ae <_vfiprintf_r+0x492>
   81e62:	9d08      	ldr	r5, [sp, #32]
   81e64:	682c      	ldr	r4, [r5, #0]
   81e66:	3504      	adds	r5, #4
   81e68:	9508      	str	r5, [sp, #32]
   81e6a:	17e5      	asrs	r5, r4, #31
   81e6c:	4622      	mov	r2, r4
   81e6e:	462b      	mov	r3, r5
   81e70:	e48e      	b.n	81790 <_vfiprintf_r+0x374>
   81e72:	9806      	ldr	r0, [sp, #24]
   81e74:	9902      	ldr	r1, [sp, #8]
   81e76:	aa13      	add	r2, sp, #76	; 0x4c
   81e78:	f7ff fa94 	bl	813a4 <__sprint_r.part.0>
   81e7c:	2800      	cmp	r0, #0
   81e7e:	f47f af20 	bne.w	81cc2 <_vfiprintf_r+0x8a6>
   81e82:	464e      	mov	r6, r9
   81e84:	f7ff bb9a 	b.w	815bc <_vfiprintf_r+0x1a0>
   81e88:	f10d 0b7f 	add.w	fp, sp, #127	; 0x7f
   81e8c:	9603      	str	r6, [sp, #12]
   81e8e:	465e      	mov	r6, fp
   81e90:	46e3      	mov	fp, ip
   81e92:	4620      	mov	r0, r4
   81e94:	4629      	mov	r1, r5
   81e96:	220a      	movs	r2, #10
   81e98:	2300      	movs	r3, #0
   81e9a:	f001 fe5f 	bl	83b5c <__aeabi_uldivmod>
   81e9e:	3230      	adds	r2, #48	; 0x30
   81ea0:	7032      	strb	r2, [r6, #0]
   81ea2:	4620      	mov	r0, r4
   81ea4:	4629      	mov	r1, r5
   81ea6:	220a      	movs	r2, #10
   81ea8:	2300      	movs	r3, #0
   81eaa:	f001 fe57 	bl	83b5c <__aeabi_uldivmod>
   81eae:	4604      	mov	r4, r0
   81eb0:	460d      	mov	r5, r1
   81eb2:	ea54 0005 	orrs.w	r0, r4, r5
   81eb6:	4637      	mov	r7, r6
   81eb8:	f106 36ff 	add.w	r6, r6, #4294967295
   81ebc:	d1e9      	bne.n	81e92 <_vfiprintf_r+0xa76>
   81ebe:	ebc7 0309 	rsb	r3, r7, r9
   81ec2:	46dc      	mov	ip, fp
   81ec4:	9e03      	ldr	r6, [sp, #12]
   81ec6:	9305      	str	r3, [sp, #20]
   81ec8:	f7ff bbdc 	b.w	81684 <_vfiprintf_r+0x268>
   81ecc:	9806      	ldr	r0, [sp, #24]
   81ece:	9902      	ldr	r1, [sp, #8]
   81ed0:	aa13      	add	r2, sp, #76	; 0x4c
   81ed2:	f8cd c004 	str.w	ip, [sp, #4]
   81ed6:	f7ff fa65 	bl	813a4 <__sprint_r.part.0>
   81eda:	f8dd c004 	ldr.w	ip, [sp, #4]
   81ede:	2800      	cmp	r0, #0
   81ee0:	f47f aeef 	bne.w	81cc2 <_vfiprintf_r+0x8a6>
   81ee4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81ee6:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81ee8:	1c59      	adds	r1, r3, #1
   81eea:	464e      	mov	r6, r9
   81eec:	e615      	b.n	81b1a <_vfiprintf_r+0x6fe>
   81eee:	9806      	ldr	r0, [sp, #24]
   81ef0:	9902      	ldr	r1, [sp, #8]
   81ef2:	aa13      	add	r2, sp, #76	; 0x4c
   81ef4:	f8cd c004 	str.w	ip, [sp, #4]
   81ef8:	f7ff fa54 	bl	813a4 <__sprint_r.part.0>
   81efc:	f8dd c004 	ldr.w	ip, [sp, #4]
   81f00:	2800      	cmp	r0, #0
   81f02:	f47f aede 	bne.w	81cc2 <_vfiprintf_r+0x8a6>
   81f06:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81f08:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81f0a:	1c59      	adds	r1, r3, #1
   81f0c:	464e      	mov	r6, r9
   81f0e:	e613      	b.n	81b38 <_vfiprintf_r+0x71c>
   81f10:	2a00      	cmp	r2, #0
   81f12:	d156      	bne.n	81fc2 <_vfiprintf_r+0xba6>
   81f14:	2101      	movs	r1, #1
   81f16:	4613      	mov	r3, r2
   81f18:	464e      	mov	r6, r9
   81f1a:	e611      	b.n	81b40 <_vfiprintf_r+0x724>
   81f1c:	9806      	ldr	r0, [sp, #24]
   81f1e:	9902      	ldr	r1, [sp, #8]
   81f20:	aa13      	add	r2, sp, #76	; 0x4c
   81f22:	f7ff fa3f 	bl	813a4 <__sprint_r.part.0>
   81f26:	2800      	cmp	r0, #0
   81f28:	f47f aecb 	bne.w	81cc2 <_vfiprintf_r+0x8a6>
   81f2c:	9914      	ldr	r1, [sp, #80]	; 0x50
   81f2e:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81f30:	3101      	adds	r1, #1
   81f32:	464e      	mov	r6, r9
   81f34:	e639      	b.n	81baa <_vfiprintf_r+0x78e>
   81f36:	f04f 0b2d 	mov.w	fp, #45	; 0x2d
   81f3a:	4264      	negs	r4, r4
   81f3c:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   81f40:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
   81f44:	f8cd b01c 	str.w	fp, [sp, #28]
   81f48:	f8cd c014 	str.w	ip, [sp, #20]
   81f4c:	2301      	movs	r3, #1
   81f4e:	f7ff bb7e 	b.w	8164e <_vfiprintf_r+0x232>
   81f52:	f01a 0f10 	tst.w	sl, #16
   81f56:	d11d      	bne.n	81f94 <_vfiprintf_r+0xb78>
   81f58:	f01a 0f40 	tst.w	sl, #64	; 0x40
   81f5c:	d058      	beq.n	82010 <_vfiprintf_r+0xbf4>
   81f5e:	9d08      	ldr	r5, [sp, #32]
   81f60:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
   81f64:	682b      	ldr	r3, [r5, #0]
   81f66:	3504      	adds	r5, #4
   81f68:	9508      	str	r5, [sp, #32]
   81f6a:	f8a3 b000 	strh.w	fp, [r3]
   81f6e:	f7ff ba88 	b.w	81482 <_vfiprintf_r+0x66>
   81f72:	9806      	ldr	r0, [sp, #24]
   81f74:	9902      	ldr	r1, [sp, #8]
   81f76:	aa13      	add	r2, sp, #76	; 0x4c
   81f78:	f8cd c004 	str.w	ip, [sp, #4]
   81f7c:	f7ff fa12 	bl	813a4 <__sprint_r.part.0>
   81f80:	f8dd c004 	ldr.w	ip, [sp, #4]
   81f84:	2800      	cmp	r0, #0
   81f86:	f47f ae9c 	bne.w	81cc2 <_vfiprintf_r+0x8a6>
   81f8a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81f8c:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81f8e:	1c59      	adds	r1, r3, #1
   81f90:	464e      	mov	r6, r9
   81f92:	e5b1      	b.n	81af8 <_vfiprintf_r+0x6dc>
   81f94:	f8dd b020 	ldr.w	fp, [sp, #32]
   81f98:	9c09      	ldr	r4, [sp, #36]	; 0x24
   81f9a:	f8db 3000 	ldr.w	r3, [fp]
   81f9e:	f10b 0b04 	add.w	fp, fp, #4
   81fa2:	f8cd b020 	str.w	fp, [sp, #32]
   81fa6:	601c      	str	r4, [r3, #0]
   81fa8:	f7ff ba6b 	b.w	81482 <_vfiprintf_r+0x66>
   81fac:	9408      	str	r4, [sp, #32]
   81fae:	f001 fc0b 	bl	837c8 <strlen>
   81fb2:	f89d 4047 	ldrb.w	r4, [sp, #71]	; 0x47
   81fb6:	9005      	str	r0, [sp, #20]
   81fb8:	9407      	str	r4, [sp, #28]
   81fba:	f04f 0c00 	mov.w	ip, #0
   81fbe:	f7ff bb61 	b.w	81684 <_vfiprintf_r+0x268>
   81fc2:	9806      	ldr	r0, [sp, #24]
   81fc4:	9902      	ldr	r1, [sp, #8]
   81fc6:	aa13      	add	r2, sp, #76	; 0x4c
   81fc8:	f8cd c004 	str.w	ip, [sp, #4]
   81fcc:	f7ff f9ea 	bl	813a4 <__sprint_r.part.0>
   81fd0:	f8dd c004 	ldr.w	ip, [sp, #4]
   81fd4:	2800      	cmp	r0, #0
   81fd6:	f47f ae74 	bne.w	81cc2 <_vfiprintf_r+0x8a6>
   81fda:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81fdc:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81fde:	1c59      	adds	r1, r3, #1
   81fe0:	464e      	mov	r6, r9
   81fe2:	e5ad      	b.n	81b40 <_vfiprintf_r+0x724>
   81fe4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81fe6:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81fe8:	3301      	adds	r3, #1
   81fea:	4d02      	ldr	r5, [pc, #8]	; (81ff4 <_vfiprintf_r+0xbd8>)
   81fec:	f7ff bb9a 	b.w	81724 <_vfiprintf_r+0x308>
   81ff0:	000841c0 	.word	0x000841c0
   81ff4:	000841d0 	.word	0x000841d0
   81ff8:	f1bc 0f06 	cmp.w	ip, #6
   81ffc:	bf34      	ite	cc
   81ffe:	4663      	movcc	r3, ip
   82000:	2306      	movcs	r3, #6
   82002:	9408      	str	r4, [sp, #32]
   82004:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
   82008:	9305      	str	r3, [sp, #20]
   8200a:	9403      	str	r4, [sp, #12]
   8200c:	4f16      	ldr	r7, [pc, #88]	; (82068 <_vfiprintf_r+0xc4c>)
   8200e:	e472      	b.n	818f6 <_vfiprintf_r+0x4da>
   82010:	9c08      	ldr	r4, [sp, #32]
   82012:	9d09      	ldr	r5, [sp, #36]	; 0x24
   82014:	6823      	ldr	r3, [r4, #0]
   82016:	3404      	adds	r4, #4
   82018:	9408      	str	r4, [sp, #32]
   8201a:	601d      	str	r5, [r3, #0]
   8201c:	f7ff ba31 	b.w	81482 <_vfiprintf_r+0x66>
   82020:	9814      	ldr	r0, [sp, #80]	; 0x50
   82022:	4d12      	ldr	r5, [pc, #72]	; (8206c <_vfiprintf_r+0xc50>)
   82024:	3001      	adds	r0, #1
   82026:	e5fc      	b.n	81c22 <_vfiprintf_r+0x806>
   82028:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
   8202c:	f8cd c014 	str.w	ip, [sp, #20]
   82030:	9507      	str	r5, [sp, #28]
   82032:	9408      	str	r4, [sp, #32]
   82034:	4684      	mov	ip, r0
   82036:	f7ff bb25 	b.w	81684 <_vfiprintf_r+0x268>
   8203a:	4608      	mov	r0, r1
   8203c:	e6b1      	b.n	81da2 <_vfiprintf_r+0x986>
   8203e:	46a0      	mov	r8, r4
   82040:	2500      	movs	r5, #0
   82042:	f7ff ba5a 	b.w	814fa <_vfiprintf_r+0xde>
   82046:	f8dd b020 	ldr.w	fp, [sp, #32]
   8204a:	f898 3001 	ldrb.w	r3, [r8, #1]
   8204e:	f8db 5000 	ldr.w	r5, [fp]
   82052:	f10b 0204 	add.w	r2, fp, #4
   82056:	2d00      	cmp	r5, #0
   82058:	9208      	str	r2, [sp, #32]
   8205a:	46a0      	mov	r8, r4
   8205c:	f6bf aa4b 	bge.w	814f6 <_vfiprintf_r+0xda>
   82060:	f04f 35ff 	mov.w	r5, #4294967295
   82064:	f7ff ba47 	b.w	814f6 <_vfiprintf_r+0xda>
   82068:	000841b8 	.word	0x000841b8
   8206c:	000841d0 	.word	0x000841d0

00082070 <__sbprintf>:
   82070:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   82074:	6e4f      	ldr	r7, [r1, #100]	; 0x64
   82076:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   8207a:	4688      	mov	r8, r1
   8207c:	9719      	str	r7, [sp, #100]	; 0x64
   8207e:	f8d8 701c 	ldr.w	r7, [r8, #28]
   82082:	f8b1 a00c 	ldrh.w	sl, [r1, #12]
   82086:	f8b1 900e 	ldrh.w	r9, [r1, #14]
   8208a:	9707      	str	r7, [sp, #28]
   8208c:	f8d8 7024 	ldr.w	r7, [r8, #36]	; 0x24
   82090:	ac1a      	add	r4, sp, #104	; 0x68
   82092:	f44f 6580 	mov.w	r5, #1024	; 0x400
   82096:	f02a 0a02 	bic.w	sl, sl, #2
   8209a:	2600      	movs	r6, #0
   8209c:	4669      	mov	r1, sp
   8209e:	9400      	str	r4, [sp, #0]
   820a0:	9404      	str	r4, [sp, #16]
   820a2:	9502      	str	r5, [sp, #8]
   820a4:	9505      	str	r5, [sp, #20]
   820a6:	f8ad a00c 	strh.w	sl, [sp, #12]
   820aa:	f8ad 900e 	strh.w	r9, [sp, #14]
   820ae:	9709      	str	r7, [sp, #36]	; 0x24
   820b0:	9606      	str	r6, [sp, #24]
   820b2:	4605      	mov	r5, r0
   820b4:	f7ff f9b2 	bl	8141c <_vfiprintf_r>
   820b8:	1e04      	subs	r4, r0, #0
   820ba:	db07      	blt.n	820cc <__sbprintf+0x5c>
   820bc:	4628      	mov	r0, r5
   820be:	4669      	mov	r1, sp
   820c0:	f000 f92a 	bl	82318 <_fflush_r>
   820c4:	42b0      	cmp	r0, r6
   820c6:	bf18      	it	ne
   820c8:	f04f 34ff 	movne.w	r4, #4294967295
   820cc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   820d0:	065b      	lsls	r3, r3, #25
   820d2:	d505      	bpl.n	820e0 <__sbprintf+0x70>
   820d4:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   820d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   820dc:	f8a8 300c 	strh.w	r3, [r8, #12]
   820e0:	4620      	mov	r0, r4
   820e2:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   820e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   820ea:	bf00      	nop

000820ec <__swsetup_r>:
   820ec:	4b2f      	ldr	r3, [pc, #188]	; (821ac <__swsetup_r+0xc0>)
   820ee:	b570      	push	{r4, r5, r6, lr}
   820f0:	4606      	mov	r6, r0
   820f2:	6818      	ldr	r0, [r3, #0]
   820f4:	460c      	mov	r4, r1
   820f6:	b110      	cbz	r0, 820fe <__swsetup_r+0x12>
   820f8:	6b82      	ldr	r2, [r0, #56]	; 0x38
   820fa:	2a00      	cmp	r2, #0
   820fc:	d036      	beq.n	8216c <__swsetup_r+0x80>
   820fe:	89a5      	ldrh	r5, [r4, #12]
   82100:	b2ab      	uxth	r3, r5
   82102:	0719      	lsls	r1, r3, #28
   82104:	d50c      	bpl.n	82120 <__swsetup_r+0x34>
   82106:	6922      	ldr	r2, [r4, #16]
   82108:	b1aa      	cbz	r2, 82136 <__swsetup_r+0x4a>
   8210a:	f013 0101 	ands.w	r1, r3, #1
   8210e:	d01e      	beq.n	8214e <__swsetup_r+0x62>
   82110:	6963      	ldr	r3, [r4, #20]
   82112:	2100      	movs	r1, #0
   82114:	425b      	negs	r3, r3
   82116:	61a3      	str	r3, [r4, #24]
   82118:	60a1      	str	r1, [r4, #8]
   8211a:	b1f2      	cbz	r2, 8215a <__swsetup_r+0x6e>
   8211c:	2000      	movs	r0, #0
   8211e:	bd70      	pop	{r4, r5, r6, pc}
   82120:	06da      	lsls	r2, r3, #27
   82122:	d53a      	bpl.n	8219a <__swsetup_r+0xae>
   82124:	075b      	lsls	r3, r3, #29
   82126:	d424      	bmi.n	82172 <__swsetup_r+0x86>
   82128:	6922      	ldr	r2, [r4, #16]
   8212a:	f045 0308 	orr.w	r3, r5, #8
   8212e:	81a3      	strh	r3, [r4, #12]
   82130:	b29b      	uxth	r3, r3
   82132:	2a00      	cmp	r2, #0
   82134:	d1e9      	bne.n	8210a <__swsetup_r+0x1e>
   82136:	f403 7120 	and.w	r1, r3, #640	; 0x280
   8213a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   8213e:	d0e4      	beq.n	8210a <__swsetup_r+0x1e>
   82140:	4630      	mov	r0, r6
   82142:	4621      	mov	r1, r4
   82144:	f000 fcce 	bl	82ae4 <__smakebuf_r>
   82148:	89a3      	ldrh	r3, [r4, #12]
   8214a:	6922      	ldr	r2, [r4, #16]
   8214c:	e7dd      	b.n	8210a <__swsetup_r+0x1e>
   8214e:	0798      	lsls	r0, r3, #30
   82150:	bf58      	it	pl
   82152:	6961      	ldrpl	r1, [r4, #20]
   82154:	60a1      	str	r1, [r4, #8]
   82156:	2a00      	cmp	r2, #0
   82158:	d1e0      	bne.n	8211c <__swsetup_r+0x30>
   8215a:	89a3      	ldrh	r3, [r4, #12]
   8215c:	061a      	lsls	r2, r3, #24
   8215e:	d5dd      	bpl.n	8211c <__swsetup_r+0x30>
   82160:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82164:	81a3      	strh	r3, [r4, #12]
   82166:	f04f 30ff 	mov.w	r0, #4294967295
   8216a:	bd70      	pop	{r4, r5, r6, pc}
   8216c:	f000 f8f0 	bl	82350 <__sinit>
   82170:	e7c5      	b.n	820fe <__swsetup_r+0x12>
   82172:	6b21      	ldr	r1, [r4, #48]	; 0x30
   82174:	b149      	cbz	r1, 8218a <__swsetup_r+0x9e>
   82176:	f104 0340 	add.w	r3, r4, #64	; 0x40
   8217a:	4299      	cmp	r1, r3
   8217c:	d003      	beq.n	82186 <__swsetup_r+0x9a>
   8217e:	4630      	mov	r0, r6
   82180:	f000 fa2a 	bl	825d8 <_free_r>
   82184:	89a5      	ldrh	r5, [r4, #12]
   82186:	2300      	movs	r3, #0
   82188:	6323      	str	r3, [r4, #48]	; 0x30
   8218a:	6922      	ldr	r2, [r4, #16]
   8218c:	f025 0524 	bic.w	r5, r5, #36	; 0x24
   82190:	2100      	movs	r1, #0
   82192:	b2ad      	uxth	r5, r5
   82194:	6022      	str	r2, [r4, #0]
   82196:	6061      	str	r1, [r4, #4]
   82198:	e7c7      	b.n	8212a <__swsetup_r+0x3e>
   8219a:	f045 0540 	orr.w	r5, r5, #64	; 0x40
   8219e:	2309      	movs	r3, #9
   821a0:	6033      	str	r3, [r6, #0]
   821a2:	f04f 30ff 	mov.w	r0, #4294967295
   821a6:	81a5      	strh	r5, [r4, #12]
   821a8:	bd70      	pop	{r4, r5, r6, pc}
   821aa:	bf00      	nop
   821ac:	20070630 	.word	0x20070630

000821b0 <register_fini>:
   821b0:	4b02      	ldr	r3, [pc, #8]	; (821bc <register_fini+0xc>)
   821b2:	b113      	cbz	r3, 821ba <register_fini+0xa>
   821b4:	4802      	ldr	r0, [pc, #8]	; (821c0 <register_fini+0x10>)
   821b6:	f000 b805 	b.w	821c4 <atexit>
   821ba:	4770      	bx	lr
   821bc:	00000000 	.word	0x00000000
   821c0:	0008244d 	.word	0x0008244d

000821c4 <atexit>:
   821c4:	4601      	mov	r1, r0
   821c6:	2000      	movs	r0, #0
   821c8:	4602      	mov	r2, r0
   821ca:	4603      	mov	r3, r0
   821cc:	f001 bbca 	b.w	83964 <__register_exitproc>

000821d0 <__sflush_r>:
   821d0:	898b      	ldrh	r3, [r1, #12]
   821d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   821d6:	b29a      	uxth	r2, r3
   821d8:	460d      	mov	r5, r1
   821da:	0711      	lsls	r1, r2, #28
   821dc:	4680      	mov	r8, r0
   821de:	d43c      	bmi.n	8225a <__sflush_r+0x8a>
   821e0:	686a      	ldr	r2, [r5, #4]
   821e2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   821e6:	2a00      	cmp	r2, #0
   821e8:	81ab      	strh	r3, [r5, #12]
   821ea:	dd59      	ble.n	822a0 <__sflush_r+0xd0>
   821ec:	6aac      	ldr	r4, [r5, #40]	; 0x28
   821ee:	2c00      	cmp	r4, #0
   821f0:	d04b      	beq.n	8228a <__sflush_r+0xba>
   821f2:	b29b      	uxth	r3, r3
   821f4:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   821f8:	2100      	movs	r1, #0
   821fa:	b292      	uxth	r2, r2
   821fc:	f8d8 6000 	ldr.w	r6, [r8]
   82200:	f8c8 1000 	str.w	r1, [r8]
   82204:	2a00      	cmp	r2, #0
   82206:	d04f      	beq.n	822a8 <__sflush_r+0xd8>
   82208:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   8220a:	075f      	lsls	r7, r3, #29
   8220c:	d505      	bpl.n	8221a <__sflush_r+0x4a>
   8220e:	6869      	ldr	r1, [r5, #4]
   82210:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   82212:	1a52      	subs	r2, r2, r1
   82214:	b10b      	cbz	r3, 8221a <__sflush_r+0x4a>
   82216:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   82218:	1ad2      	subs	r2, r2, r3
   8221a:	4640      	mov	r0, r8
   8221c:	69e9      	ldr	r1, [r5, #28]
   8221e:	2300      	movs	r3, #0
   82220:	47a0      	blx	r4
   82222:	1c44      	adds	r4, r0, #1
   82224:	d04a      	beq.n	822bc <__sflush_r+0xec>
   82226:	89ab      	ldrh	r3, [r5, #12]
   82228:	692a      	ldr	r2, [r5, #16]
   8222a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   8222e:	b29b      	uxth	r3, r3
   82230:	2100      	movs	r1, #0
   82232:	602a      	str	r2, [r5, #0]
   82234:	04da      	lsls	r2, r3, #19
   82236:	81ab      	strh	r3, [r5, #12]
   82238:	6069      	str	r1, [r5, #4]
   8223a:	d44c      	bmi.n	822d6 <__sflush_r+0x106>
   8223c:	6b29      	ldr	r1, [r5, #48]	; 0x30
   8223e:	f8c8 6000 	str.w	r6, [r8]
   82242:	b311      	cbz	r1, 8228a <__sflush_r+0xba>
   82244:	f105 0340 	add.w	r3, r5, #64	; 0x40
   82248:	4299      	cmp	r1, r3
   8224a:	d002      	beq.n	82252 <__sflush_r+0x82>
   8224c:	4640      	mov	r0, r8
   8224e:	f000 f9c3 	bl	825d8 <_free_r>
   82252:	2000      	movs	r0, #0
   82254:	6328      	str	r0, [r5, #48]	; 0x30
   82256:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8225a:	692e      	ldr	r6, [r5, #16]
   8225c:	b1ae      	cbz	r6, 8228a <__sflush_r+0xba>
   8225e:	0791      	lsls	r1, r2, #30
   82260:	682c      	ldr	r4, [r5, #0]
   82262:	bf0c      	ite	eq
   82264:	696b      	ldreq	r3, [r5, #20]
   82266:	2300      	movne	r3, #0
   82268:	602e      	str	r6, [r5, #0]
   8226a:	1ba4      	subs	r4, r4, r6
   8226c:	60ab      	str	r3, [r5, #8]
   8226e:	e00a      	b.n	82286 <__sflush_r+0xb6>
   82270:	4632      	mov	r2, r6
   82272:	4623      	mov	r3, r4
   82274:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   82276:	4640      	mov	r0, r8
   82278:	69e9      	ldr	r1, [r5, #28]
   8227a:	47b8      	blx	r7
   8227c:	2800      	cmp	r0, #0
   8227e:	ebc0 0404 	rsb	r4, r0, r4
   82282:	4406      	add	r6, r0
   82284:	dd04      	ble.n	82290 <__sflush_r+0xc0>
   82286:	2c00      	cmp	r4, #0
   82288:	dcf2      	bgt.n	82270 <__sflush_r+0xa0>
   8228a:	2000      	movs	r0, #0
   8228c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82290:	89ab      	ldrh	r3, [r5, #12]
   82292:	f04f 30ff 	mov.w	r0, #4294967295
   82296:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8229a:	81ab      	strh	r3, [r5, #12]
   8229c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   822a0:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   822a2:	2a00      	cmp	r2, #0
   822a4:	dca2      	bgt.n	821ec <__sflush_r+0x1c>
   822a6:	e7f0      	b.n	8228a <__sflush_r+0xba>
   822a8:	2301      	movs	r3, #1
   822aa:	4640      	mov	r0, r8
   822ac:	69e9      	ldr	r1, [r5, #28]
   822ae:	47a0      	blx	r4
   822b0:	1c43      	adds	r3, r0, #1
   822b2:	4602      	mov	r2, r0
   822b4:	d01e      	beq.n	822f4 <__sflush_r+0x124>
   822b6:	89ab      	ldrh	r3, [r5, #12]
   822b8:	6aac      	ldr	r4, [r5, #40]	; 0x28
   822ba:	e7a6      	b.n	8220a <__sflush_r+0x3a>
   822bc:	f8d8 3000 	ldr.w	r3, [r8]
   822c0:	b95b      	cbnz	r3, 822da <__sflush_r+0x10a>
   822c2:	89aa      	ldrh	r2, [r5, #12]
   822c4:	6929      	ldr	r1, [r5, #16]
   822c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   822ca:	b292      	uxth	r2, r2
   822cc:	606b      	str	r3, [r5, #4]
   822ce:	04d3      	lsls	r3, r2, #19
   822d0:	81aa      	strh	r2, [r5, #12]
   822d2:	6029      	str	r1, [r5, #0]
   822d4:	d5b2      	bpl.n	8223c <__sflush_r+0x6c>
   822d6:	6528      	str	r0, [r5, #80]	; 0x50
   822d8:	e7b0      	b.n	8223c <__sflush_r+0x6c>
   822da:	2b1d      	cmp	r3, #29
   822dc:	d001      	beq.n	822e2 <__sflush_r+0x112>
   822de:	2b16      	cmp	r3, #22
   822e0:	d113      	bne.n	8230a <__sflush_r+0x13a>
   822e2:	89a9      	ldrh	r1, [r5, #12]
   822e4:	692b      	ldr	r3, [r5, #16]
   822e6:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
   822ea:	2200      	movs	r2, #0
   822ec:	81a9      	strh	r1, [r5, #12]
   822ee:	602b      	str	r3, [r5, #0]
   822f0:	606a      	str	r2, [r5, #4]
   822f2:	e7a3      	b.n	8223c <__sflush_r+0x6c>
   822f4:	f8d8 3000 	ldr.w	r3, [r8]
   822f8:	2b00      	cmp	r3, #0
   822fa:	d0dc      	beq.n	822b6 <__sflush_r+0xe6>
   822fc:	2b1d      	cmp	r3, #29
   822fe:	d001      	beq.n	82304 <__sflush_r+0x134>
   82300:	2b16      	cmp	r3, #22
   82302:	d1c5      	bne.n	82290 <__sflush_r+0xc0>
   82304:	f8c8 6000 	str.w	r6, [r8]
   82308:	e7bf      	b.n	8228a <__sflush_r+0xba>
   8230a:	89ab      	ldrh	r3, [r5, #12]
   8230c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82310:	81ab      	strh	r3, [r5, #12]
   82312:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82316:	bf00      	nop

00082318 <_fflush_r>:
   82318:	b510      	push	{r4, lr}
   8231a:	4604      	mov	r4, r0
   8231c:	b082      	sub	sp, #8
   8231e:	b108      	cbz	r0, 82324 <_fflush_r+0xc>
   82320:	6b83      	ldr	r3, [r0, #56]	; 0x38
   82322:	b153      	cbz	r3, 8233a <_fflush_r+0x22>
   82324:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   82328:	b908      	cbnz	r0, 8232e <_fflush_r+0x16>
   8232a:	b002      	add	sp, #8
   8232c:	bd10      	pop	{r4, pc}
   8232e:	4620      	mov	r0, r4
   82330:	b002      	add	sp, #8
   82332:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   82336:	f7ff bf4b 	b.w	821d0 <__sflush_r>
   8233a:	9101      	str	r1, [sp, #4]
   8233c:	f000 f808 	bl	82350 <__sinit>
   82340:	9901      	ldr	r1, [sp, #4]
   82342:	e7ef      	b.n	82324 <_fflush_r+0xc>

00082344 <_cleanup_r>:
   82344:	4901      	ldr	r1, [pc, #4]	; (8234c <_cleanup_r+0x8>)
   82346:	f000 bb9f 	b.w	82a88 <_fwalk>
   8234a:	bf00      	nop
   8234c:	00083ab1 	.word	0x00083ab1

00082350 <__sinit>:
   82350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82354:	6b84      	ldr	r4, [r0, #56]	; 0x38
   82356:	b083      	sub	sp, #12
   82358:	4607      	mov	r7, r0
   8235a:	2c00      	cmp	r4, #0
   8235c:	d165      	bne.n	8242a <__sinit+0xda>
   8235e:	687d      	ldr	r5, [r7, #4]
   82360:	4833      	ldr	r0, [pc, #204]	; (82430 <__sinit+0xe0>)
   82362:	2304      	movs	r3, #4
   82364:	2103      	movs	r1, #3
   82366:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   8236a:	63f8      	str	r0, [r7, #60]	; 0x3c
   8236c:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   82370:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   82374:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   82378:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   8237c:	81ab      	strh	r3, [r5, #12]
   8237e:	602c      	str	r4, [r5, #0]
   82380:	606c      	str	r4, [r5, #4]
   82382:	60ac      	str	r4, [r5, #8]
   82384:	666c      	str	r4, [r5, #100]	; 0x64
   82386:	81ec      	strh	r4, [r5, #14]
   82388:	612c      	str	r4, [r5, #16]
   8238a:	616c      	str	r4, [r5, #20]
   8238c:	61ac      	str	r4, [r5, #24]
   8238e:	4621      	mov	r1, r4
   82390:	2208      	movs	r2, #8
   82392:	f7fe ff35 	bl	81200 <memset>
   82396:	f8df b09c 	ldr.w	fp, [pc, #156]	; 82434 <__sinit+0xe4>
   8239a:	68be      	ldr	r6, [r7, #8]
   8239c:	f8df a098 	ldr.w	sl, [pc, #152]	; 82438 <__sinit+0xe8>
   823a0:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8243c <__sinit+0xec>
   823a4:	f8df 8098 	ldr.w	r8, [pc, #152]	; 82440 <__sinit+0xf0>
   823a8:	2301      	movs	r3, #1
   823aa:	2209      	movs	r2, #9
   823ac:	61ed      	str	r5, [r5, #28]
   823ae:	f8c5 b020 	str.w	fp, [r5, #32]
   823b2:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   823b6:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   823ba:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   823be:	4621      	mov	r1, r4
   823c0:	81f3      	strh	r3, [r6, #14]
   823c2:	81b2      	strh	r2, [r6, #12]
   823c4:	6034      	str	r4, [r6, #0]
   823c6:	6074      	str	r4, [r6, #4]
   823c8:	60b4      	str	r4, [r6, #8]
   823ca:	6674      	str	r4, [r6, #100]	; 0x64
   823cc:	6134      	str	r4, [r6, #16]
   823ce:	6174      	str	r4, [r6, #20]
   823d0:	61b4      	str	r4, [r6, #24]
   823d2:	2208      	movs	r2, #8
   823d4:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   823d8:	9301      	str	r3, [sp, #4]
   823da:	f7fe ff11 	bl	81200 <memset>
   823de:	68fd      	ldr	r5, [r7, #12]
   823e0:	2012      	movs	r0, #18
   823e2:	2202      	movs	r2, #2
   823e4:	61f6      	str	r6, [r6, #28]
   823e6:	f8c6 b020 	str.w	fp, [r6, #32]
   823ea:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   823ee:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   823f2:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   823f6:	4621      	mov	r1, r4
   823f8:	81a8      	strh	r0, [r5, #12]
   823fa:	81ea      	strh	r2, [r5, #14]
   823fc:	602c      	str	r4, [r5, #0]
   823fe:	606c      	str	r4, [r5, #4]
   82400:	60ac      	str	r4, [r5, #8]
   82402:	666c      	str	r4, [r5, #100]	; 0x64
   82404:	612c      	str	r4, [r5, #16]
   82406:	616c      	str	r4, [r5, #20]
   82408:	61ac      	str	r4, [r5, #24]
   8240a:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   8240e:	2208      	movs	r2, #8
   82410:	f7fe fef6 	bl	81200 <memset>
   82414:	9b01      	ldr	r3, [sp, #4]
   82416:	61ed      	str	r5, [r5, #28]
   82418:	f8c5 b020 	str.w	fp, [r5, #32]
   8241c:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   82420:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   82424:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   82428:	63bb      	str	r3, [r7, #56]	; 0x38
   8242a:	b003      	add	sp, #12
   8242c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82430:	00082345 	.word	0x00082345
   82434:	00083745 	.word	0x00083745
   82438:	00083769 	.word	0x00083769
   8243c:	000837a1 	.word	0x000837a1
   82440:	000837c1 	.word	0x000837c1

00082444 <__sfp_lock_acquire>:
   82444:	4770      	bx	lr
   82446:	bf00      	nop

00082448 <__sfp_lock_release>:
   82448:	4770      	bx	lr
   8244a:	bf00      	nop

0008244c <__libc_fini_array>:
   8244c:	b538      	push	{r3, r4, r5, lr}
   8244e:	4d09      	ldr	r5, [pc, #36]	; (82474 <__libc_fini_array+0x28>)
   82450:	4c09      	ldr	r4, [pc, #36]	; (82478 <__libc_fini_array+0x2c>)
   82452:	1b64      	subs	r4, r4, r5
   82454:	10a4      	asrs	r4, r4, #2
   82456:	bf18      	it	ne
   82458:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
   8245c:	d005      	beq.n	8246a <__libc_fini_array+0x1e>
   8245e:	3c01      	subs	r4, #1
   82460:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   82464:	4798      	blx	r3
   82466:	2c00      	cmp	r4, #0
   82468:	d1f9      	bne.n	8245e <__libc_fini_array+0x12>
   8246a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8246e:	f001 bec1 	b.w	841f4 <_fini>
   82472:	bf00      	nop
   82474:	00084200 	.word	0x00084200
   82478:	00084204 	.word	0x00084204

0008247c <_fputwc_r>:
   8247c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82480:	8993      	ldrh	r3, [r2, #12]
   82482:	460f      	mov	r7, r1
   82484:	0499      	lsls	r1, r3, #18
   82486:	b082      	sub	sp, #8
   82488:	4614      	mov	r4, r2
   8248a:	4680      	mov	r8, r0
   8248c:	d406      	bmi.n	8249c <_fputwc_r+0x20>
   8248e:	6e52      	ldr	r2, [r2, #100]	; 0x64
   82490:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   82494:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   82498:	81a3      	strh	r3, [r4, #12]
   8249a:	6662      	str	r2, [r4, #100]	; 0x64
   8249c:	f000 fb1c 	bl	82ad8 <__locale_mb_cur_max>
   824a0:	2801      	cmp	r0, #1
   824a2:	d03e      	beq.n	82522 <_fputwc_r+0xa6>
   824a4:	463a      	mov	r2, r7
   824a6:	4640      	mov	r0, r8
   824a8:	a901      	add	r1, sp, #4
   824aa:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   824ae:	f001 fa0f 	bl	838d0 <_wcrtomb_r>
   824b2:	1c42      	adds	r2, r0, #1
   824b4:	4606      	mov	r6, r0
   824b6:	d02d      	beq.n	82514 <_fputwc_r+0x98>
   824b8:	2800      	cmp	r0, #0
   824ba:	d03a      	beq.n	82532 <_fputwc_r+0xb6>
   824bc:	f89d 1004 	ldrb.w	r1, [sp, #4]
   824c0:	2500      	movs	r5, #0
   824c2:	e009      	b.n	824d8 <_fputwc_r+0x5c>
   824c4:	6823      	ldr	r3, [r4, #0]
   824c6:	7019      	strb	r1, [r3, #0]
   824c8:	6823      	ldr	r3, [r4, #0]
   824ca:	3301      	adds	r3, #1
   824cc:	6023      	str	r3, [r4, #0]
   824ce:	3501      	adds	r5, #1
   824d0:	42b5      	cmp	r5, r6
   824d2:	d22e      	bcs.n	82532 <_fputwc_r+0xb6>
   824d4:	ab01      	add	r3, sp, #4
   824d6:	5ce9      	ldrb	r1, [r5, r3]
   824d8:	68a3      	ldr	r3, [r4, #8]
   824da:	3b01      	subs	r3, #1
   824dc:	2b00      	cmp	r3, #0
   824de:	60a3      	str	r3, [r4, #8]
   824e0:	daf0      	bge.n	824c4 <_fputwc_r+0x48>
   824e2:	69a2      	ldr	r2, [r4, #24]
   824e4:	4293      	cmp	r3, r2
   824e6:	db06      	blt.n	824f6 <_fputwc_r+0x7a>
   824e8:	6823      	ldr	r3, [r4, #0]
   824ea:	7019      	strb	r1, [r3, #0]
   824ec:	6823      	ldr	r3, [r4, #0]
   824ee:	7819      	ldrb	r1, [r3, #0]
   824f0:	3301      	adds	r3, #1
   824f2:	290a      	cmp	r1, #10
   824f4:	d1ea      	bne.n	824cc <_fputwc_r+0x50>
   824f6:	4640      	mov	r0, r8
   824f8:	4622      	mov	r2, r4
   824fa:	f001 f995 	bl	83828 <__swbuf_r>
   824fe:	f1b0 33ff 	subs.w	r3, r0, #4294967295
   82502:	4258      	negs	r0, r3
   82504:	4158      	adcs	r0, r3
   82506:	2800      	cmp	r0, #0
   82508:	d0e1      	beq.n	824ce <_fputwc_r+0x52>
   8250a:	f04f 30ff 	mov.w	r0, #4294967295
   8250e:	b002      	add	sp, #8
   82510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82514:	89a3      	ldrh	r3, [r4, #12]
   82516:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8251a:	81a3      	strh	r3, [r4, #12]
   8251c:	b002      	add	sp, #8
   8251e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82522:	1e7b      	subs	r3, r7, #1
   82524:	2bfe      	cmp	r3, #254	; 0xfe
   82526:	d8bd      	bhi.n	824a4 <_fputwc_r+0x28>
   82528:	b2f9      	uxtb	r1, r7
   8252a:	4606      	mov	r6, r0
   8252c:	f88d 1004 	strb.w	r1, [sp, #4]
   82530:	e7c6      	b.n	824c0 <_fputwc_r+0x44>
   82532:	4638      	mov	r0, r7
   82534:	b002      	add	sp, #8
   82536:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8253a:	bf00      	nop

0008253c <_malloc_trim_r>:
   8253c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8253e:	4d23      	ldr	r5, [pc, #140]	; (825cc <_malloc_trim_r+0x90>)
   82540:	460f      	mov	r7, r1
   82542:	4604      	mov	r4, r0
   82544:	f000 ff08 	bl	83358 <__malloc_lock>
   82548:	68ab      	ldr	r3, [r5, #8]
   8254a:	685e      	ldr	r6, [r3, #4]
   8254c:	f026 0603 	bic.w	r6, r6, #3
   82550:	1bf1      	subs	r1, r6, r7
   82552:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   82556:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   8255a:	f021 010f 	bic.w	r1, r1, #15
   8255e:	f5a1 5780 	sub.w	r7, r1, #4096	; 0x1000
   82562:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
   82566:	db07      	blt.n	82578 <_malloc_trim_r+0x3c>
   82568:	4620      	mov	r0, r4
   8256a:	2100      	movs	r1, #0
   8256c:	f001 f8d8 	bl	83720 <_sbrk_r>
   82570:	68ab      	ldr	r3, [r5, #8]
   82572:	4433      	add	r3, r6
   82574:	4298      	cmp	r0, r3
   82576:	d004      	beq.n	82582 <_malloc_trim_r+0x46>
   82578:	4620      	mov	r0, r4
   8257a:	f000 feef 	bl	8335c <__malloc_unlock>
   8257e:	2000      	movs	r0, #0
   82580:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82582:	4620      	mov	r0, r4
   82584:	4279      	negs	r1, r7
   82586:	f001 f8cb 	bl	83720 <_sbrk_r>
   8258a:	3001      	adds	r0, #1
   8258c:	d00d      	beq.n	825aa <_malloc_trim_r+0x6e>
   8258e:	4b10      	ldr	r3, [pc, #64]	; (825d0 <_malloc_trim_r+0x94>)
   82590:	68aa      	ldr	r2, [r5, #8]
   82592:	6819      	ldr	r1, [r3, #0]
   82594:	1bf6      	subs	r6, r6, r7
   82596:	f046 0601 	orr.w	r6, r6, #1
   8259a:	4620      	mov	r0, r4
   8259c:	1bc9      	subs	r1, r1, r7
   8259e:	6056      	str	r6, [r2, #4]
   825a0:	6019      	str	r1, [r3, #0]
   825a2:	f000 fedb 	bl	8335c <__malloc_unlock>
   825a6:	2001      	movs	r0, #1
   825a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   825aa:	4620      	mov	r0, r4
   825ac:	2100      	movs	r1, #0
   825ae:	f001 f8b7 	bl	83720 <_sbrk_r>
   825b2:	68ab      	ldr	r3, [r5, #8]
   825b4:	1ac2      	subs	r2, r0, r3
   825b6:	2a0f      	cmp	r2, #15
   825b8:	ddde      	ble.n	82578 <_malloc_trim_r+0x3c>
   825ba:	4d06      	ldr	r5, [pc, #24]	; (825d4 <_malloc_trim_r+0x98>)
   825bc:	4904      	ldr	r1, [pc, #16]	; (825d0 <_malloc_trim_r+0x94>)
   825be:	682d      	ldr	r5, [r5, #0]
   825c0:	f042 0201 	orr.w	r2, r2, #1
   825c4:	1b40      	subs	r0, r0, r5
   825c6:	605a      	str	r2, [r3, #4]
   825c8:	6008      	str	r0, [r1, #0]
   825ca:	e7d5      	b.n	82578 <_malloc_trim_r+0x3c>
   825cc:	20070658 	.word	0x20070658
   825d0:	20070b08 	.word	0x20070b08
   825d4:	20070a64 	.word	0x20070a64

000825d8 <_free_r>:
   825d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   825dc:	460d      	mov	r5, r1
   825de:	4606      	mov	r6, r0
   825e0:	2900      	cmp	r1, #0
   825e2:	d055      	beq.n	82690 <_free_r+0xb8>
   825e4:	f000 feb8 	bl	83358 <__malloc_lock>
   825e8:	f855 1c04 	ldr.w	r1, [r5, #-4]
   825ec:	f8df c170 	ldr.w	ip, [pc, #368]	; 82760 <_free_r+0x188>
   825f0:	f1a5 0408 	sub.w	r4, r5, #8
   825f4:	f021 0301 	bic.w	r3, r1, #1
   825f8:	18e2      	adds	r2, r4, r3
   825fa:	f8dc 0008 	ldr.w	r0, [ip, #8]
   825fe:	6857      	ldr	r7, [r2, #4]
   82600:	4290      	cmp	r0, r2
   82602:	f027 0703 	bic.w	r7, r7, #3
   82606:	d068      	beq.n	826da <_free_r+0x102>
   82608:	f011 0101 	ands.w	r1, r1, #1
   8260c:	6057      	str	r7, [r2, #4]
   8260e:	d032      	beq.n	82676 <_free_r+0x9e>
   82610:	2100      	movs	r1, #0
   82612:	19d0      	adds	r0, r2, r7
   82614:	6840      	ldr	r0, [r0, #4]
   82616:	07c0      	lsls	r0, r0, #31
   82618:	d406      	bmi.n	82628 <_free_r+0x50>
   8261a:	443b      	add	r3, r7
   8261c:	6890      	ldr	r0, [r2, #8]
   8261e:	2900      	cmp	r1, #0
   82620:	d04d      	beq.n	826be <_free_r+0xe6>
   82622:	68d2      	ldr	r2, [r2, #12]
   82624:	60c2      	str	r2, [r0, #12]
   82626:	6090      	str	r0, [r2, #8]
   82628:	f043 0201 	orr.w	r2, r3, #1
   8262c:	6062      	str	r2, [r4, #4]
   8262e:	50e3      	str	r3, [r4, r3]
   82630:	b9e1      	cbnz	r1, 8266c <_free_r+0x94>
   82632:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   82636:	d32d      	bcc.n	82694 <_free_r+0xbc>
   82638:	0a5a      	lsrs	r2, r3, #9
   8263a:	2a04      	cmp	r2, #4
   8263c:	d869      	bhi.n	82712 <_free_r+0x13a>
   8263e:	0998      	lsrs	r0, r3, #6
   82640:	3038      	adds	r0, #56	; 0x38
   82642:	0041      	lsls	r1, r0, #1
   82644:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
   82648:	f8dc 2008 	ldr.w	r2, [ip, #8]
   8264c:	4944      	ldr	r1, [pc, #272]	; (82760 <_free_r+0x188>)
   8264e:	4562      	cmp	r2, ip
   82650:	d065      	beq.n	8271e <_free_r+0x146>
   82652:	6851      	ldr	r1, [r2, #4]
   82654:	f021 0103 	bic.w	r1, r1, #3
   82658:	428b      	cmp	r3, r1
   8265a:	d202      	bcs.n	82662 <_free_r+0x8a>
   8265c:	6892      	ldr	r2, [r2, #8]
   8265e:	4594      	cmp	ip, r2
   82660:	d1f7      	bne.n	82652 <_free_r+0x7a>
   82662:	68d3      	ldr	r3, [r2, #12]
   82664:	60e3      	str	r3, [r4, #12]
   82666:	60a2      	str	r2, [r4, #8]
   82668:	609c      	str	r4, [r3, #8]
   8266a:	60d4      	str	r4, [r2, #12]
   8266c:	4630      	mov	r0, r6
   8266e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   82672:	f000 be73 	b.w	8335c <__malloc_unlock>
   82676:	f855 5c08 	ldr.w	r5, [r5, #-8]
   8267a:	f10c 0808 	add.w	r8, ip, #8
   8267e:	1b64      	subs	r4, r4, r5
   82680:	68a0      	ldr	r0, [r4, #8]
   82682:	442b      	add	r3, r5
   82684:	4540      	cmp	r0, r8
   82686:	d042      	beq.n	8270e <_free_r+0x136>
   82688:	68e5      	ldr	r5, [r4, #12]
   8268a:	60c5      	str	r5, [r0, #12]
   8268c:	60a8      	str	r0, [r5, #8]
   8268e:	e7c0      	b.n	82612 <_free_r+0x3a>
   82690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82694:	08db      	lsrs	r3, r3, #3
   82696:	109a      	asrs	r2, r3, #2
   82698:	2001      	movs	r0, #1
   8269a:	4090      	lsls	r0, r2
   8269c:	f8dc 1004 	ldr.w	r1, [ip, #4]
   826a0:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
   826a4:	689a      	ldr	r2, [r3, #8]
   826a6:	4301      	orrs	r1, r0
   826a8:	60a2      	str	r2, [r4, #8]
   826aa:	60e3      	str	r3, [r4, #12]
   826ac:	f8cc 1004 	str.w	r1, [ip, #4]
   826b0:	4630      	mov	r0, r6
   826b2:	609c      	str	r4, [r3, #8]
   826b4:	60d4      	str	r4, [r2, #12]
   826b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   826ba:	f000 be4f 	b.w	8335c <__malloc_unlock>
   826be:	4d29      	ldr	r5, [pc, #164]	; (82764 <_free_r+0x18c>)
   826c0:	42a8      	cmp	r0, r5
   826c2:	d1ae      	bne.n	82622 <_free_r+0x4a>
   826c4:	f043 0201 	orr.w	r2, r3, #1
   826c8:	f8cc 4014 	str.w	r4, [ip, #20]
   826cc:	f8cc 4010 	str.w	r4, [ip, #16]
   826d0:	60e0      	str	r0, [r4, #12]
   826d2:	60a0      	str	r0, [r4, #8]
   826d4:	6062      	str	r2, [r4, #4]
   826d6:	50e3      	str	r3, [r4, r3]
   826d8:	e7c8      	b.n	8266c <_free_r+0x94>
   826da:	441f      	add	r7, r3
   826dc:	07cb      	lsls	r3, r1, #31
   826de:	d407      	bmi.n	826f0 <_free_r+0x118>
   826e0:	f855 1c08 	ldr.w	r1, [r5, #-8]
   826e4:	1a64      	subs	r4, r4, r1
   826e6:	68e3      	ldr	r3, [r4, #12]
   826e8:	68a2      	ldr	r2, [r4, #8]
   826ea:	440f      	add	r7, r1
   826ec:	60d3      	str	r3, [r2, #12]
   826ee:	609a      	str	r2, [r3, #8]
   826f0:	4b1d      	ldr	r3, [pc, #116]	; (82768 <_free_r+0x190>)
   826f2:	f047 0201 	orr.w	r2, r7, #1
   826f6:	681b      	ldr	r3, [r3, #0]
   826f8:	6062      	str	r2, [r4, #4]
   826fa:	429f      	cmp	r7, r3
   826fc:	f8cc 4008 	str.w	r4, [ip, #8]
   82700:	d3b4      	bcc.n	8266c <_free_r+0x94>
   82702:	4b1a      	ldr	r3, [pc, #104]	; (8276c <_free_r+0x194>)
   82704:	4630      	mov	r0, r6
   82706:	6819      	ldr	r1, [r3, #0]
   82708:	f7ff ff18 	bl	8253c <_malloc_trim_r>
   8270c:	e7ae      	b.n	8266c <_free_r+0x94>
   8270e:	2101      	movs	r1, #1
   82710:	e77f      	b.n	82612 <_free_r+0x3a>
   82712:	2a14      	cmp	r2, #20
   82714:	d80b      	bhi.n	8272e <_free_r+0x156>
   82716:	f102 005b 	add.w	r0, r2, #91	; 0x5b
   8271a:	0041      	lsls	r1, r0, #1
   8271c:	e792      	b.n	82644 <_free_r+0x6c>
   8271e:	1080      	asrs	r0, r0, #2
   82720:	2501      	movs	r5, #1
   82722:	4085      	lsls	r5, r0
   82724:	6848      	ldr	r0, [r1, #4]
   82726:	4613      	mov	r3, r2
   82728:	4328      	orrs	r0, r5
   8272a:	6048      	str	r0, [r1, #4]
   8272c:	e79a      	b.n	82664 <_free_r+0x8c>
   8272e:	2a54      	cmp	r2, #84	; 0x54
   82730:	d803      	bhi.n	8273a <_free_r+0x162>
   82732:	0b18      	lsrs	r0, r3, #12
   82734:	306e      	adds	r0, #110	; 0x6e
   82736:	0041      	lsls	r1, r0, #1
   82738:	e784      	b.n	82644 <_free_r+0x6c>
   8273a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   8273e:	d803      	bhi.n	82748 <_free_r+0x170>
   82740:	0bd8      	lsrs	r0, r3, #15
   82742:	3077      	adds	r0, #119	; 0x77
   82744:	0041      	lsls	r1, r0, #1
   82746:	e77d      	b.n	82644 <_free_r+0x6c>
   82748:	f240 5154 	movw	r1, #1364	; 0x554
   8274c:	428a      	cmp	r2, r1
   8274e:	d803      	bhi.n	82758 <_free_r+0x180>
   82750:	0c98      	lsrs	r0, r3, #18
   82752:	307c      	adds	r0, #124	; 0x7c
   82754:	0041      	lsls	r1, r0, #1
   82756:	e775      	b.n	82644 <_free_r+0x6c>
   82758:	21fc      	movs	r1, #252	; 0xfc
   8275a:	207e      	movs	r0, #126	; 0x7e
   8275c:	e772      	b.n	82644 <_free_r+0x6c>
   8275e:	bf00      	nop
   82760:	20070658 	.word	0x20070658
   82764:	20070660 	.word	0x20070660
   82768:	20070a60 	.word	0x20070a60
   8276c:	20070b04 	.word	0x20070b04

00082770 <__sfvwrite_r>:
   82770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82774:	6893      	ldr	r3, [r2, #8]
   82776:	b083      	sub	sp, #12
   82778:	4616      	mov	r6, r2
   8277a:	4681      	mov	r9, r0
   8277c:	460c      	mov	r4, r1
   8277e:	b32b      	cbz	r3, 827cc <__sfvwrite_r+0x5c>
   82780:	898b      	ldrh	r3, [r1, #12]
   82782:	0719      	lsls	r1, r3, #28
   82784:	d526      	bpl.n	827d4 <__sfvwrite_r+0x64>
   82786:	6922      	ldr	r2, [r4, #16]
   82788:	b322      	cbz	r2, 827d4 <__sfvwrite_r+0x64>
   8278a:	f003 0202 	and.w	r2, r3, #2
   8278e:	b292      	uxth	r2, r2
   82790:	6835      	ldr	r5, [r6, #0]
   82792:	2a00      	cmp	r2, #0
   82794:	d02c      	beq.n	827f0 <__sfvwrite_r+0x80>
   82796:	f04f 0a00 	mov.w	sl, #0
   8279a:	f8df b2e8 	ldr.w	fp, [pc, #744]	; 82a84 <__sfvwrite_r+0x314>
   8279e:	46d0      	mov	r8, sl
   827a0:	45d8      	cmp	r8, fp
   827a2:	bf34      	ite	cc
   827a4:	4643      	movcc	r3, r8
   827a6:	465b      	movcs	r3, fp
   827a8:	4652      	mov	r2, sl
   827aa:	4648      	mov	r0, r9
   827ac:	f1b8 0f00 	cmp.w	r8, #0
   827b0:	d04f      	beq.n	82852 <__sfvwrite_r+0xe2>
   827b2:	69e1      	ldr	r1, [r4, #28]
   827b4:	6a67      	ldr	r7, [r4, #36]	; 0x24
   827b6:	47b8      	blx	r7
   827b8:	2800      	cmp	r0, #0
   827ba:	dd56      	ble.n	8286a <__sfvwrite_r+0xfa>
   827bc:	68b3      	ldr	r3, [r6, #8]
   827be:	4482      	add	sl, r0
   827c0:	1a1b      	subs	r3, r3, r0
   827c2:	ebc0 0808 	rsb	r8, r0, r8
   827c6:	60b3      	str	r3, [r6, #8]
   827c8:	2b00      	cmp	r3, #0
   827ca:	d1e9      	bne.n	827a0 <__sfvwrite_r+0x30>
   827cc:	2000      	movs	r0, #0
   827ce:	b003      	add	sp, #12
   827d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   827d4:	4648      	mov	r0, r9
   827d6:	4621      	mov	r1, r4
   827d8:	f7ff fc88 	bl	820ec <__swsetup_r>
   827dc:	2800      	cmp	r0, #0
   827de:	f040 8148 	bne.w	82a72 <__sfvwrite_r+0x302>
   827e2:	89a3      	ldrh	r3, [r4, #12]
   827e4:	6835      	ldr	r5, [r6, #0]
   827e6:	f003 0202 	and.w	r2, r3, #2
   827ea:	b292      	uxth	r2, r2
   827ec:	2a00      	cmp	r2, #0
   827ee:	d1d2      	bne.n	82796 <__sfvwrite_r+0x26>
   827f0:	f013 0a01 	ands.w	sl, r3, #1
   827f4:	d142      	bne.n	8287c <__sfvwrite_r+0x10c>
   827f6:	46d0      	mov	r8, sl
   827f8:	f1b8 0f00 	cmp.w	r8, #0
   827fc:	d023      	beq.n	82846 <__sfvwrite_r+0xd6>
   827fe:	059a      	lsls	r2, r3, #22
   82800:	68a7      	ldr	r7, [r4, #8]
   82802:	d576      	bpl.n	828f2 <__sfvwrite_r+0x182>
   82804:	45b8      	cmp	r8, r7
   82806:	f0c0 80a4 	bcc.w	82952 <__sfvwrite_r+0x1e2>
   8280a:	f413 6f90 	tst.w	r3, #1152	; 0x480
   8280e:	f040 80b2 	bne.w	82976 <__sfvwrite_r+0x206>
   82812:	6820      	ldr	r0, [r4, #0]
   82814:	46bb      	mov	fp, r7
   82816:	4651      	mov	r1, sl
   82818:	465a      	mov	r2, fp
   8281a:	f000 fd37 	bl	8328c <memmove>
   8281e:	68a2      	ldr	r2, [r4, #8]
   82820:	6821      	ldr	r1, [r4, #0]
   82822:	1bd2      	subs	r2, r2, r7
   82824:	eb01 030b 	add.w	r3, r1, fp
   82828:	60a2      	str	r2, [r4, #8]
   8282a:	6023      	str	r3, [r4, #0]
   8282c:	4642      	mov	r2, r8
   8282e:	68b3      	ldr	r3, [r6, #8]
   82830:	4492      	add	sl, r2
   82832:	1a9b      	subs	r3, r3, r2
   82834:	ebc2 0808 	rsb	r8, r2, r8
   82838:	60b3      	str	r3, [r6, #8]
   8283a:	2b00      	cmp	r3, #0
   8283c:	d0c6      	beq.n	827cc <__sfvwrite_r+0x5c>
   8283e:	89a3      	ldrh	r3, [r4, #12]
   82840:	f1b8 0f00 	cmp.w	r8, #0
   82844:	d1db      	bne.n	827fe <__sfvwrite_r+0x8e>
   82846:	f8d5 a000 	ldr.w	sl, [r5]
   8284a:	f8d5 8004 	ldr.w	r8, [r5, #4]
   8284e:	3508      	adds	r5, #8
   82850:	e7d2      	b.n	827f8 <__sfvwrite_r+0x88>
   82852:	f8d5 a000 	ldr.w	sl, [r5]
   82856:	f8d5 8004 	ldr.w	r8, [r5, #4]
   8285a:	3508      	adds	r5, #8
   8285c:	e7a0      	b.n	827a0 <__sfvwrite_r+0x30>
   8285e:	4648      	mov	r0, r9
   82860:	4621      	mov	r1, r4
   82862:	f7ff fd59 	bl	82318 <_fflush_r>
   82866:	2800      	cmp	r0, #0
   82868:	d059      	beq.n	8291e <__sfvwrite_r+0x1ae>
   8286a:	89a3      	ldrh	r3, [r4, #12]
   8286c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82870:	f04f 30ff 	mov.w	r0, #4294967295
   82874:	81a3      	strh	r3, [r4, #12]
   82876:	b003      	add	sp, #12
   82878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8287c:	4692      	mov	sl, r2
   8287e:	9201      	str	r2, [sp, #4]
   82880:	4693      	mov	fp, r2
   82882:	4690      	mov	r8, r2
   82884:	f1b8 0f00 	cmp.w	r8, #0
   82888:	d02b      	beq.n	828e2 <__sfvwrite_r+0x172>
   8288a:	9f01      	ldr	r7, [sp, #4]
   8288c:	2f00      	cmp	r7, #0
   8288e:	d064      	beq.n	8295a <__sfvwrite_r+0x1ea>
   82890:	6820      	ldr	r0, [r4, #0]
   82892:	6921      	ldr	r1, [r4, #16]
   82894:	45c2      	cmp	sl, r8
   82896:	bf34      	ite	cc
   82898:	4653      	movcc	r3, sl
   8289a:	4643      	movcs	r3, r8
   8289c:	4288      	cmp	r0, r1
   8289e:	461f      	mov	r7, r3
   828a0:	f8d4 c008 	ldr.w	ip, [r4, #8]
   828a4:	6962      	ldr	r2, [r4, #20]
   828a6:	d903      	bls.n	828b0 <__sfvwrite_r+0x140>
   828a8:	4494      	add	ip, r2
   828aa:	4563      	cmp	r3, ip
   828ac:	f300 80ae 	bgt.w	82a0c <__sfvwrite_r+0x29c>
   828b0:	4293      	cmp	r3, r2
   828b2:	db36      	blt.n	82922 <__sfvwrite_r+0x1b2>
   828b4:	4613      	mov	r3, r2
   828b6:	6a67      	ldr	r7, [r4, #36]	; 0x24
   828b8:	4648      	mov	r0, r9
   828ba:	69e1      	ldr	r1, [r4, #28]
   828bc:	465a      	mov	r2, fp
   828be:	47b8      	blx	r7
   828c0:	1e07      	subs	r7, r0, #0
   828c2:	ddd2      	ble.n	8286a <__sfvwrite_r+0xfa>
   828c4:	ebba 0a07 	subs.w	sl, sl, r7
   828c8:	d03a      	beq.n	82940 <__sfvwrite_r+0x1d0>
   828ca:	68b3      	ldr	r3, [r6, #8]
   828cc:	44bb      	add	fp, r7
   828ce:	1bdb      	subs	r3, r3, r7
   828d0:	ebc7 0808 	rsb	r8, r7, r8
   828d4:	60b3      	str	r3, [r6, #8]
   828d6:	2b00      	cmp	r3, #0
   828d8:	f43f af78 	beq.w	827cc <__sfvwrite_r+0x5c>
   828dc:	f1b8 0f00 	cmp.w	r8, #0
   828e0:	d1d3      	bne.n	8288a <__sfvwrite_r+0x11a>
   828e2:	2700      	movs	r7, #0
   828e4:	f8d5 b000 	ldr.w	fp, [r5]
   828e8:	f8d5 8004 	ldr.w	r8, [r5, #4]
   828ec:	9701      	str	r7, [sp, #4]
   828ee:	3508      	adds	r5, #8
   828f0:	e7c8      	b.n	82884 <__sfvwrite_r+0x114>
   828f2:	6820      	ldr	r0, [r4, #0]
   828f4:	6923      	ldr	r3, [r4, #16]
   828f6:	4298      	cmp	r0, r3
   828f8:	d802      	bhi.n	82900 <__sfvwrite_r+0x190>
   828fa:	6963      	ldr	r3, [r4, #20]
   828fc:	4598      	cmp	r8, r3
   828fe:	d272      	bcs.n	829e6 <__sfvwrite_r+0x276>
   82900:	45b8      	cmp	r8, r7
   82902:	bf38      	it	cc
   82904:	4647      	movcc	r7, r8
   82906:	463a      	mov	r2, r7
   82908:	4651      	mov	r1, sl
   8290a:	f000 fcbf 	bl	8328c <memmove>
   8290e:	68a3      	ldr	r3, [r4, #8]
   82910:	6822      	ldr	r2, [r4, #0]
   82912:	1bdb      	subs	r3, r3, r7
   82914:	443a      	add	r2, r7
   82916:	60a3      	str	r3, [r4, #8]
   82918:	6022      	str	r2, [r4, #0]
   8291a:	2b00      	cmp	r3, #0
   8291c:	d09f      	beq.n	8285e <__sfvwrite_r+0xee>
   8291e:	463a      	mov	r2, r7
   82920:	e785      	b.n	8282e <__sfvwrite_r+0xbe>
   82922:	461a      	mov	r2, r3
   82924:	4659      	mov	r1, fp
   82926:	9300      	str	r3, [sp, #0]
   82928:	f000 fcb0 	bl	8328c <memmove>
   8292c:	9b00      	ldr	r3, [sp, #0]
   8292e:	68a1      	ldr	r1, [r4, #8]
   82930:	6822      	ldr	r2, [r4, #0]
   82932:	1ac9      	subs	r1, r1, r3
   82934:	ebba 0a07 	subs.w	sl, sl, r7
   82938:	4413      	add	r3, r2
   8293a:	60a1      	str	r1, [r4, #8]
   8293c:	6023      	str	r3, [r4, #0]
   8293e:	d1c4      	bne.n	828ca <__sfvwrite_r+0x15a>
   82940:	4648      	mov	r0, r9
   82942:	4621      	mov	r1, r4
   82944:	f7ff fce8 	bl	82318 <_fflush_r>
   82948:	2800      	cmp	r0, #0
   8294a:	d18e      	bne.n	8286a <__sfvwrite_r+0xfa>
   8294c:	f8cd a004 	str.w	sl, [sp, #4]
   82950:	e7bb      	b.n	828ca <__sfvwrite_r+0x15a>
   82952:	6820      	ldr	r0, [r4, #0]
   82954:	4647      	mov	r7, r8
   82956:	46c3      	mov	fp, r8
   82958:	e75d      	b.n	82816 <__sfvwrite_r+0xa6>
   8295a:	4658      	mov	r0, fp
   8295c:	210a      	movs	r1, #10
   8295e:	4642      	mov	r2, r8
   82960:	f000 fbd4 	bl	8310c <memchr>
   82964:	2800      	cmp	r0, #0
   82966:	d07f      	beq.n	82a68 <__sfvwrite_r+0x2f8>
   82968:	f100 0a01 	add.w	sl, r0, #1
   8296c:	2701      	movs	r7, #1
   8296e:	ebcb 0a0a 	rsb	sl, fp, sl
   82972:	9701      	str	r7, [sp, #4]
   82974:	e78c      	b.n	82890 <__sfvwrite_r+0x120>
   82976:	6822      	ldr	r2, [r4, #0]
   82978:	6921      	ldr	r1, [r4, #16]
   8297a:	6967      	ldr	r7, [r4, #20]
   8297c:	ebc1 0c02 	rsb	ip, r1, r2
   82980:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   82984:	f10c 0201 	add.w	r2, ip, #1
   82988:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   8298c:	4442      	add	r2, r8
   8298e:	107f      	asrs	r7, r7, #1
   82990:	4297      	cmp	r7, r2
   82992:	bf34      	ite	cc
   82994:	4617      	movcc	r7, r2
   82996:	463a      	movcs	r2, r7
   82998:	055b      	lsls	r3, r3, #21
   8299a:	d54f      	bpl.n	82a3c <__sfvwrite_r+0x2cc>
   8299c:	4611      	mov	r1, r2
   8299e:	4648      	mov	r0, r9
   829a0:	f8cd c000 	str.w	ip, [sp]
   829a4:	f000 f916 	bl	82bd4 <_malloc_r>
   829a8:	f8dd c000 	ldr.w	ip, [sp]
   829ac:	4683      	mov	fp, r0
   829ae:	2800      	cmp	r0, #0
   829b0:	d062      	beq.n	82a78 <__sfvwrite_r+0x308>
   829b2:	4662      	mov	r2, ip
   829b4:	6921      	ldr	r1, [r4, #16]
   829b6:	f8cd c000 	str.w	ip, [sp]
   829ba:	f000 fbf1 	bl	831a0 <memcpy>
   829be:	89a2      	ldrh	r2, [r4, #12]
   829c0:	f8dd c000 	ldr.w	ip, [sp]
   829c4:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   829c8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   829cc:	81a2      	strh	r2, [r4, #12]
   829ce:	eb0b 000c 	add.w	r0, fp, ip
   829d2:	ebcc 0207 	rsb	r2, ip, r7
   829d6:	f8c4 b010 	str.w	fp, [r4, #16]
   829da:	6167      	str	r7, [r4, #20]
   829dc:	6020      	str	r0, [r4, #0]
   829de:	60a2      	str	r2, [r4, #8]
   829e0:	4647      	mov	r7, r8
   829e2:	46c3      	mov	fp, r8
   829e4:	e717      	b.n	82816 <__sfvwrite_r+0xa6>
   829e6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   829ea:	4590      	cmp	r8, r2
   829ec:	bf38      	it	cc
   829ee:	4642      	movcc	r2, r8
   829f0:	fb92 f2f3 	sdiv	r2, r2, r3
   829f4:	fb02 f303 	mul.w	r3, r2, r3
   829f8:	6a67      	ldr	r7, [r4, #36]	; 0x24
   829fa:	4648      	mov	r0, r9
   829fc:	69e1      	ldr	r1, [r4, #28]
   829fe:	4652      	mov	r2, sl
   82a00:	47b8      	blx	r7
   82a02:	2800      	cmp	r0, #0
   82a04:	f77f af31 	ble.w	8286a <__sfvwrite_r+0xfa>
   82a08:	4602      	mov	r2, r0
   82a0a:	e710      	b.n	8282e <__sfvwrite_r+0xbe>
   82a0c:	4662      	mov	r2, ip
   82a0e:	4659      	mov	r1, fp
   82a10:	f8cd c000 	str.w	ip, [sp]
   82a14:	f000 fc3a 	bl	8328c <memmove>
   82a18:	f8dd c000 	ldr.w	ip, [sp]
   82a1c:	6823      	ldr	r3, [r4, #0]
   82a1e:	4648      	mov	r0, r9
   82a20:	4463      	add	r3, ip
   82a22:	6023      	str	r3, [r4, #0]
   82a24:	4621      	mov	r1, r4
   82a26:	f8cd c000 	str.w	ip, [sp]
   82a2a:	f7ff fc75 	bl	82318 <_fflush_r>
   82a2e:	f8dd c000 	ldr.w	ip, [sp]
   82a32:	2800      	cmp	r0, #0
   82a34:	f47f af19 	bne.w	8286a <__sfvwrite_r+0xfa>
   82a38:	4667      	mov	r7, ip
   82a3a:	e743      	b.n	828c4 <__sfvwrite_r+0x154>
   82a3c:	4648      	mov	r0, r9
   82a3e:	f8cd c000 	str.w	ip, [sp]
   82a42:	f000 fc8d 	bl	83360 <_realloc_r>
   82a46:	f8dd c000 	ldr.w	ip, [sp]
   82a4a:	4683      	mov	fp, r0
   82a4c:	2800      	cmp	r0, #0
   82a4e:	d1be      	bne.n	829ce <__sfvwrite_r+0x25e>
   82a50:	4648      	mov	r0, r9
   82a52:	6921      	ldr	r1, [r4, #16]
   82a54:	f7ff fdc0 	bl	825d8 <_free_r>
   82a58:	89a3      	ldrh	r3, [r4, #12]
   82a5a:	220c      	movs	r2, #12
   82a5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   82a60:	b29b      	uxth	r3, r3
   82a62:	f8c9 2000 	str.w	r2, [r9]
   82a66:	e701      	b.n	8286c <__sfvwrite_r+0xfc>
   82a68:	2701      	movs	r7, #1
   82a6a:	f108 0a01 	add.w	sl, r8, #1
   82a6e:	9701      	str	r7, [sp, #4]
   82a70:	e70e      	b.n	82890 <__sfvwrite_r+0x120>
   82a72:	f04f 30ff 	mov.w	r0, #4294967295
   82a76:	e6aa      	b.n	827ce <__sfvwrite_r+0x5e>
   82a78:	230c      	movs	r3, #12
   82a7a:	f8c9 3000 	str.w	r3, [r9]
   82a7e:	89a3      	ldrh	r3, [r4, #12]
   82a80:	e6f4      	b.n	8286c <__sfvwrite_r+0xfc>
   82a82:	bf00      	nop
   82a84:	7ffffc00 	.word	0x7ffffc00

00082a88 <_fwalk>:
   82a88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82a8c:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
   82a90:	4688      	mov	r8, r1
   82a92:	d019      	beq.n	82ac8 <_fwalk+0x40>
   82a94:	2600      	movs	r6, #0
   82a96:	687d      	ldr	r5, [r7, #4]
   82a98:	68bc      	ldr	r4, [r7, #8]
   82a9a:	3d01      	subs	r5, #1
   82a9c:	d40e      	bmi.n	82abc <_fwalk+0x34>
   82a9e:	89a3      	ldrh	r3, [r4, #12]
   82aa0:	3d01      	subs	r5, #1
   82aa2:	2b01      	cmp	r3, #1
   82aa4:	d906      	bls.n	82ab4 <_fwalk+0x2c>
   82aa6:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   82aaa:	4620      	mov	r0, r4
   82aac:	3301      	adds	r3, #1
   82aae:	d001      	beq.n	82ab4 <_fwalk+0x2c>
   82ab0:	47c0      	blx	r8
   82ab2:	4306      	orrs	r6, r0
   82ab4:	1c6b      	adds	r3, r5, #1
   82ab6:	f104 0468 	add.w	r4, r4, #104	; 0x68
   82aba:	d1f0      	bne.n	82a9e <_fwalk+0x16>
   82abc:	683f      	ldr	r7, [r7, #0]
   82abe:	2f00      	cmp	r7, #0
   82ac0:	d1e9      	bne.n	82a96 <_fwalk+0xe>
   82ac2:	4630      	mov	r0, r6
   82ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82ac8:	463e      	mov	r6, r7
   82aca:	4630      	mov	r0, r6
   82acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00082ad0 <__locale_charset>:
   82ad0:	4800      	ldr	r0, [pc, #0]	; (82ad4 <__locale_charset+0x4>)
   82ad2:	4770      	bx	lr
   82ad4:	20070634 	.word	0x20070634

00082ad8 <__locale_mb_cur_max>:
   82ad8:	4b01      	ldr	r3, [pc, #4]	; (82ae0 <__locale_mb_cur_max+0x8>)
   82ada:	6818      	ldr	r0, [r3, #0]
   82adc:	4770      	bx	lr
   82ade:	bf00      	nop
   82ae0:	20070654 	.word	0x20070654

00082ae4 <__smakebuf_r>:
   82ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
   82ae6:	898b      	ldrh	r3, [r1, #12]
   82ae8:	b091      	sub	sp, #68	; 0x44
   82aea:	b29a      	uxth	r2, r3
   82aec:	0796      	lsls	r6, r2, #30
   82aee:	460c      	mov	r4, r1
   82af0:	4605      	mov	r5, r0
   82af2:	d437      	bmi.n	82b64 <__smakebuf_r+0x80>
   82af4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   82af8:	2900      	cmp	r1, #0
   82afa:	db17      	blt.n	82b2c <__smakebuf_r+0x48>
   82afc:	aa01      	add	r2, sp, #4
   82afe:	f000 ffdf 	bl	83ac0 <_fstat_r>
   82b02:	2800      	cmp	r0, #0
   82b04:	db10      	blt.n	82b28 <__smakebuf_r+0x44>
   82b06:	9b02      	ldr	r3, [sp, #8]
   82b08:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
   82b0c:	f5b3 5100 	subs.w	r1, r3, #8192	; 0x2000
   82b10:	424f      	negs	r7, r1
   82b12:	414f      	adcs	r7, r1
   82b14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   82b18:	d02c      	beq.n	82b74 <__smakebuf_r+0x90>
   82b1a:	89a3      	ldrh	r3, [r4, #12]
   82b1c:	f44f 6680 	mov.w	r6, #1024	; 0x400
   82b20:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   82b24:	81a3      	strh	r3, [r4, #12]
   82b26:	e00b      	b.n	82b40 <__smakebuf_r+0x5c>
   82b28:	89a3      	ldrh	r3, [r4, #12]
   82b2a:	b29a      	uxth	r2, r3
   82b2c:	f012 0f80 	tst.w	r2, #128	; 0x80
   82b30:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   82b34:	81a3      	strh	r3, [r4, #12]
   82b36:	bf14      	ite	ne
   82b38:	2640      	movne	r6, #64	; 0x40
   82b3a:	f44f 6680 	moveq.w	r6, #1024	; 0x400
   82b3e:	2700      	movs	r7, #0
   82b40:	4628      	mov	r0, r5
   82b42:	4631      	mov	r1, r6
   82b44:	f000 f846 	bl	82bd4 <_malloc_r>
   82b48:	89a3      	ldrh	r3, [r4, #12]
   82b4a:	2800      	cmp	r0, #0
   82b4c:	d029      	beq.n	82ba2 <__smakebuf_r+0xbe>
   82b4e:	4a1b      	ldr	r2, [pc, #108]	; (82bbc <__smakebuf_r+0xd8>)
   82b50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   82b54:	63ea      	str	r2, [r5, #60]	; 0x3c
   82b56:	81a3      	strh	r3, [r4, #12]
   82b58:	6020      	str	r0, [r4, #0]
   82b5a:	6120      	str	r0, [r4, #16]
   82b5c:	6166      	str	r6, [r4, #20]
   82b5e:	b9a7      	cbnz	r7, 82b8a <__smakebuf_r+0xa6>
   82b60:	b011      	add	sp, #68	; 0x44
   82b62:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82b64:	f101 0343 	add.w	r3, r1, #67	; 0x43
   82b68:	2201      	movs	r2, #1
   82b6a:	600b      	str	r3, [r1, #0]
   82b6c:	610b      	str	r3, [r1, #16]
   82b6e:	614a      	str	r2, [r1, #20]
   82b70:	b011      	add	sp, #68	; 0x44
   82b72:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82b74:	4a12      	ldr	r2, [pc, #72]	; (82bc0 <__smakebuf_r+0xdc>)
   82b76:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   82b78:	4293      	cmp	r3, r2
   82b7a:	d1ce      	bne.n	82b1a <__smakebuf_r+0x36>
   82b7c:	89a3      	ldrh	r3, [r4, #12]
   82b7e:	f44f 6680 	mov.w	r6, #1024	; 0x400
   82b82:	4333      	orrs	r3, r6
   82b84:	81a3      	strh	r3, [r4, #12]
   82b86:	64e6      	str	r6, [r4, #76]	; 0x4c
   82b88:	e7da      	b.n	82b40 <__smakebuf_r+0x5c>
   82b8a:	4628      	mov	r0, r5
   82b8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   82b90:	f000 ffaa 	bl	83ae8 <_isatty_r>
   82b94:	2800      	cmp	r0, #0
   82b96:	d0e3      	beq.n	82b60 <__smakebuf_r+0x7c>
   82b98:	89a3      	ldrh	r3, [r4, #12]
   82b9a:	f043 0301 	orr.w	r3, r3, #1
   82b9e:	81a3      	strh	r3, [r4, #12]
   82ba0:	e7de      	b.n	82b60 <__smakebuf_r+0x7c>
   82ba2:	059a      	lsls	r2, r3, #22
   82ba4:	d4dc      	bmi.n	82b60 <__smakebuf_r+0x7c>
   82ba6:	f104 0243 	add.w	r2, r4, #67	; 0x43
   82baa:	f043 0302 	orr.w	r3, r3, #2
   82bae:	2101      	movs	r1, #1
   82bb0:	81a3      	strh	r3, [r4, #12]
   82bb2:	6022      	str	r2, [r4, #0]
   82bb4:	6122      	str	r2, [r4, #16]
   82bb6:	6161      	str	r1, [r4, #20]
   82bb8:	e7d2      	b.n	82b60 <__smakebuf_r+0x7c>
   82bba:	bf00      	nop
   82bbc:	00082345 	.word	0x00082345
   82bc0:	000837a1 	.word	0x000837a1

00082bc4 <malloc>:
   82bc4:	4b02      	ldr	r3, [pc, #8]	; (82bd0 <malloc+0xc>)
   82bc6:	4601      	mov	r1, r0
   82bc8:	6818      	ldr	r0, [r3, #0]
   82bca:	f000 b803 	b.w	82bd4 <_malloc_r>
   82bce:	bf00      	nop
   82bd0:	20070630 	.word	0x20070630

00082bd4 <_malloc_r>:
   82bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82bd8:	f101 050b 	add.w	r5, r1, #11
   82bdc:	2d16      	cmp	r5, #22
   82bde:	b083      	sub	sp, #12
   82be0:	4606      	mov	r6, r0
   82be2:	d927      	bls.n	82c34 <_malloc_r+0x60>
   82be4:	f035 0507 	bics.w	r5, r5, #7
   82be8:	d427      	bmi.n	82c3a <_malloc_r+0x66>
   82bea:	42a9      	cmp	r1, r5
   82bec:	d825      	bhi.n	82c3a <_malloc_r+0x66>
   82bee:	4630      	mov	r0, r6
   82bf0:	f000 fbb2 	bl	83358 <__malloc_lock>
   82bf4:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   82bf8:	d226      	bcs.n	82c48 <_malloc_r+0x74>
   82bfa:	4fc1      	ldr	r7, [pc, #772]	; (82f00 <_malloc_r+0x32c>)
   82bfc:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
   82c00:	eb07 03cc 	add.w	r3, r7, ip, lsl #3
   82c04:	68dc      	ldr	r4, [r3, #12]
   82c06:	429c      	cmp	r4, r3
   82c08:	f000 81d2 	beq.w	82fb0 <_malloc_r+0x3dc>
   82c0c:	6863      	ldr	r3, [r4, #4]
   82c0e:	68e2      	ldr	r2, [r4, #12]
   82c10:	f023 0303 	bic.w	r3, r3, #3
   82c14:	4423      	add	r3, r4
   82c16:	6858      	ldr	r0, [r3, #4]
   82c18:	68a1      	ldr	r1, [r4, #8]
   82c1a:	f040 0501 	orr.w	r5, r0, #1
   82c1e:	60ca      	str	r2, [r1, #12]
   82c20:	4630      	mov	r0, r6
   82c22:	6091      	str	r1, [r2, #8]
   82c24:	605d      	str	r5, [r3, #4]
   82c26:	f000 fb99 	bl	8335c <__malloc_unlock>
   82c2a:	3408      	adds	r4, #8
   82c2c:	4620      	mov	r0, r4
   82c2e:	b003      	add	sp, #12
   82c30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82c34:	2510      	movs	r5, #16
   82c36:	42a9      	cmp	r1, r5
   82c38:	d9d9      	bls.n	82bee <_malloc_r+0x1a>
   82c3a:	2400      	movs	r4, #0
   82c3c:	230c      	movs	r3, #12
   82c3e:	4620      	mov	r0, r4
   82c40:	6033      	str	r3, [r6, #0]
   82c42:	b003      	add	sp, #12
   82c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82c48:	ea5f 2c55 	movs.w	ip, r5, lsr #9
   82c4c:	f000 8089 	beq.w	82d62 <_malloc_r+0x18e>
   82c50:	f1bc 0f04 	cmp.w	ip, #4
   82c54:	f200 8160 	bhi.w	82f18 <_malloc_r+0x344>
   82c58:	ea4f 1c95 	mov.w	ip, r5, lsr #6
   82c5c:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
   82c60:	ea4f 014c 	mov.w	r1, ip, lsl #1
   82c64:	4fa6      	ldr	r7, [pc, #664]	; (82f00 <_malloc_r+0x32c>)
   82c66:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   82c6a:	68cc      	ldr	r4, [r1, #12]
   82c6c:	42a1      	cmp	r1, r4
   82c6e:	d105      	bne.n	82c7c <_malloc_r+0xa8>
   82c70:	e00c      	b.n	82c8c <_malloc_r+0xb8>
   82c72:	2b00      	cmp	r3, #0
   82c74:	da79      	bge.n	82d6a <_malloc_r+0x196>
   82c76:	68e4      	ldr	r4, [r4, #12]
   82c78:	42a1      	cmp	r1, r4
   82c7a:	d007      	beq.n	82c8c <_malloc_r+0xb8>
   82c7c:	6862      	ldr	r2, [r4, #4]
   82c7e:	f022 0203 	bic.w	r2, r2, #3
   82c82:	1b53      	subs	r3, r2, r5
   82c84:	2b0f      	cmp	r3, #15
   82c86:	ddf4      	ble.n	82c72 <_malloc_r+0x9e>
   82c88:	f10c 3cff 	add.w	ip, ip, #4294967295
   82c8c:	f10c 0c01 	add.w	ip, ip, #1
   82c90:	4b9b      	ldr	r3, [pc, #620]	; (82f00 <_malloc_r+0x32c>)
   82c92:	693c      	ldr	r4, [r7, #16]
   82c94:	f103 0e08 	add.w	lr, r3, #8
   82c98:	4574      	cmp	r4, lr
   82c9a:	f000 817e 	beq.w	82f9a <_malloc_r+0x3c6>
   82c9e:	6861      	ldr	r1, [r4, #4]
   82ca0:	f021 0103 	bic.w	r1, r1, #3
   82ca4:	1b4a      	subs	r2, r1, r5
   82ca6:	2a0f      	cmp	r2, #15
   82ca8:	f300 8164 	bgt.w	82f74 <_malloc_r+0x3a0>
   82cac:	2a00      	cmp	r2, #0
   82cae:	f8c3 e014 	str.w	lr, [r3, #20]
   82cb2:	f8c3 e010 	str.w	lr, [r3, #16]
   82cb6:	da69      	bge.n	82d8c <_malloc_r+0x1b8>
   82cb8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   82cbc:	f080 813a 	bcs.w	82f34 <_malloc_r+0x360>
   82cc0:	08c9      	lsrs	r1, r1, #3
   82cc2:	108a      	asrs	r2, r1, #2
   82cc4:	f04f 0801 	mov.w	r8, #1
   82cc8:	fa08 f802 	lsl.w	r8, r8, r2
   82ccc:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   82cd0:	685a      	ldr	r2, [r3, #4]
   82cd2:	6888      	ldr	r0, [r1, #8]
   82cd4:	ea48 0202 	orr.w	r2, r8, r2
   82cd8:	60a0      	str	r0, [r4, #8]
   82cda:	60e1      	str	r1, [r4, #12]
   82cdc:	605a      	str	r2, [r3, #4]
   82cde:	608c      	str	r4, [r1, #8]
   82ce0:	60c4      	str	r4, [r0, #12]
   82ce2:	ea4f 03ac 	mov.w	r3, ip, asr #2
   82ce6:	2001      	movs	r0, #1
   82ce8:	4098      	lsls	r0, r3
   82cea:	4290      	cmp	r0, r2
   82cec:	d85b      	bhi.n	82da6 <_malloc_r+0x1d2>
   82cee:	4202      	tst	r2, r0
   82cf0:	d106      	bne.n	82d00 <_malloc_r+0x12c>
   82cf2:	f02c 0c03 	bic.w	ip, ip, #3
   82cf6:	0040      	lsls	r0, r0, #1
   82cf8:	4202      	tst	r2, r0
   82cfa:	f10c 0c04 	add.w	ip, ip, #4
   82cfe:	d0fa      	beq.n	82cf6 <_malloc_r+0x122>
   82d00:	eb07 08cc 	add.w	r8, r7, ip, lsl #3
   82d04:	4644      	mov	r4, r8
   82d06:	46e1      	mov	r9, ip
   82d08:	68e3      	ldr	r3, [r4, #12]
   82d0a:	429c      	cmp	r4, r3
   82d0c:	d107      	bne.n	82d1e <_malloc_r+0x14a>
   82d0e:	e146      	b.n	82f9e <_malloc_r+0x3ca>
   82d10:	2a00      	cmp	r2, #0
   82d12:	f280 8157 	bge.w	82fc4 <_malloc_r+0x3f0>
   82d16:	68db      	ldr	r3, [r3, #12]
   82d18:	429c      	cmp	r4, r3
   82d1a:	f000 8140 	beq.w	82f9e <_malloc_r+0x3ca>
   82d1e:	6859      	ldr	r1, [r3, #4]
   82d20:	f021 0103 	bic.w	r1, r1, #3
   82d24:	1b4a      	subs	r2, r1, r5
   82d26:	2a0f      	cmp	r2, #15
   82d28:	ddf2      	ble.n	82d10 <_malloc_r+0x13c>
   82d2a:	461c      	mov	r4, r3
   82d2c:	f854 cf08 	ldr.w	ip, [r4, #8]!
   82d30:	68d9      	ldr	r1, [r3, #12]
   82d32:	f045 0901 	orr.w	r9, r5, #1
   82d36:	f042 0801 	orr.w	r8, r2, #1
   82d3a:	441d      	add	r5, r3
   82d3c:	f8c3 9004 	str.w	r9, [r3, #4]
   82d40:	4630      	mov	r0, r6
   82d42:	f8cc 100c 	str.w	r1, [ip, #12]
   82d46:	f8c1 c008 	str.w	ip, [r1, #8]
   82d4a:	617d      	str	r5, [r7, #20]
   82d4c:	613d      	str	r5, [r7, #16]
   82d4e:	f8c5 e00c 	str.w	lr, [r5, #12]
   82d52:	f8c5 e008 	str.w	lr, [r5, #8]
   82d56:	f8c5 8004 	str.w	r8, [r5, #4]
   82d5a:	50aa      	str	r2, [r5, r2]
   82d5c:	f000 fafe 	bl	8335c <__malloc_unlock>
   82d60:	e764      	b.n	82c2c <_malloc_r+0x58>
   82d62:	217e      	movs	r1, #126	; 0x7e
   82d64:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
   82d68:	e77c      	b.n	82c64 <_malloc_r+0x90>
   82d6a:	4422      	add	r2, r4
   82d6c:	6850      	ldr	r0, [r2, #4]
   82d6e:	68e3      	ldr	r3, [r4, #12]
   82d70:	68a1      	ldr	r1, [r4, #8]
   82d72:	f040 0501 	orr.w	r5, r0, #1
   82d76:	60cb      	str	r3, [r1, #12]
   82d78:	4630      	mov	r0, r6
   82d7a:	6099      	str	r1, [r3, #8]
   82d7c:	6055      	str	r5, [r2, #4]
   82d7e:	f000 faed 	bl	8335c <__malloc_unlock>
   82d82:	3408      	adds	r4, #8
   82d84:	4620      	mov	r0, r4
   82d86:	b003      	add	sp, #12
   82d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82d8c:	4421      	add	r1, r4
   82d8e:	684b      	ldr	r3, [r1, #4]
   82d90:	4630      	mov	r0, r6
   82d92:	f043 0301 	orr.w	r3, r3, #1
   82d96:	604b      	str	r3, [r1, #4]
   82d98:	f000 fae0 	bl	8335c <__malloc_unlock>
   82d9c:	3408      	adds	r4, #8
   82d9e:	4620      	mov	r0, r4
   82da0:	b003      	add	sp, #12
   82da2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82da6:	68bc      	ldr	r4, [r7, #8]
   82da8:	6863      	ldr	r3, [r4, #4]
   82daa:	f023 0903 	bic.w	r9, r3, #3
   82dae:	45a9      	cmp	r9, r5
   82db0:	d304      	bcc.n	82dbc <_malloc_r+0x1e8>
   82db2:	ebc5 0309 	rsb	r3, r5, r9
   82db6:	2b0f      	cmp	r3, #15
   82db8:	f300 8091 	bgt.w	82ede <_malloc_r+0x30a>
   82dbc:	4b51      	ldr	r3, [pc, #324]	; (82f04 <_malloc_r+0x330>)
   82dbe:	4a52      	ldr	r2, [pc, #328]	; (82f08 <_malloc_r+0x334>)
   82dc0:	6819      	ldr	r1, [r3, #0]
   82dc2:	6813      	ldr	r3, [r2, #0]
   82dc4:	eb05 0a01 	add.w	sl, r5, r1
   82dc8:	3301      	adds	r3, #1
   82dca:	eb04 0b09 	add.w	fp, r4, r9
   82dce:	f000 8161 	beq.w	83094 <_malloc_r+0x4c0>
   82dd2:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
   82dd6:	f10a 0a0f 	add.w	sl, sl, #15
   82dda:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
   82dde:	f02a 0a0f 	bic.w	sl, sl, #15
   82de2:	4630      	mov	r0, r6
   82de4:	4651      	mov	r1, sl
   82de6:	9201      	str	r2, [sp, #4]
   82de8:	f000 fc9a 	bl	83720 <_sbrk_r>
   82dec:	f1b0 3fff 	cmp.w	r0, #4294967295
   82df0:	4680      	mov	r8, r0
   82df2:	9a01      	ldr	r2, [sp, #4]
   82df4:	f000 8101 	beq.w	82ffa <_malloc_r+0x426>
   82df8:	4583      	cmp	fp, r0
   82dfa:	f200 80fb 	bhi.w	82ff4 <_malloc_r+0x420>
   82dfe:	f8df c114 	ldr.w	ip, [pc, #276]	; 82f14 <_malloc_r+0x340>
   82e02:	45c3      	cmp	fp, r8
   82e04:	f8dc 3000 	ldr.w	r3, [ip]
   82e08:	4453      	add	r3, sl
   82e0a:	f8cc 3000 	str.w	r3, [ip]
   82e0e:	f000 814a 	beq.w	830a6 <_malloc_r+0x4d2>
   82e12:	6812      	ldr	r2, [r2, #0]
   82e14:	493c      	ldr	r1, [pc, #240]	; (82f08 <_malloc_r+0x334>)
   82e16:	3201      	adds	r2, #1
   82e18:	bf1b      	ittet	ne
   82e1a:	ebcb 0b08 	rsbne	fp, fp, r8
   82e1e:	445b      	addne	r3, fp
   82e20:	f8c1 8000 	streq.w	r8, [r1]
   82e24:	f8cc 3000 	strne.w	r3, [ip]
   82e28:	f018 0307 	ands.w	r3, r8, #7
   82e2c:	f000 8114 	beq.w	83058 <_malloc_r+0x484>
   82e30:	f1c3 0208 	rsb	r2, r3, #8
   82e34:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
   82e38:	4490      	add	r8, r2
   82e3a:	3308      	adds	r3, #8
   82e3c:	44c2      	add	sl, r8
   82e3e:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
   82e42:	ebca 0a03 	rsb	sl, sl, r3
   82e46:	4651      	mov	r1, sl
   82e48:	4630      	mov	r0, r6
   82e4a:	f8cd c004 	str.w	ip, [sp, #4]
   82e4e:	f000 fc67 	bl	83720 <_sbrk_r>
   82e52:	1c43      	adds	r3, r0, #1
   82e54:	f8dd c004 	ldr.w	ip, [sp, #4]
   82e58:	f000 8135 	beq.w	830c6 <_malloc_r+0x4f2>
   82e5c:	ebc8 0200 	rsb	r2, r8, r0
   82e60:	4452      	add	r2, sl
   82e62:	f042 0201 	orr.w	r2, r2, #1
   82e66:	f8dc 3000 	ldr.w	r3, [ip]
   82e6a:	42bc      	cmp	r4, r7
   82e6c:	4453      	add	r3, sl
   82e6e:	f8c7 8008 	str.w	r8, [r7, #8]
   82e72:	f8cc 3000 	str.w	r3, [ip]
   82e76:	f8c8 2004 	str.w	r2, [r8, #4]
   82e7a:	f8df a098 	ldr.w	sl, [pc, #152]	; 82f14 <_malloc_r+0x340>
   82e7e:	d015      	beq.n	82eac <_malloc_r+0x2d8>
   82e80:	f1b9 0f0f 	cmp.w	r9, #15
   82e84:	f240 80eb 	bls.w	8305e <_malloc_r+0x48a>
   82e88:	6861      	ldr	r1, [r4, #4]
   82e8a:	f1a9 020c 	sub.w	r2, r9, #12
   82e8e:	f022 0207 	bic.w	r2, r2, #7
   82e92:	f001 0101 	and.w	r1, r1, #1
   82e96:	ea42 0e01 	orr.w	lr, r2, r1
   82e9a:	2005      	movs	r0, #5
   82e9c:	18a1      	adds	r1, r4, r2
   82e9e:	2a0f      	cmp	r2, #15
   82ea0:	f8c4 e004 	str.w	lr, [r4, #4]
   82ea4:	6048      	str	r0, [r1, #4]
   82ea6:	6088      	str	r0, [r1, #8]
   82ea8:	f200 8111 	bhi.w	830ce <_malloc_r+0x4fa>
   82eac:	4a17      	ldr	r2, [pc, #92]	; (82f0c <_malloc_r+0x338>)
   82eae:	68bc      	ldr	r4, [r7, #8]
   82eb0:	6811      	ldr	r1, [r2, #0]
   82eb2:	428b      	cmp	r3, r1
   82eb4:	bf88      	it	hi
   82eb6:	6013      	strhi	r3, [r2, #0]
   82eb8:	4a15      	ldr	r2, [pc, #84]	; (82f10 <_malloc_r+0x33c>)
   82eba:	6811      	ldr	r1, [r2, #0]
   82ebc:	428b      	cmp	r3, r1
   82ebe:	bf88      	it	hi
   82ec0:	6013      	strhi	r3, [r2, #0]
   82ec2:	6862      	ldr	r2, [r4, #4]
   82ec4:	f022 0203 	bic.w	r2, r2, #3
   82ec8:	4295      	cmp	r5, r2
   82eca:	ebc5 0302 	rsb	r3, r5, r2
   82ece:	d801      	bhi.n	82ed4 <_malloc_r+0x300>
   82ed0:	2b0f      	cmp	r3, #15
   82ed2:	dc04      	bgt.n	82ede <_malloc_r+0x30a>
   82ed4:	4630      	mov	r0, r6
   82ed6:	f000 fa41 	bl	8335c <__malloc_unlock>
   82eda:	2400      	movs	r4, #0
   82edc:	e6a6      	b.n	82c2c <_malloc_r+0x58>
   82ede:	f045 0201 	orr.w	r2, r5, #1
   82ee2:	f043 0301 	orr.w	r3, r3, #1
   82ee6:	4425      	add	r5, r4
   82ee8:	6062      	str	r2, [r4, #4]
   82eea:	4630      	mov	r0, r6
   82eec:	60bd      	str	r5, [r7, #8]
   82eee:	606b      	str	r3, [r5, #4]
   82ef0:	f000 fa34 	bl	8335c <__malloc_unlock>
   82ef4:	3408      	adds	r4, #8
   82ef6:	4620      	mov	r0, r4
   82ef8:	b003      	add	sp, #12
   82efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82efe:	bf00      	nop
   82f00:	20070658 	.word	0x20070658
   82f04:	20070b04 	.word	0x20070b04
   82f08:	20070a64 	.word	0x20070a64
   82f0c:	20070b00 	.word	0x20070b00
   82f10:	20070afc 	.word	0x20070afc
   82f14:	20070b08 	.word	0x20070b08
   82f18:	f1bc 0f14 	cmp.w	ip, #20
   82f1c:	d961      	bls.n	82fe2 <_malloc_r+0x40e>
   82f1e:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
   82f22:	f200 808f 	bhi.w	83044 <_malloc_r+0x470>
   82f26:	ea4f 3c15 	mov.w	ip, r5, lsr #12
   82f2a:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
   82f2e:	ea4f 014c 	mov.w	r1, ip, lsl #1
   82f32:	e697      	b.n	82c64 <_malloc_r+0x90>
   82f34:	0a4b      	lsrs	r3, r1, #9
   82f36:	2b04      	cmp	r3, #4
   82f38:	d958      	bls.n	82fec <_malloc_r+0x418>
   82f3a:	2b14      	cmp	r3, #20
   82f3c:	f200 80ad 	bhi.w	8309a <_malloc_r+0x4c6>
   82f40:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   82f44:	0050      	lsls	r0, r2, #1
   82f46:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   82f4a:	6883      	ldr	r3, [r0, #8]
   82f4c:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 83108 <_malloc_r+0x534>
   82f50:	4283      	cmp	r3, r0
   82f52:	f000 808a 	beq.w	8306a <_malloc_r+0x496>
   82f56:	685a      	ldr	r2, [r3, #4]
   82f58:	f022 0203 	bic.w	r2, r2, #3
   82f5c:	4291      	cmp	r1, r2
   82f5e:	d202      	bcs.n	82f66 <_malloc_r+0x392>
   82f60:	689b      	ldr	r3, [r3, #8]
   82f62:	4298      	cmp	r0, r3
   82f64:	d1f7      	bne.n	82f56 <_malloc_r+0x382>
   82f66:	68d9      	ldr	r1, [r3, #12]
   82f68:	687a      	ldr	r2, [r7, #4]
   82f6a:	60e1      	str	r1, [r4, #12]
   82f6c:	60a3      	str	r3, [r4, #8]
   82f6e:	608c      	str	r4, [r1, #8]
   82f70:	60dc      	str	r4, [r3, #12]
   82f72:	e6b6      	b.n	82ce2 <_malloc_r+0x10e>
   82f74:	f045 0701 	orr.w	r7, r5, #1
   82f78:	f042 0101 	orr.w	r1, r2, #1
   82f7c:	4425      	add	r5, r4
   82f7e:	6067      	str	r7, [r4, #4]
   82f80:	4630      	mov	r0, r6
   82f82:	615d      	str	r5, [r3, #20]
   82f84:	611d      	str	r5, [r3, #16]
   82f86:	f8c5 e00c 	str.w	lr, [r5, #12]
   82f8a:	f8c5 e008 	str.w	lr, [r5, #8]
   82f8e:	6069      	str	r1, [r5, #4]
   82f90:	50aa      	str	r2, [r5, r2]
   82f92:	3408      	adds	r4, #8
   82f94:	f000 f9e2 	bl	8335c <__malloc_unlock>
   82f98:	e648      	b.n	82c2c <_malloc_r+0x58>
   82f9a:	685a      	ldr	r2, [r3, #4]
   82f9c:	e6a1      	b.n	82ce2 <_malloc_r+0x10e>
   82f9e:	f109 0901 	add.w	r9, r9, #1
   82fa2:	f019 0f03 	tst.w	r9, #3
   82fa6:	f104 0408 	add.w	r4, r4, #8
   82faa:	f47f aead 	bne.w	82d08 <_malloc_r+0x134>
   82fae:	e02d      	b.n	8300c <_malloc_r+0x438>
   82fb0:	f104 0308 	add.w	r3, r4, #8
   82fb4:	6964      	ldr	r4, [r4, #20]
   82fb6:	42a3      	cmp	r3, r4
   82fb8:	bf08      	it	eq
   82fba:	f10c 0c02 	addeq.w	ip, ip, #2
   82fbe:	f43f ae67 	beq.w	82c90 <_malloc_r+0xbc>
   82fc2:	e623      	b.n	82c0c <_malloc_r+0x38>
   82fc4:	4419      	add	r1, r3
   82fc6:	6848      	ldr	r0, [r1, #4]
   82fc8:	461c      	mov	r4, r3
   82fca:	f854 2f08 	ldr.w	r2, [r4, #8]!
   82fce:	68db      	ldr	r3, [r3, #12]
   82fd0:	f040 0501 	orr.w	r5, r0, #1
   82fd4:	604d      	str	r5, [r1, #4]
   82fd6:	4630      	mov	r0, r6
   82fd8:	60d3      	str	r3, [r2, #12]
   82fda:	609a      	str	r2, [r3, #8]
   82fdc:	f000 f9be 	bl	8335c <__malloc_unlock>
   82fe0:	e624      	b.n	82c2c <_malloc_r+0x58>
   82fe2:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
   82fe6:	ea4f 014c 	mov.w	r1, ip, lsl #1
   82fea:	e63b      	b.n	82c64 <_malloc_r+0x90>
   82fec:	098a      	lsrs	r2, r1, #6
   82fee:	3238      	adds	r2, #56	; 0x38
   82ff0:	0050      	lsls	r0, r2, #1
   82ff2:	e7a8      	b.n	82f46 <_malloc_r+0x372>
   82ff4:	42bc      	cmp	r4, r7
   82ff6:	f43f af02 	beq.w	82dfe <_malloc_r+0x22a>
   82ffa:	68bc      	ldr	r4, [r7, #8]
   82ffc:	6862      	ldr	r2, [r4, #4]
   82ffe:	f022 0203 	bic.w	r2, r2, #3
   83002:	e761      	b.n	82ec8 <_malloc_r+0x2f4>
   83004:	f8d8 8000 	ldr.w	r8, [r8]
   83008:	4598      	cmp	r8, r3
   8300a:	d17a      	bne.n	83102 <_malloc_r+0x52e>
   8300c:	f01c 0f03 	tst.w	ip, #3
   83010:	f1a8 0308 	sub.w	r3, r8, #8
   83014:	f10c 3cff 	add.w	ip, ip, #4294967295
   83018:	d1f4      	bne.n	83004 <_malloc_r+0x430>
   8301a:	687b      	ldr	r3, [r7, #4]
   8301c:	ea23 0300 	bic.w	r3, r3, r0
   83020:	607b      	str	r3, [r7, #4]
   83022:	0040      	lsls	r0, r0, #1
   83024:	4298      	cmp	r0, r3
   83026:	f63f aebe 	bhi.w	82da6 <_malloc_r+0x1d2>
   8302a:	2800      	cmp	r0, #0
   8302c:	f43f aebb 	beq.w	82da6 <_malloc_r+0x1d2>
   83030:	4203      	tst	r3, r0
   83032:	46cc      	mov	ip, r9
   83034:	f47f ae64 	bne.w	82d00 <_malloc_r+0x12c>
   83038:	0040      	lsls	r0, r0, #1
   8303a:	4203      	tst	r3, r0
   8303c:	f10c 0c04 	add.w	ip, ip, #4
   83040:	d0fa      	beq.n	83038 <_malloc_r+0x464>
   83042:	e65d      	b.n	82d00 <_malloc_r+0x12c>
   83044:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
   83048:	d819      	bhi.n	8307e <_malloc_r+0x4aa>
   8304a:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
   8304e:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
   83052:	ea4f 014c 	mov.w	r1, ip, lsl #1
   83056:	e605      	b.n	82c64 <_malloc_r+0x90>
   83058:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   8305c:	e6ee      	b.n	82e3c <_malloc_r+0x268>
   8305e:	2301      	movs	r3, #1
   83060:	f8c8 3004 	str.w	r3, [r8, #4]
   83064:	4644      	mov	r4, r8
   83066:	2200      	movs	r2, #0
   83068:	e72e      	b.n	82ec8 <_malloc_r+0x2f4>
   8306a:	1092      	asrs	r2, r2, #2
   8306c:	2001      	movs	r0, #1
   8306e:	4090      	lsls	r0, r2
   83070:	f8d8 2004 	ldr.w	r2, [r8, #4]
   83074:	4619      	mov	r1, r3
   83076:	4302      	orrs	r2, r0
   83078:	f8c8 2004 	str.w	r2, [r8, #4]
   8307c:	e775      	b.n	82f6a <_malloc_r+0x396>
   8307e:	f240 5354 	movw	r3, #1364	; 0x554
   83082:	459c      	cmp	ip, r3
   83084:	d81b      	bhi.n	830be <_malloc_r+0x4ea>
   83086:	ea4f 4c95 	mov.w	ip, r5, lsr #18
   8308a:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
   8308e:	ea4f 014c 	mov.w	r1, ip, lsl #1
   83092:	e5e7      	b.n	82c64 <_malloc_r+0x90>
   83094:	f10a 0a10 	add.w	sl, sl, #16
   83098:	e6a3      	b.n	82de2 <_malloc_r+0x20e>
   8309a:	2b54      	cmp	r3, #84	; 0x54
   8309c:	d81f      	bhi.n	830de <_malloc_r+0x50a>
   8309e:	0b0a      	lsrs	r2, r1, #12
   830a0:	326e      	adds	r2, #110	; 0x6e
   830a2:	0050      	lsls	r0, r2, #1
   830a4:	e74f      	b.n	82f46 <_malloc_r+0x372>
   830a6:	f3cb 010b 	ubfx	r1, fp, #0, #12
   830aa:	2900      	cmp	r1, #0
   830ac:	f47f aeb1 	bne.w	82e12 <_malloc_r+0x23e>
   830b0:	eb0a 0109 	add.w	r1, sl, r9
   830b4:	68ba      	ldr	r2, [r7, #8]
   830b6:	f041 0101 	orr.w	r1, r1, #1
   830ba:	6051      	str	r1, [r2, #4]
   830bc:	e6f6      	b.n	82eac <_malloc_r+0x2d8>
   830be:	21fc      	movs	r1, #252	; 0xfc
   830c0:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
   830c4:	e5ce      	b.n	82c64 <_malloc_r+0x90>
   830c6:	2201      	movs	r2, #1
   830c8:	f04f 0a00 	mov.w	sl, #0
   830cc:	e6cb      	b.n	82e66 <_malloc_r+0x292>
   830ce:	f104 0108 	add.w	r1, r4, #8
   830d2:	4630      	mov	r0, r6
   830d4:	f7ff fa80 	bl	825d8 <_free_r>
   830d8:	f8da 3000 	ldr.w	r3, [sl]
   830dc:	e6e6      	b.n	82eac <_malloc_r+0x2d8>
   830de:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   830e2:	d803      	bhi.n	830ec <_malloc_r+0x518>
   830e4:	0bca      	lsrs	r2, r1, #15
   830e6:	3277      	adds	r2, #119	; 0x77
   830e8:	0050      	lsls	r0, r2, #1
   830ea:	e72c      	b.n	82f46 <_malloc_r+0x372>
   830ec:	f240 5254 	movw	r2, #1364	; 0x554
   830f0:	4293      	cmp	r3, r2
   830f2:	d803      	bhi.n	830fc <_malloc_r+0x528>
   830f4:	0c8a      	lsrs	r2, r1, #18
   830f6:	327c      	adds	r2, #124	; 0x7c
   830f8:	0050      	lsls	r0, r2, #1
   830fa:	e724      	b.n	82f46 <_malloc_r+0x372>
   830fc:	20fc      	movs	r0, #252	; 0xfc
   830fe:	227e      	movs	r2, #126	; 0x7e
   83100:	e721      	b.n	82f46 <_malloc_r+0x372>
   83102:	687b      	ldr	r3, [r7, #4]
   83104:	e78d      	b.n	83022 <_malloc_r+0x44e>
   83106:	bf00      	nop
   83108:	20070658 	.word	0x20070658

0008310c <memchr>:
   8310c:	0783      	lsls	r3, r0, #30
   8310e:	b470      	push	{r4, r5, r6}
   83110:	b2c9      	uxtb	r1, r1
   83112:	d040      	beq.n	83196 <memchr+0x8a>
   83114:	1e54      	subs	r4, r2, #1
   83116:	b32a      	cbz	r2, 83164 <memchr+0x58>
   83118:	7803      	ldrb	r3, [r0, #0]
   8311a:	428b      	cmp	r3, r1
   8311c:	d023      	beq.n	83166 <memchr+0x5a>
   8311e:	1c43      	adds	r3, r0, #1
   83120:	e004      	b.n	8312c <memchr+0x20>
   83122:	b1fc      	cbz	r4, 83164 <memchr+0x58>
   83124:	7805      	ldrb	r5, [r0, #0]
   83126:	4614      	mov	r4, r2
   83128:	428d      	cmp	r5, r1
   8312a:	d01c      	beq.n	83166 <memchr+0x5a>
   8312c:	f013 0f03 	tst.w	r3, #3
   83130:	4618      	mov	r0, r3
   83132:	f104 32ff 	add.w	r2, r4, #4294967295
   83136:	f103 0301 	add.w	r3, r3, #1
   8313a:	d1f2      	bne.n	83122 <memchr+0x16>
   8313c:	2c03      	cmp	r4, #3
   8313e:	d814      	bhi.n	8316a <memchr+0x5e>
   83140:	1e65      	subs	r5, r4, #1
   83142:	b354      	cbz	r4, 8319a <memchr+0x8e>
   83144:	7803      	ldrb	r3, [r0, #0]
   83146:	428b      	cmp	r3, r1
   83148:	d00d      	beq.n	83166 <memchr+0x5a>
   8314a:	1c42      	adds	r2, r0, #1
   8314c:	2300      	movs	r3, #0
   8314e:	e002      	b.n	83156 <memchr+0x4a>
   83150:	7804      	ldrb	r4, [r0, #0]
   83152:	428c      	cmp	r4, r1
   83154:	d007      	beq.n	83166 <memchr+0x5a>
   83156:	42ab      	cmp	r3, r5
   83158:	4610      	mov	r0, r2
   8315a:	f103 0301 	add.w	r3, r3, #1
   8315e:	f102 0201 	add.w	r2, r2, #1
   83162:	d1f5      	bne.n	83150 <memchr+0x44>
   83164:	2000      	movs	r0, #0
   83166:	bc70      	pop	{r4, r5, r6}
   83168:	4770      	bx	lr
   8316a:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
   8316e:	4603      	mov	r3, r0
   83170:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   83174:	681a      	ldr	r2, [r3, #0]
   83176:	4618      	mov	r0, r3
   83178:	4072      	eors	r2, r6
   8317a:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
   8317e:	ea25 0202 	bic.w	r2, r5, r2
   83182:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   83186:	f103 0304 	add.w	r3, r3, #4
   8318a:	d1d9      	bne.n	83140 <memchr+0x34>
   8318c:	3c04      	subs	r4, #4
   8318e:	2c03      	cmp	r4, #3
   83190:	4618      	mov	r0, r3
   83192:	d8ef      	bhi.n	83174 <memchr+0x68>
   83194:	e7d4      	b.n	83140 <memchr+0x34>
   83196:	4614      	mov	r4, r2
   83198:	e7d0      	b.n	8313c <memchr+0x30>
   8319a:	4620      	mov	r0, r4
   8319c:	e7e3      	b.n	83166 <memchr+0x5a>
   8319e:	bf00      	nop

000831a0 <memcpy>:
   831a0:	4684      	mov	ip, r0
   831a2:	ea41 0300 	orr.w	r3, r1, r0
   831a6:	f013 0303 	ands.w	r3, r3, #3
   831aa:	d149      	bne.n	83240 <memcpy+0xa0>
   831ac:	3a40      	subs	r2, #64	; 0x40
   831ae:	d323      	bcc.n	831f8 <memcpy+0x58>
   831b0:	680b      	ldr	r3, [r1, #0]
   831b2:	6003      	str	r3, [r0, #0]
   831b4:	684b      	ldr	r3, [r1, #4]
   831b6:	6043      	str	r3, [r0, #4]
   831b8:	688b      	ldr	r3, [r1, #8]
   831ba:	6083      	str	r3, [r0, #8]
   831bc:	68cb      	ldr	r3, [r1, #12]
   831be:	60c3      	str	r3, [r0, #12]
   831c0:	690b      	ldr	r3, [r1, #16]
   831c2:	6103      	str	r3, [r0, #16]
   831c4:	694b      	ldr	r3, [r1, #20]
   831c6:	6143      	str	r3, [r0, #20]
   831c8:	698b      	ldr	r3, [r1, #24]
   831ca:	6183      	str	r3, [r0, #24]
   831cc:	69cb      	ldr	r3, [r1, #28]
   831ce:	61c3      	str	r3, [r0, #28]
   831d0:	6a0b      	ldr	r3, [r1, #32]
   831d2:	6203      	str	r3, [r0, #32]
   831d4:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   831d6:	6243      	str	r3, [r0, #36]	; 0x24
   831d8:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   831da:	6283      	str	r3, [r0, #40]	; 0x28
   831dc:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   831de:	62c3      	str	r3, [r0, #44]	; 0x2c
   831e0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   831e2:	6303      	str	r3, [r0, #48]	; 0x30
   831e4:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   831e6:	6343      	str	r3, [r0, #52]	; 0x34
   831e8:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   831ea:	6383      	str	r3, [r0, #56]	; 0x38
   831ec:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   831ee:	63c3      	str	r3, [r0, #60]	; 0x3c
   831f0:	3040      	adds	r0, #64	; 0x40
   831f2:	3140      	adds	r1, #64	; 0x40
   831f4:	3a40      	subs	r2, #64	; 0x40
   831f6:	d2db      	bcs.n	831b0 <memcpy+0x10>
   831f8:	3230      	adds	r2, #48	; 0x30
   831fa:	d30b      	bcc.n	83214 <memcpy+0x74>
   831fc:	680b      	ldr	r3, [r1, #0]
   831fe:	6003      	str	r3, [r0, #0]
   83200:	684b      	ldr	r3, [r1, #4]
   83202:	6043      	str	r3, [r0, #4]
   83204:	688b      	ldr	r3, [r1, #8]
   83206:	6083      	str	r3, [r0, #8]
   83208:	68cb      	ldr	r3, [r1, #12]
   8320a:	60c3      	str	r3, [r0, #12]
   8320c:	3010      	adds	r0, #16
   8320e:	3110      	adds	r1, #16
   83210:	3a10      	subs	r2, #16
   83212:	d2f3      	bcs.n	831fc <memcpy+0x5c>
   83214:	320c      	adds	r2, #12
   83216:	d305      	bcc.n	83224 <memcpy+0x84>
   83218:	f851 3b04 	ldr.w	r3, [r1], #4
   8321c:	f840 3b04 	str.w	r3, [r0], #4
   83220:	3a04      	subs	r2, #4
   83222:	d2f9      	bcs.n	83218 <memcpy+0x78>
   83224:	3204      	adds	r2, #4
   83226:	d008      	beq.n	8323a <memcpy+0x9a>
   83228:	07d2      	lsls	r2, r2, #31
   8322a:	bf1c      	itt	ne
   8322c:	f811 3b01 	ldrbne.w	r3, [r1], #1
   83230:	f800 3b01 	strbne.w	r3, [r0], #1
   83234:	d301      	bcc.n	8323a <memcpy+0x9a>
   83236:	880b      	ldrh	r3, [r1, #0]
   83238:	8003      	strh	r3, [r0, #0]
   8323a:	4660      	mov	r0, ip
   8323c:	4770      	bx	lr
   8323e:	bf00      	nop
   83240:	2a08      	cmp	r2, #8
   83242:	d313      	bcc.n	8326c <memcpy+0xcc>
   83244:	078b      	lsls	r3, r1, #30
   83246:	d0b1      	beq.n	831ac <memcpy+0xc>
   83248:	f010 0303 	ands.w	r3, r0, #3
   8324c:	d0ae      	beq.n	831ac <memcpy+0xc>
   8324e:	f1c3 0304 	rsb	r3, r3, #4
   83252:	1ad2      	subs	r2, r2, r3
   83254:	07db      	lsls	r3, r3, #31
   83256:	bf1c      	itt	ne
   83258:	f811 3b01 	ldrbne.w	r3, [r1], #1
   8325c:	f800 3b01 	strbne.w	r3, [r0], #1
   83260:	d3a4      	bcc.n	831ac <memcpy+0xc>
   83262:	f831 3b02 	ldrh.w	r3, [r1], #2
   83266:	f820 3b02 	strh.w	r3, [r0], #2
   8326a:	e79f      	b.n	831ac <memcpy+0xc>
   8326c:	3a04      	subs	r2, #4
   8326e:	d3d9      	bcc.n	83224 <memcpy+0x84>
   83270:	3a01      	subs	r2, #1
   83272:	f811 3b01 	ldrb.w	r3, [r1], #1
   83276:	f800 3b01 	strb.w	r3, [r0], #1
   8327a:	d2f9      	bcs.n	83270 <memcpy+0xd0>
   8327c:	780b      	ldrb	r3, [r1, #0]
   8327e:	7003      	strb	r3, [r0, #0]
   83280:	784b      	ldrb	r3, [r1, #1]
   83282:	7043      	strb	r3, [r0, #1]
   83284:	788b      	ldrb	r3, [r1, #2]
   83286:	7083      	strb	r3, [r0, #2]
   83288:	4660      	mov	r0, ip
   8328a:	4770      	bx	lr

0008328c <memmove>:
   8328c:	4288      	cmp	r0, r1
   8328e:	b4f0      	push	{r4, r5, r6, r7}
   83290:	d910      	bls.n	832b4 <memmove+0x28>
   83292:	188c      	adds	r4, r1, r2
   83294:	42a0      	cmp	r0, r4
   83296:	d20d      	bcs.n	832b4 <memmove+0x28>
   83298:	1885      	adds	r5, r0, r2
   8329a:	1e53      	subs	r3, r2, #1
   8329c:	b142      	cbz	r2, 832b0 <memmove+0x24>
   8329e:	4621      	mov	r1, r4
   832a0:	462a      	mov	r2, r5
   832a2:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
   832a6:	3b01      	subs	r3, #1
   832a8:	f802 4d01 	strb.w	r4, [r2, #-1]!
   832ac:	1c5c      	adds	r4, r3, #1
   832ae:	d1f8      	bne.n	832a2 <memmove+0x16>
   832b0:	bcf0      	pop	{r4, r5, r6, r7}
   832b2:	4770      	bx	lr
   832b4:	2a0f      	cmp	r2, #15
   832b6:	d944      	bls.n	83342 <memmove+0xb6>
   832b8:	ea40 0301 	orr.w	r3, r0, r1
   832bc:	079b      	lsls	r3, r3, #30
   832be:	d144      	bne.n	8334a <memmove+0xbe>
   832c0:	f1a2 0710 	sub.w	r7, r2, #16
   832c4:	093f      	lsrs	r7, r7, #4
   832c6:	eb00 1607 	add.w	r6, r0, r7, lsl #4
   832ca:	3610      	adds	r6, #16
   832cc:	460c      	mov	r4, r1
   832ce:	4603      	mov	r3, r0
   832d0:	6825      	ldr	r5, [r4, #0]
   832d2:	3310      	adds	r3, #16
   832d4:	f843 5c10 	str.w	r5, [r3, #-16]
   832d8:	6865      	ldr	r5, [r4, #4]
   832da:	3410      	adds	r4, #16
   832dc:	f843 5c0c 	str.w	r5, [r3, #-12]
   832e0:	f854 5c08 	ldr.w	r5, [r4, #-8]
   832e4:	f843 5c08 	str.w	r5, [r3, #-8]
   832e8:	f854 5c04 	ldr.w	r5, [r4, #-4]
   832ec:	f843 5c04 	str.w	r5, [r3, #-4]
   832f0:	42b3      	cmp	r3, r6
   832f2:	d1ed      	bne.n	832d0 <memmove+0x44>
   832f4:	1c7b      	adds	r3, r7, #1
   832f6:	f002 0c0f 	and.w	ip, r2, #15
   832fa:	011b      	lsls	r3, r3, #4
   832fc:	f1bc 0f03 	cmp.w	ip, #3
   83300:	4419      	add	r1, r3
   83302:	4403      	add	r3, r0
   83304:	d923      	bls.n	8334e <memmove+0xc2>
   83306:	460e      	mov	r6, r1
   83308:	461d      	mov	r5, r3
   8330a:	4664      	mov	r4, ip
   8330c:	f856 7b04 	ldr.w	r7, [r6], #4
   83310:	3c04      	subs	r4, #4
   83312:	2c03      	cmp	r4, #3
   83314:	f845 7b04 	str.w	r7, [r5], #4
   83318:	d8f8      	bhi.n	8330c <memmove+0x80>
   8331a:	f1ac 0404 	sub.w	r4, ip, #4
   8331e:	f024 0403 	bic.w	r4, r4, #3
   83322:	3404      	adds	r4, #4
   83324:	f002 0203 	and.w	r2, r2, #3
   83328:	4423      	add	r3, r4
   8332a:	4421      	add	r1, r4
   8332c:	2a00      	cmp	r2, #0
   8332e:	d0bf      	beq.n	832b0 <memmove+0x24>
   83330:	441a      	add	r2, r3
   83332:	f811 4b01 	ldrb.w	r4, [r1], #1
   83336:	f803 4b01 	strb.w	r4, [r3], #1
   8333a:	4293      	cmp	r3, r2
   8333c:	d1f9      	bne.n	83332 <memmove+0xa6>
   8333e:	bcf0      	pop	{r4, r5, r6, r7}
   83340:	4770      	bx	lr
   83342:	4603      	mov	r3, r0
   83344:	2a00      	cmp	r2, #0
   83346:	d1f3      	bne.n	83330 <memmove+0xa4>
   83348:	e7b2      	b.n	832b0 <memmove+0x24>
   8334a:	4603      	mov	r3, r0
   8334c:	e7f0      	b.n	83330 <memmove+0xa4>
   8334e:	4662      	mov	r2, ip
   83350:	2a00      	cmp	r2, #0
   83352:	d1ed      	bne.n	83330 <memmove+0xa4>
   83354:	e7ac      	b.n	832b0 <memmove+0x24>
   83356:	bf00      	nop

00083358 <__malloc_lock>:
   83358:	4770      	bx	lr
   8335a:	bf00      	nop

0008335c <__malloc_unlock>:
   8335c:	4770      	bx	lr
   8335e:	bf00      	nop

00083360 <_realloc_r>:
   83360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83364:	460c      	mov	r4, r1
   83366:	b083      	sub	sp, #12
   83368:	4690      	mov	r8, r2
   8336a:	4681      	mov	r9, r0
   8336c:	2900      	cmp	r1, #0
   8336e:	f000 80ba 	beq.w	834e6 <_realloc_r+0x186>
   83372:	f7ff fff1 	bl	83358 <__malloc_lock>
   83376:	f108 060b 	add.w	r6, r8, #11
   8337a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8337e:	2e16      	cmp	r6, #22
   83380:	f023 0503 	bic.w	r5, r3, #3
   83384:	f1a4 0708 	sub.w	r7, r4, #8
   83388:	d84b      	bhi.n	83422 <_realloc_r+0xc2>
   8338a:	2110      	movs	r1, #16
   8338c:	460e      	mov	r6, r1
   8338e:	45b0      	cmp	r8, r6
   83390:	d84c      	bhi.n	8342c <_realloc_r+0xcc>
   83392:	428d      	cmp	r5, r1
   83394:	da51      	bge.n	8343a <_realloc_r+0xda>
   83396:	f8df b384 	ldr.w	fp, [pc, #900]	; 8371c <_realloc_r+0x3bc>
   8339a:	1978      	adds	r0, r7, r5
   8339c:	f8db e008 	ldr.w	lr, [fp, #8]
   833a0:	4586      	cmp	lr, r0
   833a2:	f000 80a6 	beq.w	834f2 <_realloc_r+0x192>
   833a6:	6842      	ldr	r2, [r0, #4]
   833a8:	f022 0c01 	bic.w	ip, r2, #1
   833ac:	4484      	add	ip, r0
   833ae:	f8dc c004 	ldr.w	ip, [ip, #4]
   833b2:	f01c 0f01 	tst.w	ip, #1
   833b6:	d054      	beq.n	83462 <_realloc_r+0x102>
   833b8:	2200      	movs	r2, #0
   833ba:	4610      	mov	r0, r2
   833bc:	07db      	lsls	r3, r3, #31
   833be:	d46f      	bmi.n	834a0 <_realloc_r+0x140>
   833c0:	f854 3c08 	ldr.w	r3, [r4, #-8]
   833c4:	ebc3 0a07 	rsb	sl, r3, r7
   833c8:	f8da 3004 	ldr.w	r3, [sl, #4]
   833cc:	f023 0303 	bic.w	r3, r3, #3
   833d0:	442b      	add	r3, r5
   833d2:	2800      	cmp	r0, #0
   833d4:	d062      	beq.n	8349c <_realloc_r+0x13c>
   833d6:	4570      	cmp	r0, lr
   833d8:	f000 80e9 	beq.w	835ae <_realloc_r+0x24e>
   833dc:	eb02 0e03 	add.w	lr, r2, r3
   833e0:	458e      	cmp	lr, r1
   833e2:	db5b      	blt.n	8349c <_realloc_r+0x13c>
   833e4:	68c3      	ldr	r3, [r0, #12]
   833e6:	6882      	ldr	r2, [r0, #8]
   833e8:	46d0      	mov	r8, sl
   833ea:	60d3      	str	r3, [r2, #12]
   833ec:	609a      	str	r2, [r3, #8]
   833ee:	f858 1f08 	ldr.w	r1, [r8, #8]!
   833f2:	f8da 300c 	ldr.w	r3, [sl, #12]
   833f6:	1f2a      	subs	r2, r5, #4
   833f8:	2a24      	cmp	r2, #36	; 0x24
   833fa:	60cb      	str	r3, [r1, #12]
   833fc:	6099      	str	r1, [r3, #8]
   833fe:	f200 8123 	bhi.w	83648 <_realloc_r+0x2e8>
   83402:	2a13      	cmp	r2, #19
   83404:	f240 80b0 	bls.w	83568 <_realloc_r+0x208>
   83408:	6823      	ldr	r3, [r4, #0]
   8340a:	2a1b      	cmp	r2, #27
   8340c:	f8ca 3008 	str.w	r3, [sl, #8]
   83410:	6863      	ldr	r3, [r4, #4]
   83412:	f8ca 300c 	str.w	r3, [sl, #12]
   83416:	f200 812b 	bhi.w	83670 <_realloc_r+0x310>
   8341a:	3408      	adds	r4, #8
   8341c:	f10a 0310 	add.w	r3, sl, #16
   83420:	e0a3      	b.n	8356a <_realloc_r+0x20a>
   83422:	f026 0607 	bic.w	r6, r6, #7
   83426:	2e00      	cmp	r6, #0
   83428:	4631      	mov	r1, r6
   8342a:	dab0      	bge.n	8338e <_realloc_r+0x2e>
   8342c:	230c      	movs	r3, #12
   8342e:	2000      	movs	r0, #0
   83430:	f8c9 3000 	str.w	r3, [r9]
   83434:	b003      	add	sp, #12
   83436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8343a:	46a0      	mov	r8, r4
   8343c:	1baa      	subs	r2, r5, r6
   8343e:	2a0f      	cmp	r2, #15
   83440:	f003 0301 	and.w	r3, r3, #1
   83444:	d81a      	bhi.n	8347c <_realloc_r+0x11c>
   83446:	432b      	orrs	r3, r5
   83448:	607b      	str	r3, [r7, #4]
   8344a:	443d      	add	r5, r7
   8344c:	686b      	ldr	r3, [r5, #4]
   8344e:	f043 0301 	orr.w	r3, r3, #1
   83452:	606b      	str	r3, [r5, #4]
   83454:	4648      	mov	r0, r9
   83456:	f7ff ff81 	bl	8335c <__malloc_unlock>
   8345a:	4640      	mov	r0, r8
   8345c:	b003      	add	sp, #12
   8345e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83462:	f022 0203 	bic.w	r2, r2, #3
   83466:	eb02 0c05 	add.w	ip, r2, r5
   8346a:	458c      	cmp	ip, r1
   8346c:	dba6      	blt.n	833bc <_realloc_r+0x5c>
   8346e:	68c2      	ldr	r2, [r0, #12]
   83470:	6881      	ldr	r1, [r0, #8]
   83472:	46a0      	mov	r8, r4
   83474:	60ca      	str	r2, [r1, #12]
   83476:	4665      	mov	r5, ip
   83478:	6091      	str	r1, [r2, #8]
   8347a:	e7df      	b.n	8343c <_realloc_r+0xdc>
   8347c:	19b9      	adds	r1, r7, r6
   8347e:	4333      	orrs	r3, r6
   83480:	f042 0001 	orr.w	r0, r2, #1
   83484:	607b      	str	r3, [r7, #4]
   83486:	440a      	add	r2, r1
   83488:	6048      	str	r0, [r1, #4]
   8348a:	6853      	ldr	r3, [r2, #4]
   8348c:	3108      	adds	r1, #8
   8348e:	f043 0301 	orr.w	r3, r3, #1
   83492:	6053      	str	r3, [r2, #4]
   83494:	4648      	mov	r0, r9
   83496:	f7ff f89f 	bl	825d8 <_free_r>
   8349a:	e7db      	b.n	83454 <_realloc_r+0xf4>
   8349c:	428b      	cmp	r3, r1
   8349e:	da33      	bge.n	83508 <_realloc_r+0x1a8>
   834a0:	4641      	mov	r1, r8
   834a2:	4648      	mov	r0, r9
   834a4:	f7ff fb96 	bl	82bd4 <_malloc_r>
   834a8:	4680      	mov	r8, r0
   834aa:	2800      	cmp	r0, #0
   834ac:	d0d2      	beq.n	83454 <_realloc_r+0xf4>
   834ae:	f854 3c04 	ldr.w	r3, [r4, #-4]
   834b2:	f1a0 0108 	sub.w	r1, r0, #8
   834b6:	f023 0201 	bic.w	r2, r3, #1
   834ba:	443a      	add	r2, r7
   834bc:	4291      	cmp	r1, r2
   834be:	f000 80bc 	beq.w	8363a <_realloc_r+0x2da>
   834c2:	1f2a      	subs	r2, r5, #4
   834c4:	2a24      	cmp	r2, #36	; 0x24
   834c6:	d86e      	bhi.n	835a6 <_realloc_r+0x246>
   834c8:	2a13      	cmp	r2, #19
   834ca:	d842      	bhi.n	83552 <_realloc_r+0x1f2>
   834cc:	4603      	mov	r3, r0
   834ce:	4622      	mov	r2, r4
   834d0:	6811      	ldr	r1, [r2, #0]
   834d2:	6019      	str	r1, [r3, #0]
   834d4:	6851      	ldr	r1, [r2, #4]
   834d6:	6059      	str	r1, [r3, #4]
   834d8:	6892      	ldr	r2, [r2, #8]
   834da:	609a      	str	r2, [r3, #8]
   834dc:	4621      	mov	r1, r4
   834de:	4648      	mov	r0, r9
   834e0:	f7ff f87a 	bl	825d8 <_free_r>
   834e4:	e7b6      	b.n	83454 <_realloc_r+0xf4>
   834e6:	4611      	mov	r1, r2
   834e8:	b003      	add	sp, #12
   834ea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   834ee:	f7ff bb71 	b.w	82bd4 <_malloc_r>
   834f2:	f8de 2004 	ldr.w	r2, [lr, #4]
   834f6:	f106 0c10 	add.w	ip, r6, #16
   834fa:	f022 0203 	bic.w	r2, r2, #3
   834fe:	1950      	adds	r0, r2, r5
   83500:	4560      	cmp	r0, ip
   83502:	da3d      	bge.n	83580 <_realloc_r+0x220>
   83504:	4670      	mov	r0, lr
   83506:	e759      	b.n	833bc <_realloc_r+0x5c>
   83508:	46d0      	mov	r8, sl
   8350a:	f858 0f08 	ldr.w	r0, [r8, #8]!
   8350e:	f8da 100c 	ldr.w	r1, [sl, #12]
   83512:	1f2a      	subs	r2, r5, #4
   83514:	2a24      	cmp	r2, #36	; 0x24
   83516:	60c1      	str	r1, [r0, #12]
   83518:	6088      	str	r0, [r1, #8]
   8351a:	f200 80a0 	bhi.w	8365e <_realloc_r+0x2fe>
   8351e:	2a13      	cmp	r2, #19
   83520:	f240 809b 	bls.w	8365a <_realloc_r+0x2fa>
   83524:	6821      	ldr	r1, [r4, #0]
   83526:	2a1b      	cmp	r2, #27
   83528:	f8ca 1008 	str.w	r1, [sl, #8]
   8352c:	6861      	ldr	r1, [r4, #4]
   8352e:	f8ca 100c 	str.w	r1, [sl, #12]
   83532:	f200 80b2 	bhi.w	8369a <_realloc_r+0x33a>
   83536:	3408      	adds	r4, #8
   83538:	f10a 0210 	add.w	r2, sl, #16
   8353c:	6821      	ldr	r1, [r4, #0]
   8353e:	461d      	mov	r5, r3
   83540:	6011      	str	r1, [r2, #0]
   83542:	6861      	ldr	r1, [r4, #4]
   83544:	4657      	mov	r7, sl
   83546:	6051      	str	r1, [r2, #4]
   83548:	68a3      	ldr	r3, [r4, #8]
   8354a:	6093      	str	r3, [r2, #8]
   8354c:	f8da 3004 	ldr.w	r3, [sl, #4]
   83550:	e774      	b.n	8343c <_realloc_r+0xdc>
   83552:	6823      	ldr	r3, [r4, #0]
   83554:	2a1b      	cmp	r2, #27
   83556:	6003      	str	r3, [r0, #0]
   83558:	6863      	ldr	r3, [r4, #4]
   8355a:	6043      	str	r3, [r0, #4]
   8355c:	d862      	bhi.n	83624 <_realloc_r+0x2c4>
   8355e:	f100 0308 	add.w	r3, r0, #8
   83562:	f104 0208 	add.w	r2, r4, #8
   83566:	e7b3      	b.n	834d0 <_realloc_r+0x170>
   83568:	4643      	mov	r3, r8
   8356a:	6822      	ldr	r2, [r4, #0]
   8356c:	4675      	mov	r5, lr
   8356e:	601a      	str	r2, [r3, #0]
   83570:	6862      	ldr	r2, [r4, #4]
   83572:	4657      	mov	r7, sl
   83574:	605a      	str	r2, [r3, #4]
   83576:	68a2      	ldr	r2, [r4, #8]
   83578:	609a      	str	r2, [r3, #8]
   8357a:	f8da 3004 	ldr.w	r3, [sl, #4]
   8357e:	e75d      	b.n	8343c <_realloc_r+0xdc>
   83580:	1b83      	subs	r3, r0, r6
   83582:	4437      	add	r7, r6
   83584:	f043 0301 	orr.w	r3, r3, #1
   83588:	f8cb 7008 	str.w	r7, [fp, #8]
   8358c:	607b      	str	r3, [r7, #4]
   8358e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   83592:	4648      	mov	r0, r9
   83594:	f003 0301 	and.w	r3, r3, #1
   83598:	431e      	orrs	r6, r3
   8359a:	f844 6c04 	str.w	r6, [r4, #-4]
   8359e:	f7ff fedd 	bl	8335c <__malloc_unlock>
   835a2:	4620      	mov	r0, r4
   835a4:	e75a      	b.n	8345c <_realloc_r+0xfc>
   835a6:	4621      	mov	r1, r4
   835a8:	f7ff fe70 	bl	8328c <memmove>
   835ac:	e796      	b.n	834dc <_realloc_r+0x17c>
   835ae:	eb02 0c03 	add.w	ip, r2, r3
   835b2:	f106 0210 	add.w	r2, r6, #16
   835b6:	4594      	cmp	ip, r2
   835b8:	f6ff af70 	blt.w	8349c <_realloc_r+0x13c>
   835bc:	4657      	mov	r7, sl
   835be:	f857 1f08 	ldr.w	r1, [r7, #8]!
   835c2:	f8da 300c 	ldr.w	r3, [sl, #12]
   835c6:	1f2a      	subs	r2, r5, #4
   835c8:	2a24      	cmp	r2, #36	; 0x24
   835ca:	60cb      	str	r3, [r1, #12]
   835cc:	6099      	str	r1, [r3, #8]
   835ce:	f200 8086 	bhi.w	836de <_realloc_r+0x37e>
   835d2:	2a13      	cmp	r2, #19
   835d4:	d977      	bls.n	836c6 <_realloc_r+0x366>
   835d6:	6823      	ldr	r3, [r4, #0]
   835d8:	2a1b      	cmp	r2, #27
   835da:	f8ca 3008 	str.w	r3, [sl, #8]
   835de:	6863      	ldr	r3, [r4, #4]
   835e0:	f8ca 300c 	str.w	r3, [sl, #12]
   835e4:	f200 8084 	bhi.w	836f0 <_realloc_r+0x390>
   835e8:	3408      	adds	r4, #8
   835ea:	f10a 0310 	add.w	r3, sl, #16
   835ee:	6822      	ldr	r2, [r4, #0]
   835f0:	601a      	str	r2, [r3, #0]
   835f2:	6862      	ldr	r2, [r4, #4]
   835f4:	605a      	str	r2, [r3, #4]
   835f6:	68a2      	ldr	r2, [r4, #8]
   835f8:	609a      	str	r2, [r3, #8]
   835fa:	ebc6 020c 	rsb	r2, r6, ip
   835fe:	eb0a 0306 	add.w	r3, sl, r6
   83602:	f042 0201 	orr.w	r2, r2, #1
   83606:	f8cb 3008 	str.w	r3, [fp, #8]
   8360a:	605a      	str	r2, [r3, #4]
   8360c:	f8da 3004 	ldr.w	r3, [sl, #4]
   83610:	4648      	mov	r0, r9
   83612:	f003 0301 	and.w	r3, r3, #1
   83616:	431e      	orrs	r6, r3
   83618:	f8ca 6004 	str.w	r6, [sl, #4]
   8361c:	f7ff fe9e 	bl	8335c <__malloc_unlock>
   83620:	4638      	mov	r0, r7
   83622:	e71b      	b.n	8345c <_realloc_r+0xfc>
   83624:	68a3      	ldr	r3, [r4, #8]
   83626:	2a24      	cmp	r2, #36	; 0x24
   83628:	6083      	str	r3, [r0, #8]
   8362a:	68e3      	ldr	r3, [r4, #12]
   8362c:	60c3      	str	r3, [r0, #12]
   8362e:	d02b      	beq.n	83688 <_realloc_r+0x328>
   83630:	f100 0310 	add.w	r3, r0, #16
   83634:	f104 0210 	add.w	r2, r4, #16
   83638:	e74a      	b.n	834d0 <_realloc_r+0x170>
   8363a:	f850 2c04 	ldr.w	r2, [r0, #-4]
   8363e:	46a0      	mov	r8, r4
   83640:	f022 0203 	bic.w	r2, r2, #3
   83644:	4415      	add	r5, r2
   83646:	e6f9      	b.n	8343c <_realloc_r+0xdc>
   83648:	4621      	mov	r1, r4
   8364a:	4640      	mov	r0, r8
   8364c:	4675      	mov	r5, lr
   8364e:	4657      	mov	r7, sl
   83650:	f7ff fe1c 	bl	8328c <memmove>
   83654:	f8da 3004 	ldr.w	r3, [sl, #4]
   83658:	e6f0      	b.n	8343c <_realloc_r+0xdc>
   8365a:	4642      	mov	r2, r8
   8365c:	e76e      	b.n	8353c <_realloc_r+0x1dc>
   8365e:	4621      	mov	r1, r4
   83660:	4640      	mov	r0, r8
   83662:	461d      	mov	r5, r3
   83664:	4657      	mov	r7, sl
   83666:	f7ff fe11 	bl	8328c <memmove>
   8366a:	f8da 3004 	ldr.w	r3, [sl, #4]
   8366e:	e6e5      	b.n	8343c <_realloc_r+0xdc>
   83670:	68a3      	ldr	r3, [r4, #8]
   83672:	2a24      	cmp	r2, #36	; 0x24
   83674:	f8ca 3010 	str.w	r3, [sl, #16]
   83678:	68e3      	ldr	r3, [r4, #12]
   8367a:	f8ca 3014 	str.w	r3, [sl, #20]
   8367e:	d018      	beq.n	836b2 <_realloc_r+0x352>
   83680:	3410      	adds	r4, #16
   83682:	f10a 0318 	add.w	r3, sl, #24
   83686:	e770      	b.n	8356a <_realloc_r+0x20a>
   83688:	6922      	ldr	r2, [r4, #16]
   8368a:	f100 0318 	add.w	r3, r0, #24
   8368e:	6102      	str	r2, [r0, #16]
   83690:	6961      	ldr	r1, [r4, #20]
   83692:	f104 0218 	add.w	r2, r4, #24
   83696:	6141      	str	r1, [r0, #20]
   83698:	e71a      	b.n	834d0 <_realloc_r+0x170>
   8369a:	68a1      	ldr	r1, [r4, #8]
   8369c:	2a24      	cmp	r2, #36	; 0x24
   8369e:	f8ca 1010 	str.w	r1, [sl, #16]
   836a2:	68e1      	ldr	r1, [r4, #12]
   836a4:	f8ca 1014 	str.w	r1, [sl, #20]
   836a8:	d00f      	beq.n	836ca <_realloc_r+0x36a>
   836aa:	3410      	adds	r4, #16
   836ac:	f10a 0218 	add.w	r2, sl, #24
   836b0:	e744      	b.n	8353c <_realloc_r+0x1dc>
   836b2:	6922      	ldr	r2, [r4, #16]
   836b4:	f10a 0320 	add.w	r3, sl, #32
   836b8:	f8ca 2018 	str.w	r2, [sl, #24]
   836bc:	6962      	ldr	r2, [r4, #20]
   836be:	3418      	adds	r4, #24
   836c0:	f8ca 201c 	str.w	r2, [sl, #28]
   836c4:	e751      	b.n	8356a <_realloc_r+0x20a>
   836c6:	463b      	mov	r3, r7
   836c8:	e791      	b.n	835ee <_realloc_r+0x28e>
   836ca:	6921      	ldr	r1, [r4, #16]
   836cc:	f10a 0220 	add.w	r2, sl, #32
   836d0:	f8ca 1018 	str.w	r1, [sl, #24]
   836d4:	6961      	ldr	r1, [r4, #20]
   836d6:	3418      	adds	r4, #24
   836d8:	f8ca 101c 	str.w	r1, [sl, #28]
   836dc:	e72e      	b.n	8353c <_realloc_r+0x1dc>
   836de:	4621      	mov	r1, r4
   836e0:	4638      	mov	r0, r7
   836e2:	f8cd c004 	str.w	ip, [sp, #4]
   836e6:	f7ff fdd1 	bl	8328c <memmove>
   836ea:	f8dd c004 	ldr.w	ip, [sp, #4]
   836ee:	e784      	b.n	835fa <_realloc_r+0x29a>
   836f0:	68a3      	ldr	r3, [r4, #8]
   836f2:	2a24      	cmp	r2, #36	; 0x24
   836f4:	f8ca 3010 	str.w	r3, [sl, #16]
   836f8:	68e3      	ldr	r3, [r4, #12]
   836fa:	f8ca 3014 	str.w	r3, [sl, #20]
   836fe:	d003      	beq.n	83708 <_realloc_r+0x3a8>
   83700:	3410      	adds	r4, #16
   83702:	f10a 0318 	add.w	r3, sl, #24
   83706:	e772      	b.n	835ee <_realloc_r+0x28e>
   83708:	6922      	ldr	r2, [r4, #16]
   8370a:	f10a 0320 	add.w	r3, sl, #32
   8370e:	f8ca 2018 	str.w	r2, [sl, #24]
   83712:	6962      	ldr	r2, [r4, #20]
   83714:	3418      	adds	r4, #24
   83716:	f8ca 201c 	str.w	r2, [sl, #28]
   8371a:	e768      	b.n	835ee <_realloc_r+0x28e>
   8371c:	20070658 	.word	0x20070658

00083720 <_sbrk_r>:
   83720:	b538      	push	{r3, r4, r5, lr}
   83722:	4c07      	ldr	r4, [pc, #28]	; (83740 <_sbrk_r+0x20>)
   83724:	2300      	movs	r3, #0
   83726:	4605      	mov	r5, r0
   83728:	4608      	mov	r0, r1
   8372a:	6023      	str	r3, [r4, #0]
   8372c:	f7fd fbb0 	bl	80e90 <_sbrk>
   83730:	1c43      	adds	r3, r0, #1
   83732:	d000      	beq.n	83736 <_sbrk_r+0x16>
   83734:	bd38      	pop	{r3, r4, r5, pc}
   83736:	6823      	ldr	r3, [r4, #0]
   83738:	2b00      	cmp	r3, #0
   8373a:	d0fb      	beq.n	83734 <_sbrk_r+0x14>
   8373c:	602b      	str	r3, [r5, #0]
   8373e:	bd38      	pop	{r3, r4, r5, pc}
   83740:	20070b3c 	.word	0x20070b3c

00083744 <__sread>:
   83744:	b510      	push	{r4, lr}
   83746:	460c      	mov	r4, r1
   83748:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8374c:	f000 f9f2 	bl	83b34 <_read_r>
   83750:	2800      	cmp	r0, #0
   83752:	db03      	blt.n	8375c <__sread+0x18>
   83754:	6d23      	ldr	r3, [r4, #80]	; 0x50
   83756:	4403      	add	r3, r0
   83758:	6523      	str	r3, [r4, #80]	; 0x50
   8375a:	bd10      	pop	{r4, pc}
   8375c:	89a3      	ldrh	r3, [r4, #12]
   8375e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   83762:	81a3      	strh	r3, [r4, #12]
   83764:	bd10      	pop	{r4, pc}
   83766:	bf00      	nop

00083768 <__swrite>:
   83768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8376c:	460c      	mov	r4, r1
   8376e:	8989      	ldrh	r1, [r1, #12]
   83770:	461d      	mov	r5, r3
   83772:	05cb      	lsls	r3, r1, #23
   83774:	4616      	mov	r6, r2
   83776:	4607      	mov	r7, r0
   83778:	d506      	bpl.n	83788 <__swrite+0x20>
   8377a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8377e:	2200      	movs	r2, #0
   83780:	2302      	movs	r3, #2
   83782:	f000 f9c3 	bl	83b0c <_lseek_r>
   83786:	89a1      	ldrh	r1, [r4, #12]
   83788:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   8378c:	81a1      	strh	r1, [r4, #12]
   8378e:	4638      	mov	r0, r7
   83790:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   83794:	4632      	mov	r2, r6
   83796:	462b      	mov	r3, r5
   83798:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8379c:	f000 b8ce 	b.w	8393c <_write_r>

000837a0 <__sseek>:
   837a0:	b510      	push	{r4, lr}
   837a2:	460c      	mov	r4, r1
   837a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   837a8:	f000 f9b0 	bl	83b0c <_lseek_r>
   837ac:	89a3      	ldrh	r3, [r4, #12]
   837ae:	1c42      	adds	r2, r0, #1
   837b0:	bf0e      	itee	eq
   837b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   837b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   837ba:	6520      	strne	r0, [r4, #80]	; 0x50
   837bc:	81a3      	strh	r3, [r4, #12]
   837be:	bd10      	pop	{r4, pc}

000837c0 <__sclose>:
   837c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   837c4:	f000 b922 	b.w	83a0c <_close_r>

000837c8 <strlen>:
   837c8:	f020 0103 	bic.w	r1, r0, #3
   837cc:	f010 0003 	ands.w	r0, r0, #3
   837d0:	f1c0 0000 	rsb	r0, r0, #0
   837d4:	f851 3b04 	ldr.w	r3, [r1], #4
   837d8:	f100 0c04 	add.w	ip, r0, #4
   837dc:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   837e0:	f06f 0200 	mvn.w	r2, #0
   837e4:	bf1c      	itt	ne
   837e6:	fa22 f20c 	lsrne.w	r2, r2, ip
   837ea:	4313      	orrne	r3, r2
   837ec:	f04f 0c01 	mov.w	ip, #1
   837f0:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   837f4:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   837f8:	eba3 020c 	sub.w	r2, r3, ip
   837fc:	ea22 0203 	bic.w	r2, r2, r3
   83800:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   83804:	bf04      	itt	eq
   83806:	f851 3b04 	ldreq.w	r3, [r1], #4
   8380a:	3004      	addeq	r0, #4
   8380c:	d0f4      	beq.n	837f8 <strlen+0x30>
   8380e:	f013 0fff 	tst.w	r3, #255	; 0xff
   83812:	bf1f      	itttt	ne
   83814:	3001      	addne	r0, #1
   83816:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
   8381a:	3001      	addne	r0, #1
   8381c:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
   83820:	bf18      	it	ne
   83822:	3001      	addne	r0, #1
   83824:	4770      	bx	lr
   83826:	bf00      	nop

00083828 <__swbuf_r>:
   83828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8382a:	460d      	mov	r5, r1
   8382c:	4614      	mov	r4, r2
   8382e:	4607      	mov	r7, r0
   83830:	b110      	cbz	r0, 83838 <__swbuf_r+0x10>
   83832:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83834:	2b00      	cmp	r3, #0
   83836:	d048      	beq.n	838ca <__swbuf_r+0xa2>
   83838:	89a2      	ldrh	r2, [r4, #12]
   8383a:	69a0      	ldr	r0, [r4, #24]
   8383c:	b293      	uxth	r3, r2
   8383e:	60a0      	str	r0, [r4, #8]
   83840:	0718      	lsls	r0, r3, #28
   83842:	d538      	bpl.n	838b6 <__swbuf_r+0x8e>
   83844:	6926      	ldr	r6, [r4, #16]
   83846:	2e00      	cmp	r6, #0
   83848:	d035      	beq.n	838b6 <__swbuf_r+0x8e>
   8384a:	0499      	lsls	r1, r3, #18
   8384c:	b2ed      	uxtb	r5, r5
   8384e:	d515      	bpl.n	8387c <__swbuf_r+0x54>
   83850:	6823      	ldr	r3, [r4, #0]
   83852:	6962      	ldr	r2, [r4, #20]
   83854:	1b9e      	subs	r6, r3, r6
   83856:	4296      	cmp	r6, r2
   83858:	da1c      	bge.n	83894 <__swbuf_r+0x6c>
   8385a:	3601      	adds	r6, #1
   8385c:	68a2      	ldr	r2, [r4, #8]
   8385e:	1c59      	adds	r1, r3, #1
   83860:	3a01      	subs	r2, #1
   83862:	60a2      	str	r2, [r4, #8]
   83864:	6021      	str	r1, [r4, #0]
   83866:	701d      	strb	r5, [r3, #0]
   83868:	6963      	ldr	r3, [r4, #20]
   8386a:	42b3      	cmp	r3, r6
   8386c:	d01a      	beq.n	838a4 <__swbuf_r+0x7c>
   8386e:	89a3      	ldrh	r3, [r4, #12]
   83870:	07db      	lsls	r3, r3, #31
   83872:	d501      	bpl.n	83878 <__swbuf_r+0x50>
   83874:	2d0a      	cmp	r5, #10
   83876:	d015      	beq.n	838a4 <__swbuf_r+0x7c>
   83878:	4628      	mov	r0, r5
   8387a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8387c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8387e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   83882:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   83886:	6663      	str	r3, [r4, #100]	; 0x64
   83888:	6823      	ldr	r3, [r4, #0]
   8388a:	81a2      	strh	r2, [r4, #12]
   8388c:	6962      	ldr	r2, [r4, #20]
   8388e:	1b9e      	subs	r6, r3, r6
   83890:	4296      	cmp	r6, r2
   83892:	dbe2      	blt.n	8385a <__swbuf_r+0x32>
   83894:	4638      	mov	r0, r7
   83896:	4621      	mov	r1, r4
   83898:	f7fe fd3e 	bl	82318 <_fflush_r>
   8389c:	b940      	cbnz	r0, 838b0 <__swbuf_r+0x88>
   8389e:	6823      	ldr	r3, [r4, #0]
   838a0:	2601      	movs	r6, #1
   838a2:	e7db      	b.n	8385c <__swbuf_r+0x34>
   838a4:	4638      	mov	r0, r7
   838a6:	4621      	mov	r1, r4
   838a8:	f7fe fd36 	bl	82318 <_fflush_r>
   838ac:	2800      	cmp	r0, #0
   838ae:	d0e3      	beq.n	83878 <__swbuf_r+0x50>
   838b0:	f04f 30ff 	mov.w	r0, #4294967295
   838b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   838b6:	4638      	mov	r0, r7
   838b8:	4621      	mov	r1, r4
   838ba:	f7fe fc17 	bl	820ec <__swsetup_r>
   838be:	2800      	cmp	r0, #0
   838c0:	d1f6      	bne.n	838b0 <__swbuf_r+0x88>
   838c2:	89a2      	ldrh	r2, [r4, #12]
   838c4:	6926      	ldr	r6, [r4, #16]
   838c6:	b293      	uxth	r3, r2
   838c8:	e7bf      	b.n	8384a <__swbuf_r+0x22>
   838ca:	f7fe fd41 	bl	82350 <__sinit>
   838ce:	e7b3      	b.n	83838 <__swbuf_r+0x10>

000838d0 <_wcrtomb_r>:
   838d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   838d4:	461e      	mov	r6, r3
   838d6:	b086      	sub	sp, #24
   838d8:	460c      	mov	r4, r1
   838da:	4605      	mov	r5, r0
   838dc:	4617      	mov	r7, r2
   838de:	4b0f      	ldr	r3, [pc, #60]	; (8391c <_wcrtomb_r+0x4c>)
   838e0:	b191      	cbz	r1, 83908 <_wcrtomb_r+0x38>
   838e2:	f8d3 8000 	ldr.w	r8, [r3]
   838e6:	f7ff f8f3 	bl	82ad0 <__locale_charset>
   838ea:	9600      	str	r6, [sp, #0]
   838ec:	4603      	mov	r3, r0
   838ee:	4621      	mov	r1, r4
   838f0:	463a      	mov	r2, r7
   838f2:	4628      	mov	r0, r5
   838f4:	47c0      	blx	r8
   838f6:	1c43      	adds	r3, r0, #1
   838f8:	d103      	bne.n	83902 <_wcrtomb_r+0x32>
   838fa:	2200      	movs	r2, #0
   838fc:	238a      	movs	r3, #138	; 0x8a
   838fe:	6032      	str	r2, [r6, #0]
   83900:	602b      	str	r3, [r5, #0]
   83902:	b006      	add	sp, #24
   83904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83908:	681f      	ldr	r7, [r3, #0]
   8390a:	f7ff f8e1 	bl	82ad0 <__locale_charset>
   8390e:	9600      	str	r6, [sp, #0]
   83910:	4603      	mov	r3, r0
   83912:	4622      	mov	r2, r4
   83914:	4628      	mov	r0, r5
   83916:	a903      	add	r1, sp, #12
   83918:	47b8      	blx	r7
   8391a:	e7ec      	b.n	838f6 <_wcrtomb_r+0x26>
   8391c:	20070a68 	.word	0x20070a68

00083920 <__ascii_wctomb>:
   83920:	b121      	cbz	r1, 8392c <__ascii_wctomb+0xc>
   83922:	2aff      	cmp	r2, #255	; 0xff
   83924:	d804      	bhi.n	83930 <__ascii_wctomb+0x10>
   83926:	700a      	strb	r2, [r1, #0]
   83928:	2001      	movs	r0, #1
   8392a:	4770      	bx	lr
   8392c:	4608      	mov	r0, r1
   8392e:	4770      	bx	lr
   83930:	238a      	movs	r3, #138	; 0x8a
   83932:	6003      	str	r3, [r0, #0]
   83934:	f04f 30ff 	mov.w	r0, #4294967295
   83938:	4770      	bx	lr
   8393a:	bf00      	nop

0008393c <_write_r>:
   8393c:	b570      	push	{r4, r5, r6, lr}
   8393e:	4c08      	ldr	r4, [pc, #32]	; (83960 <_write_r+0x24>)
   83940:	4606      	mov	r6, r0
   83942:	2500      	movs	r5, #0
   83944:	4608      	mov	r0, r1
   83946:	4611      	mov	r1, r2
   83948:	461a      	mov	r2, r3
   8394a:	6025      	str	r5, [r4, #0]
   8394c:	f7fc fc1c 	bl	80188 <_write>
   83950:	1c43      	adds	r3, r0, #1
   83952:	d000      	beq.n	83956 <_write_r+0x1a>
   83954:	bd70      	pop	{r4, r5, r6, pc}
   83956:	6823      	ldr	r3, [r4, #0]
   83958:	2b00      	cmp	r3, #0
   8395a:	d0fb      	beq.n	83954 <_write_r+0x18>
   8395c:	6033      	str	r3, [r6, #0]
   8395e:	bd70      	pop	{r4, r5, r6, pc}
   83960:	20070b3c 	.word	0x20070b3c

00083964 <__register_exitproc>:
   83964:	b5f0      	push	{r4, r5, r6, r7, lr}
   83966:	4c27      	ldr	r4, [pc, #156]	; (83a04 <__register_exitproc+0xa0>)
   83968:	b085      	sub	sp, #20
   8396a:	6826      	ldr	r6, [r4, #0]
   8396c:	4607      	mov	r7, r0
   8396e:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   83972:	2c00      	cmp	r4, #0
   83974:	d040      	beq.n	839f8 <__register_exitproc+0x94>
   83976:	6865      	ldr	r5, [r4, #4]
   83978:	2d1f      	cmp	r5, #31
   8397a:	dd1e      	ble.n	839ba <__register_exitproc+0x56>
   8397c:	4822      	ldr	r0, [pc, #136]	; (83a08 <__register_exitproc+0xa4>)
   8397e:	b918      	cbnz	r0, 83988 <__register_exitproc+0x24>
   83980:	f04f 30ff 	mov.w	r0, #4294967295
   83984:	b005      	add	sp, #20
   83986:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83988:	f44f 70c8 	mov.w	r0, #400	; 0x190
   8398c:	9103      	str	r1, [sp, #12]
   8398e:	9202      	str	r2, [sp, #8]
   83990:	9301      	str	r3, [sp, #4]
   83992:	f7ff f917 	bl	82bc4 <malloc>
   83996:	9903      	ldr	r1, [sp, #12]
   83998:	4604      	mov	r4, r0
   8399a:	9a02      	ldr	r2, [sp, #8]
   8399c:	9b01      	ldr	r3, [sp, #4]
   8399e:	2800      	cmp	r0, #0
   839a0:	d0ee      	beq.n	83980 <__register_exitproc+0x1c>
   839a2:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
   839a6:	2000      	movs	r0, #0
   839a8:	6025      	str	r5, [r4, #0]
   839aa:	6060      	str	r0, [r4, #4]
   839ac:	4605      	mov	r5, r0
   839ae:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   839b2:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   839b6:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   839ba:	b93f      	cbnz	r7, 839cc <__register_exitproc+0x68>
   839bc:	1c6b      	adds	r3, r5, #1
   839be:	2000      	movs	r0, #0
   839c0:	3502      	adds	r5, #2
   839c2:	6063      	str	r3, [r4, #4]
   839c4:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
   839c8:	b005      	add	sp, #20
   839ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   839cc:	2601      	movs	r6, #1
   839ce:	40ae      	lsls	r6, r5
   839d0:	eb04 0085 	add.w	r0, r4, r5, lsl #2
   839d4:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   839d8:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   839dc:	2f02      	cmp	r7, #2
   839de:	ea42 0206 	orr.w	r2, r2, r6
   839e2:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   839e6:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   839ea:	d1e7      	bne.n	839bc <__register_exitproc+0x58>
   839ec:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   839f0:	431e      	orrs	r6, r3
   839f2:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
   839f6:	e7e1      	b.n	839bc <__register_exitproc+0x58>
   839f8:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   839fc:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   83a00:	e7b9      	b.n	83976 <__register_exitproc+0x12>
   83a02:	bf00      	nop
   83a04:	0008418c 	.word	0x0008418c
   83a08:	00082bc5 	.word	0x00082bc5

00083a0c <_close_r>:
   83a0c:	b538      	push	{r3, r4, r5, lr}
   83a0e:	4c07      	ldr	r4, [pc, #28]	; (83a2c <_close_r+0x20>)
   83a10:	2300      	movs	r3, #0
   83a12:	4605      	mov	r5, r0
   83a14:	4608      	mov	r0, r1
   83a16:	6023      	str	r3, [r4, #0]
   83a18:	f7fd fa54 	bl	80ec4 <_close>
   83a1c:	1c43      	adds	r3, r0, #1
   83a1e:	d000      	beq.n	83a22 <_close_r+0x16>
   83a20:	bd38      	pop	{r3, r4, r5, pc}
   83a22:	6823      	ldr	r3, [r4, #0]
   83a24:	2b00      	cmp	r3, #0
   83a26:	d0fb      	beq.n	83a20 <_close_r+0x14>
   83a28:	602b      	str	r3, [r5, #0]
   83a2a:	bd38      	pop	{r3, r4, r5, pc}
   83a2c:	20070b3c 	.word	0x20070b3c

00083a30 <_fclose_r>:
   83a30:	b570      	push	{r4, r5, r6, lr}
   83a32:	460c      	mov	r4, r1
   83a34:	4605      	mov	r5, r0
   83a36:	b131      	cbz	r1, 83a46 <_fclose_r+0x16>
   83a38:	b110      	cbz	r0, 83a40 <_fclose_r+0x10>
   83a3a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83a3c:	2b00      	cmp	r3, #0
   83a3e:	d02f      	beq.n	83aa0 <_fclose_r+0x70>
   83a40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83a44:	b90b      	cbnz	r3, 83a4a <_fclose_r+0x1a>
   83a46:	2000      	movs	r0, #0
   83a48:	bd70      	pop	{r4, r5, r6, pc}
   83a4a:	4628      	mov	r0, r5
   83a4c:	4621      	mov	r1, r4
   83a4e:	f7fe fc63 	bl	82318 <_fflush_r>
   83a52:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   83a54:	4606      	mov	r6, r0
   83a56:	b133      	cbz	r3, 83a66 <_fclose_r+0x36>
   83a58:	4628      	mov	r0, r5
   83a5a:	69e1      	ldr	r1, [r4, #28]
   83a5c:	4798      	blx	r3
   83a5e:	2800      	cmp	r0, #0
   83a60:	bfb8      	it	lt
   83a62:	f04f 36ff 	movlt.w	r6, #4294967295
   83a66:	89a3      	ldrh	r3, [r4, #12]
   83a68:	061b      	lsls	r3, r3, #24
   83a6a:	d41c      	bmi.n	83aa6 <_fclose_r+0x76>
   83a6c:	6b21      	ldr	r1, [r4, #48]	; 0x30
   83a6e:	b141      	cbz	r1, 83a82 <_fclose_r+0x52>
   83a70:	f104 0340 	add.w	r3, r4, #64	; 0x40
   83a74:	4299      	cmp	r1, r3
   83a76:	d002      	beq.n	83a7e <_fclose_r+0x4e>
   83a78:	4628      	mov	r0, r5
   83a7a:	f7fe fdad 	bl	825d8 <_free_r>
   83a7e:	2300      	movs	r3, #0
   83a80:	6323      	str	r3, [r4, #48]	; 0x30
   83a82:	6c61      	ldr	r1, [r4, #68]	; 0x44
   83a84:	b121      	cbz	r1, 83a90 <_fclose_r+0x60>
   83a86:	4628      	mov	r0, r5
   83a88:	f7fe fda6 	bl	825d8 <_free_r>
   83a8c:	2300      	movs	r3, #0
   83a8e:	6463      	str	r3, [r4, #68]	; 0x44
   83a90:	f7fe fcd8 	bl	82444 <__sfp_lock_acquire>
   83a94:	2300      	movs	r3, #0
   83a96:	81a3      	strh	r3, [r4, #12]
   83a98:	f7fe fcd6 	bl	82448 <__sfp_lock_release>
   83a9c:	4630      	mov	r0, r6
   83a9e:	bd70      	pop	{r4, r5, r6, pc}
   83aa0:	f7fe fc56 	bl	82350 <__sinit>
   83aa4:	e7cc      	b.n	83a40 <_fclose_r+0x10>
   83aa6:	4628      	mov	r0, r5
   83aa8:	6921      	ldr	r1, [r4, #16]
   83aaa:	f7fe fd95 	bl	825d8 <_free_r>
   83aae:	e7dd      	b.n	83a6c <_fclose_r+0x3c>

00083ab0 <fclose>:
   83ab0:	4b02      	ldr	r3, [pc, #8]	; (83abc <fclose+0xc>)
   83ab2:	4601      	mov	r1, r0
   83ab4:	6818      	ldr	r0, [r3, #0]
   83ab6:	f7ff bfbb 	b.w	83a30 <_fclose_r>
   83aba:	bf00      	nop
   83abc:	20070630 	.word	0x20070630

00083ac0 <_fstat_r>:
   83ac0:	b538      	push	{r3, r4, r5, lr}
   83ac2:	4c08      	ldr	r4, [pc, #32]	; (83ae4 <_fstat_r+0x24>)
   83ac4:	2300      	movs	r3, #0
   83ac6:	4605      	mov	r5, r0
   83ac8:	4608      	mov	r0, r1
   83aca:	4611      	mov	r1, r2
   83acc:	6023      	str	r3, [r4, #0]
   83ace:	f7fd f9fd 	bl	80ecc <_fstat>
   83ad2:	1c43      	adds	r3, r0, #1
   83ad4:	d000      	beq.n	83ad8 <_fstat_r+0x18>
   83ad6:	bd38      	pop	{r3, r4, r5, pc}
   83ad8:	6823      	ldr	r3, [r4, #0]
   83ada:	2b00      	cmp	r3, #0
   83adc:	d0fb      	beq.n	83ad6 <_fstat_r+0x16>
   83ade:	602b      	str	r3, [r5, #0]
   83ae0:	bd38      	pop	{r3, r4, r5, pc}
   83ae2:	bf00      	nop
   83ae4:	20070b3c 	.word	0x20070b3c

00083ae8 <_isatty_r>:
   83ae8:	b538      	push	{r3, r4, r5, lr}
   83aea:	4c07      	ldr	r4, [pc, #28]	; (83b08 <_isatty_r+0x20>)
   83aec:	2300      	movs	r3, #0
   83aee:	4605      	mov	r5, r0
   83af0:	4608      	mov	r0, r1
   83af2:	6023      	str	r3, [r4, #0]
   83af4:	f7fd f9f0 	bl	80ed8 <_isatty>
   83af8:	1c43      	adds	r3, r0, #1
   83afa:	d000      	beq.n	83afe <_isatty_r+0x16>
   83afc:	bd38      	pop	{r3, r4, r5, pc}
   83afe:	6823      	ldr	r3, [r4, #0]
   83b00:	2b00      	cmp	r3, #0
   83b02:	d0fb      	beq.n	83afc <_isatty_r+0x14>
   83b04:	602b      	str	r3, [r5, #0]
   83b06:	bd38      	pop	{r3, r4, r5, pc}
   83b08:	20070b3c 	.word	0x20070b3c

00083b0c <_lseek_r>:
   83b0c:	b570      	push	{r4, r5, r6, lr}
   83b0e:	4c08      	ldr	r4, [pc, #32]	; (83b30 <_lseek_r+0x24>)
   83b10:	4606      	mov	r6, r0
   83b12:	2500      	movs	r5, #0
   83b14:	4608      	mov	r0, r1
   83b16:	4611      	mov	r1, r2
   83b18:	461a      	mov	r2, r3
   83b1a:	6025      	str	r5, [r4, #0]
   83b1c:	f7fd f9de 	bl	80edc <_lseek>
   83b20:	1c43      	adds	r3, r0, #1
   83b22:	d000      	beq.n	83b26 <_lseek_r+0x1a>
   83b24:	bd70      	pop	{r4, r5, r6, pc}
   83b26:	6823      	ldr	r3, [r4, #0]
   83b28:	2b00      	cmp	r3, #0
   83b2a:	d0fb      	beq.n	83b24 <_lseek_r+0x18>
   83b2c:	6033      	str	r3, [r6, #0]
   83b2e:	bd70      	pop	{r4, r5, r6, pc}
   83b30:	20070b3c 	.word	0x20070b3c

00083b34 <_read_r>:
   83b34:	b570      	push	{r4, r5, r6, lr}
   83b36:	4c08      	ldr	r4, [pc, #32]	; (83b58 <_read_r+0x24>)
   83b38:	4606      	mov	r6, r0
   83b3a:	2500      	movs	r5, #0
   83b3c:	4608      	mov	r0, r1
   83b3e:	4611      	mov	r1, r2
   83b40:	461a      	mov	r2, r3
   83b42:	6025      	str	r5, [r4, #0]
   83b44:	f7fc fb00 	bl	80148 <_read>
   83b48:	1c43      	adds	r3, r0, #1
   83b4a:	d000      	beq.n	83b4e <_read_r+0x1a>
   83b4c:	bd70      	pop	{r4, r5, r6, pc}
   83b4e:	6823      	ldr	r3, [r4, #0]
   83b50:	2b00      	cmp	r3, #0
   83b52:	d0fb      	beq.n	83b4c <_read_r+0x18>
   83b54:	6033      	str	r3, [r6, #0]
   83b56:	bd70      	pop	{r4, r5, r6, pc}
   83b58:	20070b3c 	.word	0x20070b3c

00083b5c <__aeabi_uldivmod>:
   83b5c:	b94b      	cbnz	r3, 83b72 <__aeabi_uldivmod+0x16>
   83b5e:	b942      	cbnz	r2, 83b72 <__aeabi_uldivmod+0x16>
   83b60:	2900      	cmp	r1, #0
   83b62:	bf08      	it	eq
   83b64:	2800      	cmpeq	r0, #0
   83b66:	d002      	beq.n	83b6e <__aeabi_uldivmod+0x12>
   83b68:	f04f 31ff 	mov.w	r1, #4294967295
   83b6c:	4608      	mov	r0, r1
   83b6e:	f000 b83b 	b.w	83be8 <__aeabi_idiv0>
   83b72:	b082      	sub	sp, #8
   83b74:	46ec      	mov	ip, sp
   83b76:	e92d 5000 	stmdb	sp!, {ip, lr}
   83b7a:	f000 f81d 	bl	83bb8 <__gnu_uldivmod_helper>
   83b7e:	f8dd e004 	ldr.w	lr, [sp, #4]
   83b82:	b002      	add	sp, #8
   83b84:	bc0c      	pop	{r2, r3}
   83b86:	4770      	bx	lr

00083b88 <__gnu_ldivmod_helper>:
   83b88:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   83b8c:	9e08      	ldr	r6, [sp, #32]
   83b8e:	4614      	mov	r4, r2
   83b90:	461d      	mov	r5, r3
   83b92:	4680      	mov	r8, r0
   83b94:	4689      	mov	r9, r1
   83b96:	f000 f829 	bl	83bec <__divdi3>
   83b9a:	fb04 f301 	mul.w	r3, r4, r1
   83b9e:	fba4 ab00 	umull	sl, fp, r4, r0
   83ba2:	fb00 3205 	mla	r2, r0, r5, r3
   83ba6:	4493      	add	fp, r2
   83ba8:	ebb8 080a 	subs.w	r8, r8, sl
   83bac:	eb69 090b 	sbc.w	r9, r9, fp
   83bb0:	e9c6 8900 	strd	r8, r9, [r6]
   83bb4:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

00083bb8 <__gnu_uldivmod_helper>:
   83bb8:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   83bbc:	9e08      	ldr	r6, [sp, #32]
   83bbe:	4614      	mov	r4, r2
   83bc0:	461d      	mov	r5, r3
   83bc2:	4680      	mov	r8, r0
   83bc4:	4689      	mov	r9, r1
   83bc6:	f000 f961 	bl	83e8c <__udivdi3>
   83bca:	fb00 f505 	mul.w	r5, r0, r5
   83bce:	fba0 ab04 	umull	sl, fp, r0, r4
   83bd2:	fb04 5401 	mla	r4, r4, r1, r5
   83bd6:	44a3      	add	fp, r4
   83bd8:	ebb8 080a 	subs.w	r8, r8, sl
   83bdc:	eb69 090b 	sbc.w	r9, r9, fp
   83be0:	e9c6 8900 	strd	r8, r9, [r6]
   83be4:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

00083be8 <__aeabi_idiv0>:
   83be8:	4770      	bx	lr
   83bea:	bf00      	nop

00083bec <__divdi3>:
   83bec:	2900      	cmp	r1, #0
   83bee:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83bf2:	f2c0 80a1 	blt.w	83d38 <__divdi3+0x14c>
   83bf6:	2400      	movs	r4, #0
   83bf8:	2b00      	cmp	r3, #0
   83bfa:	f2c0 8098 	blt.w	83d2e <__divdi3+0x142>
   83bfe:	4615      	mov	r5, r2
   83c00:	4606      	mov	r6, r0
   83c02:	460f      	mov	r7, r1
   83c04:	2b00      	cmp	r3, #0
   83c06:	d13f      	bne.n	83c88 <__divdi3+0x9c>
   83c08:	428a      	cmp	r2, r1
   83c0a:	d958      	bls.n	83cbe <__divdi3+0xd2>
   83c0c:	fab2 f382 	clz	r3, r2
   83c10:	b14b      	cbz	r3, 83c26 <__divdi3+0x3a>
   83c12:	f1c3 0220 	rsb	r2, r3, #32
   83c16:	fa01 f703 	lsl.w	r7, r1, r3
   83c1a:	fa20 f202 	lsr.w	r2, r0, r2
   83c1e:	409d      	lsls	r5, r3
   83c20:	fa00 f603 	lsl.w	r6, r0, r3
   83c24:	4317      	orrs	r7, r2
   83c26:	0c29      	lsrs	r1, r5, #16
   83c28:	fbb7 f2f1 	udiv	r2, r7, r1
   83c2c:	fb01 7712 	mls	r7, r1, r2, r7
   83c30:	b2a8      	uxth	r0, r5
   83c32:	fb00 f302 	mul.w	r3, r0, r2
   83c36:	ea4f 4c16 	mov.w	ip, r6, lsr #16
   83c3a:	ea4c 4707 	orr.w	r7, ip, r7, lsl #16
   83c3e:	42bb      	cmp	r3, r7
   83c40:	d909      	bls.n	83c56 <__divdi3+0x6a>
   83c42:	197f      	adds	r7, r7, r5
   83c44:	f102 3cff 	add.w	ip, r2, #4294967295
   83c48:	f080 8105 	bcs.w	83e56 <__divdi3+0x26a>
   83c4c:	42bb      	cmp	r3, r7
   83c4e:	f240 8102 	bls.w	83e56 <__divdi3+0x26a>
   83c52:	3a02      	subs	r2, #2
   83c54:	442f      	add	r7, r5
   83c56:	1aff      	subs	r7, r7, r3
   83c58:	fbb7 f3f1 	udiv	r3, r7, r1
   83c5c:	fb01 7113 	mls	r1, r1, r3, r7
   83c60:	fb00 f003 	mul.w	r0, r0, r3
   83c64:	b2b6      	uxth	r6, r6
   83c66:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
   83c6a:	4288      	cmp	r0, r1
   83c6c:	d908      	bls.n	83c80 <__divdi3+0x94>
   83c6e:	1949      	adds	r1, r1, r5
   83c70:	f103 37ff 	add.w	r7, r3, #4294967295
   83c74:	f080 80f1 	bcs.w	83e5a <__divdi3+0x26e>
   83c78:	4288      	cmp	r0, r1
   83c7a:	f240 80ee 	bls.w	83e5a <__divdi3+0x26e>
   83c7e:	3b02      	subs	r3, #2
   83c80:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   83c84:	2300      	movs	r3, #0
   83c86:	e003      	b.n	83c90 <__divdi3+0xa4>
   83c88:	428b      	cmp	r3, r1
   83c8a:	d90a      	bls.n	83ca2 <__divdi3+0xb6>
   83c8c:	2300      	movs	r3, #0
   83c8e:	461a      	mov	r2, r3
   83c90:	4610      	mov	r0, r2
   83c92:	4619      	mov	r1, r3
   83c94:	b114      	cbz	r4, 83c9c <__divdi3+0xb0>
   83c96:	4240      	negs	r0, r0
   83c98:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   83c9c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83ca0:	4770      	bx	lr
   83ca2:	fab3 f883 	clz	r8, r3
   83ca6:	f1b8 0f00 	cmp.w	r8, #0
   83caa:	f040 8088 	bne.w	83dbe <__divdi3+0x1d2>
   83cae:	428b      	cmp	r3, r1
   83cb0:	d302      	bcc.n	83cb8 <__divdi3+0xcc>
   83cb2:	4282      	cmp	r2, r0
   83cb4:	f200 80e2 	bhi.w	83e7c <__divdi3+0x290>
   83cb8:	2300      	movs	r3, #0
   83cba:	2201      	movs	r2, #1
   83cbc:	e7e8      	b.n	83c90 <__divdi3+0xa4>
   83cbe:	b912      	cbnz	r2, 83cc6 <__divdi3+0xda>
   83cc0:	2301      	movs	r3, #1
   83cc2:	fbb3 f5f2 	udiv	r5, r3, r2
   83cc6:	fab5 f285 	clz	r2, r5
   83cca:	2a00      	cmp	r2, #0
   83ccc:	d13a      	bne.n	83d44 <__divdi3+0x158>
   83cce:	1b7f      	subs	r7, r7, r5
   83cd0:	0c28      	lsrs	r0, r5, #16
   83cd2:	fa1f fc85 	uxth.w	ip, r5
   83cd6:	2301      	movs	r3, #1
   83cd8:	fbb7 f1f0 	udiv	r1, r7, r0
   83cdc:	fb00 7711 	mls	r7, r0, r1, r7
   83ce0:	fb0c f201 	mul.w	r2, ip, r1
   83ce4:	ea4f 4816 	mov.w	r8, r6, lsr #16
   83ce8:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
   83cec:	42ba      	cmp	r2, r7
   83cee:	d907      	bls.n	83d00 <__divdi3+0x114>
   83cf0:	197f      	adds	r7, r7, r5
   83cf2:	f101 38ff 	add.w	r8, r1, #4294967295
   83cf6:	d202      	bcs.n	83cfe <__divdi3+0x112>
   83cf8:	42ba      	cmp	r2, r7
   83cfa:	f200 80c4 	bhi.w	83e86 <__divdi3+0x29a>
   83cfe:	4641      	mov	r1, r8
   83d00:	1abf      	subs	r7, r7, r2
   83d02:	fbb7 f2f0 	udiv	r2, r7, r0
   83d06:	fb00 7012 	mls	r0, r0, r2, r7
   83d0a:	fb0c fc02 	mul.w	ip, ip, r2
   83d0e:	b2b6      	uxth	r6, r6
   83d10:	ea46 4000 	orr.w	r0, r6, r0, lsl #16
   83d14:	4584      	cmp	ip, r0
   83d16:	d907      	bls.n	83d28 <__divdi3+0x13c>
   83d18:	1940      	adds	r0, r0, r5
   83d1a:	f102 37ff 	add.w	r7, r2, #4294967295
   83d1e:	d202      	bcs.n	83d26 <__divdi3+0x13a>
   83d20:	4584      	cmp	ip, r0
   83d22:	f200 80ae 	bhi.w	83e82 <__divdi3+0x296>
   83d26:	463a      	mov	r2, r7
   83d28:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   83d2c:	e7b0      	b.n	83c90 <__divdi3+0xa4>
   83d2e:	43e4      	mvns	r4, r4
   83d30:	4252      	negs	r2, r2
   83d32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   83d36:	e762      	b.n	83bfe <__divdi3+0x12>
   83d38:	4240      	negs	r0, r0
   83d3a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   83d3e:	f04f 34ff 	mov.w	r4, #4294967295
   83d42:	e759      	b.n	83bf8 <__divdi3+0xc>
   83d44:	4095      	lsls	r5, r2
   83d46:	f1c2 0920 	rsb	r9, r2, #32
   83d4a:	fa27 f109 	lsr.w	r1, r7, r9
   83d4e:	fa26 f909 	lsr.w	r9, r6, r9
   83d52:	4097      	lsls	r7, r2
   83d54:	0c28      	lsrs	r0, r5, #16
   83d56:	fbb1 f8f0 	udiv	r8, r1, r0
   83d5a:	fb00 1118 	mls	r1, r0, r8, r1
   83d5e:	fa1f fc85 	uxth.w	ip, r5
   83d62:	fb0c f308 	mul.w	r3, ip, r8
   83d66:	ea49 0907 	orr.w	r9, r9, r7
   83d6a:	ea4f 4719 	mov.w	r7, r9, lsr #16
   83d6e:	ea47 4101 	orr.w	r1, r7, r1, lsl #16
   83d72:	428b      	cmp	r3, r1
   83d74:	fa06 f602 	lsl.w	r6, r6, r2
   83d78:	d908      	bls.n	83d8c <__divdi3+0x1a0>
   83d7a:	1949      	adds	r1, r1, r5
   83d7c:	f108 32ff 	add.w	r2, r8, #4294967295
   83d80:	d27a      	bcs.n	83e78 <__divdi3+0x28c>
   83d82:	428b      	cmp	r3, r1
   83d84:	d978      	bls.n	83e78 <__divdi3+0x28c>
   83d86:	f1a8 0802 	sub.w	r8, r8, #2
   83d8a:	4429      	add	r1, r5
   83d8c:	1ac9      	subs	r1, r1, r3
   83d8e:	fbb1 f3f0 	udiv	r3, r1, r0
   83d92:	fb00 1713 	mls	r7, r0, r3, r1
   83d96:	fb0c f203 	mul.w	r2, ip, r3
   83d9a:	fa1f f989 	uxth.w	r9, r9
   83d9e:	ea49 4707 	orr.w	r7, r9, r7, lsl #16
   83da2:	42ba      	cmp	r2, r7
   83da4:	d907      	bls.n	83db6 <__divdi3+0x1ca>
   83da6:	197f      	adds	r7, r7, r5
   83da8:	f103 31ff 	add.w	r1, r3, #4294967295
   83dac:	d260      	bcs.n	83e70 <__divdi3+0x284>
   83dae:	42ba      	cmp	r2, r7
   83db0:	d95e      	bls.n	83e70 <__divdi3+0x284>
   83db2:	3b02      	subs	r3, #2
   83db4:	442f      	add	r7, r5
   83db6:	1abf      	subs	r7, r7, r2
   83db8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   83dbc:	e78c      	b.n	83cd8 <__divdi3+0xec>
   83dbe:	f1c8 0220 	rsb	r2, r8, #32
   83dc2:	fa25 f102 	lsr.w	r1, r5, r2
   83dc6:	fa03 fc08 	lsl.w	ip, r3, r8
   83dca:	fa27 f302 	lsr.w	r3, r7, r2
   83dce:	fa20 f202 	lsr.w	r2, r0, r2
   83dd2:	fa07 f708 	lsl.w	r7, r7, r8
   83dd6:	ea41 0c0c 	orr.w	ip, r1, ip
   83dda:	ea4f 491c 	mov.w	r9, ip, lsr #16
   83dde:	fbb3 f1f9 	udiv	r1, r3, r9
   83de2:	fb09 3311 	mls	r3, r9, r1, r3
   83de6:	fa1f fa8c 	uxth.w	sl, ip
   83dea:	fb0a fb01 	mul.w	fp, sl, r1
   83dee:	4317      	orrs	r7, r2
   83df0:	0c3a      	lsrs	r2, r7, #16
   83df2:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   83df6:	459b      	cmp	fp, r3
   83df8:	fa05 f008 	lsl.w	r0, r5, r8
   83dfc:	d908      	bls.n	83e10 <__divdi3+0x224>
   83dfe:	eb13 030c 	adds.w	r3, r3, ip
   83e02:	f101 32ff 	add.w	r2, r1, #4294967295
   83e06:	d235      	bcs.n	83e74 <__divdi3+0x288>
   83e08:	459b      	cmp	fp, r3
   83e0a:	d933      	bls.n	83e74 <__divdi3+0x288>
   83e0c:	3902      	subs	r1, #2
   83e0e:	4463      	add	r3, ip
   83e10:	ebcb 0303 	rsb	r3, fp, r3
   83e14:	fbb3 f2f9 	udiv	r2, r3, r9
   83e18:	fb09 3312 	mls	r3, r9, r2, r3
   83e1c:	fb0a fa02 	mul.w	sl, sl, r2
   83e20:	b2bf      	uxth	r7, r7
   83e22:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
   83e26:	45ba      	cmp	sl, r7
   83e28:	d908      	bls.n	83e3c <__divdi3+0x250>
   83e2a:	eb17 070c 	adds.w	r7, r7, ip
   83e2e:	f102 33ff 	add.w	r3, r2, #4294967295
   83e32:	d21b      	bcs.n	83e6c <__divdi3+0x280>
   83e34:	45ba      	cmp	sl, r7
   83e36:	d919      	bls.n	83e6c <__divdi3+0x280>
   83e38:	3a02      	subs	r2, #2
   83e3a:	4467      	add	r7, ip
   83e3c:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
   83e40:	fba5 0100 	umull	r0, r1, r5, r0
   83e44:	ebca 0707 	rsb	r7, sl, r7
   83e48:	428f      	cmp	r7, r1
   83e4a:	f04f 0300 	mov.w	r3, #0
   83e4e:	d30a      	bcc.n	83e66 <__divdi3+0x27a>
   83e50:	d005      	beq.n	83e5e <__divdi3+0x272>
   83e52:	462a      	mov	r2, r5
   83e54:	e71c      	b.n	83c90 <__divdi3+0xa4>
   83e56:	4662      	mov	r2, ip
   83e58:	e6fd      	b.n	83c56 <__divdi3+0x6a>
   83e5a:	463b      	mov	r3, r7
   83e5c:	e710      	b.n	83c80 <__divdi3+0x94>
   83e5e:	fa06 f608 	lsl.w	r6, r6, r8
   83e62:	4286      	cmp	r6, r0
   83e64:	d2f5      	bcs.n	83e52 <__divdi3+0x266>
   83e66:	1e6a      	subs	r2, r5, #1
   83e68:	2300      	movs	r3, #0
   83e6a:	e711      	b.n	83c90 <__divdi3+0xa4>
   83e6c:	461a      	mov	r2, r3
   83e6e:	e7e5      	b.n	83e3c <__divdi3+0x250>
   83e70:	460b      	mov	r3, r1
   83e72:	e7a0      	b.n	83db6 <__divdi3+0x1ca>
   83e74:	4611      	mov	r1, r2
   83e76:	e7cb      	b.n	83e10 <__divdi3+0x224>
   83e78:	4690      	mov	r8, r2
   83e7a:	e787      	b.n	83d8c <__divdi3+0x1a0>
   83e7c:	4643      	mov	r3, r8
   83e7e:	4642      	mov	r2, r8
   83e80:	e706      	b.n	83c90 <__divdi3+0xa4>
   83e82:	3a02      	subs	r2, #2
   83e84:	e750      	b.n	83d28 <__divdi3+0x13c>
   83e86:	3902      	subs	r1, #2
   83e88:	442f      	add	r7, r5
   83e8a:	e739      	b.n	83d00 <__divdi3+0x114>

00083e8c <__udivdi3>:
   83e8c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83e90:	4614      	mov	r4, r2
   83e92:	4605      	mov	r5, r0
   83e94:	460e      	mov	r6, r1
   83e96:	2b00      	cmp	r3, #0
   83e98:	d143      	bne.n	83f22 <__udivdi3+0x96>
   83e9a:	428a      	cmp	r2, r1
   83e9c:	d953      	bls.n	83f46 <__udivdi3+0xba>
   83e9e:	fab2 f782 	clz	r7, r2
   83ea2:	b157      	cbz	r7, 83eba <__udivdi3+0x2e>
   83ea4:	f1c7 0620 	rsb	r6, r7, #32
   83ea8:	fa20 f606 	lsr.w	r6, r0, r6
   83eac:	fa01 f307 	lsl.w	r3, r1, r7
   83eb0:	fa02 f407 	lsl.w	r4, r2, r7
   83eb4:	fa00 f507 	lsl.w	r5, r0, r7
   83eb8:	431e      	orrs	r6, r3
   83eba:	0c21      	lsrs	r1, r4, #16
   83ebc:	fbb6 f2f1 	udiv	r2, r6, r1
   83ec0:	fb01 6612 	mls	r6, r1, r2, r6
   83ec4:	b2a0      	uxth	r0, r4
   83ec6:	fb00 f302 	mul.w	r3, r0, r2
   83eca:	0c2f      	lsrs	r7, r5, #16
   83ecc:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   83ed0:	42b3      	cmp	r3, r6
   83ed2:	d909      	bls.n	83ee8 <__udivdi3+0x5c>
   83ed4:	1936      	adds	r6, r6, r4
   83ed6:	f102 37ff 	add.w	r7, r2, #4294967295
   83eda:	f080 80fd 	bcs.w	840d8 <__udivdi3+0x24c>
   83ede:	42b3      	cmp	r3, r6
   83ee0:	f240 80fa 	bls.w	840d8 <__udivdi3+0x24c>
   83ee4:	3a02      	subs	r2, #2
   83ee6:	4426      	add	r6, r4
   83ee8:	1af6      	subs	r6, r6, r3
   83eea:	fbb6 f3f1 	udiv	r3, r6, r1
   83eee:	fb01 6113 	mls	r1, r1, r3, r6
   83ef2:	fb00 f003 	mul.w	r0, r0, r3
   83ef6:	b2ad      	uxth	r5, r5
   83ef8:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
   83efc:	4288      	cmp	r0, r1
   83efe:	d908      	bls.n	83f12 <__udivdi3+0x86>
   83f00:	1909      	adds	r1, r1, r4
   83f02:	f103 36ff 	add.w	r6, r3, #4294967295
   83f06:	f080 80e9 	bcs.w	840dc <__udivdi3+0x250>
   83f0a:	4288      	cmp	r0, r1
   83f0c:	f240 80e6 	bls.w	840dc <__udivdi3+0x250>
   83f10:	3b02      	subs	r3, #2
   83f12:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   83f16:	2300      	movs	r3, #0
   83f18:	4610      	mov	r0, r2
   83f1a:	4619      	mov	r1, r3
   83f1c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83f20:	4770      	bx	lr
   83f22:	428b      	cmp	r3, r1
   83f24:	d84c      	bhi.n	83fc0 <__udivdi3+0x134>
   83f26:	fab3 f683 	clz	r6, r3
   83f2a:	2e00      	cmp	r6, #0
   83f2c:	d14f      	bne.n	83fce <__udivdi3+0x142>
   83f2e:	428b      	cmp	r3, r1
   83f30:	d302      	bcc.n	83f38 <__udivdi3+0xac>
   83f32:	4282      	cmp	r2, r0
   83f34:	f200 80dd 	bhi.w	840f2 <__udivdi3+0x266>
   83f38:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83f3c:	2300      	movs	r3, #0
   83f3e:	2201      	movs	r2, #1
   83f40:	4610      	mov	r0, r2
   83f42:	4619      	mov	r1, r3
   83f44:	4770      	bx	lr
   83f46:	b912      	cbnz	r2, 83f4e <__udivdi3+0xc2>
   83f48:	2401      	movs	r4, #1
   83f4a:	fbb4 f4f2 	udiv	r4, r4, r2
   83f4e:	fab4 f284 	clz	r2, r4
   83f52:	2a00      	cmp	r2, #0
   83f54:	f040 8082 	bne.w	8405c <__udivdi3+0x1d0>
   83f58:	1b09      	subs	r1, r1, r4
   83f5a:	0c26      	lsrs	r6, r4, #16
   83f5c:	b2a7      	uxth	r7, r4
   83f5e:	2301      	movs	r3, #1
   83f60:	fbb1 f0f6 	udiv	r0, r1, r6
   83f64:	fb06 1110 	mls	r1, r6, r0, r1
   83f68:	fb07 f200 	mul.w	r2, r7, r0
   83f6c:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   83f70:	ea4c 4101 	orr.w	r1, ip, r1, lsl #16
   83f74:	428a      	cmp	r2, r1
   83f76:	d907      	bls.n	83f88 <__udivdi3+0xfc>
   83f78:	1909      	adds	r1, r1, r4
   83f7a:	f100 3cff 	add.w	ip, r0, #4294967295
   83f7e:	d202      	bcs.n	83f86 <__udivdi3+0xfa>
   83f80:	428a      	cmp	r2, r1
   83f82:	f200 80c8 	bhi.w	84116 <__udivdi3+0x28a>
   83f86:	4660      	mov	r0, ip
   83f88:	1a89      	subs	r1, r1, r2
   83f8a:	fbb1 f2f6 	udiv	r2, r1, r6
   83f8e:	fb06 1112 	mls	r1, r6, r2, r1
   83f92:	fb07 f702 	mul.w	r7, r7, r2
   83f96:	b2ad      	uxth	r5, r5
   83f98:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
   83f9c:	42af      	cmp	r7, r5
   83f9e:	d908      	bls.n	83fb2 <__udivdi3+0x126>
   83fa0:	192c      	adds	r4, r5, r4
   83fa2:	f102 31ff 	add.w	r1, r2, #4294967295
   83fa6:	f080 809b 	bcs.w	840e0 <__udivdi3+0x254>
   83faa:	42a7      	cmp	r7, r4
   83fac:	f240 8098 	bls.w	840e0 <__udivdi3+0x254>
   83fb0:	3a02      	subs	r2, #2
   83fb2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
   83fb6:	4610      	mov	r0, r2
   83fb8:	4619      	mov	r1, r3
   83fba:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83fbe:	4770      	bx	lr
   83fc0:	2300      	movs	r3, #0
   83fc2:	461a      	mov	r2, r3
   83fc4:	4610      	mov	r0, r2
   83fc6:	4619      	mov	r1, r3
   83fc8:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83fcc:	4770      	bx	lr
   83fce:	f1c6 0520 	rsb	r5, r6, #32
   83fd2:	fa22 f705 	lsr.w	r7, r2, r5
   83fd6:	fa03 f406 	lsl.w	r4, r3, r6
   83fda:	fa21 f305 	lsr.w	r3, r1, r5
   83fde:	fa01 fb06 	lsl.w	fp, r1, r6
   83fe2:	fa20 f505 	lsr.w	r5, r0, r5
   83fe6:	433c      	orrs	r4, r7
   83fe8:	ea4f 4814 	mov.w	r8, r4, lsr #16
   83fec:	fbb3 fcf8 	udiv	ip, r3, r8
   83ff0:	fb08 331c 	mls	r3, r8, ip, r3
   83ff4:	fa1f f984 	uxth.w	r9, r4
   83ff8:	fb09 fa0c 	mul.w	sl, r9, ip
   83ffc:	ea45 0b0b 	orr.w	fp, r5, fp
   84000:	ea4f 451b 	mov.w	r5, fp, lsr #16
   84004:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
   84008:	459a      	cmp	sl, r3
   8400a:	fa02 f206 	lsl.w	r2, r2, r6
   8400e:	d904      	bls.n	8401a <__udivdi3+0x18e>
   84010:	191b      	adds	r3, r3, r4
   84012:	f10c 35ff 	add.w	r5, ip, #4294967295
   84016:	d36f      	bcc.n	840f8 <__udivdi3+0x26c>
   84018:	46ac      	mov	ip, r5
   8401a:	ebca 0303 	rsb	r3, sl, r3
   8401e:	fbb3 f5f8 	udiv	r5, r3, r8
   84022:	fb08 3315 	mls	r3, r8, r5, r3
   84026:	fb09 f905 	mul.w	r9, r9, r5
   8402a:	fa1f fb8b 	uxth.w	fp, fp
   8402e:	ea4b 4703 	orr.w	r7, fp, r3, lsl #16
   84032:	45b9      	cmp	r9, r7
   84034:	d904      	bls.n	84040 <__udivdi3+0x1b4>
   84036:	193f      	adds	r7, r7, r4
   84038:	f105 33ff 	add.w	r3, r5, #4294967295
   8403c:	d362      	bcc.n	84104 <__udivdi3+0x278>
   8403e:	461d      	mov	r5, r3
   84040:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
   84044:	fbac 2302 	umull	r2, r3, ip, r2
   84048:	ebc9 0707 	rsb	r7, r9, r7
   8404c:	429f      	cmp	r7, r3
   8404e:	f04f 0500 	mov.w	r5, #0
   84052:	d34a      	bcc.n	840ea <__udivdi3+0x25e>
   84054:	d046      	beq.n	840e4 <__udivdi3+0x258>
   84056:	4662      	mov	r2, ip
   84058:	462b      	mov	r3, r5
   8405a:	e75d      	b.n	83f18 <__udivdi3+0x8c>
   8405c:	4094      	lsls	r4, r2
   8405e:	f1c2 0920 	rsb	r9, r2, #32
   84062:	fa21 fc09 	lsr.w	ip, r1, r9
   84066:	4091      	lsls	r1, r2
   84068:	fa20 f909 	lsr.w	r9, r0, r9
   8406c:	0c26      	lsrs	r6, r4, #16
   8406e:	fbbc f8f6 	udiv	r8, ip, r6
   84072:	fb06 cc18 	mls	ip, r6, r8, ip
   84076:	b2a7      	uxth	r7, r4
   84078:	fb07 f308 	mul.w	r3, r7, r8
   8407c:	ea49 0901 	orr.w	r9, r9, r1
   84080:	ea4f 4119 	mov.w	r1, r9, lsr #16
   84084:	ea41 4c0c 	orr.w	ip, r1, ip, lsl #16
   84088:	4563      	cmp	r3, ip
   8408a:	fa00 f502 	lsl.w	r5, r0, r2
   8408e:	d909      	bls.n	840a4 <__udivdi3+0x218>
   84090:	eb1c 0c04 	adds.w	ip, ip, r4
   84094:	f108 32ff 	add.w	r2, r8, #4294967295
   84098:	d23b      	bcs.n	84112 <__udivdi3+0x286>
   8409a:	4563      	cmp	r3, ip
   8409c:	d939      	bls.n	84112 <__udivdi3+0x286>
   8409e:	f1a8 0802 	sub.w	r8, r8, #2
   840a2:	44a4      	add	ip, r4
   840a4:	ebc3 0c0c 	rsb	ip, r3, ip
   840a8:	fbbc f3f6 	udiv	r3, ip, r6
   840ac:	fb06 c113 	mls	r1, r6, r3, ip
   840b0:	fb07 f203 	mul.w	r2, r7, r3
   840b4:	fa1f f989 	uxth.w	r9, r9
   840b8:	ea49 4101 	orr.w	r1, r9, r1, lsl #16
   840bc:	428a      	cmp	r2, r1
   840be:	d907      	bls.n	840d0 <__udivdi3+0x244>
   840c0:	1909      	adds	r1, r1, r4
   840c2:	f103 30ff 	add.w	r0, r3, #4294967295
   840c6:	d222      	bcs.n	8410e <__udivdi3+0x282>
   840c8:	428a      	cmp	r2, r1
   840ca:	d920      	bls.n	8410e <__udivdi3+0x282>
   840cc:	3b02      	subs	r3, #2
   840ce:	4421      	add	r1, r4
   840d0:	1a89      	subs	r1, r1, r2
   840d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   840d6:	e743      	b.n	83f60 <__udivdi3+0xd4>
   840d8:	463a      	mov	r2, r7
   840da:	e705      	b.n	83ee8 <__udivdi3+0x5c>
   840dc:	4633      	mov	r3, r6
   840de:	e718      	b.n	83f12 <__udivdi3+0x86>
   840e0:	460a      	mov	r2, r1
   840e2:	e766      	b.n	83fb2 <__udivdi3+0x126>
   840e4:	40b0      	lsls	r0, r6
   840e6:	4290      	cmp	r0, r2
   840e8:	d2b5      	bcs.n	84056 <__udivdi3+0x1ca>
   840ea:	f10c 32ff 	add.w	r2, ip, #4294967295
   840ee:	2300      	movs	r3, #0
   840f0:	e712      	b.n	83f18 <__udivdi3+0x8c>
   840f2:	4633      	mov	r3, r6
   840f4:	4632      	mov	r2, r6
   840f6:	e70f      	b.n	83f18 <__udivdi3+0x8c>
   840f8:	459a      	cmp	sl, r3
   840fa:	d98d      	bls.n	84018 <__udivdi3+0x18c>
   840fc:	f1ac 0c02 	sub.w	ip, ip, #2
   84100:	4423      	add	r3, r4
   84102:	e78a      	b.n	8401a <__udivdi3+0x18e>
   84104:	45b9      	cmp	r9, r7
   84106:	d99a      	bls.n	8403e <__udivdi3+0x1b2>
   84108:	3d02      	subs	r5, #2
   8410a:	4427      	add	r7, r4
   8410c:	e798      	b.n	84040 <__udivdi3+0x1b4>
   8410e:	4603      	mov	r3, r0
   84110:	e7de      	b.n	840d0 <__udivdi3+0x244>
   84112:	4690      	mov	r8, r2
   84114:	e7c6      	b.n	840a4 <__udivdi3+0x218>
   84116:	3802      	subs	r0, #2
   84118:	4421      	add	r1, r4
   8411a:	e735      	b.n	83f88 <__udivdi3+0xfc>
   8411c:	00000001 	.word	0x00000001
   84120:	00000002 	.word	0x00000002
   84124:	00000004 	.word	0x00000004
   84128:	00000008 	.word	0x00000008
   8412c:	00000010 	.word	0x00000010
   84130:	00000020 	.word	0x00000020
   84134:	00000040 	.word	0x00000040
   84138:	00000080 	.word	0x00000080
   8413c:	00000100 	.word	0x00000100
   84140:	00000200 	.word	0x00000200
   84144:	00000400 	.word	0x00000400
   84148:	6c65480a 	.word	0x6c65480a
   8414c:	202c6f6c 	.word	0x202c6f6c
   84150:	6c726f57 	.word	0x6c726f57
   84154:	00002164 	.word	0x00002164
   84158:	75500d0a 	.word	0x75500d0a
   8415c:	2065736c 	.word	0x2065736c
   84160:	656c2068 	.word	0x656c2068
   84164:	6874676e 	.word	0x6874676e
   84168:	6c25203a 	.word	0x6c25203a
   8416c:	00000075 	.word	0x00000075
   84170:	75500d0a 	.word	0x75500d0a
   84174:	2065736c 	.word	0x2065736c
   84178:	656c2076 	.word	0x656c2076
   8417c:	6874676e 	.word	0x6874676e
   84180:	6c25203a 	.word	0x6c25203a
   84184:	00000075 	.word	0x00000075
   84188:	00000043 	.word	0x00000043

0008418c <_global_impure_ptr>:
   8418c:	20070208 33323130 37363534 42413938     ... 0123456789AB
   8419c:	46454443 00000000 33323130 37363534     CDEF....01234567
   841ac:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   841bc:	0000296c                                l)..

000841c0 <zeroes.6721>:
   841c0:	30303030 30303030 30303030 30303030     0000000000000000

000841d0 <blanks.6720>:
   841d0:	20202020 20202020 20202020 20202020                     

000841e0 <_init>:
   841e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   841e2:	bf00      	nop
   841e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   841e6:	bc08      	pop	{r3}
   841e8:	469e      	mov	lr, r3
   841ea:	4770      	bx	lr

000841ec <__init_array_start>:
   841ec:	000821b1 	.word	0x000821b1

000841f0 <__frame_dummy_init_array_entry>:
   841f0:	00080119                                ....

000841f4 <_fini>:
   841f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   841f6:	bf00      	nop
   841f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   841fa:	bc08      	pop	{r3}
   841fc:	469e      	mov	lr, r3
   841fe:	4770      	bx	lr

00084200 <__fini_array_start>:
   84200:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20070000:	f3bf 8f5f 	dmb	sy
20070004:	3801      	subs	r0, #1
20070006:	d1fb      	bne.n	20070000 <portable_delay_cycles>
20070008:	4770      	bx	lr
2007000a:	bf00      	nop

2007000c <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007000c:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070010:	4a20      	ldr	r2, [pc, #128]	; (20070094 <SystemInit+0x88>)
20070012:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070014:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070018:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007001a:	4b1f      	ldr	r3, [pc, #124]	; (20070098 <SystemInit+0x8c>)
2007001c:	6a1b      	ldr	r3, [r3, #32]
2007001e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070022:	d107      	bne.n	20070034 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070024:	4a1d      	ldr	r2, [pc, #116]	; (2007009c <SystemInit+0x90>)
20070026:	4b1c      	ldr	r3, [pc, #112]	; (20070098 <SystemInit+0x8c>)
20070028:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007002a:	461a      	mov	r2, r3
2007002c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007002e:	f013 0f01 	tst.w	r3, #1
20070032:	d0fb      	beq.n	2007002c <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070034:	4a1a      	ldr	r2, [pc, #104]	; (200700a0 <SystemInit+0x94>)
20070036:	4b18      	ldr	r3, [pc, #96]	; (20070098 <SystemInit+0x8c>)
20070038:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007003a:	461a      	mov	r2, r3
2007003c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007003e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070042:	d0fb      	beq.n	2007003c <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070044:	4b14      	ldr	r3, [pc, #80]	; (20070098 <SystemInit+0x8c>)
20070046:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20070048:	f022 0203 	bic.w	r2, r2, #3
2007004c:	f042 0201 	orr.w	r2, r2, #1
20070050:	631a      	str	r2, [r3, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070052:	461a      	mov	r2, r3
20070054:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070056:	f013 0f08 	tst.w	r3, #8
2007005a:	d0fb      	beq.n	20070054 <SystemInit+0x48>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007005c:	4a11      	ldr	r2, [pc, #68]	; (200700a4 <SystemInit+0x98>)
2007005e:	4b0e      	ldr	r3, [pc, #56]	; (20070098 <SystemInit+0x8c>)
20070060:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070062:	461a      	mov	r2, r3
20070064:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070066:	f013 0f02 	tst.w	r3, #2
2007006a:	d0fb      	beq.n	20070064 <SystemInit+0x58>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007006c:	2211      	movs	r2, #17
2007006e:	4b0a      	ldr	r3, [pc, #40]	; (20070098 <SystemInit+0x8c>)
20070070:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070072:	461a      	mov	r2, r3
20070074:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070076:	f013 0f08 	tst.w	r3, #8
2007007a:	d0fb      	beq.n	20070074 <SystemInit+0x68>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007007c:	2212      	movs	r2, #18
2007007e:	4b06      	ldr	r3, [pc, #24]	; (20070098 <SystemInit+0x8c>)
20070080:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070082:	461a      	mov	r2, r3
20070084:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070086:	f013 0f08 	tst.w	r3, #8
2007008a:	d0fb      	beq.n	20070084 <SystemInit+0x78>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007008c:	4a06      	ldr	r2, [pc, #24]	; (200700a8 <SystemInit+0x9c>)
2007008e:	4b07      	ldr	r3, [pc, #28]	; (200700ac <SystemInit+0xa0>)
20070090:	601a      	str	r2, [r3, #0]
20070092:	4770      	bx	lr
20070094:	400e0a00 	.word	0x400e0a00
20070098:	400e0600 	.word	0x400e0600
2007009c:	00370809 	.word	0x00370809
200700a0:	01370809 	.word	0x01370809
200700a4:	200d3f01 	.word	0x200d3f01
200700a8:	0501bd00 	.word	0x0501bd00
200700ac:	20070204 	.word	0x20070204

200700b0 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700b0:	4b1b      	ldr	r3, [pc, #108]	; (20070120 <system_init_flash+0x70>)
200700b2:	4298      	cmp	r0, r3
200700b4:	d806      	bhi.n	200700c4 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700b6:	2300      	movs	r3, #0
200700b8:	4a1a      	ldr	r2, [pc, #104]	; (20070124 <system_init_flash+0x74>)
200700ba:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700bc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700c0:	6013      	str	r3, [r2, #0]
200700c2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700c4:	4b18      	ldr	r3, [pc, #96]	; (20070128 <system_init_flash+0x78>)
200700c6:	4298      	cmp	r0, r3
200700c8:	d807      	bhi.n	200700da <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700ca:	f44f 7380 	mov.w	r3, #256	; 0x100
200700ce:	4a15      	ldr	r2, [pc, #84]	; (20070124 <system_init_flash+0x74>)
200700d0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700d2:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700d6:	6013      	str	r3, [r2, #0]
200700d8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700da:	4b14      	ldr	r3, [pc, #80]	; (2007012c <system_init_flash+0x7c>)
200700dc:	4298      	cmp	r0, r3
200700de:	d807      	bhi.n	200700f0 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700e0:	f44f 7300 	mov.w	r3, #512	; 0x200
200700e4:	4a0f      	ldr	r2, [pc, #60]	; (20070124 <system_init_flash+0x74>)
200700e6:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700e8:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ec:	6013      	str	r3, [r2, #0]
200700ee:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700f0:	4b0f      	ldr	r3, [pc, #60]	; (20070130 <system_init_flash+0x80>)
200700f2:	4298      	cmp	r0, r3
200700f4:	d807      	bhi.n	20070106 <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700f6:	f44f 7340 	mov.w	r3, #768	; 0x300
200700fa:	4a0a      	ldr	r2, [pc, #40]	; (20070124 <system_init_flash+0x74>)
200700fc:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700fe:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070102:	6013      	str	r3, [r2, #0]
20070104:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
20070106:	4b0b      	ldr	r3, [pc, #44]	; (20070134 <system_init_flash+0x84>)
20070108:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007010a:	bf94      	ite	ls
2007010c:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070110:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070114:	4a03      	ldr	r2, [pc, #12]	; (20070124 <system_init_flash+0x74>)
20070116:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
20070118:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007011c:	6013      	str	r3, [r2, #0]
2007011e:	4770      	bx	lr
20070120:	0121eabf 	.word	0x0121eabf
20070124:	400e0a00 	.word	0x400e0a00
20070128:	02faf07f 	.word	0x02faf07f
2007012c:	03d08fff 	.word	0x03d08fff
20070130:	04c4b3ff 	.word	0x04c4b3ff
20070134:	055d4a7f 	.word	0x055d4a7f

20070138 <pulse_channels>:
20070138:	40094000 00000000 0000000b 00010000     .@.@............
20070148:	00000000 0000c350 00000000 00000000     ....P...........
	...
20070164:	00000024 00000043 00000001 000007d0     $...C...........
20070174:	40094000 00000001 0000000b 00010000     .@.@............
20070184:	00000000 0000c350 00000000 00000000     ....P...........
	...
200701a0:	00000024 00000045 00000001 000007d0     $...E...........

200701b0 <pulse_timers>:
200701b0:	40080000 00000001 0000001c 0000001c     ...@............
200701c0:	00090600 00000002 00000000 00000008     ................
200701d0:	00000002 40080000 00000000 0000001b     .......@........
200701e0:	0000001b 00090600 00000039 00000001     ........9.......
200701f0:	00000008 00000002                       ........

200701f8 <pulse_clock_setting>:
200701f8:	000f4240 00000000 0501bd00              @B..........

20070204 <SystemCoreClock>:
20070204:	003d0900                                ..=.

20070208 <impure_data>:
20070208:	00000000 200704f4 2007055c 200705c4     ....... \.. ... 
	...
2007023c:	00084188 00000000 00000000 00000000     .A..............
	...
200702b0:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200702c0:	0005deec 0000000b 00000000 00000000     ................
	...

20070630 <_impure_ptr>:
20070630:	20070208                                ... 

20070634 <lc_ctype_charset>:
20070634:	49435341 00000049 00000000 00000000     ASCII...........
	...

20070654 <__mb_cur_max>:
20070654:	00000001                                ....

20070658 <__malloc_av_>:
	...
20070660:	20070658 20070658 20070660 20070660     X.. X.. `.. `.. 
20070670:	20070668 20070668 20070670 20070670     h.. h.. p.. p.. 
20070680:	20070678 20070678 20070680 20070680     x.. x.. ... ... 
20070690:	20070688 20070688 20070690 20070690     ... ... ... ... 
200706a0:	20070698 20070698 200706a0 200706a0     ... ... ... ... 
200706b0:	200706a8 200706a8 200706b0 200706b0     ... ... ... ... 
200706c0:	200706b8 200706b8 200706c0 200706c0     ... ... ... ... 
200706d0:	200706c8 200706c8 200706d0 200706d0     ... ... ... ... 
200706e0:	200706d8 200706d8 200706e0 200706e0     ... ... ... ... 
200706f0:	200706e8 200706e8 200706f0 200706f0     ... ... ... ... 
20070700:	200706f8 200706f8 20070700 20070700     ... ... ... ... 
20070710:	20070708 20070708 20070710 20070710     ... ... ... ... 
20070720:	20070718 20070718 20070720 20070720     ... ...  ..  .. 
20070730:	20070728 20070728 20070730 20070730     (.. (.. 0.. 0.. 
20070740:	20070738 20070738 20070740 20070740     8.. 8.. @.. @.. 
20070750:	20070748 20070748 20070750 20070750     H.. H.. P.. P.. 
20070760:	20070758 20070758 20070760 20070760     X.. X.. `.. `.. 
20070770:	20070768 20070768 20070770 20070770     h.. h.. p.. p.. 
20070780:	20070778 20070778 20070780 20070780     x.. x.. ... ... 
20070790:	20070788 20070788 20070790 20070790     ... ... ... ... 
200707a0:	20070798 20070798 200707a0 200707a0     ... ... ... ... 
200707b0:	200707a8 200707a8 200707b0 200707b0     ... ... ... ... 
200707c0:	200707b8 200707b8 200707c0 200707c0     ... ... ... ... 
200707d0:	200707c8 200707c8 200707d0 200707d0     ... ... ... ... 
200707e0:	200707d8 200707d8 200707e0 200707e0     ... ... ... ... 
200707f0:	200707e8 200707e8 200707f0 200707f0     ... ... ... ... 
20070800:	200707f8 200707f8 20070800 20070800     ... ... ... ... 
20070810:	20070808 20070808 20070810 20070810     ... ... ... ... 
20070820:	20070818 20070818 20070820 20070820     ... ...  ..  .. 
20070830:	20070828 20070828 20070830 20070830     (.. (.. 0.. 0.. 
20070840:	20070838 20070838 20070840 20070840     8.. 8.. @.. @.. 
20070850:	20070848 20070848 20070850 20070850     H.. H.. P.. P.. 
20070860:	20070858 20070858 20070860 20070860     X.. X.. `.. `.. 
20070870:	20070868 20070868 20070870 20070870     h.. h.. p.. p.. 
20070880:	20070878 20070878 20070880 20070880     x.. x.. ... ... 
20070890:	20070888 20070888 20070890 20070890     ... ... ... ... 
200708a0:	20070898 20070898 200708a0 200708a0     ... ... ... ... 
200708b0:	200708a8 200708a8 200708b0 200708b0     ... ... ... ... 
200708c0:	200708b8 200708b8 200708c0 200708c0     ... ... ... ... 
200708d0:	200708c8 200708c8 200708d0 200708d0     ... ... ... ... 
200708e0:	200708d8 200708d8 200708e0 200708e0     ... ... ... ... 
200708f0:	200708e8 200708e8 200708f0 200708f0     ... ... ... ... 
20070900:	200708f8 200708f8 20070900 20070900     ... ... ... ... 
20070910:	20070908 20070908 20070910 20070910     ... ... ... ... 
20070920:	20070918 20070918 20070920 20070920     ... ...  ..  .. 
20070930:	20070928 20070928 20070930 20070930     (.. (.. 0.. 0.. 
20070940:	20070938 20070938 20070940 20070940     8.. 8.. @.. @.. 
20070950:	20070948 20070948 20070950 20070950     H.. H.. P.. P.. 
20070960:	20070958 20070958 20070960 20070960     X.. X.. `.. `.. 
20070970:	20070968 20070968 20070970 20070970     h.. h.. p.. p.. 
20070980:	20070978 20070978 20070980 20070980     x.. x.. ... ... 
20070990:	20070988 20070988 20070990 20070990     ... ... ... ... 
200709a0:	20070998 20070998 200709a0 200709a0     ... ... ... ... 
200709b0:	200709a8 200709a8 200709b0 200709b0     ... ... ... ... 
200709c0:	200709b8 200709b8 200709c0 200709c0     ... ... ... ... 
200709d0:	200709c8 200709c8 200709d0 200709d0     ... ... ... ... 
200709e0:	200709d8 200709d8 200709e0 200709e0     ... ... ... ... 
200709f0:	200709e8 200709e8 200709f0 200709f0     ... ... ... ... 
20070a00:	200709f8 200709f8 20070a00 20070a00     ... ... ... ... 
20070a10:	20070a08 20070a08 20070a10 20070a10     ... ... ... ... 
20070a20:	20070a18 20070a18 20070a20 20070a20     ... ...  ..  .. 
20070a30:	20070a28 20070a28 20070a30 20070a30     (.. (.. 0.. 0.. 
20070a40:	20070a38 20070a38 20070a40 20070a40     8.. 8.. @.. @.. 
20070a50:	20070a48 20070a48 20070a50 20070a50     H.. H.. P.. P.. 

20070a60 <__malloc_trim_threshold>:
20070a60:	00020000                                ....

20070a64 <__malloc_sbrk_base>:
20070a64:	ffffffff                                ....

20070a68 <__wctomb>:
20070a68:	00083921                                !9..
