
GccBoardProject1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000019e4  00080000  00080000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  000819e4  000819e4  000099e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000570  20070000  000819ec  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000000a8  20070570  00081f5c  00010570  2**2
                  ALLOC
  4 .stack        00002000  20070618  00082004  00010570  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00010570  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  00010599  2**0
                  CONTENTS, READONLY
  7 .debug_info   00006a3a  00000000  00000000  000105f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000165d  00000000  00000000  0001702e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00002185  00000000  00000000  0001868b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000558  00000000  00000000  0001a810  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000004d8  00000000  00000000  0001ad68  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001682a  00000000  00000000  0001b240  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000a72f  00000000  00000000  00031a6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0005f82d  00000000  00000000  0003c199  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00000c54  00000000  00000000  0009b9c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20072618 	.word	0x20072618
   80004:	0008081d 	.word	0x0008081d
   80008:	00080819 	.word	0x00080819
   8000c:	00080819 	.word	0x00080819
   80010:	00080819 	.word	0x00080819
   80014:	00080819 	.word	0x00080819
   80018:	00080819 	.word	0x00080819
	...
   8002c:	00080819 	.word	0x00080819
   80030:	00080819 	.word	0x00080819
   80034:	00000000 	.word	0x00000000
   80038:	00080819 	.word	0x00080819
   8003c:	00080819 	.word	0x00080819
   80040:	00080819 	.word	0x00080819
   80044:	00080819 	.word	0x00080819
   80048:	00080819 	.word	0x00080819
   8004c:	00080819 	.word	0x00080819
   80050:	00080819 	.word	0x00080819
   80054:	00080819 	.word	0x00080819
   80058:	00080819 	.word	0x00080819
   8005c:	00080819 	.word	0x00080819
   80060:	00080819 	.word	0x00080819
   80064:	00080819 	.word	0x00080819
   80068:	00000000 	.word	0x00000000
   8006c:	00080689 	.word	0x00080689
   80070:	0008069d 	.word	0x0008069d
   80074:	000806b1 	.word	0x000806b1
   80078:	000806c5 	.word	0x000806c5
	...
   80084:	00080819 	.word	0x00080819
   80088:	00080819 	.word	0x00080819
   8008c:	00080819 	.word	0x00080819
   80090:	00080819 	.word	0x00080819
   80094:	00080819 	.word	0x00080819
   80098:	00080819 	.word	0x00080819
   8009c:	00080819 	.word	0x00080819
   800a0:	00080819 	.word	0x00080819
   800a4:	00000000 	.word	0x00000000
   800a8:	00080819 	.word	0x00080819
   800ac:	00080819 	.word	0x00080819
   800b0:	00080819 	.word	0x00080819
   800b4:	00080819 	.word	0x00080819
   800b8:	00080819 	.word	0x00080819
   800bc:	00080819 	.word	0x00080819
   800c0:	00080819 	.word	0x00080819
   800c4:	00080819 	.word	0x00080819
   800c8:	00080819 	.word	0x00080819
   800cc:	00080819 	.word	0x00080819
   800d0:	00080819 	.word	0x00080819
   800d4:	00080819 	.word	0x00080819
   800d8:	00080819 	.word	0x00080819
   800dc:	00080819 	.word	0x00080819
   800e0:	00080819 	.word	0x00080819
   800e4:	00080819 	.word	0x00080819
   800e8:	00080819 	.word	0x00080819
   800ec:	00080819 	.word	0x00080819
   800f0:	00080819 	.word	0x00080819

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070570 	.word	0x20070570
   80110:	00000000 	.word	0x00000000
   80114:	000819ec 	.word	0x000819ec

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b06      	ldr	r3, [pc, #24]	; (80134 <frame_dummy+0x1c>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4806      	ldr	r0, [pc, #24]	; (80138 <frame_dummy+0x20>)
   80120:	4906      	ldr	r1, [pc, #24]	; (8013c <frame_dummy+0x24>)
   80122:	f3af 8000 	nop.w
   80126:	4806      	ldr	r0, [pc, #24]	; (80140 <frame_dummy+0x28>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b113      	cbz	r3, 80132 <frame_dummy+0x1a>
   8012c:	4b05      	ldr	r3, [pc, #20]	; (80144 <frame_dummy+0x2c>)
   8012e:	b103      	cbz	r3, 80132 <frame_dummy+0x1a>
   80130:	4798      	blx	r3
   80132:	bd08      	pop	{r3, pc}
   80134:	00000000 	.word	0x00000000
   80138:	000819ec 	.word	0x000819ec
   8013c:	20070574 	.word	0x20070574
   80140:	000819ec 	.word	0x000819ec
   80144:	00000000 	.word	0x00000000

00080148 <pulseIn>:
unsigned long duration, distance;
//unsigned double kValue = 500.0/270.0;


long pulseIn()
{
   80148:	b510      	push	{r4, lr}
	//printf("pulseread");
	//timeout zone
	unsigned long numloops = 0;
   8014a:	2300      	movs	r3, #0
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   8014c:	491e      	ldr	r1, [pc, #120]	; (801c8 <pulseIn+0x80>)
	unsigned long maxloops = 5000000;
	unsigned long width = 0;
	// wait for any previous pulse to end
	while ( ioport_get_pin_level(echo) == HIGH)
	{
		if (numloops++ == maxloops) break;
   8014e:	481f      	ldr	r0, [pc, #124]	; (801cc <pulseIn+0x84>)
	//timeout zone
	unsigned long numloops = 0;
	unsigned long maxloops = 5000000;
	unsigned long width = 0;
	// wait for any previous pulse to end
	while ( ioport_get_pin_level(echo) == HIGH)
   80150:	e002      	b.n	80158 <pulseIn+0x10>
	{
		if (numloops++ == maxloops) break;
   80152:	3301      	adds	r3, #1
   80154:	4283      	cmp	r3, r0
   80156:	d016      	beq.n	80186 <pulseIn+0x3e>
   80158:	6bca      	ldr	r2, [r1, #60]	; 0x3c
	//timeout zone
	unsigned long numloops = 0;
	unsigned long maxloops = 5000000;
	unsigned long width = 0;
	// wait for any previous pulse to end
	while ( ioport_get_pin_level(echo) == HIGH)
   8015a:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
   8015e:	d1f8      	bne.n	80152 <pulseIn+0xa>
   80160:	e011      	b.n	80186 <pulseIn+0x3e>
		if (numloops++ == maxloops) break;
	}
	// wait for the pulse to start
	while (ioport_get_pin_level(echo)== LOW)
	{
		if (numloops++ == maxloops) break;
   80162:	1c5a      	adds	r2, r3, #1
   80164:	4283      	cmp	r3, r0
   80166:	d001      	beq.n	8016c <pulseIn+0x24>
   80168:	4613      	mov	r3, r2
   8016a:	e00e      	b.n	8018a <pulseIn+0x42>
   8016c:	4613      	mov	r3, r2
   8016e:	4a16      	ldr	r2, [pc, #88]	; (801c8 <pulseIn+0x80>)
   80170:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
	}
	
	// wait for the pulse to stop @ here we are measuring the pulse width = incrementing the WIDTH value by one each cycle. atmega328 1 micro second is equal to 16 cycles.
	while (ioport_get_pin_level(echo)==HIGH)
   80172:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
   80176:	d016      	beq.n	801a6 <pulseIn+0x5e>
	{
		if (numloops++ == maxloops) break;
   80178:	4a15      	ldr	r2, [pc, #84]	; (801d0 <pulseIn+0x88>)
   8017a:	4293      	cmp	r3, r2
   8017c:	d015      	beq.n	801aa <pulseIn+0x62>
   8017e:	2000      	movs	r0, #0
   80180:	4911      	ldr	r1, [pc, #68]	; (801c8 <pulseIn+0x80>)
   80182:	4614      	mov	r4, r2
   80184:	e009      	b.n	8019a <pulseIn+0x52>
   80186:	4910      	ldr	r1, [pc, #64]	; (801c8 <pulseIn+0x80>)
		if (numloops++ == maxloops) break;
	}
	// wait for the pulse to start
	while (ioport_get_pin_level(echo)== LOW)
	{
		if (numloops++ == maxloops) break;
   80188:	4811      	ldr	r0, [pc, #68]	; (801d0 <pulseIn+0x88>)
   8018a:	6bca      	ldr	r2, [r1, #60]	; 0x3c
	while ( ioport_get_pin_level(echo) == HIGH)
	{
		if (numloops++ == maxloops) break;
	}
	// wait for the pulse to start
	while (ioport_get_pin_level(echo)== LOW)
   8018c:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
   80190:	d0e7      	beq.n	80162 <pulseIn+0x1a>
   80192:	e7ec      	b.n	8016e <pulseIn+0x26>
   80194:	181a      	adds	r2, r3, r0
	}
	
	// wait for the pulse to stop @ here we are measuring the pulse width = incrementing the WIDTH value by one each cycle. atmega328 1 micro second is equal to 16 cycles.
	while (ioport_get_pin_level(echo)==HIGH)
	{
		if (numloops++ == maxloops) break;
   80196:	42a2      	cmp	r2, r4
   80198:	d008      	beq.n	801ac <pulseIn+0x64>
		width++;
   8019a:	3001      	adds	r0, #1
   8019c:	6bca      	ldr	r2, [r1, #60]	; 0x3c
	{
		if (numloops++ == maxloops) break;
	}
	
	// wait for the pulse to stop @ here we are measuring the pulse width = incrementing the WIDTH value by one each cycle. atmega328 1 micro second is equal to 16 cycles.
	while (ioport_get_pin_level(echo)==HIGH)
   8019e:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
   801a2:	d1f7      	bne.n	80194 <pulseIn+0x4c>
   801a4:	e002      	b.n	801ac <pulseIn+0x64>
   801a6:	2000      	movs	r0, #0
   801a8:	e000      	b.n	801ac <pulseIn+0x64>
	{
		if (numloops++ == maxloops) break;
   801aa:	2000      	movs	r0, #0
		width++;
	}
	return width/5.1;
   801ac:	4b09      	ldr	r3, [pc, #36]	; (801d4 <pulseIn+0x8c>)
   801ae:	4798      	blx	r3
   801b0:	a303      	add	r3, pc, #12	; (adr r3, 801c0 <pulseIn+0x78>)
   801b2:	e9d3 2300 	ldrd	r2, r3, [r3]
   801b6:	4c08      	ldr	r4, [pc, #32]	; (801d8 <pulseIn+0x90>)
   801b8:	47a0      	blx	r4
   801ba:	4b08      	ldr	r3, [pc, #32]	; (801dc <pulseIn+0x94>)
   801bc:	4798      	blx	r3
}
   801be:	bd10      	pop	{r4, pc}
   801c0:	66666666 	.word	0x66666666
   801c4:	40146666 	.word	0x40146666
   801c8:	400e1200 	.word	0x400e1200
   801cc:	004c4b41 	.word	0x004c4b41
   801d0:	004c4b40 	.word	0x004c4b40
   801d4:	00080d11 	.word	0x00080d11
   801d8:	00081051 	.word	0x00081051
   801dc:	00081221 	.word	0x00081221

000801e0 <distance_forward>:

long distance_forward(){
   801e0:	b570      	push	{r4, r5, r6, lr}
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   801e2:	4c0b      	ldr	r4, [pc, #44]	; (80210 <distance_forward+0x30>)
   801e4:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
   801e8:	6365      	str	r5, [r4, #52]	; 0x34
	ioport_set_pin_level(trig, LOW);
	delay_us(2);
   801ea:	200c      	movs	r0, #12
   801ec:	4e09      	ldr	r6, [pc, #36]	; (80214 <distance_forward+0x34>)
   801ee:	47b0      	blx	r6
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   801f0:	6325      	str	r5, [r4, #48]	; 0x30
	ioport_set_pin_level(trig, HIGH);
	delay_us(10);
   801f2:	203c      	movs	r0, #60	; 0x3c
   801f4:	47b0      	blx	r6
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   801f6:	6365      	str	r5, [r4, #52]	; 0x34
	ioport_set_pin_level(trig, LOW);
	duration = pulseIn();
   801f8:	4b07      	ldr	r3, [pc, #28]	; (80218 <distance_forward+0x38>)
   801fa:	4798      	blx	r3
   801fc:	4b07      	ldr	r3, [pc, #28]	; (8021c <distance_forward+0x3c>)
   801fe:	6018      	str	r0, [r3, #0]
	distance = duration / 58;
   80200:	4b07      	ldr	r3, [pc, #28]	; (80220 <distance_forward+0x40>)
   80202:	fba3 2000 	umull	r2, r0, r3, r0
   80206:	0940      	lsrs	r0, r0, #5
   80208:	4b06      	ldr	r3, [pc, #24]	; (80224 <distance_forward+0x44>)
   8020a:	6018      	str	r0, [r3, #0]
	return distance;
}
   8020c:	bd70      	pop	{r4, r5, r6, pc}
   8020e:	bf00      	nop
   80210:	400e1200 	.word	0x400e1200
   80214:	20070001 	.word	0x20070001
   80218:	00080149 	.word	0x00080149
   8021c:	20070610 	.word	0x20070610
   80220:	8d3dcb09 	.word	0x8d3dcb09
   80224:	2007060c 	.word	0x2007060c

00080228 <pulse>:
#include "motorFunc.h"



//Sends the pulse to the engine
void pulse(uint16_t motorSpeed){
   80228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   8022a:	4c0d      	ldr	r4, [pc, #52]	; (80260 <pulse+0x38>)
   8022c:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   80230:	6325      	str	r5, [r4, #48]	; 0x30
	ioport_set_pin_level(pin24, HIGH);
	delay_us(motorSpeed);
   80232:	a309      	add	r3, pc, #36	; (adr r3, 80258 <pulse+0x30>)
   80234:	e9d3 2300 	ldrd	r2, r3, [r3]
   80238:	490a      	ldr	r1, [pc, #40]	; (80264 <pulse+0x3c>)
   8023a:	4616      	mov	r6, r2
   8023c:	461f      	mov	r7, r3
   8023e:	fbe1 6700 	umlal	r6, r7, r1, r0
   80242:	4630      	mov	r0, r6
   80244:	4639      	mov	r1, r7
   80246:	4a08      	ldr	r2, [pc, #32]	; (80268 <pulse+0x40>)
   80248:	2300      	movs	r3, #0
   8024a:	4e08      	ldr	r6, [pc, #32]	; (8026c <pulse+0x44>)
   8024c:	47b0      	blx	r6
   8024e:	4b08      	ldr	r3, [pc, #32]	; (80270 <pulse+0x48>)
   80250:	4798      	blx	r3
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80252:	6365      	str	r5, [r4, #52]	; 0x34
   80254:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80256:	bf00      	nop
   80258:	00d59f7f 	.word	0x00d59f7f
   8025c:	00000000 	.word	0x00000000
   80260:	400e0e00 	.word	0x400e0e00
   80264:	0501bd00 	.word	0x0501bd00
   80268:	00d59f80 	.word	0x00d59f80
   8026c:	000812b1 	.word	0x000812b1
   80270:	20070001 	.word	0x20070001
   80274:	f3af 8000 	nop.w

00080278 <rotate>:
	pulse(reverseBaseSpeed);
	delay_ms(timeOut);
}

//Rotates the platform by setting the directions of the engines the opposite of each other
void rotate(){
   80278:	b538      	push	{r3, r4, r5, lr}
	pulse(baseSpeed);
   8027a:	f240 60d6 	movw	r0, #1750	; 0x6d6
   8027e:	4d06      	ldr	r5, [pc, #24]	; (80298 <rotate+0x20>)
   80280:	47a8      	blx	r5
	delay_us(motorSwitch);
   80282:	f641 10c8 	movw	r0, #6600	; 0x19c8
   80286:	4c05      	ldr	r4, [pc, #20]	; (8029c <rotate+0x24>)
   80288:	47a0      	blx	r4
	pulse(reverseBaseSpeed);
   8028a:	f240 40e2 	movw	r0, #1250	; 0x4e2
   8028e:	47a8      	blx	r5
	delay_ms(700);
   80290:	4803      	ldr	r0, [pc, #12]	; (802a0 <rotate+0x28>)
   80292:	47a0      	blx	r4
   80294:	bd38      	pop	{r3, r4, r5, pc}
   80296:	bf00      	nop
   80298:	00080229 	.word	0x00080229
   8029c:	20070001 	.word	0x20070001
   802a0:	00401640 	.word	0x00401640

000802a4 <stop>:
}

//Stops both of the engines
void stop(){
   802a4:	b538      	push	{r3, r4, r5, lr}
	pulse(1500);
   802a6:	f240 50dc 	movw	r0, #1500	; 0x5dc
   802aa:	4d06      	ldr	r5, [pc, #24]	; (802c4 <stop+0x20>)
   802ac:	47a8      	blx	r5
	delay_us(motorSwitch);
   802ae:	f641 10c8 	movw	r0, #6600	; 0x19c8
   802b2:	4c05      	ldr	r4, [pc, #20]	; (802c8 <stop+0x24>)
   802b4:	47a0      	blx	r4
	pulse(1500);
   802b6:	f240 50dc 	movw	r0, #1500	; 0x5dc
   802ba:	47a8      	blx	r5
	delay_ms(timeOut);
   802bc:	4803      	ldr	r0, [pc, #12]	; (802cc <stop+0x28>)
   802be:	47a0      	blx	r4
   802c0:	bd38      	pop	{r3, r4, r5, pc}
   802c2:	bf00      	nop
   802c4:	00080229 	.word	0x00080229
   802c8:	20070001 	.word	0x20070001
   802cc:	00b71b00 	.word	0x00b71b00

000802d0 <calculateSpeed>:
#include "motorFunc.h"

double kValue = 500.0/270.0;


uint16_t calculateSpeed(uint16_t distanceArray[]){
   802d0:	b510      	push	{r4, lr}
   802d2:	2300      	movs	r3, #0
	uint16_t dist = 0;
   802d4:	461a      	mov	r2, r3
	uint8_t i;
	for (i = 0; i < 5; ++i) {
		dist += distanceArray[i];
   802d6:	5ac1      	ldrh	r1, [r0, r3]
   802d8:	440a      	add	r2, r1
   802da:	b292      	uxth	r2, r2
   802dc:	3302      	adds	r3, #2


uint16_t calculateSpeed(uint16_t distanceArray[]){
	uint16_t dist = 0;
	uint8_t i;
	for (i = 0; i < 5; ++i) {
   802de:	2b0a      	cmp	r3, #10
   802e0:	d1f9      	bne.n	802d6 <calculateSpeed+0x6>
		dist += distanceArray[i];
	}
	dist = dist/4;
	uint16_t speed = dist * kValue;
   802e2:	0890      	lsrs	r0, r2, #2
   802e4:	4b09      	ldr	r3, [pc, #36]	; (8030c <calculateSpeed+0x3c>)
   802e6:	4798      	blx	r3
   802e8:	4b09      	ldr	r3, [pc, #36]	; (80310 <calculateSpeed+0x40>)
   802ea:	e9d3 2300 	ldrd	r2, r3, [r3]
   802ee:	4c09      	ldr	r4, [pc, #36]	; (80314 <calculateSpeed+0x44>)
   802f0:	47a0      	blx	r4
   802f2:	4b09      	ldr	r3, [pc, #36]	; (80318 <calculateSpeed+0x48>)
   802f4:	4798      	blx	r3
   802f6:	b280      	uxth	r0, r0
	speed =1500 + MIN(speed,500);
   802f8:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
   802fc:	bf3a      	itte	cc
   802fe:	f200 50dc 	addwcc	r0, r0, #1500	; 0x5dc
   80302:	b280      	uxthcc	r0, r0
   80304:	f44f 60fa 	movcs.w	r0, #2000	; 0x7d0
	return speed;
}
   80308:	bd10      	pop	{r4, pc}
   8030a:	bf00      	nop
   8030c:	00080d31 	.word	0x00080d31
   80310:	20070138 	.word	0x20070138
   80314:	00080dfd 	.word	0x00080dfd
   80318:	00081271 	.word	0x00081271

0008031c <regulatedForward>:

void regulatedForward(uint16_t speedLeft, uint16_t speedRight){
   8031c:	b570      	push	{r4, r5, r6, lr}
   8031e:	4606      	mov	r6, r0
	pulse(speedRight);
   80320:	4608      	mov	r0, r1
   80322:	4d06      	ldr	r5, [pc, #24]	; (8033c <regulatedForward+0x20>)
   80324:	47a8      	blx	r5
	delay_us(motorSwitch);
   80326:	f641 10c8 	movw	r0, #6600	; 0x19c8
   8032a:	4c05      	ldr	r4, [pc, #20]	; (80340 <regulatedForward+0x24>)
   8032c:	47a0      	blx	r4
	pulse(speedLeft);
   8032e:	4630      	mov	r0, r6
   80330:	47a8      	blx	r5
	delay_ms(10);
   80332:	f64e 2060 	movw	r0, #60000	; 0xea60
   80336:	47a0      	blx	r4
   80338:	bd70      	pop	{r4, r5, r6, pc}
   8033a:	bf00      	nop
   8033c:	00080229 	.word	0x00080229
   80340:	20070001 	.word	0x20070001

00080344 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   80344:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   80346:	480e      	ldr	r0, [pc, #56]	; (80380 <sysclk_init+0x3c>)
   80348:	4b0e      	ldr	r3, [pc, #56]	; (80384 <sysclk_init+0x40>)
   8034a:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   8034c:	2000      	movs	r0, #0
   8034e:	213e      	movs	r1, #62	; 0x3e
   80350:	4b0d      	ldr	r3, [pc, #52]	; (80388 <sysclk_init+0x44>)
   80352:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   80354:	4c0d      	ldr	r4, [pc, #52]	; (8038c <sysclk_init+0x48>)
   80356:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   80358:	2800      	cmp	r0, #0
   8035a:	d0fc      	beq.n	80356 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   8035c:	4b0c      	ldr	r3, [pc, #48]	; (80390 <sysclk_init+0x4c>)
   8035e:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   80360:	4a0c      	ldr	r2, [pc, #48]	; (80394 <sysclk_init+0x50>)
   80362:	4b0d      	ldr	r3, [pc, #52]	; (80398 <sysclk_init+0x54>)
   80364:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   80366:	4c0d      	ldr	r4, [pc, #52]	; (8039c <sysclk_init+0x58>)
   80368:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   8036a:	2800      	cmp	r0, #0
   8036c:	d0fc      	beq.n	80368 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   8036e:	2010      	movs	r0, #16
   80370:	4b0b      	ldr	r3, [pc, #44]	; (803a0 <sysclk_init+0x5c>)
   80372:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   80374:	4b0b      	ldr	r3, [pc, #44]	; (803a4 <sysclk_init+0x60>)
   80376:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   80378:	4801      	ldr	r0, [pc, #4]	; (80380 <sysclk_init+0x3c>)
   8037a:	4b02      	ldr	r3, [pc, #8]	; (80384 <sysclk_init+0x40>)
   8037c:	4798      	blx	r3
   8037e:	bd10      	pop	{r4, pc}
   80380:	0501bd00 	.word	0x0501bd00
   80384:	200700b1 	.word	0x200700b1
   80388:	0008073d 	.word	0x0008073d
   8038c:	00080791 	.word	0x00080791
   80390:	000807a1 	.word	0x000807a1
   80394:	200d3f01 	.word	0x200d3f01
   80398:	400e0600 	.word	0x400e0600
   8039c:	000807b1 	.word	0x000807b1
   803a0:	000806d9 	.word	0x000806d9
   803a4:	000808cd 	.word	0x000808cd

000803a8 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   803a8:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   803aa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   803ae:	4b13      	ldr	r3, [pc, #76]	; (803fc <board_init+0x54>)
   803b0:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   803b2:	200b      	movs	r0, #11
   803b4:	4c12      	ldr	r4, [pc, #72]	; (80400 <board_init+0x58>)
   803b6:	47a0      	blx	r4
   803b8:	200c      	movs	r0, #12
   803ba:	47a0      	blx	r4
   803bc:	200d      	movs	r0, #13
   803be:	47a0      	blx	r4
   803c0:	200e      	movs	r0, #14
   803c2:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   803c4:	203b      	movs	r0, #59	; 0x3b
   803c6:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   803ca:	4c0e      	ldr	r4, [pc, #56]	; (80404 <board_init+0x5c>)
   803cc:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   803ce:	2055      	movs	r0, #85	; 0x55
   803d0:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   803d4:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   803d6:	2056      	movs	r0, #86	; 0x56
   803d8:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   803dc:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   803de:	2068      	movs	r0, #104	; 0x68
   803e0:	4909      	ldr	r1, [pc, #36]	; (80408 <board_init+0x60>)
   803e2:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   803e4:	205c      	movs	r0, #92	; 0x5c
   803e6:	4909      	ldr	r1, [pc, #36]	; (8040c <board_init+0x64>)
   803e8:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   803ea:	4809      	ldr	r0, [pc, #36]	; (80410 <board_init+0x68>)
   803ec:	f44f 7140 	mov.w	r1, #768	; 0x300
   803f0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   803f4:	4b07      	ldr	r3, [pc, #28]	; (80414 <board_init+0x6c>)
   803f6:	4798      	blx	r3
   803f8:	bd10      	pop	{r4, pc}
   803fa:	bf00      	nop
   803fc:	400e1a50 	.word	0x400e1a50
   80400:	000807c1 	.word	0x000807c1
   80404:	000804bd 	.word	0x000804bd
   80408:	28000079 	.word	0x28000079
   8040c:	28000001 	.word	0x28000001
   80410:	400e0e00 	.word	0x400e0e00
   80414:	00080591 	.word	0x00080591

00080418 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   80418:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   8041a:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   8041e:	d016      	beq.n	8044e <pio_set_peripheral+0x36>
   80420:	d804      	bhi.n	8042c <pio_set_peripheral+0x14>
   80422:	b1c1      	cbz	r1, 80456 <pio_set_peripheral+0x3e>
   80424:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   80428:	d00a      	beq.n	80440 <pio_set_peripheral+0x28>
   8042a:	e013      	b.n	80454 <pio_set_peripheral+0x3c>
   8042c:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   80430:	d011      	beq.n	80456 <pio_set_peripheral+0x3e>
   80432:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   80436:	d00e      	beq.n	80456 <pio_set_peripheral+0x3e>
   80438:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   8043c:	d10a      	bne.n	80454 <pio_set_peripheral+0x3c>
   8043e:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   80440:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   80442:	6f01      	ldr	r1, [r0, #112]	; 0x70
   80444:	400b      	ands	r3, r1
   80446:	ea23 0302 	bic.w	r3, r3, r2
   8044a:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   8044c:	e002      	b.n	80454 <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   8044e:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   80450:	4313      	orrs	r3, r2
   80452:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   80454:	6042      	str	r2, [r0, #4]
   80456:	4770      	bx	lr

00080458 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   80458:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8045a:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   8045e:	bf14      	ite	ne
   80460:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80462:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   80464:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   80468:	bf14      	ite	ne
   8046a:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   8046c:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   8046e:	f012 0f02 	tst.w	r2, #2
   80472:	d002      	beq.n	8047a <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   80474:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   80478:	e004      	b.n	80484 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   8047a:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   8047e:	bf18      	it	ne
   80480:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   80484:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   80486:	6001      	str	r1, [r0, #0]
   80488:	4770      	bx	lr
   8048a:	bf00      	nop

0008048c <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   8048c:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   8048e:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80490:	9c01      	ldr	r4, [sp, #4]
   80492:	b10c      	cbz	r4, 80498 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   80494:	6641      	str	r1, [r0, #100]	; 0x64
   80496:	e000      	b.n	8049a <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80498:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   8049a:	b10b      	cbz	r3, 804a0 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   8049c:	6501      	str	r1, [r0, #80]	; 0x50
   8049e:	e000      	b.n	804a2 <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   804a0:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   804a2:	b10a      	cbz	r2, 804a8 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   804a4:	6301      	str	r1, [r0, #48]	; 0x30
   804a6:	e000      	b.n	804aa <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   804a8:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   804aa:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   804ac:	6001      	str	r1, [r0, #0]
}
   804ae:	f85d 4b04 	ldr.w	r4, [sp], #4
   804b2:	4770      	bx	lr

000804b4 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   804b4:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   804b6:	4770      	bx	lr

000804b8 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   804b8:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   804ba:	4770      	bx	lr

000804bc <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   804bc:	b570      	push	{r4, r5, r6, lr}
   804be:	b082      	sub	sp, #8
   804c0:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   804c2:	0944      	lsrs	r4, r0, #5
   804c4:	f504 1400 	add.w	r4, r4, #2097152	; 0x200000
   804c8:	f204 7407 	addw	r4, r4, #1799	; 0x707
   804cc:	0266      	lsls	r6, r4, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   804ce:	f001 44f0 	and.w	r4, r1, #2013265920	; 0x78000000
   804d2:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   804d6:	d030      	beq.n	8053a <pio_configure_pin+0x7e>
   804d8:	d806      	bhi.n	804e8 <pio_configure_pin+0x2c>
   804da:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   804de:	d00a      	beq.n	804f6 <pio_configure_pin+0x3a>
   804e0:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   804e4:	d018      	beq.n	80518 <pio_configure_pin+0x5c>
   804e6:	e049      	b.n	8057c <pio_configure_pin+0xc0>
   804e8:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   804ec:	d030      	beq.n	80550 <pio_configure_pin+0x94>
   804ee:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   804f2:	d02d      	beq.n	80550 <pio_configure_pin+0x94>
   804f4:	e042      	b.n	8057c <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   804f6:	f000 001f 	and.w	r0, r0, #31
   804fa:	2401      	movs	r4, #1
   804fc:	4084      	lsls	r4, r0
   804fe:	4630      	mov	r0, r6
   80500:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80504:	4622      	mov	r2, r4
   80506:	4b1f      	ldr	r3, [pc, #124]	; (80584 <pio_configure_pin+0xc8>)
   80508:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8050a:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   8050e:	bf14      	ite	ne
   80510:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80512:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80514:	2001      	movs	r0, #1
   80516:	e032      	b.n	8057e <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   80518:	f000 001f 	and.w	r0, r0, #31
   8051c:	2401      	movs	r4, #1
   8051e:	4084      	lsls	r4, r0
   80520:	4630      	mov	r0, r6
   80522:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80526:	4622      	mov	r2, r4
   80528:	4b16      	ldr	r3, [pc, #88]	; (80584 <pio_configure_pin+0xc8>)
   8052a:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8052c:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80530:	bf14      	ite	ne
   80532:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80534:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80536:	2001      	movs	r0, #1
   80538:	e021      	b.n	8057e <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   8053a:	f000 011f 	and.w	r1, r0, #31
   8053e:	2401      	movs	r4, #1
   80540:	4630      	mov	r0, r6
   80542:	fa04 f101 	lsl.w	r1, r4, r1
   80546:	462a      	mov	r2, r5
   80548:	4b0f      	ldr	r3, [pc, #60]	; (80588 <pio_configure_pin+0xcc>)
   8054a:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   8054c:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   8054e:	e016      	b.n	8057e <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80550:	f000 011f 	and.w	r1, r0, #31
   80554:	2401      	movs	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80556:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   8055a:	ea05 0304 	and.w	r3, r5, r4
   8055e:	9300      	str	r3, [sp, #0]
   80560:	4630      	mov	r0, r6
   80562:	fa04 f101 	lsl.w	r1, r4, r1
   80566:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   8056a:	bf14      	ite	ne
   8056c:	2200      	movne	r2, #0
   8056e:	2201      	moveq	r2, #1
   80570:	f3c5 0380 	ubfx	r3, r5, #2, #1
   80574:	4d05      	ldr	r5, [pc, #20]	; (8058c <pio_configure_pin+0xd0>)
   80576:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
   80578:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   8057a:	e000      	b.n	8057e <pio_configure_pin+0xc2>

	default:
		return 0;
   8057c:	2000      	movs	r0, #0
	}

	return 1;
}
   8057e:	b002      	add	sp, #8
   80580:	bd70      	pop	{r4, r5, r6, pc}
   80582:	bf00      	nop
   80584:	00080419 	.word	0x00080419
   80588:	00080459 	.word	0x00080459
   8058c:	0008048d 	.word	0x0008048d

00080590 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   80590:	b5f0      	push	{r4, r5, r6, r7, lr}
   80592:	b083      	sub	sp, #12
   80594:	4607      	mov	r7, r0
   80596:	460e      	mov	r6, r1
   80598:	4615      	mov	r5, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   8059a:	f002 44f0 	and.w	r4, r2, #2013265920	; 0x78000000
   8059e:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   805a2:	d026      	beq.n	805f2 <pio_configure_pin_group+0x62>
   805a4:	d806      	bhi.n	805b4 <pio_configure_pin_group+0x24>
   805a6:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   805aa:	d00a      	beq.n	805c2 <pio_configure_pin_group+0x32>
   805ac:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   805b0:	d013      	beq.n	805da <pio_configure_pin_group+0x4a>
   805b2:	e034      	b.n	8061e <pio_configure_pin_group+0x8e>
   805b4:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   805b8:	d01f      	beq.n	805fa <pio_configure_pin_group+0x6a>
   805ba:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   805be:	d01c      	beq.n	805fa <pio_configure_pin_group+0x6a>
   805c0:	e02d      	b.n	8061e <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   805c2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   805c6:	4632      	mov	r2, r6
   805c8:	4b16      	ldr	r3, [pc, #88]	; (80624 <pio_configure_pin_group+0x94>)
   805ca:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   805cc:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   805d0:	bf14      	ite	ne
   805d2:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   805d4:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   805d6:	2001      	movs	r0, #1
   805d8:	e022      	b.n	80620 <pio_configure_pin_group+0x90>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   805da:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   805de:	4632      	mov	r2, r6
   805e0:	4b10      	ldr	r3, [pc, #64]	; (80624 <pio_configure_pin_group+0x94>)
   805e2:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   805e4:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   805e8:	bf14      	ite	ne
   805ea:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   805ec:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   805ee:	2001      	movs	r0, #1
   805f0:	e016      	b.n	80620 <pio_configure_pin_group+0x90>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   805f2:	4b0d      	ldr	r3, [pc, #52]	; (80628 <pio_configure_pin_group+0x98>)
   805f4:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   805f6:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   805f8:	e012      	b.n	80620 <pio_configure_pin_group+0x90>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   805fa:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   805fe:	f005 0301 	and.w	r3, r5, #1
   80602:	9300      	str	r3, [sp, #0]
   80604:	4638      	mov	r0, r7
   80606:	4631      	mov	r1, r6
   80608:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   8060c:	bf14      	ite	ne
   8060e:	2200      	movne	r2, #0
   80610:	2201      	moveq	r2, #1
   80612:	f3c5 0380 	ubfx	r3, r5, #2, #1
   80616:	4c05      	ldr	r4, [pc, #20]	; (8062c <pio_configure_pin_group+0x9c>)
   80618:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   8061a:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   8061c:	e000      	b.n	80620 <pio_configure_pin_group+0x90>

	default:
		return 0;
   8061e:	2000      	movs	r0, #0
	}

	return 1;
}
   80620:	b003      	add	sp, #12
   80622:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80624:	00080419 	.word	0x00080419
   80628:	00080459 	.word	0x00080459
   8062c:	0008048d 	.word	0x0008048d

00080630 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   80630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80634:	4604      	mov	r4, r0
   80636:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   80638:	4b10      	ldr	r3, [pc, #64]	; (8067c <pio_handler_process+0x4c>)
   8063a:	4798      	blx	r3
   8063c:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   8063e:	4620      	mov	r0, r4
   80640:	4b0f      	ldr	r3, [pc, #60]	; (80680 <pio_handler_process+0x50>)
   80642:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   80644:	4005      	ands	r5, r0
   80646:	d017      	beq.n	80678 <pio_handler_process+0x48>
   80648:	4f0e      	ldr	r7, [pc, #56]	; (80684 <pio_handler_process+0x54>)
   8064a:	f107 040c 	add.w	r4, r7, #12
   8064e:	376c      	adds	r7, #108	; 0x6c
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   80650:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   80654:	42b3      	cmp	r3, r6
   80656:	d10a      	bne.n	8066e <pio_handler_process+0x3e>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   80658:	f854 1c08 	ldr.w	r1, [r4, #-8]
   8065c:	4229      	tst	r1, r5
   8065e:	d006      	beq.n	8066e <pio_handler_process+0x3e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   80660:	6823      	ldr	r3, [r4, #0]
   80662:	4630      	mov	r0, r6
   80664:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   80666:	f854 3c08 	ldr.w	r3, [r4, #-8]
   8066a:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   8066e:	42bc      	cmp	r4, r7
   80670:	d002      	beq.n	80678 <pio_handler_process+0x48>
   80672:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   80674:	2d00      	cmp	r5, #0
   80676:	d1eb      	bne.n	80650 <pio_handler_process+0x20>
   80678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8067c:	000804b5 	.word	0x000804b5
   80680:	000804b9 	.word	0x000804b9
   80684:	2007058c 	.word	0x2007058c

00080688 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   80688:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   8068a:	4802      	ldr	r0, [pc, #8]	; (80694 <PIOA_Handler+0xc>)
   8068c:	210b      	movs	r1, #11
   8068e:	4b02      	ldr	r3, [pc, #8]	; (80698 <PIOA_Handler+0x10>)
   80690:	4798      	blx	r3
   80692:	bd08      	pop	{r3, pc}
   80694:	400e0e00 	.word	0x400e0e00
   80698:	00080631 	.word	0x00080631

0008069c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   8069c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   8069e:	4802      	ldr	r0, [pc, #8]	; (806a8 <PIOB_Handler+0xc>)
   806a0:	210c      	movs	r1, #12
   806a2:	4b02      	ldr	r3, [pc, #8]	; (806ac <PIOB_Handler+0x10>)
   806a4:	4798      	blx	r3
   806a6:	bd08      	pop	{r3, pc}
   806a8:	400e1000 	.word	0x400e1000
   806ac:	00080631 	.word	0x00080631

000806b0 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   806b0:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   806b2:	4802      	ldr	r0, [pc, #8]	; (806bc <PIOC_Handler+0xc>)
   806b4:	210d      	movs	r1, #13
   806b6:	4b02      	ldr	r3, [pc, #8]	; (806c0 <PIOC_Handler+0x10>)
   806b8:	4798      	blx	r3
   806ba:	bd08      	pop	{r3, pc}
   806bc:	400e1200 	.word	0x400e1200
   806c0:	00080631 	.word	0x00080631

000806c4 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   806c4:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   806c6:	4802      	ldr	r0, [pc, #8]	; (806d0 <PIOD_Handler+0xc>)
   806c8:	210e      	movs	r1, #14
   806ca:	4b02      	ldr	r3, [pc, #8]	; (806d4 <PIOD_Handler+0x10>)
   806cc:	4798      	blx	r3
   806ce:	bd08      	pop	{r3, pc}
   806d0:	400e1400 	.word	0x400e1400
   806d4:	00080631 	.word	0x00080631

000806d8 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   806d8:	4b17      	ldr	r3, [pc, #92]	; (80738 <pmc_switch_mck_to_pllack+0x60>)
   806da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   806dc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   806e0:	4310      	orrs	r0, r2
   806e2:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   806e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   806e6:	f013 0f08 	tst.w	r3, #8
   806ea:	d109      	bne.n	80700 <pmc_switch_mck_to_pllack+0x28>
   806ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
   806f0:	4911      	ldr	r1, [pc, #68]	; (80738 <pmc_switch_mck_to_pllack+0x60>)
   806f2:	e001      	b.n	806f8 <pmc_switch_mck_to_pllack+0x20>
			--ul_timeout) {
		if (ul_timeout == 0) {
   806f4:	3b01      	subs	r3, #1
   806f6:	d019      	beq.n	8072c <pmc_switch_mck_to_pllack+0x54>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   806f8:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   806fa:	f012 0f08 	tst.w	r2, #8
   806fe:	d0f9      	beq.n	806f4 <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   80700:	4b0d      	ldr	r3, [pc, #52]	; (80738 <pmc_switch_mck_to_pllack+0x60>)
   80702:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80704:	f022 0203 	bic.w	r2, r2, #3
   80708:	f042 0202 	orr.w	r2, r2, #2
   8070c:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8070e:	6e98      	ldr	r0, [r3, #104]	; 0x68
   80710:	f010 0008 	ands.w	r0, r0, #8
   80714:	d10c      	bne.n	80730 <pmc_switch_mck_to_pllack+0x58>
   80716:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8071a:	4907      	ldr	r1, [pc, #28]	; (80738 <pmc_switch_mck_to_pllack+0x60>)
   8071c:	e001      	b.n	80722 <pmc_switch_mck_to_pllack+0x4a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   8071e:	3b01      	subs	r3, #1
   80720:	d008      	beq.n	80734 <pmc_switch_mck_to_pllack+0x5c>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80722:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80724:	f012 0f08 	tst.w	r2, #8
   80728:	d0f9      	beq.n	8071e <pmc_switch_mck_to_pllack+0x46>
   8072a:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   8072c:	2001      	movs	r0, #1
   8072e:	4770      	bx	lr
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   80730:	2000      	movs	r0, #0
   80732:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   80734:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   80736:	4770      	bx	lr
   80738:	400e0600 	.word	0x400e0600

0008073c <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   8073c:	b138      	cbz	r0, 8074e <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   8073e:	4911      	ldr	r1, [pc, #68]	; (80784 <pmc_switch_mainck_to_xtal+0x48>)
   80740:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   80742:	4a11      	ldr	r2, [pc, #68]	; (80788 <pmc_switch_mainck_to_xtal+0x4c>)
   80744:	401a      	ands	r2, r3
   80746:	4b11      	ldr	r3, [pc, #68]	; (8078c <pmc_switch_mainck_to_xtal+0x50>)
   80748:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   8074a:	620b      	str	r3, [r1, #32]
   8074c:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   8074e:	4a0d      	ldr	r2, [pc, #52]	; (80784 <pmc_switch_mainck_to_xtal+0x48>)
   80750:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   80752:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   80756:	f023 0303 	bic.w	r3, r3, #3
   8075a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   8075e:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   80762:	0209      	lsls	r1, r1, #8
   80764:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   80766:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80768:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   8076a:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8076c:	f013 0f01 	tst.w	r3, #1
   80770:	d0fb      	beq.n	8076a <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   80772:	4a04      	ldr	r2, [pc, #16]	; (80784 <pmc_switch_mainck_to_xtal+0x48>)
   80774:	6a13      	ldr	r3, [r2, #32]
   80776:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   8077a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   8077e:	6213      	str	r3, [r2, #32]
   80780:	4770      	bx	lr
   80782:	bf00      	nop
   80784:	400e0600 	.word	0x400e0600
   80788:	fec8fffc 	.word	0xfec8fffc
   8078c:	01370002 	.word	0x01370002

00080790 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   80790:	4b02      	ldr	r3, [pc, #8]	; (8079c <pmc_osc_is_ready_mainck+0xc>)
   80792:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80794:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   80798:	4770      	bx	lr
   8079a:	bf00      	nop
   8079c:	400e0600 	.word	0x400e0600

000807a0 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   807a0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   807a4:	4b01      	ldr	r3, [pc, #4]	; (807ac <pmc_disable_pllack+0xc>)
   807a6:	629a      	str	r2, [r3, #40]	; 0x28
   807a8:	4770      	bx	lr
   807aa:	bf00      	nop
   807ac:	400e0600 	.word	0x400e0600

000807b0 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   807b0:	4b02      	ldr	r3, [pc, #8]	; (807bc <pmc_is_locked_pllack+0xc>)
   807b2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   807b4:	f000 0002 	and.w	r0, r0, #2
   807b8:	4770      	bx	lr
   807ba:	bf00      	nop
   807bc:	400e0600 	.word	0x400e0600

000807c0 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   807c0:	282c      	cmp	r0, #44	; 0x2c
   807c2:	d820      	bhi.n	80806 <pmc_enable_periph_clk+0x46>
		return 1;
	}

	if (ul_id < 32) {
   807c4:	281f      	cmp	r0, #31
   807c6:	d80d      	bhi.n	807e4 <pmc_enable_periph_clk+0x24>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   807c8:	4b12      	ldr	r3, [pc, #72]	; (80814 <pmc_enable_periph_clk+0x54>)
   807ca:	699a      	ldr	r2, [r3, #24]
   807cc:	2301      	movs	r3, #1
   807ce:	4083      	lsls	r3, r0
   807d0:	401a      	ands	r2, r3
   807d2:	4293      	cmp	r3, r2
   807d4:	d019      	beq.n	8080a <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER0 = 1 << ul_id;
   807d6:	2301      	movs	r3, #1
   807d8:	fa03 f000 	lsl.w	r0, r3, r0
   807dc:	4b0d      	ldr	r3, [pc, #52]	; (80814 <pmc_enable_periph_clk+0x54>)
   807de:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   807e0:	2000      	movs	r0, #0
   807e2:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   807e4:	4b0b      	ldr	r3, [pc, #44]	; (80814 <pmc_enable_periph_clk+0x54>)
   807e6:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
	} else {
		ul_id -= 32;
   807ea:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   807ec:	2301      	movs	r3, #1
   807ee:	4083      	lsls	r3, r0
   807f0:	401a      	ands	r2, r3
   807f2:	4293      	cmp	r3, r2
   807f4:	d00b      	beq.n	8080e <pmc_enable_periph_clk+0x4e>
			PMC->PMC_PCER1 = 1 << ul_id;
   807f6:	2301      	movs	r3, #1
   807f8:	fa03 f000 	lsl.w	r0, r3, r0
   807fc:	4b05      	ldr	r3, [pc, #20]	; (80814 <pmc_enable_periph_clk+0x54>)
   807fe:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   80802:	2000      	movs	r0, #0
   80804:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   80806:	2001      	movs	r0, #1
   80808:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   8080a:	2000      	movs	r0, #0
   8080c:	4770      	bx	lr
   8080e:	2000      	movs	r0, #0
}
   80810:	4770      	bx	lr
   80812:	bf00      	nop
   80814:	400e0600 	.word	0x400e0600

00080818 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80818:	e7fe      	b.n	80818 <Dummy_Handler>
   8081a:	bf00      	nop

0008081c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   8081c:	b510      	push	{r4, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   8081e:	4b1e      	ldr	r3, [pc, #120]	; (80898 <Reset_Handler+0x7c>)
   80820:	4a1e      	ldr	r2, [pc, #120]	; (8089c <Reset_Handler+0x80>)
   80822:	429a      	cmp	r2, r3
   80824:	d003      	beq.n	8082e <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   80826:	4b1e      	ldr	r3, [pc, #120]	; (808a0 <Reset_Handler+0x84>)
   80828:	4a1b      	ldr	r2, [pc, #108]	; (80898 <Reset_Handler+0x7c>)
   8082a:	429a      	cmp	r2, r3
   8082c:	d304      	bcc.n	80838 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   8082e:	4b1d      	ldr	r3, [pc, #116]	; (808a4 <Reset_Handler+0x88>)
   80830:	4a1d      	ldr	r2, [pc, #116]	; (808a8 <Reset_Handler+0x8c>)
   80832:	429a      	cmp	r2, r3
   80834:	d30f      	bcc.n	80856 <Reset_Handler+0x3a>
   80836:	e01a      	b.n	8086e <Reset_Handler+0x52>
   80838:	4b1c      	ldr	r3, [pc, #112]	; (808ac <Reset_Handler+0x90>)
   8083a:	4c1d      	ldr	r4, [pc, #116]	; (808b0 <Reset_Handler+0x94>)
   8083c:	1ae4      	subs	r4, r4, r3
   8083e:	f024 0403 	bic.w	r4, r4, #3
   80842:	3404      	adds	r4, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   80844:	2300      	movs	r3, #0
			*pDest++ = *pSrc++;
   80846:	4814      	ldr	r0, [pc, #80]	; (80898 <Reset_Handler+0x7c>)
   80848:	4914      	ldr	r1, [pc, #80]	; (8089c <Reset_Handler+0x80>)
   8084a:	585a      	ldr	r2, [r3, r1]
   8084c:	501a      	str	r2, [r3, r0]
   8084e:	3304      	adds	r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   80850:	42a3      	cmp	r3, r4
   80852:	d1fa      	bne.n	8084a <Reset_Handler+0x2e>
   80854:	e7eb      	b.n	8082e <Reset_Handler+0x12>
   80856:	4b17      	ldr	r3, [pc, #92]	; (808b4 <Reset_Handler+0x98>)
   80858:	4917      	ldr	r1, [pc, #92]	; (808b8 <Reset_Handler+0x9c>)
   8085a:	1ac9      	subs	r1, r1, r3
   8085c:	f021 0103 	bic.w	r1, r1, #3
   80860:	1d1a      	adds	r2, r3, #4
   80862:	4411      	add	r1, r2
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   80864:	2200      	movs	r2, #0
   80866:	f843 2f04 	str.w	r2, [r3, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   8086a:	428b      	cmp	r3, r1
   8086c:	d1fb      	bne.n	80866 <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   8086e:	4a13      	ldr	r2, [pc, #76]	; (808bc <Reset_Handler+0xa0>)
   80870:	f022 4360 	bic.w	r3, r2, #3758096384	; 0xe0000000
   80874:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   80878:	4911      	ldr	r1, [pc, #68]	; (808c0 <Reset_Handler+0xa4>)
   8087a:	608b      	str	r3, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   8087c:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
   80880:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
   80884:	d203      	bcs.n	8088e <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   80886:	688a      	ldr	r2, [r1, #8]
   80888:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   8088c:	608a      	str	r2, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   8088e:	4b0d      	ldr	r3, [pc, #52]	; (808c4 <Reset_Handler+0xa8>)
   80890:	4798      	blx	r3

	/* Branch to main function */
	main();
   80892:	4b0d      	ldr	r3, [pc, #52]	; (808c8 <Reset_Handler+0xac>)
   80894:	4798      	blx	r3
   80896:	e7fe      	b.n	80896 <Reset_Handler+0x7a>
   80898:	20070000 	.word	0x20070000
   8089c:	000819ec 	.word	0x000819ec
   808a0:	20070570 	.word	0x20070570
   808a4:	20070618 	.word	0x20070618
   808a8:	20070570 	.word	0x20070570
   808ac:	20070004 	.word	0x20070004
   808b0:	20070573 	.word	0x20070573
   808b4:	2007056c 	.word	0x2007056c
   808b8:	20070613 	.word	0x20070613
   808bc:	00080000 	.word	0x00080000
   808c0:	e000ed00 	.word	0xe000ed00
   808c4:	00081871 	.word	0x00081871
   808c8:	000809e9 	.word	0x000809e9

000808cc <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   808cc:	4b3e      	ldr	r3, [pc, #248]	; (809c8 <SystemCoreClockUpdate+0xfc>)
   808ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   808d0:	f003 0303 	and.w	r3, r3, #3
   808d4:	2b03      	cmp	r3, #3
   808d6:	d85f      	bhi.n	80998 <SystemCoreClockUpdate+0xcc>
   808d8:	e8df f003 	tbb	[pc, r3]
   808dc:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   808e0:	4b3a      	ldr	r3, [pc, #232]	; (809cc <SystemCoreClockUpdate+0x100>)
   808e2:	695b      	ldr	r3, [r3, #20]
   808e4:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   808e8:	bf14      	ite	ne
   808ea:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   808ee:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   808f2:	4b37      	ldr	r3, [pc, #220]	; (809d0 <SystemCoreClockUpdate+0x104>)
   808f4:	601a      	str	r2, [r3, #0]
   808f6:	e04f      	b.n	80998 <SystemCoreClockUpdate+0xcc>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   808f8:	4b33      	ldr	r3, [pc, #204]	; (809c8 <SystemCoreClockUpdate+0xfc>)
   808fa:	6a1b      	ldr	r3, [r3, #32]
   808fc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80900:	d003      	beq.n	8090a <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80902:	4a34      	ldr	r2, [pc, #208]	; (809d4 <SystemCoreClockUpdate+0x108>)
   80904:	4b32      	ldr	r3, [pc, #200]	; (809d0 <SystemCoreClockUpdate+0x104>)
   80906:	601a      	str	r2, [r3, #0]
   80908:	e046      	b.n	80998 <SystemCoreClockUpdate+0xcc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   8090a:	4a33      	ldr	r2, [pc, #204]	; (809d8 <SystemCoreClockUpdate+0x10c>)
   8090c:	4b30      	ldr	r3, [pc, #192]	; (809d0 <SystemCoreClockUpdate+0x104>)
   8090e:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80910:	4b2d      	ldr	r3, [pc, #180]	; (809c8 <SystemCoreClockUpdate+0xfc>)
   80912:	6a1b      	ldr	r3, [r3, #32]
   80914:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80918:	2b10      	cmp	r3, #16
   8091a:	d002      	beq.n	80922 <SystemCoreClockUpdate+0x56>
   8091c:	2b20      	cmp	r3, #32
   8091e:	d004      	beq.n	8092a <SystemCoreClockUpdate+0x5e>
   80920:	e03a      	b.n	80998 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   80922:	4a2e      	ldr	r2, [pc, #184]	; (809dc <SystemCoreClockUpdate+0x110>)
   80924:	4b2a      	ldr	r3, [pc, #168]	; (809d0 <SystemCoreClockUpdate+0x104>)
   80926:	601a      	str	r2, [r3, #0]
				break;
   80928:	e036      	b.n	80998 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   8092a:	4a2a      	ldr	r2, [pc, #168]	; (809d4 <SystemCoreClockUpdate+0x108>)
   8092c:	4b28      	ldr	r3, [pc, #160]	; (809d0 <SystemCoreClockUpdate+0x104>)
   8092e:	601a      	str	r2, [r3, #0]
				break;
   80930:	e032      	b.n	80998 <SystemCoreClockUpdate+0xcc>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80932:	4b25      	ldr	r3, [pc, #148]	; (809c8 <SystemCoreClockUpdate+0xfc>)
   80934:	6a1b      	ldr	r3, [r3, #32]
   80936:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   8093a:	d003      	beq.n	80944 <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   8093c:	4a25      	ldr	r2, [pc, #148]	; (809d4 <SystemCoreClockUpdate+0x108>)
   8093e:	4b24      	ldr	r3, [pc, #144]	; (809d0 <SystemCoreClockUpdate+0x104>)
   80940:	601a      	str	r2, [r3, #0]
   80942:	e012      	b.n	8096a <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80944:	4a24      	ldr	r2, [pc, #144]	; (809d8 <SystemCoreClockUpdate+0x10c>)
   80946:	4b22      	ldr	r3, [pc, #136]	; (809d0 <SystemCoreClockUpdate+0x104>)
   80948:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   8094a:	4b1f      	ldr	r3, [pc, #124]	; (809c8 <SystemCoreClockUpdate+0xfc>)
   8094c:	6a1b      	ldr	r3, [r3, #32]
   8094e:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80952:	2b10      	cmp	r3, #16
   80954:	d002      	beq.n	8095c <SystemCoreClockUpdate+0x90>
   80956:	2b20      	cmp	r3, #32
   80958:	d004      	beq.n	80964 <SystemCoreClockUpdate+0x98>
   8095a:	e006      	b.n	8096a <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   8095c:	4a1f      	ldr	r2, [pc, #124]	; (809dc <SystemCoreClockUpdate+0x110>)
   8095e:	4b1c      	ldr	r3, [pc, #112]	; (809d0 <SystemCoreClockUpdate+0x104>)
   80960:	601a      	str	r2, [r3, #0]
				break;
   80962:	e002      	b.n	8096a <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   80964:	4a1b      	ldr	r2, [pc, #108]	; (809d4 <SystemCoreClockUpdate+0x108>)
   80966:	4b1a      	ldr	r3, [pc, #104]	; (809d0 <SystemCoreClockUpdate+0x104>)
   80968:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   8096a:	4b17      	ldr	r3, [pc, #92]	; (809c8 <SystemCoreClockUpdate+0xfc>)
   8096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8096e:	f003 0303 	and.w	r3, r3, #3
   80972:	2b02      	cmp	r3, #2
   80974:	d10d      	bne.n	80992 <SystemCoreClockUpdate+0xc6>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80976:	4b14      	ldr	r3, [pc, #80]	; (809c8 <SystemCoreClockUpdate+0xfc>)
   80978:	6a98      	ldr	r0, [r3, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   8097a:	6a99      	ldr	r1, [r3, #40]	; 0x28
   8097c:	4b14      	ldr	r3, [pc, #80]	; (809d0 <SystemCoreClockUpdate+0x104>)
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   8097e:	f3c0 400a 	ubfx	r0, r0, #16, #11
   80982:	681a      	ldr	r2, [r3, #0]
   80984:	fb00 2202 	mla	r2, r0, r2, r2
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80988:	b2c9      	uxtb	r1, r1
   8098a:	fbb2 f2f1 	udiv	r2, r2, r1
   8098e:	601a      	str	r2, [r3, #0]
   80990:	e002      	b.n	80998 <SystemCoreClockUpdate+0xcc>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   80992:	4a13      	ldr	r2, [pc, #76]	; (809e0 <SystemCoreClockUpdate+0x114>)
   80994:	4b0e      	ldr	r3, [pc, #56]	; (809d0 <SystemCoreClockUpdate+0x104>)
   80996:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   80998:	4b0b      	ldr	r3, [pc, #44]	; (809c8 <SystemCoreClockUpdate+0xfc>)
   8099a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8099c:	f003 0370 	and.w	r3, r3, #112	; 0x70
   809a0:	2b70      	cmp	r3, #112	; 0x70
   809a2:	d107      	bne.n	809b4 <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
   809a4:	4b0a      	ldr	r3, [pc, #40]	; (809d0 <SystemCoreClockUpdate+0x104>)
   809a6:	681a      	ldr	r2, [r3, #0]
   809a8:	490e      	ldr	r1, [pc, #56]	; (809e4 <SystemCoreClockUpdate+0x118>)
   809aa:	fba1 0202 	umull	r0, r2, r1, r2
   809ae:	0852      	lsrs	r2, r2, #1
   809b0:	601a      	str	r2, [r3, #0]
   809b2:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   809b4:	4b04      	ldr	r3, [pc, #16]	; (809c8 <SystemCoreClockUpdate+0xfc>)
   809b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
   809b8:	4b05      	ldr	r3, [pc, #20]	; (809d0 <SystemCoreClockUpdate+0x104>)
   809ba:	f3c1 1102 	ubfx	r1, r1, #4, #3
   809be:	681a      	ldr	r2, [r3, #0]
   809c0:	40ca      	lsrs	r2, r1
   809c2:	601a      	str	r2, [r3, #0]
   809c4:	4770      	bx	lr
   809c6:	bf00      	nop
   809c8:	400e0600 	.word	0x400e0600
   809cc:	400e1a10 	.word	0x400e1a10
   809d0:	20070140 	.word	0x20070140
   809d4:	00b71b00 	.word	0x00b71b00
   809d8:	003d0900 	.word	0x003d0900
   809dc:	007a1200 	.word	0x007a1200
   809e0:	0e4e1c00 	.word	0x0e4e1c00
   809e4:	aaaaaaab 	.word	0xaaaaaaab

000809e8 <main>:
uint16_t speed;

//Need to add more comments

int main (void)
{
   809e8:	b570      	push	{r4, r5, r6, lr}
	sysclk_init();
   809ea:	4b1a      	ldr	r3, [pc, #104]	; (80a54 <main+0x6c>)
   809ec:	4798      	blx	r3
	board_init();
   809ee:	4b1a      	ldr	r3, [pc, #104]	; (80a58 <main+0x70>)
   809f0:	4798      	blx	r3
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   809f2:	4b1a      	ldr	r3, [pc, #104]	; (80a5c <main+0x74>)
   809f4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   809f8:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   809fa:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   809fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
   80a02:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   80a06:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80a08:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   80a0c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   80a10:	615a      	str	r2, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80a12:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	ioport_set_pin_dir(echo, IOPORT_DIR_INPUT);
	
	
	
	//Starts with a delay simply to reduce the chance of an error occuring when reseting the program.
	delay_ms(2000);
   80a16:	4812      	ldr	r0, [pc, #72]	; (80a60 <main+0x78>)
   80a18:	4b12      	ldr	r3, [pc, #72]	; (80a64 <main+0x7c>)
   80a1a:	4798      	blx	r3
		DO NOT go: forwardDrive into reverseDrive	
		This is to ensure that the motors don't get damaged.
	*/
	//Starting with a stop(); command is also advisable, as to not run into problems when doing a reset
	while(1){
		distance = distance_forward();
   80a1c:	4e12      	ldr	r6, [pc, #72]	; (80a68 <main+0x80>)
   80a1e:	4d13      	ldr	r5, [pc, #76]	; (80a6c <main+0x84>)
		distanceArray[i%4] = distance;
   80a20:	4c13      	ldr	r4, [pc, #76]	; (80a70 <main+0x88>)
		DO NOT go: forwardDrive into reverseDrive	
		This is to ensure that the motors don't get damaged.
	*/
	//Starting with a stop(); command is also advisable, as to not run into problems when doing a reset
	while(1){
		distance = distance_forward();
   80a22:	47b0      	blx	r6
   80a24:	6028      	str	r0, [r5, #0]
		distanceArray[i%4] = distance;
   80a26:	4b13      	ldr	r3, [pc, #76]	; (80a74 <main+0x8c>)
   80a28:	781b      	ldrb	r3, [r3, #0]
   80a2a:	f003 0303 	and.w	r3, r3, #3
   80a2e:	f824 0013 	strh.w	r0, [r4, r3, lsl #1]
		if (distance<75)
   80a32:	284a      	cmp	r0, #74	; 0x4a
   80a34:	d804      	bhi.n	80a40 <main+0x58>
		{
			stop();
   80a36:	4b10      	ldr	r3, [pc, #64]	; (80a78 <main+0x90>)
   80a38:	4798      	blx	r3
			rotate();
   80a3a:	4b10      	ldr	r3, [pc, #64]	; (80a7c <main+0x94>)
   80a3c:	4798      	blx	r3
   80a3e:	e7f0      	b.n	80a22 <main+0x3a>
			
		} 
		else
		{
			speed = calculateSpeed(distanceArray);
   80a40:	4620      	mov	r0, r4
   80a42:	4b0f      	ldr	r3, [pc, #60]	; (80a80 <main+0x98>)
   80a44:	4798      	blx	r3
   80a46:	4601      	mov	r1, r0
   80a48:	4b0e      	ldr	r3, [pc, #56]	; (80a84 <main+0x9c>)
   80a4a:	8018      	strh	r0, [r3, #0]
			regulatedForward(speed,speed);
   80a4c:	4b0e      	ldr	r3, [pc, #56]	; (80a88 <main+0xa0>)
   80a4e:	4798      	blx	r3
   80a50:	e7e7      	b.n	80a22 <main+0x3a>
   80a52:	bf00      	nop
   80a54:	00080345 	.word	0x00080345
   80a58:	000803a9 	.word	0x000803a9
   80a5c:	400e0e00 	.word	0x400e0e00
   80a60:	00b71b00 	.word	0x00b71b00
   80a64:	20070001 	.word	0x20070001
   80a68:	000801e1 	.word	0x000801e1
   80a6c:	2007060c 	.word	0x2007060c
   80a70:	20070600 	.word	0x20070600
   80a74:	200705fc 	.word	0x200705fc
   80a78:	000802a5 	.word	0x000802a5
   80a7c:	00080279 	.word	0x00080279
   80a80:	000802d1 	.word	0x000802d1
   80a84:	20070614 	.word	0x20070614
   80a88:	0008031d 	.word	0x0008031d

00080a8c <__aeabi_drsub>:
   80a8c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   80a90:	e002      	b.n	80a98 <__adddf3>
   80a92:	bf00      	nop

00080a94 <__aeabi_dsub>:
   80a94:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00080a98 <__adddf3>:
   80a98:	b530      	push	{r4, r5, lr}
   80a9a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   80a9e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   80aa2:	ea94 0f05 	teq	r4, r5
   80aa6:	bf08      	it	eq
   80aa8:	ea90 0f02 	teqeq	r0, r2
   80aac:	bf1f      	itttt	ne
   80aae:	ea54 0c00 	orrsne.w	ip, r4, r0
   80ab2:	ea55 0c02 	orrsne.w	ip, r5, r2
   80ab6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   80aba:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   80abe:	f000 80e2 	beq.w	80c86 <__adddf3+0x1ee>
   80ac2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   80ac6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   80aca:	bfb8      	it	lt
   80acc:	426d      	neglt	r5, r5
   80ace:	dd0c      	ble.n	80aea <__adddf3+0x52>
   80ad0:	442c      	add	r4, r5
   80ad2:	ea80 0202 	eor.w	r2, r0, r2
   80ad6:	ea81 0303 	eor.w	r3, r1, r3
   80ada:	ea82 0000 	eor.w	r0, r2, r0
   80ade:	ea83 0101 	eor.w	r1, r3, r1
   80ae2:	ea80 0202 	eor.w	r2, r0, r2
   80ae6:	ea81 0303 	eor.w	r3, r1, r3
   80aea:	2d36      	cmp	r5, #54	; 0x36
   80aec:	bf88      	it	hi
   80aee:	bd30      	pophi	{r4, r5, pc}
   80af0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   80af4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   80af8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   80afc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   80b00:	d002      	beq.n	80b08 <__adddf3+0x70>
   80b02:	4240      	negs	r0, r0
   80b04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   80b08:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   80b0c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   80b10:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   80b14:	d002      	beq.n	80b1c <__adddf3+0x84>
   80b16:	4252      	negs	r2, r2
   80b18:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   80b1c:	ea94 0f05 	teq	r4, r5
   80b20:	f000 80a7 	beq.w	80c72 <__adddf3+0x1da>
   80b24:	f1a4 0401 	sub.w	r4, r4, #1
   80b28:	f1d5 0e20 	rsbs	lr, r5, #32
   80b2c:	db0d      	blt.n	80b4a <__adddf3+0xb2>
   80b2e:	fa02 fc0e 	lsl.w	ip, r2, lr
   80b32:	fa22 f205 	lsr.w	r2, r2, r5
   80b36:	1880      	adds	r0, r0, r2
   80b38:	f141 0100 	adc.w	r1, r1, #0
   80b3c:	fa03 f20e 	lsl.w	r2, r3, lr
   80b40:	1880      	adds	r0, r0, r2
   80b42:	fa43 f305 	asr.w	r3, r3, r5
   80b46:	4159      	adcs	r1, r3
   80b48:	e00e      	b.n	80b68 <__adddf3+0xd0>
   80b4a:	f1a5 0520 	sub.w	r5, r5, #32
   80b4e:	f10e 0e20 	add.w	lr, lr, #32
   80b52:	2a01      	cmp	r2, #1
   80b54:	fa03 fc0e 	lsl.w	ip, r3, lr
   80b58:	bf28      	it	cs
   80b5a:	f04c 0c02 	orrcs.w	ip, ip, #2
   80b5e:	fa43 f305 	asr.w	r3, r3, r5
   80b62:	18c0      	adds	r0, r0, r3
   80b64:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   80b68:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   80b6c:	d507      	bpl.n	80b7e <__adddf3+0xe6>
   80b6e:	f04f 0e00 	mov.w	lr, #0
   80b72:	f1dc 0c00 	rsbs	ip, ip, #0
   80b76:	eb7e 0000 	sbcs.w	r0, lr, r0
   80b7a:	eb6e 0101 	sbc.w	r1, lr, r1
   80b7e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   80b82:	d31b      	bcc.n	80bbc <__adddf3+0x124>
   80b84:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   80b88:	d30c      	bcc.n	80ba4 <__adddf3+0x10c>
   80b8a:	0849      	lsrs	r1, r1, #1
   80b8c:	ea5f 0030 	movs.w	r0, r0, rrx
   80b90:	ea4f 0c3c 	mov.w	ip, ip, rrx
   80b94:	f104 0401 	add.w	r4, r4, #1
   80b98:	ea4f 5244 	mov.w	r2, r4, lsl #21
   80b9c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   80ba0:	f080 809a 	bcs.w	80cd8 <__adddf3+0x240>
   80ba4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   80ba8:	bf08      	it	eq
   80baa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   80bae:	f150 0000 	adcs.w	r0, r0, #0
   80bb2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   80bb6:	ea41 0105 	orr.w	r1, r1, r5
   80bba:	bd30      	pop	{r4, r5, pc}
   80bbc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   80bc0:	4140      	adcs	r0, r0
   80bc2:	eb41 0101 	adc.w	r1, r1, r1
   80bc6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   80bca:	f1a4 0401 	sub.w	r4, r4, #1
   80bce:	d1e9      	bne.n	80ba4 <__adddf3+0x10c>
   80bd0:	f091 0f00 	teq	r1, #0
   80bd4:	bf04      	itt	eq
   80bd6:	4601      	moveq	r1, r0
   80bd8:	2000      	moveq	r0, #0
   80bda:	fab1 f381 	clz	r3, r1
   80bde:	bf08      	it	eq
   80be0:	3320      	addeq	r3, #32
   80be2:	f1a3 030b 	sub.w	r3, r3, #11
   80be6:	f1b3 0220 	subs.w	r2, r3, #32
   80bea:	da0c      	bge.n	80c06 <__adddf3+0x16e>
   80bec:	320c      	adds	r2, #12
   80bee:	dd08      	ble.n	80c02 <__adddf3+0x16a>
   80bf0:	f102 0c14 	add.w	ip, r2, #20
   80bf4:	f1c2 020c 	rsb	r2, r2, #12
   80bf8:	fa01 f00c 	lsl.w	r0, r1, ip
   80bfc:	fa21 f102 	lsr.w	r1, r1, r2
   80c00:	e00c      	b.n	80c1c <__adddf3+0x184>
   80c02:	f102 0214 	add.w	r2, r2, #20
   80c06:	bfd8      	it	le
   80c08:	f1c2 0c20 	rsble	ip, r2, #32
   80c0c:	fa01 f102 	lsl.w	r1, r1, r2
   80c10:	fa20 fc0c 	lsr.w	ip, r0, ip
   80c14:	bfdc      	itt	le
   80c16:	ea41 010c 	orrle.w	r1, r1, ip
   80c1a:	4090      	lslle	r0, r2
   80c1c:	1ae4      	subs	r4, r4, r3
   80c1e:	bfa2      	ittt	ge
   80c20:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   80c24:	4329      	orrge	r1, r5
   80c26:	bd30      	popge	{r4, r5, pc}
   80c28:	ea6f 0404 	mvn.w	r4, r4
   80c2c:	3c1f      	subs	r4, #31
   80c2e:	da1c      	bge.n	80c6a <__adddf3+0x1d2>
   80c30:	340c      	adds	r4, #12
   80c32:	dc0e      	bgt.n	80c52 <__adddf3+0x1ba>
   80c34:	f104 0414 	add.w	r4, r4, #20
   80c38:	f1c4 0220 	rsb	r2, r4, #32
   80c3c:	fa20 f004 	lsr.w	r0, r0, r4
   80c40:	fa01 f302 	lsl.w	r3, r1, r2
   80c44:	ea40 0003 	orr.w	r0, r0, r3
   80c48:	fa21 f304 	lsr.w	r3, r1, r4
   80c4c:	ea45 0103 	orr.w	r1, r5, r3
   80c50:	bd30      	pop	{r4, r5, pc}
   80c52:	f1c4 040c 	rsb	r4, r4, #12
   80c56:	f1c4 0220 	rsb	r2, r4, #32
   80c5a:	fa20 f002 	lsr.w	r0, r0, r2
   80c5e:	fa01 f304 	lsl.w	r3, r1, r4
   80c62:	ea40 0003 	orr.w	r0, r0, r3
   80c66:	4629      	mov	r1, r5
   80c68:	bd30      	pop	{r4, r5, pc}
   80c6a:	fa21 f004 	lsr.w	r0, r1, r4
   80c6e:	4629      	mov	r1, r5
   80c70:	bd30      	pop	{r4, r5, pc}
   80c72:	f094 0f00 	teq	r4, #0
   80c76:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   80c7a:	bf06      	itte	eq
   80c7c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   80c80:	3401      	addeq	r4, #1
   80c82:	3d01      	subne	r5, #1
   80c84:	e74e      	b.n	80b24 <__adddf3+0x8c>
   80c86:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   80c8a:	bf18      	it	ne
   80c8c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   80c90:	d029      	beq.n	80ce6 <__adddf3+0x24e>
   80c92:	ea94 0f05 	teq	r4, r5
   80c96:	bf08      	it	eq
   80c98:	ea90 0f02 	teqeq	r0, r2
   80c9c:	d005      	beq.n	80caa <__adddf3+0x212>
   80c9e:	ea54 0c00 	orrs.w	ip, r4, r0
   80ca2:	bf04      	itt	eq
   80ca4:	4619      	moveq	r1, r3
   80ca6:	4610      	moveq	r0, r2
   80ca8:	bd30      	pop	{r4, r5, pc}
   80caa:	ea91 0f03 	teq	r1, r3
   80cae:	bf1e      	ittt	ne
   80cb0:	2100      	movne	r1, #0
   80cb2:	2000      	movne	r0, #0
   80cb4:	bd30      	popne	{r4, r5, pc}
   80cb6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   80cba:	d105      	bne.n	80cc8 <__adddf3+0x230>
   80cbc:	0040      	lsls	r0, r0, #1
   80cbe:	4149      	adcs	r1, r1
   80cc0:	bf28      	it	cs
   80cc2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   80cc6:	bd30      	pop	{r4, r5, pc}
   80cc8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   80ccc:	bf3c      	itt	cc
   80cce:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   80cd2:	bd30      	popcc	{r4, r5, pc}
   80cd4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   80cd8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   80cdc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   80ce0:	f04f 0000 	mov.w	r0, #0
   80ce4:	bd30      	pop	{r4, r5, pc}
   80ce6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   80cea:	bf1a      	itte	ne
   80cec:	4619      	movne	r1, r3
   80cee:	4610      	movne	r0, r2
   80cf0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   80cf4:	bf1c      	itt	ne
   80cf6:	460b      	movne	r3, r1
   80cf8:	4602      	movne	r2, r0
   80cfa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   80cfe:	bf06      	itte	eq
   80d00:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   80d04:	ea91 0f03 	teqeq	r1, r3
   80d08:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   80d0c:	bd30      	pop	{r4, r5, pc}
   80d0e:	bf00      	nop

00080d10 <__aeabi_ui2d>:
   80d10:	f090 0f00 	teq	r0, #0
   80d14:	bf04      	itt	eq
   80d16:	2100      	moveq	r1, #0
   80d18:	4770      	bxeq	lr
   80d1a:	b530      	push	{r4, r5, lr}
   80d1c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   80d20:	f104 0432 	add.w	r4, r4, #50	; 0x32
   80d24:	f04f 0500 	mov.w	r5, #0
   80d28:	f04f 0100 	mov.w	r1, #0
   80d2c:	e750      	b.n	80bd0 <__adddf3+0x138>
   80d2e:	bf00      	nop

00080d30 <__aeabi_i2d>:
   80d30:	f090 0f00 	teq	r0, #0
   80d34:	bf04      	itt	eq
   80d36:	2100      	moveq	r1, #0
   80d38:	4770      	bxeq	lr
   80d3a:	b530      	push	{r4, r5, lr}
   80d3c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   80d40:	f104 0432 	add.w	r4, r4, #50	; 0x32
   80d44:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   80d48:	bf48      	it	mi
   80d4a:	4240      	negmi	r0, r0
   80d4c:	f04f 0100 	mov.w	r1, #0
   80d50:	e73e      	b.n	80bd0 <__adddf3+0x138>
   80d52:	bf00      	nop

00080d54 <__aeabi_f2d>:
   80d54:	0042      	lsls	r2, r0, #1
   80d56:	ea4f 01e2 	mov.w	r1, r2, asr #3
   80d5a:	ea4f 0131 	mov.w	r1, r1, rrx
   80d5e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   80d62:	bf1f      	itttt	ne
   80d64:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   80d68:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   80d6c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   80d70:	4770      	bxne	lr
   80d72:	f092 0f00 	teq	r2, #0
   80d76:	bf14      	ite	ne
   80d78:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   80d7c:	4770      	bxeq	lr
   80d7e:	b530      	push	{r4, r5, lr}
   80d80:	f44f 7460 	mov.w	r4, #896	; 0x380
   80d84:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   80d88:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   80d8c:	e720      	b.n	80bd0 <__adddf3+0x138>
   80d8e:	bf00      	nop

00080d90 <__aeabi_ul2d>:
   80d90:	ea50 0201 	orrs.w	r2, r0, r1
   80d94:	bf08      	it	eq
   80d96:	4770      	bxeq	lr
   80d98:	b530      	push	{r4, r5, lr}
   80d9a:	f04f 0500 	mov.w	r5, #0
   80d9e:	e00a      	b.n	80db6 <__aeabi_l2d+0x16>

00080da0 <__aeabi_l2d>:
   80da0:	ea50 0201 	orrs.w	r2, r0, r1
   80da4:	bf08      	it	eq
   80da6:	4770      	bxeq	lr
   80da8:	b530      	push	{r4, r5, lr}
   80daa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   80dae:	d502      	bpl.n	80db6 <__aeabi_l2d+0x16>
   80db0:	4240      	negs	r0, r0
   80db2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   80db6:	f44f 6480 	mov.w	r4, #1024	; 0x400
   80dba:	f104 0432 	add.w	r4, r4, #50	; 0x32
   80dbe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   80dc2:	f43f aedc 	beq.w	80b7e <__adddf3+0xe6>
   80dc6:	f04f 0203 	mov.w	r2, #3
   80dca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   80dce:	bf18      	it	ne
   80dd0:	3203      	addne	r2, #3
   80dd2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   80dd6:	bf18      	it	ne
   80dd8:	3203      	addne	r2, #3
   80dda:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   80dde:	f1c2 0320 	rsb	r3, r2, #32
   80de2:	fa00 fc03 	lsl.w	ip, r0, r3
   80de6:	fa20 f002 	lsr.w	r0, r0, r2
   80dea:	fa01 fe03 	lsl.w	lr, r1, r3
   80dee:	ea40 000e 	orr.w	r0, r0, lr
   80df2:	fa21 f102 	lsr.w	r1, r1, r2
   80df6:	4414      	add	r4, r2
   80df8:	e6c1      	b.n	80b7e <__adddf3+0xe6>
   80dfa:	bf00      	nop

00080dfc <__aeabi_dmul>:
   80dfc:	b570      	push	{r4, r5, r6, lr}
   80dfe:	f04f 0cff 	mov.w	ip, #255	; 0xff
   80e02:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   80e06:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   80e0a:	bf1d      	ittte	ne
   80e0c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   80e10:	ea94 0f0c 	teqne	r4, ip
   80e14:	ea95 0f0c 	teqne	r5, ip
   80e18:	f000 f8de 	bleq	80fd8 <__aeabi_dmul+0x1dc>
   80e1c:	442c      	add	r4, r5
   80e1e:	ea81 0603 	eor.w	r6, r1, r3
   80e22:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   80e26:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   80e2a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   80e2e:	bf18      	it	ne
   80e30:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   80e34:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   80e38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   80e3c:	d038      	beq.n	80eb0 <__aeabi_dmul+0xb4>
   80e3e:	fba0 ce02 	umull	ip, lr, r0, r2
   80e42:	f04f 0500 	mov.w	r5, #0
   80e46:	fbe1 e502 	umlal	lr, r5, r1, r2
   80e4a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   80e4e:	fbe0 e503 	umlal	lr, r5, r0, r3
   80e52:	f04f 0600 	mov.w	r6, #0
   80e56:	fbe1 5603 	umlal	r5, r6, r1, r3
   80e5a:	f09c 0f00 	teq	ip, #0
   80e5e:	bf18      	it	ne
   80e60:	f04e 0e01 	orrne.w	lr, lr, #1
   80e64:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   80e68:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   80e6c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   80e70:	d204      	bcs.n	80e7c <__aeabi_dmul+0x80>
   80e72:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   80e76:	416d      	adcs	r5, r5
   80e78:	eb46 0606 	adc.w	r6, r6, r6
   80e7c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   80e80:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   80e84:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   80e88:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   80e8c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   80e90:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   80e94:	bf88      	it	hi
   80e96:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   80e9a:	d81e      	bhi.n	80eda <__aeabi_dmul+0xde>
   80e9c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   80ea0:	bf08      	it	eq
   80ea2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   80ea6:	f150 0000 	adcs.w	r0, r0, #0
   80eaa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   80eae:	bd70      	pop	{r4, r5, r6, pc}
   80eb0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   80eb4:	ea46 0101 	orr.w	r1, r6, r1
   80eb8:	ea40 0002 	orr.w	r0, r0, r2
   80ebc:	ea81 0103 	eor.w	r1, r1, r3
   80ec0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   80ec4:	bfc2      	ittt	gt
   80ec6:	ebd4 050c 	rsbsgt	r5, r4, ip
   80eca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   80ece:	bd70      	popgt	{r4, r5, r6, pc}
   80ed0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   80ed4:	f04f 0e00 	mov.w	lr, #0
   80ed8:	3c01      	subs	r4, #1
   80eda:	f300 80ab 	bgt.w	81034 <__aeabi_dmul+0x238>
   80ede:	f114 0f36 	cmn.w	r4, #54	; 0x36
   80ee2:	bfde      	ittt	le
   80ee4:	2000      	movle	r0, #0
   80ee6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   80eea:	bd70      	pople	{r4, r5, r6, pc}
   80eec:	f1c4 0400 	rsb	r4, r4, #0
   80ef0:	3c20      	subs	r4, #32
   80ef2:	da35      	bge.n	80f60 <__aeabi_dmul+0x164>
   80ef4:	340c      	adds	r4, #12
   80ef6:	dc1b      	bgt.n	80f30 <__aeabi_dmul+0x134>
   80ef8:	f104 0414 	add.w	r4, r4, #20
   80efc:	f1c4 0520 	rsb	r5, r4, #32
   80f00:	fa00 f305 	lsl.w	r3, r0, r5
   80f04:	fa20 f004 	lsr.w	r0, r0, r4
   80f08:	fa01 f205 	lsl.w	r2, r1, r5
   80f0c:	ea40 0002 	orr.w	r0, r0, r2
   80f10:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   80f14:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   80f18:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   80f1c:	fa21 f604 	lsr.w	r6, r1, r4
   80f20:	eb42 0106 	adc.w	r1, r2, r6
   80f24:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   80f28:	bf08      	it	eq
   80f2a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   80f2e:	bd70      	pop	{r4, r5, r6, pc}
   80f30:	f1c4 040c 	rsb	r4, r4, #12
   80f34:	f1c4 0520 	rsb	r5, r4, #32
   80f38:	fa00 f304 	lsl.w	r3, r0, r4
   80f3c:	fa20 f005 	lsr.w	r0, r0, r5
   80f40:	fa01 f204 	lsl.w	r2, r1, r4
   80f44:	ea40 0002 	orr.w	r0, r0, r2
   80f48:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   80f4c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   80f50:	f141 0100 	adc.w	r1, r1, #0
   80f54:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   80f58:	bf08      	it	eq
   80f5a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   80f5e:	bd70      	pop	{r4, r5, r6, pc}
   80f60:	f1c4 0520 	rsb	r5, r4, #32
   80f64:	fa00 f205 	lsl.w	r2, r0, r5
   80f68:	ea4e 0e02 	orr.w	lr, lr, r2
   80f6c:	fa20 f304 	lsr.w	r3, r0, r4
   80f70:	fa01 f205 	lsl.w	r2, r1, r5
   80f74:	ea43 0302 	orr.w	r3, r3, r2
   80f78:	fa21 f004 	lsr.w	r0, r1, r4
   80f7c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   80f80:	fa21 f204 	lsr.w	r2, r1, r4
   80f84:	ea20 0002 	bic.w	r0, r0, r2
   80f88:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   80f8c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   80f90:	bf08      	it	eq
   80f92:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   80f96:	bd70      	pop	{r4, r5, r6, pc}
   80f98:	f094 0f00 	teq	r4, #0
   80f9c:	d10f      	bne.n	80fbe <__aeabi_dmul+0x1c2>
   80f9e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   80fa2:	0040      	lsls	r0, r0, #1
   80fa4:	eb41 0101 	adc.w	r1, r1, r1
   80fa8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   80fac:	bf08      	it	eq
   80fae:	3c01      	subeq	r4, #1
   80fb0:	d0f7      	beq.n	80fa2 <__aeabi_dmul+0x1a6>
   80fb2:	ea41 0106 	orr.w	r1, r1, r6
   80fb6:	f095 0f00 	teq	r5, #0
   80fba:	bf18      	it	ne
   80fbc:	4770      	bxne	lr
   80fbe:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   80fc2:	0052      	lsls	r2, r2, #1
   80fc4:	eb43 0303 	adc.w	r3, r3, r3
   80fc8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   80fcc:	bf08      	it	eq
   80fce:	3d01      	subeq	r5, #1
   80fd0:	d0f7      	beq.n	80fc2 <__aeabi_dmul+0x1c6>
   80fd2:	ea43 0306 	orr.w	r3, r3, r6
   80fd6:	4770      	bx	lr
   80fd8:	ea94 0f0c 	teq	r4, ip
   80fdc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   80fe0:	bf18      	it	ne
   80fe2:	ea95 0f0c 	teqne	r5, ip
   80fe6:	d00c      	beq.n	81002 <__aeabi_dmul+0x206>
   80fe8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   80fec:	bf18      	it	ne
   80fee:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   80ff2:	d1d1      	bne.n	80f98 <__aeabi_dmul+0x19c>
   80ff4:	ea81 0103 	eor.w	r1, r1, r3
   80ff8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   80ffc:	f04f 0000 	mov.w	r0, #0
   81000:	bd70      	pop	{r4, r5, r6, pc}
   81002:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   81006:	bf06      	itte	eq
   81008:	4610      	moveq	r0, r2
   8100a:	4619      	moveq	r1, r3
   8100c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   81010:	d019      	beq.n	81046 <__aeabi_dmul+0x24a>
   81012:	ea94 0f0c 	teq	r4, ip
   81016:	d102      	bne.n	8101e <__aeabi_dmul+0x222>
   81018:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   8101c:	d113      	bne.n	81046 <__aeabi_dmul+0x24a>
   8101e:	ea95 0f0c 	teq	r5, ip
   81022:	d105      	bne.n	81030 <__aeabi_dmul+0x234>
   81024:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   81028:	bf1c      	itt	ne
   8102a:	4610      	movne	r0, r2
   8102c:	4619      	movne	r1, r3
   8102e:	d10a      	bne.n	81046 <__aeabi_dmul+0x24a>
   81030:	ea81 0103 	eor.w	r1, r1, r3
   81034:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   81038:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8103c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   81040:	f04f 0000 	mov.w	r0, #0
   81044:	bd70      	pop	{r4, r5, r6, pc}
   81046:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8104a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   8104e:	bd70      	pop	{r4, r5, r6, pc}

00081050 <__aeabi_ddiv>:
   81050:	b570      	push	{r4, r5, r6, lr}
   81052:	f04f 0cff 	mov.w	ip, #255	; 0xff
   81056:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8105a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8105e:	bf1d      	ittte	ne
   81060:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   81064:	ea94 0f0c 	teqne	r4, ip
   81068:	ea95 0f0c 	teqne	r5, ip
   8106c:	f000 f8a7 	bleq	811be <__aeabi_ddiv+0x16e>
   81070:	eba4 0405 	sub.w	r4, r4, r5
   81074:	ea81 0e03 	eor.w	lr, r1, r3
   81078:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8107c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   81080:	f000 8088 	beq.w	81194 <__aeabi_ddiv+0x144>
   81084:	ea4f 3303 	mov.w	r3, r3, lsl #12
   81088:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   8108c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   81090:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   81094:	ea4f 2202 	mov.w	r2, r2, lsl #8
   81098:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   8109c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   810a0:	ea4f 2600 	mov.w	r6, r0, lsl #8
   810a4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   810a8:	429d      	cmp	r5, r3
   810aa:	bf08      	it	eq
   810ac:	4296      	cmpeq	r6, r2
   810ae:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   810b2:	f504 7440 	add.w	r4, r4, #768	; 0x300
   810b6:	d202      	bcs.n	810be <__aeabi_ddiv+0x6e>
   810b8:	085b      	lsrs	r3, r3, #1
   810ba:	ea4f 0232 	mov.w	r2, r2, rrx
   810be:	1ab6      	subs	r6, r6, r2
   810c0:	eb65 0503 	sbc.w	r5, r5, r3
   810c4:	085b      	lsrs	r3, r3, #1
   810c6:	ea4f 0232 	mov.w	r2, r2, rrx
   810ca:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   810ce:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   810d2:	ebb6 0e02 	subs.w	lr, r6, r2
   810d6:	eb75 0e03 	sbcs.w	lr, r5, r3
   810da:	bf22      	ittt	cs
   810dc:	1ab6      	subcs	r6, r6, r2
   810de:	4675      	movcs	r5, lr
   810e0:	ea40 000c 	orrcs.w	r0, r0, ip
   810e4:	085b      	lsrs	r3, r3, #1
   810e6:	ea4f 0232 	mov.w	r2, r2, rrx
   810ea:	ebb6 0e02 	subs.w	lr, r6, r2
   810ee:	eb75 0e03 	sbcs.w	lr, r5, r3
   810f2:	bf22      	ittt	cs
   810f4:	1ab6      	subcs	r6, r6, r2
   810f6:	4675      	movcs	r5, lr
   810f8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   810fc:	085b      	lsrs	r3, r3, #1
   810fe:	ea4f 0232 	mov.w	r2, r2, rrx
   81102:	ebb6 0e02 	subs.w	lr, r6, r2
   81106:	eb75 0e03 	sbcs.w	lr, r5, r3
   8110a:	bf22      	ittt	cs
   8110c:	1ab6      	subcs	r6, r6, r2
   8110e:	4675      	movcs	r5, lr
   81110:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   81114:	085b      	lsrs	r3, r3, #1
   81116:	ea4f 0232 	mov.w	r2, r2, rrx
   8111a:	ebb6 0e02 	subs.w	lr, r6, r2
   8111e:	eb75 0e03 	sbcs.w	lr, r5, r3
   81122:	bf22      	ittt	cs
   81124:	1ab6      	subcs	r6, r6, r2
   81126:	4675      	movcs	r5, lr
   81128:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   8112c:	ea55 0e06 	orrs.w	lr, r5, r6
   81130:	d018      	beq.n	81164 <__aeabi_ddiv+0x114>
   81132:	ea4f 1505 	mov.w	r5, r5, lsl #4
   81136:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   8113a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   8113e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   81142:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   81146:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   8114a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   8114e:	d1c0      	bne.n	810d2 <__aeabi_ddiv+0x82>
   81150:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   81154:	d10b      	bne.n	8116e <__aeabi_ddiv+0x11e>
   81156:	ea41 0100 	orr.w	r1, r1, r0
   8115a:	f04f 0000 	mov.w	r0, #0
   8115e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   81162:	e7b6      	b.n	810d2 <__aeabi_ddiv+0x82>
   81164:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   81168:	bf04      	itt	eq
   8116a:	4301      	orreq	r1, r0
   8116c:	2000      	moveq	r0, #0
   8116e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   81172:	bf88      	it	hi
   81174:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   81178:	f63f aeaf 	bhi.w	80eda <__aeabi_dmul+0xde>
   8117c:	ebb5 0c03 	subs.w	ip, r5, r3
   81180:	bf04      	itt	eq
   81182:	ebb6 0c02 	subseq.w	ip, r6, r2
   81186:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8118a:	f150 0000 	adcs.w	r0, r0, #0
   8118e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   81192:	bd70      	pop	{r4, r5, r6, pc}
   81194:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   81198:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   8119c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   811a0:	bfc2      	ittt	gt
   811a2:	ebd4 050c 	rsbsgt	r5, r4, ip
   811a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   811aa:	bd70      	popgt	{r4, r5, r6, pc}
   811ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   811b0:	f04f 0e00 	mov.w	lr, #0
   811b4:	3c01      	subs	r4, #1
   811b6:	e690      	b.n	80eda <__aeabi_dmul+0xde>
   811b8:	ea45 0e06 	orr.w	lr, r5, r6
   811bc:	e68d      	b.n	80eda <__aeabi_dmul+0xde>
   811be:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   811c2:	ea94 0f0c 	teq	r4, ip
   811c6:	bf08      	it	eq
   811c8:	ea95 0f0c 	teqeq	r5, ip
   811cc:	f43f af3b 	beq.w	81046 <__aeabi_dmul+0x24a>
   811d0:	ea94 0f0c 	teq	r4, ip
   811d4:	d10a      	bne.n	811ec <__aeabi_ddiv+0x19c>
   811d6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   811da:	f47f af34 	bne.w	81046 <__aeabi_dmul+0x24a>
   811de:	ea95 0f0c 	teq	r5, ip
   811e2:	f47f af25 	bne.w	81030 <__aeabi_dmul+0x234>
   811e6:	4610      	mov	r0, r2
   811e8:	4619      	mov	r1, r3
   811ea:	e72c      	b.n	81046 <__aeabi_dmul+0x24a>
   811ec:	ea95 0f0c 	teq	r5, ip
   811f0:	d106      	bne.n	81200 <__aeabi_ddiv+0x1b0>
   811f2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   811f6:	f43f aefd 	beq.w	80ff4 <__aeabi_dmul+0x1f8>
   811fa:	4610      	mov	r0, r2
   811fc:	4619      	mov	r1, r3
   811fe:	e722      	b.n	81046 <__aeabi_dmul+0x24a>
   81200:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   81204:	bf18      	it	ne
   81206:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8120a:	f47f aec5 	bne.w	80f98 <__aeabi_dmul+0x19c>
   8120e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   81212:	f47f af0d 	bne.w	81030 <__aeabi_dmul+0x234>
   81216:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   8121a:	f47f aeeb 	bne.w	80ff4 <__aeabi_dmul+0x1f8>
   8121e:	e712      	b.n	81046 <__aeabi_dmul+0x24a>

00081220 <__aeabi_d2iz>:
   81220:	ea4f 0241 	mov.w	r2, r1, lsl #1
   81224:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   81228:	d215      	bcs.n	81256 <__aeabi_d2iz+0x36>
   8122a:	d511      	bpl.n	81250 <__aeabi_d2iz+0x30>
   8122c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   81230:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   81234:	d912      	bls.n	8125c <__aeabi_d2iz+0x3c>
   81236:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   8123a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   8123e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   81242:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   81246:	fa23 f002 	lsr.w	r0, r3, r2
   8124a:	bf18      	it	ne
   8124c:	4240      	negne	r0, r0
   8124e:	4770      	bx	lr
   81250:	f04f 0000 	mov.w	r0, #0
   81254:	4770      	bx	lr
   81256:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   8125a:	d105      	bne.n	81268 <__aeabi_d2iz+0x48>
   8125c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   81260:	bf08      	it	eq
   81262:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   81266:	4770      	bx	lr
   81268:	f04f 0000 	mov.w	r0, #0
   8126c:	4770      	bx	lr
   8126e:	bf00      	nop

00081270 <__aeabi_d2uiz>:
   81270:	004a      	lsls	r2, r1, #1
   81272:	d211      	bcs.n	81298 <__aeabi_d2uiz+0x28>
   81274:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   81278:	d211      	bcs.n	8129e <__aeabi_d2uiz+0x2e>
   8127a:	d50d      	bpl.n	81298 <__aeabi_d2uiz+0x28>
   8127c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   81280:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   81284:	d40e      	bmi.n	812a4 <__aeabi_d2uiz+0x34>
   81286:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   8128a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   8128e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   81292:	fa23 f002 	lsr.w	r0, r3, r2
   81296:	4770      	bx	lr
   81298:	f04f 0000 	mov.w	r0, #0
   8129c:	4770      	bx	lr
   8129e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   812a2:	d102      	bne.n	812aa <__aeabi_d2uiz+0x3a>
   812a4:	f04f 30ff 	mov.w	r0, #4294967295
   812a8:	4770      	bx	lr
   812aa:	f04f 0000 	mov.w	r0, #0
   812ae:	4770      	bx	lr

000812b0 <__aeabi_uldivmod>:
   812b0:	b94b      	cbnz	r3, 812c6 <__aeabi_uldivmod+0x16>
   812b2:	b942      	cbnz	r2, 812c6 <__aeabi_uldivmod+0x16>
   812b4:	2900      	cmp	r1, #0
   812b6:	bf08      	it	eq
   812b8:	2800      	cmpeq	r0, #0
   812ba:	d002      	beq.n	812c2 <__aeabi_uldivmod+0x12>
   812bc:	f04f 31ff 	mov.w	r1, #4294967295
   812c0:	4608      	mov	r0, r1
   812c2:	f000 b83b 	b.w	8133c <__aeabi_idiv0>
   812c6:	b082      	sub	sp, #8
   812c8:	46ec      	mov	ip, sp
   812ca:	e92d 5000 	stmdb	sp!, {ip, lr}
   812ce:	f000 f81d 	bl	8130c <__gnu_uldivmod_helper>
   812d2:	f8dd e004 	ldr.w	lr, [sp, #4]
   812d6:	b002      	add	sp, #8
   812d8:	bc0c      	pop	{r2, r3}
   812da:	4770      	bx	lr

000812dc <__gnu_ldivmod_helper>:
   812dc:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   812e0:	9e08      	ldr	r6, [sp, #32]
   812e2:	4614      	mov	r4, r2
   812e4:	461d      	mov	r5, r3
   812e6:	4680      	mov	r8, r0
   812e8:	4689      	mov	r9, r1
   812ea:	f000 f829 	bl	81340 <__divdi3>
   812ee:	fb04 f301 	mul.w	r3, r4, r1
   812f2:	fba4 ab00 	umull	sl, fp, r4, r0
   812f6:	fb00 3205 	mla	r2, r0, r5, r3
   812fa:	4493      	add	fp, r2
   812fc:	ebb8 080a 	subs.w	r8, r8, sl
   81300:	eb69 090b 	sbc.w	r9, r9, fp
   81304:	e9c6 8900 	strd	r8, r9, [r6]
   81308:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

0008130c <__gnu_uldivmod_helper>:
   8130c:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   81310:	9e08      	ldr	r6, [sp, #32]
   81312:	4614      	mov	r4, r2
   81314:	461d      	mov	r5, r3
   81316:	4680      	mov	r8, r0
   81318:	4689      	mov	r9, r1
   8131a:	f000 f961 	bl	815e0 <__udivdi3>
   8131e:	fb00 f505 	mul.w	r5, r0, r5
   81322:	fba0 ab04 	umull	sl, fp, r0, r4
   81326:	fb04 5401 	mla	r4, r4, r1, r5
   8132a:	44a3      	add	fp, r4
   8132c:	ebb8 080a 	subs.w	r8, r8, sl
   81330:	eb69 090b 	sbc.w	r9, r9, fp
   81334:	e9c6 8900 	strd	r8, r9, [r6]
   81338:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

0008133c <__aeabi_idiv0>:
   8133c:	4770      	bx	lr
   8133e:	bf00      	nop

00081340 <__divdi3>:
   81340:	2900      	cmp	r1, #0
   81342:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   81346:	f2c0 80a1 	blt.w	8148c <__divdi3+0x14c>
   8134a:	2400      	movs	r4, #0
   8134c:	2b00      	cmp	r3, #0
   8134e:	f2c0 8098 	blt.w	81482 <__divdi3+0x142>
   81352:	4615      	mov	r5, r2
   81354:	4606      	mov	r6, r0
   81356:	460f      	mov	r7, r1
   81358:	2b00      	cmp	r3, #0
   8135a:	d13f      	bne.n	813dc <__divdi3+0x9c>
   8135c:	428a      	cmp	r2, r1
   8135e:	d958      	bls.n	81412 <__divdi3+0xd2>
   81360:	fab2 f382 	clz	r3, r2
   81364:	b14b      	cbz	r3, 8137a <__divdi3+0x3a>
   81366:	f1c3 0220 	rsb	r2, r3, #32
   8136a:	fa01 f703 	lsl.w	r7, r1, r3
   8136e:	fa20 f202 	lsr.w	r2, r0, r2
   81372:	409d      	lsls	r5, r3
   81374:	fa00 f603 	lsl.w	r6, r0, r3
   81378:	4317      	orrs	r7, r2
   8137a:	0c29      	lsrs	r1, r5, #16
   8137c:	fbb7 f2f1 	udiv	r2, r7, r1
   81380:	fb01 7712 	mls	r7, r1, r2, r7
   81384:	b2a8      	uxth	r0, r5
   81386:	fb00 f302 	mul.w	r3, r0, r2
   8138a:	ea4f 4c16 	mov.w	ip, r6, lsr #16
   8138e:	ea4c 4707 	orr.w	r7, ip, r7, lsl #16
   81392:	42bb      	cmp	r3, r7
   81394:	d909      	bls.n	813aa <__divdi3+0x6a>
   81396:	197f      	adds	r7, r7, r5
   81398:	f102 3cff 	add.w	ip, r2, #4294967295
   8139c:	f080 8105 	bcs.w	815aa <__divdi3+0x26a>
   813a0:	42bb      	cmp	r3, r7
   813a2:	f240 8102 	bls.w	815aa <__divdi3+0x26a>
   813a6:	3a02      	subs	r2, #2
   813a8:	442f      	add	r7, r5
   813aa:	1aff      	subs	r7, r7, r3
   813ac:	fbb7 f3f1 	udiv	r3, r7, r1
   813b0:	fb01 7113 	mls	r1, r1, r3, r7
   813b4:	fb00 f003 	mul.w	r0, r0, r3
   813b8:	b2b6      	uxth	r6, r6
   813ba:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
   813be:	4288      	cmp	r0, r1
   813c0:	d908      	bls.n	813d4 <__divdi3+0x94>
   813c2:	1949      	adds	r1, r1, r5
   813c4:	f103 37ff 	add.w	r7, r3, #4294967295
   813c8:	f080 80f1 	bcs.w	815ae <__divdi3+0x26e>
   813cc:	4288      	cmp	r0, r1
   813ce:	f240 80ee 	bls.w	815ae <__divdi3+0x26e>
   813d2:	3b02      	subs	r3, #2
   813d4:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   813d8:	2300      	movs	r3, #0
   813da:	e003      	b.n	813e4 <__divdi3+0xa4>
   813dc:	428b      	cmp	r3, r1
   813de:	d90a      	bls.n	813f6 <__divdi3+0xb6>
   813e0:	2300      	movs	r3, #0
   813e2:	461a      	mov	r2, r3
   813e4:	4610      	mov	r0, r2
   813e6:	4619      	mov	r1, r3
   813e8:	b114      	cbz	r4, 813f0 <__divdi3+0xb0>
   813ea:	4240      	negs	r0, r0
   813ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   813f0:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   813f4:	4770      	bx	lr
   813f6:	fab3 f883 	clz	r8, r3
   813fa:	f1b8 0f00 	cmp.w	r8, #0
   813fe:	f040 8088 	bne.w	81512 <__divdi3+0x1d2>
   81402:	428b      	cmp	r3, r1
   81404:	d302      	bcc.n	8140c <__divdi3+0xcc>
   81406:	4282      	cmp	r2, r0
   81408:	f200 80e2 	bhi.w	815d0 <__divdi3+0x290>
   8140c:	2300      	movs	r3, #0
   8140e:	2201      	movs	r2, #1
   81410:	e7e8      	b.n	813e4 <__divdi3+0xa4>
   81412:	b912      	cbnz	r2, 8141a <__divdi3+0xda>
   81414:	2301      	movs	r3, #1
   81416:	fbb3 f5f2 	udiv	r5, r3, r2
   8141a:	fab5 f285 	clz	r2, r5
   8141e:	2a00      	cmp	r2, #0
   81420:	d13a      	bne.n	81498 <__divdi3+0x158>
   81422:	1b7f      	subs	r7, r7, r5
   81424:	0c28      	lsrs	r0, r5, #16
   81426:	fa1f fc85 	uxth.w	ip, r5
   8142a:	2301      	movs	r3, #1
   8142c:	fbb7 f1f0 	udiv	r1, r7, r0
   81430:	fb00 7711 	mls	r7, r0, r1, r7
   81434:	fb0c f201 	mul.w	r2, ip, r1
   81438:	ea4f 4816 	mov.w	r8, r6, lsr #16
   8143c:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
   81440:	42ba      	cmp	r2, r7
   81442:	d907      	bls.n	81454 <__divdi3+0x114>
   81444:	197f      	adds	r7, r7, r5
   81446:	f101 38ff 	add.w	r8, r1, #4294967295
   8144a:	d202      	bcs.n	81452 <__divdi3+0x112>
   8144c:	42ba      	cmp	r2, r7
   8144e:	f200 80c4 	bhi.w	815da <__divdi3+0x29a>
   81452:	4641      	mov	r1, r8
   81454:	1abf      	subs	r7, r7, r2
   81456:	fbb7 f2f0 	udiv	r2, r7, r0
   8145a:	fb00 7012 	mls	r0, r0, r2, r7
   8145e:	fb0c fc02 	mul.w	ip, ip, r2
   81462:	b2b6      	uxth	r6, r6
   81464:	ea46 4000 	orr.w	r0, r6, r0, lsl #16
   81468:	4584      	cmp	ip, r0
   8146a:	d907      	bls.n	8147c <__divdi3+0x13c>
   8146c:	1940      	adds	r0, r0, r5
   8146e:	f102 37ff 	add.w	r7, r2, #4294967295
   81472:	d202      	bcs.n	8147a <__divdi3+0x13a>
   81474:	4584      	cmp	ip, r0
   81476:	f200 80ae 	bhi.w	815d6 <__divdi3+0x296>
   8147a:	463a      	mov	r2, r7
   8147c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   81480:	e7b0      	b.n	813e4 <__divdi3+0xa4>
   81482:	43e4      	mvns	r4, r4
   81484:	4252      	negs	r2, r2
   81486:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   8148a:	e762      	b.n	81352 <__divdi3+0x12>
   8148c:	4240      	negs	r0, r0
   8148e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   81492:	f04f 34ff 	mov.w	r4, #4294967295
   81496:	e759      	b.n	8134c <__divdi3+0xc>
   81498:	4095      	lsls	r5, r2
   8149a:	f1c2 0920 	rsb	r9, r2, #32
   8149e:	fa27 f109 	lsr.w	r1, r7, r9
   814a2:	fa26 f909 	lsr.w	r9, r6, r9
   814a6:	4097      	lsls	r7, r2
   814a8:	0c28      	lsrs	r0, r5, #16
   814aa:	fbb1 f8f0 	udiv	r8, r1, r0
   814ae:	fb00 1118 	mls	r1, r0, r8, r1
   814b2:	fa1f fc85 	uxth.w	ip, r5
   814b6:	fb0c f308 	mul.w	r3, ip, r8
   814ba:	ea49 0907 	orr.w	r9, r9, r7
   814be:	ea4f 4719 	mov.w	r7, r9, lsr #16
   814c2:	ea47 4101 	orr.w	r1, r7, r1, lsl #16
   814c6:	428b      	cmp	r3, r1
   814c8:	fa06 f602 	lsl.w	r6, r6, r2
   814cc:	d908      	bls.n	814e0 <__divdi3+0x1a0>
   814ce:	1949      	adds	r1, r1, r5
   814d0:	f108 32ff 	add.w	r2, r8, #4294967295
   814d4:	d27a      	bcs.n	815cc <__divdi3+0x28c>
   814d6:	428b      	cmp	r3, r1
   814d8:	d978      	bls.n	815cc <__divdi3+0x28c>
   814da:	f1a8 0802 	sub.w	r8, r8, #2
   814de:	4429      	add	r1, r5
   814e0:	1ac9      	subs	r1, r1, r3
   814e2:	fbb1 f3f0 	udiv	r3, r1, r0
   814e6:	fb00 1713 	mls	r7, r0, r3, r1
   814ea:	fb0c f203 	mul.w	r2, ip, r3
   814ee:	fa1f f989 	uxth.w	r9, r9
   814f2:	ea49 4707 	orr.w	r7, r9, r7, lsl #16
   814f6:	42ba      	cmp	r2, r7
   814f8:	d907      	bls.n	8150a <__divdi3+0x1ca>
   814fa:	197f      	adds	r7, r7, r5
   814fc:	f103 31ff 	add.w	r1, r3, #4294967295
   81500:	d260      	bcs.n	815c4 <__divdi3+0x284>
   81502:	42ba      	cmp	r2, r7
   81504:	d95e      	bls.n	815c4 <__divdi3+0x284>
   81506:	3b02      	subs	r3, #2
   81508:	442f      	add	r7, r5
   8150a:	1abf      	subs	r7, r7, r2
   8150c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   81510:	e78c      	b.n	8142c <__divdi3+0xec>
   81512:	f1c8 0220 	rsb	r2, r8, #32
   81516:	fa25 f102 	lsr.w	r1, r5, r2
   8151a:	fa03 fc08 	lsl.w	ip, r3, r8
   8151e:	fa27 f302 	lsr.w	r3, r7, r2
   81522:	fa20 f202 	lsr.w	r2, r0, r2
   81526:	fa07 f708 	lsl.w	r7, r7, r8
   8152a:	ea41 0c0c 	orr.w	ip, r1, ip
   8152e:	ea4f 491c 	mov.w	r9, ip, lsr #16
   81532:	fbb3 f1f9 	udiv	r1, r3, r9
   81536:	fb09 3311 	mls	r3, r9, r1, r3
   8153a:	fa1f fa8c 	uxth.w	sl, ip
   8153e:	fb0a fb01 	mul.w	fp, sl, r1
   81542:	4317      	orrs	r7, r2
   81544:	0c3a      	lsrs	r2, r7, #16
   81546:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   8154a:	459b      	cmp	fp, r3
   8154c:	fa05 f008 	lsl.w	r0, r5, r8
   81550:	d908      	bls.n	81564 <__divdi3+0x224>
   81552:	eb13 030c 	adds.w	r3, r3, ip
   81556:	f101 32ff 	add.w	r2, r1, #4294967295
   8155a:	d235      	bcs.n	815c8 <__divdi3+0x288>
   8155c:	459b      	cmp	fp, r3
   8155e:	d933      	bls.n	815c8 <__divdi3+0x288>
   81560:	3902      	subs	r1, #2
   81562:	4463      	add	r3, ip
   81564:	ebcb 0303 	rsb	r3, fp, r3
   81568:	fbb3 f2f9 	udiv	r2, r3, r9
   8156c:	fb09 3312 	mls	r3, r9, r2, r3
   81570:	fb0a fa02 	mul.w	sl, sl, r2
   81574:	b2bf      	uxth	r7, r7
   81576:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
   8157a:	45ba      	cmp	sl, r7
   8157c:	d908      	bls.n	81590 <__divdi3+0x250>
   8157e:	eb17 070c 	adds.w	r7, r7, ip
   81582:	f102 33ff 	add.w	r3, r2, #4294967295
   81586:	d21b      	bcs.n	815c0 <__divdi3+0x280>
   81588:	45ba      	cmp	sl, r7
   8158a:	d919      	bls.n	815c0 <__divdi3+0x280>
   8158c:	3a02      	subs	r2, #2
   8158e:	4467      	add	r7, ip
   81590:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
   81594:	fba5 0100 	umull	r0, r1, r5, r0
   81598:	ebca 0707 	rsb	r7, sl, r7
   8159c:	428f      	cmp	r7, r1
   8159e:	f04f 0300 	mov.w	r3, #0
   815a2:	d30a      	bcc.n	815ba <__divdi3+0x27a>
   815a4:	d005      	beq.n	815b2 <__divdi3+0x272>
   815a6:	462a      	mov	r2, r5
   815a8:	e71c      	b.n	813e4 <__divdi3+0xa4>
   815aa:	4662      	mov	r2, ip
   815ac:	e6fd      	b.n	813aa <__divdi3+0x6a>
   815ae:	463b      	mov	r3, r7
   815b0:	e710      	b.n	813d4 <__divdi3+0x94>
   815b2:	fa06 f608 	lsl.w	r6, r6, r8
   815b6:	4286      	cmp	r6, r0
   815b8:	d2f5      	bcs.n	815a6 <__divdi3+0x266>
   815ba:	1e6a      	subs	r2, r5, #1
   815bc:	2300      	movs	r3, #0
   815be:	e711      	b.n	813e4 <__divdi3+0xa4>
   815c0:	461a      	mov	r2, r3
   815c2:	e7e5      	b.n	81590 <__divdi3+0x250>
   815c4:	460b      	mov	r3, r1
   815c6:	e7a0      	b.n	8150a <__divdi3+0x1ca>
   815c8:	4611      	mov	r1, r2
   815ca:	e7cb      	b.n	81564 <__divdi3+0x224>
   815cc:	4690      	mov	r8, r2
   815ce:	e787      	b.n	814e0 <__divdi3+0x1a0>
   815d0:	4643      	mov	r3, r8
   815d2:	4642      	mov	r2, r8
   815d4:	e706      	b.n	813e4 <__divdi3+0xa4>
   815d6:	3a02      	subs	r2, #2
   815d8:	e750      	b.n	8147c <__divdi3+0x13c>
   815da:	3902      	subs	r1, #2
   815dc:	442f      	add	r7, r5
   815de:	e739      	b.n	81454 <__divdi3+0x114>

000815e0 <__udivdi3>:
   815e0:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   815e4:	4614      	mov	r4, r2
   815e6:	4605      	mov	r5, r0
   815e8:	460e      	mov	r6, r1
   815ea:	2b00      	cmp	r3, #0
   815ec:	d143      	bne.n	81676 <__udivdi3+0x96>
   815ee:	428a      	cmp	r2, r1
   815f0:	d953      	bls.n	8169a <__udivdi3+0xba>
   815f2:	fab2 f782 	clz	r7, r2
   815f6:	b157      	cbz	r7, 8160e <__udivdi3+0x2e>
   815f8:	f1c7 0620 	rsb	r6, r7, #32
   815fc:	fa20 f606 	lsr.w	r6, r0, r6
   81600:	fa01 f307 	lsl.w	r3, r1, r7
   81604:	fa02 f407 	lsl.w	r4, r2, r7
   81608:	fa00 f507 	lsl.w	r5, r0, r7
   8160c:	431e      	orrs	r6, r3
   8160e:	0c21      	lsrs	r1, r4, #16
   81610:	fbb6 f2f1 	udiv	r2, r6, r1
   81614:	fb01 6612 	mls	r6, r1, r2, r6
   81618:	b2a0      	uxth	r0, r4
   8161a:	fb00 f302 	mul.w	r3, r0, r2
   8161e:	0c2f      	lsrs	r7, r5, #16
   81620:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   81624:	42b3      	cmp	r3, r6
   81626:	d909      	bls.n	8163c <__udivdi3+0x5c>
   81628:	1936      	adds	r6, r6, r4
   8162a:	f102 37ff 	add.w	r7, r2, #4294967295
   8162e:	f080 80fd 	bcs.w	8182c <__udivdi3+0x24c>
   81632:	42b3      	cmp	r3, r6
   81634:	f240 80fa 	bls.w	8182c <__udivdi3+0x24c>
   81638:	3a02      	subs	r2, #2
   8163a:	4426      	add	r6, r4
   8163c:	1af6      	subs	r6, r6, r3
   8163e:	fbb6 f3f1 	udiv	r3, r6, r1
   81642:	fb01 6113 	mls	r1, r1, r3, r6
   81646:	fb00 f003 	mul.w	r0, r0, r3
   8164a:	b2ad      	uxth	r5, r5
   8164c:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
   81650:	4288      	cmp	r0, r1
   81652:	d908      	bls.n	81666 <__udivdi3+0x86>
   81654:	1909      	adds	r1, r1, r4
   81656:	f103 36ff 	add.w	r6, r3, #4294967295
   8165a:	f080 80e9 	bcs.w	81830 <__udivdi3+0x250>
   8165e:	4288      	cmp	r0, r1
   81660:	f240 80e6 	bls.w	81830 <__udivdi3+0x250>
   81664:	3b02      	subs	r3, #2
   81666:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   8166a:	2300      	movs	r3, #0
   8166c:	4610      	mov	r0, r2
   8166e:	4619      	mov	r1, r3
   81670:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   81674:	4770      	bx	lr
   81676:	428b      	cmp	r3, r1
   81678:	d84c      	bhi.n	81714 <__udivdi3+0x134>
   8167a:	fab3 f683 	clz	r6, r3
   8167e:	2e00      	cmp	r6, #0
   81680:	d14f      	bne.n	81722 <__udivdi3+0x142>
   81682:	428b      	cmp	r3, r1
   81684:	d302      	bcc.n	8168c <__udivdi3+0xac>
   81686:	4282      	cmp	r2, r0
   81688:	f200 80dd 	bhi.w	81846 <__udivdi3+0x266>
   8168c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   81690:	2300      	movs	r3, #0
   81692:	2201      	movs	r2, #1
   81694:	4610      	mov	r0, r2
   81696:	4619      	mov	r1, r3
   81698:	4770      	bx	lr
   8169a:	b912      	cbnz	r2, 816a2 <__udivdi3+0xc2>
   8169c:	2401      	movs	r4, #1
   8169e:	fbb4 f4f2 	udiv	r4, r4, r2
   816a2:	fab4 f284 	clz	r2, r4
   816a6:	2a00      	cmp	r2, #0
   816a8:	f040 8082 	bne.w	817b0 <__udivdi3+0x1d0>
   816ac:	1b09      	subs	r1, r1, r4
   816ae:	0c26      	lsrs	r6, r4, #16
   816b0:	b2a7      	uxth	r7, r4
   816b2:	2301      	movs	r3, #1
   816b4:	fbb1 f0f6 	udiv	r0, r1, r6
   816b8:	fb06 1110 	mls	r1, r6, r0, r1
   816bc:	fb07 f200 	mul.w	r2, r7, r0
   816c0:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   816c4:	ea4c 4101 	orr.w	r1, ip, r1, lsl #16
   816c8:	428a      	cmp	r2, r1
   816ca:	d907      	bls.n	816dc <__udivdi3+0xfc>
   816cc:	1909      	adds	r1, r1, r4
   816ce:	f100 3cff 	add.w	ip, r0, #4294967295
   816d2:	d202      	bcs.n	816da <__udivdi3+0xfa>
   816d4:	428a      	cmp	r2, r1
   816d6:	f200 80c8 	bhi.w	8186a <__udivdi3+0x28a>
   816da:	4660      	mov	r0, ip
   816dc:	1a89      	subs	r1, r1, r2
   816de:	fbb1 f2f6 	udiv	r2, r1, r6
   816e2:	fb06 1112 	mls	r1, r6, r2, r1
   816e6:	fb07 f702 	mul.w	r7, r7, r2
   816ea:	b2ad      	uxth	r5, r5
   816ec:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
   816f0:	42af      	cmp	r7, r5
   816f2:	d908      	bls.n	81706 <__udivdi3+0x126>
   816f4:	192c      	adds	r4, r5, r4
   816f6:	f102 31ff 	add.w	r1, r2, #4294967295
   816fa:	f080 809b 	bcs.w	81834 <__udivdi3+0x254>
   816fe:	42a7      	cmp	r7, r4
   81700:	f240 8098 	bls.w	81834 <__udivdi3+0x254>
   81704:	3a02      	subs	r2, #2
   81706:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
   8170a:	4610      	mov	r0, r2
   8170c:	4619      	mov	r1, r3
   8170e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   81712:	4770      	bx	lr
   81714:	2300      	movs	r3, #0
   81716:	461a      	mov	r2, r3
   81718:	4610      	mov	r0, r2
   8171a:	4619      	mov	r1, r3
   8171c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   81720:	4770      	bx	lr
   81722:	f1c6 0520 	rsb	r5, r6, #32
   81726:	fa22 f705 	lsr.w	r7, r2, r5
   8172a:	fa03 f406 	lsl.w	r4, r3, r6
   8172e:	fa21 f305 	lsr.w	r3, r1, r5
   81732:	fa01 fb06 	lsl.w	fp, r1, r6
   81736:	fa20 f505 	lsr.w	r5, r0, r5
   8173a:	433c      	orrs	r4, r7
   8173c:	ea4f 4814 	mov.w	r8, r4, lsr #16
   81740:	fbb3 fcf8 	udiv	ip, r3, r8
   81744:	fb08 331c 	mls	r3, r8, ip, r3
   81748:	fa1f f984 	uxth.w	r9, r4
   8174c:	fb09 fa0c 	mul.w	sl, r9, ip
   81750:	ea45 0b0b 	orr.w	fp, r5, fp
   81754:	ea4f 451b 	mov.w	r5, fp, lsr #16
   81758:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
   8175c:	459a      	cmp	sl, r3
   8175e:	fa02 f206 	lsl.w	r2, r2, r6
   81762:	d904      	bls.n	8176e <__udivdi3+0x18e>
   81764:	191b      	adds	r3, r3, r4
   81766:	f10c 35ff 	add.w	r5, ip, #4294967295
   8176a:	d36f      	bcc.n	8184c <__udivdi3+0x26c>
   8176c:	46ac      	mov	ip, r5
   8176e:	ebca 0303 	rsb	r3, sl, r3
   81772:	fbb3 f5f8 	udiv	r5, r3, r8
   81776:	fb08 3315 	mls	r3, r8, r5, r3
   8177a:	fb09 f905 	mul.w	r9, r9, r5
   8177e:	fa1f fb8b 	uxth.w	fp, fp
   81782:	ea4b 4703 	orr.w	r7, fp, r3, lsl #16
   81786:	45b9      	cmp	r9, r7
   81788:	d904      	bls.n	81794 <__udivdi3+0x1b4>
   8178a:	193f      	adds	r7, r7, r4
   8178c:	f105 33ff 	add.w	r3, r5, #4294967295
   81790:	d362      	bcc.n	81858 <__udivdi3+0x278>
   81792:	461d      	mov	r5, r3
   81794:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
   81798:	fbac 2302 	umull	r2, r3, ip, r2
   8179c:	ebc9 0707 	rsb	r7, r9, r7
   817a0:	429f      	cmp	r7, r3
   817a2:	f04f 0500 	mov.w	r5, #0
   817a6:	d34a      	bcc.n	8183e <__udivdi3+0x25e>
   817a8:	d046      	beq.n	81838 <__udivdi3+0x258>
   817aa:	4662      	mov	r2, ip
   817ac:	462b      	mov	r3, r5
   817ae:	e75d      	b.n	8166c <__udivdi3+0x8c>
   817b0:	4094      	lsls	r4, r2
   817b2:	f1c2 0920 	rsb	r9, r2, #32
   817b6:	fa21 fc09 	lsr.w	ip, r1, r9
   817ba:	4091      	lsls	r1, r2
   817bc:	fa20 f909 	lsr.w	r9, r0, r9
   817c0:	0c26      	lsrs	r6, r4, #16
   817c2:	fbbc f8f6 	udiv	r8, ip, r6
   817c6:	fb06 cc18 	mls	ip, r6, r8, ip
   817ca:	b2a7      	uxth	r7, r4
   817cc:	fb07 f308 	mul.w	r3, r7, r8
   817d0:	ea49 0901 	orr.w	r9, r9, r1
   817d4:	ea4f 4119 	mov.w	r1, r9, lsr #16
   817d8:	ea41 4c0c 	orr.w	ip, r1, ip, lsl #16
   817dc:	4563      	cmp	r3, ip
   817de:	fa00 f502 	lsl.w	r5, r0, r2
   817e2:	d909      	bls.n	817f8 <__udivdi3+0x218>
   817e4:	eb1c 0c04 	adds.w	ip, ip, r4
   817e8:	f108 32ff 	add.w	r2, r8, #4294967295
   817ec:	d23b      	bcs.n	81866 <__udivdi3+0x286>
   817ee:	4563      	cmp	r3, ip
   817f0:	d939      	bls.n	81866 <__udivdi3+0x286>
   817f2:	f1a8 0802 	sub.w	r8, r8, #2
   817f6:	44a4      	add	ip, r4
   817f8:	ebc3 0c0c 	rsb	ip, r3, ip
   817fc:	fbbc f3f6 	udiv	r3, ip, r6
   81800:	fb06 c113 	mls	r1, r6, r3, ip
   81804:	fb07 f203 	mul.w	r2, r7, r3
   81808:	fa1f f989 	uxth.w	r9, r9
   8180c:	ea49 4101 	orr.w	r1, r9, r1, lsl #16
   81810:	428a      	cmp	r2, r1
   81812:	d907      	bls.n	81824 <__udivdi3+0x244>
   81814:	1909      	adds	r1, r1, r4
   81816:	f103 30ff 	add.w	r0, r3, #4294967295
   8181a:	d222      	bcs.n	81862 <__udivdi3+0x282>
   8181c:	428a      	cmp	r2, r1
   8181e:	d920      	bls.n	81862 <__udivdi3+0x282>
   81820:	3b02      	subs	r3, #2
   81822:	4421      	add	r1, r4
   81824:	1a89      	subs	r1, r1, r2
   81826:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   8182a:	e743      	b.n	816b4 <__udivdi3+0xd4>
   8182c:	463a      	mov	r2, r7
   8182e:	e705      	b.n	8163c <__udivdi3+0x5c>
   81830:	4633      	mov	r3, r6
   81832:	e718      	b.n	81666 <__udivdi3+0x86>
   81834:	460a      	mov	r2, r1
   81836:	e766      	b.n	81706 <__udivdi3+0x126>
   81838:	40b0      	lsls	r0, r6
   8183a:	4290      	cmp	r0, r2
   8183c:	d2b5      	bcs.n	817aa <__udivdi3+0x1ca>
   8183e:	f10c 32ff 	add.w	r2, ip, #4294967295
   81842:	2300      	movs	r3, #0
   81844:	e712      	b.n	8166c <__udivdi3+0x8c>
   81846:	4633      	mov	r3, r6
   81848:	4632      	mov	r2, r6
   8184a:	e70f      	b.n	8166c <__udivdi3+0x8c>
   8184c:	459a      	cmp	sl, r3
   8184e:	d98d      	bls.n	8176c <__udivdi3+0x18c>
   81850:	f1ac 0c02 	sub.w	ip, ip, #2
   81854:	4423      	add	r3, r4
   81856:	e78a      	b.n	8176e <__udivdi3+0x18e>
   81858:	45b9      	cmp	r9, r7
   8185a:	d99a      	bls.n	81792 <__udivdi3+0x1b2>
   8185c:	3d02      	subs	r5, #2
   8185e:	4427      	add	r7, r4
   81860:	e798      	b.n	81794 <__udivdi3+0x1b4>
   81862:	4603      	mov	r3, r0
   81864:	e7de      	b.n	81824 <__udivdi3+0x244>
   81866:	4690      	mov	r8, r2
   81868:	e7c6      	b.n	817f8 <__udivdi3+0x218>
   8186a:	3802      	subs	r0, #2
   8186c:	4421      	add	r1, r4
   8186e:	e735      	b.n	816dc <__udivdi3+0xfc>

00081870 <__libc_init_array>:
   81870:	b570      	push	{r4, r5, r6, lr}
   81872:	4e0f      	ldr	r6, [pc, #60]	; (818b0 <__libc_init_array+0x40>)
   81874:	4d0f      	ldr	r5, [pc, #60]	; (818b4 <__libc_init_array+0x44>)
   81876:	1b76      	subs	r6, r6, r5
   81878:	10b6      	asrs	r6, r6, #2
   8187a:	d007      	beq.n	8188c <__libc_init_array+0x1c>
   8187c:	3d04      	subs	r5, #4
   8187e:	2400      	movs	r4, #0
   81880:	3401      	adds	r4, #1
   81882:	f855 3f04 	ldr.w	r3, [r5, #4]!
   81886:	4798      	blx	r3
   81888:	42a6      	cmp	r6, r4
   8188a:	d1f9      	bne.n	81880 <__libc_init_array+0x10>
   8188c:	4e0a      	ldr	r6, [pc, #40]	; (818b8 <__libc_init_array+0x48>)
   8188e:	4d0b      	ldr	r5, [pc, #44]	; (818bc <__libc_init_array+0x4c>)
   81890:	f000 f896 	bl	819c0 <_init>
   81894:	1b76      	subs	r6, r6, r5
   81896:	10b6      	asrs	r6, r6, #2
   81898:	d008      	beq.n	818ac <__libc_init_array+0x3c>
   8189a:	3d04      	subs	r5, #4
   8189c:	2400      	movs	r4, #0
   8189e:	3401      	adds	r4, #1
   818a0:	f855 3f04 	ldr.w	r3, [r5, #4]!
   818a4:	4798      	blx	r3
   818a6:	42a6      	cmp	r6, r4
   818a8:	d1f9      	bne.n	8189e <__libc_init_array+0x2e>
   818aa:	bd70      	pop	{r4, r5, r6, pc}
   818ac:	bd70      	pop	{r4, r5, r6, pc}
   818ae:	bf00      	nop
   818b0:	000819cc 	.word	0x000819cc
   818b4:	000819cc 	.word	0x000819cc
   818b8:	000819d4 	.word	0x000819d4
   818bc:	000819cc 	.word	0x000819cc

000818c0 <register_fini>:
   818c0:	4b02      	ldr	r3, [pc, #8]	; (818cc <register_fini+0xc>)
   818c2:	b113      	cbz	r3, 818ca <register_fini+0xa>
   818c4:	4802      	ldr	r0, [pc, #8]	; (818d0 <register_fini+0x10>)
   818c6:	f000 b805 	b.w	818d4 <atexit>
   818ca:	4770      	bx	lr
   818cc:	00000000 	.word	0x00000000
   818d0:	000818e1 	.word	0x000818e1

000818d4 <atexit>:
   818d4:	4601      	mov	r1, r0
   818d6:	2000      	movs	r0, #0
   818d8:	4602      	mov	r2, r0
   818da:	4603      	mov	r3, r0
   818dc:	f000 b818 	b.w	81910 <__register_exitproc>

000818e0 <__libc_fini_array>:
   818e0:	b538      	push	{r3, r4, r5, lr}
   818e2:	4d09      	ldr	r5, [pc, #36]	; (81908 <__libc_fini_array+0x28>)
   818e4:	4c09      	ldr	r4, [pc, #36]	; (8190c <__libc_fini_array+0x2c>)
   818e6:	1b64      	subs	r4, r4, r5
   818e8:	10a4      	asrs	r4, r4, #2
   818ea:	bf18      	it	ne
   818ec:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
   818f0:	d005      	beq.n	818fe <__libc_fini_array+0x1e>
   818f2:	3c01      	subs	r4, #1
   818f4:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   818f8:	4798      	blx	r3
   818fa:	2c00      	cmp	r4, #0
   818fc:	d1f9      	bne.n	818f2 <__libc_fini_array+0x12>
   818fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   81902:	f000 b867 	b.w	819d4 <_fini>
   81906:	bf00      	nop
   81908:	000819e0 	.word	0x000819e0
   8190c:	000819e4 	.word	0x000819e4

00081910 <__register_exitproc>:
   81910:	b5f0      	push	{r4, r5, r6, r7, lr}
   81912:	4c27      	ldr	r4, [pc, #156]	; (819b0 <__register_exitproc+0xa0>)
   81914:	b085      	sub	sp, #20
   81916:	6826      	ldr	r6, [r4, #0]
   81918:	4607      	mov	r7, r0
   8191a:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   8191e:	2c00      	cmp	r4, #0
   81920:	d040      	beq.n	819a4 <__register_exitproc+0x94>
   81922:	6865      	ldr	r5, [r4, #4]
   81924:	2d1f      	cmp	r5, #31
   81926:	dd1e      	ble.n	81966 <__register_exitproc+0x56>
   81928:	4822      	ldr	r0, [pc, #136]	; (819b4 <__register_exitproc+0xa4>)
   8192a:	b918      	cbnz	r0, 81934 <__register_exitproc+0x24>
   8192c:	f04f 30ff 	mov.w	r0, #4294967295
   81930:	b005      	add	sp, #20
   81932:	bdf0      	pop	{r4, r5, r6, r7, pc}
   81934:	f44f 70c8 	mov.w	r0, #400	; 0x190
   81938:	9103      	str	r1, [sp, #12]
   8193a:	9202      	str	r2, [sp, #8]
   8193c:	9301      	str	r3, [sp, #4]
   8193e:	f3af 8000 	nop.w
   81942:	9903      	ldr	r1, [sp, #12]
   81944:	4604      	mov	r4, r0
   81946:	9a02      	ldr	r2, [sp, #8]
   81948:	9b01      	ldr	r3, [sp, #4]
   8194a:	2800      	cmp	r0, #0
   8194c:	d0ee      	beq.n	8192c <__register_exitproc+0x1c>
   8194e:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
   81952:	2000      	movs	r0, #0
   81954:	6025      	str	r5, [r4, #0]
   81956:	6060      	str	r0, [r4, #4]
   81958:	4605      	mov	r5, r0
   8195a:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   8195e:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   81962:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   81966:	b93f      	cbnz	r7, 81978 <__register_exitproc+0x68>
   81968:	1c6b      	adds	r3, r5, #1
   8196a:	2000      	movs	r0, #0
   8196c:	3502      	adds	r5, #2
   8196e:	6063      	str	r3, [r4, #4]
   81970:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
   81974:	b005      	add	sp, #20
   81976:	bdf0      	pop	{r4, r5, r6, r7, pc}
   81978:	2601      	movs	r6, #1
   8197a:	40ae      	lsls	r6, r5
   8197c:	eb04 0085 	add.w	r0, r4, r5, lsl #2
   81980:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   81984:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   81988:	2f02      	cmp	r7, #2
   8198a:	ea42 0206 	orr.w	r2, r2, r6
   8198e:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   81992:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   81996:	d1e7      	bne.n	81968 <__register_exitproc+0x58>
   81998:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   8199c:	431e      	orrs	r6, r3
   8199e:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
   819a2:	e7e1      	b.n	81968 <__register_exitproc+0x58>
   819a4:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   819a8:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   819ac:	e7b9      	b.n	81922 <__register_exitproc+0x12>
   819ae:	bf00      	nop
   819b0:	000819bc 	.word	0x000819bc
   819b4:	00000000 	.word	0x00000000
   819b8:	00000043 	.word	0x00000043

000819bc <_global_impure_ptr>:
   819bc:	20070148                                H.. 

000819c0 <_init>:
   819c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   819c2:	bf00      	nop
   819c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   819c6:	bc08      	pop	{r3}
   819c8:	469e      	mov	lr, r3
   819ca:	4770      	bx	lr

000819cc <__init_array_start>:
   819cc:	000818c1 	.word	0x000818c1

000819d0 <__frame_dummy_init_array_entry>:
   819d0:	00080119                                ....

000819d4 <_fini>:
   819d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   819d6:	bf00      	nop
   819d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   819da:	bc08      	pop	{r3}
   819dc:	469e      	mov	lr, r3
   819de:	4770      	bx	lr

000819e0 <__fini_array_start>:
   819e0:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20070000:	f3bf 8f5f 	dmb	sy
20070004:	3801      	subs	r0, #1
20070006:	d1fb      	bne.n	20070000 <portable_delay_cycles>
20070008:	4770      	bx	lr
2007000a:	bf00      	nop

2007000c <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007000c:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070010:	4a20      	ldr	r2, [pc, #128]	; (20070094 <SystemInit+0x88>)
20070012:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070014:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070018:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007001a:	4b1f      	ldr	r3, [pc, #124]	; (20070098 <SystemInit+0x8c>)
2007001c:	6a1b      	ldr	r3, [r3, #32]
2007001e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070022:	d107      	bne.n	20070034 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070024:	4a1d      	ldr	r2, [pc, #116]	; (2007009c <SystemInit+0x90>)
20070026:	4b1c      	ldr	r3, [pc, #112]	; (20070098 <SystemInit+0x8c>)
20070028:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007002a:	461a      	mov	r2, r3
2007002c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007002e:	f013 0f01 	tst.w	r3, #1
20070032:	d0fb      	beq.n	2007002c <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070034:	4a1a      	ldr	r2, [pc, #104]	; (200700a0 <SystemInit+0x94>)
20070036:	4b18      	ldr	r3, [pc, #96]	; (20070098 <SystemInit+0x8c>)
20070038:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007003a:	461a      	mov	r2, r3
2007003c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007003e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070042:	d0fb      	beq.n	2007003c <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070044:	4b14      	ldr	r3, [pc, #80]	; (20070098 <SystemInit+0x8c>)
20070046:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20070048:	f022 0203 	bic.w	r2, r2, #3
2007004c:	f042 0201 	orr.w	r2, r2, #1
20070050:	631a      	str	r2, [r3, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070052:	461a      	mov	r2, r3
20070054:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070056:	f013 0f08 	tst.w	r3, #8
2007005a:	d0fb      	beq.n	20070054 <SystemInit+0x48>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007005c:	4a11      	ldr	r2, [pc, #68]	; (200700a4 <SystemInit+0x98>)
2007005e:	4b0e      	ldr	r3, [pc, #56]	; (20070098 <SystemInit+0x8c>)
20070060:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070062:	461a      	mov	r2, r3
20070064:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070066:	f013 0f02 	tst.w	r3, #2
2007006a:	d0fb      	beq.n	20070064 <SystemInit+0x58>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007006c:	2211      	movs	r2, #17
2007006e:	4b0a      	ldr	r3, [pc, #40]	; (20070098 <SystemInit+0x8c>)
20070070:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070072:	461a      	mov	r2, r3
20070074:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070076:	f013 0f08 	tst.w	r3, #8
2007007a:	d0fb      	beq.n	20070074 <SystemInit+0x68>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007007c:	2212      	movs	r2, #18
2007007e:	4b06      	ldr	r3, [pc, #24]	; (20070098 <SystemInit+0x8c>)
20070080:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070082:	461a      	mov	r2, r3
20070084:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070086:	f013 0f08 	tst.w	r3, #8
2007008a:	d0fb      	beq.n	20070084 <SystemInit+0x78>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007008c:	4a06      	ldr	r2, [pc, #24]	; (200700a8 <SystemInit+0x9c>)
2007008e:	4b07      	ldr	r3, [pc, #28]	; (200700ac <SystemInit+0xa0>)
20070090:	601a      	str	r2, [r3, #0]
20070092:	4770      	bx	lr
20070094:	400e0a00 	.word	0x400e0a00
20070098:	400e0600 	.word	0x400e0600
2007009c:	00370809 	.word	0x00370809
200700a0:	01370809 	.word	0x01370809
200700a4:	200d3f01 	.word	0x200d3f01
200700a8:	0501bd00 	.word	0x0501bd00
200700ac:	20070140 	.word	0x20070140

200700b0 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700b0:	4b1b      	ldr	r3, [pc, #108]	; (20070120 <system_init_flash+0x70>)
200700b2:	4298      	cmp	r0, r3
200700b4:	d806      	bhi.n	200700c4 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700b6:	2300      	movs	r3, #0
200700b8:	4a1a      	ldr	r2, [pc, #104]	; (20070124 <system_init_flash+0x74>)
200700ba:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700bc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700c0:	6013      	str	r3, [r2, #0]
200700c2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700c4:	4b18      	ldr	r3, [pc, #96]	; (20070128 <system_init_flash+0x78>)
200700c6:	4298      	cmp	r0, r3
200700c8:	d807      	bhi.n	200700da <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700ca:	f44f 7380 	mov.w	r3, #256	; 0x100
200700ce:	4a15      	ldr	r2, [pc, #84]	; (20070124 <system_init_flash+0x74>)
200700d0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700d2:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700d6:	6013      	str	r3, [r2, #0]
200700d8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700da:	4b14      	ldr	r3, [pc, #80]	; (2007012c <system_init_flash+0x7c>)
200700dc:	4298      	cmp	r0, r3
200700de:	d807      	bhi.n	200700f0 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700e0:	f44f 7300 	mov.w	r3, #512	; 0x200
200700e4:	4a0f      	ldr	r2, [pc, #60]	; (20070124 <system_init_flash+0x74>)
200700e6:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700e8:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ec:	6013      	str	r3, [r2, #0]
200700ee:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700f0:	4b0f      	ldr	r3, [pc, #60]	; (20070130 <system_init_flash+0x80>)
200700f2:	4298      	cmp	r0, r3
200700f4:	d807      	bhi.n	20070106 <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700f6:	f44f 7340 	mov.w	r3, #768	; 0x300
200700fa:	4a0a      	ldr	r2, [pc, #40]	; (20070124 <system_init_flash+0x74>)
200700fc:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700fe:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070102:	6013      	str	r3, [r2, #0]
20070104:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
20070106:	4b0b      	ldr	r3, [pc, #44]	; (20070134 <system_init_flash+0x84>)
20070108:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007010a:	bf94      	ite	ls
2007010c:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070110:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070114:	4a03      	ldr	r2, [pc, #12]	; (20070124 <system_init_flash+0x74>)
20070116:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
20070118:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007011c:	6013      	str	r3, [r2, #0]
2007011e:	4770      	bx	lr
20070120:	0121eabf 	.word	0x0121eabf
20070124:	400e0a00 	.word	0x400e0a00
20070128:	02faf07f 	.word	0x02faf07f
2007012c:	03d08fff 	.word	0x03d08fff
20070130:	04c4b3ff 	.word	0x04c4b3ff
20070134:	055d4a7f 	.word	0x055d4a7f

20070138 <kValue>:
20070138:	684bda13 3ffda12f                       ..Kh/..?

20070140 <SystemCoreClock>:
20070140:	003d0900 00000000                       ..=.....

20070148 <impure_data>:
20070148:	00000000 20070434 2007049c 20070504     ....4.. ... ... 
	...
2007017c:	000819b8 00000000 00000000 00000000     ................
	...
200701f0:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20070200:	0005deec 0000000b 00000000 00000000     ................
	...
