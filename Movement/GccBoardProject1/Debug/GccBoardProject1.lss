
GccBoardProject1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000484c  00080000  00080000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0008484c  0008484c  0000c84c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009a4  20070000  00084854  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000180  200709a4  000851f8  000109a4  2**2
                  ALLOC
  4 .stack        00002004  20070b24  00085378  000109a4  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  000109a4  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  000109cd  2**0
                  CONTENTS, READONLY
  7 .debug_info   0000dce1  00000000  00000000  00010a28  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000262e  00000000  00000000  0001e709  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000043c4  00000000  00000000  00020d37  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000a38  00000000  00000000  000250fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000910  00000000  00000000  00025b33  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001850e  00000000  00000000  00026443  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000fd91  00000000  00000000  0003e951  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00061954  00000000  00000000  0004e6e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002048  00000000  00000000  000b0038  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20072b28 	.word	0x20072b28
   80004:	000809fd 	.word	0x000809fd
   80008:	000809f9 	.word	0x000809f9
   8000c:	000809f9 	.word	0x000809f9
   80010:	000809f9 	.word	0x000809f9
   80014:	000809f9 	.word	0x000809f9
   80018:	000809f9 	.word	0x000809f9
	...
   8002c:	000809f9 	.word	0x000809f9
   80030:	000809f9 	.word	0x000809f9
   80034:	00000000 	.word	0x00000000
   80038:	000809f9 	.word	0x000809f9
   8003c:	000809f9 	.word	0x000809f9
   80040:	000809f9 	.word	0x000809f9
   80044:	000809f9 	.word	0x000809f9
   80048:	000809f9 	.word	0x000809f9
   8004c:	000809f9 	.word	0x000809f9
   80050:	000809f9 	.word	0x000809f9
   80054:	000809f9 	.word	0x000809f9
   80058:	000809f9 	.word	0x000809f9
   8005c:	000809f9 	.word	0x000809f9
   80060:	000809f9 	.word	0x000809f9
   80064:	000809f9 	.word	0x000809f9
   80068:	00000000 	.word	0x00000000
   8006c:	00080845 	.word	0x00080845
   80070:	00080859 	.word	0x00080859
   80074:	0008086d 	.word	0x0008086d
   80078:	00080881 	.word	0x00080881
	...
   80084:	00080329 	.word	0x00080329
   80088:	000809f9 	.word	0x000809f9
   8008c:	000809f9 	.word	0x000809f9
   80090:	000809f9 	.word	0x000809f9
   80094:	000809f9 	.word	0x000809f9
   80098:	000809f9 	.word	0x000809f9
   8009c:	000809f9 	.word	0x000809f9
   800a0:	000809f9 	.word	0x000809f9
   800a4:	00000000 	.word	0x00000000
   800a8:	000809f9 	.word	0x000809f9
   800ac:	000809f9 	.word	0x000809f9
   800b0:	000809f9 	.word	0x000809f9
   800b4:	000809f9 	.word	0x000809f9
   800b8:	000809f9 	.word	0x000809f9
   800bc:	000809f9 	.word	0x000809f9
   800c0:	000809f9 	.word	0x000809f9
   800c4:	000809f9 	.word	0x000809f9
   800c8:	000809f9 	.word	0x000809f9
   800cc:	000809f9 	.word	0x000809f9
   800d0:	000809f9 	.word	0x000809f9
   800d4:	000809f9 	.word	0x000809f9
   800d8:	000809f9 	.word	0x000809f9
   800dc:	000809f9 	.word	0x000809f9
   800e0:	000809f9 	.word	0x000809f9
   800e4:	000809f9 	.word	0x000809f9
   800e8:	000809f9 	.word	0x000809f9
   800ec:	000809f9 	.word	0x000809f9
   800f0:	000809f9 	.word	0x000809f9

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	200709a4 	.word	0x200709a4
   80110:	00000000 	.word	0x00000000
   80114:	00084854 	.word	0x00084854

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b06      	ldr	r3, [pc, #24]	; (80134 <frame_dummy+0x1c>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4806      	ldr	r0, [pc, #24]	; (80138 <frame_dummy+0x20>)
   80120:	4906      	ldr	r1, [pc, #24]	; (8013c <frame_dummy+0x24>)
   80122:	f3af 8000 	nop.w
   80126:	4806      	ldr	r0, [pc, #24]	; (80140 <frame_dummy+0x28>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b113      	cbz	r3, 80132 <frame_dummy+0x1a>
   8012c:	4b05      	ldr	r3, [pc, #20]	; (80144 <frame_dummy+0x2c>)
   8012e:	b103      	cbz	r3, 80132 <frame_dummy+0x1a>
   80130:	4798      	blx	r3
   80132:	bd08      	pop	{r3, pc}
   80134:	00000000 	.word	0x00000000
   80138:	00084854 	.word	0x00084854
   8013c:	200709a8 	.word	0x200709a8
   80140:	00084854 	.word	0x00084854
   80144:	00000000 	.word	0x00000000

00080148 <usart_serial_read_packet>:
 * \param len    Length of data
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
   80148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8014c:	b083      	sub	sp, #12
   8014e:	4605      	mov	r5, r0
	while (len) {
   80150:	4690      	mov	r8, r2
   80152:	2a00      	cmp	r2, #0
   80154:	d047      	beq.n	801e6 <usart_serial_read_packet+0x9e>
   80156:	1c4e      	adds	r6, r1, #1
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80158:	4f25      	ldr	r7, [pc, #148]	; (801f0 <usart_serial_read_packet+0xa8>)
		while (usart_read(p_usart, &val));
   8015a:	4c26      	ldr	r4, [pc, #152]	; (801f4 <usart_serial_read_packet+0xac>)
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   8015c:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 80208 <usart_serial_read_packet+0xc0>
	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
   80160:	f8df b094 	ldr.w	fp, [pc, #148]	; 801f8 <usart_serial_read_packet+0xb0>
   80164:	f106 39ff 	add.w	r9, r6, #4294967295
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
	uint32_t val = 0;
   80168:	2300      	movs	r3, #0
   8016a:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   8016c:	4b22      	ldr	r3, [pc, #136]	; (801f8 <usart_serial_read_packet+0xb0>)
   8016e:	429d      	cmp	r5, r3
   80170:	d106      	bne.n	80180 <usart_serial_read_packet+0x38>
		while (uart_read((Uart*)p_usart, data));
   80172:	4658      	mov	r0, fp
   80174:	4649      	mov	r1, r9
   80176:	4b21      	ldr	r3, [pc, #132]	; (801fc <usart_serial_read_packet+0xb4>)
   80178:	4798      	blx	r3
   8017a:	2800      	cmp	r0, #0
   8017c:	d1f9      	bne.n	80172 <usart_serial_read_packet+0x2a>
   8017e:	e019      	b.n	801b4 <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80180:	4b1f      	ldr	r3, [pc, #124]	; (80200 <usart_serial_read_packet+0xb8>)
   80182:	429d      	cmp	r5, r3
   80184:	d109      	bne.n	8019a <usart_serial_read_packet+0x52>
		while (usart_read(p_usart, &val));
   80186:	4699      	mov	r9, r3
   80188:	4648      	mov	r0, r9
   8018a:	a901      	add	r1, sp, #4
   8018c:	47a0      	blx	r4
   8018e:	2800      	cmp	r0, #0
   80190:	d1fa      	bne.n	80188 <usart_serial_read_packet+0x40>
		*data = (uint8_t)(val & 0xFF);
   80192:	9b01      	ldr	r3, [sp, #4]
   80194:	f806 3c01 	strb.w	r3, [r6, #-1]
   80198:	e017      	b.n	801ca <usart_serial_read_packet+0x82>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   8019a:	4b1a      	ldr	r3, [pc, #104]	; (80204 <usart_serial_read_packet+0xbc>)
   8019c:	429d      	cmp	r5, r3
   8019e:	d109      	bne.n	801b4 <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
   801a0:	4699      	mov	r9, r3
   801a2:	4648      	mov	r0, r9
   801a4:	a901      	add	r1, sp, #4
   801a6:	47a0      	blx	r4
   801a8:	2800      	cmp	r0, #0
   801aa:	d1fa      	bne.n	801a2 <usart_serial_read_packet+0x5a>
		*data = (uint8_t)(val & 0xFF);
   801ac:	9b01      	ldr	r3, [sp, #4]
   801ae:	f806 3c01 	strb.w	r3, [r6, #-1]
   801b2:	e014      	b.n	801de <usart_serial_read_packet+0x96>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   801b4:	4555      	cmp	r5, sl
   801b6:	d108      	bne.n	801ca <usart_serial_read_packet+0x82>
		while (usart_read(p_usart, &val));
   801b8:	4650      	mov	r0, sl
   801ba:	a901      	add	r1, sp, #4
   801bc:	47a0      	blx	r4
   801be:	2800      	cmp	r0, #0
   801c0:	d1fa      	bne.n	801b8 <usart_serial_read_packet+0x70>
		*data = (uint8_t)(val & 0xFF);
   801c2:	9b01      	ldr	r3, [sp, #4]
   801c4:	f806 3c01 	strb.w	r3, [r6, #-1]
   801c8:	e009      	b.n	801de <usart_serial_read_packet+0x96>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   801ca:	42bd      	cmp	r5, r7
   801cc:	d107      	bne.n	801de <usart_serial_read_packet+0x96>
		while (usart_read(p_usart, &val));
   801ce:	4638      	mov	r0, r7
   801d0:	a901      	add	r1, sp, #4
   801d2:	47a0      	blx	r4
   801d4:	2800      	cmp	r0, #0
   801d6:	d1fa      	bne.n	801ce <usart_serial_read_packet+0x86>
		*data = (uint8_t)(val & 0xFF);
   801d8:	9b01      	ldr	r3, [sp, #4]
   801da:	f806 3c01 	strb.w	r3, [r6, #-1]
   801de:	3601      	adds	r6, #1
   801e0:	f1b8 0801 	subs.w	r8, r8, #1
   801e4:	d1be      	bne.n	80164 <usart_serial_read_packet+0x1c>
		usart_serial_getchar(usart, data);
		len--;
		data++;
	}
	return STATUS_OK;
}
   801e6:	2000      	movs	r0, #0
   801e8:	b003      	add	sp, #12
   801ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   801ee:	bf00      	nop
   801f0:	400a4000 	.word	0x400a4000
   801f4:	00080311 	.word	0x00080311
   801f8:	400e0800 	.word	0x400e0800
   801fc:	000802e9 	.word	0x000802e9
   80200:	40098000 	.word	0x40098000
   80204:	4009c000 	.word	0x4009c000
   80208:	400a0000 	.word	0x400a0000

0008020c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   8020c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80210:	460c      	mov	r4, r1
   80212:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
   80214:	b960      	cbnz	r0, 80230 <_read+0x24>
		return -1;
	}

	for (; len > 0; --len) {
   80216:	2a00      	cmp	r2, #0
   80218:	dd0e      	ble.n	80238 <_read+0x2c>
   8021a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   8021c:	4e09      	ldr	r6, [pc, #36]	; (80244 <_read+0x38>)
   8021e:	4d0a      	ldr	r5, [pc, #40]	; (80248 <_read+0x3c>)
   80220:	6830      	ldr	r0, [r6, #0]
   80222:	4621      	mov	r1, r4
   80224:	682b      	ldr	r3, [r5, #0]
   80226:	4798      	blx	r3
		ptr++;
   80228:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   8022a:	42bc      	cmp	r4, r7
   8022c:	d1f8      	bne.n	80220 <_read+0x14>
   8022e:	e006      	b.n	8023e <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
   80230:	f04f 30ff 	mov.w	r0, #4294967295
   80234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len > 0; --len) {
   80238:	2000      	movs	r0, #0
   8023a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
   8023e:	4640      	mov	r0, r8
	}
	return nChars;
}
   80240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80244:	20070b1c 	.word	0x20070b1c
   80248:	20070b14 	.word	0x20070b14

0008024c <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   8024c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80250:	460e      	mov	r6, r1
   80252:	4615      	mov	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   80254:	3801      	subs	r0, #1
   80256:	2802      	cmp	r0, #2
   80258:	d80f      	bhi.n	8027a <_write+0x2e>
		return -1;
	}

	for (; len != 0; --len) {
   8025a:	b192      	cbz	r2, 80282 <_write+0x36>
   8025c:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
   8025e:	f8df 803c 	ldr.w	r8, [pc, #60]	; 8029c <_write+0x50>
   80262:	4f0d      	ldr	r7, [pc, #52]	; (80298 <_write+0x4c>)
   80264:	f8d8 0000 	ldr.w	r0, [r8]
   80268:	5d31      	ldrb	r1, [r6, r4]
   8026a:	683b      	ldr	r3, [r7, #0]
   8026c:	4798      	blx	r3
   8026e:	2800      	cmp	r0, #0
   80270:	db0a      	blt.n	80288 <_write+0x3c>
			return -1;
		}
		++nChars;
   80272:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   80274:	42a5      	cmp	r5, r4
   80276:	d1f5      	bne.n	80264 <_write+0x18>
   80278:	e00a      	b.n	80290 <_write+0x44>
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
   8027a:	f04f 30ff 	mov.w	r0, #4294967295
   8027e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len != 0; --len) {
   80282:	2000      	movs	r0, #0
   80284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
   80288:	f04f 30ff 	mov.w	r0, #4294967295
   8028c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		++nChars;
   80290:	4620      	mov	r0, r4
	}
	return nChars;
}
   80292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80296:	bf00      	nop
   80298:	20070b18 	.word	0x20070b18
   8029c:	20070b1c 	.word	0x20070b1c

000802a0 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   802a0:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   802a2:	23ac      	movs	r3, #172	; 0xac
   802a4:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   802a6:	680a      	ldr	r2, [r1, #0]
   802a8:	684b      	ldr	r3, [r1, #4]
   802aa:	fbb2 f3f3 	udiv	r3, r2, r3
   802ae:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   802b0:	1e5c      	subs	r4, r3, #1
   802b2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   802b6:	4294      	cmp	r4, r2
   802b8:	d80a      	bhi.n	802d0 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
   802ba:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   802bc:	688b      	ldr	r3, [r1, #8]
   802be:	6043      	str	r3, [r0, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   802c0:	f240 2302 	movw	r3, #514	; 0x202
   802c4:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   802c8:	2350      	movs	r3, #80	; 0x50
   802ca:	6003      	str	r3, [r0, #0]

	return 0;
   802cc:	2000      	movs	r0, #0
   802ce:	e000      	b.n	802d2 <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
   802d0:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
   802d2:	f85d 4b04 	ldr.w	r4, [sp], #4
   802d6:	4770      	bx	lr

000802d8 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   802d8:	6943      	ldr	r3, [r0, #20]
   802da:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   802de:	bf1a      	itte	ne
   802e0:	61c1      	strne	r1, [r0, #28]
	return 0;
   802e2:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
   802e4:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
   802e6:	4770      	bx	lr

000802e8 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   802e8:	6943      	ldr	r3, [r0, #20]
   802ea:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   802ee:	bf1d      	ittte	ne
   802f0:	6983      	ldrne	r3, [r0, #24]
   802f2:	700b      	strbne	r3, [r1, #0]
	return 0;
   802f4:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
   802f6:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
   802f8:	4770      	bx	lr
   802fa:	bf00      	nop

000802fc <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   802fc:	6943      	ldr	r3, [r0, #20]
   802fe:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   80302:	bf1d      	ittte	ne
   80304:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   80308:	61c1      	strne	r1, [r0, #28]
	return 0;
   8030a:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
   8030c:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
   8030e:	4770      	bx	lr

00080310 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   80310:	6943      	ldr	r3, [r0, #20]
   80312:	f013 0f01 	tst.w	r3, #1
   80316:	d005      	beq.n	80324 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   80318:	6983      	ldr	r3, [r0, #24]
   8031a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   8031e:	600b      	str	r3, [r1, #0]

	return 0;
   80320:	2000      	movs	r0, #0
   80322:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   80324:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   80326:	4770      	bx	lr

00080328 <USART0_Handler>:
#if SAMD || SAMR21
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
   80328:	b500      	push	{lr}
   8032a:	b083      	sub	sp, #12
	uint8_t temp;
#if SAMD || SAMR21
	usart_serial_read_packet(&host_uart_module, &temp, 1);
#else
	usart_serial_read_packet(USART_HOST, &temp, 1);
   8032c:	4813      	ldr	r0, [pc, #76]	; (8037c <USART0_Handler+0x54>)
   8032e:	f10d 0107 	add.w	r1, sp, #7
   80332:	2201      	movs	r2, #1
   80334:	4b12      	ldr	r3, [pc, #72]	; (80380 <USART0_Handler+0x58>)
   80336:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   80338:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   8033a:	f3bf 8f5f 	dmb	sy
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
   8033e:	2200      	movs	r2, #0
   80340:	4b10      	ldr	r3, [pc, #64]	; (80384 <USART0_Handler+0x5c>)
   80342:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */
	serial_rx_count++;
   80344:	4b10      	ldr	r3, [pc, #64]	; (80388 <USART0_Handler+0x60>)
   80346:	781a      	ldrb	r2, [r3, #0]
   80348:	3201      	adds	r2, #1
   8034a:	701a      	strb	r2, [r3, #0]

	serial_rx_buf[serial_rx_buf_tail] = temp;
   8034c:	4b0f      	ldr	r3, [pc, #60]	; (8038c <USART0_Handler+0x64>)
   8034e:	781b      	ldrb	r3, [r3, #0]
   80350:	f89d 1007 	ldrb.w	r1, [sp, #7]
   80354:	4a0e      	ldr	r2, [pc, #56]	; (80390 <USART0_Handler+0x68>)
   80356:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
   80358:	2b9b      	cmp	r3, #155	; 0x9b
   8035a:	d103      	bne.n	80364 <USART0_Handler+0x3c>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
   8035c:	2200      	movs	r2, #0
   8035e:	4b0b      	ldr	r3, [pc, #44]	; (8038c <USART0_Handler+0x64>)
   80360:	701a      	strb	r2, [r3, #0]
   80362:	e002      	b.n	8036a <USART0_Handler+0x42>
	} else {
		serial_rx_buf_tail++;
   80364:	3301      	adds	r3, #1
   80366:	4a09      	ldr	r2, [pc, #36]	; (8038c <USART0_Handler+0x64>)
   80368:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
   8036a:	2201      	movs	r2, #1
   8036c:	4b05      	ldr	r3, [pc, #20]	; (80384 <USART0_Handler+0x5c>)
   8036e:	701a      	strb	r2, [r3, #0]
   80370:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   80374:	b662      	cpsie	i
}
   80376:	b003      	add	sp, #12
   80378:	f85d fb04 	ldr.w	pc, [sp], #4
   8037c:	40098000 	.word	0x40098000
   80380:	00080149 	.word	0x00080149
   80384:	20070138 	.word	0x20070138
   80388:	20070a5d 	.word	0x20070a5d
   8038c:	20070a5c 	.word	0x20070a5c
   80390:	200709c0 	.word	0x200709c0

00080394 <pulseCounter_handlerA>:
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   80394:	4b04      	ldr	r3, [pc, #16]	; (803a8 <pulseCounter_handlerA+0x14>)
   80396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 int totA = 0;
 int totB = 0;
 

void pulseCounter_handlerA(const uint32_t id, const uint32_t index){
	if (ioport_get_pin_level(A))
   80398:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
   8039c:	d003      	beq.n	803a6 <pulseCounter_handlerA+0x12>
	{
		counterA++;
   8039e:	4b03      	ldr	r3, [pc, #12]	; (803ac <pulseCounter_handlerA+0x18>)
   803a0:	681a      	ldr	r2, [r3, #0]
   803a2:	3201      	adds	r2, #1
   803a4:	601a      	str	r2, [r3, #0]
   803a6:	4770      	bx	lr
   803a8:	400e1200 	.word	0x400e1200
   803ac:	20070a60 	.word	0x20070a60

000803b0 <pulseCounter_handlerB>:
   803b0:	4b04      	ldr	r3, [pc, #16]	; (803c4 <pulseCounter_handlerB+0x14>)
   803b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
	}

}

void pulseCounter_handlerB(const uint32_t id, const uint32_t index){
	if (ioport_get_pin_level(B))
   803b4:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   803b8:	d003      	beq.n	803c2 <pulseCounter_handlerB+0x12>
	{
		counterB++;
   803ba:	4b03      	ldr	r3, [pc, #12]	; (803c8 <pulseCounter_handlerB+0x18>)
   803bc:	681a      	ldr	r2, [r3, #0]
   803be:	3201      	adds	r2, #1
   803c0:	601a      	str	r2, [r3, #0]
   803c2:	4770      	bx	lr
   803c4:	400e1200 	.word	0x400e1200
   803c8:	20070a64 	.word	0x20070a64

000803cc <pulseCounter_configA>:
	}
	
}

void pulseCounter_configA(uint32_t ul_id, Pio *p_pio, const uint32_t ul_mask){
   803cc:	b570      	push	{r4, r5, r6, lr}
   803ce:	b082      	sub	sp, #8
   803d0:	4606      	mov	r6, r0
   803d2:	460d      	mov	r5, r1
   803d4:	4614      	mov	r4, r2
	pmc_set_writeprotect(false);
   803d6:	2000      	movs	r0, #0
   803d8:	4b0d      	ldr	r3, [pc, #52]	; (80410 <pulseCounter_configA+0x44>)
   803da:	4798      	blx	r3
	pmc_enable_periph_clk(ul_id);
   803dc:	4630      	mov	r0, r6
   803de:	4b0d      	ldr	r3, [pc, #52]	; (80414 <pulseCounter_configA+0x48>)
   803e0:	4798      	blx	r3
	//pio_set_output(p_pio, ul_mask, LOW, DISABLE, ENABLE);
	pio_set_input(p_pio, ul_mask, PIO_PULLUP);
   803e2:	4628      	mov	r0, r5
   803e4:	4621      	mov	r1, r4
   803e6:	2201      	movs	r2, #1
   803e8:	4b0b      	ldr	r3, [pc, #44]	; (80418 <pulseCounter_configA+0x4c>)
   803ea:	4798      	blx	r3
	pio_handler_set(p_pio, ul_id, ul_mask, PIO_IT_EDGE, pulseCounter_handlerA);
   803ec:	4b0b      	ldr	r3, [pc, #44]	; (8041c <pulseCounter_configA+0x50>)
   803ee:	9300      	str	r3, [sp, #0]
   803f0:	4628      	mov	r0, r5
   803f2:	4631      	mov	r1, r6
   803f4:	4622      	mov	r2, r4
   803f6:	2340      	movs	r3, #64	; 0x40
   803f8:	4e09      	ldr	r6, [pc, #36]	; (80420 <pulseCounter_configA+0x54>)
   803fa:	47b0      	blx	r6
	pio_enable_interrupt(p_pio, ul_mask);
   803fc:	4628      	mov	r0, r5
   803fe:	4621      	mov	r1, r4
   80400:	4b08      	ldr	r3, [pc, #32]	; (80424 <pulseCounter_configA+0x58>)
   80402:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   80404:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   80408:	4b07      	ldr	r3, [pc, #28]	; (80428 <pulseCounter_configA+0x5c>)
   8040a:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(PIOC_IRQn);
}
   8040c:	b002      	add	sp, #8
   8040e:	bd70      	pop	{r4, r5, r6, pc}
   80410:	000809d5 	.word	0x000809d5
   80414:	0008097d 	.word	0x0008097d
   80418:	000805a1 	.word	0x000805a1
   8041c:	00080395 	.word	0x00080395
   80420:	00080809 	.word	0x00080809
   80424:	0008062d 	.word	0x0008062d
   80428:	e000e100 	.word	0xe000e100

0008042c <pulseCounter_configB>:

void pulseCounter_configB(uint32_t ul_id, Pio *p_pio, const uint32_t ul_mask){
   8042c:	b570      	push	{r4, r5, r6, lr}
   8042e:	b082      	sub	sp, #8
   80430:	4606      	mov	r6, r0
   80432:	460d      	mov	r5, r1
   80434:	4614      	mov	r4, r2
	pmc_set_writeprotect(false);
   80436:	2000      	movs	r0, #0
   80438:	4b0d      	ldr	r3, [pc, #52]	; (80470 <pulseCounter_configB+0x44>)
   8043a:	4798      	blx	r3
	pmc_enable_periph_clk(ul_id);
   8043c:	4630      	mov	r0, r6
   8043e:	4b0d      	ldr	r3, [pc, #52]	; (80474 <pulseCounter_configB+0x48>)
   80440:	4798      	blx	r3
	//pio_set_output(p_pio, ul_mask, LOW, DISABLE, ENABLE);
	pio_set_input(p_pio, ul_mask, PIO_PULLUP);
   80442:	4628      	mov	r0, r5
   80444:	4621      	mov	r1, r4
   80446:	2201      	movs	r2, #1
   80448:	4b0b      	ldr	r3, [pc, #44]	; (80478 <pulseCounter_configB+0x4c>)
   8044a:	4798      	blx	r3
	pio_handler_set(p_pio, ul_id, ul_mask, PIO_IT_EDGE, pulseCounter_handlerB);
   8044c:	4b0b      	ldr	r3, [pc, #44]	; (8047c <pulseCounter_configB+0x50>)
   8044e:	9300      	str	r3, [sp, #0]
   80450:	4628      	mov	r0, r5
   80452:	4631      	mov	r1, r6
   80454:	4622      	mov	r2, r4
   80456:	2340      	movs	r3, #64	; 0x40
   80458:	4e09      	ldr	r6, [pc, #36]	; (80480 <pulseCounter_configB+0x54>)
   8045a:	47b0      	blx	r6
	pio_enable_interrupt(p_pio, ul_mask);
   8045c:	4628      	mov	r0, r5
   8045e:	4621      	mov	r1, r4
   80460:	4b08      	ldr	r3, [pc, #32]	; (80484 <pulseCounter_configB+0x58>)
   80462:	4798      	blx	r3
   80464:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   80468:	4b07      	ldr	r3, [pc, #28]	; (80488 <pulseCounter_configB+0x5c>)
   8046a:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(PIOC_IRQn);
   8046c:	b002      	add	sp, #8
   8046e:	bd70      	pop	{r4, r5, r6, pc}
   80470:	000809d5 	.word	0x000809d5
   80474:	0008097d 	.word	0x0008097d
   80478:	000805a1 	.word	0x000805a1
   8047c:	000803b1 	.word	0x000803b1
   80480:	00080809 	.word	0x00080809
   80484:	0008062d 	.word	0x0008062d
   80488:	e000e100 	.word	0xe000e100

0008048c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   8048c:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   8048e:	480e      	ldr	r0, [pc, #56]	; (804c8 <sysclk_init+0x3c>)
   80490:	4b0e      	ldr	r3, [pc, #56]	; (804cc <sysclk_init+0x40>)
   80492:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   80494:	2000      	movs	r0, #0
   80496:	213e      	movs	r1, #62	; 0x3e
   80498:	4b0d      	ldr	r3, [pc, #52]	; (804d0 <sysclk_init+0x44>)
   8049a:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   8049c:	4c0d      	ldr	r4, [pc, #52]	; (804d4 <sysclk_init+0x48>)
   8049e:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   804a0:	2800      	cmp	r0, #0
   804a2:	d0fc      	beq.n	8049e <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   804a4:	4b0c      	ldr	r3, [pc, #48]	; (804d8 <sysclk_init+0x4c>)
   804a6:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   804a8:	4a0c      	ldr	r2, [pc, #48]	; (804dc <sysclk_init+0x50>)
   804aa:	4b0d      	ldr	r3, [pc, #52]	; (804e0 <sysclk_init+0x54>)
   804ac:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   804ae:	4c0d      	ldr	r4, [pc, #52]	; (804e4 <sysclk_init+0x58>)
   804b0:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   804b2:	2800      	cmp	r0, #0
   804b4:	d0fc      	beq.n	804b0 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   804b6:	2010      	movs	r0, #16
   804b8:	4b0b      	ldr	r3, [pc, #44]	; (804e8 <sysclk_init+0x5c>)
   804ba:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   804bc:	4b0b      	ldr	r3, [pc, #44]	; (804ec <sysclk_init+0x60>)
   804be:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   804c0:	4801      	ldr	r0, [pc, #4]	; (804c8 <sysclk_init+0x3c>)
   804c2:	4b02      	ldr	r3, [pc, #8]	; (804cc <sysclk_init+0x40>)
   804c4:	4798      	blx	r3
   804c6:	bd10      	pop	{r4, pc}
   804c8:	0501bd00 	.word	0x0501bd00
   804cc:	200700b1 	.word	0x200700b1
   804d0:	000808f9 	.word	0x000808f9
   804d4:	0008094d 	.word	0x0008094d
   804d8:	0008095d 	.word	0x0008095d
   804dc:	200d3f01 	.word	0x200d3f01
   804e0:	400e0600 	.word	0x400e0600
   804e4:	0008096d 	.word	0x0008096d
   804e8:	00080895 	.word	0x00080895
   804ec:	00080aad 	.word	0x00080aad

000804f0 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   804f0:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   804f2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   804f6:	4b13      	ldr	r3, [pc, #76]	; (80544 <board_init+0x54>)
   804f8:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   804fa:	200b      	movs	r0, #11
   804fc:	4c12      	ldr	r4, [pc, #72]	; (80548 <board_init+0x58>)
   804fe:	47a0      	blx	r4
   80500:	200c      	movs	r0, #12
   80502:	47a0      	blx	r4
   80504:	200d      	movs	r0, #13
   80506:	47a0      	blx	r4
   80508:	200e      	movs	r0, #14
   8050a:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   8050c:	203b      	movs	r0, #59	; 0x3b
   8050e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80512:	4c0e      	ldr	r4, [pc, #56]	; (8054c <board_init+0x5c>)
   80514:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   80516:	2055      	movs	r0, #85	; 0x55
   80518:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8051c:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   8051e:	2056      	movs	r0, #86	; 0x56
   80520:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80524:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   80526:	2068      	movs	r0, #104	; 0x68
   80528:	4909      	ldr	r1, [pc, #36]	; (80550 <board_init+0x60>)
   8052a:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   8052c:	205c      	movs	r0, #92	; 0x5c
   8052e:	4909      	ldr	r1, [pc, #36]	; (80554 <board_init+0x64>)
   80530:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   80532:	4809      	ldr	r0, [pc, #36]	; (80558 <board_init+0x68>)
   80534:	f44f 7140 	mov.w	r1, #768	; 0x300
   80538:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   8053c:	4b07      	ldr	r3, [pc, #28]	; (8055c <board_init+0x6c>)
   8053e:	4798      	blx	r3
   80540:	bd10      	pop	{r4, pc}
   80542:	bf00      	nop
   80544:	400e1a50 	.word	0x400e1a50
   80548:	0008097d 	.word	0x0008097d
   8054c:	0008063d 	.word	0x0008063d
   80550:	28000079 	.word	0x28000079
   80554:	28000001 	.word	0x28000001
   80558:	400e0e00 	.word	0x400e0e00
   8055c:	00080711 	.word	0x00080711

00080560 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   80560:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   80562:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   80566:	d016      	beq.n	80596 <pio_set_peripheral+0x36>
   80568:	d804      	bhi.n	80574 <pio_set_peripheral+0x14>
   8056a:	b1c1      	cbz	r1, 8059e <pio_set_peripheral+0x3e>
   8056c:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   80570:	d00a      	beq.n	80588 <pio_set_peripheral+0x28>
   80572:	e013      	b.n	8059c <pio_set_peripheral+0x3c>
   80574:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   80578:	d011      	beq.n	8059e <pio_set_peripheral+0x3e>
   8057a:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   8057e:	d00e      	beq.n	8059e <pio_set_peripheral+0x3e>
   80580:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   80584:	d10a      	bne.n	8059c <pio_set_peripheral+0x3c>
   80586:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   80588:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   8058a:	6f01      	ldr	r1, [r0, #112]	; 0x70
   8058c:	400b      	ands	r3, r1
   8058e:	ea23 0302 	bic.w	r3, r3, r2
   80592:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   80594:	e002      	b.n	8059c <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   80596:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   80598:	4313      	orrs	r3, r2
   8059a:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   8059c:	6042      	str	r2, [r0, #4]
   8059e:	4770      	bx	lr

000805a0 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   805a0:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   805a2:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   805a6:	bf14      	ite	ne
   805a8:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   805aa:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   805ac:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   805b0:	bf14      	ite	ne
   805b2:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   805b4:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   805b6:	f012 0f02 	tst.w	r2, #2
   805ba:	d002      	beq.n	805c2 <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   805bc:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   805c0:	e004      	b.n	805cc <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   805c2:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   805c6:	bf18      	it	ne
   805c8:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   805cc:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   805ce:	6001      	str	r1, [r0, #0]
   805d0:	4770      	bx	lr
   805d2:	bf00      	nop

000805d4 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   805d4:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   805d6:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   805d8:	9c01      	ldr	r4, [sp, #4]
   805da:	b10c      	cbz	r4, 805e0 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   805dc:	6641      	str	r1, [r0, #100]	; 0x64
   805de:	e000      	b.n	805e2 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   805e0:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   805e2:	b10b      	cbz	r3, 805e8 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   805e4:	6501      	str	r1, [r0, #80]	; 0x50
   805e6:	e000      	b.n	805ea <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   805e8:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   805ea:	b10a      	cbz	r2, 805f0 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   805ec:	6301      	str	r1, [r0, #48]	; 0x30
   805ee:	e000      	b.n	805f2 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   805f0:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   805f2:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   805f4:	6001      	str	r1, [r0, #0]
}
   805f6:	f85d 4b04 	ldr.w	r4, [sp], #4
   805fa:	4770      	bx	lr

000805fc <pio_configure_interrupt>:
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
   805fc:	f012 0f10 	tst.w	r2, #16
   80600:	d010      	beq.n	80624 <pio_configure_interrupt+0x28>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
   80602:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
   80606:	f012 0f20 	tst.w	r2, #32
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
   8060a:	bf14      	ite	ne
   8060c:	f8c0 10d4 	strne.w	r1, [r0, #212]	; 0xd4
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
   80610:	f8c0 10d0 	streq.w	r1, [r0, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
   80614:	f012 0f40 	tst.w	r2, #64	; 0x40
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
   80618:	bf14      	ite	ne
   8061a:	f8c0 10c0 	strne.w	r1, [r0, #192]	; 0xc0
		} else {
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
   8061e:	f8c0 10c4 	streq.w	r1, [r0, #196]	; 0xc4
   80622:	4770      	bx	lr
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
   80624:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
   80628:	4770      	bx	lr
   8062a:	bf00      	nop

0008062c <pio_enable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_ISR;
   8062c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
	p_pio->PIO_IER = ul_mask;
   8062e:	6401      	str	r1, [r0, #64]	; 0x40
   80630:	4770      	bx	lr
   80632:	bf00      	nop

00080634 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   80634:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   80636:	4770      	bx	lr

00080638 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   80638:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   8063a:	4770      	bx	lr

0008063c <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   8063c:	b570      	push	{r4, r5, r6, lr}
   8063e:	b082      	sub	sp, #8
   80640:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   80642:	0944      	lsrs	r4, r0, #5
   80644:	f504 1400 	add.w	r4, r4, #2097152	; 0x200000
   80648:	f204 7407 	addw	r4, r4, #1799	; 0x707
   8064c:	0266      	lsls	r6, r4, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   8064e:	f001 44f0 	and.w	r4, r1, #2013265920	; 0x78000000
   80652:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   80656:	d030      	beq.n	806ba <pio_configure_pin+0x7e>
   80658:	d806      	bhi.n	80668 <pio_configure_pin+0x2c>
   8065a:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   8065e:	d00a      	beq.n	80676 <pio_configure_pin+0x3a>
   80660:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   80664:	d018      	beq.n	80698 <pio_configure_pin+0x5c>
   80666:	e049      	b.n	806fc <pio_configure_pin+0xc0>
   80668:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   8066c:	d030      	beq.n	806d0 <pio_configure_pin+0x94>
   8066e:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   80672:	d02d      	beq.n	806d0 <pio_configure_pin+0x94>
   80674:	e042      	b.n	806fc <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   80676:	f000 001f 	and.w	r0, r0, #31
   8067a:	2401      	movs	r4, #1
   8067c:	4084      	lsls	r4, r0
   8067e:	4630      	mov	r0, r6
   80680:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80684:	4622      	mov	r2, r4
   80686:	4b1f      	ldr	r3, [pc, #124]	; (80704 <pio_configure_pin+0xc8>)
   80688:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8068a:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   8068e:	bf14      	ite	ne
   80690:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80692:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80694:	2001      	movs	r0, #1
   80696:	e032      	b.n	806fe <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   80698:	f000 001f 	and.w	r0, r0, #31
   8069c:	2401      	movs	r4, #1
   8069e:	4084      	lsls	r4, r0
   806a0:	4630      	mov	r0, r6
   806a2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   806a6:	4622      	mov	r2, r4
   806a8:	4b16      	ldr	r3, [pc, #88]	; (80704 <pio_configure_pin+0xc8>)
   806aa:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   806ac:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   806b0:	bf14      	ite	ne
   806b2:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   806b4:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   806b6:	2001      	movs	r0, #1
   806b8:	e021      	b.n	806fe <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   806ba:	f000 011f 	and.w	r1, r0, #31
   806be:	2401      	movs	r4, #1
   806c0:	4630      	mov	r0, r6
   806c2:	fa04 f101 	lsl.w	r1, r4, r1
   806c6:	462a      	mov	r2, r5
   806c8:	4b0f      	ldr	r3, [pc, #60]	; (80708 <pio_configure_pin+0xcc>)
   806ca:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   806cc:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   806ce:	e016      	b.n	806fe <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   806d0:	f000 011f 	and.w	r1, r0, #31
   806d4:	2401      	movs	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   806d6:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   806da:	ea05 0304 	and.w	r3, r5, r4
   806de:	9300      	str	r3, [sp, #0]
   806e0:	4630      	mov	r0, r6
   806e2:	fa04 f101 	lsl.w	r1, r4, r1
   806e6:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   806ea:	bf14      	ite	ne
   806ec:	2200      	movne	r2, #0
   806ee:	2201      	moveq	r2, #1
   806f0:	f3c5 0380 	ubfx	r3, r5, #2, #1
   806f4:	4d05      	ldr	r5, [pc, #20]	; (8070c <pio_configure_pin+0xd0>)
   806f6:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
   806f8:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   806fa:	e000      	b.n	806fe <pio_configure_pin+0xc2>

	default:
		return 0;
   806fc:	2000      	movs	r0, #0
	}

	return 1;
}
   806fe:	b002      	add	sp, #8
   80700:	bd70      	pop	{r4, r5, r6, pc}
   80702:	bf00      	nop
   80704:	00080561 	.word	0x00080561
   80708:	000805a1 	.word	0x000805a1
   8070c:	000805d5 	.word	0x000805d5

00080710 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   80710:	b5f0      	push	{r4, r5, r6, r7, lr}
   80712:	b083      	sub	sp, #12
   80714:	4607      	mov	r7, r0
   80716:	460e      	mov	r6, r1
   80718:	4615      	mov	r5, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   8071a:	f002 44f0 	and.w	r4, r2, #2013265920	; 0x78000000
   8071e:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   80722:	d026      	beq.n	80772 <pio_configure_pin_group+0x62>
   80724:	d806      	bhi.n	80734 <pio_configure_pin_group+0x24>
   80726:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   8072a:	d00a      	beq.n	80742 <pio_configure_pin_group+0x32>
   8072c:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   80730:	d013      	beq.n	8075a <pio_configure_pin_group+0x4a>
   80732:	e034      	b.n	8079e <pio_configure_pin_group+0x8e>
   80734:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   80738:	d01f      	beq.n	8077a <pio_configure_pin_group+0x6a>
   8073a:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   8073e:	d01c      	beq.n	8077a <pio_configure_pin_group+0x6a>
   80740:	e02d      	b.n	8079e <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   80742:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80746:	4632      	mov	r2, r6
   80748:	4b16      	ldr	r3, [pc, #88]	; (807a4 <pio_configure_pin_group+0x94>)
   8074a:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8074c:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80750:	bf14      	ite	ne
   80752:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80754:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80756:	2001      	movs	r0, #1
   80758:	e022      	b.n	807a0 <pio_configure_pin_group+0x90>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   8075a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8075e:	4632      	mov	r2, r6
   80760:	4b10      	ldr	r3, [pc, #64]	; (807a4 <pio_configure_pin_group+0x94>)
   80762:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80764:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80768:	bf14      	ite	ne
   8076a:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8076c:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   8076e:	2001      	movs	r0, #1
   80770:	e016      	b.n	807a0 <pio_configure_pin_group+0x90>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   80772:	4b0d      	ldr	r3, [pc, #52]	; (807a8 <pio_configure_pin_group+0x98>)
   80774:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80776:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   80778:	e012      	b.n	807a0 <pio_configure_pin_group+0x90>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   8077a:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   8077e:	f005 0301 	and.w	r3, r5, #1
   80782:	9300      	str	r3, [sp, #0]
   80784:	4638      	mov	r0, r7
   80786:	4631      	mov	r1, r6
   80788:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   8078c:	bf14      	ite	ne
   8078e:	2200      	movne	r2, #0
   80790:	2201      	moveq	r2, #1
   80792:	f3c5 0380 	ubfx	r3, r5, #2, #1
   80796:	4c05      	ldr	r4, [pc, #20]	; (807ac <pio_configure_pin_group+0x9c>)
   80798:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   8079a:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   8079c:	e000      	b.n	807a0 <pio_configure_pin_group+0x90>

	default:
		return 0;
   8079e:	2000      	movs	r0, #0
	}

	return 1;
}
   807a0:	b003      	add	sp, #12
   807a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   807a4:	00080561 	.word	0x00080561
   807a8:	000805a1 	.word	0x000805a1
   807ac:	000805d5 	.word	0x000805d5

000807b0 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   807b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   807b4:	4604      	mov	r4, r0
   807b6:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   807b8:	4b10      	ldr	r3, [pc, #64]	; (807fc <pio_handler_process+0x4c>)
   807ba:	4798      	blx	r3
   807bc:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   807be:	4620      	mov	r0, r4
   807c0:	4b0f      	ldr	r3, [pc, #60]	; (80800 <pio_handler_process+0x50>)
   807c2:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   807c4:	4005      	ands	r5, r0
   807c6:	d017      	beq.n	807f8 <pio_handler_process+0x48>
   807c8:	4f0e      	ldr	r7, [pc, #56]	; (80804 <pio_handler_process+0x54>)
   807ca:	f107 040c 	add.w	r4, r7, #12
   807ce:	376c      	adds	r7, #108	; 0x6c
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   807d0:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   807d4:	42b3      	cmp	r3, r6
   807d6:	d10a      	bne.n	807ee <pio_handler_process+0x3e>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   807d8:	f854 1c08 	ldr.w	r1, [r4, #-8]
   807dc:	4229      	tst	r1, r5
   807de:	d006      	beq.n	807ee <pio_handler_process+0x3e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   807e0:	6823      	ldr	r3, [r4, #0]
   807e2:	4630      	mov	r0, r6
   807e4:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   807e6:	f854 3c08 	ldr.w	r3, [r4, #-8]
   807ea:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   807ee:	42bc      	cmp	r4, r7
   807f0:	d002      	beq.n	807f8 <pio_handler_process+0x48>
   807f2:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   807f4:	2d00      	cmp	r5, #0
   807f6:	d1eb      	bne.n	807d0 <pio_handler_process+0x20>
   807f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   807fc:	00080635 	.word	0x00080635
   80800:	00080639 	.word	0x00080639
   80804:	20070a6c 	.word	0x20070a6c

00080808 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
   80808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
   8080a:	4c0b      	ldr	r4, [pc, #44]	; (80838 <pio_handler_set+0x30>)
   8080c:	6824      	ldr	r4, [r4, #0]
   8080e:	2c06      	cmp	r4, #6
   80810:	d810      	bhi.n	80834 <pio_handler_set+0x2c>
		return 1;

	/* Define new source */
	pSource = &(gs_interrupt_sources[gs_ul_nb_sources]);
   80812:	4f0a      	ldr	r7, [pc, #40]	; (8083c <pio_handler_set+0x34>)
   80814:	0126      	lsls	r6, r4, #4
   80816:	19bd      	adds	r5, r7, r6
	pSource->id = ul_id;
   80818:	51b9      	str	r1, [r7, r6]
	pSource->mask = ul_mask;
   8081a:	606a      	str	r2, [r5, #4]
	pSource->attr = ul_attr;
   8081c:	60ab      	str	r3, [r5, #8]
	pSource->handler = p_handler;
   8081e:	9906      	ldr	r1, [sp, #24]
   80820:	60e9      	str	r1, [r5, #12]
	gs_ul_nb_sources++;
   80822:	3401      	adds	r4, #1
   80824:	4904      	ldr	r1, [pc, #16]	; (80838 <pio_handler_set+0x30>)
   80826:	600c      	str	r4, [r1, #0]

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
   80828:	4611      	mov	r1, r2
   8082a:	461a      	mov	r2, r3
   8082c:	4b04      	ldr	r3, [pc, #16]	; (80840 <pio_handler_set+0x38>)
   8082e:	4798      	blx	r3

	return 0;
   80830:	2000      	movs	r0, #0
   80832:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;
   80834:	2001      	movs	r0, #1

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);

	return 0;
}
   80836:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80838:	20070a68 	.word	0x20070a68
   8083c:	20070a6c 	.word	0x20070a6c
   80840:	000805fd 	.word	0x000805fd

00080844 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   80844:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   80846:	4802      	ldr	r0, [pc, #8]	; (80850 <PIOA_Handler+0xc>)
   80848:	210b      	movs	r1, #11
   8084a:	4b02      	ldr	r3, [pc, #8]	; (80854 <PIOA_Handler+0x10>)
   8084c:	4798      	blx	r3
   8084e:	bd08      	pop	{r3, pc}
   80850:	400e0e00 	.word	0x400e0e00
   80854:	000807b1 	.word	0x000807b1

00080858 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   80858:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   8085a:	4802      	ldr	r0, [pc, #8]	; (80864 <PIOB_Handler+0xc>)
   8085c:	210c      	movs	r1, #12
   8085e:	4b02      	ldr	r3, [pc, #8]	; (80868 <PIOB_Handler+0x10>)
   80860:	4798      	blx	r3
   80862:	bd08      	pop	{r3, pc}
   80864:	400e1000 	.word	0x400e1000
   80868:	000807b1 	.word	0x000807b1

0008086c <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   8086c:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   8086e:	4802      	ldr	r0, [pc, #8]	; (80878 <PIOC_Handler+0xc>)
   80870:	210d      	movs	r1, #13
   80872:	4b02      	ldr	r3, [pc, #8]	; (8087c <PIOC_Handler+0x10>)
   80874:	4798      	blx	r3
   80876:	bd08      	pop	{r3, pc}
   80878:	400e1200 	.word	0x400e1200
   8087c:	000807b1 	.word	0x000807b1

00080880 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   80880:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   80882:	4802      	ldr	r0, [pc, #8]	; (8088c <PIOD_Handler+0xc>)
   80884:	210e      	movs	r1, #14
   80886:	4b02      	ldr	r3, [pc, #8]	; (80890 <PIOD_Handler+0x10>)
   80888:	4798      	blx	r3
   8088a:	bd08      	pop	{r3, pc}
   8088c:	400e1400 	.word	0x400e1400
   80890:	000807b1 	.word	0x000807b1

00080894 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   80894:	4b17      	ldr	r3, [pc, #92]	; (808f4 <pmc_switch_mck_to_pllack+0x60>)
   80896:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80898:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   8089c:	4310      	orrs	r0, r2
   8089e:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   808a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   808a2:	f013 0f08 	tst.w	r3, #8
   808a6:	d109      	bne.n	808bc <pmc_switch_mck_to_pllack+0x28>
   808a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
   808ac:	4911      	ldr	r1, [pc, #68]	; (808f4 <pmc_switch_mck_to_pllack+0x60>)
   808ae:	e001      	b.n	808b4 <pmc_switch_mck_to_pllack+0x20>
			--ul_timeout) {
		if (ul_timeout == 0) {
   808b0:	3b01      	subs	r3, #1
   808b2:	d019      	beq.n	808e8 <pmc_switch_mck_to_pllack+0x54>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   808b4:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   808b6:	f012 0f08 	tst.w	r2, #8
   808ba:	d0f9      	beq.n	808b0 <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   808bc:	4b0d      	ldr	r3, [pc, #52]	; (808f4 <pmc_switch_mck_to_pllack+0x60>)
   808be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   808c0:	f022 0203 	bic.w	r2, r2, #3
   808c4:	f042 0202 	orr.w	r2, r2, #2
   808c8:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   808ca:	6e98      	ldr	r0, [r3, #104]	; 0x68
   808cc:	f010 0008 	ands.w	r0, r0, #8
   808d0:	d10c      	bne.n	808ec <pmc_switch_mck_to_pllack+0x58>
   808d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
   808d6:	4907      	ldr	r1, [pc, #28]	; (808f4 <pmc_switch_mck_to_pllack+0x60>)
   808d8:	e001      	b.n	808de <pmc_switch_mck_to_pllack+0x4a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   808da:	3b01      	subs	r3, #1
   808dc:	d008      	beq.n	808f0 <pmc_switch_mck_to_pllack+0x5c>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   808de:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   808e0:	f012 0f08 	tst.w	r2, #8
   808e4:	d0f9      	beq.n	808da <pmc_switch_mck_to_pllack+0x46>
   808e6:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   808e8:	2001      	movs	r0, #1
   808ea:	4770      	bx	lr
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   808ec:	2000      	movs	r0, #0
   808ee:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   808f0:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   808f2:	4770      	bx	lr
   808f4:	400e0600 	.word	0x400e0600

000808f8 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   808f8:	b138      	cbz	r0, 8090a <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   808fa:	4911      	ldr	r1, [pc, #68]	; (80940 <pmc_switch_mainck_to_xtal+0x48>)
   808fc:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   808fe:	4a11      	ldr	r2, [pc, #68]	; (80944 <pmc_switch_mainck_to_xtal+0x4c>)
   80900:	401a      	ands	r2, r3
   80902:	4b11      	ldr	r3, [pc, #68]	; (80948 <pmc_switch_mainck_to_xtal+0x50>)
   80904:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80906:	620b      	str	r3, [r1, #32]
   80908:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   8090a:	4a0d      	ldr	r2, [pc, #52]	; (80940 <pmc_switch_mainck_to_xtal+0x48>)
   8090c:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   8090e:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   80912:	f023 0303 	bic.w	r3, r3, #3
   80916:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   8091a:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   8091e:	0209      	lsls	r1, r1, #8
   80920:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   80922:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80924:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   80926:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80928:	f013 0f01 	tst.w	r3, #1
   8092c:	d0fb      	beq.n	80926 <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   8092e:	4a04      	ldr	r2, [pc, #16]	; (80940 <pmc_switch_mainck_to_xtal+0x48>)
   80930:	6a13      	ldr	r3, [r2, #32]
   80932:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   80936:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   8093a:	6213      	str	r3, [r2, #32]
   8093c:	4770      	bx	lr
   8093e:	bf00      	nop
   80940:	400e0600 	.word	0x400e0600
   80944:	fec8fffc 	.word	0xfec8fffc
   80948:	01370002 	.word	0x01370002

0008094c <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   8094c:	4b02      	ldr	r3, [pc, #8]	; (80958 <pmc_osc_is_ready_mainck+0xc>)
   8094e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80950:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   80954:	4770      	bx	lr
   80956:	bf00      	nop
   80958:	400e0600 	.word	0x400e0600

0008095c <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   8095c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   80960:	4b01      	ldr	r3, [pc, #4]	; (80968 <pmc_disable_pllack+0xc>)
   80962:	629a      	str	r2, [r3, #40]	; 0x28
   80964:	4770      	bx	lr
   80966:	bf00      	nop
   80968:	400e0600 	.word	0x400e0600

0008096c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   8096c:	4b02      	ldr	r3, [pc, #8]	; (80978 <pmc_is_locked_pllack+0xc>)
   8096e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80970:	f000 0002 	and.w	r0, r0, #2
   80974:	4770      	bx	lr
   80976:	bf00      	nop
   80978:	400e0600 	.word	0x400e0600

0008097c <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   8097c:	282c      	cmp	r0, #44	; 0x2c
   8097e:	d820      	bhi.n	809c2 <pmc_enable_periph_clk+0x46>
		return 1;
	}

	if (ul_id < 32) {
   80980:	281f      	cmp	r0, #31
   80982:	d80d      	bhi.n	809a0 <pmc_enable_periph_clk+0x24>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   80984:	4b12      	ldr	r3, [pc, #72]	; (809d0 <pmc_enable_periph_clk+0x54>)
   80986:	699a      	ldr	r2, [r3, #24]
   80988:	2301      	movs	r3, #1
   8098a:	4083      	lsls	r3, r0
   8098c:	401a      	ands	r2, r3
   8098e:	4293      	cmp	r3, r2
   80990:	d019      	beq.n	809c6 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER0 = 1 << ul_id;
   80992:	2301      	movs	r3, #1
   80994:	fa03 f000 	lsl.w	r0, r3, r0
   80998:	4b0d      	ldr	r3, [pc, #52]	; (809d0 <pmc_enable_periph_clk+0x54>)
   8099a:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   8099c:	2000      	movs	r0, #0
   8099e:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   809a0:	4b0b      	ldr	r3, [pc, #44]	; (809d0 <pmc_enable_periph_clk+0x54>)
   809a2:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
	} else {
		ul_id -= 32;
   809a6:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   809a8:	2301      	movs	r3, #1
   809aa:	4083      	lsls	r3, r0
   809ac:	401a      	ands	r2, r3
   809ae:	4293      	cmp	r3, r2
   809b0:	d00b      	beq.n	809ca <pmc_enable_periph_clk+0x4e>
			PMC->PMC_PCER1 = 1 << ul_id;
   809b2:	2301      	movs	r3, #1
   809b4:	fa03 f000 	lsl.w	r0, r3, r0
   809b8:	4b05      	ldr	r3, [pc, #20]	; (809d0 <pmc_enable_periph_clk+0x54>)
   809ba:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   809be:	2000      	movs	r0, #0
   809c0:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   809c2:	2001      	movs	r0, #1
   809c4:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   809c6:	2000      	movs	r0, #0
   809c8:	4770      	bx	lr
   809ca:	2000      	movs	r0, #0
}
   809cc:	4770      	bx	lr
   809ce:	bf00      	nop
   809d0:	400e0600 	.word	0x400e0600

000809d4 <pmc_set_writeprotect>:
 *
 * \param ul_enable 1 to enable, 0 to disable.
 */
void pmc_set_writeprotect(uint32_t ul_enable)
{
	if (ul_enable) {
   809d4:	b120      	cbz	r0, 809e0 <pmc_set_writeprotect+0xc>
		PMC->PMC_WPMR = PMC_WPMR_WPKEY_PASSWD | PMC_WPMR_WPEN;
   809d6:	4a05      	ldr	r2, [pc, #20]	; (809ec <pmc_set_writeprotect+0x18>)
   809d8:	4b05      	ldr	r3, [pc, #20]	; (809f0 <pmc_set_writeprotect+0x1c>)
   809da:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
   809de:	4770      	bx	lr
	} else {
		PMC->PMC_WPMR = PMC_WPMR_WPKEY_PASSWD;
   809e0:	4a04      	ldr	r2, [pc, #16]	; (809f4 <pmc_set_writeprotect+0x20>)
   809e2:	4b03      	ldr	r3, [pc, #12]	; (809f0 <pmc_set_writeprotect+0x1c>)
   809e4:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
   809e8:	4770      	bx	lr
   809ea:	bf00      	nop
   809ec:	504d4301 	.word	0x504d4301
   809f0:	400e0600 	.word	0x400e0600
   809f4:	504d4300 	.word	0x504d4300

000809f8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   809f8:	e7fe      	b.n	809f8 <Dummy_Handler>
   809fa:	bf00      	nop

000809fc <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   809fc:	b510      	push	{r4, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   809fe:	4b1e      	ldr	r3, [pc, #120]	; (80a78 <Reset_Handler+0x7c>)
   80a00:	4a1e      	ldr	r2, [pc, #120]	; (80a7c <Reset_Handler+0x80>)
   80a02:	429a      	cmp	r2, r3
   80a04:	d003      	beq.n	80a0e <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   80a06:	4b1e      	ldr	r3, [pc, #120]	; (80a80 <Reset_Handler+0x84>)
   80a08:	4a1b      	ldr	r2, [pc, #108]	; (80a78 <Reset_Handler+0x7c>)
   80a0a:	429a      	cmp	r2, r3
   80a0c:	d304      	bcc.n	80a18 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80a0e:	4b1d      	ldr	r3, [pc, #116]	; (80a84 <Reset_Handler+0x88>)
   80a10:	4a1d      	ldr	r2, [pc, #116]	; (80a88 <Reset_Handler+0x8c>)
   80a12:	429a      	cmp	r2, r3
   80a14:	d30f      	bcc.n	80a36 <Reset_Handler+0x3a>
   80a16:	e01a      	b.n	80a4e <Reset_Handler+0x52>
   80a18:	4b1c      	ldr	r3, [pc, #112]	; (80a8c <Reset_Handler+0x90>)
   80a1a:	4c1d      	ldr	r4, [pc, #116]	; (80a90 <Reset_Handler+0x94>)
   80a1c:	1ae4      	subs	r4, r4, r3
   80a1e:	f024 0403 	bic.w	r4, r4, #3
   80a22:	3404      	adds	r4, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   80a24:	2300      	movs	r3, #0
			*pDest++ = *pSrc++;
   80a26:	4814      	ldr	r0, [pc, #80]	; (80a78 <Reset_Handler+0x7c>)
   80a28:	4914      	ldr	r1, [pc, #80]	; (80a7c <Reset_Handler+0x80>)
   80a2a:	585a      	ldr	r2, [r3, r1]
   80a2c:	501a      	str	r2, [r3, r0]
   80a2e:	3304      	adds	r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   80a30:	42a3      	cmp	r3, r4
   80a32:	d1fa      	bne.n	80a2a <Reset_Handler+0x2e>
   80a34:	e7eb      	b.n	80a0e <Reset_Handler+0x12>
   80a36:	4b17      	ldr	r3, [pc, #92]	; (80a94 <Reset_Handler+0x98>)
   80a38:	4917      	ldr	r1, [pc, #92]	; (80a98 <Reset_Handler+0x9c>)
   80a3a:	1ac9      	subs	r1, r1, r3
   80a3c:	f021 0103 	bic.w	r1, r1, #3
   80a40:	1d1a      	adds	r2, r3, #4
   80a42:	4411      	add	r1, r2
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   80a44:	2200      	movs	r2, #0
   80a46:	f843 2f04 	str.w	r2, [r3, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80a4a:	428b      	cmp	r3, r1
   80a4c:	d1fb      	bne.n	80a46 <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   80a4e:	4a13      	ldr	r2, [pc, #76]	; (80a9c <Reset_Handler+0xa0>)
   80a50:	f022 4360 	bic.w	r3, r2, #3758096384	; 0xe0000000
   80a54:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   80a58:	4911      	ldr	r1, [pc, #68]	; (80aa0 <Reset_Handler+0xa4>)
   80a5a:	608b      	str	r3, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   80a5c:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
   80a60:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
   80a64:	d203      	bcs.n	80a6e <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   80a66:	688a      	ldr	r2, [r1, #8]
   80a68:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   80a6c:	608a      	str	r2, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   80a6e:	4b0d      	ldr	r3, [pc, #52]	; (80aa4 <Reset_Handler+0xa8>)
   80a70:	4798      	blx	r3

	/* Branch to main function */
	main();
   80a72:	4b0d      	ldr	r3, [pc, #52]	; (80aa8 <Reset_Handler+0xac>)
   80a74:	4798      	blx	r3
   80a76:	e7fe      	b.n	80a76 <Reset_Handler+0x7a>
   80a78:	20070000 	.word	0x20070000
   80a7c:	00084854 	.word	0x00084854
   80a80:	200709a4 	.word	0x200709a4
   80a84:	20070b24 	.word	0x20070b24
   80a88:	200709a4 	.word	0x200709a4
   80a8c:	20070004 	.word	0x20070004
   80a90:	200709a7 	.word	0x200709a7
   80a94:	200709a0 	.word	0x200709a0
   80a98:	20070b1f 	.word	0x20070b1f
   80a9c:	00080000 	.word	0x00080000
   80aa0:	e000ed00 	.word	0xe000ed00
   80aa4:	00081ddd 	.word	0x00081ddd
   80aa8:	00080f19 	.word	0x00080f19

00080aac <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   80aac:	4b3e      	ldr	r3, [pc, #248]	; (80ba8 <SystemCoreClockUpdate+0xfc>)
   80aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80ab0:	f003 0303 	and.w	r3, r3, #3
   80ab4:	2b03      	cmp	r3, #3
   80ab6:	d85f      	bhi.n	80b78 <SystemCoreClockUpdate+0xcc>
   80ab8:	e8df f003 	tbb	[pc, r3]
   80abc:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   80ac0:	4b3a      	ldr	r3, [pc, #232]	; (80bac <SystemCoreClockUpdate+0x100>)
   80ac2:	695b      	ldr	r3, [r3, #20]
   80ac4:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   80ac8:	bf14      	ite	ne
   80aca:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   80ace:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   80ad2:	4b37      	ldr	r3, [pc, #220]	; (80bb0 <SystemCoreClockUpdate+0x104>)
   80ad4:	601a      	str	r2, [r3, #0]
   80ad6:	e04f      	b.n	80b78 <SystemCoreClockUpdate+0xcc>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80ad8:	4b33      	ldr	r3, [pc, #204]	; (80ba8 <SystemCoreClockUpdate+0xfc>)
   80ada:	6a1b      	ldr	r3, [r3, #32]
   80adc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80ae0:	d003      	beq.n	80aea <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80ae2:	4a34      	ldr	r2, [pc, #208]	; (80bb4 <SystemCoreClockUpdate+0x108>)
   80ae4:	4b32      	ldr	r3, [pc, #200]	; (80bb0 <SystemCoreClockUpdate+0x104>)
   80ae6:	601a      	str	r2, [r3, #0]
   80ae8:	e046      	b.n	80b78 <SystemCoreClockUpdate+0xcc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80aea:	4a33      	ldr	r2, [pc, #204]	; (80bb8 <SystemCoreClockUpdate+0x10c>)
   80aec:	4b30      	ldr	r3, [pc, #192]	; (80bb0 <SystemCoreClockUpdate+0x104>)
   80aee:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80af0:	4b2d      	ldr	r3, [pc, #180]	; (80ba8 <SystemCoreClockUpdate+0xfc>)
   80af2:	6a1b      	ldr	r3, [r3, #32]
   80af4:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80af8:	2b10      	cmp	r3, #16
   80afa:	d002      	beq.n	80b02 <SystemCoreClockUpdate+0x56>
   80afc:	2b20      	cmp	r3, #32
   80afe:	d004      	beq.n	80b0a <SystemCoreClockUpdate+0x5e>
   80b00:	e03a      	b.n	80b78 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   80b02:	4a2e      	ldr	r2, [pc, #184]	; (80bbc <SystemCoreClockUpdate+0x110>)
   80b04:	4b2a      	ldr	r3, [pc, #168]	; (80bb0 <SystemCoreClockUpdate+0x104>)
   80b06:	601a      	str	r2, [r3, #0]
				break;
   80b08:	e036      	b.n	80b78 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   80b0a:	4a2a      	ldr	r2, [pc, #168]	; (80bb4 <SystemCoreClockUpdate+0x108>)
   80b0c:	4b28      	ldr	r3, [pc, #160]	; (80bb0 <SystemCoreClockUpdate+0x104>)
   80b0e:	601a      	str	r2, [r3, #0]
				break;
   80b10:	e032      	b.n	80b78 <SystemCoreClockUpdate+0xcc>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80b12:	4b25      	ldr	r3, [pc, #148]	; (80ba8 <SystemCoreClockUpdate+0xfc>)
   80b14:	6a1b      	ldr	r3, [r3, #32]
   80b16:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80b1a:	d003      	beq.n	80b24 <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80b1c:	4a25      	ldr	r2, [pc, #148]	; (80bb4 <SystemCoreClockUpdate+0x108>)
   80b1e:	4b24      	ldr	r3, [pc, #144]	; (80bb0 <SystemCoreClockUpdate+0x104>)
   80b20:	601a      	str	r2, [r3, #0]
   80b22:	e012      	b.n	80b4a <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80b24:	4a24      	ldr	r2, [pc, #144]	; (80bb8 <SystemCoreClockUpdate+0x10c>)
   80b26:	4b22      	ldr	r3, [pc, #136]	; (80bb0 <SystemCoreClockUpdate+0x104>)
   80b28:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80b2a:	4b1f      	ldr	r3, [pc, #124]	; (80ba8 <SystemCoreClockUpdate+0xfc>)
   80b2c:	6a1b      	ldr	r3, [r3, #32]
   80b2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80b32:	2b10      	cmp	r3, #16
   80b34:	d002      	beq.n	80b3c <SystemCoreClockUpdate+0x90>
   80b36:	2b20      	cmp	r3, #32
   80b38:	d004      	beq.n	80b44 <SystemCoreClockUpdate+0x98>
   80b3a:	e006      	b.n	80b4a <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   80b3c:	4a1f      	ldr	r2, [pc, #124]	; (80bbc <SystemCoreClockUpdate+0x110>)
   80b3e:	4b1c      	ldr	r3, [pc, #112]	; (80bb0 <SystemCoreClockUpdate+0x104>)
   80b40:	601a      	str	r2, [r3, #0]
				break;
   80b42:	e002      	b.n	80b4a <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   80b44:	4a1b      	ldr	r2, [pc, #108]	; (80bb4 <SystemCoreClockUpdate+0x108>)
   80b46:	4b1a      	ldr	r3, [pc, #104]	; (80bb0 <SystemCoreClockUpdate+0x104>)
   80b48:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   80b4a:	4b17      	ldr	r3, [pc, #92]	; (80ba8 <SystemCoreClockUpdate+0xfc>)
   80b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80b4e:	f003 0303 	and.w	r3, r3, #3
   80b52:	2b02      	cmp	r3, #2
   80b54:	d10d      	bne.n	80b72 <SystemCoreClockUpdate+0xc6>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80b56:	4b14      	ldr	r3, [pc, #80]	; (80ba8 <SystemCoreClockUpdate+0xfc>)
   80b58:	6a98      	ldr	r0, [r3, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80b5a:	6a99      	ldr	r1, [r3, #40]	; 0x28
   80b5c:	4b14      	ldr	r3, [pc, #80]	; (80bb0 <SystemCoreClockUpdate+0x104>)
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80b5e:	f3c0 400a 	ubfx	r0, r0, #16, #11
   80b62:	681a      	ldr	r2, [r3, #0]
   80b64:	fb00 2202 	mla	r2, r0, r2, r2
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80b68:	b2c9      	uxtb	r1, r1
   80b6a:	fbb2 f2f1 	udiv	r2, r2, r1
   80b6e:	601a      	str	r2, [r3, #0]
   80b70:	e002      	b.n	80b78 <SystemCoreClockUpdate+0xcc>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   80b72:	4a13      	ldr	r2, [pc, #76]	; (80bc0 <SystemCoreClockUpdate+0x114>)
   80b74:	4b0e      	ldr	r3, [pc, #56]	; (80bb0 <SystemCoreClockUpdate+0x104>)
   80b76:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   80b78:	4b0b      	ldr	r3, [pc, #44]	; (80ba8 <SystemCoreClockUpdate+0xfc>)
   80b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80b7c:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80b80:	2b70      	cmp	r3, #112	; 0x70
   80b82:	d107      	bne.n	80b94 <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
   80b84:	4b0a      	ldr	r3, [pc, #40]	; (80bb0 <SystemCoreClockUpdate+0x104>)
   80b86:	681a      	ldr	r2, [r3, #0]
   80b88:	490e      	ldr	r1, [pc, #56]	; (80bc4 <SystemCoreClockUpdate+0x118>)
   80b8a:	fba1 0202 	umull	r0, r2, r1, r2
   80b8e:	0852      	lsrs	r2, r2, #1
   80b90:	601a      	str	r2, [r3, #0]
   80b92:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   80b94:	4b04      	ldr	r3, [pc, #16]	; (80ba8 <SystemCoreClockUpdate+0xfc>)
   80b96:	6b19      	ldr	r1, [r3, #48]	; 0x30
   80b98:	4b05      	ldr	r3, [pc, #20]	; (80bb0 <SystemCoreClockUpdate+0x104>)
   80b9a:	f3c1 1102 	ubfx	r1, r1, #4, #3
   80b9e:	681a      	ldr	r2, [r3, #0]
   80ba0:	40ca      	lsrs	r2, r1
   80ba2:	601a      	str	r2, [r3, #0]
   80ba4:	4770      	bx	lr
   80ba6:	bf00      	nop
   80ba8:	400e0600 	.word	0x400e0600
   80bac:	400e1a10 	.word	0x400e1a10
   80bb0:	2007013c 	.word	0x2007013c
   80bb4:	00b71b00 	.word	0x00b71b00
   80bb8:	003d0900 	.word	0x003d0900
   80bbc:	007a1200 	.word	0x007a1200
   80bc0:	0e4e1c00 	.word	0x0e4e1c00
   80bc4:	aaaaaaab 	.word	0xaaaaaaab

00080bc8 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   80bc8:	4b09      	ldr	r3, [pc, #36]	; (80bf0 <_sbrk+0x28>)
   80bca:	681b      	ldr	r3, [r3, #0]
   80bcc:	b913      	cbnz	r3, 80bd4 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
   80bce:	4a09      	ldr	r2, [pc, #36]	; (80bf4 <_sbrk+0x2c>)
   80bd0:	4b07      	ldr	r3, [pc, #28]	; (80bf0 <_sbrk+0x28>)
   80bd2:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   80bd4:	4b06      	ldr	r3, [pc, #24]	; (80bf0 <_sbrk+0x28>)
   80bd6:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   80bd8:	181a      	adds	r2, r3, r0
   80bda:	4907      	ldr	r1, [pc, #28]	; (80bf8 <_sbrk+0x30>)
   80bdc:	4291      	cmp	r1, r2
   80bde:	db04      	blt.n	80bea <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
   80be0:	4610      	mov	r0, r2
   80be2:	4a03      	ldr	r2, [pc, #12]	; (80bf0 <_sbrk+0x28>)
   80be4:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   80be6:	4618      	mov	r0, r3
   80be8:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
   80bea:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
   80bee:	4770      	bx	lr
   80bf0:	20070adc 	.word	0x20070adc
   80bf4:	20072b28 	.word	0x20072b28
   80bf8:	20087ffc 	.word	0x20087ffc

00080bfc <_close>:
}

extern int _close(int file)
{
	return -1;
}
   80bfc:	f04f 30ff 	mov.w	r0, #4294967295
   80c00:	4770      	bx	lr
   80c02:	bf00      	nop

00080c04 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   80c04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   80c08:	604b      	str	r3, [r1, #4]

	return 0;
}
   80c0a:	2000      	movs	r0, #0
   80c0c:	4770      	bx	lr
   80c0e:	bf00      	nop

00080c10 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   80c10:	2001      	movs	r0, #1
   80c12:	4770      	bx	lr

00080c14 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   80c14:	2000      	movs	r0, #0
   80c16:	4770      	bx	lr

00080c18 <pulse>:
#include <asf.h>
#include "motorFunc.h"
#include "pulseCounterHandler.h"

//Sends the pulse to the engine
void pulse(uint16_t motorSpeed){
   80c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80c1a:	4c0d      	ldr	r4, [pc, #52]	; (80c50 <pulse+0x38>)
   80c1c:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   80c20:	6325      	str	r5, [r4, #48]	; 0x30
	ioport_set_pin_level(pin24, HIGH);
	delay_us(motorSpeed);
   80c22:	a309      	add	r3, pc, #36	; (adr r3, 80c48 <pulse+0x30>)
   80c24:	e9d3 2300 	ldrd	r2, r3, [r3]
   80c28:	490a      	ldr	r1, [pc, #40]	; (80c54 <pulse+0x3c>)
   80c2a:	4616      	mov	r6, r2
   80c2c:	461f      	mov	r7, r3
   80c2e:	fbe1 6700 	umlal	r6, r7, r1, r0
   80c32:	4630      	mov	r0, r6
   80c34:	4639      	mov	r1, r7
   80c36:	4a08      	ldr	r2, [pc, #32]	; (80c58 <pulse+0x40>)
   80c38:	2300      	movs	r3, #0
   80c3a:	4e08      	ldr	r6, [pc, #32]	; (80c5c <pulse+0x44>)
   80c3c:	47b0      	blx	r6
   80c3e:	4b08      	ldr	r3, [pc, #32]	; (80c60 <pulse+0x48>)
   80c40:	4798      	blx	r3
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80c42:	6365      	str	r5, [r4, #52]	; 0x34
   80c44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80c46:	bf00      	nop
   80c48:	00d59f7f 	.word	0x00d59f7f
   80c4c:	00000000 	.word	0x00000000
   80c50:	400e0e00 	.word	0x400e0e00
   80c54:	0501bd00 	.word	0x0501bd00
   80c58:	00d59f80 	.word	0x00d59f80
   80c5c:	0008181d 	.word	0x0008181d
   80c60:	20070001 	.word	0x20070001
   80c64:	f3af 8000 	nop.w

00080c68 <stop>:
	pulse(reverseBaseSpeed);
	delay_ms(timeOut);
}

//Stops both of the engines
void stop(){
   80c68:	b538      	push	{r3, r4, r5, lr}
	pulse(1500);
   80c6a:	f240 50dc 	movw	r0, #1500	; 0x5dc
   80c6e:	4d06      	ldr	r5, [pc, #24]	; (80c88 <stop+0x20>)
   80c70:	47a8      	blx	r5
	delay_us(motorSwitch);
   80c72:	f641 10c8 	movw	r0, #6600	; 0x19c8
   80c76:	4c05      	ldr	r4, [pc, #20]	; (80c8c <stop+0x24>)
   80c78:	47a0      	blx	r4
	pulse(1500);
   80c7a:	f240 50dc 	movw	r0, #1500	; 0x5dc
   80c7e:	47a8      	blx	r5
	delay_ms(timeOut);
   80c80:	4803      	ldr	r0, [pc, #12]	; (80c90 <stop+0x28>)
   80c82:	47a0      	blx	r4
   80c84:	bd38      	pop	{r3, r4, r5, pc}
   80c86:	bf00      	nop
   80c88:	00080c19 	.word	0x00080c19
   80c8c:	20070001 	.word	0x20070001
   80c90:	0036ee80 	.word	0x0036ee80
   80c94:	00000000 	.word	0x00000000

00080c98 <rotateRightByDegrees>:
	delay_us(motorSwitch);
	pulse(baseSpeed);
	delay_ms(timeOut);
}

void rotateRightByDegrees(int degree){
   80c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80c9a:	4604      	mov	r4, r0
	stop();
   80c9c:	4b1c      	ldr	r3, [pc, #112]	; (80d10 <rotateRightByDegrees+0x78>)
   80c9e:	4798      	blx	r3
	degree=degree*1.1;
   80ca0:	4620      	mov	r0, r4
   80ca2:	4b1c      	ldr	r3, [pc, #112]	; (80d14 <rotateRightByDegrees+0x7c>)
   80ca4:	4798      	blx	r3
   80ca6:	a318      	add	r3, pc, #96	; (adr r3, 80d08 <rotateRightByDegrees+0x70>)
   80ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
   80cac:	4c1a      	ldr	r4, [pc, #104]	; (80d18 <rotateRightByDegrees+0x80>)
   80cae:	47a0      	blx	r4
   80cb0:	4b1a      	ldr	r3, [pc, #104]	; (80d1c <rotateRightByDegrees+0x84>)
   80cb2:	4798      	blx	r3
	degree=(degree/4)-1;
   80cb4:	2800      	cmp	r0, #0
   80cb6:	bfb8      	it	lt
   80cb8:	3003      	addlt	r0, #3
   80cba:	1084      	asrs	r4, r0, #2
   80cbc:	3c01      	subs	r4, #1
	
	pulse(reverseBaseSpeed);
   80cbe:	f44f 60a0 	mov.w	r0, #1280	; 0x500
   80cc2:	4d17      	ldr	r5, [pc, #92]	; (80d20 <rotateRightByDegrees+0x88>)
   80cc4:	47a8      	blx	r5
	delay_us(motorSwitch);
   80cc6:	f641 10c8 	movw	r0, #6600	; 0x19c8
   80cca:	4b16      	ldr	r3, [pc, #88]	; (80d24 <rotateRightByDegrees+0x8c>)
   80ccc:	4798      	blx	r3
	pulse(baseSpeedLeft);
   80cce:	f240 607c 	movw	r0, #1660	; 0x67c
   80cd2:	47a8      	blx	r5
	
	counterA = 0;
   80cd4:	2300      	movs	r3, #0
   80cd6:	4a14      	ldr	r2, [pc, #80]	; (80d28 <rotateRightByDegrees+0x90>)
   80cd8:	6013      	str	r3, [r2, #0]
	counterB = 0;
   80cda:	4a14      	ldr	r2, [pc, #80]	; (80d2c <rotateRightByDegrees+0x94>)
   80cdc:	6013      	str	r3, [r2, #0]
	//&&(counterB<degree)
	while((counterA<degree)){
   80cde:	429c      	cmp	r4, r3
   80ce0:	dd08      	ble.n	80cf4 <rotateRightByDegrees+0x5c>
		delay_ms(1);
   80ce2:	f241 7770 	movw	r7, #6000	; 0x1770
   80ce6:	4e0f      	ldr	r6, [pc, #60]	; (80d24 <rotateRightByDegrees+0x8c>)
	pulse(baseSpeedLeft);
	
	counterA = 0;
	counterB = 0;
	//&&(counterB<degree)
	while((counterA<degree)){
   80ce8:	4d0f      	ldr	r5, [pc, #60]	; (80d28 <rotateRightByDegrees+0x90>)
		delay_ms(1);
   80cea:	4638      	mov	r0, r7
   80cec:	47b0      	blx	r6
	pulse(baseSpeedLeft);
	
	counterA = 0;
	counterB = 0;
	//&&(counterB<degree)
	while((counterA<degree)){
   80cee:	682b      	ldr	r3, [r5, #0]
   80cf0:	429c      	cmp	r4, r3
   80cf2:	dcfa      	bgt.n	80cea <rotateRightByDegrees+0x52>
		delay_ms(1);
	}
	stop();
   80cf4:	4b06      	ldr	r3, [pc, #24]	; (80d10 <rotateRightByDegrees+0x78>)
   80cf6:	4798      	blx	r3
	counterA = 0;
   80cf8:	2300      	movs	r3, #0
   80cfa:	4a0b      	ldr	r2, [pc, #44]	; (80d28 <rotateRightByDegrees+0x90>)
   80cfc:	6013      	str	r3, [r2, #0]
	counterB = 0;
   80cfe:	4a0b      	ldr	r2, [pc, #44]	; (80d2c <rotateRightByDegrees+0x94>)
   80d00:	6013      	str	r3, [r2, #0]
   80d02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80d04:	f3af 8000 	nop.w
   80d08:	9999999a 	.word	0x9999999a
   80d0c:	3ff19999 	.word	0x3ff19999
   80d10:	00080c69 	.word	0x00080c69
   80d14:	000812dd 	.word	0x000812dd
   80d18:	000813a9 	.word	0x000813a9
   80d1c:	000817cd 	.word	0x000817cd
   80d20:	00080c19 	.word	0x00080c19
   80d24:	20070001 	.word	0x20070001
   80d28:	20070a60 	.word	0x20070a60
   80d2c:	20070a64 	.word	0x20070a64

00080d30 <rotateLeftByDegrees>:
}

void rotateLeftByDegrees(int degree){
   80d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80d32:	4604      	mov	r4, r0
	
	stop();
   80d34:	4b1c      	ldr	r3, [pc, #112]	; (80da8 <rotateLeftByDegrees+0x78>)
   80d36:	4798      	blx	r3
	degree = degree*1.05;
   80d38:	4620      	mov	r0, r4
   80d3a:	4b1c      	ldr	r3, [pc, #112]	; (80dac <rotateLeftByDegrees+0x7c>)
   80d3c:	4798      	blx	r3
   80d3e:	a318      	add	r3, pc, #96	; (adr r3, 80da0 <rotateLeftByDegrees+0x70>)
   80d40:	e9d3 2300 	ldrd	r2, r3, [r3]
   80d44:	4c1a      	ldr	r4, [pc, #104]	; (80db0 <rotateLeftByDegrees+0x80>)
   80d46:	47a0      	blx	r4
   80d48:	4b1a      	ldr	r3, [pc, #104]	; (80db4 <rotateLeftByDegrees+0x84>)
   80d4a:	4798      	blx	r3
	degree=(degree/4)-1;
   80d4c:	2800      	cmp	r0, #0
   80d4e:	bfb8      	it	lt
   80d50:	3003      	addlt	r0, #3
   80d52:	1084      	asrs	r4, r0, #2
   80d54:	3c01      	subs	r4, #1
	
	pulse(baseSpeed);
   80d56:	f240 60a4 	movw	r0, #1700	; 0x6a4
   80d5a:	4d17      	ldr	r5, [pc, #92]	; (80db8 <rotateLeftByDegrees+0x88>)
   80d5c:	47a8      	blx	r5
	delay_us(motorSwitch);
   80d5e:	f641 10c8 	movw	r0, #6600	; 0x19c8
   80d62:	4b16      	ldr	r3, [pc, #88]	; (80dbc <rotateLeftByDegrees+0x8c>)
   80d64:	4798      	blx	r3
	pulse(reverseBaseSpeed);
   80d66:	f44f 60a0 	mov.w	r0, #1280	; 0x500
   80d6a:	47a8      	blx	r5
	
	counterA = 0;
   80d6c:	2300      	movs	r3, #0
   80d6e:	4a14      	ldr	r2, [pc, #80]	; (80dc0 <rotateLeftByDegrees+0x90>)
   80d70:	6013      	str	r3, [r2, #0]
	counterB = 0;
   80d72:	4a14      	ldr	r2, [pc, #80]	; (80dc4 <rotateLeftByDegrees+0x94>)
   80d74:	6013      	str	r3, [r2, #0]
	//&&(counterB<degree)
	while((counterA<degree)){
   80d76:	429c      	cmp	r4, r3
   80d78:	dd08      	ble.n	80d8c <rotateLeftByDegrees+0x5c>
		delay_ms(1);
   80d7a:	f241 7770 	movw	r7, #6000	; 0x1770
   80d7e:	4e0f      	ldr	r6, [pc, #60]	; (80dbc <rotateLeftByDegrees+0x8c>)
	pulse(reverseBaseSpeed);
	
	counterA = 0;
	counterB = 0;
	//&&(counterB<degree)
	while((counterA<degree)){
   80d80:	4d0f      	ldr	r5, [pc, #60]	; (80dc0 <rotateLeftByDegrees+0x90>)
		delay_ms(1);
   80d82:	4638      	mov	r0, r7
   80d84:	47b0      	blx	r6
	pulse(reverseBaseSpeed);
	
	counterA = 0;
	counterB = 0;
	//&&(counterB<degree)
	while((counterA<degree)){
   80d86:	682b      	ldr	r3, [r5, #0]
   80d88:	429c      	cmp	r4, r3
   80d8a:	dcfa      	bgt.n	80d82 <rotateLeftByDegrees+0x52>
		delay_ms(1);
	}
	stop();
   80d8c:	4b06      	ldr	r3, [pc, #24]	; (80da8 <rotateLeftByDegrees+0x78>)
   80d8e:	4798      	blx	r3
	counterA = 0;
   80d90:	2300      	movs	r3, #0
   80d92:	4a0b      	ldr	r2, [pc, #44]	; (80dc0 <rotateLeftByDegrees+0x90>)
   80d94:	6013      	str	r3, [r2, #0]
	counterB = 0;
   80d96:	4a0b      	ldr	r2, [pc, #44]	; (80dc4 <rotateLeftByDegrees+0x94>)
   80d98:	6013      	str	r3, [r2, #0]
   80d9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80d9c:	f3af 8000 	nop.w
   80da0:	cccccccd 	.word	0xcccccccd
   80da4:	3ff0cccc 	.word	0x3ff0cccc
   80da8:	00080c69 	.word	0x00080c69
   80dac:	000812dd 	.word	0x000812dd
   80db0:	000813a9 	.word	0x000813a9
   80db4:	000817cd 	.word	0x000817cd
   80db8:	00080c19 	.word	0x00080c19
   80dbc:	20070001 	.word	0x20070001
   80dc0:	20070a60 	.word	0x20070a60
   80dc4:	20070a64 	.word	0x20070a64

00080dc8 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   80dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
   80dca:	b083      	sub	sp, #12
   80dcc:	4604      	mov	r4, r0
   80dce:	460d      	mov	r5, r1
	uint32_t val = 0;
   80dd0:	2300      	movs	r3, #0
   80dd2:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   80dd4:	4b1f      	ldr	r3, [pc, #124]	; (80e54 <usart_serial_getchar+0x8c>)
   80dd6:	4298      	cmp	r0, r3
   80dd8:	d107      	bne.n	80dea <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
   80dda:	461f      	mov	r7, r3
   80ddc:	4e1e      	ldr	r6, [pc, #120]	; (80e58 <usart_serial_getchar+0x90>)
   80dde:	4638      	mov	r0, r7
   80de0:	4629      	mov	r1, r5
   80de2:	47b0      	blx	r6
   80de4:	2800      	cmp	r0, #0
   80de6:	d1fa      	bne.n	80dde <usart_serial_getchar+0x16>
   80de8:	e019      	b.n	80e1e <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80dea:	4b1c      	ldr	r3, [pc, #112]	; (80e5c <usart_serial_getchar+0x94>)
   80dec:	4298      	cmp	r0, r3
   80dee:	d109      	bne.n	80e04 <usart_serial_getchar+0x3c>
		while (usart_read(p_usart, &val));
   80df0:	461f      	mov	r7, r3
   80df2:	4e1b      	ldr	r6, [pc, #108]	; (80e60 <usart_serial_getchar+0x98>)
   80df4:	4638      	mov	r0, r7
   80df6:	a901      	add	r1, sp, #4
   80df8:	47b0      	blx	r6
   80dfa:	2800      	cmp	r0, #0
   80dfc:	d1fa      	bne.n	80df4 <usart_serial_getchar+0x2c>
		*data = (uint8_t)(val & 0xFF);
   80dfe:	9b01      	ldr	r3, [sp, #4]
   80e00:	702b      	strb	r3, [r5, #0]
   80e02:	e019      	b.n	80e38 <usart_serial_getchar+0x70>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80e04:	4b17      	ldr	r3, [pc, #92]	; (80e64 <usart_serial_getchar+0x9c>)
   80e06:	4298      	cmp	r0, r3
   80e08:	d109      	bne.n	80e1e <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
   80e0a:	461e      	mov	r6, r3
   80e0c:	4c14      	ldr	r4, [pc, #80]	; (80e60 <usart_serial_getchar+0x98>)
   80e0e:	4630      	mov	r0, r6
   80e10:	a901      	add	r1, sp, #4
   80e12:	47a0      	blx	r4
   80e14:	2800      	cmp	r0, #0
   80e16:	d1fa      	bne.n	80e0e <usart_serial_getchar+0x46>
		*data = (uint8_t)(val & 0xFF);
   80e18:	9b01      	ldr	r3, [sp, #4]
   80e1a:	702b      	strb	r3, [r5, #0]
   80e1c:	e018      	b.n	80e50 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80e1e:	4b12      	ldr	r3, [pc, #72]	; (80e68 <usart_serial_getchar+0xa0>)
   80e20:	429c      	cmp	r4, r3
   80e22:	d109      	bne.n	80e38 <usart_serial_getchar+0x70>
		while (usart_read(p_usart, &val));
   80e24:	461e      	mov	r6, r3
   80e26:	4c0e      	ldr	r4, [pc, #56]	; (80e60 <usart_serial_getchar+0x98>)
   80e28:	4630      	mov	r0, r6
   80e2a:	a901      	add	r1, sp, #4
   80e2c:	47a0      	blx	r4
   80e2e:	2800      	cmp	r0, #0
   80e30:	d1fa      	bne.n	80e28 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
   80e32:	9b01      	ldr	r3, [sp, #4]
   80e34:	702b      	strb	r3, [r5, #0]
   80e36:	e00b      	b.n	80e50 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80e38:	4b0c      	ldr	r3, [pc, #48]	; (80e6c <usart_serial_getchar+0xa4>)
   80e3a:	429c      	cmp	r4, r3
   80e3c:	d108      	bne.n	80e50 <usart_serial_getchar+0x88>
		while (usart_read(p_usart, &val));
   80e3e:	461e      	mov	r6, r3
   80e40:	4c07      	ldr	r4, [pc, #28]	; (80e60 <usart_serial_getchar+0x98>)
   80e42:	4630      	mov	r0, r6
   80e44:	a901      	add	r1, sp, #4
   80e46:	47a0      	blx	r4
   80e48:	2800      	cmp	r0, #0
   80e4a:	d1fa      	bne.n	80e42 <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
   80e4c:	9b01      	ldr	r3, [sp, #4]
   80e4e:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   80e50:	b003      	add	sp, #12
   80e52:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80e54:	400e0800 	.word	0x400e0800
   80e58:	000802e9 	.word	0x000802e9
   80e5c:	40098000 	.word	0x40098000
   80e60:	00080311 	.word	0x00080311
   80e64:	4009c000 	.word	0x4009c000
   80e68:	400a0000 	.word	0x400a0000
   80e6c:	400a4000 	.word	0x400a4000

00080e70 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   80e70:	b570      	push	{r4, r5, r6, lr}
   80e72:	460c      	mov	r4, r1
#ifdef UART
	if (UART == (Uart*)p_usart) {
   80e74:	4b21      	ldr	r3, [pc, #132]	; (80efc <usart_serial_putchar+0x8c>)
   80e76:	4298      	cmp	r0, r3
   80e78:	d107      	bne.n	80e8a <usart_serial_putchar+0x1a>
		while (uart_write((Uart*)p_usart, c)!=0);
   80e7a:	461e      	mov	r6, r3
   80e7c:	4d20      	ldr	r5, [pc, #128]	; (80f00 <usart_serial_putchar+0x90>)
   80e7e:	4630      	mov	r0, r6
   80e80:	4621      	mov	r1, r4
   80e82:	47a8      	blx	r5
   80e84:	2800      	cmp	r0, #0
   80e86:	d1fa      	bne.n	80e7e <usart_serial_putchar+0xe>
   80e88:	e02b      	b.n	80ee2 <usart_serial_putchar+0x72>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80e8a:	4b1e      	ldr	r3, [pc, #120]	; (80f04 <usart_serial_putchar+0x94>)
   80e8c:	4298      	cmp	r0, r3
   80e8e:	d107      	bne.n	80ea0 <usart_serial_putchar+0x30>
		while (usart_write(p_usart, c)!=0);
   80e90:	461e      	mov	r6, r3
   80e92:	4d1d      	ldr	r5, [pc, #116]	; (80f08 <usart_serial_putchar+0x98>)
   80e94:	4630      	mov	r0, r6
   80e96:	4621      	mov	r1, r4
   80e98:	47a8      	blx	r5
   80e9a:	2800      	cmp	r0, #0
   80e9c:	d1fa      	bne.n	80e94 <usart_serial_putchar+0x24>
   80e9e:	e022      	b.n	80ee6 <usart_serial_putchar+0x76>
		return 1;
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80ea0:	4b1a      	ldr	r3, [pc, #104]	; (80f0c <usart_serial_putchar+0x9c>)
   80ea2:	4298      	cmp	r0, r3
   80ea4:	d107      	bne.n	80eb6 <usart_serial_putchar+0x46>
		while (usart_write(p_usart, c)!=0);
   80ea6:	461e      	mov	r6, r3
   80ea8:	4d17      	ldr	r5, [pc, #92]	; (80f08 <usart_serial_putchar+0x98>)
   80eaa:	4630      	mov	r0, r6
   80eac:	4621      	mov	r1, r4
   80eae:	47a8      	blx	r5
   80eb0:	2800      	cmp	r0, #0
   80eb2:	d1fa      	bne.n	80eaa <usart_serial_putchar+0x3a>
   80eb4:	e019      	b.n	80eea <usart_serial_putchar+0x7a>
		return 1;
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80eb6:	4b16      	ldr	r3, [pc, #88]	; (80f10 <usart_serial_putchar+0xa0>)
   80eb8:	4298      	cmp	r0, r3
   80eba:	d107      	bne.n	80ecc <usart_serial_putchar+0x5c>
		while (usart_write(p_usart, c)!=0);
   80ebc:	461e      	mov	r6, r3
   80ebe:	4d12      	ldr	r5, [pc, #72]	; (80f08 <usart_serial_putchar+0x98>)
   80ec0:	4630      	mov	r0, r6
   80ec2:	4621      	mov	r1, r4
   80ec4:	47a8      	blx	r5
   80ec6:	2800      	cmp	r0, #0
   80ec8:	d1fa      	bne.n	80ec0 <usart_serial_putchar+0x50>
   80eca:	e010      	b.n	80eee <usart_serial_putchar+0x7e>
		return 1;
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80ecc:	4b11      	ldr	r3, [pc, #68]	; (80f14 <usart_serial_putchar+0xa4>)
   80ece:	4298      	cmp	r0, r3
   80ed0:	d10f      	bne.n	80ef2 <usart_serial_putchar+0x82>
		while (usart_write(p_usart, c)!=0);
   80ed2:	461e      	mov	r6, r3
   80ed4:	4d0c      	ldr	r5, [pc, #48]	; (80f08 <usart_serial_putchar+0x98>)
   80ed6:	4630      	mov	r0, r6
   80ed8:	4621      	mov	r1, r4
   80eda:	47a8      	blx	r5
   80edc:	2800      	cmp	r0, #0
   80ede:	d1fa      	bne.n	80ed6 <usart_serial_putchar+0x66>
   80ee0:	e009      	b.n	80ef6 <usart_serial_putchar+0x86>
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
   80ee2:	2001      	movs	r0, #1
   80ee4:	bd70      	pop	{r4, r5, r6, pc}
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   80ee6:	2001      	movs	r0, #1
   80ee8:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   80eea:	2001      	movs	r0, #1
   80eec:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   80eee:	2001      	movs	r0, #1
   80ef0:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   80ef2:	2000      	movs	r0, #0
   80ef4:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   80ef6:	2001      	movs	r0, #1
	}
# endif
#endif /* ifdef USART */

	return 0;
}
   80ef8:	bd70      	pop	{r4, r5, r6, pc}
   80efa:	bf00      	nop
   80efc:	400e0800 	.word	0x400e0800
   80f00:	000802d9 	.word	0x000802d9
   80f04:	40098000 	.word	0x40098000
   80f08:	000802fd 	.word	0x000802fd
   80f0c:	4009c000 	.word	0x4009c000
   80f10:	400a0000 	.word	0x400a0000
   80f14:	400a4000 	.word	0x400a4000

00080f18 <main>:
	printf("Console ready\n");
	printf("=============\n");
}

int main (void)
{
   80f18:	b570      	push	{r4, r5, r6, lr}
   80f1a:	b084      	sub	sp, #16
	sysclk_init();
   80f1c:	4b2d      	ldr	r3, [pc, #180]	; (80fd4 <main+0xbc>)
   80f1e:	4798      	blx	r3
	board_init();
   80f20:	4b2d      	ldr	r3, [pc, #180]	; (80fd8 <main+0xc0>)
   80f22:	4798      	blx	r3
   80f24:	2008      	movs	r0, #8
   80f26:	4d2d      	ldr	r5, [pc, #180]	; (80fdc <main+0xc4>)
   80f28:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   80f2a:	4c2d      	ldr	r4, [pc, #180]	; (80fe0 <main+0xc8>)
   80f2c:	4b2d      	ldr	r3, [pc, #180]	; (80fe4 <main+0xcc>)
   80f2e:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   80f30:	4a2d      	ldr	r2, [pc, #180]	; (80fe8 <main+0xd0>)
   80f32:	4b2e      	ldr	r3, [pc, #184]	; (80fec <main+0xd4>)
   80f34:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   80f36:	4a2e      	ldr	r2, [pc, #184]	; (80ff0 <main+0xd8>)
   80f38:	4b2e      	ldr	r3, [pc, #184]	; (80ff4 <main+0xdc>)
   80f3a:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   80f3c:	4b2e      	ldr	r3, [pc, #184]	; (80ff8 <main+0xe0>)
   80f3e:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   80f40:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   80f44:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   80f46:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80f4a:	9303      	str	r3, [sp, #12]
   80f4c:	2008      	movs	r0, #8
   80f4e:	47a8      	blx	r5
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   80f50:	4620      	mov	r0, r4
   80f52:	a901      	add	r1, sp, #4
   80f54:	4b29      	ldr	r3, [pc, #164]	; (80ffc <main+0xe4>)
   80f56:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   80f58:	4d29      	ldr	r5, [pc, #164]	; (81000 <main+0xe8>)
   80f5a:	682b      	ldr	r3, [r5, #0]
   80f5c:	6898      	ldr	r0, [r3, #8]
   80f5e:	2100      	movs	r1, #0
   80f60:	4c28      	ldr	r4, [pc, #160]	; (81004 <main+0xec>)
   80f62:	47a0      	blx	r4
	setbuf(stdin, NULL);
   80f64:	682b      	ldr	r3, [r5, #0]
   80f66:	6858      	ldr	r0, [r3, #4]
   80f68:	2100      	movs	r1, #0
   80f6a:	47a0      	blx	r4

	/* Configure console UART. */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
	
	printf("Console ready\n");
   80f6c:	4826      	ldr	r0, [pc, #152]	; (81008 <main+0xf0>)
   80f6e:	4c27      	ldr	r4, [pc, #156]	; (8100c <main+0xf4>)
   80f70:	47a0      	blx	r4
	printf("=============\n");
   80f72:	4827      	ldr	r0, [pc, #156]	; (81010 <main+0xf8>)
   80f74:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   80f76:	4b27      	ldr	r3, [pc, #156]	; (81014 <main+0xfc>)
   80f78:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   80f7c:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80f7e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   80f82:	4c25      	ldr	r4, [pc, #148]	; (81018 <main+0x100>)
   80f84:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   80f88:	6123      	str	r3, [r4, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80f8a:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   80f8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
   80f92:	6163      	str	r3, [r4, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80f94:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	ioport_set_pin_dir(pin24,IOPORT_DIR_OUTPUT);
	
	
	ioport_set_pin_dir(trig,IOPORT_DIR_OUTPUT);
	ioport_set_pin_dir(echo, IOPORT_DIR_INPUT);
	pulseCounter_configA(ID_PIOC, PIOC, PIO_PC28);
   80f98:	200d      	movs	r0, #13
   80f9a:	4621      	mov	r1, r4
   80f9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80fa0:	4b1e      	ldr	r3, [pc, #120]	; (8101c <main+0x104>)
   80fa2:	4798      	blx	r3
	pulseCounter_configB(ID_PIOC, PIOC, PIO_PC23);
   80fa4:	200d      	movs	r0, #13
   80fa6:	4621      	mov	r1, r4
   80fa8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   80fac:	4b1c      	ldr	r3, [pc, #112]	; (81020 <main+0x108>)
   80fae:	4798      	blx	r3
	uint32_t rotateVal = 90;
	
	//Starts with a delay simply to reduce the chance of an error occuring when reseting the program.
	delay_ms(2000);
   80fb0:	4d1c      	ldr	r5, [pc, #112]	; (81024 <main+0x10c>)
   80fb2:	4628      	mov	r0, r5
   80fb4:	4c1c      	ldr	r4, [pc, #112]	; (81028 <main+0x110>)
   80fb6:	47a0      	blx	r4
	/*
	pulse(reverseBaseSpeed);
	delay_us(1100);
	pulse(baseSpeedLeft);
	*/
	delay_ms(2000);
   80fb8:	4628      	mov	r0, r5
   80fba:	47a0      	blx	r4
	
	while(1){
		
	//int ek = (counterA - counterB);	
	//printf("ek: %d\n", ek);
	rotateRightByDegrees(rotateVal);
   80fbc:	4e1b      	ldr	r6, [pc, #108]	; (8102c <main+0x114>)
	delay_ms(5000);
   80fbe:	4d1c      	ldr	r5, [pc, #112]	; (81030 <main+0x118>)
	
	while(1){
		
	//int ek = (counterA - counterB);	
	//printf("ek: %d\n", ek);
	rotateRightByDegrees(rotateVal);
   80fc0:	205a      	movs	r0, #90	; 0x5a
   80fc2:	47b0      	blx	r6
	delay_ms(5000);
   80fc4:	4628      	mov	r0, r5
   80fc6:	47a0      	blx	r4
	rotateLeftByDegrees(rotateVal);
   80fc8:	205a      	movs	r0, #90	; 0x5a
   80fca:	4b1a      	ldr	r3, [pc, #104]	; (81034 <main+0x11c>)
   80fcc:	4798      	blx	r3
	//reglerahjul3(ek);
	//rotateVal +=90;
	delay_ms(5000);
   80fce:	4628      	mov	r0, r5
   80fd0:	47a0      	blx	r4
   80fd2:	e7f5      	b.n	80fc0 <main+0xa8>
   80fd4:	0008048d 	.word	0x0008048d
   80fd8:	000804f1 	.word	0x000804f1
   80fdc:	0008097d 	.word	0x0008097d
   80fe0:	400e0800 	.word	0x400e0800
   80fe4:	20070b1c 	.word	0x20070b1c
   80fe8:	00080e71 	.word	0x00080e71
   80fec:	20070b18 	.word	0x20070b18
   80ff0:	00080dc9 	.word	0x00080dc9
   80ff4:	20070b14 	.word	0x20070b14
   80ff8:	0501bd00 	.word	0x0501bd00
   80ffc:	000802a1 	.word	0x000802a1
   81000:	20070568 	.word	0x20070568
   81004:	00081ee9 	.word	0x00081ee9
   81008:	000847b0 	.word	0x000847b0
   8100c:	00081e2d 	.word	0x00081e2d
   81010:	000847c0 	.word	0x000847c0
   81014:	400e0e00 	.word	0x400e0e00
   81018:	400e1200 	.word	0x400e1200
   8101c:	000803cd 	.word	0x000803cd
   81020:	0008042d 	.word	0x0008042d
   81024:	00b71b00 	.word	0x00b71b00
   81028:	20070001 	.word	0x20070001
   8102c:	00080c99 	.word	0x00080c99
   81030:	01c9c380 	.word	0x01c9c380
   81034:	00080d31 	.word	0x00080d31

00081038 <__aeabi_drsub>:
   81038:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   8103c:	e002      	b.n	81044 <__adddf3>
   8103e:	bf00      	nop

00081040 <__aeabi_dsub>:
   81040:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00081044 <__adddf3>:
   81044:	b530      	push	{r4, r5, lr}
   81046:	ea4f 0441 	mov.w	r4, r1, lsl #1
   8104a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   8104e:	ea94 0f05 	teq	r4, r5
   81052:	bf08      	it	eq
   81054:	ea90 0f02 	teqeq	r0, r2
   81058:	bf1f      	itttt	ne
   8105a:	ea54 0c00 	orrsne.w	ip, r4, r0
   8105e:	ea55 0c02 	orrsne.w	ip, r5, r2
   81062:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   81066:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8106a:	f000 80e2 	beq.w	81232 <__adddf3+0x1ee>
   8106e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   81072:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   81076:	bfb8      	it	lt
   81078:	426d      	neglt	r5, r5
   8107a:	dd0c      	ble.n	81096 <__adddf3+0x52>
   8107c:	442c      	add	r4, r5
   8107e:	ea80 0202 	eor.w	r2, r0, r2
   81082:	ea81 0303 	eor.w	r3, r1, r3
   81086:	ea82 0000 	eor.w	r0, r2, r0
   8108a:	ea83 0101 	eor.w	r1, r3, r1
   8108e:	ea80 0202 	eor.w	r2, r0, r2
   81092:	ea81 0303 	eor.w	r3, r1, r3
   81096:	2d36      	cmp	r5, #54	; 0x36
   81098:	bf88      	it	hi
   8109a:	bd30      	pophi	{r4, r5, pc}
   8109c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   810a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   810a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   810a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   810ac:	d002      	beq.n	810b4 <__adddf3+0x70>
   810ae:	4240      	negs	r0, r0
   810b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   810b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   810b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   810bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   810c0:	d002      	beq.n	810c8 <__adddf3+0x84>
   810c2:	4252      	negs	r2, r2
   810c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   810c8:	ea94 0f05 	teq	r4, r5
   810cc:	f000 80a7 	beq.w	8121e <__adddf3+0x1da>
   810d0:	f1a4 0401 	sub.w	r4, r4, #1
   810d4:	f1d5 0e20 	rsbs	lr, r5, #32
   810d8:	db0d      	blt.n	810f6 <__adddf3+0xb2>
   810da:	fa02 fc0e 	lsl.w	ip, r2, lr
   810de:	fa22 f205 	lsr.w	r2, r2, r5
   810e2:	1880      	adds	r0, r0, r2
   810e4:	f141 0100 	adc.w	r1, r1, #0
   810e8:	fa03 f20e 	lsl.w	r2, r3, lr
   810ec:	1880      	adds	r0, r0, r2
   810ee:	fa43 f305 	asr.w	r3, r3, r5
   810f2:	4159      	adcs	r1, r3
   810f4:	e00e      	b.n	81114 <__adddf3+0xd0>
   810f6:	f1a5 0520 	sub.w	r5, r5, #32
   810fa:	f10e 0e20 	add.w	lr, lr, #32
   810fe:	2a01      	cmp	r2, #1
   81100:	fa03 fc0e 	lsl.w	ip, r3, lr
   81104:	bf28      	it	cs
   81106:	f04c 0c02 	orrcs.w	ip, ip, #2
   8110a:	fa43 f305 	asr.w	r3, r3, r5
   8110e:	18c0      	adds	r0, r0, r3
   81110:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   81114:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   81118:	d507      	bpl.n	8112a <__adddf3+0xe6>
   8111a:	f04f 0e00 	mov.w	lr, #0
   8111e:	f1dc 0c00 	rsbs	ip, ip, #0
   81122:	eb7e 0000 	sbcs.w	r0, lr, r0
   81126:	eb6e 0101 	sbc.w	r1, lr, r1
   8112a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   8112e:	d31b      	bcc.n	81168 <__adddf3+0x124>
   81130:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   81134:	d30c      	bcc.n	81150 <__adddf3+0x10c>
   81136:	0849      	lsrs	r1, r1, #1
   81138:	ea5f 0030 	movs.w	r0, r0, rrx
   8113c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   81140:	f104 0401 	add.w	r4, r4, #1
   81144:	ea4f 5244 	mov.w	r2, r4, lsl #21
   81148:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   8114c:	f080 809a 	bcs.w	81284 <__adddf3+0x240>
   81150:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   81154:	bf08      	it	eq
   81156:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8115a:	f150 0000 	adcs.w	r0, r0, #0
   8115e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   81162:	ea41 0105 	orr.w	r1, r1, r5
   81166:	bd30      	pop	{r4, r5, pc}
   81168:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   8116c:	4140      	adcs	r0, r0
   8116e:	eb41 0101 	adc.w	r1, r1, r1
   81172:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   81176:	f1a4 0401 	sub.w	r4, r4, #1
   8117a:	d1e9      	bne.n	81150 <__adddf3+0x10c>
   8117c:	f091 0f00 	teq	r1, #0
   81180:	bf04      	itt	eq
   81182:	4601      	moveq	r1, r0
   81184:	2000      	moveq	r0, #0
   81186:	fab1 f381 	clz	r3, r1
   8118a:	bf08      	it	eq
   8118c:	3320      	addeq	r3, #32
   8118e:	f1a3 030b 	sub.w	r3, r3, #11
   81192:	f1b3 0220 	subs.w	r2, r3, #32
   81196:	da0c      	bge.n	811b2 <__adddf3+0x16e>
   81198:	320c      	adds	r2, #12
   8119a:	dd08      	ble.n	811ae <__adddf3+0x16a>
   8119c:	f102 0c14 	add.w	ip, r2, #20
   811a0:	f1c2 020c 	rsb	r2, r2, #12
   811a4:	fa01 f00c 	lsl.w	r0, r1, ip
   811a8:	fa21 f102 	lsr.w	r1, r1, r2
   811ac:	e00c      	b.n	811c8 <__adddf3+0x184>
   811ae:	f102 0214 	add.w	r2, r2, #20
   811b2:	bfd8      	it	le
   811b4:	f1c2 0c20 	rsble	ip, r2, #32
   811b8:	fa01 f102 	lsl.w	r1, r1, r2
   811bc:	fa20 fc0c 	lsr.w	ip, r0, ip
   811c0:	bfdc      	itt	le
   811c2:	ea41 010c 	orrle.w	r1, r1, ip
   811c6:	4090      	lslle	r0, r2
   811c8:	1ae4      	subs	r4, r4, r3
   811ca:	bfa2      	ittt	ge
   811cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   811d0:	4329      	orrge	r1, r5
   811d2:	bd30      	popge	{r4, r5, pc}
   811d4:	ea6f 0404 	mvn.w	r4, r4
   811d8:	3c1f      	subs	r4, #31
   811da:	da1c      	bge.n	81216 <__adddf3+0x1d2>
   811dc:	340c      	adds	r4, #12
   811de:	dc0e      	bgt.n	811fe <__adddf3+0x1ba>
   811e0:	f104 0414 	add.w	r4, r4, #20
   811e4:	f1c4 0220 	rsb	r2, r4, #32
   811e8:	fa20 f004 	lsr.w	r0, r0, r4
   811ec:	fa01 f302 	lsl.w	r3, r1, r2
   811f0:	ea40 0003 	orr.w	r0, r0, r3
   811f4:	fa21 f304 	lsr.w	r3, r1, r4
   811f8:	ea45 0103 	orr.w	r1, r5, r3
   811fc:	bd30      	pop	{r4, r5, pc}
   811fe:	f1c4 040c 	rsb	r4, r4, #12
   81202:	f1c4 0220 	rsb	r2, r4, #32
   81206:	fa20 f002 	lsr.w	r0, r0, r2
   8120a:	fa01 f304 	lsl.w	r3, r1, r4
   8120e:	ea40 0003 	orr.w	r0, r0, r3
   81212:	4629      	mov	r1, r5
   81214:	bd30      	pop	{r4, r5, pc}
   81216:	fa21 f004 	lsr.w	r0, r1, r4
   8121a:	4629      	mov	r1, r5
   8121c:	bd30      	pop	{r4, r5, pc}
   8121e:	f094 0f00 	teq	r4, #0
   81222:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   81226:	bf06      	itte	eq
   81228:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   8122c:	3401      	addeq	r4, #1
   8122e:	3d01      	subne	r5, #1
   81230:	e74e      	b.n	810d0 <__adddf3+0x8c>
   81232:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   81236:	bf18      	it	ne
   81238:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8123c:	d029      	beq.n	81292 <__adddf3+0x24e>
   8123e:	ea94 0f05 	teq	r4, r5
   81242:	bf08      	it	eq
   81244:	ea90 0f02 	teqeq	r0, r2
   81248:	d005      	beq.n	81256 <__adddf3+0x212>
   8124a:	ea54 0c00 	orrs.w	ip, r4, r0
   8124e:	bf04      	itt	eq
   81250:	4619      	moveq	r1, r3
   81252:	4610      	moveq	r0, r2
   81254:	bd30      	pop	{r4, r5, pc}
   81256:	ea91 0f03 	teq	r1, r3
   8125a:	bf1e      	ittt	ne
   8125c:	2100      	movne	r1, #0
   8125e:	2000      	movne	r0, #0
   81260:	bd30      	popne	{r4, r5, pc}
   81262:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   81266:	d105      	bne.n	81274 <__adddf3+0x230>
   81268:	0040      	lsls	r0, r0, #1
   8126a:	4149      	adcs	r1, r1
   8126c:	bf28      	it	cs
   8126e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   81272:	bd30      	pop	{r4, r5, pc}
   81274:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   81278:	bf3c      	itt	cc
   8127a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   8127e:	bd30      	popcc	{r4, r5, pc}
   81280:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   81284:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   81288:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8128c:	f04f 0000 	mov.w	r0, #0
   81290:	bd30      	pop	{r4, r5, pc}
   81292:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   81296:	bf1a      	itte	ne
   81298:	4619      	movne	r1, r3
   8129a:	4610      	movne	r0, r2
   8129c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   812a0:	bf1c      	itt	ne
   812a2:	460b      	movne	r3, r1
   812a4:	4602      	movne	r2, r0
   812a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   812aa:	bf06      	itte	eq
   812ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   812b0:	ea91 0f03 	teqeq	r1, r3
   812b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   812b8:	bd30      	pop	{r4, r5, pc}
   812ba:	bf00      	nop

000812bc <__aeabi_ui2d>:
   812bc:	f090 0f00 	teq	r0, #0
   812c0:	bf04      	itt	eq
   812c2:	2100      	moveq	r1, #0
   812c4:	4770      	bxeq	lr
   812c6:	b530      	push	{r4, r5, lr}
   812c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   812cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   812d0:	f04f 0500 	mov.w	r5, #0
   812d4:	f04f 0100 	mov.w	r1, #0
   812d8:	e750      	b.n	8117c <__adddf3+0x138>
   812da:	bf00      	nop

000812dc <__aeabi_i2d>:
   812dc:	f090 0f00 	teq	r0, #0
   812e0:	bf04      	itt	eq
   812e2:	2100      	moveq	r1, #0
   812e4:	4770      	bxeq	lr
   812e6:	b530      	push	{r4, r5, lr}
   812e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   812ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
   812f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   812f4:	bf48      	it	mi
   812f6:	4240      	negmi	r0, r0
   812f8:	f04f 0100 	mov.w	r1, #0
   812fc:	e73e      	b.n	8117c <__adddf3+0x138>
   812fe:	bf00      	nop

00081300 <__aeabi_f2d>:
   81300:	0042      	lsls	r2, r0, #1
   81302:	ea4f 01e2 	mov.w	r1, r2, asr #3
   81306:	ea4f 0131 	mov.w	r1, r1, rrx
   8130a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   8130e:	bf1f      	itttt	ne
   81310:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   81314:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   81318:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   8131c:	4770      	bxne	lr
   8131e:	f092 0f00 	teq	r2, #0
   81322:	bf14      	ite	ne
   81324:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   81328:	4770      	bxeq	lr
   8132a:	b530      	push	{r4, r5, lr}
   8132c:	f44f 7460 	mov.w	r4, #896	; 0x380
   81330:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   81334:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   81338:	e720      	b.n	8117c <__adddf3+0x138>
   8133a:	bf00      	nop

0008133c <__aeabi_ul2d>:
   8133c:	ea50 0201 	orrs.w	r2, r0, r1
   81340:	bf08      	it	eq
   81342:	4770      	bxeq	lr
   81344:	b530      	push	{r4, r5, lr}
   81346:	f04f 0500 	mov.w	r5, #0
   8134a:	e00a      	b.n	81362 <__aeabi_l2d+0x16>

0008134c <__aeabi_l2d>:
   8134c:	ea50 0201 	orrs.w	r2, r0, r1
   81350:	bf08      	it	eq
   81352:	4770      	bxeq	lr
   81354:	b530      	push	{r4, r5, lr}
   81356:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   8135a:	d502      	bpl.n	81362 <__aeabi_l2d+0x16>
   8135c:	4240      	negs	r0, r0
   8135e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   81362:	f44f 6480 	mov.w	r4, #1024	; 0x400
   81366:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8136a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   8136e:	f43f aedc 	beq.w	8112a <__adddf3+0xe6>
   81372:	f04f 0203 	mov.w	r2, #3
   81376:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8137a:	bf18      	it	ne
   8137c:	3203      	addne	r2, #3
   8137e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   81382:	bf18      	it	ne
   81384:	3203      	addne	r2, #3
   81386:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   8138a:	f1c2 0320 	rsb	r3, r2, #32
   8138e:	fa00 fc03 	lsl.w	ip, r0, r3
   81392:	fa20 f002 	lsr.w	r0, r0, r2
   81396:	fa01 fe03 	lsl.w	lr, r1, r3
   8139a:	ea40 000e 	orr.w	r0, r0, lr
   8139e:	fa21 f102 	lsr.w	r1, r1, r2
   813a2:	4414      	add	r4, r2
   813a4:	e6c1      	b.n	8112a <__adddf3+0xe6>
   813a6:	bf00      	nop

000813a8 <__aeabi_dmul>:
   813a8:	b570      	push	{r4, r5, r6, lr}
   813aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
   813ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   813b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   813b6:	bf1d      	ittte	ne
   813b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   813bc:	ea94 0f0c 	teqne	r4, ip
   813c0:	ea95 0f0c 	teqne	r5, ip
   813c4:	f000 f8de 	bleq	81584 <__aeabi_dmul+0x1dc>
   813c8:	442c      	add	r4, r5
   813ca:	ea81 0603 	eor.w	r6, r1, r3
   813ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   813d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   813d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   813da:	bf18      	it	ne
   813dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   813e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   813e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   813e8:	d038      	beq.n	8145c <__aeabi_dmul+0xb4>
   813ea:	fba0 ce02 	umull	ip, lr, r0, r2
   813ee:	f04f 0500 	mov.w	r5, #0
   813f2:	fbe1 e502 	umlal	lr, r5, r1, r2
   813f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   813fa:	fbe0 e503 	umlal	lr, r5, r0, r3
   813fe:	f04f 0600 	mov.w	r6, #0
   81402:	fbe1 5603 	umlal	r5, r6, r1, r3
   81406:	f09c 0f00 	teq	ip, #0
   8140a:	bf18      	it	ne
   8140c:	f04e 0e01 	orrne.w	lr, lr, #1
   81410:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   81414:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   81418:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   8141c:	d204      	bcs.n	81428 <__aeabi_dmul+0x80>
   8141e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   81422:	416d      	adcs	r5, r5
   81424:	eb46 0606 	adc.w	r6, r6, r6
   81428:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   8142c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   81430:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   81434:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   81438:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   8143c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   81440:	bf88      	it	hi
   81442:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   81446:	d81e      	bhi.n	81486 <__aeabi_dmul+0xde>
   81448:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   8144c:	bf08      	it	eq
   8144e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   81452:	f150 0000 	adcs.w	r0, r0, #0
   81456:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8145a:	bd70      	pop	{r4, r5, r6, pc}
   8145c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   81460:	ea46 0101 	orr.w	r1, r6, r1
   81464:	ea40 0002 	orr.w	r0, r0, r2
   81468:	ea81 0103 	eor.w	r1, r1, r3
   8146c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   81470:	bfc2      	ittt	gt
   81472:	ebd4 050c 	rsbsgt	r5, r4, ip
   81476:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8147a:	bd70      	popgt	{r4, r5, r6, pc}
   8147c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   81480:	f04f 0e00 	mov.w	lr, #0
   81484:	3c01      	subs	r4, #1
   81486:	f300 80ab 	bgt.w	815e0 <__aeabi_dmul+0x238>
   8148a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   8148e:	bfde      	ittt	le
   81490:	2000      	movle	r0, #0
   81492:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   81496:	bd70      	pople	{r4, r5, r6, pc}
   81498:	f1c4 0400 	rsb	r4, r4, #0
   8149c:	3c20      	subs	r4, #32
   8149e:	da35      	bge.n	8150c <__aeabi_dmul+0x164>
   814a0:	340c      	adds	r4, #12
   814a2:	dc1b      	bgt.n	814dc <__aeabi_dmul+0x134>
   814a4:	f104 0414 	add.w	r4, r4, #20
   814a8:	f1c4 0520 	rsb	r5, r4, #32
   814ac:	fa00 f305 	lsl.w	r3, r0, r5
   814b0:	fa20 f004 	lsr.w	r0, r0, r4
   814b4:	fa01 f205 	lsl.w	r2, r1, r5
   814b8:	ea40 0002 	orr.w	r0, r0, r2
   814bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   814c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   814c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   814c8:	fa21 f604 	lsr.w	r6, r1, r4
   814cc:	eb42 0106 	adc.w	r1, r2, r6
   814d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   814d4:	bf08      	it	eq
   814d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   814da:	bd70      	pop	{r4, r5, r6, pc}
   814dc:	f1c4 040c 	rsb	r4, r4, #12
   814e0:	f1c4 0520 	rsb	r5, r4, #32
   814e4:	fa00 f304 	lsl.w	r3, r0, r4
   814e8:	fa20 f005 	lsr.w	r0, r0, r5
   814ec:	fa01 f204 	lsl.w	r2, r1, r4
   814f0:	ea40 0002 	orr.w	r0, r0, r2
   814f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   814f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   814fc:	f141 0100 	adc.w	r1, r1, #0
   81500:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   81504:	bf08      	it	eq
   81506:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8150a:	bd70      	pop	{r4, r5, r6, pc}
   8150c:	f1c4 0520 	rsb	r5, r4, #32
   81510:	fa00 f205 	lsl.w	r2, r0, r5
   81514:	ea4e 0e02 	orr.w	lr, lr, r2
   81518:	fa20 f304 	lsr.w	r3, r0, r4
   8151c:	fa01 f205 	lsl.w	r2, r1, r5
   81520:	ea43 0302 	orr.w	r3, r3, r2
   81524:	fa21 f004 	lsr.w	r0, r1, r4
   81528:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8152c:	fa21 f204 	lsr.w	r2, r1, r4
   81530:	ea20 0002 	bic.w	r0, r0, r2
   81534:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   81538:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8153c:	bf08      	it	eq
   8153e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   81542:	bd70      	pop	{r4, r5, r6, pc}
   81544:	f094 0f00 	teq	r4, #0
   81548:	d10f      	bne.n	8156a <__aeabi_dmul+0x1c2>
   8154a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   8154e:	0040      	lsls	r0, r0, #1
   81550:	eb41 0101 	adc.w	r1, r1, r1
   81554:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   81558:	bf08      	it	eq
   8155a:	3c01      	subeq	r4, #1
   8155c:	d0f7      	beq.n	8154e <__aeabi_dmul+0x1a6>
   8155e:	ea41 0106 	orr.w	r1, r1, r6
   81562:	f095 0f00 	teq	r5, #0
   81566:	bf18      	it	ne
   81568:	4770      	bxne	lr
   8156a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   8156e:	0052      	lsls	r2, r2, #1
   81570:	eb43 0303 	adc.w	r3, r3, r3
   81574:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   81578:	bf08      	it	eq
   8157a:	3d01      	subeq	r5, #1
   8157c:	d0f7      	beq.n	8156e <__aeabi_dmul+0x1c6>
   8157e:	ea43 0306 	orr.w	r3, r3, r6
   81582:	4770      	bx	lr
   81584:	ea94 0f0c 	teq	r4, ip
   81588:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8158c:	bf18      	it	ne
   8158e:	ea95 0f0c 	teqne	r5, ip
   81592:	d00c      	beq.n	815ae <__aeabi_dmul+0x206>
   81594:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   81598:	bf18      	it	ne
   8159a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8159e:	d1d1      	bne.n	81544 <__aeabi_dmul+0x19c>
   815a0:	ea81 0103 	eor.w	r1, r1, r3
   815a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   815a8:	f04f 0000 	mov.w	r0, #0
   815ac:	bd70      	pop	{r4, r5, r6, pc}
   815ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   815b2:	bf06      	itte	eq
   815b4:	4610      	moveq	r0, r2
   815b6:	4619      	moveq	r1, r3
   815b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   815bc:	d019      	beq.n	815f2 <__aeabi_dmul+0x24a>
   815be:	ea94 0f0c 	teq	r4, ip
   815c2:	d102      	bne.n	815ca <__aeabi_dmul+0x222>
   815c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   815c8:	d113      	bne.n	815f2 <__aeabi_dmul+0x24a>
   815ca:	ea95 0f0c 	teq	r5, ip
   815ce:	d105      	bne.n	815dc <__aeabi_dmul+0x234>
   815d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   815d4:	bf1c      	itt	ne
   815d6:	4610      	movne	r0, r2
   815d8:	4619      	movne	r1, r3
   815da:	d10a      	bne.n	815f2 <__aeabi_dmul+0x24a>
   815dc:	ea81 0103 	eor.w	r1, r1, r3
   815e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   815e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   815e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   815ec:	f04f 0000 	mov.w	r0, #0
   815f0:	bd70      	pop	{r4, r5, r6, pc}
   815f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   815f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   815fa:	bd70      	pop	{r4, r5, r6, pc}

000815fc <__aeabi_ddiv>:
   815fc:	b570      	push	{r4, r5, r6, lr}
   815fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
   81602:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   81606:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8160a:	bf1d      	ittte	ne
   8160c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   81610:	ea94 0f0c 	teqne	r4, ip
   81614:	ea95 0f0c 	teqne	r5, ip
   81618:	f000 f8a7 	bleq	8176a <__aeabi_ddiv+0x16e>
   8161c:	eba4 0405 	sub.w	r4, r4, r5
   81620:	ea81 0e03 	eor.w	lr, r1, r3
   81624:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   81628:	ea4f 3101 	mov.w	r1, r1, lsl #12
   8162c:	f000 8088 	beq.w	81740 <__aeabi_ddiv+0x144>
   81630:	ea4f 3303 	mov.w	r3, r3, lsl #12
   81634:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   81638:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   8163c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   81640:	ea4f 2202 	mov.w	r2, r2, lsl #8
   81644:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   81648:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   8164c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   81650:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   81654:	429d      	cmp	r5, r3
   81656:	bf08      	it	eq
   81658:	4296      	cmpeq	r6, r2
   8165a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   8165e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   81662:	d202      	bcs.n	8166a <__aeabi_ddiv+0x6e>
   81664:	085b      	lsrs	r3, r3, #1
   81666:	ea4f 0232 	mov.w	r2, r2, rrx
   8166a:	1ab6      	subs	r6, r6, r2
   8166c:	eb65 0503 	sbc.w	r5, r5, r3
   81670:	085b      	lsrs	r3, r3, #1
   81672:	ea4f 0232 	mov.w	r2, r2, rrx
   81676:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   8167a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   8167e:	ebb6 0e02 	subs.w	lr, r6, r2
   81682:	eb75 0e03 	sbcs.w	lr, r5, r3
   81686:	bf22      	ittt	cs
   81688:	1ab6      	subcs	r6, r6, r2
   8168a:	4675      	movcs	r5, lr
   8168c:	ea40 000c 	orrcs.w	r0, r0, ip
   81690:	085b      	lsrs	r3, r3, #1
   81692:	ea4f 0232 	mov.w	r2, r2, rrx
   81696:	ebb6 0e02 	subs.w	lr, r6, r2
   8169a:	eb75 0e03 	sbcs.w	lr, r5, r3
   8169e:	bf22      	ittt	cs
   816a0:	1ab6      	subcs	r6, r6, r2
   816a2:	4675      	movcs	r5, lr
   816a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   816a8:	085b      	lsrs	r3, r3, #1
   816aa:	ea4f 0232 	mov.w	r2, r2, rrx
   816ae:	ebb6 0e02 	subs.w	lr, r6, r2
   816b2:	eb75 0e03 	sbcs.w	lr, r5, r3
   816b6:	bf22      	ittt	cs
   816b8:	1ab6      	subcs	r6, r6, r2
   816ba:	4675      	movcs	r5, lr
   816bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   816c0:	085b      	lsrs	r3, r3, #1
   816c2:	ea4f 0232 	mov.w	r2, r2, rrx
   816c6:	ebb6 0e02 	subs.w	lr, r6, r2
   816ca:	eb75 0e03 	sbcs.w	lr, r5, r3
   816ce:	bf22      	ittt	cs
   816d0:	1ab6      	subcs	r6, r6, r2
   816d2:	4675      	movcs	r5, lr
   816d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   816d8:	ea55 0e06 	orrs.w	lr, r5, r6
   816dc:	d018      	beq.n	81710 <__aeabi_ddiv+0x114>
   816de:	ea4f 1505 	mov.w	r5, r5, lsl #4
   816e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   816e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   816ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   816ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   816f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   816f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   816fa:	d1c0      	bne.n	8167e <__aeabi_ddiv+0x82>
   816fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   81700:	d10b      	bne.n	8171a <__aeabi_ddiv+0x11e>
   81702:	ea41 0100 	orr.w	r1, r1, r0
   81706:	f04f 0000 	mov.w	r0, #0
   8170a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   8170e:	e7b6      	b.n	8167e <__aeabi_ddiv+0x82>
   81710:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   81714:	bf04      	itt	eq
   81716:	4301      	orreq	r1, r0
   81718:	2000      	moveq	r0, #0
   8171a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8171e:	bf88      	it	hi
   81720:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   81724:	f63f aeaf 	bhi.w	81486 <__aeabi_dmul+0xde>
   81728:	ebb5 0c03 	subs.w	ip, r5, r3
   8172c:	bf04      	itt	eq
   8172e:	ebb6 0c02 	subseq.w	ip, r6, r2
   81732:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   81736:	f150 0000 	adcs.w	r0, r0, #0
   8173a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8173e:	bd70      	pop	{r4, r5, r6, pc}
   81740:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   81744:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   81748:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   8174c:	bfc2      	ittt	gt
   8174e:	ebd4 050c 	rsbsgt	r5, r4, ip
   81752:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   81756:	bd70      	popgt	{r4, r5, r6, pc}
   81758:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8175c:	f04f 0e00 	mov.w	lr, #0
   81760:	3c01      	subs	r4, #1
   81762:	e690      	b.n	81486 <__aeabi_dmul+0xde>
   81764:	ea45 0e06 	orr.w	lr, r5, r6
   81768:	e68d      	b.n	81486 <__aeabi_dmul+0xde>
   8176a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8176e:	ea94 0f0c 	teq	r4, ip
   81772:	bf08      	it	eq
   81774:	ea95 0f0c 	teqeq	r5, ip
   81778:	f43f af3b 	beq.w	815f2 <__aeabi_dmul+0x24a>
   8177c:	ea94 0f0c 	teq	r4, ip
   81780:	d10a      	bne.n	81798 <__aeabi_ddiv+0x19c>
   81782:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   81786:	f47f af34 	bne.w	815f2 <__aeabi_dmul+0x24a>
   8178a:	ea95 0f0c 	teq	r5, ip
   8178e:	f47f af25 	bne.w	815dc <__aeabi_dmul+0x234>
   81792:	4610      	mov	r0, r2
   81794:	4619      	mov	r1, r3
   81796:	e72c      	b.n	815f2 <__aeabi_dmul+0x24a>
   81798:	ea95 0f0c 	teq	r5, ip
   8179c:	d106      	bne.n	817ac <__aeabi_ddiv+0x1b0>
   8179e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   817a2:	f43f aefd 	beq.w	815a0 <__aeabi_dmul+0x1f8>
   817a6:	4610      	mov	r0, r2
   817a8:	4619      	mov	r1, r3
   817aa:	e722      	b.n	815f2 <__aeabi_dmul+0x24a>
   817ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   817b0:	bf18      	it	ne
   817b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   817b6:	f47f aec5 	bne.w	81544 <__aeabi_dmul+0x19c>
   817ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   817be:	f47f af0d 	bne.w	815dc <__aeabi_dmul+0x234>
   817c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   817c6:	f47f aeeb 	bne.w	815a0 <__aeabi_dmul+0x1f8>
   817ca:	e712      	b.n	815f2 <__aeabi_dmul+0x24a>

000817cc <__aeabi_d2iz>:
   817cc:	ea4f 0241 	mov.w	r2, r1, lsl #1
   817d0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   817d4:	d215      	bcs.n	81802 <__aeabi_d2iz+0x36>
   817d6:	d511      	bpl.n	817fc <__aeabi_d2iz+0x30>
   817d8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   817dc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   817e0:	d912      	bls.n	81808 <__aeabi_d2iz+0x3c>
   817e2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   817e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   817ea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   817ee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   817f2:	fa23 f002 	lsr.w	r0, r3, r2
   817f6:	bf18      	it	ne
   817f8:	4240      	negne	r0, r0
   817fa:	4770      	bx	lr
   817fc:	f04f 0000 	mov.w	r0, #0
   81800:	4770      	bx	lr
   81802:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   81806:	d105      	bne.n	81814 <__aeabi_d2iz+0x48>
   81808:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   8180c:	bf08      	it	eq
   8180e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   81812:	4770      	bx	lr
   81814:	f04f 0000 	mov.w	r0, #0
   81818:	4770      	bx	lr
   8181a:	bf00      	nop

0008181c <__aeabi_uldivmod>:
   8181c:	b94b      	cbnz	r3, 81832 <__aeabi_uldivmod+0x16>
   8181e:	b942      	cbnz	r2, 81832 <__aeabi_uldivmod+0x16>
   81820:	2900      	cmp	r1, #0
   81822:	bf08      	it	eq
   81824:	2800      	cmpeq	r0, #0
   81826:	d002      	beq.n	8182e <__aeabi_uldivmod+0x12>
   81828:	f04f 31ff 	mov.w	r1, #4294967295
   8182c:	4608      	mov	r0, r1
   8182e:	f000 b83b 	b.w	818a8 <__aeabi_idiv0>
   81832:	b082      	sub	sp, #8
   81834:	46ec      	mov	ip, sp
   81836:	e92d 5000 	stmdb	sp!, {ip, lr}
   8183a:	f000 f81d 	bl	81878 <__gnu_uldivmod_helper>
   8183e:	f8dd e004 	ldr.w	lr, [sp, #4]
   81842:	b002      	add	sp, #8
   81844:	bc0c      	pop	{r2, r3}
   81846:	4770      	bx	lr

00081848 <__gnu_ldivmod_helper>:
   81848:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   8184c:	9e08      	ldr	r6, [sp, #32]
   8184e:	4614      	mov	r4, r2
   81850:	461d      	mov	r5, r3
   81852:	4680      	mov	r8, r0
   81854:	4689      	mov	r9, r1
   81856:	f000 f829 	bl	818ac <__divdi3>
   8185a:	fb04 f301 	mul.w	r3, r4, r1
   8185e:	fba4 ab00 	umull	sl, fp, r4, r0
   81862:	fb00 3205 	mla	r2, r0, r5, r3
   81866:	4493      	add	fp, r2
   81868:	ebb8 080a 	subs.w	r8, r8, sl
   8186c:	eb69 090b 	sbc.w	r9, r9, fp
   81870:	e9c6 8900 	strd	r8, r9, [r6]
   81874:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

00081878 <__gnu_uldivmod_helper>:
   81878:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   8187c:	9e08      	ldr	r6, [sp, #32]
   8187e:	4614      	mov	r4, r2
   81880:	461d      	mov	r5, r3
   81882:	4680      	mov	r8, r0
   81884:	4689      	mov	r9, r1
   81886:	f000 f961 	bl	81b4c <__udivdi3>
   8188a:	fb00 f505 	mul.w	r5, r0, r5
   8188e:	fba0 ab04 	umull	sl, fp, r0, r4
   81892:	fb04 5401 	mla	r4, r4, r1, r5
   81896:	44a3      	add	fp, r4
   81898:	ebb8 080a 	subs.w	r8, r8, sl
   8189c:	eb69 090b 	sbc.w	r9, r9, fp
   818a0:	e9c6 8900 	strd	r8, r9, [r6]
   818a4:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

000818a8 <__aeabi_idiv0>:
   818a8:	4770      	bx	lr
   818aa:	bf00      	nop

000818ac <__divdi3>:
   818ac:	2900      	cmp	r1, #0
   818ae:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   818b2:	f2c0 80a1 	blt.w	819f8 <__divdi3+0x14c>
   818b6:	2400      	movs	r4, #0
   818b8:	2b00      	cmp	r3, #0
   818ba:	f2c0 8098 	blt.w	819ee <__divdi3+0x142>
   818be:	4615      	mov	r5, r2
   818c0:	4606      	mov	r6, r0
   818c2:	460f      	mov	r7, r1
   818c4:	2b00      	cmp	r3, #0
   818c6:	d13f      	bne.n	81948 <__divdi3+0x9c>
   818c8:	428a      	cmp	r2, r1
   818ca:	d958      	bls.n	8197e <__divdi3+0xd2>
   818cc:	fab2 f382 	clz	r3, r2
   818d0:	b14b      	cbz	r3, 818e6 <__divdi3+0x3a>
   818d2:	f1c3 0220 	rsb	r2, r3, #32
   818d6:	fa01 f703 	lsl.w	r7, r1, r3
   818da:	fa20 f202 	lsr.w	r2, r0, r2
   818de:	409d      	lsls	r5, r3
   818e0:	fa00 f603 	lsl.w	r6, r0, r3
   818e4:	4317      	orrs	r7, r2
   818e6:	0c29      	lsrs	r1, r5, #16
   818e8:	fbb7 f2f1 	udiv	r2, r7, r1
   818ec:	fb01 7712 	mls	r7, r1, r2, r7
   818f0:	b2a8      	uxth	r0, r5
   818f2:	fb00 f302 	mul.w	r3, r0, r2
   818f6:	ea4f 4c16 	mov.w	ip, r6, lsr #16
   818fa:	ea4c 4707 	orr.w	r7, ip, r7, lsl #16
   818fe:	42bb      	cmp	r3, r7
   81900:	d909      	bls.n	81916 <__divdi3+0x6a>
   81902:	197f      	adds	r7, r7, r5
   81904:	f102 3cff 	add.w	ip, r2, #4294967295
   81908:	f080 8105 	bcs.w	81b16 <__divdi3+0x26a>
   8190c:	42bb      	cmp	r3, r7
   8190e:	f240 8102 	bls.w	81b16 <__divdi3+0x26a>
   81912:	3a02      	subs	r2, #2
   81914:	442f      	add	r7, r5
   81916:	1aff      	subs	r7, r7, r3
   81918:	fbb7 f3f1 	udiv	r3, r7, r1
   8191c:	fb01 7113 	mls	r1, r1, r3, r7
   81920:	fb00 f003 	mul.w	r0, r0, r3
   81924:	b2b6      	uxth	r6, r6
   81926:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
   8192a:	4288      	cmp	r0, r1
   8192c:	d908      	bls.n	81940 <__divdi3+0x94>
   8192e:	1949      	adds	r1, r1, r5
   81930:	f103 37ff 	add.w	r7, r3, #4294967295
   81934:	f080 80f1 	bcs.w	81b1a <__divdi3+0x26e>
   81938:	4288      	cmp	r0, r1
   8193a:	f240 80ee 	bls.w	81b1a <__divdi3+0x26e>
   8193e:	3b02      	subs	r3, #2
   81940:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   81944:	2300      	movs	r3, #0
   81946:	e003      	b.n	81950 <__divdi3+0xa4>
   81948:	428b      	cmp	r3, r1
   8194a:	d90a      	bls.n	81962 <__divdi3+0xb6>
   8194c:	2300      	movs	r3, #0
   8194e:	461a      	mov	r2, r3
   81950:	4610      	mov	r0, r2
   81952:	4619      	mov	r1, r3
   81954:	b114      	cbz	r4, 8195c <__divdi3+0xb0>
   81956:	4240      	negs	r0, r0
   81958:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8195c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   81960:	4770      	bx	lr
   81962:	fab3 f883 	clz	r8, r3
   81966:	f1b8 0f00 	cmp.w	r8, #0
   8196a:	f040 8088 	bne.w	81a7e <__divdi3+0x1d2>
   8196e:	428b      	cmp	r3, r1
   81970:	d302      	bcc.n	81978 <__divdi3+0xcc>
   81972:	4282      	cmp	r2, r0
   81974:	f200 80e2 	bhi.w	81b3c <__divdi3+0x290>
   81978:	2300      	movs	r3, #0
   8197a:	2201      	movs	r2, #1
   8197c:	e7e8      	b.n	81950 <__divdi3+0xa4>
   8197e:	b912      	cbnz	r2, 81986 <__divdi3+0xda>
   81980:	2301      	movs	r3, #1
   81982:	fbb3 f5f2 	udiv	r5, r3, r2
   81986:	fab5 f285 	clz	r2, r5
   8198a:	2a00      	cmp	r2, #0
   8198c:	d13a      	bne.n	81a04 <__divdi3+0x158>
   8198e:	1b7f      	subs	r7, r7, r5
   81990:	0c28      	lsrs	r0, r5, #16
   81992:	fa1f fc85 	uxth.w	ip, r5
   81996:	2301      	movs	r3, #1
   81998:	fbb7 f1f0 	udiv	r1, r7, r0
   8199c:	fb00 7711 	mls	r7, r0, r1, r7
   819a0:	fb0c f201 	mul.w	r2, ip, r1
   819a4:	ea4f 4816 	mov.w	r8, r6, lsr #16
   819a8:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
   819ac:	42ba      	cmp	r2, r7
   819ae:	d907      	bls.n	819c0 <__divdi3+0x114>
   819b0:	197f      	adds	r7, r7, r5
   819b2:	f101 38ff 	add.w	r8, r1, #4294967295
   819b6:	d202      	bcs.n	819be <__divdi3+0x112>
   819b8:	42ba      	cmp	r2, r7
   819ba:	f200 80c4 	bhi.w	81b46 <__divdi3+0x29a>
   819be:	4641      	mov	r1, r8
   819c0:	1abf      	subs	r7, r7, r2
   819c2:	fbb7 f2f0 	udiv	r2, r7, r0
   819c6:	fb00 7012 	mls	r0, r0, r2, r7
   819ca:	fb0c fc02 	mul.w	ip, ip, r2
   819ce:	b2b6      	uxth	r6, r6
   819d0:	ea46 4000 	orr.w	r0, r6, r0, lsl #16
   819d4:	4584      	cmp	ip, r0
   819d6:	d907      	bls.n	819e8 <__divdi3+0x13c>
   819d8:	1940      	adds	r0, r0, r5
   819da:	f102 37ff 	add.w	r7, r2, #4294967295
   819de:	d202      	bcs.n	819e6 <__divdi3+0x13a>
   819e0:	4584      	cmp	ip, r0
   819e2:	f200 80ae 	bhi.w	81b42 <__divdi3+0x296>
   819e6:	463a      	mov	r2, r7
   819e8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   819ec:	e7b0      	b.n	81950 <__divdi3+0xa4>
   819ee:	43e4      	mvns	r4, r4
   819f0:	4252      	negs	r2, r2
   819f2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   819f6:	e762      	b.n	818be <__divdi3+0x12>
   819f8:	4240      	negs	r0, r0
   819fa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   819fe:	f04f 34ff 	mov.w	r4, #4294967295
   81a02:	e759      	b.n	818b8 <__divdi3+0xc>
   81a04:	4095      	lsls	r5, r2
   81a06:	f1c2 0920 	rsb	r9, r2, #32
   81a0a:	fa27 f109 	lsr.w	r1, r7, r9
   81a0e:	fa26 f909 	lsr.w	r9, r6, r9
   81a12:	4097      	lsls	r7, r2
   81a14:	0c28      	lsrs	r0, r5, #16
   81a16:	fbb1 f8f0 	udiv	r8, r1, r0
   81a1a:	fb00 1118 	mls	r1, r0, r8, r1
   81a1e:	fa1f fc85 	uxth.w	ip, r5
   81a22:	fb0c f308 	mul.w	r3, ip, r8
   81a26:	ea49 0907 	orr.w	r9, r9, r7
   81a2a:	ea4f 4719 	mov.w	r7, r9, lsr #16
   81a2e:	ea47 4101 	orr.w	r1, r7, r1, lsl #16
   81a32:	428b      	cmp	r3, r1
   81a34:	fa06 f602 	lsl.w	r6, r6, r2
   81a38:	d908      	bls.n	81a4c <__divdi3+0x1a0>
   81a3a:	1949      	adds	r1, r1, r5
   81a3c:	f108 32ff 	add.w	r2, r8, #4294967295
   81a40:	d27a      	bcs.n	81b38 <__divdi3+0x28c>
   81a42:	428b      	cmp	r3, r1
   81a44:	d978      	bls.n	81b38 <__divdi3+0x28c>
   81a46:	f1a8 0802 	sub.w	r8, r8, #2
   81a4a:	4429      	add	r1, r5
   81a4c:	1ac9      	subs	r1, r1, r3
   81a4e:	fbb1 f3f0 	udiv	r3, r1, r0
   81a52:	fb00 1713 	mls	r7, r0, r3, r1
   81a56:	fb0c f203 	mul.w	r2, ip, r3
   81a5a:	fa1f f989 	uxth.w	r9, r9
   81a5e:	ea49 4707 	orr.w	r7, r9, r7, lsl #16
   81a62:	42ba      	cmp	r2, r7
   81a64:	d907      	bls.n	81a76 <__divdi3+0x1ca>
   81a66:	197f      	adds	r7, r7, r5
   81a68:	f103 31ff 	add.w	r1, r3, #4294967295
   81a6c:	d260      	bcs.n	81b30 <__divdi3+0x284>
   81a6e:	42ba      	cmp	r2, r7
   81a70:	d95e      	bls.n	81b30 <__divdi3+0x284>
   81a72:	3b02      	subs	r3, #2
   81a74:	442f      	add	r7, r5
   81a76:	1abf      	subs	r7, r7, r2
   81a78:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   81a7c:	e78c      	b.n	81998 <__divdi3+0xec>
   81a7e:	f1c8 0220 	rsb	r2, r8, #32
   81a82:	fa25 f102 	lsr.w	r1, r5, r2
   81a86:	fa03 fc08 	lsl.w	ip, r3, r8
   81a8a:	fa27 f302 	lsr.w	r3, r7, r2
   81a8e:	fa20 f202 	lsr.w	r2, r0, r2
   81a92:	fa07 f708 	lsl.w	r7, r7, r8
   81a96:	ea41 0c0c 	orr.w	ip, r1, ip
   81a9a:	ea4f 491c 	mov.w	r9, ip, lsr #16
   81a9e:	fbb3 f1f9 	udiv	r1, r3, r9
   81aa2:	fb09 3311 	mls	r3, r9, r1, r3
   81aa6:	fa1f fa8c 	uxth.w	sl, ip
   81aaa:	fb0a fb01 	mul.w	fp, sl, r1
   81aae:	4317      	orrs	r7, r2
   81ab0:	0c3a      	lsrs	r2, r7, #16
   81ab2:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   81ab6:	459b      	cmp	fp, r3
   81ab8:	fa05 f008 	lsl.w	r0, r5, r8
   81abc:	d908      	bls.n	81ad0 <__divdi3+0x224>
   81abe:	eb13 030c 	adds.w	r3, r3, ip
   81ac2:	f101 32ff 	add.w	r2, r1, #4294967295
   81ac6:	d235      	bcs.n	81b34 <__divdi3+0x288>
   81ac8:	459b      	cmp	fp, r3
   81aca:	d933      	bls.n	81b34 <__divdi3+0x288>
   81acc:	3902      	subs	r1, #2
   81ace:	4463      	add	r3, ip
   81ad0:	ebcb 0303 	rsb	r3, fp, r3
   81ad4:	fbb3 f2f9 	udiv	r2, r3, r9
   81ad8:	fb09 3312 	mls	r3, r9, r2, r3
   81adc:	fb0a fa02 	mul.w	sl, sl, r2
   81ae0:	b2bf      	uxth	r7, r7
   81ae2:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
   81ae6:	45ba      	cmp	sl, r7
   81ae8:	d908      	bls.n	81afc <__divdi3+0x250>
   81aea:	eb17 070c 	adds.w	r7, r7, ip
   81aee:	f102 33ff 	add.w	r3, r2, #4294967295
   81af2:	d21b      	bcs.n	81b2c <__divdi3+0x280>
   81af4:	45ba      	cmp	sl, r7
   81af6:	d919      	bls.n	81b2c <__divdi3+0x280>
   81af8:	3a02      	subs	r2, #2
   81afa:	4467      	add	r7, ip
   81afc:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
   81b00:	fba5 0100 	umull	r0, r1, r5, r0
   81b04:	ebca 0707 	rsb	r7, sl, r7
   81b08:	428f      	cmp	r7, r1
   81b0a:	f04f 0300 	mov.w	r3, #0
   81b0e:	d30a      	bcc.n	81b26 <__divdi3+0x27a>
   81b10:	d005      	beq.n	81b1e <__divdi3+0x272>
   81b12:	462a      	mov	r2, r5
   81b14:	e71c      	b.n	81950 <__divdi3+0xa4>
   81b16:	4662      	mov	r2, ip
   81b18:	e6fd      	b.n	81916 <__divdi3+0x6a>
   81b1a:	463b      	mov	r3, r7
   81b1c:	e710      	b.n	81940 <__divdi3+0x94>
   81b1e:	fa06 f608 	lsl.w	r6, r6, r8
   81b22:	4286      	cmp	r6, r0
   81b24:	d2f5      	bcs.n	81b12 <__divdi3+0x266>
   81b26:	1e6a      	subs	r2, r5, #1
   81b28:	2300      	movs	r3, #0
   81b2a:	e711      	b.n	81950 <__divdi3+0xa4>
   81b2c:	461a      	mov	r2, r3
   81b2e:	e7e5      	b.n	81afc <__divdi3+0x250>
   81b30:	460b      	mov	r3, r1
   81b32:	e7a0      	b.n	81a76 <__divdi3+0x1ca>
   81b34:	4611      	mov	r1, r2
   81b36:	e7cb      	b.n	81ad0 <__divdi3+0x224>
   81b38:	4690      	mov	r8, r2
   81b3a:	e787      	b.n	81a4c <__divdi3+0x1a0>
   81b3c:	4643      	mov	r3, r8
   81b3e:	4642      	mov	r2, r8
   81b40:	e706      	b.n	81950 <__divdi3+0xa4>
   81b42:	3a02      	subs	r2, #2
   81b44:	e750      	b.n	819e8 <__divdi3+0x13c>
   81b46:	3902      	subs	r1, #2
   81b48:	442f      	add	r7, r5
   81b4a:	e739      	b.n	819c0 <__divdi3+0x114>

00081b4c <__udivdi3>:
   81b4c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   81b50:	4614      	mov	r4, r2
   81b52:	4605      	mov	r5, r0
   81b54:	460e      	mov	r6, r1
   81b56:	2b00      	cmp	r3, #0
   81b58:	d143      	bne.n	81be2 <__udivdi3+0x96>
   81b5a:	428a      	cmp	r2, r1
   81b5c:	d953      	bls.n	81c06 <__udivdi3+0xba>
   81b5e:	fab2 f782 	clz	r7, r2
   81b62:	b157      	cbz	r7, 81b7a <__udivdi3+0x2e>
   81b64:	f1c7 0620 	rsb	r6, r7, #32
   81b68:	fa20 f606 	lsr.w	r6, r0, r6
   81b6c:	fa01 f307 	lsl.w	r3, r1, r7
   81b70:	fa02 f407 	lsl.w	r4, r2, r7
   81b74:	fa00 f507 	lsl.w	r5, r0, r7
   81b78:	431e      	orrs	r6, r3
   81b7a:	0c21      	lsrs	r1, r4, #16
   81b7c:	fbb6 f2f1 	udiv	r2, r6, r1
   81b80:	fb01 6612 	mls	r6, r1, r2, r6
   81b84:	b2a0      	uxth	r0, r4
   81b86:	fb00 f302 	mul.w	r3, r0, r2
   81b8a:	0c2f      	lsrs	r7, r5, #16
   81b8c:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   81b90:	42b3      	cmp	r3, r6
   81b92:	d909      	bls.n	81ba8 <__udivdi3+0x5c>
   81b94:	1936      	adds	r6, r6, r4
   81b96:	f102 37ff 	add.w	r7, r2, #4294967295
   81b9a:	f080 80fd 	bcs.w	81d98 <__udivdi3+0x24c>
   81b9e:	42b3      	cmp	r3, r6
   81ba0:	f240 80fa 	bls.w	81d98 <__udivdi3+0x24c>
   81ba4:	3a02      	subs	r2, #2
   81ba6:	4426      	add	r6, r4
   81ba8:	1af6      	subs	r6, r6, r3
   81baa:	fbb6 f3f1 	udiv	r3, r6, r1
   81bae:	fb01 6113 	mls	r1, r1, r3, r6
   81bb2:	fb00 f003 	mul.w	r0, r0, r3
   81bb6:	b2ad      	uxth	r5, r5
   81bb8:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
   81bbc:	4288      	cmp	r0, r1
   81bbe:	d908      	bls.n	81bd2 <__udivdi3+0x86>
   81bc0:	1909      	adds	r1, r1, r4
   81bc2:	f103 36ff 	add.w	r6, r3, #4294967295
   81bc6:	f080 80e9 	bcs.w	81d9c <__udivdi3+0x250>
   81bca:	4288      	cmp	r0, r1
   81bcc:	f240 80e6 	bls.w	81d9c <__udivdi3+0x250>
   81bd0:	3b02      	subs	r3, #2
   81bd2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   81bd6:	2300      	movs	r3, #0
   81bd8:	4610      	mov	r0, r2
   81bda:	4619      	mov	r1, r3
   81bdc:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   81be0:	4770      	bx	lr
   81be2:	428b      	cmp	r3, r1
   81be4:	d84c      	bhi.n	81c80 <__udivdi3+0x134>
   81be6:	fab3 f683 	clz	r6, r3
   81bea:	2e00      	cmp	r6, #0
   81bec:	d14f      	bne.n	81c8e <__udivdi3+0x142>
   81bee:	428b      	cmp	r3, r1
   81bf0:	d302      	bcc.n	81bf8 <__udivdi3+0xac>
   81bf2:	4282      	cmp	r2, r0
   81bf4:	f200 80dd 	bhi.w	81db2 <__udivdi3+0x266>
   81bf8:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   81bfc:	2300      	movs	r3, #0
   81bfe:	2201      	movs	r2, #1
   81c00:	4610      	mov	r0, r2
   81c02:	4619      	mov	r1, r3
   81c04:	4770      	bx	lr
   81c06:	b912      	cbnz	r2, 81c0e <__udivdi3+0xc2>
   81c08:	2401      	movs	r4, #1
   81c0a:	fbb4 f4f2 	udiv	r4, r4, r2
   81c0e:	fab4 f284 	clz	r2, r4
   81c12:	2a00      	cmp	r2, #0
   81c14:	f040 8082 	bne.w	81d1c <__udivdi3+0x1d0>
   81c18:	1b09      	subs	r1, r1, r4
   81c1a:	0c26      	lsrs	r6, r4, #16
   81c1c:	b2a7      	uxth	r7, r4
   81c1e:	2301      	movs	r3, #1
   81c20:	fbb1 f0f6 	udiv	r0, r1, r6
   81c24:	fb06 1110 	mls	r1, r6, r0, r1
   81c28:	fb07 f200 	mul.w	r2, r7, r0
   81c2c:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   81c30:	ea4c 4101 	orr.w	r1, ip, r1, lsl #16
   81c34:	428a      	cmp	r2, r1
   81c36:	d907      	bls.n	81c48 <__udivdi3+0xfc>
   81c38:	1909      	adds	r1, r1, r4
   81c3a:	f100 3cff 	add.w	ip, r0, #4294967295
   81c3e:	d202      	bcs.n	81c46 <__udivdi3+0xfa>
   81c40:	428a      	cmp	r2, r1
   81c42:	f200 80c8 	bhi.w	81dd6 <__udivdi3+0x28a>
   81c46:	4660      	mov	r0, ip
   81c48:	1a89      	subs	r1, r1, r2
   81c4a:	fbb1 f2f6 	udiv	r2, r1, r6
   81c4e:	fb06 1112 	mls	r1, r6, r2, r1
   81c52:	fb07 f702 	mul.w	r7, r7, r2
   81c56:	b2ad      	uxth	r5, r5
   81c58:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
   81c5c:	42af      	cmp	r7, r5
   81c5e:	d908      	bls.n	81c72 <__udivdi3+0x126>
   81c60:	192c      	adds	r4, r5, r4
   81c62:	f102 31ff 	add.w	r1, r2, #4294967295
   81c66:	f080 809b 	bcs.w	81da0 <__udivdi3+0x254>
   81c6a:	42a7      	cmp	r7, r4
   81c6c:	f240 8098 	bls.w	81da0 <__udivdi3+0x254>
   81c70:	3a02      	subs	r2, #2
   81c72:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
   81c76:	4610      	mov	r0, r2
   81c78:	4619      	mov	r1, r3
   81c7a:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   81c7e:	4770      	bx	lr
   81c80:	2300      	movs	r3, #0
   81c82:	461a      	mov	r2, r3
   81c84:	4610      	mov	r0, r2
   81c86:	4619      	mov	r1, r3
   81c88:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   81c8c:	4770      	bx	lr
   81c8e:	f1c6 0520 	rsb	r5, r6, #32
   81c92:	fa22 f705 	lsr.w	r7, r2, r5
   81c96:	fa03 f406 	lsl.w	r4, r3, r6
   81c9a:	fa21 f305 	lsr.w	r3, r1, r5
   81c9e:	fa01 fb06 	lsl.w	fp, r1, r6
   81ca2:	fa20 f505 	lsr.w	r5, r0, r5
   81ca6:	433c      	orrs	r4, r7
   81ca8:	ea4f 4814 	mov.w	r8, r4, lsr #16
   81cac:	fbb3 fcf8 	udiv	ip, r3, r8
   81cb0:	fb08 331c 	mls	r3, r8, ip, r3
   81cb4:	fa1f f984 	uxth.w	r9, r4
   81cb8:	fb09 fa0c 	mul.w	sl, r9, ip
   81cbc:	ea45 0b0b 	orr.w	fp, r5, fp
   81cc0:	ea4f 451b 	mov.w	r5, fp, lsr #16
   81cc4:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
   81cc8:	459a      	cmp	sl, r3
   81cca:	fa02 f206 	lsl.w	r2, r2, r6
   81cce:	d904      	bls.n	81cda <__udivdi3+0x18e>
   81cd0:	191b      	adds	r3, r3, r4
   81cd2:	f10c 35ff 	add.w	r5, ip, #4294967295
   81cd6:	d36f      	bcc.n	81db8 <__udivdi3+0x26c>
   81cd8:	46ac      	mov	ip, r5
   81cda:	ebca 0303 	rsb	r3, sl, r3
   81cde:	fbb3 f5f8 	udiv	r5, r3, r8
   81ce2:	fb08 3315 	mls	r3, r8, r5, r3
   81ce6:	fb09 f905 	mul.w	r9, r9, r5
   81cea:	fa1f fb8b 	uxth.w	fp, fp
   81cee:	ea4b 4703 	orr.w	r7, fp, r3, lsl #16
   81cf2:	45b9      	cmp	r9, r7
   81cf4:	d904      	bls.n	81d00 <__udivdi3+0x1b4>
   81cf6:	193f      	adds	r7, r7, r4
   81cf8:	f105 33ff 	add.w	r3, r5, #4294967295
   81cfc:	d362      	bcc.n	81dc4 <__udivdi3+0x278>
   81cfe:	461d      	mov	r5, r3
   81d00:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
   81d04:	fbac 2302 	umull	r2, r3, ip, r2
   81d08:	ebc9 0707 	rsb	r7, r9, r7
   81d0c:	429f      	cmp	r7, r3
   81d0e:	f04f 0500 	mov.w	r5, #0
   81d12:	d34a      	bcc.n	81daa <__udivdi3+0x25e>
   81d14:	d046      	beq.n	81da4 <__udivdi3+0x258>
   81d16:	4662      	mov	r2, ip
   81d18:	462b      	mov	r3, r5
   81d1a:	e75d      	b.n	81bd8 <__udivdi3+0x8c>
   81d1c:	4094      	lsls	r4, r2
   81d1e:	f1c2 0920 	rsb	r9, r2, #32
   81d22:	fa21 fc09 	lsr.w	ip, r1, r9
   81d26:	4091      	lsls	r1, r2
   81d28:	fa20 f909 	lsr.w	r9, r0, r9
   81d2c:	0c26      	lsrs	r6, r4, #16
   81d2e:	fbbc f8f6 	udiv	r8, ip, r6
   81d32:	fb06 cc18 	mls	ip, r6, r8, ip
   81d36:	b2a7      	uxth	r7, r4
   81d38:	fb07 f308 	mul.w	r3, r7, r8
   81d3c:	ea49 0901 	orr.w	r9, r9, r1
   81d40:	ea4f 4119 	mov.w	r1, r9, lsr #16
   81d44:	ea41 4c0c 	orr.w	ip, r1, ip, lsl #16
   81d48:	4563      	cmp	r3, ip
   81d4a:	fa00 f502 	lsl.w	r5, r0, r2
   81d4e:	d909      	bls.n	81d64 <__udivdi3+0x218>
   81d50:	eb1c 0c04 	adds.w	ip, ip, r4
   81d54:	f108 32ff 	add.w	r2, r8, #4294967295
   81d58:	d23b      	bcs.n	81dd2 <__udivdi3+0x286>
   81d5a:	4563      	cmp	r3, ip
   81d5c:	d939      	bls.n	81dd2 <__udivdi3+0x286>
   81d5e:	f1a8 0802 	sub.w	r8, r8, #2
   81d62:	44a4      	add	ip, r4
   81d64:	ebc3 0c0c 	rsb	ip, r3, ip
   81d68:	fbbc f3f6 	udiv	r3, ip, r6
   81d6c:	fb06 c113 	mls	r1, r6, r3, ip
   81d70:	fb07 f203 	mul.w	r2, r7, r3
   81d74:	fa1f f989 	uxth.w	r9, r9
   81d78:	ea49 4101 	orr.w	r1, r9, r1, lsl #16
   81d7c:	428a      	cmp	r2, r1
   81d7e:	d907      	bls.n	81d90 <__udivdi3+0x244>
   81d80:	1909      	adds	r1, r1, r4
   81d82:	f103 30ff 	add.w	r0, r3, #4294967295
   81d86:	d222      	bcs.n	81dce <__udivdi3+0x282>
   81d88:	428a      	cmp	r2, r1
   81d8a:	d920      	bls.n	81dce <__udivdi3+0x282>
   81d8c:	3b02      	subs	r3, #2
   81d8e:	4421      	add	r1, r4
   81d90:	1a89      	subs	r1, r1, r2
   81d92:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   81d96:	e743      	b.n	81c20 <__udivdi3+0xd4>
   81d98:	463a      	mov	r2, r7
   81d9a:	e705      	b.n	81ba8 <__udivdi3+0x5c>
   81d9c:	4633      	mov	r3, r6
   81d9e:	e718      	b.n	81bd2 <__udivdi3+0x86>
   81da0:	460a      	mov	r2, r1
   81da2:	e766      	b.n	81c72 <__udivdi3+0x126>
   81da4:	40b0      	lsls	r0, r6
   81da6:	4290      	cmp	r0, r2
   81da8:	d2b5      	bcs.n	81d16 <__udivdi3+0x1ca>
   81daa:	f10c 32ff 	add.w	r2, ip, #4294967295
   81dae:	2300      	movs	r3, #0
   81db0:	e712      	b.n	81bd8 <__udivdi3+0x8c>
   81db2:	4633      	mov	r3, r6
   81db4:	4632      	mov	r2, r6
   81db6:	e70f      	b.n	81bd8 <__udivdi3+0x8c>
   81db8:	459a      	cmp	sl, r3
   81dba:	d98d      	bls.n	81cd8 <__udivdi3+0x18c>
   81dbc:	f1ac 0c02 	sub.w	ip, ip, #2
   81dc0:	4423      	add	r3, r4
   81dc2:	e78a      	b.n	81cda <__udivdi3+0x18e>
   81dc4:	45b9      	cmp	r9, r7
   81dc6:	d99a      	bls.n	81cfe <__udivdi3+0x1b2>
   81dc8:	3d02      	subs	r5, #2
   81dca:	4427      	add	r7, r4
   81dcc:	e798      	b.n	81d00 <__udivdi3+0x1b4>
   81dce:	4603      	mov	r3, r0
   81dd0:	e7de      	b.n	81d90 <__udivdi3+0x244>
   81dd2:	4690      	mov	r8, r2
   81dd4:	e7c6      	b.n	81d64 <__udivdi3+0x218>
   81dd6:	3802      	subs	r0, #2
   81dd8:	4421      	add	r1, r4
   81dda:	e735      	b.n	81c48 <__udivdi3+0xfc>

00081ddc <__libc_init_array>:
   81ddc:	b570      	push	{r4, r5, r6, lr}
   81dde:	4e0f      	ldr	r6, [pc, #60]	; (81e1c <__libc_init_array+0x40>)
   81de0:	4d0f      	ldr	r5, [pc, #60]	; (81e20 <__libc_init_array+0x44>)
   81de2:	1b76      	subs	r6, r6, r5
   81de4:	10b6      	asrs	r6, r6, #2
   81de6:	d007      	beq.n	81df8 <__libc_init_array+0x1c>
   81de8:	3d04      	subs	r5, #4
   81dea:	2400      	movs	r4, #0
   81dec:	3401      	adds	r4, #1
   81dee:	f855 3f04 	ldr.w	r3, [r5, #4]!
   81df2:	4798      	blx	r3
   81df4:	42a6      	cmp	r6, r4
   81df6:	d1f9      	bne.n	81dec <__libc_init_array+0x10>
   81df8:	4e0a      	ldr	r6, [pc, #40]	; (81e24 <__libc_init_array+0x48>)
   81dfa:	4d0b      	ldr	r5, [pc, #44]	; (81e28 <__libc_init_array+0x4c>)
   81dfc:	f002 fd14 	bl	84828 <_init>
   81e00:	1b76      	subs	r6, r6, r5
   81e02:	10b6      	asrs	r6, r6, #2
   81e04:	d008      	beq.n	81e18 <__libc_init_array+0x3c>
   81e06:	3d04      	subs	r5, #4
   81e08:	2400      	movs	r4, #0
   81e0a:	3401      	adds	r4, #1
   81e0c:	f855 3f04 	ldr.w	r3, [r5, #4]!
   81e10:	4798      	blx	r3
   81e12:	42a6      	cmp	r6, r4
   81e14:	d1f9      	bne.n	81e0a <__libc_init_array+0x2e>
   81e16:	bd70      	pop	{r4, r5, r6, pc}
   81e18:	bd70      	pop	{r4, r5, r6, pc}
   81e1a:	bf00      	nop
   81e1c:	00084834 	.word	0x00084834
   81e20:	00084834 	.word	0x00084834
   81e24:	0008483c 	.word	0x0008483c
   81e28:	00084834 	.word	0x00084834

00081e2c <iprintf>:
   81e2c:	b40f      	push	{r0, r1, r2, r3}
   81e2e:	b510      	push	{r4, lr}
   81e30:	4b07      	ldr	r3, [pc, #28]	; (81e50 <iprintf+0x24>)
   81e32:	b082      	sub	sp, #8
   81e34:	ac04      	add	r4, sp, #16
   81e36:	f854 2b04 	ldr.w	r2, [r4], #4
   81e3a:	6818      	ldr	r0, [r3, #0]
   81e3c:	4623      	mov	r3, r4
   81e3e:	6881      	ldr	r1, [r0, #8]
   81e40:	9401      	str	r4, [sp, #4]
   81e42:	f000 f915 	bl	82070 <_vfiprintf_r>
   81e46:	b002      	add	sp, #8
   81e48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   81e4c:	b004      	add	sp, #16
   81e4e:	4770      	bx	lr
   81e50:	20070568 	.word	0x20070568

00081e54 <memset>:
   81e54:	b4f0      	push	{r4, r5, r6, r7}
   81e56:	0784      	lsls	r4, r0, #30
   81e58:	d043      	beq.n	81ee2 <memset+0x8e>
   81e5a:	1e54      	subs	r4, r2, #1
   81e5c:	2a00      	cmp	r2, #0
   81e5e:	d03e      	beq.n	81ede <memset+0x8a>
   81e60:	b2cd      	uxtb	r5, r1
   81e62:	4603      	mov	r3, r0
   81e64:	e003      	b.n	81e6e <memset+0x1a>
   81e66:	1e62      	subs	r2, r4, #1
   81e68:	2c00      	cmp	r4, #0
   81e6a:	d038      	beq.n	81ede <memset+0x8a>
   81e6c:	4614      	mov	r4, r2
   81e6e:	f803 5b01 	strb.w	r5, [r3], #1
   81e72:	079a      	lsls	r2, r3, #30
   81e74:	d1f7      	bne.n	81e66 <memset+0x12>
   81e76:	2c03      	cmp	r4, #3
   81e78:	d92a      	bls.n	81ed0 <memset+0x7c>
   81e7a:	b2cd      	uxtb	r5, r1
   81e7c:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   81e80:	2c0f      	cmp	r4, #15
   81e82:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   81e86:	d915      	bls.n	81eb4 <memset+0x60>
   81e88:	f1a4 0710 	sub.w	r7, r4, #16
   81e8c:	093f      	lsrs	r7, r7, #4
   81e8e:	f103 0610 	add.w	r6, r3, #16
   81e92:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   81e96:	461a      	mov	r2, r3
   81e98:	6015      	str	r5, [r2, #0]
   81e9a:	6055      	str	r5, [r2, #4]
   81e9c:	6095      	str	r5, [r2, #8]
   81e9e:	60d5      	str	r5, [r2, #12]
   81ea0:	3210      	adds	r2, #16
   81ea2:	42b2      	cmp	r2, r6
   81ea4:	d1f8      	bne.n	81e98 <memset+0x44>
   81ea6:	f004 040f 	and.w	r4, r4, #15
   81eaa:	3701      	adds	r7, #1
   81eac:	2c03      	cmp	r4, #3
   81eae:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   81eb2:	d90d      	bls.n	81ed0 <memset+0x7c>
   81eb4:	461e      	mov	r6, r3
   81eb6:	4622      	mov	r2, r4
   81eb8:	3a04      	subs	r2, #4
   81eba:	2a03      	cmp	r2, #3
   81ebc:	f846 5b04 	str.w	r5, [r6], #4
   81ec0:	d8fa      	bhi.n	81eb8 <memset+0x64>
   81ec2:	1f22      	subs	r2, r4, #4
   81ec4:	f022 0203 	bic.w	r2, r2, #3
   81ec8:	3204      	adds	r2, #4
   81eca:	4413      	add	r3, r2
   81ecc:	f004 0403 	and.w	r4, r4, #3
   81ed0:	b12c      	cbz	r4, 81ede <memset+0x8a>
   81ed2:	b2c9      	uxtb	r1, r1
   81ed4:	441c      	add	r4, r3
   81ed6:	f803 1b01 	strb.w	r1, [r3], #1
   81eda:	42a3      	cmp	r3, r4
   81edc:	d1fb      	bne.n	81ed6 <memset+0x82>
   81ede:	bcf0      	pop	{r4, r5, r6, r7}
   81ee0:	4770      	bx	lr
   81ee2:	4614      	mov	r4, r2
   81ee4:	4603      	mov	r3, r0
   81ee6:	e7c6      	b.n	81e76 <memset+0x22>

00081ee8 <setbuf>:
   81ee8:	2900      	cmp	r1, #0
   81eea:	bf0c      	ite	eq
   81eec:	2202      	moveq	r2, #2
   81eee:	2200      	movne	r2, #0
   81ef0:	f44f 6380 	mov.w	r3, #1024	; 0x400
   81ef4:	f000 b800 	b.w	81ef8 <setvbuf>

00081ef8 <setvbuf>:
   81ef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81efc:	4d3c      	ldr	r5, [pc, #240]	; (81ff0 <setvbuf+0xf8>)
   81efe:	4604      	mov	r4, r0
   81f00:	682d      	ldr	r5, [r5, #0]
   81f02:	4688      	mov	r8, r1
   81f04:	4616      	mov	r6, r2
   81f06:	461f      	mov	r7, r3
   81f08:	b115      	cbz	r5, 81f10 <setvbuf+0x18>
   81f0a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   81f0c:	2b00      	cmp	r3, #0
   81f0e:	d04f      	beq.n	81fb0 <setvbuf+0xb8>
   81f10:	2e02      	cmp	r6, #2
   81f12:	d830      	bhi.n	81f76 <setvbuf+0x7e>
   81f14:	2f00      	cmp	r7, #0
   81f16:	db2e      	blt.n	81f76 <setvbuf+0x7e>
   81f18:	4628      	mov	r0, r5
   81f1a:	4621      	mov	r1, r4
   81f1c:	f001 f826 	bl	82f6c <_fflush_r>
   81f20:	89a3      	ldrh	r3, [r4, #12]
   81f22:	2200      	movs	r2, #0
   81f24:	6062      	str	r2, [r4, #4]
   81f26:	61a2      	str	r2, [r4, #24]
   81f28:	061a      	lsls	r2, r3, #24
   81f2a:	d428      	bmi.n	81f7e <setvbuf+0x86>
   81f2c:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   81f30:	b29b      	uxth	r3, r3
   81f32:	2e02      	cmp	r6, #2
   81f34:	81a3      	strh	r3, [r4, #12]
   81f36:	d02d      	beq.n	81f94 <setvbuf+0x9c>
   81f38:	f1b8 0f00 	cmp.w	r8, #0
   81f3c:	d03c      	beq.n	81fb8 <setvbuf+0xc0>
   81f3e:	2e01      	cmp	r6, #1
   81f40:	d013      	beq.n	81f6a <setvbuf+0x72>
   81f42:	b29b      	uxth	r3, r3
   81f44:	f003 0008 	and.w	r0, r3, #8
   81f48:	4a2a      	ldr	r2, [pc, #168]	; (81ff4 <setvbuf+0xfc>)
   81f4a:	b280      	uxth	r0, r0
   81f4c:	63ea      	str	r2, [r5, #60]	; 0x3c
   81f4e:	f8c4 8000 	str.w	r8, [r4]
   81f52:	f8c4 8010 	str.w	r8, [r4, #16]
   81f56:	6167      	str	r7, [r4, #20]
   81f58:	b178      	cbz	r0, 81f7a <setvbuf+0x82>
   81f5a:	f013 0f03 	tst.w	r3, #3
   81f5e:	bf18      	it	ne
   81f60:	2700      	movne	r7, #0
   81f62:	60a7      	str	r7, [r4, #8]
   81f64:	2000      	movs	r0, #0
   81f66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81f6a:	f043 0301 	orr.w	r3, r3, #1
   81f6e:	427a      	negs	r2, r7
   81f70:	81a3      	strh	r3, [r4, #12]
   81f72:	61a2      	str	r2, [r4, #24]
   81f74:	e7e5      	b.n	81f42 <setvbuf+0x4a>
   81f76:	f04f 30ff 	mov.w	r0, #4294967295
   81f7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81f7e:	4628      	mov	r0, r5
   81f80:	6921      	ldr	r1, [r4, #16]
   81f82:	f001 f953 	bl	8322c <_free_r>
   81f86:	89a3      	ldrh	r3, [r4, #12]
   81f88:	2e02      	cmp	r6, #2
   81f8a:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   81f8e:	b29b      	uxth	r3, r3
   81f90:	81a3      	strh	r3, [r4, #12]
   81f92:	d1d1      	bne.n	81f38 <setvbuf+0x40>
   81f94:	2000      	movs	r0, #0
   81f96:	f104 0243 	add.w	r2, r4, #67	; 0x43
   81f9a:	f043 0302 	orr.w	r3, r3, #2
   81f9e:	2500      	movs	r5, #0
   81fa0:	2101      	movs	r1, #1
   81fa2:	81a3      	strh	r3, [r4, #12]
   81fa4:	60a5      	str	r5, [r4, #8]
   81fa6:	6022      	str	r2, [r4, #0]
   81fa8:	6122      	str	r2, [r4, #16]
   81faa:	6161      	str	r1, [r4, #20]
   81fac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81fb0:	4628      	mov	r0, r5
   81fb2:	f000 fff7 	bl	82fa4 <__sinit>
   81fb6:	e7ab      	b.n	81f10 <setvbuf+0x18>
   81fb8:	2f00      	cmp	r7, #0
   81fba:	bf08      	it	eq
   81fbc:	f44f 6780 	moveq.w	r7, #1024	; 0x400
   81fc0:	4638      	mov	r0, r7
   81fc2:	f001 fc29 	bl	83818 <malloc>
   81fc6:	4680      	mov	r8, r0
   81fc8:	b128      	cbz	r0, 81fd6 <setvbuf+0xde>
   81fca:	89a3      	ldrh	r3, [r4, #12]
   81fcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   81fd0:	b29b      	uxth	r3, r3
   81fd2:	81a3      	strh	r3, [r4, #12]
   81fd4:	e7b3      	b.n	81f3e <setvbuf+0x46>
   81fd6:	f44f 6080 	mov.w	r0, #1024	; 0x400
   81fda:	f001 fc1d 	bl	83818 <malloc>
   81fde:	4680      	mov	r8, r0
   81fe0:	b918      	cbnz	r0, 81fea <setvbuf+0xf2>
   81fe2:	89a3      	ldrh	r3, [r4, #12]
   81fe4:	f04f 30ff 	mov.w	r0, #4294967295
   81fe8:	e7d5      	b.n	81f96 <setvbuf+0x9e>
   81fea:	f44f 6780 	mov.w	r7, #1024	; 0x400
   81fee:	e7ec      	b.n	81fca <setvbuf+0xd2>
   81ff0:	20070568 	.word	0x20070568
   81ff4:	00082f99 	.word	0x00082f99

00081ff8 <__sprint_r.part.0>:
   81ff8:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   81ffa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   81ffe:	049c      	lsls	r4, r3, #18
   82000:	460e      	mov	r6, r1
   82002:	4680      	mov	r8, r0
   82004:	4691      	mov	r9, r2
   82006:	d52a      	bpl.n	8205e <__sprint_r.part.0+0x66>
   82008:	6893      	ldr	r3, [r2, #8]
   8200a:	6812      	ldr	r2, [r2, #0]
   8200c:	f102 0a08 	add.w	sl, r2, #8
   82010:	b31b      	cbz	r3, 8205a <__sprint_r.part.0+0x62>
   82012:	e91a 00a0 	ldmdb	sl, {r5, r7}
   82016:	08bf      	lsrs	r7, r7, #2
   82018:	d017      	beq.n	8204a <__sprint_r.part.0+0x52>
   8201a:	3d04      	subs	r5, #4
   8201c:	2400      	movs	r4, #0
   8201e:	e001      	b.n	82024 <__sprint_r.part.0+0x2c>
   82020:	42a7      	cmp	r7, r4
   82022:	d010      	beq.n	82046 <__sprint_r.part.0+0x4e>
   82024:	4640      	mov	r0, r8
   82026:	f855 1f04 	ldr.w	r1, [r5, #4]!
   8202a:	4632      	mov	r2, r6
   8202c:	f001 f850 	bl	830d0 <_fputwc_r>
   82030:	1c43      	adds	r3, r0, #1
   82032:	f104 0401 	add.w	r4, r4, #1
   82036:	d1f3      	bne.n	82020 <__sprint_r.part.0+0x28>
   82038:	2300      	movs	r3, #0
   8203a:	f8c9 3008 	str.w	r3, [r9, #8]
   8203e:	f8c9 3004 	str.w	r3, [r9, #4]
   82042:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   82046:	f8d9 3008 	ldr.w	r3, [r9, #8]
   8204a:	eba3 0387 	sub.w	r3, r3, r7, lsl #2
   8204e:	f8c9 3008 	str.w	r3, [r9, #8]
   82052:	f10a 0a08 	add.w	sl, sl, #8
   82056:	2b00      	cmp	r3, #0
   82058:	d1db      	bne.n	82012 <__sprint_r.part.0+0x1a>
   8205a:	2000      	movs	r0, #0
   8205c:	e7ec      	b.n	82038 <__sprint_r.part.0+0x40>
   8205e:	f001 f9b1 	bl	833c4 <__sfvwrite_r>
   82062:	2300      	movs	r3, #0
   82064:	f8c9 3008 	str.w	r3, [r9, #8]
   82068:	f8c9 3004 	str.w	r3, [r9, #4]
   8206c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00082070 <_vfiprintf_r>:
   82070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82074:	b0b1      	sub	sp, #196	; 0xc4
   82076:	461c      	mov	r4, r3
   82078:	9102      	str	r1, [sp, #8]
   8207a:	4690      	mov	r8, r2
   8207c:	9308      	str	r3, [sp, #32]
   8207e:	9006      	str	r0, [sp, #24]
   82080:	b118      	cbz	r0, 8208a <_vfiprintf_r+0x1a>
   82082:	6b83      	ldr	r3, [r0, #56]	; 0x38
   82084:	2b00      	cmp	r3, #0
   82086:	f000 80e8 	beq.w	8225a <_vfiprintf_r+0x1ea>
   8208a:	9d02      	ldr	r5, [sp, #8]
   8208c:	89ab      	ldrh	r3, [r5, #12]
   8208e:	b29a      	uxth	r2, r3
   82090:	0490      	lsls	r0, r2, #18
   82092:	d407      	bmi.n	820a4 <_vfiprintf_r+0x34>
   82094:	6e6a      	ldr	r2, [r5, #100]	; 0x64
   82096:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   8209a:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
   8209e:	81ab      	strh	r3, [r5, #12]
   820a0:	b29a      	uxth	r2, r3
   820a2:	6669      	str	r1, [r5, #100]	; 0x64
   820a4:	0711      	lsls	r1, r2, #28
   820a6:	f140 80b7 	bpl.w	82218 <_vfiprintf_r+0x1a8>
   820aa:	f8dd b008 	ldr.w	fp, [sp, #8]
   820ae:	f8db 3010 	ldr.w	r3, [fp, #16]
   820b2:	2b00      	cmp	r3, #0
   820b4:	f000 80b0 	beq.w	82218 <_vfiprintf_r+0x1a8>
   820b8:	f002 021a 	and.w	r2, r2, #26
   820bc:	2a0a      	cmp	r2, #10
   820be:	f000 80b7 	beq.w	82230 <_vfiprintf_r+0x1c0>
   820c2:	2300      	movs	r3, #0
   820c4:	f10d 0980 	add.w	r9, sp, #128	; 0x80
   820c8:	930a      	str	r3, [sp, #40]	; 0x28
   820ca:	9315      	str	r3, [sp, #84]	; 0x54
   820cc:	9314      	str	r3, [sp, #80]	; 0x50
   820ce:	9309      	str	r3, [sp, #36]	; 0x24
   820d0:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
   820d4:	464e      	mov	r6, r9
   820d6:	f898 3000 	ldrb.w	r3, [r8]
   820da:	2b00      	cmp	r3, #0
   820dc:	f000 84c8 	beq.w	82a70 <_vfiprintf_r+0xa00>
   820e0:	2b25      	cmp	r3, #37	; 0x25
   820e2:	f000 84c5 	beq.w	82a70 <_vfiprintf_r+0xa00>
   820e6:	f108 0201 	add.w	r2, r8, #1
   820ea:	e001      	b.n	820f0 <_vfiprintf_r+0x80>
   820ec:	2b25      	cmp	r3, #37	; 0x25
   820ee:	d004      	beq.n	820fa <_vfiprintf_r+0x8a>
   820f0:	7813      	ldrb	r3, [r2, #0]
   820f2:	4614      	mov	r4, r2
   820f4:	3201      	adds	r2, #1
   820f6:	2b00      	cmp	r3, #0
   820f8:	d1f8      	bne.n	820ec <_vfiprintf_r+0x7c>
   820fa:	ebc8 0504 	rsb	r5, r8, r4
   820fe:	b195      	cbz	r5, 82126 <_vfiprintf_r+0xb6>
   82100:	9b14      	ldr	r3, [sp, #80]	; 0x50
   82102:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82104:	3301      	adds	r3, #1
   82106:	442a      	add	r2, r5
   82108:	2b07      	cmp	r3, #7
   8210a:	f8c6 8000 	str.w	r8, [r6]
   8210e:	6075      	str	r5, [r6, #4]
   82110:	9215      	str	r2, [sp, #84]	; 0x54
   82112:	9314      	str	r3, [sp, #80]	; 0x50
   82114:	dd7b      	ble.n	8220e <_vfiprintf_r+0x19e>
   82116:	2a00      	cmp	r2, #0
   82118:	f040 84d5 	bne.w	82ac6 <_vfiprintf_r+0xa56>
   8211c:	9809      	ldr	r0, [sp, #36]	; 0x24
   8211e:	9214      	str	r2, [sp, #80]	; 0x50
   82120:	4428      	add	r0, r5
   82122:	464e      	mov	r6, r9
   82124:	9009      	str	r0, [sp, #36]	; 0x24
   82126:	7823      	ldrb	r3, [r4, #0]
   82128:	2b00      	cmp	r3, #0
   8212a:	f000 83ed 	beq.w	82908 <_vfiprintf_r+0x898>
   8212e:	2100      	movs	r1, #0
   82130:	f04f 0200 	mov.w	r2, #0
   82134:	f04f 3cff 	mov.w	ip, #4294967295
   82138:	7863      	ldrb	r3, [r4, #1]
   8213a:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
   8213e:	9104      	str	r1, [sp, #16]
   82140:	468a      	mov	sl, r1
   82142:	f104 0801 	add.w	r8, r4, #1
   82146:	4608      	mov	r0, r1
   82148:	4665      	mov	r5, ip
   8214a:	f108 0801 	add.w	r8, r8, #1
   8214e:	f1a3 0220 	sub.w	r2, r3, #32
   82152:	2a58      	cmp	r2, #88	; 0x58
   82154:	f200 82d9 	bhi.w	8270a <_vfiprintf_r+0x69a>
   82158:	e8df f012 	tbh	[pc, r2, lsl #1]
   8215c:	02d702cb 	.word	0x02d702cb
   82160:	02d202d7 	.word	0x02d202d7
   82164:	02d702d7 	.word	0x02d702d7
   82168:	02d702d7 	.word	0x02d702d7
   8216c:	02d702d7 	.word	0x02d702d7
   82170:	028f0282 	.word	0x028f0282
   82174:	008402d7 	.word	0x008402d7
   82178:	02d70293 	.word	0x02d70293
   8217c:	0196012b 	.word	0x0196012b
   82180:	01960196 	.word	0x01960196
   82184:	01960196 	.word	0x01960196
   82188:	01960196 	.word	0x01960196
   8218c:	01960196 	.word	0x01960196
   82190:	02d702d7 	.word	0x02d702d7
   82194:	02d702d7 	.word	0x02d702d7
   82198:	02d702d7 	.word	0x02d702d7
   8219c:	02d702d7 	.word	0x02d702d7
   821a0:	02d702d7 	.word	0x02d702d7
   821a4:	02d70130 	.word	0x02d70130
   821a8:	02d702d7 	.word	0x02d702d7
   821ac:	02d702d7 	.word	0x02d702d7
   821b0:	02d702d7 	.word	0x02d702d7
   821b4:	02d702d7 	.word	0x02d702d7
   821b8:	017b02d7 	.word	0x017b02d7
   821bc:	02d702d7 	.word	0x02d702d7
   821c0:	02d702d7 	.word	0x02d702d7
   821c4:	01a402d7 	.word	0x01a402d7
   821c8:	02d702d7 	.word	0x02d702d7
   821cc:	02d701bf 	.word	0x02d701bf
   821d0:	02d702d7 	.word	0x02d702d7
   821d4:	02d702d7 	.word	0x02d702d7
   821d8:	02d702d7 	.word	0x02d702d7
   821dc:	02d702d7 	.word	0x02d702d7
   821e0:	01e402d7 	.word	0x01e402d7
   821e4:	02d701fa 	.word	0x02d701fa
   821e8:	02d702d7 	.word	0x02d702d7
   821ec:	01fa0216 	.word	0x01fa0216
   821f0:	02d702d7 	.word	0x02d702d7
   821f4:	02d7021b 	.word	0x02d7021b
   821f8:	00890228 	.word	0x00890228
   821fc:	027d0266 	.word	0x027d0266
   82200:	023a02d7 	.word	0x023a02d7
   82204:	011902d7 	.word	0x011902d7
   82208:	02d702d7 	.word	0x02d702d7
   8220c:	02af      	.short	0x02af
   8220e:	3608      	adds	r6, #8
   82210:	9809      	ldr	r0, [sp, #36]	; 0x24
   82212:	4428      	add	r0, r5
   82214:	9009      	str	r0, [sp, #36]	; 0x24
   82216:	e786      	b.n	82126 <_vfiprintf_r+0xb6>
   82218:	9806      	ldr	r0, [sp, #24]
   8221a:	9902      	ldr	r1, [sp, #8]
   8221c:	f000 fd90 	bl	82d40 <__swsetup_r>
   82220:	b9b0      	cbnz	r0, 82250 <_vfiprintf_r+0x1e0>
   82222:	9d02      	ldr	r5, [sp, #8]
   82224:	89aa      	ldrh	r2, [r5, #12]
   82226:	f002 021a 	and.w	r2, r2, #26
   8222a:	2a0a      	cmp	r2, #10
   8222c:	f47f af49 	bne.w	820c2 <_vfiprintf_r+0x52>
   82230:	f8dd b008 	ldr.w	fp, [sp, #8]
   82234:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
   82238:	2b00      	cmp	r3, #0
   8223a:	f6ff af42 	blt.w	820c2 <_vfiprintf_r+0x52>
   8223e:	9806      	ldr	r0, [sp, #24]
   82240:	4659      	mov	r1, fp
   82242:	4642      	mov	r2, r8
   82244:	4623      	mov	r3, r4
   82246:	f000 fd3d 	bl	82cc4 <__sbprintf>
   8224a:	b031      	add	sp, #196	; 0xc4
   8224c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82250:	f04f 30ff 	mov.w	r0, #4294967295
   82254:	b031      	add	sp, #196	; 0xc4
   82256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8225a:	f000 fea3 	bl	82fa4 <__sinit>
   8225e:	e714      	b.n	8208a <_vfiprintf_r+0x1a>
   82260:	4240      	negs	r0, r0
   82262:	9308      	str	r3, [sp, #32]
   82264:	f04a 0a04 	orr.w	sl, sl, #4
   82268:	f898 3000 	ldrb.w	r3, [r8]
   8226c:	e76d      	b.n	8214a <_vfiprintf_r+0xda>
   8226e:	f01a 0320 	ands.w	r3, sl, #32
   82272:	9004      	str	r0, [sp, #16]
   82274:	46ac      	mov	ip, r5
   82276:	f000 80f4 	beq.w	82462 <_vfiprintf_r+0x3f2>
   8227a:	f8dd b020 	ldr.w	fp, [sp, #32]
   8227e:	f10b 0307 	add.w	r3, fp, #7
   82282:	f023 0307 	bic.w	r3, r3, #7
   82286:	f103 0408 	add.w	r4, r3, #8
   8228a:	9408      	str	r4, [sp, #32]
   8228c:	e9d3 4500 	ldrd	r4, r5, [r3]
   82290:	2300      	movs	r3, #0
   82292:	f04f 0000 	mov.w	r0, #0
   82296:	2100      	movs	r1, #0
   82298:	f88d 0047 	strb.w	r0, [sp, #71]	; 0x47
   8229c:	f8cd c014 	str.w	ip, [sp, #20]
   822a0:	9107      	str	r1, [sp, #28]
   822a2:	f1bc 0f00 	cmp.w	ip, #0
   822a6:	bfa8      	it	ge
   822a8:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
   822ac:	ea54 0205 	orrs.w	r2, r4, r5
   822b0:	f040 80ad 	bne.w	8240e <_vfiprintf_r+0x39e>
   822b4:	f1bc 0f00 	cmp.w	ip, #0
   822b8:	f040 80a9 	bne.w	8240e <_vfiprintf_r+0x39e>
   822bc:	2b00      	cmp	r3, #0
   822be:	f040 83c0 	bne.w	82a42 <_vfiprintf_r+0x9d2>
   822c2:	f01a 0f01 	tst.w	sl, #1
   822c6:	f000 83bc 	beq.w	82a42 <_vfiprintf_r+0x9d2>
   822ca:	2330      	movs	r3, #48	; 0x30
   822cc:	af30      	add	r7, sp, #192	; 0xc0
   822ce:	f807 3d41 	strb.w	r3, [r7, #-65]!
   822d2:	ebc7 0409 	rsb	r4, r7, r9
   822d6:	9405      	str	r4, [sp, #20]
   822d8:	f8dd b014 	ldr.w	fp, [sp, #20]
   822dc:	9c07      	ldr	r4, [sp, #28]
   822de:	45e3      	cmp	fp, ip
   822e0:	bfb8      	it	lt
   822e2:	46e3      	movlt	fp, ip
   822e4:	f8cd b00c 	str.w	fp, [sp, #12]
   822e8:	b11c      	cbz	r4, 822f2 <_vfiprintf_r+0x282>
   822ea:	f10b 0b01 	add.w	fp, fp, #1
   822ee:	f8cd b00c 	str.w	fp, [sp, #12]
   822f2:	f01a 0502 	ands.w	r5, sl, #2
   822f6:	9507      	str	r5, [sp, #28]
   822f8:	d005      	beq.n	82306 <_vfiprintf_r+0x296>
   822fa:	f8dd b00c 	ldr.w	fp, [sp, #12]
   822fe:	f10b 0b02 	add.w	fp, fp, #2
   82302:	f8cd b00c 	str.w	fp, [sp, #12]
   82306:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
   8230a:	930b      	str	r3, [sp, #44]	; 0x2c
   8230c:	f040 821b 	bne.w	82746 <_vfiprintf_r+0x6d6>
   82310:	9d04      	ldr	r5, [sp, #16]
   82312:	f8dd b00c 	ldr.w	fp, [sp, #12]
   82316:	ebcb 0405 	rsb	r4, fp, r5
   8231a:	2c00      	cmp	r4, #0
   8231c:	f340 8213 	ble.w	82746 <_vfiprintf_r+0x6d6>
   82320:	2c10      	cmp	r4, #16
   82322:	f340 8489 	ble.w	82c38 <_vfiprintf_r+0xbc8>
   82326:	4dbe      	ldr	r5, [pc, #760]	; (82620 <_vfiprintf_r+0x5b0>)
   82328:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8232a:	462b      	mov	r3, r5
   8232c:	9814      	ldr	r0, [sp, #80]	; 0x50
   8232e:	4625      	mov	r5, r4
   82330:	f04f 0b10 	mov.w	fp, #16
   82334:	4664      	mov	r4, ip
   82336:	46b4      	mov	ip, r6
   82338:	461e      	mov	r6, r3
   8233a:	e006      	b.n	8234a <_vfiprintf_r+0x2da>
   8233c:	1c83      	adds	r3, r0, #2
   8233e:	f10c 0c08 	add.w	ip, ip, #8
   82342:	4608      	mov	r0, r1
   82344:	3d10      	subs	r5, #16
   82346:	2d10      	cmp	r5, #16
   82348:	dd11      	ble.n	8236e <_vfiprintf_r+0x2fe>
   8234a:	1c41      	adds	r1, r0, #1
   8234c:	3210      	adds	r2, #16
   8234e:	2907      	cmp	r1, #7
   82350:	9215      	str	r2, [sp, #84]	; 0x54
   82352:	e88c 0840 	stmia.w	ip, {r6, fp}
   82356:	9114      	str	r1, [sp, #80]	; 0x50
   82358:	ddf0      	ble.n	8233c <_vfiprintf_r+0x2cc>
   8235a:	2a00      	cmp	r2, #0
   8235c:	f040 81e6 	bne.w	8272c <_vfiprintf_r+0x6bc>
   82360:	3d10      	subs	r5, #16
   82362:	2d10      	cmp	r5, #16
   82364:	f04f 0301 	mov.w	r3, #1
   82368:	4610      	mov	r0, r2
   8236a:	46cc      	mov	ip, r9
   8236c:	dced      	bgt.n	8234a <_vfiprintf_r+0x2da>
   8236e:	4631      	mov	r1, r6
   82370:	4666      	mov	r6, ip
   82372:	46a4      	mov	ip, r4
   82374:	462c      	mov	r4, r5
   82376:	460d      	mov	r5, r1
   82378:	4422      	add	r2, r4
   8237a:	2b07      	cmp	r3, #7
   8237c:	9215      	str	r2, [sp, #84]	; 0x54
   8237e:	6035      	str	r5, [r6, #0]
   82380:	6074      	str	r4, [r6, #4]
   82382:	9314      	str	r3, [sp, #80]	; 0x50
   82384:	f300 836d 	bgt.w	82a62 <_vfiprintf_r+0x9f2>
   82388:	3608      	adds	r6, #8
   8238a:	1c59      	adds	r1, r3, #1
   8238c:	e1de      	b.n	8274c <_vfiprintf_r+0x6dc>
   8238e:	f01a 0f20 	tst.w	sl, #32
   82392:	9004      	str	r0, [sp, #16]
   82394:	46ac      	mov	ip, r5
   82396:	f000 808d 	beq.w	824b4 <_vfiprintf_r+0x444>
   8239a:	9d08      	ldr	r5, [sp, #32]
   8239c:	1deb      	adds	r3, r5, #7
   8239e:	f023 0307 	bic.w	r3, r3, #7
   823a2:	f103 0b08 	add.w	fp, r3, #8
   823a6:	e9d3 4500 	ldrd	r4, r5, [r3]
   823aa:	f8cd b020 	str.w	fp, [sp, #32]
   823ae:	2301      	movs	r3, #1
   823b0:	e76f      	b.n	82292 <_vfiprintf_r+0x222>
   823b2:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
   823b6:	f898 3000 	ldrb.w	r3, [r8]
   823ba:	e6c6      	b.n	8214a <_vfiprintf_r+0xda>
   823bc:	f04a 0a10 	orr.w	sl, sl, #16
   823c0:	f01a 0f20 	tst.w	sl, #32
   823c4:	9004      	str	r0, [sp, #16]
   823c6:	46ac      	mov	ip, r5
   823c8:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   823cc:	f000 80c8 	beq.w	82560 <_vfiprintf_r+0x4f0>
   823d0:	9c08      	ldr	r4, [sp, #32]
   823d2:	1de1      	adds	r1, r4, #7
   823d4:	f021 0107 	bic.w	r1, r1, #7
   823d8:	e9d1 2300 	ldrd	r2, r3, [r1]
   823dc:	3108      	adds	r1, #8
   823de:	9108      	str	r1, [sp, #32]
   823e0:	4614      	mov	r4, r2
   823e2:	461d      	mov	r5, r3
   823e4:	2a00      	cmp	r2, #0
   823e6:	f173 0b00 	sbcs.w	fp, r3, #0
   823ea:	f2c0 83ce 	blt.w	82b8a <_vfiprintf_r+0xb1a>
   823ee:	f1bc 0f00 	cmp.w	ip, #0
   823f2:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
   823f6:	bfa8      	it	ge
   823f8:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
   823fc:	ea54 0205 	orrs.w	r2, r4, r5
   82400:	9007      	str	r0, [sp, #28]
   82402:	f8cd c014 	str.w	ip, [sp, #20]
   82406:	f04f 0301 	mov.w	r3, #1
   8240a:	f43f af53 	beq.w	822b4 <_vfiprintf_r+0x244>
   8240e:	2b01      	cmp	r3, #1
   82410:	f000 8319 	beq.w	82a46 <_vfiprintf_r+0x9d6>
   82414:	2b02      	cmp	r3, #2
   82416:	f10d 037f 	add.w	r3, sp, #127	; 0x7f
   8241a:	f040 824c 	bne.w	828b6 <_vfiprintf_r+0x846>
   8241e:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   82422:	4619      	mov	r1, r3
   82424:	f004 000f 	and.w	r0, r4, #15
   82428:	0922      	lsrs	r2, r4, #4
   8242a:	f81b 0000 	ldrb.w	r0, [fp, r0]
   8242e:	ea42 7205 	orr.w	r2, r2, r5, lsl #28
   82432:	092b      	lsrs	r3, r5, #4
   82434:	7008      	strb	r0, [r1, #0]
   82436:	ea52 0003 	orrs.w	r0, r2, r3
   8243a:	460f      	mov	r7, r1
   8243c:	4614      	mov	r4, r2
   8243e:	461d      	mov	r5, r3
   82440:	f101 31ff 	add.w	r1, r1, #4294967295
   82444:	d1ee      	bne.n	82424 <_vfiprintf_r+0x3b4>
   82446:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   8244a:	ebc7 0309 	rsb	r3, r7, r9
   8244e:	9305      	str	r3, [sp, #20]
   82450:	e742      	b.n	822d8 <_vfiprintf_r+0x268>
   82452:	f04a 0a10 	orr.w	sl, sl, #16
   82456:	f01a 0320 	ands.w	r3, sl, #32
   8245a:	9004      	str	r0, [sp, #16]
   8245c:	46ac      	mov	ip, r5
   8245e:	f47f af0c 	bne.w	8227a <_vfiprintf_r+0x20a>
   82462:	f01a 0210 	ands.w	r2, sl, #16
   82466:	f040 8311 	bne.w	82a8c <_vfiprintf_r+0xa1c>
   8246a:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
   8246e:	f000 830d 	beq.w	82a8c <_vfiprintf_r+0xa1c>
   82472:	f8dd b020 	ldr.w	fp, [sp, #32]
   82476:	4613      	mov	r3, r2
   82478:	f8bb 4000 	ldrh.w	r4, [fp]
   8247c:	f10b 0b04 	add.w	fp, fp, #4
   82480:	2500      	movs	r5, #0
   82482:	f8cd b020 	str.w	fp, [sp, #32]
   82486:	e704      	b.n	82292 <_vfiprintf_r+0x222>
   82488:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   8248c:	2000      	movs	r0, #0
   8248e:	f818 3b01 	ldrb.w	r3, [r8], #1
   82492:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   82496:	eb02 0040 	add.w	r0, r2, r0, lsl #1
   8249a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   8249e:	2a09      	cmp	r2, #9
   824a0:	d9f5      	bls.n	8248e <_vfiprintf_r+0x41e>
   824a2:	e654      	b.n	8214e <_vfiprintf_r+0xde>
   824a4:	f04a 0a10 	orr.w	sl, sl, #16
   824a8:	f01a 0f20 	tst.w	sl, #32
   824ac:	9004      	str	r0, [sp, #16]
   824ae:	46ac      	mov	ip, r5
   824b0:	f47f af73 	bne.w	8239a <_vfiprintf_r+0x32a>
   824b4:	f01a 0f10 	tst.w	sl, #16
   824b8:	f040 82ef 	bne.w	82a9a <_vfiprintf_r+0xa2a>
   824bc:	f01a 0f40 	tst.w	sl, #64	; 0x40
   824c0:	f000 82eb 	beq.w	82a9a <_vfiprintf_r+0xa2a>
   824c4:	f8dd b020 	ldr.w	fp, [sp, #32]
   824c8:	2500      	movs	r5, #0
   824ca:	f8bb 4000 	ldrh.w	r4, [fp]
   824ce:	f10b 0b04 	add.w	fp, fp, #4
   824d2:	2301      	movs	r3, #1
   824d4:	f8cd b020 	str.w	fp, [sp, #32]
   824d8:	e6db      	b.n	82292 <_vfiprintf_r+0x222>
   824da:	46ac      	mov	ip, r5
   824dc:	4d51      	ldr	r5, [pc, #324]	; (82624 <_vfiprintf_r+0x5b4>)
   824de:	f01a 0f20 	tst.w	sl, #32
   824e2:	9004      	str	r0, [sp, #16]
   824e4:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   824e8:	950a      	str	r5, [sp, #40]	; 0x28
   824ea:	f000 80f0 	beq.w	826ce <_vfiprintf_r+0x65e>
   824ee:	9d08      	ldr	r5, [sp, #32]
   824f0:	1dea      	adds	r2, r5, #7
   824f2:	f022 0207 	bic.w	r2, r2, #7
   824f6:	f102 0b08 	add.w	fp, r2, #8
   824fa:	f8cd b020 	str.w	fp, [sp, #32]
   824fe:	e9d2 4500 	ldrd	r4, r5, [r2]
   82502:	f01a 0f01 	tst.w	sl, #1
   82506:	f000 82aa 	beq.w	82a5e <_vfiprintf_r+0x9ee>
   8250a:	ea54 0b05 	orrs.w	fp, r4, r5
   8250e:	f000 82a6 	beq.w	82a5e <_vfiprintf_r+0x9ee>
   82512:	2230      	movs	r2, #48	; 0x30
   82514:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
   82518:	f04a 0a02 	orr.w	sl, sl, #2
   8251c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   82520:	2302      	movs	r3, #2
   82522:	e6b6      	b.n	82292 <_vfiprintf_r+0x222>
   82524:	9b08      	ldr	r3, [sp, #32]
   82526:	f8dd b020 	ldr.w	fp, [sp, #32]
   8252a:	681b      	ldr	r3, [r3, #0]
   8252c:	2401      	movs	r4, #1
   8252e:	f04f 0500 	mov.w	r5, #0
   82532:	f10b 0b04 	add.w	fp, fp, #4
   82536:	9004      	str	r0, [sp, #16]
   82538:	9403      	str	r4, [sp, #12]
   8253a:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
   8253e:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   82542:	f8cd b020 	str.w	fp, [sp, #32]
   82546:	9405      	str	r4, [sp, #20]
   82548:	af16      	add	r7, sp, #88	; 0x58
   8254a:	f04f 0c00 	mov.w	ip, #0
   8254e:	e6d0      	b.n	822f2 <_vfiprintf_r+0x282>
   82550:	f01a 0f20 	tst.w	sl, #32
   82554:	9004      	str	r0, [sp, #16]
   82556:	46ac      	mov	ip, r5
   82558:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   8255c:	f47f af38 	bne.w	823d0 <_vfiprintf_r+0x360>
   82560:	f01a 0f10 	tst.w	sl, #16
   82564:	f040 82a7 	bne.w	82ab6 <_vfiprintf_r+0xa46>
   82568:	f01a 0f40 	tst.w	sl, #64	; 0x40
   8256c:	f000 82a3 	beq.w	82ab6 <_vfiprintf_r+0xa46>
   82570:	f8dd b020 	ldr.w	fp, [sp, #32]
   82574:	f9bb 4000 	ldrsh.w	r4, [fp]
   82578:	f10b 0b04 	add.w	fp, fp, #4
   8257c:	17e5      	asrs	r5, r4, #31
   8257e:	4622      	mov	r2, r4
   82580:	462b      	mov	r3, r5
   82582:	f8cd b020 	str.w	fp, [sp, #32]
   82586:	e72d      	b.n	823e4 <_vfiprintf_r+0x374>
   82588:	f04a 0a40 	orr.w	sl, sl, #64	; 0x40
   8258c:	f898 3000 	ldrb.w	r3, [r8]
   82590:	e5db      	b.n	8214a <_vfiprintf_r+0xda>
   82592:	f898 3000 	ldrb.w	r3, [r8]
   82596:	4642      	mov	r2, r8
   82598:	2b6c      	cmp	r3, #108	; 0x6c
   8259a:	bf03      	ittte	eq
   8259c:	f108 0801 	addeq.w	r8, r8, #1
   825a0:	f04a 0a20 	orreq.w	sl, sl, #32
   825a4:	7853      	ldrbeq	r3, [r2, #1]
   825a6:	f04a 0a10 	orrne.w	sl, sl, #16
   825aa:	e5ce      	b.n	8214a <_vfiprintf_r+0xda>
   825ac:	f01a 0f20 	tst.w	sl, #32
   825b0:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   825b4:	f000 82f7 	beq.w	82ba6 <_vfiprintf_r+0xb36>
   825b8:	9c08      	ldr	r4, [sp, #32]
   825ba:	6821      	ldr	r1, [r4, #0]
   825bc:	9c09      	ldr	r4, [sp, #36]	; 0x24
   825be:	17e5      	asrs	r5, r4, #31
   825c0:	462b      	mov	r3, r5
   825c2:	9d08      	ldr	r5, [sp, #32]
   825c4:	4622      	mov	r2, r4
   825c6:	3504      	adds	r5, #4
   825c8:	9508      	str	r5, [sp, #32]
   825ca:	e9c1 2300 	strd	r2, r3, [r1]
   825ce:	e582      	b.n	820d6 <_vfiprintf_r+0x66>
   825d0:	9c08      	ldr	r4, [sp, #32]
   825d2:	46ac      	mov	ip, r5
   825d4:	6827      	ldr	r7, [r4, #0]
   825d6:	f04f 0500 	mov.w	r5, #0
   825da:	9004      	str	r0, [sp, #16]
   825dc:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
   825e0:	3404      	adds	r4, #4
   825e2:	2f00      	cmp	r7, #0
   825e4:	f000 8332 	beq.w	82c4c <_vfiprintf_r+0xbdc>
   825e8:	f1bc 0f00 	cmp.w	ip, #0
   825ec:	4638      	mov	r0, r7
   825ee:	f2c0 8307 	blt.w	82c00 <_vfiprintf_r+0xb90>
   825f2:	4662      	mov	r2, ip
   825f4:	2100      	movs	r1, #0
   825f6:	f8cd c004 	str.w	ip, [sp, #4]
   825fa:	f001 fbb1 	bl	83d60 <memchr>
   825fe:	f8dd c004 	ldr.w	ip, [sp, #4]
   82602:	2800      	cmp	r0, #0
   82604:	f000 833a 	beq.w	82c7c <_vfiprintf_r+0xc0c>
   82608:	1bc0      	subs	r0, r0, r7
   8260a:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
   8260e:	4560      	cmp	r0, ip
   82610:	bfa8      	it	ge
   82612:	4660      	movge	r0, ip
   82614:	9005      	str	r0, [sp, #20]
   82616:	9408      	str	r4, [sp, #32]
   82618:	9507      	str	r5, [sp, #28]
   8261a:	f04f 0c00 	mov.w	ip, #0
   8261e:	e65b      	b.n	822d8 <_vfiprintf_r+0x268>
   82620:	00084818 	.word	0x00084818
   82624:	000847d8 	.word	0x000847d8
   82628:	9b08      	ldr	r3, [sp, #32]
   8262a:	f8dd b020 	ldr.w	fp, [sp, #32]
   8262e:	9004      	str	r0, [sp, #16]
   82630:	48b2      	ldr	r0, [pc, #712]	; (828fc <_vfiprintf_r+0x88c>)
   82632:	681c      	ldr	r4, [r3, #0]
   82634:	2230      	movs	r2, #48	; 0x30
   82636:	2378      	movs	r3, #120	; 0x78
   82638:	f10b 0b04 	add.w	fp, fp, #4
   8263c:	46ac      	mov	ip, r5
   8263e:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
   82642:	f04a 0a02 	orr.w	sl, sl, #2
   82646:	f8cd b020 	str.w	fp, [sp, #32]
   8264a:	2500      	movs	r5, #0
   8264c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   82650:	900a      	str	r0, [sp, #40]	; 0x28
   82652:	2302      	movs	r3, #2
   82654:	e61d      	b.n	82292 <_vfiprintf_r+0x222>
   82656:	f04a 0a20 	orr.w	sl, sl, #32
   8265a:	f898 3000 	ldrb.w	r3, [r8]
   8265e:	e574      	b.n	8214a <_vfiprintf_r+0xda>
   82660:	f8dd b020 	ldr.w	fp, [sp, #32]
   82664:	f8db 0000 	ldr.w	r0, [fp]
   82668:	f10b 0304 	add.w	r3, fp, #4
   8266c:	2800      	cmp	r0, #0
   8266e:	f6ff adf7 	blt.w	82260 <_vfiprintf_r+0x1f0>
   82672:	9308      	str	r3, [sp, #32]
   82674:	f898 3000 	ldrb.w	r3, [r8]
   82678:	e567      	b.n	8214a <_vfiprintf_r+0xda>
   8267a:	f898 3000 	ldrb.w	r3, [r8]
   8267e:	212b      	movs	r1, #43	; 0x2b
   82680:	e563      	b.n	8214a <_vfiprintf_r+0xda>
   82682:	f898 3000 	ldrb.w	r3, [r8]
   82686:	f108 0401 	add.w	r4, r8, #1
   8268a:	2b2a      	cmp	r3, #42	; 0x2a
   8268c:	f000 8305 	beq.w	82c9a <_vfiprintf_r+0xc2a>
   82690:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   82694:	2a09      	cmp	r2, #9
   82696:	bf98      	it	ls
   82698:	2500      	movls	r5, #0
   8269a:	f200 82fa 	bhi.w	82c92 <_vfiprintf_r+0xc22>
   8269e:	f814 3b01 	ldrb.w	r3, [r4], #1
   826a2:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   826a6:	eb02 0545 	add.w	r5, r2, r5, lsl #1
   826aa:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   826ae:	2a09      	cmp	r2, #9
   826b0:	d9f5      	bls.n	8269e <_vfiprintf_r+0x62e>
   826b2:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
   826b6:	46a0      	mov	r8, r4
   826b8:	e549      	b.n	8214e <_vfiprintf_r+0xde>
   826ba:	4c90      	ldr	r4, [pc, #576]	; (828fc <_vfiprintf_r+0x88c>)
   826bc:	f01a 0f20 	tst.w	sl, #32
   826c0:	9004      	str	r0, [sp, #16]
   826c2:	46ac      	mov	ip, r5
   826c4:	940a      	str	r4, [sp, #40]	; 0x28
   826c6:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   826ca:	f47f af10 	bne.w	824ee <_vfiprintf_r+0x47e>
   826ce:	f01a 0f10 	tst.w	sl, #16
   826d2:	f040 81ea 	bne.w	82aaa <_vfiprintf_r+0xa3a>
   826d6:	f01a 0f40 	tst.w	sl, #64	; 0x40
   826da:	f000 81e6 	beq.w	82aaa <_vfiprintf_r+0xa3a>
   826de:	f8dd b020 	ldr.w	fp, [sp, #32]
   826e2:	2500      	movs	r5, #0
   826e4:	f8bb 4000 	ldrh.w	r4, [fp]
   826e8:	f10b 0b04 	add.w	fp, fp, #4
   826ec:	f8cd b020 	str.w	fp, [sp, #32]
   826f0:	e707      	b.n	82502 <_vfiprintf_r+0x492>
   826f2:	f898 3000 	ldrb.w	r3, [r8]
   826f6:	2900      	cmp	r1, #0
   826f8:	f47f ad27 	bne.w	8214a <_vfiprintf_r+0xda>
   826fc:	2120      	movs	r1, #32
   826fe:	e524      	b.n	8214a <_vfiprintf_r+0xda>
   82700:	f04a 0a01 	orr.w	sl, sl, #1
   82704:	f898 3000 	ldrb.w	r3, [r8]
   82708:	e51f      	b.n	8214a <_vfiprintf_r+0xda>
   8270a:	9004      	str	r0, [sp, #16]
   8270c:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   82710:	2b00      	cmp	r3, #0
   82712:	f000 80f9 	beq.w	82908 <_vfiprintf_r+0x898>
   82716:	2501      	movs	r5, #1
   82718:	f04f 0b00 	mov.w	fp, #0
   8271c:	9503      	str	r5, [sp, #12]
   8271e:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   82722:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
   82726:	9505      	str	r5, [sp, #20]
   82728:	af16      	add	r7, sp, #88	; 0x58
   8272a:	e70e      	b.n	8254a <_vfiprintf_r+0x4da>
   8272c:	9806      	ldr	r0, [sp, #24]
   8272e:	9902      	ldr	r1, [sp, #8]
   82730:	aa13      	add	r2, sp, #76	; 0x4c
   82732:	f7ff fc61 	bl	81ff8 <__sprint_r.part.0>
   82736:	2800      	cmp	r0, #0
   82738:	f040 80ed 	bne.w	82916 <_vfiprintf_r+0x8a6>
   8273c:	9814      	ldr	r0, [sp, #80]	; 0x50
   8273e:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82740:	1c43      	adds	r3, r0, #1
   82742:	46cc      	mov	ip, r9
   82744:	e5fe      	b.n	82344 <_vfiprintf_r+0x2d4>
   82746:	9b14      	ldr	r3, [sp, #80]	; 0x50
   82748:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8274a:	1c59      	adds	r1, r3, #1
   8274c:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
   82750:	b168      	cbz	r0, 8276e <_vfiprintf_r+0x6fe>
   82752:	3201      	adds	r2, #1
   82754:	f10d 0047 	add.w	r0, sp, #71	; 0x47
   82758:	2301      	movs	r3, #1
   8275a:	2907      	cmp	r1, #7
   8275c:	9215      	str	r2, [sp, #84]	; 0x54
   8275e:	9114      	str	r1, [sp, #80]	; 0x50
   82760:	e886 0009 	stmia.w	r6, {r0, r3}
   82764:	f300 8160 	bgt.w	82a28 <_vfiprintf_r+0x9b8>
   82768:	460b      	mov	r3, r1
   8276a:	3608      	adds	r6, #8
   8276c:	3101      	adds	r1, #1
   8276e:	9c07      	ldr	r4, [sp, #28]
   82770:	b164      	cbz	r4, 8278c <_vfiprintf_r+0x71c>
   82772:	3202      	adds	r2, #2
   82774:	a812      	add	r0, sp, #72	; 0x48
   82776:	2302      	movs	r3, #2
   82778:	2907      	cmp	r1, #7
   8277a:	9215      	str	r2, [sp, #84]	; 0x54
   8277c:	9114      	str	r1, [sp, #80]	; 0x50
   8277e:	e886 0009 	stmia.w	r6, {r0, r3}
   82782:	f300 8157 	bgt.w	82a34 <_vfiprintf_r+0x9c4>
   82786:	460b      	mov	r3, r1
   82788:	3608      	adds	r6, #8
   8278a:	3101      	adds	r1, #1
   8278c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   8278e:	2d80      	cmp	r5, #128	; 0x80
   82790:	f000 8101 	beq.w	82996 <_vfiprintf_r+0x926>
   82794:	9d05      	ldr	r5, [sp, #20]
   82796:	ebc5 040c 	rsb	r4, r5, ip
   8279a:	2c00      	cmp	r4, #0
   8279c:	dd2f      	ble.n	827fe <_vfiprintf_r+0x78e>
   8279e:	2c10      	cmp	r4, #16
   827a0:	4d57      	ldr	r5, [pc, #348]	; (82900 <_vfiprintf_r+0x890>)
   827a2:	dd22      	ble.n	827ea <_vfiprintf_r+0x77a>
   827a4:	4630      	mov	r0, r6
   827a6:	f04f 0b10 	mov.w	fp, #16
   827aa:	462e      	mov	r6, r5
   827ac:	4625      	mov	r5, r4
   827ae:	9c06      	ldr	r4, [sp, #24]
   827b0:	e006      	b.n	827c0 <_vfiprintf_r+0x750>
   827b2:	f103 0c02 	add.w	ip, r3, #2
   827b6:	3008      	adds	r0, #8
   827b8:	460b      	mov	r3, r1
   827ba:	3d10      	subs	r5, #16
   827bc:	2d10      	cmp	r5, #16
   827be:	dd10      	ble.n	827e2 <_vfiprintf_r+0x772>
   827c0:	1c59      	adds	r1, r3, #1
   827c2:	3210      	adds	r2, #16
   827c4:	2907      	cmp	r1, #7
   827c6:	9215      	str	r2, [sp, #84]	; 0x54
   827c8:	e880 0840 	stmia.w	r0, {r6, fp}
   827cc:	9114      	str	r1, [sp, #80]	; 0x50
   827ce:	ddf0      	ble.n	827b2 <_vfiprintf_r+0x742>
   827d0:	2a00      	cmp	r2, #0
   827d2:	d163      	bne.n	8289c <_vfiprintf_r+0x82c>
   827d4:	3d10      	subs	r5, #16
   827d6:	2d10      	cmp	r5, #16
   827d8:	f04f 0c01 	mov.w	ip, #1
   827dc:	4613      	mov	r3, r2
   827de:	4648      	mov	r0, r9
   827e0:	dcee      	bgt.n	827c0 <_vfiprintf_r+0x750>
   827e2:	462c      	mov	r4, r5
   827e4:	4661      	mov	r1, ip
   827e6:	4635      	mov	r5, r6
   827e8:	4606      	mov	r6, r0
   827ea:	4422      	add	r2, r4
   827ec:	2907      	cmp	r1, #7
   827ee:	9215      	str	r2, [sp, #84]	; 0x54
   827f0:	6035      	str	r5, [r6, #0]
   827f2:	6074      	str	r4, [r6, #4]
   827f4:	9114      	str	r1, [sp, #80]	; 0x50
   827f6:	f300 80c1 	bgt.w	8297c <_vfiprintf_r+0x90c>
   827fa:	3608      	adds	r6, #8
   827fc:	3101      	adds	r1, #1
   827fe:	9d05      	ldr	r5, [sp, #20]
   82800:	2907      	cmp	r1, #7
   82802:	442a      	add	r2, r5
   82804:	9215      	str	r2, [sp, #84]	; 0x54
   82806:	6037      	str	r7, [r6, #0]
   82808:	6075      	str	r5, [r6, #4]
   8280a:	9114      	str	r1, [sp, #80]	; 0x50
   8280c:	f340 80c1 	ble.w	82992 <_vfiprintf_r+0x922>
   82810:	2a00      	cmp	r2, #0
   82812:	f040 8130 	bne.w	82a76 <_vfiprintf_r+0xa06>
   82816:	9214      	str	r2, [sp, #80]	; 0x50
   82818:	464e      	mov	r6, r9
   8281a:	f01a 0f04 	tst.w	sl, #4
   8281e:	f000 808b 	beq.w	82938 <_vfiprintf_r+0x8c8>
   82822:	9d04      	ldr	r5, [sp, #16]
   82824:	f8dd b00c 	ldr.w	fp, [sp, #12]
   82828:	ebcb 0405 	rsb	r4, fp, r5
   8282c:	2c00      	cmp	r4, #0
   8282e:	f340 8083 	ble.w	82938 <_vfiprintf_r+0x8c8>
   82832:	2c10      	cmp	r4, #16
   82834:	f340 821e 	ble.w	82c74 <_vfiprintf_r+0xc04>
   82838:	9914      	ldr	r1, [sp, #80]	; 0x50
   8283a:	4d32      	ldr	r5, [pc, #200]	; (82904 <_vfiprintf_r+0x894>)
   8283c:	2710      	movs	r7, #16
   8283e:	f8dd a018 	ldr.w	sl, [sp, #24]
   82842:	f8dd b008 	ldr.w	fp, [sp, #8]
   82846:	e005      	b.n	82854 <_vfiprintf_r+0x7e4>
   82848:	1c88      	adds	r0, r1, #2
   8284a:	3608      	adds	r6, #8
   8284c:	4619      	mov	r1, r3
   8284e:	3c10      	subs	r4, #16
   82850:	2c10      	cmp	r4, #16
   82852:	dd10      	ble.n	82876 <_vfiprintf_r+0x806>
   82854:	1c4b      	adds	r3, r1, #1
   82856:	3210      	adds	r2, #16
   82858:	2b07      	cmp	r3, #7
   8285a:	9215      	str	r2, [sp, #84]	; 0x54
   8285c:	e886 00a0 	stmia.w	r6, {r5, r7}
   82860:	9314      	str	r3, [sp, #80]	; 0x50
   82862:	ddf1      	ble.n	82848 <_vfiprintf_r+0x7d8>
   82864:	2a00      	cmp	r2, #0
   82866:	d17d      	bne.n	82964 <_vfiprintf_r+0x8f4>
   82868:	3c10      	subs	r4, #16
   8286a:	2c10      	cmp	r4, #16
   8286c:	f04f 0001 	mov.w	r0, #1
   82870:	4611      	mov	r1, r2
   82872:	464e      	mov	r6, r9
   82874:	dcee      	bgt.n	82854 <_vfiprintf_r+0x7e4>
   82876:	4422      	add	r2, r4
   82878:	2807      	cmp	r0, #7
   8287a:	9215      	str	r2, [sp, #84]	; 0x54
   8287c:	6035      	str	r5, [r6, #0]
   8287e:	6074      	str	r4, [r6, #4]
   82880:	9014      	str	r0, [sp, #80]	; 0x50
   82882:	dd59      	ble.n	82938 <_vfiprintf_r+0x8c8>
   82884:	2a00      	cmp	r2, #0
   82886:	d14f      	bne.n	82928 <_vfiprintf_r+0x8b8>
   82888:	9c09      	ldr	r4, [sp, #36]	; 0x24
   8288a:	f8dd b00c 	ldr.w	fp, [sp, #12]
   8288e:	9d04      	ldr	r5, [sp, #16]
   82890:	45ab      	cmp	fp, r5
   82892:	bfac      	ite	ge
   82894:	445c      	addge	r4, fp
   82896:	1964      	addlt	r4, r4, r5
   82898:	9409      	str	r4, [sp, #36]	; 0x24
   8289a:	e05e      	b.n	8295a <_vfiprintf_r+0x8ea>
   8289c:	4620      	mov	r0, r4
   8289e:	9902      	ldr	r1, [sp, #8]
   828a0:	aa13      	add	r2, sp, #76	; 0x4c
   828a2:	f7ff fba9 	bl	81ff8 <__sprint_r.part.0>
   828a6:	2800      	cmp	r0, #0
   828a8:	d135      	bne.n	82916 <_vfiprintf_r+0x8a6>
   828aa:	9b14      	ldr	r3, [sp, #80]	; 0x50
   828ac:	9a15      	ldr	r2, [sp, #84]	; 0x54
   828ae:	f103 0c01 	add.w	ip, r3, #1
   828b2:	4648      	mov	r0, r9
   828b4:	e781      	b.n	827ba <_vfiprintf_r+0x74a>
   828b6:	08e0      	lsrs	r0, r4, #3
   828b8:	ea40 7045 	orr.w	r0, r0, r5, lsl #29
   828bc:	f004 0207 	and.w	r2, r4, #7
   828c0:	08e9      	lsrs	r1, r5, #3
   828c2:	3230      	adds	r2, #48	; 0x30
   828c4:	ea50 0b01 	orrs.w	fp, r0, r1
   828c8:	461f      	mov	r7, r3
   828ca:	701a      	strb	r2, [r3, #0]
   828cc:	4604      	mov	r4, r0
   828ce:	460d      	mov	r5, r1
   828d0:	f103 33ff 	add.w	r3, r3, #4294967295
   828d4:	d1ef      	bne.n	828b6 <_vfiprintf_r+0x846>
   828d6:	f01a 0f01 	tst.w	sl, #1
   828da:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   828de:	4639      	mov	r1, r7
   828e0:	f000 80b9 	beq.w	82a56 <_vfiprintf_r+0x9e6>
   828e4:	2a30      	cmp	r2, #48	; 0x30
   828e6:	f43f acf4 	beq.w	822d2 <_vfiprintf_r+0x262>
   828ea:	461f      	mov	r7, r3
   828ec:	ebc7 0509 	rsb	r5, r7, r9
   828f0:	2330      	movs	r3, #48	; 0x30
   828f2:	9505      	str	r5, [sp, #20]
   828f4:	f801 3c01 	strb.w	r3, [r1, #-1]
   828f8:	e4ee      	b.n	822d8 <_vfiprintf_r+0x268>
   828fa:	bf00      	nop
   828fc:	000847ec 	.word	0x000847ec
   82900:	00084808 	.word	0x00084808
   82904:	00084818 	.word	0x00084818
   82908:	9b15      	ldr	r3, [sp, #84]	; 0x54
   8290a:	b123      	cbz	r3, 82916 <_vfiprintf_r+0x8a6>
   8290c:	9806      	ldr	r0, [sp, #24]
   8290e:	9902      	ldr	r1, [sp, #8]
   82910:	aa13      	add	r2, sp, #76	; 0x4c
   82912:	f7ff fb71 	bl	81ff8 <__sprint_r.part.0>
   82916:	9c02      	ldr	r4, [sp, #8]
   82918:	89a3      	ldrh	r3, [r4, #12]
   8291a:	065b      	lsls	r3, r3, #25
   8291c:	f53f ac98 	bmi.w	82250 <_vfiprintf_r+0x1e0>
   82920:	9809      	ldr	r0, [sp, #36]	; 0x24
   82922:	b031      	add	sp, #196	; 0xc4
   82924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82928:	9806      	ldr	r0, [sp, #24]
   8292a:	9902      	ldr	r1, [sp, #8]
   8292c:	aa13      	add	r2, sp, #76	; 0x4c
   8292e:	f7ff fb63 	bl	81ff8 <__sprint_r.part.0>
   82932:	2800      	cmp	r0, #0
   82934:	d1ef      	bne.n	82916 <_vfiprintf_r+0x8a6>
   82936:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82938:	9c09      	ldr	r4, [sp, #36]	; 0x24
   8293a:	f8dd b00c 	ldr.w	fp, [sp, #12]
   8293e:	9d04      	ldr	r5, [sp, #16]
   82940:	45ab      	cmp	fp, r5
   82942:	bfac      	ite	ge
   82944:	445c      	addge	r4, fp
   82946:	1964      	addlt	r4, r4, r5
   82948:	9409      	str	r4, [sp, #36]	; 0x24
   8294a:	b132      	cbz	r2, 8295a <_vfiprintf_r+0x8ea>
   8294c:	9806      	ldr	r0, [sp, #24]
   8294e:	9902      	ldr	r1, [sp, #8]
   82950:	aa13      	add	r2, sp, #76	; 0x4c
   82952:	f7ff fb51 	bl	81ff8 <__sprint_r.part.0>
   82956:	2800      	cmp	r0, #0
   82958:	d1dd      	bne.n	82916 <_vfiprintf_r+0x8a6>
   8295a:	2000      	movs	r0, #0
   8295c:	9014      	str	r0, [sp, #80]	; 0x50
   8295e:	464e      	mov	r6, r9
   82960:	f7ff bbb9 	b.w	820d6 <_vfiprintf_r+0x66>
   82964:	4650      	mov	r0, sl
   82966:	4659      	mov	r1, fp
   82968:	aa13      	add	r2, sp, #76	; 0x4c
   8296a:	f7ff fb45 	bl	81ff8 <__sprint_r.part.0>
   8296e:	2800      	cmp	r0, #0
   82970:	d1d1      	bne.n	82916 <_vfiprintf_r+0x8a6>
   82972:	9914      	ldr	r1, [sp, #80]	; 0x50
   82974:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82976:	1c48      	adds	r0, r1, #1
   82978:	464e      	mov	r6, r9
   8297a:	e768      	b.n	8284e <_vfiprintf_r+0x7de>
   8297c:	2a00      	cmp	r2, #0
   8297e:	f040 80f7 	bne.w	82b70 <_vfiprintf_r+0xb00>
   82982:	9c05      	ldr	r4, [sp, #20]
   82984:	2301      	movs	r3, #1
   82986:	9720      	str	r7, [sp, #128]	; 0x80
   82988:	9421      	str	r4, [sp, #132]	; 0x84
   8298a:	9415      	str	r4, [sp, #84]	; 0x54
   8298c:	4622      	mov	r2, r4
   8298e:	9314      	str	r3, [sp, #80]	; 0x50
   82990:	464e      	mov	r6, r9
   82992:	3608      	adds	r6, #8
   82994:	e741      	b.n	8281a <_vfiprintf_r+0x7aa>
   82996:	9d04      	ldr	r5, [sp, #16]
   82998:	f8dd b00c 	ldr.w	fp, [sp, #12]
   8299c:	ebcb 0405 	rsb	r4, fp, r5
   829a0:	2c00      	cmp	r4, #0
   829a2:	f77f aef7 	ble.w	82794 <_vfiprintf_r+0x724>
   829a6:	2c10      	cmp	r4, #16
   829a8:	4da6      	ldr	r5, [pc, #664]	; (82c44 <_vfiprintf_r+0xbd4>)
   829aa:	f340 8170 	ble.w	82c8e <_vfiprintf_r+0xc1e>
   829ae:	4629      	mov	r1, r5
   829b0:	f04f 0b10 	mov.w	fp, #16
   829b4:	4625      	mov	r5, r4
   829b6:	4664      	mov	r4, ip
   829b8:	46b4      	mov	ip, r6
   829ba:	460e      	mov	r6, r1
   829bc:	e006      	b.n	829cc <_vfiprintf_r+0x95c>
   829be:	1c98      	adds	r0, r3, #2
   829c0:	f10c 0c08 	add.w	ip, ip, #8
   829c4:	460b      	mov	r3, r1
   829c6:	3d10      	subs	r5, #16
   829c8:	2d10      	cmp	r5, #16
   829ca:	dd0f      	ble.n	829ec <_vfiprintf_r+0x97c>
   829cc:	1c59      	adds	r1, r3, #1
   829ce:	3210      	adds	r2, #16
   829d0:	2907      	cmp	r1, #7
   829d2:	9215      	str	r2, [sp, #84]	; 0x54
   829d4:	e88c 0840 	stmia.w	ip, {r6, fp}
   829d8:	9114      	str	r1, [sp, #80]	; 0x50
   829da:	ddf0      	ble.n	829be <_vfiprintf_r+0x94e>
   829dc:	b9ba      	cbnz	r2, 82a0e <_vfiprintf_r+0x99e>
   829de:	3d10      	subs	r5, #16
   829e0:	2d10      	cmp	r5, #16
   829e2:	f04f 0001 	mov.w	r0, #1
   829e6:	4613      	mov	r3, r2
   829e8:	46cc      	mov	ip, r9
   829ea:	dcef      	bgt.n	829cc <_vfiprintf_r+0x95c>
   829ec:	4633      	mov	r3, r6
   829ee:	4666      	mov	r6, ip
   829f0:	46a4      	mov	ip, r4
   829f2:	462c      	mov	r4, r5
   829f4:	461d      	mov	r5, r3
   829f6:	4422      	add	r2, r4
   829f8:	2807      	cmp	r0, #7
   829fa:	9215      	str	r2, [sp, #84]	; 0x54
   829fc:	6035      	str	r5, [r6, #0]
   829fe:	6074      	str	r4, [r6, #4]
   82a00:	9014      	str	r0, [sp, #80]	; 0x50
   82a02:	f300 80af 	bgt.w	82b64 <_vfiprintf_r+0xaf4>
   82a06:	3608      	adds	r6, #8
   82a08:	1c41      	adds	r1, r0, #1
   82a0a:	4603      	mov	r3, r0
   82a0c:	e6c2      	b.n	82794 <_vfiprintf_r+0x724>
   82a0e:	9806      	ldr	r0, [sp, #24]
   82a10:	9902      	ldr	r1, [sp, #8]
   82a12:	aa13      	add	r2, sp, #76	; 0x4c
   82a14:	f7ff faf0 	bl	81ff8 <__sprint_r.part.0>
   82a18:	2800      	cmp	r0, #0
   82a1a:	f47f af7c 	bne.w	82916 <_vfiprintf_r+0x8a6>
   82a1e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   82a20:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82a22:	1c58      	adds	r0, r3, #1
   82a24:	46cc      	mov	ip, r9
   82a26:	e7ce      	b.n	829c6 <_vfiprintf_r+0x956>
   82a28:	2a00      	cmp	r2, #0
   82a2a:	d179      	bne.n	82b20 <_vfiprintf_r+0xab0>
   82a2c:	4619      	mov	r1, r3
   82a2e:	464e      	mov	r6, r9
   82a30:	4613      	mov	r3, r2
   82a32:	e69c      	b.n	8276e <_vfiprintf_r+0x6fe>
   82a34:	2a00      	cmp	r2, #0
   82a36:	f040 8084 	bne.w	82b42 <_vfiprintf_r+0xad2>
   82a3a:	2101      	movs	r1, #1
   82a3c:	4613      	mov	r3, r2
   82a3e:	464e      	mov	r6, r9
   82a40:	e6a4      	b.n	8278c <_vfiprintf_r+0x71c>
   82a42:	464f      	mov	r7, r9
   82a44:	e448      	b.n	822d8 <_vfiprintf_r+0x268>
   82a46:	2d00      	cmp	r5, #0
   82a48:	bf08      	it	eq
   82a4a:	2c0a      	cmpeq	r4, #10
   82a4c:	d246      	bcs.n	82adc <_vfiprintf_r+0xa6c>
   82a4e:	3430      	adds	r4, #48	; 0x30
   82a50:	af30      	add	r7, sp, #192	; 0xc0
   82a52:	f807 4d41 	strb.w	r4, [r7, #-65]!
   82a56:	ebc7 0309 	rsb	r3, r7, r9
   82a5a:	9305      	str	r3, [sp, #20]
   82a5c:	e43c      	b.n	822d8 <_vfiprintf_r+0x268>
   82a5e:	2302      	movs	r3, #2
   82a60:	e417      	b.n	82292 <_vfiprintf_r+0x222>
   82a62:	2a00      	cmp	r2, #0
   82a64:	f040 80af 	bne.w	82bc6 <_vfiprintf_r+0xb56>
   82a68:	4613      	mov	r3, r2
   82a6a:	2101      	movs	r1, #1
   82a6c:	464e      	mov	r6, r9
   82a6e:	e66d      	b.n	8274c <_vfiprintf_r+0x6dc>
   82a70:	4644      	mov	r4, r8
   82a72:	f7ff bb58 	b.w	82126 <_vfiprintf_r+0xb6>
   82a76:	9806      	ldr	r0, [sp, #24]
   82a78:	9902      	ldr	r1, [sp, #8]
   82a7a:	aa13      	add	r2, sp, #76	; 0x4c
   82a7c:	f7ff fabc 	bl	81ff8 <__sprint_r.part.0>
   82a80:	2800      	cmp	r0, #0
   82a82:	f47f af48 	bne.w	82916 <_vfiprintf_r+0x8a6>
   82a86:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82a88:	464e      	mov	r6, r9
   82a8a:	e6c6      	b.n	8281a <_vfiprintf_r+0x7aa>
   82a8c:	9d08      	ldr	r5, [sp, #32]
   82a8e:	682c      	ldr	r4, [r5, #0]
   82a90:	3504      	adds	r5, #4
   82a92:	9508      	str	r5, [sp, #32]
   82a94:	2500      	movs	r5, #0
   82a96:	f7ff bbfc 	b.w	82292 <_vfiprintf_r+0x222>
   82a9a:	9d08      	ldr	r5, [sp, #32]
   82a9c:	2301      	movs	r3, #1
   82a9e:	682c      	ldr	r4, [r5, #0]
   82aa0:	3504      	adds	r5, #4
   82aa2:	9508      	str	r5, [sp, #32]
   82aa4:	2500      	movs	r5, #0
   82aa6:	f7ff bbf4 	b.w	82292 <_vfiprintf_r+0x222>
   82aaa:	9d08      	ldr	r5, [sp, #32]
   82aac:	682c      	ldr	r4, [r5, #0]
   82aae:	3504      	adds	r5, #4
   82ab0:	9508      	str	r5, [sp, #32]
   82ab2:	2500      	movs	r5, #0
   82ab4:	e525      	b.n	82502 <_vfiprintf_r+0x492>
   82ab6:	9d08      	ldr	r5, [sp, #32]
   82ab8:	682c      	ldr	r4, [r5, #0]
   82aba:	3504      	adds	r5, #4
   82abc:	9508      	str	r5, [sp, #32]
   82abe:	17e5      	asrs	r5, r4, #31
   82ac0:	4622      	mov	r2, r4
   82ac2:	462b      	mov	r3, r5
   82ac4:	e48e      	b.n	823e4 <_vfiprintf_r+0x374>
   82ac6:	9806      	ldr	r0, [sp, #24]
   82ac8:	9902      	ldr	r1, [sp, #8]
   82aca:	aa13      	add	r2, sp, #76	; 0x4c
   82acc:	f7ff fa94 	bl	81ff8 <__sprint_r.part.0>
   82ad0:	2800      	cmp	r0, #0
   82ad2:	f47f af20 	bne.w	82916 <_vfiprintf_r+0x8a6>
   82ad6:	464e      	mov	r6, r9
   82ad8:	f7ff bb9a 	b.w	82210 <_vfiprintf_r+0x1a0>
   82adc:	f10d 0b7f 	add.w	fp, sp, #127	; 0x7f
   82ae0:	9603      	str	r6, [sp, #12]
   82ae2:	465e      	mov	r6, fp
   82ae4:	46e3      	mov	fp, ip
   82ae6:	4620      	mov	r0, r4
   82ae8:	4629      	mov	r1, r5
   82aea:	220a      	movs	r2, #10
   82aec:	2300      	movs	r3, #0
   82aee:	f7fe fe95 	bl	8181c <__aeabi_uldivmod>
   82af2:	3230      	adds	r2, #48	; 0x30
   82af4:	7032      	strb	r2, [r6, #0]
   82af6:	4620      	mov	r0, r4
   82af8:	4629      	mov	r1, r5
   82afa:	220a      	movs	r2, #10
   82afc:	2300      	movs	r3, #0
   82afe:	f7fe fe8d 	bl	8181c <__aeabi_uldivmod>
   82b02:	4604      	mov	r4, r0
   82b04:	460d      	mov	r5, r1
   82b06:	ea54 0005 	orrs.w	r0, r4, r5
   82b0a:	4637      	mov	r7, r6
   82b0c:	f106 36ff 	add.w	r6, r6, #4294967295
   82b10:	d1e9      	bne.n	82ae6 <_vfiprintf_r+0xa76>
   82b12:	ebc7 0309 	rsb	r3, r7, r9
   82b16:	46dc      	mov	ip, fp
   82b18:	9e03      	ldr	r6, [sp, #12]
   82b1a:	9305      	str	r3, [sp, #20]
   82b1c:	f7ff bbdc 	b.w	822d8 <_vfiprintf_r+0x268>
   82b20:	9806      	ldr	r0, [sp, #24]
   82b22:	9902      	ldr	r1, [sp, #8]
   82b24:	aa13      	add	r2, sp, #76	; 0x4c
   82b26:	f8cd c004 	str.w	ip, [sp, #4]
   82b2a:	f7ff fa65 	bl	81ff8 <__sprint_r.part.0>
   82b2e:	f8dd c004 	ldr.w	ip, [sp, #4]
   82b32:	2800      	cmp	r0, #0
   82b34:	f47f aeef 	bne.w	82916 <_vfiprintf_r+0x8a6>
   82b38:	9b14      	ldr	r3, [sp, #80]	; 0x50
   82b3a:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82b3c:	1c59      	adds	r1, r3, #1
   82b3e:	464e      	mov	r6, r9
   82b40:	e615      	b.n	8276e <_vfiprintf_r+0x6fe>
   82b42:	9806      	ldr	r0, [sp, #24]
   82b44:	9902      	ldr	r1, [sp, #8]
   82b46:	aa13      	add	r2, sp, #76	; 0x4c
   82b48:	f8cd c004 	str.w	ip, [sp, #4]
   82b4c:	f7ff fa54 	bl	81ff8 <__sprint_r.part.0>
   82b50:	f8dd c004 	ldr.w	ip, [sp, #4]
   82b54:	2800      	cmp	r0, #0
   82b56:	f47f aede 	bne.w	82916 <_vfiprintf_r+0x8a6>
   82b5a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   82b5c:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82b5e:	1c59      	adds	r1, r3, #1
   82b60:	464e      	mov	r6, r9
   82b62:	e613      	b.n	8278c <_vfiprintf_r+0x71c>
   82b64:	2a00      	cmp	r2, #0
   82b66:	d156      	bne.n	82c16 <_vfiprintf_r+0xba6>
   82b68:	2101      	movs	r1, #1
   82b6a:	4613      	mov	r3, r2
   82b6c:	464e      	mov	r6, r9
   82b6e:	e611      	b.n	82794 <_vfiprintf_r+0x724>
   82b70:	9806      	ldr	r0, [sp, #24]
   82b72:	9902      	ldr	r1, [sp, #8]
   82b74:	aa13      	add	r2, sp, #76	; 0x4c
   82b76:	f7ff fa3f 	bl	81ff8 <__sprint_r.part.0>
   82b7a:	2800      	cmp	r0, #0
   82b7c:	f47f aecb 	bne.w	82916 <_vfiprintf_r+0x8a6>
   82b80:	9914      	ldr	r1, [sp, #80]	; 0x50
   82b82:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82b84:	3101      	adds	r1, #1
   82b86:	464e      	mov	r6, r9
   82b88:	e639      	b.n	827fe <_vfiprintf_r+0x78e>
   82b8a:	f04f 0b2d 	mov.w	fp, #45	; 0x2d
   82b8e:	4264      	negs	r4, r4
   82b90:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   82b94:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
   82b98:	f8cd b01c 	str.w	fp, [sp, #28]
   82b9c:	f8cd c014 	str.w	ip, [sp, #20]
   82ba0:	2301      	movs	r3, #1
   82ba2:	f7ff bb7e 	b.w	822a2 <_vfiprintf_r+0x232>
   82ba6:	f01a 0f10 	tst.w	sl, #16
   82baa:	d11d      	bne.n	82be8 <_vfiprintf_r+0xb78>
   82bac:	f01a 0f40 	tst.w	sl, #64	; 0x40
   82bb0:	d058      	beq.n	82c64 <_vfiprintf_r+0xbf4>
   82bb2:	9d08      	ldr	r5, [sp, #32]
   82bb4:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
   82bb8:	682b      	ldr	r3, [r5, #0]
   82bba:	3504      	adds	r5, #4
   82bbc:	9508      	str	r5, [sp, #32]
   82bbe:	f8a3 b000 	strh.w	fp, [r3]
   82bc2:	f7ff ba88 	b.w	820d6 <_vfiprintf_r+0x66>
   82bc6:	9806      	ldr	r0, [sp, #24]
   82bc8:	9902      	ldr	r1, [sp, #8]
   82bca:	aa13      	add	r2, sp, #76	; 0x4c
   82bcc:	f8cd c004 	str.w	ip, [sp, #4]
   82bd0:	f7ff fa12 	bl	81ff8 <__sprint_r.part.0>
   82bd4:	f8dd c004 	ldr.w	ip, [sp, #4]
   82bd8:	2800      	cmp	r0, #0
   82bda:	f47f ae9c 	bne.w	82916 <_vfiprintf_r+0x8a6>
   82bde:	9b14      	ldr	r3, [sp, #80]	; 0x50
   82be0:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82be2:	1c59      	adds	r1, r3, #1
   82be4:	464e      	mov	r6, r9
   82be6:	e5b1      	b.n	8274c <_vfiprintf_r+0x6dc>
   82be8:	f8dd b020 	ldr.w	fp, [sp, #32]
   82bec:	9c09      	ldr	r4, [sp, #36]	; 0x24
   82bee:	f8db 3000 	ldr.w	r3, [fp]
   82bf2:	f10b 0b04 	add.w	fp, fp, #4
   82bf6:	f8cd b020 	str.w	fp, [sp, #32]
   82bfa:	601c      	str	r4, [r3, #0]
   82bfc:	f7ff ba6b 	b.w	820d6 <_vfiprintf_r+0x66>
   82c00:	9408      	str	r4, [sp, #32]
   82c02:	f001 fc0b 	bl	8441c <strlen>
   82c06:	f89d 4047 	ldrb.w	r4, [sp, #71]	; 0x47
   82c0a:	9005      	str	r0, [sp, #20]
   82c0c:	9407      	str	r4, [sp, #28]
   82c0e:	f04f 0c00 	mov.w	ip, #0
   82c12:	f7ff bb61 	b.w	822d8 <_vfiprintf_r+0x268>
   82c16:	9806      	ldr	r0, [sp, #24]
   82c18:	9902      	ldr	r1, [sp, #8]
   82c1a:	aa13      	add	r2, sp, #76	; 0x4c
   82c1c:	f8cd c004 	str.w	ip, [sp, #4]
   82c20:	f7ff f9ea 	bl	81ff8 <__sprint_r.part.0>
   82c24:	f8dd c004 	ldr.w	ip, [sp, #4]
   82c28:	2800      	cmp	r0, #0
   82c2a:	f47f ae74 	bne.w	82916 <_vfiprintf_r+0x8a6>
   82c2e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   82c30:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82c32:	1c59      	adds	r1, r3, #1
   82c34:	464e      	mov	r6, r9
   82c36:	e5ad      	b.n	82794 <_vfiprintf_r+0x724>
   82c38:	9b14      	ldr	r3, [sp, #80]	; 0x50
   82c3a:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82c3c:	3301      	adds	r3, #1
   82c3e:	4d02      	ldr	r5, [pc, #8]	; (82c48 <_vfiprintf_r+0xbd8>)
   82c40:	f7ff bb9a 	b.w	82378 <_vfiprintf_r+0x308>
   82c44:	00084808 	.word	0x00084808
   82c48:	00084818 	.word	0x00084818
   82c4c:	f1bc 0f06 	cmp.w	ip, #6
   82c50:	bf34      	ite	cc
   82c52:	4663      	movcc	r3, ip
   82c54:	2306      	movcs	r3, #6
   82c56:	9408      	str	r4, [sp, #32]
   82c58:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
   82c5c:	9305      	str	r3, [sp, #20]
   82c5e:	9403      	str	r4, [sp, #12]
   82c60:	4f16      	ldr	r7, [pc, #88]	; (82cbc <_vfiprintf_r+0xc4c>)
   82c62:	e472      	b.n	8254a <_vfiprintf_r+0x4da>
   82c64:	9c08      	ldr	r4, [sp, #32]
   82c66:	9d09      	ldr	r5, [sp, #36]	; 0x24
   82c68:	6823      	ldr	r3, [r4, #0]
   82c6a:	3404      	adds	r4, #4
   82c6c:	9408      	str	r4, [sp, #32]
   82c6e:	601d      	str	r5, [r3, #0]
   82c70:	f7ff ba31 	b.w	820d6 <_vfiprintf_r+0x66>
   82c74:	9814      	ldr	r0, [sp, #80]	; 0x50
   82c76:	4d12      	ldr	r5, [pc, #72]	; (82cc0 <_vfiprintf_r+0xc50>)
   82c78:	3001      	adds	r0, #1
   82c7a:	e5fc      	b.n	82876 <_vfiprintf_r+0x806>
   82c7c:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
   82c80:	f8cd c014 	str.w	ip, [sp, #20]
   82c84:	9507      	str	r5, [sp, #28]
   82c86:	9408      	str	r4, [sp, #32]
   82c88:	4684      	mov	ip, r0
   82c8a:	f7ff bb25 	b.w	822d8 <_vfiprintf_r+0x268>
   82c8e:	4608      	mov	r0, r1
   82c90:	e6b1      	b.n	829f6 <_vfiprintf_r+0x986>
   82c92:	46a0      	mov	r8, r4
   82c94:	2500      	movs	r5, #0
   82c96:	f7ff ba5a 	b.w	8214e <_vfiprintf_r+0xde>
   82c9a:	f8dd b020 	ldr.w	fp, [sp, #32]
   82c9e:	f898 3001 	ldrb.w	r3, [r8, #1]
   82ca2:	f8db 5000 	ldr.w	r5, [fp]
   82ca6:	f10b 0204 	add.w	r2, fp, #4
   82caa:	2d00      	cmp	r5, #0
   82cac:	9208      	str	r2, [sp, #32]
   82cae:	46a0      	mov	r8, r4
   82cb0:	f6bf aa4b 	bge.w	8214a <_vfiprintf_r+0xda>
   82cb4:	f04f 35ff 	mov.w	r5, #4294967295
   82cb8:	f7ff ba47 	b.w	8214a <_vfiprintf_r+0xda>
   82cbc:	00084800 	.word	0x00084800
   82cc0:	00084818 	.word	0x00084818

00082cc4 <__sbprintf>:
   82cc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   82cc8:	6e4f      	ldr	r7, [r1, #100]	; 0x64
   82cca:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   82cce:	4688      	mov	r8, r1
   82cd0:	9719      	str	r7, [sp, #100]	; 0x64
   82cd2:	f8d8 701c 	ldr.w	r7, [r8, #28]
   82cd6:	f8b1 a00c 	ldrh.w	sl, [r1, #12]
   82cda:	f8b1 900e 	ldrh.w	r9, [r1, #14]
   82cde:	9707      	str	r7, [sp, #28]
   82ce0:	f8d8 7024 	ldr.w	r7, [r8, #36]	; 0x24
   82ce4:	ac1a      	add	r4, sp, #104	; 0x68
   82ce6:	f44f 6580 	mov.w	r5, #1024	; 0x400
   82cea:	f02a 0a02 	bic.w	sl, sl, #2
   82cee:	2600      	movs	r6, #0
   82cf0:	4669      	mov	r1, sp
   82cf2:	9400      	str	r4, [sp, #0]
   82cf4:	9404      	str	r4, [sp, #16]
   82cf6:	9502      	str	r5, [sp, #8]
   82cf8:	9505      	str	r5, [sp, #20]
   82cfa:	f8ad a00c 	strh.w	sl, [sp, #12]
   82cfe:	f8ad 900e 	strh.w	r9, [sp, #14]
   82d02:	9709      	str	r7, [sp, #36]	; 0x24
   82d04:	9606      	str	r6, [sp, #24]
   82d06:	4605      	mov	r5, r0
   82d08:	f7ff f9b2 	bl	82070 <_vfiprintf_r>
   82d0c:	1e04      	subs	r4, r0, #0
   82d0e:	db07      	blt.n	82d20 <__sbprintf+0x5c>
   82d10:	4628      	mov	r0, r5
   82d12:	4669      	mov	r1, sp
   82d14:	f000 f92a 	bl	82f6c <_fflush_r>
   82d18:	42b0      	cmp	r0, r6
   82d1a:	bf18      	it	ne
   82d1c:	f04f 34ff 	movne.w	r4, #4294967295
   82d20:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   82d24:	065b      	lsls	r3, r3, #25
   82d26:	d505      	bpl.n	82d34 <__sbprintf+0x70>
   82d28:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   82d2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82d30:	f8a8 300c 	strh.w	r3, [r8, #12]
   82d34:	4620      	mov	r0, r4
   82d36:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   82d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   82d3e:	bf00      	nop

00082d40 <__swsetup_r>:
   82d40:	4b2f      	ldr	r3, [pc, #188]	; (82e00 <__swsetup_r+0xc0>)
   82d42:	b570      	push	{r4, r5, r6, lr}
   82d44:	4606      	mov	r6, r0
   82d46:	6818      	ldr	r0, [r3, #0]
   82d48:	460c      	mov	r4, r1
   82d4a:	b110      	cbz	r0, 82d52 <__swsetup_r+0x12>
   82d4c:	6b82      	ldr	r2, [r0, #56]	; 0x38
   82d4e:	2a00      	cmp	r2, #0
   82d50:	d036      	beq.n	82dc0 <__swsetup_r+0x80>
   82d52:	89a5      	ldrh	r5, [r4, #12]
   82d54:	b2ab      	uxth	r3, r5
   82d56:	0719      	lsls	r1, r3, #28
   82d58:	d50c      	bpl.n	82d74 <__swsetup_r+0x34>
   82d5a:	6922      	ldr	r2, [r4, #16]
   82d5c:	b1aa      	cbz	r2, 82d8a <__swsetup_r+0x4a>
   82d5e:	f013 0101 	ands.w	r1, r3, #1
   82d62:	d01e      	beq.n	82da2 <__swsetup_r+0x62>
   82d64:	6963      	ldr	r3, [r4, #20]
   82d66:	2100      	movs	r1, #0
   82d68:	425b      	negs	r3, r3
   82d6a:	61a3      	str	r3, [r4, #24]
   82d6c:	60a1      	str	r1, [r4, #8]
   82d6e:	b1f2      	cbz	r2, 82dae <__swsetup_r+0x6e>
   82d70:	2000      	movs	r0, #0
   82d72:	bd70      	pop	{r4, r5, r6, pc}
   82d74:	06da      	lsls	r2, r3, #27
   82d76:	d53a      	bpl.n	82dee <__swsetup_r+0xae>
   82d78:	075b      	lsls	r3, r3, #29
   82d7a:	d424      	bmi.n	82dc6 <__swsetup_r+0x86>
   82d7c:	6922      	ldr	r2, [r4, #16]
   82d7e:	f045 0308 	orr.w	r3, r5, #8
   82d82:	81a3      	strh	r3, [r4, #12]
   82d84:	b29b      	uxth	r3, r3
   82d86:	2a00      	cmp	r2, #0
   82d88:	d1e9      	bne.n	82d5e <__swsetup_r+0x1e>
   82d8a:	f403 7120 	and.w	r1, r3, #640	; 0x280
   82d8e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   82d92:	d0e4      	beq.n	82d5e <__swsetup_r+0x1e>
   82d94:	4630      	mov	r0, r6
   82d96:	4621      	mov	r1, r4
   82d98:	f000 fcce 	bl	83738 <__smakebuf_r>
   82d9c:	89a3      	ldrh	r3, [r4, #12]
   82d9e:	6922      	ldr	r2, [r4, #16]
   82da0:	e7dd      	b.n	82d5e <__swsetup_r+0x1e>
   82da2:	0798      	lsls	r0, r3, #30
   82da4:	bf58      	it	pl
   82da6:	6961      	ldrpl	r1, [r4, #20]
   82da8:	60a1      	str	r1, [r4, #8]
   82daa:	2a00      	cmp	r2, #0
   82dac:	d1e0      	bne.n	82d70 <__swsetup_r+0x30>
   82dae:	89a3      	ldrh	r3, [r4, #12]
   82db0:	061a      	lsls	r2, r3, #24
   82db2:	d5dd      	bpl.n	82d70 <__swsetup_r+0x30>
   82db4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82db8:	81a3      	strh	r3, [r4, #12]
   82dba:	f04f 30ff 	mov.w	r0, #4294967295
   82dbe:	bd70      	pop	{r4, r5, r6, pc}
   82dc0:	f000 f8f0 	bl	82fa4 <__sinit>
   82dc4:	e7c5      	b.n	82d52 <__swsetup_r+0x12>
   82dc6:	6b21      	ldr	r1, [r4, #48]	; 0x30
   82dc8:	b149      	cbz	r1, 82dde <__swsetup_r+0x9e>
   82dca:	f104 0340 	add.w	r3, r4, #64	; 0x40
   82dce:	4299      	cmp	r1, r3
   82dd0:	d003      	beq.n	82dda <__swsetup_r+0x9a>
   82dd2:	4630      	mov	r0, r6
   82dd4:	f000 fa2a 	bl	8322c <_free_r>
   82dd8:	89a5      	ldrh	r5, [r4, #12]
   82dda:	2300      	movs	r3, #0
   82ddc:	6323      	str	r3, [r4, #48]	; 0x30
   82dde:	6922      	ldr	r2, [r4, #16]
   82de0:	f025 0524 	bic.w	r5, r5, #36	; 0x24
   82de4:	2100      	movs	r1, #0
   82de6:	b2ad      	uxth	r5, r5
   82de8:	6022      	str	r2, [r4, #0]
   82dea:	6061      	str	r1, [r4, #4]
   82dec:	e7c7      	b.n	82d7e <__swsetup_r+0x3e>
   82dee:	f045 0540 	orr.w	r5, r5, #64	; 0x40
   82df2:	2309      	movs	r3, #9
   82df4:	6033      	str	r3, [r6, #0]
   82df6:	f04f 30ff 	mov.w	r0, #4294967295
   82dfa:	81a5      	strh	r5, [r4, #12]
   82dfc:	bd70      	pop	{r4, r5, r6, pc}
   82dfe:	bf00      	nop
   82e00:	20070568 	.word	0x20070568

00082e04 <register_fini>:
   82e04:	4b02      	ldr	r3, [pc, #8]	; (82e10 <register_fini+0xc>)
   82e06:	b113      	cbz	r3, 82e0e <register_fini+0xa>
   82e08:	4802      	ldr	r0, [pc, #8]	; (82e14 <register_fini+0x10>)
   82e0a:	f000 b805 	b.w	82e18 <atexit>
   82e0e:	4770      	bx	lr
   82e10:	00000000 	.word	0x00000000
   82e14:	000830a1 	.word	0x000830a1

00082e18 <atexit>:
   82e18:	4601      	mov	r1, r0
   82e1a:	2000      	movs	r0, #0
   82e1c:	4602      	mov	r2, r0
   82e1e:	4603      	mov	r3, r0
   82e20:	f001 bbca 	b.w	845b8 <__register_exitproc>

00082e24 <__sflush_r>:
   82e24:	898b      	ldrh	r3, [r1, #12]
   82e26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82e2a:	b29a      	uxth	r2, r3
   82e2c:	460d      	mov	r5, r1
   82e2e:	0711      	lsls	r1, r2, #28
   82e30:	4680      	mov	r8, r0
   82e32:	d43c      	bmi.n	82eae <__sflush_r+0x8a>
   82e34:	686a      	ldr	r2, [r5, #4]
   82e36:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   82e3a:	2a00      	cmp	r2, #0
   82e3c:	81ab      	strh	r3, [r5, #12]
   82e3e:	dd59      	ble.n	82ef4 <__sflush_r+0xd0>
   82e40:	6aac      	ldr	r4, [r5, #40]	; 0x28
   82e42:	2c00      	cmp	r4, #0
   82e44:	d04b      	beq.n	82ede <__sflush_r+0xba>
   82e46:	b29b      	uxth	r3, r3
   82e48:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   82e4c:	2100      	movs	r1, #0
   82e4e:	b292      	uxth	r2, r2
   82e50:	f8d8 6000 	ldr.w	r6, [r8]
   82e54:	f8c8 1000 	str.w	r1, [r8]
   82e58:	2a00      	cmp	r2, #0
   82e5a:	d04f      	beq.n	82efc <__sflush_r+0xd8>
   82e5c:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   82e5e:	075f      	lsls	r7, r3, #29
   82e60:	d505      	bpl.n	82e6e <__sflush_r+0x4a>
   82e62:	6869      	ldr	r1, [r5, #4]
   82e64:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   82e66:	1a52      	subs	r2, r2, r1
   82e68:	b10b      	cbz	r3, 82e6e <__sflush_r+0x4a>
   82e6a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   82e6c:	1ad2      	subs	r2, r2, r3
   82e6e:	4640      	mov	r0, r8
   82e70:	69e9      	ldr	r1, [r5, #28]
   82e72:	2300      	movs	r3, #0
   82e74:	47a0      	blx	r4
   82e76:	1c44      	adds	r4, r0, #1
   82e78:	d04a      	beq.n	82f10 <__sflush_r+0xec>
   82e7a:	89ab      	ldrh	r3, [r5, #12]
   82e7c:	692a      	ldr	r2, [r5, #16]
   82e7e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   82e82:	b29b      	uxth	r3, r3
   82e84:	2100      	movs	r1, #0
   82e86:	602a      	str	r2, [r5, #0]
   82e88:	04da      	lsls	r2, r3, #19
   82e8a:	81ab      	strh	r3, [r5, #12]
   82e8c:	6069      	str	r1, [r5, #4]
   82e8e:	d44c      	bmi.n	82f2a <__sflush_r+0x106>
   82e90:	6b29      	ldr	r1, [r5, #48]	; 0x30
   82e92:	f8c8 6000 	str.w	r6, [r8]
   82e96:	b311      	cbz	r1, 82ede <__sflush_r+0xba>
   82e98:	f105 0340 	add.w	r3, r5, #64	; 0x40
   82e9c:	4299      	cmp	r1, r3
   82e9e:	d002      	beq.n	82ea6 <__sflush_r+0x82>
   82ea0:	4640      	mov	r0, r8
   82ea2:	f000 f9c3 	bl	8322c <_free_r>
   82ea6:	2000      	movs	r0, #0
   82ea8:	6328      	str	r0, [r5, #48]	; 0x30
   82eaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82eae:	692e      	ldr	r6, [r5, #16]
   82eb0:	b1ae      	cbz	r6, 82ede <__sflush_r+0xba>
   82eb2:	0791      	lsls	r1, r2, #30
   82eb4:	682c      	ldr	r4, [r5, #0]
   82eb6:	bf0c      	ite	eq
   82eb8:	696b      	ldreq	r3, [r5, #20]
   82eba:	2300      	movne	r3, #0
   82ebc:	602e      	str	r6, [r5, #0]
   82ebe:	1ba4      	subs	r4, r4, r6
   82ec0:	60ab      	str	r3, [r5, #8]
   82ec2:	e00a      	b.n	82eda <__sflush_r+0xb6>
   82ec4:	4632      	mov	r2, r6
   82ec6:	4623      	mov	r3, r4
   82ec8:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   82eca:	4640      	mov	r0, r8
   82ecc:	69e9      	ldr	r1, [r5, #28]
   82ece:	47b8      	blx	r7
   82ed0:	2800      	cmp	r0, #0
   82ed2:	ebc0 0404 	rsb	r4, r0, r4
   82ed6:	4406      	add	r6, r0
   82ed8:	dd04      	ble.n	82ee4 <__sflush_r+0xc0>
   82eda:	2c00      	cmp	r4, #0
   82edc:	dcf2      	bgt.n	82ec4 <__sflush_r+0xa0>
   82ede:	2000      	movs	r0, #0
   82ee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82ee4:	89ab      	ldrh	r3, [r5, #12]
   82ee6:	f04f 30ff 	mov.w	r0, #4294967295
   82eea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82eee:	81ab      	strh	r3, [r5, #12]
   82ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82ef4:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   82ef6:	2a00      	cmp	r2, #0
   82ef8:	dca2      	bgt.n	82e40 <__sflush_r+0x1c>
   82efa:	e7f0      	b.n	82ede <__sflush_r+0xba>
   82efc:	2301      	movs	r3, #1
   82efe:	4640      	mov	r0, r8
   82f00:	69e9      	ldr	r1, [r5, #28]
   82f02:	47a0      	blx	r4
   82f04:	1c43      	adds	r3, r0, #1
   82f06:	4602      	mov	r2, r0
   82f08:	d01e      	beq.n	82f48 <__sflush_r+0x124>
   82f0a:	89ab      	ldrh	r3, [r5, #12]
   82f0c:	6aac      	ldr	r4, [r5, #40]	; 0x28
   82f0e:	e7a6      	b.n	82e5e <__sflush_r+0x3a>
   82f10:	f8d8 3000 	ldr.w	r3, [r8]
   82f14:	b95b      	cbnz	r3, 82f2e <__sflush_r+0x10a>
   82f16:	89aa      	ldrh	r2, [r5, #12]
   82f18:	6929      	ldr	r1, [r5, #16]
   82f1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   82f1e:	b292      	uxth	r2, r2
   82f20:	606b      	str	r3, [r5, #4]
   82f22:	04d3      	lsls	r3, r2, #19
   82f24:	81aa      	strh	r2, [r5, #12]
   82f26:	6029      	str	r1, [r5, #0]
   82f28:	d5b2      	bpl.n	82e90 <__sflush_r+0x6c>
   82f2a:	6528      	str	r0, [r5, #80]	; 0x50
   82f2c:	e7b0      	b.n	82e90 <__sflush_r+0x6c>
   82f2e:	2b1d      	cmp	r3, #29
   82f30:	d001      	beq.n	82f36 <__sflush_r+0x112>
   82f32:	2b16      	cmp	r3, #22
   82f34:	d113      	bne.n	82f5e <__sflush_r+0x13a>
   82f36:	89a9      	ldrh	r1, [r5, #12]
   82f38:	692b      	ldr	r3, [r5, #16]
   82f3a:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
   82f3e:	2200      	movs	r2, #0
   82f40:	81a9      	strh	r1, [r5, #12]
   82f42:	602b      	str	r3, [r5, #0]
   82f44:	606a      	str	r2, [r5, #4]
   82f46:	e7a3      	b.n	82e90 <__sflush_r+0x6c>
   82f48:	f8d8 3000 	ldr.w	r3, [r8]
   82f4c:	2b00      	cmp	r3, #0
   82f4e:	d0dc      	beq.n	82f0a <__sflush_r+0xe6>
   82f50:	2b1d      	cmp	r3, #29
   82f52:	d001      	beq.n	82f58 <__sflush_r+0x134>
   82f54:	2b16      	cmp	r3, #22
   82f56:	d1c5      	bne.n	82ee4 <__sflush_r+0xc0>
   82f58:	f8c8 6000 	str.w	r6, [r8]
   82f5c:	e7bf      	b.n	82ede <__sflush_r+0xba>
   82f5e:	89ab      	ldrh	r3, [r5, #12]
   82f60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82f64:	81ab      	strh	r3, [r5, #12]
   82f66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82f6a:	bf00      	nop

00082f6c <_fflush_r>:
   82f6c:	b510      	push	{r4, lr}
   82f6e:	4604      	mov	r4, r0
   82f70:	b082      	sub	sp, #8
   82f72:	b108      	cbz	r0, 82f78 <_fflush_r+0xc>
   82f74:	6b83      	ldr	r3, [r0, #56]	; 0x38
   82f76:	b153      	cbz	r3, 82f8e <_fflush_r+0x22>
   82f78:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   82f7c:	b908      	cbnz	r0, 82f82 <_fflush_r+0x16>
   82f7e:	b002      	add	sp, #8
   82f80:	bd10      	pop	{r4, pc}
   82f82:	4620      	mov	r0, r4
   82f84:	b002      	add	sp, #8
   82f86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   82f8a:	f7ff bf4b 	b.w	82e24 <__sflush_r>
   82f8e:	9101      	str	r1, [sp, #4]
   82f90:	f000 f808 	bl	82fa4 <__sinit>
   82f94:	9901      	ldr	r1, [sp, #4]
   82f96:	e7ef      	b.n	82f78 <_fflush_r+0xc>

00082f98 <_cleanup_r>:
   82f98:	4901      	ldr	r1, [pc, #4]	; (82fa0 <_cleanup_r+0x8>)
   82f9a:	f000 bb9f 	b.w	836dc <_fwalk>
   82f9e:	bf00      	nop
   82fa0:	00084705 	.word	0x00084705

00082fa4 <__sinit>:
   82fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82fa8:	6b84      	ldr	r4, [r0, #56]	; 0x38
   82faa:	b083      	sub	sp, #12
   82fac:	4607      	mov	r7, r0
   82fae:	2c00      	cmp	r4, #0
   82fb0:	d165      	bne.n	8307e <__sinit+0xda>
   82fb2:	687d      	ldr	r5, [r7, #4]
   82fb4:	4833      	ldr	r0, [pc, #204]	; (83084 <__sinit+0xe0>)
   82fb6:	2304      	movs	r3, #4
   82fb8:	2103      	movs	r1, #3
   82fba:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   82fbe:	63f8      	str	r0, [r7, #60]	; 0x3c
   82fc0:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   82fc4:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   82fc8:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   82fcc:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   82fd0:	81ab      	strh	r3, [r5, #12]
   82fd2:	602c      	str	r4, [r5, #0]
   82fd4:	606c      	str	r4, [r5, #4]
   82fd6:	60ac      	str	r4, [r5, #8]
   82fd8:	666c      	str	r4, [r5, #100]	; 0x64
   82fda:	81ec      	strh	r4, [r5, #14]
   82fdc:	612c      	str	r4, [r5, #16]
   82fde:	616c      	str	r4, [r5, #20]
   82fe0:	61ac      	str	r4, [r5, #24]
   82fe2:	4621      	mov	r1, r4
   82fe4:	2208      	movs	r2, #8
   82fe6:	f7fe ff35 	bl	81e54 <memset>
   82fea:	f8df b09c 	ldr.w	fp, [pc, #156]	; 83088 <__sinit+0xe4>
   82fee:	68be      	ldr	r6, [r7, #8]
   82ff0:	f8df a098 	ldr.w	sl, [pc, #152]	; 8308c <__sinit+0xe8>
   82ff4:	f8df 9098 	ldr.w	r9, [pc, #152]	; 83090 <__sinit+0xec>
   82ff8:	f8df 8098 	ldr.w	r8, [pc, #152]	; 83094 <__sinit+0xf0>
   82ffc:	2301      	movs	r3, #1
   82ffe:	2209      	movs	r2, #9
   83000:	61ed      	str	r5, [r5, #28]
   83002:	f8c5 b020 	str.w	fp, [r5, #32]
   83006:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   8300a:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   8300e:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   83012:	4621      	mov	r1, r4
   83014:	81f3      	strh	r3, [r6, #14]
   83016:	81b2      	strh	r2, [r6, #12]
   83018:	6034      	str	r4, [r6, #0]
   8301a:	6074      	str	r4, [r6, #4]
   8301c:	60b4      	str	r4, [r6, #8]
   8301e:	6674      	str	r4, [r6, #100]	; 0x64
   83020:	6134      	str	r4, [r6, #16]
   83022:	6174      	str	r4, [r6, #20]
   83024:	61b4      	str	r4, [r6, #24]
   83026:	2208      	movs	r2, #8
   83028:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   8302c:	9301      	str	r3, [sp, #4]
   8302e:	f7fe ff11 	bl	81e54 <memset>
   83032:	68fd      	ldr	r5, [r7, #12]
   83034:	2012      	movs	r0, #18
   83036:	2202      	movs	r2, #2
   83038:	61f6      	str	r6, [r6, #28]
   8303a:	f8c6 b020 	str.w	fp, [r6, #32]
   8303e:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   83042:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   83046:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   8304a:	4621      	mov	r1, r4
   8304c:	81a8      	strh	r0, [r5, #12]
   8304e:	81ea      	strh	r2, [r5, #14]
   83050:	602c      	str	r4, [r5, #0]
   83052:	606c      	str	r4, [r5, #4]
   83054:	60ac      	str	r4, [r5, #8]
   83056:	666c      	str	r4, [r5, #100]	; 0x64
   83058:	612c      	str	r4, [r5, #16]
   8305a:	616c      	str	r4, [r5, #20]
   8305c:	61ac      	str	r4, [r5, #24]
   8305e:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   83062:	2208      	movs	r2, #8
   83064:	f7fe fef6 	bl	81e54 <memset>
   83068:	9b01      	ldr	r3, [sp, #4]
   8306a:	61ed      	str	r5, [r5, #28]
   8306c:	f8c5 b020 	str.w	fp, [r5, #32]
   83070:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   83074:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   83078:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   8307c:	63bb      	str	r3, [r7, #56]	; 0x38
   8307e:	b003      	add	sp, #12
   83080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83084:	00082f99 	.word	0x00082f99
   83088:	00084399 	.word	0x00084399
   8308c:	000843bd 	.word	0x000843bd
   83090:	000843f5 	.word	0x000843f5
   83094:	00084415 	.word	0x00084415

00083098 <__sfp_lock_acquire>:
   83098:	4770      	bx	lr
   8309a:	bf00      	nop

0008309c <__sfp_lock_release>:
   8309c:	4770      	bx	lr
   8309e:	bf00      	nop

000830a0 <__libc_fini_array>:
   830a0:	b538      	push	{r3, r4, r5, lr}
   830a2:	4d09      	ldr	r5, [pc, #36]	; (830c8 <__libc_fini_array+0x28>)
   830a4:	4c09      	ldr	r4, [pc, #36]	; (830cc <__libc_fini_array+0x2c>)
   830a6:	1b64      	subs	r4, r4, r5
   830a8:	10a4      	asrs	r4, r4, #2
   830aa:	bf18      	it	ne
   830ac:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
   830b0:	d005      	beq.n	830be <__libc_fini_array+0x1e>
   830b2:	3c01      	subs	r4, #1
   830b4:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   830b8:	4798      	blx	r3
   830ba:	2c00      	cmp	r4, #0
   830bc:	d1f9      	bne.n	830b2 <__libc_fini_array+0x12>
   830be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   830c2:	f001 bbbb 	b.w	8483c <_fini>
   830c6:	bf00      	nop
   830c8:	00084848 	.word	0x00084848
   830cc:	0008484c 	.word	0x0008484c

000830d0 <_fputwc_r>:
   830d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   830d4:	8993      	ldrh	r3, [r2, #12]
   830d6:	460f      	mov	r7, r1
   830d8:	0499      	lsls	r1, r3, #18
   830da:	b082      	sub	sp, #8
   830dc:	4614      	mov	r4, r2
   830de:	4680      	mov	r8, r0
   830e0:	d406      	bmi.n	830f0 <_fputwc_r+0x20>
   830e2:	6e52      	ldr	r2, [r2, #100]	; 0x64
   830e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   830e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   830ec:	81a3      	strh	r3, [r4, #12]
   830ee:	6662      	str	r2, [r4, #100]	; 0x64
   830f0:	f000 fb1c 	bl	8372c <__locale_mb_cur_max>
   830f4:	2801      	cmp	r0, #1
   830f6:	d03e      	beq.n	83176 <_fputwc_r+0xa6>
   830f8:	463a      	mov	r2, r7
   830fa:	4640      	mov	r0, r8
   830fc:	a901      	add	r1, sp, #4
   830fe:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   83102:	f001 fa0f 	bl	84524 <_wcrtomb_r>
   83106:	1c42      	adds	r2, r0, #1
   83108:	4606      	mov	r6, r0
   8310a:	d02d      	beq.n	83168 <_fputwc_r+0x98>
   8310c:	2800      	cmp	r0, #0
   8310e:	d03a      	beq.n	83186 <_fputwc_r+0xb6>
   83110:	f89d 1004 	ldrb.w	r1, [sp, #4]
   83114:	2500      	movs	r5, #0
   83116:	e009      	b.n	8312c <_fputwc_r+0x5c>
   83118:	6823      	ldr	r3, [r4, #0]
   8311a:	7019      	strb	r1, [r3, #0]
   8311c:	6823      	ldr	r3, [r4, #0]
   8311e:	3301      	adds	r3, #1
   83120:	6023      	str	r3, [r4, #0]
   83122:	3501      	adds	r5, #1
   83124:	42b5      	cmp	r5, r6
   83126:	d22e      	bcs.n	83186 <_fputwc_r+0xb6>
   83128:	ab01      	add	r3, sp, #4
   8312a:	5ce9      	ldrb	r1, [r5, r3]
   8312c:	68a3      	ldr	r3, [r4, #8]
   8312e:	3b01      	subs	r3, #1
   83130:	2b00      	cmp	r3, #0
   83132:	60a3      	str	r3, [r4, #8]
   83134:	daf0      	bge.n	83118 <_fputwc_r+0x48>
   83136:	69a2      	ldr	r2, [r4, #24]
   83138:	4293      	cmp	r3, r2
   8313a:	db06      	blt.n	8314a <_fputwc_r+0x7a>
   8313c:	6823      	ldr	r3, [r4, #0]
   8313e:	7019      	strb	r1, [r3, #0]
   83140:	6823      	ldr	r3, [r4, #0]
   83142:	7819      	ldrb	r1, [r3, #0]
   83144:	3301      	adds	r3, #1
   83146:	290a      	cmp	r1, #10
   83148:	d1ea      	bne.n	83120 <_fputwc_r+0x50>
   8314a:	4640      	mov	r0, r8
   8314c:	4622      	mov	r2, r4
   8314e:	f001 f995 	bl	8447c <__swbuf_r>
   83152:	f1b0 33ff 	subs.w	r3, r0, #4294967295
   83156:	4258      	negs	r0, r3
   83158:	4158      	adcs	r0, r3
   8315a:	2800      	cmp	r0, #0
   8315c:	d0e1      	beq.n	83122 <_fputwc_r+0x52>
   8315e:	f04f 30ff 	mov.w	r0, #4294967295
   83162:	b002      	add	sp, #8
   83164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83168:	89a3      	ldrh	r3, [r4, #12]
   8316a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8316e:	81a3      	strh	r3, [r4, #12]
   83170:	b002      	add	sp, #8
   83172:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83176:	1e7b      	subs	r3, r7, #1
   83178:	2bfe      	cmp	r3, #254	; 0xfe
   8317a:	d8bd      	bhi.n	830f8 <_fputwc_r+0x28>
   8317c:	b2f9      	uxtb	r1, r7
   8317e:	4606      	mov	r6, r0
   83180:	f88d 1004 	strb.w	r1, [sp, #4]
   83184:	e7c6      	b.n	83114 <_fputwc_r+0x44>
   83186:	4638      	mov	r0, r7
   83188:	b002      	add	sp, #8
   8318a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8318e:	bf00      	nop

00083190 <_malloc_trim_r>:
   83190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83192:	4d23      	ldr	r5, [pc, #140]	; (83220 <_malloc_trim_r+0x90>)
   83194:	460f      	mov	r7, r1
   83196:	4604      	mov	r4, r0
   83198:	f000 ff08 	bl	83fac <__malloc_lock>
   8319c:	68ab      	ldr	r3, [r5, #8]
   8319e:	685e      	ldr	r6, [r3, #4]
   831a0:	f026 0603 	bic.w	r6, r6, #3
   831a4:	1bf1      	subs	r1, r6, r7
   831a6:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   831aa:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   831ae:	f021 010f 	bic.w	r1, r1, #15
   831b2:	f5a1 5780 	sub.w	r7, r1, #4096	; 0x1000
   831b6:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
   831ba:	db07      	blt.n	831cc <_malloc_trim_r+0x3c>
   831bc:	4620      	mov	r0, r4
   831be:	2100      	movs	r1, #0
   831c0:	f001 f8d8 	bl	84374 <_sbrk_r>
   831c4:	68ab      	ldr	r3, [r5, #8]
   831c6:	4433      	add	r3, r6
   831c8:	4298      	cmp	r0, r3
   831ca:	d004      	beq.n	831d6 <_malloc_trim_r+0x46>
   831cc:	4620      	mov	r0, r4
   831ce:	f000 feef 	bl	83fb0 <__malloc_unlock>
   831d2:	2000      	movs	r0, #0
   831d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   831d6:	4620      	mov	r0, r4
   831d8:	4279      	negs	r1, r7
   831da:	f001 f8cb 	bl	84374 <_sbrk_r>
   831de:	3001      	adds	r0, #1
   831e0:	d00d      	beq.n	831fe <_malloc_trim_r+0x6e>
   831e2:	4b10      	ldr	r3, [pc, #64]	; (83224 <_malloc_trim_r+0x94>)
   831e4:	68aa      	ldr	r2, [r5, #8]
   831e6:	6819      	ldr	r1, [r3, #0]
   831e8:	1bf6      	subs	r6, r6, r7
   831ea:	f046 0601 	orr.w	r6, r6, #1
   831ee:	4620      	mov	r0, r4
   831f0:	1bc9      	subs	r1, r1, r7
   831f2:	6056      	str	r6, [r2, #4]
   831f4:	6019      	str	r1, [r3, #0]
   831f6:	f000 fedb 	bl	83fb0 <__malloc_unlock>
   831fa:	2001      	movs	r0, #1
   831fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   831fe:	4620      	mov	r0, r4
   83200:	2100      	movs	r1, #0
   83202:	f001 f8b7 	bl	84374 <_sbrk_r>
   83206:	68ab      	ldr	r3, [r5, #8]
   83208:	1ac2      	subs	r2, r0, r3
   8320a:	2a0f      	cmp	r2, #15
   8320c:	ddde      	ble.n	831cc <_malloc_trim_r+0x3c>
   8320e:	4d06      	ldr	r5, [pc, #24]	; (83228 <_malloc_trim_r+0x98>)
   83210:	4904      	ldr	r1, [pc, #16]	; (83224 <_malloc_trim_r+0x94>)
   83212:	682d      	ldr	r5, [r5, #0]
   83214:	f042 0201 	orr.w	r2, r2, #1
   83218:	1b40      	subs	r0, r0, r5
   8321a:	605a      	str	r2, [r3, #4]
   8321c:	6008      	str	r0, [r1, #0]
   8321e:	e7d5      	b.n	831cc <_malloc_trim_r+0x3c>
   83220:	20070590 	.word	0x20070590
   83224:	20070aec 	.word	0x20070aec
   83228:	2007099c 	.word	0x2007099c

0008322c <_free_r>:
   8322c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83230:	460d      	mov	r5, r1
   83232:	4606      	mov	r6, r0
   83234:	2900      	cmp	r1, #0
   83236:	d055      	beq.n	832e4 <_free_r+0xb8>
   83238:	f000 feb8 	bl	83fac <__malloc_lock>
   8323c:	f855 1c04 	ldr.w	r1, [r5, #-4]
   83240:	f8df c170 	ldr.w	ip, [pc, #368]	; 833b4 <_free_r+0x188>
   83244:	f1a5 0408 	sub.w	r4, r5, #8
   83248:	f021 0301 	bic.w	r3, r1, #1
   8324c:	18e2      	adds	r2, r4, r3
   8324e:	f8dc 0008 	ldr.w	r0, [ip, #8]
   83252:	6857      	ldr	r7, [r2, #4]
   83254:	4290      	cmp	r0, r2
   83256:	f027 0703 	bic.w	r7, r7, #3
   8325a:	d068      	beq.n	8332e <_free_r+0x102>
   8325c:	f011 0101 	ands.w	r1, r1, #1
   83260:	6057      	str	r7, [r2, #4]
   83262:	d032      	beq.n	832ca <_free_r+0x9e>
   83264:	2100      	movs	r1, #0
   83266:	19d0      	adds	r0, r2, r7
   83268:	6840      	ldr	r0, [r0, #4]
   8326a:	07c0      	lsls	r0, r0, #31
   8326c:	d406      	bmi.n	8327c <_free_r+0x50>
   8326e:	443b      	add	r3, r7
   83270:	6890      	ldr	r0, [r2, #8]
   83272:	2900      	cmp	r1, #0
   83274:	d04d      	beq.n	83312 <_free_r+0xe6>
   83276:	68d2      	ldr	r2, [r2, #12]
   83278:	60c2      	str	r2, [r0, #12]
   8327a:	6090      	str	r0, [r2, #8]
   8327c:	f043 0201 	orr.w	r2, r3, #1
   83280:	6062      	str	r2, [r4, #4]
   83282:	50e3      	str	r3, [r4, r3]
   83284:	b9e1      	cbnz	r1, 832c0 <_free_r+0x94>
   83286:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   8328a:	d32d      	bcc.n	832e8 <_free_r+0xbc>
   8328c:	0a5a      	lsrs	r2, r3, #9
   8328e:	2a04      	cmp	r2, #4
   83290:	d869      	bhi.n	83366 <_free_r+0x13a>
   83292:	0998      	lsrs	r0, r3, #6
   83294:	3038      	adds	r0, #56	; 0x38
   83296:	0041      	lsls	r1, r0, #1
   83298:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
   8329c:	f8dc 2008 	ldr.w	r2, [ip, #8]
   832a0:	4944      	ldr	r1, [pc, #272]	; (833b4 <_free_r+0x188>)
   832a2:	4562      	cmp	r2, ip
   832a4:	d065      	beq.n	83372 <_free_r+0x146>
   832a6:	6851      	ldr	r1, [r2, #4]
   832a8:	f021 0103 	bic.w	r1, r1, #3
   832ac:	428b      	cmp	r3, r1
   832ae:	d202      	bcs.n	832b6 <_free_r+0x8a>
   832b0:	6892      	ldr	r2, [r2, #8]
   832b2:	4594      	cmp	ip, r2
   832b4:	d1f7      	bne.n	832a6 <_free_r+0x7a>
   832b6:	68d3      	ldr	r3, [r2, #12]
   832b8:	60e3      	str	r3, [r4, #12]
   832ba:	60a2      	str	r2, [r4, #8]
   832bc:	609c      	str	r4, [r3, #8]
   832be:	60d4      	str	r4, [r2, #12]
   832c0:	4630      	mov	r0, r6
   832c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   832c6:	f000 be73 	b.w	83fb0 <__malloc_unlock>
   832ca:	f855 5c08 	ldr.w	r5, [r5, #-8]
   832ce:	f10c 0808 	add.w	r8, ip, #8
   832d2:	1b64      	subs	r4, r4, r5
   832d4:	68a0      	ldr	r0, [r4, #8]
   832d6:	442b      	add	r3, r5
   832d8:	4540      	cmp	r0, r8
   832da:	d042      	beq.n	83362 <_free_r+0x136>
   832dc:	68e5      	ldr	r5, [r4, #12]
   832de:	60c5      	str	r5, [r0, #12]
   832e0:	60a8      	str	r0, [r5, #8]
   832e2:	e7c0      	b.n	83266 <_free_r+0x3a>
   832e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   832e8:	08db      	lsrs	r3, r3, #3
   832ea:	109a      	asrs	r2, r3, #2
   832ec:	2001      	movs	r0, #1
   832ee:	4090      	lsls	r0, r2
   832f0:	f8dc 1004 	ldr.w	r1, [ip, #4]
   832f4:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
   832f8:	689a      	ldr	r2, [r3, #8]
   832fa:	4301      	orrs	r1, r0
   832fc:	60a2      	str	r2, [r4, #8]
   832fe:	60e3      	str	r3, [r4, #12]
   83300:	f8cc 1004 	str.w	r1, [ip, #4]
   83304:	4630      	mov	r0, r6
   83306:	609c      	str	r4, [r3, #8]
   83308:	60d4      	str	r4, [r2, #12]
   8330a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8330e:	f000 be4f 	b.w	83fb0 <__malloc_unlock>
   83312:	4d29      	ldr	r5, [pc, #164]	; (833b8 <_free_r+0x18c>)
   83314:	42a8      	cmp	r0, r5
   83316:	d1ae      	bne.n	83276 <_free_r+0x4a>
   83318:	f043 0201 	orr.w	r2, r3, #1
   8331c:	f8cc 4014 	str.w	r4, [ip, #20]
   83320:	f8cc 4010 	str.w	r4, [ip, #16]
   83324:	60e0      	str	r0, [r4, #12]
   83326:	60a0      	str	r0, [r4, #8]
   83328:	6062      	str	r2, [r4, #4]
   8332a:	50e3      	str	r3, [r4, r3]
   8332c:	e7c8      	b.n	832c0 <_free_r+0x94>
   8332e:	441f      	add	r7, r3
   83330:	07cb      	lsls	r3, r1, #31
   83332:	d407      	bmi.n	83344 <_free_r+0x118>
   83334:	f855 1c08 	ldr.w	r1, [r5, #-8]
   83338:	1a64      	subs	r4, r4, r1
   8333a:	68e3      	ldr	r3, [r4, #12]
   8333c:	68a2      	ldr	r2, [r4, #8]
   8333e:	440f      	add	r7, r1
   83340:	60d3      	str	r3, [r2, #12]
   83342:	609a      	str	r2, [r3, #8]
   83344:	4b1d      	ldr	r3, [pc, #116]	; (833bc <_free_r+0x190>)
   83346:	f047 0201 	orr.w	r2, r7, #1
   8334a:	681b      	ldr	r3, [r3, #0]
   8334c:	6062      	str	r2, [r4, #4]
   8334e:	429f      	cmp	r7, r3
   83350:	f8cc 4008 	str.w	r4, [ip, #8]
   83354:	d3b4      	bcc.n	832c0 <_free_r+0x94>
   83356:	4b1a      	ldr	r3, [pc, #104]	; (833c0 <_free_r+0x194>)
   83358:	4630      	mov	r0, r6
   8335a:	6819      	ldr	r1, [r3, #0]
   8335c:	f7ff ff18 	bl	83190 <_malloc_trim_r>
   83360:	e7ae      	b.n	832c0 <_free_r+0x94>
   83362:	2101      	movs	r1, #1
   83364:	e77f      	b.n	83266 <_free_r+0x3a>
   83366:	2a14      	cmp	r2, #20
   83368:	d80b      	bhi.n	83382 <_free_r+0x156>
   8336a:	f102 005b 	add.w	r0, r2, #91	; 0x5b
   8336e:	0041      	lsls	r1, r0, #1
   83370:	e792      	b.n	83298 <_free_r+0x6c>
   83372:	1080      	asrs	r0, r0, #2
   83374:	2501      	movs	r5, #1
   83376:	4085      	lsls	r5, r0
   83378:	6848      	ldr	r0, [r1, #4]
   8337a:	4613      	mov	r3, r2
   8337c:	4328      	orrs	r0, r5
   8337e:	6048      	str	r0, [r1, #4]
   83380:	e79a      	b.n	832b8 <_free_r+0x8c>
   83382:	2a54      	cmp	r2, #84	; 0x54
   83384:	d803      	bhi.n	8338e <_free_r+0x162>
   83386:	0b18      	lsrs	r0, r3, #12
   83388:	306e      	adds	r0, #110	; 0x6e
   8338a:	0041      	lsls	r1, r0, #1
   8338c:	e784      	b.n	83298 <_free_r+0x6c>
   8338e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   83392:	d803      	bhi.n	8339c <_free_r+0x170>
   83394:	0bd8      	lsrs	r0, r3, #15
   83396:	3077      	adds	r0, #119	; 0x77
   83398:	0041      	lsls	r1, r0, #1
   8339a:	e77d      	b.n	83298 <_free_r+0x6c>
   8339c:	f240 5154 	movw	r1, #1364	; 0x554
   833a0:	428a      	cmp	r2, r1
   833a2:	d803      	bhi.n	833ac <_free_r+0x180>
   833a4:	0c98      	lsrs	r0, r3, #18
   833a6:	307c      	adds	r0, #124	; 0x7c
   833a8:	0041      	lsls	r1, r0, #1
   833aa:	e775      	b.n	83298 <_free_r+0x6c>
   833ac:	21fc      	movs	r1, #252	; 0xfc
   833ae:	207e      	movs	r0, #126	; 0x7e
   833b0:	e772      	b.n	83298 <_free_r+0x6c>
   833b2:	bf00      	nop
   833b4:	20070590 	.word	0x20070590
   833b8:	20070598 	.word	0x20070598
   833bc:	20070998 	.word	0x20070998
   833c0:	20070ae8 	.word	0x20070ae8

000833c4 <__sfvwrite_r>:
   833c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   833c8:	6893      	ldr	r3, [r2, #8]
   833ca:	b083      	sub	sp, #12
   833cc:	4616      	mov	r6, r2
   833ce:	4681      	mov	r9, r0
   833d0:	460c      	mov	r4, r1
   833d2:	b32b      	cbz	r3, 83420 <__sfvwrite_r+0x5c>
   833d4:	898b      	ldrh	r3, [r1, #12]
   833d6:	0719      	lsls	r1, r3, #28
   833d8:	d526      	bpl.n	83428 <__sfvwrite_r+0x64>
   833da:	6922      	ldr	r2, [r4, #16]
   833dc:	b322      	cbz	r2, 83428 <__sfvwrite_r+0x64>
   833de:	f003 0202 	and.w	r2, r3, #2
   833e2:	b292      	uxth	r2, r2
   833e4:	6835      	ldr	r5, [r6, #0]
   833e6:	2a00      	cmp	r2, #0
   833e8:	d02c      	beq.n	83444 <__sfvwrite_r+0x80>
   833ea:	f04f 0a00 	mov.w	sl, #0
   833ee:	f8df b2e8 	ldr.w	fp, [pc, #744]	; 836d8 <__sfvwrite_r+0x314>
   833f2:	46d0      	mov	r8, sl
   833f4:	45d8      	cmp	r8, fp
   833f6:	bf34      	ite	cc
   833f8:	4643      	movcc	r3, r8
   833fa:	465b      	movcs	r3, fp
   833fc:	4652      	mov	r2, sl
   833fe:	4648      	mov	r0, r9
   83400:	f1b8 0f00 	cmp.w	r8, #0
   83404:	d04f      	beq.n	834a6 <__sfvwrite_r+0xe2>
   83406:	69e1      	ldr	r1, [r4, #28]
   83408:	6a67      	ldr	r7, [r4, #36]	; 0x24
   8340a:	47b8      	blx	r7
   8340c:	2800      	cmp	r0, #0
   8340e:	dd56      	ble.n	834be <__sfvwrite_r+0xfa>
   83410:	68b3      	ldr	r3, [r6, #8]
   83412:	4482      	add	sl, r0
   83414:	1a1b      	subs	r3, r3, r0
   83416:	ebc0 0808 	rsb	r8, r0, r8
   8341a:	60b3      	str	r3, [r6, #8]
   8341c:	2b00      	cmp	r3, #0
   8341e:	d1e9      	bne.n	833f4 <__sfvwrite_r+0x30>
   83420:	2000      	movs	r0, #0
   83422:	b003      	add	sp, #12
   83424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83428:	4648      	mov	r0, r9
   8342a:	4621      	mov	r1, r4
   8342c:	f7ff fc88 	bl	82d40 <__swsetup_r>
   83430:	2800      	cmp	r0, #0
   83432:	f040 8148 	bne.w	836c6 <__sfvwrite_r+0x302>
   83436:	89a3      	ldrh	r3, [r4, #12]
   83438:	6835      	ldr	r5, [r6, #0]
   8343a:	f003 0202 	and.w	r2, r3, #2
   8343e:	b292      	uxth	r2, r2
   83440:	2a00      	cmp	r2, #0
   83442:	d1d2      	bne.n	833ea <__sfvwrite_r+0x26>
   83444:	f013 0a01 	ands.w	sl, r3, #1
   83448:	d142      	bne.n	834d0 <__sfvwrite_r+0x10c>
   8344a:	46d0      	mov	r8, sl
   8344c:	f1b8 0f00 	cmp.w	r8, #0
   83450:	d023      	beq.n	8349a <__sfvwrite_r+0xd6>
   83452:	059a      	lsls	r2, r3, #22
   83454:	68a7      	ldr	r7, [r4, #8]
   83456:	d576      	bpl.n	83546 <__sfvwrite_r+0x182>
   83458:	45b8      	cmp	r8, r7
   8345a:	f0c0 80a4 	bcc.w	835a6 <__sfvwrite_r+0x1e2>
   8345e:	f413 6f90 	tst.w	r3, #1152	; 0x480
   83462:	f040 80b2 	bne.w	835ca <__sfvwrite_r+0x206>
   83466:	6820      	ldr	r0, [r4, #0]
   83468:	46bb      	mov	fp, r7
   8346a:	4651      	mov	r1, sl
   8346c:	465a      	mov	r2, fp
   8346e:	f000 fd37 	bl	83ee0 <memmove>
   83472:	68a2      	ldr	r2, [r4, #8]
   83474:	6821      	ldr	r1, [r4, #0]
   83476:	1bd2      	subs	r2, r2, r7
   83478:	eb01 030b 	add.w	r3, r1, fp
   8347c:	60a2      	str	r2, [r4, #8]
   8347e:	6023      	str	r3, [r4, #0]
   83480:	4642      	mov	r2, r8
   83482:	68b3      	ldr	r3, [r6, #8]
   83484:	4492      	add	sl, r2
   83486:	1a9b      	subs	r3, r3, r2
   83488:	ebc2 0808 	rsb	r8, r2, r8
   8348c:	60b3      	str	r3, [r6, #8]
   8348e:	2b00      	cmp	r3, #0
   83490:	d0c6      	beq.n	83420 <__sfvwrite_r+0x5c>
   83492:	89a3      	ldrh	r3, [r4, #12]
   83494:	f1b8 0f00 	cmp.w	r8, #0
   83498:	d1db      	bne.n	83452 <__sfvwrite_r+0x8e>
   8349a:	f8d5 a000 	ldr.w	sl, [r5]
   8349e:	f8d5 8004 	ldr.w	r8, [r5, #4]
   834a2:	3508      	adds	r5, #8
   834a4:	e7d2      	b.n	8344c <__sfvwrite_r+0x88>
   834a6:	f8d5 a000 	ldr.w	sl, [r5]
   834aa:	f8d5 8004 	ldr.w	r8, [r5, #4]
   834ae:	3508      	adds	r5, #8
   834b0:	e7a0      	b.n	833f4 <__sfvwrite_r+0x30>
   834b2:	4648      	mov	r0, r9
   834b4:	4621      	mov	r1, r4
   834b6:	f7ff fd59 	bl	82f6c <_fflush_r>
   834ba:	2800      	cmp	r0, #0
   834bc:	d059      	beq.n	83572 <__sfvwrite_r+0x1ae>
   834be:	89a3      	ldrh	r3, [r4, #12]
   834c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   834c4:	f04f 30ff 	mov.w	r0, #4294967295
   834c8:	81a3      	strh	r3, [r4, #12]
   834ca:	b003      	add	sp, #12
   834cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   834d0:	4692      	mov	sl, r2
   834d2:	9201      	str	r2, [sp, #4]
   834d4:	4693      	mov	fp, r2
   834d6:	4690      	mov	r8, r2
   834d8:	f1b8 0f00 	cmp.w	r8, #0
   834dc:	d02b      	beq.n	83536 <__sfvwrite_r+0x172>
   834de:	9f01      	ldr	r7, [sp, #4]
   834e0:	2f00      	cmp	r7, #0
   834e2:	d064      	beq.n	835ae <__sfvwrite_r+0x1ea>
   834e4:	6820      	ldr	r0, [r4, #0]
   834e6:	6921      	ldr	r1, [r4, #16]
   834e8:	45c2      	cmp	sl, r8
   834ea:	bf34      	ite	cc
   834ec:	4653      	movcc	r3, sl
   834ee:	4643      	movcs	r3, r8
   834f0:	4288      	cmp	r0, r1
   834f2:	461f      	mov	r7, r3
   834f4:	f8d4 c008 	ldr.w	ip, [r4, #8]
   834f8:	6962      	ldr	r2, [r4, #20]
   834fa:	d903      	bls.n	83504 <__sfvwrite_r+0x140>
   834fc:	4494      	add	ip, r2
   834fe:	4563      	cmp	r3, ip
   83500:	f300 80ae 	bgt.w	83660 <__sfvwrite_r+0x29c>
   83504:	4293      	cmp	r3, r2
   83506:	db36      	blt.n	83576 <__sfvwrite_r+0x1b2>
   83508:	4613      	mov	r3, r2
   8350a:	6a67      	ldr	r7, [r4, #36]	; 0x24
   8350c:	4648      	mov	r0, r9
   8350e:	69e1      	ldr	r1, [r4, #28]
   83510:	465a      	mov	r2, fp
   83512:	47b8      	blx	r7
   83514:	1e07      	subs	r7, r0, #0
   83516:	ddd2      	ble.n	834be <__sfvwrite_r+0xfa>
   83518:	ebba 0a07 	subs.w	sl, sl, r7
   8351c:	d03a      	beq.n	83594 <__sfvwrite_r+0x1d0>
   8351e:	68b3      	ldr	r3, [r6, #8]
   83520:	44bb      	add	fp, r7
   83522:	1bdb      	subs	r3, r3, r7
   83524:	ebc7 0808 	rsb	r8, r7, r8
   83528:	60b3      	str	r3, [r6, #8]
   8352a:	2b00      	cmp	r3, #0
   8352c:	f43f af78 	beq.w	83420 <__sfvwrite_r+0x5c>
   83530:	f1b8 0f00 	cmp.w	r8, #0
   83534:	d1d3      	bne.n	834de <__sfvwrite_r+0x11a>
   83536:	2700      	movs	r7, #0
   83538:	f8d5 b000 	ldr.w	fp, [r5]
   8353c:	f8d5 8004 	ldr.w	r8, [r5, #4]
   83540:	9701      	str	r7, [sp, #4]
   83542:	3508      	adds	r5, #8
   83544:	e7c8      	b.n	834d8 <__sfvwrite_r+0x114>
   83546:	6820      	ldr	r0, [r4, #0]
   83548:	6923      	ldr	r3, [r4, #16]
   8354a:	4298      	cmp	r0, r3
   8354c:	d802      	bhi.n	83554 <__sfvwrite_r+0x190>
   8354e:	6963      	ldr	r3, [r4, #20]
   83550:	4598      	cmp	r8, r3
   83552:	d272      	bcs.n	8363a <__sfvwrite_r+0x276>
   83554:	45b8      	cmp	r8, r7
   83556:	bf38      	it	cc
   83558:	4647      	movcc	r7, r8
   8355a:	463a      	mov	r2, r7
   8355c:	4651      	mov	r1, sl
   8355e:	f000 fcbf 	bl	83ee0 <memmove>
   83562:	68a3      	ldr	r3, [r4, #8]
   83564:	6822      	ldr	r2, [r4, #0]
   83566:	1bdb      	subs	r3, r3, r7
   83568:	443a      	add	r2, r7
   8356a:	60a3      	str	r3, [r4, #8]
   8356c:	6022      	str	r2, [r4, #0]
   8356e:	2b00      	cmp	r3, #0
   83570:	d09f      	beq.n	834b2 <__sfvwrite_r+0xee>
   83572:	463a      	mov	r2, r7
   83574:	e785      	b.n	83482 <__sfvwrite_r+0xbe>
   83576:	461a      	mov	r2, r3
   83578:	4659      	mov	r1, fp
   8357a:	9300      	str	r3, [sp, #0]
   8357c:	f000 fcb0 	bl	83ee0 <memmove>
   83580:	9b00      	ldr	r3, [sp, #0]
   83582:	68a1      	ldr	r1, [r4, #8]
   83584:	6822      	ldr	r2, [r4, #0]
   83586:	1ac9      	subs	r1, r1, r3
   83588:	ebba 0a07 	subs.w	sl, sl, r7
   8358c:	4413      	add	r3, r2
   8358e:	60a1      	str	r1, [r4, #8]
   83590:	6023      	str	r3, [r4, #0]
   83592:	d1c4      	bne.n	8351e <__sfvwrite_r+0x15a>
   83594:	4648      	mov	r0, r9
   83596:	4621      	mov	r1, r4
   83598:	f7ff fce8 	bl	82f6c <_fflush_r>
   8359c:	2800      	cmp	r0, #0
   8359e:	d18e      	bne.n	834be <__sfvwrite_r+0xfa>
   835a0:	f8cd a004 	str.w	sl, [sp, #4]
   835a4:	e7bb      	b.n	8351e <__sfvwrite_r+0x15a>
   835a6:	6820      	ldr	r0, [r4, #0]
   835a8:	4647      	mov	r7, r8
   835aa:	46c3      	mov	fp, r8
   835ac:	e75d      	b.n	8346a <__sfvwrite_r+0xa6>
   835ae:	4658      	mov	r0, fp
   835b0:	210a      	movs	r1, #10
   835b2:	4642      	mov	r2, r8
   835b4:	f000 fbd4 	bl	83d60 <memchr>
   835b8:	2800      	cmp	r0, #0
   835ba:	d07f      	beq.n	836bc <__sfvwrite_r+0x2f8>
   835bc:	f100 0a01 	add.w	sl, r0, #1
   835c0:	2701      	movs	r7, #1
   835c2:	ebcb 0a0a 	rsb	sl, fp, sl
   835c6:	9701      	str	r7, [sp, #4]
   835c8:	e78c      	b.n	834e4 <__sfvwrite_r+0x120>
   835ca:	6822      	ldr	r2, [r4, #0]
   835cc:	6921      	ldr	r1, [r4, #16]
   835ce:	6967      	ldr	r7, [r4, #20]
   835d0:	ebc1 0c02 	rsb	ip, r1, r2
   835d4:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   835d8:	f10c 0201 	add.w	r2, ip, #1
   835dc:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   835e0:	4442      	add	r2, r8
   835e2:	107f      	asrs	r7, r7, #1
   835e4:	4297      	cmp	r7, r2
   835e6:	bf34      	ite	cc
   835e8:	4617      	movcc	r7, r2
   835ea:	463a      	movcs	r2, r7
   835ec:	055b      	lsls	r3, r3, #21
   835ee:	d54f      	bpl.n	83690 <__sfvwrite_r+0x2cc>
   835f0:	4611      	mov	r1, r2
   835f2:	4648      	mov	r0, r9
   835f4:	f8cd c000 	str.w	ip, [sp]
   835f8:	f000 f916 	bl	83828 <_malloc_r>
   835fc:	f8dd c000 	ldr.w	ip, [sp]
   83600:	4683      	mov	fp, r0
   83602:	2800      	cmp	r0, #0
   83604:	d062      	beq.n	836cc <__sfvwrite_r+0x308>
   83606:	4662      	mov	r2, ip
   83608:	6921      	ldr	r1, [r4, #16]
   8360a:	f8cd c000 	str.w	ip, [sp]
   8360e:	f000 fbf1 	bl	83df4 <memcpy>
   83612:	89a2      	ldrh	r2, [r4, #12]
   83614:	f8dd c000 	ldr.w	ip, [sp]
   83618:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   8361c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   83620:	81a2      	strh	r2, [r4, #12]
   83622:	eb0b 000c 	add.w	r0, fp, ip
   83626:	ebcc 0207 	rsb	r2, ip, r7
   8362a:	f8c4 b010 	str.w	fp, [r4, #16]
   8362e:	6167      	str	r7, [r4, #20]
   83630:	6020      	str	r0, [r4, #0]
   83632:	60a2      	str	r2, [r4, #8]
   83634:	4647      	mov	r7, r8
   83636:	46c3      	mov	fp, r8
   83638:	e717      	b.n	8346a <__sfvwrite_r+0xa6>
   8363a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   8363e:	4590      	cmp	r8, r2
   83640:	bf38      	it	cc
   83642:	4642      	movcc	r2, r8
   83644:	fb92 f2f3 	sdiv	r2, r2, r3
   83648:	fb02 f303 	mul.w	r3, r2, r3
   8364c:	6a67      	ldr	r7, [r4, #36]	; 0x24
   8364e:	4648      	mov	r0, r9
   83650:	69e1      	ldr	r1, [r4, #28]
   83652:	4652      	mov	r2, sl
   83654:	47b8      	blx	r7
   83656:	2800      	cmp	r0, #0
   83658:	f77f af31 	ble.w	834be <__sfvwrite_r+0xfa>
   8365c:	4602      	mov	r2, r0
   8365e:	e710      	b.n	83482 <__sfvwrite_r+0xbe>
   83660:	4662      	mov	r2, ip
   83662:	4659      	mov	r1, fp
   83664:	f8cd c000 	str.w	ip, [sp]
   83668:	f000 fc3a 	bl	83ee0 <memmove>
   8366c:	f8dd c000 	ldr.w	ip, [sp]
   83670:	6823      	ldr	r3, [r4, #0]
   83672:	4648      	mov	r0, r9
   83674:	4463      	add	r3, ip
   83676:	6023      	str	r3, [r4, #0]
   83678:	4621      	mov	r1, r4
   8367a:	f8cd c000 	str.w	ip, [sp]
   8367e:	f7ff fc75 	bl	82f6c <_fflush_r>
   83682:	f8dd c000 	ldr.w	ip, [sp]
   83686:	2800      	cmp	r0, #0
   83688:	f47f af19 	bne.w	834be <__sfvwrite_r+0xfa>
   8368c:	4667      	mov	r7, ip
   8368e:	e743      	b.n	83518 <__sfvwrite_r+0x154>
   83690:	4648      	mov	r0, r9
   83692:	f8cd c000 	str.w	ip, [sp]
   83696:	f000 fc8d 	bl	83fb4 <_realloc_r>
   8369a:	f8dd c000 	ldr.w	ip, [sp]
   8369e:	4683      	mov	fp, r0
   836a0:	2800      	cmp	r0, #0
   836a2:	d1be      	bne.n	83622 <__sfvwrite_r+0x25e>
   836a4:	4648      	mov	r0, r9
   836a6:	6921      	ldr	r1, [r4, #16]
   836a8:	f7ff fdc0 	bl	8322c <_free_r>
   836ac:	89a3      	ldrh	r3, [r4, #12]
   836ae:	220c      	movs	r2, #12
   836b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   836b4:	b29b      	uxth	r3, r3
   836b6:	f8c9 2000 	str.w	r2, [r9]
   836ba:	e701      	b.n	834c0 <__sfvwrite_r+0xfc>
   836bc:	2701      	movs	r7, #1
   836be:	f108 0a01 	add.w	sl, r8, #1
   836c2:	9701      	str	r7, [sp, #4]
   836c4:	e70e      	b.n	834e4 <__sfvwrite_r+0x120>
   836c6:	f04f 30ff 	mov.w	r0, #4294967295
   836ca:	e6aa      	b.n	83422 <__sfvwrite_r+0x5e>
   836cc:	230c      	movs	r3, #12
   836ce:	f8c9 3000 	str.w	r3, [r9]
   836d2:	89a3      	ldrh	r3, [r4, #12]
   836d4:	e6f4      	b.n	834c0 <__sfvwrite_r+0xfc>
   836d6:	bf00      	nop
   836d8:	7ffffc00 	.word	0x7ffffc00

000836dc <_fwalk>:
   836dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   836e0:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
   836e4:	4688      	mov	r8, r1
   836e6:	d019      	beq.n	8371c <_fwalk+0x40>
   836e8:	2600      	movs	r6, #0
   836ea:	687d      	ldr	r5, [r7, #4]
   836ec:	68bc      	ldr	r4, [r7, #8]
   836ee:	3d01      	subs	r5, #1
   836f0:	d40e      	bmi.n	83710 <_fwalk+0x34>
   836f2:	89a3      	ldrh	r3, [r4, #12]
   836f4:	3d01      	subs	r5, #1
   836f6:	2b01      	cmp	r3, #1
   836f8:	d906      	bls.n	83708 <_fwalk+0x2c>
   836fa:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   836fe:	4620      	mov	r0, r4
   83700:	3301      	adds	r3, #1
   83702:	d001      	beq.n	83708 <_fwalk+0x2c>
   83704:	47c0      	blx	r8
   83706:	4306      	orrs	r6, r0
   83708:	1c6b      	adds	r3, r5, #1
   8370a:	f104 0468 	add.w	r4, r4, #104	; 0x68
   8370e:	d1f0      	bne.n	836f2 <_fwalk+0x16>
   83710:	683f      	ldr	r7, [r7, #0]
   83712:	2f00      	cmp	r7, #0
   83714:	d1e9      	bne.n	836ea <_fwalk+0xe>
   83716:	4630      	mov	r0, r6
   83718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8371c:	463e      	mov	r6, r7
   8371e:	4630      	mov	r0, r6
   83720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00083724 <__locale_charset>:
   83724:	4800      	ldr	r0, [pc, #0]	; (83728 <__locale_charset+0x4>)
   83726:	4770      	bx	lr
   83728:	2007056c 	.word	0x2007056c

0008372c <__locale_mb_cur_max>:
   8372c:	4b01      	ldr	r3, [pc, #4]	; (83734 <__locale_mb_cur_max+0x8>)
   8372e:	6818      	ldr	r0, [r3, #0]
   83730:	4770      	bx	lr
   83732:	bf00      	nop
   83734:	2007058c 	.word	0x2007058c

00083738 <__smakebuf_r>:
   83738:	b5f0      	push	{r4, r5, r6, r7, lr}
   8373a:	898b      	ldrh	r3, [r1, #12]
   8373c:	b091      	sub	sp, #68	; 0x44
   8373e:	b29a      	uxth	r2, r3
   83740:	0796      	lsls	r6, r2, #30
   83742:	460c      	mov	r4, r1
   83744:	4605      	mov	r5, r0
   83746:	d437      	bmi.n	837b8 <__smakebuf_r+0x80>
   83748:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8374c:	2900      	cmp	r1, #0
   8374e:	db17      	blt.n	83780 <__smakebuf_r+0x48>
   83750:	aa01      	add	r2, sp, #4
   83752:	f000 ffdf 	bl	84714 <_fstat_r>
   83756:	2800      	cmp	r0, #0
   83758:	db10      	blt.n	8377c <__smakebuf_r+0x44>
   8375a:	9b02      	ldr	r3, [sp, #8]
   8375c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
   83760:	f5b3 5100 	subs.w	r1, r3, #8192	; 0x2000
   83764:	424f      	negs	r7, r1
   83766:	414f      	adcs	r7, r1
   83768:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   8376c:	d02c      	beq.n	837c8 <__smakebuf_r+0x90>
   8376e:	89a3      	ldrh	r3, [r4, #12]
   83770:	f44f 6680 	mov.w	r6, #1024	; 0x400
   83774:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   83778:	81a3      	strh	r3, [r4, #12]
   8377a:	e00b      	b.n	83794 <__smakebuf_r+0x5c>
   8377c:	89a3      	ldrh	r3, [r4, #12]
   8377e:	b29a      	uxth	r2, r3
   83780:	f012 0f80 	tst.w	r2, #128	; 0x80
   83784:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   83788:	81a3      	strh	r3, [r4, #12]
   8378a:	bf14      	ite	ne
   8378c:	2640      	movne	r6, #64	; 0x40
   8378e:	f44f 6680 	moveq.w	r6, #1024	; 0x400
   83792:	2700      	movs	r7, #0
   83794:	4628      	mov	r0, r5
   83796:	4631      	mov	r1, r6
   83798:	f000 f846 	bl	83828 <_malloc_r>
   8379c:	89a3      	ldrh	r3, [r4, #12]
   8379e:	2800      	cmp	r0, #0
   837a0:	d029      	beq.n	837f6 <__smakebuf_r+0xbe>
   837a2:	4a1b      	ldr	r2, [pc, #108]	; (83810 <__smakebuf_r+0xd8>)
   837a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   837a8:	63ea      	str	r2, [r5, #60]	; 0x3c
   837aa:	81a3      	strh	r3, [r4, #12]
   837ac:	6020      	str	r0, [r4, #0]
   837ae:	6120      	str	r0, [r4, #16]
   837b0:	6166      	str	r6, [r4, #20]
   837b2:	b9a7      	cbnz	r7, 837de <__smakebuf_r+0xa6>
   837b4:	b011      	add	sp, #68	; 0x44
   837b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   837b8:	f101 0343 	add.w	r3, r1, #67	; 0x43
   837bc:	2201      	movs	r2, #1
   837be:	600b      	str	r3, [r1, #0]
   837c0:	610b      	str	r3, [r1, #16]
   837c2:	614a      	str	r2, [r1, #20]
   837c4:	b011      	add	sp, #68	; 0x44
   837c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   837c8:	4a12      	ldr	r2, [pc, #72]	; (83814 <__smakebuf_r+0xdc>)
   837ca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   837cc:	4293      	cmp	r3, r2
   837ce:	d1ce      	bne.n	8376e <__smakebuf_r+0x36>
   837d0:	89a3      	ldrh	r3, [r4, #12]
   837d2:	f44f 6680 	mov.w	r6, #1024	; 0x400
   837d6:	4333      	orrs	r3, r6
   837d8:	81a3      	strh	r3, [r4, #12]
   837da:	64e6      	str	r6, [r4, #76]	; 0x4c
   837dc:	e7da      	b.n	83794 <__smakebuf_r+0x5c>
   837de:	4628      	mov	r0, r5
   837e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   837e4:	f000 ffaa 	bl	8473c <_isatty_r>
   837e8:	2800      	cmp	r0, #0
   837ea:	d0e3      	beq.n	837b4 <__smakebuf_r+0x7c>
   837ec:	89a3      	ldrh	r3, [r4, #12]
   837ee:	f043 0301 	orr.w	r3, r3, #1
   837f2:	81a3      	strh	r3, [r4, #12]
   837f4:	e7de      	b.n	837b4 <__smakebuf_r+0x7c>
   837f6:	059a      	lsls	r2, r3, #22
   837f8:	d4dc      	bmi.n	837b4 <__smakebuf_r+0x7c>
   837fa:	f104 0243 	add.w	r2, r4, #67	; 0x43
   837fe:	f043 0302 	orr.w	r3, r3, #2
   83802:	2101      	movs	r1, #1
   83804:	81a3      	strh	r3, [r4, #12]
   83806:	6022      	str	r2, [r4, #0]
   83808:	6122      	str	r2, [r4, #16]
   8380a:	6161      	str	r1, [r4, #20]
   8380c:	e7d2      	b.n	837b4 <__smakebuf_r+0x7c>
   8380e:	bf00      	nop
   83810:	00082f99 	.word	0x00082f99
   83814:	000843f5 	.word	0x000843f5

00083818 <malloc>:
   83818:	4b02      	ldr	r3, [pc, #8]	; (83824 <malloc+0xc>)
   8381a:	4601      	mov	r1, r0
   8381c:	6818      	ldr	r0, [r3, #0]
   8381e:	f000 b803 	b.w	83828 <_malloc_r>
   83822:	bf00      	nop
   83824:	20070568 	.word	0x20070568

00083828 <_malloc_r>:
   83828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8382c:	f101 050b 	add.w	r5, r1, #11
   83830:	2d16      	cmp	r5, #22
   83832:	b083      	sub	sp, #12
   83834:	4606      	mov	r6, r0
   83836:	d927      	bls.n	83888 <_malloc_r+0x60>
   83838:	f035 0507 	bics.w	r5, r5, #7
   8383c:	d427      	bmi.n	8388e <_malloc_r+0x66>
   8383e:	42a9      	cmp	r1, r5
   83840:	d825      	bhi.n	8388e <_malloc_r+0x66>
   83842:	4630      	mov	r0, r6
   83844:	f000 fbb2 	bl	83fac <__malloc_lock>
   83848:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   8384c:	d226      	bcs.n	8389c <_malloc_r+0x74>
   8384e:	4fc1      	ldr	r7, [pc, #772]	; (83b54 <_malloc_r+0x32c>)
   83850:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
   83854:	eb07 03cc 	add.w	r3, r7, ip, lsl #3
   83858:	68dc      	ldr	r4, [r3, #12]
   8385a:	429c      	cmp	r4, r3
   8385c:	f000 81d2 	beq.w	83c04 <_malloc_r+0x3dc>
   83860:	6863      	ldr	r3, [r4, #4]
   83862:	68e2      	ldr	r2, [r4, #12]
   83864:	f023 0303 	bic.w	r3, r3, #3
   83868:	4423      	add	r3, r4
   8386a:	6858      	ldr	r0, [r3, #4]
   8386c:	68a1      	ldr	r1, [r4, #8]
   8386e:	f040 0501 	orr.w	r5, r0, #1
   83872:	60ca      	str	r2, [r1, #12]
   83874:	4630      	mov	r0, r6
   83876:	6091      	str	r1, [r2, #8]
   83878:	605d      	str	r5, [r3, #4]
   8387a:	f000 fb99 	bl	83fb0 <__malloc_unlock>
   8387e:	3408      	adds	r4, #8
   83880:	4620      	mov	r0, r4
   83882:	b003      	add	sp, #12
   83884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83888:	2510      	movs	r5, #16
   8388a:	42a9      	cmp	r1, r5
   8388c:	d9d9      	bls.n	83842 <_malloc_r+0x1a>
   8388e:	2400      	movs	r4, #0
   83890:	230c      	movs	r3, #12
   83892:	4620      	mov	r0, r4
   83894:	6033      	str	r3, [r6, #0]
   83896:	b003      	add	sp, #12
   83898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8389c:	ea5f 2c55 	movs.w	ip, r5, lsr #9
   838a0:	f000 8089 	beq.w	839b6 <_malloc_r+0x18e>
   838a4:	f1bc 0f04 	cmp.w	ip, #4
   838a8:	f200 8160 	bhi.w	83b6c <_malloc_r+0x344>
   838ac:	ea4f 1c95 	mov.w	ip, r5, lsr #6
   838b0:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
   838b4:	ea4f 014c 	mov.w	r1, ip, lsl #1
   838b8:	4fa6      	ldr	r7, [pc, #664]	; (83b54 <_malloc_r+0x32c>)
   838ba:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   838be:	68cc      	ldr	r4, [r1, #12]
   838c0:	42a1      	cmp	r1, r4
   838c2:	d105      	bne.n	838d0 <_malloc_r+0xa8>
   838c4:	e00c      	b.n	838e0 <_malloc_r+0xb8>
   838c6:	2b00      	cmp	r3, #0
   838c8:	da79      	bge.n	839be <_malloc_r+0x196>
   838ca:	68e4      	ldr	r4, [r4, #12]
   838cc:	42a1      	cmp	r1, r4
   838ce:	d007      	beq.n	838e0 <_malloc_r+0xb8>
   838d0:	6862      	ldr	r2, [r4, #4]
   838d2:	f022 0203 	bic.w	r2, r2, #3
   838d6:	1b53      	subs	r3, r2, r5
   838d8:	2b0f      	cmp	r3, #15
   838da:	ddf4      	ble.n	838c6 <_malloc_r+0x9e>
   838dc:	f10c 3cff 	add.w	ip, ip, #4294967295
   838e0:	f10c 0c01 	add.w	ip, ip, #1
   838e4:	4b9b      	ldr	r3, [pc, #620]	; (83b54 <_malloc_r+0x32c>)
   838e6:	693c      	ldr	r4, [r7, #16]
   838e8:	f103 0e08 	add.w	lr, r3, #8
   838ec:	4574      	cmp	r4, lr
   838ee:	f000 817e 	beq.w	83bee <_malloc_r+0x3c6>
   838f2:	6861      	ldr	r1, [r4, #4]
   838f4:	f021 0103 	bic.w	r1, r1, #3
   838f8:	1b4a      	subs	r2, r1, r5
   838fa:	2a0f      	cmp	r2, #15
   838fc:	f300 8164 	bgt.w	83bc8 <_malloc_r+0x3a0>
   83900:	2a00      	cmp	r2, #0
   83902:	f8c3 e014 	str.w	lr, [r3, #20]
   83906:	f8c3 e010 	str.w	lr, [r3, #16]
   8390a:	da69      	bge.n	839e0 <_malloc_r+0x1b8>
   8390c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   83910:	f080 813a 	bcs.w	83b88 <_malloc_r+0x360>
   83914:	08c9      	lsrs	r1, r1, #3
   83916:	108a      	asrs	r2, r1, #2
   83918:	f04f 0801 	mov.w	r8, #1
   8391c:	fa08 f802 	lsl.w	r8, r8, r2
   83920:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   83924:	685a      	ldr	r2, [r3, #4]
   83926:	6888      	ldr	r0, [r1, #8]
   83928:	ea48 0202 	orr.w	r2, r8, r2
   8392c:	60a0      	str	r0, [r4, #8]
   8392e:	60e1      	str	r1, [r4, #12]
   83930:	605a      	str	r2, [r3, #4]
   83932:	608c      	str	r4, [r1, #8]
   83934:	60c4      	str	r4, [r0, #12]
   83936:	ea4f 03ac 	mov.w	r3, ip, asr #2
   8393a:	2001      	movs	r0, #1
   8393c:	4098      	lsls	r0, r3
   8393e:	4290      	cmp	r0, r2
   83940:	d85b      	bhi.n	839fa <_malloc_r+0x1d2>
   83942:	4202      	tst	r2, r0
   83944:	d106      	bne.n	83954 <_malloc_r+0x12c>
   83946:	f02c 0c03 	bic.w	ip, ip, #3
   8394a:	0040      	lsls	r0, r0, #1
   8394c:	4202      	tst	r2, r0
   8394e:	f10c 0c04 	add.w	ip, ip, #4
   83952:	d0fa      	beq.n	8394a <_malloc_r+0x122>
   83954:	eb07 08cc 	add.w	r8, r7, ip, lsl #3
   83958:	4644      	mov	r4, r8
   8395a:	46e1      	mov	r9, ip
   8395c:	68e3      	ldr	r3, [r4, #12]
   8395e:	429c      	cmp	r4, r3
   83960:	d107      	bne.n	83972 <_malloc_r+0x14a>
   83962:	e146      	b.n	83bf2 <_malloc_r+0x3ca>
   83964:	2a00      	cmp	r2, #0
   83966:	f280 8157 	bge.w	83c18 <_malloc_r+0x3f0>
   8396a:	68db      	ldr	r3, [r3, #12]
   8396c:	429c      	cmp	r4, r3
   8396e:	f000 8140 	beq.w	83bf2 <_malloc_r+0x3ca>
   83972:	6859      	ldr	r1, [r3, #4]
   83974:	f021 0103 	bic.w	r1, r1, #3
   83978:	1b4a      	subs	r2, r1, r5
   8397a:	2a0f      	cmp	r2, #15
   8397c:	ddf2      	ble.n	83964 <_malloc_r+0x13c>
   8397e:	461c      	mov	r4, r3
   83980:	f854 cf08 	ldr.w	ip, [r4, #8]!
   83984:	68d9      	ldr	r1, [r3, #12]
   83986:	f045 0901 	orr.w	r9, r5, #1
   8398a:	f042 0801 	orr.w	r8, r2, #1
   8398e:	441d      	add	r5, r3
   83990:	f8c3 9004 	str.w	r9, [r3, #4]
   83994:	4630      	mov	r0, r6
   83996:	f8cc 100c 	str.w	r1, [ip, #12]
   8399a:	f8c1 c008 	str.w	ip, [r1, #8]
   8399e:	617d      	str	r5, [r7, #20]
   839a0:	613d      	str	r5, [r7, #16]
   839a2:	f8c5 e00c 	str.w	lr, [r5, #12]
   839a6:	f8c5 e008 	str.w	lr, [r5, #8]
   839aa:	f8c5 8004 	str.w	r8, [r5, #4]
   839ae:	50aa      	str	r2, [r5, r2]
   839b0:	f000 fafe 	bl	83fb0 <__malloc_unlock>
   839b4:	e764      	b.n	83880 <_malloc_r+0x58>
   839b6:	217e      	movs	r1, #126	; 0x7e
   839b8:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
   839bc:	e77c      	b.n	838b8 <_malloc_r+0x90>
   839be:	4422      	add	r2, r4
   839c0:	6850      	ldr	r0, [r2, #4]
   839c2:	68e3      	ldr	r3, [r4, #12]
   839c4:	68a1      	ldr	r1, [r4, #8]
   839c6:	f040 0501 	orr.w	r5, r0, #1
   839ca:	60cb      	str	r3, [r1, #12]
   839cc:	4630      	mov	r0, r6
   839ce:	6099      	str	r1, [r3, #8]
   839d0:	6055      	str	r5, [r2, #4]
   839d2:	f000 faed 	bl	83fb0 <__malloc_unlock>
   839d6:	3408      	adds	r4, #8
   839d8:	4620      	mov	r0, r4
   839da:	b003      	add	sp, #12
   839dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   839e0:	4421      	add	r1, r4
   839e2:	684b      	ldr	r3, [r1, #4]
   839e4:	4630      	mov	r0, r6
   839e6:	f043 0301 	orr.w	r3, r3, #1
   839ea:	604b      	str	r3, [r1, #4]
   839ec:	f000 fae0 	bl	83fb0 <__malloc_unlock>
   839f0:	3408      	adds	r4, #8
   839f2:	4620      	mov	r0, r4
   839f4:	b003      	add	sp, #12
   839f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   839fa:	68bc      	ldr	r4, [r7, #8]
   839fc:	6863      	ldr	r3, [r4, #4]
   839fe:	f023 0903 	bic.w	r9, r3, #3
   83a02:	45a9      	cmp	r9, r5
   83a04:	d304      	bcc.n	83a10 <_malloc_r+0x1e8>
   83a06:	ebc5 0309 	rsb	r3, r5, r9
   83a0a:	2b0f      	cmp	r3, #15
   83a0c:	f300 8091 	bgt.w	83b32 <_malloc_r+0x30a>
   83a10:	4b51      	ldr	r3, [pc, #324]	; (83b58 <_malloc_r+0x330>)
   83a12:	4a52      	ldr	r2, [pc, #328]	; (83b5c <_malloc_r+0x334>)
   83a14:	6819      	ldr	r1, [r3, #0]
   83a16:	6813      	ldr	r3, [r2, #0]
   83a18:	eb05 0a01 	add.w	sl, r5, r1
   83a1c:	3301      	adds	r3, #1
   83a1e:	eb04 0b09 	add.w	fp, r4, r9
   83a22:	f000 8161 	beq.w	83ce8 <_malloc_r+0x4c0>
   83a26:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
   83a2a:	f10a 0a0f 	add.w	sl, sl, #15
   83a2e:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
   83a32:	f02a 0a0f 	bic.w	sl, sl, #15
   83a36:	4630      	mov	r0, r6
   83a38:	4651      	mov	r1, sl
   83a3a:	9201      	str	r2, [sp, #4]
   83a3c:	f000 fc9a 	bl	84374 <_sbrk_r>
   83a40:	f1b0 3fff 	cmp.w	r0, #4294967295
   83a44:	4680      	mov	r8, r0
   83a46:	9a01      	ldr	r2, [sp, #4]
   83a48:	f000 8101 	beq.w	83c4e <_malloc_r+0x426>
   83a4c:	4583      	cmp	fp, r0
   83a4e:	f200 80fb 	bhi.w	83c48 <_malloc_r+0x420>
   83a52:	f8df c114 	ldr.w	ip, [pc, #276]	; 83b68 <_malloc_r+0x340>
   83a56:	45c3      	cmp	fp, r8
   83a58:	f8dc 3000 	ldr.w	r3, [ip]
   83a5c:	4453      	add	r3, sl
   83a5e:	f8cc 3000 	str.w	r3, [ip]
   83a62:	f000 814a 	beq.w	83cfa <_malloc_r+0x4d2>
   83a66:	6812      	ldr	r2, [r2, #0]
   83a68:	493c      	ldr	r1, [pc, #240]	; (83b5c <_malloc_r+0x334>)
   83a6a:	3201      	adds	r2, #1
   83a6c:	bf1b      	ittet	ne
   83a6e:	ebcb 0b08 	rsbne	fp, fp, r8
   83a72:	445b      	addne	r3, fp
   83a74:	f8c1 8000 	streq.w	r8, [r1]
   83a78:	f8cc 3000 	strne.w	r3, [ip]
   83a7c:	f018 0307 	ands.w	r3, r8, #7
   83a80:	f000 8114 	beq.w	83cac <_malloc_r+0x484>
   83a84:	f1c3 0208 	rsb	r2, r3, #8
   83a88:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
   83a8c:	4490      	add	r8, r2
   83a8e:	3308      	adds	r3, #8
   83a90:	44c2      	add	sl, r8
   83a92:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
   83a96:	ebca 0a03 	rsb	sl, sl, r3
   83a9a:	4651      	mov	r1, sl
   83a9c:	4630      	mov	r0, r6
   83a9e:	f8cd c004 	str.w	ip, [sp, #4]
   83aa2:	f000 fc67 	bl	84374 <_sbrk_r>
   83aa6:	1c43      	adds	r3, r0, #1
   83aa8:	f8dd c004 	ldr.w	ip, [sp, #4]
   83aac:	f000 8135 	beq.w	83d1a <_malloc_r+0x4f2>
   83ab0:	ebc8 0200 	rsb	r2, r8, r0
   83ab4:	4452      	add	r2, sl
   83ab6:	f042 0201 	orr.w	r2, r2, #1
   83aba:	f8dc 3000 	ldr.w	r3, [ip]
   83abe:	42bc      	cmp	r4, r7
   83ac0:	4453      	add	r3, sl
   83ac2:	f8c7 8008 	str.w	r8, [r7, #8]
   83ac6:	f8cc 3000 	str.w	r3, [ip]
   83aca:	f8c8 2004 	str.w	r2, [r8, #4]
   83ace:	f8df a098 	ldr.w	sl, [pc, #152]	; 83b68 <_malloc_r+0x340>
   83ad2:	d015      	beq.n	83b00 <_malloc_r+0x2d8>
   83ad4:	f1b9 0f0f 	cmp.w	r9, #15
   83ad8:	f240 80eb 	bls.w	83cb2 <_malloc_r+0x48a>
   83adc:	6861      	ldr	r1, [r4, #4]
   83ade:	f1a9 020c 	sub.w	r2, r9, #12
   83ae2:	f022 0207 	bic.w	r2, r2, #7
   83ae6:	f001 0101 	and.w	r1, r1, #1
   83aea:	ea42 0e01 	orr.w	lr, r2, r1
   83aee:	2005      	movs	r0, #5
   83af0:	18a1      	adds	r1, r4, r2
   83af2:	2a0f      	cmp	r2, #15
   83af4:	f8c4 e004 	str.w	lr, [r4, #4]
   83af8:	6048      	str	r0, [r1, #4]
   83afa:	6088      	str	r0, [r1, #8]
   83afc:	f200 8111 	bhi.w	83d22 <_malloc_r+0x4fa>
   83b00:	4a17      	ldr	r2, [pc, #92]	; (83b60 <_malloc_r+0x338>)
   83b02:	68bc      	ldr	r4, [r7, #8]
   83b04:	6811      	ldr	r1, [r2, #0]
   83b06:	428b      	cmp	r3, r1
   83b08:	bf88      	it	hi
   83b0a:	6013      	strhi	r3, [r2, #0]
   83b0c:	4a15      	ldr	r2, [pc, #84]	; (83b64 <_malloc_r+0x33c>)
   83b0e:	6811      	ldr	r1, [r2, #0]
   83b10:	428b      	cmp	r3, r1
   83b12:	bf88      	it	hi
   83b14:	6013      	strhi	r3, [r2, #0]
   83b16:	6862      	ldr	r2, [r4, #4]
   83b18:	f022 0203 	bic.w	r2, r2, #3
   83b1c:	4295      	cmp	r5, r2
   83b1e:	ebc5 0302 	rsb	r3, r5, r2
   83b22:	d801      	bhi.n	83b28 <_malloc_r+0x300>
   83b24:	2b0f      	cmp	r3, #15
   83b26:	dc04      	bgt.n	83b32 <_malloc_r+0x30a>
   83b28:	4630      	mov	r0, r6
   83b2a:	f000 fa41 	bl	83fb0 <__malloc_unlock>
   83b2e:	2400      	movs	r4, #0
   83b30:	e6a6      	b.n	83880 <_malloc_r+0x58>
   83b32:	f045 0201 	orr.w	r2, r5, #1
   83b36:	f043 0301 	orr.w	r3, r3, #1
   83b3a:	4425      	add	r5, r4
   83b3c:	6062      	str	r2, [r4, #4]
   83b3e:	4630      	mov	r0, r6
   83b40:	60bd      	str	r5, [r7, #8]
   83b42:	606b      	str	r3, [r5, #4]
   83b44:	f000 fa34 	bl	83fb0 <__malloc_unlock>
   83b48:	3408      	adds	r4, #8
   83b4a:	4620      	mov	r0, r4
   83b4c:	b003      	add	sp, #12
   83b4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83b52:	bf00      	nop
   83b54:	20070590 	.word	0x20070590
   83b58:	20070ae8 	.word	0x20070ae8
   83b5c:	2007099c 	.word	0x2007099c
   83b60:	20070ae4 	.word	0x20070ae4
   83b64:	20070ae0 	.word	0x20070ae0
   83b68:	20070aec 	.word	0x20070aec
   83b6c:	f1bc 0f14 	cmp.w	ip, #20
   83b70:	d961      	bls.n	83c36 <_malloc_r+0x40e>
   83b72:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
   83b76:	f200 808f 	bhi.w	83c98 <_malloc_r+0x470>
   83b7a:	ea4f 3c15 	mov.w	ip, r5, lsr #12
   83b7e:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
   83b82:	ea4f 014c 	mov.w	r1, ip, lsl #1
   83b86:	e697      	b.n	838b8 <_malloc_r+0x90>
   83b88:	0a4b      	lsrs	r3, r1, #9
   83b8a:	2b04      	cmp	r3, #4
   83b8c:	d958      	bls.n	83c40 <_malloc_r+0x418>
   83b8e:	2b14      	cmp	r3, #20
   83b90:	f200 80ad 	bhi.w	83cee <_malloc_r+0x4c6>
   83b94:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   83b98:	0050      	lsls	r0, r2, #1
   83b9a:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   83b9e:	6883      	ldr	r3, [r0, #8]
   83ba0:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 83d5c <_malloc_r+0x534>
   83ba4:	4283      	cmp	r3, r0
   83ba6:	f000 808a 	beq.w	83cbe <_malloc_r+0x496>
   83baa:	685a      	ldr	r2, [r3, #4]
   83bac:	f022 0203 	bic.w	r2, r2, #3
   83bb0:	4291      	cmp	r1, r2
   83bb2:	d202      	bcs.n	83bba <_malloc_r+0x392>
   83bb4:	689b      	ldr	r3, [r3, #8]
   83bb6:	4298      	cmp	r0, r3
   83bb8:	d1f7      	bne.n	83baa <_malloc_r+0x382>
   83bba:	68d9      	ldr	r1, [r3, #12]
   83bbc:	687a      	ldr	r2, [r7, #4]
   83bbe:	60e1      	str	r1, [r4, #12]
   83bc0:	60a3      	str	r3, [r4, #8]
   83bc2:	608c      	str	r4, [r1, #8]
   83bc4:	60dc      	str	r4, [r3, #12]
   83bc6:	e6b6      	b.n	83936 <_malloc_r+0x10e>
   83bc8:	f045 0701 	orr.w	r7, r5, #1
   83bcc:	f042 0101 	orr.w	r1, r2, #1
   83bd0:	4425      	add	r5, r4
   83bd2:	6067      	str	r7, [r4, #4]
   83bd4:	4630      	mov	r0, r6
   83bd6:	615d      	str	r5, [r3, #20]
   83bd8:	611d      	str	r5, [r3, #16]
   83bda:	f8c5 e00c 	str.w	lr, [r5, #12]
   83bde:	f8c5 e008 	str.w	lr, [r5, #8]
   83be2:	6069      	str	r1, [r5, #4]
   83be4:	50aa      	str	r2, [r5, r2]
   83be6:	3408      	adds	r4, #8
   83be8:	f000 f9e2 	bl	83fb0 <__malloc_unlock>
   83bec:	e648      	b.n	83880 <_malloc_r+0x58>
   83bee:	685a      	ldr	r2, [r3, #4]
   83bf0:	e6a1      	b.n	83936 <_malloc_r+0x10e>
   83bf2:	f109 0901 	add.w	r9, r9, #1
   83bf6:	f019 0f03 	tst.w	r9, #3
   83bfa:	f104 0408 	add.w	r4, r4, #8
   83bfe:	f47f aead 	bne.w	8395c <_malloc_r+0x134>
   83c02:	e02d      	b.n	83c60 <_malloc_r+0x438>
   83c04:	f104 0308 	add.w	r3, r4, #8
   83c08:	6964      	ldr	r4, [r4, #20]
   83c0a:	42a3      	cmp	r3, r4
   83c0c:	bf08      	it	eq
   83c0e:	f10c 0c02 	addeq.w	ip, ip, #2
   83c12:	f43f ae67 	beq.w	838e4 <_malloc_r+0xbc>
   83c16:	e623      	b.n	83860 <_malloc_r+0x38>
   83c18:	4419      	add	r1, r3
   83c1a:	6848      	ldr	r0, [r1, #4]
   83c1c:	461c      	mov	r4, r3
   83c1e:	f854 2f08 	ldr.w	r2, [r4, #8]!
   83c22:	68db      	ldr	r3, [r3, #12]
   83c24:	f040 0501 	orr.w	r5, r0, #1
   83c28:	604d      	str	r5, [r1, #4]
   83c2a:	4630      	mov	r0, r6
   83c2c:	60d3      	str	r3, [r2, #12]
   83c2e:	609a      	str	r2, [r3, #8]
   83c30:	f000 f9be 	bl	83fb0 <__malloc_unlock>
   83c34:	e624      	b.n	83880 <_malloc_r+0x58>
   83c36:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
   83c3a:	ea4f 014c 	mov.w	r1, ip, lsl #1
   83c3e:	e63b      	b.n	838b8 <_malloc_r+0x90>
   83c40:	098a      	lsrs	r2, r1, #6
   83c42:	3238      	adds	r2, #56	; 0x38
   83c44:	0050      	lsls	r0, r2, #1
   83c46:	e7a8      	b.n	83b9a <_malloc_r+0x372>
   83c48:	42bc      	cmp	r4, r7
   83c4a:	f43f af02 	beq.w	83a52 <_malloc_r+0x22a>
   83c4e:	68bc      	ldr	r4, [r7, #8]
   83c50:	6862      	ldr	r2, [r4, #4]
   83c52:	f022 0203 	bic.w	r2, r2, #3
   83c56:	e761      	b.n	83b1c <_malloc_r+0x2f4>
   83c58:	f8d8 8000 	ldr.w	r8, [r8]
   83c5c:	4598      	cmp	r8, r3
   83c5e:	d17a      	bne.n	83d56 <_malloc_r+0x52e>
   83c60:	f01c 0f03 	tst.w	ip, #3
   83c64:	f1a8 0308 	sub.w	r3, r8, #8
   83c68:	f10c 3cff 	add.w	ip, ip, #4294967295
   83c6c:	d1f4      	bne.n	83c58 <_malloc_r+0x430>
   83c6e:	687b      	ldr	r3, [r7, #4]
   83c70:	ea23 0300 	bic.w	r3, r3, r0
   83c74:	607b      	str	r3, [r7, #4]
   83c76:	0040      	lsls	r0, r0, #1
   83c78:	4298      	cmp	r0, r3
   83c7a:	f63f aebe 	bhi.w	839fa <_malloc_r+0x1d2>
   83c7e:	2800      	cmp	r0, #0
   83c80:	f43f aebb 	beq.w	839fa <_malloc_r+0x1d2>
   83c84:	4203      	tst	r3, r0
   83c86:	46cc      	mov	ip, r9
   83c88:	f47f ae64 	bne.w	83954 <_malloc_r+0x12c>
   83c8c:	0040      	lsls	r0, r0, #1
   83c8e:	4203      	tst	r3, r0
   83c90:	f10c 0c04 	add.w	ip, ip, #4
   83c94:	d0fa      	beq.n	83c8c <_malloc_r+0x464>
   83c96:	e65d      	b.n	83954 <_malloc_r+0x12c>
   83c98:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
   83c9c:	d819      	bhi.n	83cd2 <_malloc_r+0x4aa>
   83c9e:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
   83ca2:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
   83ca6:	ea4f 014c 	mov.w	r1, ip, lsl #1
   83caa:	e605      	b.n	838b8 <_malloc_r+0x90>
   83cac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   83cb0:	e6ee      	b.n	83a90 <_malloc_r+0x268>
   83cb2:	2301      	movs	r3, #1
   83cb4:	f8c8 3004 	str.w	r3, [r8, #4]
   83cb8:	4644      	mov	r4, r8
   83cba:	2200      	movs	r2, #0
   83cbc:	e72e      	b.n	83b1c <_malloc_r+0x2f4>
   83cbe:	1092      	asrs	r2, r2, #2
   83cc0:	2001      	movs	r0, #1
   83cc2:	4090      	lsls	r0, r2
   83cc4:	f8d8 2004 	ldr.w	r2, [r8, #4]
   83cc8:	4619      	mov	r1, r3
   83cca:	4302      	orrs	r2, r0
   83ccc:	f8c8 2004 	str.w	r2, [r8, #4]
   83cd0:	e775      	b.n	83bbe <_malloc_r+0x396>
   83cd2:	f240 5354 	movw	r3, #1364	; 0x554
   83cd6:	459c      	cmp	ip, r3
   83cd8:	d81b      	bhi.n	83d12 <_malloc_r+0x4ea>
   83cda:	ea4f 4c95 	mov.w	ip, r5, lsr #18
   83cde:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
   83ce2:	ea4f 014c 	mov.w	r1, ip, lsl #1
   83ce6:	e5e7      	b.n	838b8 <_malloc_r+0x90>
   83ce8:	f10a 0a10 	add.w	sl, sl, #16
   83cec:	e6a3      	b.n	83a36 <_malloc_r+0x20e>
   83cee:	2b54      	cmp	r3, #84	; 0x54
   83cf0:	d81f      	bhi.n	83d32 <_malloc_r+0x50a>
   83cf2:	0b0a      	lsrs	r2, r1, #12
   83cf4:	326e      	adds	r2, #110	; 0x6e
   83cf6:	0050      	lsls	r0, r2, #1
   83cf8:	e74f      	b.n	83b9a <_malloc_r+0x372>
   83cfa:	f3cb 010b 	ubfx	r1, fp, #0, #12
   83cfe:	2900      	cmp	r1, #0
   83d00:	f47f aeb1 	bne.w	83a66 <_malloc_r+0x23e>
   83d04:	eb0a 0109 	add.w	r1, sl, r9
   83d08:	68ba      	ldr	r2, [r7, #8]
   83d0a:	f041 0101 	orr.w	r1, r1, #1
   83d0e:	6051      	str	r1, [r2, #4]
   83d10:	e6f6      	b.n	83b00 <_malloc_r+0x2d8>
   83d12:	21fc      	movs	r1, #252	; 0xfc
   83d14:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
   83d18:	e5ce      	b.n	838b8 <_malloc_r+0x90>
   83d1a:	2201      	movs	r2, #1
   83d1c:	f04f 0a00 	mov.w	sl, #0
   83d20:	e6cb      	b.n	83aba <_malloc_r+0x292>
   83d22:	f104 0108 	add.w	r1, r4, #8
   83d26:	4630      	mov	r0, r6
   83d28:	f7ff fa80 	bl	8322c <_free_r>
   83d2c:	f8da 3000 	ldr.w	r3, [sl]
   83d30:	e6e6      	b.n	83b00 <_malloc_r+0x2d8>
   83d32:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   83d36:	d803      	bhi.n	83d40 <_malloc_r+0x518>
   83d38:	0bca      	lsrs	r2, r1, #15
   83d3a:	3277      	adds	r2, #119	; 0x77
   83d3c:	0050      	lsls	r0, r2, #1
   83d3e:	e72c      	b.n	83b9a <_malloc_r+0x372>
   83d40:	f240 5254 	movw	r2, #1364	; 0x554
   83d44:	4293      	cmp	r3, r2
   83d46:	d803      	bhi.n	83d50 <_malloc_r+0x528>
   83d48:	0c8a      	lsrs	r2, r1, #18
   83d4a:	327c      	adds	r2, #124	; 0x7c
   83d4c:	0050      	lsls	r0, r2, #1
   83d4e:	e724      	b.n	83b9a <_malloc_r+0x372>
   83d50:	20fc      	movs	r0, #252	; 0xfc
   83d52:	227e      	movs	r2, #126	; 0x7e
   83d54:	e721      	b.n	83b9a <_malloc_r+0x372>
   83d56:	687b      	ldr	r3, [r7, #4]
   83d58:	e78d      	b.n	83c76 <_malloc_r+0x44e>
   83d5a:	bf00      	nop
   83d5c:	20070590 	.word	0x20070590

00083d60 <memchr>:
   83d60:	0783      	lsls	r3, r0, #30
   83d62:	b470      	push	{r4, r5, r6}
   83d64:	b2c9      	uxtb	r1, r1
   83d66:	d040      	beq.n	83dea <memchr+0x8a>
   83d68:	1e54      	subs	r4, r2, #1
   83d6a:	b32a      	cbz	r2, 83db8 <memchr+0x58>
   83d6c:	7803      	ldrb	r3, [r0, #0]
   83d6e:	428b      	cmp	r3, r1
   83d70:	d023      	beq.n	83dba <memchr+0x5a>
   83d72:	1c43      	adds	r3, r0, #1
   83d74:	e004      	b.n	83d80 <memchr+0x20>
   83d76:	b1fc      	cbz	r4, 83db8 <memchr+0x58>
   83d78:	7805      	ldrb	r5, [r0, #0]
   83d7a:	4614      	mov	r4, r2
   83d7c:	428d      	cmp	r5, r1
   83d7e:	d01c      	beq.n	83dba <memchr+0x5a>
   83d80:	f013 0f03 	tst.w	r3, #3
   83d84:	4618      	mov	r0, r3
   83d86:	f104 32ff 	add.w	r2, r4, #4294967295
   83d8a:	f103 0301 	add.w	r3, r3, #1
   83d8e:	d1f2      	bne.n	83d76 <memchr+0x16>
   83d90:	2c03      	cmp	r4, #3
   83d92:	d814      	bhi.n	83dbe <memchr+0x5e>
   83d94:	1e65      	subs	r5, r4, #1
   83d96:	b354      	cbz	r4, 83dee <memchr+0x8e>
   83d98:	7803      	ldrb	r3, [r0, #0]
   83d9a:	428b      	cmp	r3, r1
   83d9c:	d00d      	beq.n	83dba <memchr+0x5a>
   83d9e:	1c42      	adds	r2, r0, #1
   83da0:	2300      	movs	r3, #0
   83da2:	e002      	b.n	83daa <memchr+0x4a>
   83da4:	7804      	ldrb	r4, [r0, #0]
   83da6:	428c      	cmp	r4, r1
   83da8:	d007      	beq.n	83dba <memchr+0x5a>
   83daa:	42ab      	cmp	r3, r5
   83dac:	4610      	mov	r0, r2
   83dae:	f103 0301 	add.w	r3, r3, #1
   83db2:	f102 0201 	add.w	r2, r2, #1
   83db6:	d1f5      	bne.n	83da4 <memchr+0x44>
   83db8:	2000      	movs	r0, #0
   83dba:	bc70      	pop	{r4, r5, r6}
   83dbc:	4770      	bx	lr
   83dbe:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
   83dc2:	4603      	mov	r3, r0
   83dc4:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   83dc8:	681a      	ldr	r2, [r3, #0]
   83dca:	4618      	mov	r0, r3
   83dcc:	4072      	eors	r2, r6
   83dce:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
   83dd2:	ea25 0202 	bic.w	r2, r5, r2
   83dd6:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   83dda:	f103 0304 	add.w	r3, r3, #4
   83dde:	d1d9      	bne.n	83d94 <memchr+0x34>
   83de0:	3c04      	subs	r4, #4
   83de2:	2c03      	cmp	r4, #3
   83de4:	4618      	mov	r0, r3
   83de6:	d8ef      	bhi.n	83dc8 <memchr+0x68>
   83de8:	e7d4      	b.n	83d94 <memchr+0x34>
   83dea:	4614      	mov	r4, r2
   83dec:	e7d0      	b.n	83d90 <memchr+0x30>
   83dee:	4620      	mov	r0, r4
   83df0:	e7e3      	b.n	83dba <memchr+0x5a>
   83df2:	bf00      	nop

00083df4 <memcpy>:
   83df4:	4684      	mov	ip, r0
   83df6:	ea41 0300 	orr.w	r3, r1, r0
   83dfa:	f013 0303 	ands.w	r3, r3, #3
   83dfe:	d149      	bne.n	83e94 <memcpy+0xa0>
   83e00:	3a40      	subs	r2, #64	; 0x40
   83e02:	d323      	bcc.n	83e4c <memcpy+0x58>
   83e04:	680b      	ldr	r3, [r1, #0]
   83e06:	6003      	str	r3, [r0, #0]
   83e08:	684b      	ldr	r3, [r1, #4]
   83e0a:	6043      	str	r3, [r0, #4]
   83e0c:	688b      	ldr	r3, [r1, #8]
   83e0e:	6083      	str	r3, [r0, #8]
   83e10:	68cb      	ldr	r3, [r1, #12]
   83e12:	60c3      	str	r3, [r0, #12]
   83e14:	690b      	ldr	r3, [r1, #16]
   83e16:	6103      	str	r3, [r0, #16]
   83e18:	694b      	ldr	r3, [r1, #20]
   83e1a:	6143      	str	r3, [r0, #20]
   83e1c:	698b      	ldr	r3, [r1, #24]
   83e1e:	6183      	str	r3, [r0, #24]
   83e20:	69cb      	ldr	r3, [r1, #28]
   83e22:	61c3      	str	r3, [r0, #28]
   83e24:	6a0b      	ldr	r3, [r1, #32]
   83e26:	6203      	str	r3, [r0, #32]
   83e28:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   83e2a:	6243      	str	r3, [r0, #36]	; 0x24
   83e2c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   83e2e:	6283      	str	r3, [r0, #40]	; 0x28
   83e30:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   83e32:	62c3      	str	r3, [r0, #44]	; 0x2c
   83e34:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   83e36:	6303      	str	r3, [r0, #48]	; 0x30
   83e38:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   83e3a:	6343      	str	r3, [r0, #52]	; 0x34
   83e3c:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   83e3e:	6383      	str	r3, [r0, #56]	; 0x38
   83e40:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   83e42:	63c3      	str	r3, [r0, #60]	; 0x3c
   83e44:	3040      	adds	r0, #64	; 0x40
   83e46:	3140      	adds	r1, #64	; 0x40
   83e48:	3a40      	subs	r2, #64	; 0x40
   83e4a:	d2db      	bcs.n	83e04 <memcpy+0x10>
   83e4c:	3230      	adds	r2, #48	; 0x30
   83e4e:	d30b      	bcc.n	83e68 <memcpy+0x74>
   83e50:	680b      	ldr	r3, [r1, #0]
   83e52:	6003      	str	r3, [r0, #0]
   83e54:	684b      	ldr	r3, [r1, #4]
   83e56:	6043      	str	r3, [r0, #4]
   83e58:	688b      	ldr	r3, [r1, #8]
   83e5a:	6083      	str	r3, [r0, #8]
   83e5c:	68cb      	ldr	r3, [r1, #12]
   83e5e:	60c3      	str	r3, [r0, #12]
   83e60:	3010      	adds	r0, #16
   83e62:	3110      	adds	r1, #16
   83e64:	3a10      	subs	r2, #16
   83e66:	d2f3      	bcs.n	83e50 <memcpy+0x5c>
   83e68:	320c      	adds	r2, #12
   83e6a:	d305      	bcc.n	83e78 <memcpy+0x84>
   83e6c:	f851 3b04 	ldr.w	r3, [r1], #4
   83e70:	f840 3b04 	str.w	r3, [r0], #4
   83e74:	3a04      	subs	r2, #4
   83e76:	d2f9      	bcs.n	83e6c <memcpy+0x78>
   83e78:	3204      	adds	r2, #4
   83e7a:	d008      	beq.n	83e8e <memcpy+0x9a>
   83e7c:	07d2      	lsls	r2, r2, #31
   83e7e:	bf1c      	itt	ne
   83e80:	f811 3b01 	ldrbne.w	r3, [r1], #1
   83e84:	f800 3b01 	strbne.w	r3, [r0], #1
   83e88:	d301      	bcc.n	83e8e <memcpy+0x9a>
   83e8a:	880b      	ldrh	r3, [r1, #0]
   83e8c:	8003      	strh	r3, [r0, #0]
   83e8e:	4660      	mov	r0, ip
   83e90:	4770      	bx	lr
   83e92:	bf00      	nop
   83e94:	2a08      	cmp	r2, #8
   83e96:	d313      	bcc.n	83ec0 <memcpy+0xcc>
   83e98:	078b      	lsls	r3, r1, #30
   83e9a:	d0b1      	beq.n	83e00 <memcpy+0xc>
   83e9c:	f010 0303 	ands.w	r3, r0, #3
   83ea0:	d0ae      	beq.n	83e00 <memcpy+0xc>
   83ea2:	f1c3 0304 	rsb	r3, r3, #4
   83ea6:	1ad2      	subs	r2, r2, r3
   83ea8:	07db      	lsls	r3, r3, #31
   83eaa:	bf1c      	itt	ne
   83eac:	f811 3b01 	ldrbne.w	r3, [r1], #1
   83eb0:	f800 3b01 	strbne.w	r3, [r0], #1
   83eb4:	d3a4      	bcc.n	83e00 <memcpy+0xc>
   83eb6:	f831 3b02 	ldrh.w	r3, [r1], #2
   83eba:	f820 3b02 	strh.w	r3, [r0], #2
   83ebe:	e79f      	b.n	83e00 <memcpy+0xc>
   83ec0:	3a04      	subs	r2, #4
   83ec2:	d3d9      	bcc.n	83e78 <memcpy+0x84>
   83ec4:	3a01      	subs	r2, #1
   83ec6:	f811 3b01 	ldrb.w	r3, [r1], #1
   83eca:	f800 3b01 	strb.w	r3, [r0], #1
   83ece:	d2f9      	bcs.n	83ec4 <memcpy+0xd0>
   83ed0:	780b      	ldrb	r3, [r1, #0]
   83ed2:	7003      	strb	r3, [r0, #0]
   83ed4:	784b      	ldrb	r3, [r1, #1]
   83ed6:	7043      	strb	r3, [r0, #1]
   83ed8:	788b      	ldrb	r3, [r1, #2]
   83eda:	7083      	strb	r3, [r0, #2]
   83edc:	4660      	mov	r0, ip
   83ede:	4770      	bx	lr

00083ee0 <memmove>:
   83ee0:	4288      	cmp	r0, r1
   83ee2:	b4f0      	push	{r4, r5, r6, r7}
   83ee4:	d910      	bls.n	83f08 <memmove+0x28>
   83ee6:	188c      	adds	r4, r1, r2
   83ee8:	42a0      	cmp	r0, r4
   83eea:	d20d      	bcs.n	83f08 <memmove+0x28>
   83eec:	1885      	adds	r5, r0, r2
   83eee:	1e53      	subs	r3, r2, #1
   83ef0:	b142      	cbz	r2, 83f04 <memmove+0x24>
   83ef2:	4621      	mov	r1, r4
   83ef4:	462a      	mov	r2, r5
   83ef6:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
   83efa:	3b01      	subs	r3, #1
   83efc:	f802 4d01 	strb.w	r4, [r2, #-1]!
   83f00:	1c5c      	adds	r4, r3, #1
   83f02:	d1f8      	bne.n	83ef6 <memmove+0x16>
   83f04:	bcf0      	pop	{r4, r5, r6, r7}
   83f06:	4770      	bx	lr
   83f08:	2a0f      	cmp	r2, #15
   83f0a:	d944      	bls.n	83f96 <memmove+0xb6>
   83f0c:	ea40 0301 	orr.w	r3, r0, r1
   83f10:	079b      	lsls	r3, r3, #30
   83f12:	d144      	bne.n	83f9e <memmove+0xbe>
   83f14:	f1a2 0710 	sub.w	r7, r2, #16
   83f18:	093f      	lsrs	r7, r7, #4
   83f1a:	eb00 1607 	add.w	r6, r0, r7, lsl #4
   83f1e:	3610      	adds	r6, #16
   83f20:	460c      	mov	r4, r1
   83f22:	4603      	mov	r3, r0
   83f24:	6825      	ldr	r5, [r4, #0]
   83f26:	3310      	adds	r3, #16
   83f28:	f843 5c10 	str.w	r5, [r3, #-16]
   83f2c:	6865      	ldr	r5, [r4, #4]
   83f2e:	3410      	adds	r4, #16
   83f30:	f843 5c0c 	str.w	r5, [r3, #-12]
   83f34:	f854 5c08 	ldr.w	r5, [r4, #-8]
   83f38:	f843 5c08 	str.w	r5, [r3, #-8]
   83f3c:	f854 5c04 	ldr.w	r5, [r4, #-4]
   83f40:	f843 5c04 	str.w	r5, [r3, #-4]
   83f44:	42b3      	cmp	r3, r6
   83f46:	d1ed      	bne.n	83f24 <memmove+0x44>
   83f48:	1c7b      	adds	r3, r7, #1
   83f4a:	f002 0c0f 	and.w	ip, r2, #15
   83f4e:	011b      	lsls	r3, r3, #4
   83f50:	f1bc 0f03 	cmp.w	ip, #3
   83f54:	4419      	add	r1, r3
   83f56:	4403      	add	r3, r0
   83f58:	d923      	bls.n	83fa2 <memmove+0xc2>
   83f5a:	460e      	mov	r6, r1
   83f5c:	461d      	mov	r5, r3
   83f5e:	4664      	mov	r4, ip
   83f60:	f856 7b04 	ldr.w	r7, [r6], #4
   83f64:	3c04      	subs	r4, #4
   83f66:	2c03      	cmp	r4, #3
   83f68:	f845 7b04 	str.w	r7, [r5], #4
   83f6c:	d8f8      	bhi.n	83f60 <memmove+0x80>
   83f6e:	f1ac 0404 	sub.w	r4, ip, #4
   83f72:	f024 0403 	bic.w	r4, r4, #3
   83f76:	3404      	adds	r4, #4
   83f78:	f002 0203 	and.w	r2, r2, #3
   83f7c:	4423      	add	r3, r4
   83f7e:	4421      	add	r1, r4
   83f80:	2a00      	cmp	r2, #0
   83f82:	d0bf      	beq.n	83f04 <memmove+0x24>
   83f84:	441a      	add	r2, r3
   83f86:	f811 4b01 	ldrb.w	r4, [r1], #1
   83f8a:	f803 4b01 	strb.w	r4, [r3], #1
   83f8e:	4293      	cmp	r3, r2
   83f90:	d1f9      	bne.n	83f86 <memmove+0xa6>
   83f92:	bcf0      	pop	{r4, r5, r6, r7}
   83f94:	4770      	bx	lr
   83f96:	4603      	mov	r3, r0
   83f98:	2a00      	cmp	r2, #0
   83f9a:	d1f3      	bne.n	83f84 <memmove+0xa4>
   83f9c:	e7b2      	b.n	83f04 <memmove+0x24>
   83f9e:	4603      	mov	r3, r0
   83fa0:	e7f0      	b.n	83f84 <memmove+0xa4>
   83fa2:	4662      	mov	r2, ip
   83fa4:	2a00      	cmp	r2, #0
   83fa6:	d1ed      	bne.n	83f84 <memmove+0xa4>
   83fa8:	e7ac      	b.n	83f04 <memmove+0x24>
   83faa:	bf00      	nop

00083fac <__malloc_lock>:
   83fac:	4770      	bx	lr
   83fae:	bf00      	nop

00083fb0 <__malloc_unlock>:
   83fb0:	4770      	bx	lr
   83fb2:	bf00      	nop

00083fb4 <_realloc_r>:
   83fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83fb8:	460c      	mov	r4, r1
   83fba:	b083      	sub	sp, #12
   83fbc:	4690      	mov	r8, r2
   83fbe:	4681      	mov	r9, r0
   83fc0:	2900      	cmp	r1, #0
   83fc2:	f000 80ba 	beq.w	8413a <_realloc_r+0x186>
   83fc6:	f7ff fff1 	bl	83fac <__malloc_lock>
   83fca:	f108 060b 	add.w	r6, r8, #11
   83fce:	f854 3c04 	ldr.w	r3, [r4, #-4]
   83fd2:	2e16      	cmp	r6, #22
   83fd4:	f023 0503 	bic.w	r5, r3, #3
   83fd8:	f1a4 0708 	sub.w	r7, r4, #8
   83fdc:	d84b      	bhi.n	84076 <_realloc_r+0xc2>
   83fde:	2110      	movs	r1, #16
   83fe0:	460e      	mov	r6, r1
   83fe2:	45b0      	cmp	r8, r6
   83fe4:	d84c      	bhi.n	84080 <_realloc_r+0xcc>
   83fe6:	428d      	cmp	r5, r1
   83fe8:	da51      	bge.n	8408e <_realloc_r+0xda>
   83fea:	f8df b384 	ldr.w	fp, [pc, #900]	; 84370 <_realloc_r+0x3bc>
   83fee:	1978      	adds	r0, r7, r5
   83ff0:	f8db e008 	ldr.w	lr, [fp, #8]
   83ff4:	4586      	cmp	lr, r0
   83ff6:	f000 80a6 	beq.w	84146 <_realloc_r+0x192>
   83ffa:	6842      	ldr	r2, [r0, #4]
   83ffc:	f022 0c01 	bic.w	ip, r2, #1
   84000:	4484      	add	ip, r0
   84002:	f8dc c004 	ldr.w	ip, [ip, #4]
   84006:	f01c 0f01 	tst.w	ip, #1
   8400a:	d054      	beq.n	840b6 <_realloc_r+0x102>
   8400c:	2200      	movs	r2, #0
   8400e:	4610      	mov	r0, r2
   84010:	07db      	lsls	r3, r3, #31
   84012:	d46f      	bmi.n	840f4 <_realloc_r+0x140>
   84014:	f854 3c08 	ldr.w	r3, [r4, #-8]
   84018:	ebc3 0a07 	rsb	sl, r3, r7
   8401c:	f8da 3004 	ldr.w	r3, [sl, #4]
   84020:	f023 0303 	bic.w	r3, r3, #3
   84024:	442b      	add	r3, r5
   84026:	2800      	cmp	r0, #0
   84028:	d062      	beq.n	840f0 <_realloc_r+0x13c>
   8402a:	4570      	cmp	r0, lr
   8402c:	f000 80e9 	beq.w	84202 <_realloc_r+0x24e>
   84030:	eb02 0e03 	add.w	lr, r2, r3
   84034:	458e      	cmp	lr, r1
   84036:	db5b      	blt.n	840f0 <_realloc_r+0x13c>
   84038:	68c3      	ldr	r3, [r0, #12]
   8403a:	6882      	ldr	r2, [r0, #8]
   8403c:	46d0      	mov	r8, sl
   8403e:	60d3      	str	r3, [r2, #12]
   84040:	609a      	str	r2, [r3, #8]
   84042:	f858 1f08 	ldr.w	r1, [r8, #8]!
   84046:	f8da 300c 	ldr.w	r3, [sl, #12]
   8404a:	1f2a      	subs	r2, r5, #4
   8404c:	2a24      	cmp	r2, #36	; 0x24
   8404e:	60cb      	str	r3, [r1, #12]
   84050:	6099      	str	r1, [r3, #8]
   84052:	f200 8123 	bhi.w	8429c <_realloc_r+0x2e8>
   84056:	2a13      	cmp	r2, #19
   84058:	f240 80b0 	bls.w	841bc <_realloc_r+0x208>
   8405c:	6823      	ldr	r3, [r4, #0]
   8405e:	2a1b      	cmp	r2, #27
   84060:	f8ca 3008 	str.w	r3, [sl, #8]
   84064:	6863      	ldr	r3, [r4, #4]
   84066:	f8ca 300c 	str.w	r3, [sl, #12]
   8406a:	f200 812b 	bhi.w	842c4 <_realloc_r+0x310>
   8406e:	3408      	adds	r4, #8
   84070:	f10a 0310 	add.w	r3, sl, #16
   84074:	e0a3      	b.n	841be <_realloc_r+0x20a>
   84076:	f026 0607 	bic.w	r6, r6, #7
   8407a:	2e00      	cmp	r6, #0
   8407c:	4631      	mov	r1, r6
   8407e:	dab0      	bge.n	83fe2 <_realloc_r+0x2e>
   84080:	230c      	movs	r3, #12
   84082:	2000      	movs	r0, #0
   84084:	f8c9 3000 	str.w	r3, [r9]
   84088:	b003      	add	sp, #12
   8408a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8408e:	46a0      	mov	r8, r4
   84090:	1baa      	subs	r2, r5, r6
   84092:	2a0f      	cmp	r2, #15
   84094:	f003 0301 	and.w	r3, r3, #1
   84098:	d81a      	bhi.n	840d0 <_realloc_r+0x11c>
   8409a:	432b      	orrs	r3, r5
   8409c:	607b      	str	r3, [r7, #4]
   8409e:	443d      	add	r5, r7
   840a0:	686b      	ldr	r3, [r5, #4]
   840a2:	f043 0301 	orr.w	r3, r3, #1
   840a6:	606b      	str	r3, [r5, #4]
   840a8:	4648      	mov	r0, r9
   840aa:	f7ff ff81 	bl	83fb0 <__malloc_unlock>
   840ae:	4640      	mov	r0, r8
   840b0:	b003      	add	sp, #12
   840b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   840b6:	f022 0203 	bic.w	r2, r2, #3
   840ba:	eb02 0c05 	add.w	ip, r2, r5
   840be:	458c      	cmp	ip, r1
   840c0:	dba6      	blt.n	84010 <_realloc_r+0x5c>
   840c2:	68c2      	ldr	r2, [r0, #12]
   840c4:	6881      	ldr	r1, [r0, #8]
   840c6:	46a0      	mov	r8, r4
   840c8:	60ca      	str	r2, [r1, #12]
   840ca:	4665      	mov	r5, ip
   840cc:	6091      	str	r1, [r2, #8]
   840ce:	e7df      	b.n	84090 <_realloc_r+0xdc>
   840d0:	19b9      	adds	r1, r7, r6
   840d2:	4333      	orrs	r3, r6
   840d4:	f042 0001 	orr.w	r0, r2, #1
   840d8:	607b      	str	r3, [r7, #4]
   840da:	440a      	add	r2, r1
   840dc:	6048      	str	r0, [r1, #4]
   840de:	6853      	ldr	r3, [r2, #4]
   840e0:	3108      	adds	r1, #8
   840e2:	f043 0301 	orr.w	r3, r3, #1
   840e6:	6053      	str	r3, [r2, #4]
   840e8:	4648      	mov	r0, r9
   840ea:	f7ff f89f 	bl	8322c <_free_r>
   840ee:	e7db      	b.n	840a8 <_realloc_r+0xf4>
   840f0:	428b      	cmp	r3, r1
   840f2:	da33      	bge.n	8415c <_realloc_r+0x1a8>
   840f4:	4641      	mov	r1, r8
   840f6:	4648      	mov	r0, r9
   840f8:	f7ff fb96 	bl	83828 <_malloc_r>
   840fc:	4680      	mov	r8, r0
   840fe:	2800      	cmp	r0, #0
   84100:	d0d2      	beq.n	840a8 <_realloc_r+0xf4>
   84102:	f854 3c04 	ldr.w	r3, [r4, #-4]
   84106:	f1a0 0108 	sub.w	r1, r0, #8
   8410a:	f023 0201 	bic.w	r2, r3, #1
   8410e:	443a      	add	r2, r7
   84110:	4291      	cmp	r1, r2
   84112:	f000 80bc 	beq.w	8428e <_realloc_r+0x2da>
   84116:	1f2a      	subs	r2, r5, #4
   84118:	2a24      	cmp	r2, #36	; 0x24
   8411a:	d86e      	bhi.n	841fa <_realloc_r+0x246>
   8411c:	2a13      	cmp	r2, #19
   8411e:	d842      	bhi.n	841a6 <_realloc_r+0x1f2>
   84120:	4603      	mov	r3, r0
   84122:	4622      	mov	r2, r4
   84124:	6811      	ldr	r1, [r2, #0]
   84126:	6019      	str	r1, [r3, #0]
   84128:	6851      	ldr	r1, [r2, #4]
   8412a:	6059      	str	r1, [r3, #4]
   8412c:	6892      	ldr	r2, [r2, #8]
   8412e:	609a      	str	r2, [r3, #8]
   84130:	4621      	mov	r1, r4
   84132:	4648      	mov	r0, r9
   84134:	f7ff f87a 	bl	8322c <_free_r>
   84138:	e7b6      	b.n	840a8 <_realloc_r+0xf4>
   8413a:	4611      	mov	r1, r2
   8413c:	b003      	add	sp, #12
   8413e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84142:	f7ff bb71 	b.w	83828 <_malloc_r>
   84146:	f8de 2004 	ldr.w	r2, [lr, #4]
   8414a:	f106 0c10 	add.w	ip, r6, #16
   8414e:	f022 0203 	bic.w	r2, r2, #3
   84152:	1950      	adds	r0, r2, r5
   84154:	4560      	cmp	r0, ip
   84156:	da3d      	bge.n	841d4 <_realloc_r+0x220>
   84158:	4670      	mov	r0, lr
   8415a:	e759      	b.n	84010 <_realloc_r+0x5c>
   8415c:	46d0      	mov	r8, sl
   8415e:	f858 0f08 	ldr.w	r0, [r8, #8]!
   84162:	f8da 100c 	ldr.w	r1, [sl, #12]
   84166:	1f2a      	subs	r2, r5, #4
   84168:	2a24      	cmp	r2, #36	; 0x24
   8416a:	60c1      	str	r1, [r0, #12]
   8416c:	6088      	str	r0, [r1, #8]
   8416e:	f200 80a0 	bhi.w	842b2 <_realloc_r+0x2fe>
   84172:	2a13      	cmp	r2, #19
   84174:	f240 809b 	bls.w	842ae <_realloc_r+0x2fa>
   84178:	6821      	ldr	r1, [r4, #0]
   8417a:	2a1b      	cmp	r2, #27
   8417c:	f8ca 1008 	str.w	r1, [sl, #8]
   84180:	6861      	ldr	r1, [r4, #4]
   84182:	f8ca 100c 	str.w	r1, [sl, #12]
   84186:	f200 80b2 	bhi.w	842ee <_realloc_r+0x33a>
   8418a:	3408      	adds	r4, #8
   8418c:	f10a 0210 	add.w	r2, sl, #16
   84190:	6821      	ldr	r1, [r4, #0]
   84192:	461d      	mov	r5, r3
   84194:	6011      	str	r1, [r2, #0]
   84196:	6861      	ldr	r1, [r4, #4]
   84198:	4657      	mov	r7, sl
   8419a:	6051      	str	r1, [r2, #4]
   8419c:	68a3      	ldr	r3, [r4, #8]
   8419e:	6093      	str	r3, [r2, #8]
   841a0:	f8da 3004 	ldr.w	r3, [sl, #4]
   841a4:	e774      	b.n	84090 <_realloc_r+0xdc>
   841a6:	6823      	ldr	r3, [r4, #0]
   841a8:	2a1b      	cmp	r2, #27
   841aa:	6003      	str	r3, [r0, #0]
   841ac:	6863      	ldr	r3, [r4, #4]
   841ae:	6043      	str	r3, [r0, #4]
   841b0:	d862      	bhi.n	84278 <_realloc_r+0x2c4>
   841b2:	f100 0308 	add.w	r3, r0, #8
   841b6:	f104 0208 	add.w	r2, r4, #8
   841ba:	e7b3      	b.n	84124 <_realloc_r+0x170>
   841bc:	4643      	mov	r3, r8
   841be:	6822      	ldr	r2, [r4, #0]
   841c0:	4675      	mov	r5, lr
   841c2:	601a      	str	r2, [r3, #0]
   841c4:	6862      	ldr	r2, [r4, #4]
   841c6:	4657      	mov	r7, sl
   841c8:	605a      	str	r2, [r3, #4]
   841ca:	68a2      	ldr	r2, [r4, #8]
   841cc:	609a      	str	r2, [r3, #8]
   841ce:	f8da 3004 	ldr.w	r3, [sl, #4]
   841d2:	e75d      	b.n	84090 <_realloc_r+0xdc>
   841d4:	1b83      	subs	r3, r0, r6
   841d6:	4437      	add	r7, r6
   841d8:	f043 0301 	orr.w	r3, r3, #1
   841dc:	f8cb 7008 	str.w	r7, [fp, #8]
   841e0:	607b      	str	r3, [r7, #4]
   841e2:	f854 3c04 	ldr.w	r3, [r4, #-4]
   841e6:	4648      	mov	r0, r9
   841e8:	f003 0301 	and.w	r3, r3, #1
   841ec:	431e      	orrs	r6, r3
   841ee:	f844 6c04 	str.w	r6, [r4, #-4]
   841f2:	f7ff fedd 	bl	83fb0 <__malloc_unlock>
   841f6:	4620      	mov	r0, r4
   841f8:	e75a      	b.n	840b0 <_realloc_r+0xfc>
   841fa:	4621      	mov	r1, r4
   841fc:	f7ff fe70 	bl	83ee0 <memmove>
   84200:	e796      	b.n	84130 <_realloc_r+0x17c>
   84202:	eb02 0c03 	add.w	ip, r2, r3
   84206:	f106 0210 	add.w	r2, r6, #16
   8420a:	4594      	cmp	ip, r2
   8420c:	f6ff af70 	blt.w	840f0 <_realloc_r+0x13c>
   84210:	4657      	mov	r7, sl
   84212:	f857 1f08 	ldr.w	r1, [r7, #8]!
   84216:	f8da 300c 	ldr.w	r3, [sl, #12]
   8421a:	1f2a      	subs	r2, r5, #4
   8421c:	2a24      	cmp	r2, #36	; 0x24
   8421e:	60cb      	str	r3, [r1, #12]
   84220:	6099      	str	r1, [r3, #8]
   84222:	f200 8086 	bhi.w	84332 <_realloc_r+0x37e>
   84226:	2a13      	cmp	r2, #19
   84228:	d977      	bls.n	8431a <_realloc_r+0x366>
   8422a:	6823      	ldr	r3, [r4, #0]
   8422c:	2a1b      	cmp	r2, #27
   8422e:	f8ca 3008 	str.w	r3, [sl, #8]
   84232:	6863      	ldr	r3, [r4, #4]
   84234:	f8ca 300c 	str.w	r3, [sl, #12]
   84238:	f200 8084 	bhi.w	84344 <_realloc_r+0x390>
   8423c:	3408      	adds	r4, #8
   8423e:	f10a 0310 	add.w	r3, sl, #16
   84242:	6822      	ldr	r2, [r4, #0]
   84244:	601a      	str	r2, [r3, #0]
   84246:	6862      	ldr	r2, [r4, #4]
   84248:	605a      	str	r2, [r3, #4]
   8424a:	68a2      	ldr	r2, [r4, #8]
   8424c:	609a      	str	r2, [r3, #8]
   8424e:	ebc6 020c 	rsb	r2, r6, ip
   84252:	eb0a 0306 	add.w	r3, sl, r6
   84256:	f042 0201 	orr.w	r2, r2, #1
   8425a:	f8cb 3008 	str.w	r3, [fp, #8]
   8425e:	605a      	str	r2, [r3, #4]
   84260:	f8da 3004 	ldr.w	r3, [sl, #4]
   84264:	4648      	mov	r0, r9
   84266:	f003 0301 	and.w	r3, r3, #1
   8426a:	431e      	orrs	r6, r3
   8426c:	f8ca 6004 	str.w	r6, [sl, #4]
   84270:	f7ff fe9e 	bl	83fb0 <__malloc_unlock>
   84274:	4638      	mov	r0, r7
   84276:	e71b      	b.n	840b0 <_realloc_r+0xfc>
   84278:	68a3      	ldr	r3, [r4, #8]
   8427a:	2a24      	cmp	r2, #36	; 0x24
   8427c:	6083      	str	r3, [r0, #8]
   8427e:	68e3      	ldr	r3, [r4, #12]
   84280:	60c3      	str	r3, [r0, #12]
   84282:	d02b      	beq.n	842dc <_realloc_r+0x328>
   84284:	f100 0310 	add.w	r3, r0, #16
   84288:	f104 0210 	add.w	r2, r4, #16
   8428c:	e74a      	b.n	84124 <_realloc_r+0x170>
   8428e:	f850 2c04 	ldr.w	r2, [r0, #-4]
   84292:	46a0      	mov	r8, r4
   84294:	f022 0203 	bic.w	r2, r2, #3
   84298:	4415      	add	r5, r2
   8429a:	e6f9      	b.n	84090 <_realloc_r+0xdc>
   8429c:	4621      	mov	r1, r4
   8429e:	4640      	mov	r0, r8
   842a0:	4675      	mov	r5, lr
   842a2:	4657      	mov	r7, sl
   842a4:	f7ff fe1c 	bl	83ee0 <memmove>
   842a8:	f8da 3004 	ldr.w	r3, [sl, #4]
   842ac:	e6f0      	b.n	84090 <_realloc_r+0xdc>
   842ae:	4642      	mov	r2, r8
   842b0:	e76e      	b.n	84190 <_realloc_r+0x1dc>
   842b2:	4621      	mov	r1, r4
   842b4:	4640      	mov	r0, r8
   842b6:	461d      	mov	r5, r3
   842b8:	4657      	mov	r7, sl
   842ba:	f7ff fe11 	bl	83ee0 <memmove>
   842be:	f8da 3004 	ldr.w	r3, [sl, #4]
   842c2:	e6e5      	b.n	84090 <_realloc_r+0xdc>
   842c4:	68a3      	ldr	r3, [r4, #8]
   842c6:	2a24      	cmp	r2, #36	; 0x24
   842c8:	f8ca 3010 	str.w	r3, [sl, #16]
   842cc:	68e3      	ldr	r3, [r4, #12]
   842ce:	f8ca 3014 	str.w	r3, [sl, #20]
   842d2:	d018      	beq.n	84306 <_realloc_r+0x352>
   842d4:	3410      	adds	r4, #16
   842d6:	f10a 0318 	add.w	r3, sl, #24
   842da:	e770      	b.n	841be <_realloc_r+0x20a>
   842dc:	6922      	ldr	r2, [r4, #16]
   842de:	f100 0318 	add.w	r3, r0, #24
   842e2:	6102      	str	r2, [r0, #16]
   842e4:	6961      	ldr	r1, [r4, #20]
   842e6:	f104 0218 	add.w	r2, r4, #24
   842ea:	6141      	str	r1, [r0, #20]
   842ec:	e71a      	b.n	84124 <_realloc_r+0x170>
   842ee:	68a1      	ldr	r1, [r4, #8]
   842f0:	2a24      	cmp	r2, #36	; 0x24
   842f2:	f8ca 1010 	str.w	r1, [sl, #16]
   842f6:	68e1      	ldr	r1, [r4, #12]
   842f8:	f8ca 1014 	str.w	r1, [sl, #20]
   842fc:	d00f      	beq.n	8431e <_realloc_r+0x36a>
   842fe:	3410      	adds	r4, #16
   84300:	f10a 0218 	add.w	r2, sl, #24
   84304:	e744      	b.n	84190 <_realloc_r+0x1dc>
   84306:	6922      	ldr	r2, [r4, #16]
   84308:	f10a 0320 	add.w	r3, sl, #32
   8430c:	f8ca 2018 	str.w	r2, [sl, #24]
   84310:	6962      	ldr	r2, [r4, #20]
   84312:	3418      	adds	r4, #24
   84314:	f8ca 201c 	str.w	r2, [sl, #28]
   84318:	e751      	b.n	841be <_realloc_r+0x20a>
   8431a:	463b      	mov	r3, r7
   8431c:	e791      	b.n	84242 <_realloc_r+0x28e>
   8431e:	6921      	ldr	r1, [r4, #16]
   84320:	f10a 0220 	add.w	r2, sl, #32
   84324:	f8ca 1018 	str.w	r1, [sl, #24]
   84328:	6961      	ldr	r1, [r4, #20]
   8432a:	3418      	adds	r4, #24
   8432c:	f8ca 101c 	str.w	r1, [sl, #28]
   84330:	e72e      	b.n	84190 <_realloc_r+0x1dc>
   84332:	4621      	mov	r1, r4
   84334:	4638      	mov	r0, r7
   84336:	f8cd c004 	str.w	ip, [sp, #4]
   8433a:	f7ff fdd1 	bl	83ee0 <memmove>
   8433e:	f8dd c004 	ldr.w	ip, [sp, #4]
   84342:	e784      	b.n	8424e <_realloc_r+0x29a>
   84344:	68a3      	ldr	r3, [r4, #8]
   84346:	2a24      	cmp	r2, #36	; 0x24
   84348:	f8ca 3010 	str.w	r3, [sl, #16]
   8434c:	68e3      	ldr	r3, [r4, #12]
   8434e:	f8ca 3014 	str.w	r3, [sl, #20]
   84352:	d003      	beq.n	8435c <_realloc_r+0x3a8>
   84354:	3410      	adds	r4, #16
   84356:	f10a 0318 	add.w	r3, sl, #24
   8435a:	e772      	b.n	84242 <_realloc_r+0x28e>
   8435c:	6922      	ldr	r2, [r4, #16]
   8435e:	f10a 0320 	add.w	r3, sl, #32
   84362:	f8ca 2018 	str.w	r2, [sl, #24]
   84366:	6962      	ldr	r2, [r4, #20]
   84368:	3418      	adds	r4, #24
   8436a:	f8ca 201c 	str.w	r2, [sl, #28]
   8436e:	e768      	b.n	84242 <_realloc_r+0x28e>
   84370:	20070590 	.word	0x20070590

00084374 <_sbrk_r>:
   84374:	b538      	push	{r3, r4, r5, lr}
   84376:	4c07      	ldr	r4, [pc, #28]	; (84394 <_sbrk_r+0x20>)
   84378:	2300      	movs	r3, #0
   8437a:	4605      	mov	r5, r0
   8437c:	4608      	mov	r0, r1
   8437e:	6023      	str	r3, [r4, #0]
   84380:	f7fc fc22 	bl	80bc8 <_sbrk>
   84384:	1c43      	adds	r3, r0, #1
   84386:	d000      	beq.n	8438a <_sbrk_r+0x16>
   84388:	bd38      	pop	{r3, r4, r5, pc}
   8438a:	6823      	ldr	r3, [r4, #0]
   8438c:	2b00      	cmp	r3, #0
   8438e:	d0fb      	beq.n	84388 <_sbrk_r+0x14>
   84390:	602b      	str	r3, [r5, #0]
   84392:	bd38      	pop	{r3, r4, r5, pc}
   84394:	20070b20 	.word	0x20070b20

00084398 <__sread>:
   84398:	b510      	push	{r4, lr}
   8439a:	460c      	mov	r4, r1
   8439c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   843a0:	f000 f9f2 	bl	84788 <_read_r>
   843a4:	2800      	cmp	r0, #0
   843a6:	db03      	blt.n	843b0 <__sread+0x18>
   843a8:	6d23      	ldr	r3, [r4, #80]	; 0x50
   843aa:	4403      	add	r3, r0
   843ac:	6523      	str	r3, [r4, #80]	; 0x50
   843ae:	bd10      	pop	{r4, pc}
   843b0:	89a3      	ldrh	r3, [r4, #12]
   843b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   843b6:	81a3      	strh	r3, [r4, #12]
   843b8:	bd10      	pop	{r4, pc}
   843ba:	bf00      	nop

000843bc <__swrite>:
   843bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   843c0:	460c      	mov	r4, r1
   843c2:	8989      	ldrh	r1, [r1, #12]
   843c4:	461d      	mov	r5, r3
   843c6:	05cb      	lsls	r3, r1, #23
   843c8:	4616      	mov	r6, r2
   843ca:	4607      	mov	r7, r0
   843cc:	d506      	bpl.n	843dc <__swrite+0x20>
   843ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   843d2:	2200      	movs	r2, #0
   843d4:	2302      	movs	r3, #2
   843d6:	f000 f9c3 	bl	84760 <_lseek_r>
   843da:	89a1      	ldrh	r1, [r4, #12]
   843dc:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   843e0:	81a1      	strh	r1, [r4, #12]
   843e2:	4638      	mov	r0, r7
   843e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   843e8:	4632      	mov	r2, r6
   843ea:	462b      	mov	r3, r5
   843ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   843f0:	f000 b8ce 	b.w	84590 <_write_r>

000843f4 <__sseek>:
   843f4:	b510      	push	{r4, lr}
   843f6:	460c      	mov	r4, r1
   843f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   843fc:	f000 f9b0 	bl	84760 <_lseek_r>
   84400:	89a3      	ldrh	r3, [r4, #12]
   84402:	1c42      	adds	r2, r0, #1
   84404:	bf0e      	itee	eq
   84406:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   8440a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   8440e:	6520      	strne	r0, [r4, #80]	; 0x50
   84410:	81a3      	strh	r3, [r4, #12]
   84412:	bd10      	pop	{r4, pc}

00084414 <__sclose>:
   84414:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   84418:	f000 b922 	b.w	84660 <_close_r>

0008441c <strlen>:
   8441c:	f020 0103 	bic.w	r1, r0, #3
   84420:	f010 0003 	ands.w	r0, r0, #3
   84424:	f1c0 0000 	rsb	r0, r0, #0
   84428:	f851 3b04 	ldr.w	r3, [r1], #4
   8442c:	f100 0c04 	add.w	ip, r0, #4
   84430:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   84434:	f06f 0200 	mvn.w	r2, #0
   84438:	bf1c      	itt	ne
   8443a:	fa22 f20c 	lsrne.w	r2, r2, ip
   8443e:	4313      	orrne	r3, r2
   84440:	f04f 0c01 	mov.w	ip, #1
   84444:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   84448:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   8444c:	eba3 020c 	sub.w	r2, r3, ip
   84450:	ea22 0203 	bic.w	r2, r2, r3
   84454:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   84458:	bf04      	itt	eq
   8445a:	f851 3b04 	ldreq.w	r3, [r1], #4
   8445e:	3004      	addeq	r0, #4
   84460:	d0f4      	beq.n	8444c <strlen+0x30>
   84462:	f013 0fff 	tst.w	r3, #255	; 0xff
   84466:	bf1f      	itttt	ne
   84468:	3001      	addne	r0, #1
   8446a:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
   8446e:	3001      	addne	r0, #1
   84470:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
   84474:	bf18      	it	ne
   84476:	3001      	addne	r0, #1
   84478:	4770      	bx	lr
   8447a:	bf00      	nop

0008447c <__swbuf_r>:
   8447c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8447e:	460d      	mov	r5, r1
   84480:	4614      	mov	r4, r2
   84482:	4607      	mov	r7, r0
   84484:	b110      	cbz	r0, 8448c <__swbuf_r+0x10>
   84486:	6b83      	ldr	r3, [r0, #56]	; 0x38
   84488:	2b00      	cmp	r3, #0
   8448a:	d048      	beq.n	8451e <__swbuf_r+0xa2>
   8448c:	89a2      	ldrh	r2, [r4, #12]
   8448e:	69a0      	ldr	r0, [r4, #24]
   84490:	b293      	uxth	r3, r2
   84492:	60a0      	str	r0, [r4, #8]
   84494:	0718      	lsls	r0, r3, #28
   84496:	d538      	bpl.n	8450a <__swbuf_r+0x8e>
   84498:	6926      	ldr	r6, [r4, #16]
   8449a:	2e00      	cmp	r6, #0
   8449c:	d035      	beq.n	8450a <__swbuf_r+0x8e>
   8449e:	0499      	lsls	r1, r3, #18
   844a0:	b2ed      	uxtb	r5, r5
   844a2:	d515      	bpl.n	844d0 <__swbuf_r+0x54>
   844a4:	6823      	ldr	r3, [r4, #0]
   844a6:	6962      	ldr	r2, [r4, #20]
   844a8:	1b9e      	subs	r6, r3, r6
   844aa:	4296      	cmp	r6, r2
   844ac:	da1c      	bge.n	844e8 <__swbuf_r+0x6c>
   844ae:	3601      	adds	r6, #1
   844b0:	68a2      	ldr	r2, [r4, #8]
   844b2:	1c59      	adds	r1, r3, #1
   844b4:	3a01      	subs	r2, #1
   844b6:	60a2      	str	r2, [r4, #8]
   844b8:	6021      	str	r1, [r4, #0]
   844ba:	701d      	strb	r5, [r3, #0]
   844bc:	6963      	ldr	r3, [r4, #20]
   844be:	42b3      	cmp	r3, r6
   844c0:	d01a      	beq.n	844f8 <__swbuf_r+0x7c>
   844c2:	89a3      	ldrh	r3, [r4, #12]
   844c4:	07db      	lsls	r3, r3, #31
   844c6:	d501      	bpl.n	844cc <__swbuf_r+0x50>
   844c8:	2d0a      	cmp	r5, #10
   844ca:	d015      	beq.n	844f8 <__swbuf_r+0x7c>
   844cc:	4628      	mov	r0, r5
   844ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   844d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
   844d2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   844d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   844da:	6663      	str	r3, [r4, #100]	; 0x64
   844dc:	6823      	ldr	r3, [r4, #0]
   844de:	81a2      	strh	r2, [r4, #12]
   844e0:	6962      	ldr	r2, [r4, #20]
   844e2:	1b9e      	subs	r6, r3, r6
   844e4:	4296      	cmp	r6, r2
   844e6:	dbe2      	blt.n	844ae <__swbuf_r+0x32>
   844e8:	4638      	mov	r0, r7
   844ea:	4621      	mov	r1, r4
   844ec:	f7fe fd3e 	bl	82f6c <_fflush_r>
   844f0:	b940      	cbnz	r0, 84504 <__swbuf_r+0x88>
   844f2:	6823      	ldr	r3, [r4, #0]
   844f4:	2601      	movs	r6, #1
   844f6:	e7db      	b.n	844b0 <__swbuf_r+0x34>
   844f8:	4638      	mov	r0, r7
   844fa:	4621      	mov	r1, r4
   844fc:	f7fe fd36 	bl	82f6c <_fflush_r>
   84500:	2800      	cmp	r0, #0
   84502:	d0e3      	beq.n	844cc <__swbuf_r+0x50>
   84504:	f04f 30ff 	mov.w	r0, #4294967295
   84508:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8450a:	4638      	mov	r0, r7
   8450c:	4621      	mov	r1, r4
   8450e:	f7fe fc17 	bl	82d40 <__swsetup_r>
   84512:	2800      	cmp	r0, #0
   84514:	d1f6      	bne.n	84504 <__swbuf_r+0x88>
   84516:	89a2      	ldrh	r2, [r4, #12]
   84518:	6926      	ldr	r6, [r4, #16]
   8451a:	b293      	uxth	r3, r2
   8451c:	e7bf      	b.n	8449e <__swbuf_r+0x22>
   8451e:	f7fe fd41 	bl	82fa4 <__sinit>
   84522:	e7b3      	b.n	8448c <__swbuf_r+0x10>

00084524 <_wcrtomb_r>:
   84524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84528:	461e      	mov	r6, r3
   8452a:	b086      	sub	sp, #24
   8452c:	460c      	mov	r4, r1
   8452e:	4605      	mov	r5, r0
   84530:	4617      	mov	r7, r2
   84532:	4b0f      	ldr	r3, [pc, #60]	; (84570 <_wcrtomb_r+0x4c>)
   84534:	b191      	cbz	r1, 8455c <_wcrtomb_r+0x38>
   84536:	f8d3 8000 	ldr.w	r8, [r3]
   8453a:	f7ff f8f3 	bl	83724 <__locale_charset>
   8453e:	9600      	str	r6, [sp, #0]
   84540:	4603      	mov	r3, r0
   84542:	4621      	mov	r1, r4
   84544:	463a      	mov	r2, r7
   84546:	4628      	mov	r0, r5
   84548:	47c0      	blx	r8
   8454a:	1c43      	adds	r3, r0, #1
   8454c:	d103      	bne.n	84556 <_wcrtomb_r+0x32>
   8454e:	2200      	movs	r2, #0
   84550:	238a      	movs	r3, #138	; 0x8a
   84552:	6032      	str	r2, [r6, #0]
   84554:	602b      	str	r3, [r5, #0]
   84556:	b006      	add	sp, #24
   84558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8455c:	681f      	ldr	r7, [r3, #0]
   8455e:	f7ff f8e1 	bl	83724 <__locale_charset>
   84562:	9600      	str	r6, [sp, #0]
   84564:	4603      	mov	r3, r0
   84566:	4622      	mov	r2, r4
   84568:	4628      	mov	r0, r5
   8456a:	a903      	add	r1, sp, #12
   8456c:	47b8      	blx	r7
   8456e:	e7ec      	b.n	8454a <_wcrtomb_r+0x26>
   84570:	200709a0 	.word	0x200709a0

00084574 <__ascii_wctomb>:
   84574:	b121      	cbz	r1, 84580 <__ascii_wctomb+0xc>
   84576:	2aff      	cmp	r2, #255	; 0xff
   84578:	d804      	bhi.n	84584 <__ascii_wctomb+0x10>
   8457a:	700a      	strb	r2, [r1, #0]
   8457c:	2001      	movs	r0, #1
   8457e:	4770      	bx	lr
   84580:	4608      	mov	r0, r1
   84582:	4770      	bx	lr
   84584:	238a      	movs	r3, #138	; 0x8a
   84586:	6003      	str	r3, [r0, #0]
   84588:	f04f 30ff 	mov.w	r0, #4294967295
   8458c:	4770      	bx	lr
   8458e:	bf00      	nop

00084590 <_write_r>:
   84590:	b570      	push	{r4, r5, r6, lr}
   84592:	4c08      	ldr	r4, [pc, #32]	; (845b4 <_write_r+0x24>)
   84594:	4606      	mov	r6, r0
   84596:	2500      	movs	r5, #0
   84598:	4608      	mov	r0, r1
   8459a:	4611      	mov	r1, r2
   8459c:	461a      	mov	r2, r3
   8459e:	6025      	str	r5, [r4, #0]
   845a0:	f7fb fe54 	bl	8024c <_write>
   845a4:	1c43      	adds	r3, r0, #1
   845a6:	d000      	beq.n	845aa <_write_r+0x1a>
   845a8:	bd70      	pop	{r4, r5, r6, pc}
   845aa:	6823      	ldr	r3, [r4, #0]
   845ac:	2b00      	cmp	r3, #0
   845ae:	d0fb      	beq.n	845a8 <_write_r+0x18>
   845b0:	6033      	str	r3, [r6, #0]
   845b2:	bd70      	pop	{r4, r5, r6, pc}
   845b4:	20070b20 	.word	0x20070b20

000845b8 <__register_exitproc>:
   845b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   845ba:	4c27      	ldr	r4, [pc, #156]	; (84658 <__register_exitproc+0xa0>)
   845bc:	b085      	sub	sp, #20
   845be:	6826      	ldr	r6, [r4, #0]
   845c0:	4607      	mov	r7, r0
   845c2:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   845c6:	2c00      	cmp	r4, #0
   845c8:	d040      	beq.n	8464c <__register_exitproc+0x94>
   845ca:	6865      	ldr	r5, [r4, #4]
   845cc:	2d1f      	cmp	r5, #31
   845ce:	dd1e      	ble.n	8460e <__register_exitproc+0x56>
   845d0:	4822      	ldr	r0, [pc, #136]	; (8465c <__register_exitproc+0xa4>)
   845d2:	b918      	cbnz	r0, 845dc <__register_exitproc+0x24>
   845d4:	f04f 30ff 	mov.w	r0, #4294967295
   845d8:	b005      	add	sp, #20
   845da:	bdf0      	pop	{r4, r5, r6, r7, pc}
   845dc:	f44f 70c8 	mov.w	r0, #400	; 0x190
   845e0:	9103      	str	r1, [sp, #12]
   845e2:	9202      	str	r2, [sp, #8]
   845e4:	9301      	str	r3, [sp, #4]
   845e6:	f7ff f917 	bl	83818 <malloc>
   845ea:	9903      	ldr	r1, [sp, #12]
   845ec:	4604      	mov	r4, r0
   845ee:	9a02      	ldr	r2, [sp, #8]
   845f0:	9b01      	ldr	r3, [sp, #4]
   845f2:	2800      	cmp	r0, #0
   845f4:	d0ee      	beq.n	845d4 <__register_exitproc+0x1c>
   845f6:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
   845fa:	2000      	movs	r0, #0
   845fc:	6025      	str	r5, [r4, #0]
   845fe:	6060      	str	r0, [r4, #4]
   84600:	4605      	mov	r5, r0
   84602:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   84606:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   8460a:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   8460e:	b93f      	cbnz	r7, 84620 <__register_exitproc+0x68>
   84610:	1c6b      	adds	r3, r5, #1
   84612:	2000      	movs	r0, #0
   84614:	3502      	adds	r5, #2
   84616:	6063      	str	r3, [r4, #4]
   84618:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
   8461c:	b005      	add	sp, #20
   8461e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84620:	2601      	movs	r6, #1
   84622:	40ae      	lsls	r6, r5
   84624:	eb04 0085 	add.w	r0, r4, r5, lsl #2
   84628:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   8462c:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   84630:	2f02      	cmp	r7, #2
   84632:	ea42 0206 	orr.w	r2, r2, r6
   84636:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   8463a:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   8463e:	d1e7      	bne.n	84610 <__register_exitproc+0x58>
   84640:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   84644:	431e      	orrs	r6, r3
   84646:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
   8464a:	e7e1      	b.n	84610 <__register_exitproc+0x58>
   8464c:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   84650:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   84654:	e7b9      	b.n	845ca <__register_exitproc+0x12>
   84656:	bf00      	nop
   84658:	000847d4 	.word	0x000847d4
   8465c:	00083819 	.word	0x00083819

00084660 <_close_r>:
   84660:	b538      	push	{r3, r4, r5, lr}
   84662:	4c07      	ldr	r4, [pc, #28]	; (84680 <_close_r+0x20>)
   84664:	2300      	movs	r3, #0
   84666:	4605      	mov	r5, r0
   84668:	4608      	mov	r0, r1
   8466a:	6023      	str	r3, [r4, #0]
   8466c:	f7fc fac6 	bl	80bfc <_close>
   84670:	1c43      	adds	r3, r0, #1
   84672:	d000      	beq.n	84676 <_close_r+0x16>
   84674:	bd38      	pop	{r3, r4, r5, pc}
   84676:	6823      	ldr	r3, [r4, #0]
   84678:	2b00      	cmp	r3, #0
   8467a:	d0fb      	beq.n	84674 <_close_r+0x14>
   8467c:	602b      	str	r3, [r5, #0]
   8467e:	bd38      	pop	{r3, r4, r5, pc}
   84680:	20070b20 	.word	0x20070b20

00084684 <_fclose_r>:
   84684:	b570      	push	{r4, r5, r6, lr}
   84686:	460c      	mov	r4, r1
   84688:	4605      	mov	r5, r0
   8468a:	b131      	cbz	r1, 8469a <_fclose_r+0x16>
   8468c:	b110      	cbz	r0, 84694 <_fclose_r+0x10>
   8468e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   84690:	2b00      	cmp	r3, #0
   84692:	d02f      	beq.n	846f4 <_fclose_r+0x70>
   84694:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   84698:	b90b      	cbnz	r3, 8469e <_fclose_r+0x1a>
   8469a:	2000      	movs	r0, #0
   8469c:	bd70      	pop	{r4, r5, r6, pc}
   8469e:	4628      	mov	r0, r5
   846a0:	4621      	mov	r1, r4
   846a2:	f7fe fc63 	bl	82f6c <_fflush_r>
   846a6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   846a8:	4606      	mov	r6, r0
   846aa:	b133      	cbz	r3, 846ba <_fclose_r+0x36>
   846ac:	4628      	mov	r0, r5
   846ae:	69e1      	ldr	r1, [r4, #28]
   846b0:	4798      	blx	r3
   846b2:	2800      	cmp	r0, #0
   846b4:	bfb8      	it	lt
   846b6:	f04f 36ff 	movlt.w	r6, #4294967295
   846ba:	89a3      	ldrh	r3, [r4, #12]
   846bc:	061b      	lsls	r3, r3, #24
   846be:	d41c      	bmi.n	846fa <_fclose_r+0x76>
   846c0:	6b21      	ldr	r1, [r4, #48]	; 0x30
   846c2:	b141      	cbz	r1, 846d6 <_fclose_r+0x52>
   846c4:	f104 0340 	add.w	r3, r4, #64	; 0x40
   846c8:	4299      	cmp	r1, r3
   846ca:	d002      	beq.n	846d2 <_fclose_r+0x4e>
   846cc:	4628      	mov	r0, r5
   846ce:	f7fe fdad 	bl	8322c <_free_r>
   846d2:	2300      	movs	r3, #0
   846d4:	6323      	str	r3, [r4, #48]	; 0x30
   846d6:	6c61      	ldr	r1, [r4, #68]	; 0x44
   846d8:	b121      	cbz	r1, 846e4 <_fclose_r+0x60>
   846da:	4628      	mov	r0, r5
   846dc:	f7fe fda6 	bl	8322c <_free_r>
   846e0:	2300      	movs	r3, #0
   846e2:	6463      	str	r3, [r4, #68]	; 0x44
   846e4:	f7fe fcd8 	bl	83098 <__sfp_lock_acquire>
   846e8:	2300      	movs	r3, #0
   846ea:	81a3      	strh	r3, [r4, #12]
   846ec:	f7fe fcd6 	bl	8309c <__sfp_lock_release>
   846f0:	4630      	mov	r0, r6
   846f2:	bd70      	pop	{r4, r5, r6, pc}
   846f4:	f7fe fc56 	bl	82fa4 <__sinit>
   846f8:	e7cc      	b.n	84694 <_fclose_r+0x10>
   846fa:	4628      	mov	r0, r5
   846fc:	6921      	ldr	r1, [r4, #16]
   846fe:	f7fe fd95 	bl	8322c <_free_r>
   84702:	e7dd      	b.n	846c0 <_fclose_r+0x3c>

00084704 <fclose>:
   84704:	4b02      	ldr	r3, [pc, #8]	; (84710 <fclose+0xc>)
   84706:	4601      	mov	r1, r0
   84708:	6818      	ldr	r0, [r3, #0]
   8470a:	f7ff bfbb 	b.w	84684 <_fclose_r>
   8470e:	bf00      	nop
   84710:	20070568 	.word	0x20070568

00084714 <_fstat_r>:
   84714:	b538      	push	{r3, r4, r5, lr}
   84716:	4c08      	ldr	r4, [pc, #32]	; (84738 <_fstat_r+0x24>)
   84718:	2300      	movs	r3, #0
   8471a:	4605      	mov	r5, r0
   8471c:	4608      	mov	r0, r1
   8471e:	4611      	mov	r1, r2
   84720:	6023      	str	r3, [r4, #0]
   84722:	f7fc fa6f 	bl	80c04 <_fstat>
   84726:	1c43      	adds	r3, r0, #1
   84728:	d000      	beq.n	8472c <_fstat_r+0x18>
   8472a:	bd38      	pop	{r3, r4, r5, pc}
   8472c:	6823      	ldr	r3, [r4, #0]
   8472e:	2b00      	cmp	r3, #0
   84730:	d0fb      	beq.n	8472a <_fstat_r+0x16>
   84732:	602b      	str	r3, [r5, #0]
   84734:	bd38      	pop	{r3, r4, r5, pc}
   84736:	bf00      	nop
   84738:	20070b20 	.word	0x20070b20

0008473c <_isatty_r>:
   8473c:	b538      	push	{r3, r4, r5, lr}
   8473e:	4c07      	ldr	r4, [pc, #28]	; (8475c <_isatty_r+0x20>)
   84740:	2300      	movs	r3, #0
   84742:	4605      	mov	r5, r0
   84744:	4608      	mov	r0, r1
   84746:	6023      	str	r3, [r4, #0]
   84748:	f7fc fa62 	bl	80c10 <_isatty>
   8474c:	1c43      	adds	r3, r0, #1
   8474e:	d000      	beq.n	84752 <_isatty_r+0x16>
   84750:	bd38      	pop	{r3, r4, r5, pc}
   84752:	6823      	ldr	r3, [r4, #0]
   84754:	2b00      	cmp	r3, #0
   84756:	d0fb      	beq.n	84750 <_isatty_r+0x14>
   84758:	602b      	str	r3, [r5, #0]
   8475a:	bd38      	pop	{r3, r4, r5, pc}
   8475c:	20070b20 	.word	0x20070b20

00084760 <_lseek_r>:
   84760:	b570      	push	{r4, r5, r6, lr}
   84762:	4c08      	ldr	r4, [pc, #32]	; (84784 <_lseek_r+0x24>)
   84764:	4606      	mov	r6, r0
   84766:	2500      	movs	r5, #0
   84768:	4608      	mov	r0, r1
   8476a:	4611      	mov	r1, r2
   8476c:	461a      	mov	r2, r3
   8476e:	6025      	str	r5, [r4, #0]
   84770:	f7fc fa50 	bl	80c14 <_lseek>
   84774:	1c43      	adds	r3, r0, #1
   84776:	d000      	beq.n	8477a <_lseek_r+0x1a>
   84778:	bd70      	pop	{r4, r5, r6, pc}
   8477a:	6823      	ldr	r3, [r4, #0]
   8477c:	2b00      	cmp	r3, #0
   8477e:	d0fb      	beq.n	84778 <_lseek_r+0x18>
   84780:	6033      	str	r3, [r6, #0]
   84782:	bd70      	pop	{r4, r5, r6, pc}
   84784:	20070b20 	.word	0x20070b20

00084788 <_read_r>:
   84788:	b570      	push	{r4, r5, r6, lr}
   8478a:	4c08      	ldr	r4, [pc, #32]	; (847ac <_read_r+0x24>)
   8478c:	4606      	mov	r6, r0
   8478e:	2500      	movs	r5, #0
   84790:	4608      	mov	r0, r1
   84792:	4611      	mov	r1, r2
   84794:	461a      	mov	r2, r3
   84796:	6025      	str	r5, [r4, #0]
   84798:	f7fb fd38 	bl	8020c <_read>
   8479c:	1c43      	adds	r3, r0, #1
   8479e:	d000      	beq.n	847a2 <_read_r+0x1a>
   847a0:	bd70      	pop	{r4, r5, r6, pc}
   847a2:	6823      	ldr	r3, [r4, #0]
   847a4:	2b00      	cmp	r3, #0
   847a6:	d0fb      	beq.n	847a0 <_read_r+0x18>
   847a8:	6033      	str	r3, [r6, #0]
   847aa:	bd70      	pop	{r4, r5, r6, pc}
   847ac:	20070b20 	.word	0x20070b20
   847b0:	736e6f43 	.word	0x736e6f43
   847b4:	20656c6f 	.word	0x20656c6f
   847b8:	64616572 	.word	0x64616572
   847bc:	00000a79 	.word	0x00000a79
   847c0:	3d3d3d3d 	.word	0x3d3d3d3d
   847c4:	3d3d3d3d 	.word	0x3d3d3d3d
   847c8:	3d3d3d3d 	.word	0x3d3d3d3d
   847cc:	00000a3d 	.word	0x00000a3d
   847d0:	00000043 	.word	0x00000043

000847d4 <_global_impure_ptr>:
   847d4:	20070140 33323130 37363534 42413938     @.. 0123456789AB
   847e4:	46454443 00000000 33323130 37363534     CDEF....01234567
   847f4:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   84804:	0000296c                                l)..

00084808 <zeroes.6721>:
   84808:	30303030 30303030 30303030 30303030     0000000000000000

00084818 <blanks.6720>:
   84818:	20202020 20202020 20202020 20202020                     

00084828 <_init>:
   84828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8482a:	bf00      	nop
   8482c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8482e:	bc08      	pop	{r3}
   84830:	469e      	mov	lr, r3
   84832:	4770      	bx	lr

00084834 <__init_array_start>:
   84834:	00082e05 	.word	0x00082e05

00084838 <__frame_dummy_init_array_entry>:
   84838:	00080119                                ....

0008483c <_fini>:
   8483c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8483e:	bf00      	nop
   84840:	bcf8      	pop	{r3, r4, r5, r6, r7}
   84842:	bc08      	pop	{r3}
   84844:	469e      	mov	lr, r3
   84846:	4770      	bx	lr

00084848 <__fini_array_start>:
   84848:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20070000:	f3bf 8f5f 	dmb	sy
20070004:	3801      	subs	r0, #1
20070006:	d1fb      	bne.n	20070000 <portable_delay_cycles>
20070008:	4770      	bx	lr
2007000a:	bf00      	nop

2007000c <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007000c:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070010:	4a20      	ldr	r2, [pc, #128]	; (20070094 <SystemInit+0x88>)
20070012:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070014:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070018:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007001a:	4b1f      	ldr	r3, [pc, #124]	; (20070098 <SystemInit+0x8c>)
2007001c:	6a1b      	ldr	r3, [r3, #32]
2007001e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070022:	d107      	bne.n	20070034 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070024:	4a1d      	ldr	r2, [pc, #116]	; (2007009c <SystemInit+0x90>)
20070026:	4b1c      	ldr	r3, [pc, #112]	; (20070098 <SystemInit+0x8c>)
20070028:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007002a:	461a      	mov	r2, r3
2007002c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007002e:	f013 0f01 	tst.w	r3, #1
20070032:	d0fb      	beq.n	2007002c <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070034:	4a1a      	ldr	r2, [pc, #104]	; (200700a0 <SystemInit+0x94>)
20070036:	4b18      	ldr	r3, [pc, #96]	; (20070098 <SystemInit+0x8c>)
20070038:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007003a:	461a      	mov	r2, r3
2007003c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007003e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070042:	d0fb      	beq.n	2007003c <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070044:	4b14      	ldr	r3, [pc, #80]	; (20070098 <SystemInit+0x8c>)
20070046:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20070048:	f022 0203 	bic.w	r2, r2, #3
2007004c:	f042 0201 	orr.w	r2, r2, #1
20070050:	631a      	str	r2, [r3, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070052:	461a      	mov	r2, r3
20070054:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070056:	f013 0f08 	tst.w	r3, #8
2007005a:	d0fb      	beq.n	20070054 <SystemInit+0x48>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007005c:	4a11      	ldr	r2, [pc, #68]	; (200700a4 <SystemInit+0x98>)
2007005e:	4b0e      	ldr	r3, [pc, #56]	; (20070098 <SystemInit+0x8c>)
20070060:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070062:	461a      	mov	r2, r3
20070064:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070066:	f013 0f02 	tst.w	r3, #2
2007006a:	d0fb      	beq.n	20070064 <SystemInit+0x58>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007006c:	2211      	movs	r2, #17
2007006e:	4b0a      	ldr	r3, [pc, #40]	; (20070098 <SystemInit+0x8c>)
20070070:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070072:	461a      	mov	r2, r3
20070074:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070076:	f013 0f08 	tst.w	r3, #8
2007007a:	d0fb      	beq.n	20070074 <SystemInit+0x68>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007007c:	2212      	movs	r2, #18
2007007e:	4b06      	ldr	r3, [pc, #24]	; (20070098 <SystemInit+0x8c>)
20070080:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070082:	461a      	mov	r2, r3
20070084:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070086:	f013 0f08 	tst.w	r3, #8
2007008a:	d0fb      	beq.n	20070084 <SystemInit+0x78>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007008c:	4a06      	ldr	r2, [pc, #24]	; (200700a8 <SystemInit+0x9c>)
2007008e:	4b07      	ldr	r3, [pc, #28]	; (200700ac <SystemInit+0xa0>)
20070090:	601a      	str	r2, [r3, #0]
20070092:	4770      	bx	lr
20070094:	400e0a00 	.word	0x400e0a00
20070098:	400e0600 	.word	0x400e0600
2007009c:	00370809 	.word	0x00370809
200700a0:	01370809 	.word	0x01370809
200700a4:	200d3f01 	.word	0x200d3f01
200700a8:	0501bd00 	.word	0x0501bd00
200700ac:	2007013c 	.word	0x2007013c

200700b0 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700b0:	4b1b      	ldr	r3, [pc, #108]	; (20070120 <system_init_flash+0x70>)
200700b2:	4298      	cmp	r0, r3
200700b4:	d806      	bhi.n	200700c4 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700b6:	2300      	movs	r3, #0
200700b8:	4a1a      	ldr	r2, [pc, #104]	; (20070124 <system_init_flash+0x74>)
200700ba:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700bc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700c0:	6013      	str	r3, [r2, #0]
200700c2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700c4:	4b18      	ldr	r3, [pc, #96]	; (20070128 <system_init_flash+0x78>)
200700c6:	4298      	cmp	r0, r3
200700c8:	d807      	bhi.n	200700da <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700ca:	f44f 7380 	mov.w	r3, #256	; 0x100
200700ce:	4a15      	ldr	r2, [pc, #84]	; (20070124 <system_init_flash+0x74>)
200700d0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700d2:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700d6:	6013      	str	r3, [r2, #0]
200700d8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700da:	4b14      	ldr	r3, [pc, #80]	; (2007012c <system_init_flash+0x7c>)
200700dc:	4298      	cmp	r0, r3
200700de:	d807      	bhi.n	200700f0 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700e0:	f44f 7300 	mov.w	r3, #512	; 0x200
200700e4:	4a0f      	ldr	r2, [pc, #60]	; (20070124 <system_init_flash+0x74>)
200700e6:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700e8:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ec:	6013      	str	r3, [r2, #0]
200700ee:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700f0:	4b0f      	ldr	r3, [pc, #60]	; (20070130 <system_init_flash+0x80>)
200700f2:	4298      	cmp	r0, r3
200700f4:	d807      	bhi.n	20070106 <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700f6:	f44f 7340 	mov.w	r3, #768	; 0x300
200700fa:	4a0a      	ldr	r2, [pc, #40]	; (20070124 <system_init_flash+0x74>)
200700fc:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700fe:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070102:	6013      	str	r3, [r2, #0]
20070104:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
20070106:	4b0b      	ldr	r3, [pc, #44]	; (20070134 <system_init_flash+0x84>)
20070108:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007010a:	bf94      	ite	ls
2007010c:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070110:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070114:	4a03      	ldr	r2, [pc, #12]	; (20070124 <system_init_flash+0x74>)
20070116:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
20070118:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007011c:	6013      	str	r3, [r2, #0]
2007011e:	4770      	bx	lr
20070120:	0121eabf 	.word	0x0121eabf
20070124:	400e0a00 	.word	0x400e0a00
20070128:	02faf07f 	.word	0x02faf07f
2007012c:	03d08fff 	.word	0x03d08fff
20070130:	04c4b3ff 	.word	0x04c4b3ff
20070134:	055d4a7f 	.word	0x055d4a7f

20070138 <g_interrupt_enabled>:
20070138:	00000001                                ....

2007013c <SystemCoreClock>:
2007013c:	003d0900                                ..=.

20070140 <impure_data>:
20070140:	00000000 2007042c 20070494 200704fc     ....,.. ... ... 
	...
20070174:	000847d0 00000000 00000000 00000000     .G..............
	...
200701e8:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200701f8:	0005deec 0000000b 00000000 00000000     ................
	...

20070568 <_impure_ptr>:
20070568:	20070140                                @.. 

2007056c <lc_ctype_charset>:
2007056c:	49435341 00000049 00000000 00000000     ASCII...........
	...

2007058c <__mb_cur_max>:
2007058c:	00000001                                ....

20070590 <__malloc_av_>:
	...
20070598:	20070590 20070590 20070598 20070598     ... ... ... ... 
200705a8:	200705a0 200705a0 200705a8 200705a8     ... ... ... ... 
200705b8:	200705b0 200705b0 200705b8 200705b8     ... ... ... ... 
200705c8:	200705c0 200705c0 200705c8 200705c8     ... ... ... ... 
200705d8:	200705d0 200705d0 200705d8 200705d8     ... ... ... ... 
200705e8:	200705e0 200705e0 200705e8 200705e8     ... ... ... ... 
200705f8:	200705f0 200705f0 200705f8 200705f8     ... ... ... ... 
20070608:	20070600 20070600 20070608 20070608     ... ... ... ... 
20070618:	20070610 20070610 20070618 20070618     ... ... ... ... 
20070628:	20070620 20070620 20070628 20070628      ..  .. (.. (.. 
20070638:	20070630 20070630 20070638 20070638     0.. 0.. 8.. 8.. 
20070648:	20070640 20070640 20070648 20070648     @.. @.. H.. H.. 
20070658:	20070650 20070650 20070658 20070658     P.. P.. X.. X.. 
20070668:	20070660 20070660 20070668 20070668     `.. `.. h.. h.. 
20070678:	20070670 20070670 20070678 20070678     p.. p.. x.. x.. 
20070688:	20070680 20070680 20070688 20070688     ... ... ... ... 
20070698:	20070690 20070690 20070698 20070698     ... ... ... ... 
200706a8:	200706a0 200706a0 200706a8 200706a8     ... ... ... ... 
200706b8:	200706b0 200706b0 200706b8 200706b8     ... ... ... ... 
200706c8:	200706c0 200706c0 200706c8 200706c8     ... ... ... ... 
200706d8:	200706d0 200706d0 200706d8 200706d8     ... ... ... ... 
200706e8:	200706e0 200706e0 200706e8 200706e8     ... ... ... ... 
200706f8:	200706f0 200706f0 200706f8 200706f8     ... ... ... ... 
20070708:	20070700 20070700 20070708 20070708     ... ... ... ... 
20070718:	20070710 20070710 20070718 20070718     ... ... ... ... 
20070728:	20070720 20070720 20070728 20070728      ..  .. (.. (.. 
20070738:	20070730 20070730 20070738 20070738     0.. 0.. 8.. 8.. 
20070748:	20070740 20070740 20070748 20070748     @.. @.. H.. H.. 
20070758:	20070750 20070750 20070758 20070758     P.. P.. X.. X.. 
20070768:	20070760 20070760 20070768 20070768     `.. `.. h.. h.. 
20070778:	20070770 20070770 20070778 20070778     p.. p.. x.. x.. 
20070788:	20070780 20070780 20070788 20070788     ... ... ... ... 
20070798:	20070790 20070790 20070798 20070798     ... ... ... ... 
200707a8:	200707a0 200707a0 200707a8 200707a8     ... ... ... ... 
200707b8:	200707b0 200707b0 200707b8 200707b8     ... ... ... ... 
200707c8:	200707c0 200707c0 200707c8 200707c8     ... ... ... ... 
200707d8:	200707d0 200707d0 200707d8 200707d8     ... ... ... ... 
200707e8:	200707e0 200707e0 200707e8 200707e8     ... ... ... ... 
200707f8:	200707f0 200707f0 200707f8 200707f8     ... ... ... ... 
20070808:	20070800 20070800 20070808 20070808     ... ... ... ... 
20070818:	20070810 20070810 20070818 20070818     ... ... ... ... 
20070828:	20070820 20070820 20070828 20070828      ..  .. (.. (.. 
20070838:	20070830 20070830 20070838 20070838     0.. 0.. 8.. 8.. 
20070848:	20070840 20070840 20070848 20070848     @.. @.. H.. H.. 
20070858:	20070850 20070850 20070858 20070858     P.. P.. X.. X.. 
20070868:	20070860 20070860 20070868 20070868     `.. `.. h.. h.. 
20070878:	20070870 20070870 20070878 20070878     p.. p.. x.. x.. 
20070888:	20070880 20070880 20070888 20070888     ... ... ... ... 
20070898:	20070890 20070890 20070898 20070898     ... ... ... ... 
200708a8:	200708a0 200708a0 200708a8 200708a8     ... ... ... ... 
200708b8:	200708b0 200708b0 200708b8 200708b8     ... ... ... ... 
200708c8:	200708c0 200708c0 200708c8 200708c8     ... ... ... ... 
200708d8:	200708d0 200708d0 200708d8 200708d8     ... ... ... ... 
200708e8:	200708e0 200708e0 200708e8 200708e8     ... ... ... ... 
200708f8:	200708f0 200708f0 200708f8 200708f8     ... ... ... ... 
20070908:	20070900 20070900 20070908 20070908     ... ... ... ... 
20070918:	20070910 20070910 20070918 20070918     ... ... ... ... 
20070928:	20070920 20070920 20070928 20070928      ..  .. (.. (.. 
20070938:	20070930 20070930 20070938 20070938     0.. 0.. 8.. 8.. 
20070948:	20070940 20070940 20070948 20070948     @.. @.. H.. H.. 
20070958:	20070950 20070950 20070958 20070958     P.. P.. X.. X.. 
20070968:	20070960 20070960 20070968 20070968     `.. `.. h.. h.. 
20070978:	20070970 20070970 20070978 20070978     p.. p.. x.. x.. 
20070988:	20070980 20070980 20070988 20070988     ... ... ... ... 

20070998 <__malloc_trim_threshold>:
20070998:	00020000                                ....

2007099c <__malloc_sbrk_base>:
2007099c:	ffffffff                                ....

200709a0 <__wctomb>:
200709a0:	00084575                                uE..
