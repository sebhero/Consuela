
GccBoardProject1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ff4  00080000  00080000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00080ff4  00080ff4  00008ff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000568  20070000  00080ffc  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000008c  20070568  00081564  00010568  2**2
                  ALLOC
  4 .stack        00002004  200705f4  000815f0  00010568  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00010568  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  00010591  2**0
                  CONTENTS, READONLY
  7 .debug_info   00005dd7  00000000  00000000  000105ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001273  00000000  00000000  000163c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00001f41  00000000  00000000  00017636  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000508  00000000  00000000  00019577  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000458  00000000  00000000  00019a7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00004026  00000000  00000000  00019ed7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00008aec  00000000  00000000  0001defd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0005f715  00000000  00000000  000269e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00000bc8  00000000  00000000  00086100  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	200725f8 	.word	0x200725f8
   80004:	00080621 	.word	0x00080621
   80008:	0008061d 	.word	0x0008061d
   8000c:	0008061d 	.word	0x0008061d
   80010:	0008061d 	.word	0x0008061d
   80014:	0008061d 	.word	0x0008061d
   80018:	0008061d 	.word	0x0008061d
	...
   8002c:	0008061d 	.word	0x0008061d
   80030:	0008061d 	.word	0x0008061d
   80034:	00000000 	.word	0x00000000
   80038:	0008061d 	.word	0x0008061d
   8003c:	0008061d 	.word	0x0008061d
   80040:	0008061d 	.word	0x0008061d
   80044:	0008061d 	.word	0x0008061d
   80048:	0008061d 	.word	0x0008061d
   8004c:	0008061d 	.word	0x0008061d
   80050:	0008061d 	.word	0x0008061d
   80054:	0008061d 	.word	0x0008061d
   80058:	0008061d 	.word	0x0008061d
   8005c:	0008061d 	.word	0x0008061d
   80060:	0008061d 	.word	0x0008061d
   80064:	0008061d 	.word	0x0008061d
   80068:	00000000 	.word	0x00000000
   8006c:	0008048d 	.word	0x0008048d
   80070:	000804a1 	.word	0x000804a1
   80074:	000804b5 	.word	0x000804b5
   80078:	000804c9 	.word	0x000804c9
	...
   80084:	0008061d 	.word	0x0008061d
   80088:	0008061d 	.word	0x0008061d
   8008c:	0008061d 	.word	0x0008061d
   80090:	0008061d 	.word	0x0008061d
   80094:	0008061d 	.word	0x0008061d
   80098:	0008061d 	.word	0x0008061d
   8009c:	0008061d 	.word	0x0008061d
   800a0:	0008061d 	.word	0x0008061d
   800a4:	00000000 	.word	0x00000000
   800a8:	0008061d 	.word	0x0008061d
   800ac:	0008061d 	.word	0x0008061d
   800b0:	0008061d 	.word	0x0008061d
   800b4:	0008061d 	.word	0x0008061d
   800b8:	0008061d 	.word	0x0008061d
   800bc:	0008061d 	.word	0x0008061d
   800c0:	0008061d 	.word	0x0008061d
   800c4:	0008061d 	.word	0x0008061d
   800c8:	0008061d 	.word	0x0008061d
   800cc:	0008061d 	.word	0x0008061d
   800d0:	0008061d 	.word	0x0008061d
   800d4:	0008061d 	.word	0x0008061d
   800d8:	0008061d 	.word	0x0008061d
   800dc:	0008061d 	.word	0x0008061d
   800e0:	0008061d 	.word	0x0008061d
   800e4:	0008061d 	.word	0x0008061d
   800e8:	0008061d 	.word	0x0008061d
   800ec:	0008061d 	.word	0x0008061d
   800f0:	0008061d 	.word	0x0008061d

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070568 	.word	0x20070568
   80110:	00000000 	.word	0x00000000
   80114:	00080ffc 	.word	0x00080ffc

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b06      	ldr	r3, [pc, #24]	; (80134 <frame_dummy+0x1c>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4806      	ldr	r0, [pc, #24]	; (80138 <frame_dummy+0x20>)
   80120:	4906      	ldr	r1, [pc, #24]	; (8013c <frame_dummy+0x24>)
   80122:	f3af 8000 	nop.w
   80126:	4806      	ldr	r0, [pc, #24]	; (80140 <frame_dummy+0x28>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b113      	cbz	r3, 80132 <frame_dummy+0x1a>
   8012c:	4b05      	ldr	r3, [pc, #20]	; (80144 <frame_dummy+0x2c>)
   8012e:	b103      	cbz	r3, 80132 <frame_dummy+0x1a>
   80130:	4798      	blx	r3
   80132:	bd08      	pop	{r3, pc}
   80134:	00000000 	.word	0x00000000
   80138:	00080ffc 	.word	0x00080ffc
   8013c:	2007056c 	.word	0x2007056c
   80140:	00080ffc 	.word	0x00080ffc
   80144:	00000000 	.word	0x00000000

00080148 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   80148:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   8014a:	480e      	ldr	r0, [pc, #56]	; (80184 <sysclk_init+0x3c>)
   8014c:	4b0e      	ldr	r3, [pc, #56]	; (80188 <sysclk_init+0x40>)
   8014e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   80150:	2000      	movs	r0, #0
   80152:	213e      	movs	r1, #62	; 0x3e
   80154:	4b0d      	ldr	r3, [pc, #52]	; (8018c <sysclk_init+0x44>)
   80156:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   80158:	4c0d      	ldr	r4, [pc, #52]	; (80190 <sysclk_init+0x48>)
   8015a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   8015c:	2800      	cmp	r0, #0
   8015e:	d0fc      	beq.n	8015a <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   80160:	4b0c      	ldr	r3, [pc, #48]	; (80194 <sysclk_init+0x4c>)
   80162:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   80164:	4a0c      	ldr	r2, [pc, #48]	; (80198 <sysclk_init+0x50>)
   80166:	4b0d      	ldr	r3, [pc, #52]	; (8019c <sysclk_init+0x54>)
   80168:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   8016a:	4c0d      	ldr	r4, [pc, #52]	; (801a0 <sysclk_init+0x58>)
   8016c:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   8016e:	2800      	cmp	r0, #0
   80170:	d0fc      	beq.n	8016c <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   80172:	2010      	movs	r0, #16
   80174:	4b0b      	ldr	r3, [pc, #44]	; (801a4 <sysclk_init+0x5c>)
   80176:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   80178:	4b0b      	ldr	r3, [pc, #44]	; (801a8 <sysclk_init+0x60>)
   8017a:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   8017c:	4801      	ldr	r0, [pc, #4]	; (80184 <sysclk_init+0x3c>)
   8017e:	4b02      	ldr	r3, [pc, #8]	; (80188 <sysclk_init+0x40>)
   80180:	4798      	blx	r3
   80182:	bd10      	pop	{r4, pc}
   80184:	0501bd00 	.word	0x0501bd00
   80188:	200700b1 	.word	0x200700b1
   8018c:	00080541 	.word	0x00080541
   80190:	00080595 	.word	0x00080595
   80194:	000805a5 	.word	0x000805a5
   80198:	200d3f01 	.word	0x200d3f01
   8019c:	400e0600 	.word	0x400e0600
   801a0:	000805b5 	.word	0x000805b5
   801a4:	000804dd 	.word	0x000804dd
   801a8:	000806d1 	.word	0x000806d1

000801ac <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   801ac:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   801ae:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   801b2:	4b13      	ldr	r3, [pc, #76]	; (80200 <board_init+0x54>)
   801b4:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   801b6:	200b      	movs	r0, #11
   801b8:	4c12      	ldr	r4, [pc, #72]	; (80204 <board_init+0x58>)
   801ba:	47a0      	blx	r4
   801bc:	200c      	movs	r0, #12
   801be:	47a0      	blx	r4
   801c0:	200d      	movs	r0, #13
   801c2:	47a0      	blx	r4
   801c4:	200e      	movs	r0, #14
   801c6:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   801c8:	203b      	movs	r0, #59	; 0x3b
   801ca:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   801ce:	4c0e      	ldr	r4, [pc, #56]	; (80208 <board_init+0x5c>)
   801d0:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   801d2:	2055      	movs	r0, #85	; 0x55
   801d4:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   801d8:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   801da:	2056      	movs	r0, #86	; 0x56
   801dc:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   801e0:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   801e2:	2068      	movs	r0, #104	; 0x68
   801e4:	4909      	ldr	r1, [pc, #36]	; (8020c <board_init+0x60>)
   801e6:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   801e8:	205c      	movs	r0, #92	; 0x5c
   801ea:	4909      	ldr	r1, [pc, #36]	; (80210 <board_init+0x64>)
   801ec:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   801ee:	4809      	ldr	r0, [pc, #36]	; (80214 <board_init+0x68>)
   801f0:	f44f 7140 	mov.w	r1, #768	; 0x300
   801f4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   801f8:	4b07      	ldr	r3, [pc, #28]	; (80218 <board_init+0x6c>)
   801fa:	4798      	blx	r3
   801fc:	bd10      	pop	{r4, pc}
   801fe:	bf00      	nop
   80200:	400e1a50 	.word	0x400e1a50
   80204:	000805c5 	.word	0x000805c5
   80208:	000802c1 	.word	0x000802c1
   8020c:	28000079 	.word	0x28000079
   80210:	28000001 	.word	0x28000001
   80214:	400e0e00 	.word	0x400e0e00
   80218:	00080395 	.word	0x00080395

0008021c <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   8021c:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   8021e:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   80222:	d016      	beq.n	80252 <pio_set_peripheral+0x36>
   80224:	d804      	bhi.n	80230 <pio_set_peripheral+0x14>
   80226:	b1c1      	cbz	r1, 8025a <pio_set_peripheral+0x3e>
   80228:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   8022c:	d00a      	beq.n	80244 <pio_set_peripheral+0x28>
   8022e:	e013      	b.n	80258 <pio_set_peripheral+0x3c>
   80230:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   80234:	d011      	beq.n	8025a <pio_set_peripheral+0x3e>
   80236:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   8023a:	d00e      	beq.n	8025a <pio_set_peripheral+0x3e>
   8023c:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   80240:	d10a      	bne.n	80258 <pio_set_peripheral+0x3c>
   80242:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   80244:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   80246:	6f01      	ldr	r1, [r0, #112]	; 0x70
   80248:	400b      	ands	r3, r1
   8024a:	ea23 0302 	bic.w	r3, r3, r2
   8024e:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   80250:	e002      	b.n	80258 <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   80252:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   80254:	4313      	orrs	r3, r2
   80256:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   80258:	6042      	str	r2, [r0, #4]
   8025a:	4770      	bx	lr

0008025c <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   8025c:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8025e:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   80262:	bf14      	ite	ne
   80264:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80266:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   80268:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   8026c:	bf14      	ite	ne
   8026e:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   80270:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   80272:	f012 0f02 	tst.w	r2, #2
   80276:	d002      	beq.n	8027e <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   80278:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   8027c:	e004      	b.n	80288 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   8027e:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   80282:	bf18      	it	ne
   80284:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   80288:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   8028a:	6001      	str	r1, [r0, #0]
   8028c:	4770      	bx	lr
   8028e:	bf00      	nop

00080290 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   80290:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   80292:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80294:	9c01      	ldr	r4, [sp, #4]
   80296:	b10c      	cbz	r4, 8029c <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   80298:	6641      	str	r1, [r0, #100]	; 0x64
   8029a:	e000      	b.n	8029e <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8029c:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   8029e:	b10b      	cbz	r3, 802a4 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   802a0:	6501      	str	r1, [r0, #80]	; 0x50
   802a2:	e000      	b.n	802a6 <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   802a4:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   802a6:	b10a      	cbz	r2, 802ac <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   802a8:	6301      	str	r1, [r0, #48]	; 0x30
   802aa:	e000      	b.n	802ae <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   802ac:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   802ae:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   802b0:	6001      	str	r1, [r0, #0]
}
   802b2:	f85d 4b04 	ldr.w	r4, [sp], #4
   802b6:	4770      	bx	lr

000802b8 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   802b8:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   802ba:	4770      	bx	lr

000802bc <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   802bc:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   802be:	4770      	bx	lr

000802c0 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   802c0:	b570      	push	{r4, r5, r6, lr}
   802c2:	b082      	sub	sp, #8
   802c4:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   802c6:	0944      	lsrs	r4, r0, #5
   802c8:	f504 1400 	add.w	r4, r4, #2097152	; 0x200000
   802cc:	f204 7407 	addw	r4, r4, #1799	; 0x707
   802d0:	0266      	lsls	r6, r4, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   802d2:	f001 44f0 	and.w	r4, r1, #2013265920	; 0x78000000
   802d6:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   802da:	d030      	beq.n	8033e <pio_configure_pin+0x7e>
   802dc:	d806      	bhi.n	802ec <pio_configure_pin+0x2c>
   802de:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   802e2:	d00a      	beq.n	802fa <pio_configure_pin+0x3a>
   802e4:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   802e8:	d018      	beq.n	8031c <pio_configure_pin+0x5c>
   802ea:	e049      	b.n	80380 <pio_configure_pin+0xc0>
   802ec:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   802f0:	d030      	beq.n	80354 <pio_configure_pin+0x94>
   802f2:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   802f6:	d02d      	beq.n	80354 <pio_configure_pin+0x94>
   802f8:	e042      	b.n	80380 <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   802fa:	f000 001f 	and.w	r0, r0, #31
   802fe:	2401      	movs	r4, #1
   80300:	4084      	lsls	r4, r0
   80302:	4630      	mov	r0, r6
   80304:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80308:	4622      	mov	r2, r4
   8030a:	4b1f      	ldr	r3, [pc, #124]	; (80388 <pio_configure_pin+0xc8>)
   8030c:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8030e:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80312:	bf14      	ite	ne
   80314:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80316:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80318:	2001      	movs	r0, #1
   8031a:	e032      	b.n	80382 <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   8031c:	f000 001f 	and.w	r0, r0, #31
   80320:	2401      	movs	r4, #1
   80322:	4084      	lsls	r4, r0
   80324:	4630      	mov	r0, r6
   80326:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8032a:	4622      	mov	r2, r4
   8032c:	4b16      	ldr	r3, [pc, #88]	; (80388 <pio_configure_pin+0xc8>)
   8032e:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80330:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80334:	bf14      	ite	ne
   80336:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80338:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   8033a:	2001      	movs	r0, #1
   8033c:	e021      	b.n	80382 <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   8033e:	f000 011f 	and.w	r1, r0, #31
   80342:	2401      	movs	r4, #1
   80344:	4630      	mov	r0, r6
   80346:	fa04 f101 	lsl.w	r1, r4, r1
   8034a:	462a      	mov	r2, r5
   8034c:	4b0f      	ldr	r3, [pc, #60]	; (8038c <pio_configure_pin+0xcc>)
   8034e:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80350:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   80352:	e016      	b.n	80382 <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80354:	f000 011f 	and.w	r1, r0, #31
   80358:	2401      	movs	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   8035a:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   8035e:	ea05 0304 	and.w	r3, r5, r4
   80362:	9300      	str	r3, [sp, #0]
   80364:	4630      	mov	r0, r6
   80366:	fa04 f101 	lsl.w	r1, r4, r1
   8036a:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   8036e:	bf14      	ite	ne
   80370:	2200      	movne	r2, #0
   80372:	2201      	moveq	r2, #1
   80374:	f3c5 0380 	ubfx	r3, r5, #2, #1
   80378:	4d05      	ldr	r5, [pc, #20]	; (80390 <pio_configure_pin+0xd0>)
   8037a:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
   8037c:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   8037e:	e000      	b.n	80382 <pio_configure_pin+0xc2>

	default:
		return 0;
   80380:	2000      	movs	r0, #0
	}

	return 1;
}
   80382:	b002      	add	sp, #8
   80384:	bd70      	pop	{r4, r5, r6, pc}
   80386:	bf00      	nop
   80388:	0008021d 	.word	0x0008021d
   8038c:	0008025d 	.word	0x0008025d
   80390:	00080291 	.word	0x00080291

00080394 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   80394:	b5f0      	push	{r4, r5, r6, r7, lr}
   80396:	b083      	sub	sp, #12
   80398:	4607      	mov	r7, r0
   8039a:	460e      	mov	r6, r1
   8039c:	4615      	mov	r5, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   8039e:	f002 44f0 	and.w	r4, r2, #2013265920	; 0x78000000
   803a2:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   803a6:	d026      	beq.n	803f6 <pio_configure_pin_group+0x62>
   803a8:	d806      	bhi.n	803b8 <pio_configure_pin_group+0x24>
   803aa:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   803ae:	d00a      	beq.n	803c6 <pio_configure_pin_group+0x32>
   803b0:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   803b4:	d013      	beq.n	803de <pio_configure_pin_group+0x4a>
   803b6:	e034      	b.n	80422 <pio_configure_pin_group+0x8e>
   803b8:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   803bc:	d01f      	beq.n	803fe <pio_configure_pin_group+0x6a>
   803be:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   803c2:	d01c      	beq.n	803fe <pio_configure_pin_group+0x6a>
   803c4:	e02d      	b.n	80422 <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   803c6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   803ca:	4632      	mov	r2, r6
   803cc:	4b16      	ldr	r3, [pc, #88]	; (80428 <pio_configure_pin_group+0x94>)
   803ce:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   803d0:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   803d4:	bf14      	ite	ne
   803d6:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   803d8:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   803da:	2001      	movs	r0, #1
   803dc:	e022      	b.n	80424 <pio_configure_pin_group+0x90>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   803de:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   803e2:	4632      	mov	r2, r6
   803e4:	4b10      	ldr	r3, [pc, #64]	; (80428 <pio_configure_pin_group+0x94>)
   803e6:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   803e8:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   803ec:	bf14      	ite	ne
   803ee:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   803f0:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   803f2:	2001      	movs	r0, #1
   803f4:	e016      	b.n	80424 <pio_configure_pin_group+0x90>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   803f6:	4b0d      	ldr	r3, [pc, #52]	; (8042c <pio_configure_pin_group+0x98>)
   803f8:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   803fa:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   803fc:	e012      	b.n	80424 <pio_configure_pin_group+0x90>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   803fe:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   80402:	f005 0301 	and.w	r3, r5, #1
   80406:	9300      	str	r3, [sp, #0]
   80408:	4638      	mov	r0, r7
   8040a:	4631      	mov	r1, r6
   8040c:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80410:	bf14      	ite	ne
   80412:	2200      	movne	r2, #0
   80414:	2201      	moveq	r2, #1
   80416:	f3c5 0380 	ubfx	r3, r5, #2, #1
   8041a:	4c05      	ldr	r4, [pc, #20]	; (80430 <pio_configure_pin_group+0x9c>)
   8041c:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   8041e:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   80420:	e000      	b.n	80424 <pio_configure_pin_group+0x90>

	default:
		return 0;
   80422:	2000      	movs	r0, #0
	}

	return 1;
}
   80424:	b003      	add	sp, #12
   80426:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80428:	0008021d 	.word	0x0008021d
   8042c:	0008025d 	.word	0x0008025d
   80430:	00080291 	.word	0x00080291

00080434 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   80434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80438:	4604      	mov	r4, r0
   8043a:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   8043c:	4b10      	ldr	r3, [pc, #64]	; (80480 <pio_handler_process+0x4c>)
   8043e:	4798      	blx	r3
   80440:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   80442:	4620      	mov	r0, r4
   80444:	4b0f      	ldr	r3, [pc, #60]	; (80484 <pio_handler_process+0x50>)
   80446:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   80448:	4005      	ands	r5, r0
   8044a:	d017      	beq.n	8047c <pio_handler_process+0x48>
   8044c:	4f0e      	ldr	r7, [pc, #56]	; (80488 <pio_handler_process+0x54>)
   8044e:	f107 040c 	add.w	r4, r7, #12
   80452:	376c      	adds	r7, #108	; 0x6c
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   80454:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   80458:	42b3      	cmp	r3, r6
   8045a:	d10a      	bne.n	80472 <pio_handler_process+0x3e>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   8045c:	f854 1c08 	ldr.w	r1, [r4, #-8]
   80460:	4229      	tst	r1, r5
   80462:	d006      	beq.n	80472 <pio_handler_process+0x3e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   80464:	6823      	ldr	r3, [r4, #0]
   80466:	4630      	mov	r0, r6
   80468:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   8046a:	f854 3c08 	ldr.w	r3, [r4, #-8]
   8046e:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   80472:	42bc      	cmp	r4, r7
   80474:	d002      	beq.n	8047c <pio_handler_process+0x48>
   80476:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   80478:	2d00      	cmp	r5, #0
   8047a:	d1eb      	bne.n	80454 <pio_handler_process+0x20>
   8047c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80480:	000802b9 	.word	0x000802b9
   80484:	000802bd 	.word	0x000802bd
   80488:	20070584 	.word	0x20070584

0008048c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   8048c:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   8048e:	4802      	ldr	r0, [pc, #8]	; (80498 <PIOA_Handler+0xc>)
   80490:	210b      	movs	r1, #11
   80492:	4b02      	ldr	r3, [pc, #8]	; (8049c <PIOA_Handler+0x10>)
   80494:	4798      	blx	r3
   80496:	bd08      	pop	{r3, pc}
   80498:	400e0e00 	.word	0x400e0e00
   8049c:	00080435 	.word	0x00080435

000804a0 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   804a0:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   804a2:	4802      	ldr	r0, [pc, #8]	; (804ac <PIOB_Handler+0xc>)
   804a4:	210c      	movs	r1, #12
   804a6:	4b02      	ldr	r3, [pc, #8]	; (804b0 <PIOB_Handler+0x10>)
   804a8:	4798      	blx	r3
   804aa:	bd08      	pop	{r3, pc}
   804ac:	400e1000 	.word	0x400e1000
   804b0:	00080435 	.word	0x00080435

000804b4 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   804b4:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   804b6:	4802      	ldr	r0, [pc, #8]	; (804c0 <PIOC_Handler+0xc>)
   804b8:	210d      	movs	r1, #13
   804ba:	4b02      	ldr	r3, [pc, #8]	; (804c4 <PIOC_Handler+0x10>)
   804bc:	4798      	blx	r3
   804be:	bd08      	pop	{r3, pc}
   804c0:	400e1200 	.word	0x400e1200
   804c4:	00080435 	.word	0x00080435

000804c8 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   804c8:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   804ca:	4802      	ldr	r0, [pc, #8]	; (804d4 <PIOD_Handler+0xc>)
   804cc:	210e      	movs	r1, #14
   804ce:	4b02      	ldr	r3, [pc, #8]	; (804d8 <PIOD_Handler+0x10>)
   804d0:	4798      	blx	r3
   804d2:	bd08      	pop	{r3, pc}
   804d4:	400e1400 	.word	0x400e1400
   804d8:	00080435 	.word	0x00080435

000804dc <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   804dc:	4b17      	ldr	r3, [pc, #92]	; (8053c <pmc_switch_mck_to_pllack+0x60>)
   804de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   804e0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   804e4:	4310      	orrs	r0, r2
   804e6:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   804e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   804ea:	f013 0f08 	tst.w	r3, #8
   804ee:	d109      	bne.n	80504 <pmc_switch_mck_to_pllack+0x28>
   804f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
   804f4:	4911      	ldr	r1, [pc, #68]	; (8053c <pmc_switch_mck_to_pllack+0x60>)
   804f6:	e001      	b.n	804fc <pmc_switch_mck_to_pllack+0x20>
			--ul_timeout) {
		if (ul_timeout == 0) {
   804f8:	3b01      	subs	r3, #1
   804fa:	d019      	beq.n	80530 <pmc_switch_mck_to_pllack+0x54>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   804fc:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   804fe:	f012 0f08 	tst.w	r2, #8
   80502:	d0f9      	beq.n	804f8 <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   80504:	4b0d      	ldr	r3, [pc, #52]	; (8053c <pmc_switch_mck_to_pllack+0x60>)
   80506:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80508:	f022 0203 	bic.w	r2, r2, #3
   8050c:	f042 0202 	orr.w	r2, r2, #2
   80510:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80512:	6e98      	ldr	r0, [r3, #104]	; 0x68
   80514:	f010 0008 	ands.w	r0, r0, #8
   80518:	d10c      	bne.n	80534 <pmc_switch_mck_to_pllack+0x58>
   8051a:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8051e:	4907      	ldr	r1, [pc, #28]	; (8053c <pmc_switch_mck_to_pllack+0x60>)
   80520:	e001      	b.n	80526 <pmc_switch_mck_to_pllack+0x4a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   80522:	3b01      	subs	r3, #1
   80524:	d008      	beq.n	80538 <pmc_switch_mck_to_pllack+0x5c>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80526:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80528:	f012 0f08 	tst.w	r2, #8
   8052c:	d0f9      	beq.n	80522 <pmc_switch_mck_to_pllack+0x46>
   8052e:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   80530:	2001      	movs	r0, #1
   80532:	4770      	bx	lr
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   80534:	2000      	movs	r0, #0
   80536:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   80538:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   8053a:	4770      	bx	lr
   8053c:	400e0600 	.word	0x400e0600

00080540 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   80540:	b138      	cbz	r0, 80552 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80542:	4911      	ldr	r1, [pc, #68]	; (80588 <pmc_switch_mainck_to_xtal+0x48>)
   80544:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   80546:	4a11      	ldr	r2, [pc, #68]	; (8058c <pmc_switch_mainck_to_xtal+0x4c>)
   80548:	401a      	ands	r2, r3
   8054a:	4b11      	ldr	r3, [pc, #68]	; (80590 <pmc_switch_mainck_to_xtal+0x50>)
   8054c:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   8054e:	620b      	str	r3, [r1, #32]
   80550:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80552:	4a0d      	ldr	r2, [pc, #52]	; (80588 <pmc_switch_mainck_to_xtal+0x48>)
   80554:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   80556:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   8055a:	f023 0303 	bic.w	r3, r3, #3
   8055e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   80562:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   80566:	0209      	lsls	r1, r1, #8
   80568:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   8056a:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   8056c:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   8056e:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80570:	f013 0f01 	tst.w	r3, #1
   80574:	d0fb      	beq.n	8056e <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   80576:	4a04      	ldr	r2, [pc, #16]	; (80588 <pmc_switch_mainck_to_xtal+0x48>)
   80578:	6a13      	ldr	r3, [r2, #32]
   8057a:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   8057e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   80582:	6213      	str	r3, [r2, #32]
   80584:	4770      	bx	lr
   80586:	bf00      	nop
   80588:	400e0600 	.word	0x400e0600
   8058c:	fec8fffc 	.word	0xfec8fffc
   80590:	01370002 	.word	0x01370002

00080594 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   80594:	4b02      	ldr	r3, [pc, #8]	; (805a0 <pmc_osc_is_ready_mainck+0xc>)
   80596:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80598:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   8059c:	4770      	bx	lr
   8059e:	bf00      	nop
   805a0:	400e0600 	.word	0x400e0600

000805a4 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   805a4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   805a8:	4b01      	ldr	r3, [pc, #4]	; (805b0 <pmc_disable_pllack+0xc>)
   805aa:	629a      	str	r2, [r3, #40]	; 0x28
   805ac:	4770      	bx	lr
   805ae:	bf00      	nop
   805b0:	400e0600 	.word	0x400e0600

000805b4 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   805b4:	4b02      	ldr	r3, [pc, #8]	; (805c0 <pmc_is_locked_pllack+0xc>)
   805b6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   805b8:	f000 0002 	and.w	r0, r0, #2
   805bc:	4770      	bx	lr
   805be:	bf00      	nop
   805c0:	400e0600 	.word	0x400e0600

000805c4 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   805c4:	282c      	cmp	r0, #44	; 0x2c
   805c6:	d820      	bhi.n	8060a <pmc_enable_periph_clk+0x46>
		return 1;
	}

	if (ul_id < 32) {
   805c8:	281f      	cmp	r0, #31
   805ca:	d80d      	bhi.n	805e8 <pmc_enable_periph_clk+0x24>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   805cc:	4b12      	ldr	r3, [pc, #72]	; (80618 <pmc_enable_periph_clk+0x54>)
   805ce:	699a      	ldr	r2, [r3, #24]
   805d0:	2301      	movs	r3, #1
   805d2:	4083      	lsls	r3, r0
   805d4:	401a      	ands	r2, r3
   805d6:	4293      	cmp	r3, r2
   805d8:	d019      	beq.n	8060e <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER0 = 1 << ul_id;
   805da:	2301      	movs	r3, #1
   805dc:	fa03 f000 	lsl.w	r0, r3, r0
   805e0:	4b0d      	ldr	r3, [pc, #52]	; (80618 <pmc_enable_periph_clk+0x54>)
   805e2:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   805e4:	2000      	movs	r0, #0
   805e6:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   805e8:	4b0b      	ldr	r3, [pc, #44]	; (80618 <pmc_enable_periph_clk+0x54>)
   805ea:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
	} else {
		ul_id -= 32;
   805ee:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   805f0:	2301      	movs	r3, #1
   805f2:	4083      	lsls	r3, r0
   805f4:	401a      	ands	r2, r3
   805f6:	4293      	cmp	r3, r2
   805f8:	d00b      	beq.n	80612 <pmc_enable_periph_clk+0x4e>
			PMC->PMC_PCER1 = 1 << ul_id;
   805fa:	2301      	movs	r3, #1
   805fc:	fa03 f000 	lsl.w	r0, r3, r0
   80600:	4b05      	ldr	r3, [pc, #20]	; (80618 <pmc_enable_periph_clk+0x54>)
   80602:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   80606:	2000      	movs	r0, #0
   80608:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   8060a:	2001      	movs	r0, #1
   8060c:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   8060e:	2000      	movs	r0, #0
   80610:	4770      	bx	lr
   80612:	2000      	movs	r0, #0
}
   80614:	4770      	bx	lr
   80616:	bf00      	nop
   80618:	400e0600 	.word	0x400e0600

0008061c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   8061c:	e7fe      	b.n	8061c <Dummy_Handler>
   8061e:	bf00      	nop

00080620 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   80620:	b510      	push	{r4, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   80622:	4b1e      	ldr	r3, [pc, #120]	; (8069c <Reset_Handler+0x7c>)
   80624:	4a1e      	ldr	r2, [pc, #120]	; (806a0 <Reset_Handler+0x80>)
   80626:	429a      	cmp	r2, r3
   80628:	d003      	beq.n	80632 <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   8062a:	4b1e      	ldr	r3, [pc, #120]	; (806a4 <Reset_Handler+0x84>)
   8062c:	4a1b      	ldr	r2, [pc, #108]	; (8069c <Reset_Handler+0x7c>)
   8062e:	429a      	cmp	r2, r3
   80630:	d304      	bcc.n	8063c <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80632:	4b1d      	ldr	r3, [pc, #116]	; (806a8 <Reset_Handler+0x88>)
   80634:	4a1d      	ldr	r2, [pc, #116]	; (806ac <Reset_Handler+0x8c>)
   80636:	429a      	cmp	r2, r3
   80638:	d30f      	bcc.n	8065a <Reset_Handler+0x3a>
   8063a:	e01a      	b.n	80672 <Reset_Handler+0x52>
   8063c:	4b1c      	ldr	r3, [pc, #112]	; (806b0 <Reset_Handler+0x90>)
   8063e:	4c1d      	ldr	r4, [pc, #116]	; (806b4 <Reset_Handler+0x94>)
   80640:	1ae4      	subs	r4, r4, r3
   80642:	f024 0403 	bic.w	r4, r4, #3
   80646:	3404      	adds	r4, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   80648:	2300      	movs	r3, #0
			*pDest++ = *pSrc++;
   8064a:	4814      	ldr	r0, [pc, #80]	; (8069c <Reset_Handler+0x7c>)
   8064c:	4914      	ldr	r1, [pc, #80]	; (806a0 <Reset_Handler+0x80>)
   8064e:	585a      	ldr	r2, [r3, r1]
   80650:	501a      	str	r2, [r3, r0]
   80652:	3304      	adds	r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   80654:	42a3      	cmp	r3, r4
   80656:	d1fa      	bne.n	8064e <Reset_Handler+0x2e>
   80658:	e7eb      	b.n	80632 <Reset_Handler+0x12>
   8065a:	4b17      	ldr	r3, [pc, #92]	; (806b8 <Reset_Handler+0x98>)
   8065c:	4917      	ldr	r1, [pc, #92]	; (806bc <Reset_Handler+0x9c>)
   8065e:	1ac9      	subs	r1, r1, r3
   80660:	f021 0103 	bic.w	r1, r1, #3
   80664:	1d1a      	adds	r2, r3, #4
   80666:	4411      	add	r1, r2
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   80668:	2200      	movs	r2, #0
   8066a:	f843 2f04 	str.w	r2, [r3, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   8066e:	428b      	cmp	r3, r1
   80670:	d1fb      	bne.n	8066a <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   80672:	4a13      	ldr	r2, [pc, #76]	; (806c0 <Reset_Handler+0xa0>)
   80674:	f022 4360 	bic.w	r3, r2, #3758096384	; 0xe0000000
   80678:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   8067c:	4911      	ldr	r1, [pc, #68]	; (806c4 <Reset_Handler+0xa4>)
   8067e:	608b      	str	r3, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   80680:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
   80684:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
   80688:	d203      	bcs.n	80692 <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   8068a:	688a      	ldr	r2, [r1, #8]
   8068c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   80690:	608a      	str	r2, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   80692:	4b0d      	ldr	r3, [pc, #52]	; (806c8 <Reset_Handler+0xa8>)
   80694:	4798      	blx	r3

	/* Branch to main function */
	main();
   80696:	4b0d      	ldr	r3, [pc, #52]	; (806cc <Reset_Handler+0xac>)
   80698:	4798      	blx	r3
   8069a:	e7fe      	b.n	8069a <Reset_Handler+0x7a>
   8069c:	20070000 	.word	0x20070000
   806a0:	00080ffc 	.word	0x00080ffc
   806a4:	20070568 	.word	0x20070568
   806a8:	200705f4 	.word	0x200705f4
   806ac:	20070568 	.word	0x20070568
   806b0:	20070004 	.word	0x20070004
   806b4:	2007056b 	.word	0x2007056b
   806b8:	20070564 	.word	0x20070564
   806bc:	200705ef 	.word	0x200705ef
   806c0:	00080000 	.word	0x00080000
   806c4:	e000ed00 	.word	0xe000ed00
   806c8:	00080e81 	.word	0x00080e81
   806cc:	0008086d 	.word	0x0008086d

000806d0 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   806d0:	4b3e      	ldr	r3, [pc, #248]	; (807cc <SystemCoreClockUpdate+0xfc>)
   806d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   806d4:	f003 0303 	and.w	r3, r3, #3
   806d8:	2b03      	cmp	r3, #3
   806da:	d85f      	bhi.n	8079c <SystemCoreClockUpdate+0xcc>
   806dc:	e8df f003 	tbb	[pc, r3]
   806e0:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   806e4:	4b3a      	ldr	r3, [pc, #232]	; (807d0 <SystemCoreClockUpdate+0x100>)
   806e6:	695b      	ldr	r3, [r3, #20]
   806e8:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   806ec:	bf14      	ite	ne
   806ee:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   806f2:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   806f6:	4b37      	ldr	r3, [pc, #220]	; (807d4 <SystemCoreClockUpdate+0x104>)
   806f8:	601a      	str	r2, [r3, #0]
   806fa:	e04f      	b.n	8079c <SystemCoreClockUpdate+0xcc>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   806fc:	4b33      	ldr	r3, [pc, #204]	; (807cc <SystemCoreClockUpdate+0xfc>)
   806fe:	6a1b      	ldr	r3, [r3, #32]
   80700:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80704:	d003      	beq.n	8070e <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80706:	4a34      	ldr	r2, [pc, #208]	; (807d8 <SystemCoreClockUpdate+0x108>)
   80708:	4b32      	ldr	r3, [pc, #200]	; (807d4 <SystemCoreClockUpdate+0x104>)
   8070a:	601a      	str	r2, [r3, #0]
   8070c:	e046      	b.n	8079c <SystemCoreClockUpdate+0xcc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   8070e:	4a33      	ldr	r2, [pc, #204]	; (807dc <SystemCoreClockUpdate+0x10c>)
   80710:	4b30      	ldr	r3, [pc, #192]	; (807d4 <SystemCoreClockUpdate+0x104>)
   80712:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80714:	4b2d      	ldr	r3, [pc, #180]	; (807cc <SystemCoreClockUpdate+0xfc>)
   80716:	6a1b      	ldr	r3, [r3, #32]
   80718:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8071c:	2b10      	cmp	r3, #16
   8071e:	d002      	beq.n	80726 <SystemCoreClockUpdate+0x56>
   80720:	2b20      	cmp	r3, #32
   80722:	d004      	beq.n	8072e <SystemCoreClockUpdate+0x5e>
   80724:	e03a      	b.n	8079c <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   80726:	4a2e      	ldr	r2, [pc, #184]	; (807e0 <SystemCoreClockUpdate+0x110>)
   80728:	4b2a      	ldr	r3, [pc, #168]	; (807d4 <SystemCoreClockUpdate+0x104>)
   8072a:	601a      	str	r2, [r3, #0]
				break;
   8072c:	e036      	b.n	8079c <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   8072e:	4a2a      	ldr	r2, [pc, #168]	; (807d8 <SystemCoreClockUpdate+0x108>)
   80730:	4b28      	ldr	r3, [pc, #160]	; (807d4 <SystemCoreClockUpdate+0x104>)
   80732:	601a      	str	r2, [r3, #0]
				break;
   80734:	e032      	b.n	8079c <SystemCoreClockUpdate+0xcc>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80736:	4b25      	ldr	r3, [pc, #148]	; (807cc <SystemCoreClockUpdate+0xfc>)
   80738:	6a1b      	ldr	r3, [r3, #32]
   8073a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   8073e:	d003      	beq.n	80748 <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80740:	4a25      	ldr	r2, [pc, #148]	; (807d8 <SystemCoreClockUpdate+0x108>)
   80742:	4b24      	ldr	r3, [pc, #144]	; (807d4 <SystemCoreClockUpdate+0x104>)
   80744:	601a      	str	r2, [r3, #0]
   80746:	e012      	b.n	8076e <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80748:	4a24      	ldr	r2, [pc, #144]	; (807dc <SystemCoreClockUpdate+0x10c>)
   8074a:	4b22      	ldr	r3, [pc, #136]	; (807d4 <SystemCoreClockUpdate+0x104>)
   8074c:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   8074e:	4b1f      	ldr	r3, [pc, #124]	; (807cc <SystemCoreClockUpdate+0xfc>)
   80750:	6a1b      	ldr	r3, [r3, #32]
   80752:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80756:	2b10      	cmp	r3, #16
   80758:	d002      	beq.n	80760 <SystemCoreClockUpdate+0x90>
   8075a:	2b20      	cmp	r3, #32
   8075c:	d004      	beq.n	80768 <SystemCoreClockUpdate+0x98>
   8075e:	e006      	b.n	8076e <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   80760:	4a1f      	ldr	r2, [pc, #124]	; (807e0 <SystemCoreClockUpdate+0x110>)
   80762:	4b1c      	ldr	r3, [pc, #112]	; (807d4 <SystemCoreClockUpdate+0x104>)
   80764:	601a      	str	r2, [r3, #0]
				break;
   80766:	e002      	b.n	8076e <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   80768:	4a1b      	ldr	r2, [pc, #108]	; (807d8 <SystemCoreClockUpdate+0x108>)
   8076a:	4b1a      	ldr	r3, [pc, #104]	; (807d4 <SystemCoreClockUpdate+0x104>)
   8076c:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   8076e:	4b17      	ldr	r3, [pc, #92]	; (807cc <SystemCoreClockUpdate+0xfc>)
   80770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80772:	f003 0303 	and.w	r3, r3, #3
   80776:	2b02      	cmp	r3, #2
   80778:	d10d      	bne.n	80796 <SystemCoreClockUpdate+0xc6>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   8077a:	4b14      	ldr	r3, [pc, #80]	; (807cc <SystemCoreClockUpdate+0xfc>)
   8077c:	6a98      	ldr	r0, [r3, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   8077e:	6a99      	ldr	r1, [r3, #40]	; 0x28
   80780:	4b14      	ldr	r3, [pc, #80]	; (807d4 <SystemCoreClockUpdate+0x104>)
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80782:	f3c0 400a 	ubfx	r0, r0, #16, #11
   80786:	681a      	ldr	r2, [r3, #0]
   80788:	fb00 2202 	mla	r2, r0, r2, r2
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   8078c:	b2c9      	uxtb	r1, r1
   8078e:	fbb2 f2f1 	udiv	r2, r2, r1
   80792:	601a      	str	r2, [r3, #0]
   80794:	e002      	b.n	8079c <SystemCoreClockUpdate+0xcc>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   80796:	4a13      	ldr	r2, [pc, #76]	; (807e4 <SystemCoreClockUpdate+0x114>)
   80798:	4b0e      	ldr	r3, [pc, #56]	; (807d4 <SystemCoreClockUpdate+0x104>)
   8079a:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   8079c:	4b0b      	ldr	r3, [pc, #44]	; (807cc <SystemCoreClockUpdate+0xfc>)
   8079e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   807a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
   807a4:	2b70      	cmp	r3, #112	; 0x70
   807a6:	d107      	bne.n	807b8 <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
   807a8:	4b0a      	ldr	r3, [pc, #40]	; (807d4 <SystemCoreClockUpdate+0x104>)
   807aa:	681a      	ldr	r2, [r3, #0]
   807ac:	490e      	ldr	r1, [pc, #56]	; (807e8 <SystemCoreClockUpdate+0x118>)
   807ae:	fba1 0202 	umull	r0, r2, r1, r2
   807b2:	0852      	lsrs	r2, r2, #1
   807b4:	601a      	str	r2, [r3, #0]
   807b6:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   807b8:	4b04      	ldr	r3, [pc, #16]	; (807cc <SystemCoreClockUpdate+0xfc>)
   807ba:	6b19      	ldr	r1, [r3, #48]	; 0x30
   807bc:	4b05      	ldr	r3, [pc, #20]	; (807d4 <SystemCoreClockUpdate+0x104>)
   807be:	f3c1 1102 	ubfx	r1, r1, #4, #3
   807c2:	681a      	ldr	r2, [r3, #0]
   807c4:	40ca      	lsrs	r2, r1
   807c6:	601a      	str	r2, [r3, #0]
   807c8:	4770      	bx	lr
   807ca:	bf00      	nop
   807cc:	400e0600 	.word	0x400e0600
   807d0:	400e1a10 	.word	0x400e1a10
   807d4:	20070138 	.word	0x20070138
   807d8:	00b71b00 	.word	0x00b71b00
   807dc:	003d0900 	.word	0x003d0900
   807e0:	007a1200 	.word	0x007a1200
   807e4:	0e4e1c00 	.word	0x0e4e1c00
   807e8:	aaaaaaab 	.word	0xaaaaaaab
   807ec:	00000000 	.word	0x00000000

000807f0 <pulse>:
 */ 
#include <asf.h>
#include "motorFunc.h"

//Sends the pulse to the engine
void pulse(uint16_t motorSpeed){
   807f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   807f2:	4c0d      	ldr	r4, [pc, #52]	; (80828 <pulse+0x38>)
   807f4:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   807f8:	6325      	str	r5, [r4, #48]	; 0x30
	ioport_set_pin_level(pin24, HIGH);
	delay_us(motorSpeed);
   807fa:	a309      	add	r3, pc, #36	; (adr r3, 80820 <pulse+0x30>)
   807fc:	e9d3 2300 	ldrd	r2, r3, [r3]
   80800:	490a      	ldr	r1, [pc, #40]	; (8082c <pulse+0x3c>)
   80802:	4616      	mov	r6, r2
   80804:	461f      	mov	r7, r3
   80806:	fbe1 6700 	umlal	r6, r7, r1, r0
   8080a:	4630      	mov	r0, r6
   8080c:	4639      	mov	r1, r7
   8080e:	4a08      	ldr	r2, [pc, #32]	; (80830 <pulse+0x40>)
   80810:	2300      	movs	r3, #0
   80812:	4e08      	ldr	r6, [pc, #32]	; (80834 <pulse+0x44>)
   80814:	47b0      	blx	r6
   80816:	4b08      	ldr	r3, [pc, #32]	; (80838 <pulse+0x48>)
   80818:	4798      	blx	r3
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   8081a:	6365      	str	r5, [r4, #52]	; 0x34
   8081c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8081e:	bf00      	nop
   80820:	00d59f7f 	.word	0x00d59f7f
   80824:	00000000 	.word	0x00000000
   80828:	400e0e00 	.word	0x400e0e00
   8082c:	0501bd00 	.word	0x0501bd00
   80830:	00d59f80 	.word	0x00d59f80
   80834:	000808c1 	.word	0x000808c1
   80838:	20070001 	.word	0x20070001
   8083c:	f3af 8000 	nop.w

00080840 <forwardDrive>:
	ioport_set_pin_level(pin24, LOW);
};

//Sets both engines to go the same direction with the "same" speed
void forwardDrive(){
   80840:	b538      	push	{r3, r4, r5, lr}
	pulse(2000);
   80842:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   80846:	4d06      	ldr	r5, [pc, #24]	; (80860 <forwardDrive+0x20>)
   80848:	47a8      	blx	r5
	delay_us(motorSwitch);
   8084a:	f641 10c8 	movw	r0, #6600	; 0x19c8
   8084e:	4c05      	ldr	r4, [pc, #20]	; (80864 <forwardDrive+0x24>)
   80850:	47a0      	blx	r4
	pulse(2000);
   80852:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   80856:	47a8      	blx	r5
	delay_ms(100);
   80858:	4803      	ldr	r0, [pc, #12]	; (80868 <forwardDrive+0x28>)
   8085a:	47a0      	blx	r4
   8085c:	bd38      	pop	{r3, r4, r5, pc}
   8085e:	bf00      	nop
   80860:	000807f1 	.word	0x000807f1
   80864:	20070001 	.word	0x20070001
   80868:	000927c0 	.word	0x000927c0

0008086c <main>:
#include "distanceSensor.h"



int main (void)
{
   8086c:	b508      	push	{r3, lr}
	sysclk_init();
   8086e:	4b0e      	ldr	r3, [pc, #56]	; (808a8 <main+0x3c>)
   80870:	4798      	blx	r3
	board_init();
   80872:	4b0e      	ldr	r3, [pc, #56]	; (808ac <main+0x40>)
   80874:	4798      	blx	r3
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   80876:	4b0e      	ldr	r3, [pc, #56]	; (808b0 <main+0x44>)
   80878:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8087c:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   8087e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   80882:	f503 6380 	add.w	r3, r3, #1024	; 0x400
   80886:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   8088a:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   8088c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   80890:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   80894:	615a      	str	r2, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80896:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	ioport_set_pin_dir(trig,IOPORT_DIR_OUTPUT);
	ioport_set_pin_dir(echo, IOPORT_DIR_INPUT);
	unsigned long distance;
	
	//Starts with a delay simply to reduce the chance of an error occuring when reseting the program.
	delay_ms(2000);
   8089a:	4806      	ldr	r0, [pc, #24]	; (808b4 <main+0x48>)
   8089c:	4b06      	ldr	r3, [pc, #24]	; (808b8 <main+0x4c>)
   8089e:	4798      	blx	r3
		} 
		else
		{
			forwardDrive();
		}*/
		forwardDrive();
   808a0:	4c06      	ldr	r4, [pc, #24]	; (808bc <main+0x50>)
   808a2:	47a0      	blx	r4
   808a4:	e7fd      	b.n	808a2 <main+0x36>
   808a6:	bf00      	nop
   808a8:	00080149 	.word	0x00080149
   808ac:	000801ad 	.word	0x000801ad
   808b0:	400e0e00 	.word	0x400e0e00
   808b4:	00b71b00 	.word	0x00b71b00
   808b8:	20070001 	.word	0x20070001
   808bc:	00080841 	.word	0x00080841

000808c0 <__aeabi_uldivmod>:
   808c0:	b94b      	cbnz	r3, 808d6 <__aeabi_uldivmod+0x16>
   808c2:	b942      	cbnz	r2, 808d6 <__aeabi_uldivmod+0x16>
   808c4:	2900      	cmp	r1, #0
   808c6:	bf08      	it	eq
   808c8:	2800      	cmpeq	r0, #0
   808ca:	d002      	beq.n	808d2 <__aeabi_uldivmod+0x12>
   808cc:	f04f 31ff 	mov.w	r1, #4294967295
   808d0:	4608      	mov	r0, r1
   808d2:	f000 b83b 	b.w	8094c <__aeabi_idiv0>
   808d6:	b082      	sub	sp, #8
   808d8:	46ec      	mov	ip, sp
   808da:	e92d 5000 	stmdb	sp!, {ip, lr}
   808de:	f000 f81d 	bl	8091c <__gnu_uldivmod_helper>
   808e2:	f8dd e004 	ldr.w	lr, [sp, #4]
   808e6:	b002      	add	sp, #8
   808e8:	bc0c      	pop	{r2, r3}
   808ea:	4770      	bx	lr

000808ec <__gnu_ldivmod_helper>:
   808ec:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   808f0:	9e08      	ldr	r6, [sp, #32]
   808f2:	4614      	mov	r4, r2
   808f4:	461d      	mov	r5, r3
   808f6:	4680      	mov	r8, r0
   808f8:	4689      	mov	r9, r1
   808fa:	f000 f829 	bl	80950 <__divdi3>
   808fe:	fb04 f301 	mul.w	r3, r4, r1
   80902:	fba4 ab00 	umull	sl, fp, r4, r0
   80906:	fb00 3205 	mla	r2, r0, r5, r3
   8090a:	4493      	add	fp, r2
   8090c:	ebb8 080a 	subs.w	r8, r8, sl
   80910:	eb69 090b 	sbc.w	r9, r9, fp
   80914:	e9c6 8900 	strd	r8, r9, [r6]
   80918:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

0008091c <__gnu_uldivmod_helper>:
   8091c:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   80920:	9e08      	ldr	r6, [sp, #32]
   80922:	4614      	mov	r4, r2
   80924:	461d      	mov	r5, r3
   80926:	4680      	mov	r8, r0
   80928:	4689      	mov	r9, r1
   8092a:	f000 f961 	bl	80bf0 <__udivdi3>
   8092e:	fb00 f505 	mul.w	r5, r0, r5
   80932:	fba0 ab04 	umull	sl, fp, r0, r4
   80936:	fb04 5401 	mla	r4, r4, r1, r5
   8093a:	44a3      	add	fp, r4
   8093c:	ebb8 080a 	subs.w	r8, r8, sl
   80940:	eb69 090b 	sbc.w	r9, r9, fp
   80944:	e9c6 8900 	strd	r8, r9, [r6]
   80948:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

0008094c <__aeabi_idiv0>:
   8094c:	4770      	bx	lr
   8094e:	bf00      	nop

00080950 <__divdi3>:
   80950:	2900      	cmp	r1, #0
   80952:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80956:	f2c0 80a1 	blt.w	80a9c <__divdi3+0x14c>
   8095a:	2400      	movs	r4, #0
   8095c:	2b00      	cmp	r3, #0
   8095e:	f2c0 8098 	blt.w	80a92 <__divdi3+0x142>
   80962:	4615      	mov	r5, r2
   80964:	4606      	mov	r6, r0
   80966:	460f      	mov	r7, r1
   80968:	2b00      	cmp	r3, #0
   8096a:	d13f      	bne.n	809ec <__divdi3+0x9c>
   8096c:	428a      	cmp	r2, r1
   8096e:	d958      	bls.n	80a22 <__divdi3+0xd2>
   80970:	fab2 f382 	clz	r3, r2
   80974:	b14b      	cbz	r3, 8098a <__divdi3+0x3a>
   80976:	f1c3 0220 	rsb	r2, r3, #32
   8097a:	fa01 f703 	lsl.w	r7, r1, r3
   8097e:	fa20 f202 	lsr.w	r2, r0, r2
   80982:	409d      	lsls	r5, r3
   80984:	fa00 f603 	lsl.w	r6, r0, r3
   80988:	4317      	orrs	r7, r2
   8098a:	0c29      	lsrs	r1, r5, #16
   8098c:	fbb7 f2f1 	udiv	r2, r7, r1
   80990:	fb01 7712 	mls	r7, r1, r2, r7
   80994:	b2a8      	uxth	r0, r5
   80996:	fb00 f302 	mul.w	r3, r0, r2
   8099a:	ea4f 4c16 	mov.w	ip, r6, lsr #16
   8099e:	ea4c 4707 	orr.w	r7, ip, r7, lsl #16
   809a2:	42bb      	cmp	r3, r7
   809a4:	d909      	bls.n	809ba <__divdi3+0x6a>
   809a6:	197f      	adds	r7, r7, r5
   809a8:	f102 3cff 	add.w	ip, r2, #4294967295
   809ac:	f080 8105 	bcs.w	80bba <__divdi3+0x26a>
   809b0:	42bb      	cmp	r3, r7
   809b2:	f240 8102 	bls.w	80bba <__divdi3+0x26a>
   809b6:	3a02      	subs	r2, #2
   809b8:	442f      	add	r7, r5
   809ba:	1aff      	subs	r7, r7, r3
   809bc:	fbb7 f3f1 	udiv	r3, r7, r1
   809c0:	fb01 7113 	mls	r1, r1, r3, r7
   809c4:	fb00 f003 	mul.w	r0, r0, r3
   809c8:	b2b6      	uxth	r6, r6
   809ca:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
   809ce:	4288      	cmp	r0, r1
   809d0:	d908      	bls.n	809e4 <__divdi3+0x94>
   809d2:	1949      	adds	r1, r1, r5
   809d4:	f103 37ff 	add.w	r7, r3, #4294967295
   809d8:	f080 80f1 	bcs.w	80bbe <__divdi3+0x26e>
   809dc:	4288      	cmp	r0, r1
   809de:	f240 80ee 	bls.w	80bbe <__divdi3+0x26e>
   809e2:	3b02      	subs	r3, #2
   809e4:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   809e8:	2300      	movs	r3, #0
   809ea:	e003      	b.n	809f4 <__divdi3+0xa4>
   809ec:	428b      	cmp	r3, r1
   809ee:	d90a      	bls.n	80a06 <__divdi3+0xb6>
   809f0:	2300      	movs	r3, #0
   809f2:	461a      	mov	r2, r3
   809f4:	4610      	mov	r0, r2
   809f6:	4619      	mov	r1, r3
   809f8:	b114      	cbz	r4, 80a00 <__divdi3+0xb0>
   809fa:	4240      	negs	r0, r0
   809fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   80a00:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80a04:	4770      	bx	lr
   80a06:	fab3 f883 	clz	r8, r3
   80a0a:	f1b8 0f00 	cmp.w	r8, #0
   80a0e:	f040 8088 	bne.w	80b22 <__divdi3+0x1d2>
   80a12:	428b      	cmp	r3, r1
   80a14:	d302      	bcc.n	80a1c <__divdi3+0xcc>
   80a16:	4282      	cmp	r2, r0
   80a18:	f200 80e2 	bhi.w	80be0 <__divdi3+0x290>
   80a1c:	2300      	movs	r3, #0
   80a1e:	2201      	movs	r2, #1
   80a20:	e7e8      	b.n	809f4 <__divdi3+0xa4>
   80a22:	b912      	cbnz	r2, 80a2a <__divdi3+0xda>
   80a24:	2301      	movs	r3, #1
   80a26:	fbb3 f5f2 	udiv	r5, r3, r2
   80a2a:	fab5 f285 	clz	r2, r5
   80a2e:	2a00      	cmp	r2, #0
   80a30:	d13a      	bne.n	80aa8 <__divdi3+0x158>
   80a32:	1b7f      	subs	r7, r7, r5
   80a34:	0c28      	lsrs	r0, r5, #16
   80a36:	fa1f fc85 	uxth.w	ip, r5
   80a3a:	2301      	movs	r3, #1
   80a3c:	fbb7 f1f0 	udiv	r1, r7, r0
   80a40:	fb00 7711 	mls	r7, r0, r1, r7
   80a44:	fb0c f201 	mul.w	r2, ip, r1
   80a48:	ea4f 4816 	mov.w	r8, r6, lsr #16
   80a4c:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
   80a50:	42ba      	cmp	r2, r7
   80a52:	d907      	bls.n	80a64 <__divdi3+0x114>
   80a54:	197f      	adds	r7, r7, r5
   80a56:	f101 38ff 	add.w	r8, r1, #4294967295
   80a5a:	d202      	bcs.n	80a62 <__divdi3+0x112>
   80a5c:	42ba      	cmp	r2, r7
   80a5e:	f200 80c4 	bhi.w	80bea <__divdi3+0x29a>
   80a62:	4641      	mov	r1, r8
   80a64:	1abf      	subs	r7, r7, r2
   80a66:	fbb7 f2f0 	udiv	r2, r7, r0
   80a6a:	fb00 7012 	mls	r0, r0, r2, r7
   80a6e:	fb0c fc02 	mul.w	ip, ip, r2
   80a72:	b2b6      	uxth	r6, r6
   80a74:	ea46 4000 	orr.w	r0, r6, r0, lsl #16
   80a78:	4584      	cmp	ip, r0
   80a7a:	d907      	bls.n	80a8c <__divdi3+0x13c>
   80a7c:	1940      	adds	r0, r0, r5
   80a7e:	f102 37ff 	add.w	r7, r2, #4294967295
   80a82:	d202      	bcs.n	80a8a <__divdi3+0x13a>
   80a84:	4584      	cmp	ip, r0
   80a86:	f200 80ae 	bhi.w	80be6 <__divdi3+0x296>
   80a8a:	463a      	mov	r2, r7
   80a8c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   80a90:	e7b0      	b.n	809f4 <__divdi3+0xa4>
   80a92:	43e4      	mvns	r4, r4
   80a94:	4252      	negs	r2, r2
   80a96:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   80a9a:	e762      	b.n	80962 <__divdi3+0x12>
   80a9c:	4240      	negs	r0, r0
   80a9e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   80aa2:	f04f 34ff 	mov.w	r4, #4294967295
   80aa6:	e759      	b.n	8095c <__divdi3+0xc>
   80aa8:	4095      	lsls	r5, r2
   80aaa:	f1c2 0920 	rsb	r9, r2, #32
   80aae:	fa27 f109 	lsr.w	r1, r7, r9
   80ab2:	fa26 f909 	lsr.w	r9, r6, r9
   80ab6:	4097      	lsls	r7, r2
   80ab8:	0c28      	lsrs	r0, r5, #16
   80aba:	fbb1 f8f0 	udiv	r8, r1, r0
   80abe:	fb00 1118 	mls	r1, r0, r8, r1
   80ac2:	fa1f fc85 	uxth.w	ip, r5
   80ac6:	fb0c f308 	mul.w	r3, ip, r8
   80aca:	ea49 0907 	orr.w	r9, r9, r7
   80ace:	ea4f 4719 	mov.w	r7, r9, lsr #16
   80ad2:	ea47 4101 	orr.w	r1, r7, r1, lsl #16
   80ad6:	428b      	cmp	r3, r1
   80ad8:	fa06 f602 	lsl.w	r6, r6, r2
   80adc:	d908      	bls.n	80af0 <__divdi3+0x1a0>
   80ade:	1949      	adds	r1, r1, r5
   80ae0:	f108 32ff 	add.w	r2, r8, #4294967295
   80ae4:	d27a      	bcs.n	80bdc <__divdi3+0x28c>
   80ae6:	428b      	cmp	r3, r1
   80ae8:	d978      	bls.n	80bdc <__divdi3+0x28c>
   80aea:	f1a8 0802 	sub.w	r8, r8, #2
   80aee:	4429      	add	r1, r5
   80af0:	1ac9      	subs	r1, r1, r3
   80af2:	fbb1 f3f0 	udiv	r3, r1, r0
   80af6:	fb00 1713 	mls	r7, r0, r3, r1
   80afa:	fb0c f203 	mul.w	r2, ip, r3
   80afe:	fa1f f989 	uxth.w	r9, r9
   80b02:	ea49 4707 	orr.w	r7, r9, r7, lsl #16
   80b06:	42ba      	cmp	r2, r7
   80b08:	d907      	bls.n	80b1a <__divdi3+0x1ca>
   80b0a:	197f      	adds	r7, r7, r5
   80b0c:	f103 31ff 	add.w	r1, r3, #4294967295
   80b10:	d260      	bcs.n	80bd4 <__divdi3+0x284>
   80b12:	42ba      	cmp	r2, r7
   80b14:	d95e      	bls.n	80bd4 <__divdi3+0x284>
   80b16:	3b02      	subs	r3, #2
   80b18:	442f      	add	r7, r5
   80b1a:	1abf      	subs	r7, r7, r2
   80b1c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   80b20:	e78c      	b.n	80a3c <__divdi3+0xec>
   80b22:	f1c8 0220 	rsb	r2, r8, #32
   80b26:	fa25 f102 	lsr.w	r1, r5, r2
   80b2a:	fa03 fc08 	lsl.w	ip, r3, r8
   80b2e:	fa27 f302 	lsr.w	r3, r7, r2
   80b32:	fa20 f202 	lsr.w	r2, r0, r2
   80b36:	fa07 f708 	lsl.w	r7, r7, r8
   80b3a:	ea41 0c0c 	orr.w	ip, r1, ip
   80b3e:	ea4f 491c 	mov.w	r9, ip, lsr #16
   80b42:	fbb3 f1f9 	udiv	r1, r3, r9
   80b46:	fb09 3311 	mls	r3, r9, r1, r3
   80b4a:	fa1f fa8c 	uxth.w	sl, ip
   80b4e:	fb0a fb01 	mul.w	fp, sl, r1
   80b52:	4317      	orrs	r7, r2
   80b54:	0c3a      	lsrs	r2, r7, #16
   80b56:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   80b5a:	459b      	cmp	fp, r3
   80b5c:	fa05 f008 	lsl.w	r0, r5, r8
   80b60:	d908      	bls.n	80b74 <__divdi3+0x224>
   80b62:	eb13 030c 	adds.w	r3, r3, ip
   80b66:	f101 32ff 	add.w	r2, r1, #4294967295
   80b6a:	d235      	bcs.n	80bd8 <__divdi3+0x288>
   80b6c:	459b      	cmp	fp, r3
   80b6e:	d933      	bls.n	80bd8 <__divdi3+0x288>
   80b70:	3902      	subs	r1, #2
   80b72:	4463      	add	r3, ip
   80b74:	ebcb 0303 	rsb	r3, fp, r3
   80b78:	fbb3 f2f9 	udiv	r2, r3, r9
   80b7c:	fb09 3312 	mls	r3, r9, r2, r3
   80b80:	fb0a fa02 	mul.w	sl, sl, r2
   80b84:	b2bf      	uxth	r7, r7
   80b86:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
   80b8a:	45ba      	cmp	sl, r7
   80b8c:	d908      	bls.n	80ba0 <__divdi3+0x250>
   80b8e:	eb17 070c 	adds.w	r7, r7, ip
   80b92:	f102 33ff 	add.w	r3, r2, #4294967295
   80b96:	d21b      	bcs.n	80bd0 <__divdi3+0x280>
   80b98:	45ba      	cmp	sl, r7
   80b9a:	d919      	bls.n	80bd0 <__divdi3+0x280>
   80b9c:	3a02      	subs	r2, #2
   80b9e:	4467      	add	r7, ip
   80ba0:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
   80ba4:	fba5 0100 	umull	r0, r1, r5, r0
   80ba8:	ebca 0707 	rsb	r7, sl, r7
   80bac:	428f      	cmp	r7, r1
   80bae:	f04f 0300 	mov.w	r3, #0
   80bb2:	d30a      	bcc.n	80bca <__divdi3+0x27a>
   80bb4:	d005      	beq.n	80bc2 <__divdi3+0x272>
   80bb6:	462a      	mov	r2, r5
   80bb8:	e71c      	b.n	809f4 <__divdi3+0xa4>
   80bba:	4662      	mov	r2, ip
   80bbc:	e6fd      	b.n	809ba <__divdi3+0x6a>
   80bbe:	463b      	mov	r3, r7
   80bc0:	e710      	b.n	809e4 <__divdi3+0x94>
   80bc2:	fa06 f608 	lsl.w	r6, r6, r8
   80bc6:	4286      	cmp	r6, r0
   80bc8:	d2f5      	bcs.n	80bb6 <__divdi3+0x266>
   80bca:	1e6a      	subs	r2, r5, #1
   80bcc:	2300      	movs	r3, #0
   80bce:	e711      	b.n	809f4 <__divdi3+0xa4>
   80bd0:	461a      	mov	r2, r3
   80bd2:	e7e5      	b.n	80ba0 <__divdi3+0x250>
   80bd4:	460b      	mov	r3, r1
   80bd6:	e7a0      	b.n	80b1a <__divdi3+0x1ca>
   80bd8:	4611      	mov	r1, r2
   80bda:	e7cb      	b.n	80b74 <__divdi3+0x224>
   80bdc:	4690      	mov	r8, r2
   80bde:	e787      	b.n	80af0 <__divdi3+0x1a0>
   80be0:	4643      	mov	r3, r8
   80be2:	4642      	mov	r2, r8
   80be4:	e706      	b.n	809f4 <__divdi3+0xa4>
   80be6:	3a02      	subs	r2, #2
   80be8:	e750      	b.n	80a8c <__divdi3+0x13c>
   80bea:	3902      	subs	r1, #2
   80bec:	442f      	add	r7, r5
   80bee:	e739      	b.n	80a64 <__divdi3+0x114>

00080bf0 <__udivdi3>:
   80bf0:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80bf4:	4614      	mov	r4, r2
   80bf6:	4605      	mov	r5, r0
   80bf8:	460e      	mov	r6, r1
   80bfa:	2b00      	cmp	r3, #0
   80bfc:	d143      	bne.n	80c86 <__udivdi3+0x96>
   80bfe:	428a      	cmp	r2, r1
   80c00:	d953      	bls.n	80caa <__udivdi3+0xba>
   80c02:	fab2 f782 	clz	r7, r2
   80c06:	b157      	cbz	r7, 80c1e <__udivdi3+0x2e>
   80c08:	f1c7 0620 	rsb	r6, r7, #32
   80c0c:	fa20 f606 	lsr.w	r6, r0, r6
   80c10:	fa01 f307 	lsl.w	r3, r1, r7
   80c14:	fa02 f407 	lsl.w	r4, r2, r7
   80c18:	fa00 f507 	lsl.w	r5, r0, r7
   80c1c:	431e      	orrs	r6, r3
   80c1e:	0c21      	lsrs	r1, r4, #16
   80c20:	fbb6 f2f1 	udiv	r2, r6, r1
   80c24:	fb01 6612 	mls	r6, r1, r2, r6
   80c28:	b2a0      	uxth	r0, r4
   80c2a:	fb00 f302 	mul.w	r3, r0, r2
   80c2e:	0c2f      	lsrs	r7, r5, #16
   80c30:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   80c34:	42b3      	cmp	r3, r6
   80c36:	d909      	bls.n	80c4c <__udivdi3+0x5c>
   80c38:	1936      	adds	r6, r6, r4
   80c3a:	f102 37ff 	add.w	r7, r2, #4294967295
   80c3e:	f080 80fd 	bcs.w	80e3c <__udivdi3+0x24c>
   80c42:	42b3      	cmp	r3, r6
   80c44:	f240 80fa 	bls.w	80e3c <__udivdi3+0x24c>
   80c48:	3a02      	subs	r2, #2
   80c4a:	4426      	add	r6, r4
   80c4c:	1af6      	subs	r6, r6, r3
   80c4e:	fbb6 f3f1 	udiv	r3, r6, r1
   80c52:	fb01 6113 	mls	r1, r1, r3, r6
   80c56:	fb00 f003 	mul.w	r0, r0, r3
   80c5a:	b2ad      	uxth	r5, r5
   80c5c:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
   80c60:	4288      	cmp	r0, r1
   80c62:	d908      	bls.n	80c76 <__udivdi3+0x86>
   80c64:	1909      	adds	r1, r1, r4
   80c66:	f103 36ff 	add.w	r6, r3, #4294967295
   80c6a:	f080 80e9 	bcs.w	80e40 <__udivdi3+0x250>
   80c6e:	4288      	cmp	r0, r1
   80c70:	f240 80e6 	bls.w	80e40 <__udivdi3+0x250>
   80c74:	3b02      	subs	r3, #2
   80c76:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   80c7a:	2300      	movs	r3, #0
   80c7c:	4610      	mov	r0, r2
   80c7e:	4619      	mov	r1, r3
   80c80:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80c84:	4770      	bx	lr
   80c86:	428b      	cmp	r3, r1
   80c88:	d84c      	bhi.n	80d24 <__udivdi3+0x134>
   80c8a:	fab3 f683 	clz	r6, r3
   80c8e:	2e00      	cmp	r6, #0
   80c90:	d14f      	bne.n	80d32 <__udivdi3+0x142>
   80c92:	428b      	cmp	r3, r1
   80c94:	d302      	bcc.n	80c9c <__udivdi3+0xac>
   80c96:	4282      	cmp	r2, r0
   80c98:	f200 80dd 	bhi.w	80e56 <__udivdi3+0x266>
   80c9c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80ca0:	2300      	movs	r3, #0
   80ca2:	2201      	movs	r2, #1
   80ca4:	4610      	mov	r0, r2
   80ca6:	4619      	mov	r1, r3
   80ca8:	4770      	bx	lr
   80caa:	b912      	cbnz	r2, 80cb2 <__udivdi3+0xc2>
   80cac:	2401      	movs	r4, #1
   80cae:	fbb4 f4f2 	udiv	r4, r4, r2
   80cb2:	fab4 f284 	clz	r2, r4
   80cb6:	2a00      	cmp	r2, #0
   80cb8:	f040 8082 	bne.w	80dc0 <__udivdi3+0x1d0>
   80cbc:	1b09      	subs	r1, r1, r4
   80cbe:	0c26      	lsrs	r6, r4, #16
   80cc0:	b2a7      	uxth	r7, r4
   80cc2:	2301      	movs	r3, #1
   80cc4:	fbb1 f0f6 	udiv	r0, r1, r6
   80cc8:	fb06 1110 	mls	r1, r6, r0, r1
   80ccc:	fb07 f200 	mul.w	r2, r7, r0
   80cd0:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   80cd4:	ea4c 4101 	orr.w	r1, ip, r1, lsl #16
   80cd8:	428a      	cmp	r2, r1
   80cda:	d907      	bls.n	80cec <__udivdi3+0xfc>
   80cdc:	1909      	adds	r1, r1, r4
   80cde:	f100 3cff 	add.w	ip, r0, #4294967295
   80ce2:	d202      	bcs.n	80cea <__udivdi3+0xfa>
   80ce4:	428a      	cmp	r2, r1
   80ce6:	f200 80c8 	bhi.w	80e7a <__udivdi3+0x28a>
   80cea:	4660      	mov	r0, ip
   80cec:	1a89      	subs	r1, r1, r2
   80cee:	fbb1 f2f6 	udiv	r2, r1, r6
   80cf2:	fb06 1112 	mls	r1, r6, r2, r1
   80cf6:	fb07 f702 	mul.w	r7, r7, r2
   80cfa:	b2ad      	uxth	r5, r5
   80cfc:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
   80d00:	42af      	cmp	r7, r5
   80d02:	d908      	bls.n	80d16 <__udivdi3+0x126>
   80d04:	192c      	adds	r4, r5, r4
   80d06:	f102 31ff 	add.w	r1, r2, #4294967295
   80d0a:	f080 809b 	bcs.w	80e44 <__udivdi3+0x254>
   80d0e:	42a7      	cmp	r7, r4
   80d10:	f240 8098 	bls.w	80e44 <__udivdi3+0x254>
   80d14:	3a02      	subs	r2, #2
   80d16:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
   80d1a:	4610      	mov	r0, r2
   80d1c:	4619      	mov	r1, r3
   80d1e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80d22:	4770      	bx	lr
   80d24:	2300      	movs	r3, #0
   80d26:	461a      	mov	r2, r3
   80d28:	4610      	mov	r0, r2
   80d2a:	4619      	mov	r1, r3
   80d2c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80d30:	4770      	bx	lr
   80d32:	f1c6 0520 	rsb	r5, r6, #32
   80d36:	fa22 f705 	lsr.w	r7, r2, r5
   80d3a:	fa03 f406 	lsl.w	r4, r3, r6
   80d3e:	fa21 f305 	lsr.w	r3, r1, r5
   80d42:	fa01 fb06 	lsl.w	fp, r1, r6
   80d46:	fa20 f505 	lsr.w	r5, r0, r5
   80d4a:	433c      	orrs	r4, r7
   80d4c:	ea4f 4814 	mov.w	r8, r4, lsr #16
   80d50:	fbb3 fcf8 	udiv	ip, r3, r8
   80d54:	fb08 331c 	mls	r3, r8, ip, r3
   80d58:	fa1f f984 	uxth.w	r9, r4
   80d5c:	fb09 fa0c 	mul.w	sl, r9, ip
   80d60:	ea45 0b0b 	orr.w	fp, r5, fp
   80d64:	ea4f 451b 	mov.w	r5, fp, lsr #16
   80d68:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
   80d6c:	459a      	cmp	sl, r3
   80d6e:	fa02 f206 	lsl.w	r2, r2, r6
   80d72:	d904      	bls.n	80d7e <__udivdi3+0x18e>
   80d74:	191b      	adds	r3, r3, r4
   80d76:	f10c 35ff 	add.w	r5, ip, #4294967295
   80d7a:	d36f      	bcc.n	80e5c <__udivdi3+0x26c>
   80d7c:	46ac      	mov	ip, r5
   80d7e:	ebca 0303 	rsb	r3, sl, r3
   80d82:	fbb3 f5f8 	udiv	r5, r3, r8
   80d86:	fb08 3315 	mls	r3, r8, r5, r3
   80d8a:	fb09 f905 	mul.w	r9, r9, r5
   80d8e:	fa1f fb8b 	uxth.w	fp, fp
   80d92:	ea4b 4703 	orr.w	r7, fp, r3, lsl #16
   80d96:	45b9      	cmp	r9, r7
   80d98:	d904      	bls.n	80da4 <__udivdi3+0x1b4>
   80d9a:	193f      	adds	r7, r7, r4
   80d9c:	f105 33ff 	add.w	r3, r5, #4294967295
   80da0:	d362      	bcc.n	80e68 <__udivdi3+0x278>
   80da2:	461d      	mov	r5, r3
   80da4:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
   80da8:	fbac 2302 	umull	r2, r3, ip, r2
   80dac:	ebc9 0707 	rsb	r7, r9, r7
   80db0:	429f      	cmp	r7, r3
   80db2:	f04f 0500 	mov.w	r5, #0
   80db6:	d34a      	bcc.n	80e4e <__udivdi3+0x25e>
   80db8:	d046      	beq.n	80e48 <__udivdi3+0x258>
   80dba:	4662      	mov	r2, ip
   80dbc:	462b      	mov	r3, r5
   80dbe:	e75d      	b.n	80c7c <__udivdi3+0x8c>
   80dc0:	4094      	lsls	r4, r2
   80dc2:	f1c2 0920 	rsb	r9, r2, #32
   80dc6:	fa21 fc09 	lsr.w	ip, r1, r9
   80dca:	4091      	lsls	r1, r2
   80dcc:	fa20 f909 	lsr.w	r9, r0, r9
   80dd0:	0c26      	lsrs	r6, r4, #16
   80dd2:	fbbc f8f6 	udiv	r8, ip, r6
   80dd6:	fb06 cc18 	mls	ip, r6, r8, ip
   80dda:	b2a7      	uxth	r7, r4
   80ddc:	fb07 f308 	mul.w	r3, r7, r8
   80de0:	ea49 0901 	orr.w	r9, r9, r1
   80de4:	ea4f 4119 	mov.w	r1, r9, lsr #16
   80de8:	ea41 4c0c 	orr.w	ip, r1, ip, lsl #16
   80dec:	4563      	cmp	r3, ip
   80dee:	fa00 f502 	lsl.w	r5, r0, r2
   80df2:	d909      	bls.n	80e08 <__udivdi3+0x218>
   80df4:	eb1c 0c04 	adds.w	ip, ip, r4
   80df8:	f108 32ff 	add.w	r2, r8, #4294967295
   80dfc:	d23b      	bcs.n	80e76 <__udivdi3+0x286>
   80dfe:	4563      	cmp	r3, ip
   80e00:	d939      	bls.n	80e76 <__udivdi3+0x286>
   80e02:	f1a8 0802 	sub.w	r8, r8, #2
   80e06:	44a4      	add	ip, r4
   80e08:	ebc3 0c0c 	rsb	ip, r3, ip
   80e0c:	fbbc f3f6 	udiv	r3, ip, r6
   80e10:	fb06 c113 	mls	r1, r6, r3, ip
   80e14:	fb07 f203 	mul.w	r2, r7, r3
   80e18:	fa1f f989 	uxth.w	r9, r9
   80e1c:	ea49 4101 	orr.w	r1, r9, r1, lsl #16
   80e20:	428a      	cmp	r2, r1
   80e22:	d907      	bls.n	80e34 <__udivdi3+0x244>
   80e24:	1909      	adds	r1, r1, r4
   80e26:	f103 30ff 	add.w	r0, r3, #4294967295
   80e2a:	d222      	bcs.n	80e72 <__udivdi3+0x282>
   80e2c:	428a      	cmp	r2, r1
   80e2e:	d920      	bls.n	80e72 <__udivdi3+0x282>
   80e30:	3b02      	subs	r3, #2
   80e32:	4421      	add	r1, r4
   80e34:	1a89      	subs	r1, r1, r2
   80e36:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   80e3a:	e743      	b.n	80cc4 <__udivdi3+0xd4>
   80e3c:	463a      	mov	r2, r7
   80e3e:	e705      	b.n	80c4c <__udivdi3+0x5c>
   80e40:	4633      	mov	r3, r6
   80e42:	e718      	b.n	80c76 <__udivdi3+0x86>
   80e44:	460a      	mov	r2, r1
   80e46:	e766      	b.n	80d16 <__udivdi3+0x126>
   80e48:	40b0      	lsls	r0, r6
   80e4a:	4290      	cmp	r0, r2
   80e4c:	d2b5      	bcs.n	80dba <__udivdi3+0x1ca>
   80e4e:	f10c 32ff 	add.w	r2, ip, #4294967295
   80e52:	2300      	movs	r3, #0
   80e54:	e712      	b.n	80c7c <__udivdi3+0x8c>
   80e56:	4633      	mov	r3, r6
   80e58:	4632      	mov	r2, r6
   80e5a:	e70f      	b.n	80c7c <__udivdi3+0x8c>
   80e5c:	459a      	cmp	sl, r3
   80e5e:	d98d      	bls.n	80d7c <__udivdi3+0x18c>
   80e60:	f1ac 0c02 	sub.w	ip, ip, #2
   80e64:	4423      	add	r3, r4
   80e66:	e78a      	b.n	80d7e <__udivdi3+0x18e>
   80e68:	45b9      	cmp	r9, r7
   80e6a:	d99a      	bls.n	80da2 <__udivdi3+0x1b2>
   80e6c:	3d02      	subs	r5, #2
   80e6e:	4427      	add	r7, r4
   80e70:	e798      	b.n	80da4 <__udivdi3+0x1b4>
   80e72:	4603      	mov	r3, r0
   80e74:	e7de      	b.n	80e34 <__udivdi3+0x244>
   80e76:	4690      	mov	r8, r2
   80e78:	e7c6      	b.n	80e08 <__udivdi3+0x218>
   80e7a:	3802      	subs	r0, #2
   80e7c:	4421      	add	r1, r4
   80e7e:	e735      	b.n	80cec <__udivdi3+0xfc>

00080e80 <__libc_init_array>:
   80e80:	b570      	push	{r4, r5, r6, lr}
   80e82:	4e0f      	ldr	r6, [pc, #60]	; (80ec0 <__libc_init_array+0x40>)
   80e84:	4d0f      	ldr	r5, [pc, #60]	; (80ec4 <__libc_init_array+0x44>)
   80e86:	1b76      	subs	r6, r6, r5
   80e88:	10b6      	asrs	r6, r6, #2
   80e8a:	d007      	beq.n	80e9c <__libc_init_array+0x1c>
   80e8c:	3d04      	subs	r5, #4
   80e8e:	2400      	movs	r4, #0
   80e90:	3401      	adds	r4, #1
   80e92:	f855 3f04 	ldr.w	r3, [r5, #4]!
   80e96:	4798      	blx	r3
   80e98:	42a6      	cmp	r6, r4
   80e9a:	d1f9      	bne.n	80e90 <__libc_init_array+0x10>
   80e9c:	4e0a      	ldr	r6, [pc, #40]	; (80ec8 <__libc_init_array+0x48>)
   80e9e:	4d0b      	ldr	r5, [pc, #44]	; (80ecc <__libc_init_array+0x4c>)
   80ea0:	f000 f896 	bl	80fd0 <_init>
   80ea4:	1b76      	subs	r6, r6, r5
   80ea6:	10b6      	asrs	r6, r6, #2
   80ea8:	d008      	beq.n	80ebc <__libc_init_array+0x3c>
   80eaa:	3d04      	subs	r5, #4
   80eac:	2400      	movs	r4, #0
   80eae:	3401      	adds	r4, #1
   80eb0:	f855 3f04 	ldr.w	r3, [r5, #4]!
   80eb4:	4798      	blx	r3
   80eb6:	42a6      	cmp	r6, r4
   80eb8:	d1f9      	bne.n	80eae <__libc_init_array+0x2e>
   80eba:	bd70      	pop	{r4, r5, r6, pc}
   80ebc:	bd70      	pop	{r4, r5, r6, pc}
   80ebe:	bf00      	nop
   80ec0:	00080fdc 	.word	0x00080fdc
   80ec4:	00080fdc 	.word	0x00080fdc
   80ec8:	00080fe4 	.word	0x00080fe4
   80ecc:	00080fdc 	.word	0x00080fdc

00080ed0 <register_fini>:
   80ed0:	4b02      	ldr	r3, [pc, #8]	; (80edc <register_fini+0xc>)
   80ed2:	b113      	cbz	r3, 80eda <register_fini+0xa>
   80ed4:	4802      	ldr	r0, [pc, #8]	; (80ee0 <register_fini+0x10>)
   80ed6:	f000 b805 	b.w	80ee4 <atexit>
   80eda:	4770      	bx	lr
   80edc:	00000000 	.word	0x00000000
   80ee0:	00080ef1 	.word	0x00080ef1

00080ee4 <atexit>:
   80ee4:	4601      	mov	r1, r0
   80ee6:	2000      	movs	r0, #0
   80ee8:	4602      	mov	r2, r0
   80eea:	4603      	mov	r3, r0
   80eec:	f000 b818 	b.w	80f20 <__register_exitproc>

00080ef0 <__libc_fini_array>:
   80ef0:	b538      	push	{r3, r4, r5, lr}
   80ef2:	4d09      	ldr	r5, [pc, #36]	; (80f18 <__libc_fini_array+0x28>)
   80ef4:	4c09      	ldr	r4, [pc, #36]	; (80f1c <__libc_fini_array+0x2c>)
   80ef6:	1b64      	subs	r4, r4, r5
   80ef8:	10a4      	asrs	r4, r4, #2
   80efa:	bf18      	it	ne
   80efc:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
   80f00:	d005      	beq.n	80f0e <__libc_fini_array+0x1e>
   80f02:	3c01      	subs	r4, #1
   80f04:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   80f08:	4798      	blx	r3
   80f0a:	2c00      	cmp	r4, #0
   80f0c:	d1f9      	bne.n	80f02 <__libc_fini_array+0x12>
   80f0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   80f12:	f000 b867 	b.w	80fe4 <_fini>
   80f16:	bf00      	nop
   80f18:	00080ff0 	.word	0x00080ff0
   80f1c:	00080ff4 	.word	0x00080ff4

00080f20 <__register_exitproc>:
   80f20:	b5f0      	push	{r4, r5, r6, r7, lr}
   80f22:	4c27      	ldr	r4, [pc, #156]	; (80fc0 <__register_exitproc+0xa0>)
   80f24:	b085      	sub	sp, #20
   80f26:	6826      	ldr	r6, [r4, #0]
   80f28:	4607      	mov	r7, r0
   80f2a:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   80f2e:	2c00      	cmp	r4, #0
   80f30:	d040      	beq.n	80fb4 <__register_exitproc+0x94>
   80f32:	6865      	ldr	r5, [r4, #4]
   80f34:	2d1f      	cmp	r5, #31
   80f36:	dd1e      	ble.n	80f76 <__register_exitproc+0x56>
   80f38:	4822      	ldr	r0, [pc, #136]	; (80fc4 <__register_exitproc+0xa4>)
   80f3a:	b918      	cbnz	r0, 80f44 <__register_exitproc+0x24>
   80f3c:	f04f 30ff 	mov.w	r0, #4294967295
   80f40:	b005      	add	sp, #20
   80f42:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80f44:	f44f 70c8 	mov.w	r0, #400	; 0x190
   80f48:	9103      	str	r1, [sp, #12]
   80f4a:	9202      	str	r2, [sp, #8]
   80f4c:	9301      	str	r3, [sp, #4]
   80f4e:	f3af 8000 	nop.w
   80f52:	9903      	ldr	r1, [sp, #12]
   80f54:	4604      	mov	r4, r0
   80f56:	9a02      	ldr	r2, [sp, #8]
   80f58:	9b01      	ldr	r3, [sp, #4]
   80f5a:	2800      	cmp	r0, #0
   80f5c:	d0ee      	beq.n	80f3c <__register_exitproc+0x1c>
   80f5e:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
   80f62:	2000      	movs	r0, #0
   80f64:	6025      	str	r5, [r4, #0]
   80f66:	6060      	str	r0, [r4, #4]
   80f68:	4605      	mov	r5, r0
   80f6a:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   80f6e:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   80f72:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   80f76:	b93f      	cbnz	r7, 80f88 <__register_exitproc+0x68>
   80f78:	1c6b      	adds	r3, r5, #1
   80f7a:	2000      	movs	r0, #0
   80f7c:	3502      	adds	r5, #2
   80f7e:	6063      	str	r3, [r4, #4]
   80f80:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
   80f84:	b005      	add	sp, #20
   80f86:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80f88:	2601      	movs	r6, #1
   80f8a:	40ae      	lsls	r6, r5
   80f8c:	eb04 0085 	add.w	r0, r4, r5, lsl #2
   80f90:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   80f94:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   80f98:	2f02      	cmp	r7, #2
   80f9a:	ea42 0206 	orr.w	r2, r2, r6
   80f9e:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   80fa2:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   80fa6:	d1e7      	bne.n	80f78 <__register_exitproc+0x58>
   80fa8:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   80fac:	431e      	orrs	r6, r3
   80fae:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
   80fb2:	e7e1      	b.n	80f78 <__register_exitproc+0x58>
   80fb4:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   80fb8:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   80fbc:	e7b9      	b.n	80f32 <__register_exitproc+0x12>
   80fbe:	bf00      	nop
   80fc0:	00080fcc 	.word	0x00080fcc
   80fc4:	00000000 	.word	0x00000000
   80fc8:	00000043 	.word	0x00000043

00080fcc <_global_impure_ptr>:
   80fcc:	20070140                                @.. 

00080fd0 <_init>:
   80fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80fd2:	bf00      	nop
   80fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   80fd6:	bc08      	pop	{r3}
   80fd8:	469e      	mov	lr, r3
   80fda:	4770      	bx	lr

00080fdc <__init_array_start>:
   80fdc:	00080ed1 	.word	0x00080ed1

00080fe0 <__frame_dummy_init_array_entry>:
   80fe0:	00080119                                ....

00080fe4 <_fini>:
   80fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80fe6:	bf00      	nop
   80fe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   80fea:	bc08      	pop	{r3}
   80fec:	469e      	mov	lr, r3
   80fee:	4770      	bx	lr

00080ff0 <__fini_array_start>:
   80ff0:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20070000:	f3bf 8f5f 	dmb	sy
20070004:	3801      	subs	r0, #1
20070006:	d1fb      	bne.n	20070000 <portable_delay_cycles>
20070008:	4770      	bx	lr
2007000a:	bf00      	nop

2007000c <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007000c:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070010:	4a20      	ldr	r2, [pc, #128]	; (20070094 <SystemInit+0x88>)
20070012:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070014:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070018:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007001a:	4b1f      	ldr	r3, [pc, #124]	; (20070098 <SystemInit+0x8c>)
2007001c:	6a1b      	ldr	r3, [r3, #32]
2007001e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070022:	d107      	bne.n	20070034 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070024:	4a1d      	ldr	r2, [pc, #116]	; (2007009c <SystemInit+0x90>)
20070026:	4b1c      	ldr	r3, [pc, #112]	; (20070098 <SystemInit+0x8c>)
20070028:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007002a:	461a      	mov	r2, r3
2007002c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007002e:	f013 0f01 	tst.w	r3, #1
20070032:	d0fb      	beq.n	2007002c <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070034:	4a1a      	ldr	r2, [pc, #104]	; (200700a0 <SystemInit+0x94>)
20070036:	4b18      	ldr	r3, [pc, #96]	; (20070098 <SystemInit+0x8c>)
20070038:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007003a:	461a      	mov	r2, r3
2007003c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007003e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070042:	d0fb      	beq.n	2007003c <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070044:	4b14      	ldr	r3, [pc, #80]	; (20070098 <SystemInit+0x8c>)
20070046:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20070048:	f022 0203 	bic.w	r2, r2, #3
2007004c:	f042 0201 	orr.w	r2, r2, #1
20070050:	631a      	str	r2, [r3, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070052:	461a      	mov	r2, r3
20070054:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070056:	f013 0f08 	tst.w	r3, #8
2007005a:	d0fb      	beq.n	20070054 <SystemInit+0x48>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007005c:	4a11      	ldr	r2, [pc, #68]	; (200700a4 <SystemInit+0x98>)
2007005e:	4b0e      	ldr	r3, [pc, #56]	; (20070098 <SystemInit+0x8c>)
20070060:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070062:	461a      	mov	r2, r3
20070064:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070066:	f013 0f02 	tst.w	r3, #2
2007006a:	d0fb      	beq.n	20070064 <SystemInit+0x58>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007006c:	2211      	movs	r2, #17
2007006e:	4b0a      	ldr	r3, [pc, #40]	; (20070098 <SystemInit+0x8c>)
20070070:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070072:	461a      	mov	r2, r3
20070074:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070076:	f013 0f08 	tst.w	r3, #8
2007007a:	d0fb      	beq.n	20070074 <SystemInit+0x68>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007007c:	2212      	movs	r2, #18
2007007e:	4b06      	ldr	r3, [pc, #24]	; (20070098 <SystemInit+0x8c>)
20070080:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070082:	461a      	mov	r2, r3
20070084:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070086:	f013 0f08 	tst.w	r3, #8
2007008a:	d0fb      	beq.n	20070084 <SystemInit+0x78>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007008c:	4a06      	ldr	r2, [pc, #24]	; (200700a8 <SystemInit+0x9c>)
2007008e:	4b07      	ldr	r3, [pc, #28]	; (200700ac <SystemInit+0xa0>)
20070090:	601a      	str	r2, [r3, #0]
20070092:	4770      	bx	lr
20070094:	400e0a00 	.word	0x400e0a00
20070098:	400e0600 	.word	0x400e0600
2007009c:	00370809 	.word	0x00370809
200700a0:	01370809 	.word	0x01370809
200700a4:	200d3f01 	.word	0x200d3f01
200700a8:	0501bd00 	.word	0x0501bd00
200700ac:	20070138 	.word	0x20070138

200700b0 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700b0:	4b1b      	ldr	r3, [pc, #108]	; (20070120 <system_init_flash+0x70>)
200700b2:	4298      	cmp	r0, r3
200700b4:	d806      	bhi.n	200700c4 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700b6:	2300      	movs	r3, #0
200700b8:	4a1a      	ldr	r2, [pc, #104]	; (20070124 <system_init_flash+0x74>)
200700ba:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700bc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700c0:	6013      	str	r3, [r2, #0]
200700c2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700c4:	4b18      	ldr	r3, [pc, #96]	; (20070128 <system_init_flash+0x78>)
200700c6:	4298      	cmp	r0, r3
200700c8:	d807      	bhi.n	200700da <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700ca:	f44f 7380 	mov.w	r3, #256	; 0x100
200700ce:	4a15      	ldr	r2, [pc, #84]	; (20070124 <system_init_flash+0x74>)
200700d0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700d2:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700d6:	6013      	str	r3, [r2, #0]
200700d8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700da:	4b14      	ldr	r3, [pc, #80]	; (2007012c <system_init_flash+0x7c>)
200700dc:	4298      	cmp	r0, r3
200700de:	d807      	bhi.n	200700f0 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700e0:	f44f 7300 	mov.w	r3, #512	; 0x200
200700e4:	4a0f      	ldr	r2, [pc, #60]	; (20070124 <system_init_flash+0x74>)
200700e6:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700e8:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ec:	6013      	str	r3, [r2, #0]
200700ee:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700f0:	4b0f      	ldr	r3, [pc, #60]	; (20070130 <system_init_flash+0x80>)
200700f2:	4298      	cmp	r0, r3
200700f4:	d807      	bhi.n	20070106 <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700f6:	f44f 7340 	mov.w	r3, #768	; 0x300
200700fa:	4a0a      	ldr	r2, [pc, #40]	; (20070124 <system_init_flash+0x74>)
200700fc:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700fe:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070102:	6013      	str	r3, [r2, #0]
20070104:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
20070106:	4b0b      	ldr	r3, [pc, #44]	; (20070134 <system_init_flash+0x84>)
20070108:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007010a:	bf94      	ite	ls
2007010c:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070110:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070114:	4a03      	ldr	r2, [pc, #12]	; (20070124 <system_init_flash+0x74>)
20070116:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
20070118:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007011c:	6013      	str	r3, [r2, #0]
2007011e:	4770      	bx	lr
20070120:	0121eabf 	.word	0x0121eabf
20070124:	400e0a00 	.word	0x400e0a00
20070128:	02faf07f 	.word	0x02faf07f
2007012c:	03d08fff 	.word	0x03d08fff
20070130:	04c4b3ff 	.word	0x04c4b3ff
20070134:	055d4a7f 	.word	0x055d4a7f

20070138 <SystemCoreClock>:
20070138:	003d0900 00000000                       ..=.....

20070140 <impure_data>:
20070140:	00000000 2007042c 20070494 200704fc     ....,.. ... ... 
	...
20070174:	00080fc8 00000000 00000000 00000000     ................
	...
200701e8:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200701f8:	0005deec 0000000b 00000000 00000000     ................
	...
