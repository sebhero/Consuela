
GccBoardProject1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003f74  00080000  00080000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00083f74  00083f74  0000bf74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009ac  20070000  00083f7c  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000180  200709ac  00084928  000109ac  2**2
                  ALLOC
  4 .stack        00002004  20070b2c  00084aa8  000109ac  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  000109ac  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  000109d5  2**0
                  CONTENTS, READONLY
  7 .debug_info   0000e876  00000000  00000000  00010a30  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000028c9  00000000  00000000  0001f2a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000043cb  00000000  00000000  00021b6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000a58  00000000  00000000  00025f3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000938  00000000  00000000  00026992  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00018fcc  00000000  00000000  000272ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00010c88  00000000  00000000  00040296  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000619b1  00000000  00000000  00050f1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000205c  00000000  00000000  000b28d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20072b30 	.word	0x20072b30
   80004:	00080a2d 	.word	0x00080a2d
   80008:	00080a29 	.word	0x00080a29
   8000c:	00080a29 	.word	0x00080a29
   80010:	00080a29 	.word	0x00080a29
   80014:	00080a29 	.word	0x00080a29
   80018:	00080a29 	.word	0x00080a29
	...
   8002c:	00080a29 	.word	0x00080a29
   80030:	00080a29 	.word	0x00080a29
   80034:	00000000 	.word	0x00000000
   80038:	00080a29 	.word	0x00080a29
   8003c:	00080a29 	.word	0x00080a29
   80040:	00080a29 	.word	0x00080a29
   80044:	00080a29 	.word	0x00080a29
   80048:	00080a29 	.word	0x00080a29
   8004c:	00080a29 	.word	0x00080a29
   80050:	00080a29 	.word	0x00080a29
   80054:	00080a29 	.word	0x00080a29
   80058:	00080a29 	.word	0x00080a29
   8005c:	00080a29 	.word	0x00080a29
   80060:	00080a29 	.word	0x00080a29
   80064:	00080a29 	.word	0x00080a29
   80068:	00000000 	.word	0x00000000
   8006c:	00080875 	.word	0x00080875
   80070:	00080889 	.word	0x00080889
   80074:	0008089d 	.word	0x0008089d
   80078:	000808b1 	.word	0x000808b1
	...
   80084:	00080329 	.word	0x00080329
   80088:	00080a29 	.word	0x00080a29
   8008c:	00080a29 	.word	0x00080a29
   80090:	00080a29 	.word	0x00080a29
   80094:	00080a29 	.word	0x00080a29
   80098:	00080a29 	.word	0x00080a29
   8009c:	00080a29 	.word	0x00080a29
   800a0:	00080a29 	.word	0x00080a29
   800a4:	00000000 	.word	0x00000000
   800a8:	00080a29 	.word	0x00080a29
   800ac:	00080a29 	.word	0x00080a29
   800b0:	00080a29 	.word	0x00080a29
   800b4:	00080a29 	.word	0x00080a29
   800b8:	00080a29 	.word	0x00080a29
   800bc:	00080a29 	.word	0x00080a29
   800c0:	00080a29 	.word	0x00080a29
   800c4:	00080a29 	.word	0x00080a29
   800c8:	00080a29 	.word	0x00080a29
   800cc:	00080a29 	.word	0x00080a29
   800d0:	00080a29 	.word	0x00080a29
   800d4:	00080a29 	.word	0x00080a29
   800d8:	00080a29 	.word	0x00080a29
   800dc:	00080a29 	.word	0x00080a29
   800e0:	00080a29 	.word	0x00080a29
   800e4:	00080a29 	.word	0x00080a29
   800e8:	00080a29 	.word	0x00080a29
   800ec:	00080a29 	.word	0x00080a29
   800f0:	00080a29 	.word	0x00080a29

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	200709ac 	.word	0x200709ac
   80110:	00000000 	.word	0x00000000
   80114:	00083f7c 	.word	0x00083f7c

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b06      	ldr	r3, [pc, #24]	; (80134 <frame_dummy+0x1c>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4806      	ldr	r0, [pc, #24]	; (80138 <frame_dummy+0x20>)
   80120:	4906      	ldr	r1, [pc, #24]	; (8013c <frame_dummy+0x24>)
   80122:	f3af 8000 	nop.w
   80126:	4806      	ldr	r0, [pc, #24]	; (80140 <frame_dummy+0x28>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b113      	cbz	r3, 80132 <frame_dummy+0x1a>
   8012c:	4b05      	ldr	r3, [pc, #20]	; (80144 <frame_dummy+0x2c>)
   8012e:	b103      	cbz	r3, 80132 <frame_dummy+0x1a>
   80130:	4798      	blx	r3
   80132:	bd08      	pop	{r3, pc}
   80134:	00000000 	.word	0x00000000
   80138:	00083f7c 	.word	0x00083f7c
   8013c:	200709b0 	.word	0x200709b0
   80140:	00083f7c 	.word	0x00083f7c
   80144:	00000000 	.word	0x00000000

00080148 <usart_serial_read_packet>:
 * \param len    Length of data
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
   80148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8014c:	b083      	sub	sp, #12
   8014e:	4605      	mov	r5, r0
	while (len) {
   80150:	4690      	mov	r8, r2
   80152:	2a00      	cmp	r2, #0
   80154:	d047      	beq.n	801e6 <usart_serial_read_packet+0x9e>
   80156:	1c4e      	adds	r6, r1, #1
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80158:	4f25      	ldr	r7, [pc, #148]	; (801f0 <usart_serial_read_packet+0xa8>)
		while (usart_read(p_usart, &val));
   8015a:	4c26      	ldr	r4, [pc, #152]	; (801f4 <usart_serial_read_packet+0xac>)
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   8015c:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 80208 <usart_serial_read_packet+0xc0>
	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
   80160:	f8df b094 	ldr.w	fp, [pc, #148]	; 801f8 <usart_serial_read_packet+0xb0>
   80164:	f106 39ff 	add.w	r9, r6, #4294967295
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
	uint32_t val = 0;
   80168:	2300      	movs	r3, #0
   8016a:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   8016c:	4b22      	ldr	r3, [pc, #136]	; (801f8 <usart_serial_read_packet+0xb0>)
   8016e:	429d      	cmp	r5, r3
   80170:	d106      	bne.n	80180 <usart_serial_read_packet+0x38>
		while (uart_read((Uart*)p_usart, data));
   80172:	4658      	mov	r0, fp
   80174:	4649      	mov	r1, r9
   80176:	4b21      	ldr	r3, [pc, #132]	; (801fc <usart_serial_read_packet+0xb4>)
   80178:	4798      	blx	r3
   8017a:	2800      	cmp	r0, #0
   8017c:	d1f9      	bne.n	80172 <usart_serial_read_packet+0x2a>
   8017e:	e019      	b.n	801b4 <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80180:	4b1f      	ldr	r3, [pc, #124]	; (80200 <usart_serial_read_packet+0xb8>)
   80182:	429d      	cmp	r5, r3
   80184:	d109      	bne.n	8019a <usart_serial_read_packet+0x52>
		while (usart_read(p_usart, &val));
   80186:	4699      	mov	r9, r3
   80188:	4648      	mov	r0, r9
   8018a:	a901      	add	r1, sp, #4
   8018c:	47a0      	blx	r4
   8018e:	2800      	cmp	r0, #0
   80190:	d1fa      	bne.n	80188 <usart_serial_read_packet+0x40>
		*data = (uint8_t)(val & 0xFF);
   80192:	9b01      	ldr	r3, [sp, #4]
   80194:	f806 3c01 	strb.w	r3, [r6, #-1]
   80198:	e017      	b.n	801ca <usart_serial_read_packet+0x82>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   8019a:	4b1a      	ldr	r3, [pc, #104]	; (80204 <usart_serial_read_packet+0xbc>)
   8019c:	429d      	cmp	r5, r3
   8019e:	d109      	bne.n	801b4 <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
   801a0:	4699      	mov	r9, r3
   801a2:	4648      	mov	r0, r9
   801a4:	a901      	add	r1, sp, #4
   801a6:	47a0      	blx	r4
   801a8:	2800      	cmp	r0, #0
   801aa:	d1fa      	bne.n	801a2 <usart_serial_read_packet+0x5a>
		*data = (uint8_t)(val & 0xFF);
   801ac:	9b01      	ldr	r3, [sp, #4]
   801ae:	f806 3c01 	strb.w	r3, [r6, #-1]
   801b2:	e014      	b.n	801de <usart_serial_read_packet+0x96>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   801b4:	4555      	cmp	r5, sl
   801b6:	d108      	bne.n	801ca <usart_serial_read_packet+0x82>
		while (usart_read(p_usart, &val));
   801b8:	4650      	mov	r0, sl
   801ba:	a901      	add	r1, sp, #4
   801bc:	47a0      	blx	r4
   801be:	2800      	cmp	r0, #0
   801c0:	d1fa      	bne.n	801b8 <usart_serial_read_packet+0x70>
		*data = (uint8_t)(val & 0xFF);
   801c2:	9b01      	ldr	r3, [sp, #4]
   801c4:	f806 3c01 	strb.w	r3, [r6, #-1]
   801c8:	e009      	b.n	801de <usart_serial_read_packet+0x96>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   801ca:	42bd      	cmp	r5, r7
   801cc:	d107      	bne.n	801de <usart_serial_read_packet+0x96>
		while (usart_read(p_usart, &val));
   801ce:	4638      	mov	r0, r7
   801d0:	a901      	add	r1, sp, #4
   801d2:	47a0      	blx	r4
   801d4:	2800      	cmp	r0, #0
   801d6:	d1fa      	bne.n	801ce <usart_serial_read_packet+0x86>
		*data = (uint8_t)(val & 0xFF);
   801d8:	9b01      	ldr	r3, [sp, #4]
   801da:	f806 3c01 	strb.w	r3, [r6, #-1]
   801de:	3601      	adds	r6, #1
   801e0:	f1b8 0801 	subs.w	r8, r8, #1
   801e4:	d1be      	bne.n	80164 <usart_serial_read_packet+0x1c>
		usart_serial_getchar(usart, data);
		len--;
		data++;
	}
	return STATUS_OK;
}
   801e6:	2000      	movs	r0, #0
   801e8:	b003      	add	sp, #12
   801ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   801ee:	bf00      	nop
   801f0:	400a4000 	.word	0x400a4000
   801f4:	00080311 	.word	0x00080311
   801f8:	400e0800 	.word	0x400e0800
   801fc:	000802e9 	.word	0x000802e9
   80200:	40098000 	.word	0x40098000
   80204:	4009c000 	.word	0x4009c000
   80208:	400a0000 	.word	0x400a0000

0008020c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   8020c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80210:	460c      	mov	r4, r1
   80212:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
   80214:	b960      	cbnz	r0, 80230 <_read+0x24>
		return -1;
	}

	for (; len > 0; --len) {
   80216:	2a00      	cmp	r2, #0
   80218:	dd0e      	ble.n	80238 <_read+0x2c>
   8021a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   8021c:	4e09      	ldr	r6, [pc, #36]	; (80244 <_read+0x38>)
   8021e:	4d0a      	ldr	r5, [pc, #40]	; (80248 <_read+0x3c>)
   80220:	6830      	ldr	r0, [r6, #0]
   80222:	4621      	mov	r1, r4
   80224:	682b      	ldr	r3, [r5, #0]
   80226:	4798      	blx	r3
		ptr++;
   80228:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   8022a:	42bc      	cmp	r4, r7
   8022c:	d1f8      	bne.n	80220 <_read+0x14>
   8022e:	e006      	b.n	8023e <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
   80230:	f04f 30ff 	mov.w	r0, #4294967295
   80234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len > 0; --len) {
   80238:	2000      	movs	r0, #0
   8023a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
   8023e:	4640      	mov	r0, r8
	}
	return nChars;
}
   80240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80244:	20070b24 	.word	0x20070b24
   80248:	20070b1c 	.word	0x20070b1c

0008024c <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   8024c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80250:	460e      	mov	r6, r1
   80252:	4615      	mov	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   80254:	3801      	subs	r0, #1
   80256:	2802      	cmp	r0, #2
   80258:	d80f      	bhi.n	8027a <_write+0x2e>
		return -1;
	}

	for (; len != 0; --len) {
   8025a:	b192      	cbz	r2, 80282 <_write+0x36>
   8025c:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
   8025e:	f8df 803c 	ldr.w	r8, [pc, #60]	; 8029c <_write+0x50>
   80262:	4f0d      	ldr	r7, [pc, #52]	; (80298 <_write+0x4c>)
   80264:	f8d8 0000 	ldr.w	r0, [r8]
   80268:	5d31      	ldrb	r1, [r6, r4]
   8026a:	683b      	ldr	r3, [r7, #0]
   8026c:	4798      	blx	r3
   8026e:	2800      	cmp	r0, #0
   80270:	db0a      	blt.n	80288 <_write+0x3c>
			return -1;
		}
		++nChars;
   80272:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   80274:	42a5      	cmp	r5, r4
   80276:	d1f5      	bne.n	80264 <_write+0x18>
   80278:	e00a      	b.n	80290 <_write+0x44>
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
   8027a:	f04f 30ff 	mov.w	r0, #4294967295
   8027e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len != 0; --len) {
   80282:	2000      	movs	r0, #0
   80284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
   80288:	f04f 30ff 	mov.w	r0, #4294967295
   8028c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		++nChars;
   80290:	4620      	mov	r0, r4
	}
	return nChars;
}
   80292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80296:	bf00      	nop
   80298:	20070b20 	.word	0x20070b20
   8029c:	20070b24 	.word	0x20070b24

000802a0 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   802a0:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   802a2:	23ac      	movs	r3, #172	; 0xac
   802a4:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   802a6:	680a      	ldr	r2, [r1, #0]
   802a8:	684b      	ldr	r3, [r1, #4]
   802aa:	fbb2 f3f3 	udiv	r3, r2, r3
   802ae:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   802b0:	1e5c      	subs	r4, r3, #1
   802b2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   802b6:	4294      	cmp	r4, r2
   802b8:	d80a      	bhi.n	802d0 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
   802ba:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   802bc:	688b      	ldr	r3, [r1, #8]
   802be:	6043      	str	r3, [r0, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   802c0:	f240 2302 	movw	r3, #514	; 0x202
   802c4:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   802c8:	2350      	movs	r3, #80	; 0x50
   802ca:	6003      	str	r3, [r0, #0]

	return 0;
   802cc:	2000      	movs	r0, #0
   802ce:	e000      	b.n	802d2 <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
   802d0:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
   802d2:	f85d 4b04 	ldr.w	r4, [sp], #4
   802d6:	4770      	bx	lr

000802d8 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   802d8:	6943      	ldr	r3, [r0, #20]
   802da:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   802de:	bf1a      	itte	ne
   802e0:	61c1      	strne	r1, [r0, #28]
	return 0;
   802e2:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
   802e4:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
   802e6:	4770      	bx	lr

000802e8 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   802e8:	6943      	ldr	r3, [r0, #20]
   802ea:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   802ee:	bf1d      	ittte	ne
   802f0:	6983      	ldrne	r3, [r0, #24]
   802f2:	700b      	strbne	r3, [r1, #0]
	return 0;
   802f4:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
   802f6:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
   802f8:	4770      	bx	lr
   802fa:	bf00      	nop

000802fc <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   802fc:	6943      	ldr	r3, [r0, #20]
   802fe:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   80302:	bf1d      	ittte	ne
   80304:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   80308:	61c1      	strne	r1, [r0, #28]
	return 0;
   8030a:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
   8030c:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
   8030e:	4770      	bx	lr

00080310 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   80310:	6943      	ldr	r3, [r0, #20]
   80312:	f013 0f01 	tst.w	r3, #1
   80316:	d005      	beq.n	80324 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   80318:	6983      	ldr	r3, [r0, #24]
   8031a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   8031e:	600b      	str	r3, [r1, #0]

	return 0;
   80320:	2000      	movs	r0, #0
   80322:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   80324:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   80326:	4770      	bx	lr

00080328 <USART0_Handler>:
#if SAMD || SAMR21
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
   80328:	b500      	push	{lr}
   8032a:	b083      	sub	sp, #12
	uint8_t temp;
#if SAMD || SAMR21
	usart_serial_read_packet(&host_uart_module, &temp, 1);
#else
	usart_serial_read_packet(USART_HOST, &temp, 1);
   8032c:	4813      	ldr	r0, [pc, #76]	; (8037c <USART0_Handler+0x54>)
   8032e:	f10d 0107 	add.w	r1, sp, #7
   80332:	2201      	movs	r2, #1
   80334:	4b12      	ldr	r3, [pc, #72]	; (80380 <USART0_Handler+0x58>)
   80336:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   80338:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   8033a:	f3bf 8f5f 	dmb	sy
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
   8033e:	2200      	movs	r2, #0
   80340:	4b10      	ldr	r3, [pc, #64]	; (80384 <USART0_Handler+0x5c>)
   80342:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */
	serial_rx_count++;
   80344:	4b10      	ldr	r3, [pc, #64]	; (80388 <USART0_Handler+0x60>)
   80346:	781a      	ldrb	r2, [r3, #0]
   80348:	3201      	adds	r2, #1
   8034a:	701a      	strb	r2, [r3, #0]

	serial_rx_buf[serial_rx_buf_tail] = temp;
   8034c:	4b0f      	ldr	r3, [pc, #60]	; (8038c <USART0_Handler+0x64>)
   8034e:	781b      	ldrb	r3, [r3, #0]
   80350:	f89d 1007 	ldrb.w	r1, [sp, #7]
   80354:	4a0e      	ldr	r2, [pc, #56]	; (80390 <USART0_Handler+0x68>)
   80356:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
   80358:	2b9b      	cmp	r3, #155	; 0x9b
   8035a:	d103      	bne.n	80364 <USART0_Handler+0x3c>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
   8035c:	2200      	movs	r2, #0
   8035e:	4b0b      	ldr	r3, [pc, #44]	; (8038c <USART0_Handler+0x64>)
   80360:	701a      	strb	r2, [r3, #0]
   80362:	e002      	b.n	8036a <USART0_Handler+0x42>
	} else {
		serial_rx_buf_tail++;
   80364:	3301      	adds	r3, #1
   80366:	4a09      	ldr	r2, [pc, #36]	; (8038c <USART0_Handler+0x64>)
   80368:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
   8036a:	2201      	movs	r2, #1
   8036c:	4b05      	ldr	r3, [pc, #20]	; (80384 <USART0_Handler+0x5c>)
   8036e:	701a      	strb	r2, [r3, #0]
   80370:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   80374:	b662      	cpsie	i
}
   80376:	b003      	add	sp, #12
   80378:	f85d fb04 	ldr.w	pc, [sp], #4
   8037c:	40098000 	.word	0x40098000
   80380:	00080149 	.word	0x00080149
   80384:	2007013c 	.word	0x2007013c
   80388:	20070a65 	.word	0x20070a65
   8038c:	20070a64 	.word	0x20070a64
   80390:	200709c8 	.word	0x200709c8

00080394 <reglerahjul3>:
	}


}

reglerahjul3(int ek){
   80394:	b510      	push	{r4, lr}
	bS += ek;
   80396:	4b07      	ldr	r3, [pc, #28]	; (803b4 <reglerahjul3+0x20>)
   80398:	881a      	ldrh	r2, [r3, #0]
   8039a:	4410      	add	r0, r2
   8039c:	b280      	uxth	r0, r0
   8039e:	8018      	strh	r0, [r3, #0]
	pulse(bS);
   803a0:	4c05      	ldr	r4, [pc, #20]	; (803b8 <reglerahjul3+0x24>)
   803a2:	47a0      	blx	r4
	delay_us(1100);
   803a4:	f641 10c8 	movw	r0, #6600	; 0x19c8
   803a8:	4b04      	ldr	r3, [pc, #16]	; (803bc <reglerahjul3+0x28>)
   803aa:	4798      	blx	r3
	pulse(bSL);
   803ac:	4b04      	ldr	r3, [pc, #16]	; (803c0 <reglerahjul3+0x2c>)
   803ae:	8818      	ldrh	r0, [r3, #0]
   803b0:	47a0      	blx	r4
   803b2:	bd10      	pop	{r4, pc}
   803b4:	2007013a 	.word	0x2007013a
   803b8:	00080c49 	.word	0x00080c49
   803bc:	20070001 	.word	0x20070001
   803c0:	20070138 	.word	0x20070138

000803c4 <pulseCounter_handlerA>:
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   803c4:	4b04      	ldr	r3, [pc, #16]	; (803d8 <pulseCounter_handlerA+0x14>)
   803c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 int counterA = 0;
 int counterB = 0;
 

void pulseCounter_handlerA(const uint32_t id, const uint32_t index){
	if (ioport_get_pin_level(A))
   803c8:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
   803cc:	d003      	beq.n	803d6 <pulseCounter_handlerA+0x12>
	{
		counterA++;
   803ce:	4b03      	ldr	r3, [pc, #12]	; (803dc <pulseCounter_handlerA+0x18>)
   803d0:	681a      	ldr	r2, [r3, #0]
   803d2:	3201      	adds	r2, #1
   803d4:	601a      	str	r2, [r3, #0]
   803d6:	4770      	bx	lr
   803d8:	400e1200 	.word	0x400e1200
   803dc:	20070a68 	.word	0x20070a68

000803e0 <pulseCounter_handlerB>:
   803e0:	4b04      	ldr	r3, [pc, #16]	; (803f4 <pulseCounter_handlerB+0x14>)
   803e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
	}

}

void pulseCounter_handlerB(const uint32_t id, const uint32_t index){
	if (ioport_get_pin_level(B))
   803e4:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   803e8:	d003      	beq.n	803f2 <pulseCounter_handlerB+0x12>
	{
		counterB++;
   803ea:	4b03      	ldr	r3, [pc, #12]	; (803f8 <pulseCounter_handlerB+0x18>)
   803ec:	681a      	ldr	r2, [r3, #0]
   803ee:	3201      	adds	r2, #1
   803f0:	601a      	str	r2, [r3, #0]
   803f2:	4770      	bx	lr
   803f4:	400e1200 	.word	0x400e1200
   803f8:	20070a6c 	.word	0x20070a6c

000803fc <pulseCounter_configA>:
		
	}
	
}

void pulseCounter_configA(uint32_t ul_id, Pio *p_pio, const uint32_t ul_mask){
   803fc:	b570      	push	{r4, r5, r6, lr}
   803fe:	b082      	sub	sp, #8
   80400:	4606      	mov	r6, r0
   80402:	460d      	mov	r5, r1
   80404:	4614      	mov	r4, r2
	pmc_set_writeprotect(false);
   80406:	2000      	movs	r0, #0
   80408:	4b0d      	ldr	r3, [pc, #52]	; (80440 <pulseCounter_configA+0x44>)
   8040a:	4798      	blx	r3
	pmc_enable_periph_clk(ul_id);
   8040c:	4630      	mov	r0, r6
   8040e:	4b0d      	ldr	r3, [pc, #52]	; (80444 <pulseCounter_configA+0x48>)
   80410:	4798      	blx	r3
	//pio_set_output(p_pio, ul_mask, LOW, DISABLE, ENABLE);
	pio_set_input(p_pio, ul_mask, PIO_PULLUP);
   80412:	4628      	mov	r0, r5
   80414:	4621      	mov	r1, r4
   80416:	2201      	movs	r2, #1
   80418:	4b0b      	ldr	r3, [pc, #44]	; (80448 <pulseCounter_configA+0x4c>)
   8041a:	4798      	blx	r3
	pio_handler_set(p_pio, ul_id, ul_mask, PIO_IT_EDGE, pulseCounter_handlerA);
   8041c:	4b0b      	ldr	r3, [pc, #44]	; (8044c <pulseCounter_configA+0x50>)
   8041e:	9300      	str	r3, [sp, #0]
   80420:	4628      	mov	r0, r5
   80422:	4631      	mov	r1, r6
   80424:	4622      	mov	r2, r4
   80426:	2340      	movs	r3, #64	; 0x40
   80428:	4e09      	ldr	r6, [pc, #36]	; (80450 <pulseCounter_configA+0x54>)
   8042a:	47b0      	blx	r6
	pio_enable_interrupt(p_pio, ul_mask);
   8042c:	4628      	mov	r0, r5
   8042e:	4621      	mov	r1, r4
   80430:	4b08      	ldr	r3, [pc, #32]	; (80454 <pulseCounter_configA+0x58>)
   80432:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   80434:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   80438:	4b07      	ldr	r3, [pc, #28]	; (80458 <pulseCounter_configA+0x5c>)
   8043a:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(PIOC_IRQn);
}
   8043c:	b002      	add	sp, #8
   8043e:	bd70      	pop	{r4, r5, r6, pc}
   80440:	00080a05 	.word	0x00080a05
   80444:	000809ad 	.word	0x000809ad
   80448:	000805d1 	.word	0x000805d1
   8044c:	000803c5 	.word	0x000803c5
   80450:	00080839 	.word	0x00080839
   80454:	0008065d 	.word	0x0008065d
   80458:	e000e100 	.word	0xe000e100

0008045c <pulseCounter_configB>:

void pulseCounter_configB(uint32_t ul_id, Pio *p_pio, const uint32_t ul_mask){
   8045c:	b570      	push	{r4, r5, r6, lr}
   8045e:	b082      	sub	sp, #8
   80460:	4606      	mov	r6, r0
   80462:	460d      	mov	r5, r1
   80464:	4614      	mov	r4, r2
	pmc_set_writeprotect(false);
   80466:	2000      	movs	r0, #0
   80468:	4b0d      	ldr	r3, [pc, #52]	; (804a0 <pulseCounter_configB+0x44>)
   8046a:	4798      	blx	r3
	pmc_enable_periph_clk(ul_id);
   8046c:	4630      	mov	r0, r6
   8046e:	4b0d      	ldr	r3, [pc, #52]	; (804a4 <pulseCounter_configB+0x48>)
   80470:	4798      	blx	r3
	//pio_set_output(p_pio, ul_mask, LOW, DISABLE, ENABLE);
	pio_set_input(p_pio, ul_mask, PIO_PULLUP);
   80472:	4628      	mov	r0, r5
   80474:	4621      	mov	r1, r4
   80476:	2201      	movs	r2, #1
   80478:	4b0b      	ldr	r3, [pc, #44]	; (804a8 <pulseCounter_configB+0x4c>)
   8047a:	4798      	blx	r3
	pio_handler_set(p_pio, ul_id, ul_mask, PIO_IT_EDGE, pulseCounter_handlerB);
   8047c:	4b0b      	ldr	r3, [pc, #44]	; (804ac <pulseCounter_configB+0x50>)
   8047e:	9300      	str	r3, [sp, #0]
   80480:	4628      	mov	r0, r5
   80482:	4631      	mov	r1, r6
   80484:	4622      	mov	r2, r4
   80486:	2340      	movs	r3, #64	; 0x40
   80488:	4e09      	ldr	r6, [pc, #36]	; (804b0 <pulseCounter_configB+0x54>)
   8048a:	47b0      	blx	r6
	pio_enable_interrupt(p_pio, ul_mask);
   8048c:	4628      	mov	r0, r5
   8048e:	4621      	mov	r1, r4
   80490:	4b08      	ldr	r3, [pc, #32]	; (804b4 <pulseCounter_configB+0x58>)
   80492:	4798      	blx	r3
   80494:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   80498:	4b07      	ldr	r3, [pc, #28]	; (804b8 <pulseCounter_configB+0x5c>)
   8049a:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(PIOC_IRQn);
   8049c:	b002      	add	sp, #8
   8049e:	bd70      	pop	{r4, r5, r6, pc}
   804a0:	00080a05 	.word	0x00080a05
   804a4:	000809ad 	.word	0x000809ad
   804a8:	000805d1 	.word	0x000805d1
   804ac:	000803e1 	.word	0x000803e1
   804b0:	00080839 	.word	0x00080839
   804b4:	0008065d 	.word	0x0008065d
   804b8:	e000e100 	.word	0xe000e100

000804bc <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   804bc:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   804be:	480e      	ldr	r0, [pc, #56]	; (804f8 <sysclk_init+0x3c>)
   804c0:	4b0e      	ldr	r3, [pc, #56]	; (804fc <sysclk_init+0x40>)
   804c2:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   804c4:	2000      	movs	r0, #0
   804c6:	213e      	movs	r1, #62	; 0x3e
   804c8:	4b0d      	ldr	r3, [pc, #52]	; (80500 <sysclk_init+0x44>)
   804ca:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   804cc:	4c0d      	ldr	r4, [pc, #52]	; (80504 <sysclk_init+0x48>)
   804ce:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   804d0:	2800      	cmp	r0, #0
   804d2:	d0fc      	beq.n	804ce <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   804d4:	4b0c      	ldr	r3, [pc, #48]	; (80508 <sysclk_init+0x4c>)
   804d6:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   804d8:	4a0c      	ldr	r2, [pc, #48]	; (8050c <sysclk_init+0x50>)
   804da:	4b0d      	ldr	r3, [pc, #52]	; (80510 <sysclk_init+0x54>)
   804dc:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   804de:	4c0d      	ldr	r4, [pc, #52]	; (80514 <sysclk_init+0x58>)
   804e0:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   804e2:	2800      	cmp	r0, #0
   804e4:	d0fc      	beq.n	804e0 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   804e6:	2010      	movs	r0, #16
   804e8:	4b0b      	ldr	r3, [pc, #44]	; (80518 <sysclk_init+0x5c>)
   804ea:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   804ec:	4b0b      	ldr	r3, [pc, #44]	; (8051c <sysclk_init+0x60>)
   804ee:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   804f0:	4801      	ldr	r0, [pc, #4]	; (804f8 <sysclk_init+0x3c>)
   804f2:	4b02      	ldr	r3, [pc, #8]	; (804fc <sysclk_init+0x40>)
   804f4:	4798      	blx	r3
   804f6:	bd10      	pop	{r4, pc}
   804f8:	0501bd00 	.word	0x0501bd00
   804fc:	200700b1 	.word	0x200700b1
   80500:	00080929 	.word	0x00080929
   80504:	0008097d 	.word	0x0008097d
   80508:	0008098d 	.word	0x0008098d
   8050c:	200d3f01 	.word	0x200d3f01
   80510:	400e0600 	.word	0x400e0600
   80514:	0008099d 	.word	0x0008099d
   80518:	000808c5 	.word	0x000808c5
   8051c:	00080add 	.word	0x00080add

00080520 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   80520:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   80522:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   80526:	4b13      	ldr	r3, [pc, #76]	; (80574 <board_init+0x54>)
   80528:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   8052a:	200b      	movs	r0, #11
   8052c:	4c12      	ldr	r4, [pc, #72]	; (80578 <board_init+0x58>)
   8052e:	47a0      	blx	r4
   80530:	200c      	movs	r0, #12
   80532:	47a0      	blx	r4
   80534:	200d      	movs	r0, #13
   80536:	47a0      	blx	r4
   80538:	200e      	movs	r0, #14
   8053a:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   8053c:	203b      	movs	r0, #59	; 0x3b
   8053e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80542:	4c0e      	ldr	r4, [pc, #56]	; (8057c <board_init+0x5c>)
   80544:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   80546:	2055      	movs	r0, #85	; 0x55
   80548:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8054c:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   8054e:	2056      	movs	r0, #86	; 0x56
   80550:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80554:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   80556:	2068      	movs	r0, #104	; 0x68
   80558:	4909      	ldr	r1, [pc, #36]	; (80580 <board_init+0x60>)
   8055a:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   8055c:	205c      	movs	r0, #92	; 0x5c
   8055e:	4909      	ldr	r1, [pc, #36]	; (80584 <board_init+0x64>)
   80560:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   80562:	4809      	ldr	r0, [pc, #36]	; (80588 <board_init+0x68>)
   80564:	f44f 7140 	mov.w	r1, #768	; 0x300
   80568:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   8056c:	4b07      	ldr	r3, [pc, #28]	; (8058c <board_init+0x6c>)
   8056e:	4798      	blx	r3
   80570:	bd10      	pop	{r4, pc}
   80572:	bf00      	nop
   80574:	400e1a50 	.word	0x400e1a50
   80578:	000809ad 	.word	0x000809ad
   8057c:	0008066d 	.word	0x0008066d
   80580:	28000079 	.word	0x28000079
   80584:	28000001 	.word	0x28000001
   80588:	400e0e00 	.word	0x400e0e00
   8058c:	00080741 	.word	0x00080741

00080590 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   80590:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   80592:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   80596:	d016      	beq.n	805c6 <pio_set_peripheral+0x36>
   80598:	d804      	bhi.n	805a4 <pio_set_peripheral+0x14>
   8059a:	b1c1      	cbz	r1, 805ce <pio_set_peripheral+0x3e>
   8059c:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   805a0:	d00a      	beq.n	805b8 <pio_set_peripheral+0x28>
   805a2:	e013      	b.n	805cc <pio_set_peripheral+0x3c>
   805a4:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   805a8:	d011      	beq.n	805ce <pio_set_peripheral+0x3e>
   805aa:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   805ae:	d00e      	beq.n	805ce <pio_set_peripheral+0x3e>
   805b0:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   805b4:	d10a      	bne.n	805cc <pio_set_peripheral+0x3c>
   805b6:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   805b8:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   805ba:	6f01      	ldr	r1, [r0, #112]	; 0x70
   805bc:	400b      	ands	r3, r1
   805be:	ea23 0302 	bic.w	r3, r3, r2
   805c2:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   805c4:	e002      	b.n	805cc <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   805c6:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   805c8:	4313      	orrs	r3, r2
   805ca:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   805cc:	6042      	str	r2, [r0, #4]
   805ce:	4770      	bx	lr

000805d0 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   805d0:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   805d2:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   805d6:	bf14      	ite	ne
   805d8:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   805da:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   805dc:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   805e0:	bf14      	ite	ne
   805e2:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   805e4:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   805e6:	f012 0f02 	tst.w	r2, #2
   805ea:	d002      	beq.n	805f2 <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   805ec:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   805f0:	e004      	b.n	805fc <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   805f2:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   805f6:	bf18      	it	ne
   805f8:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   805fc:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   805fe:	6001      	str	r1, [r0, #0]
   80600:	4770      	bx	lr
   80602:	bf00      	nop

00080604 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   80604:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   80606:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80608:	9c01      	ldr	r4, [sp, #4]
   8060a:	b10c      	cbz	r4, 80610 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   8060c:	6641      	str	r1, [r0, #100]	; 0x64
   8060e:	e000      	b.n	80612 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80610:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   80612:	b10b      	cbz	r3, 80618 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   80614:	6501      	str	r1, [r0, #80]	; 0x50
   80616:	e000      	b.n	8061a <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   80618:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   8061a:	b10a      	cbz	r2, 80620 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   8061c:	6301      	str	r1, [r0, #48]	; 0x30
   8061e:	e000      	b.n	80622 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   80620:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   80622:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   80624:	6001      	str	r1, [r0, #0]
}
   80626:	f85d 4b04 	ldr.w	r4, [sp], #4
   8062a:	4770      	bx	lr

0008062c <pio_configure_interrupt>:
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
   8062c:	f012 0f10 	tst.w	r2, #16
   80630:	d010      	beq.n	80654 <pio_configure_interrupt+0x28>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
   80632:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
   80636:	f012 0f20 	tst.w	r2, #32
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
   8063a:	bf14      	ite	ne
   8063c:	f8c0 10d4 	strne.w	r1, [r0, #212]	; 0xd4
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
   80640:	f8c0 10d0 	streq.w	r1, [r0, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
   80644:	f012 0f40 	tst.w	r2, #64	; 0x40
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
   80648:	bf14      	ite	ne
   8064a:	f8c0 10c0 	strne.w	r1, [r0, #192]	; 0xc0
		} else {
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
   8064e:	f8c0 10c4 	streq.w	r1, [r0, #196]	; 0xc4
   80652:	4770      	bx	lr
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
   80654:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
   80658:	4770      	bx	lr
   8065a:	bf00      	nop

0008065c <pio_enable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_ISR;
   8065c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
	p_pio->PIO_IER = ul_mask;
   8065e:	6401      	str	r1, [r0, #64]	; 0x40
   80660:	4770      	bx	lr
   80662:	bf00      	nop

00080664 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   80664:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   80666:	4770      	bx	lr

00080668 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   80668:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   8066a:	4770      	bx	lr

0008066c <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   8066c:	b570      	push	{r4, r5, r6, lr}
   8066e:	b082      	sub	sp, #8
   80670:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   80672:	0944      	lsrs	r4, r0, #5
   80674:	f504 1400 	add.w	r4, r4, #2097152	; 0x200000
   80678:	f204 7407 	addw	r4, r4, #1799	; 0x707
   8067c:	0266      	lsls	r6, r4, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   8067e:	f001 44f0 	and.w	r4, r1, #2013265920	; 0x78000000
   80682:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   80686:	d030      	beq.n	806ea <pio_configure_pin+0x7e>
   80688:	d806      	bhi.n	80698 <pio_configure_pin+0x2c>
   8068a:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   8068e:	d00a      	beq.n	806a6 <pio_configure_pin+0x3a>
   80690:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   80694:	d018      	beq.n	806c8 <pio_configure_pin+0x5c>
   80696:	e049      	b.n	8072c <pio_configure_pin+0xc0>
   80698:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   8069c:	d030      	beq.n	80700 <pio_configure_pin+0x94>
   8069e:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   806a2:	d02d      	beq.n	80700 <pio_configure_pin+0x94>
   806a4:	e042      	b.n	8072c <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   806a6:	f000 001f 	and.w	r0, r0, #31
   806aa:	2401      	movs	r4, #1
   806ac:	4084      	lsls	r4, r0
   806ae:	4630      	mov	r0, r6
   806b0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   806b4:	4622      	mov	r2, r4
   806b6:	4b1f      	ldr	r3, [pc, #124]	; (80734 <pio_configure_pin+0xc8>)
   806b8:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   806ba:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   806be:	bf14      	ite	ne
   806c0:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   806c2:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   806c4:	2001      	movs	r0, #1
   806c6:	e032      	b.n	8072e <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   806c8:	f000 001f 	and.w	r0, r0, #31
   806cc:	2401      	movs	r4, #1
   806ce:	4084      	lsls	r4, r0
   806d0:	4630      	mov	r0, r6
   806d2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   806d6:	4622      	mov	r2, r4
   806d8:	4b16      	ldr	r3, [pc, #88]	; (80734 <pio_configure_pin+0xc8>)
   806da:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   806dc:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   806e0:	bf14      	ite	ne
   806e2:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   806e4:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   806e6:	2001      	movs	r0, #1
   806e8:	e021      	b.n	8072e <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   806ea:	f000 011f 	and.w	r1, r0, #31
   806ee:	2401      	movs	r4, #1
   806f0:	4630      	mov	r0, r6
   806f2:	fa04 f101 	lsl.w	r1, r4, r1
   806f6:	462a      	mov	r2, r5
   806f8:	4b0f      	ldr	r3, [pc, #60]	; (80738 <pio_configure_pin+0xcc>)
   806fa:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   806fc:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   806fe:	e016      	b.n	8072e <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80700:	f000 011f 	and.w	r1, r0, #31
   80704:	2401      	movs	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80706:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   8070a:	ea05 0304 	and.w	r3, r5, r4
   8070e:	9300      	str	r3, [sp, #0]
   80710:	4630      	mov	r0, r6
   80712:	fa04 f101 	lsl.w	r1, r4, r1
   80716:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   8071a:	bf14      	ite	ne
   8071c:	2200      	movne	r2, #0
   8071e:	2201      	moveq	r2, #1
   80720:	f3c5 0380 	ubfx	r3, r5, #2, #1
   80724:	4d05      	ldr	r5, [pc, #20]	; (8073c <pio_configure_pin+0xd0>)
   80726:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
   80728:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   8072a:	e000      	b.n	8072e <pio_configure_pin+0xc2>

	default:
		return 0;
   8072c:	2000      	movs	r0, #0
	}

	return 1;
}
   8072e:	b002      	add	sp, #8
   80730:	bd70      	pop	{r4, r5, r6, pc}
   80732:	bf00      	nop
   80734:	00080591 	.word	0x00080591
   80738:	000805d1 	.word	0x000805d1
   8073c:	00080605 	.word	0x00080605

00080740 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   80740:	b5f0      	push	{r4, r5, r6, r7, lr}
   80742:	b083      	sub	sp, #12
   80744:	4607      	mov	r7, r0
   80746:	460e      	mov	r6, r1
   80748:	4615      	mov	r5, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   8074a:	f002 44f0 	and.w	r4, r2, #2013265920	; 0x78000000
   8074e:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   80752:	d026      	beq.n	807a2 <pio_configure_pin_group+0x62>
   80754:	d806      	bhi.n	80764 <pio_configure_pin_group+0x24>
   80756:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   8075a:	d00a      	beq.n	80772 <pio_configure_pin_group+0x32>
   8075c:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   80760:	d013      	beq.n	8078a <pio_configure_pin_group+0x4a>
   80762:	e034      	b.n	807ce <pio_configure_pin_group+0x8e>
   80764:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   80768:	d01f      	beq.n	807aa <pio_configure_pin_group+0x6a>
   8076a:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   8076e:	d01c      	beq.n	807aa <pio_configure_pin_group+0x6a>
   80770:	e02d      	b.n	807ce <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   80772:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80776:	4632      	mov	r2, r6
   80778:	4b16      	ldr	r3, [pc, #88]	; (807d4 <pio_configure_pin_group+0x94>)
   8077a:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8077c:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80780:	bf14      	ite	ne
   80782:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80784:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80786:	2001      	movs	r0, #1
   80788:	e022      	b.n	807d0 <pio_configure_pin_group+0x90>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   8078a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8078e:	4632      	mov	r2, r6
   80790:	4b10      	ldr	r3, [pc, #64]	; (807d4 <pio_configure_pin_group+0x94>)
   80792:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80794:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80798:	bf14      	ite	ne
   8079a:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8079c:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   8079e:	2001      	movs	r0, #1
   807a0:	e016      	b.n	807d0 <pio_configure_pin_group+0x90>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   807a2:	4b0d      	ldr	r3, [pc, #52]	; (807d8 <pio_configure_pin_group+0x98>)
   807a4:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   807a6:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   807a8:	e012      	b.n	807d0 <pio_configure_pin_group+0x90>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   807aa:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   807ae:	f005 0301 	and.w	r3, r5, #1
   807b2:	9300      	str	r3, [sp, #0]
   807b4:	4638      	mov	r0, r7
   807b6:	4631      	mov	r1, r6
   807b8:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   807bc:	bf14      	ite	ne
   807be:	2200      	movne	r2, #0
   807c0:	2201      	moveq	r2, #1
   807c2:	f3c5 0380 	ubfx	r3, r5, #2, #1
   807c6:	4c05      	ldr	r4, [pc, #20]	; (807dc <pio_configure_pin_group+0x9c>)
   807c8:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   807ca:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   807cc:	e000      	b.n	807d0 <pio_configure_pin_group+0x90>

	default:
		return 0;
   807ce:	2000      	movs	r0, #0
	}

	return 1;
}
   807d0:	b003      	add	sp, #12
   807d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   807d4:	00080591 	.word	0x00080591
   807d8:	000805d1 	.word	0x000805d1
   807dc:	00080605 	.word	0x00080605

000807e0 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   807e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   807e4:	4604      	mov	r4, r0
   807e6:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   807e8:	4b10      	ldr	r3, [pc, #64]	; (8082c <pio_handler_process+0x4c>)
   807ea:	4798      	blx	r3
   807ec:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   807ee:	4620      	mov	r0, r4
   807f0:	4b0f      	ldr	r3, [pc, #60]	; (80830 <pio_handler_process+0x50>)
   807f2:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   807f4:	4005      	ands	r5, r0
   807f6:	d017      	beq.n	80828 <pio_handler_process+0x48>
   807f8:	4f0e      	ldr	r7, [pc, #56]	; (80834 <pio_handler_process+0x54>)
   807fa:	f107 040c 	add.w	r4, r7, #12
   807fe:	376c      	adds	r7, #108	; 0x6c
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   80800:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   80804:	42b3      	cmp	r3, r6
   80806:	d10a      	bne.n	8081e <pio_handler_process+0x3e>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   80808:	f854 1c08 	ldr.w	r1, [r4, #-8]
   8080c:	4229      	tst	r1, r5
   8080e:	d006      	beq.n	8081e <pio_handler_process+0x3e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   80810:	6823      	ldr	r3, [r4, #0]
   80812:	4630      	mov	r0, r6
   80814:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   80816:	f854 3c08 	ldr.w	r3, [r4, #-8]
   8081a:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   8081e:	42bc      	cmp	r4, r7
   80820:	d002      	beq.n	80828 <pio_handler_process+0x48>
   80822:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   80824:	2d00      	cmp	r5, #0
   80826:	d1eb      	bne.n	80800 <pio_handler_process+0x20>
   80828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8082c:	00080665 	.word	0x00080665
   80830:	00080669 	.word	0x00080669
   80834:	20070a74 	.word	0x20070a74

00080838 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
   80838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
   8083a:	4c0b      	ldr	r4, [pc, #44]	; (80868 <pio_handler_set+0x30>)
   8083c:	6824      	ldr	r4, [r4, #0]
   8083e:	2c06      	cmp	r4, #6
   80840:	d810      	bhi.n	80864 <pio_handler_set+0x2c>
		return 1;

	/* Define new source */
	pSource = &(gs_interrupt_sources[gs_ul_nb_sources]);
   80842:	4f0a      	ldr	r7, [pc, #40]	; (8086c <pio_handler_set+0x34>)
   80844:	0126      	lsls	r6, r4, #4
   80846:	19bd      	adds	r5, r7, r6
	pSource->id = ul_id;
   80848:	51b9      	str	r1, [r7, r6]
	pSource->mask = ul_mask;
   8084a:	606a      	str	r2, [r5, #4]
	pSource->attr = ul_attr;
   8084c:	60ab      	str	r3, [r5, #8]
	pSource->handler = p_handler;
   8084e:	9906      	ldr	r1, [sp, #24]
   80850:	60e9      	str	r1, [r5, #12]
	gs_ul_nb_sources++;
   80852:	3401      	adds	r4, #1
   80854:	4904      	ldr	r1, [pc, #16]	; (80868 <pio_handler_set+0x30>)
   80856:	600c      	str	r4, [r1, #0]

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
   80858:	4611      	mov	r1, r2
   8085a:	461a      	mov	r2, r3
   8085c:	4b04      	ldr	r3, [pc, #16]	; (80870 <pio_handler_set+0x38>)
   8085e:	4798      	blx	r3

	return 0;
   80860:	2000      	movs	r0, #0
   80862:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;
   80864:	2001      	movs	r0, #1

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);

	return 0;
}
   80866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80868:	20070a70 	.word	0x20070a70
   8086c:	20070a74 	.word	0x20070a74
   80870:	0008062d 	.word	0x0008062d

00080874 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   80874:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   80876:	4802      	ldr	r0, [pc, #8]	; (80880 <PIOA_Handler+0xc>)
   80878:	210b      	movs	r1, #11
   8087a:	4b02      	ldr	r3, [pc, #8]	; (80884 <PIOA_Handler+0x10>)
   8087c:	4798      	blx	r3
   8087e:	bd08      	pop	{r3, pc}
   80880:	400e0e00 	.word	0x400e0e00
   80884:	000807e1 	.word	0x000807e1

00080888 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   80888:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   8088a:	4802      	ldr	r0, [pc, #8]	; (80894 <PIOB_Handler+0xc>)
   8088c:	210c      	movs	r1, #12
   8088e:	4b02      	ldr	r3, [pc, #8]	; (80898 <PIOB_Handler+0x10>)
   80890:	4798      	blx	r3
   80892:	bd08      	pop	{r3, pc}
   80894:	400e1000 	.word	0x400e1000
   80898:	000807e1 	.word	0x000807e1

0008089c <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   8089c:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   8089e:	4802      	ldr	r0, [pc, #8]	; (808a8 <PIOC_Handler+0xc>)
   808a0:	210d      	movs	r1, #13
   808a2:	4b02      	ldr	r3, [pc, #8]	; (808ac <PIOC_Handler+0x10>)
   808a4:	4798      	blx	r3
   808a6:	bd08      	pop	{r3, pc}
   808a8:	400e1200 	.word	0x400e1200
   808ac:	000807e1 	.word	0x000807e1

000808b0 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   808b0:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   808b2:	4802      	ldr	r0, [pc, #8]	; (808bc <PIOD_Handler+0xc>)
   808b4:	210e      	movs	r1, #14
   808b6:	4b02      	ldr	r3, [pc, #8]	; (808c0 <PIOD_Handler+0x10>)
   808b8:	4798      	blx	r3
   808ba:	bd08      	pop	{r3, pc}
   808bc:	400e1400 	.word	0x400e1400
   808c0:	000807e1 	.word	0x000807e1

000808c4 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   808c4:	4b17      	ldr	r3, [pc, #92]	; (80924 <pmc_switch_mck_to_pllack+0x60>)
   808c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   808c8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   808cc:	4310      	orrs	r0, r2
   808ce:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   808d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   808d2:	f013 0f08 	tst.w	r3, #8
   808d6:	d109      	bne.n	808ec <pmc_switch_mck_to_pllack+0x28>
   808d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
   808dc:	4911      	ldr	r1, [pc, #68]	; (80924 <pmc_switch_mck_to_pllack+0x60>)
   808de:	e001      	b.n	808e4 <pmc_switch_mck_to_pllack+0x20>
			--ul_timeout) {
		if (ul_timeout == 0) {
   808e0:	3b01      	subs	r3, #1
   808e2:	d019      	beq.n	80918 <pmc_switch_mck_to_pllack+0x54>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   808e4:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   808e6:	f012 0f08 	tst.w	r2, #8
   808ea:	d0f9      	beq.n	808e0 <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   808ec:	4b0d      	ldr	r3, [pc, #52]	; (80924 <pmc_switch_mck_to_pllack+0x60>)
   808ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   808f0:	f022 0203 	bic.w	r2, r2, #3
   808f4:	f042 0202 	orr.w	r2, r2, #2
   808f8:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   808fa:	6e98      	ldr	r0, [r3, #104]	; 0x68
   808fc:	f010 0008 	ands.w	r0, r0, #8
   80900:	d10c      	bne.n	8091c <pmc_switch_mck_to_pllack+0x58>
   80902:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80906:	4907      	ldr	r1, [pc, #28]	; (80924 <pmc_switch_mck_to_pllack+0x60>)
   80908:	e001      	b.n	8090e <pmc_switch_mck_to_pllack+0x4a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   8090a:	3b01      	subs	r3, #1
   8090c:	d008      	beq.n	80920 <pmc_switch_mck_to_pllack+0x5c>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8090e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80910:	f012 0f08 	tst.w	r2, #8
   80914:	d0f9      	beq.n	8090a <pmc_switch_mck_to_pllack+0x46>
   80916:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   80918:	2001      	movs	r0, #1
   8091a:	4770      	bx	lr
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   8091c:	2000      	movs	r0, #0
   8091e:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   80920:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   80922:	4770      	bx	lr
   80924:	400e0600 	.word	0x400e0600

00080928 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   80928:	b138      	cbz	r0, 8093a <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   8092a:	4911      	ldr	r1, [pc, #68]	; (80970 <pmc_switch_mainck_to_xtal+0x48>)
   8092c:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   8092e:	4a11      	ldr	r2, [pc, #68]	; (80974 <pmc_switch_mainck_to_xtal+0x4c>)
   80930:	401a      	ands	r2, r3
   80932:	4b11      	ldr	r3, [pc, #68]	; (80978 <pmc_switch_mainck_to_xtal+0x50>)
   80934:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80936:	620b      	str	r3, [r1, #32]
   80938:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   8093a:	4a0d      	ldr	r2, [pc, #52]	; (80970 <pmc_switch_mainck_to_xtal+0x48>)
   8093c:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   8093e:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   80942:	f023 0303 	bic.w	r3, r3, #3
   80946:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   8094a:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   8094e:	0209      	lsls	r1, r1, #8
   80950:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   80952:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80954:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   80956:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80958:	f013 0f01 	tst.w	r3, #1
   8095c:	d0fb      	beq.n	80956 <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   8095e:	4a04      	ldr	r2, [pc, #16]	; (80970 <pmc_switch_mainck_to_xtal+0x48>)
   80960:	6a13      	ldr	r3, [r2, #32]
   80962:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   80966:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   8096a:	6213      	str	r3, [r2, #32]
   8096c:	4770      	bx	lr
   8096e:	bf00      	nop
   80970:	400e0600 	.word	0x400e0600
   80974:	fec8fffc 	.word	0xfec8fffc
   80978:	01370002 	.word	0x01370002

0008097c <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   8097c:	4b02      	ldr	r3, [pc, #8]	; (80988 <pmc_osc_is_ready_mainck+0xc>)
   8097e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80980:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   80984:	4770      	bx	lr
   80986:	bf00      	nop
   80988:	400e0600 	.word	0x400e0600

0008098c <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   8098c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   80990:	4b01      	ldr	r3, [pc, #4]	; (80998 <pmc_disable_pllack+0xc>)
   80992:	629a      	str	r2, [r3, #40]	; 0x28
   80994:	4770      	bx	lr
   80996:	bf00      	nop
   80998:	400e0600 	.word	0x400e0600

0008099c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   8099c:	4b02      	ldr	r3, [pc, #8]	; (809a8 <pmc_is_locked_pllack+0xc>)
   8099e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   809a0:	f000 0002 	and.w	r0, r0, #2
   809a4:	4770      	bx	lr
   809a6:	bf00      	nop
   809a8:	400e0600 	.word	0x400e0600

000809ac <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   809ac:	282c      	cmp	r0, #44	; 0x2c
   809ae:	d820      	bhi.n	809f2 <pmc_enable_periph_clk+0x46>
		return 1;
	}

	if (ul_id < 32) {
   809b0:	281f      	cmp	r0, #31
   809b2:	d80d      	bhi.n	809d0 <pmc_enable_periph_clk+0x24>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   809b4:	4b12      	ldr	r3, [pc, #72]	; (80a00 <pmc_enable_periph_clk+0x54>)
   809b6:	699a      	ldr	r2, [r3, #24]
   809b8:	2301      	movs	r3, #1
   809ba:	4083      	lsls	r3, r0
   809bc:	401a      	ands	r2, r3
   809be:	4293      	cmp	r3, r2
   809c0:	d019      	beq.n	809f6 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER0 = 1 << ul_id;
   809c2:	2301      	movs	r3, #1
   809c4:	fa03 f000 	lsl.w	r0, r3, r0
   809c8:	4b0d      	ldr	r3, [pc, #52]	; (80a00 <pmc_enable_periph_clk+0x54>)
   809ca:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   809cc:	2000      	movs	r0, #0
   809ce:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   809d0:	4b0b      	ldr	r3, [pc, #44]	; (80a00 <pmc_enable_periph_clk+0x54>)
   809d2:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
	} else {
		ul_id -= 32;
   809d6:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   809d8:	2301      	movs	r3, #1
   809da:	4083      	lsls	r3, r0
   809dc:	401a      	ands	r2, r3
   809de:	4293      	cmp	r3, r2
   809e0:	d00b      	beq.n	809fa <pmc_enable_periph_clk+0x4e>
			PMC->PMC_PCER1 = 1 << ul_id;
   809e2:	2301      	movs	r3, #1
   809e4:	fa03 f000 	lsl.w	r0, r3, r0
   809e8:	4b05      	ldr	r3, [pc, #20]	; (80a00 <pmc_enable_periph_clk+0x54>)
   809ea:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   809ee:	2000      	movs	r0, #0
   809f0:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   809f2:	2001      	movs	r0, #1
   809f4:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   809f6:	2000      	movs	r0, #0
   809f8:	4770      	bx	lr
   809fa:	2000      	movs	r0, #0
}
   809fc:	4770      	bx	lr
   809fe:	bf00      	nop
   80a00:	400e0600 	.word	0x400e0600

00080a04 <pmc_set_writeprotect>:
 *
 * \param ul_enable 1 to enable, 0 to disable.
 */
void pmc_set_writeprotect(uint32_t ul_enable)
{
	if (ul_enable) {
   80a04:	b120      	cbz	r0, 80a10 <pmc_set_writeprotect+0xc>
		PMC->PMC_WPMR = PMC_WPMR_WPKEY_PASSWD | PMC_WPMR_WPEN;
   80a06:	4a05      	ldr	r2, [pc, #20]	; (80a1c <pmc_set_writeprotect+0x18>)
   80a08:	4b05      	ldr	r3, [pc, #20]	; (80a20 <pmc_set_writeprotect+0x1c>)
   80a0a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
   80a0e:	4770      	bx	lr
	} else {
		PMC->PMC_WPMR = PMC_WPMR_WPKEY_PASSWD;
   80a10:	4a04      	ldr	r2, [pc, #16]	; (80a24 <pmc_set_writeprotect+0x20>)
   80a12:	4b03      	ldr	r3, [pc, #12]	; (80a20 <pmc_set_writeprotect+0x1c>)
   80a14:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
   80a18:	4770      	bx	lr
   80a1a:	bf00      	nop
   80a1c:	504d4301 	.word	0x504d4301
   80a20:	400e0600 	.word	0x400e0600
   80a24:	504d4300 	.word	0x504d4300

00080a28 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80a28:	e7fe      	b.n	80a28 <Dummy_Handler>
   80a2a:	bf00      	nop

00080a2c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   80a2c:	b510      	push	{r4, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   80a2e:	4b1e      	ldr	r3, [pc, #120]	; (80aa8 <Reset_Handler+0x7c>)
   80a30:	4a1e      	ldr	r2, [pc, #120]	; (80aac <Reset_Handler+0x80>)
   80a32:	429a      	cmp	r2, r3
   80a34:	d003      	beq.n	80a3e <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   80a36:	4b1e      	ldr	r3, [pc, #120]	; (80ab0 <Reset_Handler+0x84>)
   80a38:	4a1b      	ldr	r2, [pc, #108]	; (80aa8 <Reset_Handler+0x7c>)
   80a3a:	429a      	cmp	r2, r3
   80a3c:	d304      	bcc.n	80a48 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80a3e:	4b1d      	ldr	r3, [pc, #116]	; (80ab4 <Reset_Handler+0x88>)
   80a40:	4a1d      	ldr	r2, [pc, #116]	; (80ab8 <Reset_Handler+0x8c>)
   80a42:	429a      	cmp	r2, r3
   80a44:	d30f      	bcc.n	80a66 <Reset_Handler+0x3a>
   80a46:	e01a      	b.n	80a7e <Reset_Handler+0x52>
   80a48:	4b1c      	ldr	r3, [pc, #112]	; (80abc <Reset_Handler+0x90>)
   80a4a:	4c1d      	ldr	r4, [pc, #116]	; (80ac0 <Reset_Handler+0x94>)
   80a4c:	1ae4      	subs	r4, r4, r3
   80a4e:	f024 0403 	bic.w	r4, r4, #3
   80a52:	3404      	adds	r4, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   80a54:	2300      	movs	r3, #0
			*pDest++ = *pSrc++;
   80a56:	4814      	ldr	r0, [pc, #80]	; (80aa8 <Reset_Handler+0x7c>)
   80a58:	4914      	ldr	r1, [pc, #80]	; (80aac <Reset_Handler+0x80>)
   80a5a:	585a      	ldr	r2, [r3, r1]
   80a5c:	501a      	str	r2, [r3, r0]
   80a5e:	3304      	adds	r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   80a60:	42a3      	cmp	r3, r4
   80a62:	d1fa      	bne.n	80a5a <Reset_Handler+0x2e>
   80a64:	e7eb      	b.n	80a3e <Reset_Handler+0x12>
   80a66:	4b17      	ldr	r3, [pc, #92]	; (80ac4 <Reset_Handler+0x98>)
   80a68:	4917      	ldr	r1, [pc, #92]	; (80ac8 <Reset_Handler+0x9c>)
   80a6a:	1ac9      	subs	r1, r1, r3
   80a6c:	f021 0103 	bic.w	r1, r1, #3
   80a70:	1d1a      	adds	r2, r3, #4
   80a72:	4411      	add	r1, r2
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   80a74:	2200      	movs	r2, #0
   80a76:	f843 2f04 	str.w	r2, [r3, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80a7a:	428b      	cmp	r3, r1
   80a7c:	d1fb      	bne.n	80a76 <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   80a7e:	4a13      	ldr	r2, [pc, #76]	; (80acc <Reset_Handler+0xa0>)
   80a80:	f022 4360 	bic.w	r3, r2, #3758096384	; 0xe0000000
   80a84:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   80a88:	4911      	ldr	r1, [pc, #68]	; (80ad0 <Reset_Handler+0xa4>)
   80a8a:	608b      	str	r3, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   80a8c:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
   80a90:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
   80a94:	d203      	bcs.n	80a9e <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   80a96:	688a      	ldr	r2, [r1, #8]
   80a98:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   80a9c:	608a      	str	r2, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   80a9e:	4b0d      	ldr	r3, [pc, #52]	; (80ad4 <Reset_Handler+0xa8>)
   80aa0:	4798      	blx	r3

	/* Branch to main function */
	main();
   80aa2:	4b0d      	ldr	r3, [pc, #52]	; (80ad8 <Reset_Handler+0xac>)
   80aa4:	4798      	blx	r3
   80aa6:	e7fe      	b.n	80aa6 <Reset_Handler+0x7a>
   80aa8:	20070000 	.word	0x20070000
   80aac:	00083f7c 	.word	0x00083f7c
   80ab0:	200709ac 	.word	0x200709ac
   80ab4:	20070b2c 	.word	0x20070b2c
   80ab8:	200709ac 	.word	0x200709ac
   80abc:	20070004 	.word	0x20070004
   80ac0:	200709af 	.word	0x200709af
   80ac4:	200709a8 	.word	0x200709a8
   80ac8:	20070b27 	.word	0x20070b27
   80acc:	00080000 	.word	0x00080000
   80ad0:	e000ed00 	.word	0xe000ed00
   80ad4:	000814ed 	.word	0x000814ed
   80ad8:	00080de9 	.word	0x00080de9

00080adc <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   80adc:	4b3e      	ldr	r3, [pc, #248]	; (80bd8 <SystemCoreClockUpdate+0xfc>)
   80ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80ae0:	f003 0303 	and.w	r3, r3, #3
   80ae4:	2b03      	cmp	r3, #3
   80ae6:	d85f      	bhi.n	80ba8 <SystemCoreClockUpdate+0xcc>
   80ae8:	e8df f003 	tbb	[pc, r3]
   80aec:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   80af0:	4b3a      	ldr	r3, [pc, #232]	; (80bdc <SystemCoreClockUpdate+0x100>)
   80af2:	695b      	ldr	r3, [r3, #20]
   80af4:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   80af8:	bf14      	ite	ne
   80afa:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   80afe:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   80b02:	4b37      	ldr	r3, [pc, #220]	; (80be0 <SystemCoreClockUpdate+0x104>)
   80b04:	601a      	str	r2, [r3, #0]
   80b06:	e04f      	b.n	80ba8 <SystemCoreClockUpdate+0xcc>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80b08:	4b33      	ldr	r3, [pc, #204]	; (80bd8 <SystemCoreClockUpdate+0xfc>)
   80b0a:	6a1b      	ldr	r3, [r3, #32]
   80b0c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80b10:	d003      	beq.n	80b1a <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80b12:	4a34      	ldr	r2, [pc, #208]	; (80be4 <SystemCoreClockUpdate+0x108>)
   80b14:	4b32      	ldr	r3, [pc, #200]	; (80be0 <SystemCoreClockUpdate+0x104>)
   80b16:	601a      	str	r2, [r3, #0]
   80b18:	e046      	b.n	80ba8 <SystemCoreClockUpdate+0xcc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80b1a:	4a33      	ldr	r2, [pc, #204]	; (80be8 <SystemCoreClockUpdate+0x10c>)
   80b1c:	4b30      	ldr	r3, [pc, #192]	; (80be0 <SystemCoreClockUpdate+0x104>)
   80b1e:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80b20:	4b2d      	ldr	r3, [pc, #180]	; (80bd8 <SystemCoreClockUpdate+0xfc>)
   80b22:	6a1b      	ldr	r3, [r3, #32]
   80b24:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80b28:	2b10      	cmp	r3, #16
   80b2a:	d002      	beq.n	80b32 <SystemCoreClockUpdate+0x56>
   80b2c:	2b20      	cmp	r3, #32
   80b2e:	d004      	beq.n	80b3a <SystemCoreClockUpdate+0x5e>
   80b30:	e03a      	b.n	80ba8 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   80b32:	4a2e      	ldr	r2, [pc, #184]	; (80bec <SystemCoreClockUpdate+0x110>)
   80b34:	4b2a      	ldr	r3, [pc, #168]	; (80be0 <SystemCoreClockUpdate+0x104>)
   80b36:	601a      	str	r2, [r3, #0]
				break;
   80b38:	e036      	b.n	80ba8 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   80b3a:	4a2a      	ldr	r2, [pc, #168]	; (80be4 <SystemCoreClockUpdate+0x108>)
   80b3c:	4b28      	ldr	r3, [pc, #160]	; (80be0 <SystemCoreClockUpdate+0x104>)
   80b3e:	601a      	str	r2, [r3, #0]
				break;
   80b40:	e032      	b.n	80ba8 <SystemCoreClockUpdate+0xcc>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80b42:	4b25      	ldr	r3, [pc, #148]	; (80bd8 <SystemCoreClockUpdate+0xfc>)
   80b44:	6a1b      	ldr	r3, [r3, #32]
   80b46:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80b4a:	d003      	beq.n	80b54 <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80b4c:	4a25      	ldr	r2, [pc, #148]	; (80be4 <SystemCoreClockUpdate+0x108>)
   80b4e:	4b24      	ldr	r3, [pc, #144]	; (80be0 <SystemCoreClockUpdate+0x104>)
   80b50:	601a      	str	r2, [r3, #0]
   80b52:	e012      	b.n	80b7a <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80b54:	4a24      	ldr	r2, [pc, #144]	; (80be8 <SystemCoreClockUpdate+0x10c>)
   80b56:	4b22      	ldr	r3, [pc, #136]	; (80be0 <SystemCoreClockUpdate+0x104>)
   80b58:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80b5a:	4b1f      	ldr	r3, [pc, #124]	; (80bd8 <SystemCoreClockUpdate+0xfc>)
   80b5c:	6a1b      	ldr	r3, [r3, #32]
   80b5e:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80b62:	2b10      	cmp	r3, #16
   80b64:	d002      	beq.n	80b6c <SystemCoreClockUpdate+0x90>
   80b66:	2b20      	cmp	r3, #32
   80b68:	d004      	beq.n	80b74 <SystemCoreClockUpdate+0x98>
   80b6a:	e006      	b.n	80b7a <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   80b6c:	4a1f      	ldr	r2, [pc, #124]	; (80bec <SystemCoreClockUpdate+0x110>)
   80b6e:	4b1c      	ldr	r3, [pc, #112]	; (80be0 <SystemCoreClockUpdate+0x104>)
   80b70:	601a      	str	r2, [r3, #0]
				break;
   80b72:	e002      	b.n	80b7a <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   80b74:	4a1b      	ldr	r2, [pc, #108]	; (80be4 <SystemCoreClockUpdate+0x108>)
   80b76:	4b1a      	ldr	r3, [pc, #104]	; (80be0 <SystemCoreClockUpdate+0x104>)
   80b78:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   80b7a:	4b17      	ldr	r3, [pc, #92]	; (80bd8 <SystemCoreClockUpdate+0xfc>)
   80b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80b7e:	f003 0303 	and.w	r3, r3, #3
   80b82:	2b02      	cmp	r3, #2
   80b84:	d10d      	bne.n	80ba2 <SystemCoreClockUpdate+0xc6>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80b86:	4b14      	ldr	r3, [pc, #80]	; (80bd8 <SystemCoreClockUpdate+0xfc>)
   80b88:	6a98      	ldr	r0, [r3, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80b8a:	6a99      	ldr	r1, [r3, #40]	; 0x28
   80b8c:	4b14      	ldr	r3, [pc, #80]	; (80be0 <SystemCoreClockUpdate+0x104>)
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80b8e:	f3c0 400a 	ubfx	r0, r0, #16, #11
   80b92:	681a      	ldr	r2, [r3, #0]
   80b94:	fb00 2202 	mla	r2, r0, r2, r2
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80b98:	b2c9      	uxtb	r1, r1
   80b9a:	fbb2 f2f1 	udiv	r2, r2, r1
   80b9e:	601a      	str	r2, [r3, #0]
   80ba0:	e002      	b.n	80ba8 <SystemCoreClockUpdate+0xcc>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   80ba2:	4a13      	ldr	r2, [pc, #76]	; (80bf0 <SystemCoreClockUpdate+0x114>)
   80ba4:	4b0e      	ldr	r3, [pc, #56]	; (80be0 <SystemCoreClockUpdate+0x104>)
   80ba6:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   80ba8:	4b0b      	ldr	r3, [pc, #44]	; (80bd8 <SystemCoreClockUpdate+0xfc>)
   80baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80bac:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80bb0:	2b70      	cmp	r3, #112	; 0x70
   80bb2:	d107      	bne.n	80bc4 <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
   80bb4:	4b0a      	ldr	r3, [pc, #40]	; (80be0 <SystemCoreClockUpdate+0x104>)
   80bb6:	681a      	ldr	r2, [r3, #0]
   80bb8:	490e      	ldr	r1, [pc, #56]	; (80bf4 <SystemCoreClockUpdate+0x118>)
   80bba:	fba1 0202 	umull	r0, r2, r1, r2
   80bbe:	0852      	lsrs	r2, r2, #1
   80bc0:	601a      	str	r2, [r3, #0]
   80bc2:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   80bc4:	4b04      	ldr	r3, [pc, #16]	; (80bd8 <SystemCoreClockUpdate+0xfc>)
   80bc6:	6b19      	ldr	r1, [r3, #48]	; 0x30
   80bc8:	4b05      	ldr	r3, [pc, #20]	; (80be0 <SystemCoreClockUpdate+0x104>)
   80bca:	f3c1 1102 	ubfx	r1, r1, #4, #3
   80bce:	681a      	ldr	r2, [r3, #0]
   80bd0:	40ca      	lsrs	r2, r1
   80bd2:	601a      	str	r2, [r3, #0]
   80bd4:	4770      	bx	lr
   80bd6:	bf00      	nop
   80bd8:	400e0600 	.word	0x400e0600
   80bdc:	400e1a10 	.word	0x400e1a10
   80be0:	20070140 	.word	0x20070140
   80be4:	00b71b00 	.word	0x00b71b00
   80be8:	003d0900 	.word	0x003d0900
   80bec:	007a1200 	.word	0x007a1200
   80bf0:	0e4e1c00 	.word	0x0e4e1c00
   80bf4:	aaaaaaab 	.word	0xaaaaaaab

00080bf8 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   80bf8:	4b09      	ldr	r3, [pc, #36]	; (80c20 <_sbrk+0x28>)
   80bfa:	681b      	ldr	r3, [r3, #0]
   80bfc:	b913      	cbnz	r3, 80c04 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
   80bfe:	4a09      	ldr	r2, [pc, #36]	; (80c24 <_sbrk+0x2c>)
   80c00:	4b07      	ldr	r3, [pc, #28]	; (80c20 <_sbrk+0x28>)
   80c02:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   80c04:	4b06      	ldr	r3, [pc, #24]	; (80c20 <_sbrk+0x28>)
   80c06:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   80c08:	181a      	adds	r2, r3, r0
   80c0a:	4907      	ldr	r1, [pc, #28]	; (80c28 <_sbrk+0x30>)
   80c0c:	4291      	cmp	r1, r2
   80c0e:	db04      	blt.n	80c1a <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
   80c10:	4610      	mov	r0, r2
   80c12:	4a03      	ldr	r2, [pc, #12]	; (80c20 <_sbrk+0x28>)
   80c14:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   80c16:	4618      	mov	r0, r3
   80c18:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
   80c1a:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
   80c1e:	4770      	bx	lr
   80c20:	20070ae4 	.word	0x20070ae4
   80c24:	20072b30 	.word	0x20072b30
   80c28:	20087ffc 	.word	0x20087ffc

00080c2c <_close>:
}

extern int _close(int file)
{
	return -1;
}
   80c2c:	f04f 30ff 	mov.w	r0, #4294967295
   80c30:	4770      	bx	lr
   80c32:	bf00      	nop

00080c34 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   80c34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   80c38:	604b      	str	r3, [r1, #4]

	return 0;
}
   80c3a:	2000      	movs	r0, #0
   80c3c:	4770      	bx	lr
   80c3e:	bf00      	nop

00080c40 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   80c40:	2001      	movs	r0, #1
   80c42:	4770      	bx	lr

00080c44 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   80c44:	2000      	movs	r0, #0
   80c46:	4770      	bx	lr

00080c48 <pulse>:
 */ 
#include <asf.h>
#include "motorFunc.h"

//Sends the pulse to the engine
void pulse(uint16_t motorSpeed){
   80c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80c4a:	4c0d      	ldr	r4, [pc, #52]	; (80c80 <pulse+0x38>)
   80c4c:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   80c50:	6325      	str	r5, [r4, #48]	; 0x30
	ioport_set_pin_level(pin24, HIGH);
	delay_us(motorSpeed);
   80c52:	a309      	add	r3, pc, #36	; (adr r3, 80c78 <pulse+0x30>)
   80c54:	e9d3 2300 	ldrd	r2, r3, [r3]
   80c58:	490a      	ldr	r1, [pc, #40]	; (80c84 <pulse+0x3c>)
   80c5a:	4616      	mov	r6, r2
   80c5c:	461f      	mov	r7, r3
   80c5e:	fbe1 6700 	umlal	r6, r7, r1, r0
   80c62:	4630      	mov	r0, r6
   80c64:	4639      	mov	r1, r7
   80c66:	4a08      	ldr	r2, [pc, #32]	; (80c88 <pulse+0x40>)
   80c68:	2300      	movs	r3, #0
   80c6a:	4e08      	ldr	r6, [pc, #32]	; (80c8c <pulse+0x44>)
   80c6c:	47b0      	blx	r6
   80c6e:	4b08      	ldr	r3, [pc, #32]	; (80c90 <pulse+0x48>)
   80c70:	4798      	blx	r3
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80c72:	6365      	str	r5, [r4, #52]	; 0x34
   80c74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80c76:	bf00      	nop
   80c78:	00d59f7f 	.word	0x00d59f7f
   80c7c:	00000000 	.word	0x00000000
   80c80:	400e0e00 	.word	0x400e0e00
   80c84:	0501bd00 	.word	0x0501bd00
   80c88:	00d59f80 	.word	0x00d59f80
   80c8c:	00080f2d 	.word	0x00080f2d
   80c90:	20070001 	.word	0x20070001
   80c94:	f3af 8000 	nop.w

00080c98 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   80c98:	b5f0      	push	{r4, r5, r6, r7, lr}
   80c9a:	b083      	sub	sp, #12
   80c9c:	4604      	mov	r4, r0
   80c9e:	460d      	mov	r5, r1
	uint32_t val = 0;
   80ca0:	2300      	movs	r3, #0
   80ca2:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   80ca4:	4b1f      	ldr	r3, [pc, #124]	; (80d24 <usart_serial_getchar+0x8c>)
   80ca6:	4298      	cmp	r0, r3
   80ca8:	d107      	bne.n	80cba <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
   80caa:	461f      	mov	r7, r3
   80cac:	4e1e      	ldr	r6, [pc, #120]	; (80d28 <usart_serial_getchar+0x90>)
   80cae:	4638      	mov	r0, r7
   80cb0:	4629      	mov	r1, r5
   80cb2:	47b0      	blx	r6
   80cb4:	2800      	cmp	r0, #0
   80cb6:	d1fa      	bne.n	80cae <usart_serial_getchar+0x16>
   80cb8:	e019      	b.n	80cee <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80cba:	4b1c      	ldr	r3, [pc, #112]	; (80d2c <usart_serial_getchar+0x94>)
   80cbc:	4298      	cmp	r0, r3
   80cbe:	d109      	bne.n	80cd4 <usart_serial_getchar+0x3c>
		while (usart_read(p_usart, &val));
   80cc0:	461f      	mov	r7, r3
   80cc2:	4e1b      	ldr	r6, [pc, #108]	; (80d30 <usart_serial_getchar+0x98>)
   80cc4:	4638      	mov	r0, r7
   80cc6:	a901      	add	r1, sp, #4
   80cc8:	47b0      	blx	r6
   80cca:	2800      	cmp	r0, #0
   80ccc:	d1fa      	bne.n	80cc4 <usart_serial_getchar+0x2c>
		*data = (uint8_t)(val & 0xFF);
   80cce:	9b01      	ldr	r3, [sp, #4]
   80cd0:	702b      	strb	r3, [r5, #0]
   80cd2:	e019      	b.n	80d08 <usart_serial_getchar+0x70>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80cd4:	4b17      	ldr	r3, [pc, #92]	; (80d34 <usart_serial_getchar+0x9c>)
   80cd6:	4298      	cmp	r0, r3
   80cd8:	d109      	bne.n	80cee <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
   80cda:	461e      	mov	r6, r3
   80cdc:	4c14      	ldr	r4, [pc, #80]	; (80d30 <usart_serial_getchar+0x98>)
   80cde:	4630      	mov	r0, r6
   80ce0:	a901      	add	r1, sp, #4
   80ce2:	47a0      	blx	r4
   80ce4:	2800      	cmp	r0, #0
   80ce6:	d1fa      	bne.n	80cde <usart_serial_getchar+0x46>
		*data = (uint8_t)(val & 0xFF);
   80ce8:	9b01      	ldr	r3, [sp, #4]
   80cea:	702b      	strb	r3, [r5, #0]
   80cec:	e018      	b.n	80d20 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80cee:	4b12      	ldr	r3, [pc, #72]	; (80d38 <usart_serial_getchar+0xa0>)
   80cf0:	429c      	cmp	r4, r3
   80cf2:	d109      	bne.n	80d08 <usart_serial_getchar+0x70>
		while (usart_read(p_usart, &val));
   80cf4:	461e      	mov	r6, r3
   80cf6:	4c0e      	ldr	r4, [pc, #56]	; (80d30 <usart_serial_getchar+0x98>)
   80cf8:	4630      	mov	r0, r6
   80cfa:	a901      	add	r1, sp, #4
   80cfc:	47a0      	blx	r4
   80cfe:	2800      	cmp	r0, #0
   80d00:	d1fa      	bne.n	80cf8 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
   80d02:	9b01      	ldr	r3, [sp, #4]
   80d04:	702b      	strb	r3, [r5, #0]
   80d06:	e00b      	b.n	80d20 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80d08:	4b0c      	ldr	r3, [pc, #48]	; (80d3c <usart_serial_getchar+0xa4>)
   80d0a:	429c      	cmp	r4, r3
   80d0c:	d108      	bne.n	80d20 <usart_serial_getchar+0x88>
		while (usart_read(p_usart, &val));
   80d0e:	461e      	mov	r6, r3
   80d10:	4c07      	ldr	r4, [pc, #28]	; (80d30 <usart_serial_getchar+0x98>)
   80d12:	4630      	mov	r0, r6
   80d14:	a901      	add	r1, sp, #4
   80d16:	47a0      	blx	r4
   80d18:	2800      	cmp	r0, #0
   80d1a:	d1fa      	bne.n	80d12 <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
   80d1c:	9b01      	ldr	r3, [sp, #4]
   80d1e:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   80d20:	b003      	add	sp, #12
   80d22:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80d24:	400e0800 	.word	0x400e0800
   80d28:	000802e9 	.word	0x000802e9
   80d2c:	40098000 	.word	0x40098000
   80d30:	00080311 	.word	0x00080311
   80d34:	4009c000 	.word	0x4009c000
   80d38:	400a0000 	.word	0x400a0000
   80d3c:	400a4000 	.word	0x400a4000

00080d40 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   80d40:	b570      	push	{r4, r5, r6, lr}
   80d42:	460c      	mov	r4, r1
#ifdef UART
	if (UART == (Uart*)p_usart) {
   80d44:	4b21      	ldr	r3, [pc, #132]	; (80dcc <usart_serial_putchar+0x8c>)
   80d46:	4298      	cmp	r0, r3
   80d48:	d107      	bne.n	80d5a <usart_serial_putchar+0x1a>
		while (uart_write((Uart*)p_usart, c)!=0);
   80d4a:	461e      	mov	r6, r3
   80d4c:	4d20      	ldr	r5, [pc, #128]	; (80dd0 <usart_serial_putchar+0x90>)
   80d4e:	4630      	mov	r0, r6
   80d50:	4621      	mov	r1, r4
   80d52:	47a8      	blx	r5
   80d54:	2800      	cmp	r0, #0
   80d56:	d1fa      	bne.n	80d4e <usart_serial_putchar+0xe>
   80d58:	e02b      	b.n	80db2 <usart_serial_putchar+0x72>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80d5a:	4b1e      	ldr	r3, [pc, #120]	; (80dd4 <usart_serial_putchar+0x94>)
   80d5c:	4298      	cmp	r0, r3
   80d5e:	d107      	bne.n	80d70 <usart_serial_putchar+0x30>
		while (usart_write(p_usart, c)!=0);
   80d60:	461e      	mov	r6, r3
   80d62:	4d1d      	ldr	r5, [pc, #116]	; (80dd8 <usart_serial_putchar+0x98>)
   80d64:	4630      	mov	r0, r6
   80d66:	4621      	mov	r1, r4
   80d68:	47a8      	blx	r5
   80d6a:	2800      	cmp	r0, #0
   80d6c:	d1fa      	bne.n	80d64 <usart_serial_putchar+0x24>
   80d6e:	e022      	b.n	80db6 <usart_serial_putchar+0x76>
		return 1;
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80d70:	4b1a      	ldr	r3, [pc, #104]	; (80ddc <usart_serial_putchar+0x9c>)
   80d72:	4298      	cmp	r0, r3
   80d74:	d107      	bne.n	80d86 <usart_serial_putchar+0x46>
		while (usart_write(p_usart, c)!=0);
   80d76:	461e      	mov	r6, r3
   80d78:	4d17      	ldr	r5, [pc, #92]	; (80dd8 <usart_serial_putchar+0x98>)
   80d7a:	4630      	mov	r0, r6
   80d7c:	4621      	mov	r1, r4
   80d7e:	47a8      	blx	r5
   80d80:	2800      	cmp	r0, #0
   80d82:	d1fa      	bne.n	80d7a <usart_serial_putchar+0x3a>
   80d84:	e019      	b.n	80dba <usart_serial_putchar+0x7a>
		return 1;
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80d86:	4b16      	ldr	r3, [pc, #88]	; (80de0 <usart_serial_putchar+0xa0>)
   80d88:	4298      	cmp	r0, r3
   80d8a:	d107      	bne.n	80d9c <usart_serial_putchar+0x5c>
		while (usart_write(p_usart, c)!=0);
   80d8c:	461e      	mov	r6, r3
   80d8e:	4d12      	ldr	r5, [pc, #72]	; (80dd8 <usart_serial_putchar+0x98>)
   80d90:	4630      	mov	r0, r6
   80d92:	4621      	mov	r1, r4
   80d94:	47a8      	blx	r5
   80d96:	2800      	cmp	r0, #0
   80d98:	d1fa      	bne.n	80d90 <usart_serial_putchar+0x50>
   80d9a:	e010      	b.n	80dbe <usart_serial_putchar+0x7e>
		return 1;
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80d9c:	4b11      	ldr	r3, [pc, #68]	; (80de4 <usart_serial_putchar+0xa4>)
   80d9e:	4298      	cmp	r0, r3
   80da0:	d10f      	bne.n	80dc2 <usart_serial_putchar+0x82>
		while (usart_write(p_usart, c)!=0);
   80da2:	461e      	mov	r6, r3
   80da4:	4d0c      	ldr	r5, [pc, #48]	; (80dd8 <usart_serial_putchar+0x98>)
   80da6:	4630      	mov	r0, r6
   80da8:	4621      	mov	r1, r4
   80daa:	47a8      	blx	r5
   80dac:	2800      	cmp	r0, #0
   80dae:	d1fa      	bne.n	80da6 <usart_serial_putchar+0x66>
   80db0:	e009      	b.n	80dc6 <usart_serial_putchar+0x86>
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
   80db2:	2001      	movs	r0, #1
   80db4:	bd70      	pop	{r4, r5, r6, pc}
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   80db6:	2001      	movs	r0, #1
   80db8:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   80dba:	2001      	movs	r0, #1
   80dbc:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   80dbe:	2001      	movs	r0, #1
   80dc0:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   80dc2:	2000      	movs	r0, #0
   80dc4:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   80dc6:	2001      	movs	r0, #1
	}
# endif
#endif /* ifdef USART */

	return 0;
}
   80dc8:	bd70      	pop	{r4, r5, r6, pc}
   80dca:	bf00      	nop
   80dcc:	400e0800 	.word	0x400e0800
   80dd0:	000802d9 	.word	0x000802d9
   80dd4:	40098000 	.word	0x40098000
   80dd8:	000802fd 	.word	0x000802fd
   80ddc:	4009c000 	.word	0x4009c000
   80de0:	400a0000 	.word	0x400a0000
   80de4:	400a4000 	.word	0x400a4000

00080de8 <main>:
	printf("Console ready\n");
	printf("=============\n");
}

int main (void)
{
   80de8:	b5f0      	push	{r4, r5, r6, r7, lr}
   80dea:	b085      	sub	sp, #20
	sysclk_init();
   80dec:	4b32      	ldr	r3, [pc, #200]	; (80eb8 <main+0xd0>)
   80dee:	4798      	blx	r3
	board_init();
   80df0:	4b32      	ldr	r3, [pc, #200]	; (80ebc <main+0xd4>)
   80df2:	4798      	blx	r3
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   80df4:	2008      	movs	r0, #8
   80df6:	4d32      	ldr	r5, [pc, #200]	; (80ec0 <main+0xd8>)
   80df8:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   80dfa:	4c32      	ldr	r4, [pc, #200]	; (80ec4 <main+0xdc>)
   80dfc:	4b32      	ldr	r3, [pc, #200]	; (80ec8 <main+0xe0>)
   80dfe:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   80e00:	4a32      	ldr	r2, [pc, #200]	; (80ecc <main+0xe4>)
   80e02:	4b33      	ldr	r3, [pc, #204]	; (80ed0 <main+0xe8>)
   80e04:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   80e06:	4a33      	ldr	r2, [pc, #204]	; (80ed4 <main+0xec>)
   80e08:	4b33      	ldr	r3, [pc, #204]	; (80ed8 <main+0xf0>)
   80e0a:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   80e0c:	4b33      	ldr	r3, [pc, #204]	; (80edc <main+0xf4>)
   80e0e:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   80e10:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   80e14:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   80e16:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80e1a:	9303      	str	r3, [sp, #12]
   80e1c:	2008      	movs	r0, #8
   80e1e:	47a8      	blx	r5
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   80e20:	4620      	mov	r0, r4
   80e22:	a901      	add	r1, sp, #4
   80e24:	4b2e      	ldr	r3, [pc, #184]	; (80ee0 <main+0xf8>)
   80e26:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   80e28:	4d2e      	ldr	r5, [pc, #184]	; (80ee4 <main+0xfc>)
   80e2a:	682b      	ldr	r3, [r5, #0]
   80e2c:	6898      	ldr	r0, [r3, #8]
   80e2e:	2100      	movs	r1, #0
   80e30:	4c2d      	ldr	r4, [pc, #180]	; (80ee8 <main+0x100>)
   80e32:	47a0      	blx	r4
	setbuf(stdin, NULL);
   80e34:	682b      	ldr	r3, [r5, #0]
   80e36:	6858      	ldr	r0, [r3, #4]
   80e38:	2100      	movs	r1, #0
   80e3a:	47a0      	blx	r4

	/* Configure console UART. */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
	
	printf("Console ready\n");
   80e3c:	482b      	ldr	r0, [pc, #172]	; (80eec <main+0x104>)
   80e3e:	4c2c      	ldr	r4, [pc, #176]	; (80ef0 <main+0x108>)
   80e40:	47a0      	blx	r4
	printf("=============\n");
   80e42:	482c      	ldr	r0, [pc, #176]	; (80ef4 <main+0x10c>)
   80e44:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   80e46:	4b2c      	ldr	r3, [pc, #176]	; (80ef8 <main+0x110>)
   80e48:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   80e4c:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80e4e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   80e52:	4c2a      	ldr	r4, [pc, #168]	; (80efc <main+0x114>)
   80e54:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   80e58:	6123      	str	r3, [r4, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80e5a:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   80e5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
   80e62:	6163      	str	r3, [r4, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80e64:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	ioport_set_pin_dir(pin24,IOPORT_DIR_OUTPUT);
	
	
	ioport_set_pin_dir(trig,IOPORT_DIR_OUTPUT);
	ioport_set_pin_dir(echo, IOPORT_DIR_INPUT);
	pulseCounter_configA(ID_PIOC, PIOC, PIO_PC28);
   80e68:	200d      	movs	r0, #13
   80e6a:	4621      	mov	r1, r4
   80e6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80e70:	4b23      	ldr	r3, [pc, #140]	; (80f00 <main+0x118>)
   80e72:	4798      	blx	r3
	pulseCounter_configB(ID_PIOC, PIOC, PIO_PC23);
   80e74:	200d      	movs	r0, #13
   80e76:	4621      	mov	r1, r4
   80e78:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   80e7c:	4b21      	ldr	r3, [pc, #132]	; (80f04 <main+0x11c>)
   80e7e:	4798      	blx	r3
	unsigned long distance;
	
	//Starts with a delay simply to reduce the chance of an error occuring when reseting the program.
	delay_ms(2000);
   80e80:	4821      	ldr	r0, [pc, #132]	; (80f08 <main+0x120>)
   80e82:	4b22      	ldr	r3, [pc, #136]	; (80f0c <main+0x124>)
   80e84:	4798      	blx	r3
		It is recommended that the "stop()" function is called between different sets of commands ex:
		forwardDrive, then stop, then reverseDrive.
		DO NOT go: forwardDrive into reverseDrive	
		This is to ensure that the motors don't get damaged.
	*/
	pulse(baseSpeed);
   80e86:	f44f 60c8 	mov.w	r0, #1600	; 0x640
   80e8a:	4b21      	ldr	r3, [pc, #132]	; (80f10 <main+0x128>)
   80e8c:	4798      	blx	r3
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   80e8e:	4627      	mov	r7, r4
	
	
	while(1){
		ioport_get_pin_level(A);
		ioport_get_pin_level(B);
	int ek = counterA - counterB;
   80e90:	4e20      	ldr	r6, [pc, #128]	; (80f14 <main+0x12c>)
   80e92:	4d21      	ldr	r5, [pc, #132]	; (80f18 <main+0x130>)
   80e94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   80e96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   80e98:	6830      	ldr	r0, [r6, #0]
   80e9a:	682b      	ldr	r3, [r5, #0]
		{
			reglerahjul();
		} */
	
	//reglerahjul(ek);
	reglerahjul3(ek);
   80e9c:	1ac0      	subs	r0, r0, r3
   80e9e:	4b1f      	ldr	r3, [pc, #124]	; (80f1c <main+0x134>)
   80ea0:	4798      	blx	r3
	//forwardDrive();
	printf("Awheel: %d\n", counterA);
   80ea2:	481f      	ldr	r0, [pc, #124]	; (80f20 <main+0x138>)
   80ea4:	6831      	ldr	r1, [r6, #0]
   80ea6:	4c12      	ldr	r4, [pc, #72]	; (80ef0 <main+0x108>)
   80ea8:	47a0      	blx	r4
	printf("Bwheel: %d\n", counterB);
   80eaa:	481e      	ldr	r0, [pc, #120]	; (80f24 <main+0x13c>)
   80eac:	6829      	ldr	r1, [r5, #0]
   80eae:	47a0      	blx	r4
	//printf(counterB);
	//turnLeft();
	delay_ms(100);
   80eb0:	481d      	ldr	r0, [pc, #116]	; (80f28 <main+0x140>)
   80eb2:	4b16      	ldr	r3, [pc, #88]	; (80f0c <main+0x124>)
   80eb4:	4798      	blx	r3
   80eb6:	e7ed      	b.n	80e94 <main+0xac>
   80eb8:	000804bd 	.word	0x000804bd
   80ebc:	00080521 	.word	0x00080521
   80ec0:	000809ad 	.word	0x000809ad
   80ec4:	400e0800 	.word	0x400e0800
   80ec8:	20070b24 	.word	0x20070b24
   80ecc:	00080d41 	.word	0x00080d41
   80ed0:	20070b20 	.word	0x20070b20
   80ed4:	00080c99 	.word	0x00080c99
   80ed8:	20070b1c 	.word	0x20070b1c
   80edc:	0501bd00 	.word	0x0501bd00
   80ee0:	000802a1 	.word	0x000802a1
   80ee4:	20070570 	.word	0x20070570
   80ee8:	000815f9 	.word	0x000815f9
   80eec:	00083ec0 	.word	0x00083ec0
   80ef0:	0008153d 	.word	0x0008153d
   80ef4:	00083ed0 	.word	0x00083ed0
   80ef8:	400e0e00 	.word	0x400e0e00
   80efc:	400e1200 	.word	0x400e1200
   80f00:	000803fd 	.word	0x000803fd
   80f04:	0008045d 	.word	0x0008045d
   80f08:	00b71b00 	.word	0x00b71b00
   80f0c:	20070001 	.word	0x20070001
   80f10:	00080c49 	.word	0x00080c49
   80f14:	20070a68 	.word	0x20070a68
   80f18:	20070a6c 	.word	0x20070a6c
   80f1c:	00080395 	.word	0x00080395
   80f20:	00083ee0 	.word	0x00083ee0
   80f24:	00083eec 	.word	0x00083eec
   80f28:	000927c0 	.word	0x000927c0

00080f2c <__aeabi_uldivmod>:
   80f2c:	b94b      	cbnz	r3, 80f42 <__aeabi_uldivmod+0x16>
   80f2e:	b942      	cbnz	r2, 80f42 <__aeabi_uldivmod+0x16>
   80f30:	2900      	cmp	r1, #0
   80f32:	bf08      	it	eq
   80f34:	2800      	cmpeq	r0, #0
   80f36:	d002      	beq.n	80f3e <__aeabi_uldivmod+0x12>
   80f38:	f04f 31ff 	mov.w	r1, #4294967295
   80f3c:	4608      	mov	r0, r1
   80f3e:	f000 b83b 	b.w	80fb8 <__aeabi_idiv0>
   80f42:	b082      	sub	sp, #8
   80f44:	46ec      	mov	ip, sp
   80f46:	e92d 5000 	stmdb	sp!, {ip, lr}
   80f4a:	f000 f81d 	bl	80f88 <__gnu_uldivmod_helper>
   80f4e:	f8dd e004 	ldr.w	lr, [sp, #4]
   80f52:	b002      	add	sp, #8
   80f54:	bc0c      	pop	{r2, r3}
   80f56:	4770      	bx	lr

00080f58 <__gnu_ldivmod_helper>:
   80f58:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   80f5c:	9e08      	ldr	r6, [sp, #32]
   80f5e:	4614      	mov	r4, r2
   80f60:	461d      	mov	r5, r3
   80f62:	4680      	mov	r8, r0
   80f64:	4689      	mov	r9, r1
   80f66:	f000 f829 	bl	80fbc <__divdi3>
   80f6a:	fb04 f301 	mul.w	r3, r4, r1
   80f6e:	fba4 ab00 	umull	sl, fp, r4, r0
   80f72:	fb00 3205 	mla	r2, r0, r5, r3
   80f76:	4493      	add	fp, r2
   80f78:	ebb8 080a 	subs.w	r8, r8, sl
   80f7c:	eb69 090b 	sbc.w	r9, r9, fp
   80f80:	e9c6 8900 	strd	r8, r9, [r6]
   80f84:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

00080f88 <__gnu_uldivmod_helper>:
   80f88:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   80f8c:	9e08      	ldr	r6, [sp, #32]
   80f8e:	4614      	mov	r4, r2
   80f90:	461d      	mov	r5, r3
   80f92:	4680      	mov	r8, r0
   80f94:	4689      	mov	r9, r1
   80f96:	f000 f961 	bl	8125c <__udivdi3>
   80f9a:	fb00 f505 	mul.w	r5, r0, r5
   80f9e:	fba0 ab04 	umull	sl, fp, r0, r4
   80fa2:	fb04 5401 	mla	r4, r4, r1, r5
   80fa6:	44a3      	add	fp, r4
   80fa8:	ebb8 080a 	subs.w	r8, r8, sl
   80fac:	eb69 090b 	sbc.w	r9, r9, fp
   80fb0:	e9c6 8900 	strd	r8, r9, [r6]
   80fb4:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

00080fb8 <__aeabi_idiv0>:
   80fb8:	4770      	bx	lr
   80fba:	bf00      	nop

00080fbc <__divdi3>:
   80fbc:	2900      	cmp	r1, #0
   80fbe:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80fc2:	f2c0 80a1 	blt.w	81108 <__divdi3+0x14c>
   80fc6:	2400      	movs	r4, #0
   80fc8:	2b00      	cmp	r3, #0
   80fca:	f2c0 8098 	blt.w	810fe <__divdi3+0x142>
   80fce:	4615      	mov	r5, r2
   80fd0:	4606      	mov	r6, r0
   80fd2:	460f      	mov	r7, r1
   80fd4:	2b00      	cmp	r3, #0
   80fd6:	d13f      	bne.n	81058 <__divdi3+0x9c>
   80fd8:	428a      	cmp	r2, r1
   80fda:	d958      	bls.n	8108e <__divdi3+0xd2>
   80fdc:	fab2 f382 	clz	r3, r2
   80fe0:	b14b      	cbz	r3, 80ff6 <__divdi3+0x3a>
   80fe2:	f1c3 0220 	rsb	r2, r3, #32
   80fe6:	fa01 f703 	lsl.w	r7, r1, r3
   80fea:	fa20 f202 	lsr.w	r2, r0, r2
   80fee:	409d      	lsls	r5, r3
   80ff0:	fa00 f603 	lsl.w	r6, r0, r3
   80ff4:	4317      	orrs	r7, r2
   80ff6:	0c29      	lsrs	r1, r5, #16
   80ff8:	fbb7 f2f1 	udiv	r2, r7, r1
   80ffc:	fb01 7712 	mls	r7, r1, r2, r7
   81000:	b2a8      	uxth	r0, r5
   81002:	fb00 f302 	mul.w	r3, r0, r2
   81006:	ea4f 4c16 	mov.w	ip, r6, lsr #16
   8100a:	ea4c 4707 	orr.w	r7, ip, r7, lsl #16
   8100e:	42bb      	cmp	r3, r7
   81010:	d909      	bls.n	81026 <__divdi3+0x6a>
   81012:	197f      	adds	r7, r7, r5
   81014:	f102 3cff 	add.w	ip, r2, #4294967295
   81018:	f080 8105 	bcs.w	81226 <__divdi3+0x26a>
   8101c:	42bb      	cmp	r3, r7
   8101e:	f240 8102 	bls.w	81226 <__divdi3+0x26a>
   81022:	3a02      	subs	r2, #2
   81024:	442f      	add	r7, r5
   81026:	1aff      	subs	r7, r7, r3
   81028:	fbb7 f3f1 	udiv	r3, r7, r1
   8102c:	fb01 7113 	mls	r1, r1, r3, r7
   81030:	fb00 f003 	mul.w	r0, r0, r3
   81034:	b2b6      	uxth	r6, r6
   81036:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
   8103a:	4288      	cmp	r0, r1
   8103c:	d908      	bls.n	81050 <__divdi3+0x94>
   8103e:	1949      	adds	r1, r1, r5
   81040:	f103 37ff 	add.w	r7, r3, #4294967295
   81044:	f080 80f1 	bcs.w	8122a <__divdi3+0x26e>
   81048:	4288      	cmp	r0, r1
   8104a:	f240 80ee 	bls.w	8122a <__divdi3+0x26e>
   8104e:	3b02      	subs	r3, #2
   81050:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   81054:	2300      	movs	r3, #0
   81056:	e003      	b.n	81060 <__divdi3+0xa4>
   81058:	428b      	cmp	r3, r1
   8105a:	d90a      	bls.n	81072 <__divdi3+0xb6>
   8105c:	2300      	movs	r3, #0
   8105e:	461a      	mov	r2, r3
   81060:	4610      	mov	r0, r2
   81062:	4619      	mov	r1, r3
   81064:	b114      	cbz	r4, 8106c <__divdi3+0xb0>
   81066:	4240      	negs	r0, r0
   81068:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8106c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   81070:	4770      	bx	lr
   81072:	fab3 f883 	clz	r8, r3
   81076:	f1b8 0f00 	cmp.w	r8, #0
   8107a:	f040 8088 	bne.w	8118e <__divdi3+0x1d2>
   8107e:	428b      	cmp	r3, r1
   81080:	d302      	bcc.n	81088 <__divdi3+0xcc>
   81082:	4282      	cmp	r2, r0
   81084:	f200 80e2 	bhi.w	8124c <__divdi3+0x290>
   81088:	2300      	movs	r3, #0
   8108a:	2201      	movs	r2, #1
   8108c:	e7e8      	b.n	81060 <__divdi3+0xa4>
   8108e:	b912      	cbnz	r2, 81096 <__divdi3+0xda>
   81090:	2301      	movs	r3, #1
   81092:	fbb3 f5f2 	udiv	r5, r3, r2
   81096:	fab5 f285 	clz	r2, r5
   8109a:	2a00      	cmp	r2, #0
   8109c:	d13a      	bne.n	81114 <__divdi3+0x158>
   8109e:	1b7f      	subs	r7, r7, r5
   810a0:	0c28      	lsrs	r0, r5, #16
   810a2:	fa1f fc85 	uxth.w	ip, r5
   810a6:	2301      	movs	r3, #1
   810a8:	fbb7 f1f0 	udiv	r1, r7, r0
   810ac:	fb00 7711 	mls	r7, r0, r1, r7
   810b0:	fb0c f201 	mul.w	r2, ip, r1
   810b4:	ea4f 4816 	mov.w	r8, r6, lsr #16
   810b8:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
   810bc:	42ba      	cmp	r2, r7
   810be:	d907      	bls.n	810d0 <__divdi3+0x114>
   810c0:	197f      	adds	r7, r7, r5
   810c2:	f101 38ff 	add.w	r8, r1, #4294967295
   810c6:	d202      	bcs.n	810ce <__divdi3+0x112>
   810c8:	42ba      	cmp	r2, r7
   810ca:	f200 80c4 	bhi.w	81256 <__divdi3+0x29a>
   810ce:	4641      	mov	r1, r8
   810d0:	1abf      	subs	r7, r7, r2
   810d2:	fbb7 f2f0 	udiv	r2, r7, r0
   810d6:	fb00 7012 	mls	r0, r0, r2, r7
   810da:	fb0c fc02 	mul.w	ip, ip, r2
   810de:	b2b6      	uxth	r6, r6
   810e0:	ea46 4000 	orr.w	r0, r6, r0, lsl #16
   810e4:	4584      	cmp	ip, r0
   810e6:	d907      	bls.n	810f8 <__divdi3+0x13c>
   810e8:	1940      	adds	r0, r0, r5
   810ea:	f102 37ff 	add.w	r7, r2, #4294967295
   810ee:	d202      	bcs.n	810f6 <__divdi3+0x13a>
   810f0:	4584      	cmp	ip, r0
   810f2:	f200 80ae 	bhi.w	81252 <__divdi3+0x296>
   810f6:	463a      	mov	r2, r7
   810f8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   810fc:	e7b0      	b.n	81060 <__divdi3+0xa4>
   810fe:	43e4      	mvns	r4, r4
   81100:	4252      	negs	r2, r2
   81102:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   81106:	e762      	b.n	80fce <__divdi3+0x12>
   81108:	4240      	negs	r0, r0
   8110a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8110e:	f04f 34ff 	mov.w	r4, #4294967295
   81112:	e759      	b.n	80fc8 <__divdi3+0xc>
   81114:	4095      	lsls	r5, r2
   81116:	f1c2 0920 	rsb	r9, r2, #32
   8111a:	fa27 f109 	lsr.w	r1, r7, r9
   8111e:	fa26 f909 	lsr.w	r9, r6, r9
   81122:	4097      	lsls	r7, r2
   81124:	0c28      	lsrs	r0, r5, #16
   81126:	fbb1 f8f0 	udiv	r8, r1, r0
   8112a:	fb00 1118 	mls	r1, r0, r8, r1
   8112e:	fa1f fc85 	uxth.w	ip, r5
   81132:	fb0c f308 	mul.w	r3, ip, r8
   81136:	ea49 0907 	orr.w	r9, r9, r7
   8113a:	ea4f 4719 	mov.w	r7, r9, lsr #16
   8113e:	ea47 4101 	orr.w	r1, r7, r1, lsl #16
   81142:	428b      	cmp	r3, r1
   81144:	fa06 f602 	lsl.w	r6, r6, r2
   81148:	d908      	bls.n	8115c <__divdi3+0x1a0>
   8114a:	1949      	adds	r1, r1, r5
   8114c:	f108 32ff 	add.w	r2, r8, #4294967295
   81150:	d27a      	bcs.n	81248 <__divdi3+0x28c>
   81152:	428b      	cmp	r3, r1
   81154:	d978      	bls.n	81248 <__divdi3+0x28c>
   81156:	f1a8 0802 	sub.w	r8, r8, #2
   8115a:	4429      	add	r1, r5
   8115c:	1ac9      	subs	r1, r1, r3
   8115e:	fbb1 f3f0 	udiv	r3, r1, r0
   81162:	fb00 1713 	mls	r7, r0, r3, r1
   81166:	fb0c f203 	mul.w	r2, ip, r3
   8116a:	fa1f f989 	uxth.w	r9, r9
   8116e:	ea49 4707 	orr.w	r7, r9, r7, lsl #16
   81172:	42ba      	cmp	r2, r7
   81174:	d907      	bls.n	81186 <__divdi3+0x1ca>
   81176:	197f      	adds	r7, r7, r5
   81178:	f103 31ff 	add.w	r1, r3, #4294967295
   8117c:	d260      	bcs.n	81240 <__divdi3+0x284>
   8117e:	42ba      	cmp	r2, r7
   81180:	d95e      	bls.n	81240 <__divdi3+0x284>
   81182:	3b02      	subs	r3, #2
   81184:	442f      	add	r7, r5
   81186:	1abf      	subs	r7, r7, r2
   81188:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   8118c:	e78c      	b.n	810a8 <__divdi3+0xec>
   8118e:	f1c8 0220 	rsb	r2, r8, #32
   81192:	fa25 f102 	lsr.w	r1, r5, r2
   81196:	fa03 fc08 	lsl.w	ip, r3, r8
   8119a:	fa27 f302 	lsr.w	r3, r7, r2
   8119e:	fa20 f202 	lsr.w	r2, r0, r2
   811a2:	fa07 f708 	lsl.w	r7, r7, r8
   811a6:	ea41 0c0c 	orr.w	ip, r1, ip
   811aa:	ea4f 491c 	mov.w	r9, ip, lsr #16
   811ae:	fbb3 f1f9 	udiv	r1, r3, r9
   811b2:	fb09 3311 	mls	r3, r9, r1, r3
   811b6:	fa1f fa8c 	uxth.w	sl, ip
   811ba:	fb0a fb01 	mul.w	fp, sl, r1
   811be:	4317      	orrs	r7, r2
   811c0:	0c3a      	lsrs	r2, r7, #16
   811c2:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   811c6:	459b      	cmp	fp, r3
   811c8:	fa05 f008 	lsl.w	r0, r5, r8
   811cc:	d908      	bls.n	811e0 <__divdi3+0x224>
   811ce:	eb13 030c 	adds.w	r3, r3, ip
   811d2:	f101 32ff 	add.w	r2, r1, #4294967295
   811d6:	d235      	bcs.n	81244 <__divdi3+0x288>
   811d8:	459b      	cmp	fp, r3
   811da:	d933      	bls.n	81244 <__divdi3+0x288>
   811dc:	3902      	subs	r1, #2
   811de:	4463      	add	r3, ip
   811e0:	ebcb 0303 	rsb	r3, fp, r3
   811e4:	fbb3 f2f9 	udiv	r2, r3, r9
   811e8:	fb09 3312 	mls	r3, r9, r2, r3
   811ec:	fb0a fa02 	mul.w	sl, sl, r2
   811f0:	b2bf      	uxth	r7, r7
   811f2:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
   811f6:	45ba      	cmp	sl, r7
   811f8:	d908      	bls.n	8120c <__divdi3+0x250>
   811fa:	eb17 070c 	adds.w	r7, r7, ip
   811fe:	f102 33ff 	add.w	r3, r2, #4294967295
   81202:	d21b      	bcs.n	8123c <__divdi3+0x280>
   81204:	45ba      	cmp	sl, r7
   81206:	d919      	bls.n	8123c <__divdi3+0x280>
   81208:	3a02      	subs	r2, #2
   8120a:	4467      	add	r7, ip
   8120c:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
   81210:	fba5 0100 	umull	r0, r1, r5, r0
   81214:	ebca 0707 	rsb	r7, sl, r7
   81218:	428f      	cmp	r7, r1
   8121a:	f04f 0300 	mov.w	r3, #0
   8121e:	d30a      	bcc.n	81236 <__divdi3+0x27a>
   81220:	d005      	beq.n	8122e <__divdi3+0x272>
   81222:	462a      	mov	r2, r5
   81224:	e71c      	b.n	81060 <__divdi3+0xa4>
   81226:	4662      	mov	r2, ip
   81228:	e6fd      	b.n	81026 <__divdi3+0x6a>
   8122a:	463b      	mov	r3, r7
   8122c:	e710      	b.n	81050 <__divdi3+0x94>
   8122e:	fa06 f608 	lsl.w	r6, r6, r8
   81232:	4286      	cmp	r6, r0
   81234:	d2f5      	bcs.n	81222 <__divdi3+0x266>
   81236:	1e6a      	subs	r2, r5, #1
   81238:	2300      	movs	r3, #0
   8123a:	e711      	b.n	81060 <__divdi3+0xa4>
   8123c:	461a      	mov	r2, r3
   8123e:	e7e5      	b.n	8120c <__divdi3+0x250>
   81240:	460b      	mov	r3, r1
   81242:	e7a0      	b.n	81186 <__divdi3+0x1ca>
   81244:	4611      	mov	r1, r2
   81246:	e7cb      	b.n	811e0 <__divdi3+0x224>
   81248:	4690      	mov	r8, r2
   8124a:	e787      	b.n	8115c <__divdi3+0x1a0>
   8124c:	4643      	mov	r3, r8
   8124e:	4642      	mov	r2, r8
   81250:	e706      	b.n	81060 <__divdi3+0xa4>
   81252:	3a02      	subs	r2, #2
   81254:	e750      	b.n	810f8 <__divdi3+0x13c>
   81256:	3902      	subs	r1, #2
   81258:	442f      	add	r7, r5
   8125a:	e739      	b.n	810d0 <__divdi3+0x114>

0008125c <__udivdi3>:
   8125c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   81260:	4614      	mov	r4, r2
   81262:	4605      	mov	r5, r0
   81264:	460e      	mov	r6, r1
   81266:	2b00      	cmp	r3, #0
   81268:	d143      	bne.n	812f2 <__udivdi3+0x96>
   8126a:	428a      	cmp	r2, r1
   8126c:	d953      	bls.n	81316 <__udivdi3+0xba>
   8126e:	fab2 f782 	clz	r7, r2
   81272:	b157      	cbz	r7, 8128a <__udivdi3+0x2e>
   81274:	f1c7 0620 	rsb	r6, r7, #32
   81278:	fa20 f606 	lsr.w	r6, r0, r6
   8127c:	fa01 f307 	lsl.w	r3, r1, r7
   81280:	fa02 f407 	lsl.w	r4, r2, r7
   81284:	fa00 f507 	lsl.w	r5, r0, r7
   81288:	431e      	orrs	r6, r3
   8128a:	0c21      	lsrs	r1, r4, #16
   8128c:	fbb6 f2f1 	udiv	r2, r6, r1
   81290:	fb01 6612 	mls	r6, r1, r2, r6
   81294:	b2a0      	uxth	r0, r4
   81296:	fb00 f302 	mul.w	r3, r0, r2
   8129a:	0c2f      	lsrs	r7, r5, #16
   8129c:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   812a0:	42b3      	cmp	r3, r6
   812a2:	d909      	bls.n	812b8 <__udivdi3+0x5c>
   812a4:	1936      	adds	r6, r6, r4
   812a6:	f102 37ff 	add.w	r7, r2, #4294967295
   812aa:	f080 80fd 	bcs.w	814a8 <__udivdi3+0x24c>
   812ae:	42b3      	cmp	r3, r6
   812b0:	f240 80fa 	bls.w	814a8 <__udivdi3+0x24c>
   812b4:	3a02      	subs	r2, #2
   812b6:	4426      	add	r6, r4
   812b8:	1af6      	subs	r6, r6, r3
   812ba:	fbb6 f3f1 	udiv	r3, r6, r1
   812be:	fb01 6113 	mls	r1, r1, r3, r6
   812c2:	fb00 f003 	mul.w	r0, r0, r3
   812c6:	b2ad      	uxth	r5, r5
   812c8:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
   812cc:	4288      	cmp	r0, r1
   812ce:	d908      	bls.n	812e2 <__udivdi3+0x86>
   812d0:	1909      	adds	r1, r1, r4
   812d2:	f103 36ff 	add.w	r6, r3, #4294967295
   812d6:	f080 80e9 	bcs.w	814ac <__udivdi3+0x250>
   812da:	4288      	cmp	r0, r1
   812dc:	f240 80e6 	bls.w	814ac <__udivdi3+0x250>
   812e0:	3b02      	subs	r3, #2
   812e2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   812e6:	2300      	movs	r3, #0
   812e8:	4610      	mov	r0, r2
   812ea:	4619      	mov	r1, r3
   812ec:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   812f0:	4770      	bx	lr
   812f2:	428b      	cmp	r3, r1
   812f4:	d84c      	bhi.n	81390 <__udivdi3+0x134>
   812f6:	fab3 f683 	clz	r6, r3
   812fa:	2e00      	cmp	r6, #0
   812fc:	d14f      	bne.n	8139e <__udivdi3+0x142>
   812fe:	428b      	cmp	r3, r1
   81300:	d302      	bcc.n	81308 <__udivdi3+0xac>
   81302:	4282      	cmp	r2, r0
   81304:	f200 80dd 	bhi.w	814c2 <__udivdi3+0x266>
   81308:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8130c:	2300      	movs	r3, #0
   8130e:	2201      	movs	r2, #1
   81310:	4610      	mov	r0, r2
   81312:	4619      	mov	r1, r3
   81314:	4770      	bx	lr
   81316:	b912      	cbnz	r2, 8131e <__udivdi3+0xc2>
   81318:	2401      	movs	r4, #1
   8131a:	fbb4 f4f2 	udiv	r4, r4, r2
   8131e:	fab4 f284 	clz	r2, r4
   81322:	2a00      	cmp	r2, #0
   81324:	f040 8082 	bne.w	8142c <__udivdi3+0x1d0>
   81328:	1b09      	subs	r1, r1, r4
   8132a:	0c26      	lsrs	r6, r4, #16
   8132c:	b2a7      	uxth	r7, r4
   8132e:	2301      	movs	r3, #1
   81330:	fbb1 f0f6 	udiv	r0, r1, r6
   81334:	fb06 1110 	mls	r1, r6, r0, r1
   81338:	fb07 f200 	mul.w	r2, r7, r0
   8133c:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   81340:	ea4c 4101 	orr.w	r1, ip, r1, lsl #16
   81344:	428a      	cmp	r2, r1
   81346:	d907      	bls.n	81358 <__udivdi3+0xfc>
   81348:	1909      	adds	r1, r1, r4
   8134a:	f100 3cff 	add.w	ip, r0, #4294967295
   8134e:	d202      	bcs.n	81356 <__udivdi3+0xfa>
   81350:	428a      	cmp	r2, r1
   81352:	f200 80c8 	bhi.w	814e6 <__udivdi3+0x28a>
   81356:	4660      	mov	r0, ip
   81358:	1a89      	subs	r1, r1, r2
   8135a:	fbb1 f2f6 	udiv	r2, r1, r6
   8135e:	fb06 1112 	mls	r1, r6, r2, r1
   81362:	fb07 f702 	mul.w	r7, r7, r2
   81366:	b2ad      	uxth	r5, r5
   81368:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
   8136c:	42af      	cmp	r7, r5
   8136e:	d908      	bls.n	81382 <__udivdi3+0x126>
   81370:	192c      	adds	r4, r5, r4
   81372:	f102 31ff 	add.w	r1, r2, #4294967295
   81376:	f080 809b 	bcs.w	814b0 <__udivdi3+0x254>
   8137a:	42a7      	cmp	r7, r4
   8137c:	f240 8098 	bls.w	814b0 <__udivdi3+0x254>
   81380:	3a02      	subs	r2, #2
   81382:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
   81386:	4610      	mov	r0, r2
   81388:	4619      	mov	r1, r3
   8138a:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8138e:	4770      	bx	lr
   81390:	2300      	movs	r3, #0
   81392:	461a      	mov	r2, r3
   81394:	4610      	mov	r0, r2
   81396:	4619      	mov	r1, r3
   81398:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8139c:	4770      	bx	lr
   8139e:	f1c6 0520 	rsb	r5, r6, #32
   813a2:	fa22 f705 	lsr.w	r7, r2, r5
   813a6:	fa03 f406 	lsl.w	r4, r3, r6
   813aa:	fa21 f305 	lsr.w	r3, r1, r5
   813ae:	fa01 fb06 	lsl.w	fp, r1, r6
   813b2:	fa20 f505 	lsr.w	r5, r0, r5
   813b6:	433c      	orrs	r4, r7
   813b8:	ea4f 4814 	mov.w	r8, r4, lsr #16
   813bc:	fbb3 fcf8 	udiv	ip, r3, r8
   813c0:	fb08 331c 	mls	r3, r8, ip, r3
   813c4:	fa1f f984 	uxth.w	r9, r4
   813c8:	fb09 fa0c 	mul.w	sl, r9, ip
   813cc:	ea45 0b0b 	orr.w	fp, r5, fp
   813d0:	ea4f 451b 	mov.w	r5, fp, lsr #16
   813d4:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
   813d8:	459a      	cmp	sl, r3
   813da:	fa02 f206 	lsl.w	r2, r2, r6
   813de:	d904      	bls.n	813ea <__udivdi3+0x18e>
   813e0:	191b      	adds	r3, r3, r4
   813e2:	f10c 35ff 	add.w	r5, ip, #4294967295
   813e6:	d36f      	bcc.n	814c8 <__udivdi3+0x26c>
   813e8:	46ac      	mov	ip, r5
   813ea:	ebca 0303 	rsb	r3, sl, r3
   813ee:	fbb3 f5f8 	udiv	r5, r3, r8
   813f2:	fb08 3315 	mls	r3, r8, r5, r3
   813f6:	fb09 f905 	mul.w	r9, r9, r5
   813fa:	fa1f fb8b 	uxth.w	fp, fp
   813fe:	ea4b 4703 	orr.w	r7, fp, r3, lsl #16
   81402:	45b9      	cmp	r9, r7
   81404:	d904      	bls.n	81410 <__udivdi3+0x1b4>
   81406:	193f      	adds	r7, r7, r4
   81408:	f105 33ff 	add.w	r3, r5, #4294967295
   8140c:	d362      	bcc.n	814d4 <__udivdi3+0x278>
   8140e:	461d      	mov	r5, r3
   81410:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
   81414:	fbac 2302 	umull	r2, r3, ip, r2
   81418:	ebc9 0707 	rsb	r7, r9, r7
   8141c:	429f      	cmp	r7, r3
   8141e:	f04f 0500 	mov.w	r5, #0
   81422:	d34a      	bcc.n	814ba <__udivdi3+0x25e>
   81424:	d046      	beq.n	814b4 <__udivdi3+0x258>
   81426:	4662      	mov	r2, ip
   81428:	462b      	mov	r3, r5
   8142a:	e75d      	b.n	812e8 <__udivdi3+0x8c>
   8142c:	4094      	lsls	r4, r2
   8142e:	f1c2 0920 	rsb	r9, r2, #32
   81432:	fa21 fc09 	lsr.w	ip, r1, r9
   81436:	4091      	lsls	r1, r2
   81438:	fa20 f909 	lsr.w	r9, r0, r9
   8143c:	0c26      	lsrs	r6, r4, #16
   8143e:	fbbc f8f6 	udiv	r8, ip, r6
   81442:	fb06 cc18 	mls	ip, r6, r8, ip
   81446:	b2a7      	uxth	r7, r4
   81448:	fb07 f308 	mul.w	r3, r7, r8
   8144c:	ea49 0901 	orr.w	r9, r9, r1
   81450:	ea4f 4119 	mov.w	r1, r9, lsr #16
   81454:	ea41 4c0c 	orr.w	ip, r1, ip, lsl #16
   81458:	4563      	cmp	r3, ip
   8145a:	fa00 f502 	lsl.w	r5, r0, r2
   8145e:	d909      	bls.n	81474 <__udivdi3+0x218>
   81460:	eb1c 0c04 	adds.w	ip, ip, r4
   81464:	f108 32ff 	add.w	r2, r8, #4294967295
   81468:	d23b      	bcs.n	814e2 <__udivdi3+0x286>
   8146a:	4563      	cmp	r3, ip
   8146c:	d939      	bls.n	814e2 <__udivdi3+0x286>
   8146e:	f1a8 0802 	sub.w	r8, r8, #2
   81472:	44a4      	add	ip, r4
   81474:	ebc3 0c0c 	rsb	ip, r3, ip
   81478:	fbbc f3f6 	udiv	r3, ip, r6
   8147c:	fb06 c113 	mls	r1, r6, r3, ip
   81480:	fb07 f203 	mul.w	r2, r7, r3
   81484:	fa1f f989 	uxth.w	r9, r9
   81488:	ea49 4101 	orr.w	r1, r9, r1, lsl #16
   8148c:	428a      	cmp	r2, r1
   8148e:	d907      	bls.n	814a0 <__udivdi3+0x244>
   81490:	1909      	adds	r1, r1, r4
   81492:	f103 30ff 	add.w	r0, r3, #4294967295
   81496:	d222      	bcs.n	814de <__udivdi3+0x282>
   81498:	428a      	cmp	r2, r1
   8149a:	d920      	bls.n	814de <__udivdi3+0x282>
   8149c:	3b02      	subs	r3, #2
   8149e:	4421      	add	r1, r4
   814a0:	1a89      	subs	r1, r1, r2
   814a2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   814a6:	e743      	b.n	81330 <__udivdi3+0xd4>
   814a8:	463a      	mov	r2, r7
   814aa:	e705      	b.n	812b8 <__udivdi3+0x5c>
   814ac:	4633      	mov	r3, r6
   814ae:	e718      	b.n	812e2 <__udivdi3+0x86>
   814b0:	460a      	mov	r2, r1
   814b2:	e766      	b.n	81382 <__udivdi3+0x126>
   814b4:	40b0      	lsls	r0, r6
   814b6:	4290      	cmp	r0, r2
   814b8:	d2b5      	bcs.n	81426 <__udivdi3+0x1ca>
   814ba:	f10c 32ff 	add.w	r2, ip, #4294967295
   814be:	2300      	movs	r3, #0
   814c0:	e712      	b.n	812e8 <__udivdi3+0x8c>
   814c2:	4633      	mov	r3, r6
   814c4:	4632      	mov	r2, r6
   814c6:	e70f      	b.n	812e8 <__udivdi3+0x8c>
   814c8:	459a      	cmp	sl, r3
   814ca:	d98d      	bls.n	813e8 <__udivdi3+0x18c>
   814cc:	f1ac 0c02 	sub.w	ip, ip, #2
   814d0:	4423      	add	r3, r4
   814d2:	e78a      	b.n	813ea <__udivdi3+0x18e>
   814d4:	45b9      	cmp	r9, r7
   814d6:	d99a      	bls.n	8140e <__udivdi3+0x1b2>
   814d8:	3d02      	subs	r5, #2
   814da:	4427      	add	r7, r4
   814dc:	e798      	b.n	81410 <__udivdi3+0x1b4>
   814de:	4603      	mov	r3, r0
   814e0:	e7de      	b.n	814a0 <__udivdi3+0x244>
   814e2:	4690      	mov	r8, r2
   814e4:	e7c6      	b.n	81474 <__udivdi3+0x218>
   814e6:	3802      	subs	r0, #2
   814e8:	4421      	add	r1, r4
   814ea:	e735      	b.n	81358 <__udivdi3+0xfc>

000814ec <__libc_init_array>:
   814ec:	b570      	push	{r4, r5, r6, lr}
   814ee:	4e0f      	ldr	r6, [pc, #60]	; (8152c <__libc_init_array+0x40>)
   814f0:	4d0f      	ldr	r5, [pc, #60]	; (81530 <__libc_init_array+0x44>)
   814f2:	1b76      	subs	r6, r6, r5
   814f4:	10b6      	asrs	r6, r6, #2
   814f6:	d007      	beq.n	81508 <__libc_init_array+0x1c>
   814f8:	3d04      	subs	r5, #4
   814fa:	2400      	movs	r4, #0
   814fc:	3401      	adds	r4, #1
   814fe:	f855 3f04 	ldr.w	r3, [r5, #4]!
   81502:	4798      	blx	r3
   81504:	42a6      	cmp	r6, r4
   81506:	d1f9      	bne.n	814fc <__libc_init_array+0x10>
   81508:	4e0a      	ldr	r6, [pc, #40]	; (81534 <__libc_init_array+0x48>)
   8150a:	4d0b      	ldr	r5, [pc, #44]	; (81538 <__libc_init_array+0x4c>)
   8150c:	f002 fd20 	bl	83f50 <_init>
   81510:	1b76      	subs	r6, r6, r5
   81512:	10b6      	asrs	r6, r6, #2
   81514:	d008      	beq.n	81528 <__libc_init_array+0x3c>
   81516:	3d04      	subs	r5, #4
   81518:	2400      	movs	r4, #0
   8151a:	3401      	adds	r4, #1
   8151c:	f855 3f04 	ldr.w	r3, [r5, #4]!
   81520:	4798      	blx	r3
   81522:	42a6      	cmp	r6, r4
   81524:	d1f9      	bne.n	8151a <__libc_init_array+0x2e>
   81526:	bd70      	pop	{r4, r5, r6, pc}
   81528:	bd70      	pop	{r4, r5, r6, pc}
   8152a:	bf00      	nop
   8152c:	00083f5c 	.word	0x00083f5c
   81530:	00083f5c 	.word	0x00083f5c
   81534:	00083f64 	.word	0x00083f64
   81538:	00083f5c 	.word	0x00083f5c

0008153c <iprintf>:
   8153c:	b40f      	push	{r0, r1, r2, r3}
   8153e:	b510      	push	{r4, lr}
   81540:	4b07      	ldr	r3, [pc, #28]	; (81560 <iprintf+0x24>)
   81542:	b082      	sub	sp, #8
   81544:	ac04      	add	r4, sp, #16
   81546:	f854 2b04 	ldr.w	r2, [r4], #4
   8154a:	6818      	ldr	r0, [r3, #0]
   8154c:	4623      	mov	r3, r4
   8154e:	6881      	ldr	r1, [r0, #8]
   81550:	9401      	str	r4, [sp, #4]
   81552:	f000 f915 	bl	81780 <_vfiprintf_r>
   81556:	b002      	add	sp, #8
   81558:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8155c:	b004      	add	sp, #16
   8155e:	4770      	bx	lr
   81560:	20070570 	.word	0x20070570

00081564 <memset>:
   81564:	b4f0      	push	{r4, r5, r6, r7}
   81566:	0784      	lsls	r4, r0, #30
   81568:	d043      	beq.n	815f2 <memset+0x8e>
   8156a:	1e54      	subs	r4, r2, #1
   8156c:	2a00      	cmp	r2, #0
   8156e:	d03e      	beq.n	815ee <memset+0x8a>
   81570:	b2cd      	uxtb	r5, r1
   81572:	4603      	mov	r3, r0
   81574:	e003      	b.n	8157e <memset+0x1a>
   81576:	1e62      	subs	r2, r4, #1
   81578:	2c00      	cmp	r4, #0
   8157a:	d038      	beq.n	815ee <memset+0x8a>
   8157c:	4614      	mov	r4, r2
   8157e:	f803 5b01 	strb.w	r5, [r3], #1
   81582:	079a      	lsls	r2, r3, #30
   81584:	d1f7      	bne.n	81576 <memset+0x12>
   81586:	2c03      	cmp	r4, #3
   81588:	d92a      	bls.n	815e0 <memset+0x7c>
   8158a:	b2cd      	uxtb	r5, r1
   8158c:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   81590:	2c0f      	cmp	r4, #15
   81592:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   81596:	d915      	bls.n	815c4 <memset+0x60>
   81598:	f1a4 0710 	sub.w	r7, r4, #16
   8159c:	093f      	lsrs	r7, r7, #4
   8159e:	f103 0610 	add.w	r6, r3, #16
   815a2:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   815a6:	461a      	mov	r2, r3
   815a8:	6015      	str	r5, [r2, #0]
   815aa:	6055      	str	r5, [r2, #4]
   815ac:	6095      	str	r5, [r2, #8]
   815ae:	60d5      	str	r5, [r2, #12]
   815b0:	3210      	adds	r2, #16
   815b2:	42b2      	cmp	r2, r6
   815b4:	d1f8      	bne.n	815a8 <memset+0x44>
   815b6:	f004 040f 	and.w	r4, r4, #15
   815ba:	3701      	adds	r7, #1
   815bc:	2c03      	cmp	r4, #3
   815be:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   815c2:	d90d      	bls.n	815e0 <memset+0x7c>
   815c4:	461e      	mov	r6, r3
   815c6:	4622      	mov	r2, r4
   815c8:	3a04      	subs	r2, #4
   815ca:	2a03      	cmp	r2, #3
   815cc:	f846 5b04 	str.w	r5, [r6], #4
   815d0:	d8fa      	bhi.n	815c8 <memset+0x64>
   815d2:	1f22      	subs	r2, r4, #4
   815d4:	f022 0203 	bic.w	r2, r2, #3
   815d8:	3204      	adds	r2, #4
   815da:	4413      	add	r3, r2
   815dc:	f004 0403 	and.w	r4, r4, #3
   815e0:	b12c      	cbz	r4, 815ee <memset+0x8a>
   815e2:	b2c9      	uxtb	r1, r1
   815e4:	441c      	add	r4, r3
   815e6:	f803 1b01 	strb.w	r1, [r3], #1
   815ea:	42a3      	cmp	r3, r4
   815ec:	d1fb      	bne.n	815e6 <memset+0x82>
   815ee:	bcf0      	pop	{r4, r5, r6, r7}
   815f0:	4770      	bx	lr
   815f2:	4614      	mov	r4, r2
   815f4:	4603      	mov	r3, r0
   815f6:	e7c6      	b.n	81586 <memset+0x22>

000815f8 <setbuf>:
   815f8:	2900      	cmp	r1, #0
   815fa:	bf0c      	ite	eq
   815fc:	2202      	moveq	r2, #2
   815fe:	2200      	movne	r2, #0
   81600:	f44f 6380 	mov.w	r3, #1024	; 0x400
   81604:	f000 b800 	b.w	81608 <setvbuf>

00081608 <setvbuf>:
   81608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8160c:	4d3c      	ldr	r5, [pc, #240]	; (81700 <setvbuf+0xf8>)
   8160e:	4604      	mov	r4, r0
   81610:	682d      	ldr	r5, [r5, #0]
   81612:	4688      	mov	r8, r1
   81614:	4616      	mov	r6, r2
   81616:	461f      	mov	r7, r3
   81618:	b115      	cbz	r5, 81620 <setvbuf+0x18>
   8161a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   8161c:	2b00      	cmp	r3, #0
   8161e:	d04f      	beq.n	816c0 <setvbuf+0xb8>
   81620:	2e02      	cmp	r6, #2
   81622:	d830      	bhi.n	81686 <setvbuf+0x7e>
   81624:	2f00      	cmp	r7, #0
   81626:	db2e      	blt.n	81686 <setvbuf+0x7e>
   81628:	4628      	mov	r0, r5
   8162a:	4621      	mov	r1, r4
   8162c:	f001 f826 	bl	8267c <_fflush_r>
   81630:	89a3      	ldrh	r3, [r4, #12]
   81632:	2200      	movs	r2, #0
   81634:	6062      	str	r2, [r4, #4]
   81636:	61a2      	str	r2, [r4, #24]
   81638:	061a      	lsls	r2, r3, #24
   8163a:	d428      	bmi.n	8168e <setvbuf+0x86>
   8163c:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   81640:	b29b      	uxth	r3, r3
   81642:	2e02      	cmp	r6, #2
   81644:	81a3      	strh	r3, [r4, #12]
   81646:	d02d      	beq.n	816a4 <setvbuf+0x9c>
   81648:	f1b8 0f00 	cmp.w	r8, #0
   8164c:	d03c      	beq.n	816c8 <setvbuf+0xc0>
   8164e:	2e01      	cmp	r6, #1
   81650:	d013      	beq.n	8167a <setvbuf+0x72>
   81652:	b29b      	uxth	r3, r3
   81654:	f003 0008 	and.w	r0, r3, #8
   81658:	4a2a      	ldr	r2, [pc, #168]	; (81704 <setvbuf+0xfc>)
   8165a:	b280      	uxth	r0, r0
   8165c:	63ea      	str	r2, [r5, #60]	; 0x3c
   8165e:	f8c4 8000 	str.w	r8, [r4]
   81662:	f8c4 8010 	str.w	r8, [r4, #16]
   81666:	6167      	str	r7, [r4, #20]
   81668:	b178      	cbz	r0, 8168a <setvbuf+0x82>
   8166a:	f013 0f03 	tst.w	r3, #3
   8166e:	bf18      	it	ne
   81670:	2700      	movne	r7, #0
   81672:	60a7      	str	r7, [r4, #8]
   81674:	2000      	movs	r0, #0
   81676:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8167a:	f043 0301 	orr.w	r3, r3, #1
   8167e:	427a      	negs	r2, r7
   81680:	81a3      	strh	r3, [r4, #12]
   81682:	61a2      	str	r2, [r4, #24]
   81684:	e7e5      	b.n	81652 <setvbuf+0x4a>
   81686:	f04f 30ff 	mov.w	r0, #4294967295
   8168a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8168e:	4628      	mov	r0, r5
   81690:	6921      	ldr	r1, [r4, #16]
   81692:	f001 f953 	bl	8293c <_free_r>
   81696:	89a3      	ldrh	r3, [r4, #12]
   81698:	2e02      	cmp	r6, #2
   8169a:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   8169e:	b29b      	uxth	r3, r3
   816a0:	81a3      	strh	r3, [r4, #12]
   816a2:	d1d1      	bne.n	81648 <setvbuf+0x40>
   816a4:	2000      	movs	r0, #0
   816a6:	f104 0243 	add.w	r2, r4, #67	; 0x43
   816aa:	f043 0302 	orr.w	r3, r3, #2
   816ae:	2500      	movs	r5, #0
   816b0:	2101      	movs	r1, #1
   816b2:	81a3      	strh	r3, [r4, #12]
   816b4:	60a5      	str	r5, [r4, #8]
   816b6:	6022      	str	r2, [r4, #0]
   816b8:	6122      	str	r2, [r4, #16]
   816ba:	6161      	str	r1, [r4, #20]
   816bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   816c0:	4628      	mov	r0, r5
   816c2:	f000 fff7 	bl	826b4 <__sinit>
   816c6:	e7ab      	b.n	81620 <setvbuf+0x18>
   816c8:	2f00      	cmp	r7, #0
   816ca:	bf08      	it	eq
   816cc:	f44f 6780 	moveq.w	r7, #1024	; 0x400
   816d0:	4638      	mov	r0, r7
   816d2:	f001 fc29 	bl	82f28 <malloc>
   816d6:	4680      	mov	r8, r0
   816d8:	b128      	cbz	r0, 816e6 <setvbuf+0xde>
   816da:	89a3      	ldrh	r3, [r4, #12]
   816dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   816e0:	b29b      	uxth	r3, r3
   816e2:	81a3      	strh	r3, [r4, #12]
   816e4:	e7b3      	b.n	8164e <setvbuf+0x46>
   816e6:	f44f 6080 	mov.w	r0, #1024	; 0x400
   816ea:	f001 fc1d 	bl	82f28 <malloc>
   816ee:	4680      	mov	r8, r0
   816f0:	b918      	cbnz	r0, 816fa <setvbuf+0xf2>
   816f2:	89a3      	ldrh	r3, [r4, #12]
   816f4:	f04f 30ff 	mov.w	r0, #4294967295
   816f8:	e7d5      	b.n	816a6 <setvbuf+0x9e>
   816fa:	f44f 6780 	mov.w	r7, #1024	; 0x400
   816fe:	e7ec      	b.n	816da <setvbuf+0xd2>
   81700:	20070570 	.word	0x20070570
   81704:	000826a9 	.word	0x000826a9

00081708 <__sprint_r.part.0>:
   81708:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   8170a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8170e:	049c      	lsls	r4, r3, #18
   81710:	460e      	mov	r6, r1
   81712:	4680      	mov	r8, r0
   81714:	4691      	mov	r9, r2
   81716:	d52a      	bpl.n	8176e <__sprint_r.part.0+0x66>
   81718:	6893      	ldr	r3, [r2, #8]
   8171a:	6812      	ldr	r2, [r2, #0]
   8171c:	f102 0a08 	add.w	sl, r2, #8
   81720:	b31b      	cbz	r3, 8176a <__sprint_r.part.0+0x62>
   81722:	e91a 00a0 	ldmdb	sl, {r5, r7}
   81726:	08bf      	lsrs	r7, r7, #2
   81728:	d017      	beq.n	8175a <__sprint_r.part.0+0x52>
   8172a:	3d04      	subs	r5, #4
   8172c:	2400      	movs	r4, #0
   8172e:	e001      	b.n	81734 <__sprint_r.part.0+0x2c>
   81730:	42a7      	cmp	r7, r4
   81732:	d010      	beq.n	81756 <__sprint_r.part.0+0x4e>
   81734:	4640      	mov	r0, r8
   81736:	f855 1f04 	ldr.w	r1, [r5, #4]!
   8173a:	4632      	mov	r2, r6
   8173c:	f001 f850 	bl	827e0 <_fputwc_r>
   81740:	1c43      	adds	r3, r0, #1
   81742:	f104 0401 	add.w	r4, r4, #1
   81746:	d1f3      	bne.n	81730 <__sprint_r.part.0+0x28>
   81748:	2300      	movs	r3, #0
   8174a:	f8c9 3008 	str.w	r3, [r9, #8]
   8174e:	f8c9 3004 	str.w	r3, [r9, #4]
   81752:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   81756:	f8d9 3008 	ldr.w	r3, [r9, #8]
   8175a:	eba3 0387 	sub.w	r3, r3, r7, lsl #2
   8175e:	f8c9 3008 	str.w	r3, [r9, #8]
   81762:	f10a 0a08 	add.w	sl, sl, #8
   81766:	2b00      	cmp	r3, #0
   81768:	d1db      	bne.n	81722 <__sprint_r.part.0+0x1a>
   8176a:	2000      	movs	r0, #0
   8176c:	e7ec      	b.n	81748 <__sprint_r.part.0+0x40>
   8176e:	f001 f9b1 	bl	82ad4 <__sfvwrite_r>
   81772:	2300      	movs	r3, #0
   81774:	f8c9 3008 	str.w	r3, [r9, #8]
   81778:	f8c9 3004 	str.w	r3, [r9, #4]
   8177c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00081780 <_vfiprintf_r>:
   81780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81784:	b0b1      	sub	sp, #196	; 0xc4
   81786:	461c      	mov	r4, r3
   81788:	9102      	str	r1, [sp, #8]
   8178a:	4690      	mov	r8, r2
   8178c:	9308      	str	r3, [sp, #32]
   8178e:	9006      	str	r0, [sp, #24]
   81790:	b118      	cbz	r0, 8179a <_vfiprintf_r+0x1a>
   81792:	6b83      	ldr	r3, [r0, #56]	; 0x38
   81794:	2b00      	cmp	r3, #0
   81796:	f000 80e8 	beq.w	8196a <_vfiprintf_r+0x1ea>
   8179a:	9d02      	ldr	r5, [sp, #8]
   8179c:	89ab      	ldrh	r3, [r5, #12]
   8179e:	b29a      	uxth	r2, r3
   817a0:	0490      	lsls	r0, r2, #18
   817a2:	d407      	bmi.n	817b4 <_vfiprintf_r+0x34>
   817a4:	6e6a      	ldr	r2, [r5, #100]	; 0x64
   817a6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   817aa:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
   817ae:	81ab      	strh	r3, [r5, #12]
   817b0:	b29a      	uxth	r2, r3
   817b2:	6669      	str	r1, [r5, #100]	; 0x64
   817b4:	0711      	lsls	r1, r2, #28
   817b6:	f140 80b7 	bpl.w	81928 <_vfiprintf_r+0x1a8>
   817ba:	f8dd b008 	ldr.w	fp, [sp, #8]
   817be:	f8db 3010 	ldr.w	r3, [fp, #16]
   817c2:	2b00      	cmp	r3, #0
   817c4:	f000 80b0 	beq.w	81928 <_vfiprintf_r+0x1a8>
   817c8:	f002 021a 	and.w	r2, r2, #26
   817cc:	2a0a      	cmp	r2, #10
   817ce:	f000 80b7 	beq.w	81940 <_vfiprintf_r+0x1c0>
   817d2:	2300      	movs	r3, #0
   817d4:	f10d 0980 	add.w	r9, sp, #128	; 0x80
   817d8:	930a      	str	r3, [sp, #40]	; 0x28
   817da:	9315      	str	r3, [sp, #84]	; 0x54
   817dc:	9314      	str	r3, [sp, #80]	; 0x50
   817de:	9309      	str	r3, [sp, #36]	; 0x24
   817e0:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
   817e4:	464e      	mov	r6, r9
   817e6:	f898 3000 	ldrb.w	r3, [r8]
   817ea:	2b00      	cmp	r3, #0
   817ec:	f000 84c8 	beq.w	82180 <_vfiprintf_r+0xa00>
   817f0:	2b25      	cmp	r3, #37	; 0x25
   817f2:	f000 84c5 	beq.w	82180 <_vfiprintf_r+0xa00>
   817f6:	f108 0201 	add.w	r2, r8, #1
   817fa:	e001      	b.n	81800 <_vfiprintf_r+0x80>
   817fc:	2b25      	cmp	r3, #37	; 0x25
   817fe:	d004      	beq.n	8180a <_vfiprintf_r+0x8a>
   81800:	7813      	ldrb	r3, [r2, #0]
   81802:	4614      	mov	r4, r2
   81804:	3201      	adds	r2, #1
   81806:	2b00      	cmp	r3, #0
   81808:	d1f8      	bne.n	817fc <_vfiprintf_r+0x7c>
   8180a:	ebc8 0504 	rsb	r5, r8, r4
   8180e:	b195      	cbz	r5, 81836 <_vfiprintf_r+0xb6>
   81810:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81812:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81814:	3301      	adds	r3, #1
   81816:	442a      	add	r2, r5
   81818:	2b07      	cmp	r3, #7
   8181a:	f8c6 8000 	str.w	r8, [r6]
   8181e:	6075      	str	r5, [r6, #4]
   81820:	9215      	str	r2, [sp, #84]	; 0x54
   81822:	9314      	str	r3, [sp, #80]	; 0x50
   81824:	dd7b      	ble.n	8191e <_vfiprintf_r+0x19e>
   81826:	2a00      	cmp	r2, #0
   81828:	f040 84d5 	bne.w	821d6 <_vfiprintf_r+0xa56>
   8182c:	9809      	ldr	r0, [sp, #36]	; 0x24
   8182e:	9214      	str	r2, [sp, #80]	; 0x50
   81830:	4428      	add	r0, r5
   81832:	464e      	mov	r6, r9
   81834:	9009      	str	r0, [sp, #36]	; 0x24
   81836:	7823      	ldrb	r3, [r4, #0]
   81838:	2b00      	cmp	r3, #0
   8183a:	f000 83ed 	beq.w	82018 <_vfiprintf_r+0x898>
   8183e:	2100      	movs	r1, #0
   81840:	f04f 0200 	mov.w	r2, #0
   81844:	f04f 3cff 	mov.w	ip, #4294967295
   81848:	7863      	ldrb	r3, [r4, #1]
   8184a:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
   8184e:	9104      	str	r1, [sp, #16]
   81850:	468a      	mov	sl, r1
   81852:	f104 0801 	add.w	r8, r4, #1
   81856:	4608      	mov	r0, r1
   81858:	4665      	mov	r5, ip
   8185a:	f108 0801 	add.w	r8, r8, #1
   8185e:	f1a3 0220 	sub.w	r2, r3, #32
   81862:	2a58      	cmp	r2, #88	; 0x58
   81864:	f200 82d9 	bhi.w	81e1a <_vfiprintf_r+0x69a>
   81868:	e8df f012 	tbh	[pc, r2, lsl #1]
   8186c:	02d702cb 	.word	0x02d702cb
   81870:	02d202d7 	.word	0x02d202d7
   81874:	02d702d7 	.word	0x02d702d7
   81878:	02d702d7 	.word	0x02d702d7
   8187c:	02d702d7 	.word	0x02d702d7
   81880:	028f0282 	.word	0x028f0282
   81884:	008402d7 	.word	0x008402d7
   81888:	02d70293 	.word	0x02d70293
   8188c:	0196012b 	.word	0x0196012b
   81890:	01960196 	.word	0x01960196
   81894:	01960196 	.word	0x01960196
   81898:	01960196 	.word	0x01960196
   8189c:	01960196 	.word	0x01960196
   818a0:	02d702d7 	.word	0x02d702d7
   818a4:	02d702d7 	.word	0x02d702d7
   818a8:	02d702d7 	.word	0x02d702d7
   818ac:	02d702d7 	.word	0x02d702d7
   818b0:	02d702d7 	.word	0x02d702d7
   818b4:	02d70130 	.word	0x02d70130
   818b8:	02d702d7 	.word	0x02d702d7
   818bc:	02d702d7 	.word	0x02d702d7
   818c0:	02d702d7 	.word	0x02d702d7
   818c4:	02d702d7 	.word	0x02d702d7
   818c8:	017b02d7 	.word	0x017b02d7
   818cc:	02d702d7 	.word	0x02d702d7
   818d0:	02d702d7 	.word	0x02d702d7
   818d4:	01a402d7 	.word	0x01a402d7
   818d8:	02d702d7 	.word	0x02d702d7
   818dc:	02d701bf 	.word	0x02d701bf
   818e0:	02d702d7 	.word	0x02d702d7
   818e4:	02d702d7 	.word	0x02d702d7
   818e8:	02d702d7 	.word	0x02d702d7
   818ec:	02d702d7 	.word	0x02d702d7
   818f0:	01e402d7 	.word	0x01e402d7
   818f4:	02d701fa 	.word	0x02d701fa
   818f8:	02d702d7 	.word	0x02d702d7
   818fc:	01fa0216 	.word	0x01fa0216
   81900:	02d702d7 	.word	0x02d702d7
   81904:	02d7021b 	.word	0x02d7021b
   81908:	00890228 	.word	0x00890228
   8190c:	027d0266 	.word	0x027d0266
   81910:	023a02d7 	.word	0x023a02d7
   81914:	011902d7 	.word	0x011902d7
   81918:	02d702d7 	.word	0x02d702d7
   8191c:	02af      	.short	0x02af
   8191e:	3608      	adds	r6, #8
   81920:	9809      	ldr	r0, [sp, #36]	; 0x24
   81922:	4428      	add	r0, r5
   81924:	9009      	str	r0, [sp, #36]	; 0x24
   81926:	e786      	b.n	81836 <_vfiprintf_r+0xb6>
   81928:	9806      	ldr	r0, [sp, #24]
   8192a:	9902      	ldr	r1, [sp, #8]
   8192c:	f000 fd90 	bl	82450 <__swsetup_r>
   81930:	b9b0      	cbnz	r0, 81960 <_vfiprintf_r+0x1e0>
   81932:	9d02      	ldr	r5, [sp, #8]
   81934:	89aa      	ldrh	r2, [r5, #12]
   81936:	f002 021a 	and.w	r2, r2, #26
   8193a:	2a0a      	cmp	r2, #10
   8193c:	f47f af49 	bne.w	817d2 <_vfiprintf_r+0x52>
   81940:	f8dd b008 	ldr.w	fp, [sp, #8]
   81944:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
   81948:	2b00      	cmp	r3, #0
   8194a:	f6ff af42 	blt.w	817d2 <_vfiprintf_r+0x52>
   8194e:	9806      	ldr	r0, [sp, #24]
   81950:	4659      	mov	r1, fp
   81952:	4642      	mov	r2, r8
   81954:	4623      	mov	r3, r4
   81956:	f000 fd3d 	bl	823d4 <__sbprintf>
   8195a:	b031      	add	sp, #196	; 0xc4
   8195c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81960:	f04f 30ff 	mov.w	r0, #4294967295
   81964:	b031      	add	sp, #196	; 0xc4
   81966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8196a:	f000 fea3 	bl	826b4 <__sinit>
   8196e:	e714      	b.n	8179a <_vfiprintf_r+0x1a>
   81970:	4240      	negs	r0, r0
   81972:	9308      	str	r3, [sp, #32]
   81974:	f04a 0a04 	orr.w	sl, sl, #4
   81978:	f898 3000 	ldrb.w	r3, [r8]
   8197c:	e76d      	b.n	8185a <_vfiprintf_r+0xda>
   8197e:	f01a 0320 	ands.w	r3, sl, #32
   81982:	9004      	str	r0, [sp, #16]
   81984:	46ac      	mov	ip, r5
   81986:	f000 80f4 	beq.w	81b72 <_vfiprintf_r+0x3f2>
   8198a:	f8dd b020 	ldr.w	fp, [sp, #32]
   8198e:	f10b 0307 	add.w	r3, fp, #7
   81992:	f023 0307 	bic.w	r3, r3, #7
   81996:	f103 0408 	add.w	r4, r3, #8
   8199a:	9408      	str	r4, [sp, #32]
   8199c:	e9d3 4500 	ldrd	r4, r5, [r3]
   819a0:	2300      	movs	r3, #0
   819a2:	f04f 0000 	mov.w	r0, #0
   819a6:	2100      	movs	r1, #0
   819a8:	f88d 0047 	strb.w	r0, [sp, #71]	; 0x47
   819ac:	f8cd c014 	str.w	ip, [sp, #20]
   819b0:	9107      	str	r1, [sp, #28]
   819b2:	f1bc 0f00 	cmp.w	ip, #0
   819b6:	bfa8      	it	ge
   819b8:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
   819bc:	ea54 0205 	orrs.w	r2, r4, r5
   819c0:	f040 80ad 	bne.w	81b1e <_vfiprintf_r+0x39e>
   819c4:	f1bc 0f00 	cmp.w	ip, #0
   819c8:	f040 80a9 	bne.w	81b1e <_vfiprintf_r+0x39e>
   819cc:	2b00      	cmp	r3, #0
   819ce:	f040 83c0 	bne.w	82152 <_vfiprintf_r+0x9d2>
   819d2:	f01a 0f01 	tst.w	sl, #1
   819d6:	f000 83bc 	beq.w	82152 <_vfiprintf_r+0x9d2>
   819da:	2330      	movs	r3, #48	; 0x30
   819dc:	af30      	add	r7, sp, #192	; 0xc0
   819de:	f807 3d41 	strb.w	r3, [r7, #-65]!
   819e2:	ebc7 0409 	rsb	r4, r7, r9
   819e6:	9405      	str	r4, [sp, #20]
   819e8:	f8dd b014 	ldr.w	fp, [sp, #20]
   819ec:	9c07      	ldr	r4, [sp, #28]
   819ee:	45e3      	cmp	fp, ip
   819f0:	bfb8      	it	lt
   819f2:	46e3      	movlt	fp, ip
   819f4:	f8cd b00c 	str.w	fp, [sp, #12]
   819f8:	b11c      	cbz	r4, 81a02 <_vfiprintf_r+0x282>
   819fa:	f10b 0b01 	add.w	fp, fp, #1
   819fe:	f8cd b00c 	str.w	fp, [sp, #12]
   81a02:	f01a 0502 	ands.w	r5, sl, #2
   81a06:	9507      	str	r5, [sp, #28]
   81a08:	d005      	beq.n	81a16 <_vfiprintf_r+0x296>
   81a0a:	f8dd b00c 	ldr.w	fp, [sp, #12]
   81a0e:	f10b 0b02 	add.w	fp, fp, #2
   81a12:	f8cd b00c 	str.w	fp, [sp, #12]
   81a16:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
   81a1a:	930b      	str	r3, [sp, #44]	; 0x2c
   81a1c:	f040 821b 	bne.w	81e56 <_vfiprintf_r+0x6d6>
   81a20:	9d04      	ldr	r5, [sp, #16]
   81a22:	f8dd b00c 	ldr.w	fp, [sp, #12]
   81a26:	ebcb 0405 	rsb	r4, fp, r5
   81a2a:	2c00      	cmp	r4, #0
   81a2c:	f340 8213 	ble.w	81e56 <_vfiprintf_r+0x6d6>
   81a30:	2c10      	cmp	r4, #16
   81a32:	f340 8489 	ble.w	82348 <_vfiprintf_r+0xbc8>
   81a36:	4dbe      	ldr	r5, [pc, #760]	; (81d30 <_vfiprintf_r+0x5b0>)
   81a38:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81a3a:	462b      	mov	r3, r5
   81a3c:	9814      	ldr	r0, [sp, #80]	; 0x50
   81a3e:	4625      	mov	r5, r4
   81a40:	f04f 0b10 	mov.w	fp, #16
   81a44:	4664      	mov	r4, ip
   81a46:	46b4      	mov	ip, r6
   81a48:	461e      	mov	r6, r3
   81a4a:	e006      	b.n	81a5a <_vfiprintf_r+0x2da>
   81a4c:	1c83      	adds	r3, r0, #2
   81a4e:	f10c 0c08 	add.w	ip, ip, #8
   81a52:	4608      	mov	r0, r1
   81a54:	3d10      	subs	r5, #16
   81a56:	2d10      	cmp	r5, #16
   81a58:	dd11      	ble.n	81a7e <_vfiprintf_r+0x2fe>
   81a5a:	1c41      	adds	r1, r0, #1
   81a5c:	3210      	adds	r2, #16
   81a5e:	2907      	cmp	r1, #7
   81a60:	9215      	str	r2, [sp, #84]	; 0x54
   81a62:	e88c 0840 	stmia.w	ip, {r6, fp}
   81a66:	9114      	str	r1, [sp, #80]	; 0x50
   81a68:	ddf0      	ble.n	81a4c <_vfiprintf_r+0x2cc>
   81a6a:	2a00      	cmp	r2, #0
   81a6c:	f040 81e6 	bne.w	81e3c <_vfiprintf_r+0x6bc>
   81a70:	3d10      	subs	r5, #16
   81a72:	2d10      	cmp	r5, #16
   81a74:	f04f 0301 	mov.w	r3, #1
   81a78:	4610      	mov	r0, r2
   81a7a:	46cc      	mov	ip, r9
   81a7c:	dced      	bgt.n	81a5a <_vfiprintf_r+0x2da>
   81a7e:	4631      	mov	r1, r6
   81a80:	4666      	mov	r6, ip
   81a82:	46a4      	mov	ip, r4
   81a84:	462c      	mov	r4, r5
   81a86:	460d      	mov	r5, r1
   81a88:	4422      	add	r2, r4
   81a8a:	2b07      	cmp	r3, #7
   81a8c:	9215      	str	r2, [sp, #84]	; 0x54
   81a8e:	6035      	str	r5, [r6, #0]
   81a90:	6074      	str	r4, [r6, #4]
   81a92:	9314      	str	r3, [sp, #80]	; 0x50
   81a94:	f300 836d 	bgt.w	82172 <_vfiprintf_r+0x9f2>
   81a98:	3608      	adds	r6, #8
   81a9a:	1c59      	adds	r1, r3, #1
   81a9c:	e1de      	b.n	81e5c <_vfiprintf_r+0x6dc>
   81a9e:	f01a 0f20 	tst.w	sl, #32
   81aa2:	9004      	str	r0, [sp, #16]
   81aa4:	46ac      	mov	ip, r5
   81aa6:	f000 808d 	beq.w	81bc4 <_vfiprintf_r+0x444>
   81aaa:	9d08      	ldr	r5, [sp, #32]
   81aac:	1deb      	adds	r3, r5, #7
   81aae:	f023 0307 	bic.w	r3, r3, #7
   81ab2:	f103 0b08 	add.w	fp, r3, #8
   81ab6:	e9d3 4500 	ldrd	r4, r5, [r3]
   81aba:	f8cd b020 	str.w	fp, [sp, #32]
   81abe:	2301      	movs	r3, #1
   81ac0:	e76f      	b.n	819a2 <_vfiprintf_r+0x222>
   81ac2:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
   81ac6:	f898 3000 	ldrb.w	r3, [r8]
   81aca:	e6c6      	b.n	8185a <_vfiprintf_r+0xda>
   81acc:	f04a 0a10 	orr.w	sl, sl, #16
   81ad0:	f01a 0f20 	tst.w	sl, #32
   81ad4:	9004      	str	r0, [sp, #16]
   81ad6:	46ac      	mov	ip, r5
   81ad8:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   81adc:	f000 80c8 	beq.w	81c70 <_vfiprintf_r+0x4f0>
   81ae0:	9c08      	ldr	r4, [sp, #32]
   81ae2:	1de1      	adds	r1, r4, #7
   81ae4:	f021 0107 	bic.w	r1, r1, #7
   81ae8:	e9d1 2300 	ldrd	r2, r3, [r1]
   81aec:	3108      	adds	r1, #8
   81aee:	9108      	str	r1, [sp, #32]
   81af0:	4614      	mov	r4, r2
   81af2:	461d      	mov	r5, r3
   81af4:	2a00      	cmp	r2, #0
   81af6:	f173 0b00 	sbcs.w	fp, r3, #0
   81afa:	f2c0 83ce 	blt.w	8229a <_vfiprintf_r+0xb1a>
   81afe:	f1bc 0f00 	cmp.w	ip, #0
   81b02:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
   81b06:	bfa8      	it	ge
   81b08:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
   81b0c:	ea54 0205 	orrs.w	r2, r4, r5
   81b10:	9007      	str	r0, [sp, #28]
   81b12:	f8cd c014 	str.w	ip, [sp, #20]
   81b16:	f04f 0301 	mov.w	r3, #1
   81b1a:	f43f af53 	beq.w	819c4 <_vfiprintf_r+0x244>
   81b1e:	2b01      	cmp	r3, #1
   81b20:	f000 8319 	beq.w	82156 <_vfiprintf_r+0x9d6>
   81b24:	2b02      	cmp	r3, #2
   81b26:	f10d 037f 	add.w	r3, sp, #127	; 0x7f
   81b2a:	f040 824c 	bne.w	81fc6 <_vfiprintf_r+0x846>
   81b2e:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   81b32:	4619      	mov	r1, r3
   81b34:	f004 000f 	and.w	r0, r4, #15
   81b38:	0922      	lsrs	r2, r4, #4
   81b3a:	f81b 0000 	ldrb.w	r0, [fp, r0]
   81b3e:	ea42 7205 	orr.w	r2, r2, r5, lsl #28
   81b42:	092b      	lsrs	r3, r5, #4
   81b44:	7008      	strb	r0, [r1, #0]
   81b46:	ea52 0003 	orrs.w	r0, r2, r3
   81b4a:	460f      	mov	r7, r1
   81b4c:	4614      	mov	r4, r2
   81b4e:	461d      	mov	r5, r3
   81b50:	f101 31ff 	add.w	r1, r1, #4294967295
   81b54:	d1ee      	bne.n	81b34 <_vfiprintf_r+0x3b4>
   81b56:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   81b5a:	ebc7 0309 	rsb	r3, r7, r9
   81b5e:	9305      	str	r3, [sp, #20]
   81b60:	e742      	b.n	819e8 <_vfiprintf_r+0x268>
   81b62:	f04a 0a10 	orr.w	sl, sl, #16
   81b66:	f01a 0320 	ands.w	r3, sl, #32
   81b6a:	9004      	str	r0, [sp, #16]
   81b6c:	46ac      	mov	ip, r5
   81b6e:	f47f af0c 	bne.w	8198a <_vfiprintf_r+0x20a>
   81b72:	f01a 0210 	ands.w	r2, sl, #16
   81b76:	f040 8311 	bne.w	8219c <_vfiprintf_r+0xa1c>
   81b7a:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
   81b7e:	f000 830d 	beq.w	8219c <_vfiprintf_r+0xa1c>
   81b82:	f8dd b020 	ldr.w	fp, [sp, #32]
   81b86:	4613      	mov	r3, r2
   81b88:	f8bb 4000 	ldrh.w	r4, [fp]
   81b8c:	f10b 0b04 	add.w	fp, fp, #4
   81b90:	2500      	movs	r5, #0
   81b92:	f8cd b020 	str.w	fp, [sp, #32]
   81b96:	e704      	b.n	819a2 <_vfiprintf_r+0x222>
   81b98:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   81b9c:	2000      	movs	r0, #0
   81b9e:	f818 3b01 	ldrb.w	r3, [r8], #1
   81ba2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   81ba6:	eb02 0040 	add.w	r0, r2, r0, lsl #1
   81baa:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   81bae:	2a09      	cmp	r2, #9
   81bb0:	d9f5      	bls.n	81b9e <_vfiprintf_r+0x41e>
   81bb2:	e654      	b.n	8185e <_vfiprintf_r+0xde>
   81bb4:	f04a 0a10 	orr.w	sl, sl, #16
   81bb8:	f01a 0f20 	tst.w	sl, #32
   81bbc:	9004      	str	r0, [sp, #16]
   81bbe:	46ac      	mov	ip, r5
   81bc0:	f47f af73 	bne.w	81aaa <_vfiprintf_r+0x32a>
   81bc4:	f01a 0f10 	tst.w	sl, #16
   81bc8:	f040 82ef 	bne.w	821aa <_vfiprintf_r+0xa2a>
   81bcc:	f01a 0f40 	tst.w	sl, #64	; 0x40
   81bd0:	f000 82eb 	beq.w	821aa <_vfiprintf_r+0xa2a>
   81bd4:	f8dd b020 	ldr.w	fp, [sp, #32]
   81bd8:	2500      	movs	r5, #0
   81bda:	f8bb 4000 	ldrh.w	r4, [fp]
   81bde:	f10b 0b04 	add.w	fp, fp, #4
   81be2:	2301      	movs	r3, #1
   81be4:	f8cd b020 	str.w	fp, [sp, #32]
   81be8:	e6db      	b.n	819a2 <_vfiprintf_r+0x222>
   81bea:	46ac      	mov	ip, r5
   81bec:	4d51      	ldr	r5, [pc, #324]	; (81d34 <_vfiprintf_r+0x5b4>)
   81bee:	f01a 0f20 	tst.w	sl, #32
   81bf2:	9004      	str	r0, [sp, #16]
   81bf4:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   81bf8:	950a      	str	r5, [sp, #40]	; 0x28
   81bfa:	f000 80f0 	beq.w	81dde <_vfiprintf_r+0x65e>
   81bfe:	9d08      	ldr	r5, [sp, #32]
   81c00:	1dea      	adds	r2, r5, #7
   81c02:	f022 0207 	bic.w	r2, r2, #7
   81c06:	f102 0b08 	add.w	fp, r2, #8
   81c0a:	f8cd b020 	str.w	fp, [sp, #32]
   81c0e:	e9d2 4500 	ldrd	r4, r5, [r2]
   81c12:	f01a 0f01 	tst.w	sl, #1
   81c16:	f000 82aa 	beq.w	8216e <_vfiprintf_r+0x9ee>
   81c1a:	ea54 0b05 	orrs.w	fp, r4, r5
   81c1e:	f000 82a6 	beq.w	8216e <_vfiprintf_r+0x9ee>
   81c22:	2230      	movs	r2, #48	; 0x30
   81c24:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
   81c28:	f04a 0a02 	orr.w	sl, sl, #2
   81c2c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   81c30:	2302      	movs	r3, #2
   81c32:	e6b6      	b.n	819a2 <_vfiprintf_r+0x222>
   81c34:	9b08      	ldr	r3, [sp, #32]
   81c36:	f8dd b020 	ldr.w	fp, [sp, #32]
   81c3a:	681b      	ldr	r3, [r3, #0]
   81c3c:	2401      	movs	r4, #1
   81c3e:	f04f 0500 	mov.w	r5, #0
   81c42:	f10b 0b04 	add.w	fp, fp, #4
   81c46:	9004      	str	r0, [sp, #16]
   81c48:	9403      	str	r4, [sp, #12]
   81c4a:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
   81c4e:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   81c52:	f8cd b020 	str.w	fp, [sp, #32]
   81c56:	9405      	str	r4, [sp, #20]
   81c58:	af16      	add	r7, sp, #88	; 0x58
   81c5a:	f04f 0c00 	mov.w	ip, #0
   81c5e:	e6d0      	b.n	81a02 <_vfiprintf_r+0x282>
   81c60:	f01a 0f20 	tst.w	sl, #32
   81c64:	9004      	str	r0, [sp, #16]
   81c66:	46ac      	mov	ip, r5
   81c68:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   81c6c:	f47f af38 	bne.w	81ae0 <_vfiprintf_r+0x360>
   81c70:	f01a 0f10 	tst.w	sl, #16
   81c74:	f040 82a7 	bne.w	821c6 <_vfiprintf_r+0xa46>
   81c78:	f01a 0f40 	tst.w	sl, #64	; 0x40
   81c7c:	f000 82a3 	beq.w	821c6 <_vfiprintf_r+0xa46>
   81c80:	f8dd b020 	ldr.w	fp, [sp, #32]
   81c84:	f9bb 4000 	ldrsh.w	r4, [fp]
   81c88:	f10b 0b04 	add.w	fp, fp, #4
   81c8c:	17e5      	asrs	r5, r4, #31
   81c8e:	4622      	mov	r2, r4
   81c90:	462b      	mov	r3, r5
   81c92:	f8cd b020 	str.w	fp, [sp, #32]
   81c96:	e72d      	b.n	81af4 <_vfiprintf_r+0x374>
   81c98:	f04a 0a40 	orr.w	sl, sl, #64	; 0x40
   81c9c:	f898 3000 	ldrb.w	r3, [r8]
   81ca0:	e5db      	b.n	8185a <_vfiprintf_r+0xda>
   81ca2:	f898 3000 	ldrb.w	r3, [r8]
   81ca6:	4642      	mov	r2, r8
   81ca8:	2b6c      	cmp	r3, #108	; 0x6c
   81caa:	bf03      	ittte	eq
   81cac:	f108 0801 	addeq.w	r8, r8, #1
   81cb0:	f04a 0a20 	orreq.w	sl, sl, #32
   81cb4:	7853      	ldrbeq	r3, [r2, #1]
   81cb6:	f04a 0a10 	orrne.w	sl, sl, #16
   81cba:	e5ce      	b.n	8185a <_vfiprintf_r+0xda>
   81cbc:	f01a 0f20 	tst.w	sl, #32
   81cc0:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   81cc4:	f000 82f7 	beq.w	822b6 <_vfiprintf_r+0xb36>
   81cc8:	9c08      	ldr	r4, [sp, #32]
   81cca:	6821      	ldr	r1, [r4, #0]
   81ccc:	9c09      	ldr	r4, [sp, #36]	; 0x24
   81cce:	17e5      	asrs	r5, r4, #31
   81cd0:	462b      	mov	r3, r5
   81cd2:	9d08      	ldr	r5, [sp, #32]
   81cd4:	4622      	mov	r2, r4
   81cd6:	3504      	adds	r5, #4
   81cd8:	9508      	str	r5, [sp, #32]
   81cda:	e9c1 2300 	strd	r2, r3, [r1]
   81cde:	e582      	b.n	817e6 <_vfiprintf_r+0x66>
   81ce0:	9c08      	ldr	r4, [sp, #32]
   81ce2:	46ac      	mov	ip, r5
   81ce4:	6827      	ldr	r7, [r4, #0]
   81ce6:	f04f 0500 	mov.w	r5, #0
   81cea:	9004      	str	r0, [sp, #16]
   81cec:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
   81cf0:	3404      	adds	r4, #4
   81cf2:	2f00      	cmp	r7, #0
   81cf4:	f000 8332 	beq.w	8235c <_vfiprintf_r+0xbdc>
   81cf8:	f1bc 0f00 	cmp.w	ip, #0
   81cfc:	4638      	mov	r0, r7
   81cfe:	f2c0 8307 	blt.w	82310 <_vfiprintf_r+0xb90>
   81d02:	4662      	mov	r2, ip
   81d04:	2100      	movs	r1, #0
   81d06:	f8cd c004 	str.w	ip, [sp, #4]
   81d0a:	f001 fbb1 	bl	83470 <memchr>
   81d0e:	f8dd c004 	ldr.w	ip, [sp, #4]
   81d12:	2800      	cmp	r0, #0
   81d14:	f000 833a 	beq.w	8238c <_vfiprintf_r+0xc0c>
   81d18:	1bc0      	subs	r0, r0, r7
   81d1a:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
   81d1e:	4560      	cmp	r0, ip
   81d20:	bfa8      	it	ge
   81d22:	4660      	movge	r0, ip
   81d24:	9005      	str	r0, [sp, #20]
   81d26:	9408      	str	r4, [sp, #32]
   81d28:	9507      	str	r5, [sp, #28]
   81d2a:	f04f 0c00 	mov.w	ip, #0
   81d2e:	e65b      	b.n	819e8 <_vfiprintf_r+0x268>
   81d30:	00083f40 	.word	0x00083f40
   81d34:	00083f00 	.word	0x00083f00
   81d38:	9b08      	ldr	r3, [sp, #32]
   81d3a:	f8dd b020 	ldr.w	fp, [sp, #32]
   81d3e:	9004      	str	r0, [sp, #16]
   81d40:	48b2      	ldr	r0, [pc, #712]	; (8200c <_vfiprintf_r+0x88c>)
   81d42:	681c      	ldr	r4, [r3, #0]
   81d44:	2230      	movs	r2, #48	; 0x30
   81d46:	2378      	movs	r3, #120	; 0x78
   81d48:	f10b 0b04 	add.w	fp, fp, #4
   81d4c:	46ac      	mov	ip, r5
   81d4e:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
   81d52:	f04a 0a02 	orr.w	sl, sl, #2
   81d56:	f8cd b020 	str.w	fp, [sp, #32]
   81d5a:	2500      	movs	r5, #0
   81d5c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   81d60:	900a      	str	r0, [sp, #40]	; 0x28
   81d62:	2302      	movs	r3, #2
   81d64:	e61d      	b.n	819a2 <_vfiprintf_r+0x222>
   81d66:	f04a 0a20 	orr.w	sl, sl, #32
   81d6a:	f898 3000 	ldrb.w	r3, [r8]
   81d6e:	e574      	b.n	8185a <_vfiprintf_r+0xda>
   81d70:	f8dd b020 	ldr.w	fp, [sp, #32]
   81d74:	f8db 0000 	ldr.w	r0, [fp]
   81d78:	f10b 0304 	add.w	r3, fp, #4
   81d7c:	2800      	cmp	r0, #0
   81d7e:	f6ff adf7 	blt.w	81970 <_vfiprintf_r+0x1f0>
   81d82:	9308      	str	r3, [sp, #32]
   81d84:	f898 3000 	ldrb.w	r3, [r8]
   81d88:	e567      	b.n	8185a <_vfiprintf_r+0xda>
   81d8a:	f898 3000 	ldrb.w	r3, [r8]
   81d8e:	212b      	movs	r1, #43	; 0x2b
   81d90:	e563      	b.n	8185a <_vfiprintf_r+0xda>
   81d92:	f898 3000 	ldrb.w	r3, [r8]
   81d96:	f108 0401 	add.w	r4, r8, #1
   81d9a:	2b2a      	cmp	r3, #42	; 0x2a
   81d9c:	f000 8305 	beq.w	823aa <_vfiprintf_r+0xc2a>
   81da0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   81da4:	2a09      	cmp	r2, #9
   81da6:	bf98      	it	ls
   81da8:	2500      	movls	r5, #0
   81daa:	f200 82fa 	bhi.w	823a2 <_vfiprintf_r+0xc22>
   81dae:	f814 3b01 	ldrb.w	r3, [r4], #1
   81db2:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   81db6:	eb02 0545 	add.w	r5, r2, r5, lsl #1
   81dba:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   81dbe:	2a09      	cmp	r2, #9
   81dc0:	d9f5      	bls.n	81dae <_vfiprintf_r+0x62e>
   81dc2:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
   81dc6:	46a0      	mov	r8, r4
   81dc8:	e549      	b.n	8185e <_vfiprintf_r+0xde>
   81dca:	4c90      	ldr	r4, [pc, #576]	; (8200c <_vfiprintf_r+0x88c>)
   81dcc:	f01a 0f20 	tst.w	sl, #32
   81dd0:	9004      	str	r0, [sp, #16]
   81dd2:	46ac      	mov	ip, r5
   81dd4:	940a      	str	r4, [sp, #40]	; 0x28
   81dd6:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   81dda:	f47f af10 	bne.w	81bfe <_vfiprintf_r+0x47e>
   81dde:	f01a 0f10 	tst.w	sl, #16
   81de2:	f040 81ea 	bne.w	821ba <_vfiprintf_r+0xa3a>
   81de6:	f01a 0f40 	tst.w	sl, #64	; 0x40
   81dea:	f000 81e6 	beq.w	821ba <_vfiprintf_r+0xa3a>
   81dee:	f8dd b020 	ldr.w	fp, [sp, #32]
   81df2:	2500      	movs	r5, #0
   81df4:	f8bb 4000 	ldrh.w	r4, [fp]
   81df8:	f10b 0b04 	add.w	fp, fp, #4
   81dfc:	f8cd b020 	str.w	fp, [sp, #32]
   81e00:	e707      	b.n	81c12 <_vfiprintf_r+0x492>
   81e02:	f898 3000 	ldrb.w	r3, [r8]
   81e06:	2900      	cmp	r1, #0
   81e08:	f47f ad27 	bne.w	8185a <_vfiprintf_r+0xda>
   81e0c:	2120      	movs	r1, #32
   81e0e:	e524      	b.n	8185a <_vfiprintf_r+0xda>
   81e10:	f04a 0a01 	orr.w	sl, sl, #1
   81e14:	f898 3000 	ldrb.w	r3, [r8]
   81e18:	e51f      	b.n	8185a <_vfiprintf_r+0xda>
   81e1a:	9004      	str	r0, [sp, #16]
   81e1c:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   81e20:	2b00      	cmp	r3, #0
   81e22:	f000 80f9 	beq.w	82018 <_vfiprintf_r+0x898>
   81e26:	2501      	movs	r5, #1
   81e28:	f04f 0b00 	mov.w	fp, #0
   81e2c:	9503      	str	r5, [sp, #12]
   81e2e:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   81e32:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
   81e36:	9505      	str	r5, [sp, #20]
   81e38:	af16      	add	r7, sp, #88	; 0x58
   81e3a:	e70e      	b.n	81c5a <_vfiprintf_r+0x4da>
   81e3c:	9806      	ldr	r0, [sp, #24]
   81e3e:	9902      	ldr	r1, [sp, #8]
   81e40:	aa13      	add	r2, sp, #76	; 0x4c
   81e42:	f7ff fc61 	bl	81708 <__sprint_r.part.0>
   81e46:	2800      	cmp	r0, #0
   81e48:	f040 80ed 	bne.w	82026 <_vfiprintf_r+0x8a6>
   81e4c:	9814      	ldr	r0, [sp, #80]	; 0x50
   81e4e:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81e50:	1c43      	adds	r3, r0, #1
   81e52:	46cc      	mov	ip, r9
   81e54:	e5fe      	b.n	81a54 <_vfiprintf_r+0x2d4>
   81e56:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81e58:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81e5a:	1c59      	adds	r1, r3, #1
   81e5c:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
   81e60:	b168      	cbz	r0, 81e7e <_vfiprintf_r+0x6fe>
   81e62:	3201      	adds	r2, #1
   81e64:	f10d 0047 	add.w	r0, sp, #71	; 0x47
   81e68:	2301      	movs	r3, #1
   81e6a:	2907      	cmp	r1, #7
   81e6c:	9215      	str	r2, [sp, #84]	; 0x54
   81e6e:	9114      	str	r1, [sp, #80]	; 0x50
   81e70:	e886 0009 	stmia.w	r6, {r0, r3}
   81e74:	f300 8160 	bgt.w	82138 <_vfiprintf_r+0x9b8>
   81e78:	460b      	mov	r3, r1
   81e7a:	3608      	adds	r6, #8
   81e7c:	3101      	adds	r1, #1
   81e7e:	9c07      	ldr	r4, [sp, #28]
   81e80:	b164      	cbz	r4, 81e9c <_vfiprintf_r+0x71c>
   81e82:	3202      	adds	r2, #2
   81e84:	a812      	add	r0, sp, #72	; 0x48
   81e86:	2302      	movs	r3, #2
   81e88:	2907      	cmp	r1, #7
   81e8a:	9215      	str	r2, [sp, #84]	; 0x54
   81e8c:	9114      	str	r1, [sp, #80]	; 0x50
   81e8e:	e886 0009 	stmia.w	r6, {r0, r3}
   81e92:	f300 8157 	bgt.w	82144 <_vfiprintf_r+0x9c4>
   81e96:	460b      	mov	r3, r1
   81e98:	3608      	adds	r6, #8
   81e9a:	3101      	adds	r1, #1
   81e9c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   81e9e:	2d80      	cmp	r5, #128	; 0x80
   81ea0:	f000 8101 	beq.w	820a6 <_vfiprintf_r+0x926>
   81ea4:	9d05      	ldr	r5, [sp, #20]
   81ea6:	ebc5 040c 	rsb	r4, r5, ip
   81eaa:	2c00      	cmp	r4, #0
   81eac:	dd2f      	ble.n	81f0e <_vfiprintf_r+0x78e>
   81eae:	2c10      	cmp	r4, #16
   81eb0:	4d57      	ldr	r5, [pc, #348]	; (82010 <_vfiprintf_r+0x890>)
   81eb2:	dd22      	ble.n	81efa <_vfiprintf_r+0x77a>
   81eb4:	4630      	mov	r0, r6
   81eb6:	f04f 0b10 	mov.w	fp, #16
   81eba:	462e      	mov	r6, r5
   81ebc:	4625      	mov	r5, r4
   81ebe:	9c06      	ldr	r4, [sp, #24]
   81ec0:	e006      	b.n	81ed0 <_vfiprintf_r+0x750>
   81ec2:	f103 0c02 	add.w	ip, r3, #2
   81ec6:	3008      	adds	r0, #8
   81ec8:	460b      	mov	r3, r1
   81eca:	3d10      	subs	r5, #16
   81ecc:	2d10      	cmp	r5, #16
   81ece:	dd10      	ble.n	81ef2 <_vfiprintf_r+0x772>
   81ed0:	1c59      	adds	r1, r3, #1
   81ed2:	3210      	adds	r2, #16
   81ed4:	2907      	cmp	r1, #7
   81ed6:	9215      	str	r2, [sp, #84]	; 0x54
   81ed8:	e880 0840 	stmia.w	r0, {r6, fp}
   81edc:	9114      	str	r1, [sp, #80]	; 0x50
   81ede:	ddf0      	ble.n	81ec2 <_vfiprintf_r+0x742>
   81ee0:	2a00      	cmp	r2, #0
   81ee2:	d163      	bne.n	81fac <_vfiprintf_r+0x82c>
   81ee4:	3d10      	subs	r5, #16
   81ee6:	2d10      	cmp	r5, #16
   81ee8:	f04f 0c01 	mov.w	ip, #1
   81eec:	4613      	mov	r3, r2
   81eee:	4648      	mov	r0, r9
   81ef0:	dcee      	bgt.n	81ed0 <_vfiprintf_r+0x750>
   81ef2:	462c      	mov	r4, r5
   81ef4:	4661      	mov	r1, ip
   81ef6:	4635      	mov	r5, r6
   81ef8:	4606      	mov	r6, r0
   81efa:	4422      	add	r2, r4
   81efc:	2907      	cmp	r1, #7
   81efe:	9215      	str	r2, [sp, #84]	; 0x54
   81f00:	6035      	str	r5, [r6, #0]
   81f02:	6074      	str	r4, [r6, #4]
   81f04:	9114      	str	r1, [sp, #80]	; 0x50
   81f06:	f300 80c1 	bgt.w	8208c <_vfiprintf_r+0x90c>
   81f0a:	3608      	adds	r6, #8
   81f0c:	3101      	adds	r1, #1
   81f0e:	9d05      	ldr	r5, [sp, #20]
   81f10:	2907      	cmp	r1, #7
   81f12:	442a      	add	r2, r5
   81f14:	9215      	str	r2, [sp, #84]	; 0x54
   81f16:	6037      	str	r7, [r6, #0]
   81f18:	6075      	str	r5, [r6, #4]
   81f1a:	9114      	str	r1, [sp, #80]	; 0x50
   81f1c:	f340 80c1 	ble.w	820a2 <_vfiprintf_r+0x922>
   81f20:	2a00      	cmp	r2, #0
   81f22:	f040 8130 	bne.w	82186 <_vfiprintf_r+0xa06>
   81f26:	9214      	str	r2, [sp, #80]	; 0x50
   81f28:	464e      	mov	r6, r9
   81f2a:	f01a 0f04 	tst.w	sl, #4
   81f2e:	f000 808b 	beq.w	82048 <_vfiprintf_r+0x8c8>
   81f32:	9d04      	ldr	r5, [sp, #16]
   81f34:	f8dd b00c 	ldr.w	fp, [sp, #12]
   81f38:	ebcb 0405 	rsb	r4, fp, r5
   81f3c:	2c00      	cmp	r4, #0
   81f3e:	f340 8083 	ble.w	82048 <_vfiprintf_r+0x8c8>
   81f42:	2c10      	cmp	r4, #16
   81f44:	f340 821e 	ble.w	82384 <_vfiprintf_r+0xc04>
   81f48:	9914      	ldr	r1, [sp, #80]	; 0x50
   81f4a:	4d32      	ldr	r5, [pc, #200]	; (82014 <_vfiprintf_r+0x894>)
   81f4c:	2710      	movs	r7, #16
   81f4e:	f8dd a018 	ldr.w	sl, [sp, #24]
   81f52:	f8dd b008 	ldr.w	fp, [sp, #8]
   81f56:	e005      	b.n	81f64 <_vfiprintf_r+0x7e4>
   81f58:	1c88      	adds	r0, r1, #2
   81f5a:	3608      	adds	r6, #8
   81f5c:	4619      	mov	r1, r3
   81f5e:	3c10      	subs	r4, #16
   81f60:	2c10      	cmp	r4, #16
   81f62:	dd10      	ble.n	81f86 <_vfiprintf_r+0x806>
   81f64:	1c4b      	adds	r3, r1, #1
   81f66:	3210      	adds	r2, #16
   81f68:	2b07      	cmp	r3, #7
   81f6a:	9215      	str	r2, [sp, #84]	; 0x54
   81f6c:	e886 00a0 	stmia.w	r6, {r5, r7}
   81f70:	9314      	str	r3, [sp, #80]	; 0x50
   81f72:	ddf1      	ble.n	81f58 <_vfiprintf_r+0x7d8>
   81f74:	2a00      	cmp	r2, #0
   81f76:	d17d      	bne.n	82074 <_vfiprintf_r+0x8f4>
   81f78:	3c10      	subs	r4, #16
   81f7a:	2c10      	cmp	r4, #16
   81f7c:	f04f 0001 	mov.w	r0, #1
   81f80:	4611      	mov	r1, r2
   81f82:	464e      	mov	r6, r9
   81f84:	dcee      	bgt.n	81f64 <_vfiprintf_r+0x7e4>
   81f86:	4422      	add	r2, r4
   81f88:	2807      	cmp	r0, #7
   81f8a:	9215      	str	r2, [sp, #84]	; 0x54
   81f8c:	6035      	str	r5, [r6, #0]
   81f8e:	6074      	str	r4, [r6, #4]
   81f90:	9014      	str	r0, [sp, #80]	; 0x50
   81f92:	dd59      	ble.n	82048 <_vfiprintf_r+0x8c8>
   81f94:	2a00      	cmp	r2, #0
   81f96:	d14f      	bne.n	82038 <_vfiprintf_r+0x8b8>
   81f98:	9c09      	ldr	r4, [sp, #36]	; 0x24
   81f9a:	f8dd b00c 	ldr.w	fp, [sp, #12]
   81f9e:	9d04      	ldr	r5, [sp, #16]
   81fa0:	45ab      	cmp	fp, r5
   81fa2:	bfac      	ite	ge
   81fa4:	445c      	addge	r4, fp
   81fa6:	1964      	addlt	r4, r4, r5
   81fa8:	9409      	str	r4, [sp, #36]	; 0x24
   81faa:	e05e      	b.n	8206a <_vfiprintf_r+0x8ea>
   81fac:	4620      	mov	r0, r4
   81fae:	9902      	ldr	r1, [sp, #8]
   81fb0:	aa13      	add	r2, sp, #76	; 0x4c
   81fb2:	f7ff fba9 	bl	81708 <__sprint_r.part.0>
   81fb6:	2800      	cmp	r0, #0
   81fb8:	d135      	bne.n	82026 <_vfiprintf_r+0x8a6>
   81fba:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81fbc:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81fbe:	f103 0c01 	add.w	ip, r3, #1
   81fc2:	4648      	mov	r0, r9
   81fc4:	e781      	b.n	81eca <_vfiprintf_r+0x74a>
   81fc6:	08e0      	lsrs	r0, r4, #3
   81fc8:	ea40 7045 	orr.w	r0, r0, r5, lsl #29
   81fcc:	f004 0207 	and.w	r2, r4, #7
   81fd0:	08e9      	lsrs	r1, r5, #3
   81fd2:	3230      	adds	r2, #48	; 0x30
   81fd4:	ea50 0b01 	orrs.w	fp, r0, r1
   81fd8:	461f      	mov	r7, r3
   81fda:	701a      	strb	r2, [r3, #0]
   81fdc:	4604      	mov	r4, r0
   81fde:	460d      	mov	r5, r1
   81fe0:	f103 33ff 	add.w	r3, r3, #4294967295
   81fe4:	d1ef      	bne.n	81fc6 <_vfiprintf_r+0x846>
   81fe6:	f01a 0f01 	tst.w	sl, #1
   81fea:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   81fee:	4639      	mov	r1, r7
   81ff0:	f000 80b9 	beq.w	82166 <_vfiprintf_r+0x9e6>
   81ff4:	2a30      	cmp	r2, #48	; 0x30
   81ff6:	f43f acf4 	beq.w	819e2 <_vfiprintf_r+0x262>
   81ffa:	461f      	mov	r7, r3
   81ffc:	ebc7 0509 	rsb	r5, r7, r9
   82000:	2330      	movs	r3, #48	; 0x30
   82002:	9505      	str	r5, [sp, #20]
   82004:	f801 3c01 	strb.w	r3, [r1, #-1]
   82008:	e4ee      	b.n	819e8 <_vfiprintf_r+0x268>
   8200a:	bf00      	nop
   8200c:	00083f14 	.word	0x00083f14
   82010:	00083f30 	.word	0x00083f30
   82014:	00083f40 	.word	0x00083f40
   82018:	9b15      	ldr	r3, [sp, #84]	; 0x54
   8201a:	b123      	cbz	r3, 82026 <_vfiprintf_r+0x8a6>
   8201c:	9806      	ldr	r0, [sp, #24]
   8201e:	9902      	ldr	r1, [sp, #8]
   82020:	aa13      	add	r2, sp, #76	; 0x4c
   82022:	f7ff fb71 	bl	81708 <__sprint_r.part.0>
   82026:	9c02      	ldr	r4, [sp, #8]
   82028:	89a3      	ldrh	r3, [r4, #12]
   8202a:	065b      	lsls	r3, r3, #25
   8202c:	f53f ac98 	bmi.w	81960 <_vfiprintf_r+0x1e0>
   82030:	9809      	ldr	r0, [sp, #36]	; 0x24
   82032:	b031      	add	sp, #196	; 0xc4
   82034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82038:	9806      	ldr	r0, [sp, #24]
   8203a:	9902      	ldr	r1, [sp, #8]
   8203c:	aa13      	add	r2, sp, #76	; 0x4c
   8203e:	f7ff fb63 	bl	81708 <__sprint_r.part.0>
   82042:	2800      	cmp	r0, #0
   82044:	d1ef      	bne.n	82026 <_vfiprintf_r+0x8a6>
   82046:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82048:	9c09      	ldr	r4, [sp, #36]	; 0x24
   8204a:	f8dd b00c 	ldr.w	fp, [sp, #12]
   8204e:	9d04      	ldr	r5, [sp, #16]
   82050:	45ab      	cmp	fp, r5
   82052:	bfac      	ite	ge
   82054:	445c      	addge	r4, fp
   82056:	1964      	addlt	r4, r4, r5
   82058:	9409      	str	r4, [sp, #36]	; 0x24
   8205a:	b132      	cbz	r2, 8206a <_vfiprintf_r+0x8ea>
   8205c:	9806      	ldr	r0, [sp, #24]
   8205e:	9902      	ldr	r1, [sp, #8]
   82060:	aa13      	add	r2, sp, #76	; 0x4c
   82062:	f7ff fb51 	bl	81708 <__sprint_r.part.0>
   82066:	2800      	cmp	r0, #0
   82068:	d1dd      	bne.n	82026 <_vfiprintf_r+0x8a6>
   8206a:	2000      	movs	r0, #0
   8206c:	9014      	str	r0, [sp, #80]	; 0x50
   8206e:	464e      	mov	r6, r9
   82070:	f7ff bbb9 	b.w	817e6 <_vfiprintf_r+0x66>
   82074:	4650      	mov	r0, sl
   82076:	4659      	mov	r1, fp
   82078:	aa13      	add	r2, sp, #76	; 0x4c
   8207a:	f7ff fb45 	bl	81708 <__sprint_r.part.0>
   8207e:	2800      	cmp	r0, #0
   82080:	d1d1      	bne.n	82026 <_vfiprintf_r+0x8a6>
   82082:	9914      	ldr	r1, [sp, #80]	; 0x50
   82084:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82086:	1c48      	adds	r0, r1, #1
   82088:	464e      	mov	r6, r9
   8208a:	e768      	b.n	81f5e <_vfiprintf_r+0x7de>
   8208c:	2a00      	cmp	r2, #0
   8208e:	f040 80f7 	bne.w	82280 <_vfiprintf_r+0xb00>
   82092:	9c05      	ldr	r4, [sp, #20]
   82094:	2301      	movs	r3, #1
   82096:	9720      	str	r7, [sp, #128]	; 0x80
   82098:	9421      	str	r4, [sp, #132]	; 0x84
   8209a:	9415      	str	r4, [sp, #84]	; 0x54
   8209c:	4622      	mov	r2, r4
   8209e:	9314      	str	r3, [sp, #80]	; 0x50
   820a0:	464e      	mov	r6, r9
   820a2:	3608      	adds	r6, #8
   820a4:	e741      	b.n	81f2a <_vfiprintf_r+0x7aa>
   820a6:	9d04      	ldr	r5, [sp, #16]
   820a8:	f8dd b00c 	ldr.w	fp, [sp, #12]
   820ac:	ebcb 0405 	rsb	r4, fp, r5
   820b0:	2c00      	cmp	r4, #0
   820b2:	f77f aef7 	ble.w	81ea4 <_vfiprintf_r+0x724>
   820b6:	2c10      	cmp	r4, #16
   820b8:	4da6      	ldr	r5, [pc, #664]	; (82354 <_vfiprintf_r+0xbd4>)
   820ba:	f340 8170 	ble.w	8239e <_vfiprintf_r+0xc1e>
   820be:	4629      	mov	r1, r5
   820c0:	f04f 0b10 	mov.w	fp, #16
   820c4:	4625      	mov	r5, r4
   820c6:	4664      	mov	r4, ip
   820c8:	46b4      	mov	ip, r6
   820ca:	460e      	mov	r6, r1
   820cc:	e006      	b.n	820dc <_vfiprintf_r+0x95c>
   820ce:	1c98      	adds	r0, r3, #2
   820d0:	f10c 0c08 	add.w	ip, ip, #8
   820d4:	460b      	mov	r3, r1
   820d6:	3d10      	subs	r5, #16
   820d8:	2d10      	cmp	r5, #16
   820da:	dd0f      	ble.n	820fc <_vfiprintf_r+0x97c>
   820dc:	1c59      	adds	r1, r3, #1
   820de:	3210      	adds	r2, #16
   820e0:	2907      	cmp	r1, #7
   820e2:	9215      	str	r2, [sp, #84]	; 0x54
   820e4:	e88c 0840 	stmia.w	ip, {r6, fp}
   820e8:	9114      	str	r1, [sp, #80]	; 0x50
   820ea:	ddf0      	ble.n	820ce <_vfiprintf_r+0x94e>
   820ec:	b9ba      	cbnz	r2, 8211e <_vfiprintf_r+0x99e>
   820ee:	3d10      	subs	r5, #16
   820f0:	2d10      	cmp	r5, #16
   820f2:	f04f 0001 	mov.w	r0, #1
   820f6:	4613      	mov	r3, r2
   820f8:	46cc      	mov	ip, r9
   820fa:	dcef      	bgt.n	820dc <_vfiprintf_r+0x95c>
   820fc:	4633      	mov	r3, r6
   820fe:	4666      	mov	r6, ip
   82100:	46a4      	mov	ip, r4
   82102:	462c      	mov	r4, r5
   82104:	461d      	mov	r5, r3
   82106:	4422      	add	r2, r4
   82108:	2807      	cmp	r0, #7
   8210a:	9215      	str	r2, [sp, #84]	; 0x54
   8210c:	6035      	str	r5, [r6, #0]
   8210e:	6074      	str	r4, [r6, #4]
   82110:	9014      	str	r0, [sp, #80]	; 0x50
   82112:	f300 80af 	bgt.w	82274 <_vfiprintf_r+0xaf4>
   82116:	3608      	adds	r6, #8
   82118:	1c41      	adds	r1, r0, #1
   8211a:	4603      	mov	r3, r0
   8211c:	e6c2      	b.n	81ea4 <_vfiprintf_r+0x724>
   8211e:	9806      	ldr	r0, [sp, #24]
   82120:	9902      	ldr	r1, [sp, #8]
   82122:	aa13      	add	r2, sp, #76	; 0x4c
   82124:	f7ff faf0 	bl	81708 <__sprint_r.part.0>
   82128:	2800      	cmp	r0, #0
   8212a:	f47f af7c 	bne.w	82026 <_vfiprintf_r+0x8a6>
   8212e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   82130:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82132:	1c58      	adds	r0, r3, #1
   82134:	46cc      	mov	ip, r9
   82136:	e7ce      	b.n	820d6 <_vfiprintf_r+0x956>
   82138:	2a00      	cmp	r2, #0
   8213a:	d179      	bne.n	82230 <_vfiprintf_r+0xab0>
   8213c:	4619      	mov	r1, r3
   8213e:	464e      	mov	r6, r9
   82140:	4613      	mov	r3, r2
   82142:	e69c      	b.n	81e7e <_vfiprintf_r+0x6fe>
   82144:	2a00      	cmp	r2, #0
   82146:	f040 8084 	bne.w	82252 <_vfiprintf_r+0xad2>
   8214a:	2101      	movs	r1, #1
   8214c:	4613      	mov	r3, r2
   8214e:	464e      	mov	r6, r9
   82150:	e6a4      	b.n	81e9c <_vfiprintf_r+0x71c>
   82152:	464f      	mov	r7, r9
   82154:	e448      	b.n	819e8 <_vfiprintf_r+0x268>
   82156:	2d00      	cmp	r5, #0
   82158:	bf08      	it	eq
   8215a:	2c0a      	cmpeq	r4, #10
   8215c:	d246      	bcs.n	821ec <_vfiprintf_r+0xa6c>
   8215e:	3430      	adds	r4, #48	; 0x30
   82160:	af30      	add	r7, sp, #192	; 0xc0
   82162:	f807 4d41 	strb.w	r4, [r7, #-65]!
   82166:	ebc7 0309 	rsb	r3, r7, r9
   8216a:	9305      	str	r3, [sp, #20]
   8216c:	e43c      	b.n	819e8 <_vfiprintf_r+0x268>
   8216e:	2302      	movs	r3, #2
   82170:	e417      	b.n	819a2 <_vfiprintf_r+0x222>
   82172:	2a00      	cmp	r2, #0
   82174:	f040 80af 	bne.w	822d6 <_vfiprintf_r+0xb56>
   82178:	4613      	mov	r3, r2
   8217a:	2101      	movs	r1, #1
   8217c:	464e      	mov	r6, r9
   8217e:	e66d      	b.n	81e5c <_vfiprintf_r+0x6dc>
   82180:	4644      	mov	r4, r8
   82182:	f7ff bb58 	b.w	81836 <_vfiprintf_r+0xb6>
   82186:	9806      	ldr	r0, [sp, #24]
   82188:	9902      	ldr	r1, [sp, #8]
   8218a:	aa13      	add	r2, sp, #76	; 0x4c
   8218c:	f7ff fabc 	bl	81708 <__sprint_r.part.0>
   82190:	2800      	cmp	r0, #0
   82192:	f47f af48 	bne.w	82026 <_vfiprintf_r+0x8a6>
   82196:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82198:	464e      	mov	r6, r9
   8219a:	e6c6      	b.n	81f2a <_vfiprintf_r+0x7aa>
   8219c:	9d08      	ldr	r5, [sp, #32]
   8219e:	682c      	ldr	r4, [r5, #0]
   821a0:	3504      	adds	r5, #4
   821a2:	9508      	str	r5, [sp, #32]
   821a4:	2500      	movs	r5, #0
   821a6:	f7ff bbfc 	b.w	819a2 <_vfiprintf_r+0x222>
   821aa:	9d08      	ldr	r5, [sp, #32]
   821ac:	2301      	movs	r3, #1
   821ae:	682c      	ldr	r4, [r5, #0]
   821b0:	3504      	adds	r5, #4
   821b2:	9508      	str	r5, [sp, #32]
   821b4:	2500      	movs	r5, #0
   821b6:	f7ff bbf4 	b.w	819a2 <_vfiprintf_r+0x222>
   821ba:	9d08      	ldr	r5, [sp, #32]
   821bc:	682c      	ldr	r4, [r5, #0]
   821be:	3504      	adds	r5, #4
   821c0:	9508      	str	r5, [sp, #32]
   821c2:	2500      	movs	r5, #0
   821c4:	e525      	b.n	81c12 <_vfiprintf_r+0x492>
   821c6:	9d08      	ldr	r5, [sp, #32]
   821c8:	682c      	ldr	r4, [r5, #0]
   821ca:	3504      	adds	r5, #4
   821cc:	9508      	str	r5, [sp, #32]
   821ce:	17e5      	asrs	r5, r4, #31
   821d0:	4622      	mov	r2, r4
   821d2:	462b      	mov	r3, r5
   821d4:	e48e      	b.n	81af4 <_vfiprintf_r+0x374>
   821d6:	9806      	ldr	r0, [sp, #24]
   821d8:	9902      	ldr	r1, [sp, #8]
   821da:	aa13      	add	r2, sp, #76	; 0x4c
   821dc:	f7ff fa94 	bl	81708 <__sprint_r.part.0>
   821e0:	2800      	cmp	r0, #0
   821e2:	f47f af20 	bne.w	82026 <_vfiprintf_r+0x8a6>
   821e6:	464e      	mov	r6, r9
   821e8:	f7ff bb9a 	b.w	81920 <_vfiprintf_r+0x1a0>
   821ec:	f10d 0b7f 	add.w	fp, sp, #127	; 0x7f
   821f0:	9603      	str	r6, [sp, #12]
   821f2:	465e      	mov	r6, fp
   821f4:	46e3      	mov	fp, ip
   821f6:	4620      	mov	r0, r4
   821f8:	4629      	mov	r1, r5
   821fa:	220a      	movs	r2, #10
   821fc:	2300      	movs	r3, #0
   821fe:	f7fe fe95 	bl	80f2c <__aeabi_uldivmod>
   82202:	3230      	adds	r2, #48	; 0x30
   82204:	7032      	strb	r2, [r6, #0]
   82206:	4620      	mov	r0, r4
   82208:	4629      	mov	r1, r5
   8220a:	220a      	movs	r2, #10
   8220c:	2300      	movs	r3, #0
   8220e:	f7fe fe8d 	bl	80f2c <__aeabi_uldivmod>
   82212:	4604      	mov	r4, r0
   82214:	460d      	mov	r5, r1
   82216:	ea54 0005 	orrs.w	r0, r4, r5
   8221a:	4637      	mov	r7, r6
   8221c:	f106 36ff 	add.w	r6, r6, #4294967295
   82220:	d1e9      	bne.n	821f6 <_vfiprintf_r+0xa76>
   82222:	ebc7 0309 	rsb	r3, r7, r9
   82226:	46dc      	mov	ip, fp
   82228:	9e03      	ldr	r6, [sp, #12]
   8222a:	9305      	str	r3, [sp, #20]
   8222c:	f7ff bbdc 	b.w	819e8 <_vfiprintf_r+0x268>
   82230:	9806      	ldr	r0, [sp, #24]
   82232:	9902      	ldr	r1, [sp, #8]
   82234:	aa13      	add	r2, sp, #76	; 0x4c
   82236:	f8cd c004 	str.w	ip, [sp, #4]
   8223a:	f7ff fa65 	bl	81708 <__sprint_r.part.0>
   8223e:	f8dd c004 	ldr.w	ip, [sp, #4]
   82242:	2800      	cmp	r0, #0
   82244:	f47f aeef 	bne.w	82026 <_vfiprintf_r+0x8a6>
   82248:	9b14      	ldr	r3, [sp, #80]	; 0x50
   8224a:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8224c:	1c59      	adds	r1, r3, #1
   8224e:	464e      	mov	r6, r9
   82250:	e615      	b.n	81e7e <_vfiprintf_r+0x6fe>
   82252:	9806      	ldr	r0, [sp, #24]
   82254:	9902      	ldr	r1, [sp, #8]
   82256:	aa13      	add	r2, sp, #76	; 0x4c
   82258:	f8cd c004 	str.w	ip, [sp, #4]
   8225c:	f7ff fa54 	bl	81708 <__sprint_r.part.0>
   82260:	f8dd c004 	ldr.w	ip, [sp, #4]
   82264:	2800      	cmp	r0, #0
   82266:	f47f aede 	bne.w	82026 <_vfiprintf_r+0x8a6>
   8226a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   8226c:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8226e:	1c59      	adds	r1, r3, #1
   82270:	464e      	mov	r6, r9
   82272:	e613      	b.n	81e9c <_vfiprintf_r+0x71c>
   82274:	2a00      	cmp	r2, #0
   82276:	d156      	bne.n	82326 <_vfiprintf_r+0xba6>
   82278:	2101      	movs	r1, #1
   8227a:	4613      	mov	r3, r2
   8227c:	464e      	mov	r6, r9
   8227e:	e611      	b.n	81ea4 <_vfiprintf_r+0x724>
   82280:	9806      	ldr	r0, [sp, #24]
   82282:	9902      	ldr	r1, [sp, #8]
   82284:	aa13      	add	r2, sp, #76	; 0x4c
   82286:	f7ff fa3f 	bl	81708 <__sprint_r.part.0>
   8228a:	2800      	cmp	r0, #0
   8228c:	f47f aecb 	bne.w	82026 <_vfiprintf_r+0x8a6>
   82290:	9914      	ldr	r1, [sp, #80]	; 0x50
   82292:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82294:	3101      	adds	r1, #1
   82296:	464e      	mov	r6, r9
   82298:	e639      	b.n	81f0e <_vfiprintf_r+0x78e>
   8229a:	f04f 0b2d 	mov.w	fp, #45	; 0x2d
   8229e:	4264      	negs	r4, r4
   822a0:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   822a4:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
   822a8:	f8cd b01c 	str.w	fp, [sp, #28]
   822ac:	f8cd c014 	str.w	ip, [sp, #20]
   822b0:	2301      	movs	r3, #1
   822b2:	f7ff bb7e 	b.w	819b2 <_vfiprintf_r+0x232>
   822b6:	f01a 0f10 	tst.w	sl, #16
   822ba:	d11d      	bne.n	822f8 <_vfiprintf_r+0xb78>
   822bc:	f01a 0f40 	tst.w	sl, #64	; 0x40
   822c0:	d058      	beq.n	82374 <_vfiprintf_r+0xbf4>
   822c2:	9d08      	ldr	r5, [sp, #32]
   822c4:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
   822c8:	682b      	ldr	r3, [r5, #0]
   822ca:	3504      	adds	r5, #4
   822cc:	9508      	str	r5, [sp, #32]
   822ce:	f8a3 b000 	strh.w	fp, [r3]
   822d2:	f7ff ba88 	b.w	817e6 <_vfiprintf_r+0x66>
   822d6:	9806      	ldr	r0, [sp, #24]
   822d8:	9902      	ldr	r1, [sp, #8]
   822da:	aa13      	add	r2, sp, #76	; 0x4c
   822dc:	f8cd c004 	str.w	ip, [sp, #4]
   822e0:	f7ff fa12 	bl	81708 <__sprint_r.part.0>
   822e4:	f8dd c004 	ldr.w	ip, [sp, #4]
   822e8:	2800      	cmp	r0, #0
   822ea:	f47f ae9c 	bne.w	82026 <_vfiprintf_r+0x8a6>
   822ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
   822f0:	9a15      	ldr	r2, [sp, #84]	; 0x54
   822f2:	1c59      	adds	r1, r3, #1
   822f4:	464e      	mov	r6, r9
   822f6:	e5b1      	b.n	81e5c <_vfiprintf_r+0x6dc>
   822f8:	f8dd b020 	ldr.w	fp, [sp, #32]
   822fc:	9c09      	ldr	r4, [sp, #36]	; 0x24
   822fe:	f8db 3000 	ldr.w	r3, [fp]
   82302:	f10b 0b04 	add.w	fp, fp, #4
   82306:	f8cd b020 	str.w	fp, [sp, #32]
   8230a:	601c      	str	r4, [r3, #0]
   8230c:	f7ff ba6b 	b.w	817e6 <_vfiprintf_r+0x66>
   82310:	9408      	str	r4, [sp, #32]
   82312:	f001 fc0b 	bl	83b2c <strlen>
   82316:	f89d 4047 	ldrb.w	r4, [sp, #71]	; 0x47
   8231a:	9005      	str	r0, [sp, #20]
   8231c:	9407      	str	r4, [sp, #28]
   8231e:	f04f 0c00 	mov.w	ip, #0
   82322:	f7ff bb61 	b.w	819e8 <_vfiprintf_r+0x268>
   82326:	9806      	ldr	r0, [sp, #24]
   82328:	9902      	ldr	r1, [sp, #8]
   8232a:	aa13      	add	r2, sp, #76	; 0x4c
   8232c:	f8cd c004 	str.w	ip, [sp, #4]
   82330:	f7ff f9ea 	bl	81708 <__sprint_r.part.0>
   82334:	f8dd c004 	ldr.w	ip, [sp, #4]
   82338:	2800      	cmp	r0, #0
   8233a:	f47f ae74 	bne.w	82026 <_vfiprintf_r+0x8a6>
   8233e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   82340:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82342:	1c59      	adds	r1, r3, #1
   82344:	464e      	mov	r6, r9
   82346:	e5ad      	b.n	81ea4 <_vfiprintf_r+0x724>
   82348:	9b14      	ldr	r3, [sp, #80]	; 0x50
   8234a:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8234c:	3301      	adds	r3, #1
   8234e:	4d02      	ldr	r5, [pc, #8]	; (82358 <_vfiprintf_r+0xbd8>)
   82350:	f7ff bb9a 	b.w	81a88 <_vfiprintf_r+0x308>
   82354:	00083f30 	.word	0x00083f30
   82358:	00083f40 	.word	0x00083f40
   8235c:	f1bc 0f06 	cmp.w	ip, #6
   82360:	bf34      	ite	cc
   82362:	4663      	movcc	r3, ip
   82364:	2306      	movcs	r3, #6
   82366:	9408      	str	r4, [sp, #32]
   82368:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
   8236c:	9305      	str	r3, [sp, #20]
   8236e:	9403      	str	r4, [sp, #12]
   82370:	4f16      	ldr	r7, [pc, #88]	; (823cc <_vfiprintf_r+0xc4c>)
   82372:	e472      	b.n	81c5a <_vfiprintf_r+0x4da>
   82374:	9c08      	ldr	r4, [sp, #32]
   82376:	9d09      	ldr	r5, [sp, #36]	; 0x24
   82378:	6823      	ldr	r3, [r4, #0]
   8237a:	3404      	adds	r4, #4
   8237c:	9408      	str	r4, [sp, #32]
   8237e:	601d      	str	r5, [r3, #0]
   82380:	f7ff ba31 	b.w	817e6 <_vfiprintf_r+0x66>
   82384:	9814      	ldr	r0, [sp, #80]	; 0x50
   82386:	4d12      	ldr	r5, [pc, #72]	; (823d0 <_vfiprintf_r+0xc50>)
   82388:	3001      	adds	r0, #1
   8238a:	e5fc      	b.n	81f86 <_vfiprintf_r+0x806>
   8238c:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
   82390:	f8cd c014 	str.w	ip, [sp, #20]
   82394:	9507      	str	r5, [sp, #28]
   82396:	9408      	str	r4, [sp, #32]
   82398:	4684      	mov	ip, r0
   8239a:	f7ff bb25 	b.w	819e8 <_vfiprintf_r+0x268>
   8239e:	4608      	mov	r0, r1
   823a0:	e6b1      	b.n	82106 <_vfiprintf_r+0x986>
   823a2:	46a0      	mov	r8, r4
   823a4:	2500      	movs	r5, #0
   823a6:	f7ff ba5a 	b.w	8185e <_vfiprintf_r+0xde>
   823aa:	f8dd b020 	ldr.w	fp, [sp, #32]
   823ae:	f898 3001 	ldrb.w	r3, [r8, #1]
   823b2:	f8db 5000 	ldr.w	r5, [fp]
   823b6:	f10b 0204 	add.w	r2, fp, #4
   823ba:	2d00      	cmp	r5, #0
   823bc:	9208      	str	r2, [sp, #32]
   823be:	46a0      	mov	r8, r4
   823c0:	f6bf aa4b 	bge.w	8185a <_vfiprintf_r+0xda>
   823c4:	f04f 35ff 	mov.w	r5, #4294967295
   823c8:	f7ff ba47 	b.w	8185a <_vfiprintf_r+0xda>
   823cc:	00083f28 	.word	0x00083f28
   823d0:	00083f40 	.word	0x00083f40

000823d4 <__sbprintf>:
   823d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   823d8:	6e4f      	ldr	r7, [r1, #100]	; 0x64
   823da:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   823de:	4688      	mov	r8, r1
   823e0:	9719      	str	r7, [sp, #100]	; 0x64
   823e2:	f8d8 701c 	ldr.w	r7, [r8, #28]
   823e6:	f8b1 a00c 	ldrh.w	sl, [r1, #12]
   823ea:	f8b1 900e 	ldrh.w	r9, [r1, #14]
   823ee:	9707      	str	r7, [sp, #28]
   823f0:	f8d8 7024 	ldr.w	r7, [r8, #36]	; 0x24
   823f4:	ac1a      	add	r4, sp, #104	; 0x68
   823f6:	f44f 6580 	mov.w	r5, #1024	; 0x400
   823fa:	f02a 0a02 	bic.w	sl, sl, #2
   823fe:	2600      	movs	r6, #0
   82400:	4669      	mov	r1, sp
   82402:	9400      	str	r4, [sp, #0]
   82404:	9404      	str	r4, [sp, #16]
   82406:	9502      	str	r5, [sp, #8]
   82408:	9505      	str	r5, [sp, #20]
   8240a:	f8ad a00c 	strh.w	sl, [sp, #12]
   8240e:	f8ad 900e 	strh.w	r9, [sp, #14]
   82412:	9709      	str	r7, [sp, #36]	; 0x24
   82414:	9606      	str	r6, [sp, #24]
   82416:	4605      	mov	r5, r0
   82418:	f7ff f9b2 	bl	81780 <_vfiprintf_r>
   8241c:	1e04      	subs	r4, r0, #0
   8241e:	db07      	blt.n	82430 <__sbprintf+0x5c>
   82420:	4628      	mov	r0, r5
   82422:	4669      	mov	r1, sp
   82424:	f000 f92a 	bl	8267c <_fflush_r>
   82428:	42b0      	cmp	r0, r6
   8242a:	bf18      	it	ne
   8242c:	f04f 34ff 	movne.w	r4, #4294967295
   82430:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   82434:	065b      	lsls	r3, r3, #25
   82436:	d505      	bpl.n	82444 <__sbprintf+0x70>
   82438:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   8243c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82440:	f8a8 300c 	strh.w	r3, [r8, #12]
   82444:	4620      	mov	r0, r4
   82446:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   8244a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8244e:	bf00      	nop

00082450 <__swsetup_r>:
   82450:	4b2f      	ldr	r3, [pc, #188]	; (82510 <__swsetup_r+0xc0>)
   82452:	b570      	push	{r4, r5, r6, lr}
   82454:	4606      	mov	r6, r0
   82456:	6818      	ldr	r0, [r3, #0]
   82458:	460c      	mov	r4, r1
   8245a:	b110      	cbz	r0, 82462 <__swsetup_r+0x12>
   8245c:	6b82      	ldr	r2, [r0, #56]	; 0x38
   8245e:	2a00      	cmp	r2, #0
   82460:	d036      	beq.n	824d0 <__swsetup_r+0x80>
   82462:	89a5      	ldrh	r5, [r4, #12]
   82464:	b2ab      	uxth	r3, r5
   82466:	0719      	lsls	r1, r3, #28
   82468:	d50c      	bpl.n	82484 <__swsetup_r+0x34>
   8246a:	6922      	ldr	r2, [r4, #16]
   8246c:	b1aa      	cbz	r2, 8249a <__swsetup_r+0x4a>
   8246e:	f013 0101 	ands.w	r1, r3, #1
   82472:	d01e      	beq.n	824b2 <__swsetup_r+0x62>
   82474:	6963      	ldr	r3, [r4, #20]
   82476:	2100      	movs	r1, #0
   82478:	425b      	negs	r3, r3
   8247a:	61a3      	str	r3, [r4, #24]
   8247c:	60a1      	str	r1, [r4, #8]
   8247e:	b1f2      	cbz	r2, 824be <__swsetup_r+0x6e>
   82480:	2000      	movs	r0, #0
   82482:	bd70      	pop	{r4, r5, r6, pc}
   82484:	06da      	lsls	r2, r3, #27
   82486:	d53a      	bpl.n	824fe <__swsetup_r+0xae>
   82488:	075b      	lsls	r3, r3, #29
   8248a:	d424      	bmi.n	824d6 <__swsetup_r+0x86>
   8248c:	6922      	ldr	r2, [r4, #16]
   8248e:	f045 0308 	orr.w	r3, r5, #8
   82492:	81a3      	strh	r3, [r4, #12]
   82494:	b29b      	uxth	r3, r3
   82496:	2a00      	cmp	r2, #0
   82498:	d1e9      	bne.n	8246e <__swsetup_r+0x1e>
   8249a:	f403 7120 	and.w	r1, r3, #640	; 0x280
   8249e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   824a2:	d0e4      	beq.n	8246e <__swsetup_r+0x1e>
   824a4:	4630      	mov	r0, r6
   824a6:	4621      	mov	r1, r4
   824a8:	f000 fcce 	bl	82e48 <__smakebuf_r>
   824ac:	89a3      	ldrh	r3, [r4, #12]
   824ae:	6922      	ldr	r2, [r4, #16]
   824b0:	e7dd      	b.n	8246e <__swsetup_r+0x1e>
   824b2:	0798      	lsls	r0, r3, #30
   824b4:	bf58      	it	pl
   824b6:	6961      	ldrpl	r1, [r4, #20]
   824b8:	60a1      	str	r1, [r4, #8]
   824ba:	2a00      	cmp	r2, #0
   824bc:	d1e0      	bne.n	82480 <__swsetup_r+0x30>
   824be:	89a3      	ldrh	r3, [r4, #12]
   824c0:	061a      	lsls	r2, r3, #24
   824c2:	d5dd      	bpl.n	82480 <__swsetup_r+0x30>
   824c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   824c8:	81a3      	strh	r3, [r4, #12]
   824ca:	f04f 30ff 	mov.w	r0, #4294967295
   824ce:	bd70      	pop	{r4, r5, r6, pc}
   824d0:	f000 f8f0 	bl	826b4 <__sinit>
   824d4:	e7c5      	b.n	82462 <__swsetup_r+0x12>
   824d6:	6b21      	ldr	r1, [r4, #48]	; 0x30
   824d8:	b149      	cbz	r1, 824ee <__swsetup_r+0x9e>
   824da:	f104 0340 	add.w	r3, r4, #64	; 0x40
   824de:	4299      	cmp	r1, r3
   824e0:	d003      	beq.n	824ea <__swsetup_r+0x9a>
   824e2:	4630      	mov	r0, r6
   824e4:	f000 fa2a 	bl	8293c <_free_r>
   824e8:	89a5      	ldrh	r5, [r4, #12]
   824ea:	2300      	movs	r3, #0
   824ec:	6323      	str	r3, [r4, #48]	; 0x30
   824ee:	6922      	ldr	r2, [r4, #16]
   824f0:	f025 0524 	bic.w	r5, r5, #36	; 0x24
   824f4:	2100      	movs	r1, #0
   824f6:	b2ad      	uxth	r5, r5
   824f8:	6022      	str	r2, [r4, #0]
   824fa:	6061      	str	r1, [r4, #4]
   824fc:	e7c7      	b.n	8248e <__swsetup_r+0x3e>
   824fe:	f045 0540 	orr.w	r5, r5, #64	; 0x40
   82502:	2309      	movs	r3, #9
   82504:	6033      	str	r3, [r6, #0]
   82506:	f04f 30ff 	mov.w	r0, #4294967295
   8250a:	81a5      	strh	r5, [r4, #12]
   8250c:	bd70      	pop	{r4, r5, r6, pc}
   8250e:	bf00      	nop
   82510:	20070570 	.word	0x20070570

00082514 <register_fini>:
   82514:	4b02      	ldr	r3, [pc, #8]	; (82520 <register_fini+0xc>)
   82516:	b113      	cbz	r3, 8251e <register_fini+0xa>
   82518:	4802      	ldr	r0, [pc, #8]	; (82524 <register_fini+0x10>)
   8251a:	f000 b805 	b.w	82528 <atexit>
   8251e:	4770      	bx	lr
   82520:	00000000 	.word	0x00000000
   82524:	000827b1 	.word	0x000827b1

00082528 <atexit>:
   82528:	4601      	mov	r1, r0
   8252a:	2000      	movs	r0, #0
   8252c:	4602      	mov	r2, r0
   8252e:	4603      	mov	r3, r0
   82530:	f001 bbca 	b.w	83cc8 <__register_exitproc>

00082534 <__sflush_r>:
   82534:	898b      	ldrh	r3, [r1, #12]
   82536:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8253a:	b29a      	uxth	r2, r3
   8253c:	460d      	mov	r5, r1
   8253e:	0711      	lsls	r1, r2, #28
   82540:	4680      	mov	r8, r0
   82542:	d43c      	bmi.n	825be <__sflush_r+0x8a>
   82544:	686a      	ldr	r2, [r5, #4]
   82546:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   8254a:	2a00      	cmp	r2, #0
   8254c:	81ab      	strh	r3, [r5, #12]
   8254e:	dd59      	ble.n	82604 <__sflush_r+0xd0>
   82550:	6aac      	ldr	r4, [r5, #40]	; 0x28
   82552:	2c00      	cmp	r4, #0
   82554:	d04b      	beq.n	825ee <__sflush_r+0xba>
   82556:	b29b      	uxth	r3, r3
   82558:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   8255c:	2100      	movs	r1, #0
   8255e:	b292      	uxth	r2, r2
   82560:	f8d8 6000 	ldr.w	r6, [r8]
   82564:	f8c8 1000 	str.w	r1, [r8]
   82568:	2a00      	cmp	r2, #0
   8256a:	d04f      	beq.n	8260c <__sflush_r+0xd8>
   8256c:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   8256e:	075f      	lsls	r7, r3, #29
   82570:	d505      	bpl.n	8257e <__sflush_r+0x4a>
   82572:	6869      	ldr	r1, [r5, #4]
   82574:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   82576:	1a52      	subs	r2, r2, r1
   82578:	b10b      	cbz	r3, 8257e <__sflush_r+0x4a>
   8257a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   8257c:	1ad2      	subs	r2, r2, r3
   8257e:	4640      	mov	r0, r8
   82580:	69e9      	ldr	r1, [r5, #28]
   82582:	2300      	movs	r3, #0
   82584:	47a0      	blx	r4
   82586:	1c44      	adds	r4, r0, #1
   82588:	d04a      	beq.n	82620 <__sflush_r+0xec>
   8258a:	89ab      	ldrh	r3, [r5, #12]
   8258c:	692a      	ldr	r2, [r5, #16]
   8258e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   82592:	b29b      	uxth	r3, r3
   82594:	2100      	movs	r1, #0
   82596:	602a      	str	r2, [r5, #0]
   82598:	04da      	lsls	r2, r3, #19
   8259a:	81ab      	strh	r3, [r5, #12]
   8259c:	6069      	str	r1, [r5, #4]
   8259e:	d44c      	bmi.n	8263a <__sflush_r+0x106>
   825a0:	6b29      	ldr	r1, [r5, #48]	; 0x30
   825a2:	f8c8 6000 	str.w	r6, [r8]
   825a6:	b311      	cbz	r1, 825ee <__sflush_r+0xba>
   825a8:	f105 0340 	add.w	r3, r5, #64	; 0x40
   825ac:	4299      	cmp	r1, r3
   825ae:	d002      	beq.n	825b6 <__sflush_r+0x82>
   825b0:	4640      	mov	r0, r8
   825b2:	f000 f9c3 	bl	8293c <_free_r>
   825b6:	2000      	movs	r0, #0
   825b8:	6328      	str	r0, [r5, #48]	; 0x30
   825ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   825be:	692e      	ldr	r6, [r5, #16]
   825c0:	b1ae      	cbz	r6, 825ee <__sflush_r+0xba>
   825c2:	0791      	lsls	r1, r2, #30
   825c4:	682c      	ldr	r4, [r5, #0]
   825c6:	bf0c      	ite	eq
   825c8:	696b      	ldreq	r3, [r5, #20]
   825ca:	2300      	movne	r3, #0
   825cc:	602e      	str	r6, [r5, #0]
   825ce:	1ba4      	subs	r4, r4, r6
   825d0:	60ab      	str	r3, [r5, #8]
   825d2:	e00a      	b.n	825ea <__sflush_r+0xb6>
   825d4:	4632      	mov	r2, r6
   825d6:	4623      	mov	r3, r4
   825d8:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   825da:	4640      	mov	r0, r8
   825dc:	69e9      	ldr	r1, [r5, #28]
   825de:	47b8      	blx	r7
   825e0:	2800      	cmp	r0, #0
   825e2:	ebc0 0404 	rsb	r4, r0, r4
   825e6:	4406      	add	r6, r0
   825e8:	dd04      	ble.n	825f4 <__sflush_r+0xc0>
   825ea:	2c00      	cmp	r4, #0
   825ec:	dcf2      	bgt.n	825d4 <__sflush_r+0xa0>
   825ee:	2000      	movs	r0, #0
   825f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   825f4:	89ab      	ldrh	r3, [r5, #12]
   825f6:	f04f 30ff 	mov.w	r0, #4294967295
   825fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   825fe:	81ab      	strh	r3, [r5, #12]
   82600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82604:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   82606:	2a00      	cmp	r2, #0
   82608:	dca2      	bgt.n	82550 <__sflush_r+0x1c>
   8260a:	e7f0      	b.n	825ee <__sflush_r+0xba>
   8260c:	2301      	movs	r3, #1
   8260e:	4640      	mov	r0, r8
   82610:	69e9      	ldr	r1, [r5, #28]
   82612:	47a0      	blx	r4
   82614:	1c43      	adds	r3, r0, #1
   82616:	4602      	mov	r2, r0
   82618:	d01e      	beq.n	82658 <__sflush_r+0x124>
   8261a:	89ab      	ldrh	r3, [r5, #12]
   8261c:	6aac      	ldr	r4, [r5, #40]	; 0x28
   8261e:	e7a6      	b.n	8256e <__sflush_r+0x3a>
   82620:	f8d8 3000 	ldr.w	r3, [r8]
   82624:	b95b      	cbnz	r3, 8263e <__sflush_r+0x10a>
   82626:	89aa      	ldrh	r2, [r5, #12]
   82628:	6929      	ldr	r1, [r5, #16]
   8262a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   8262e:	b292      	uxth	r2, r2
   82630:	606b      	str	r3, [r5, #4]
   82632:	04d3      	lsls	r3, r2, #19
   82634:	81aa      	strh	r2, [r5, #12]
   82636:	6029      	str	r1, [r5, #0]
   82638:	d5b2      	bpl.n	825a0 <__sflush_r+0x6c>
   8263a:	6528      	str	r0, [r5, #80]	; 0x50
   8263c:	e7b0      	b.n	825a0 <__sflush_r+0x6c>
   8263e:	2b1d      	cmp	r3, #29
   82640:	d001      	beq.n	82646 <__sflush_r+0x112>
   82642:	2b16      	cmp	r3, #22
   82644:	d113      	bne.n	8266e <__sflush_r+0x13a>
   82646:	89a9      	ldrh	r1, [r5, #12]
   82648:	692b      	ldr	r3, [r5, #16]
   8264a:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
   8264e:	2200      	movs	r2, #0
   82650:	81a9      	strh	r1, [r5, #12]
   82652:	602b      	str	r3, [r5, #0]
   82654:	606a      	str	r2, [r5, #4]
   82656:	e7a3      	b.n	825a0 <__sflush_r+0x6c>
   82658:	f8d8 3000 	ldr.w	r3, [r8]
   8265c:	2b00      	cmp	r3, #0
   8265e:	d0dc      	beq.n	8261a <__sflush_r+0xe6>
   82660:	2b1d      	cmp	r3, #29
   82662:	d001      	beq.n	82668 <__sflush_r+0x134>
   82664:	2b16      	cmp	r3, #22
   82666:	d1c5      	bne.n	825f4 <__sflush_r+0xc0>
   82668:	f8c8 6000 	str.w	r6, [r8]
   8266c:	e7bf      	b.n	825ee <__sflush_r+0xba>
   8266e:	89ab      	ldrh	r3, [r5, #12]
   82670:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82674:	81ab      	strh	r3, [r5, #12]
   82676:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8267a:	bf00      	nop

0008267c <_fflush_r>:
   8267c:	b510      	push	{r4, lr}
   8267e:	4604      	mov	r4, r0
   82680:	b082      	sub	sp, #8
   82682:	b108      	cbz	r0, 82688 <_fflush_r+0xc>
   82684:	6b83      	ldr	r3, [r0, #56]	; 0x38
   82686:	b153      	cbz	r3, 8269e <_fflush_r+0x22>
   82688:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   8268c:	b908      	cbnz	r0, 82692 <_fflush_r+0x16>
   8268e:	b002      	add	sp, #8
   82690:	bd10      	pop	{r4, pc}
   82692:	4620      	mov	r0, r4
   82694:	b002      	add	sp, #8
   82696:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8269a:	f7ff bf4b 	b.w	82534 <__sflush_r>
   8269e:	9101      	str	r1, [sp, #4]
   826a0:	f000 f808 	bl	826b4 <__sinit>
   826a4:	9901      	ldr	r1, [sp, #4]
   826a6:	e7ef      	b.n	82688 <_fflush_r+0xc>

000826a8 <_cleanup_r>:
   826a8:	4901      	ldr	r1, [pc, #4]	; (826b0 <_cleanup_r+0x8>)
   826aa:	f000 bb9f 	b.w	82dec <_fwalk>
   826ae:	bf00      	nop
   826b0:	00083e15 	.word	0x00083e15

000826b4 <__sinit>:
   826b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   826b8:	6b84      	ldr	r4, [r0, #56]	; 0x38
   826ba:	b083      	sub	sp, #12
   826bc:	4607      	mov	r7, r0
   826be:	2c00      	cmp	r4, #0
   826c0:	d165      	bne.n	8278e <__sinit+0xda>
   826c2:	687d      	ldr	r5, [r7, #4]
   826c4:	4833      	ldr	r0, [pc, #204]	; (82794 <__sinit+0xe0>)
   826c6:	2304      	movs	r3, #4
   826c8:	2103      	movs	r1, #3
   826ca:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   826ce:	63f8      	str	r0, [r7, #60]	; 0x3c
   826d0:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   826d4:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   826d8:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   826dc:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   826e0:	81ab      	strh	r3, [r5, #12]
   826e2:	602c      	str	r4, [r5, #0]
   826e4:	606c      	str	r4, [r5, #4]
   826e6:	60ac      	str	r4, [r5, #8]
   826e8:	666c      	str	r4, [r5, #100]	; 0x64
   826ea:	81ec      	strh	r4, [r5, #14]
   826ec:	612c      	str	r4, [r5, #16]
   826ee:	616c      	str	r4, [r5, #20]
   826f0:	61ac      	str	r4, [r5, #24]
   826f2:	4621      	mov	r1, r4
   826f4:	2208      	movs	r2, #8
   826f6:	f7fe ff35 	bl	81564 <memset>
   826fa:	f8df b09c 	ldr.w	fp, [pc, #156]	; 82798 <__sinit+0xe4>
   826fe:	68be      	ldr	r6, [r7, #8]
   82700:	f8df a098 	ldr.w	sl, [pc, #152]	; 8279c <__sinit+0xe8>
   82704:	f8df 9098 	ldr.w	r9, [pc, #152]	; 827a0 <__sinit+0xec>
   82708:	f8df 8098 	ldr.w	r8, [pc, #152]	; 827a4 <__sinit+0xf0>
   8270c:	2301      	movs	r3, #1
   8270e:	2209      	movs	r2, #9
   82710:	61ed      	str	r5, [r5, #28]
   82712:	f8c5 b020 	str.w	fp, [r5, #32]
   82716:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   8271a:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   8271e:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   82722:	4621      	mov	r1, r4
   82724:	81f3      	strh	r3, [r6, #14]
   82726:	81b2      	strh	r2, [r6, #12]
   82728:	6034      	str	r4, [r6, #0]
   8272a:	6074      	str	r4, [r6, #4]
   8272c:	60b4      	str	r4, [r6, #8]
   8272e:	6674      	str	r4, [r6, #100]	; 0x64
   82730:	6134      	str	r4, [r6, #16]
   82732:	6174      	str	r4, [r6, #20]
   82734:	61b4      	str	r4, [r6, #24]
   82736:	2208      	movs	r2, #8
   82738:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   8273c:	9301      	str	r3, [sp, #4]
   8273e:	f7fe ff11 	bl	81564 <memset>
   82742:	68fd      	ldr	r5, [r7, #12]
   82744:	2012      	movs	r0, #18
   82746:	2202      	movs	r2, #2
   82748:	61f6      	str	r6, [r6, #28]
   8274a:	f8c6 b020 	str.w	fp, [r6, #32]
   8274e:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   82752:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   82756:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   8275a:	4621      	mov	r1, r4
   8275c:	81a8      	strh	r0, [r5, #12]
   8275e:	81ea      	strh	r2, [r5, #14]
   82760:	602c      	str	r4, [r5, #0]
   82762:	606c      	str	r4, [r5, #4]
   82764:	60ac      	str	r4, [r5, #8]
   82766:	666c      	str	r4, [r5, #100]	; 0x64
   82768:	612c      	str	r4, [r5, #16]
   8276a:	616c      	str	r4, [r5, #20]
   8276c:	61ac      	str	r4, [r5, #24]
   8276e:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   82772:	2208      	movs	r2, #8
   82774:	f7fe fef6 	bl	81564 <memset>
   82778:	9b01      	ldr	r3, [sp, #4]
   8277a:	61ed      	str	r5, [r5, #28]
   8277c:	f8c5 b020 	str.w	fp, [r5, #32]
   82780:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   82784:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   82788:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   8278c:	63bb      	str	r3, [r7, #56]	; 0x38
   8278e:	b003      	add	sp, #12
   82790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82794:	000826a9 	.word	0x000826a9
   82798:	00083aa9 	.word	0x00083aa9
   8279c:	00083acd 	.word	0x00083acd
   827a0:	00083b05 	.word	0x00083b05
   827a4:	00083b25 	.word	0x00083b25

000827a8 <__sfp_lock_acquire>:
   827a8:	4770      	bx	lr
   827aa:	bf00      	nop

000827ac <__sfp_lock_release>:
   827ac:	4770      	bx	lr
   827ae:	bf00      	nop

000827b0 <__libc_fini_array>:
   827b0:	b538      	push	{r3, r4, r5, lr}
   827b2:	4d09      	ldr	r5, [pc, #36]	; (827d8 <__libc_fini_array+0x28>)
   827b4:	4c09      	ldr	r4, [pc, #36]	; (827dc <__libc_fini_array+0x2c>)
   827b6:	1b64      	subs	r4, r4, r5
   827b8:	10a4      	asrs	r4, r4, #2
   827ba:	bf18      	it	ne
   827bc:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
   827c0:	d005      	beq.n	827ce <__libc_fini_array+0x1e>
   827c2:	3c01      	subs	r4, #1
   827c4:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   827c8:	4798      	blx	r3
   827ca:	2c00      	cmp	r4, #0
   827cc:	d1f9      	bne.n	827c2 <__libc_fini_array+0x12>
   827ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   827d2:	f001 bbc7 	b.w	83f64 <_fini>
   827d6:	bf00      	nop
   827d8:	00083f70 	.word	0x00083f70
   827dc:	00083f74 	.word	0x00083f74

000827e0 <_fputwc_r>:
   827e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   827e4:	8993      	ldrh	r3, [r2, #12]
   827e6:	460f      	mov	r7, r1
   827e8:	0499      	lsls	r1, r3, #18
   827ea:	b082      	sub	sp, #8
   827ec:	4614      	mov	r4, r2
   827ee:	4680      	mov	r8, r0
   827f0:	d406      	bmi.n	82800 <_fputwc_r+0x20>
   827f2:	6e52      	ldr	r2, [r2, #100]	; 0x64
   827f4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   827f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   827fc:	81a3      	strh	r3, [r4, #12]
   827fe:	6662      	str	r2, [r4, #100]	; 0x64
   82800:	f000 fb1c 	bl	82e3c <__locale_mb_cur_max>
   82804:	2801      	cmp	r0, #1
   82806:	d03e      	beq.n	82886 <_fputwc_r+0xa6>
   82808:	463a      	mov	r2, r7
   8280a:	4640      	mov	r0, r8
   8280c:	a901      	add	r1, sp, #4
   8280e:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   82812:	f001 fa0f 	bl	83c34 <_wcrtomb_r>
   82816:	1c42      	adds	r2, r0, #1
   82818:	4606      	mov	r6, r0
   8281a:	d02d      	beq.n	82878 <_fputwc_r+0x98>
   8281c:	2800      	cmp	r0, #0
   8281e:	d03a      	beq.n	82896 <_fputwc_r+0xb6>
   82820:	f89d 1004 	ldrb.w	r1, [sp, #4]
   82824:	2500      	movs	r5, #0
   82826:	e009      	b.n	8283c <_fputwc_r+0x5c>
   82828:	6823      	ldr	r3, [r4, #0]
   8282a:	7019      	strb	r1, [r3, #0]
   8282c:	6823      	ldr	r3, [r4, #0]
   8282e:	3301      	adds	r3, #1
   82830:	6023      	str	r3, [r4, #0]
   82832:	3501      	adds	r5, #1
   82834:	42b5      	cmp	r5, r6
   82836:	d22e      	bcs.n	82896 <_fputwc_r+0xb6>
   82838:	ab01      	add	r3, sp, #4
   8283a:	5ce9      	ldrb	r1, [r5, r3]
   8283c:	68a3      	ldr	r3, [r4, #8]
   8283e:	3b01      	subs	r3, #1
   82840:	2b00      	cmp	r3, #0
   82842:	60a3      	str	r3, [r4, #8]
   82844:	daf0      	bge.n	82828 <_fputwc_r+0x48>
   82846:	69a2      	ldr	r2, [r4, #24]
   82848:	4293      	cmp	r3, r2
   8284a:	db06      	blt.n	8285a <_fputwc_r+0x7a>
   8284c:	6823      	ldr	r3, [r4, #0]
   8284e:	7019      	strb	r1, [r3, #0]
   82850:	6823      	ldr	r3, [r4, #0]
   82852:	7819      	ldrb	r1, [r3, #0]
   82854:	3301      	adds	r3, #1
   82856:	290a      	cmp	r1, #10
   82858:	d1ea      	bne.n	82830 <_fputwc_r+0x50>
   8285a:	4640      	mov	r0, r8
   8285c:	4622      	mov	r2, r4
   8285e:	f001 f995 	bl	83b8c <__swbuf_r>
   82862:	f1b0 33ff 	subs.w	r3, r0, #4294967295
   82866:	4258      	negs	r0, r3
   82868:	4158      	adcs	r0, r3
   8286a:	2800      	cmp	r0, #0
   8286c:	d0e1      	beq.n	82832 <_fputwc_r+0x52>
   8286e:	f04f 30ff 	mov.w	r0, #4294967295
   82872:	b002      	add	sp, #8
   82874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82878:	89a3      	ldrh	r3, [r4, #12]
   8287a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8287e:	81a3      	strh	r3, [r4, #12]
   82880:	b002      	add	sp, #8
   82882:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82886:	1e7b      	subs	r3, r7, #1
   82888:	2bfe      	cmp	r3, #254	; 0xfe
   8288a:	d8bd      	bhi.n	82808 <_fputwc_r+0x28>
   8288c:	b2f9      	uxtb	r1, r7
   8288e:	4606      	mov	r6, r0
   82890:	f88d 1004 	strb.w	r1, [sp, #4]
   82894:	e7c6      	b.n	82824 <_fputwc_r+0x44>
   82896:	4638      	mov	r0, r7
   82898:	b002      	add	sp, #8
   8289a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8289e:	bf00      	nop

000828a0 <_malloc_trim_r>:
   828a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   828a2:	4d23      	ldr	r5, [pc, #140]	; (82930 <_malloc_trim_r+0x90>)
   828a4:	460f      	mov	r7, r1
   828a6:	4604      	mov	r4, r0
   828a8:	f000 ff08 	bl	836bc <__malloc_lock>
   828ac:	68ab      	ldr	r3, [r5, #8]
   828ae:	685e      	ldr	r6, [r3, #4]
   828b0:	f026 0603 	bic.w	r6, r6, #3
   828b4:	1bf1      	subs	r1, r6, r7
   828b6:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   828ba:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   828be:	f021 010f 	bic.w	r1, r1, #15
   828c2:	f5a1 5780 	sub.w	r7, r1, #4096	; 0x1000
   828c6:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
   828ca:	db07      	blt.n	828dc <_malloc_trim_r+0x3c>
   828cc:	4620      	mov	r0, r4
   828ce:	2100      	movs	r1, #0
   828d0:	f001 f8d8 	bl	83a84 <_sbrk_r>
   828d4:	68ab      	ldr	r3, [r5, #8]
   828d6:	4433      	add	r3, r6
   828d8:	4298      	cmp	r0, r3
   828da:	d004      	beq.n	828e6 <_malloc_trim_r+0x46>
   828dc:	4620      	mov	r0, r4
   828de:	f000 feef 	bl	836c0 <__malloc_unlock>
   828e2:	2000      	movs	r0, #0
   828e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   828e6:	4620      	mov	r0, r4
   828e8:	4279      	negs	r1, r7
   828ea:	f001 f8cb 	bl	83a84 <_sbrk_r>
   828ee:	3001      	adds	r0, #1
   828f0:	d00d      	beq.n	8290e <_malloc_trim_r+0x6e>
   828f2:	4b10      	ldr	r3, [pc, #64]	; (82934 <_malloc_trim_r+0x94>)
   828f4:	68aa      	ldr	r2, [r5, #8]
   828f6:	6819      	ldr	r1, [r3, #0]
   828f8:	1bf6      	subs	r6, r6, r7
   828fa:	f046 0601 	orr.w	r6, r6, #1
   828fe:	4620      	mov	r0, r4
   82900:	1bc9      	subs	r1, r1, r7
   82902:	6056      	str	r6, [r2, #4]
   82904:	6019      	str	r1, [r3, #0]
   82906:	f000 fedb 	bl	836c0 <__malloc_unlock>
   8290a:	2001      	movs	r0, #1
   8290c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8290e:	4620      	mov	r0, r4
   82910:	2100      	movs	r1, #0
   82912:	f001 f8b7 	bl	83a84 <_sbrk_r>
   82916:	68ab      	ldr	r3, [r5, #8]
   82918:	1ac2      	subs	r2, r0, r3
   8291a:	2a0f      	cmp	r2, #15
   8291c:	ddde      	ble.n	828dc <_malloc_trim_r+0x3c>
   8291e:	4d06      	ldr	r5, [pc, #24]	; (82938 <_malloc_trim_r+0x98>)
   82920:	4904      	ldr	r1, [pc, #16]	; (82934 <_malloc_trim_r+0x94>)
   82922:	682d      	ldr	r5, [r5, #0]
   82924:	f042 0201 	orr.w	r2, r2, #1
   82928:	1b40      	subs	r0, r0, r5
   8292a:	605a      	str	r2, [r3, #4]
   8292c:	6008      	str	r0, [r1, #0]
   8292e:	e7d5      	b.n	828dc <_malloc_trim_r+0x3c>
   82930:	20070598 	.word	0x20070598
   82934:	20070af4 	.word	0x20070af4
   82938:	200709a4 	.word	0x200709a4

0008293c <_free_r>:
   8293c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82940:	460d      	mov	r5, r1
   82942:	4606      	mov	r6, r0
   82944:	2900      	cmp	r1, #0
   82946:	d055      	beq.n	829f4 <_free_r+0xb8>
   82948:	f000 feb8 	bl	836bc <__malloc_lock>
   8294c:	f855 1c04 	ldr.w	r1, [r5, #-4]
   82950:	f8df c170 	ldr.w	ip, [pc, #368]	; 82ac4 <_free_r+0x188>
   82954:	f1a5 0408 	sub.w	r4, r5, #8
   82958:	f021 0301 	bic.w	r3, r1, #1
   8295c:	18e2      	adds	r2, r4, r3
   8295e:	f8dc 0008 	ldr.w	r0, [ip, #8]
   82962:	6857      	ldr	r7, [r2, #4]
   82964:	4290      	cmp	r0, r2
   82966:	f027 0703 	bic.w	r7, r7, #3
   8296a:	d068      	beq.n	82a3e <_free_r+0x102>
   8296c:	f011 0101 	ands.w	r1, r1, #1
   82970:	6057      	str	r7, [r2, #4]
   82972:	d032      	beq.n	829da <_free_r+0x9e>
   82974:	2100      	movs	r1, #0
   82976:	19d0      	adds	r0, r2, r7
   82978:	6840      	ldr	r0, [r0, #4]
   8297a:	07c0      	lsls	r0, r0, #31
   8297c:	d406      	bmi.n	8298c <_free_r+0x50>
   8297e:	443b      	add	r3, r7
   82980:	6890      	ldr	r0, [r2, #8]
   82982:	2900      	cmp	r1, #0
   82984:	d04d      	beq.n	82a22 <_free_r+0xe6>
   82986:	68d2      	ldr	r2, [r2, #12]
   82988:	60c2      	str	r2, [r0, #12]
   8298a:	6090      	str	r0, [r2, #8]
   8298c:	f043 0201 	orr.w	r2, r3, #1
   82990:	6062      	str	r2, [r4, #4]
   82992:	50e3      	str	r3, [r4, r3]
   82994:	b9e1      	cbnz	r1, 829d0 <_free_r+0x94>
   82996:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   8299a:	d32d      	bcc.n	829f8 <_free_r+0xbc>
   8299c:	0a5a      	lsrs	r2, r3, #9
   8299e:	2a04      	cmp	r2, #4
   829a0:	d869      	bhi.n	82a76 <_free_r+0x13a>
   829a2:	0998      	lsrs	r0, r3, #6
   829a4:	3038      	adds	r0, #56	; 0x38
   829a6:	0041      	lsls	r1, r0, #1
   829a8:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
   829ac:	f8dc 2008 	ldr.w	r2, [ip, #8]
   829b0:	4944      	ldr	r1, [pc, #272]	; (82ac4 <_free_r+0x188>)
   829b2:	4562      	cmp	r2, ip
   829b4:	d065      	beq.n	82a82 <_free_r+0x146>
   829b6:	6851      	ldr	r1, [r2, #4]
   829b8:	f021 0103 	bic.w	r1, r1, #3
   829bc:	428b      	cmp	r3, r1
   829be:	d202      	bcs.n	829c6 <_free_r+0x8a>
   829c0:	6892      	ldr	r2, [r2, #8]
   829c2:	4594      	cmp	ip, r2
   829c4:	d1f7      	bne.n	829b6 <_free_r+0x7a>
   829c6:	68d3      	ldr	r3, [r2, #12]
   829c8:	60e3      	str	r3, [r4, #12]
   829ca:	60a2      	str	r2, [r4, #8]
   829cc:	609c      	str	r4, [r3, #8]
   829ce:	60d4      	str	r4, [r2, #12]
   829d0:	4630      	mov	r0, r6
   829d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   829d6:	f000 be73 	b.w	836c0 <__malloc_unlock>
   829da:	f855 5c08 	ldr.w	r5, [r5, #-8]
   829de:	f10c 0808 	add.w	r8, ip, #8
   829e2:	1b64      	subs	r4, r4, r5
   829e4:	68a0      	ldr	r0, [r4, #8]
   829e6:	442b      	add	r3, r5
   829e8:	4540      	cmp	r0, r8
   829ea:	d042      	beq.n	82a72 <_free_r+0x136>
   829ec:	68e5      	ldr	r5, [r4, #12]
   829ee:	60c5      	str	r5, [r0, #12]
   829f0:	60a8      	str	r0, [r5, #8]
   829f2:	e7c0      	b.n	82976 <_free_r+0x3a>
   829f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   829f8:	08db      	lsrs	r3, r3, #3
   829fa:	109a      	asrs	r2, r3, #2
   829fc:	2001      	movs	r0, #1
   829fe:	4090      	lsls	r0, r2
   82a00:	f8dc 1004 	ldr.w	r1, [ip, #4]
   82a04:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
   82a08:	689a      	ldr	r2, [r3, #8]
   82a0a:	4301      	orrs	r1, r0
   82a0c:	60a2      	str	r2, [r4, #8]
   82a0e:	60e3      	str	r3, [r4, #12]
   82a10:	f8cc 1004 	str.w	r1, [ip, #4]
   82a14:	4630      	mov	r0, r6
   82a16:	609c      	str	r4, [r3, #8]
   82a18:	60d4      	str	r4, [r2, #12]
   82a1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   82a1e:	f000 be4f 	b.w	836c0 <__malloc_unlock>
   82a22:	4d29      	ldr	r5, [pc, #164]	; (82ac8 <_free_r+0x18c>)
   82a24:	42a8      	cmp	r0, r5
   82a26:	d1ae      	bne.n	82986 <_free_r+0x4a>
   82a28:	f043 0201 	orr.w	r2, r3, #1
   82a2c:	f8cc 4014 	str.w	r4, [ip, #20]
   82a30:	f8cc 4010 	str.w	r4, [ip, #16]
   82a34:	60e0      	str	r0, [r4, #12]
   82a36:	60a0      	str	r0, [r4, #8]
   82a38:	6062      	str	r2, [r4, #4]
   82a3a:	50e3      	str	r3, [r4, r3]
   82a3c:	e7c8      	b.n	829d0 <_free_r+0x94>
   82a3e:	441f      	add	r7, r3
   82a40:	07cb      	lsls	r3, r1, #31
   82a42:	d407      	bmi.n	82a54 <_free_r+0x118>
   82a44:	f855 1c08 	ldr.w	r1, [r5, #-8]
   82a48:	1a64      	subs	r4, r4, r1
   82a4a:	68e3      	ldr	r3, [r4, #12]
   82a4c:	68a2      	ldr	r2, [r4, #8]
   82a4e:	440f      	add	r7, r1
   82a50:	60d3      	str	r3, [r2, #12]
   82a52:	609a      	str	r2, [r3, #8]
   82a54:	4b1d      	ldr	r3, [pc, #116]	; (82acc <_free_r+0x190>)
   82a56:	f047 0201 	orr.w	r2, r7, #1
   82a5a:	681b      	ldr	r3, [r3, #0]
   82a5c:	6062      	str	r2, [r4, #4]
   82a5e:	429f      	cmp	r7, r3
   82a60:	f8cc 4008 	str.w	r4, [ip, #8]
   82a64:	d3b4      	bcc.n	829d0 <_free_r+0x94>
   82a66:	4b1a      	ldr	r3, [pc, #104]	; (82ad0 <_free_r+0x194>)
   82a68:	4630      	mov	r0, r6
   82a6a:	6819      	ldr	r1, [r3, #0]
   82a6c:	f7ff ff18 	bl	828a0 <_malloc_trim_r>
   82a70:	e7ae      	b.n	829d0 <_free_r+0x94>
   82a72:	2101      	movs	r1, #1
   82a74:	e77f      	b.n	82976 <_free_r+0x3a>
   82a76:	2a14      	cmp	r2, #20
   82a78:	d80b      	bhi.n	82a92 <_free_r+0x156>
   82a7a:	f102 005b 	add.w	r0, r2, #91	; 0x5b
   82a7e:	0041      	lsls	r1, r0, #1
   82a80:	e792      	b.n	829a8 <_free_r+0x6c>
   82a82:	1080      	asrs	r0, r0, #2
   82a84:	2501      	movs	r5, #1
   82a86:	4085      	lsls	r5, r0
   82a88:	6848      	ldr	r0, [r1, #4]
   82a8a:	4613      	mov	r3, r2
   82a8c:	4328      	orrs	r0, r5
   82a8e:	6048      	str	r0, [r1, #4]
   82a90:	e79a      	b.n	829c8 <_free_r+0x8c>
   82a92:	2a54      	cmp	r2, #84	; 0x54
   82a94:	d803      	bhi.n	82a9e <_free_r+0x162>
   82a96:	0b18      	lsrs	r0, r3, #12
   82a98:	306e      	adds	r0, #110	; 0x6e
   82a9a:	0041      	lsls	r1, r0, #1
   82a9c:	e784      	b.n	829a8 <_free_r+0x6c>
   82a9e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   82aa2:	d803      	bhi.n	82aac <_free_r+0x170>
   82aa4:	0bd8      	lsrs	r0, r3, #15
   82aa6:	3077      	adds	r0, #119	; 0x77
   82aa8:	0041      	lsls	r1, r0, #1
   82aaa:	e77d      	b.n	829a8 <_free_r+0x6c>
   82aac:	f240 5154 	movw	r1, #1364	; 0x554
   82ab0:	428a      	cmp	r2, r1
   82ab2:	d803      	bhi.n	82abc <_free_r+0x180>
   82ab4:	0c98      	lsrs	r0, r3, #18
   82ab6:	307c      	adds	r0, #124	; 0x7c
   82ab8:	0041      	lsls	r1, r0, #1
   82aba:	e775      	b.n	829a8 <_free_r+0x6c>
   82abc:	21fc      	movs	r1, #252	; 0xfc
   82abe:	207e      	movs	r0, #126	; 0x7e
   82ac0:	e772      	b.n	829a8 <_free_r+0x6c>
   82ac2:	bf00      	nop
   82ac4:	20070598 	.word	0x20070598
   82ac8:	200705a0 	.word	0x200705a0
   82acc:	200709a0 	.word	0x200709a0
   82ad0:	20070af0 	.word	0x20070af0

00082ad4 <__sfvwrite_r>:
   82ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82ad8:	6893      	ldr	r3, [r2, #8]
   82ada:	b083      	sub	sp, #12
   82adc:	4616      	mov	r6, r2
   82ade:	4681      	mov	r9, r0
   82ae0:	460c      	mov	r4, r1
   82ae2:	b32b      	cbz	r3, 82b30 <__sfvwrite_r+0x5c>
   82ae4:	898b      	ldrh	r3, [r1, #12]
   82ae6:	0719      	lsls	r1, r3, #28
   82ae8:	d526      	bpl.n	82b38 <__sfvwrite_r+0x64>
   82aea:	6922      	ldr	r2, [r4, #16]
   82aec:	b322      	cbz	r2, 82b38 <__sfvwrite_r+0x64>
   82aee:	f003 0202 	and.w	r2, r3, #2
   82af2:	b292      	uxth	r2, r2
   82af4:	6835      	ldr	r5, [r6, #0]
   82af6:	2a00      	cmp	r2, #0
   82af8:	d02c      	beq.n	82b54 <__sfvwrite_r+0x80>
   82afa:	f04f 0a00 	mov.w	sl, #0
   82afe:	f8df b2e8 	ldr.w	fp, [pc, #744]	; 82de8 <__sfvwrite_r+0x314>
   82b02:	46d0      	mov	r8, sl
   82b04:	45d8      	cmp	r8, fp
   82b06:	bf34      	ite	cc
   82b08:	4643      	movcc	r3, r8
   82b0a:	465b      	movcs	r3, fp
   82b0c:	4652      	mov	r2, sl
   82b0e:	4648      	mov	r0, r9
   82b10:	f1b8 0f00 	cmp.w	r8, #0
   82b14:	d04f      	beq.n	82bb6 <__sfvwrite_r+0xe2>
   82b16:	69e1      	ldr	r1, [r4, #28]
   82b18:	6a67      	ldr	r7, [r4, #36]	; 0x24
   82b1a:	47b8      	blx	r7
   82b1c:	2800      	cmp	r0, #0
   82b1e:	dd56      	ble.n	82bce <__sfvwrite_r+0xfa>
   82b20:	68b3      	ldr	r3, [r6, #8]
   82b22:	4482      	add	sl, r0
   82b24:	1a1b      	subs	r3, r3, r0
   82b26:	ebc0 0808 	rsb	r8, r0, r8
   82b2a:	60b3      	str	r3, [r6, #8]
   82b2c:	2b00      	cmp	r3, #0
   82b2e:	d1e9      	bne.n	82b04 <__sfvwrite_r+0x30>
   82b30:	2000      	movs	r0, #0
   82b32:	b003      	add	sp, #12
   82b34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82b38:	4648      	mov	r0, r9
   82b3a:	4621      	mov	r1, r4
   82b3c:	f7ff fc88 	bl	82450 <__swsetup_r>
   82b40:	2800      	cmp	r0, #0
   82b42:	f040 8148 	bne.w	82dd6 <__sfvwrite_r+0x302>
   82b46:	89a3      	ldrh	r3, [r4, #12]
   82b48:	6835      	ldr	r5, [r6, #0]
   82b4a:	f003 0202 	and.w	r2, r3, #2
   82b4e:	b292      	uxth	r2, r2
   82b50:	2a00      	cmp	r2, #0
   82b52:	d1d2      	bne.n	82afa <__sfvwrite_r+0x26>
   82b54:	f013 0a01 	ands.w	sl, r3, #1
   82b58:	d142      	bne.n	82be0 <__sfvwrite_r+0x10c>
   82b5a:	46d0      	mov	r8, sl
   82b5c:	f1b8 0f00 	cmp.w	r8, #0
   82b60:	d023      	beq.n	82baa <__sfvwrite_r+0xd6>
   82b62:	059a      	lsls	r2, r3, #22
   82b64:	68a7      	ldr	r7, [r4, #8]
   82b66:	d576      	bpl.n	82c56 <__sfvwrite_r+0x182>
   82b68:	45b8      	cmp	r8, r7
   82b6a:	f0c0 80a4 	bcc.w	82cb6 <__sfvwrite_r+0x1e2>
   82b6e:	f413 6f90 	tst.w	r3, #1152	; 0x480
   82b72:	f040 80b2 	bne.w	82cda <__sfvwrite_r+0x206>
   82b76:	6820      	ldr	r0, [r4, #0]
   82b78:	46bb      	mov	fp, r7
   82b7a:	4651      	mov	r1, sl
   82b7c:	465a      	mov	r2, fp
   82b7e:	f000 fd37 	bl	835f0 <memmove>
   82b82:	68a2      	ldr	r2, [r4, #8]
   82b84:	6821      	ldr	r1, [r4, #0]
   82b86:	1bd2      	subs	r2, r2, r7
   82b88:	eb01 030b 	add.w	r3, r1, fp
   82b8c:	60a2      	str	r2, [r4, #8]
   82b8e:	6023      	str	r3, [r4, #0]
   82b90:	4642      	mov	r2, r8
   82b92:	68b3      	ldr	r3, [r6, #8]
   82b94:	4492      	add	sl, r2
   82b96:	1a9b      	subs	r3, r3, r2
   82b98:	ebc2 0808 	rsb	r8, r2, r8
   82b9c:	60b3      	str	r3, [r6, #8]
   82b9e:	2b00      	cmp	r3, #0
   82ba0:	d0c6      	beq.n	82b30 <__sfvwrite_r+0x5c>
   82ba2:	89a3      	ldrh	r3, [r4, #12]
   82ba4:	f1b8 0f00 	cmp.w	r8, #0
   82ba8:	d1db      	bne.n	82b62 <__sfvwrite_r+0x8e>
   82baa:	f8d5 a000 	ldr.w	sl, [r5]
   82bae:	f8d5 8004 	ldr.w	r8, [r5, #4]
   82bb2:	3508      	adds	r5, #8
   82bb4:	e7d2      	b.n	82b5c <__sfvwrite_r+0x88>
   82bb6:	f8d5 a000 	ldr.w	sl, [r5]
   82bba:	f8d5 8004 	ldr.w	r8, [r5, #4]
   82bbe:	3508      	adds	r5, #8
   82bc0:	e7a0      	b.n	82b04 <__sfvwrite_r+0x30>
   82bc2:	4648      	mov	r0, r9
   82bc4:	4621      	mov	r1, r4
   82bc6:	f7ff fd59 	bl	8267c <_fflush_r>
   82bca:	2800      	cmp	r0, #0
   82bcc:	d059      	beq.n	82c82 <__sfvwrite_r+0x1ae>
   82bce:	89a3      	ldrh	r3, [r4, #12]
   82bd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82bd4:	f04f 30ff 	mov.w	r0, #4294967295
   82bd8:	81a3      	strh	r3, [r4, #12]
   82bda:	b003      	add	sp, #12
   82bdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82be0:	4692      	mov	sl, r2
   82be2:	9201      	str	r2, [sp, #4]
   82be4:	4693      	mov	fp, r2
   82be6:	4690      	mov	r8, r2
   82be8:	f1b8 0f00 	cmp.w	r8, #0
   82bec:	d02b      	beq.n	82c46 <__sfvwrite_r+0x172>
   82bee:	9f01      	ldr	r7, [sp, #4]
   82bf0:	2f00      	cmp	r7, #0
   82bf2:	d064      	beq.n	82cbe <__sfvwrite_r+0x1ea>
   82bf4:	6820      	ldr	r0, [r4, #0]
   82bf6:	6921      	ldr	r1, [r4, #16]
   82bf8:	45c2      	cmp	sl, r8
   82bfa:	bf34      	ite	cc
   82bfc:	4653      	movcc	r3, sl
   82bfe:	4643      	movcs	r3, r8
   82c00:	4288      	cmp	r0, r1
   82c02:	461f      	mov	r7, r3
   82c04:	f8d4 c008 	ldr.w	ip, [r4, #8]
   82c08:	6962      	ldr	r2, [r4, #20]
   82c0a:	d903      	bls.n	82c14 <__sfvwrite_r+0x140>
   82c0c:	4494      	add	ip, r2
   82c0e:	4563      	cmp	r3, ip
   82c10:	f300 80ae 	bgt.w	82d70 <__sfvwrite_r+0x29c>
   82c14:	4293      	cmp	r3, r2
   82c16:	db36      	blt.n	82c86 <__sfvwrite_r+0x1b2>
   82c18:	4613      	mov	r3, r2
   82c1a:	6a67      	ldr	r7, [r4, #36]	; 0x24
   82c1c:	4648      	mov	r0, r9
   82c1e:	69e1      	ldr	r1, [r4, #28]
   82c20:	465a      	mov	r2, fp
   82c22:	47b8      	blx	r7
   82c24:	1e07      	subs	r7, r0, #0
   82c26:	ddd2      	ble.n	82bce <__sfvwrite_r+0xfa>
   82c28:	ebba 0a07 	subs.w	sl, sl, r7
   82c2c:	d03a      	beq.n	82ca4 <__sfvwrite_r+0x1d0>
   82c2e:	68b3      	ldr	r3, [r6, #8]
   82c30:	44bb      	add	fp, r7
   82c32:	1bdb      	subs	r3, r3, r7
   82c34:	ebc7 0808 	rsb	r8, r7, r8
   82c38:	60b3      	str	r3, [r6, #8]
   82c3a:	2b00      	cmp	r3, #0
   82c3c:	f43f af78 	beq.w	82b30 <__sfvwrite_r+0x5c>
   82c40:	f1b8 0f00 	cmp.w	r8, #0
   82c44:	d1d3      	bne.n	82bee <__sfvwrite_r+0x11a>
   82c46:	2700      	movs	r7, #0
   82c48:	f8d5 b000 	ldr.w	fp, [r5]
   82c4c:	f8d5 8004 	ldr.w	r8, [r5, #4]
   82c50:	9701      	str	r7, [sp, #4]
   82c52:	3508      	adds	r5, #8
   82c54:	e7c8      	b.n	82be8 <__sfvwrite_r+0x114>
   82c56:	6820      	ldr	r0, [r4, #0]
   82c58:	6923      	ldr	r3, [r4, #16]
   82c5a:	4298      	cmp	r0, r3
   82c5c:	d802      	bhi.n	82c64 <__sfvwrite_r+0x190>
   82c5e:	6963      	ldr	r3, [r4, #20]
   82c60:	4598      	cmp	r8, r3
   82c62:	d272      	bcs.n	82d4a <__sfvwrite_r+0x276>
   82c64:	45b8      	cmp	r8, r7
   82c66:	bf38      	it	cc
   82c68:	4647      	movcc	r7, r8
   82c6a:	463a      	mov	r2, r7
   82c6c:	4651      	mov	r1, sl
   82c6e:	f000 fcbf 	bl	835f0 <memmove>
   82c72:	68a3      	ldr	r3, [r4, #8]
   82c74:	6822      	ldr	r2, [r4, #0]
   82c76:	1bdb      	subs	r3, r3, r7
   82c78:	443a      	add	r2, r7
   82c7a:	60a3      	str	r3, [r4, #8]
   82c7c:	6022      	str	r2, [r4, #0]
   82c7e:	2b00      	cmp	r3, #0
   82c80:	d09f      	beq.n	82bc2 <__sfvwrite_r+0xee>
   82c82:	463a      	mov	r2, r7
   82c84:	e785      	b.n	82b92 <__sfvwrite_r+0xbe>
   82c86:	461a      	mov	r2, r3
   82c88:	4659      	mov	r1, fp
   82c8a:	9300      	str	r3, [sp, #0]
   82c8c:	f000 fcb0 	bl	835f0 <memmove>
   82c90:	9b00      	ldr	r3, [sp, #0]
   82c92:	68a1      	ldr	r1, [r4, #8]
   82c94:	6822      	ldr	r2, [r4, #0]
   82c96:	1ac9      	subs	r1, r1, r3
   82c98:	ebba 0a07 	subs.w	sl, sl, r7
   82c9c:	4413      	add	r3, r2
   82c9e:	60a1      	str	r1, [r4, #8]
   82ca0:	6023      	str	r3, [r4, #0]
   82ca2:	d1c4      	bne.n	82c2e <__sfvwrite_r+0x15a>
   82ca4:	4648      	mov	r0, r9
   82ca6:	4621      	mov	r1, r4
   82ca8:	f7ff fce8 	bl	8267c <_fflush_r>
   82cac:	2800      	cmp	r0, #0
   82cae:	d18e      	bne.n	82bce <__sfvwrite_r+0xfa>
   82cb0:	f8cd a004 	str.w	sl, [sp, #4]
   82cb4:	e7bb      	b.n	82c2e <__sfvwrite_r+0x15a>
   82cb6:	6820      	ldr	r0, [r4, #0]
   82cb8:	4647      	mov	r7, r8
   82cba:	46c3      	mov	fp, r8
   82cbc:	e75d      	b.n	82b7a <__sfvwrite_r+0xa6>
   82cbe:	4658      	mov	r0, fp
   82cc0:	210a      	movs	r1, #10
   82cc2:	4642      	mov	r2, r8
   82cc4:	f000 fbd4 	bl	83470 <memchr>
   82cc8:	2800      	cmp	r0, #0
   82cca:	d07f      	beq.n	82dcc <__sfvwrite_r+0x2f8>
   82ccc:	f100 0a01 	add.w	sl, r0, #1
   82cd0:	2701      	movs	r7, #1
   82cd2:	ebcb 0a0a 	rsb	sl, fp, sl
   82cd6:	9701      	str	r7, [sp, #4]
   82cd8:	e78c      	b.n	82bf4 <__sfvwrite_r+0x120>
   82cda:	6822      	ldr	r2, [r4, #0]
   82cdc:	6921      	ldr	r1, [r4, #16]
   82cde:	6967      	ldr	r7, [r4, #20]
   82ce0:	ebc1 0c02 	rsb	ip, r1, r2
   82ce4:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   82ce8:	f10c 0201 	add.w	r2, ip, #1
   82cec:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   82cf0:	4442      	add	r2, r8
   82cf2:	107f      	asrs	r7, r7, #1
   82cf4:	4297      	cmp	r7, r2
   82cf6:	bf34      	ite	cc
   82cf8:	4617      	movcc	r7, r2
   82cfa:	463a      	movcs	r2, r7
   82cfc:	055b      	lsls	r3, r3, #21
   82cfe:	d54f      	bpl.n	82da0 <__sfvwrite_r+0x2cc>
   82d00:	4611      	mov	r1, r2
   82d02:	4648      	mov	r0, r9
   82d04:	f8cd c000 	str.w	ip, [sp]
   82d08:	f000 f916 	bl	82f38 <_malloc_r>
   82d0c:	f8dd c000 	ldr.w	ip, [sp]
   82d10:	4683      	mov	fp, r0
   82d12:	2800      	cmp	r0, #0
   82d14:	d062      	beq.n	82ddc <__sfvwrite_r+0x308>
   82d16:	4662      	mov	r2, ip
   82d18:	6921      	ldr	r1, [r4, #16]
   82d1a:	f8cd c000 	str.w	ip, [sp]
   82d1e:	f000 fbf1 	bl	83504 <memcpy>
   82d22:	89a2      	ldrh	r2, [r4, #12]
   82d24:	f8dd c000 	ldr.w	ip, [sp]
   82d28:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   82d2c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   82d30:	81a2      	strh	r2, [r4, #12]
   82d32:	eb0b 000c 	add.w	r0, fp, ip
   82d36:	ebcc 0207 	rsb	r2, ip, r7
   82d3a:	f8c4 b010 	str.w	fp, [r4, #16]
   82d3e:	6167      	str	r7, [r4, #20]
   82d40:	6020      	str	r0, [r4, #0]
   82d42:	60a2      	str	r2, [r4, #8]
   82d44:	4647      	mov	r7, r8
   82d46:	46c3      	mov	fp, r8
   82d48:	e717      	b.n	82b7a <__sfvwrite_r+0xa6>
   82d4a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   82d4e:	4590      	cmp	r8, r2
   82d50:	bf38      	it	cc
   82d52:	4642      	movcc	r2, r8
   82d54:	fb92 f2f3 	sdiv	r2, r2, r3
   82d58:	fb02 f303 	mul.w	r3, r2, r3
   82d5c:	6a67      	ldr	r7, [r4, #36]	; 0x24
   82d5e:	4648      	mov	r0, r9
   82d60:	69e1      	ldr	r1, [r4, #28]
   82d62:	4652      	mov	r2, sl
   82d64:	47b8      	blx	r7
   82d66:	2800      	cmp	r0, #0
   82d68:	f77f af31 	ble.w	82bce <__sfvwrite_r+0xfa>
   82d6c:	4602      	mov	r2, r0
   82d6e:	e710      	b.n	82b92 <__sfvwrite_r+0xbe>
   82d70:	4662      	mov	r2, ip
   82d72:	4659      	mov	r1, fp
   82d74:	f8cd c000 	str.w	ip, [sp]
   82d78:	f000 fc3a 	bl	835f0 <memmove>
   82d7c:	f8dd c000 	ldr.w	ip, [sp]
   82d80:	6823      	ldr	r3, [r4, #0]
   82d82:	4648      	mov	r0, r9
   82d84:	4463      	add	r3, ip
   82d86:	6023      	str	r3, [r4, #0]
   82d88:	4621      	mov	r1, r4
   82d8a:	f8cd c000 	str.w	ip, [sp]
   82d8e:	f7ff fc75 	bl	8267c <_fflush_r>
   82d92:	f8dd c000 	ldr.w	ip, [sp]
   82d96:	2800      	cmp	r0, #0
   82d98:	f47f af19 	bne.w	82bce <__sfvwrite_r+0xfa>
   82d9c:	4667      	mov	r7, ip
   82d9e:	e743      	b.n	82c28 <__sfvwrite_r+0x154>
   82da0:	4648      	mov	r0, r9
   82da2:	f8cd c000 	str.w	ip, [sp]
   82da6:	f000 fc8d 	bl	836c4 <_realloc_r>
   82daa:	f8dd c000 	ldr.w	ip, [sp]
   82dae:	4683      	mov	fp, r0
   82db0:	2800      	cmp	r0, #0
   82db2:	d1be      	bne.n	82d32 <__sfvwrite_r+0x25e>
   82db4:	4648      	mov	r0, r9
   82db6:	6921      	ldr	r1, [r4, #16]
   82db8:	f7ff fdc0 	bl	8293c <_free_r>
   82dbc:	89a3      	ldrh	r3, [r4, #12]
   82dbe:	220c      	movs	r2, #12
   82dc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   82dc4:	b29b      	uxth	r3, r3
   82dc6:	f8c9 2000 	str.w	r2, [r9]
   82dca:	e701      	b.n	82bd0 <__sfvwrite_r+0xfc>
   82dcc:	2701      	movs	r7, #1
   82dce:	f108 0a01 	add.w	sl, r8, #1
   82dd2:	9701      	str	r7, [sp, #4]
   82dd4:	e70e      	b.n	82bf4 <__sfvwrite_r+0x120>
   82dd6:	f04f 30ff 	mov.w	r0, #4294967295
   82dda:	e6aa      	b.n	82b32 <__sfvwrite_r+0x5e>
   82ddc:	230c      	movs	r3, #12
   82dde:	f8c9 3000 	str.w	r3, [r9]
   82de2:	89a3      	ldrh	r3, [r4, #12]
   82de4:	e6f4      	b.n	82bd0 <__sfvwrite_r+0xfc>
   82de6:	bf00      	nop
   82de8:	7ffffc00 	.word	0x7ffffc00

00082dec <_fwalk>:
   82dec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82df0:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
   82df4:	4688      	mov	r8, r1
   82df6:	d019      	beq.n	82e2c <_fwalk+0x40>
   82df8:	2600      	movs	r6, #0
   82dfa:	687d      	ldr	r5, [r7, #4]
   82dfc:	68bc      	ldr	r4, [r7, #8]
   82dfe:	3d01      	subs	r5, #1
   82e00:	d40e      	bmi.n	82e20 <_fwalk+0x34>
   82e02:	89a3      	ldrh	r3, [r4, #12]
   82e04:	3d01      	subs	r5, #1
   82e06:	2b01      	cmp	r3, #1
   82e08:	d906      	bls.n	82e18 <_fwalk+0x2c>
   82e0a:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   82e0e:	4620      	mov	r0, r4
   82e10:	3301      	adds	r3, #1
   82e12:	d001      	beq.n	82e18 <_fwalk+0x2c>
   82e14:	47c0      	blx	r8
   82e16:	4306      	orrs	r6, r0
   82e18:	1c6b      	adds	r3, r5, #1
   82e1a:	f104 0468 	add.w	r4, r4, #104	; 0x68
   82e1e:	d1f0      	bne.n	82e02 <_fwalk+0x16>
   82e20:	683f      	ldr	r7, [r7, #0]
   82e22:	2f00      	cmp	r7, #0
   82e24:	d1e9      	bne.n	82dfa <_fwalk+0xe>
   82e26:	4630      	mov	r0, r6
   82e28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82e2c:	463e      	mov	r6, r7
   82e2e:	4630      	mov	r0, r6
   82e30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00082e34 <__locale_charset>:
   82e34:	4800      	ldr	r0, [pc, #0]	; (82e38 <__locale_charset+0x4>)
   82e36:	4770      	bx	lr
   82e38:	20070574 	.word	0x20070574

00082e3c <__locale_mb_cur_max>:
   82e3c:	4b01      	ldr	r3, [pc, #4]	; (82e44 <__locale_mb_cur_max+0x8>)
   82e3e:	6818      	ldr	r0, [r3, #0]
   82e40:	4770      	bx	lr
   82e42:	bf00      	nop
   82e44:	20070594 	.word	0x20070594

00082e48 <__smakebuf_r>:
   82e48:	b5f0      	push	{r4, r5, r6, r7, lr}
   82e4a:	898b      	ldrh	r3, [r1, #12]
   82e4c:	b091      	sub	sp, #68	; 0x44
   82e4e:	b29a      	uxth	r2, r3
   82e50:	0796      	lsls	r6, r2, #30
   82e52:	460c      	mov	r4, r1
   82e54:	4605      	mov	r5, r0
   82e56:	d437      	bmi.n	82ec8 <__smakebuf_r+0x80>
   82e58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   82e5c:	2900      	cmp	r1, #0
   82e5e:	db17      	blt.n	82e90 <__smakebuf_r+0x48>
   82e60:	aa01      	add	r2, sp, #4
   82e62:	f000 ffdf 	bl	83e24 <_fstat_r>
   82e66:	2800      	cmp	r0, #0
   82e68:	db10      	blt.n	82e8c <__smakebuf_r+0x44>
   82e6a:	9b02      	ldr	r3, [sp, #8]
   82e6c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
   82e70:	f5b3 5100 	subs.w	r1, r3, #8192	; 0x2000
   82e74:	424f      	negs	r7, r1
   82e76:	414f      	adcs	r7, r1
   82e78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   82e7c:	d02c      	beq.n	82ed8 <__smakebuf_r+0x90>
   82e7e:	89a3      	ldrh	r3, [r4, #12]
   82e80:	f44f 6680 	mov.w	r6, #1024	; 0x400
   82e84:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   82e88:	81a3      	strh	r3, [r4, #12]
   82e8a:	e00b      	b.n	82ea4 <__smakebuf_r+0x5c>
   82e8c:	89a3      	ldrh	r3, [r4, #12]
   82e8e:	b29a      	uxth	r2, r3
   82e90:	f012 0f80 	tst.w	r2, #128	; 0x80
   82e94:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   82e98:	81a3      	strh	r3, [r4, #12]
   82e9a:	bf14      	ite	ne
   82e9c:	2640      	movne	r6, #64	; 0x40
   82e9e:	f44f 6680 	moveq.w	r6, #1024	; 0x400
   82ea2:	2700      	movs	r7, #0
   82ea4:	4628      	mov	r0, r5
   82ea6:	4631      	mov	r1, r6
   82ea8:	f000 f846 	bl	82f38 <_malloc_r>
   82eac:	89a3      	ldrh	r3, [r4, #12]
   82eae:	2800      	cmp	r0, #0
   82eb0:	d029      	beq.n	82f06 <__smakebuf_r+0xbe>
   82eb2:	4a1b      	ldr	r2, [pc, #108]	; (82f20 <__smakebuf_r+0xd8>)
   82eb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   82eb8:	63ea      	str	r2, [r5, #60]	; 0x3c
   82eba:	81a3      	strh	r3, [r4, #12]
   82ebc:	6020      	str	r0, [r4, #0]
   82ebe:	6120      	str	r0, [r4, #16]
   82ec0:	6166      	str	r6, [r4, #20]
   82ec2:	b9a7      	cbnz	r7, 82eee <__smakebuf_r+0xa6>
   82ec4:	b011      	add	sp, #68	; 0x44
   82ec6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82ec8:	f101 0343 	add.w	r3, r1, #67	; 0x43
   82ecc:	2201      	movs	r2, #1
   82ece:	600b      	str	r3, [r1, #0]
   82ed0:	610b      	str	r3, [r1, #16]
   82ed2:	614a      	str	r2, [r1, #20]
   82ed4:	b011      	add	sp, #68	; 0x44
   82ed6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82ed8:	4a12      	ldr	r2, [pc, #72]	; (82f24 <__smakebuf_r+0xdc>)
   82eda:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   82edc:	4293      	cmp	r3, r2
   82ede:	d1ce      	bne.n	82e7e <__smakebuf_r+0x36>
   82ee0:	89a3      	ldrh	r3, [r4, #12]
   82ee2:	f44f 6680 	mov.w	r6, #1024	; 0x400
   82ee6:	4333      	orrs	r3, r6
   82ee8:	81a3      	strh	r3, [r4, #12]
   82eea:	64e6      	str	r6, [r4, #76]	; 0x4c
   82eec:	e7da      	b.n	82ea4 <__smakebuf_r+0x5c>
   82eee:	4628      	mov	r0, r5
   82ef0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   82ef4:	f000 ffaa 	bl	83e4c <_isatty_r>
   82ef8:	2800      	cmp	r0, #0
   82efa:	d0e3      	beq.n	82ec4 <__smakebuf_r+0x7c>
   82efc:	89a3      	ldrh	r3, [r4, #12]
   82efe:	f043 0301 	orr.w	r3, r3, #1
   82f02:	81a3      	strh	r3, [r4, #12]
   82f04:	e7de      	b.n	82ec4 <__smakebuf_r+0x7c>
   82f06:	059a      	lsls	r2, r3, #22
   82f08:	d4dc      	bmi.n	82ec4 <__smakebuf_r+0x7c>
   82f0a:	f104 0243 	add.w	r2, r4, #67	; 0x43
   82f0e:	f043 0302 	orr.w	r3, r3, #2
   82f12:	2101      	movs	r1, #1
   82f14:	81a3      	strh	r3, [r4, #12]
   82f16:	6022      	str	r2, [r4, #0]
   82f18:	6122      	str	r2, [r4, #16]
   82f1a:	6161      	str	r1, [r4, #20]
   82f1c:	e7d2      	b.n	82ec4 <__smakebuf_r+0x7c>
   82f1e:	bf00      	nop
   82f20:	000826a9 	.word	0x000826a9
   82f24:	00083b05 	.word	0x00083b05

00082f28 <malloc>:
   82f28:	4b02      	ldr	r3, [pc, #8]	; (82f34 <malloc+0xc>)
   82f2a:	4601      	mov	r1, r0
   82f2c:	6818      	ldr	r0, [r3, #0]
   82f2e:	f000 b803 	b.w	82f38 <_malloc_r>
   82f32:	bf00      	nop
   82f34:	20070570 	.word	0x20070570

00082f38 <_malloc_r>:
   82f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82f3c:	f101 050b 	add.w	r5, r1, #11
   82f40:	2d16      	cmp	r5, #22
   82f42:	b083      	sub	sp, #12
   82f44:	4606      	mov	r6, r0
   82f46:	d927      	bls.n	82f98 <_malloc_r+0x60>
   82f48:	f035 0507 	bics.w	r5, r5, #7
   82f4c:	d427      	bmi.n	82f9e <_malloc_r+0x66>
   82f4e:	42a9      	cmp	r1, r5
   82f50:	d825      	bhi.n	82f9e <_malloc_r+0x66>
   82f52:	4630      	mov	r0, r6
   82f54:	f000 fbb2 	bl	836bc <__malloc_lock>
   82f58:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   82f5c:	d226      	bcs.n	82fac <_malloc_r+0x74>
   82f5e:	4fc1      	ldr	r7, [pc, #772]	; (83264 <_malloc_r+0x32c>)
   82f60:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
   82f64:	eb07 03cc 	add.w	r3, r7, ip, lsl #3
   82f68:	68dc      	ldr	r4, [r3, #12]
   82f6a:	429c      	cmp	r4, r3
   82f6c:	f000 81d2 	beq.w	83314 <_malloc_r+0x3dc>
   82f70:	6863      	ldr	r3, [r4, #4]
   82f72:	68e2      	ldr	r2, [r4, #12]
   82f74:	f023 0303 	bic.w	r3, r3, #3
   82f78:	4423      	add	r3, r4
   82f7a:	6858      	ldr	r0, [r3, #4]
   82f7c:	68a1      	ldr	r1, [r4, #8]
   82f7e:	f040 0501 	orr.w	r5, r0, #1
   82f82:	60ca      	str	r2, [r1, #12]
   82f84:	4630      	mov	r0, r6
   82f86:	6091      	str	r1, [r2, #8]
   82f88:	605d      	str	r5, [r3, #4]
   82f8a:	f000 fb99 	bl	836c0 <__malloc_unlock>
   82f8e:	3408      	adds	r4, #8
   82f90:	4620      	mov	r0, r4
   82f92:	b003      	add	sp, #12
   82f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82f98:	2510      	movs	r5, #16
   82f9a:	42a9      	cmp	r1, r5
   82f9c:	d9d9      	bls.n	82f52 <_malloc_r+0x1a>
   82f9e:	2400      	movs	r4, #0
   82fa0:	230c      	movs	r3, #12
   82fa2:	4620      	mov	r0, r4
   82fa4:	6033      	str	r3, [r6, #0]
   82fa6:	b003      	add	sp, #12
   82fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82fac:	ea5f 2c55 	movs.w	ip, r5, lsr #9
   82fb0:	f000 8089 	beq.w	830c6 <_malloc_r+0x18e>
   82fb4:	f1bc 0f04 	cmp.w	ip, #4
   82fb8:	f200 8160 	bhi.w	8327c <_malloc_r+0x344>
   82fbc:	ea4f 1c95 	mov.w	ip, r5, lsr #6
   82fc0:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
   82fc4:	ea4f 014c 	mov.w	r1, ip, lsl #1
   82fc8:	4fa6      	ldr	r7, [pc, #664]	; (83264 <_malloc_r+0x32c>)
   82fca:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   82fce:	68cc      	ldr	r4, [r1, #12]
   82fd0:	42a1      	cmp	r1, r4
   82fd2:	d105      	bne.n	82fe0 <_malloc_r+0xa8>
   82fd4:	e00c      	b.n	82ff0 <_malloc_r+0xb8>
   82fd6:	2b00      	cmp	r3, #0
   82fd8:	da79      	bge.n	830ce <_malloc_r+0x196>
   82fda:	68e4      	ldr	r4, [r4, #12]
   82fdc:	42a1      	cmp	r1, r4
   82fde:	d007      	beq.n	82ff0 <_malloc_r+0xb8>
   82fe0:	6862      	ldr	r2, [r4, #4]
   82fe2:	f022 0203 	bic.w	r2, r2, #3
   82fe6:	1b53      	subs	r3, r2, r5
   82fe8:	2b0f      	cmp	r3, #15
   82fea:	ddf4      	ble.n	82fd6 <_malloc_r+0x9e>
   82fec:	f10c 3cff 	add.w	ip, ip, #4294967295
   82ff0:	f10c 0c01 	add.w	ip, ip, #1
   82ff4:	4b9b      	ldr	r3, [pc, #620]	; (83264 <_malloc_r+0x32c>)
   82ff6:	693c      	ldr	r4, [r7, #16]
   82ff8:	f103 0e08 	add.w	lr, r3, #8
   82ffc:	4574      	cmp	r4, lr
   82ffe:	f000 817e 	beq.w	832fe <_malloc_r+0x3c6>
   83002:	6861      	ldr	r1, [r4, #4]
   83004:	f021 0103 	bic.w	r1, r1, #3
   83008:	1b4a      	subs	r2, r1, r5
   8300a:	2a0f      	cmp	r2, #15
   8300c:	f300 8164 	bgt.w	832d8 <_malloc_r+0x3a0>
   83010:	2a00      	cmp	r2, #0
   83012:	f8c3 e014 	str.w	lr, [r3, #20]
   83016:	f8c3 e010 	str.w	lr, [r3, #16]
   8301a:	da69      	bge.n	830f0 <_malloc_r+0x1b8>
   8301c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   83020:	f080 813a 	bcs.w	83298 <_malloc_r+0x360>
   83024:	08c9      	lsrs	r1, r1, #3
   83026:	108a      	asrs	r2, r1, #2
   83028:	f04f 0801 	mov.w	r8, #1
   8302c:	fa08 f802 	lsl.w	r8, r8, r2
   83030:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   83034:	685a      	ldr	r2, [r3, #4]
   83036:	6888      	ldr	r0, [r1, #8]
   83038:	ea48 0202 	orr.w	r2, r8, r2
   8303c:	60a0      	str	r0, [r4, #8]
   8303e:	60e1      	str	r1, [r4, #12]
   83040:	605a      	str	r2, [r3, #4]
   83042:	608c      	str	r4, [r1, #8]
   83044:	60c4      	str	r4, [r0, #12]
   83046:	ea4f 03ac 	mov.w	r3, ip, asr #2
   8304a:	2001      	movs	r0, #1
   8304c:	4098      	lsls	r0, r3
   8304e:	4290      	cmp	r0, r2
   83050:	d85b      	bhi.n	8310a <_malloc_r+0x1d2>
   83052:	4202      	tst	r2, r0
   83054:	d106      	bne.n	83064 <_malloc_r+0x12c>
   83056:	f02c 0c03 	bic.w	ip, ip, #3
   8305a:	0040      	lsls	r0, r0, #1
   8305c:	4202      	tst	r2, r0
   8305e:	f10c 0c04 	add.w	ip, ip, #4
   83062:	d0fa      	beq.n	8305a <_malloc_r+0x122>
   83064:	eb07 08cc 	add.w	r8, r7, ip, lsl #3
   83068:	4644      	mov	r4, r8
   8306a:	46e1      	mov	r9, ip
   8306c:	68e3      	ldr	r3, [r4, #12]
   8306e:	429c      	cmp	r4, r3
   83070:	d107      	bne.n	83082 <_malloc_r+0x14a>
   83072:	e146      	b.n	83302 <_malloc_r+0x3ca>
   83074:	2a00      	cmp	r2, #0
   83076:	f280 8157 	bge.w	83328 <_malloc_r+0x3f0>
   8307a:	68db      	ldr	r3, [r3, #12]
   8307c:	429c      	cmp	r4, r3
   8307e:	f000 8140 	beq.w	83302 <_malloc_r+0x3ca>
   83082:	6859      	ldr	r1, [r3, #4]
   83084:	f021 0103 	bic.w	r1, r1, #3
   83088:	1b4a      	subs	r2, r1, r5
   8308a:	2a0f      	cmp	r2, #15
   8308c:	ddf2      	ble.n	83074 <_malloc_r+0x13c>
   8308e:	461c      	mov	r4, r3
   83090:	f854 cf08 	ldr.w	ip, [r4, #8]!
   83094:	68d9      	ldr	r1, [r3, #12]
   83096:	f045 0901 	orr.w	r9, r5, #1
   8309a:	f042 0801 	orr.w	r8, r2, #1
   8309e:	441d      	add	r5, r3
   830a0:	f8c3 9004 	str.w	r9, [r3, #4]
   830a4:	4630      	mov	r0, r6
   830a6:	f8cc 100c 	str.w	r1, [ip, #12]
   830aa:	f8c1 c008 	str.w	ip, [r1, #8]
   830ae:	617d      	str	r5, [r7, #20]
   830b0:	613d      	str	r5, [r7, #16]
   830b2:	f8c5 e00c 	str.w	lr, [r5, #12]
   830b6:	f8c5 e008 	str.w	lr, [r5, #8]
   830ba:	f8c5 8004 	str.w	r8, [r5, #4]
   830be:	50aa      	str	r2, [r5, r2]
   830c0:	f000 fafe 	bl	836c0 <__malloc_unlock>
   830c4:	e764      	b.n	82f90 <_malloc_r+0x58>
   830c6:	217e      	movs	r1, #126	; 0x7e
   830c8:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
   830cc:	e77c      	b.n	82fc8 <_malloc_r+0x90>
   830ce:	4422      	add	r2, r4
   830d0:	6850      	ldr	r0, [r2, #4]
   830d2:	68e3      	ldr	r3, [r4, #12]
   830d4:	68a1      	ldr	r1, [r4, #8]
   830d6:	f040 0501 	orr.w	r5, r0, #1
   830da:	60cb      	str	r3, [r1, #12]
   830dc:	4630      	mov	r0, r6
   830de:	6099      	str	r1, [r3, #8]
   830e0:	6055      	str	r5, [r2, #4]
   830e2:	f000 faed 	bl	836c0 <__malloc_unlock>
   830e6:	3408      	adds	r4, #8
   830e8:	4620      	mov	r0, r4
   830ea:	b003      	add	sp, #12
   830ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   830f0:	4421      	add	r1, r4
   830f2:	684b      	ldr	r3, [r1, #4]
   830f4:	4630      	mov	r0, r6
   830f6:	f043 0301 	orr.w	r3, r3, #1
   830fa:	604b      	str	r3, [r1, #4]
   830fc:	f000 fae0 	bl	836c0 <__malloc_unlock>
   83100:	3408      	adds	r4, #8
   83102:	4620      	mov	r0, r4
   83104:	b003      	add	sp, #12
   83106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8310a:	68bc      	ldr	r4, [r7, #8]
   8310c:	6863      	ldr	r3, [r4, #4]
   8310e:	f023 0903 	bic.w	r9, r3, #3
   83112:	45a9      	cmp	r9, r5
   83114:	d304      	bcc.n	83120 <_malloc_r+0x1e8>
   83116:	ebc5 0309 	rsb	r3, r5, r9
   8311a:	2b0f      	cmp	r3, #15
   8311c:	f300 8091 	bgt.w	83242 <_malloc_r+0x30a>
   83120:	4b51      	ldr	r3, [pc, #324]	; (83268 <_malloc_r+0x330>)
   83122:	4a52      	ldr	r2, [pc, #328]	; (8326c <_malloc_r+0x334>)
   83124:	6819      	ldr	r1, [r3, #0]
   83126:	6813      	ldr	r3, [r2, #0]
   83128:	eb05 0a01 	add.w	sl, r5, r1
   8312c:	3301      	adds	r3, #1
   8312e:	eb04 0b09 	add.w	fp, r4, r9
   83132:	f000 8161 	beq.w	833f8 <_malloc_r+0x4c0>
   83136:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
   8313a:	f10a 0a0f 	add.w	sl, sl, #15
   8313e:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
   83142:	f02a 0a0f 	bic.w	sl, sl, #15
   83146:	4630      	mov	r0, r6
   83148:	4651      	mov	r1, sl
   8314a:	9201      	str	r2, [sp, #4]
   8314c:	f000 fc9a 	bl	83a84 <_sbrk_r>
   83150:	f1b0 3fff 	cmp.w	r0, #4294967295
   83154:	4680      	mov	r8, r0
   83156:	9a01      	ldr	r2, [sp, #4]
   83158:	f000 8101 	beq.w	8335e <_malloc_r+0x426>
   8315c:	4583      	cmp	fp, r0
   8315e:	f200 80fb 	bhi.w	83358 <_malloc_r+0x420>
   83162:	f8df c114 	ldr.w	ip, [pc, #276]	; 83278 <_malloc_r+0x340>
   83166:	45c3      	cmp	fp, r8
   83168:	f8dc 3000 	ldr.w	r3, [ip]
   8316c:	4453      	add	r3, sl
   8316e:	f8cc 3000 	str.w	r3, [ip]
   83172:	f000 814a 	beq.w	8340a <_malloc_r+0x4d2>
   83176:	6812      	ldr	r2, [r2, #0]
   83178:	493c      	ldr	r1, [pc, #240]	; (8326c <_malloc_r+0x334>)
   8317a:	3201      	adds	r2, #1
   8317c:	bf1b      	ittet	ne
   8317e:	ebcb 0b08 	rsbne	fp, fp, r8
   83182:	445b      	addne	r3, fp
   83184:	f8c1 8000 	streq.w	r8, [r1]
   83188:	f8cc 3000 	strne.w	r3, [ip]
   8318c:	f018 0307 	ands.w	r3, r8, #7
   83190:	f000 8114 	beq.w	833bc <_malloc_r+0x484>
   83194:	f1c3 0208 	rsb	r2, r3, #8
   83198:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
   8319c:	4490      	add	r8, r2
   8319e:	3308      	adds	r3, #8
   831a0:	44c2      	add	sl, r8
   831a2:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
   831a6:	ebca 0a03 	rsb	sl, sl, r3
   831aa:	4651      	mov	r1, sl
   831ac:	4630      	mov	r0, r6
   831ae:	f8cd c004 	str.w	ip, [sp, #4]
   831b2:	f000 fc67 	bl	83a84 <_sbrk_r>
   831b6:	1c43      	adds	r3, r0, #1
   831b8:	f8dd c004 	ldr.w	ip, [sp, #4]
   831bc:	f000 8135 	beq.w	8342a <_malloc_r+0x4f2>
   831c0:	ebc8 0200 	rsb	r2, r8, r0
   831c4:	4452      	add	r2, sl
   831c6:	f042 0201 	orr.w	r2, r2, #1
   831ca:	f8dc 3000 	ldr.w	r3, [ip]
   831ce:	42bc      	cmp	r4, r7
   831d0:	4453      	add	r3, sl
   831d2:	f8c7 8008 	str.w	r8, [r7, #8]
   831d6:	f8cc 3000 	str.w	r3, [ip]
   831da:	f8c8 2004 	str.w	r2, [r8, #4]
   831de:	f8df a098 	ldr.w	sl, [pc, #152]	; 83278 <_malloc_r+0x340>
   831e2:	d015      	beq.n	83210 <_malloc_r+0x2d8>
   831e4:	f1b9 0f0f 	cmp.w	r9, #15
   831e8:	f240 80eb 	bls.w	833c2 <_malloc_r+0x48a>
   831ec:	6861      	ldr	r1, [r4, #4]
   831ee:	f1a9 020c 	sub.w	r2, r9, #12
   831f2:	f022 0207 	bic.w	r2, r2, #7
   831f6:	f001 0101 	and.w	r1, r1, #1
   831fa:	ea42 0e01 	orr.w	lr, r2, r1
   831fe:	2005      	movs	r0, #5
   83200:	18a1      	adds	r1, r4, r2
   83202:	2a0f      	cmp	r2, #15
   83204:	f8c4 e004 	str.w	lr, [r4, #4]
   83208:	6048      	str	r0, [r1, #4]
   8320a:	6088      	str	r0, [r1, #8]
   8320c:	f200 8111 	bhi.w	83432 <_malloc_r+0x4fa>
   83210:	4a17      	ldr	r2, [pc, #92]	; (83270 <_malloc_r+0x338>)
   83212:	68bc      	ldr	r4, [r7, #8]
   83214:	6811      	ldr	r1, [r2, #0]
   83216:	428b      	cmp	r3, r1
   83218:	bf88      	it	hi
   8321a:	6013      	strhi	r3, [r2, #0]
   8321c:	4a15      	ldr	r2, [pc, #84]	; (83274 <_malloc_r+0x33c>)
   8321e:	6811      	ldr	r1, [r2, #0]
   83220:	428b      	cmp	r3, r1
   83222:	bf88      	it	hi
   83224:	6013      	strhi	r3, [r2, #0]
   83226:	6862      	ldr	r2, [r4, #4]
   83228:	f022 0203 	bic.w	r2, r2, #3
   8322c:	4295      	cmp	r5, r2
   8322e:	ebc5 0302 	rsb	r3, r5, r2
   83232:	d801      	bhi.n	83238 <_malloc_r+0x300>
   83234:	2b0f      	cmp	r3, #15
   83236:	dc04      	bgt.n	83242 <_malloc_r+0x30a>
   83238:	4630      	mov	r0, r6
   8323a:	f000 fa41 	bl	836c0 <__malloc_unlock>
   8323e:	2400      	movs	r4, #0
   83240:	e6a6      	b.n	82f90 <_malloc_r+0x58>
   83242:	f045 0201 	orr.w	r2, r5, #1
   83246:	f043 0301 	orr.w	r3, r3, #1
   8324a:	4425      	add	r5, r4
   8324c:	6062      	str	r2, [r4, #4]
   8324e:	4630      	mov	r0, r6
   83250:	60bd      	str	r5, [r7, #8]
   83252:	606b      	str	r3, [r5, #4]
   83254:	f000 fa34 	bl	836c0 <__malloc_unlock>
   83258:	3408      	adds	r4, #8
   8325a:	4620      	mov	r0, r4
   8325c:	b003      	add	sp, #12
   8325e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83262:	bf00      	nop
   83264:	20070598 	.word	0x20070598
   83268:	20070af0 	.word	0x20070af0
   8326c:	200709a4 	.word	0x200709a4
   83270:	20070aec 	.word	0x20070aec
   83274:	20070ae8 	.word	0x20070ae8
   83278:	20070af4 	.word	0x20070af4
   8327c:	f1bc 0f14 	cmp.w	ip, #20
   83280:	d961      	bls.n	83346 <_malloc_r+0x40e>
   83282:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
   83286:	f200 808f 	bhi.w	833a8 <_malloc_r+0x470>
   8328a:	ea4f 3c15 	mov.w	ip, r5, lsr #12
   8328e:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
   83292:	ea4f 014c 	mov.w	r1, ip, lsl #1
   83296:	e697      	b.n	82fc8 <_malloc_r+0x90>
   83298:	0a4b      	lsrs	r3, r1, #9
   8329a:	2b04      	cmp	r3, #4
   8329c:	d958      	bls.n	83350 <_malloc_r+0x418>
   8329e:	2b14      	cmp	r3, #20
   832a0:	f200 80ad 	bhi.w	833fe <_malloc_r+0x4c6>
   832a4:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   832a8:	0050      	lsls	r0, r2, #1
   832aa:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   832ae:	6883      	ldr	r3, [r0, #8]
   832b0:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 8346c <_malloc_r+0x534>
   832b4:	4283      	cmp	r3, r0
   832b6:	f000 808a 	beq.w	833ce <_malloc_r+0x496>
   832ba:	685a      	ldr	r2, [r3, #4]
   832bc:	f022 0203 	bic.w	r2, r2, #3
   832c0:	4291      	cmp	r1, r2
   832c2:	d202      	bcs.n	832ca <_malloc_r+0x392>
   832c4:	689b      	ldr	r3, [r3, #8]
   832c6:	4298      	cmp	r0, r3
   832c8:	d1f7      	bne.n	832ba <_malloc_r+0x382>
   832ca:	68d9      	ldr	r1, [r3, #12]
   832cc:	687a      	ldr	r2, [r7, #4]
   832ce:	60e1      	str	r1, [r4, #12]
   832d0:	60a3      	str	r3, [r4, #8]
   832d2:	608c      	str	r4, [r1, #8]
   832d4:	60dc      	str	r4, [r3, #12]
   832d6:	e6b6      	b.n	83046 <_malloc_r+0x10e>
   832d8:	f045 0701 	orr.w	r7, r5, #1
   832dc:	f042 0101 	orr.w	r1, r2, #1
   832e0:	4425      	add	r5, r4
   832e2:	6067      	str	r7, [r4, #4]
   832e4:	4630      	mov	r0, r6
   832e6:	615d      	str	r5, [r3, #20]
   832e8:	611d      	str	r5, [r3, #16]
   832ea:	f8c5 e00c 	str.w	lr, [r5, #12]
   832ee:	f8c5 e008 	str.w	lr, [r5, #8]
   832f2:	6069      	str	r1, [r5, #4]
   832f4:	50aa      	str	r2, [r5, r2]
   832f6:	3408      	adds	r4, #8
   832f8:	f000 f9e2 	bl	836c0 <__malloc_unlock>
   832fc:	e648      	b.n	82f90 <_malloc_r+0x58>
   832fe:	685a      	ldr	r2, [r3, #4]
   83300:	e6a1      	b.n	83046 <_malloc_r+0x10e>
   83302:	f109 0901 	add.w	r9, r9, #1
   83306:	f019 0f03 	tst.w	r9, #3
   8330a:	f104 0408 	add.w	r4, r4, #8
   8330e:	f47f aead 	bne.w	8306c <_malloc_r+0x134>
   83312:	e02d      	b.n	83370 <_malloc_r+0x438>
   83314:	f104 0308 	add.w	r3, r4, #8
   83318:	6964      	ldr	r4, [r4, #20]
   8331a:	42a3      	cmp	r3, r4
   8331c:	bf08      	it	eq
   8331e:	f10c 0c02 	addeq.w	ip, ip, #2
   83322:	f43f ae67 	beq.w	82ff4 <_malloc_r+0xbc>
   83326:	e623      	b.n	82f70 <_malloc_r+0x38>
   83328:	4419      	add	r1, r3
   8332a:	6848      	ldr	r0, [r1, #4]
   8332c:	461c      	mov	r4, r3
   8332e:	f854 2f08 	ldr.w	r2, [r4, #8]!
   83332:	68db      	ldr	r3, [r3, #12]
   83334:	f040 0501 	orr.w	r5, r0, #1
   83338:	604d      	str	r5, [r1, #4]
   8333a:	4630      	mov	r0, r6
   8333c:	60d3      	str	r3, [r2, #12]
   8333e:	609a      	str	r2, [r3, #8]
   83340:	f000 f9be 	bl	836c0 <__malloc_unlock>
   83344:	e624      	b.n	82f90 <_malloc_r+0x58>
   83346:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
   8334a:	ea4f 014c 	mov.w	r1, ip, lsl #1
   8334e:	e63b      	b.n	82fc8 <_malloc_r+0x90>
   83350:	098a      	lsrs	r2, r1, #6
   83352:	3238      	adds	r2, #56	; 0x38
   83354:	0050      	lsls	r0, r2, #1
   83356:	e7a8      	b.n	832aa <_malloc_r+0x372>
   83358:	42bc      	cmp	r4, r7
   8335a:	f43f af02 	beq.w	83162 <_malloc_r+0x22a>
   8335e:	68bc      	ldr	r4, [r7, #8]
   83360:	6862      	ldr	r2, [r4, #4]
   83362:	f022 0203 	bic.w	r2, r2, #3
   83366:	e761      	b.n	8322c <_malloc_r+0x2f4>
   83368:	f8d8 8000 	ldr.w	r8, [r8]
   8336c:	4598      	cmp	r8, r3
   8336e:	d17a      	bne.n	83466 <_malloc_r+0x52e>
   83370:	f01c 0f03 	tst.w	ip, #3
   83374:	f1a8 0308 	sub.w	r3, r8, #8
   83378:	f10c 3cff 	add.w	ip, ip, #4294967295
   8337c:	d1f4      	bne.n	83368 <_malloc_r+0x430>
   8337e:	687b      	ldr	r3, [r7, #4]
   83380:	ea23 0300 	bic.w	r3, r3, r0
   83384:	607b      	str	r3, [r7, #4]
   83386:	0040      	lsls	r0, r0, #1
   83388:	4298      	cmp	r0, r3
   8338a:	f63f aebe 	bhi.w	8310a <_malloc_r+0x1d2>
   8338e:	2800      	cmp	r0, #0
   83390:	f43f aebb 	beq.w	8310a <_malloc_r+0x1d2>
   83394:	4203      	tst	r3, r0
   83396:	46cc      	mov	ip, r9
   83398:	f47f ae64 	bne.w	83064 <_malloc_r+0x12c>
   8339c:	0040      	lsls	r0, r0, #1
   8339e:	4203      	tst	r3, r0
   833a0:	f10c 0c04 	add.w	ip, ip, #4
   833a4:	d0fa      	beq.n	8339c <_malloc_r+0x464>
   833a6:	e65d      	b.n	83064 <_malloc_r+0x12c>
   833a8:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
   833ac:	d819      	bhi.n	833e2 <_malloc_r+0x4aa>
   833ae:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
   833b2:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
   833b6:	ea4f 014c 	mov.w	r1, ip, lsl #1
   833ba:	e605      	b.n	82fc8 <_malloc_r+0x90>
   833bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   833c0:	e6ee      	b.n	831a0 <_malloc_r+0x268>
   833c2:	2301      	movs	r3, #1
   833c4:	f8c8 3004 	str.w	r3, [r8, #4]
   833c8:	4644      	mov	r4, r8
   833ca:	2200      	movs	r2, #0
   833cc:	e72e      	b.n	8322c <_malloc_r+0x2f4>
   833ce:	1092      	asrs	r2, r2, #2
   833d0:	2001      	movs	r0, #1
   833d2:	4090      	lsls	r0, r2
   833d4:	f8d8 2004 	ldr.w	r2, [r8, #4]
   833d8:	4619      	mov	r1, r3
   833da:	4302      	orrs	r2, r0
   833dc:	f8c8 2004 	str.w	r2, [r8, #4]
   833e0:	e775      	b.n	832ce <_malloc_r+0x396>
   833e2:	f240 5354 	movw	r3, #1364	; 0x554
   833e6:	459c      	cmp	ip, r3
   833e8:	d81b      	bhi.n	83422 <_malloc_r+0x4ea>
   833ea:	ea4f 4c95 	mov.w	ip, r5, lsr #18
   833ee:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
   833f2:	ea4f 014c 	mov.w	r1, ip, lsl #1
   833f6:	e5e7      	b.n	82fc8 <_malloc_r+0x90>
   833f8:	f10a 0a10 	add.w	sl, sl, #16
   833fc:	e6a3      	b.n	83146 <_malloc_r+0x20e>
   833fe:	2b54      	cmp	r3, #84	; 0x54
   83400:	d81f      	bhi.n	83442 <_malloc_r+0x50a>
   83402:	0b0a      	lsrs	r2, r1, #12
   83404:	326e      	adds	r2, #110	; 0x6e
   83406:	0050      	lsls	r0, r2, #1
   83408:	e74f      	b.n	832aa <_malloc_r+0x372>
   8340a:	f3cb 010b 	ubfx	r1, fp, #0, #12
   8340e:	2900      	cmp	r1, #0
   83410:	f47f aeb1 	bne.w	83176 <_malloc_r+0x23e>
   83414:	eb0a 0109 	add.w	r1, sl, r9
   83418:	68ba      	ldr	r2, [r7, #8]
   8341a:	f041 0101 	orr.w	r1, r1, #1
   8341e:	6051      	str	r1, [r2, #4]
   83420:	e6f6      	b.n	83210 <_malloc_r+0x2d8>
   83422:	21fc      	movs	r1, #252	; 0xfc
   83424:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
   83428:	e5ce      	b.n	82fc8 <_malloc_r+0x90>
   8342a:	2201      	movs	r2, #1
   8342c:	f04f 0a00 	mov.w	sl, #0
   83430:	e6cb      	b.n	831ca <_malloc_r+0x292>
   83432:	f104 0108 	add.w	r1, r4, #8
   83436:	4630      	mov	r0, r6
   83438:	f7ff fa80 	bl	8293c <_free_r>
   8343c:	f8da 3000 	ldr.w	r3, [sl]
   83440:	e6e6      	b.n	83210 <_malloc_r+0x2d8>
   83442:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   83446:	d803      	bhi.n	83450 <_malloc_r+0x518>
   83448:	0bca      	lsrs	r2, r1, #15
   8344a:	3277      	adds	r2, #119	; 0x77
   8344c:	0050      	lsls	r0, r2, #1
   8344e:	e72c      	b.n	832aa <_malloc_r+0x372>
   83450:	f240 5254 	movw	r2, #1364	; 0x554
   83454:	4293      	cmp	r3, r2
   83456:	d803      	bhi.n	83460 <_malloc_r+0x528>
   83458:	0c8a      	lsrs	r2, r1, #18
   8345a:	327c      	adds	r2, #124	; 0x7c
   8345c:	0050      	lsls	r0, r2, #1
   8345e:	e724      	b.n	832aa <_malloc_r+0x372>
   83460:	20fc      	movs	r0, #252	; 0xfc
   83462:	227e      	movs	r2, #126	; 0x7e
   83464:	e721      	b.n	832aa <_malloc_r+0x372>
   83466:	687b      	ldr	r3, [r7, #4]
   83468:	e78d      	b.n	83386 <_malloc_r+0x44e>
   8346a:	bf00      	nop
   8346c:	20070598 	.word	0x20070598

00083470 <memchr>:
   83470:	0783      	lsls	r3, r0, #30
   83472:	b470      	push	{r4, r5, r6}
   83474:	b2c9      	uxtb	r1, r1
   83476:	d040      	beq.n	834fa <memchr+0x8a>
   83478:	1e54      	subs	r4, r2, #1
   8347a:	b32a      	cbz	r2, 834c8 <memchr+0x58>
   8347c:	7803      	ldrb	r3, [r0, #0]
   8347e:	428b      	cmp	r3, r1
   83480:	d023      	beq.n	834ca <memchr+0x5a>
   83482:	1c43      	adds	r3, r0, #1
   83484:	e004      	b.n	83490 <memchr+0x20>
   83486:	b1fc      	cbz	r4, 834c8 <memchr+0x58>
   83488:	7805      	ldrb	r5, [r0, #0]
   8348a:	4614      	mov	r4, r2
   8348c:	428d      	cmp	r5, r1
   8348e:	d01c      	beq.n	834ca <memchr+0x5a>
   83490:	f013 0f03 	tst.w	r3, #3
   83494:	4618      	mov	r0, r3
   83496:	f104 32ff 	add.w	r2, r4, #4294967295
   8349a:	f103 0301 	add.w	r3, r3, #1
   8349e:	d1f2      	bne.n	83486 <memchr+0x16>
   834a0:	2c03      	cmp	r4, #3
   834a2:	d814      	bhi.n	834ce <memchr+0x5e>
   834a4:	1e65      	subs	r5, r4, #1
   834a6:	b354      	cbz	r4, 834fe <memchr+0x8e>
   834a8:	7803      	ldrb	r3, [r0, #0]
   834aa:	428b      	cmp	r3, r1
   834ac:	d00d      	beq.n	834ca <memchr+0x5a>
   834ae:	1c42      	adds	r2, r0, #1
   834b0:	2300      	movs	r3, #0
   834b2:	e002      	b.n	834ba <memchr+0x4a>
   834b4:	7804      	ldrb	r4, [r0, #0]
   834b6:	428c      	cmp	r4, r1
   834b8:	d007      	beq.n	834ca <memchr+0x5a>
   834ba:	42ab      	cmp	r3, r5
   834bc:	4610      	mov	r0, r2
   834be:	f103 0301 	add.w	r3, r3, #1
   834c2:	f102 0201 	add.w	r2, r2, #1
   834c6:	d1f5      	bne.n	834b4 <memchr+0x44>
   834c8:	2000      	movs	r0, #0
   834ca:	bc70      	pop	{r4, r5, r6}
   834cc:	4770      	bx	lr
   834ce:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
   834d2:	4603      	mov	r3, r0
   834d4:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   834d8:	681a      	ldr	r2, [r3, #0]
   834da:	4618      	mov	r0, r3
   834dc:	4072      	eors	r2, r6
   834de:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
   834e2:	ea25 0202 	bic.w	r2, r5, r2
   834e6:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   834ea:	f103 0304 	add.w	r3, r3, #4
   834ee:	d1d9      	bne.n	834a4 <memchr+0x34>
   834f0:	3c04      	subs	r4, #4
   834f2:	2c03      	cmp	r4, #3
   834f4:	4618      	mov	r0, r3
   834f6:	d8ef      	bhi.n	834d8 <memchr+0x68>
   834f8:	e7d4      	b.n	834a4 <memchr+0x34>
   834fa:	4614      	mov	r4, r2
   834fc:	e7d0      	b.n	834a0 <memchr+0x30>
   834fe:	4620      	mov	r0, r4
   83500:	e7e3      	b.n	834ca <memchr+0x5a>
   83502:	bf00      	nop

00083504 <memcpy>:
   83504:	4684      	mov	ip, r0
   83506:	ea41 0300 	orr.w	r3, r1, r0
   8350a:	f013 0303 	ands.w	r3, r3, #3
   8350e:	d149      	bne.n	835a4 <memcpy+0xa0>
   83510:	3a40      	subs	r2, #64	; 0x40
   83512:	d323      	bcc.n	8355c <memcpy+0x58>
   83514:	680b      	ldr	r3, [r1, #0]
   83516:	6003      	str	r3, [r0, #0]
   83518:	684b      	ldr	r3, [r1, #4]
   8351a:	6043      	str	r3, [r0, #4]
   8351c:	688b      	ldr	r3, [r1, #8]
   8351e:	6083      	str	r3, [r0, #8]
   83520:	68cb      	ldr	r3, [r1, #12]
   83522:	60c3      	str	r3, [r0, #12]
   83524:	690b      	ldr	r3, [r1, #16]
   83526:	6103      	str	r3, [r0, #16]
   83528:	694b      	ldr	r3, [r1, #20]
   8352a:	6143      	str	r3, [r0, #20]
   8352c:	698b      	ldr	r3, [r1, #24]
   8352e:	6183      	str	r3, [r0, #24]
   83530:	69cb      	ldr	r3, [r1, #28]
   83532:	61c3      	str	r3, [r0, #28]
   83534:	6a0b      	ldr	r3, [r1, #32]
   83536:	6203      	str	r3, [r0, #32]
   83538:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   8353a:	6243      	str	r3, [r0, #36]	; 0x24
   8353c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   8353e:	6283      	str	r3, [r0, #40]	; 0x28
   83540:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   83542:	62c3      	str	r3, [r0, #44]	; 0x2c
   83544:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   83546:	6303      	str	r3, [r0, #48]	; 0x30
   83548:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   8354a:	6343      	str	r3, [r0, #52]	; 0x34
   8354c:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   8354e:	6383      	str	r3, [r0, #56]	; 0x38
   83550:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   83552:	63c3      	str	r3, [r0, #60]	; 0x3c
   83554:	3040      	adds	r0, #64	; 0x40
   83556:	3140      	adds	r1, #64	; 0x40
   83558:	3a40      	subs	r2, #64	; 0x40
   8355a:	d2db      	bcs.n	83514 <memcpy+0x10>
   8355c:	3230      	adds	r2, #48	; 0x30
   8355e:	d30b      	bcc.n	83578 <memcpy+0x74>
   83560:	680b      	ldr	r3, [r1, #0]
   83562:	6003      	str	r3, [r0, #0]
   83564:	684b      	ldr	r3, [r1, #4]
   83566:	6043      	str	r3, [r0, #4]
   83568:	688b      	ldr	r3, [r1, #8]
   8356a:	6083      	str	r3, [r0, #8]
   8356c:	68cb      	ldr	r3, [r1, #12]
   8356e:	60c3      	str	r3, [r0, #12]
   83570:	3010      	adds	r0, #16
   83572:	3110      	adds	r1, #16
   83574:	3a10      	subs	r2, #16
   83576:	d2f3      	bcs.n	83560 <memcpy+0x5c>
   83578:	320c      	adds	r2, #12
   8357a:	d305      	bcc.n	83588 <memcpy+0x84>
   8357c:	f851 3b04 	ldr.w	r3, [r1], #4
   83580:	f840 3b04 	str.w	r3, [r0], #4
   83584:	3a04      	subs	r2, #4
   83586:	d2f9      	bcs.n	8357c <memcpy+0x78>
   83588:	3204      	adds	r2, #4
   8358a:	d008      	beq.n	8359e <memcpy+0x9a>
   8358c:	07d2      	lsls	r2, r2, #31
   8358e:	bf1c      	itt	ne
   83590:	f811 3b01 	ldrbne.w	r3, [r1], #1
   83594:	f800 3b01 	strbne.w	r3, [r0], #1
   83598:	d301      	bcc.n	8359e <memcpy+0x9a>
   8359a:	880b      	ldrh	r3, [r1, #0]
   8359c:	8003      	strh	r3, [r0, #0]
   8359e:	4660      	mov	r0, ip
   835a0:	4770      	bx	lr
   835a2:	bf00      	nop
   835a4:	2a08      	cmp	r2, #8
   835a6:	d313      	bcc.n	835d0 <memcpy+0xcc>
   835a8:	078b      	lsls	r3, r1, #30
   835aa:	d0b1      	beq.n	83510 <memcpy+0xc>
   835ac:	f010 0303 	ands.w	r3, r0, #3
   835b0:	d0ae      	beq.n	83510 <memcpy+0xc>
   835b2:	f1c3 0304 	rsb	r3, r3, #4
   835b6:	1ad2      	subs	r2, r2, r3
   835b8:	07db      	lsls	r3, r3, #31
   835ba:	bf1c      	itt	ne
   835bc:	f811 3b01 	ldrbne.w	r3, [r1], #1
   835c0:	f800 3b01 	strbne.w	r3, [r0], #1
   835c4:	d3a4      	bcc.n	83510 <memcpy+0xc>
   835c6:	f831 3b02 	ldrh.w	r3, [r1], #2
   835ca:	f820 3b02 	strh.w	r3, [r0], #2
   835ce:	e79f      	b.n	83510 <memcpy+0xc>
   835d0:	3a04      	subs	r2, #4
   835d2:	d3d9      	bcc.n	83588 <memcpy+0x84>
   835d4:	3a01      	subs	r2, #1
   835d6:	f811 3b01 	ldrb.w	r3, [r1], #1
   835da:	f800 3b01 	strb.w	r3, [r0], #1
   835de:	d2f9      	bcs.n	835d4 <memcpy+0xd0>
   835e0:	780b      	ldrb	r3, [r1, #0]
   835e2:	7003      	strb	r3, [r0, #0]
   835e4:	784b      	ldrb	r3, [r1, #1]
   835e6:	7043      	strb	r3, [r0, #1]
   835e8:	788b      	ldrb	r3, [r1, #2]
   835ea:	7083      	strb	r3, [r0, #2]
   835ec:	4660      	mov	r0, ip
   835ee:	4770      	bx	lr

000835f0 <memmove>:
   835f0:	4288      	cmp	r0, r1
   835f2:	b4f0      	push	{r4, r5, r6, r7}
   835f4:	d910      	bls.n	83618 <memmove+0x28>
   835f6:	188c      	adds	r4, r1, r2
   835f8:	42a0      	cmp	r0, r4
   835fa:	d20d      	bcs.n	83618 <memmove+0x28>
   835fc:	1885      	adds	r5, r0, r2
   835fe:	1e53      	subs	r3, r2, #1
   83600:	b142      	cbz	r2, 83614 <memmove+0x24>
   83602:	4621      	mov	r1, r4
   83604:	462a      	mov	r2, r5
   83606:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
   8360a:	3b01      	subs	r3, #1
   8360c:	f802 4d01 	strb.w	r4, [r2, #-1]!
   83610:	1c5c      	adds	r4, r3, #1
   83612:	d1f8      	bne.n	83606 <memmove+0x16>
   83614:	bcf0      	pop	{r4, r5, r6, r7}
   83616:	4770      	bx	lr
   83618:	2a0f      	cmp	r2, #15
   8361a:	d944      	bls.n	836a6 <memmove+0xb6>
   8361c:	ea40 0301 	orr.w	r3, r0, r1
   83620:	079b      	lsls	r3, r3, #30
   83622:	d144      	bne.n	836ae <memmove+0xbe>
   83624:	f1a2 0710 	sub.w	r7, r2, #16
   83628:	093f      	lsrs	r7, r7, #4
   8362a:	eb00 1607 	add.w	r6, r0, r7, lsl #4
   8362e:	3610      	adds	r6, #16
   83630:	460c      	mov	r4, r1
   83632:	4603      	mov	r3, r0
   83634:	6825      	ldr	r5, [r4, #0]
   83636:	3310      	adds	r3, #16
   83638:	f843 5c10 	str.w	r5, [r3, #-16]
   8363c:	6865      	ldr	r5, [r4, #4]
   8363e:	3410      	adds	r4, #16
   83640:	f843 5c0c 	str.w	r5, [r3, #-12]
   83644:	f854 5c08 	ldr.w	r5, [r4, #-8]
   83648:	f843 5c08 	str.w	r5, [r3, #-8]
   8364c:	f854 5c04 	ldr.w	r5, [r4, #-4]
   83650:	f843 5c04 	str.w	r5, [r3, #-4]
   83654:	42b3      	cmp	r3, r6
   83656:	d1ed      	bne.n	83634 <memmove+0x44>
   83658:	1c7b      	adds	r3, r7, #1
   8365a:	f002 0c0f 	and.w	ip, r2, #15
   8365e:	011b      	lsls	r3, r3, #4
   83660:	f1bc 0f03 	cmp.w	ip, #3
   83664:	4419      	add	r1, r3
   83666:	4403      	add	r3, r0
   83668:	d923      	bls.n	836b2 <memmove+0xc2>
   8366a:	460e      	mov	r6, r1
   8366c:	461d      	mov	r5, r3
   8366e:	4664      	mov	r4, ip
   83670:	f856 7b04 	ldr.w	r7, [r6], #4
   83674:	3c04      	subs	r4, #4
   83676:	2c03      	cmp	r4, #3
   83678:	f845 7b04 	str.w	r7, [r5], #4
   8367c:	d8f8      	bhi.n	83670 <memmove+0x80>
   8367e:	f1ac 0404 	sub.w	r4, ip, #4
   83682:	f024 0403 	bic.w	r4, r4, #3
   83686:	3404      	adds	r4, #4
   83688:	f002 0203 	and.w	r2, r2, #3
   8368c:	4423      	add	r3, r4
   8368e:	4421      	add	r1, r4
   83690:	2a00      	cmp	r2, #0
   83692:	d0bf      	beq.n	83614 <memmove+0x24>
   83694:	441a      	add	r2, r3
   83696:	f811 4b01 	ldrb.w	r4, [r1], #1
   8369a:	f803 4b01 	strb.w	r4, [r3], #1
   8369e:	4293      	cmp	r3, r2
   836a0:	d1f9      	bne.n	83696 <memmove+0xa6>
   836a2:	bcf0      	pop	{r4, r5, r6, r7}
   836a4:	4770      	bx	lr
   836a6:	4603      	mov	r3, r0
   836a8:	2a00      	cmp	r2, #0
   836aa:	d1f3      	bne.n	83694 <memmove+0xa4>
   836ac:	e7b2      	b.n	83614 <memmove+0x24>
   836ae:	4603      	mov	r3, r0
   836b0:	e7f0      	b.n	83694 <memmove+0xa4>
   836b2:	4662      	mov	r2, ip
   836b4:	2a00      	cmp	r2, #0
   836b6:	d1ed      	bne.n	83694 <memmove+0xa4>
   836b8:	e7ac      	b.n	83614 <memmove+0x24>
   836ba:	bf00      	nop

000836bc <__malloc_lock>:
   836bc:	4770      	bx	lr
   836be:	bf00      	nop

000836c0 <__malloc_unlock>:
   836c0:	4770      	bx	lr
   836c2:	bf00      	nop

000836c4 <_realloc_r>:
   836c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   836c8:	460c      	mov	r4, r1
   836ca:	b083      	sub	sp, #12
   836cc:	4690      	mov	r8, r2
   836ce:	4681      	mov	r9, r0
   836d0:	2900      	cmp	r1, #0
   836d2:	f000 80ba 	beq.w	8384a <_realloc_r+0x186>
   836d6:	f7ff fff1 	bl	836bc <__malloc_lock>
   836da:	f108 060b 	add.w	r6, r8, #11
   836de:	f854 3c04 	ldr.w	r3, [r4, #-4]
   836e2:	2e16      	cmp	r6, #22
   836e4:	f023 0503 	bic.w	r5, r3, #3
   836e8:	f1a4 0708 	sub.w	r7, r4, #8
   836ec:	d84b      	bhi.n	83786 <_realloc_r+0xc2>
   836ee:	2110      	movs	r1, #16
   836f0:	460e      	mov	r6, r1
   836f2:	45b0      	cmp	r8, r6
   836f4:	d84c      	bhi.n	83790 <_realloc_r+0xcc>
   836f6:	428d      	cmp	r5, r1
   836f8:	da51      	bge.n	8379e <_realloc_r+0xda>
   836fa:	f8df b384 	ldr.w	fp, [pc, #900]	; 83a80 <_realloc_r+0x3bc>
   836fe:	1978      	adds	r0, r7, r5
   83700:	f8db e008 	ldr.w	lr, [fp, #8]
   83704:	4586      	cmp	lr, r0
   83706:	f000 80a6 	beq.w	83856 <_realloc_r+0x192>
   8370a:	6842      	ldr	r2, [r0, #4]
   8370c:	f022 0c01 	bic.w	ip, r2, #1
   83710:	4484      	add	ip, r0
   83712:	f8dc c004 	ldr.w	ip, [ip, #4]
   83716:	f01c 0f01 	tst.w	ip, #1
   8371a:	d054      	beq.n	837c6 <_realloc_r+0x102>
   8371c:	2200      	movs	r2, #0
   8371e:	4610      	mov	r0, r2
   83720:	07db      	lsls	r3, r3, #31
   83722:	d46f      	bmi.n	83804 <_realloc_r+0x140>
   83724:	f854 3c08 	ldr.w	r3, [r4, #-8]
   83728:	ebc3 0a07 	rsb	sl, r3, r7
   8372c:	f8da 3004 	ldr.w	r3, [sl, #4]
   83730:	f023 0303 	bic.w	r3, r3, #3
   83734:	442b      	add	r3, r5
   83736:	2800      	cmp	r0, #0
   83738:	d062      	beq.n	83800 <_realloc_r+0x13c>
   8373a:	4570      	cmp	r0, lr
   8373c:	f000 80e9 	beq.w	83912 <_realloc_r+0x24e>
   83740:	eb02 0e03 	add.w	lr, r2, r3
   83744:	458e      	cmp	lr, r1
   83746:	db5b      	blt.n	83800 <_realloc_r+0x13c>
   83748:	68c3      	ldr	r3, [r0, #12]
   8374a:	6882      	ldr	r2, [r0, #8]
   8374c:	46d0      	mov	r8, sl
   8374e:	60d3      	str	r3, [r2, #12]
   83750:	609a      	str	r2, [r3, #8]
   83752:	f858 1f08 	ldr.w	r1, [r8, #8]!
   83756:	f8da 300c 	ldr.w	r3, [sl, #12]
   8375a:	1f2a      	subs	r2, r5, #4
   8375c:	2a24      	cmp	r2, #36	; 0x24
   8375e:	60cb      	str	r3, [r1, #12]
   83760:	6099      	str	r1, [r3, #8]
   83762:	f200 8123 	bhi.w	839ac <_realloc_r+0x2e8>
   83766:	2a13      	cmp	r2, #19
   83768:	f240 80b0 	bls.w	838cc <_realloc_r+0x208>
   8376c:	6823      	ldr	r3, [r4, #0]
   8376e:	2a1b      	cmp	r2, #27
   83770:	f8ca 3008 	str.w	r3, [sl, #8]
   83774:	6863      	ldr	r3, [r4, #4]
   83776:	f8ca 300c 	str.w	r3, [sl, #12]
   8377a:	f200 812b 	bhi.w	839d4 <_realloc_r+0x310>
   8377e:	3408      	adds	r4, #8
   83780:	f10a 0310 	add.w	r3, sl, #16
   83784:	e0a3      	b.n	838ce <_realloc_r+0x20a>
   83786:	f026 0607 	bic.w	r6, r6, #7
   8378a:	2e00      	cmp	r6, #0
   8378c:	4631      	mov	r1, r6
   8378e:	dab0      	bge.n	836f2 <_realloc_r+0x2e>
   83790:	230c      	movs	r3, #12
   83792:	2000      	movs	r0, #0
   83794:	f8c9 3000 	str.w	r3, [r9]
   83798:	b003      	add	sp, #12
   8379a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8379e:	46a0      	mov	r8, r4
   837a0:	1baa      	subs	r2, r5, r6
   837a2:	2a0f      	cmp	r2, #15
   837a4:	f003 0301 	and.w	r3, r3, #1
   837a8:	d81a      	bhi.n	837e0 <_realloc_r+0x11c>
   837aa:	432b      	orrs	r3, r5
   837ac:	607b      	str	r3, [r7, #4]
   837ae:	443d      	add	r5, r7
   837b0:	686b      	ldr	r3, [r5, #4]
   837b2:	f043 0301 	orr.w	r3, r3, #1
   837b6:	606b      	str	r3, [r5, #4]
   837b8:	4648      	mov	r0, r9
   837ba:	f7ff ff81 	bl	836c0 <__malloc_unlock>
   837be:	4640      	mov	r0, r8
   837c0:	b003      	add	sp, #12
   837c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   837c6:	f022 0203 	bic.w	r2, r2, #3
   837ca:	eb02 0c05 	add.w	ip, r2, r5
   837ce:	458c      	cmp	ip, r1
   837d0:	dba6      	blt.n	83720 <_realloc_r+0x5c>
   837d2:	68c2      	ldr	r2, [r0, #12]
   837d4:	6881      	ldr	r1, [r0, #8]
   837d6:	46a0      	mov	r8, r4
   837d8:	60ca      	str	r2, [r1, #12]
   837da:	4665      	mov	r5, ip
   837dc:	6091      	str	r1, [r2, #8]
   837de:	e7df      	b.n	837a0 <_realloc_r+0xdc>
   837e0:	19b9      	adds	r1, r7, r6
   837e2:	4333      	orrs	r3, r6
   837e4:	f042 0001 	orr.w	r0, r2, #1
   837e8:	607b      	str	r3, [r7, #4]
   837ea:	440a      	add	r2, r1
   837ec:	6048      	str	r0, [r1, #4]
   837ee:	6853      	ldr	r3, [r2, #4]
   837f0:	3108      	adds	r1, #8
   837f2:	f043 0301 	orr.w	r3, r3, #1
   837f6:	6053      	str	r3, [r2, #4]
   837f8:	4648      	mov	r0, r9
   837fa:	f7ff f89f 	bl	8293c <_free_r>
   837fe:	e7db      	b.n	837b8 <_realloc_r+0xf4>
   83800:	428b      	cmp	r3, r1
   83802:	da33      	bge.n	8386c <_realloc_r+0x1a8>
   83804:	4641      	mov	r1, r8
   83806:	4648      	mov	r0, r9
   83808:	f7ff fb96 	bl	82f38 <_malloc_r>
   8380c:	4680      	mov	r8, r0
   8380e:	2800      	cmp	r0, #0
   83810:	d0d2      	beq.n	837b8 <_realloc_r+0xf4>
   83812:	f854 3c04 	ldr.w	r3, [r4, #-4]
   83816:	f1a0 0108 	sub.w	r1, r0, #8
   8381a:	f023 0201 	bic.w	r2, r3, #1
   8381e:	443a      	add	r2, r7
   83820:	4291      	cmp	r1, r2
   83822:	f000 80bc 	beq.w	8399e <_realloc_r+0x2da>
   83826:	1f2a      	subs	r2, r5, #4
   83828:	2a24      	cmp	r2, #36	; 0x24
   8382a:	d86e      	bhi.n	8390a <_realloc_r+0x246>
   8382c:	2a13      	cmp	r2, #19
   8382e:	d842      	bhi.n	838b6 <_realloc_r+0x1f2>
   83830:	4603      	mov	r3, r0
   83832:	4622      	mov	r2, r4
   83834:	6811      	ldr	r1, [r2, #0]
   83836:	6019      	str	r1, [r3, #0]
   83838:	6851      	ldr	r1, [r2, #4]
   8383a:	6059      	str	r1, [r3, #4]
   8383c:	6892      	ldr	r2, [r2, #8]
   8383e:	609a      	str	r2, [r3, #8]
   83840:	4621      	mov	r1, r4
   83842:	4648      	mov	r0, r9
   83844:	f7ff f87a 	bl	8293c <_free_r>
   83848:	e7b6      	b.n	837b8 <_realloc_r+0xf4>
   8384a:	4611      	mov	r1, r2
   8384c:	b003      	add	sp, #12
   8384e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83852:	f7ff bb71 	b.w	82f38 <_malloc_r>
   83856:	f8de 2004 	ldr.w	r2, [lr, #4]
   8385a:	f106 0c10 	add.w	ip, r6, #16
   8385e:	f022 0203 	bic.w	r2, r2, #3
   83862:	1950      	adds	r0, r2, r5
   83864:	4560      	cmp	r0, ip
   83866:	da3d      	bge.n	838e4 <_realloc_r+0x220>
   83868:	4670      	mov	r0, lr
   8386a:	e759      	b.n	83720 <_realloc_r+0x5c>
   8386c:	46d0      	mov	r8, sl
   8386e:	f858 0f08 	ldr.w	r0, [r8, #8]!
   83872:	f8da 100c 	ldr.w	r1, [sl, #12]
   83876:	1f2a      	subs	r2, r5, #4
   83878:	2a24      	cmp	r2, #36	; 0x24
   8387a:	60c1      	str	r1, [r0, #12]
   8387c:	6088      	str	r0, [r1, #8]
   8387e:	f200 80a0 	bhi.w	839c2 <_realloc_r+0x2fe>
   83882:	2a13      	cmp	r2, #19
   83884:	f240 809b 	bls.w	839be <_realloc_r+0x2fa>
   83888:	6821      	ldr	r1, [r4, #0]
   8388a:	2a1b      	cmp	r2, #27
   8388c:	f8ca 1008 	str.w	r1, [sl, #8]
   83890:	6861      	ldr	r1, [r4, #4]
   83892:	f8ca 100c 	str.w	r1, [sl, #12]
   83896:	f200 80b2 	bhi.w	839fe <_realloc_r+0x33a>
   8389a:	3408      	adds	r4, #8
   8389c:	f10a 0210 	add.w	r2, sl, #16
   838a0:	6821      	ldr	r1, [r4, #0]
   838a2:	461d      	mov	r5, r3
   838a4:	6011      	str	r1, [r2, #0]
   838a6:	6861      	ldr	r1, [r4, #4]
   838a8:	4657      	mov	r7, sl
   838aa:	6051      	str	r1, [r2, #4]
   838ac:	68a3      	ldr	r3, [r4, #8]
   838ae:	6093      	str	r3, [r2, #8]
   838b0:	f8da 3004 	ldr.w	r3, [sl, #4]
   838b4:	e774      	b.n	837a0 <_realloc_r+0xdc>
   838b6:	6823      	ldr	r3, [r4, #0]
   838b8:	2a1b      	cmp	r2, #27
   838ba:	6003      	str	r3, [r0, #0]
   838bc:	6863      	ldr	r3, [r4, #4]
   838be:	6043      	str	r3, [r0, #4]
   838c0:	d862      	bhi.n	83988 <_realloc_r+0x2c4>
   838c2:	f100 0308 	add.w	r3, r0, #8
   838c6:	f104 0208 	add.w	r2, r4, #8
   838ca:	e7b3      	b.n	83834 <_realloc_r+0x170>
   838cc:	4643      	mov	r3, r8
   838ce:	6822      	ldr	r2, [r4, #0]
   838d0:	4675      	mov	r5, lr
   838d2:	601a      	str	r2, [r3, #0]
   838d4:	6862      	ldr	r2, [r4, #4]
   838d6:	4657      	mov	r7, sl
   838d8:	605a      	str	r2, [r3, #4]
   838da:	68a2      	ldr	r2, [r4, #8]
   838dc:	609a      	str	r2, [r3, #8]
   838de:	f8da 3004 	ldr.w	r3, [sl, #4]
   838e2:	e75d      	b.n	837a0 <_realloc_r+0xdc>
   838e4:	1b83      	subs	r3, r0, r6
   838e6:	4437      	add	r7, r6
   838e8:	f043 0301 	orr.w	r3, r3, #1
   838ec:	f8cb 7008 	str.w	r7, [fp, #8]
   838f0:	607b      	str	r3, [r7, #4]
   838f2:	f854 3c04 	ldr.w	r3, [r4, #-4]
   838f6:	4648      	mov	r0, r9
   838f8:	f003 0301 	and.w	r3, r3, #1
   838fc:	431e      	orrs	r6, r3
   838fe:	f844 6c04 	str.w	r6, [r4, #-4]
   83902:	f7ff fedd 	bl	836c0 <__malloc_unlock>
   83906:	4620      	mov	r0, r4
   83908:	e75a      	b.n	837c0 <_realloc_r+0xfc>
   8390a:	4621      	mov	r1, r4
   8390c:	f7ff fe70 	bl	835f0 <memmove>
   83910:	e796      	b.n	83840 <_realloc_r+0x17c>
   83912:	eb02 0c03 	add.w	ip, r2, r3
   83916:	f106 0210 	add.w	r2, r6, #16
   8391a:	4594      	cmp	ip, r2
   8391c:	f6ff af70 	blt.w	83800 <_realloc_r+0x13c>
   83920:	4657      	mov	r7, sl
   83922:	f857 1f08 	ldr.w	r1, [r7, #8]!
   83926:	f8da 300c 	ldr.w	r3, [sl, #12]
   8392a:	1f2a      	subs	r2, r5, #4
   8392c:	2a24      	cmp	r2, #36	; 0x24
   8392e:	60cb      	str	r3, [r1, #12]
   83930:	6099      	str	r1, [r3, #8]
   83932:	f200 8086 	bhi.w	83a42 <_realloc_r+0x37e>
   83936:	2a13      	cmp	r2, #19
   83938:	d977      	bls.n	83a2a <_realloc_r+0x366>
   8393a:	6823      	ldr	r3, [r4, #0]
   8393c:	2a1b      	cmp	r2, #27
   8393e:	f8ca 3008 	str.w	r3, [sl, #8]
   83942:	6863      	ldr	r3, [r4, #4]
   83944:	f8ca 300c 	str.w	r3, [sl, #12]
   83948:	f200 8084 	bhi.w	83a54 <_realloc_r+0x390>
   8394c:	3408      	adds	r4, #8
   8394e:	f10a 0310 	add.w	r3, sl, #16
   83952:	6822      	ldr	r2, [r4, #0]
   83954:	601a      	str	r2, [r3, #0]
   83956:	6862      	ldr	r2, [r4, #4]
   83958:	605a      	str	r2, [r3, #4]
   8395a:	68a2      	ldr	r2, [r4, #8]
   8395c:	609a      	str	r2, [r3, #8]
   8395e:	ebc6 020c 	rsb	r2, r6, ip
   83962:	eb0a 0306 	add.w	r3, sl, r6
   83966:	f042 0201 	orr.w	r2, r2, #1
   8396a:	f8cb 3008 	str.w	r3, [fp, #8]
   8396e:	605a      	str	r2, [r3, #4]
   83970:	f8da 3004 	ldr.w	r3, [sl, #4]
   83974:	4648      	mov	r0, r9
   83976:	f003 0301 	and.w	r3, r3, #1
   8397a:	431e      	orrs	r6, r3
   8397c:	f8ca 6004 	str.w	r6, [sl, #4]
   83980:	f7ff fe9e 	bl	836c0 <__malloc_unlock>
   83984:	4638      	mov	r0, r7
   83986:	e71b      	b.n	837c0 <_realloc_r+0xfc>
   83988:	68a3      	ldr	r3, [r4, #8]
   8398a:	2a24      	cmp	r2, #36	; 0x24
   8398c:	6083      	str	r3, [r0, #8]
   8398e:	68e3      	ldr	r3, [r4, #12]
   83990:	60c3      	str	r3, [r0, #12]
   83992:	d02b      	beq.n	839ec <_realloc_r+0x328>
   83994:	f100 0310 	add.w	r3, r0, #16
   83998:	f104 0210 	add.w	r2, r4, #16
   8399c:	e74a      	b.n	83834 <_realloc_r+0x170>
   8399e:	f850 2c04 	ldr.w	r2, [r0, #-4]
   839a2:	46a0      	mov	r8, r4
   839a4:	f022 0203 	bic.w	r2, r2, #3
   839a8:	4415      	add	r5, r2
   839aa:	e6f9      	b.n	837a0 <_realloc_r+0xdc>
   839ac:	4621      	mov	r1, r4
   839ae:	4640      	mov	r0, r8
   839b0:	4675      	mov	r5, lr
   839b2:	4657      	mov	r7, sl
   839b4:	f7ff fe1c 	bl	835f0 <memmove>
   839b8:	f8da 3004 	ldr.w	r3, [sl, #4]
   839bc:	e6f0      	b.n	837a0 <_realloc_r+0xdc>
   839be:	4642      	mov	r2, r8
   839c0:	e76e      	b.n	838a0 <_realloc_r+0x1dc>
   839c2:	4621      	mov	r1, r4
   839c4:	4640      	mov	r0, r8
   839c6:	461d      	mov	r5, r3
   839c8:	4657      	mov	r7, sl
   839ca:	f7ff fe11 	bl	835f0 <memmove>
   839ce:	f8da 3004 	ldr.w	r3, [sl, #4]
   839d2:	e6e5      	b.n	837a0 <_realloc_r+0xdc>
   839d4:	68a3      	ldr	r3, [r4, #8]
   839d6:	2a24      	cmp	r2, #36	; 0x24
   839d8:	f8ca 3010 	str.w	r3, [sl, #16]
   839dc:	68e3      	ldr	r3, [r4, #12]
   839de:	f8ca 3014 	str.w	r3, [sl, #20]
   839e2:	d018      	beq.n	83a16 <_realloc_r+0x352>
   839e4:	3410      	adds	r4, #16
   839e6:	f10a 0318 	add.w	r3, sl, #24
   839ea:	e770      	b.n	838ce <_realloc_r+0x20a>
   839ec:	6922      	ldr	r2, [r4, #16]
   839ee:	f100 0318 	add.w	r3, r0, #24
   839f2:	6102      	str	r2, [r0, #16]
   839f4:	6961      	ldr	r1, [r4, #20]
   839f6:	f104 0218 	add.w	r2, r4, #24
   839fa:	6141      	str	r1, [r0, #20]
   839fc:	e71a      	b.n	83834 <_realloc_r+0x170>
   839fe:	68a1      	ldr	r1, [r4, #8]
   83a00:	2a24      	cmp	r2, #36	; 0x24
   83a02:	f8ca 1010 	str.w	r1, [sl, #16]
   83a06:	68e1      	ldr	r1, [r4, #12]
   83a08:	f8ca 1014 	str.w	r1, [sl, #20]
   83a0c:	d00f      	beq.n	83a2e <_realloc_r+0x36a>
   83a0e:	3410      	adds	r4, #16
   83a10:	f10a 0218 	add.w	r2, sl, #24
   83a14:	e744      	b.n	838a0 <_realloc_r+0x1dc>
   83a16:	6922      	ldr	r2, [r4, #16]
   83a18:	f10a 0320 	add.w	r3, sl, #32
   83a1c:	f8ca 2018 	str.w	r2, [sl, #24]
   83a20:	6962      	ldr	r2, [r4, #20]
   83a22:	3418      	adds	r4, #24
   83a24:	f8ca 201c 	str.w	r2, [sl, #28]
   83a28:	e751      	b.n	838ce <_realloc_r+0x20a>
   83a2a:	463b      	mov	r3, r7
   83a2c:	e791      	b.n	83952 <_realloc_r+0x28e>
   83a2e:	6921      	ldr	r1, [r4, #16]
   83a30:	f10a 0220 	add.w	r2, sl, #32
   83a34:	f8ca 1018 	str.w	r1, [sl, #24]
   83a38:	6961      	ldr	r1, [r4, #20]
   83a3a:	3418      	adds	r4, #24
   83a3c:	f8ca 101c 	str.w	r1, [sl, #28]
   83a40:	e72e      	b.n	838a0 <_realloc_r+0x1dc>
   83a42:	4621      	mov	r1, r4
   83a44:	4638      	mov	r0, r7
   83a46:	f8cd c004 	str.w	ip, [sp, #4]
   83a4a:	f7ff fdd1 	bl	835f0 <memmove>
   83a4e:	f8dd c004 	ldr.w	ip, [sp, #4]
   83a52:	e784      	b.n	8395e <_realloc_r+0x29a>
   83a54:	68a3      	ldr	r3, [r4, #8]
   83a56:	2a24      	cmp	r2, #36	; 0x24
   83a58:	f8ca 3010 	str.w	r3, [sl, #16]
   83a5c:	68e3      	ldr	r3, [r4, #12]
   83a5e:	f8ca 3014 	str.w	r3, [sl, #20]
   83a62:	d003      	beq.n	83a6c <_realloc_r+0x3a8>
   83a64:	3410      	adds	r4, #16
   83a66:	f10a 0318 	add.w	r3, sl, #24
   83a6a:	e772      	b.n	83952 <_realloc_r+0x28e>
   83a6c:	6922      	ldr	r2, [r4, #16]
   83a6e:	f10a 0320 	add.w	r3, sl, #32
   83a72:	f8ca 2018 	str.w	r2, [sl, #24]
   83a76:	6962      	ldr	r2, [r4, #20]
   83a78:	3418      	adds	r4, #24
   83a7a:	f8ca 201c 	str.w	r2, [sl, #28]
   83a7e:	e768      	b.n	83952 <_realloc_r+0x28e>
   83a80:	20070598 	.word	0x20070598

00083a84 <_sbrk_r>:
   83a84:	b538      	push	{r3, r4, r5, lr}
   83a86:	4c07      	ldr	r4, [pc, #28]	; (83aa4 <_sbrk_r+0x20>)
   83a88:	2300      	movs	r3, #0
   83a8a:	4605      	mov	r5, r0
   83a8c:	4608      	mov	r0, r1
   83a8e:	6023      	str	r3, [r4, #0]
   83a90:	f7fd f8b2 	bl	80bf8 <_sbrk>
   83a94:	1c43      	adds	r3, r0, #1
   83a96:	d000      	beq.n	83a9a <_sbrk_r+0x16>
   83a98:	bd38      	pop	{r3, r4, r5, pc}
   83a9a:	6823      	ldr	r3, [r4, #0]
   83a9c:	2b00      	cmp	r3, #0
   83a9e:	d0fb      	beq.n	83a98 <_sbrk_r+0x14>
   83aa0:	602b      	str	r3, [r5, #0]
   83aa2:	bd38      	pop	{r3, r4, r5, pc}
   83aa4:	20070b28 	.word	0x20070b28

00083aa8 <__sread>:
   83aa8:	b510      	push	{r4, lr}
   83aaa:	460c      	mov	r4, r1
   83aac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83ab0:	f000 f9f2 	bl	83e98 <_read_r>
   83ab4:	2800      	cmp	r0, #0
   83ab6:	db03      	blt.n	83ac0 <__sread+0x18>
   83ab8:	6d23      	ldr	r3, [r4, #80]	; 0x50
   83aba:	4403      	add	r3, r0
   83abc:	6523      	str	r3, [r4, #80]	; 0x50
   83abe:	bd10      	pop	{r4, pc}
   83ac0:	89a3      	ldrh	r3, [r4, #12]
   83ac2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   83ac6:	81a3      	strh	r3, [r4, #12]
   83ac8:	bd10      	pop	{r4, pc}
   83aca:	bf00      	nop

00083acc <__swrite>:
   83acc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83ad0:	460c      	mov	r4, r1
   83ad2:	8989      	ldrh	r1, [r1, #12]
   83ad4:	461d      	mov	r5, r3
   83ad6:	05cb      	lsls	r3, r1, #23
   83ad8:	4616      	mov	r6, r2
   83ada:	4607      	mov	r7, r0
   83adc:	d506      	bpl.n	83aec <__swrite+0x20>
   83ade:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   83ae2:	2200      	movs	r2, #0
   83ae4:	2302      	movs	r3, #2
   83ae6:	f000 f9c3 	bl	83e70 <_lseek_r>
   83aea:	89a1      	ldrh	r1, [r4, #12]
   83aec:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   83af0:	81a1      	strh	r1, [r4, #12]
   83af2:	4638      	mov	r0, r7
   83af4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   83af8:	4632      	mov	r2, r6
   83afa:	462b      	mov	r3, r5
   83afc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   83b00:	f000 b8ce 	b.w	83ca0 <_write_r>

00083b04 <__sseek>:
   83b04:	b510      	push	{r4, lr}
   83b06:	460c      	mov	r4, r1
   83b08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83b0c:	f000 f9b0 	bl	83e70 <_lseek_r>
   83b10:	89a3      	ldrh	r3, [r4, #12]
   83b12:	1c42      	adds	r2, r0, #1
   83b14:	bf0e      	itee	eq
   83b16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   83b1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   83b1e:	6520      	strne	r0, [r4, #80]	; 0x50
   83b20:	81a3      	strh	r3, [r4, #12]
   83b22:	bd10      	pop	{r4, pc}

00083b24 <__sclose>:
   83b24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83b28:	f000 b922 	b.w	83d70 <_close_r>

00083b2c <strlen>:
   83b2c:	f020 0103 	bic.w	r1, r0, #3
   83b30:	f010 0003 	ands.w	r0, r0, #3
   83b34:	f1c0 0000 	rsb	r0, r0, #0
   83b38:	f851 3b04 	ldr.w	r3, [r1], #4
   83b3c:	f100 0c04 	add.w	ip, r0, #4
   83b40:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   83b44:	f06f 0200 	mvn.w	r2, #0
   83b48:	bf1c      	itt	ne
   83b4a:	fa22 f20c 	lsrne.w	r2, r2, ip
   83b4e:	4313      	orrne	r3, r2
   83b50:	f04f 0c01 	mov.w	ip, #1
   83b54:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   83b58:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   83b5c:	eba3 020c 	sub.w	r2, r3, ip
   83b60:	ea22 0203 	bic.w	r2, r2, r3
   83b64:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   83b68:	bf04      	itt	eq
   83b6a:	f851 3b04 	ldreq.w	r3, [r1], #4
   83b6e:	3004      	addeq	r0, #4
   83b70:	d0f4      	beq.n	83b5c <strlen+0x30>
   83b72:	f013 0fff 	tst.w	r3, #255	; 0xff
   83b76:	bf1f      	itttt	ne
   83b78:	3001      	addne	r0, #1
   83b7a:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
   83b7e:	3001      	addne	r0, #1
   83b80:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
   83b84:	bf18      	it	ne
   83b86:	3001      	addne	r0, #1
   83b88:	4770      	bx	lr
   83b8a:	bf00      	nop

00083b8c <__swbuf_r>:
   83b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83b8e:	460d      	mov	r5, r1
   83b90:	4614      	mov	r4, r2
   83b92:	4607      	mov	r7, r0
   83b94:	b110      	cbz	r0, 83b9c <__swbuf_r+0x10>
   83b96:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83b98:	2b00      	cmp	r3, #0
   83b9a:	d048      	beq.n	83c2e <__swbuf_r+0xa2>
   83b9c:	89a2      	ldrh	r2, [r4, #12]
   83b9e:	69a0      	ldr	r0, [r4, #24]
   83ba0:	b293      	uxth	r3, r2
   83ba2:	60a0      	str	r0, [r4, #8]
   83ba4:	0718      	lsls	r0, r3, #28
   83ba6:	d538      	bpl.n	83c1a <__swbuf_r+0x8e>
   83ba8:	6926      	ldr	r6, [r4, #16]
   83baa:	2e00      	cmp	r6, #0
   83bac:	d035      	beq.n	83c1a <__swbuf_r+0x8e>
   83bae:	0499      	lsls	r1, r3, #18
   83bb0:	b2ed      	uxtb	r5, r5
   83bb2:	d515      	bpl.n	83be0 <__swbuf_r+0x54>
   83bb4:	6823      	ldr	r3, [r4, #0]
   83bb6:	6962      	ldr	r2, [r4, #20]
   83bb8:	1b9e      	subs	r6, r3, r6
   83bba:	4296      	cmp	r6, r2
   83bbc:	da1c      	bge.n	83bf8 <__swbuf_r+0x6c>
   83bbe:	3601      	adds	r6, #1
   83bc0:	68a2      	ldr	r2, [r4, #8]
   83bc2:	1c59      	adds	r1, r3, #1
   83bc4:	3a01      	subs	r2, #1
   83bc6:	60a2      	str	r2, [r4, #8]
   83bc8:	6021      	str	r1, [r4, #0]
   83bca:	701d      	strb	r5, [r3, #0]
   83bcc:	6963      	ldr	r3, [r4, #20]
   83bce:	42b3      	cmp	r3, r6
   83bd0:	d01a      	beq.n	83c08 <__swbuf_r+0x7c>
   83bd2:	89a3      	ldrh	r3, [r4, #12]
   83bd4:	07db      	lsls	r3, r3, #31
   83bd6:	d501      	bpl.n	83bdc <__swbuf_r+0x50>
   83bd8:	2d0a      	cmp	r5, #10
   83bda:	d015      	beq.n	83c08 <__swbuf_r+0x7c>
   83bdc:	4628      	mov	r0, r5
   83bde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83be0:	6e63      	ldr	r3, [r4, #100]	; 0x64
   83be2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   83be6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   83bea:	6663      	str	r3, [r4, #100]	; 0x64
   83bec:	6823      	ldr	r3, [r4, #0]
   83bee:	81a2      	strh	r2, [r4, #12]
   83bf0:	6962      	ldr	r2, [r4, #20]
   83bf2:	1b9e      	subs	r6, r3, r6
   83bf4:	4296      	cmp	r6, r2
   83bf6:	dbe2      	blt.n	83bbe <__swbuf_r+0x32>
   83bf8:	4638      	mov	r0, r7
   83bfa:	4621      	mov	r1, r4
   83bfc:	f7fe fd3e 	bl	8267c <_fflush_r>
   83c00:	b940      	cbnz	r0, 83c14 <__swbuf_r+0x88>
   83c02:	6823      	ldr	r3, [r4, #0]
   83c04:	2601      	movs	r6, #1
   83c06:	e7db      	b.n	83bc0 <__swbuf_r+0x34>
   83c08:	4638      	mov	r0, r7
   83c0a:	4621      	mov	r1, r4
   83c0c:	f7fe fd36 	bl	8267c <_fflush_r>
   83c10:	2800      	cmp	r0, #0
   83c12:	d0e3      	beq.n	83bdc <__swbuf_r+0x50>
   83c14:	f04f 30ff 	mov.w	r0, #4294967295
   83c18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83c1a:	4638      	mov	r0, r7
   83c1c:	4621      	mov	r1, r4
   83c1e:	f7fe fc17 	bl	82450 <__swsetup_r>
   83c22:	2800      	cmp	r0, #0
   83c24:	d1f6      	bne.n	83c14 <__swbuf_r+0x88>
   83c26:	89a2      	ldrh	r2, [r4, #12]
   83c28:	6926      	ldr	r6, [r4, #16]
   83c2a:	b293      	uxth	r3, r2
   83c2c:	e7bf      	b.n	83bae <__swbuf_r+0x22>
   83c2e:	f7fe fd41 	bl	826b4 <__sinit>
   83c32:	e7b3      	b.n	83b9c <__swbuf_r+0x10>

00083c34 <_wcrtomb_r>:
   83c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83c38:	461e      	mov	r6, r3
   83c3a:	b086      	sub	sp, #24
   83c3c:	460c      	mov	r4, r1
   83c3e:	4605      	mov	r5, r0
   83c40:	4617      	mov	r7, r2
   83c42:	4b0f      	ldr	r3, [pc, #60]	; (83c80 <_wcrtomb_r+0x4c>)
   83c44:	b191      	cbz	r1, 83c6c <_wcrtomb_r+0x38>
   83c46:	f8d3 8000 	ldr.w	r8, [r3]
   83c4a:	f7ff f8f3 	bl	82e34 <__locale_charset>
   83c4e:	9600      	str	r6, [sp, #0]
   83c50:	4603      	mov	r3, r0
   83c52:	4621      	mov	r1, r4
   83c54:	463a      	mov	r2, r7
   83c56:	4628      	mov	r0, r5
   83c58:	47c0      	blx	r8
   83c5a:	1c43      	adds	r3, r0, #1
   83c5c:	d103      	bne.n	83c66 <_wcrtomb_r+0x32>
   83c5e:	2200      	movs	r2, #0
   83c60:	238a      	movs	r3, #138	; 0x8a
   83c62:	6032      	str	r2, [r6, #0]
   83c64:	602b      	str	r3, [r5, #0]
   83c66:	b006      	add	sp, #24
   83c68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83c6c:	681f      	ldr	r7, [r3, #0]
   83c6e:	f7ff f8e1 	bl	82e34 <__locale_charset>
   83c72:	9600      	str	r6, [sp, #0]
   83c74:	4603      	mov	r3, r0
   83c76:	4622      	mov	r2, r4
   83c78:	4628      	mov	r0, r5
   83c7a:	a903      	add	r1, sp, #12
   83c7c:	47b8      	blx	r7
   83c7e:	e7ec      	b.n	83c5a <_wcrtomb_r+0x26>
   83c80:	200709a8 	.word	0x200709a8

00083c84 <__ascii_wctomb>:
   83c84:	b121      	cbz	r1, 83c90 <__ascii_wctomb+0xc>
   83c86:	2aff      	cmp	r2, #255	; 0xff
   83c88:	d804      	bhi.n	83c94 <__ascii_wctomb+0x10>
   83c8a:	700a      	strb	r2, [r1, #0]
   83c8c:	2001      	movs	r0, #1
   83c8e:	4770      	bx	lr
   83c90:	4608      	mov	r0, r1
   83c92:	4770      	bx	lr
   83c94:	238a      	movs	r3, #138	; 0x8a
   83c96:	6003      	str	r3, [r0, #0]
   83c98:	f04f 30ff 	mov.w	r0, #4294967295
   83c9c:	4770      	bx	lr
   83c9e:	bf00      	nop

00083ca0 <_write_r>:
   83ca0:	b570      	push	{r4, r5, r6, lr}
   83ca2:	4c08      	ldr	r4, [pc, #32]	; (83cc4 <_write_r+0x24>)
   83ca4:	4606      	mov	r6, r0
   83ca6:	2500      	movs	r5, #0
   83ca8:	4608      	mov	r0, r1
   83caa:	4611      	mov	r1, r2
   83cac:	461a      	mov	r2, r3
   83cae:	6025      	str	r5, [r4, #0]
   83cb0:	f7fc facc 	bl	8024c <_write>
   83cb4:	1c43      	adds	r3, r0, #1
   83cb6:	d000      	beq.n	83cba <_write_r+0x1a>
   83cb8:	bd70      	pop	{r4, r5, r6, pc}
   83cba:	6823      	ldr	r3, [r4, #0]
   83cbc:	2b00      	cmp	r3, #0
   83cbe:	d0fb      	beq.n	83cb8 <_write_r+0x18>
   83cc0:	6033      	str	r3, [r6, #0]
   83cc2:	bd70      	pop	{r4, r5, r6, pc}
   83cc4:	20070b28 	.word	0x20070b28

00083cc8 <__register_exitproc>:
   83cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
   83cca:	4c27      	ldr	r4, [pc, #156]	; (83d68 <__register_exitproc+0xa0>)
   83ccc:	b085      	sub	sp, #20
   83cce:	6826      	ldr	r6, [r4, #0]
   83cd0:	4607      	mov	r7, r0
   83cd2:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   83cd6:	2c00      	cmp	r4, #0
   83cd8:	d040      	beq.n	83d5c <__register_exitproc+0x94>
   83cda:	6865      	ldr	r5, [r4, #4]
   83cdc:	2d1f      	cmp	r5, #31
   83cde:	dd1e      	ble.n	83d1e <__register_exitproc+0x56>
   83ce0:	4822      	ldr	r0, [pc, #136]	; (83d6c <__register_exitproc+0xa4>)
   83ce2:	b918      	cbnz	r0, 83cec <__register_exitproc+0x24>
   83ce4:	f04f 30ff 	mov.w	r0, #4294967295
   83ce8:	b005      	add	sp, #20
   83cea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83cec:	f44f 70c8 	mov.w	r0, #400	; 0x190
   83cf0:	9103      	str	r1, [sp, #12]
   83cf2:	9202      	str	r2, [sp, #8]
   83cf4:	9301      	str	r3, [sp, #4]
   83cf6:	f7ff f917 	bl	82f28 <malloc>
   83cfa:	9903      	ldr	r1, [sp, #12]
   83cfc:	4604      	mov	r4, r0
   83cfe:	9a02      	ldr	r2, [sp, #8]
   83d00:	9b01      	ldr	r3, [sp, #4]
   83d02:	2800      	cmp	r0, #0
   83d04:	d0ee      	beq.n	83ce4 <__register_exitproc+0x1c>
   83d06:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
   83d0a:	2000      	movs	r0, #0
   83d0c:	6025      	str	r5, [r4, #0]
   83d0e:	6060      	str	r0, [r4, #4]
   83d10:	4605      	mov	r5, r0
   83d12:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   83d16:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   83d1a:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   83d1e:	b93f      	cbnz	r7, 83d30 <__register_exitproc+0x68>
   83d20:	1c6b      	adds	r3, r5, #1
   83d22:	2000      	movs	r0, #0
   83d24:	3502      	adds	r5, #2
   83d26:	6063      	str	r3, [r4, #4]
   83d28:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
   83d2c:	b005      	add	sp, #20
   83d2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83d30:	2601      	movs	r6, #1
   83d32:	40ae      	lsls	r6, r5
   83d34:	eb04 0085 	add.w	r0, r4, r5, lsl #2
   83d38:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   83d3c:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   83d40:	2f02      	cmp	r7, #2
   83d42:	ea42 0206 	orr.w	r2, r2, r6
   83d46:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   83d4a:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   83d4e:	d1e7      	bne.n	83d20 <__register_exitproc+0x58>
   83d50:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   83d54:	431e      	orrs	r6, r3
   83d56:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
   83d5a:	e7e1      	b.n	83d20 <__register_exitproc+0x58>
   83d5c:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   83d60:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   83d64:	e7b9      	b.n	83cda <__register_exitproc+0x12>
   83d66:	bf00      	nop
   83d68:	00083efc 	.word	0x00083efc
   83d6c:	00082f29 	.word	0x00082f29

00083d70 <_close_r>:
   83d70:	b538      	push	{r3, r4, r5, lr}
   83d72:	4c07      	ldr	r4, [pc, #28]	; (83d90 <_close_r+0x20>)
   83d74:	2300      	movs	r3, #0
   83d76:	4605      	mov	r5, r0
   83d78:	4608      	mov	r0, r1
   83d7a:	6023      	str	r3, [r4, #0]
   83d7c:	f7fc ff56 	bl	80c2c <_close>
   83d80:	1c43      	adds	r3, r0, #1
   83d82:	d000      	beq.n	83d86 <_close_r+0x16>
   83d84:	bd38      	pop	{r3, r4, r5, pc}
   83d86:	6823      	ldr	r3, [r4, #0]
   83d88:	2b00      	cmp	r3, #0
   83d8a:	d0fb      	beq.n	83d84 <_close_r+0x14>
   83d8c:	602b      	str	r3, [r5, #0]
   83d8e:	bd38      	pop	{r3, r4, r5, pc}
   83d90:	20070b28 	.word	0x20070b28

00083d94 <_fclose_r>:
   83d94:	b570      	push	{r4, r5, r6, lr}
   83d96:	460c      	mov	r4, r1
   83d98:	4605      	mov	r5, r0
   83d9a:	b131      	cbz	r1, 83daa <_fclose_r+0x16>
   83d9c:	b110      	cbz	r0, 83da4 <_fclose_r+0x10>
   83d9e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83da0:	2b00      	cmp	r3, #0
   83da2:	d02f      	beq.n	83e04 <_fclose_r+0x70>
   83da4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83da8:	b90b      	cbnz	r3, 83dae <_fclose_r+0x1a>
   83daa:	2000      	movs	r0, #0
   83dac:	bd70      	pop	{r4, r5, r6, pc}
   83dae:	4628      	mov	r0, r5
   83db0:	4621      	mov	r1, r4
   83db2:	f7fe fc63 	bl	8267c <_fflush_r>
   83db6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   83db8:	4606      	mov	r6, r0
   83dba:	b133      	cbz	r3, 83dca <_fclose_r+0x36>
   83dbc:	4628      	mov	r0, r5
   83dbe:	69e1      	ldr	r1, [r4, #28]
   83dc0:	4798      	blx	r3
   83dc2:	2800      	cmp	r0, #0
   83dc4:	bfb8      	it	lt
   83dc6:	f04f 36ff 	movlt.w	r6, #4294967295
   83dca:	89a3      	ldrh	r3, [r4, #12]
   83dcc:	061b      	lsls	r3, r3, #24
   83dce:	d41c      	bmi.n	83e0a <_fclose_r+0x76>
   83dd0:	6b21      	ldr	r1, [r4, #48]	; 0x30
   83dd2:	b141      	cbz	r1, 83de6 <_fclose_r+0x52>
   83dd4:	f104 0340 	add.w	r3, r4, #64	; 0x40
   83dd8:	4299      	cmp	r1, r3
   83dda:	d002      	beq.n	83de2 <_fclose_r+0x4e>
   83ddc:	4628      	mov	r0, r5
   83dde:	f7fe fdad 	bl	8293c <_free_r>
   83de2:	2300      	movs	r3, #0
   83de4:	6323      	str	r3, [r4, #48]	; 0x30
   83de6:	6c61      	ldr	r1, [r4, #68]	; 0x44
   83de8:	b121      	cbz	r1, 83df4 <_fclose_r+0x60>
   83dea:	4628      	mov	r0, r5
   83dec:	f7fe fda6 	bl	8293c <_free_r>
   83df0:	2300      	movs	r3, #0
   83df2:	6463      	str	r3, [r4, #68]	; 0x44
   83df4:	f7fe fcd8 	bl	827a8 <__sfp_lock_acquire>
   83df8:	2300      	movs	r3, #0
   83dfa:	81a3      	strh	r3, [r4, #12]
   83dfc:	f7fe fcd6 	bl	827ac <__sfp_lock_release>
   83e00:	4630      	mov	r0, r6
   83e02:	bd70      	pop	{r4, r5, r6, pc}
   83e04:	f7fe fc56 	bl	826b4 <__sinit>
   83e08:	e7cc      	b.n	83da4 <_fclose_r+0x10>
   83e0a:	4628      	mov	r0, r5
   83e0c:	6921      	ldr	r1, [r4, #16]
   83e0e:	f7fe fd95 	bl	8293c <_free_r>
   83e12:	e7dd      	b.n	83dd0 <_fclose_r+0x3c>

00083e14 <fclose>:
   83e14:	4b02      	ldr	r3, [pc, #8]	; (83e20 <fclose+0xc>)
   83e16:	4601      	mov	r1, r0
   83e18:	6818      	ldr	r0, [r3, #0]
   83e1a:	f7ff bfbb 	b.w	83d94 <_fclose_r>
   83e1e:	bf00      	nop
   83e20:	20070570 	.word	0x20070570

00083e24 <_fstat_r>:
   83e24:	b538      	push	{r3, r4, r5, lr}
   83e26:	4c08      	ldr	r4, [pc, #32]	; (83e48 <_fstat_r+0x24>)
   83e28:	2300      	movs	r3, #0
   83e2a:	4605      	mov	r5, r0
   83e2c:	4608      	mov	r0, r1
   83e2e:	4611      	mov	r1, r2
   83e30:	6023      	str	r3, [r4, #0]
   83e32:	f7fc feff 	bl	80c34 <_fstat>
   83e36:	1c43      	adds	r3, r0, #1
   83e38:	d000      	beq.n	83e3c <_fstat_r+0x18>
   83e3a:	bd38      	pop	{r3, r4, r5, pc}
   83e3c:	6823      	ldr	r3, [r4, #0]
   83e3e:	2b00      	cmp	r3, #0
   83e40:	d0fb      	beq.n	83e3a <_fstat_r+0x16>
   83e42:	602b      	str	r3, [r5, #0]
   83e44:	bd38      	pop	{r3, r4, r5, pc}
   83e46:	bf00      	nop
   83e48:	20070b28 	.word	0x20070b28

00083e4c <_isatty_r>:
   83e4c:	b538      	push	{r3, r4, r5, lr}
   83e4e:	4c07      	ldr	r4, [pc, #28]	; (83e6c <_isatty_r+0x20>)
   83e50:	2300      	movs	r3, #0
   83e52:	4605      	mov	r5, r0
   83e54:	4608      	mov	r0, r1
   83e56:	6023      	str	r3, [r4, #0]
   83e58:	f7fc fef2 	bl	80c40 <_isatty>
   83e5c:	1c43      	adds	r3, r0, #1
   83e5e:	d000      	beq.n	83e62 <_isatty_r+0x16>
   83e60:	bd38      	pop	{r3, r4, r5, pc}
   83e62:	6823      	ldr	r3, [r4, #0]
   83e64:	2b00      	cmp	r3, #0
   83e66:	d0fb      	beq.n	83e60 <_isatty_r+0x14>
   83e68:	602b      	str	r3, [r5, #0]
   83e6a:	bd38      	pop	{r3, r4, r5, pc}
   83e6c:	20070b28 	.word	0x20070b28

00083e70 <_lseek_r>:
   83e70:	b570      	push	{r4, r5, r6, lr}
   83e72:	4c08      	ldr	r4, [pc, #32]	; (83e94 <_lseek_r+0x24>)
   83e74:	4606      	mov	r6, r0
   83e76:	2500      	movs	r5, #0
   83e78:	4608      	mov	r0, r1
   83e7a:	4611      	mov	r1, r2
   83e7c:	461a      	mov	r2, r3
   83e7e:	6025      	str	r5, [r4, #0]
   83e80:	f7fc fee0 	bl	80c44 <_lseek>
   83e84:	1c43      	adds	r3, r0, #1
   83e86:	d000      	beq.n	83e8a <_lseek_r+0x1a>
   83e88:	bd70      	pop	{r4, r5, r6, pc}
   83e8a:	6823      	ldr	r3, [r4, #0]
   83e8c:	2b00      	cmp	r3, #0
   83e8e:	d0fb      	beq.n	83e88 <_lseek_r+0x18>
   83e90:	6033      	str	r3, [r6, #0]
   83e92:	bd70      	pop	{r4, r5, r6, pc}
   83e94:	20070b28 	.word	0x20070b28

00083e98 <_read_r>:
   83e98:	b570      	push	{r4, r5, r6, lr}
   83e9a:	4c08      	ldr	r4, [pc, #32]	; (83ebc <_read_r+0x24>)
   83e9c:	4606      	mov	r6, r0
   83e9e:	2500      	movs	r5, #0
   83ea0:	4608      	mov	r0, r1
   83ea2:	4611      	mov	r1, r2
   83ea4:	461a      	mov	r2, r3
   83ea6:	6025      	str	r5, [r4, #0]
   83ea8:	f7fc f9b0 	bl	8020c <_read>
   83eac:	1c43      	adds	r3, r0, #1
   83eae:	d000      	beq.n	83eb2 <_read_r+0x1a>
   83eb0:	bd70      	pop	{r4, r5, r6, pc}
   83eb2:	6823      	ldr	r3, [r4, #0]
   83eb4:	2b00      	cmp	r3, #0
   83eb6:	d0fb      	beq.n	83eb0 <_read_r+0x18>
   83eb8:	6033      	str	r3, [r6, #0]
   83eba:	bd70      	pop	{r4, r5, r6, pc}
   83ebc:	20070b28 	.word	0x20070b28
   83ec0:	736e6f43 	.word	0x736e6f43
   83ec4:	20656c6f 	.word	0x20656c6f
   83ec8:	64616572 	.word	0x64616572
   83ecc:	00000a79 	.word	0x00000a79
   83ed0:	3d3d3d3d 	.word	0x3d3d3d3d
   83ed4:	3d3d3d3d 	.word	0x3d3d3d3d
   83ed8:	3d3d3d3d 	.word	0x3d3d3d3d
   83edc:	00000a3d 	.word	0x00000a3d
   83ee0:	65687741 	.word	0x65687741
   83ee4:	203a6c65 	.word	0x203a6c65
   83ee8:	000a6425 	.word	0x000a6425
   83eec:	65687742 	.word	0x65687742
   83ef0:	203a6c65 	.word	0x203a6c65
   83ef4:	000a6425 	.word	0x000a6425
   83ef8:	00000043 	.word	0x00000043

00083efc <_global_impure_ptr>:
   83efc:	20070148 33323130 37363534 42413938     H.. 0123456789AB
   83f0c:	46454443 00000000 33323130 37363534     CDEF....01234567
   83f1c:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   83f2c:	0000296c                                l)..

00083f30 <zeroes.6721>:
   83f30:	30303030 30303030 30303030 30303030     0000000000000000

00083f40 <blanks.6720>:
   83f40:	20202020 20202020 20202020 20202020                     

00083f50 <_init>:
   83f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83f52:	bf00      	nop
   83f54:	bcf8      	pop	{r3, r4, r5, r6, r7}
   83f56:	bc08      	pop	{r3}
   83f58:	469e      	mov	lr, r3
   83f5a:	4770      	bx	lr

00083f5c <__init_array_start>:
   83f5c:	00082515 	.word	0x00082515

00083f60 <__frame_dummy_init_array_entry>:
   83f60:	00080119                                ....

00083f64 <_fini>:
   83f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83f66:	bf00      	nop
   83f68:	bcf8      	pop	{r3, r4, r5, r6, r7}
   83f6a:	bc08      	pop	{r3}
   83f6c:	469e      	mov	lr, r3
   83f6e:	4770      	bx	lr

00083f70 <__fini_array_start>:
   83f70:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20070000:	f3bf 8f5f 	dmb	sy
20070004:	3801      	subs	r0, #1
20070006:	d1fb      	bne.n	20070000 <portable_delay_cycles>
20070008:	4770      	bx	lr
2007000a:	bf00      	nop

2007000c <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007000c:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070010:	4a20      	ldr	r2, [pc, #128]	; (20070094 <SystemInit+0x88>)
20070012:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070014:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070018:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007001a:	4b1f      	ldr	r3, [pc, #124]	; (20070098 <SystemInit+0x8c>)
2007001c:	6a1b      	ldr	r3, [r3, #32]
2007001e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070022:	d107      	bne.n	20070034 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070024:	4a1d      	ldr	r2, [pc, #116]	; (2007009c <SystemInit+0x90>)
20070026:	4b1c      	ldr	r3, [pc, #112]	; (20070098 <SystemInit+0x8c>)
20070028:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007002a:	461a      	mov	r2, r3
2007002c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007002e:	f013 0f01 	tst.w	r3, #1
20070032:	d0fb      	beq.n	2007002c <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070034:	4a1a      	ldr	r2, [pc, #104]	; (200700a0 <SystemInit+0x94>)
20070036:	4b18      	ldr	r3, [pc, #96]	; (20070098 <SystemInit+0x8c>)
20070038:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007003a:	461a      	mov	r2, r3
2007003c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007003e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070042:	d0fb      	beq.n	2007003c <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070044:	4b14      	ldr	r3, [pc, #80]	; (20070098 <SystemInit+0x8c>)
20070046:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20070048:	f022 0203 	bic.w	r2, r2, #3
2007004c:	f042 0201 	orr.w	r2, r2, #1
20070050:	631a      	str	r2, [r3, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070052:	461a      	mov	r2, r3
20070054:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070056:	f013 0f08 	tst.w	r3, #8
2007005a:	d0fb      	beq.n	20070054 <SystemInit+0x48>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007005c:	4a11      	ldr	r2, [pc, #68]	; (200700a4 <SystemInit+0x98>)
2007005e:	4b0e      	ldr	r3, [pc, #56]	; (20070098 <SystemInit+0x8c>)
20070060:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070062:	461a      	mov	r2, r3
20070064:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070066:	f013 0f02 	tst.w	r3, #2
2007006a:	d0fb      	beq.n	20070064 <SystemInit+0x58>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007006c:	2211      	movs	r2, #17
2007006e:	4b0a      	ldr	r3, [pc, #40]	; (20070098 <SystemInit+0x8c>)
20070070:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070072:	461a      	mov	r2, r3
20070074:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070076:	f013 0f08 	tst.w	r3, #8
2007007a:	d0fb      	beq.n	20070074 <SystemInit+0x68>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007007c:	2212      	movs	r2, #18
2007007e:	4b06      	ldr	r3, [pc, #24]	; (20070098 <SystemInit+0x8c>)
20070080:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070082:	461a      	mov	r2, r3
20070084:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070086:	f013 0f08 	tst.w	r3, #8
2007008a:	d0fb      	beq.n	20070084 <SystemInit+0x78>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007008c:	4a06      	ldr	r2, [pc, #24]	; (200700a8 <SystemInit+0x9c>)
2007008e:	4b07      	ldr	r3, [pc, #28]	; (200700ac <SystemInit+0xa0>)
20070090:	601a      	str	r2, [r3, #0]
20070092:	4770      	bx	lr
20070094:	400e0a00 	.word	0x400e0a00
20070098:	400e0600 	.word	0x400e0600
2007009c:	00370809 	.word	0x00370809
200700a0:	01370809 	.word	0x01370809
200700a4:	200d3f01 	.word	0x200d3f01
200700a8:	0501bd00 	.word	0x0501bd00
200700ac:	20070140 	.word	0x20070140

200700b0 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700b0:	4b1b      	ldr	r3, [pc, #108]	; (20070120 <system_init_flash+0x70>)
200700b2:	4298      	cmp	r0, r3
200700b4:	d806      	bhi.n	200700c4 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700b6:	2300      	movs	r3, #0
200700b8:	4a1a      	ldr	r2, [pc, #104]	; (20070124 <system_init_flash+0x74>)
200700ba:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700bc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700c0:	6013      	str	r3, [r2, #0]
200700c2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700c4:	4b18      	ldr	r3, [pc, #96]	; (20070128 <system_init_flash+0x78>)
200700c6:	4298      	cmp	r0, r3
200700c8:	d807      	bhi.n	200700da <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700ca:	f44f 7380 	mov.w	r3, #256	; 0x100
200700ce:	4a15      	ldr	r2, [pc, #84]	; (20070124 <system_init_flash+0x74>)
200700d0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700d2:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700d6:	6013      	str	r3, [r2, #0]
200700d8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700da:	4b14      	ldr	r3, [pc, #80]	; (2007012c <system_init_flash+0x7c>)
200700dc:	4298      	cmp	r0, r3
200700de:	d807      	bhi.n	200700f0 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700e0:	f44f 7300 	mov.w	r3, #512	; 0x200
200700e4:	4a0f      	ldr	r2, [pc, #60]	; (20070124 <system_init_flash+0x74>)
200700e6:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700e8:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ec:	6013      	str	r3, [r2, #0]
200700ee:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700f0:	4b0f      	ldr	r3, [pc, #60]	; (20070130 <system_init_flash+0x80>)
200700f2:	4298      	cmp	r0, r3
200700f4:	d807      	bhi.n	20070106 <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700f6:	f44f 7340 	mov.w	r3, #768	; 0x300
200700fa:	4a0a      	ldr	r2, [pc, #40]	; (20070124 <system_init_flash+0x74>)
200700fc:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700fe:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070102:	6013      	str	r3, [r2, #0]
20070104:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
20070106:	4b0b      	ldr	r3, [pc, #44]	; (20070134 <system_init_flash+0x84>)
20070108:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007010a:	bf94      	ite	ls
2007010c:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070110:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070114:	4a03      	ldr	r2, [pc, #12]	; (20070124 <system_init_flash+0x74>)
20070116:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
20070118:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007011c:	6013      	str	r3, [r2, #0]
2007011e:	4770      	bx	lr
20070120:	0121eabf 	.word	0x0121eabf
20070124:	400e0a00 	.word	0x400e0a00
20070128:	02faf07f 	.word	0x02faf07f
2007012c:	03d08fff 	.word	0x03d08fff
20070130:	04c4b3ff 	.word	0x04c4b3ff
20070134:	055d4a7f 	.word	0x055d4a7f

20070138 <bSL>:
20070138:	06400640                                         @.

2007013a <bS>:
2007013a:	00010640                                         @.

2007013c <g_interrupt_enabled>:
2007013c:	00000001                                ....

20070140 <SystemCoreClock>:
20070140:	003d0900 00000000                       ..=.....

20070148 <impure_data>:
20070148:	00000000 20070434 2007049c 20070504     ....4.. ... ... 
	...
2007017c:	00083ef8 00000000 00000000 00000000     .>..............
	...
200701f0:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20070200:	0005deec 0000000b 00000000 00000000     ................
	...

20070570 <_impure_ptr>:
20070570:	20070148                                H.. 

20070574 <lc_ctype_charset>:
20070574:	49435341 00000049 00000000 00000000     ASCII...........
	...

20070594 <__mb_cur_max>:
20070594:	00000001                                ....

20070598 <__malloc_av_>:
	...
200705a0:	20070598 20070598 200705a0 200705a0     ... ... ... ... 
200705b0:	200705a8 200705a8 200705b0 200705b0     ... ... ... ... 
200705c0:	200705b8 200705b8 200705c0 200705c0     ... ... ... ... 
200705d0:	200705c8 200705c8 200705d0 200705d0     ... ... ... ... 
200705e0:	200705d8 200705d8 200705e0 200705e0     ... ... ... ... 
200705f0:	200705e8 200705e8 200705f0 200705f0     ... ... ... ... 
20070600:	200705f8 200705f8 20070600 20070600     ... ... ... ... 
20070610:	20070608 20070608 20070610 20070610     ... ... ... ... 
20070620:	20070618 20070618 20070620 20070620     ... ...  ..  .. 
20070630:	20070628 20070628 20070630 20070630     (.. (.. 0.. 0.. 
20070640:	20070638 20070638 20070640 20070640     8.. 8.. @.. @.. 
20070650:	20070648 20070648 20070650 20070650     H.. H.. P.. P.. 
20070660:	20070658 20070658 20070660 20070660     X.. X.. `.. `.. 
20070670:	20070668 20070668 20070670 20070670     h.. h.. p.. p.. 
20070680:	20070678 20070678 20070680 20070680     x.. x.. ... ... 
20070690:	20070688 20070688 20070690 20070690     ... ... ... ... 
200706a0:	20070698 20070698 200706a0 200706a0     ... ... ... ... 
200706b0:	200706a8 200706a8 200706b0 200706b0     ... ... ... ... 
200706c0:	200706b8 200706b8 200706c0 200706c0     ... ... ... ... 
200706d0:	200706c8 200706c8 200706d0 200706d0     ... ... ... ... 
200706e0:	200706d8 200706d8 200706e0 200706e0     ... ... ... ... 
200706f0:	200706e8 200706e8 200706f0 200706f0     ... ... ... ... 
20070700:	200706f8 200706f8 20070700 20070700     ... ... ... ... 
20070710:	20070708 20070708 20070710 20070710     ... ... ... ... 
20070720:	20070718 20070718 20070720 20070720     ... ...  ..  .. 
20070730:	20070728 20070728 20070730 20070730     (.. (.. 0.. 0.. 
20070740:	20070738 20070738 20070740 20070740     8.. 8.. @.. @.. 
20070750:	20070748 20070748 20070750 20070750     H.. H.. P.. P.. 
20070760:	20070758 20070758 20070760 20070760     X.. X.. `.. `.. 
20070770:	20070768 20070768 20070770 20070770     h.. h.. p.. p.. 
20070780:	20070778 20070778 20070780 20070780     x.. x.. ... ... 
20070790:	20070788 20070788 20070790 20070790     ... ... ... ... 
200707a0:	20070798 20070798 200707a0 200707a0     ... ... ... ... 
200707b0:	200707a8 200707a8 200707b0 200707b0     ... ... ... ... 
200707c0:	200707b8 200707b8 200707c0 200707c0     ... ... ... ... 
200707d0:	200707c8 200707c8 200707d0 200707d0     ... ... ... ... 
200707e0:	200707d8 200707d8 200707e0 200707e0     ... ... ... ... 
200707f0:	200707e8 200707e8 200707f0 200707f0     ... ... ... ... 
20070800:	200707f8 200707f8 20070800 20070800     ... ... ... ... 
20070810:	20070808 20070808 20070810 20070810     ... ... ... ... 
20070820:	20070818 20070818 20070820 20070820     ... ...  ..  .. 
20070830:	20070828 20070828 20070830 20070830     (.. (.. 0.. 0.. 
20070840:	20070838 20070838 20070840 20070840     8.. 8.. @.. @.. 
20070850:	20070848 20070848 20070850 20070850     H.. H.. P.. P.. 
20070860:	20070858 20070858 20070860 20070860     X.. X.. `.. `.. 
20070870:	20070868 20070868 20070870 20070870     h.. h.. p.. p.. 
20070880:	20070878 20070878 20070880 20070880     x.. x.. ... ... 
20070890:	20070888 20070888 20070890 20070890     ... ... ... ... 
200708a0:	20070898 20070898 200708a0 200708a0     ... ... ... ... 
200708b0:	200708a8 200708a8 200708b0 200708b0     ... ... ... ... 
200708c0:	200708b8 200708b8 200708c0 200708c0     ... ... ... ... 
200708d0:	200708c8 200708c8 200708d0 200708d0     ... ... ... ... 
200708e0:	200708d8 200708d8 200708e0 200708e0     ... ... ... ... 
200708f0:	200708e8 200708e8 200708f0 200708f0     ... ... ... ... 
20070900:	200708f8 200708f8 20070900 20070900     ... ... ... ... 
20070910:	20070908 20070908 20070910 20070910     ... ... ... ... 
20070920:	20070918 20070918 20070920 20070920     ... ...  ..  .. 
20070930:	20070928 20070928 20070930 20070930     (.. (.. 0.. 0.. 
20070940:	20070938 20070938 20070940 20070940     8.. 8.. @.. @.. 
20070950:	20070948 20070948 20070950 20070950     H.. H.. P.. P.. 
20070960:	20070958 20070958 20070960 20070960     X.. X.. `.. `.. 
20070970:	20070968 20070968 20070970 20070970     h.. h.. p.. p.. 
20070980:	20070978 20070978 20070980 20070980     x.. x.. ... ... 
20070990:	20070988 20070988 20070990 20070990     ... ... ... ... 

200709a0 <__malloc_trim_threshold>:
200709a0:	00020000                                ....

200709a4 <__malloc_sbrk_base>:
200709a4:	ffffffff                                ....

200709a8 <__wctomb>:
200709a8:	00083c85                                .<..
