
TestProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004118  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00084118  00084118  0000c118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009ac  20070000  00084120  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000200  200709ac  00084acc  000109ac  2**2
                  ALLOC
  4 .stack        00002004  20070bac  00084ccc  000109ac  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  000109ac  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  000109d5  2**0
                  CONTENTS, READONLY
  7 .debug_info   0000e795  00000000  00000000  00010a30  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002a02  00000000  00000000  0001f1c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00005941  00000000  00000000  00021bc7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000bd8  00000000  00000000  00027508  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000ac8  00000000  00000000  000280e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001962a  00000000  00000000  00028ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00010dd2  00000000  00000000  000421d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00067f86  00000000  00000000  00052fa4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002428  00000000  00000000  000baf2c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20072bb0 	.word	0x20072bb0
   80004:	00080c65 	.word	0x00080c65
   80008:	00080c61 	.word	0x00080c61
   8000c:	00080c61 	.word	0x00080c61
   80010:	00080c61 	.word	0x00080c61
   80014:	00080c61 	.word	0x00080c61
   80018:	00080c61 	.word	0x00080c61
	...
   8002c:	000802a9 	.word	0x000802a9
   80030:	00080c61 	.word	0x00080c61
   80034:	00000000 	.word	0x00000000
   80038:	000802e1 	.word	0x000802e1
   8003c:	0008031d 	.word	0x0008031d
   80040:	00080c61 	.word	0x00080c61
   80044:	00080c61 	.word	0x00080c61
   80048:	00080c61 	.word	0x00080c61
   8004c:	00080c61 	.word	0x00080c61
   80050:	00080c61 	.word	0x00080c61
   80054:	00080c61 	.word	0x00080c61
   80058:	00080c61 	.word	0x00080c61
   8005c:	00080c61 	.word	0x00080c61
   80060:	00080c61 	.word	0x00080c61
   80064:	00080c61 	.word	0x00080c61
   80068:	00000000 	.word	0x00000000
   8006c:	00080aad 	.word	0x00080aad
   80070:	00080ac1 	.word	0x00080ac1
   80074:	00080ad5 	.word	0x00080ad5
   80078:	00080ae9 	.word	0x00080ae9
	...
   80084:	000804f9 	.word	0x000804f9
   80088:	00080c61 	.word	0x00080c61
   8008c:	00080c61 	.word	0x00080c61
   80090:	00080c61 	.word	0x00080c61
   80094:	00080c61 	.word	0x00080c61
   80098:	00080c61 	.word	0x00080c61
   8009c:	00080c61 	.word	0x00080c61
   800a0:	00080c61 	.word	0x00080c61
   800a4:	00000000 	.word	0x00000000
   800a8:	00080c61 	.word	0x00080c61
   800ac:	00080c61 	.word	0x00080c61
   800b0:	00080c61 	.word	0x00080c61
   800b4:	00080c61 	.word	0x00080c61
   800b8:	00080c61 	.word	0x00080c61
   800bc:	00080c61 	.word	0x00080c61
   800c0:	00080c61 	.word	0x00080c61
   800c4:	00080c61 	.word	0x00080c61
   800c8:	00080c61 	.word	0x00080c61
   800cc:	00080c61 	.word	0x00080c61
   800d0:	00080c61 	.word	0x00080c61
   800d4:	00080c61 	.word	0x00080c61
   800d8:	00080c61 	.word	0x00080c61
   800dc:	00080c61 	.word	0x00080c61
   800e0:	00080c61 	.word	0x00080c61
   800e4:	00080c61 	.word	0x00080c61
   800e8:	00080c61 	.word	0x00080c61
   800ec:	00080c61 	.word	0x00080c61
   800f0:	00080c61 	.word	0x00080c61

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	200709ac 	.word	0x200709ac
   80110:	00000000 	.word	0x00000000
   80114:	00084120 	.word	0x00084120

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b06      	ldr	r3, [pc, #24]	; (80134 <frame_dummy+0x1c>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4806      	ldr	r0, [pc, #24]	; (80138 <frame_dummy+0x20>)
   80120:	4906      	ldr	r1, [pc, #24]	; (8013c <frame_dummy+0x24>)
   80122:	f3af 8000 	nop.w
   80126:	4806      	ldr	r0, [pc, #24]	; (80140 <frame_dummy+0x28>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b113      	cbz	r3, 80132 <frame_dummy+0x1a>
   8012c:	4b05      	ldr	r3, [pc, #20]	; (80144 <frame_dummy+0x2c>)
   8012e:	b103      	cbz	r3, 80132 <frame_dummy+0x1a>
   80130:	4798      	blx	r3
   80132:	bd08      	pop	{r3, pc}
   80134:	00000000 	.word	0x00000000
   80138:	00084120 	.word	0x00084120
   8013c:	200709b0 	.word	0x200709b0
   80140:	00084120 	.word	0x00084120
   80144:	00000000 	.word	0x00000000

00080148 <button_handler>:
#include <asf.h>

#define greenLED  IOPORT_CREATE_PIN(PIOB, 26)
#define redLED  IOPORT_CREATE_PIN(PIOA, 14)

void button_handler(const uint32_t id, const uint32_t index){
   80148:	b508      	push	{r3, lr}
	if(id == ID_PIOC && index == PIO_PC13){	
   8014a:	280d      	cmp	r0, #13
   8014c:	d11a      	bne.n	80184 <button_handler+0x3c>
   8014e:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
   80152:	d117      	bne.n	80184 <button_handler+0x3c>
		if(pio_get(PIOC, PIO_TYPE_PIO_INPUT, PIO_PC13) == 1){
   80154:	480c      	ldr	r0, [pc, #48]	; (80188 <button_handler+0x40>)
   80156:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8015a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   8015e:	4b0b      	ldr	r3, [pc, #44]	; (8018c <button_handler+0x44>)
   80160:	4798      	blx	r3
   80162:	2801      	cmp	r0, #1
   80164:	d107      	bne.n	80176 <button_handler+0x2e>
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   80166:	4b0a      	ldr	r3, [pc, #40]	; (80190 <button_handler+0x48>)
   80168:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   8016c:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   8016e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80172:	631a      	str	r2, [r3, #48]	; 0x30
   80174:	bd08      	pop	{r3, pc}
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   80176:	4b06      	ldr	r3, [pc, #24]	; (80190 <button_handler+0x48>)
   80178:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   8017c:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   8017e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80182:	635a      	str	r2, [r3, #52]	; 0x34
   80184:	bd08      	pop	{r3, pc}
   80186:	bf00      	nop
   80188:	400e1200 	.word	0x400e1200
   8018c:	000807b1 	.word	0x000807b1
   80190:	400e1000 	.word	0x400e1000

00080194 <button_config>:
			ioport_set_pin_level(greenLED, 0);
		}
	}
}

void button_config(uint32_t ul_id, Pio *p_pio, const uint32_t ul_mask){
   80194:	b570      	push	{r4, r5, r6, lr}
   80196:	b082      	sub	sp, #8
   80198:	4606      	mov	r6, r0
   8019a:	460d      	mov	r5, r1
   8019c:	4614      	mov	r4, r2
	pmc_set_writeprotect(false);
   8019e:	2000      	movs	r0, #0
   801a0:	4b0d      	ldr	r3, [pc, #52]	; (801d8 <button_config+0x44>)
   801a2:	4798      	blx	r3
	pmc_enable_periph_clk(ul_id);
   801a4:	4630      	mov	r0, r6
   801a6:	4b0d      	ldr	r3, [pc, #52]	; (801dc <button_config+0x48>)
   801a8:	4798      	blx	r3
	pio_set_input(p_pio, ul_mask, PIO_PULLUP);
   801aa:	4628      	mov	r0, r5
   801ac:	4621      	mov	r1, r4
   801ae:	2201      	movs	r2, #1
   801b0:	4b0b      	ldr	r3, [pc, #44]	; (801e0 <button_config+0x4c>)
   801b2:	4798      	blx	r3
	pio_handler_set(p_pio, ul_id, ul_mask, PIO_IT_EDGE, button_handler);
   801b4:	4b0b      	ldr	r3, [pc, #44]	; (801e4 <button_config+0x50>)
   801b6:	9300      	str	r3, [sp, #0]
   801b8:	4628      	mov	r0, r5
   801ba:	4631      	mov	r1, r6
   801bc:	4622      	mov	r2, r4
   801be:	2340      	movs	r3, #64	; 0x40
   801c0:	4e09      	ldr	r6, [pc, #36]	; (801e8 <button_config+0x54>)
   801c2:	47b0      	blx	r6
	pio_enable_interrupt(p_pio, ul_mask);
   801c4:	4628      	mov	r0, r5
   801c6:	4621      	mov	r1, r4
   801c8:	4b08      	ldr	r3, [pc, #32]	; (801ec <button_config+0x58>)
   801ca:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   801cc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   801d0:	4b07      	ldr	r3, [pc, #28]	; (801f0 <button_config+0x5c>)
   801d2:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(PIOC_IRQn);
   801d4:	b002      	add	sp, #8
   801d6:	bd70      	pop	{r4, r5, r6, pc}
   801d8:	00080c3d 	.word	0x00080c3d
   801dc:	00080be5 	.word	0x00080be5
   801e0:	00080809 	.word	0x00080809
   801e4:	00080149 	.word	0x00080149
   801e8:	00080a71 	.word	0x00080a71
   801ec:	00080895 	.word	0x00080895
   801f0:	e000e100 	.word	0xe000e100

000801f4 <pulseCounter_handler>:
 */ 

#include "pulseCounterHandler.h" /* Declaration made available here */


void pulseCounter_handler(int counterA){
   801f4:	4770      	bx	lr
   801f6:	bf00      	nop

000801f8 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   801f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   801fc:	460c      	mov	r4, r1
   801fe:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
   80200:	b960      	cbnz	r0, 8021c <_read+0x24>
		return -1;
	}

	for (; len > 0; --len) {
   80202:	2a00      	cmp	r2, #0
   80204:	dd0e      	ble.n	80224 <_read+0x2c>
   80206:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   80208:	4e09      	ldr	r6, [pc, #36]	; (80230 <_read+0x38>)
   8020a:	4d0a      	ldr	r5, [pc, #40]	; (80234 <_read+0x3c>)
   8020c:	6830      	ldr	r0, [r6, #0]
   8020e:	4621      	mov	r1, r4
   80210:	682b      	ldr	r3, [r5, #0]
   80212:	4798      	blx	r3
		ptr++;
   80214:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   80216:	42bc      	cmp	r4, r7
   80218:	d1f8      	bne.n	8020c <_read+0x14>
   8021a:	e006      	b.n	8022a <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
   8021c:	f04f 30ff 	mov.w	r0, #4294967295
   80220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len > 0; --len) {
   80224:	2000      	movs	r0, #0
   80226:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
   8022a:	4640      	mov	r0, r8
	}
	return nChars;
}
   8022c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80230:	20070ba4 	.word	0x20070ba4
   80234:	20070b9c 	.word	0x20070b9c

00080238 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   80238:	6943      	ldr	r3, [r0, #20]
   8023a:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   8023e:	bf1d      	ittte	ne
   80240:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   80244:	61c1      	strne	r1, [r0, #28]
	return 0;
   80246:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
   80248:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
   8024a:	4770      	bx	lr

0008024c <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   8024c:	6943      	ldr	r3, [r0, #20]
   8024e:	f013 0f01 	tst.w	r3, #1
   80252:	d005      	beq.n	80260 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   80254:	6983      	ldr	r3, [r0, #24]
   80256:	f3c3 0308 	ubfx	r3, r3, #0, #9
   8025a:	600b      	str	r3, [r1, #0]

	return 0;
   8025c:	2000      	movs	r0, #0
   8025e:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   80260:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   80262:	4770      	bx	lr

00080264 <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
   80264:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
   80266:	685a      	ldr	r2, [r3, #4]
   80268:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
   8026a:	6842      	ldr	r2, [r0, #4]
   8026c:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   8026e:	685a      	ldr	r2, [r3, #4]
   80270:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
   80272:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
   80274:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   80276:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   80278:	6803      	ldr	r3, [r0, #0]
   8027a:	3301      	adds	r3, #1
   8027c:	6003      	str	r3, [r0, #0]
   8027e:	4770      	bx	lr

00080280 <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   80280:	6843      	ldr	r3, [r0, #4]
   80282:	6882      	ldr	r2, [r0, #8]
   80284:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   80286:	6883      	ldr	r3, [r0, #8]
   80288:	6842      	ldr	r2, [r0, #4]
   8028a:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
   8028c:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   8028e:	685a      	ldr	r2, [r3, #4]
   80290:	4282      	cmp	r2, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   80292:	bf04      	itt	eq
   80294:	6882      	ldreq	r2, [r0, #8]
   80296:	605a      	streq	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
   80298:	2200      	movs	r2, #0
   8029a:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
   8029c:	681a      	ldr	r2, [r3, #0]
   8029e:	3a01      	subs	r2, #1
   802a0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   802a2:	6818      	ldr	r0, [r3, #0]
}
   802a4:	4770      	bx	lr
   802a6:	bf00      	nop

000802a8 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

__attribute__ (( naked )) void SVC_Handler( void )
{
	__asm volatile (
   802a8:	4b06      	ldr	r3, [pc, #24]	; (802c4 <pxCurrentTCBConst2>)
   802aa:	6819      	ldr	r1, [r3, #0]
   802ac:	6808      	ldr	r0, [r1, #0]
   802ae:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   802b2:	f380 8809 	msr	PSP, r0
   802b6:	f04f 0000 	mov.w	r0, #0
   802ba:	f380 8811 	msr	BASEPRI, r0
   802be:	f04e 0e0d 	orr.w	lr, lr, #13
   802c2:	4770      	bx	lr

000802c4 <pxCurrentTCBConst2>:
   802c4:	20070a3c 	.word	0x20070a3c

000802c8 <ulPortSetInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
   802c8:	f3ef 8011 	mrs	r0, BASEPRI
   802cc:	f04f 01a0 	mov.w	r1, #160	; 0xa0
   802d0:	f381 8811 	msr	BASEPRI, r1
   802d4:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
}
   802d6:	2000      	movs	r0, #0

000802d8 <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
   802d8:	f380 8811 	msr	BASEPRI, r0
   802dc:	4770      	bx	lr
   802de:	bf00      	nop

000802e0 <PendSV_Handler>:

__attribute__(( naked )) void PendSV_Handler( void )
{
	/* This is a naked function. */

	__asm volatile
   802e0:	f3ef 8009 	mrs	r0, PSP
   802e4:	4b0c      	ldr	r3, [pc, #48]	; (80318 <pxCurrentTCBConst>)
   802e6:	681a      	ldr	r2, [r3, #0]
   802e8:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   802ec:	6010      	str	r0, [r2, #0]
   802ee:	e92d 4008 	stmdb	sp!, {r3, lr}
   802f2:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   802f6:	f380 8811 	msr	BASEPRI, r0
   802fa:	f000 f8b5 	bl	80468 <vTaskSwitchContext>
   802fe:	f04f 0000 	mov.w	r0, #0
   80302:	f380 8811 	msr	BASEPRI, r0
   80306:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   8030a:	6819      	ldr	r1, [r3, #0]
   8030c:	6808      	ldr	r0, [r1, #0]
   8030e:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80312:	f380 8809 	msr	PSP, r0
   80316:	4770      	bx	lr

00080318 <pxCurrentTCBConst>:
   80318:	20070a3c 	.word	0x20070a3c

0008031c <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void SysTick_Handler( void )
{
   8031c:	b508      	push	{r3, lr}
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   8031e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80322:	4b05      	ldr	r3, [pc, #20]	; (80338 <SysTick_Handler+0x1c>)
   80324:	601a      	str	r2, [r3, #0]
	to generate the tick interrupt. */
	#if configUSE_TICKLESS_IDLE == 1
		portNVIC_SYSTICK_LOAD_REG = ulTimerReloadValueForOneTick;
	#endif

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
   80326:	4b05      	ldr	r3, [pc, #20]	; (8033c <SysTick_Handler+0x20>)
   80328:	4798      	blx	r3
	{
		vTaskIncrementTick();
   8032a:	4b05      	ldr	r3, [pc, #20]	; (80340 <SysTick_Handler+0x24>)
   8032c:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
   8032e:	2000      	movs	r0, #0
   80330:	4b04      	ldr	r3, [pc, #16]	; (80344 <SysTick_Handler+0x28>)
   80332:	4798      	blx	r3
   80334:	bd08      	pop	{r3, pc}
   80336:	bf00      	nop
   80338:	e000ed04 	.word	0xe000ed04
   8033c:	000802c9 	.word	0x000802c9
   80340:	00080349 	.word	0x00080349
   80344:	000802d9 	.word	0x000802d9

00080348 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
   80348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   8034c:	4b3a      	ldr	r3, [pc, #232]	; (80438 <vTaskIncrementTick+0xf0>)
   8034e:	681b      	ldr	r3, [r3, #0]
   80350:	2b00      	cmp	r3, #0
   80352:	d16b      	bne.n	8042c <vTaskIncrementTick+0xe4>
	{
		++xTickCount;
   80354:	4b39      	ldr	r3, [pc, #228]	; (8043c <vTaskIncrementTick+0xf4>)
   80356:	681a      	ldr	r2, [r3, #0]
   80358:	3201      	adds	r2, #1
   8035a:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
   8035c:	681b      	ldr	r3, [r3, #0]
   8035e:	bb03      	cbnz	r3, 803a2 <vTaskIncrementTick+0x5a>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
   80360:	4b37      	ldr	r3, [pc, #220]	; (80440 <vTaskIncrementTick+0xf8>)
   80362:	681b      	ldr	r3, [r3, #0]
   80364:	681b      	ldr	r3, [r3, #0]
   80366:	b11b      	cbz	r3, 80370 <vTaskIncrementTick+0x28>
   80368:	4b36      	ldr	r3, [pc, #216]	; (80444 <vTaskIncrementTick+0xfc>)
   8036a:	4798      	blx	r3
   8036c:	bf00      	nop
   8036e:	e7fd      	b.n	8036c <vTaskIncrementTick+0x24>

			pxTemp = pxDelayedTaskList;
   80370:	4b33      	ldr	r3, [pc, #204]	; (80440 <vTaskIncrementTick+0xf8>)
   80372:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
   80374:	4a34      	ldr	r2, [pc, #208]	; (80448 <vTaskIncrementTick+0x100>)
   80376:	6810      	ldr	r0, [r2, #0]
   80378:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
   8037a:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
   8037c:	4a33      	ldr	r2, [pc, #204]	; (8044c <vTaskIncrementTick+0x104>)
   8037e:	6811      	ldr	r1, [r2, #0]
   80380:	3101      	adds	r1, #1
   80382:	6011      	str	r1, [r2, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   80384:	681b      	ldr	r3, [r3, #0]
   80386:	681b      	ldr	r3, [r3, #0]
   80388:	b923      	cbnz	r3, 80394 <vTaskIncrementTick+0x4c>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
   8038a:	f04f 32ff 	mov.w	r2, #4294967295
   8038e:	4b30      	ldr	r3, [pc, #192]	; (80450 <vTaskIncrementTick+0x108>)
   80390:	601a      	str	r2, [r3, #0]
   80392:	e006      	b.n	803a2 <vTaskIncrementTick+0x5a>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   80394:	4b2a      	ldr	r3, [pc, #168]	; (80440 <vTaskIncrementTick+0xf8>)
   80396:	681b      	ldr	r3, [r3, #0]
   80398:	68db      	ldr	r3, [r3, #12]
   8039a:	68db      	ldr	r3, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   8039c:	685a      	ldr	r2, [r3, #4]
   8039e:	4b2c      	ldr	r3, [pc, #176]	; (80450 <vTaskIncrementTick+0x108>)
   803a0:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
   803a2:	4b26      	ldr	r3, [pc, #152]	; (8043c <vTaskIncrementTick+0xf4>)
   803a4:	681a      	ldr	r2, [r3, #0]
   803a6:	4b2a      	ldr	r3, [pc, #168]	; (80450 <vTaskIncrementTick+0x108>)
   803a8:	681b      	ldr	r3, [r3, #0]
   803aa:	429a      	cmp	r2, r3
   803ac:	d342      	bcc.n	80434 <vTaskIncrementTick+0xec>
   803ae:	4b24      	ldr	r3, [pc, #144]	; (80440 <vTaskIncrementTick+0xf8>)
   803b0:	681b      	ldr	r3, [r3, #0]
   803b2:	681b      	ldr	r3, [r3, #0]
   803b4:	b14b      	cbz	r3, 803ca <vTaskIncrementTick+0x82>
   803b6:	4b22      	ldr	r3, [pc, #136]	; (80440 <vTaskIncrementTick+0xf8>)
   803b8:	681b      	ldr	r3, [r3, #0]
   803ba:	68db      	ldr	r3, [r3, #12]
   803bc:	68dc      	ldr	r4, [r3, #12]
   803be:	6863      	ldr	r3, [r4, #4]
   803c0:	4a1e      	ldr	r2, [pc, #120]	; (8043c <vTaskIncrementTick+0xf4>)
   803c2:	6812      	ldr	r2, [r2, #0]
   803c4:	4293      	cmp	r3, r2
   803c6:	d913      	bls.n	803f0 <vTaskIncrementTick+0xa8>
   803c8:	e00e      	b.n	803e8 <vTaskIncrementTick+0xa0>
   803ca:	f04f 32ff 	mov.w	r2, #4294967295
   803ce:	4b20      	ldr	r3, [pc, #128]	; (80450 <vTaskIncrementTick+0x108>)
   803d0:	601a      	str	r2, [r3, #0]
   803d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   803d6:	4b1a      	ldr	r3, [pc, #104]	; (80440 <vTaskIncrementTick+0xf8>)
   803d8:	681b      	ldr	r3, [r3, #0]
   803da:	68db      	ldr	r3, [r3, #12]
   803dc:	68dc      	ldr	r4, [r3, #12]
   803de:	6863      	ldr	r3, [r4, #4]
   803e0:	4a16      	ldr	r2, [pc, #88]	; (8043c <vTaskIncrementTick+0xf4>)
   803e2:	6812      	ldr	r2, [r2, #0]
   803e4:	4293      	cmp	r3, r2
   803e6:	d907      	bls.n	803f8 <vTaskIncrementTick+0xb0>
   803e8:	4a19      	ldr	r2, [pc, #100]	; (80450 <vTaskIncrementTick+0x108>)
   803ea:	6013      	str	r3, [r2, #0]
   803ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   803f0:	4e18      	ldr	r6, [pc, #96]	; (80454 <vTaskIncrementTick+0x10c>)
   803f2:	4f19      	ldr	r7, [pc, #100]	; (80458 <vTaskIncrementTick+0x110>)
   803f4:	f8df 806c 	ldr.w	r8, [pc, #108]	; 80464 <vTaskIncrementTick+0x11c>
   803f8:	1d25      	adds	r5, r4, #4
   803fa:	4628      	mov	r0, r5
   803fc:	47b0      	blx	r6
   803fe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   80400:	b113      	cbz	r3, 80408 <vTaskIncrementTick+0xc0>
   80402:	f104 0018 	add.w	r0, r4, #24
   80406:	47b0      	blx	r6
   80408:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   8040a:	683a      	ldr	r2, [r7, #0]
   8040c:	4293      	cmp	r3, r2
   8040e:	bf88      	it	hi
   80410:	603b      	strhi	r3, [r7, #0]
   80412:	eb03 0083 	add.w	r0, r3, r3, lsl #2
   80416:	eb08 0080 	add.w	r0, r8, r0, lsl #2
   8041a:	4629      	mov	r1, r5
   8041c:	4b0f      	ldr	r3, [pc, #60]	; (8045c <vTaskIncrementTick+0x114>)
   8041e:	4798      	blx	r3
   80420:	4b07      	ldr	r3, [pc, #28]	; (80440 <vTaskIncrementTick+0xf8>)
   80422:	681b      	ldr	r3, [r3, #0]
   80424:	681b      	ldr	r3, [r3, #0]
   80426:	2b00      	cmp	r3, #0
   80428:	d1d5      	bne.n	803d6 <vTaskIncrementTick+0x8e>
   8042a:	e7ce      	b.n	803ca <vTaskIncrementTick+0x82>
	}
	else
	{
		++uxMissedTicks;
   8042c:	4b0c      	ldr	r3, [pc, #48]	; (80460 <vTaskIncrementTick+0x118>)
   8042e:	681a      	ldr	r2, [r3, #0]
   80430:	3201      	adds	r2, #1
   80432:	601a      	str	r2, [r3, #0]
   80434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80438:	20070a38 	.word	0x20070a38
   8043c:	20070a44 	.word	0x20070a44
   80440:	200709cc 	.word	0x200709cc
   80444:	000802c9 	.word	0x000802c9
   80448:	20070a48 	.word	0x20070a48
   8044c:	20070a40 	.word	0x20070a40
   80450:	20070138 	.word	0x20070138
   80454:	00080281 	.word	0x00080281
   80458:	200709d0 	.word	0x200709d0
   8045c:	00080265 	.word	0x00080265
   80460:	200709c8 	.word	0x200709c8
   80464:	200709d4 	.word	0x200709d4

00080468 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   80468:	b508      	push	{r3, lr}
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
   8046a:	4b1d      	ldr	r3, [pc, #116]	; (804e0 <vTaskSwitchContext+0x78>)
   8046c:	681b      	ldr	r3, [r3, #0]
   8046e:	b95b      	cbnz	r3, 80488 <vTaskSwitchContext+0x20>
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   80470:	4b1c      	ldr	r3, [pc, #112]	; (804e4 <vTaskSwitchContext+0x7c>)
   80472:	681b      	ldr	r3, [r3, #0]
   80474:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   80478:	009b      	lsls	r3, r3, #2
   8047a:	4a1b      	ldr	r2, [pc, #108]	; (804e8 <vTaskSwitchContext+0x80>)
   8047c:	58d3      	ldr	r3, [r2, r3]
   8047e:	b9cb      	cbnz	r3, 804b4 <vTaskSwitchContext+0x4c>
   80480:	4b18      	ldr	r3, [pc, #96]	; (804e4 <vTaskSwitchContext+0x7c>)
   80482:	681b      	ldr	r3, [r3, #0]
   80484:	b953      	cbnz	r3, 8049c <vTaskSwitchContext+0x34>
   80486:	e005      	b.n	80494 <vTaskSwitchContext+0x2c>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
   80488:	2201      	movs	r2, #1
   8048a:	4b18      	ldr	r3, [pc, #96]	; (804ec <vTaskSwitchContext+0x84>)
   8048c:	601a      	str	r2, [r3, #0]
   8048e:	bd08      	pop	{r3, pc}
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   80490:	681a      	ldr	r2, [r3, #0]
   80492:	b92a      	cbnz	r2, 804a0 <vTaskSwitchContext+0x38>
   80494:	4b16      	ldr	r3, [pc, #88]	; (804f0 <vTaskSwitchContext+0x88>)
   80496:	4798      	blx	r3
   80498:	bf00      	nop
   8049a:	e7fd      	b.n	80498 <vTaskSwitchContext+0x30>
   8049c:	4b11      	ldr	r3, [pc, #68]	; (804e4 <vTaskSwitchContext+0x7c>)
   8049e:	4912      	ldr	r1, [pc, #72]	; (804e8 <vTaskSwitchContext+0x80>)
   804a0:	681a      	ldr	r2, [r3, #0]
   804a2:	3a01      	subs	r2, #1
   804a4:	601a      	str	r2, [r3, #0]
   804a6:	681a      	ldr	r2, [r3, #0]
   804a8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   804ac:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
   804b0:	2a00      	cmp	r2, #0
   804b2:	d0ed      	beq.n	80490 <vTaskSwitchContext+0x28>
   804b4:	4b0b      	ldr	r3, [pc, #44]	; (804e4 <vTaskSwitchContext+0x7c>)
   804b6:	681b      	ldr	r3, [r3, #0]
   804b8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   804bc:	4a0a      	ldr	r2, [pc, #40]	; (804e8 <vTaskSwitchContext+0x80>)
   804be:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   804c2:	685a      	ldr	r2, [r3, #4]
   804c4:	6852      	ldr	r2, [r2, #4]
   804c6:	605a      	str	r2, [r3, #4]
   804c8:	f103 0108 	add.w	r1, r3, #8
   804cc:	428a      	cmp	r2, r1
   804ce:	bf04      	itt	eq
   804d0:	6852      	ldreq	r2, [r2, #4]
   804d2:	605a      	streq	r2, [r3, #4]
   804d4:	685b      	ldr	r3, [r3, #4]
   804d6:	68da      	ldr	r2, [r3, #12]
   804d8:	4b06      	ldr	r3, [pc, #24]	; (804f4 <vTaskSwitchContext+0x8c>)
   804da:	601a      	str	r2, [r3, #0]
   804dc:	bd08      	pop	{r3, pc}
   804de:	bf00      	nop
   804e0:	20070a38 	.word	0x20070a38
   804e4:	200709d0 	.word	0x200709d0
   804e8:	200709d4 	.word	0x200709d4
   804ec:	20070a4c 	.word	0x20070a4c
   804f0:	000802c9 	.word	0x000802c9
   804f4:	20070a3c 	.word	0x20070a3c

000804f8 <USART0_Handler>:
#if SAMD || SAMR21 || SAML21
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
   804f8:	b500      	push	{lr}
   804fa:	b083      	sub	sp, #12
	uint8_t temp;
#if SAMD || SAMR21 || SAML21
	usart_serial_read_packet(&host_uart_module, &temp, 1);
#else
	usart_serial_read_packet(USART_HOST, &temp, 1);
   804fc:	4811      	ldr	r0, [pc, #68]	; (80544 <USART0_Handler+0x4c>)
   804fe:	f10d 0107 	add.w	r1, sp, #7
   80502:	2201      	movs	r2, #1
   80504:	4b10      	ldr	r3, [pc, #64]	; (80548 <USART0_Handler+0x50>)
   80506:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   80508:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   8050a:	f3bf 8f5f 	dmb	sy
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
   8050e:	2200      	movs	r2, #0
   80510:	4b0e      	ldr	r3, [pc, #56]	; (8054c <USART0_Handler+0x54>)
   80512:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
   80514:	4b0e      	ldr	r3, [pc, #56]	; (80550 <USART0_Handler+0x58>)
   80516:	781b      	ldrb	r3, [r3, #0]
   80518:	f89d 1007 	ldrb.w	r1, [sp, #7]
   8051c:	4a0d      	ldr	r2, [pc, #52]	; (80554 <USART0_Handler+0x5c>)
   8051e:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
   80520:	2b9b      	cmp	r3, #155	; 0x9b
   80522:	d103      	bne.n	8052c <USART0_Handler+0x34>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
   80524:	2200      	movs	r2, #0
   80526:	4b0a      	ldr	r3, [pc, #40]	; (80550 <USART0_Handler+0x58>)
   80528:	701a      	strb	r2, [r3, #0]
   8052a:	e002      	b.n	80532 <USART0_Handler+0x3a>
	} else {
		serial_rx_buf_tail++;
   8052c:	3301      	adds	r3, #1
   8052e:	4a08      	ldr	r2, [pc, #32]	; (80550 <USART0_Handler+0x58>)
   80530:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
   80532:	2201      	movs	r2, #1
   80534:	4b05      	ldr	r3, [pc, #20]	; (8054c <USART0_Handler+0x54>)
   80536:	701a      	strb	r2, [r3, #0]
   80538:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   8053c:	b662      	cpsie	i
}
   8053e:	b003      	add	sp, #12
   80540:	f85d fb04 	ldr.w	pc, [sp], #4
   80544:	40098000 	.word	0x40098000
   80548:	000805ad 	.word	0x000805ad
   8054c:	2007013c 	.word	0x2007013c
   80550:	20070aec 	.word	0x20070aec
   80554:	20070a50 	.word	0x20070a50

00080558 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   80558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8055c:	460e      	mov	r6, r1
   8055e:	4615      	mov	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   80560:	3801      	subs	r0, #1
   80562:	2802      	cmp	r0, #2
   80564:	d80f      	bhi.n	80586 <_write+0x2e>
		return -1;
	}

	for (; len != 0; --len) {
   80566:	b192      	cbz	r2, 8058e <_write+0x36>
   80568:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
   8056a:	f8df 803c 	ldr.w	r8, [pc, #60]	; 805a8 <_write+0x50>
   8056e:	4f0d      	ldr	r7, [pc, #52]	; (805a4 <_write+0x4c>)
   80570:	f8d8 0000 	ldr.w	r0, [r8]
   80574:	5d31      	ldrb	r1, [r6, r4]
   80576:	683b      	ldr	r3, [r7, #0]
   80578:	4798      	blx	r3
   8057a:	2800      	cmp	r0, #0
   8057c:	db0a      	blt.n	80594 <_write+0x3c>
			return -1;
		}
		++nChars;
   8057e:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   80580:	42a5      	cmp	r5, r4
   80582:	d1f5      	bne.n	80570 <_write+0x18>
   80584:	e00a      	b.n	8059c <_write+0x44>
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
   80586:	f04f 30ff 	mov.w	r0, #4294967295
   8058a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len != 0; --len) {
   8058e:	2000      	movs	r0, #0
   80590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
   80594:	f04f 30ff 	mov.w	r0, #4294967295
   80598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		++nChars;
   8059c:	4620      	mov	r0, r4
	}
	return nChars;
}
   8059e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   805a2:	bf00      	nop
   805a4:	20070ba0 	.word	0x20070ba0
   805a8:	20070ba4 	.word	0x20070ba4

000805ac <usart_serial_read_packet>:
 * \param len    Length of data
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
   805ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   805b0:	b083      	sub	sp, #12
   805b2:	4605      	mov	r5, r0
	while (len) {
   805b4:	4690      	mov	r8, r2
   805b6:	2a00      	cmp	r2, #0
   805b8:	d047      	beq.n	8064a <usart_serial_read_packet+0x9e>
   805ba:	1c4e      	adds	r6, r1, #1
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   805bc:	4f25      	ldr	r7, [pc, #148]	; (80654 <usart_serial_read_packet+0xa8>)
		while (usart_read(p_usart, &val));
   805be:	4c26      	ldr	r4, [pc, #152]	; (80658 <usart_serial_read_packet+0xac>)
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   805c0:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 8066c <usart_serial_read_packet+0xc0>
	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
   805c4:	f8df b094 	ldr.w	fp, [pc, #148]	; 8065c <usart_serial_read_packet+0xb0>
   805c8:	f106 39ff 	add.w	r9, r6, #4294967295
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
	uint32_t val = 0;
   805cc:	2300      	movs	r3, #0
   805ce:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   805d0:	4b22      	ldr	r3, [pc, #136]	; (8065c <usart_serial_read_packet+0xb0>)
   805d2:	429d      	cmp	r5, r3
   805d4:	d106      	bne.n	805e4 <usart_serial_read_packet+0x38>
		while (uart_read((Uart*)p_usart, data));
   805d6:	4658      	mov	r0, fp
   805d8:	4649      	mov	r1, r9
   805da:	4b21      	ldr	r3, [pc, #132]	; (80660 <usart_serial_read_packet+0xb4>)
   805dc:	4798      	blx	r3
   805de:	2800      	cmp	r0, #0
   805e0:	d1f9      	bne.n	805d6 <usart_serial_read_packet+0x2a>
   805e2:	e019      	b.n	80618 <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   805e4:	4b1f      	ldr	r3, [pc, #124]	; (80664 <usart_serial_read_packet+0xb8>)
   805e6:	429d      	cmp	r5, r3
   805e8:	d109      	bne.n	805fe <usart_serial_read_packet+0x52>
		while (usart_read(p_usart, &val));
   805ea:	4699      	mov	r9, r3
   805ec:	4648      	mov	r0, r9
   805ee:	a901      	add	r1, sp, #4
   805f0:	47a0      	blx	r4
   805f2:	2800      	cmp	r0, #0
   805f4:	d1fa      	bne.n	805ec <usart_serial_read_packet+0x40>
		*data = (uint8_t)(val & 0xFF);
   805f6:	9b01      	ldr	r3, [sp, #4]
   805f8:	f806 3c01 	strb.w	r3, [r6, #-1]
   805fc:	e017      	b.n	8062e <usart_serial_read_packet+0x82>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   805fe:	4b1a      	ldr	r3, [pc, #104]	; (80668 <usart_serial_read_packet+0xbc>)
   80600:	429d      	cmp	r5, r3
   80602:	d109      	bne.n	80618 <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
   80604:	4699      	mov	r9, r3
   80606:	4648      	mov	r0, r9
   80608:	a901      	add	r1, sp, #4
   8060a:	47a0      	blx	r4
   8060c:	2800      	cmp	r0, #0
   8060e:	d1fa      	bne.n	80606 <usart_serial_read_packet+0x5a>
		*data = (uint8_t)(val & 0xFF);
   80610:	9b01      	ldr	r3, [sp, #4]
   80612:	f806 3c01 	strb.w	r3, [r6, #-1]
   80616:	e014      	b.n	80642 <usart_serial_read_packet+0x96>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80618:	4555      	cmp	r5, sl
   8061a:	d108      	bne.n	8062e <usart_serial_read_packet+0x82>
		while (usart_read(p_usart, &val));
   8061c:	4650      	mov	r0, sl
   8061e:	a901      	add	r1, sp, #4
   80620:	47a0      	blx	r4
   80622:	2800      	cmp	r0, #0
   80624:	d1fa      	bne.n	8061c <usart_serial_read_packet+0x70>
		*data = (uint8_t)(val & 0xFF);
   80626:	9b01      	ldr	r3, [sp, #4]
   80628:	f806 3c01 	strb.w	r3, [r6, #-1]
   8062c:	e009      	b.n	80642 <usart_serial_read_packet+0x96>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   8062e:	42bd      	cmp	r5, r7
   80630:	d107      	bne.n	80642 <usart_serial_read_packet+0x96>
		while (usart_read(p_usart, &val));
   80632:	4638      	mov	r0, r7
   80634:	a901      	add	r1, sp, #4
   80636:	47a0      	blx	r4
   80638:	2800      	cmp	r0, #0
   8063a:	d1fa      	bne.n	80632 <usart_serial_read_packet+0x86>
		*data = (uint8_t)(val & 0xFF);
   8063c:	9b01      	ldr	r3, [sp, #4]
   8063e:	f806 3c01 	strb.w	r3, [r6, #-1]
   80642:	3601      	adds	r6, #1
   80644:	f1b8 0801 	subs.w	r8, r8, #1
   80648:	d1be      	bne.n	805c8 <usart_serial_read_packet+0x1c>
		usart_serial_getchar(usart, data);
		len--;
		data++;
	}
	return STATUS_OK;
}
   8064a:	2000      	movs	r0, #0
   8064c:	b003      	add	sp, #12
   8064e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80652:	bf00      	nop
   80654:	400a4000 	.word	0x400a4000
   80658:	0008024d 	.word	0x0008024d
   8065c:	400e0800 	.word	0x400e0800
   80660:	000806b9 	.word	0x000806b9
   80664:	40098000 	.word	0x40098000
   80668:	4009c000 	.word	0x4009c000
   8066c:	400a0000 	.word	0x400a0000

00080670 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   80670:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   80672:	23ac      	movs	r3, #172	; 0xac
   80674:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   80676:	680a      	ldr	r2, [r1, #0]
   80678:	684b      	ldr	r3, [r1, #4]
   8067a:	fbb2 f3f3 	udiv	r3, r2, r3
   8067e:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   80680:	1e5c      	subs	r4, r3, #1
   80682:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   80686:	4294      	cmp	r4, r2
   80688:	d80a      	bhi.n	806a0 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
   8068a:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   8068c:	688b      	ldr	r3, [r1, #8]
   8068e:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   80690:	f240 2302 	movw	r3, #514	; 0x202
   80694:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80698:	2350      	movs	r3, #80	; 0x50
   8069a:	6003      	str	r3, [r0, #0]

	return 0;
   8069c:	2000      	movs	r0, #0
   8069e:	e000      	b.n	806a2 <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
   806a0:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
   806a2:	f85d 4b04 	ldr.w	r4, [sp], #4
   806a6:	4770      	bx	lr

000806a8 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   806a8:	6943      	ldr	r3, [r0, #20]
   806aa:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   806ae:	bf1a      	itte	ne
   806b0:	61c1      	strne	r1, [r0, #28]
	return 0;
   806b2:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
   806b4:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
   806b6:	4770      	bx	lr

000806b8 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   806b8:	6943      	ldr	r3, [r0, #20]
   806ba:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   806be:	bf1d      	ittte	ne
   806c0:	6983      	ldrne	r3, [r0, #24]
   806c2:	700b      	strbne	r3, [r1, #0]
	return 0;
   806c4:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
   806c6:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
   806c8:	4770      	bx	lr
   806ca:	bf00      	nop

000806cc <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   806cc:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   806ce:	480e      	ldr	r0, [pc, #56]	; (80708 <sysclk_init+0x3c>)
   806d0:	4b0e      	ldr	r3, [pc, #56]	; (8070c <sysclk_init+0x40>)
   806d2:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   806d4:	2000      	movs	r0, #0
   806d6:	213e      	movs	r1, #62	; 0x3e
   806d8:	4b0d      	ldr	r3, [pc, #52]	; (80710 <sysclk_init+0x44>)
   806da:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   806dc:	4c0d      	ldr	r4, [pc, #52]	; (80714 <sysclk_init+0x48>)
   806de:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   806e0:	2800      	cmp	r0, #0
   806e2:	d0fc      	beq.n	806de <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   806e4:	4b0c      	ldr	r3, [pc, #48]	; (80718 <sysclk_init+0x4c>)
   806e6:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   806e8:	4a0c      	ldr	r2, [pc, #48]	; (8071c <sysclk_init+0x50>)
   806ea:	4b0d      	ldr	r3, [pc, #52]	; (80720 <sysclk_init+0x54>)
   806ec:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   806ee:	4c0d      	ldr	r4, [pc, #52]	; (80724 <sysclk_init+0x58>)
   806f0:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   806f2:	2800      	cmp	r0, #0
   806f4:	d0fc      	beq.n	806f0 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   806f6:	2010      	movs	r0, #16
   806f8:	4b0b      	ldr	r3, [pc, #44]	; (80728 <sysclk_init+0x5c>)
   806fa:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   806fc:	4b0b      	ldr	r3, [pc, #44]	; (8072c <sysclk_init+0x60>)
   806fe:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   80700:	4801      	ldr	r0, [pc, #4]	; (80708 <sysclk_init+0x3c>)
   80702:	4b02      	ldr	r3, [pc, #8]	; (8070c <sysclk_init+0x40>)
   80704:	4798      	blx	r3
   80706:	bd10      	pop	{r4, pc}
   80708:	0501bd00 	.word	0x0501bd00
   8070c:	200700b1 	.word	0x200700b1
   80710:	00080b61 	.word	0x00080b61
   80714:	00080bb5 	.word	0x00080bb5
   80718:	00080bc5 	.word	0x00080bc5
   8071c:	200d3f01 	.word	0x200d3f01
   80720:	400e0600 	.word	0x400e0600
   80724:	00080bd5 	.word	0x00080bd5
   80728:	00080afd 	.word	0x00080afd
   8072c:	00080d15 	.word	0x00080d15

00080730 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   80730:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   80732:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   80736:	4b16      	ldr	r3, [pc, #88]	; (80790 <board_init+0x60>)
   80738:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   8073a:	200b      	movs	r0, #11
   8073c:	4c15      	ldr	r4, [pc, #84]	; (80794 <board_init+0x64>)
   8073e:	47a0      	blx	r4
   80740:	200c      	movs	r0, #12
   80742:	47a0      	blx	r4
   80744:	200d      	movs	r0, #13
   80746:	47a0      	blx	r4
   80748:	200e      	movs	r0, #14
   8074a:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   8074c:	203b      	movs	r0, #59	; 0x3b
   8074e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80752:	4c11      	ldr	r4, [pc, #68]	; (80798 <board_init+0x68>)
   80754:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   80756:	2055      	movs	r0, #85	; 0x55
   80758:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8075c:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   8075e:	2056      	movs	r0, #86	; 0x56
   80760:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80764:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   80766:	2068      	movs	r0, #104	; 0x68
   80768:	490c      	ldr	r1, [pc, #48]	; (8079c <board_init+0x6c>)
   8076a:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   8076c:	205c      	movs	r0, #92	; 0x5c
   8076e:	490c      	ldr	r1, [pc, #48]	; (807a0 <board_init+0x70>)
   80770:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   80772:	480c      	ldr	r0, [pc, #48]	; (807a4 <board_init+0x74>)
   80774:	f44f 7140 	mov.w	r1, #768	; 0x300
   80778:	4a0b      	ldr	r2, [pc, #44]	; (807a8 <board_init+0x78>)
   8077a:	4b0c      	ldr	r3, [pc, #48]	; (807ac <board_init+0x7c>)
   8077c:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   8077e:	202b      	movs	r0, #43	; 0x2b
   80780:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80784:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   80786:	202a      	movs	r0, #42	; 0x2a
   80788:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8078c:	47a0      	blx	r4
   8078e:	bd10      	pop	{r4, pc}
   80790:	400e1a50 	.word	0x400e1a50
   80794:	00080be5 	.word	0x00080be5
   80798:	000808a5 	.word	0x000808a5
   8079c:	28000079 	.word	0x28000079
   807a0:	28000001 	.word	0x28000001
   807a4:	400e0e00 	.word	0x400e0e00
   807a8:	08000001 	.word	0x08000001
   807ac:	00080979 	.word	0x00080979

000807b0 <pio_get>:
uint32_t pio_get(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
	uint32_t ul_reg;

	if ((ul_type == PIO_OUTPUT_0) || (ul_type == PIO_OUTPUT_1)) {
   807b0:	f021 6100 	bic.w	r1, r1, #134217728	; 0x8000000
   807b4:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
		ul_reg = p_pio->PIO_ODSR;
   807b8:	bf0c      	ite	eq
   807ba:	6b83      	ldreq	r3, [r0, #56]	; 0x38
	} else {
		ul_reg = p_pio->PIO_PDSR;
   807bc:	6bc3      	ldrne	r3, [r0, #60]	; 0x3c
	}

	if ((ul_reg & ul_mask) == 0) {
   807be:	4213      	tst	r3, r2
		return 0;
	} else {
		return 1;
	}
}
   807c0:	bf0c      	ite	eq
   807c2:	2000      	moveq	r0, #0
   807c4:	2001      	movne	r0, #1
   807c6:	4770      	bx	lr

000807c8 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   807c8:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   807ca:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   807ce:	d016      	beq.n	807fe <pio_set_peripheral+0x36>
   807d0:	d804      	bhi.n	807dc <pio_set_peripheral+0x14>
   807d2:	b1c1      	cbz	r1, 80806 <pio_set_peripheral+0x3e>
   807d4:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   807d8:	d00a      	beq.n	807f0 <pio_set_peripheral+0x28>
   807da:	e013      	b.n	80804 <pio_set_peripheral+0x3c>
   807dc:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   807e0:	d011      	beq.n	80806 <pio_set_peripheral+0x3e>
   807e2:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   807e6:	d00e      	beq.n	80806 <pio_set_peripheral+0x3e>
   807e8:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   807ec:	d10a      	bne.n	80804 <pio_set_peripheral+0x3c>
   807ee:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   807f0:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   807f2:	6f01      	ldr	r1, [r0, #112]	; 0x70
   807f4:	400b      	ands	r3, r1
   807f6:	ea23 0302 	bic.w	r3, r3, r2
   807fa:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   807fc:	e002      	b.n	80804 <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   807fe:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   80800:	4313      	orrs	r3, r2
   80802:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   80804:	6042      	str	r2, [r0, #4]
   80806:	4770      	bx	lr

00080808 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   80808:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8080a:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   8080e:	bf14      	ite	ne
   80810:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80812:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   80814:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   80818:	bf14      	ite	ne
   8081a:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   8081c:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   8081e:	f012 0f02 	tst.w	r2, #2
   80822:	d002      	beq.n	8082a <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   80824:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   80828:	e004      	b.n	80834 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   8082a:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   8082e:	bf18      	it	ne
   80830:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   80834:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   80836:	6001      	str	r1, [r0, #0]
   80838:	4770      	bx	lr
   8083a:	bf00      	nop

0008083c <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   8083c:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   8083e:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80840:	9c01      	ldr	r4, [sp, #4]
   80842:	b10c      	cbz	r4, 80848 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   80844:	6641      	str	r1, [r0, #100]	; 0x64
   80846:	e000      	b.n	8084a <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80848:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   8084a:	b10b      	cbz	r3, 80850 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   8084c:	6501      	str	r1, [r0, #80]	; 0x50
   8084e:	e000      	b.n	80852 <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   80850:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   80852:	b10a      	cbz	r2, 80858 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   80854:	6301      	str	r1, [r0, #48]	; 0x30
   80856:	e000      	b.n	8085a <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   80858:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   8085a:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   8085c:	6001      	str	r1, [r0, #0]
}
   8085e:	f85d 4b04 	ldr.w	r4, [sp], #4
   80862:	4770      	bx	lr

00080864 <pio_configure_interrupt>:
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
   80864:	f012 0f10 	tst.w	r2, #16
   80868:	d010      	beq.n	8088c <pio_configure_interrupt+0x28>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
   8086a:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
   8086e:	f012 0f20 	tst.w	r2, #32
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
   80872:	bf14      	ite	ne
   80874:	f8c0 10d4 	strne.w	r1, [r0, #212]	; 0xd4
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
   80878:	f8c0 10d0 	streq.w	r1, [r0, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
   8087c:	f012 0f40 	tst.w	r2, #64	; 0x40
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
   80880:	bf14      	ite	ne
   80882:	f8c0 10c0 	strne.w	r1, [r0, #192]	; 0xc0
		} else {
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
   80886:	f8c0 10c4 	streq.w	r1, [r0, #196]	; 0xc4
   8088a:	4770      	bx	lr
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
   8088c:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
   80890:	4770      	bx	lr
   80892:	bf00      	nop

00080894 <pio_enable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_ISR;
   80894:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
	p_pio->PIO_IER = ul_mask;
   80896:	6401      	str	r1, [r0, #64]	; 0x40
   80898:	4770      	bx	lr
   8089a:	bf00      	nop

0008089c <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   8089c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   8089e:	4770      	bx	lr

000808a0 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   808a0:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   808a2:	4770      	bx	lr

000808a4 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   808a4:	b570      	push	{r4, r5, r6, lr}
   808a6:	b082      	sub	sp, #8
   808a8:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   808aa:	0944      	lsrs	r4, r0, #5
   808ac:	f504 1400 	add.w	r4, r4, #2097152	; 0x200000
   808b0:	f204 7407 	addw	r4, r4, #1799	; 0x707
   808b4:	0266      	lsls	r6, r4, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   808b6:	f001 44f0 	and.w	r4, r1, #2013265920	; 0x78000000
   808ba:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   808be:	d030      	beq.n	80922 <pio_configure_pin+0x7e>
   808c0:	d806      	bhi.n	808d0 <pio_configure_pin+0x2c>
   808c2:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   808c6:	d00a      	beq.n	808de <pio_configure_pin+0x3a>
   808c8:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   808cc:	d018      	beq.n	80900 <pio_configure_pin+0x5c>
   808ce:	e049      	b.n	80964 <pio_configure_pin+0xc0>
   808d0:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   808d4:	d030      	beq.n	80938 <pio_configure_pin+0x94>
   808d6:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   808da:	d02d      	beq.n	80938 <pio_configure_pin+0x94>
   808dc:	e042      	b.n	80964 <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   808de:	f000 001f 	and.w	r0, r0, #31
   808e2:	2401      	movs	r4, #1
   808e4:	4084      	lsls	r4, r0
   808e6:	4630      	mov	r0, r6
   808e8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   808ec:	4622      	mov	r2, r4
   808ee:	4b1f      	ldr	r3, [pc, #124]	; (8096c <pio_configure_pin+0xc8>)
   808f0:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   808f2:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   808f6:	bf14      	ite	ne
   808f8:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   808fa:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   808fc:	2001      	movs	r0, #1
   808fe:	e032      	b.n	80966 <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   80900:	f000 001f 	and.w	r0, r0, #31
   80904:	2401      	movs	r4, #1
   80906:	4084      	lsls	r4, r0
   80908:	4630      	mov	r0, r6
   8090a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8090e:	4622      	mov	r2, r4
   80910:	4b16      	ldr	r3, [pc, #88]	; (8096c <pio_configure_pin+0xc8>)
   80912:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80914:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80918:	bf14      	ite	ne
   8091a:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8091c:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   8091e:	2001      	movs	r0, #1
   80920:	e021      	b.n	80966 <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   80922:	f000 011f 	and.w	r1, r0, #31
   80926:	2401      	movs	r4, #1
   80928:	4630      	mov	r0, r6
   8092a:	fa04 f101 	lsl.w	r1, r4, r1
   8092e:	462a      	mov	r2, r5
   80930:	4b0f      	ldr	r3, [pc, #60]	; (80970 <pio_configure_pin+0xcc>)
   80932:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80934:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   80936:	e016      	b.n	80966 <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80938:	f000 011f 	and.w	r1, r0, #31
   8093c:	2401      	movs	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   8093e:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80942:	ea05 0304 	and.w	r3, r5, r4
   80946:	9300      	str	r3, [sp, #0]
   80948:	4630      	mov	r0, r6
   8094a:	fa04 f101 	lsl.w	r1, r4, r1
   8094e:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80952:	bf14      	ite	ne
   80954:	2200      	movne	r2, #0
   80956:	2201      	moveq	r2, #1
   80958:	f3c5 0380 	ubfx	r3, r5, #2, #1
   8095c:	4d05      	ldr	r5, [pc, #20]	; (80974 <pio_configure_pin+0xd0>)
   8095e:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
   80960:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   80962:	e000      	b.n	80966 <pio_configure_pin+0xc2>

	default:
		return 0;
   80964:	2000      	movs	r0, #0
	}

	return 1;
}
   80966:	b002      	add	sp, #8
   80968:	bd70      	pop	{r4, r5, r6, pc}
   8096a:	bf00      	nop
   8096c:	000807c9 	.word	0x000807c9
   80970:	00080809 	.word	0x00080809
   80974:	0008083d 	.word	0x0008083d

00080978 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   80978:	b5f0      	push	{r4, r5, r6, r7, lr}
   8097a:	b083      	sub	sp, #12
   8097c:	4607      	mov	r7, r0
   8097e:	460e      	mov	r6, r1
   80980:	4615      	mov	r5, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   80982:	f002 44f0 	and.w	r4, r2, #2013265920	; 0x78000000
   80986:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   8098a:	d026      	beq.n	809da <pio_configure_pin_group+0x62>
   8098c:	d806      	bhi.n	8099c <pio_configure_pin_group+0x24>
   8098e:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   80992:	d00a      	beq.n	809aa <pio_configure_pin_group+0x32>
   80994:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   80998:	d013      	beq.n	809c2 <pio_configure_pin_group+0x4a>
   8099a:	e034      	b.n	80a06 <pio_configure_pin_group+0x8e>
   8099c:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   809a0:	d01f      	beq.n	809e2 <pio_configure_pin_group+0x6a>
   809a2:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   809a6:	d01c      	beq.n	809e2 <pio_configure_pin_group+0x6a>
   809a8:	e02d      	b.n	80a06 <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   809aa:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   809ae:	4632      	mov	r2, r6
   809b0:	4b16      	ldr	r3, [pc, #88]	; (80a0c <pio_configure_pin_group+0x94>)
   809b2:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   809b4:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   809b8:	bf14      	ite	ne
   809ba:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   809bc:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   809be:	2001      	movs	r0, #1
   809c0:	e022      	b.n	80a08 <pio_configure_pin_group+0x90>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   809c2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   809c6:	4632      	mov	r2, r6
   809c8:	4b10      	ldr	r3, [pc, #64]	; (80a0c <pio_configure_pin_group+0x94>)
   809ca:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   809cc:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   809d0:	bf14      	ite	ne
   809d2:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   809d4:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   809d6:	2001      	movs	r0, #1
   809d8:	e016      	b.n	80a08 <pio_configure_pin_group+0x90>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   809da:	4b0d      	ldr	r3, [pc, #52]	; (80a10 <pio_configure_pin_group+0x98>)
   809dc:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   809de:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   809e0:	e012      	b.n	80a08 <pio_configure_pin_group+0x90>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   809e2:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   809e6:	f005 0301 	and.w	r3, r5, #1
   809ea:	9300      	str	r3, [sp, #0]
   809ec:	4638      	mov	r0, r7
   809ee:	4631      	mov	r1, r6
   809f0:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   809f4:	bf14      	ite	ne
   809f6:	2200      	movne	r2, #0
   809f8:	2201      	moveq	r2, #1
   809fa:	f3c5 0380 	ubfx	r3, r5, #2, #1
   809fe:	4c05      	ldr	r4, [pc, #20]	; (80a14 <pio_configure_pin_group+0x9c>)
   80a00:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   80a02:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   80a04:	e000      	b.n	80a08 <pio_configure_pin_group+0x90>

	default:
		return 0;
   80a06:	2000      	movs	r0, #0
	}

	return 1;
}
   80a08:	b003      	add	sp, #12
   80a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80a0c:	000807c9 	.word	0x000807c9
   80a10:	00080809 	.word	0x00080809
   80a14:	0008083d 	.word	0x0008083d

00080a18 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   80a18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80a1c:	4604      	mov	r4, r0
   80a1e:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   80a20:	4b10      	ldr	r3, [pc, #64]	; (80a64 <pio_handler_process+0x4c>)
   80a22:	4798      	blx	r3
   80a24:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   80a26:	4620      	mov	r0, r4
   80a28:	4b0f      	ldr	r3, [pc, #60]	; (80a68 <pio_handler_process+0x50>)
   80a2a:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   80a2c:	4005      	ands	r5, r0
   80a2e:	d017      	beq.n	80a60 <pio_handler_process+0x48>
   80a30:	4f0e      	ldr	r7, [pc, #56]	; (80a6c <pio_handler_process+0x54>)
   80a32:	f107 040c 	add.w	r4, r7, #12
   80a36:	376c      	adds	r7, #108	; 0x6c
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   80a38:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   80a3c:	42b3      	cmp	r3, r6
   80a3e:	d10a      	bne.n	80a56 <pio_handler_process+0x3e>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   80a40:	f854 1c08 	ldr.w	r1, [r4, #-8]
   80a44:	4229      	tst	r1, r5
   80a46:	d006      	beq.n	80a56 <pio_handler_process+0x3e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   80a48:	6823      	ldr	r3, [r4, #0]
   80a4a:	4630      	mov	r0, r6
   80a4c:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   80a4e:	f854 3c08 	ldr.w	r3, [r4, #-8]
   80a52:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   80a56:	42bc      	cmp	r4, r7
   80a58:	d002      	beq.n	80a60 <pio_handler_process+0x48>
   80a5a:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   80a5c:	2d00      	cmp	r5, #0
   80a5e:	d1eb      	bne.n	80a38 <pio_handler_process+0x20>
   80a60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80a64:	0008089d 	.word	0x0008089d
   80a68:	000808a1 	.word	0x000808a1
   80a6c:	20070af4 	.word	0x20070af4

00080a70 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
   80a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
   80a72:	4c0b      	ldr	r4, [pc, #44]	; (80aa0 <pio_handler_set+0x30>)
   80a74:	6824      	ldr	r4, [r4, #0]
   80a76:	2c06      	cmp	r4, #6
   80a78:	d810      	bhi.n	80a9c <pio_handler_set+0x2c>
		return 1;

	/* Define new source */
	pSource = &(gs_interrupt_sources[gs_ul_nb_sources]);
   80a7a:	4f0a      	ldr	r7, [pc, #40]	; (80aa4 <pio_handler_set+0x34>)
   80a7c:	0126      	lsls	r6, r4, #4
   80a7e:	19bd      	adds	r5, r7, r6
	pSource->id = ul_id;
   80a80:	51b9      	str	r1, [r7, r6]
	pSource->mask = ul_mask;
   80a82:	606a      	str	r2, [r5, #4]
	pSource->attr = ul_attr;
   80a84:	60ab      	str	r3, [r5, #8]
	pSource->handler = p_handler;
   80a86:	9906      	ldr	r1, [sp, #24]
   80a88:	60e9      	str	r1, [r5, #12]
	gs_ul_nb_sources++;
   80a8a:	3401      	adds	r4, #1
   80a8c:	4904      	ldr	r1, [pc, #16]	; (80aa0 <pio_handler_set+0x30>)
   80a8e:	600c      	str	r4, [r1, #0]

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
   80a90:	4611      	mov	r1, r2
   80a92:	461a      	mov	r2, r3
   80a94:	4b04      	ldr	r3, [pc, #16]	; (80aa8 <pio_handler_set+0x38>)
   80a96:	4798      	blx	r3

	return 0;
   80a98:	2000      	movs	r0, #0
   80a9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;
   80a9c:	2001      	movs	r0, #1

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);

	return 0;
}
   80a9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80aa0:	20070af0 	.word	0x20070af0
   80aa4:	20070af4 	.word	0x20070af4
   80aa8:	00080865 	.word	0x00080865

00080aac <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   80aac:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   80aae:	4802      	ldr	r0, [pc, #8]	; (80ab8 <PIOA_Handler+0xc>)
   80ab0:	210b      	movs	r1, #11
   80ab2:	4b02      	ldr	r3, [pc, #8]	; (80abc <PIOA_Handler+0x10>)
   80ab4:	4798      	blx	r3
   80ab6:	bd08      	pop	{r3, pc}
   80ab8:	400e0e00 	.word	0x400e0e00
   80abc:	00080a19 	.word	0x00080a19

00080ac0 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   80ac0:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   80ac2:	4802      	ldr	r0, [pc, #8]	; (80acc <PIOB_Handler+0xc>)
   80ac4:	210c      	movs	r1, #12
   80ac6:	4b02      	ldr	r3, [pc, #8]	; (80ad0 <PIOB_Handler+0x10>)
   80ac8:	4798      	blx	r3
   80aca:	bd08      	pop	{r3, pc}
   80acc:	400e1000 	.word	0x400e1000
   80ad0:	00080a19 	.word	0x00080a19

00080ad4 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   80ad4:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   80ad6:	4802      	ldr	r0, [pc, #8]	; (80ae0 <PIOC_Handler+0xc>)
   80ad8:	210d      	movs	r1, #13
   80ada:	4b02      	ldr	r3, [pc, #8]	; (80ae4 <PIOC_Handler+0x10>)
   80adc:	4798      	blx	r3
   80ade:	bd08      	pop	{r3, pc}
   80ae0:	400e1200 	.word	0x400e1200
   80ae4:	00080a19 	.word	0x00080a19

00080ae8 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   80ae8:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   80aea:	4802      	ldr	r0, [pc, #8]	; (80af4 <PIOD_Handler+0xc>)
   80aec:	210e      	movs	r1, #14
   80aee:	4b02      	ldr	r3, [pc, #8]	; (80af8 <PIOD_Handler+0x10>)
   80af0:	4798      	blx	r3
   80af2:	bd08      	pop	{r3, pc}
   80af4:	400e1400 	.word	0x400e1400
   80af8:	00080a19 	.word	0x00080a19

00080afc <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   80afc:	4b17      	ldr	r3, [pc, #92]	; (80b5c <pmc_switch_mck_to_pllack+0x60>)
   80afe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80b00:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   80b04:	4310      	orrs	r0, r2
   80b06:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80b08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80b0a:	f013 0f08 	tst.w	r3, #8
   80b0e:	d109      	bne.n	80b24 <pmc_switch_mck_to_pllack+0x28>
   80b10:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80b14:	4911      	ldr	r1, [pc, #68]	; (80b5c <pmc_switch_mck_to_pllack+0x60>)
   80b16:	e001      	b.n	80b1c <pmc_switch_mck_to_pllack+0x20>
			--ul_timeout) {
		if (ul_timeout == 0) {
   80b18:	3b01      	subs	r3, #1
   80b1a:	d019      	beq.n	80b50 <pmc_switch_mck_to_pllack+0x54>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80b1c:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80b1e:	f012 0f08 	tst.w	r2, #8
   80b22:	d0f9      	beq.n	80b18 <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   80b24:	4b0d      	ldr	r3, [pc, #52]	; (80b5c <pmc_switch_mck_to_pllack+0x60>)
   80b26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80b28:	f022 0203 	bic.w	r2, r2, #3
   80b2c:	f042 0202 	orr.w	r2, r2, #2
   80b30:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80b32:	6e98      	ldr	r0, [r3, #104]	; 0x68
   80b34:	f010 0008 	ands.w	r0, r0, #8
   80b38:	d10c      	bne.n	80b54 <pmc_switch_mck_to_pllack+0x58>
   80b3a:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80b3e:	4907      	ldr	r1, [pc, #28]	; (80b5c <pmc_switch_mck_to_pllack+0x60>)
   80b40:	e001      	b.n	80b46 <pmc_switch_mck_to_pllack+0x4a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   80b42:	3b01      	subs	r3, #1
   80b44:	d008      	beq.n	80b58 <pmc_switch_mck_to_pllack+0x5c>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80b46:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80b48:	f012 0f08 	tst.w	r2, #8
   80b4c:	d0f9      	beq.n	80b42 <pmc_switch_mck_to_pllack+0x46>
   80b4e:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   80b50:	2001      	movs	r0, #1
   80b52:	4770      	bx	lr
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   80b54:	2000      	movs	r0, #0
   80b56:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   80b58:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   80b5a:	4770      	bx	lr
   80b5c:	400e0600 	.word	0x400e0600

00080b60 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   80b60:	b138      	cbz	r0, 80b72 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80b62:	4911      	ldr	r1, [pc, #68]	; (80ba8 <pmc_switch_mainck_to_xtal+0x48>)
   80b64:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   80b66:	4a11      	ldr	r2, [pc, #68]	; (80bac <pmc_switch_mainck_to_xtal+0x4c>)
   80b68:	401a      	ands	r2, r3
   80b6a:	4b11      	ldr	r3, [pc, #68]	; (80bb0 <pmc_switch_mainck_to_xtal+0x50>)
   80b6c:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80b6e:	620b      	str	r3, [r1, #32]
   80b70:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80b72:	4a0d      	ldr	r2, [pc, #52]	; (80ba8 <pmc_switch_mainck_to_xtal+0x48>)
   80b74:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   80b76:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   80b7a:	f023 0303 	bic.w	r3, r3, #3
   80b7e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   80b82:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   80b86:	0209      	lsls	r1, r1, #8
   80b88:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   80b8a:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80b8c:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   80b8e:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80b90:	f013 0f01 	tst.w	r3, #1
   80b94:	d0fb      	beq.n	80b8e <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   80b96:	4a04      	ldr	r2, [pc, #16]	; (80ba8 <pmc_switch_mainck_to_xtal+0x48>)
   80b98:	6a13      	ldr	r3, [r2, #32]
   80b9a:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   80b9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   80ba2:	6213      	str	r3, [r2, #32]
   80ba4:	4770      	bx	lr
   80ba6:	bf00      	nop
   80ba8:	400e0600 	.word	0x400e0600
   80bac:	fec8fffc 	.word	0xfec8fffc
   80bb0:	01370002 	.word	0x01370002

00080bb4 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   80bb4:	4b02      	ldr	r3, [pc, #8]	; (80bc0 <pmc_osc_is_ready_mainck+0xc>)
   80bb6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80bb8:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   80bbc:	4770      	bx	lr
   80bbe:	bf00      	nop
   80bc0:	400e0600 	.word	0x400e0600

00080bc4 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   80bc4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   80bc8:	4b01      	ldr	r3, [pc, #4]	; (80bd0 <pmc_disable_pllack+0xc>)
   80bca:	629a      	str	r2, [r3, #40]	; 0x28
   80bcc:	4770      	bx	lr
   80bce:	bf00      	nop
   80bd0:	400e0600 	.word	0x400e0600

00080bd4 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   80bd4:	4b02      	ldr	r3, [pc, #8]	; (80be0 <pmc_is_locked_pllack+0xc>)
   80bd6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80bd8:	f000 0002 	and.w	r0, r0, #2
   80bdc:	4770      	bx	lr
   80bde:	bf00      	nop
   80be0:	400e0600 	.word	0x400e0600

00080be4 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   80be4:	282c      	cmp	r0, #44	; 0x2c
   80be6:	d820      	bhi.n	80c2a <pmc_enable_periph_clk+0x46>
		return 1;
	}

	if (ul_id < 32) {
   80be8:	281f      	cmp	r0, #31
   80bea:	d80d      	bhi.n	80c08 <pmc_enable_periph_clk+0x24>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   80bec:	4b12      	ldr	r3, [pc, #72]	; (80c38 <pmc_enable_periph_clk+0x54>)
   80bee:	699a      	ldr	r2, [r3, #24]
   80bf0:	2301      	movs	r3, #1
   80bf2:	4083      	lsls	r3, r0
   80bf4:	401a      	ands	r2, r3
   80bf6:	4293      	cmp	r3, r2
   80bf8:	d019      	beq.n	80c2e <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER0 = 1 << ul_id;
   80bfa:	2301      	movs	r3, #1
   80bfc:	fa03 f000 	lsl.w	r0, r3, r0
   80c00:	4b0d      	ldr	r3, [pc, #52]	; (80c38 <pmc_enable_periph_clk+0x54>)
   80c02:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80c04:	2000      	movs	r0, #0
   80c06:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80c08:	4b0b      	ldr	r3, [pc, #44]	; (80c38 <pmc_enable_periph_clk+0x54>)
   80c0a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
   80c0e:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80c10:	2301      	movs	r3, #1
   80c12:	4083      	lsls	r3, r0
   80c14:	401a      	ands	r2, r3
   80c16:	4293      	cmp	r3, r2
   80c18:	d00b      	beq.n	80c32 <pmc_enable_periph_clk+0x4e>
			PMC->PMC_PCER1 = 1 << ul_id;
   80c1a:	2301      	movs	r3, #1
   80c1c:	fa03 f000 	lsl.w	r0, r3, r0
   80c20:	4b05      	ldr	r3, [pc, #20]	; (80c38 <pmc_enable_periph_clk+0x54>)
   80c22:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   80c26:	2000      	movs	r0, #0
   80c28:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   80c2a:	2001      	movs	r0, #1
   80c2c:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80c2e:	2000      	movs	r0, #0
   80c30:	4770      	bx	lr
   80c32:	2000      	movs	r0, #0
}
   80c34:	4770      	bx	lr
   80c36:	bf00      	nop
   80c38:	400e0600 	.word	0x400e0600

00080c3c <pmc_set_writeprotect>:
 *
 * \param ul_enable 1 to enable, 0 to disable.
 */
void pmc_set_writeprotect(uint32_t ul_enable)
{
	if (ul_enable) {
   80c3c:	b120      	cbz	r0, 80c48 <pmc_set_writeprotect+0xc>
		PMC->PMC_WPMR = PMC_WPMR_WPKEY_PASSWD | PMC_WPMR_WPEN;
   80c3e:	4a05      	ldr	r2, [pc, #20]	; (80c54 <pmc_set_writeprotect+0x18>)
   80c40:	4b05      	ldr	r3, [pc, #20]	; (80c58 <pmc_set_writeprotect+0x1c>)
   80c42:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
   80c46:	4770      	bx	lr
	} else {
		PMC->PMC_WPMR = PMC_WPMR_WPKEY_PASSWD;
   80c48:	4a04      	ldr	r2, [pc, #16]	; (80c5c <pmc_set_writeprotect+0x20>)
   80c4a:	4b03      	ldr	r3, [pc, #12]	; (80c58 <pmc_set_writeprotect+0x1c>)
   80c4c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
   80c50:	4770      	bx	lr
   80c52:	bf00      	nop
   80c54:	504d4301 	.word	0x504d4301
   80c58:	400e0600 	.word	0x400e0600
   80c5c:	504d4300 	.word	0x504d4300

00080c60 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80c60:	e7fe      	b.n	80c60 <Dummy_Handler>
   80c62:	bf00      	nop

00080c64 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   80c64:	b510      	push	{r4, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   80c66:	4b1e      	ldr	r3, [pc, #120]	; (80ce0 <Reset_Handler+0x7c>)
   80c68:	4a1e      	ldr	r2, [pc, #120]	; (80ce4 <Reset_Handler+0x80>)
   80c6a:	429a      	cmp	r2, r3
   80c6c:	d003      	beq.n	80c76 <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   80c6e:	4b1e      	ldr	r3, [pc, #120]	; (80ce8 <Reset_Handler+0x84>)
   80c70:	4a1b      	ldr	r2, [pc, #108]	; (80ce0 <Reset_Handler+0x7c>)
   80c72:	429a      	cmp	r2, r3
   80c74:	d304      	bcc.n	80c80 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80c76:	4b1d      	ldr	r3, [pc, #116]	; (80cec <Reset_Handler+0x88>)
   80c78:	4a1d      	ldr	r2, [pc, #116]	; (80cf0 <Reset_Handler+0x8c>)
   80c7a:	429a      	cmp	r2, r3
   80c7c:	d30f      	bcc.n	80c9e <Reset_Handler+0x3a>
   80c7e:	e01a      	b.n	80cb6 <Reset_Handler+0x52>
   80c80:	4b1c      	ldr	r3, [pc, #112]	; (80cf4 <Reset_Handler+0x90>)
   80c82:	4c1d      	ldr	r4, [pc, #116]	; (80cf8 <Reset_Handler+0x94>)
   80c84:	1ae4      	subs	r4, r4, r3
   80c86:	f024 0403 	bic.w	r4, r4, #3
   80c8a:	3404      	adds	r4, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   80c8c:	2300      	movs	r3, #0
			*pDest++ = *pSrc++;
   80c8e:	4814      	ldr	r0, [pc, #80]	; (80ce0 <Reset_Handler+0x7c>)
   80c90:	4914      	ldr	r1, [pc, #80]	; (80ce4 <Reset_Handler+0x80>)
   80c92:	585a      	ldr	r2, [r3, r1]
   80c94:	501a      	str	r2, [r3, r0]
   80c96:	3304      	adds	r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   80c98:	42a3      	cmp	r3, r4
   80c9a:	d1fa      	bne.n	80c92 <Reset_Handler+0x2e>
   80c9c:	e7eb      	b.n	80c76 <Reset_Handler+0x12>
   80c9e:	4b17      	ldr	r3, [pc, #92]	; (80cfc <Reset_Handler+0x98>)
   80ca0:	4917      	ldr	r1, [pc, #92]	; (80d00 <Reset_Handler+0x9c>)
   80ca2:	1ac9      	subs	r1, r1, r3
   80ca4:	f021 0103 	bic.w	r1, r1, #3
   80ca8:	1d1a      	adds	r2, r3, #4
   80caa:	4411      	add	r1, r2
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   80cac:	2200      	movs	r2, #0
   80cae:	f843 2f04 	str.w	r2, [r3, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80cb2:	428b      	cmp	r3, r1
   80cb4:	d1fb      	bne.n	80cae <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   80cb6:	4a13      	ldr	r2, [pc, #76]	; (80d04 <Reset_Handler+0xa0>)
   80cb8:	f022 4360 	bic.w	r3, r2, #3758096384	; 0xe0000000
   80cbc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   80cc0:	4911      	ldr	r1, [pc, #68]	; (80d08 <Reset_Handler+0xa4>)
   80cc2:	608b      	str	r3, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   80cc4:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
   80cc8:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
   80ccc:	d203      	bcs.n	80cd6 <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   80cce:	688a      	ldr	r2, [r1, #8]
   80cd0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   80cd4:	608a      	str	r2, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   80cd6:	4b0d      	ldr	r3, [pc, #52]	; (80d0c <Reset_Handler+0xa8>)
   80cd8:	4798      	blx	r3

	/* Branch to main function */
	main();
   80cda:	4b0d      	ldr	r3, [pc, #52]	; (80d10 <Reset_Handler+0xac>)
   80cdc:	4798      	blx	r3
   80cde:	e7fe      	b.n	80cde <Reset_Handler+0x7a>
   80ce0:	20070000 	.word	0x20070000
   80ce4:	00084120 	.word	0x00084120
   80ce8:	200709ac 	.word	0x200709ac
   80cec:	20070bac 	.word	0x20070bac
   80cf0:	200709ac 	.word	0x200709ac
   80cf4:	20070004 	.word	0x20070004
   80cf8:	200709af 	.word	0x200709af
   80cfc:	200709a8 	.word	0x200709a8
   80d00:	20070ba7 	.word	0x20070ba7
   80d04:	00080000 	.word	0x00080000
   80d08:	e000ed00 	.word	0xe000ed00
   80d0c:	000810d9 	.word	0x000810d9
   80d10:	00080fd1 	.word	0x00080fd1

00080d14 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   80d14:	4b3e      	ldr	r3, [pc, #248]	; (80e10 <SystemCoreClockUpdate+0xfc>)
   80d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80d18:	f003 0303 	and.w	r3, r3, #3
   80d1c:	2b03      	cmp	r3, #3
   80d1e:	d85f      	bhi.n	80de0 <SystemCoreClockUpdate+0xcc>
   80d20:	e8df f003 	tbb	[pc, r3]
   80d24:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   80d28:	4b3a      	ldr	r3, [pc, #232]	; (80e14 <SystemCoreClockUpdate+0x100>)
   80d2a:	695b      	ldr	r3, [r3, #20]
   80d2c:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   80d30:	bf14      	ite	ne
   80d32:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   80d36:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   80d3a:	4b37      	ldr	r3, [pc, #220]	; (80e18 <SystemCoreClockUpdate+0x104>)
   80d3c:	601a      	str	r2, [r3, #0]
   80d3e:	e04f      	b.n	80de0 <SystemCoreClockUpdate+0xcc>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80d40:	4b33      	ldr	r3, [pc, #204]	; (80e10 <SystemCoreClockUpdate+0xfc>)
   80d42:	6a1b      	ldr	r3, [r3, #32]
   80d44:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80d48:	d003      	beq.n	80d52 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80d4a:	4a34      	ldr	r2, [pc, #208]	; (80e1c <SystemCoreClockUpdate+0x108>)
   80d4c:	4b32      	ldr	r3, [pc, #200]	; (80e18 <SystemCoreClockUpdate+0x104>)
   80d4e:	601a      	str	r2, [r3, #0]
   80d50:	e046      	b.n	80de0 <SystemCoreClockUpdate+0xcc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80d52:	4a33      	ldr	r2, [pc, #204]	; (80e20 <SystemCoreClockUpdate+0x10c>)
   80d54:	4b30      	ldr	r3, [pc, #192]	; (80e18 <SystemCoreClockUpdate+0x104>)
   80d56:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80d58:	4b2d      	ldr	r3, [pc, #180]	; (80e10 <SystemCoreClockUpdate+0xfc>)
   80d5a:	6a1b      	ldr	r3, [r3, #32]
   80d5c:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80d60:	2b10      	cmp	r3, #16
   80d62:	d002      	beq.n	80d6a <SystemCoreClockUpdate+0x56>
   80d64:	2b20      	cmp	r3, #32
   80d66:	d004      	beq.n	80d72 <SystemCoreClockUpdate+0x5e>
   80d68:	e03a      	b.n	80de0 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   80d6a:	4a2e      	ldr	r2, [pc, #184]	; (80e24 <SystemCoreClockUpdate+0x110>)
   80d6c:	4b2a      	ldr	r3, [pc, #168]	; (80e18 <SystemCoreClockUpdate+0x104>)
   80d6e:	601a      	str	r2, [r3, #0]
				break;
   80d70:	e036      	b.n	80de0 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   80d72:	4a2a      	ldr	r2, [pc, #168]	; (80e1c <SystemCoreClockUpdate+0x108>)
   80d74:	4b28      	ldr	r3, [pc, #160]	; (80e18 <SystemCoreClockUpdate+0x104>)
   80d76:	601a      	str	r2, [r3, #0]
				break;
   80d78:	e032      	b.n	80de0 <SystemCoreClockUpdate+0xcc>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80d7a:	4b25      	ldr	r3, [pc, #148]	; (80e10 <SystemCoreClockUpdate+0xfc>)
   80d7c:	6a1b      	ldr	r3, [r3, #32]
   80d7e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80d82:	d003      	beq.n	80d8c <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80d84:	4a25      	ldr	r2, [pc, #148]	; (80e1c <SystemCoreClockUpdate+0x108>)
   80d86:	4b24      	ldr	r3, [pc, #144]	; (80e18 <SystemCoreClockUpdate+0x104>)
   80d88:	601a      	str	r2, [r3, #0]
   80d8a:	e012      	b.n	80db2 <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80d8c:	4a24      	ldr	r2, [pc, #144]	; (80e20 <SystemCoreClockUpdate+0x10c>)
   80d8e:	4b22      	ldr	r3, [pc, #136]	; (80e18 <SystemCoreClockUpdate+0x104>)
   80d90:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80d92:	4b1f      	ldr	r3, [pc, #124]	; (80e10 <SystemCoreClockUpdate+0xfc>)
   80d94:	6a1b      	ldr	r3, [r3, #32]
   80d96:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80d9a:	2b10      	cmp	r3, #16
   80d9c:	d002      	beq.n	80da4 <SystemCoreClockUpdate+0x90>
   80d9e:	2b20      	cmp	r3, #32
   80da0:	d004      	beq.n	80dac <SystemCoreClockUpdate+0x98>
   80da2:	e006      	b.n	80db2 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   80da4:	4a1f      	ldr	r2, [pc, #124]	; (80e24 <SystemCoreClockUpdate+0x110>)
   80da6:	4b1c      	ldr	r3, [pc, #112]	; (80e18 <SystemCoreClockUpdate+0x104>)
   80da8:	601a      	str	r2, [r3, #0]
				break;
   80daa:	e002      	b.n	80db2 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   80dac:	4a1b      	ldr	r2, [pc, #108]	; (80e1c <SystemCoreClockUpdate+0x108>)
   80dae:	4b1a      	ldr	r3, [pc, #104]	; (80e18 <SystemCoreClockUpdate+0x104>)
   80db0:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   80db2:	4b17      	ldr	r3, [pc, #92]	; (80e10 <SystemCoreClockUpdate+0xfc>)
   80db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80db6:	f003 0303 	and.w	r3, r3, #3
   80dba:	2b02      	cmp	r3, #2
   80dbc:	d10d      	bne.n	80dda <SystemCoreClockUpdate+0xc6>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80dbe:	4b14      	ldr	r3, [pc, #80]	; (80e10 <SystemCoreClockUpdate+0xfc>)
   80dc0:	6a98      	ldr	r0, [r3, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80dc2:	6a99      	ldr	r1, [r3, #40]	; 0x28
   80dc4:	4b14      	ldr	r3, [pc, #80]	; (80e18 <SystemCoreClockUpdate+0x104>)
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80dc6:	f3c0 400a 	ubfx	r0, r0, #16, #11
   80dca:	681a      	ldr	r2, [r3, #0]
   80dcc:	fb00 2202 	mla	r2, r0, r2, r2
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80dd0:	b2c9      	uxtb	r1, r1
   80dd2:	fbb2 f2f1 	udiv	r2, r2, r1
   80dd6:	601a      	str	r2, [r3, #0]
   80dd8:	e002      	b.n	80de0 <SystemCoreClockUpdate+0xcc>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   80dda:	4a13      	ldr	r2, [pc, #76]	; (80e28 <SystemCoreClockUpdate+0x114>)
   80ddc:	4b0e      	ldr	r3, [pc, #56]	; (80e18 <SystemCoreClockUpdate+0x104>)
   80dde:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   80de0:	4b0b      	ldr	r3, [pc, #44]	; (80e10 <SystemCoreClockUpdate+0xfc>)
   80de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80de4:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80de8:	2b70      	cmp	r3, #112	; 0x70
   80dea:	d107      	bne.n	80dfc <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
   80dec:	4b0a      	ldr	r3, [pc, #40]	; (80e18 <SystemCoreClockUpdate+0x104>)
   80dee:	681a      	ldr	r2, [r3, #0]
   80df0:	490e      	ldr	r1, [pc, #56]	; (80e2c <SystemCoreClockUpdate+0x118>)
   80df2:	fba1 0202 	umull	r0, r2, r1, r2
   80df6:	0852      	lsrs	r2, r2, #1
   80df8:	601a      	str	r2, [r3, #0]
   80dfa:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   80dfc:	4b04      	ldr	r3, [pc, #16]	; (80e10 <SystemCoreClockUpdate+0xfc>)
   80dfe:	6b19      	ldr	r1, [r3, #48]	; 0x30
   80e00:	4b05      	ldr	r3, [pc, #20]	; (80e18 <SystemCoreClockUpdate+0x104>)
   80e02:	f3c1 1102 	ubfx	r1, r1, #4, #3
   80e06:	681a      	ldr	r2, [r3, #0]
   80e08:	40ca      	lsrs	r2, r1
   80e0a:	601a      	str	r2, [r3, #0]
   80e0c:	4770      	bx	lr
   80e0e:	bf00      	nop
   80e10:	400e0600 	.word	0x400e0600
   80e14:	400e1a10 	.word	0x400e1a10
   80e18:	20070140 	.word	0x20070140
   80e1c:	00b71b00 	.word	0x00b71b00
   80e20:	003d0900 	.word	0x003d0900
   80e24:	007a1200 	.word	0x007a1200
   80e28:	0e4e1c00 	.word	0x0e4e1c00
   80e2c:	aaaaaaab 	.word	0xaaaaaaab

00080e30 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   80e30:	4b09      	ldr	r3, [pc, #36]	; (80e58 <_sbrk+0x28>)
   80e32:	681b      	ldr	r3, [r3, #0]
   80e34:	b913      	cbnz	r3, 80e3c <_sbrk+0xc>
		heap = (unsigned char *)&_end;
   80e36:	4a09      	ldr	r2, [pc, #36]	; (80e5c <_sbrk+0x2c>)
   80e38:	4b07      	ldr	r3, [pc, #28]	; (80e58 <_sbrk+0x28>)
   80e3a:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   80e3c:	4b06      	ldr	r3, [pc, #24]	; (80e58 <_sbrk+0x28>)
   80e3e:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   80e40:	181a      	adds	r2, r3, r0
   80e42:	4907      	ldr	r1, [pc, #28]	; (80e60 <_sbrk+0x30>)
   80e44:	4291      	cmp	r1, r2
   80e46:	db04      	blt.n	80e52 <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
   80e48:	4610      	mov	r0, r2
   80e4a:	4a03      	ldr	r2, [pc, #12]	; (80e58 <_sbrk+0x28>)
   80e4c:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   80e4e:	4618      	mov	r0, r3
   80e50:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
   80e52:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
   80e56:	4770      	bx	lr
   80e58:	20070b64 	.word	0x20070b64
   80e5c:	20072bb0 	.word	0x20072bb0
   80e60:	20087ffc 	.word	0x20087ffc

00080e64 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   80e64:	f04f 30ff 	mov.w	r0, #4294967295
   80e68:	4770      	bx	lr
   80e6a:	bf00      	nop

00080e6c <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   80e6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   80e70:	604b      	str	r3, [r1, #4]

	return 0;
}
   80e72:	2000      	movs	r0, #0
   80e74:	4770      	bx	lr
   80e76:	bf00      	nop

00080e78 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   80e78:	2001      	movs	r0, #1
   80e7a:	4770      	bx	lr

00080e7c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   80e7c:	2000      	movs	r0, #0
   80e7e:	4770      	bx	lr

00080e80 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   80e80:	b5f0      	push	{r4, r5, r6, r7, lr}
   80e82:	b083      	sub	sp, #12
   80e84:	4604      	mov	r4, r0
   80e86:	460d      	mov	r5, r1
	uint32_t val = 0;
   80e88:	2300      	movs	r3, #0
   80e8a:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   80e8c:	4b1f      	ldr	r3, [pc, #124]	; (80f0c <usart_serial_getchar+0x8c>)
   80e8e:	4298      	cmp	r0, r3
   80e90:	d107      	bne.n	80ea2 <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
   80e92:	461f      	mov	r7, r3
   80e94:	4e1e      	ldr	r6, [pc, #120]	; (80f10 <usart_serial_getchar+0x90>)
   80e96:	4638      	mov	r0, r7
   80e98:	4629      	mov	r1, r5
   80e9a:	47b0      	blx	r6
   80e9c:	2800      	cmp	r0, #0
   80e9e:	d1fa      	bne.n	80e96 <usart_serial_getchar+0x16>
   80ea0:	e019      	b.n	80ed6 <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80ea2:	4b1c      	ldr	r3, [pc, #112]	; (80f14 <usart_serial_getchar+0x94>)
   80ea4:	4298      	cmp	r0, r3
   80ea6:	d109      	bne.n	80ebc <usart_serial_getchar+0x3c>
		while (usart_read(p_usart, &val));
   80ea8:	461f      	mov	r7, r3
   80eaa:	4e1b      	ldr	r6, [pc, #108]	; (80f18 <usart_serial_getchar+0x98>)
   80eac:	4638      	mov	r0, r7
   80eae:	a901      	add	r1, sp, #4
   80eb0:	47b0      	blx	r6
   80eb2:	2800      	cmp	r0, #0
   80eb4:	d1fa      	bne.n	80eac <usart_serial_getchar+0x2c>
		*data = (uint8_t)(val & 0xFF);
   80eb6:	9b01      	ldr	r3, [sp, #4]
   80eb8:	702b      	strb	r3, [r5, #0]
   80eba:	e019      	b.n	80ef0 <usart_serial_getchar+0x70>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80ebc:	4b17      	ldr	r3, [pc, #92]	; (80f1c <usart_serial_getchar+0x9c>)
   80ebe:	4298      	cmp	r0, r3
   80ec0:	d109      	bne.n	80ed6 <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
   80ec2:	461e      	mov	r6, r3
   80ec4:	4c14      	ldr	r4, [pc, #80]	; (80f18 <usart_serial_getchar+0x98>)
   80ec6:	4630      	mov	r0, r6
   80ec8:	a901      	add	r1, sp, #4
   80eca:	47a0      	blx	r4
   80ecc:	2800      	cmp	r0, #0
   80ece:	d1fa      	bne.n	80ec6 <usart_serial_getchar+0x46>
		*data = (uint8_t)(val & 0xFF);
   80ed0:	9b01      	ldr	r3, [sp, #4]
   80ed2:	702b      	strb	r3, [r5, #0]
   80ed4:	e018      	b.n	80f08 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80ed6:	4b12      	ldr	r3, [pc, #72]	; (80f20 <usart_serial_getchar+0xa0>)
   80ed8:	429c      	cmp	r4, r3
   80eda:	d109      	bne.n	80ef0 <usart_serial_getchar+0x70>
		while (usart_read(p_usart, &val));
   80edc:	461e      	mov	r6, r3
   80ede:	4c0e      	ldr	r4, [pc, #56]	; (80f18 <usart_serial_getchar+0x98>)
   80ee0:	4630      	mov	r0, r6
   80ee2:	a901      	add	r1, sp, #4
   80ee4:	47a0      	blx	r4
   80ee6:	2800      	cmp	r0, #0
   80ee8:	d1fa      	bne.n	80ee0 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
   80eea:	9b01      	ldr	r3, [sp, #4]
   80eec:	702b      	strb	r3, [r5, #0]
   80eee:	e00b      	b.n	80f08 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80ef0:	4b0c      	ldr	r3, [pc, #48]	; (80f24 <usart_serial_getchar+0xa4>)
   80ef2:	429c      	cmp	r4, r3
   80ef4:	d108      	bne.n	80f08 <usart_serial_getchar+0x88>
		while (usart_read(p_usart, &val));
   80ef6:	461e      	mov	r6, r3
   80ef8:	4c07      	ldr	r4, [pc, #28]	; (80f18 <usart_serial_getchar+0x98>)
   80efa:	4630      	mov	r0, r6
   80efc:	a901      	add	r1, sp, #4
   80efe:	47a0      	blx	r4
   80f00:	2800      	cmp	r0, #0
   80f02:	d1fa      	bne.n	80efa <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
   80f04:	9b01      	ldr	r3, [sp, #4]
   80f06:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   80f08:	b003      	add	sp, #12
   80f0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80f0c:	400e0800 	.word	0x400e0800
   80f10:	000806b9 	.word	0x000806b9
   80f14:	40098000 	.word	0x40098000
   80f18:	0008024d 	.word	0x0008024d
   80f1c:	4009c000 	.word	0x4009c000
   80f20:	400a0000 	.word	0x400a0000
   80f24:	400a4000 	.word	0x400a4000

00080f28 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   80f28:	b570      	push	{r4, r5, r6, lr}
   80f2a:	460c      	mov	r4, r1
#ifdef UART
	if (UART == (Uart*)p_usart) {
   80f2c:	4b21      	ldr	r3, [pc, #132]	; (80fb4 <usart_serial_putchar+0x8c>)
   80f2e:	4298      	cmp	r0, r3
   80f30:	d107      	bne.n	80f42 <usart_serial_putchar+0x1a>
		while (uart_write((Uart*)p_usart, c)!=0);
   80f32:	461e      	mov	r6, r3
   80f34:	4d20      	ldr	r5, [pc, #128]	; (80fb8 <usart_serial_putchar+0x90>)
   80f36:	4630      	mov	r0, r6
   80f38:	4621      	mov	r1, r4
   80f3a:	47a8      	blx	r5
   80f3c:	2800      	cmp	r0, #0
   80f3e:	d1fa      	bne.n	80f36 <usart_serial_putchar+0xe>
   80f40:	e02b      	b.n	80f9a <usart_serial_putchar+0x72>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80f42:	4b1e      	ldr	r3, [pc, #120]	; (80fbc <usart_serial_putchar+0x94>)
   80f44:	4298      	cmp	r0, r3
   80f46:	d107      	bne.n	80f58 <usart_serial_putchar+0x30>
		while (usart_write(p_usart, c)!=0);
   80f48:	461e      	mov	r6, r3
   80f4a:	4d1d      	ldr	r5, [pc, #116]	; (80fc0 <usart_serial_putchar+0x98>)
   80f4c:	4630      	mov	r0, r6
   80f4e:	4621      	mov	r1, r4
   80f50:	47a8      	blx	r5
   80f52:	2800      	cmp	r0, #0
   80f54:	d1fa      	bne.n	80f4c <usart_serial_putchar+0x24>
   80f56:	e022      	b.n	80f9e <usart_serial_putchar+0x76>
		return 1;
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80f58:	4b1a      	ldr	r3, [pc, #104]	; (80fc4 <usart_serial_putchar+0x9c>)
   80f5a:	4298      	cmp	r0, r3
   80f5c:	d107      	bne.n	80f6e <usart_serial_putchar+0x46>
		while (usart_write(p_usart, c)!=0);
   80f5e:	461e      	mov	r6, r3
   80f60:	4d17      	ldr	r5, [pc, #92]	; (80fc0 <usart_serial_putchar+0x98>)
   80f62:	4630      	mov	r0, r6
   80f64:	4621      	mov	r1, r4
   80f66:	47a8      	blx	r5
   80f68:	2800      	cmp	r0, #0
   80f6a:	d1fa      	bne.n	80f62 <usart_serial_putchar+0x3a>
   80f6c:	e019      	b.n	80fa2 <usart_serial_putchar+0x7a>
		return 1;
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80f6e:	4b16      	ldr	r3, [pc, #88]	; (80fc8 <usart_serial_putchar+0xa0>)
   80f70:	4298      	cmp	r0, r3
   80f72:	d107      	bne.n	80f84 <usart_serial_putchar+0x5c>
		while (usart_write(p_usart, c)!=0);
   80f74:	461e      	mov	r6, r3
   80f76:	4d12      	ldr	r5, [pc, #72]	; (80fc0 <usart_serial_putchar+0x98>)
   80f78:	4630      	mov	r0, r6
   80f7a:	4621      	mov	r1, r4
   80f7c:	47a8      	blx	r5
   80f7e:	2800      	cmp	r0, #0
   80f80:	d1fa      	bne.n	80f78 <usart_serial_putchar+0x50>
   80f82:	e010      	b.n	80fa6 <usart_serial_putchar+0x7e>
		return 1;
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80f84:	4b11      	ldr	r3, [pc, #68]	; (80fcc <usart_serial_putchar+0xa4>)
   80f86:	4298      	cmp	r0, r3
   80f88:	d10f      	bne.n	80faa <usart_serial_putchar+0x82>
		while (usart_write(p_usart, c)!=0);
   80f8a:	461e      	mov	r6, r3
   80f8c:	4d0c      	ldr	r5, [pc, #48]	; (80fc0 <usart_serial_putchar+0x98>)
   80f8e:	4630      	mov	r0, r6
   80f90:	4621      	mov	r1, r4
   80f92:	47a8      	blx	r5
   80f94:	2800      	cmp	r0, #0
   80f96:	d1fa      	bne.n	80f8e <usart_serial_putchar+0x66>
   80f98:	e009      	b.n	80fae <usart_serial_putchar+0x86>
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
   80f9a:	2001      	movs	r0, #1
   80f9c:	bd70      	pop	{r4, r5, r6, pc}
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   80f9e:	2001      	movs	r0, #1
   80fa0:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   80fa2:	2001      	movs	r0, #1
   80fa4:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   80fa6:	2001      	movs	r0, #1
   80fa8:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   80faa:	2000      	movs	r0, #0
   80fac:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   80fae:	2001      	movs	r0, #1
	}
# endif
#endif /* ifdef USART */

	return 0;
}
   80fb0:	bd70      	pop	{r4, r5, r6, pc}
   80fb2:	bf00      	nop
   80fb4:	400e0800 	.word	0x400e0800
   80fb8:	000806a9 	.word	0x000806a9
   80fbc:	40098000 	.word	0x40098000
   80fc0:	00080239 	.word	0x00080239
   80fc4:	4009c000 	.word	0x4009c000
   80fc8:	400a0000 	.word	0x400a0000
   80fcc:	400a4000 	.word	0x400a4000

00080fd0 <main>:
	printf("Console ready\n");
	printf("=============\n");
}

int main (void)
{
   80fd0:	b570      	push	{r4, r5, r6, lr}
   80fd2:	b084      	sub	sp, #16
	/* Insert system clock initialization code here (sysclk_init()). */
	sysclk_init();
   80fd4:	4b29      	ldr	r3, [pc, #164]	; (8107c <main+0xac>)
   80fd6:	4798      	blx	r3
	board_init();
   80fd8:	4b29      	ldr	r3, [pc, #164]	; (81080 <main+0xb0>)
   80fda:	4798      	blx	r3
   80fdc:	2008      	movs	r0, #8
   80fde:	4c29      	ldr	r4, [pc, #164]	; (81084 <main+0xb4>)
   80fe0:	47a0      	blx	r4
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   80fe2:	4d29      	ldr	r5, [pc, #164]	; (81088 <main+0xb8>)
   80fe4:	4b29      	ldr	r3, [pc, #164]	; (8108c <main+0xbc>)
   80fe6:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   80fe8:	4a29      	ldr	r2, [pc, #164]	; (81090 <main+0xc0>)
   80fea:	4b2a      	ldr	r3, [pc, #168]	; (81094 <main+0xc4>)
   80fec:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   80fee:	4a2a      	ldr	r2, [pc, #168]	; (81098 <main+0xc8>)
   80ff0:	4b2a      	ldr	r3, [pc, #168]	; (8109c <main+0xcc>)
   80ff2:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   80ff4:	4b2a      	ldr	r3, [pc, #168]	; (810a0 <main+0xd0>)
   80ff6:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   80ff8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   80ffc:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   80ffe:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81002:	9303      	str	r3, [sp, #12]
   81004:	2008      	movs	r0, #8
   81006:	47a0      	blx	r4
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   81008:	4628      	mov	r0, r5
   8100a:	a901      	add	r1, sp, #4
   8100c:	4b25      	ldr	r3, [pc, #148]	; (810a4 <main+0xd4>)
   8100e:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   81010:	4e25      	ldr	r6, [pc, #148]	; (810a8 <main+0xd8>)
   81012:	6833      	ldr	r3, [r6, #0]
   81014:	6898      	ldr	r0, [r3, #8]
   81016:	2100      	movs	r1, #0
   81018:	4d24      	ldr	r5, [pc, #144]	; (810ac <main+0xdc>)
   8101a:	47a8      	blx	r5
	setbuf(stdin, NULL);
   8101c:	6833      	ldr	r3, [r6, #0]
   8101e:	6858      	ldr	r0, [r3, #4]
   81020:	2100      	movs	r1, #0
   81022:	47a8      	blx	r5

	/* Configure console UART. */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
	
	printf("Console ready\n");
   81024:	4822      	ldr	r0, [pc, #136]	; (810b0 <main+0xe0>)
   81026:	4d23      	ldr	r5, [pc, #140]	; (810b4 <main+0xe4>)
   81028:	47a8      	blx	r5
	printf("=============\n");
   8102a:	4823      	ldr	r0, [pc, #140]	; (810b8 <main+0xe8>)
   8102c:	47a8      	blx	r5
   8102e:	200b      	movs	r0, #11
   81030:	47a0      	blx	r4
   81032:	200c      	movs	r0, #12
   81034:	47a0      	blx	r4
   81036:	200d      	movs	r0, #13
   81038:	47a0      	blx	r4
   8103a:	200e      	movs	r0, #14
   8103c:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   8103e:	4b1f      	ldr	r3, [pc, #124]	; (810bc <main+0xec>)
   81040:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   81044:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   81046:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   8104a:	f503 7300 	add.w	r3, r3, #512	; 0x200
   8104e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   81052:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   81054:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	configure_console();
	
	ioport_init();
	ioport_set_pin_dir(redLED, IOPORT_DIR_OUTPUT);
	ioport_set_pin_dir(greenLED, IOPORT_DIR_OUTPUT);
	button_config(ID_PIOC, PIOC, PIO_PC13);
   81058:	200d      	movs	r0, #13
   8105a:	4919      	ldr	r1, [pc, #100]	; (810c0 <main+0xf0>)
   8105c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   81060:	4b18      	ldr	r3, [pc, #96]	; (810c4 <main+0xf4>)
   81062:	4798      	blx	r3
	while(1){
		/*ioport_set_pin_level(redLED, 1);
		delay_ms(1000);
		ioport_set_pin_level(redLED, 0);
		delay_ms(1000);*/
		pulseCounter_handler(counterA);
   81064:	4e18      	ldr	r6, [pc, #96]	; (810c8 <main+0xf8>)
		printf("Character = %i\n", counterA);
   81066:	4d19      	ldr	r5, [pc, #100]	; (810cc <main+0xfc>)
   81068:	4c12      	ldr	r4, [pc, #72]	; (810b4 <main+0xe4>)
	while(1){
		/*ioport_set_pin_level(redLED, 1);
		delay_ms(1000);
		ioport_set_pin_level(redLED, 0);
		delay_ms(1000);*/
		pulseCounter_handler(counterA);
   8106a:	2000      	movs	r0, #0
   8106c:	47b0      	blx	r6
		printf("Character = %i\n", counterA);
   8106e:	4628      	mov	r0, r5
   81070:	2100      	movs	r1, #0
   81072:	47a0      	blx	r4
		delay_ms(1000);
   81074:	4816      	ldr	r0, [pc, #88]	; (810d0 <main+0x100>)
   81076:	4b17      	ldr	r3, [pc, #92]	; (810d4 <main+0x104>)
   81078:	4798      	blx	r3
   8107a:	e7f6      	b.n	8106a <main+0x9a>
   8107c:	000806cd 	.word	0x000806cd
   81080:	00080731 	.word	0x00080731
   81084:	00080be5 	.word	0x00080be5
   81088:	400e0800 	.word	0x400e0800
   8108c:	20070ba4 	.word	0x20070ba4
   81090:	00080f29 	.word	0x00080f29
   81094:	20070ba0 	.word	0x20070ba0
   81098:	00080e81 	.word	0x00080e81
   8109c:	20070b9c 	.word	0x20070b9c
   810a0:	0501bd00 	.word	0x0501bd00
   810a4:	00080671 	.word	0x00080671
   810a8:	20070570 	.word	0x20070570
   810ac:	000812d1 	.word	0x000812d1
   810b0:	0008406c 	.word	0x0008406c
   810b4:	00081129 	.word	0x00081129
   810b8:	0008407c 	.word	0x0008407c
   810bc:	400e0e00 	.word	0x400e0e00
   810c0:	400e1200 	.word	0x400e1200
   810c4:	00080195 	.word	0x00080195
   810c8:	000801f5 	.word	0x000801f5
   810cc:	0008408c 	.word	0x0008408c
   810d0:	005b8d80 	.word	0x005b8d80
   810d4:	20070001 	.word	0x20070001

000810d8 <__libc_init_array>:
   810d8:	b570      	push	{r4, r5, r6, lr}
   810da:	4e0f      	ldr	r6, [pc, #60]	; (81118 <__libc_init_array+0x40>)
   810dc:	4d0f      	ldr	r5, [pc, #60]	; (8111c <__libc_init_array+0x44>)
   810de:	1b76      	subs	r6, r6, r5
   810e0:	10b6      	asrs	r6, r6, #2
   810e2:	d007      	beq.n	810f4 <__libc_init_array+0x1c>
   810e4:	3d04      	subs	r5, #4
   810e6:	2400      	movs	r4, #0
   810e8:	3401      	adds	r4, #1
   810ea:	f855 3f04 	ldr.w	r3, [r5, #4]!
   810ee:	4798      	blx	r3
   810f0:	42a6      	cmp	r6, r4
   810f2:	d1f9      	bne.n	810e8 <__libc_init_array+0x10>
   810f4:	4e0a      	ldr	r6, [pc, #40]	; (81120 <__libc_init_array+0x48>)
   810f6:	4d0b      	ldr	r5, [pc, #44]	; (81124 <__libc_init_array+0x4c>)
   810f8:	f002 fffc 	bl	840f4 <_init>
   810fc:	1b76      	subs	r6, r6, r5
   810fe:	10b6      	asrs	r6, r6, #2
   81100:	d008      	beq.n	81114 <__libc_init_array+0x3c>
   81102:	3d04      	subs	r5, #4
   81104:	2400      	movs	r4, #0
   81106:	3401      	adds	r4, #1
   81108:	f855 3f04 	ldr.w	r3, [r5, #4]!
   8110c:	4798      	blx	r3
   8110e:	42a6      	cmp	r6, r4
   81110:	d1f9      	bne.n	81106 <__libc_init_array+0x2e>
   81112:	bd70      	pop	{r4, r5, r6, pc}
   81114:	bd70      	pop	{r4, r5, r6, pc}
   81116:	bf00      	nop
   81118:	00084100 	.word	0x00084100
   8111c:	00084100 	.word	0x00084100
   81120:	00084108 	.word	0x00084108
   81124:	00084100 	.word	0x00084100

00081128 <iprintf>:
   81128:	b40f      	push	{r0, r1, r2, r3}
   8112a:	b510      	push	{r4, lr}
   8112c:	4b07      	ldr	r3, [pc, #28]	; (8114c <iprintf+0x24>)
   8112e:	b082      	sub	sp, #8
   81130:	ac04      	add	r4, sp, #16
   81132:	f854 2b04 	ldr.w	r2, [r4], #4
   81136:	6818      	ldr	r0, [r3, #0]
   81138:	4623      	mov	r3, r4
   8113a:	6881      	ldr	r1, [r0, #8]
   8113c:	9401      	str	r4, [sp, #4]
   8113e:	f000 f9bb 	bl	814b8 <_vfiprintf_r>
   81142:	b002      	add	sp, #8
   81144:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   81148:	b004      	add	sp, #16
   8114a:	4770      	bx	lr
   8114c:	20070570 	.word	0x20070570

00081150 <memcpy>:
   81150:	4684      	mov	ip, r0
   81152:	ea41 0300 	orr.w	r3, r1, r0
   81156:	f013 0303 	ands.w	r3, r3, #3
   8115a:	d149      	bne.n	811f0 <memcpy+0xa0>
   8115c:	3a40      	subs	r2, #64	; 0x40
   8115e:	d323      	bcc.n	811a8 <memcpy+0x58>
   81160:	680b      	ldr	r3, [r1, #0]
   81162:	6003      	str	r3, [r0, #0]
   81164:	684b      	ldr	r3, [r1, #4]
   81166:	6043      	str	r3, [r0, #4]
   81168:	688b      	ldr	r3, [r1, #8]
   8116a:	6083      	str	r3, [r0, #8]
   8116c:	68cb      	ldr	r3, [r1, #12]
   8116e:	60c3      	str	r3, [r0, #12]
   81170:	690b      	ldr	r3, [r1, #16]
   81172:	6103      	str	r3, [r0, #16]
   81174:	694b      	ldr	r3, [r1, #20]
   81176:	6143      	str	r3, [r0, #20]
   81178:	698b      	ldr	r3, [r1, #24]
   8117a:	6183      	str	r3, [r0, #24]
   8117c:	69cb      	ldr	r3, [r1, #28]
   8117e:	61c3      	str	r3, [r0, #28]
   81180:	6a0b      	ldr	r3, [r1, #32]
   81182:	6203      	str	r3, [r0, #32]
   81184:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   81186:	6243      	str	r3, [r0, #36]	; 0x24
   81188:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   8118a:	6283      	str	r3, [r0, #40]	; 0x28
   8118c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   8118e:	62c3      	str	r3, [r0, #44]	; 0x2c
   81190:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   81192:	6303      	str	r3, [r0, #48]	; 0x30
   81194:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   81196:	6343      	str	r3, [r0, #52]	; 0x34
   81198:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   8119a:	6383      	str	r3, [r0, #56]	; 0x38
   8119c:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   8119e:	63c3      	str	r3, [r0, #60]	; 0x3c
   811a0:	3040      	adds	r0, #64	; 0x40
   811a2:	3140      	adds	r1, #64	; 0x40
   811a4:	3a40      	subs	r2, #64	; 0x40
   811a6:	d2db      	bcs.n	81160 <memcpy+0x10>
   811a8:	3230      	adds	r2, #48	; 0x30
   811aa:	d30b      	bcc.n	811c4 <memcpy+0x74>
   811ac:	680b      	ldr	r3, [r1, #0]
   811ae:	6003      	str	r3, [r0, #0]
   811b0:	684b      	ldr	r3, [r1, #4]
   811b2:	6043      	str	r3, [r0, #4]
   811b4:	688b      	ldr	r3, [r1, #8]
   811b6:	6083      	str	r3, [r0, #8]
   811b8:	68cb      	ldr	r3, [r1, #12]
   811ba:	60c3      	str	r3, [r0, #12]
   811bc:	3010      	adds	r0, #16
   811be:	3110      	adds	r1, #16
   811c0:	3a10      	subs	r2, #16
   811c2:	d2f3      	bcs.n	811ac <memcpy+0x5c>
   811c4:	320c      	adds	r2, #12
   811c6:	d305      	bcc.n	811d4 <memcpy+0x84>
   811c8:	f851 3b04 	ldr.w	r3, [r1], #4
   811cc:	f840 3b04 	str.w	r3, [r0], #4
   811d0:	3a04      	subs	r2, #4
   811d2:	d2f9      	bcs.n	811c8 <memcpy+0x78>
   811d4:	3204      	adds	r2, #4
   811d6:	d008      	beq.n	811ea <memcpy+0x9a>
   811d8:	07d2      	lsls	r2, r2, #31
   811da:	bf1c      	itt	ne
   811dc:	f811 3b01 	ldrbne.w	r3, [r1], #1
   811e0:	f800 3b01 	strbne.w	r3, [r0], #1
   811e4:	d301      	bcc.n	811ea <memcpy+0x9a>
   811e6:	880b      	ldrh	r3, [r1, #0]
   811e8:	8003      	strh	r3, [r0, #0]
   811ea:	4660      	mov	r0, ip
   811ec:	4770      	bx	lr
   811ee:	bf00      	nop
   811f0:	2a08      	cmp	r2, #8
   811f2:	d313      	bcc.n	8121c <memcpy+0xcc>
   811f4:	078b      	lsls	r3, r1, #30
   811f6:	d0b1      	beq.n	8115c <memcpy+0xc>
   811f8:	f010 0303 	ands.w	r3, r0, #3
   811fc:	d0ae      	beq.n	8115c <memcpy+0xc>
   811fe:	f1c3 0304 	rsb	r3, r3, #4
   81202:	1ad2      	subs	r2, r2, r3
   81204:	07db      	lsls	r3, r3, #31
   81206:	bf1c      	itt	ne
   81208:	f811 3b01 	ldrbne.w	r3, [r1], #1
   8120c:	f800 3b01 	strbne.w	r3, [r0], #1
   81210:	d3a4      	bcc.n	8115c <memcpy+0xc>
   81212:	f831 3b02 	ldrh.w	r3, [r1], #2
   81216:	f820 3b02 	strh.w	r3, [r0], #2
   8121a:	e79f      	b.n	8115c <memcpy+0xc>
   8121c:	3a04      	subs	r2, #4
   8121e:	d3d9      	bcc.n	811d4 <memcpy+0x84>
   81220:	3a01      	subs	r2, #1
   81222:	f811 3b01 	ldrb.w	r3, [r1], #1
   81226:	f800 3b01 	strb.w	r3, [r0], #1
   8122a:	d2f9      	bcs.n	81220 <memcpy+0xd0>
   8122c:	780b      	ldrb	r3, [r1, #0]
   8122e:	7003      	strb	r3, [r0, #0]
   81230:	784b      	ldrb	r3, [r1, #1]
   81232:	7043      	strb	r3, [r0, #1]
   81234:	788b      	ldrb	r3, [r1, #2]
   81236:	7083      	strb	r3, [r0, #2]
   81238:	4660      	mov	r0, ip
   8123a:	4770      	bx	lr

0008123c <memset>:
   8123c:	b4f0      	push	{r4, r5, r6, r7}
   8123e:	0784      	lsls	r4, r0, #30
   81240:	d043      	beq.n	812ca <memset+0x8e>
   81242:	1e54      	subs	r4, r2, #1
   81244:	2a00      	cmp	r2, #0
   81246:	d03e      	beq.n	812c6 <memset+0x8a>
   81248:	b2cd      	uxtb	r5, r1
   8124a:	4603      	mov	r3, r0
   8124c:	e003      	b.n	81256 <memset+0x1a>
   8124e:	1e62      	subs	r2, r4, #1
   81250:	2c00      	cmp	r4, #0
   81252:	d038      	beq.n	812c6 <memset+0x8a>
   81254:	4614      	mov	r4, r2
   81256:	f803 5b01 	strb.w	r5, [r3], #1
   8125a:	079a      	lsls	r2, r3, #30
   8125c:	d1f7      	bne.n	8124e <memset+0x12>
   8125e:	2c03      	cmp	r4, #3
   81260:	d92a      	bls.n	812b8 <memset+0x7c>
   81262:	b2cd      	uxtb	r5, r1
   81264:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   81268:	2c0f      	cmp	r4, #15
   8126a:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   8126e:	d915      	bls.n	8129c <memset+0x60>
   81270:	f1a4 0710 	sub.w	r7, r4, #16
   81274:	093f      	lsrs	r7, r7, #4
   81276:	f103 0610 	add.w	r6, r3, #16
   8127a:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   8127e:	461a      	mov	r2, r3
   81280:	6015      	str	r5, [r2, #0]
   81282:	6055      	str	r5, [r2, #4]
   81284:	6095      	str	r5, [r2, #8]
   81286:	60d5      	str	r5, [r2, #12]
   81288:	3210      	adds	r2, #16
   8128a:	42b2      	cmp	r2, r6
   8128c:	d1f8      	bne.n	81280 <memset+0x44>
   8128e:	f004 040f 	and.w	r4, r4, #15
   81292:	3701      	adds	r7, #1
   81294:	2c03      	cmp	r4, #3
   81296:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   8129a:	d90d      	bls.n	812b8 <memset+0x7c>
   8129c:	461e      	mov	r6, r3
   8129e:	4622      	mov	r2, r4
   812a0:	3a04      	subs	r2, #4
   812a2:	2a03      	cmp	r2, #3
   812a4:	f846 5b04 	str.w	r5, [r6], #4
   812a8:	d8fa      	bhi.n	812a0 <memset+0x64>
   812aa:	1f22      	subs	r2, r4, #4
   812ac:	f022 0203 	bic.w	r2, r2, #3
   812b0:	3204      	adds	r2, #4
   812b2:	4413      	add	r3, r2
   812b4:	f004 0403 	and.w	r4, r4, #3
   812b8:	b12c      	cbz	r4, 812c6 <memset+0x8a>
   812ba:	b2c9      	uxtb	r1, r1
   812bc:	441c      	add	r4, r3
   812be:	f803 1b01 	strb.w	r1, [r3], #1
   812c2:	42a3      	cmp	r3, r4
   812c4:	d1fb      	bne.n	812be <memset+0x82>
   812c6:	bcf0      	pop	{r4, r5, r6, r7}
   812c8:	4770      	bx	lr
   812ca:	4614      	mov	r4, r2
   812cc:	4603      	mov	r3, r0
   812ce:	e7c6      	b.n	8125e <memset+0x22>

000812d0 <setbuf>:
   812d0:	2900      	cmp	r1, #0
   812d2:	bf0c      	ite	eq
   812d4:	2202      	moveq	r2, #2
   812d6:	2200      	movne	r2, #0
   812d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
   812dc:	f000 b800 	b.w	812e0 <setvbuf>

000812e0 <setvbuf>:
   812e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   812e4:	4d3c      	ldr	r5, [pc, #240]	; (813d8 <setvbuf+0xf8>)
   812e6:	4604      	mov	r4, r0
   812e8:	682d      	ldr	r5, [r5, #0]
   812ea:	4688      	mov	r8, r1
   812ec:	4616      	mov	r6, r2
   812ee:	461f      	mov	r7, r3
   812f0:	b115      	cbz	r5, 812f8 <setvbuf+0x18>
   812f2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   812f4:	2b00      	cmp	r3, #0
   812f6:	d04f      	beq.n	81398 <setvbuf+0xb8>
   812f8:	2e02      	cmp	r6, #2
   812fa:	d830      	bhi.n	8135e <setvbuf+0x7e>
   812fc:	2f00      	cmp	r7, #0
   812fe:	db2e      	blt.n	8135e <setvbuf+0x7e>
   81300:	4628      	mov	r0, r5
   81302:	4621      	mov	r1, r4
   81304:	f001 f856 	bl	823b4 <_fflush_r>
   81308:	89a3      	ldrh	r3, [r4, #12]
   8130a:	2200      	movs	r2, #0
   8130c:	6062      	str	r2, [r4, #4]
   8130e:	61a2      	str	r2, [r4, #24]
   81310:	061a      	lsls	r2, r3, #24
   81312:	d428      	bmi.n	81366 <setvbuf+0x86>
   81314:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   81318:	b29b      	uxth	r3, r3
   8131a:	2e02      	cmp	r6, #2
   8131c:	81a3      	strh	r3, [r4, #12]
   8131e:	d02d      	beq.n	8137c <setvbuf+0x9c>
   81320:	f1b8 0f00 	cmp.w	r8, #0
   81324:	d03c      	beq.n	813a0 <setvbuf+0xc0>
   81326:	2e01      	cmp	r6, #1
   81328:	d013      	beq.n	81352 <setvbuf+0x72>
   8132a:	b29b      	uxth	r3, r3
   8132c:	f003 0008 	and.w	r0, r3, #8
   81330:	4a2a      	ldr	r2, [pc, #168]	; (813dc <setvbuf+0xfc>)
   81332:	b280      	uxth	r0, r0
   81334:	63ea      	str	r2, [r5, #60]	; 0x3c
   81336:	f8c4 8000 	str.w	r8, [r4]
   8133a:	f8c4 8010 	str.w	r8, [r4, #16]
   8133e:	6167      	str	r7, [r4, #20]
   81340:	b178      	cbz	r0, 81362 <setvbuf+0x82>
   81342:	f013 0f03 	tst.w	r3, #3
   81346:	bf18      	it	ne
   81348:	2700      	movne	r7, #0
   8134a:	60a7      	str	r7, [r4, #8]
   8134c:	2000      	movs	r0, #0
   8134e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81352:	f043 0301 	orr.w	r3, r3, #1
   81356:	427a      	negs	r2, r7
   81358:	81a3      	strh	r3, [r4, #12]
   8135a:	61a2      	str	r2, [r4, #24]
   8135c:	e7e5      	b.n	8132a <setvbuf+0x4a>
   8135e:	f04f 30ff 	mov.w	r0, #4294967295
   81362:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81366:	4628      	mov	r0, r5
   81368:	6921      	ldr	r1, [r4, #16]
   8136a:	f001 f983 	bl	82674 <_free_r>
   8136e:	89a3      	ldrh	r3, [r4, #12]
   81370:	2e02      	cmp	r6, #2
   81372:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   81376:	b29b      	uxth	r3, r3
   81378:	81a3      	strh	r3, [r4, #12]
   8137a:	d1d1      	bne.n	81320 <setvbuf+0x40>
   8137c:	2000      	movs	r0, #0
   8137e:	f104 0243 	add.w	r2, r4, #67	; 0x43
   81382:	f043 0302 	orr.w	r3, r3, #2
   81386:	2500      	movs	r5, #0
   81388:	2101      	movs	r1, #1
   8138a:	81a3      	strh	r3, [r4, #12]
   8138c:	60a5      	str	r5, [r4, #8]
   8138e:	6022      	str	r2, [r4, #0]
   81390:	6122      	str	r2, [r4, #16]
   81392:	6161      	str	r1, [r4, #20]
   81394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81398:	4628      	mov	r0, r5
   8139a:	f001 f827 	bl	823ec <__sinit>
   8139e:	e7ab      	b.n	812f8 <setvbuf+0x18>
   813a0:	2f00      	cmp	r7, #0
   813a2:	bf08      	it	eq
   813a4:	f44f 6780 	moveq.w	r7, #1024	; 0x400
   813a8:	4638      	mov	r0, r7
   813aa:	f001 fc59 	bl	82c60 <malloc>
   813ae:	4680      	mov	r8, r0
   813b0:	b128      	cbz	r0, 813be <setvbuf+0xde>
   813b2:	89a3      	ldrh	r3, [r4, #12]
   813b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   813b8:	b29b      	uxth	r3, r3
   813ba:	81a3      	strh	r3, [r4, #12]
   813bc:	e7b3      	b.n	81326 <setvbuf+0x46>
   813be:	f44f 6080 	mov.w	r0, #1024	; 0x400
   813c2:	f001 fc4d 	bl	82c60 <malloc>
   813c6:	4680      	mov	r8, r0
   813c8:	b918      	cbnz	r0, 813d2 <setvbuf+0xf2>
   813ca:	89a3      	ldrh	r3, [r4, #12]
   813cc:	f04f 30ff 	mov.w	r0, #4294967295
   813d0:	e7d5      	b.n	8137e <setvbuf+0x9e>
   813d2:	f44f 6780 	mov.w	r7, #1024	; 0x400
   813d6:	e7ec      	b.n	813b2 <setvbuf+0xd2>
   813d8:	20070570 	.word	0x20070570
   813dc:	000823e1 	.word	0x000823e1

000813e0 <strlen>:
   813e0:	f020 0103 	bic.w	r1, r0, #3
   813e4:	f010 0003 	ands.w	r0, r0, #3
   813e8:	f1c0 0000 	rsb	r0, r0, #0
   813ec:	f851 3b04 	ldr.w	r3, [r1], #4
   813f0:	f100 0c04 	add.w	ip, r0, #4
   813f4:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   813f8:	f06f 0200 	mvn.w	r2, #0
   813fc:	bf1c      	itt	ne
   813fe:	fa22 f20c 	lsrne.w	r2, r2, ip
   81402:	4313      	orrne	r3, r2
   81404:	f04f 0c01 	mov.w	ip, #1
   81408:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   8140c:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   81410:	eba3 020c 	sub.w	r2, r3, ip
   81414:	ea22 0203 	bic.w	r2, r2, r3
   81418:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   8141c:	bf04      	itt	eq
   8141e:	f851 3b04 	ldreq.w	r3, [r1], #4
   81422:	3004      	addeq	r0, #4
   81424:	d0f4      	beq.n	81410 <strlen+0x30>
   81426:	f013 0fff 	tst.w	r3, #255	; 0xff
   8142a:	bf1f      	itttt	ne
   8142c:	3001      	addne	r0, #1
   8142e:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
   81432:	3001      	addne	r0, #1
   81434:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
   81438:	bf18      	it	ne
   8143a:	3001      	addne	r0, #1
   8143c:	4770      	bx	lr
   8143e:	bf00      	nop

00081440 <__sprint_r.part.0>:
   81440:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   81442:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   81446:	049c      	lsls	r4, r3, #18
   81448:	460e      	mov	r6, r1
   8144a:	4680      	mov	r8, r0
   8144c:	4691      	mov	r9, r2
   8144e:	d52a      	bpl.n	814a6 <__sprint_r.part.0+0x66>
   81450:	6893      	ldr	r3, [r2, #8]
   81452:	6812      	ldr	r2, [r2, #0]
   81454:	f102 0a08 	add.w	sl, r2, #8
   81458:	b31b      	cbz	r3, 814a2 <__sprint_r.part.0+0x62>
   8145a:	e91a 00a0 	ldmdb	sl, {r5, r7}
   8145e:	08bf      	lsrs	r7, r7, #2
   81460:	d017      	beq.n	81492 <__sprint_r.part.0+0x52>
   81462:	3d04      	subs	r5, #4
   81464:	2400      	movs	r4, #0
   81466:	e001      	b.n	8146c <__sprint_r.part.0+0x2c>
   81468:	42a7      	cmp	r7, r4
   8146a:	d010      	beq.n	8148e <__sprint_r.part.0+0x4e>
   8146c:	4640      	mov	r0, r8
   8146e:	f855 1f04 	ldr.w	r1, [r5, #4]!
   81472:	4632      	mov	r2, r6
   81474:	f001 f850 	bl	82518 <_fputwc_r>
   81478:	1c43      	adds	r3, r0, #1
   8147a:	f104 0401 	add.w	r4, r4, #1
   8147e:	d1f3      	bne.n	81468 <__sprint_r.part.0+0x28>
   81480:	2300      	movs	r3, #0
   81482:	f8c9 3008 	str.w	r3, [r9, #8]
   81486:	f8c9 3004 	str.w	r3, [r9, #4]
   8148a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8148e:	f8d9 3008 	ldr.w	r3, [r9, #8]
   81492:	eba3 0387 	sub.w	r3, r3, r7, lsl #2
   81496:	f8c9 3008 	str.w	r3, [r9, #8]
   8149a:	f10a 0a08 	add.w	sl, sl, #8
   8149e:	2b00      	cmp	r3, #0
   814a0:	d1db      	bne.n	8145a <__sprint_r.part.0+0x1a>
   814a2:	2000      	movs	r0, #0
   814a4:	e7ec      	b.n	81480 <__sprint_r.part.0+0x40>
   814a6:	f001 f9b1 	bl	8280c <__sfvwrite_r>
   814aa:	2300      	movs	r3, #0
   814ac:	f8c9 3008 	str.w	r3, [r9, #8]
   814b0:	f8c9 3004 	str.w	r3, [r9, #4]
   814b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000814b8 <_vfiprintf_r>:
   814b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   814bc:	b0b1      	sub	sp, #196	; 0xc4
   814be:	461c      	mov	r4, r3
   814c0:	9102      	str	r1, [sp, #8]
   814c2:	4690      	mov	r8, r2
   814c4:	9308      	str	r3, [sp, #32]
   814c6:	9006      	str	r0, [sp, #24]
   814c8:	b118      	cbz	r0, 814d2 <_vfiprintf_r+0x1a>
   814ca:	6b83      	ldr	r3, [r0, #56]	; 0x38
   814cc:	2b00      	cmp	r3, #0
   814ce:	f000 80e8 	beq.w	816a2 <_vfiprintf_r+0x1ea>
   814d2:	9d02      	ldr	r5, [sp, #8]
   814d4:	89ab      	ldrh	r3, [r5, #12]
   814d6:	b29a      	uxth	r2, r3
   814d8:	0490      	lsls	r0, r2, #18
   814da:	d407      	bmi.n	814ec <_vfiprintf_r+0x34>
   814dc:	6e6a      	ldr	r2, [r5, #100]	; 0x64
   814de:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   814e2:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
   814e6:	81ab      	strh	r3, [r5, #12]
   814e8:	b29a      	uxth	r2, r3
   814ea:	6669      	str	r1, [r5, #100]	; 0x64
   814ec:	0711      	lsls	r1, r2, #28
   814ee:	f140 80b7 	bpl.w	81660 <_vfiprintf_r+0x1a8>
   814f2:	f8dd b008 	ldr.w	fp, [sp, #8]
   814f6:	f8db 3010 	ldr.w	r3, [fp, #16]
   814fa:	2b00      	cmp	r3, #0
   814fc:	f000 80b0 	beq.w	81660 <_vfiprintf_r+0x1a8>
   81500:	f002 021a 	and.w	r2, r2, #26
   81504:	2a0a      	cmp	r2, #10
   81506:	f000 80b7 	beq.w	81678 <_vfiprintf_r+0x1c0>
   8150a:	2300      	movs	r3, #0
   8150c:	f10d 0980 	add.w	r9, sp, #128	; 0x80
   81510:	930a      	str	r3, [sp, #40]	; 0x28
   81512:	9315      	str	r3, [sp, #84]	; 0x54
   81514:	9314      	str	r3, [sp, #80]	; 0x50
   81516:	9309      	str	r3, [sp, #36]	; 0x24
   81518:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
   8151c:	464e      	mov	r6, r9
   8151e:	f898 3000 	ldrb.w	r3, [r8]
   81522:	2b00      	cmp	r3, #0
   81524:	f000 84c8 	beq.w	81eb8 <_vfiprintf_r+0xa00>
   81528:	2b25      	cmp	r3, #37	; 0x25
   8152a:	f000 84c5 	beq.w	81eb8 <_vfiprintf_r+0xa00>
   8152e:	f108 0201 	add.w	r2, r8, #1
   81532:	e001      	b.n	81538 <_vfiprintf_r+0x80>
   81534:	2b25      	cmp	r3, #37	; 0x25
   81536:	d004      	beq.n	81542 <_vfiprintf_r+0x8a>
   81538:	7813      	ldrb	r3, [r2, #0]
   8153a:	4614      	mov	r4, r2
   8153c:	3201      	adds	r2, #1
   8153e:	2b00      	cmp	r3, #0
   81540:	d1f8      	bne.n	81534 <_vfiprintf_r+0x7c>
   81542:	ebc8 0504 	rsb	r5, r8, r4
   81546:	b195      	cbz	r5, 8156e <_vfiprintf_r+0xb6>
   81548:	9b14      	ldr	r3, [sp, #80]	; 0x50
   8154a:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8154c:	3301      	adds	r3, #1
   8154e:	442a      	add	r2, r5
   81550:	2b07      	cmp	r3, #7
   81552:	f8c6 8000 	str.w	r8, [r6]
   81556:	6075      	str	r5, [r6, #4]
   81558:	9215      	str	r2, [sp, #84]	; 0x54
   8155a:	9314      	str	r3, [sp, #80]	; 0x50
   8155c:	dd7b      	ble.n	81656 <_vfiprintf_r+0x19e>
   8155e:	2a00      	cmp	r2, #0
   81560:	f040 84d5 	bne.w	81f0e <_vfiprintf_r+0xa56>
   81564:	9809      	ldr	r0, [sp, #36]	; 0x24
   81566:	9214      	str	r2, [sp, #80]	; 0x50
   81568:	4428      	add	r0, r5
   8156a:	464e      	mov	r6, r9
   8156c:	9009      	str	r0, [sp, #36]	; 0x24
   8156e:	7823      	ldrb	r3, [r4, #0]
   81570:	2b00      	cmp	r3, #0
   81572:	f000 83ed 	beq.w	81d50 <_vfiprintf_r+0x898>
   81576:	2100      	movs	r1, #0
   81578:	f04f 0200 	mov.w	r2, #0
   8157c:	f04f 3cff 	mov.w	ip, #4294967295
   81580:	7863      	ldrb	r3, [r4, #1]
   81582:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
   81586:	9104      	str	r1, [sp, #16]
   81588:	468a      	mov	sl, r1
   8158a:	f104 0801 	add.w	r8, r4, #1
   8158e:	4608      	mov	r0, r1
   81590:	4665      	mov	r5, ip
   81592:	f108 0801 	add.w	r8, r8, #1
   81596:	f1a3 0220 	sub.w	r2, r3, #32
   8159a:	2a58      	cmp	r2, #88	; 0x58
   8159c:	f200 82d9 	bhi.w	81b52 <_vfiprintf_r+0x69a>
   815a0:	e8df f012 	tbh	[pc, r2, lsl #1]
   815a4:	02d702cb 	.word	0x02d702cb
   815a8:	02d202d7 	.word	0x02d202d7
   815ac:	02d702d7 	.word	0x02d702d7
   815b0:	02d702d7 	.word	0x02d702d7
   815b4:	02d702d7 	.word	0x02d702d7
   815b8:	028f0282 	.word	0x028f0282
   815bc:	008402d7 	.word	0x008402d7
   815c0:	02d70293 	.word	0x02d70293
   815c4:	0196012b 	.word	0x0196012b
   815c8:	01960196 	.word	0x01960196
   815cc:	01960196 	.word	0x01960196
   815d0:	01960196 	.word	0x01960196
   815d4:	01960196 	.word	0x01960196
   815d8:	02d702d7 	.word	0x02d702d7
   815dc:	02d702d7 	.word	0x02d702d7
   815e0:	02d702d7 	.word	0x02d702d7
   815e4:	02d702d7 	.word	0x02d702d7
   815e8:	02d702d7 	.word	0x02d702d7
   815ec:	02d70130 	.word	0x02d70130
   815f0:	02d702d7 	.word	0x02d702d7
   815f4:	02d702d7 	.word	0x02d702d7
   815f8:	02d702d7 	.word	0x02d702d7
   815fc:	02d702d7 	.word	0x02d702d7
   81600:	017b02d7 	.word	0x017b02d7
   81604:	02d702d7 	.word	0x02d702d7
   81608:	02d702d7 	.word	0x02d702d7
   8160c:	01a402d7 	.word	0x01a402d7
   81610:	02d702d7 	.word	0x02d702d7
   81614:	02d701bf 	.word	0x02d701bf
   81618:	02d702d7 	.word	0x02d702d7
   8161c:	02d702d7 	.word	0x02d702d7
   81620:	02d702d7 	.word	0x02d702d7
   81624:	02d702d7 	.word	0x02d702d7
   81628:	01e402d7 	.word	0x01e402d7
   8162c:	02d701fa 	.word	0x02d701fa
   81630:	02d702d7 	.word	0x02d702d7
   81634:	01fa0216 	.word	0x01fa0216
   81638:	02d702d7 	.word	0x02d702d7
   8163c:	02d7021b 	.word	0x02d7021b
   81640:	00890228 	.word	0x00890228
   81644:	027d0266 	.word	0x027d0266
   81648:	023a02d7 	.word	0x023a02d7
   8164c:	011902d7 	.word	0x011902d7
   81650:	02d702d7 	.word	0x02d702d7
   81654:	02af      	.short	0x02af
   81656:	3608      	adds	r6, #8
   81658:	9809      	ldr	r0, [sp, #36]	; 0x24
   8165a:	4428      	add	r0, r5
   8165c:	9009      	str	r0, [sp, #36]	; 0x24
   8165e:	e786      	b.n	8156e <_vfiprintf_r+0xb6>
   81660:	9806      	ldr	r0, [sp, #24]
   81662:	9902      	ldr	r1, [sp, #8]
   81664:	f000 fd90 	bl	82188 <__swsetup_r>
   81668:	b9b0      	cbnz	r0, 81698 <_vfiprintf_r+0x1e0>
   8166a:	9d02      	ldr	r5, [sp, #8]
   8166c:	89aa      	ldrh	r2, [r5, #12]
   8166e:	f002 021a 	and.w	r2, r2, #26
   81672:	2a0a      	cmp	r2, #10
   81674:	f47f af49 	bne.w	8150a <_vfiprintf_r+0x52>
   81678:	f8dd b008 	ldr.w	fp, [sp, #8]
   8167c:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
   81680:	2b00      	cmp	r3, #0
   81682:	f6ff af42 	blt.w	8150a <_vfiprintf_r+0x52>
   81686:	9806      	ldr	r0, [sp, #24]
   81688:	4659      	mov	r1, fp
   8168a:	4642      	mov	r2, r8
   8168c:	4623      	mov	r3, r4
   8168e:	f000 fd3d 	bl	8210c <__sbprintf>
   81692:	b031      	add	sp, #196	; 0xc4
   81694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81698:	f04f 30ff 	mov.w	r0, #4294967295
   8169c:	b031      	add	sp, #196	; 0xc4
   8169e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   816a2:	f000 fea3 	bl	823ec <__sinit>
   816a6:	e714      	b.n	814d2 <_vfiprintf_r+0x1a>
   816a8:	4240      	negs	r0, r0
   816aa:	9308      	str	r3, [sp, #32]
   816ac:	f04a 0a04 	orr.w	sl, sl, #4
   816b0:	f898 3000 	ldrb.w	r3, [r8]
   816b4:	e76d      	b.n	81592 <_vfiprintf_r+0xda>
   816b6:	f01a 0320 	ands.w	r3, sl, #32
   816ba:	9004      	str	r0, [sp, #16]
   816bc:	46ac      	mov	ip, r5
   816be:	f000 80f4 	beq.w	818aa <_vfiprintf_r+0x3f2>
   816c2:	f8dd b020 	ldr.w	fp, [sp, #32]
   816c6:	f10b 0307 	add.w	r3, fp, #7
   816ca:	f023 0307 	bic.w	r3, r3, #7
   816ce:	f103 0408 	add.w	r4, r3, #8
   816d2:	9408      	str	r4, [sp, #32]
   816d4:	e9d3 4500 	ldrd	r4, r5, [r3]
   816d8:	2300      	movs	r3, #0
   816da:	f04f 0000 	mov.w	r0, #0
   816de:	2100      	movs	r1, #0
   816e0:	f88d 0047 	strb.w	r0, [sp, #71]	; 0x47
   816e4:	f8cd c014 	str.w	ip, [sp, #20]
   816e8:	9107      	str	r1, [sp, #28]
   816ea:	f1bc 0f00 	cmp.w	ip, #0
   816ee:	bfa8      	it	ge
   816f0:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
   816f4:	ea54 0205 	orrs.w	r2, r4, r5
   816f8:	f040 80ad 	bne.w	81856 <_vfiprintf_r+0x39e>
   816fc:	f1bc 0f00 	cmp.w	ip, #0
   81700:	f040 80a9 	bne.w	81856 <_vfiprintf_r+0x39e>
   81704:	2b00      	cmp	r3, #0
   81706:	f040 83c0 	bne.w	81e8a <_vfiprintf_r+0x9d2>
   8170a:	f01a 0f01 	tst.w	sl, #1
   8170e:	f000 83bc 	beq.w	81e8a <_vfiprintf_r+0x9d2>
   81712:	2330      	movs	r3, #48	; 0x30
   81714:	af30      	add	r7, sp, #192	; 0xc0
   81716:	f807 3d41 	strb.w	r3, [r7, #-65]!
   8171a:	ebc7 0409 	rsb	r4, r7, r9
   8171e:	9405      	str	r4, [sp, #20]
   81720:	f8dd b014 	ldr.w	fp, [sp, #20]
   81724:	9c07      	ldr	r4, [sp, #28]
   81726:	45e3      	cmp	fp, ip
   81728:	bfb8      	it	lt
   8172a:	46e3      	movlt	fp, ip
   8172c:	f8cd b00c 	str.w	fp, [sp, #12]
   81730:	b11c      	cbz	r4, 8173a <_vfiprintf_r+0x282>
   81732:	f10b 0b01 	add.w	fp, fp, #1
   81736:	f8cd b00c 	str.w	fp, [sp, #12]
   8173a:	f01a 0502 	ands.w	r5, sl, #2
   8173e:	9507      	str	r5, [sp, #28]
   81740:	d005      	beq.n	8174e <_vfiprintf_r+0x296>
   81742:	f8dd b00c 	ldr.w	fp, [sp, #12]
   81746:	f10b 0b02 	add.w	fp, fp, #2
   8174a:	f8cd b00c 	str.w	fp, [sp, #12]
   8174e:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
   81752:	930b      	str	r3, [sp, #44]	; 0x2c
   81754:	f040 821b 	bne.w	81b8e <_vfiprintf_r+0x6d6>
   81758:	9d04      	ldr	r5, [sp, #16]
   8175a:	f8dd b00c 	ldr.w	fp, [sp, #12]
   8175e:	ebcb 0405 	rsb	r4, fp, r5
   81762:	2c00      	cmp	r4, #0
   81764:	f340 8213 	ble.w	81b8e <_vfiprintf_r+0x6d6>
   81768:	2c10      	cmp	r4, #16
   8176a:	f340 8489 	ble.w	82080 <_vfiprintf_r+0xbc8>
   8176e:	4dbe      	ldr	r5, [pc, #760]	; (81a68 <_vfiprintf_r+0x5b0>)
   81770:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81772:	462b      	mov	r3, r5
   81774:	9814      	ldr	r0, [sp, #80]	; 0x50
   81776:	4625      	mov	r5, r4
   81778:	f04f 0b10 	mov.w	fp, #16
   8177c:	4664      	mov	r4, ip
   8177e:	46b4      	mov	ip, r6
   81780:	461e      	mov	r6, r3
   81782:	e006      	b.n	81792 <_vfiprintf_r+0x2da>
   81784:	1c83      	adds	r3, r0, #2
   81786:	f10c 0c08 	add.w	ip, ip, #8
   8178a:	4608      	mov	r0, r1
   8178c:	3d10      	subs	r5, #16
   8178e:	2d10      	cmp	r5, #16
   81790:	dd11      	ble.n	817b6 <_vfiprintf_r+0x2fe>
   81792:	1c41      	adds	r1, r0, #1
   81794:	3210      	adds	r2, #16
   81796:	2907      	cmp	r1, #7
   81798:	9215      	str	r2, [sp, #84]	; 0x54
   8179a:	e88c 0840 	stmia.w	ip, {r6, fp}
   8179e:	9114      	str	r1, [sp, #80]	; 0x50
   817a0:	ddf0      	ble.n	81784 <_vfiprintf_r+0x2cc>
   817a2:	2a00      	cmp	r2, #0
   817a4:	f040 81e6 	bne.w	81b74 <_vfiprintf_r+0x6bc>
   817a8:	3d10      	subs	r5, #16
   817aa:	2d10      	cmp	r5, #16
   817ac:	f04f 0301 	mov.w	r3, #1
   817b0:	4610      	mov	r0, r2
   817b2:	46cc      	mov	ip, r9
   817b4:	dced      	bgt.n	81792 <_vfiprintf_r+0x2da>
   817b6:	4631      	mov	r1, r6
   817b8:	4666      	mov	r6, ip
   817ba:	46a4      	mov	ip, r4
   817bc:	462c      	mov	r4, r5
   817be:	460d      	mov	r5, r1
   817c0:	4422      	add	r2, r4
   817c2:	2b07      	cmp	r3, #7
   817c4:	9215      	str	r2, [sp, #84]	; 0x54
   817c6:	6035      	str	r5, [r6, #0]
   817c8:	6074      	str	r4, [r6, #4]
   817ca:	9314      	str	r3, [sp, #80]	; 0x50
   817cc:	f300 836d 	bgt.w	81eaa <_vfiprintf_r+0x9f2>
   817d0:	3608      	adds	r6, #8
   817d2:	1c59      	adds	r1, r3, #1
   817d4:	e1de      	b.n	81b94 <_vfiprintf_r+0x6dc>
   817d6:	f01a 0f20 	tst.w	sl, #32
   817da:	9004      	str	r0, [sp, #16]
   817dc:	46ac      	mov	ip, r5
   817de:	f000 808d 	beq.w	818fc <_vfiprintf_r+0x444>
   817e2:	9d08      	ldr	r5, [sp, #32]
   817e4:	1deb      	adds	r3, r5, #7
   817e6:	f023 0307 	bic.w	r3, r3, #7
   817ea:	f103 0b08 	add.w	fp, r3, #8
   817ee:	e9d3 4500 	ldrd	r4, r5, [r3]
   817f2:	f8cd b020 	str.w	fp, [sp, #32]
   817f6:	2301      	movs	r3, #1
   817f8:	e76f      	b.n	816da <_vfiprintf_r+0x222>
   817fa:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
   817fe:	f898 3000 	ldrb.w	r3, [r8]
   81802:	e6c6      	b.n	81592 <_vfiprintf_r+0xda>
   81804:	f04a 0a10 	orr.w	sl, sl, #16
   81808:	f01a 0f20 	tst.w	sl, #32
   8180c:	9004      	str	r0, [sp, #16]
   8180e:	46ac      	mov	ip, r5
   81810:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   81814:	f000 80c8 	beq.w	819a8 <_vfiprintf_r+0x4f0>
   81818:	9c08      	ldr	r4, [sp, #32]
   8181a:	1de1      	adds	r1, r4, #7
   8181c:	f021 0107 	bic.w	r1, r1, #7
   81820:	e9d1 2300 	ldrd	r2, r3, [r1]
   81824:	3108      	adds	r1, #8
   81826:	9108      	str	r1, [sp, #32]
   81828:	4614      	mov	r4, r2
   8182a:	461d      	mov	r5, r3
   8182c:	2a00      	cmp	r2, #0
   8182e:	f173 0b00 	sbcs.w	fp, r3, #0
   81832:	f2c0 83ce 	blt.w	81fd2 <_vfiprintf_r+0xb1a>
   81836:	f1bc 0f00 	cmp.w	ip, #0
   8183a:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
   8183e:	bfa8      	it	ge
   81840:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
   81844:	ea54 0205 	orrs.w	r2, r4, r5
   81848:	9007      	str	r0, [sp, #28]
   8184a:	f8cd c014 	str.w	ip, [sp, #20]
   8184e:	f04f 0301 	mov.w	r3, #1
   81852:	f43f af53 	beq.w	816fc <_vfiprintf_r+0x244>
   81856:	2b01      	cmp	r3, #1
   81858:	f000 8319 	beq.w	81e8e <_vfiprintf_r+0x9d6>
   8185c:	2b02      	cmp	r3, #2
   8185e:	f10d 037f 	add.w	r3, sp, #127	; 0x7f
   81862:	f040 824c 	bne.w	81cfe <_vfiprintf_r+0x846>
   81866:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   8186a:	4619      	mov	r1, r3
   8186c:	f004 000f 	and.w	r0, r4, #15
   81870:	0922      	lsrs	r2, r4, #4
   81872:	f81b 0000 	ldrb.w	r0, [fp, r0]
   81876:	ea42 7205 	orr.w	r2, r2, r5, lsl #28
   8187a:	092b      	lsrs	r3, r5, #4
   8187c:	7008      	strb	r0, [r1, #0]
   8187e:	ea52 0003 	orrs.w	r0, r2, r3
   81882:	460f      	mov	r7, r1
   81884:	4614      	mov	r4, r2
   81886:	461d      	mov	r5, r3
   81888:	f101 31ff 	add.w	r1, r1, #4294967295
   8188c:	d1ee      	bne.n	8186c <_vfiprintf_r+0x3b4>
   8188e:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   81892:	ebc7 0309 	rsb	r3, r7, r9
   81896:	9305      	str	r3, [sp, #20]
   81898:	e742      	b.n	81720 <_vfiprintf_r+0x268>
   8189a:	f04a 0a10 	orr.w	sl, sl, #16
   8189e:	f01a 0320 	ands.w	r3, sl, #32
   818a2:	9004      	str	r0, [sp, #16]
   818a4:	46ac      	mov	ip, r5
   818a6:	f47f af0c 	bne.w	816c2 <_vfiprintf_r+0x20a>
   818aa:	f01a 0210 	ands.w	r2, sl, #16
   818ae:	f040 8311 	bne.w	81ed4 <_vfiprintf_r+0xa1c>
   818b2:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
   818b6:	f000 830d 	beq.w	81ed4 <_vfiprintf_r+0xa1c>
   818ba:	f8dd b020 	ldr.w	fp, [sp, #32]
   818be:	4613      	mov	r3, r2
   818c0:	f8bb 4000 	ldrh.w	r4, [fp]
   818c4:	f10b 0b04 	add.w	fp, fp, #4
   818c8:	2500      	movs	r5, #0
   818ca:	f8cd b020 	str.w	fp, [sp, #32]
   818ce:	e704      	b.n	816da <_vfiprintf_r+0x222>
   818d0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   818d4:	2000      	movs	r0, #0
   818d6:	f818 3b01 	ldrb.w	r3, [r8], #1
   818da:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   818de:	eb02 0040 	add.w	r0, r2, r0, lsl #1
   818e2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   818e6:	2a09      	cmp	r2, #9
   818e8:	d9f5      	bls.n	818d6 <_vfiprintf_r+0x41e>
   818ea:	e654      	b.n	81596 <_vfiprintf_r+0xde>
   818ec:	f04a 0a10 	orr.w	sl, sl, #16
   818f0:	f01a 0f20 	tst.w	sl, #32
   818f4:	9004      	str	r0, [sp, #16]
   818f6:	46ac      	mov	ip, r5
   818f8:	f47f af73 	bne.w	817e2 <_vfiprintf_r+0x32a>
   818fc:	f01a 0f10 	tst.w	sl, #16
   81900:	f040 82ef 	bne.w	81ee2 <_vfiprintf_r+0xa2a>
   81904:	f01a 0f40 	tst.w	sl, #64	; 0x40
   81908:	f000 82eb 	beq.w	81ee2 <_vfiprintf_r+0xa2a>
   8190c:	f8dd b020 	ldr.w	fp, [sp, #32]
   81910:	2500      	movs	r5, #0
   81912:	f8bb 4000 	ldrh.w	r4, [fp]
   81916:	f10b 0b04 	add.w	fp, fp, #4
   8191a:	2301      	movs	r3, #1
   8191c:	f8cd b020 	str.w	fp, [sp, #32]
   81920:	e6db      	b.n	816da <_vfiprintf_r+0x222>
   81922:	46ac      	mov	ip, r5
   81924:	4d51      	ldr	r5, [pc, #324]	; (81a6c <_vfiprintf_r+0x5b4>)
   81926:	f01a 0f20 	tst.w	sl, #32
   8192a:	9004      	str	r0, [sp, #16]
   8192c:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   81930:	950a      	str	r5, [sp, #40]	; 0x28
   81932:	f000 80f0 	beq.w	81b16 <_vfiprintf_r+0x65e>
   81936:	9d08      	ldr	r5, [sp, #32]
   81938:	1dea      	adds	r2, r5, #7
   8193a:	f022 0207 	bic.w	r2, r2, #7
   8193e:	f102 0b08 	add.w	fp, r2, #8
   81942:	f8cd b020 	str.w	fp, [sp, #32]
   81946:	e9d2 4500 	ldrd	r4, r5, [r2]
   8194a:	f01a 0f01 	tst.w	sl, #1
   8194e:	f000 82aa 	beq.w	81ea6 <_vfiprintf_r+0x9ee>
   81952:	ea54 0b05 	orrs.w	fp, r4, r5
   81956:	f000 82a6 	beq.w	81ea6 <_vfiprintf_r+0x9ee>
   8195a:	2230      	movs	r2, #48	; 0x30
   8195c:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
   81960:	f04a 0a02 	orr.w	sl, sl, #2
   81964:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   81968:	2302      	movs	r3, #2
   8196a:	e6b6      	b.n	816da <_vfiprintf_r+0x222>
   8196c:	9b08      	ldr	r3, [sp, #32]
   8196e:	f8dd b020 	ldr.w	fp, [sp, #32]
   81972:	681b      	ldr	r3, [r3, #0]
   81974:	2401      	movs	r4, #1
   81976:	f04f 0500 	mov.w	r5, #0
   8197a:	f10b 0b04 	add.w	fp, fp, #4
   8197e:	9004      	str	r0, [sp, #16]
   81980:	9403      	str	r4, [sp, #12]
   81982:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
   81986:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   8198a:	f8cd b020 	str.w	fp, [sp, #32]
   8198e:	9405      	str	r4, [sp, #20]
   81990:	af16      	add	r7, sp, #88	; 0x58
   81992:	f04f 0c00 	mov.w	ip, #0
   81996:	e6d0      	b.n	8173a <_vfiprintf_r+0x282>
   81998:	f01a 0f20 	tst.w	sl, #32
   8199c:	9004      	str	r0, [sp, #16]
   8199e:	46ac      	mov	ip, r5
   819a0:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   819a4:	f47f af38 	bne.w	81818 <_vfiprintf_r+0x360>
   819a8:	f01a 0f10 	tst.w	sl, #16
   819ac:	f040 82a7 	bne.w	81efe <_vfiprintf_r+0xa46>
   819b0:	f01a 0f40 	tst.w	sl, #64	; 0x40
   819b4:	f000 82a3 	beq.w	81efe <_vfiprintf_r+0xa46>
   819b8:	f8dd b020 	ldr.w	fp, [sp, #32]
   819bc:	f9bb 4000 	ldrsh.w	r4, [fp]
   819c0:	f10b 0b04 	add.w	fp, fp, #4
   819c4:	17e5      	asrs	r5, r4, #31
   819c6:	4622      	mov	r2, r4
   819c8:	462b      	mov	r3, r5
   819ca:	f8cd b020 	str.w	fp, [sp, #32]
   819ce:	e72d      	b.n	8182c <_vfiprintf_r+0x374>
   819d0:	f04a 0a40 	orr.w	sl, sl, #64	; 0x40
   819d4:	f898 3000 	ldrb.w	r3, [r8]
   819d8:	e5db      	b.n	81592 <_vfiprintf_r+0xda>
   819da:	f898 3000 	ldrb.w	r3, [r8]
   819de:	4642      	mov	r2, r8
   819e0:	2b6c      	cmp	r3, #108	; 0x6c
   819e2:	bf03      	ittte	eq
   819e4:	f108 0801 	addeq.w	r8, r8, #1
   819e8:	f04a 0a20 	orreq.w	sl, sl, #32
   819ec:	7853      	ldrbeq	r3, [r2, #1]
   819ee:	f04a 0a10 	orrne.w	sl, sl, #16
   819f2:	e5ce      	b.n	81592 <_vfiprintf_r+0xda>
   819f4:	f01a 0f20 	tst.w	sl, #32
   819f8:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   819fc:	f000 82f7 	beq.w	81fee <_vfiprintf_r+0xb36>
   81a00:	9c08      	ldr	r4, [sp, #32]
   81a02:	6821      	ldr	r1, [r4, #0]
   81a04:	9c09      	ldr	r4, [sp, #36]	; 0x24
   81a06:	17e5      	asrs	r5, r4, #31
   81a08:	462b      	mov	r3, r5
   81a0a:	9d08      	ldr	r5, [sp, #32]
   81a0c:	4622      	mov	r2, r4
   81a0e:	3504      	adds	r5, #4
   81a10:	9508      	str	r5, [sp, #32]
   81a12:	e9c1 2300 	strd	r2, r3, [r1]
   81a16:	e582      	b.n	8151e <_vfiprintf_r+0x66>
   81a18:	9c08      	ldr	r4, [sp, #32]
   81a1a:	46ac      	mov	ip, r5
   81a1c:	6827      	ldr	r7, [r4, #0]
   81a1e:	f04f 0500 	mov.w	r5, #0
   81a22:	9004      	str	r0, [sp, #16]
   81a24:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
   81a28:	3404      	adds	r4, #4
   81a2a:	2f00      	cmp	r7, #0
   81a2c:	f000 8332 	beq.w	82094 <_vfiprintf_r+0xbdc>
   81a30:	f1bc 0f00 	cmp.w	ip, #0
   81a34:	4638      	mov	r0, r7
   81a36:	f2c0 8307 	blt.w	82048 <_vfiprintf_r+0xb90>
   81a3a:	4662      	mov	r2, ip
   81a3c:	2100      	movs	r1, #0
   81a3e:	f8cd c004 	str.w	ip, [sp, #4]
   81a42:	f001 fbb1 	bl	831a8 <memchr>
   81a46:	f8dd c004 	ldr.w	ip, [sp, #4]
   81a4a:	2800      	cmp	r0, #0
   81a4c:	f000 833a 	beq.w	820c4 <_vfiprintf_r+0xc0c>
   81a50:	1bc0      	subs	r0, r0, r7
   81a52:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
   81a56:	4560      	cmp	r0, ip
   81a58:	bfa8      	it	ge
   81a5a:	4660      	movge	r0, ip
   81a5c:	9005      	str	r0, [sp, #20]
   81a5e:	9408      	str	r4, [sp, #32]
   81a60:	9507      	str	r5, [sp, #28]
   81a62:	f04f 0c00 	mov.w	ip, #0
   81a66:	e65b      	b.n	81720 <_vfiprintf_r+0x268>
   81a68:	000840e4 	.word	0x000840e4
   81a6c:	000840a4 	.word	0x000840a4
   81a70:	9b08      	ldr	r3, [sp, #32]
   81a72:	f8dd b020 	ldr.w	fp, [sp, #32]
   81a76:	9004      	str	r0, [sp, #16]
   81a78:	48b2      	ldr	r0, [pc, #712]	; (81d44 <_vfiprintf_r+0x88c>)
   81a7a:	681c      	ldr	r4, [r3, #0]
   81a7c:	2230      	movs	r2, #48	; 0x30
   81a7e:	2378      	movs	r3, #120	; 0x78
   81a80:	f10b 0b04 	add.w	fp, fp, #4
   81a84:	46ac      	mov	ip, r5
   81a86:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
   81a8a:	f04a 0a02 	orr.w	sl, sl, #2
   81a8e:	f8cd b020 	str.w	fp, [sp, #32]
   81a92:	2500      	movs	r5, #0
   81a94:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   81a98:	900a      	str	r0, [sp, #40]	; 0x28
   81a9a:	2302      	movs	r3, #2
   81a9c:	e61d      	b.n	816da <_vfiprintf_r+0x222>
   81a9e:	f04a 0a20 	orr.w	sl, sl, #32
   81aa2:	f898 3000 	ldrb.w	r3, [r8]
   81aa6:	e574      	b.n	81592 <_vfiprintf_r+0xda>
   81aa8:	f8dd b020 	ldr.w	fp, [sp, #32]
   81aac:	f8db 0000 	ldr.w	r0, [fp]
   81ab0:	f10b 0304 	add.w	r3, fp, #4
   81ab4:	2800      	cmp	r0, #0
   81ab6:	f6ff adf7 	blt.w	816a8 <_vfiprintf_r+0x1f0>
   81aba:	9308      	str	r3, [sp, #32]
   81abc:	f898 3000 	ldrb.w	r3, [r8]
   81ac0:	e567      	b.n	81592 <_vfiprintf_r+0xda>
   81ac2:	f898 3000 	ldrb.w	r3, [r8]
   81ac6:	212b      	movs	r1, #43	; 0x2b
   81ac8:	e563      	b.n	81592 <_vfiprintf_r+0xda>
   81aca:	f898 3000 	ldrb.w	r3, [r8]
   81ace:	f108 0401 	add.w	r4, r8, #1
   81ad2:	2b2a      	cmp	r3, #42	; 0x2a
   81ad4:	f000 8305 	beq.w	820e2 <_vfiprintf_r+0xc2a>
   81ad8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   81adc:	2a09      	cmp	r2, #9
   81ade:	bf98      	it	ls
   81ae0:	2500      	movls	r5, #0
   81ae2:	f200 82fa 	bhi.w	820da <_vfiprintf_r+0xc22>
   81ae6:	f814 3b01 	ldrb.w	r3, [r4], #1
   81aea:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   81aee:	eb02 0545 	add.w	r5, r2, r5, lsl #1
   81af2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   81af6:	2a09      	cmp	r2, #9
   81af8:	d9f5      	bls.n	81ae6 <_vfiprintf_r+0x62e>
   81afa:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
   81afe:	46a0      	mov	r8, r4
   81b00:	e549      	b.n	81596 <_vfiprintf_r+0xde>
   81b02:	4c90      	ldr	r4, [pc, #576]	; (81d44 <_vfiprintf_r+0x88c>)
   81b04:	f01a 0f20 	tst.w	sl, #32
   81b08:	9004      	str	r0, [sp, #16]
   81b0a:	46ac      	mov	ip, r5
   81b0c:	940a      	str	r4, [sp, #40]	; 0x28
   81b0e:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   81b12:	f47f af10 	bne.w	81936 <_vfiprintf_r+0x47e>
   81b16:	f01a 0f10 	tst.w	sl, #16
   81b1a:	f040 81ea 	bne.w	81ef2 <_vfiprintf_r+0xa3a>
   81b1e:	f01a 0f40 	tst.w	sl, #64	; 0x40
   81b22:	f000 81e6 	beq.w	81ef2 <_vfiprintf_r+0xa3a>
   81b26:	f8dd b020 	ldr.w	fp, [sp, #32]
   81b2a:	2500      	movs	r5, #0
   81b2c:	f8bb 4000 	ldrh.w	r4, [fp]
   81b30:	f10b 0b04 	add.w	fp, fp, #4
   81b34:	f8cd b020 	str.w	fp, [sp, #32]
   81b38:	e707      	b.n	8194a <_vfiprintf_r+0x492>
   81b3a:	f898 3000 	ldrb.w	r3, [r8]
   81b3e:	2900      	cmp	r1, #0
   81b40:	f47f ad27 	bne.w	81592 <_vfiprintf_r+0xda>
   81b44:	2120      	movs	r1, #32
   81b46:	e524      	b.n	81592 <_vfiprintf_r+0xda>
   81b48:	f04a 0a01 	orr.w	sl, sl, #1
   81b4c:	f898 3000 	ldrb.w	r3, [r8]
   81b50:	e51f      	b.n	81592 <_vfiprintf_r+0xda>
   81b52:	9004      	str	r0, [sp, #16]
   81b54:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   81b58:	2b00      	cmp	r3, #0
   81b5a:	f000 80f9 	beq.w	81d50 <_vfiprintf_r+0x898>
   81b5e:	2501      	movs	r5, #1
   81b60:	f04f 0b00 	mov.w	fp, #0
   81b64:	9503      	str	r5, [sp, #12]
   81b66:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   81b6a:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
   81b6e:	9505      	str	r5, [sp, #20]
   81b70:	af16      	add	r7, sp, #88	; 0x58
   81b72:	e70e      	b.n	81992 <_vfiprintf_r+0x4da>
   81b74:	9806      	ldr	r0, [sp, #24]
   81b76:	9902      	ldr	r1, [sp, #8]
   81b78:	aa13      	add	r2, sp, #76	; 0x4c
   81b7a:	f7ff fc61 	bl	81440 <__sprint_r.part.0>
   81b7e:	2800      	cmp	r0, #0
   81b80:	f040 80ed 	bne.w	81d5e <_vfiprintf_r+0x8a6>
   81b84:	9814      	ldr	r0, [sp, #80]	; 0x50
   81b86:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81b88:	1c43      	adds	r3, r0, #1
   81b8a:	46cc      	mov	ip, r9
   81b8c:	e5fe      	b.n	8178c <_vfiprintf_r+0x2d4>
   81b8e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81b90:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81b92:	1c59      	adds	r1, r3, #1
   81b94:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
   81b98:	b168      	cbz	r0, 81bb6 <_vfiprintf_r+0x6fe>
   81b9a:	3201      	adds	r2, #1
   81b9c:	f10d 0047 	add.w	r0, sp, #71	; 0x47
   81ba0:	2301      	movs	r3, #1
   81ba2:	2907      	cmp	r1, #7
   81ba4:	9215      	str	r2, [sp, #84]	; 0x54
   81ba6:	9114      	str	r1, [sp, #80]	; 0x50
   81ba8:	e886 0009 	stmia.w	r6, {r0, r3}
   81bac:	f300 8160 	bgt.w	81e70 <_vfiprintf_r+0x9b8>
   81bb0:	460b      	mov	r3, r1
   81bb2:	3608      	adds	r6, #8
   81bb4:	3101      	adds	r1, #1
   81bb6:	9c07      	ldr	r4, [sp, #28]
   81bb8:	b164      	cbz	r4, 81bd4 <_vfiprintf_r+0x71c>
   81bba:	3202      	adds	r2, #2
   81bbc:	a812      	add	r0, sp, #72	; 0x48
   81bbe:	2302      	movs	r3, #2
   81bc0:	2907      	cmp	r1, #7
   81bc2:	9215      	str	r2, [sp, #84]	; 0x54
   81bc4:	9114      	str	r1, [sp, #80]	; 0x50
   81bc6:	e886 0009 	stmia.w	r6, {r0, r3}
   81bca:	f300 8157 	bgt.w	81e7c <_vfiprintf_r+0x9c4>
   81bce:	460b      	mov	r3, r1
   81bd0:	3608      	adds	r6, #8
   81bd2:	3101      	adds	r1, #1
   81bd4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   81bd6:	2d80      	cmp	r5, #128	; 0x80
   81bd8:	f000 8101 	beq.w	81dde <_vfiprintf_r+0x926>
   81bdc:	9d05      	ldr	r5, [sp, #20]
   81bde:	ebc5 040c 	rsb	r4, r5, ip
   81be2:	2c00      	cmp	r4, #0
   81be4:	dd2f      	ble.n	81c46 <_vfiprintf_r+0x78e>
   81be6:	2c10      	cmp	r4, #16
   81be8:	4d57      	ldr	r5, [pc, #348]	; (81d48 <_vfiprintf_r+0x890>)
   81bea:	dd22      	ble.n	81c32 <_vfiprintf_r+0x77a>
   81bec:	4630      	mov	r0, r6
   81bee:	f04f 0b10 	mov.w	fp, #16
   81bf2:	462e      	mov	r6, r5
   81bf4:	4625      	mov	r5, r4
   81bf6:	9c06      	ldr	r4, [sp, #24]
   81bf8:	e006      	b.n	81c08 <_vfiprintf_r+0x750>
   81bfa:	f103 0c02 	add.w	ip, r3, #2
   81bfe:	3008      	adds	r0, #8
   81c00:	460b      	mov	r3, r1
   81c02:	3d10      	subs	r5, #16
   81c04:	2d10      	cmp	r5, #16
   81c06:	dd10      	ble.n	81c2a <_vfiprintf_r+0x772>
   81c08:	1c59      	adds	r1, r3, #1
   81c0a:	3210      	adds	r2, #16
   81c0c:	2907      	cmp	r1, #7
   81c0e:	9215      	str	r2, [sp, #84]	; 0x54
   81c10:	e880 0840 	stmia.w	r0, {r6, fp}
   81c14:	9114      	str	r1, [sp, #80]	; 0x50
   81c16:	ddf0      	ble.n	81bfa <_vfiprintf_r+0x742>
   81c18:	2a00      	cmp	r2, #0
   81c1a:	d163      	bne.n	81ce4 <_vfiprintf_r+0x82c>
   81c1c:	3d10      	subs	r5, #16
   81c1e:	2d10      	cmp	r5, #16
   81c20:	f04f 0c01 	mov.w	ip, #1
   81c24:	4613      	mov	r3, r2
   81c26:	4648      	mov	r0, r9
   81c28:	dcee      	bgt.n	81c08 <_vfiprintf_r+0x750>
   81c2a:	462c      	mov	r4, r5
   81c2c:	4661      	mov	r1, ip
   81c2e:	4635      	mov	r5, r6
   81c30:	4606      	mov	r6, r0
   81c32:	4422      	add	r2, r4
   81c34:	2907      	cmp	r1, #7
   81c36:	9215      	str	r2, [sp, #84]	; 0x54
   81c38:	6035      	str	r5, [r6, #0]
   81c3a:	6074      	str	r4, [r6, #4]
   81c3c:	9114      	str	r1, [sp, #80]	; 0x50
   81c3e:	f300 80c1 	bgt.w	81dc4 <_vfiprintf_r+0x90c>
   81c42:	3608      	adds	r6, #8
   81c44:	3101      	adds	r1, #1
   81c46:	9d05      	ldr	r5, [sp, #20]
   81c48:	2907      	cmp	r1, #7
   81c4a:	442a      	add	r2, r5
   81c4c:	9215      	str	r2, [sp, #84]	; 0x54
   81c4e:	6037      	str	r7, [r6, #0]
   81c50:	6075      	str	r5, [r6, #4]
   81c52:	9114      	str	r1, [sp, #80]	; 0x50
   81c54:	f340 80c1 	ble.w	81dda <_vfiprintf_r+0x922>
   81c58:	2a00      	cmp	r2, #0
   81c5a:	f040 8130 	bne.w	81ebe <_vfiprintf_r+0xa06>
   81c5e:	9214      	str	r2, [sp, #80]	; 0x50
   81c60:	464e      	mov	r6, r9
   81c62:	f01a 0f04 	tst.w	sl, #4
   81c66:	f000 808b 	beq.w	81d80 <_vfiprintf_r+0x8c8>
   81c6a:	9d04      	ldr	r5, [sp, #16]
   81c6c:	f8dd b00c 	ldr.w	fp, [sp, #12]
   81c70:	ebcb 0405 	rsb	r4, fp, r5
   81c74:	2c00      	cmp	r4, #0
   81c76:	f340 8083 	ble.w	81d80 <_vfiprintf_r+0x8c8>
   81c7a:	2c10      	cmp	r4, #16
   81c7c:	f340 821e 	ble.w	820bc <_vfiprintf_r+0xc04>
   81c80:	9914      	ldr	r1, [sp, #80]	; 0x50
   81c82:	4d32      	ldr	r5, [pc, #200]	; (81d4c <_vfiprintf_r+0x894>)
   81c84:	2710      	movs	r7, #16
   81c86:	f8dd a018 	ldr.w	sl, [sp, #24]
   81c8a:	f8dd b008 	ldr.w	fp, [sp, #8]
   81c8e:	e005      	b.n	81c9c <_vfiprintf_r+0x7e4>
   81c90:	1c88      	adds	r0, r1, #2
   81c92:	3608      	adds	r6, #8
   81c94:	4619      	mov	r1, r3
   81c96:	3c10      	subs	r4, #16
   81c98:	2c10      	cmp	r4, #16
   81c9a:	dd10      	ble.n	81cbe <_vfiprintf_r+0x806>
   81c9c:	1c4b      	adds	r3, r1, #1
   81c9e:	3210      	adds	r2, #16
   81ca0:	2b07      	cmp	r3, #7
   81ca2:	9215      	str	r2, [sp, #84]	; 0x54
   81ca4:	e886 00a0 	stmia.w	r6, {r5, r7}
   81ca8:	9314      	str	r3, [sp, #80]	; 0x50
   81caa:	ddf1      	ble.n	81c90 <_vfiprintf_r+0x7d8>
   81cac:	2a00      	cmp	r2, #0
   81cae:	d17d      	bne.n	81dac <_vfiprintf_r+0x8f4>
   81cb0:	3c10      	subs	r4, #16
   81cb2:	2c10      	cmp	r4, #16
   81cb4:	f04f 0001 	mov.w	r0, #1
   81cb8:	4611      	mov	r1, r2
   81cba:	464e      	mov	r6, r9
   81cbc:	dcee      	bgt.n	81c9c <_vfiprintf_r+0x7e4>
   81cbe:	4422      	add	r2, r4
   81cc0:	2807      	cmp	r0, #7
   81cc2:	9215      	str	r2, [sp, #84]	; 0x54
   81cc4:	6035      	str	r5, [r6, #0]
   81cc6:	6074      	str	r4, [r6, #4]
   81cc8:	9014      	str	r0, [sp, #80]	; 0x50
   81cca:	dd59      	ble.n	81d80 <_vfiprintf_r+0x8c8>
   81ccc:	2a00      	cmp	r2, #0
   81cce:	d14f      	bne.n	81d70 <_vfiprintf_r+0x8b8>
   81cd0:	9c09      	ldr	r4, [sp, #36]	; 0x24
   81cd2:	f8dd b00c 	ldr.w	fp, [sp, #12]
   81cd6:	9d04      	ldr	r5, [sp, #16]
   81cd8:	45ab      	cmp	fp, r5
   81cda:	bfac      	ite	ge
   81cdc:	445c      	addge	r4, fp
   81cde:	1964      	addlt	r4, r4, r5
   81ce0:	9409      	str	r4, [sp, #36]	; 0x24
   81ce2:	e05e      	b.n	81da2 <_vfiprintf_r+0x8ea>
   81ce4:	4620      	mov	r0, r4
   81ce6:	9902      	ldr	r1, [sp, #8]
   81ce8:	aa13      	add	r2, sp, #76	; 0x4c
   81cea:	f7ff fba9 	bl	81440 <__sprint_r.part.0>
   81cee:	2800      	cmp	r0, #0
   81cf0:	d135      	bne.n	81d5e <_vfiprintf_r+0x8a6>
   81cf2:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81cf4:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81cf6:	f103 0c01 	add.w	ip, r3, #1
   81cfa:	4648      	mov	r0, r9
   81cfc:	e781      	b.n	81c02 <_vfiprintf_r+0x74a>
   81cfe:	08e0      	lsrs	r0, r4, #3
   81d00:	ea40 7045 	orr.w	r0, r0, r5, lsl #29
   81d04:	f004 0207 	and.w	r2, r4, #7
   81d08:	08e9      	lsrs	r1, r5, #3
   81d0a:	3230      	adds	r2, #48	; 0x30
   81d0c:	ea50 0b01 	orrs.w	fp, r0, r1
   81d10:	461f      	mov	r7, r3
   81d12:	701a      	strb	r2, [r3, #0]
   81d14:	4604      	mov	r4, r0
   81d16:	460d      	mov	r5, r1
   81d18:	f103 33ff 	add.w	r3, r3, #4294967295
   81d1c:	d1ef      	bne.n	81cfe <_vfiprintf_r+0x846>
   81d1e:	f01a 0f01 	tst.w	sl, #1
   81d22:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   81d26:	4639      	mov	r1, r7
   81d28:	f000 80b9 	beq.w	81e9e <_vfiprintf_r+0x9e6>
   81d2c:	2a30      	cmp	r2, #48	; 0x30
   81d2e:	f43f acf4 	beq.w	8171a <_vfiprintf_r+0x262>
   81d32:	461f      	mov	r7, r3
   81d34:	ebc7 0509 	rsb	r5, r7, r9
   81d38:	2330      	movs	r3, #48	; 0x30
   81d3a:	9505      	str	r5, [sp, #20]
   81d3c:	f801 3c01 	strb.w	r3, [r1, #-1]
   81d40:	e4ee      	b.n	81720 <_vfiprintf_r+0x268>
   81d42:	bf00      	nop
   81d44:	000840b8 	.word	0x000840b8
   81d48:	000840d4 	.word	0x000840d4
   81d4c:	000840e4 	.word	0x000840e4
   81d50:	9b15      	ldr	r3, [sp, #84]	; 0x54
   81d52:	b123      	cbz	r3, 81d5e <_vfiprintf_r+0x8a6>
   81d54:	9806      	ldr	r0, [sp, #24]
   81d56:	9902      	ldr	r1, [sp, #8]
   81d58:	aa13      	add	r2, sp, #76	; 0x4c
   81d5a:	f7ff fb71 	bl	81440 <__sprint_r.part.0>
   81d5e:	9c02      	ldr	r4, [sp, #8]
   81d60:	89a3      	ldrh	r3, [r4, #12]
   81d62:	065b      	lsls	r3, r3, #25
   81d64:	f53f ac98 	bmi.w	81698 <_vfiprintf_r+0x1e0>
   81d68:	9809      	ldr	r0, [sp, #36]	; 0x24
   81d6a:	b031      	add	sp, #196	; 0xc4
   81d6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81d70:	9806      	ldr	r0, [sp, #24]
   81d72:	9902      	ldr	r1, [sp, #8]
   81d74:	aa13      	add	r2, sp, #76	; 0x4c
   81d76:	f7ff fb63 	bl	81440 <__sprint_r.part.0>
   81d7a:	2800      	cmp	r0, #0
   81d7c:	d1ef      	bne.n	81d5e <_vfiprintf_r+0x8a6>
   81d7e:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81d80:	9c09      	ldr	r4, [sp, #36]	; 0x24
   81d82:	f8dd b00c 	ldr.w	fp, [sp, #12]
   81d86:	9d04      	ldr	r5, [sp, #16]
   81d88:	45ab      	cmp	fp, r5
   81d8a:	bfac      	ite	ge
   81d8c:	445c      	addge	r4, fp
   81d8e:	1964      	addlt	r4, r4, r5
   81d90:	9409      	str	r4, [sp, #36]	; 0x24
   81d92:	b132      	cbz	r2, 81da2 <_vfiprintf_r+0x8ea>
   81d94:	9806      	ldr	r0, [sp, #24]
   81d96:	9902      	ldr	r1, [sp, #8]
   81d98:	aa13      	add	r2, sp, #76	; 0x4c
   81d9a:	f7ff fb51 	bl	81440 <__sprint_r.part.0>
   81d9e:	2800      	cmp	r0, #0
   81da0:	d1dd      	bne.n	81d5e <_vfiprintf_r+0x8a6>
   81da2:	2000      	movs	r0, #0
   81da4:	9014      	str	r0, [sp, #80]	; 0x50
   81da6:	464e      	mov	r6, r9
   81da8:	f7ff bbb9 	b.w	8151e <_vfiprintf_r+0x66>
   81dac:	4650      	mov	r0, sl
   81dae:	4659      	mov	r1, fp
   81db0:	aa13      	add	r2, sp, #76	; 0x4c
   81db2:	f7ff fb45 	bl	81440 <__sprint_r.part.0>
   81db6:	2800      	cmp	r0, #0
   81db8:	d1d1      	bne.n	81d5e <_vfiprintf_r+0x8a6>
   81dba:	9914      	ldr	r1, [sp, #80]	; 0x50
   81dbc:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81dbe:	1c48      	adds	r0, r1, #1
   81dc0:	464e      	mov	r6, r9
   81dc2:	e768      	b.n	81c96 <_vfiprintf_r+0x7de>
   81dc4:	2a00      	cmp	r2, #0
   81dc6:	f040 80f7 	bne.w	81fb8 <_vfiprintf_r+0xb00>
   81dca:	9c05      	ldr	r4, [sp, #20]
   81dcc:	2301      	movs	r3, #1
   81dce:	9720      	str	r7, [sp, #128]	; 0x80
   81dd0:	9421      	str	r4, [sp, #132]	; 0x84
   81dd2:	9415      	str	r4, [sp, #84]	; 0x54
   81dd4:	4622      	mov	r2, r4
   81dd6:	9314      	str	r3, [sp, #80]	; 0x50
   81dd8:	464e      	mov	r6, r9
   81dda:	3608      	adds	r6, #8
   81ddc:	e741      	b.n	81c62 <_vfiprintf_r+0x7aa>
   81dde:	9d04      	ldr	r5, [sp, #16]
   81de0:	f8dd b00c 	ldr.w	fp, [sp, #12]
   81de4:	ebcb 0405 	rsb	r4, fp, r5
   81de8:	2c00      	cmp	r4, #0
   81dea:	f77f aef7 	ble.w	81bdc <_vfiprintf_r+0x724>
   81dee:	2c10      	cmp	r4, #16
   81df0:	4da6      	ldr	r5, [pc, #664]	; (8208c <_vfiprintf_r+0xbd4>)
   81df2:	f340 8170 	ble.w	820d6 <_vfiprintf_r+0xc1e>
   81df6:	4629      	mov	r1, r5
   81df8:	f04f 0b10 	mov.w	fp, #16
   81dfc:	4625      	mov	r5, r4
   81dfe:	4664      	mov	r4, ip
   81e00:	46b4      	mov	ip, r6
   81e02:	460e      	mov	r6, r1
   81e04:	e006      	b.n	81e14 <_vfiprintf_r+0x95c>
   81e06:	1c98      	adds	r0, r3, #2
   81e08:	f10c 0c08 	add.w	ip, ip, #8
   81e0c:	460b      	mov	r3, r1
   81e0e:	3d10      	subs	r5, #16
   81e10:	2d10      	cmp	r5, #16
   81e12:	dd0f      	ble.n	81e34 <_vfiprintf_r+0x97c>
   81e14:	1c59      	adds	r1, r3, #1
   81e16:	3210      	adds	r2, #16
   81e18:	2907      	cmp	r1, #7
   81e1a:	9215      	str	r2, [sp, #84]	; 0x54
   81e1c:	e88c 0840 	stmia.w	ip, {r6, fp}
   81e20:	9114      	str	r1, [sp, #80]	; 0x50
   81e22:	ddf0      	ble.n	81e06 <_vfiprintf_r+0x94e>
   81e24:	b9ba      	cbnz	r2, 81e56 <_vfiprintf_r+0x99e>
   81e26:	3d10      	subs	r5, #16
   81e28:	2d10      	cmp	r5, #16
   81e2a:	f04f 0001 	mov.w	r0, #1
   81e2e:	4613      	mov	r3, r2
   81e30:	46cc      	mov	ip, r9
   81e32:	dcef      	bgt.n	81e14 <_vfiprintf_r+0x95c>
   81e34:	4633      	mov	r3, r6
   81e36:	4666      	mov	r6, ip
   81e38:	46a4      	mov	ip, r4
   81e3a:	462c      	mov	r4, r5
   81e3c:	461d      	mov	r5, r3
   81e3e:	4422      	add	r2, r4
   81e40:	2807      	cmp	r0, #7
   81e42:	9215      	str	r2, [sp, #84]	; 0x54
   81e44:	6035      	str	r5, [r6, #0]
   81e46:	6074      	str	r4, [r6, #4]
   81e48:	9014      	str	r0, [sp, #80]	; 0x50
   81e4a:	f300 80af 	bgt.w	81fac <_vfiprintf_r+0xaf4>
   81e4e:	3608      	adds	r6, #8
   81e50:	1c41      	adds	r1, r0, #1
   81e52:	4603      	mov	r3, r0
   81e54:	e6c2      	b.n	81bdc <_vfiprintf_r+0x724>
   81e56:	9806      	ldr	r0, [sp, #24]
   81e58:	9902      	ldr	r1, [sp, #8]
   81e5a:	aa13      	add	r2, sp, #76	; 0x4c
   81e5c:	f7ff faf0 	bl	81440 <__sprint_r.part.0>
   81e60:	2800      	cmp	r0, #0
   81e62:	f47f af7c 	bne.w	81d5e <_vfiprintf_r+0x8a6>
   81e66:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81e68:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81e6a:	1c58      	adds	r0, r3, #1
   81e6c:	46cc      	mov	ip, r9
   81e6e:	e7ce      	b.n	81e0e <_vfiprintf_r+0x956>
   81e70:	2a00      	cmp	r2, #0
   81e72:	d179      	bne.n	81f68 <_vfiprintf_r+0xab0>
   81e74:	4619      	mov	r1, r3
   81e76:	464e      	mov	r6, r9
   81e78:	4613      	mov	r3, r2
   81e7a:	e69c      	b.n	81bb6 <_vfiprintf_r+0x6fe>
   81e7c:	2a00      	cmp	r2, #0
   81e7e:	f040 8084 	bne.w	81f8a <_vfiprintf_r+0xad2>
   81e82:	2101      	movs	r1, #1
   81e84:	4613      	mov	r3, r2
   81e86:	464e      	mov	r6, r9
   81e88:	e6a4      	b.n	81bd4 <_vfiprintf_r+0x71c>
   81e8a:	464f      	mov	r7, r9
   81e8c:	e448      	b.n	81720 <_vfiprintf_r+0x268>
   81e8e:	2d00      	cmp	r5, #0
   81e90:	bf08      	it	eq
   81e92:	2c0a      	cmpeq	r4, #10
   81e94:	d246      	bcs.n	81f24 <_vfiprintf_r+0xa6c>
   81e96:	3430      	adds	r4, #48	; 0x30
   81e98:	af30      	add	r7, sp, #192	; 0xc0
   81e9a:	f807 4d41 	strb.w	r4, [r7, #-65]!
   81e9e:	ebc7 0309 	rsb	r3, r7, r9
   81ea2:	9305      	str	r3, [sp, #20]
   81ea4:	e43c      	b.n	81720 <_vfiprintf_r+0x268>
   81ea6:	2302      	movs	r3, #2
   81ea8:	e417      	b.n	816da <_vfiprintf_r+0x222>
   81eaa:	2a00      	cmp	r2, #0
   81eac:	f040 80af 	bne.w	8200e <_vfiprintf_r+0xb56>
   81eb0:	4613      	mov	r3, r2
   81eb2:	2101      	movs	r1, #1
   81eb4:	464e      	mov	r6, r9
   81eb6:	e66d      	b.n	81b94 <_vfiprintf_r+0x6dc>
   81eb8:	4644      	mov	r4, r8
   81eba:	f7ff bb58 	b.w	8156e <_vfiprintf_r+0xb6>
   81ebe:	9806      	ldr	r0, [sp, #24]
   81ec0:	9902      	ldr	r1, [sp, #8]
   81ec2:	aa13      	add	r2, sp, #76	; 0x4c
   81ec4:	f7ff fabc 	bl	81440 <__sprint_r.part.0>
   81ec8:	2800      	cmp	r0, #0
   81eca:	f47f af48 	bne.w	81d5e <_vfiprintf_r+0x8a6>
   81ece:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81ed0:	464e      	mov	r6, r9
   81ed2:	e6c6      	b.n	81c62 <_vfiprintf_r+0x7aa>
   81ed4:	9d08      	ldr	r5, [sp, #32]
   81ed6:	682c      	ldr	r4, [r5, #0]
   81ed8:	3504      	adds	r5, #4
   81eda:	9508      	str	r5, [sp, #32]
   81edc:	2500      	movs	r5, #0
   81ede:	f7ff bbfc 	b.w	816da <_vfiprintf_r+0x222>
   81ee2:	9d08      	ldr	r5, [sp, #32]
   81ee4:	2301      	movs	r3, #1
   81ee6:	682c      	ldr	r4, [r5, #0]
   81ee8:	3504      	adds	r5, #4
   81eea:	9508      	str	r5, [sp, #32]
   81eec:	2500      	movs	r5, #0
   81eee:	f7ff bbf4 	b.w	816da <_vfiprintf_r+0x222>
   81ef2:	9d08      	ldr	r5, [sp, #32]
   81ef4:	682c      	ldr	r4, [r5, #0]
   81ef6:	3504      	adds	r5, #4
   81ef8:	9508      	str	r5, [sp, #32]
   81efa:	2500      	movs	r5, #0
   81efc:	e525      	b.n	8194a <_vfiprintf_r+0x492>
   81efe:	9d08      	ldr	r5, [sp, #32]
   81f00:	682c      	ldr	r4, [r5, #0]
   81f02:	3504      	adds	r5, #4
   81f04:	9508      	str	r5, [sp, #32]
   81f06:	17e5      	asrs	r5, r4, #31
   81f08:	4622      	mov	r2, r4
   81f0a:	462b      	mov	r3, r5
   81f0c:	e48e      	b.n	8182c <_vfiprintf_r+0x374>
   81f0e:	9806      	ldr	r0, [sp, #24]
   81f10:	9902      	ldr	r1, [sp, #8]
   81f12:	aa13      	add	r2, sp, #76	; 0x4c
   81f14:	f7ff fa94 	bl	81440 <__sprint_r.part.0>
   81f18:	2800      	cmp	r0, #0
   81f1a:	f47f af20 	bne.w	81d5e <_vfiprintf_r+0x8a6>
   81f1e:	464e      	mov	r6, r9
   81f20:	f7ff bb9a 	b.w	81658 <_vfiprintf_r+0x1a0>
   81f24:	f10d 0b7f 	add.w	fp, sp, #127	; 0x7f
   81f28:	9603      	str	r6, [sp, #12]
   81f2a:	465e      	mov	r6, fp
   81f2c:	46e3      	mov	fp, ip
   81f2e:	4620      	mov	r0, r4
   81f30:	4629      	mov	r1, r5
   81f32:	220a      	movs	r2, #10
   81f34:	2300      	movs	r3, #0
   81f36:	f001 fdb9 	bl	83aac <__aeabi_uldivmod>
   81f3a:	3230      	adds	r2, #48	; 0x30
   81f3c:	7032      	strb	r2, [r6, #0]
   81f3e:	4620      	mov	r0, r4
   81f40:	4629      	mov	r1, r5
   81f42:	220a      	movs	r2, #10
   81f44:	2300      	movs	r3, #0
   81f46:	f001 fdb1 	bl	83aac <__aeabi_uldivmod>
   81f4a:	4604      	mov	r4, r0
   81f4c:	460d      	mov	r5, r1
   81f4e:	ea54 0005 	orrs.w	r0, r4, r5
   81f52:	4637      	mov	r7, r6
   81f54:	f106 36ff 	add.w	r6, r6, #4294967295
   81f58:	d1e9      	bne.n	81f2e <_vfiprintf_r+0xa76>
   81f5a:	ebc7 0309 	rsb	r3, r7, r9
   81f5e:	46dc      	mov	ip, fp
   81f60:	9e03      	ldr	r6, [sp, #12]
   81f62:	9305      	str	r3, [sp, #20]
   81f64:	f7ff bbdc 	b.w	81720 <_vfiprintf_r+0x268>
   81f68:	9806      	ldr	r0, [sp, #24]
   81f6a:	9902      	ldr	r1, [sp, #8]
   81f6c:	aa13      	add	r2, sp, #76	; 0x4c
   81f6e:	f8cd c004 	str.w	ip, [sp, #4]
   81f72:	f7ff fa65 	bl	81440 <__sprint_r.part.0>
   81f76:	f8dd c004 	ldr.w	ip, [sp, #4]
   81f7a:	2800      	cmp	r0, #0
   81f7c:	f47f aeef 	bne.w	81d5e <_vfiprintf_r+0x8a6>
   81f80:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81f82:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81f84:	1c59      	adds	r1, r3, #1
   81f86:	464e      	mov	r6, r9
   81f88:	e615      	b.n	81bb6 <_vfiprintf_r+0x6fe>
   81f8a:	9806      	ldr	r0, [sp, #24]
   81f8c:	9902      	ldr	r1, [sp, #8]
   81f8e:	aa13      	add	r2, sp, #76	; 0x4c
   81f90:	f8cd c004 	str.w	ip, [sp, #4]
   81f94:	f7ff fa54 	bl	81440 <__sprint_r.part.0>
   81f98:	f8dd c004 	ldr.w	ip, [sp, #4]
   81f9c:	2800      	cmp	r0, #0
   81f9e:	f47f aede 	bne.w	81d5e <_vfiprintf_r+0x8a6>
   81fa2:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81fa4:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81fa6:	1c59      	adds	r1, r3, #1
   81fa8:	464e      	mov	r6, r9
   81faa:	e613      	b.n	81bd4 <_vfiprintf_r+0x71c>
   81fac:	2a00      	cmp	r2, #0
   81fae:	d156      	bne.n	8205e <_vfiprintf_r+0xba6>
   81fb0:	2101      	movs	r1, #1
   81fb2:	4613      	mov	r3, r2
   81fb4:	464e      	mov	r6, r9
   81fb6:	e611      	b.n	81bdc <_vfiprintf_r+0x724>
   81fb8:	9806      	ldr	r0, [sp, #24]
   81fba:	9902      	ldr	r1, [sp, #8]
   81fbc:	aa13      	add	r2, sp, #76	; 0x4c
   81fbe:	f7ff fa3f 	bl	81440 <__sprint_r.part.0>
   81fc2:	2800      	cmp	r0, #0
   81fc4:	f47f aecb 	bne.w	81d5e <_vfiprintf_r+0x8a6>
   81fc8:	9914      	ldr	r1, [sp, #80]	; 0x50
   81fca:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81fcc:	3101      	adds	r1, #1
   81fce:	464e      	mov	r6, r9
   81fd0:	e639      	b.n	81c46 <_vfiprintf_r+0x78e>
   81fd2:	f04f 0b2d 	mov.w	fp, #45	; 0x2d
   81fd6:	4264      	negs	r4, r4
   81fd8:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   81fdc:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
   81fe0:	f8cd b01c 	str.w	fp, [sp, #28]
   81fe4:	f8cd c014 	str.w	ip, [sp, #20]
   81fe8:	2301      	movs	r3, #1
   81fea:	f7ff bb7e 	b.w	816ea <_vfiprintf_r+0x232>
   81fee:	f01a 0f10 	tst.w	sl, #16
   81ff2:	d11d      	bne.n	82030 <_vfiprintf_r+0xb78>
   81ff4:	f01a 0f40 	tst.w	sl, #64	; 0x40
   81ff8:	d058      	beq.n	820ac <_vfiprintf_r+0xbf4>
   81ffa:	9d08      	ldr	r5, [sp, #32]
   81ffc:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
   82000:	682b      	ldr	r3, [r5, #0]
   82002:	3504      	adds	r5, #4
   82004:	9508      	str	r5, [sp, #32]
   82006:	f8a3 b000 	strh.w	fp, [r3]
   8200a:	f7ff ba88 	b.w	8151e <_vfiprintf_r+0x66>
   8200e:	9806      	ldr	r0, [sp, #24]
   82010:	9902      	ldr	r1, [sp, #8]
   82012:	aa13      	add	r2, sp, #76	; 0x4c
   82014:	f8cd c004 	str.w	ip, [sp, #4]
   82018:	f7ff fa12 	bl	81440 <__sprint_r.part.0>
   8201c:	f8dd c004 	ldr.w	ip, [sp, #4]
   82020:	2800      	cmp	r0, #0
   82022:	f47f ae9c 	bne.w	81d5e <_vfiprintf_r+0x8a6>
   82026:	9b14      	ldr	r3, [sp, #80]	; 0x50
   82028:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8202a:	1c59      	adds	r1, r3, #1
   8202c:	464e      	mov	r6, r9
   8202e:	e5b1      	b.n	81b94 <_vfiprintf_r+0x6dc>
   82030:	f8dd b020 	ldr.w	fp, [sp, #32]
   82034:	9c09      	ldr	r4, [sp, #36]	; 0x24
   82036:	f8db 3000 	ldr.w	r3, [fp]
   8203a:	f10b 0b04 	add.w	fp, fp, #4
   8203e:	f8cd b020 	str.w	fp, [sp, #32]
   82042:	601c      	str	r4, [r3, #0]
   82044:	f7ff ba6b 	b.w	8151e <_vfiprintf_r+0x66>
   82048:	9408      	str	r4, [sp, #32]
   8204a:	f7ff f9c9 	bl	813e0 <strlen>
   8204e:	f89d 4047 	ldrb.w	r4, [sp, #71]	; 0x47
   82052:	9005      	str	r0, [sp, #20]
   82054:	9407      	str	r4, [sp, #28]
   82056:	f04f 0c00 	mov.w	ip, #0
   8205a:	f7ff bb61 	b.w	81720 <_vfiprintf_r+0x268>
   8205e:	9806      	ldr	r0, [sp, #24]
   82060:	9902      	ldr	r1, [sp, #8]
   82062:	aa13      	add	r2, sp, #76	; 0x4c
   82064:	f8cd c004 	str.w	ip, [sp, #4]
   82068:	f7ff f9ea 	bl	81440 <__sprint_r.part.0>
   8206c:	f8dd c004 	ldr.w	ip, [sp, #4]
   82070:	2800      	cmp	r0, #0
   82072:	f47f ae74 	bne.w	81d5e <_vfiprintf_r+0x8a6>
   82076:	9b14      	ldr	r3, [sp, #80]	; 0x50
   82078:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8207a:	1c59      	adds	r1, r3, #1
   8207c:	464e      	mov	r6, r9
   8207e:	e5ad      	b.n	81bdc <_vfiprintf_r+0x724>
   82080:	9b14      	ldr	r3, [sp, #80]	; 0x50
   82082:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82084:	3301      	adds	r3, #1
   82086:	4d02      	ldr	r5, [pc, #8]	; (82090 <_vfiprintf_r+0xbd8>)
   82088:	f7ff bb9a 	b.w	817c0 <_vfiprintf_r+0x308>
   8208c:	000840d4 	.word	0x000840d4
   82090:	000840e4 	.word	0x000840e4
   82094:	f1bc 0f06 	cmp.w	ip, #6
   82098:	bf34      	ite	cc
   8209a:	4663      	movcc	r3, ip
   8209c:	2306      	movcs	r3, #6
   8209e:	9408      	str	r4, [sp, #32]
   820a0:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
   820a4:	9305      	str	r3, [sp, #20]
   820a6:	9403      	str	r4, [sp, #12]
   820a8:	4f16      	ldr	r7, [pc, #88]	; (82104 <_vfiprintf_r+0xc4c>)
   820aa:	e472      	b.n	81992 <_vfiprintf_r+0x4da>
   820ac:	9c08      	ldr	r4, [sp, #32]
   820ae:	9d09      	ldr	r5, [sp, #36]	; 0x24
   820b0:	6823      	ldr	r3, [r4, #0]
   820b2:	3404      	adds	r4, #4
   820b4:	9408      	str	r4, [sp, #32]
   820b6:	601d      	str	r5, [r3, #0]
   820b8:	f7ff ba31 	b.w	8151e <_vfiprintf_r+0x66>
   820bc:	9814      	ldr	r0, [sp, #80]	; 0x50
   820be:	4d12      	ldr	r5, [pc, #72]	; (82108 <_vfiprintf_r+0xc50>)
   820c0:	3001      	adds	r0, #1
   820c2:	e5fc      	b.n	81cbe <_vfiprintf_r+0x806>
   820c4:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
   820c8:	f8cd c014 	str.w	ip, [sp, #20]
   820cc:	9507      	str	r5, [sp, #28]
   820ce:	9408      	str	r4, [sp, #32]
   820d0:	4684      	mov	ip, r0
   820d2:	f7ff bb25 	b.w	81720 <_vfiprintf_r+0x268>
   820d6:	4608      	mov	r0, r1
   820d8:	e6b1      	b.n	81e3e <_vfiprintf_r+0x986>
   820da:	46a0      	mov	r8, r4
   820dc:	2500      	movs	r5, #0
   820de:	f7ff ba5a 	b.w	81596 <_vfiprintf_r+0xde>
   820e2:	f8dd b020 	ldr.w	fp, [sp, #32]
   820e6:	f898 3001 	ldrb.w	r3, [r8, #1]
   820ea:	f8db 5000 	ldr.w	r5, [fp]
   820ee:	f10b 0204 	add.w	r2, fp, #4
   820f2:	2d00      	cmp	r5, #0
   820f4:	9208      	str	r2, [sp, #32]
   820f6:	46a0      	mov	r8, r4
   820f8:	f6bf aa4b 	bge.w	81592 <_vfiprintf_r+0xda>
   820fc:	f04f 35ff 	mov.w	r5, #4294967295
   82100:	f7ff ba47 	b.w	81592 <_vfiprintf_r+0xda>
   82104:	000840cc 	.word	0x000840cc
   82108:	000840e4 	.word	0x000840e4

0008210c <__sbprintf>:
   8210c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   82110:	6e4f      	ldr	r7, [r1, #100]	; 0x64
   82112:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   82116:	4688      	mov	r8, r1
   82118:	9719      	str	r7, [sp, #100]	; 0x64
   8211a:	f8d8 701c 	ldr.w	r7, [r8, #28]
   8211e:	f8b1 a00c 	ldrh.w	sl, [r1, #12]
   82122:	f8b1 900e 	ldrh.w	r9, [r1, #14]
   82126:	9707      	str	r7, [sp, #28]
   82128:	f8d8 7024 	ldr.w	r7, [r8, #36]	; 0x24
   8212c:	ac1a      	add	r4, sp, #104	; 0x68
   8212e:	f44f 6580 	mov.w	r5, #1024	; 0x400
   82132:	f02a 0a02 	bic.w	sl, sl, #2
   82136:	2600      	movs	r6, #0
   82138:	4669      	mov	r1, sp
   8213a:	9400      	str	r4, [sp, #0]
   8213c:	9404      	str	r4, [sp, #16]
   8213e:	9502      	str	r5, [sp, #8]
   82140:	9505      	str	r5, [sp, #20]
   82142:	f8ad a00c 	strh.w	sl, [sp, #12]
   82146:	f8ad 900e 	strh.w	r9, [sp, #14]
   8214a:	9709      	str	r7, [sp, #36]	; 0x24
   8214c:	9606      	str	r6, [sp, #24]
   8214e:	4605      	mov	r5, r0
   82150:	f7ff f9b2 	bl	814b8 <_vfiprintf_r>
   82154:	1e04      	subs	r4, r0, #0
   82156:	db07      	blt.n	82168 <__sbprintf+0x5c>
   82158:	4628      	mov	r0, r5
   8215a:	4669      	mov	r1, sp
   8215c:	f000 f92a 	bl	823b4 <_fflush_r>
   82160:	42b0      	cmp	r0, r6
   82162:	bf18      	it	ne
   82164:	f04f 34ff 	movne.w	r4, #4294967295
   82168:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   8216c:	065b      	lsls	r3, r3, #25
   8216e:	d505      	bpl.n	8217c <__sbprintf+0x70>
   82170:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   82174:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82178:	f8a8 300c 	strh.w	r3, [r8, #12]
   8217c:	4620      	mov	r0, r4
   8217e:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   82182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   82186:	bf00      	nop

00082188 <__swsetup_r>:
   82188:	4b2f      	ldr	r3, [pc, #188]	; (82248 <__swsetup_r+0xc0>)
   8218a:	b570      	push	{r4, r5, r6, lr}
   8218c:	4606      	mov	r6, r0
   8218e:	6818      	ldr	r0, [r3, #0]
   82190:	460c      	mov	r4, r1
   82192:	b110      	cbz	r0, 8219a <__swsetup_r+0x12>
   82194:	6b82      	ldr	r2, [r0, #56]	; 0x38
   82196:	2a00      	cmp	r2, #0
   82198:	d036      	beq.n	82208 <__swsetup_r+0x80>
   8219a:	89a5      	ldrh	r5, [r4, #12]
   8219c:	b2ab      	uxth	r3, r5
   8219e:	0719      	lsls	r1, r3, #28
   821a0:	d50c      	bpl.n	821bc <__swsetup_r+0x34>
   821a2:	6922      	ldr	r2, [r4, #16]
   821a4:	b1aa      	cbz	r2, 821d2 <__swsetup_r+0x4a>
   821a6:	f013 0101 	ands.w	r1, r3, #1
   821aa:	d01e      	beq.n	821ea <__swsetup_r+0x62>
   821ac:	6963      	ldr	r3, [r4, #20]
   821ae:	2100      	movs	r1, #0
   821b0:	425b      	negs	r3, r3
   821b2:	61a3      	str	r3, [r4, #24]
   821b4:	60a1      	str	r1, [r4, #8]
   821b6:	b1f2      	cbz	r2, 821f6 <__swsetup_r+0x6e>
   821b8:	2000      	movs	r0, #0
   821ba:	bd70      	pop	{r4, r5, r6, pc}
   821bc:	06da      	lsls	r2, r3, #27
   821be:	d53a      	bpl.n	82236 <__swsetup_r+0xae>
   821c0:	075b      	lsls	r3, r3, #29
   821c2:	d424      	bmi.n	8220e <__swsetup_r+0x86>
   821c4:	6922      	ldr	r2, [r4, #16]
   821c6:	f045 0308 	orr.w	r3, r5, #8
   821ca:	81a3      	strh	r3, [r4, #12]
   821cc:	b29b      	uxth	r3, r3
   821ce:	2a00      	cmp	r2, #0
   821d0:	d1e9      	bne.n	821a6 <__swsetup_r+0x1e>
   821d2:	f403 7120 	and.w	r1, r3, #640	; 0x280
   821d6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   821da:	d0e4      	beq.n	821a6 <__swsetup_r+0x1e>
   821dc:	4630      	mov	r0, r6
   821de:	4621      	mov	r1, r4
   821e0:	f000 fcce 	bl	82b80 <__smakebuf_r>
   821e4:	89a3      	ldrh	r3, [r4, #12]
   821e6:	6922      	ldr	r2, [r4, #16]
   821e8:	e7dd      	b.n	821a6 <__swsetup_r+0x1e>
   821ea:	0798      	lsls	r0, r3, #30
   821ec:	bf58      	it	pl
   821ee:	6961      	ldrpl	r1, [r4, #20]
   821f0:	60a1      	str	r1, [r4, #8]
   821f2:	2a00      	cmp	r2, #0
   821f4:	d1e0      	bne.n	821b8 <__swsetup_r+0x30>
   821f6:	89a3      	ldrh	r3, [r4, #12]
   821f8:	061a      	lsls	r2, r3, #24
   821fa:	d5dd      	bpl.n	821b8 <__swsetup_r+0x30>
   821fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82200:	81a3      	strh	r3, [r4, #12]
   82202:	f04f 30ff 	mov.w	r0, #4294967295
   82206:	bd70      	pop	{r4, r5, r6, pc}
   82208:	f000 f8f0 	bl	823ec <__sinit>
   8220c:	e7c5      	b.n	8219a <__swsetup_r+0x12>
   8220e:	6b21      	ldr	r1, [r4, #48]	; 0x30
   82210:	b149      	cbz	r1, 82226 <__swsetup_r+0x9e>
   82212:	f104 0340 	add.w	r3, r4, #64	; 0x40
   82216:	4299      	cmp	r1, r3
   82218:	d003      	beq.n	82222 <__swsetup_r+0x9a>
   8221a:	4630      	mov	r0, r6
   8221c:	f000 fa2a 	bl	82674 <_free_r>
   82220:	89a5      	ldrh	r5, [r4, #12]
   82222:	2300      	movs	r3, #0
   82224:	6323      	str	r3, [r4, #48]	; 0x30
   82226:	6922      	ldr	r2, [r4, #16]
   82228:	f025 0524 	bic.w	r5, r5, #36	; 0x24
   8222c:	2100      	movs	r1, #0
   8222e:	b2ad      	uxth	r5, r5
   82230:	6022      	str	r2, [r4, #0]
   82232:	6061      	str	r1, [r4, #4]
   82234:	e7c7      	b.n	821c6 <__swsetup_r+0x3e>
   82236:	f045 0540 	orr.w	r5, r5, #64	; 0x40
   8223a:	2309      	movs	r3, #9
   8223c:	6033      	str	r3, [r6, #0]
   8223e:	f04f 30ff 	mov.w	r0, #4294967295
   82242:	81a5      	strh	r5, [r4, #12]
   82244:	bd70      	pop	{r4, r5, r6, pc}
   82246:	bf00      	nop
   82248:	20070570 	.word	0x20070570

0008224c <register_fini>:
   8224c:	4b02      	ldr	r3, [pc, #8]	; (82258 <register_fini+0xc>)
   8224e:	b113      	cbz	r3, 82256 <register_fini+0xa>
   82250:	4802      	ldr	r0, [pc, #8]	; (8225c <register_fini+0x10>)
   82252:	f000 b805 	b.w	82260 <atexit>
   82256:	4770      	bx	lr
   82258:	00000000 	.word	0x00000000
   8225c:	000824e9 	.word	0x000824e9

00082260 <atexit>:
   82260:	4601      	mov	r1, r0
   82262:	2000      	movs	r0, #0
   82264:	4602      	mov	r2, r0
   82266:	4603      	mov	r3, r0
   82268:	f001 bb24 	b.w	838b4 <__register_exitproc>

0008226c <__sflush_r>:
   8226c:	898b      	ldrh	r3, [r1, #12]
   8226e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82272:	b29a      	uxth	r2, r3
   82274:	460d      	mov	r5, r1
   82276:	0711      	lsls	r1, r2, #28
   82278:	4680      	mov	r8, r0
   8227a:	d43c      	bmi.n	822f6 <__sflush_r+0x8a>
   8227c:	686a      	ldr	r2, [r5, #4]
   8227e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   82282:	2a00      	cmp	r2, #0
   82284:	81ab      	strh	r3, [r5, #12]
   82286:	dd59      	ble.n	8233c <__sflush_r+0xd0>
   82288:	6aac      	ldr	r4, [r5, #40]	; 0x28
   8228a:	2c00      	cmp	r4, #0
   8228c:	d04b      	beq.n	82326 <__sflush_r+0xba>
   8228e:	b29b      	uxth	r3, r3
   82290:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   82294:	2100      	movs	r1, #0
   82296:	b292      	uxth	r2, r2
   82298:	f8d8 6000 	ldr.w	r6, [r8]
   8229c:	f8c8 1000 	str.w	r1, [r8]
   822a0:	2a00      	cmp	r2, #0
   822a2:	d04f      	beq.n	82344 <__sflush_r+0xd8>
   822a4:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   822a6:	075f      	lsls	r7, r3, #29
   822a8:	d505      	bpl.n	822b6 <__sflush_r+0x4a>
   822aa:	6869      	ldr	r1, [r5, #4]
   822ac:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   822ae:	1a52      	subs	r2, r2, r1
   822b0:	b10b      	cbz	r3, 822b6 <__sflush_r+0x4a>
   822b2:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   822b4:	1ad2      	subs	r2, r2, r3
   822b6:	4640      	mov	r0, r8
   822b8:	69e9      	ldr	r1, [r5, #28]
   822ba:	2300      	movs	r3, #0
   822bc:	47a0      	blx	r4
   822be:	1c44      	adds	r4, r0, #1
   822c0:	d04a      	beq.n	82358 <__sflush_r+0xec>
   822c2:	89ab      	ldrh	r3, [r5, #12]
   822c4:	692a      	ldr	r2, [r5, #16]
   822c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   822ca:	b29b      	uxth	r3, r3
   822cc:	2100      	movs	r1, #0
   822ce:	602a      	str	r2, [r5, #0]
   822d0:	04da      	lsls	r2, r3, #19
   822d2:	81ab      	strh	r3, [r5, #12]
   822d4:	6069      	str	r1, [r5, #4]
   822d6:	d44c      	bmi.n	82372 <__sflush_r+0x106>
   822d8:	6b29      	ldr	r1, [r5, #48]	; 0x30
   822da:	f8c8 6000 	str.w	r6, [r8]
   822de:	b311      	cbz	r1, 82326 <__sflush_r+0xba>
   822e0:	f105 0340 	add.w	r3, r5, #64	; 0x40
   822e4:	4299      	cmp	r1, r3
   822e6:	d002      	beq.n	822ee <__sflush_r+0x82>
   822e8:	4640      	mov	r0, r8
   822ea:	f000 f9c3 	bl	82674 <_free_r>
   822ee:	2000      	movs	r0, #0
   822f0:	6328      	str	r0, [r5, #48]	; 0x30
   822f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   822f6:	692e      	ldr	r6, [r5, #16]
   822f8:	b1ae      	cbz	r6, 82326 <__sflush_r+0xba>
   822fa:	0791      	lsls	r1, r2, #30
   822fc:	682c      	ldr	r4, [r5, #0]
   822fe:	bf0c      	ite	eq
   82300:	696b      	ldreq	r3, [r5, #20]
   82302:	2300      	movne	r3, #0
   82304:	602e      	str	r6, [r5, #0]
   82306:	1ba4      	subs	r4, r4, r6
   82308:	60ab      	str	r3, [r5, #8]
   8230a:	e00a      	b.n	82322 <__sflush_r+0xb6>
   8230c:	4632      	mov	r2, r6
   8230e:	4623      	mov	r3, r4
   82310:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   82312:	4640      	mov	r0, r8
   82314:	69e9      	ldr	r1, [r5, #28]
   82316:	47b8      	blx	r7
   82318:	2800      	cmp	r0, #0
   8231a:	ebc0 0404 	rsb	r4, r0, r4
   8231e:	4406      	add	r6, r0
   82320:	dd04      	ble.n	8232c <__sflush_r+0xc0>
   82322:	2c00      	cmp	r4, #0
   82324:	dcf2      	bgt.n	8230c <__sflush_r+0xa0>
   82326:	2000      	movs	r0, #0
   82328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8232c:	89ab      	ldrh	r3, [r5, #12]
   8232e:	f04f 30ff 	mov.w	r0, #4294967295
   82332:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82336:	81ab      	strh	r3, [r5, #12]
   82338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8233c:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   8233e:	2a00      	cmp	r2, #0
   82340:	dca2      	bgt.n	82288 <__sflush_r+0x1c>
   82342:	e7f0      	b.n	82326 <__sflush_r+0xba>
   82344:	2301      	movs	r3, #1
   82346:	4640      	mov	r0, r8
   82348:	69e9      	ldr	r1, [r5, #28]
   8234a:	47a0      	blx	r4
   8234c:	1c43      	adds	r3, r0, #1
   8234e:	4602      	mov	r2, r0
   82350:	d01e      	beq.n	82390 <__sflush_r+0x124>
   82352:	89ab      	ldrh	r3, [r5, #12]
   82354:	6aac      	ldr	r4, [r5, #40]	; 0x28
   82356:	e7a6      	b.n	822a6 <__sflush_r+0x3a>
   82358:	f8d8 3000 	ldr.w	r3, [r8]
   8235c:	b95b      	cbnz	r3, 82376 <__sflush_r+0x10a>
   8235e:	89aa      	ldrh	r2, [r5, #12]
   82360:	6929      	ldr	r1, [r5, #16]
   82362:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   82366:	b292      	uxth	r2, r2
   82368:	606b      	str	r3, [r5, #4]
   8236a:	04d3      	lsls	r3, r2, #19
   8236c:	81aa      	strh	r2, [r5, #12]
   8236e:	6029      	str	r1, [r5, #0]
   82370:	d5b2      	bpl.n	822d8 <__sflush_r+0x6c>
   82372:	6528      	str	r0, [r5, #80]	; 0x50
   82374:	e7b0      	b.n	822d8 <__sflush_r+0x6c>
   82376:	2b1d      	cmp	r3, #29
   82378:	d001      	beq.n	8237e <__sflush_r+0x112>
   8237a:	2b16      	cmp	r3, #22
   8237c:	d113      	bne.n	823a6 <__sflush_r+0x13a>
   8237e:	89a9      	ldrh	r1, [r5, #12]
   82380:	692b      	ldr	r3, [r5, #16]
   82382:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
   82386:	2200      	movs	r2, #0
   82388:	81a9      	strh	r1, [r5, #12]
   8238a:	602b      	str	r3, [r5, #0]
   8238c:	606a      	str	r2, [r5, #4]
   8238e:	e7a3      	b.n	822d8 <__sflush_r+0x6c>
   82390:	f8d8 3000 	ldr.w	r3, [r8]
   82394:	2b00      	cmp	r3, #0
   82396:	d0dc      	beq.n	82352 <__sflush_r+0xe6>
   82398:	2b1d      	cmp	r3, #29
   8239a:	d001      	beq.n	823a0 <__sflush_r+0x134>
   8239c:	2b16      	cmp	r3, #22
   8239e:	d1c5      	bne.n	8232c <__sflush_r+0xc0>
   823a0:	f8c8 6000 	str.w	r6, [r8]
   823a4:	e7bf      	b.n	82326 <__sflush_r+0xba>
   823a6:	89ab      	ldrh	r3, [r5, #12]
   823a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   823ac:	81ab      	strh	r3, [r5, #12]
   823ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   823b2:	bf00      	nop

000823b4 <_fflush_r>:
   823b4:	b510      	push	{r4, lr}
   823b6:	4604      	mov	r4, r0
   823b8:	b082      	sub	sp, #8
   823ba:	b108      	cbz	r0, 823c0 <_fflush_r+0xc>
   823bc:	6b83      	ldr	r3, [r0, #56]	; 0x38
   823be:	b153      	cbz	r3, 823d6 <_fflush_r+0x22>
   823c0:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   823c4:	b908      	cbnz	r0, 823ca <_fflush_r+0x16>
   823c6:	b002      	add	sp, #8
   823c8:	bd10      	pop	{r4, pc}
   823ca:	4620      	mov	r0, r4
   823cc:	b002      	add	sp, #8
   823ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   823d2:	f7ff bf4b 	b.w	8226c <__sflush_r>
   823d6:	9101      	str	r1, [sp, #4]
   823d8:	f000 f808 	bl	823ec <__sinit>
   823dc:	9901      	ldr	r1, [sp, #4]
   823de:	e7ef      	b.n	823c0 <_fflush_r+0xc>

000823e0 <_cleanup_r>:
   823e0:	4901      	ldr	r1, [pc, #4]	; (823e8 <_cleanup_r+0x8>)
   823e2:	f000 bb9f 	b.w	82b24 <_fwalk>
   823e6:	bf00      	nop
   823e8:	00083a01 	.word	0x00083a01

000823ec <__sinit>:
   823ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   823f0:	6b84      	ldr	r4, [r0, #56]	; 0x38
   823f2:	b083      	sub	sp, #12
   823f4:	4607      	mov	r7, r0
   823f6:	2c00      	cmp	r4, #0
   823f8:	d165      	bne.n	824c6 <__sinit+0xda>
   823fa:	687d      	ldr	r5, [r7, #4]
   823fc:	4833      	ldr	r0, [pc, #204]	; (824cc <__sinit+0xe0>)
   823fe:	2304      	movs	r3, #4
   82400:	2103      	movs	r1, #3
   82402:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   82406:	63f8      	str	r0, [r7, #60]	; 0x3c
   82408:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   8240c:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   82410:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   82414:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   82418:	81ab      	strh	r3, [r5, #12]
   8241a:	602c      	str	r4, [r5, #0]
   8241c:	606c      	str	r4, [r5, #4]
   8241e:	60ac      	str	r4, [r5, #8]
   82420:	666c      	str	r4, [r5, #100]	; 0x64
   82422:	81ec      	strh	r4, [r5, #14]
   82424:	612c      	str	r4, [r5, #16]
   82426:	616c      	str	r4, [r5, #20]
   82428:	61ac      	str	r4, [r5, #24]
   8242a:	4621      	mov	r1, r4
   8242c:	2208      	movs	r2, #8
   8242e:	f7fe ff05 	bl	8123c <memset>
   82432:	f8df b09c 	ldr.w	fp, [pc, #156]	; 824d0 <__sinit+0xe4>
   82436:	68be      	ldr	r6, [r7, #8]
   82438:	f8df a098 	ldr.w	sl, [pc, #152]	; 824d4 <__sinit+0xe8>
   8243c:	f8df 9098 	ldr.w	r9, [pc, #152]	; 824d8 <__sinit+0xec>
   82440:	f8df 8098 	ldr.w	r8, [pc, #152]	; 824dc <__sinit+0xf0>
   82444:	2301      	movs	r3, #1
   82446:	2209      	movs	r2, #9
   82448:	61ed      	str	r5, [r5, #28]
   8244a:	f8c5 b020 	str.w	fp, [r5, #32]
   8244e:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   82452:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   82456:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   8245a:	4621      	mov	r1, r4
   8245c:	81f3      	strh	r3, [r6, #14]
   8245e:	81b2      	strh	r2, [r6, #12]
   82460:	6034      	str	r4, [r6, #0]
   82462:	6074      	str	r4, [r6, #4]
   82464:	60b4      	str	r4, [r6, #8]
   82466:	6674      	str	r4, [r6, #100]	; 0x64
   82468:	6134      	str	r4, [r6, #16]
   8246a:	6174      	str	r4, [r6, #20]
   8246c:	61b4      	str	r4, [r6, #24]
   8246e:	2208      	movs	r2, #8
   82470:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   82474:	9301      	str	r3, [sp, #4]
   82476:	f7fe fee1 	bl	8123c <memset>
   8247a:	68fd      	ldr	r5, [r7, #12]
   8247c:	2012      	movs	r0, #18
   8247e:	2202      	movs	r2, #2
   82480:	61f6      	str	r6, [r6, #28]
   82482:	f8c6 b020 	str.w	fp, [r6, #32]
   82486:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   8248a:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   8248e:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   82492:	4621      	mov	r1, r4
   82494:	81a8      	strh	r0, [r5, #12]
   82496:	81ea      	strh	r2, [r5, #14]
   82498:	602c      	str	r4, [r5, #0]
   8249a:	606c      	str	r4, [r5, #4]
   8249c:	60ac      	str	r4, [r5, #8]
   8249e:	666c      	str	r4, [r5, #100]	; 0x64
   824a0:	612c      	str	r4, [r5, #16]
   824a2:	616c      	str	r4, [r5, #20]
   824a4:	61ac      	str	r4, [r5, #24]
   824a6:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   824aa:	2208      	movs	r2, #8
   824ac:	f7fe fec6 	bl	8123c <memset>
   824b0:	9b01      	ldr	r3, [sp, #4]
   824b2:	61ed      	str	r5, [r5, #28]
   824b4:	f8c5 b020 	str.w	fp, [r5, #32]
   824b8:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   824bc:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   824c0:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   824c4:	63bb      	str	r3, [r7, #56]	; 0x38
   824c6:	b003      	add	sp, #12
   824c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   824cc:	000823e1 	.word	0x000823e1
   824d0:	000836f5 	.word	0x000836f5
   824d4:	00083719 	.word	0x00083719
   824d8:	00083751 	.word	0x00083751
   824dc:	00083771 	.word	0x00083771

000824e0 <__sfp_lock_acquire>:
   824e0:	4770      	bx	lr
   824e2:	bf00      	nop

000824e4 <__sfp_lock_release>:
   824e4:	4770      	bx	lr
   824e6:	bf00      	nop

000824e8 <__libc_fini_array>:
   824e8:	b538      	push	{r3, r4, r5, lr}
   824ea:	4d09      	ldr	r5, [pc, #36]	; (82510 <__libc_fini_array+0x28>)
   824ec:	4c09      	ldr	r4, [pc, #36]	; (82514 <__libc_fini_array+0x2c>)
   824ee:	1b64      	subs	r4, r4, r5
   824f0:	10a4      	asrs	r4, r4, #2
   824f2:	bf18      	it	ne
   824f4:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
   824f8:	d005      	beq.n	82506 <__libc_fini_array+0x1e>
   824fa:	3c01      	subs	r4, #1
   824fc:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   82500:	4798      	blx	r3
   82502:	2c00      	cmp	r4, #0
   82504:	d1f9      	bne.n	824fa <__libc_fini_array+0x12>
   82506:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8250a:	f001 bdfd 	b.w	84108 <_fini>
   8250e:	bf00      	nop
   82510:	00084114 	.word	0x00084114
   82514:	00084118 	.word	0x00084118

00082518 <_fputwc_r>:
   82518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8251c:	8993      	ldrh	r3, [r2, #12]
   8251e:	460f      	mov	r7, r1
   82520:	0499      	lsls	r1, r3, #18
   82522:	b082      	sub	sp, #8
   82524:	4614      	mov	r4, r2
   82526:	4680      	mov	r8, r0
   82528:	d406      	bmi.n	82538 <_fputwc_r+0x20>
   8252a:	6e52      	ldr	r2, [r2, #100]	; 0x64
   8252c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   82530:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   82534:	81a3      	strh	r3, [r4, #12]
   82536:	6662      	str	r2, [r4, #100]	; 0x64
   82538:	f000 fb1c 	bl	82b74 <__locale_mb_cur_max>
   8253c:	2801      	cmp	r0, #1
   8253e:	d03e      	beq.n	825be <_fputwc_r+0xa6>
   82540:	463a      	mov	r2, r7
   82542:	4640      	mov	r0, r8
   82544:	a901      	add	r1, sp, #4
   82546:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   8254a:	f001 f969 	bl	83820 <_wcrtomb_r>
   8254e:	1c42      	adds	r2, r0, #1
   82550:	4606      	mov	r6, r0
   82552:	d02d      	beq.n	825b0 <_fputwc_r+0x98>
   82554:	2800      	cmp	r0, #0
   82556:	d03a      	beq.n	825ce <_fputwc_r+0xb6>
   82558:	f89d 1004 	ldrb.w	r1, [sp, #4]
   8255c:	2500      	movs	r5, #0
   8255e:	e009      	b.n	82574 <_fputwc_r+0x5c>
   82560:	6823      	ldr	r3, [r4, #0]
   82562:	7019      	strb	r1, [r3, #0]
   82564:	6823      	ldr	r3, [r4, #0]
   82566:	3301      	adds	r3, #1
   82568:	6023      	str	r3, [r4, #0]
   8256a:	3501      	adds	r5, #1
   8256c:	42b5      	cmp	r5, r6
   8256e:	d22e      	bcs.n	825ce <_fputwc_r+0xb6>
   82570:	ab01      	add	r3, sp, #4
   82572:	5ce9      	ldrb	r1, [r5, r3]
   82574:	68a3      	ldr	r3, [r4, #8]
   82576:	3b01      	subs	r3, #1
   82578:	2b00      	cmp	r3, #0
   8257a:	60a3      	str	r3, [r4, #8]
   8257c:	daf0      	bge.n	82560 <_fputwc_r+0x48>
   8257e:	69a2      	ldr	r2, [r4, #24]
   82580:	4293      	cmp	r3, r2
   82582:	db06      	blt.n	82592 <_fputwc_r+0x7a>
   82584:	6823      	ldr	r3, [r4, #0]
   82586:	7019      	strb	r1, [r3, #0]
   82588:	6823      	ldr	r3, [r4, #0]
   8258a:	7819      	ldrb	r1, [r3, #0]
   8258c:	3301      	adds	r3, #1
   8258e:	290a      	cmp	r1, #10
   82590:	d1ea      	bne.n	82568 <_fputwc_r+0x50>
   82592:	4640      	mov	r0, r8
   82594:	4622      	mov	r2, r4
   82596:	f001 f8ef 	bl	83778 <__swbuf_r>
   8259a:	f1b0 33ff 	subs.w	r3, r0, #4294967295
   8259e:	4258      	negs	r0, r3
   825a0:	4158      	adcs	r0, r3
   825a2:	2800      	cmp	r0, #0
   825a4:	d0e1      	beq.n	8256a <_fputwc_r+0x52>
   825a6:	f04f 30ff 	mov.w	r0, #4294967295
   825aa:	b002      	add	sp, #8
   825ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   825b0:	89a3      	ldrh	r3, [r4, #12]
   825b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   825b6:	81a3      	strh	r3, [r4, #12]
   825b8:	b002      	add	sp, #8
   825ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   825be:	1e7b      	subs	r3, r7, #1
   825c0:	2bfe      	cmp	r3, #254	; 0xfe
   825c2:	d8bd      	bhi.n	82540 <_fputwc_r+0x28>
   825c4:	b2f9      	uxtb	r1, r7
   825c6:	4606      	mov	r6, r0
   825c8:	f88d 1004 	strb.w	r1, [sp, #4]
   825cc:	e7c6      	b.n	8255c <_fputwc_r+0x44>
   825ce:	4638      	mov	r0, r7
   825d0:	b002      	add	sp, #8
   825d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   825d6:	bf00      	nop

000825d8 <_malloc_trim_r>:
   825d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   825da:	4d23      	ldr	r5, [pc, #140]	; (82668 <_malloc_trim_r+0x90>)
   825dc:	460f      	mov	r7, r1
   825de:	4604      	mov	r4, r0
   825e0:	f000 fe92 	bl	83308 <__malloc_lock>
   825e4:	68ab      	ldr	r3, [r5, #8]
   825e6:	685e      	ldr	r6, [r3, #4]
   825e8:	f026 0603 	bic.w	r6, r6, #3
   825ec:	1bf1      	subs	r1, r6, r7
   825ee:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   825f2:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   825f6:	f021 010f 	bic.w	r1, r1, #15
   825fa:	f5a1 5780 	sub.w	r7, r1, #4096	; 0x1000
   825fe:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
   82602:	db07      	blt.n	82614 <_malloc_trim_r+0x3c>
   82604:	4620      	mov	r0, r4
   82606:	2100      	movs	r1, #0
   82608:	f001 f862 	bl	836d0 <_sbrk_r>
   8260c:	68ab      	ldr	r3, [r5, #8]
   8260e:	4433      	add	r3, r6
   82610:	4298      	cmp	r0, r3
   82612:	d004      	beq.n	8261e <_malloc_trim_r+0x46>
   82614:	4620      	mov	r0, r4
   82616:	f000 fe79 	bl	8330c <__malloc_unlock>
   8261a:	2000      	movs	r0, #0
   8261c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8261e:	4620      	mov	r0, r4
   82620:	4279      	negs	r1, r7
   82622:	f001 f855 	bl	836d0 <_sbrk_r>
   82626:	3001      	adds	r0, #1
   82628:	d00d      	beq.n	82646 <_malloc_trim_r+0x6e>
   8262a:	4b10      	ldr	r3, [pc, #64]	; (8266c <_malloc_trim_r+0x94>)
   8262c:	68aa      	ldr	r2, [r5, #8]
   8262e:	6819      	ldr	r1, [r3, #0]
   82630:	1bf6      	subs	r6, r6, r7
   82632:	f046 0601 	orr.w	r6, r6, #1
   82636:	4620      	mov	r0, r4
   82638:	1bc9      	subs	r1, r1, r7
   8263a:	6056      	str	r6, [r2, #4]
   8263c:	6019      	str	r1, [r3, #0]
   8263e:	f000 fe65 	bl	8330c <__malloc_unlock>
   82642:	2001      	movs	r0, #1
   82644:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82646:	4620      	mov	r0, r4
   82648:	2100      	movs	r1, #0
   8264a:	f001 f841 	bl	836d0 <_sbrk_r>
   8264e:	68ab      	ldr	r3, [r5, #8]
   82650:	1ac2      	subs	r2, r0, r3
   82652:	2a0f      	cmp	r2, #15
   82654:	ddde      	ble.n	82614 <_malloc_trim_r+0x3c>
   82656:	4d06      	ldr	r5, [pc, #24]	; (82670 <_malloc_trim_r+0x98>)
   82658:	4904      	ldr	r1, [pc, #16]	; (8266c <_malloc_trim_r+0x94>)
   8265a:	682d      	ldr	r5, [r5, #0]
   8265c:	f042 0201 	orr.w	r2, r2, #1
   82660:	1b40      	subs	r0, r0, r5
   82662:	605a      	str	r2, [r3, #4]
   82664:	6008      	str	r0, [r1, #0]
   82666:	e7d5      	b.n	82614 <_malloc_trim_r+0x3c>
   82668:	20070598 	.word	0x20070598
   8266c:	20070b74 	.word	0x20070b74
   82670:	200709a4 	.word	0x200709a4

00082674 <_free_r>:
   82674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82678:	460d      	mov	r5, r1
   8267a:	4606      	mov	r6, r0
   8267c:	2900      	cmp	r1, #0
   8267e:	d055      	beq.n	8272c <_free_r+0xb8>
   82680:	f000 fe42 	bl	83308 <__malloc_lock>
   82684:	f855 1c04 	ldr.w	r1, [r5, #-4]
   82688:	f8df c170 	ldr.w	ip, [pc, #368]	; 827fc <_free_r+0x188>
   8268c:	f1a5 0408 	sub.w	r4, r5, #8
   82690:	f021 0301 	bic.w	r3, r1, #1
   82694:	18e2      	adds	r2, r4, r3
   82696:	f8dc 0008 	ldr.w	r0, [ip, #8]
   8269a:	6857      	ldr	r7, [r2, #4]
   8269c:	4290      	cmp	r0, r2
   8269e:	f027 0703 	bic.w	r7, r7, #3
   826a2:	d068      	beq.n	82776 <_free_r+0x102>
   826a4:	f011 0101 	ands.w	r1, r1, #1
   826a8:	6057      	str	r7, [r2, #4]
   826aa:	d032      	beq.n	82712 <_free_r+0x9e>
   826ac:	2100      	movs	r1, #0
   826ae:	19d0      	adds	r0, r2, r7
   826b0:	6840      	ldr	r0, [r0, #4]
   826b2:	07c0      	lsls	r0, r0, #31
   826b4:	d406      	bmi.n	826c4 <_free_r+0x50>
   826b6:	443b      	add	r3, r7
   826b8:	6890      	ldr	r0, [r2, #8]
   826ba:	2900      	cmp	r1, #0
   826bc:	d04d      	beq.n	8275a <_free_r+0xe6>
   826be:	68d2      	ldr	r2, [r2, #12]
   826c0:	60c2      	str	r2, [r0, #12]
   826c2:	6090      	str	r0, [r2, #8]
   826c4:	f043 0201 	orr.w	r2, r3, #1
   826c8:	6062      	str	r2, [r4, #4]
   826ca:	50e3      	str	r3, [r4, r3]
   826cc:	b9e1      	cbnz	r1, 82708 <_free_r+0x94>
   826ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   826d2:	d32d      	bcc.n	82730 <_free_r+0xbc>
   826d4:	0a5a      	lsrs	r2, r3, #9
   826d6:	2a04      	cmp	r2, #4
   826d8:	d869      	bhi.n	827ae <_free_r+0x13a>
   826da:	0998      	lsrs	r0, r3, #6
   826dc:	3038      	adds	r0, #56	; 0x38
   826de:	0041      	lsls	r1, r0, #1
   826e0:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
   826e4:	f8dc 2008 	ldr.w	r2, [ip, #8]
   826e8:	4944      	ldr	r1, [pc, #272]	; (827fc <_free_r+0x188>)
   826ea:	4562      	cmp	r2, ip
   826ec:	d065      	beq.n	827ba <_free_r+0x146>
   826ee:	6851      	ldr	r1, [r2, #4]
   826f0:	f021 0103 	bic.w	r1, r1, #3
   826f4:	428b      	cmp	r3, r1
   826f6:	d202      	bcs.n	826fe <_free_r+0x8a>
   826f8:	6892      	ldr	r2, [r2, #8]
   826fa:	4594      	cmp	ip, r2
   826fc:	d1f7      	bne.n	826ee <_free_r+0x7a>
   826fe:	68d3      	ldr	r3, [r2, #12]
   82700:	60e3      	str	r3, [r4, #12]
   82702:	60a2      	str	r2, [r4, #8]
   82704:	609c      	str	r4, [r3, #8]
   82706:	60d4      	str	r4, [r2, #12]
   82708:	4630      	mov	r0, r6
   8270a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8270e:	f000 bdfd 	b.w	8330c <__malloc_unlock>
   82712:	f855 5c08 	ldr.w	r5, [r5, #-8]
   82716:	f10c 0808 	add.w	r8, ip, #8
   8271a:	1b64      	subs	r4, r4, r5
   8271c:	68a0      	ldr	r0, [r4, #8]
   8271e:	442b      	add	r3, r5
   82720:	4540      	cmp	r0, r8
   82722:	d042      	beq.n	827aa <_free_r+0x136>
   82724:	68e5      	ldr	r5, [r4, #12]
   82726:	60c5      	str	r5, [r0, #12]
   82728:	60a8      	str	r0, [r5, #8]
   8272a:	e7c0      	b.n	826ae <_free_r+0x3a>
   8272c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82730:	08db      	lsrs	r3, r3, #3
   82732:	109a      	asrs	r2, r3, #2
   82734:	2001      	movs	r0, #1
   82736:	4090      	lsls	r0, r2
   82738:	f8dc 1004 	ldr.w	r1, [ip, #4]
   8273c:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
   82740:	689a      	ldr	r2, [r3, #8]
   82742:	4301      	orrs	r1, r0
   82744:	60a2      	str	r2, [r4, #8]
   82746:	60e3      	str	r3, [r4, #12]
   82748:	f8cc 1004 	str.w	r1, [ip, #4]
   8274c:	4630      	mov	r0, r6
   8274e:	609c      	str	r4, [r3, #8]
   82750:	60d4      	str	r4, [r2, #12]
   82752:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   82756:	f000 bdd9 	b.w	8330c <__malloc_unlock>
   8275a:	4d29      	ldr	r5, [pc, #164]	; (82800 <_free_r+0x18c>)
   8275c:	42a8      	cmp	r0, r5
   8275e:	d1ae      	bne.n	826be <_free_r+0x4a>
   82760:	f043 0201 	orr.w	r2, r3, #1
   82764:	f8cc 4014 	str.w	r4, [ip, #20]
   82768:	f8cc 4010 	str.w	r4, [ip, #16]
   8276c:	60e0      	str	r0, [r4, #12]
   8276e:	60a0      	str	r0, [r4, #8]
   82770:	6062      	str	r2, [r4, #4]
   82772:	50e3      	str	r3, [r4, r3]
   82774:	e7c8      	b.n	82708 <_free_r+0x94>
   82776:	441f      	add	r7, r3
   82778:	07cb      	lsls	r3, r1, #31
   8277a:	d407      	bmi.n	8278c <_free_r+0x118>
   8277c:	f855 1c08 	ldr.w	r1, [r5, #-8]
   82780:	1a64      	subs	r4, r4, r1
   82782:	68e3      	ldr	r3, [r4, #12]
   82784:	68a2      	ldr	r2, [r4, #8]
   82786:	440f      	add	r7, r1
   82788:	60d3      	str	r3, [r2, #12]
   8278a:	609a      	str	r2, [r3, #8]
   8278c:	4b1d      	ldr	r3, [pc, #116]	; (82804 <_free_r+0x190>)
   8278e:	f047 0201 	orr.w	r2, r7, #1
   82792:	681b      	ldr	r3, [r3, #0]
   82794:	6062      	str	r2, [r4, #4]
   82796:	429f      	cmp	r7, r3
   82798:	f8cc 4008 	str.w	r4, [ip, #8]
   8279c:	d3b4      	bcc.n	82708 <_free_r+0x94>
   8279e:	4b1a      	ldr	r3, [pc, #104]	; (82808 <_free_r+0x194>)
   827a0:	4630      	mov	r0, r6
   827a2:	6819      	ldr	r1, [r3, #0]
   827a4:	f7ff ff18 	bl	825d8 <_malloc_trim_r>
   827a8:	e7ae      	b.n	82708 <_free_r+0x94>
   827aa:	2101      	movs	r1, #1
   827ac:	e77f      	b.n	826ae <_free_r+0x3a>
   827ae:	2a14      	cmp	r2, #20
   827b0:	d80b      	bhi.n	827ca <_free_r+0x156>
   827b2:	f102 005b 	add.w	r0, r2, #91	; 0x5b
   827b6:	0041      	lsls	r1, r0, #1
   827b8:	e792      	b.n	826e0 <_free_r+0x6c>
   827ba:	1080      	asrs	r0, r0, #2
   827bc:	2501      	movs	r5, #1
   827be:	4085      	lsls	r5, r0
   827c0:	6848      	ldr	r0, [r1, #4]
   827c2:	4613      	mov	r3, r2
   827c4:	4328      	orrs	r0, r5
   827c6:	6048      	str	r0, [r1, #4]
   827c8:	e79a      	b.n	82700 <_free_r+0x8c>
   827ca:	2a54      	cmp	r2, #84	; 0x54
   827cc:	d803      	bhi.n	827d6 <_free_r+0x162>
   827ce:	0b18      	lsrs	r0, r3, #12
   827d0:	306e      	adds	r0, #110	; 0x6e
   827d2:	0041      	lsls	r1, r0, #1
   827d4:	e784      	b.n	826e0 <_free_r+0x6c>
   827d6:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   827da:	d803      	bhi.n	827e4 <_free_r+0x170>
   827dc:	0bd8      	lsrs	r0, r3, #15
   827de:	3077      	adds	r0, #119	; 0x77
   827e0:	0041      	lsls	r1, r0, #1
   827e2:	e77d      	b.n	826e0 <_free_r+0x6c>
   827e4:	f240 5154 	movw	r1, #1364	; 0x554
   827e8:	428a      	cmp	r2, r1
   827ea:	d803      	bhi.n	827f4 <_free_r+0x180>
   827ec:	0c98      	lsrs	r0, r3, #18
   827ee:	307c      	adds	r0, #124	; 0x7c
   827f0:	0041      	lsls	r1, r0, #1
   827f2:	e775      	b.n	826e0 <_free_r+0x6c>
   827f4:	21fc      	movs	r1, #252	; 0xfc
   827f6:	207e      	movs	r0, #126	; 0x7e
   827f8:	e772      	b.n	826e0 <_free_r+0x6c>
   827fa:	bf00      	nop
   827fc:	20070598 	.word	0x20070598
   82800:	200705a0 	.word	0x200705a0
   82804:	200709a0 	.word	0x200709a0
   82808:	20070b70 	.word	0x20070b70

0008280c <__sfvwrite_r>:
   8280c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82810:	6893      	ldr	r3, [r2, #8]
   82812:	b083      	sub	sp, #12
   82814:	4616      	mov	r6, r2
   82816:	4681      	mov	r9, r0
   82818:	460c      	mov	r4, r1
   8281a:	b32b      	cbz	r3, 82868 <__sfvwrite_r+0x5c>
   8281c:	898b      	ldrh	r3, [r1, #12]
   8281e:	0719      	lsls	r1, r3, #28
   82820:	d526      	bpl.n	82870 <__sfvwrite_r+0x64>
   82822:	6922      	ldr	r2, [r4, #16]
   82824:	b322      	cbz	r2, 82870 <__sfvwrite_r+0x64>
   82826:	f003 0202 	and.w	r2, r3, #2
   8282a:	b292      	uxth	r2, r2
   8282c:	6835      	ldr	r5, [r6, #0]
   8282e:	2a00      	cmp	r2, #0
   82830:	d02c      	beq.n	8288c <__sfvwrite_r+0x80>
   82832:	f04f 0a00 	mov.w	sl, #0
   82836:	f8df b2e8 	ldr.w	fp, [pc, #744]	; 82b20 <__sfvwrite_r+0x314>
   8283a:	46d0      	mov	r8, sl
   8283c:	45d8      	cmp	r8, fp
   8283e:	bf34      	ite	cc
   82840:	4643      	movcc	r3, r8
   82842:	465b      	movcs	r3, fp
   82844:	4652      	mov	r2, sl
   82846:	4648      	mov	r0, r9
   82848:	f1b8 0f00 	cmp.w	r8, #0
   8284c:	d04f      	beq.n	828ee <__sfvwrite_r+0xe2>
   8284e:	69e1      	ldr	r1, [r4, #28]
   82850:	6a67      	ldr	r7, [r4, #36]	; 0x24
   82852:	47b8      	blx	r7
   82854:	2800      	cmp	r0, #0
   82856:	dd56      	ble.n	82906 <__sfvwrite_r+0xfa>
   82858:	68b3      	ldr	r3, [r6, #8]
   8285a:	4482      	add	sl, r0
   8285c:	1a1b      	subs	r3, r3, r0
   8285e:	ebc0 0808 	rsb	r8, r0, r8
   82862:	60b3      	str	r3, [r6, #8]
   82864:	2b00      	cmp	r3, #0
   82866:	d1e9      	bne.n	8283c <__sfvwrite_r+0x30>
   82868:	2000      	movs	r0, #0
   8286a:	b003      	add	sp, #12
   8286c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82870:	4648      	mov	r0, r9
   82872:	4621      	mov	r1, r4
   82874:	f7ff fc88 	bl	82188 <__swsetup_r>
   82878:	2800      	cmp	r0, #0
   8287a:	f040 8148 	bne.w	82b0e <__sfvwrite_r+0x302>
   8287e:	89a3      	ldrh	r3, [r4, #12]
   82880:	6835      	ldr	r5, [r6, #0]
   82882:	f003 0202 	and.w	r2, r3, #2
   82886:	b292      	uxth	r2, r2
   82888:	2a00      	cmp	r2, #0
   8288a:	d1d2      	bne.n	82832 <__sfvwrite_r+0x26>
   8288c:	f013 0a01 	ands.w	sl, r3, #1
   82890:	d142      	bne.n	82918 <__sfvwrite_r+0x10c>
   82892:	46d0      	mov	r8, sl
   82894:	f1b8 0f00 	cmp.w	r8, #0
   82898:	d023      	beq.n	828e2 <__sfvwrite_r+0xd6>
   8289a:	059a      	lsls	r2, r3, #22
   8289c:	68a7      	ldr	r7, [r4, #8]
   8289e:	d576      	bpl.n	8298e <__sfvwrite_r+0x182>
   828a0:	45b8      	cmp	r8, r7
   828a2:	f0c0 80a4 	bcc.w	829ee <__sfvwrite_r+0x1e2>
   828a6:	f413 6f90 	tst.w	r3, #1152	; 0x480
   828aa:	f040 80b2 	bne.w	82a12 <__sfvwrite_r+0x206>
   828ae:	6820      	ldr	r0, [r4, #0]
   828b0:	46bb      	mov	fp, r7
   828b2:	4651      	mov	r1, sl
   828b4:	465a      	mov	r2, fp
   828b6:	f000 fcc1 	bl	8323c <memmove>
   828ba:	68a2      	ldr	r2, [r4, #8]
   828bc:	6821      	ldr	r1, [r4, #0]
   828be:	1bd2      	subs	r2, r2, r7
   828c0:	eb01 030b 	add.w	r3, r1, fp
   828c4:	60a2      	str	r2, [r4, #8]
   828c6:	6023      	str	r3, [r4, #0]
   828c8:	4642      	mov	r2, r8
   828ca:	68b3      	ldr	r3, [r6, #8]
   828cc:	4492      	add	sl, r2
   828ce:	1a9b      	subs	r3, r3, r2
   828d0:	ebc2 0808 	rsb	r8, r2, r8
   828d4:	60b3      	str	r3, [r6, #8]
   828d6:	2b00      	cmp	r3, #0
   828d8:	d0c6      	beq.n	82868 <__sfvwrite_r+0x5c>
   828da:	89a3      	ldrh	r3, [r4, #12]
   828dc:	f1b8 0f00 	cmp.w	r8, #0
   828e0:	d1db      	bne.n	8289a <__sfvwrite_r+0x8e>
   828e2:	f8d5 a000 	ldr.w	sl, [r5]
   828e6:	f8d5 8004 	ldr.w	r8, [r5, #4]
   828ea:	3508      	adds	r5, #8
   828ec:	e7d2      	b.n	82894 <__sfvwrite_r+0x88>
   828ee:	f8d5 a000 	ldr.w	sl, [r5]
   828f2:	f8d5 8004 	ldr.w	r8, [r5, #4]
   828f6:	3508      	adds	r5, #8
   828f8:	e7a0      	b.n	8283c <__sfvwrite_r+0x30>
   828fa:	4648      	mov	r0, r9
   828fc:	4621      	mov	r1, r4
   828fe:	f7ff fd59 	bl	823b4 <_fflush_r>
   82902:	2800      	cmp	r0, #0
   82904:	d059      	beq.n	829ba <__sfvwrite_r+0x1ae>
   82906:	89a3      	ldrh	r3, [r4, #12]
   82908:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8290c:	f04f 30ff 	mov.w	r0, #4294967295
   82910:	81a3      	strh	r3, [r4, #12]
   82912:	b003      	add	sp, #12
   82914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82918:	4692      	mov	sl, r2
   8291a:	9201      	str	r2, [sp, #4]
   8291c:	4693      	mov	fp, r2
   8291e:	4690      	mov	r8, r2
   82920:	f1b8 0f00 	cmp.w	r8, #0
   82924:	d02b      	beq.n	8297e <__sfvwrite_r+0x172>
   82926:	9f01      	ldr	r7, [sp, #4]
   82928:	2f00      	cmp	r7, #0
   8292a:	d064      	beq.n	829f6 <__sfvwrite_r+0x1ea>
   8292c:	6820      	ldr	r0, [r4, #0]
   8292e:	6921      	ldr	r1, [r4, #16]
   82930:	45c2      	cmp	sl, r8
   82932:	bf34      	ite	cc
   82934:	4653      	movcc	r3, sl
   82936:	4643      	movcs	r3, r8
   82938:	4288      	cmp	r0, r1
   8293a:	461f      	mov	r7, r3
   8293c:	f8d4 c008 	ldr.w	ip, [r4, #8]
   82940:	6962      	ldr	r2, [r4, #20]
   82942:	d903      	bls.n	8294c <__sfvwrite_r+0x140>
   82944:	4494      	add	ip, r2
   82946:	4563      	cmp	r3, ip
   82948:	f300 80ae 	bgt.w	82aa8 <__sfvwrite_r+0x29c>
   8294c:	4293      	cmp	r3, r2
   8294e:	db36      	blt.n	829be <__sfvwrite_r+0x1b2>
   82950:	4613      	mov	r3, r2
   82952:	6a67      	ldr	r7, [r4, #36]	; 0x24
   82954:	4648      	mov	r0, r9
   82956:	69e1      	ldr	r1, [r4, #28]
   82958:	465a      	mov	r2, fp
   8295a:	47b8      	blx	r7
   8295c:	1e07      	subs	r7, r0, #0
   8295e:	ddd2      	ble.n	82906 <__sfvwrite_r+0xfa>
   82960:	ebba 0a07 	subs.w	sl, sl, r7
   82964:	d03a      	beq.n	829dc <__sfvwrite_r+0x1d0>
   82966:	68b3      	ldr	r3, [r6, #8]
   82968:	44bb      	add	fp, r7
   8296a:	1bdb      	subs	r3, r3, r7
   8296c:	ebc7 0808 	rsb	r8, r7, r8
   82970:	60b3      	str	r3, [r6, #8]
   82972:	2b00      	cmp	r3, #0
   82974:	f43f af78 	beq.w	82868 <__sfvwrite_r+0x5c>
   82978:	f1b8 0f00 	cmp.w	r8, #0
   8297c:	d1d3      	bne.n	82926 <__sfvwrite_r+0x11a>
   8297e:	2700      	movs	r7, #0
   82980:	f8d5 b000 	ldr.w	fp, [r5]
   82984:	f8d5 8004 	ldr.w	r8, [r5, #4]
   82988:	9701      	str	r7, [sp, #4]
   8298a:	3508      	adds	r5, #8
   8298c:	e7c8      	b.n	82920 <__sfvwrite_r+0x114>
   8298e:	6820      	ldr	r0, [r4, #0]
   82990:	6923      	ldr	r3, [r4, #16]
   82992:	4298      	cmp	r0, r3
   82994:	d802      	bhi.n	8299c <__sfvwrite_r+0x190>
   82996:	6963      	ldr	r3, [r4, #20]
   82998:	4598      	cmp	r8, r3
   8299a:	d272      	bcs.n	82a82 <__sfvwrite_r+0x276>
   8299c:	45b8      	cmp	r8, r7
   8299e:	bf38      	it	cc
   829a0:	4647      	movcc	r7, r8
   829a2:	463a      	mov	r2, r7
   829a4:	4651      	mov	r1, sl
   829a6:	f000 fc49 	bl	8323c <memmove>
   829aa:	68a3      	ldr	r3, [r4, #8]
   829ac:	6822      	ldr	r2, [r4, #0]
   829ae:	1bdb      	subs	r3, r3, r7
   829b0:	443a      	add	r2, r7
   829b2:	60a3      	str	r3, [r4, #8]
   829b4:	6022      	str	r2, [r4, #0]
   829b6:	2b00      	cmp	r3, #0
   829b8:	d09f      	beq.n	828fa <__sfvwrite_r+0xee>
   829ba:	463a      	mov	r2, r7
   829bc:	e785      	b.n	828ca <__sfvwrite_r+0xbe>
   829be:	461a      	mov	r2, r3
   829c0:	4659      	mov	r1, fp
   829c2:	9300      	str	r3, [sp, #0]
   829c4:	f000 fc3a 	bl	8323c <memmove>
   829c8:	9b00      	ldr	r3, [sp, #0]
   829ca:	68a1      	ldr	r1, [r4, #8]
   829cc:	6822      	ldr	r2, [r4, #0]
   829ce:	1ac9      	subs	r1, r1, r3
   829d0:	ebba 0a07 	subs.w	sl, sl, r7
   829d4:	4413      	add	r3, r2
   829d6:	60a1      	str	r1, [r4, #8]
   829d8:	6023      	str	r3, [r4, #0]
   829da:	d1c4      	bne.n	82966 <__sfvwrite_r+0x15a>
   829dc:	4648      	mov	r0, r9
   829de:	4621      	mov	r1, r4
   829e0:	f7ff fce8 	bl	823b4 <_fflush_r>
   829e4:	2800      	cmp	r0, #0
   829e6:	d18e      	bne.n	82906 <__sfvwrite_r+0xfa>
   829e8:	f8cd a004 	str.w	sl, [sp, #4]
   829ec:	e7bb      	b.n	82966 <__sfvwrite_r+0x15a>
   829ee:	6820      	ldr	r0, [r4, #0]
   829f0:	4647      	mov	r7, r8
   829f2:	46c3      	mov	fp, r8
   829f4:	e75d      	b.n	828b2 <__sfvwrite_r+0xa6>
   829f6:	4658      	mov	r0, fp
   829f8:	210a      	movs	r1, #10
   829fa:	4642      	mov	r2, r8
   829fc:	f000 fbd4 	bl	831a8 <memchr>
   82a00:	2800      	cmp	r0, #0
   82a02:	d07f      	beq.n	82b04 <__sfvwrite_r+0x2f8>
   82a04:	f100 0a01 	add.w	sl, r0, #1
   82a08:	2701      	movs	r7, #1
   82a0a:	ebcb 0a0a 	rsb	sl, fp, sl
   82a0e:	9701      	str	r7, [sp, #4]
   82a10:	e78c      	b.n	8292c <__sfvwrite_r+0x120>
   82a12:	6822      	ldr	r2, [r4, #0]
   82a14:	6921      	ldr	r1, [r4, #16]
   82a16:	6967      	ldr	r7, [r4, #20]
   82a18:	ebc1 0c02 	rsb	ip, r1, r2
   82a1c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   82a20:	f10c 0201 	add.w	r2, ip, #1
   82a24:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   82a28:	4442      	add	r2, r8
   82a2a:	107f      	asrs	r7, r7, #1
   82a2c:	4297      	cmp	r7, r2
   82a2e:	bf34      	ite	cc
   82a30:	4617      	movcc	r7, r2
   82a32:	463a      	movcs	r2, r7
   82a34:	055b      	lsls	r3, r3, #21
   82a36:	d54f      	bpl.n	82ad8 <__sfvwrite_r+0x2cc>
   82a38:	4611      	mov	r1, r2
   82a3a:	4648      	mov	r0, r9
   82a3c:	f8cd c000 	str.w	ip, [sp]
   82a40:	f000 f916 	bl	82c70 <_malloc_r>
   82a44:	f8dd c000 	ldr.w	ip, [sp]
   82a48:	4683      	mov	fp, r0
   82a4a:	2800      	cmp	r0, #0
   82a4c:	d062      	beq.n	82b14 <__sfvwrite_r+0x308>
   82a4e:	4662      	mov	r2, ip
   82a50:	6921      	ldr	r1, [r4, #16]
   82a52:	f8cd c000 	str.w	ip, [sp]
   82a56:	f7fe fb7b 	bl	81150 <memcpy>
   82a5a:	89a2      	ldrh	r2, [r4, #12]
   82a5c:	f8dd c000 	ldr.w	ip, [sp]
   82a60:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   82a64:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   82a68:	81a2      	strh	r2, [r4, #12]
   82a6a:	eb0b 000c 	add.w	r0, fp, ip
   82a6e:	ebcc 0207 	rsb	r2, ip, r7
   82a72:	f8c4 b010 	str.w	fp, [r4, #16]
   82a76:	6167      	str	r7, [r4, #20]
   82a78:	6020      	str	r0, [r4, #0]
   82a7a:	60a2      	str	r2, [r4, #8]
   82a7c:	4647      	mov	r7, r8
   82a7e:	46c3      	mov	fp, r8
   82a80:	e717      	b.n	828b2 <__sfvwrite_r+0xa6>
   82a82:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   82a86:	4590      	cmp	r8, r2
   82a88:	bf38      	it	cc
   82a8a:	4642      	movcc	r2, r8
   82a8c:	fb92 f2f3 	sdiv	r2, r2, r3
   82a90:	fb02 f303 	mul.w	r3, r2, r3
   82a94:	6a67      	ldr	r7, [r4, #36]	; 0x24
   82a96:	4648      	mov	r0, r9
   82a98:	69e1      	ldr	r1, [r4, #28]
   82a9a:	4652      	mov	r2, sl
   82a9c:	47b8      	blx	r7
   82a9e:	2800      	cmp	r0, #0
   82aa0:	f77f af31 	ble.w	82906 <__sfvwrite_r+0xfa>
   82aa4:	4602      	mov	r2, r0
   82aa6:	e710      	b.n	828ca <__sfvwrite_r+0xbe>
   82aa8:	4662      	mov	r2, ip
   82aaa:	4659      	mov	r1, fp
   82aac:	f8cd c000 	str.w	ip, [sp]
   82ab0:	f000 fbc4 	bl	8323c <memmove>
   82ab4:	f8dd c000 	ldr.w	ip, [sp]
   82ab8:	6823      	ldr	r3, [r4, #0]
   82aba:	4648      	mov	r0, r9
   82abc:	4463      	add	r3, ip
   82abe:	6023      	str	r3, [r4, #0]
   82ac0:	4621      	mov	r1, r4
   82ac2:	f8cd c000 	str.w	ip, [sp]
   82ac6:	f7ff fc75 	bl	823b4 <_fflush_r>
   82aca:	f8dd c000 	ldr.w	ip, [sp]
   82ace:	2800      	cmp	r0, #0
   82ad0:	f47f af19 	bne.w	82906 <__sfvwrite_r+0xfa>
   82ad4:	4667      	mov	r7, ip
   82ad6:	e743      	b.n	82960 <__sfvwrite_r+0x154>
   82ad8:	4648      	mov	r0, r9
   82ada:	f8cd c000 	str.w	ip, [sp]
   82ade:	f000 fc17 	bl	83310 <_realloc_r>
   82ae2:	f8dd c000 	ldr.w	ip, [sp]
   82ae6:	4683      	mov	fp, r0
   82ae8:	2800      	cmp	r0, #0
   82aea:	d1be      	bne.n	82a6a <__sfvwrite_r+0x25e>
   82aec:	4648      	mov	r0, r9
   82aee:	6921      	ldr	r1, [r4, #16]
   82af0:	f7ff fdc0 	bl	82674 <_free_r>
   82af4:	89a3      	ldrh	r3, [r4, #12]
   82af6:	220c      	movs	r2, #12
   82af8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   82afc:	b29b      	uxth	r3, r3
   82afe:	f8c9 2000 	str.w	r2, [r9]
   82b02:	e701      	b.n	82908 <__sfvwrite_r+0xfc>
   82b04:	2701      	movs	r7, #1
   82b06:	f108 0a01 	add.w	sl, r8, #1
   82b0a:	9701      	str	r7, [sp, #4]
   82b0c:	e70e      	b.n	8292c <__sfvwrite_r+0x120>
   82b0e:	f04f 30ff 	mov.w	r0, #4294967295
   82b12:	e6aa      	b.n	8286a <__sfvwrite_r+0x5e>
   82b14:	230c      	movs	r3, #12
   82b16:	f8c9 3000 	str.w	r3, [r9]
   82b1a:	89a3      	ldrh	r3, [r4, #12]
   82b1c:	e6f4      	b.n	82908 <__sfvwrite_r+0xfc>
   82b1e:	bf00      	nop
   82b20:	7ffffc00 	.word	0x7ffffc00

00082b24 <_fwalk>:
   82b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82b28:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
   82b2c:	4688      	mov	r8, r1
   82b2e:	d019      	beq.n	82b64 <_fwalk+0x40>
   82b30:	2600      	movs	r6, #0
   82b32:	687d      	ldr	r5, [r7, #4]
   82b34:	68bc      	ldr	r4, [r7, #8]
   82b36:	3d01      	subs	r5, #1
   82b38:	d40e      	bmi.n	82b58 <_fwalk+0x34>
   82b3a:	89a3      	ldrh	r3, [r4, #12]
   82b3c:	3d01      	subs	r5, #1
   82b3e:	2b01      	cmp	r3, #1
   82b40:	d906      	bls.n	82b50 <_fwalk+0x2c>
   82b42:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   82b46:	4620      	mov	r0, r4
   82b48:	3301      	adds	r3, #1
   82b4a:	d001      	beq.n	82b50 <_fwalk+0x2c>
   82b4c:	47c0      	blx	r8
   82b4e:	4306      	orrs	r6, r0
   82b50:	1c6b      	adds	r3, r5, #1
   82b52:	f104 0468 	add.w	r4, r4, #104	; 0x68
   82b56:	d1f0      	bne.n	82b3a <_fwalk+0x16>
   82b58:	683f      	ldr	r7, [r7, #0]
   82b5a:	2f00      	cmp	r7, #0
   82b5c:	d1e9      	bne.n	82b32 <_fwalk+0xe>
   82b5e:	4630      	mov	r0, r6
   82b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82b64:	463e      	mov	r6, r7
   82b66:	4630      	mov	r0, r6
   82b68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00082b6c <__locale_charset>:
   82b6c:	4800      	ldr	r0, [pc, #0]	; (82b70 <__locale_charset+0x4>)
   82b6e:	4770      	bx	lr
   82b70:	20070574 	.word	0x20070574

00082b74 <__locale_mb_cur_max>:
   82b74:	4b01      	ldr	r3, [pc, #4]	; (82b7c <__locale_mb_cur_max+0x8>)
   82b76:	6818      	ldr	r0, [r3, #0]
   82b78:	4770      	bx	lr
   82b7a:	bf00      	nop
   82b7c:	20070594 	.word	0x20070594

00082b80 <__smakebuf_r>:
   82b80:	b5f0      	push	{r4, r5, r6, r7, lr}
   82b82:	898b      	ldrh	r3, [r1, #12]
   82b84:	b091      	sub	sp, #68	; 0x44
   82b86:	b29a      	uxth	r2, r3
   82b88:	0796      	lsls	r6, r2, #30
   82b8a:	460c      	mov	r4, r1
   82b8c:	4605      	mov	r5, r0
   82b8e:	d437      	bmi.n	82c00 <__smakebuf_r+0x80>
   82b90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   82b94:	2900      	cmp	r1, #0
   82b96:	db17      	blt.n	82bc8 <__smakebuf_r+0x48>
   82b98:	aa01      	add	r2, sp, #4
   82b9a:	f000 ff39 	bl	83a10 <_fstat_r>
   82b9e:	2800      	cmp	r0, #0
   82ba0:	db10      	blt.n	82bc4 <__smakebuf_r+0x44>
   82ba2:	9b02      	ldr	r3, [sp, #8]
   82ba4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
   82ba8:	f5b3 5100 	subs.w	r1, r3, #8192	; 0x2000
   82bac:	424f      	negs	r7, r1
   82bae:	414f      	adcs	r7, r1
   82bb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   82bb4:	d02c      	beq.n	82c10 <__smakebuf_r+0x90>
   82bb6:	89a3      	ldrh	r3, [r4, #12]
   82bb8:	f44f 6680 	mov.w	r6, #1024	; 0x400
   82bbc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   82bc0:	81a3      	strh	r3, [r4, #12]
   82bc2:	e00b      	b.n	82bdc <__smakebuf_r+0x5c>
   82bc4:	89a3      	ldrh	r3, [r4, #12]
   82bc6:	b29a      	uxth	r2, r3
   82bc8:	f012 0f80 	tst.w	r2, #128	; 0x80
   82bcc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   82bd0:	81a3      	strh	r3, [r4, #12]
   82bd2:	bf14      	ite	ne
   82bd4:	2640      	movne	r6, #64	; 0x40
   82bd6:	f44f 6680 	moveq.w	r6, #1024	; 0x400
   82bda:	2700      	movs	r7, #0
   82bdc:	4628      	mov	r0, r5
   82bde:	4631      	mov	r1, r6
   82be0:	f000 f846 	bl	82c70 <_malloc_r>
   82be4:	89a3      	ldrh	r3, [r4, #12]
   82be6:	2800      	cmp	r0, #0
   82be8:	d029      	beq.n	82c3e <__smakebuf_r+0xbe>
   82bea:	4a1b      	ldr	r2, [pc, #108]	; (82c58 <__smakebuf_r+0xd8>)
   82bec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   82bf0:	63ea      	str	r2, [r5, #60]	; 0x3c
   82bf2:	81a3      	strh	r3, [r4, #12]
   82bf4:	6020      	str	r0, [r4, #0]
   82bf6:	6120      	str	r0, [r4, #16]
   82bf8:	6166      	str	r6, [r4, #20]
   82bfa:	b9a7      	cbnz	r7, 82c26 <__smakebuf_r+0xa6>
   82bfc:	b011      	add	sp, #68	; 0x44
   82bfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82c00:	f101 0343 	add.w	r3, r1, #67	; 0x43
   82c04:	2201      	movs	r2, #1
   82c06:	600b      	str	r3, [r1, #0]
   82c08:	610b      	str	r3, [r1, #16]
   82c0a:	614a      	str	r2, [r1, #20]
   82c0c:	b011      	add	sp, #68	; 0x44
   82c0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82c10:	4a12      	ldr	r2, [pc, #72]	; (82c5c <__smakebuf_r+0xdc>)
   82c12:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   82c14:	4293      	cmp	r3, r2
   82c16:	d1ce      	bne.n	82bb6 <__smakebuf_r+0x36>
   82c18:	89a3      	ldrh	r3, [r4, #12]
   82c1a:	f44f 6680 	mov.w	r6, #1024	; 0x400
   82c1e:	4333      	orrs	r3, r6
   82c20:	81a3      	strh	r3, [r4, #12]
   82c22:	64e6      	str	r6, [r4, #76]	; 0x4c
   82c24:	e7da      	b.n	82bdc <__smakebuf_r+0x5c>
   82c26:	4628      	mov	r0, r5
   82c28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   82c2c:	f000 ff04 	bl	83a38 <_isatty_r>
   82c30:	2800      	cmp	r0, #0
   82c32:	d0e3      	beq.n	82bfc <__smakebuf_r+0x7c>
   82c34:	89a3      	ldrh	r3, [r4, #12]
   82c36:	f043 0301 	orr.w	r3, r3, #1
   82c3a:	81a3      	strh	r3, [r4, #12]
   82c3c:	e7de      	b.n	82bfc <__smakebuf_r+0x7c>
   82c3e:	059a      	lsls	r2, r3, #22
   82c40:	d4dc      	bmi.n	82bfc <__smakebuf_r+0x7c>
   82c42:	f104 0243 	add.w	r2, r4, #67	; 0x43
   82c46:	f043 0302 	orr.w	r3, r3, #2
   82c4a:	2101      	movs	r1, #1
   82c4c:	81a3      	strh	r3, [r4, #12]
   82c4e:	6022      	str	r2, [r4, #0]
   82c50:	6122      	str	r2, [r4, #16]
   82c52:	6161      	str	r1, [r4, #20]
   82c54:	e7d2      	b.n	82bfc <__smakebuf_r+0x7c>
   82c56:	bf00      	nop
   82c58:	000823e1 	.word	0x000823e1
   82c5c:	00083751 	.word	0x00083751

00082c60 <malloc>:
   82c60:	4b02      	ldr	r3, [pc, #8]	; (82c6c <malloc+0xc>)
   82c62:	4601      	mov	r1, r0
   82c64:	6818      	ldr	r0, [r3, #0]
   82c66:	f000 b803 	b.w	82c70 <_malloc_r>
   82c6a:	bf00      	nop
   82c6c:	20070570 	.word	0x20070570

00082c70 <_malloc_r>:
   82c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82c74:	f101 050b 	add.w	r5, r1, #11
   82c78:	2d16      	cmp	r5, #22
   82c7a:	b083      	sub	sp, #12
   82c7c:	4606      	mov	r6, r0
   82c7e:	d927      	bls.n	82cd0 <_malloc_r+0x60>
   82c80:	f035 0507 	bics.w	r5, r5, #7
   82c84:	d427      	bmi.n	82cd6 <_malloc_r+0x66>
   82c86:	42a9      	cmp	r1, r5
   82c88:	d825      	bhi.n	82cd6 <_malloc_r+0x66>
   82c8a:	4630      	mov	r0, r6
   82c8c:	f000 fb3c 	bl	83308 <__malloc_lock>
   82c90:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   82c94:	d226      	bcs.n	82ce4 <_malloc_r+0x74>
   82c96:	4fc1      	ldr	r7, [pc, #772]	; (82f9c <_malloc_r+0x32c>)
   82c98:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
   82c9c:	eb07 03cc 	add.w	r3, r7, ip, lsl #3
   82ca0:	68dc      	ldr	r4, [r3, #12]
   82ca2:	429c      	cmp	r4, r3
   82ca4:	f000 81d2 	beq.w	8304c <_malloc_r+0x3dc>
   82ca8:	6863      	ldr	r3, [r4, #4]
   82caa:	68e2      	ldr	r2, [r4, #12]
   82cac:	f023 0303 	bic.w	r3, r3, #3
   82cb0:	4423      	add	r3, r4
   82cb2:	6858      	ldr	r0, [r3, #4]
   82cb4:	68a1      	ldr	r1, [r4, #8]
   82cb6:	f040 0501 	orr.w	r5, r0, #1
   82cba:	60ca      	str	r2, [r1, #12]
   82cbc:	4630      	mov	r0, r6
   82cbe:	6091      	str	r1, [r2, #8]
   82cc0:	605d      	str	r5, [r3, #4]
   82cc2:	f000 fb23 	bl	8330c <__malloc_unlock>
   82cc6:	3408      	adds	r4, #8
   82cc8:	4620      	mov	r0, r4
   82cca:	b003      	add	sp, #12
   82ccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82cd0:	2510      	movs	r5, #16
   82cd2:	42a9      	cmp	r1, r5
   82cd4:	d9d9      	bls.n	82c8a <_malloc_r+0x1a>
   82cd6:	2400      	movs	r4, #0
   82cd8:	230c      	movs	r3, #12
   82cda:	4620      	mov	r0, r4
   82cdc:	6033      	str	r3, [r6, #0]
   82cde:	b003      	add	sp, #12
   82ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82ce4:	ea5f 2c55 	movs.w	ip, r5, lsr #9
   82ce8:	f000 8089 	beq.w	82dfe <_malloc_r+0x18e>
   82cec:	f1bc 0f04 	cmp.w	ip, #4
   82cf0:	f200 8160 	bhi.w	82fb4 <_malloc_r+0x344>
   82cf4:	ea4f 1c95 	mov.w	ip, r5, lsr #6
   82cf8:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
   82cfc:	ea4f 014c 	mov.w	r1, ip, lsl #1
   82d00:	4fa6      	ldr	r7, [pc, #664]	; (82f9c <_malloc_r+0x32c>)
   82d02:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   82d06:	68cc      	ldr	r4, [r1, #12]
   82d08:	42a1      	cmp	r1, r4
   82d0a:	d105      	bne.n	82d18 <_malloc_r+0xa8>
   82d0c:	e00c      	b.n	82d28 <_malloc_r+0xb8>
   82d0e:	2b00      	cmp	r3, #0
   82d10:	da79      	bge.n	82e06 <_malloc_r+0x196>
   82d12:	68e4      	ldr	r4, [r4, #12]
   82d14:	42a1      	cmp	r1, r4
   82d16:	d007      	beq.n	82d28 <_malloc_r+0xb8>
   82d18:	6862      	ldr	r2, [r4, #4]
   82d1a:	f022 0203 	bic.w	r2, r2, #3
   82d1e:	1b53      	subs	r3, r2, r5
   82d20:	2b0f      	cmp	r3, #15
   82d22:	ddf4      	ble.n	82d0e <_malloc_r+0x9e>
   82d24:	f10c 3cff 	add.w	ip, ip, #4294967295
   82d28:	f10c 0c01 	add.w	ip, ip, #1
   82d2c:	4b9b      	ldr	r3, [pc, #620]	; (82f9c <_malloc_r+0x32c>)
   82d2e:	693c      	ldr	r4, [r7, #16]
   82d30:	f103 0e08 	add.w	lr, r3, #8
   82d34:	4574      	cmp	r4, lr
   82d36:	f000 817e 	beq.w	83036 <_malloc_r+0x3c6>
   82d3a:	6861      	ldr	r1, [r4, #4]
   82d3c:	f021 0103 	bic.w	r1, r1, #3
   82d40:	1b4a      	subs	r2, r1, r5
   82d42:	2a0f      	cmp	r2, #15
   82d44:	f300 8164 	bgt.w	83010 <_malloc_r+0x3a0>
   82d48:	2a00      	cmp	r2, #0
   82d4a:	f8c3 e014 	str.w	lr, [r3, #20]
   82d4e:	f8c3 e010 	str.w	lr, [r3, #16]
   82d52:	da69      	bge.n	82e28 <_malloc_r+0x1b8>
   82d54:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   82d58:	f080 813a 	bcs.w	82fd0 <_malloc_r+0x360>
   82d5c:	08c9      	lsrs	r1, r1, #3
   82d5e:	108a      	asrs	r2, r1, #2
   82d60:	f04f 0801 	mov.w	r8, #1
   82d64:	fa08 f802 	lsl.w	r8, r8, r2
   82d68:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   82d6c:	685a      	ldr	r2, [r3, #4]
   82d6e:	6888      	ldr	r0, [r1, #8]
   82d70:	ea48 0202 	orr.w	r2, r8, r2
   82d74:	60a0      	str	r0, [r4, #8]
   82d76:	60e1      	str	r1, [r4, #12]
   82d78:	605a      	str	r2, [r3, #4]
   82d7a:	608c      	str	r4, [r1, #8]
   82d7c:	60c4      	str	r4, [r0, #12]
   82d7e:	ea4f 03ac 	mov.w	r3, ip, asr #2
   82d82:	2001      	movs	r0, #1
   82d84:	4098      	lsls	r0, r3
   82d86:	4290      	cmp	r0, r2
   82d88:	d85b      	bhi.n	82e42 <_malloc_r+0x1d2>
   82d8a:	4202      	tst	r2, r0
   82d8c:	d106      	bne.n	82d9c <_malloc_r+0x12c>
   82d8e:	f02c 0c03 	bic.w	ip, ip, #3
   82d92:	0040      	lsls	r0, r0, #1
   82d94:	4202      	tst	r2, r0
   82d96:	f10c 0c04 	add.w	ip, ip, #4
   82d9a:	d0fa      	beq.n	82d92 <_malloc_r+0x122>
   82d9c:	eb07 08cc 	add.w	r8, r7, ip, lsl #3
   82da0:	4644      	mov	r4, r8
   82da2:	46e1      	mov	r9, ip
   82da4:	68e3      	ldr	r3, [r4, #12]
   82da6:	429c      	cmp	r4, r3
   82da8:	d107      	bne.n	82dba <_malloc_r+0x14a>
   82daa:	e146      	b.n	8303a <_malloc_r+0x3ca>
   82dac:	2a00      	cmp	r2, #0
   82dae:	f280 8157 	bge.w	83060 <_malloc_r+0x3f0>
   82db2:	68db      	ldr	r3, [r3, #12]
   82db4:	429c      	cmp	r4, r3
   82db6:	f000 8140 	beq.w	8303a <_malloc_r+0x3ca>
   82dba:	6859      	ldr	r1, [r3, #4]
   82dbc:	f021 0103 	bic.w	r1, r1, #3
   82dc0:	1b4a      	subs	r2, r1, r5
   82dc2:	2a0f      	cmp	r2, #15
   82dc4:	ddf2      	ble.n	82dac <_malloc_r+0x13c>
   82dc6:	461c      	mov	r4, r3
   82dc8:	f854 cf08 	ldr.w	ip, [r4, #8]!
   82dcc:	68d9      	ldr	r1, [r3, #12]
   82dce:	f045 0901 	orr.w	r9, r5, #1
   82dd2:	f042 0801 	orr.w	r8, r2, #1
   82dd6:	441d      	add	r5, r3
   82dd8:	f8c3 9004 	str.w	r9, [r3, #4]
   82ddc:	4630      	mov	r0, r6
   82dde:	f8cc 100c 	str.w	r1, [ip, #12]
   82de2:	f8c1 c008 	str.w	ip, [r1, #8]
   82de6:	617d      	str	r5, [r7, #20]
   82de8:	613d      	str	r5, [r7, #16]
   82dea:	f8c5 e00c 	str.w	lr, [r5, #12]
   82dee:	f8c5 e008 	str.w	lr, [r5, #8]
   82df2:	f8c5 8004 	str.w	r8, [r5, #4]
   82df6:	50aa      	str	r2, [r5, r2]
   82df8:	f000 fa88 	bl	8330c <__malloc_unlock>
   82dfc:	e764      	b.n	82cc8 <_malloc_r+0x58>
   82dfe:	217e      	movs	r1, #126	; 0x7e
   82e00:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
   82e04:	e77c      	b.n	82d00 <_malloc_r+0x90>
   82e06:	4422      	add	r2, r4
   82e08:	6850      	ldr	r0, [r2, #4]
   82e0a:	68e3      	ldr	r3, [r4, #12]
   82e0c:	68a1      	ldr	r1, [r4, #8]
   82e0e:	f040 0501 	orr.w	r5, r0, #1
   82e12:	60cb      	str	r3, [r1, #12]
   82e14:	4630      	mov	r0, r6
   82e16:	6099      	str	r1, [r3, #8]
   82e18:	6055      	str	r5, [r2, #4]
   82e1a:	f000 fa77 	bl	8330c <__malloc_unlock>
   82e1e:	3408      	adds	r4, #8
   82e20:	4620      	mov	r0, r4
   82e22:	b003      	add	sp, #12
   82e24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82e28:	4421      	add	r1, r4
   82e2a:	684b      	ldr	r3, [r1, #4]
   82e2c:	4630      	mov	r0, r6
   82e2e:	f043 0301 	orr.w	r3, r3, #1
   82e32:	604b      	str	r3, [r1, #4]
   82e34:	f000 fa6a 	bl	8330c <__malloc_unlock>
   82e38:	3408      	adds	r4, #8
   82e3a:	4620      	mov	r0, r4
   82e3c:	b003      	add	sp, #12
   82e3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82e42:	68bc      	ldr	r4, [r7, #8]
   82e44:	6863      	ldr	r3, [r4, #4]
   82e46:	f023 0903 	bic.w	r9, r3, #3
   82e4a:	45a9      	cmp	r9, r5
   82e4c:	d304      	bcc.n	82e58 <_malloc_r+0x1e8>
   82e4e:	ebc5 0309 	rsb	r3, r5, r9
   82e52:	2b0f      	cmp	r3, #15
   82e54:	f300 8091 	bgt.w	82f7a <_malloc_r+0x30a>
   82e58:	4b51      	ldr	r3, [pc, #324]	; (82fa0 <_malloc_r+0x330>)
   82e5a:	4a52      	ldr	r2, [pc, #328]	; (82fa4 <_malloc_r+0x334>)
   82e5c:	6819      	ldr	r1, [r3, #0]
   82e5e:	6813      	ldr	r3, [r2, #0]
   82e60:	eb05 0a01 	add.w	sl, r5, r1
   82e64:	3301      	adds	r3, #1
   82e66:	eb04 0b09 	add.w	fp, r4, r9
   82e6a:	f000 8161 	beq.w	83130 <_malloc_r+0x4c0>
   82e6e:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
   82e72:	f10a 0a0f 	add.w	sl, sl, #15
   82e76:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
   82e7a:	f02a 0a0f 	bic.w	sl, sl, #15
   82e7e:	4630      	mov	r0, r6
   82e80:	4651      	mov	r1, sl
   82e82:	9201      	str	r2, [sp, #4]
   82e84:	f000 fc24 	bl	836d0 <_sbrk_r>
   82e88:	f1b0 3fff 	cmp.w	r0, #4294967295
   82e8c:	4680      	mov	r8, r0
   82e8e:	9a01      	ldr	r2, [sp, #4]
   82e90:	f000 8101 	beq.w	83096 <_malloc_r+0x426>
   82e94:	4583      	cmp	fp, r0
   82e96:	f200 80fb 	bhi.w	83090 <_malloc_r+0x420>
   82e9a:	f8df c114 	ldr.w	ip, [pc, #276]	; 82fb0 <_malloc_r+0x340>
   82e9e:	45c3      	cmp	fp, r8
   82ea0:	f8dc 3000 	ldr.w	r3, [ip]
   82ea4:	4453      	add	r3, sl
   82ea6:	f8cc 3000 	str.w	r3, [ip]
   82eaa:	f000 814a 	beq.w	83142 <_malloc_r+0x4d2>
   82eae:	6812      	ldr	r2, [r2, #0]
   82eb0:	493c      	ldr	r1, [pc, #240]	; (82fa4 <_malloc_r+0x334>)
   82eb2:	3201      	adds	r2, #1
   82eb4:	bf1b      	ittet	ne
   82eb6:	ebcb 0b08 	rsbne	fp, fp, r8
   82eba:	445b      	addne	r3, fp
   82ebc:	f8c1 8000 	streq.w	r8, [r1]
   82ec0:	f8cc 3000 	strne.w	r3, [ip]
   82ec4:	f018 0307 	ands.w	r3, r8, #7
   82ec8:	f000 8114 	beq.w	830f4 <_malloc_r+0x484>
   82ecc:	f1c3 0208 	rsb	r2, r3, #8
   82ed0:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
   82ed4:	4490      	add	r8, r2
   82ed6:	3308      	adds	r3, #8
   82ed8:	44c2      	add	sl, r8
   82eda:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
   82ede:	ebca 0a03 	rsb	sl, sl, r3
   82ee2:	4651      	mov	r1, sl
   82ee4:	4630      	mov	r0, r6
   82ee6:	f8cd c004 	str.w	ip, [sp, #4]
   82eea:	f000 fbf1 	bl	836d0 <_sbrk_r>
   82eee:	1c43      	adds	r3, r0, #1
   82ef0:	f8dd c004 	ldr.w	ip, [sp, #4]
   82ef4:	f000 8135 	beq.w	83162 <_malloc_r+0x4f2>
   82ef8:	ebc8 0200 	rsb	r2, r8, r0
   82efc:	4452      	add	r2, sl
   82efe:	f042 0201 	orr.w	r2, r2, #1
   82f02:	f8dc 3000 	ldr.w	r3, [ip]
   82f06:	42bc      	cmp	r4, r7
   82f08:	4453      	add	r3, sl
   82f0a:	f8c7 8008 	str.w	r8, [r7, #8]
   82f0e:	f8cc 3000 	str.w	r3, [ip]
   82f12:	f8c8 2004 	str.w	r2, [r8, #4]
   82f16:	f8df a098 	ldr.w	sl, [pc, #152]	; 82fb0 <_malloc_r+0x340>
   82f1a:	d015      	beq.n	82f48 <_malloc_r+0x2d8>
   82f1c:	f1b9 0f0f 	cmp.w	r9, #15
   82f20:	f240 80eb 	bls.w	830fa <_malloc_r+0x48a>
   82f24:	6861      	ldr	r1, [r4, #4]
   82f26:	f1a9 020c 	sub.w	r2, r9, #12
   82f2a:	f022 0207 	bic.w	r2, r2, #7
   82f2e:	f001 0101 	and.w	r1, r1, #1
   82f32:	ea42 0e01 	orr.w	lr, r2, r1
   82f36:	2005      	movs	r0, #5
   82f38:	18a1      	adds	r1, r4, r2
   82f3a:	2a0f      	cmp	r2, #15
   82f3c:	f8c4 e004 	str.w	lr, [r4, #4]
   82f40:	6048      	str	r0, [r1, #4]
   82f42:	6088      	str	r0, [r1, #8]
   82f44:	f200 8111 	bhi.w	8316a <_malloc_r+0x4fa>
   82f48:	4a17      	ldr	r2, [pc, #92]	; (82fa8 <_malloc_r+0x338>)
   82f4a:	68bc      	ldr	r4, [r7, #8]
   82f4c:	6811      	ldr	r1, [r2, #0]
   82f4e:	428b      	cmp	r3, r1
   82f50:	bf88      	it	hi
   82f52:	6013      	strhi	r3, [r2, #0]
   82f54:	4a15      	ldr	r2, [pc, #84]	; (82fac <_malloc_r+0x33c>)
   82f56:	6811      	ldr	r1, [r2, #0]
   82f58:	428b      	cmp	r3, r1
   82f5a:	bf88      	it	hi
   82f5c:	6013      	strhi	r3, [r2, #0]
   82f5e:	6862      	ldr	r2, [r4, #4]
   82f60:	f022 0203 	bic.w	r2, r2, #3
   82f64:	4295      	cmp	r5, r2
   82f66:	ebc5 0302 	rsb	r3, r5, r2
   82f6a:	d801      	bhi.n	82f70 <_malloc_r+0x300>
   82f6c:	2b0f      	cmp	r3, #15
   82f6e:	dc04      	bgt.n	82f7a <_malloc_r+0x30a>
   82f70:	4630      	mov	r0, r6
   82f72:	f000 f9cb 	bl	8330c <__malloc_unlock>
   82f76:	2400      	movs	r4, #0
   82f78:	e6a6      	b.n	82cc8 <_malloc_r+0x58>
   82f7a:	f045 0201 	orr.w	r2, r5, #1
   82f7e:	f043 0301 	orr.w	r3, r3, #1
   82f82:	4425      	add	r5, r4
   82f84:	6062      	str	r2, [r4, #4]
   82f86:	4630      	mov	r0, r6
   82f88:	60bd      	str	r5, [r7, #8]
   82f8a:	606b      	str	r3, [r5, #4]
   82f8c:	f000 f9be 	bl	8330c <__malloc_unlock>
   82f90:	3408      	adds	r4, #8
   82f92:	4620      	mov	r0, r4
   82f94:	b003      	add	sp, #12
   82f96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82f9a:	bf00      	nop
   82f9c:	20070598 	.word	0x20070598
   82fa0:	20070b70 	.word	0x20070b70
   82fa4:	200709a4 	.word	0x200709a4
   82fa8:	20070b6c 	.word	0x20070b6c
   82fac:	20070b68 	.word	0x20070b68
   82fb0:	20070b74 	.word	0x20070b74
   82fb4:	f1bc 0f14 	cmp.w	ip, #20
   82fb8:	d961      	bls.n	8307e <_malloc_r+0x40e>
   82fba:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
   82fbe:	f200 808f 	bhi.w	830e0 <_malloc_r+0x470>
   82fc2:	ea4f 3c15 	mov.w	ip, r5, lsr #12
   82fc6:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
   82fca:	ea4f 014c 	mov.w	r1, ip, lsl #1
   82fce:	e697      	b.n	82d00 <_malloc_r+0x90>
   82fd0:	0a4b      	lsrs	r3, r1, #9
   82fd2:	2b04      	cmp	r3, #4
   82fd4:	d958      	bls.n	83088 <_malloc_r+0x418>
   82fd6:	2b14      	cmp	r3, #20
   82fd8:	f200 80ad 	bhi.w	83136 <_malloc_r+0x4c6>
   82fdc:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   82fe0:	0050      	lsls	r0, r2, #1
   82fe2:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   82fe6:	6883      	ldr	r3, [r0, #8]
   82fe8:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 831a4 <_malloc_r+0x534>
   82fec:	4283      	cmp	r3, r0
   82fee:	f000 808a 	beq.w	83106 <_malloc_r+0x496>
   82ff2:	685a      	ldr	r2, [r3, #4]
   82ff4:	f022 0203 	bic.w	r2, r2, #3
   82ff8:	4291      	cmp	r1, r2
   82ffa:	d202      	bcs.n	83002 <_malloc_r+0x392>
   82ffc:	689b      	ldr	r3, [r3, #8]
   82ffe:	4298      	cmp	r0, r3
   83000:	d1f7      	bne.n	82ff2 <_malloc_r+0x382>
   83002:	68d9      	ldr	r1, [r3, #12]
   83004:	687a      	ldr	r2, [r7, #4]
   83006:	60e1      	str	r1, [r4, #12]
   83008:	60a3      	str	r3, [r4, #8]
   8300a:	608c      	str	r4, [r1, #8]
   8300c:	60dc      	str	r4, [r3, #12]
   8300e:	e6b6      	b.n	82d7e <_malloc_r+0x10e>
   83010:	f045 0701 	orr.w	r7, r5, #1
   83014:	f042 0101 	orr.w	r1, r2, #1
   83018:	4425      	add	r5, r4
   8301a:	6067      	str	r7, [r4, #4]
   8301c:	4630      	mov	r0, r6
   8301e:	615d      	str	r5, [r3, #20]
   83020:	611d      	str	r5, [r3, #16]
   83022:	f8c5 e00c 	str.w	lr, [r5, #12]
   83026:	f8c5 e008 	str.w	lr, [r5, #8]
   8302a:	6069      	str	r1, [r5, #4]
   8302c:	50aa      	str	r2, [r5, r2]
   8302e:	3408      	adds	r4, #8
   83030:	f000 f96c 	bl	8330c <__malloc_unlock>
   83034:	e648      	b.n	82cc8 <_malloc_r+0x58>
   83036:	685a      	ldr	r2, [r3, #4]
   83038:	e6a1      	b.n	82d7e <_malloc_r+0x10e>
   8303a:	f109 0901 	add.w	r9, r9, #1
   8303e:	f019 0f03 	tst.w	r9, #3
   83042:	f104 0408 	add.w	r4, r4, #8
   83046:	f47f aead 	bne.w	82da4 <_malloc_r+0x134>
   8304a:	e02d      	b.n	830a8 <_malloc_r+0x438>
   8304c:	f104 0308 	add.w	r3, r4, #8
   83050:	6964      	ldr	r4, [r4, #20]
   83052:	42a3      	cmp	r3, r4
   83054:	bf08      	it	eq
   83056:	f10c 0c02 	addeq.w	ip, ip, #2
   8305a:	f43f ae67 	beq.w	82d2c <_malloc_r+0xbc>
   8305e:	e623      	b.n	82ca8 <_malloc_r+0x38>
   83060:	4419      	add	r1, r3
   83062:	6848      	ldr	r0, [r1, #4]
   83064:	461c      	mov	r4, r3
   83066:	f854 2f08 	ldr.w	r2, [r4, #8]!
   8306a:	68db      	ldr	r3, [r3, #12]
   8306c:	f040 0501 	orr.w	r5, r0, #1
   83070:	604d      	str	r5, [r1, #4]
   83072:	4630      	mov	r0, r6
   83074:	60d3      	str	r3, [r2, #12]
   83076:	609a      	str	r2, [r3, #8]
   83078:	f000 f948 	bl	8330c <__malloc_unlock>
   8307c:	e624      	b.n	82cc8 <_malloc_r+0x58>
   8307e:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
   83082:	ea4f 014c 	mov.w	r1, ip, lsl #1
   83086:	e63b      	b.n	82d00 <_malloc_r+0x90>
   83088:	098a      	lsrs	r2, r1, #6
   8308a:	3238      	adds	r2, #56	; 0x38
   8308c:	0050      	lsls	r0, r2, #1
   8308e:	e7a8      	b.n	82fe2 <_malloc_r+0x372>
   83090:	42bc      	cmp	r4, r7
   83092:	f43f af02 	beq.w	82e9a <_malloc_r+0x22a>
   83096:	68bc      	ldr	r4, [r7, #8]
   83098:	6862      	ldr	r2, [r4, #4]
   8309a:	f022 0203 	bic.w	r2, r2, #3
   8309e:	e761      	b.n	82f64 <_malloc_r+0x2f4>
   830a0:	f8d8 8000 	ldr.w	r8, [r8]
   830a4:	4598      	cmp	r8, r3
   830a6:	d17a      	bne.n	8319e <_malloc_r+0x52e>
   830a8:	f01c 0f03 	tst.w	ip, #3
   830ac:	f1a8 0308 	sub.w	r3, r8, #8
   830b0:	f10c 3cff 	add.w	ip, ip, #4294967295
   830b4:	d1f4      	bne.n	830a0 <_malloc_r+0x430>
   830b6:	687b      	ldr	r3, [r7, #4]
   830b8:	ea23 0300 	bic.w	r3, r3, r0
   830bc:	607b      	str	r3, [r7, #4]
   830be:	0040      	lsls	r0, r0, #1
   830c0:	4298      	cmp	r0, r3
   830c2:	f63f aebe 	bhi.w	82e42 <_malloc_r+0x1d2>
   830c6:	2800      	cmp	r0, #0
   830c8:	f43f aebb 	beq.w	82e42 <_malloc_r+0x1d2>
   830cc:	4203      	tst	r3, r0
   830ce:	46cc      	mov	ip, r9
   830d0:	f47f ae64 	bne.w	82d9c <_malloc_r+0x12c>
   830d4:	0040      	lsls	r0, r0, #1
   830d6:	4203      	tst	r3, r0
   830d8:	f10c 0c04 	add.w	ip, ip, #4
   830dc:	d0fa      	beq.n	830d4 <_malloc_r+0x464>
   830de:	e65d      	b.n	82d9c <_malloc_r+0x12c>
   830e0:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
   830e4:	d819      	bhi.n	8311a <_malloc_r+0x4aa>
   830e6:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
   830ea:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
   830ee:	ea4f 014c 	mov.w	r1, ip, lsl #1
   830f2:	e605      	b.n	82d00 <_malloc_r+0x90>
   830f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   830f8:	e6ee      	b.n	82ed8 <_malloc_r+0x268>
   830fa:	2301      	movs	r3, #1
   830fc:	f8c8 3004 	str.w	r3, [r8, #4]
   83100:	4644      	mov	r4, r8
   83102:	2200      	movs	r2, #0
   83104:	e72e      	b.n	82f64 <_malloc_r+0x2f4>
   83106:	1092      	asrs	r2, r2, #2
   83108:	2001      	movs	r0, #1
   8310a:	4090      	lsls	r0, r2
   8310c:	f8d8 2004 	ldr.w	r2, [r8, #4]
   83110:	4619      	mov	r1, r3
   83112:	4302      	orrs	r2, r0
   83114:	f8c8 2004 	str.w	r2, [r8, #4]
   83118:	e775      	b.n	83006 <_malloc_r+0x396>
   8311a:	f240 5354 	movw	r3, #1364	; 0x554
   8311e:	459c      	cmp	ip, r3
   83120:	d81b      	bhi.n	8315a <_malloc_r+0x4ea>
   83122:	ea4f 4c95 	mov.w	ip, r5, lsr #18
   83126:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
   8312a:	ea4f 014c 	mov.w	r1, ip, lsl #1
   8312e:	e5e7      	b.n	82d00 <_malloc_r+0x90>
   83130:	f10a 0a10 	add.w	sl, sl, #16
   83134:	e6a3      	b.n	82e7e <_malloc_r+0x20e>
   83136:	2b54      	cmp	r3, #84	; 0x54
   83138:	d81f      	bhi.n	8317a <_malloc_r+0x50a>
   8313a:	0b0a      	lsrs	r2, r1, #12
   8313c:	326e      	adds	r2, #110	; 0x6e
   8313e:	0050      	lsls	r0, r2, #1
   83140:	e74f      	b.n	82fe2 <_malloc_r+0x372>
   83142:	f3cb 010b 	ubfx	r1, fp, #0, #12
   83146:	2900      	cmp	r1, #0
   83148:	f47f aeb1 	bne.w	82eae <_malloc_r+0x23e>
   8314c:	eb0a 0109 	add.w	r1, sl, r9
   83150:	68ba      	ldr	r2, [r7, #8]
   83152:	f041 0101 	orr.w	r1, r1, #1
   83156:	6051      	str	r1, [r2, #4]
   83158:	e6f6      	b.n	82f48 <_malloc_r+0x2d8>
   8315a:	21fc      	movs	r1, #252	; 0xfc
   8315c:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
   83160:	e5ce      	b.n	82d00 <_malloc_r+0x90>
   83162:	2201      	movs	r2, #1
   83164:	f04f 0a00 	mov.w	sl, #0
   83168:	e6cb      	b.n	82f02 <_malloc_r+0x292>
   8316a:	f104 0108 	add.w	r1, r4, #8
   8316e:	4630      	mov	r0, r6
   83170:	f7ff fa80 	bl	82674 <_free_r>
   83174:	f8da 3000 	ldr.w	r3, [sl]
   83178:	e6e6      	b.n	82f48 <_malloc_r+0x2d8>
   8317a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8317e:	d803      	bhi.n	83188 <_malloc_r+0x518>
   83180:	0bca      	lsrs	r2, r1, #15
   83182:	3277      	adds	r2, #119	; 0x77
   83184:	0050      	lsls	r0, r2, #1
   83186:	e72c      	b.n	82fe2 <_malloc_r+0x372>
   83188:	f240 5254 	movw	r2, #1364	; 0x554
   8318c:	4293      	cmp	r3, r2
   8318e:	d803      	bhi.n	83198 <_malloc_r+0x528>
   83190:	0c8a      	lsrs	r2, r1, #18
   83192:	327c      	adds	r2, #124	; 0x7c
   83194:	0050      	lsls	r0, r2, #1
   83196:	e724      	b.n	82fe2 <_malloc_r+0x372>
   83198:	20fc      	movs	r0, #252	; 0xfc
   8319a:	227e      	movs	r2, #126	; 0x7e
   8319c:	e721      	b.n	82fe2 <_malloc_r+0x372>
   8319e:	687b      	ldr	r3, [r7, #4]
   831a0:	e78d      	b.n	830be <_malloc_r+0x44e>
   831a2:	bf00      	nop
   831a4:	20070598 	.word	0x20070598

000831a8 <memchr>:
   831a8:	0783      	lsls	r3, r0, #30
   831aa:	b470      	push	{r4, r5, r6}
   831ac:	b2c9      	uxtb	r1, r1
   831ae:	d040      	beq.n	83232 <memchr+0x8a>
   831b0:	1e54      	subs	r4, r2, #1
   831b2:	b32a      	cbz	r2, 83200 <memchr+0x58>
   831b4:	7803      	ldrb	r3, [r0, #0]
   831b6:	428b      	cmp	r3, r1
   831b8:	d023      	beq.n	83202 <memchr+0x5a>
   831ba:	1c43      	adds	r3, r0, #1
   831bc:	e004      	b.n	831c8 <memchr+0x20>
   831be:	b1fc      	cbz	r4, 83200 <memchr+0x58>
   831c0:	7805      	ldrb	r5, [r0, #0]
   831c2:	4614      	mov	r4, r2
   831c4:	428d      	cmp	r5, r1
   831c6:	d01c      	beq.n	83202 <memchr+0x5a>
   831c8:	f013 0f03 	tst.w	r3, #3
   831cc:	4618      	mov	r0, r3
   831ce:	f104 32ff 	add.w	r2, r4, #4294967295
   831d2:	f103 0301 	add.w	r3, r3, #1
   831d6:	d1f2      	bne.n	831be <memchr+0x16>
   831d8:	2c03      	cmp	r4, #3
   831da:	d814      	bhi.n	83206 <memchr+0x5e>
   831dc:	1e65      	subs	r5, r4, #1
   831de:	b354      	cbz	r4, 83236 <memchr+0x8e>
   831e0:	7803      	ldrb	r3, [r0, #0]
   831e2:	428b      	cmp	r3, r1
   831e4:	d00d      	beq.n	83202 <memchr+0x5a>
   831e6:	1c42      	adds	r2, r0, #1
   831e8:	2300      	movs	r3, #0
   831ea:	e002      	b.n	831f2 <memchr+0x4a>
   831ec:	7804      	ldrb	r4, [r0, #0]
   831ee:	428c      	cmp	r4, r1
   831f0:	d007      	beq.n	83202 <memchr+0x5a>
   831f2:	42ab      	cmp	r3, r5
   831f4:	4610      	mov	r0, r2
   831f6:	f103 0301 	add.w	r3, r3, #1
   831fa:	f102 0201 	add.w	r2, r2, #1
   831fe:	d1f5      	bne.n	831ec <memchr+0x44>
   83200:	2000      	movs	r0, #0
   83202:	bc70      	pop	{r4, r5, r6}
   83204:	4770      	bx	lr
   83206:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
   8320a:	4603      	mov	r3, r0
   8320c:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   83210:	681a      	ldr	r2, [r3, #0]
   83212:	4618      	mov	r0, r3
   83214:	4072      	eors	r2, r6
   83216:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
   8321a:	ea25 0202 	bic.w	r2, r5, r2
   8321e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   83222:	f103 0304 	add.w	r3, r3, #4
   83226:	d1d9      	bne.n	831dc <memchr+0x34>
   83228:	3c04      	subs	r4, #4
   8322a:	2c03      	cmp	r4, #3
   8322c:	4618      	mov	r0, r3
   8322e:	d8ef      	bhi.n	83210 <memchr+0x68>
   83230:	e7d4      	b.n	831dc <memchr+0x34>
   83232:	4614      	mov	r4, r2
   83234:	e7d0      	b.n	831d8 <memchr+0x30>
   83236:	4620      	mov	r0, r4
   83238:	e7e3      	b.n	83202 <memchr+0x5a>
   8323a:	bf00      	nop

0008323c <memmove>:
   8323c:	4288      	cmp	r0, r1
   8323e:	b4f0      	push	{r4, r5, r6, r7}
   83240:	d910      	bls.n	83264 <memmove+0x28>
   83242:	188c      	adds	r4, r1, r2
   83244:	42a0      	cmp	r0, r4
   83246:	d20d      	bcs.n	83264 <memmove+0x28>
   83248:	1885      	adds	r5, r0, r2
   8324a:	1e53      	subs	r3, r2, #1
   8324c:	b142      	cbz	r2, 83260 <memmove+0x24>
   8324e:	4621      	mov	r1, r4
   83250:	462a      	mov	r2, r5
   83252:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
   83256:	3b01      	subs	r3, #1
   83258:	f802 4d01 	strb.w	r4, [r2, #-1]!
   8325c:	1c5c      	adds	r4, r3, #1
   8325e:	d1f8      	bne.n	83252 <memmove+0x16>
   83260:	bcf0      	pop	{r4, r5, r6, r7}
   83262:	4770      	bx	lr
   83264:	2a0f      	cmp	r2, #15
   83266:	d944      	bls.n	832f2 <memmove+0xb6>
   83268:	ea40 0301 	orr.w	r3, r0, r1
   8326c:	079b      	lsls	r3, r3, #30
   8326e:	d144      	bne.n	832fa <memmove+0xbe>
   83270:	f1a2 0710 	sub.w	r7, r2, #16
   83274:	093f      	lsrs	r7, r7, #4
   83276:	eb00 1607 	add.w	r6, r0, r7, lsl #4
   8327a:	3610      	adds	r6, #16
   8327c:	460c      	mov	r4, r1
   8327e:	4603      	mov	r3, r0
   83280:	6825      	ldr	r5, [r4, #0]
   83282:	3310      	adds	r3, #16
   83284:	f843 5c10 	str.w	r5, [r3, #-16]
   83288:	6865      	ldr	r5, [r4, #4]
   8328a:	3410      	adds	r4, #16
   8328c:	f843 5c0c 	str.w	r5, [r3, #-12]
   83290:	f854 5c08 	ldr.w	r5, [r4, #-8]
   83294:	f843 5c08 	str.w	r5, [r3, #-8]
   83298:	f854 5c04 	ldr.w	r5, [r4, #-4]
   8329c:	f843 5c04 	str.w	r5, [r3, #-4]
   832a0:	42b3      	cmp	r3, r6
   832a2:	d1ed      	bne.n	83280 <memmove+0x44>
   832a4:	1c7b      	adds	r3, r7, #1
   832a6:	f002 0c0f 	and.w	ip, r2, #15
   832aa:	011b      	lsls	r3, r3, #4
   832ac:	f1bc 0f03 	cmp.w	ip, #3
   832b0:	4419      	add	r1, r3
   832b2:	4403      	add	r3, r0
   832b4:	d923      	bls.n	832fe <memmove+0xc2>
   832b6:	460e      	mov	r6, r1
   832b8:	461d      	mov	r5, r3
   832ba:	4664      	mov	r4, ip
   832bc:	f856 7b04 	ldr.w	r7, [r6], #4
   832c0:	3c04      	subs	r4, #4
   832c2:	2c03      	cmp	r4, #3
   832c4:	f845 7b04 	str.w	r7, [r5], #4
   832c8:	d8f8      	bhi.n	832bc <memmove+0x80>
   832ca:	f1ac 0404 	sub.w	r4, ip, #4
   832ce:	f024 0403 	bic.w	r4, r4, #3
   832d2:	3404      	adds	r4, #4
   832d4:	f002 0203 	and.w	r2, r2, #3
   832d8:	4423      	add	r3, r4
   832da:	4421      	add	r1, r4
   832dc:	2a00      	cmp	r2, #0
   832de:	d0bf      	beq.n	83260 <memmove+0x24>
   832e0:	441a      	add	r2, r3
   832e2:	f811 4b01 	ldrb.w	r4, [r1], #1
   832e6:	f803 4b01 	strb.w	r4, [r3], #1
   832ea:	4293      	cmp	r3, r2
   832ec:	d1f9      	bne.n	832e2 <memmove+0xa6>
   832ee:	bcf0      	pop	{r4, r5, r6, r7}
   832f0:	4770      	bx	lr
   832f2:	4603      	mov	r3, r0
   832f4:	2a00      	cmp	r2, #0
   832f6:	d1f3      	bne.n	832e0 <memmove+0xa4>
   832f8:	e7b2      	b.n	83260 <memmove+0x24>
   832fa:	4603      	mov	r3, r0
   832fc:	e7f0      	b.n	832e0 <memmove+0xa4>
   832fe:	4662      	mov	r2, ip
   83300:	2a00      	cmp	r2, #0
   83302:	d1ed      	bne.n	832e0 <memmove+0xa4>
   83304:	e7ac      	b.n	83260 <memmove+0x24>
   83306:	bf00      	nop

00083308 <__malloc_lock>:
   83308:	4770      	bx	lr
   8330a:	bf00      	nop

0008330c <__malloc_unlock>:
   8330c:	4770      	bx	lr
   8330e:	bf00      	nop

00083310 <_realloc_r>:
   83310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83314:	460c      	mov	r4, r1
   83316:	b083      	sub	sp, #12
   83318:	4690      	mov	r8, r2
   8331a:	4681      	mov	r9, r0
   8331c:	2900      	cmp	r1, #0
   8331e:	f000 80ba 	beq.w	83496 <_realloc_r+0x186>
   83322:	f7ff fff1 	bl	83308 <__malloc_lock>
   83326:	f108 060b 	add.w	r6, r8, #11
   8332a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8332e:	2e16      	cmp	r6, #22
   83330:	f023 0503 	bic.w	r5, r3, #3
   83334:	f1a4 0708 	sub.w	r7, r4, #8
   83338:	d84b      	bhi.n	833d2 <_realloc_r+0xc2>
   8333a:	2110      	movs	r1, #16
   8333c:	460e      	mov	r6, r1
   8333e:	45b0      	cmp	r8, r6
   83340:	d84c      	bhi.n	833dc <_realloc_r+0xcc>
   83342:	428d      	cmp	r5, r1
   83344:	da51      	bge.n	833ea <_realloc_r+0xda>
   83346:	f8df b384 	ldr.w	fp, [pc, #900]	; 836cc <_realloc_r+0x3bc>
   8334a:	1978      	adds	r0, r7, r5
   8334c:	f8db e008 	ldr.w	lr, [fp, #8]
   83350:	4586      	cmp	lr, r0
   83352:	f000 80a6 	beq.w	834a2 <_realloc_r+0x192>
   83356:	6842      	ldr	r2, [r0, #4]
   83358:	f022 0c01 	bic.w	ip, r2, #1
   8335c:	4484      	add	ip, r0
   8335e:	f8dc c004 	ldr.w	ip, [ip, #4]
   83362:	f01c 0f01 	tst.w	ip, #1
   83366:	d054      	beq.n	83412 <_realloc_r+0x102>
   83368:	2200      	movs	r2, #0
   8336a:	4610      	mov	r0, r2
   8336c:	07db      	lsls	r3, r3, #31
   8336e:	d46f      	bmi.n	83450 <_realloc_r+0x140>
   83370:	f854 3c08 	ldr.w	r3, [r4, #-8]
   83374:	ebc3 0a07 	rsb	sl, r3, r7
   83378:	f8da 3004 	ldr.w	r3, [sl, #4]
   8337c:	f023 0303 	bic.w	r3, r3, #3
   83380:	442b      	add	r3, r5
   83382:	2800      	cmp	r0, #0
   83384:	d062      	beq.n	8344c <_realloc_r+0x13c>
   83386:	4570      	cmp	r0, lr
   83388:	f000 80e9 	beq.w	8355e <_realloc_r+0x24e>
   8338c:	eb02 0e03 	add.w	lr, r2, r3
   83390:	458e      	cmp	lr, r1
   83392:	db5b      	blt.n	8344c <_realloc_r+0x13c>
   83394:	68c3      	ldr	r3, [r0, #12]
   83396:	6882      	ldr	r2, [r0, #8]
   83398:	46d0      	mov	r8, sl
   8339a:	60d3      	str	r3, [r2, #12]
   8339c:	609a      	str	r2, [r3, #8]
   8339e:	f858 1f08 	ldr.w	r1, [r8, #8]!
   833a2:	f8da 300c 	ldr.w	r3, [sl, #12]
   833a6:	1f2a      	subs	r2, r5, #4
   833a8:	2a24      	cmp	r2, #36	; 0x24
   833aa:	60cb      	str	r3, [r1, #12]
   833ac:	6099      	str	r1, [r3, #8]
   833ae:	f200 8123 	bhi.w	835f8 <_realloc_r+0x2e8>
   833b2:	2a13      	cmp	r2, #19
   833b4:	f240 80b0 	bls.w	83518 <_realloc_r+0x208>
   833b8:	6823      	ldr	r3, [r4, #0]
   833ba:	2a1b      	cmp	r2, #27
   833bc:	f8ca 3008 	str.w	r3, [sl, #8]
   833c0:	6863      	ldr	r3, [r4, #4]
   833c2:	f8ca 300c 	str.w	r3, [sl, #12]
   833c6:	f200 812b 	bhi.w	83620 <_realloc_r+0x310>
   833ca:	3408      	adds	r4, #8
   833cc:	f10a 0310 	add.w	r3, sl, #16
   833d0:	e0a3      	b.n	8351a <_realloc_r+0x20a>
   833d2:	f026 0607 	bic.w	r6, r6, #7
   833d6:	2e00      	cmp	r6, #0
   833d8:	4631      	mov	r1, r6
   833da:	dab0      	bge.n	8333e <_realloc_r+0x2e>
   833dc:	230c      	movs	r3, #12
   833de:	2000      	movs	r0, #0
   833e0:	f8c9 3000 	str.w	r3, [r9]
   833e4:	b003      	add	sp, #12
   833e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   833ea:	46a0      	mov	r8, r4
   833ec:	1baa      	subs	r2, r5, r6
   833ee:	2a0f      	cmp	r2, #15
   833f0:	f003 0301 	and.w	r3, r3, #1
   833f4:	d81a      	bhi.n	8342c <_realloc_r+0x11c>
   833f6:	432b      	orrs	r3, r5
   833f8:	607b      	str	r3, [r7, #4]
   833fa:	443d      	add	r5, r7
   833fc:	686b      	ldr	r3, [r5, #4]
   833fe:	f043 0301 	orr.w	r3, r3, #1
   83402:	606b      	str	r3, [r5, #4]
   83404:	4648      	mov	r0, r9
   83406:	f7ff ff81 	bl	8330c <__malloc_unlock>
   8340a:	4640      	mov	r0, r8
   8340c:	b003      	add	sp, #12
   8340e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83412:	f022 0203 	bic.w	r2, r2, #3
   83416:	eb02 0c05 	add.w	ip, r2, r5
   8341a:	458c      	cmp	ip, r1
   8341c:	dba6      	blt.n	8336c <_realloc_r+0x5c>
   8341e:	68c2      	ldr	r2, [r0, #12]
   83420:	6881      	ldr	r1, [r0, #8]
   83422:	46a0      	mov	r8, r4
   83424:	60ca      	str	r2, [r1, #12]
   83426:	4665      	mov	r5, ip
   83428:	6091      	str	r1, [r2, #8]
   8342a:	e7df      	b.n	833ec <_realloc_r+0xdc>
   8342c:	19b9      	adds	r1, r7, r6
   8342e:	4333      	orrs	r3, r6
   83430:	f042 0001 	orr.w	r0, r2, #1
   83434:	607b      	str	r3, [r7, #4]
   83436:	440a      	add	r2, r1
   83438:	6048      	str	r0, [r1, #4]
   8343a:	6853      	ldr	r3, [r2, #4]
   8343c:	3108      	adds	r1, #8
   8343e:	f043 0301 	orr.w	r3, r3, #1
   83442:	6053      	str	r3, [r2, #4]
   83444:	4648      	mov	r0, r9
   83446:	f7ff f915 	bl	82674 <_free_r>
   8344a:	e7db      	b.n	83404 <_realloc_r+0xf4>
   8344c:	428b      	cmp	r3, r1
   8344e:	da33      	bge.n	834b8 <_realloc_r+0x1a8>
   83450:	4641      	mov	r1, r8
   83452:	4648      	mov	r0, r9
   83454:	f7ff fc0c 	bl	82c70 <_malloc_r>
   83458:	4680      	mov	r8, r0
   8345a:	2800      	cmp	r0, #0
   8345c:	d0d2      	beq.n	83404 <_realloc_r+0xf4>
   8345e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   83462:	f1a0 0108 	sub.w	r1, r0, #8
   83466:	f023 0201 	bic.w	r2, r3, #1
   8346a:	443a      	add	r2, r7
   8346c:	4291      	cmp	r1, r2
   8346e:	f000 80bc 	beq.w	835ea <_realloc_r+0x2da>
   83472:	1f2a      	subs	r2, r5, #4
   83474:	2a24      	cmp	r2, #36	; 0x24
   83476:	d86e      	bhi.n	83556 <_realloc_r+0x246>
   83478:	2a13      	cmp	r2, #19
   8347a:	d842      	bhi.n	83502 <_realloc_r+0x1f2>
   8347c:	4603      	mov	r3, r0
   8347e:	4622      	mov	r2, r4
   83480:	6811      	ldr	r1, [r2, #0]
   83482:	6019      	str	r1, [r3, #0]
   83484:	6851      	ldr	r1, [r2, #4]
   83486:	6059      	str	r1, [r3, #4]
   83488:	6892      	ldr	r2, [r2, #8]
   8348a:	609a      	str	r2, [r3, #8]
   8348c:	4621      	mov	r1, r4
   8348e:	4648      	mov	r0, r9
   83490:	f7ff f8f0 	bl	82674 <_free_r>
   83494:	e7b6      	b.n	83404 <_realloc_r+0xf4>
   83496:	4611      	mov	r1, r2
   83498:	b003      	add	sp, #12
   8349a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8349e:	f7ff bbe7 	b.w	82c70 <_malloc_r>
   834a2:	f8de 2004 	ldr.w	r2, [lr, #4]
   834a6:	f106 0c10 	add.w	ip, r6, #16
   834aa:	f022 0203 	bic.w	r2, r2, #3
   834ae:	1950      	adds	r0, r2, r5
   834b0:	4560      	cmp	r0, ip
   834b2:	da3d      	bge.n	83530 <_realloc_r+0x220>
   834b4:	4670      	mov	r0, lr
   834b6:	e759      	b.n	8336c <_realloc_r+0x5c>
   834b8:	46d0      	mov	r8, sl
   834ba:	f858 0f08 	ldr.w	r0, [r8, #8]!
   834be:	f8da 100c 	ldr.w	r1, [sl, #12]
   834c2:	1f2a      	subs	r2, r5, #4
   834c4:	2a24      	cmp	r2, #36	; 0x24
   834c6:	60c1      	str	r1, [r0, #12]
   834c8:	6088      	str	r0, [r1, #8]
   834ca:	f200 80a0 	bhi.w	8360e <_realloc_r+0x2fe>
   834ce:	2a13      	cmp	r2, #19
   834d0:	f240 809b 	bls.w	8360a <_realloc_r+0x2fa>
   834d4:	6821      	ldr	r1, [r4, #0]
   834d6:	2a1b      	cmp	r2, #27
   834d8:	f8ca 1008 	str.w	r1, [sl, #8]
   834dc:	6861      	ldr	r1, [r4, #4]
   834de:	f8ca 100c 	str.w	r1, [sl, #12]
   834e2:	f200 80b2 	bhi.w	8364a <_realloc_r+0x33a>
   834e6:	3408      	adds	r4, #8
   834e8:	f10a 0210 	add.w	r2, sl, #16
   834ec:	6821      	ldr	r1, [r4, #0]
   834ee:	461d      	mov	r5, r3
   834f0:	6011      	str	r1, [r2, #0]
   834f2:	6861      	ldr	r1, [r4, #4]
   834f4:	4657      	mov	r7, sl
   834f6:	6051      	str	r1, [r2, #4]
   834f8:	68a3      	ldr	r3, [r4, #8]
   834fa:	6093      	str	r3, [r2, #8]
   834fc:	f8da 3004 	ldr.w	r3, [sl, #4]
   83500:	e774      	b.n	833ec <_realloc_r+0xdc>
   83502:	6823      	ldr	r3, [r4, #0]
   83504:	2a1b      	cmp	r2, #27
   83506:	6003      	str	r3, [r0, #0]
   83508:	6863      	ldr	r3, [r4, #4]
   8350a:	6043      	str	r3, [r0, #4]
   8350c:	d862      	bhi.n	835d4 <_realloc_r+0x2c4>
   8350e:	f100 0308 	add.w	r3, r0, #8
   83512:	f104 0208 	add.w	r2, r4, #8
   83516:	e7b3      	b.n	83480 <_realloc_r+0x170>
   83518:	4643      	mov	r3, r8
   8351a:	6822      	ldr	r2, [r4, #0]
   8351c:	4675      	mov	r5, lr
   8351e:	601a      	str	r2, [r3, #0]
   83520:	6862      	ldr	r2, [r4, #4]
   83522:	4657      	mov	r7, sl
   83524:	605a      	str	r2, [r3, #4]
   83526:	68a2      	ldr	r2, [r4, #8]
   83528:	609a      	str	r2, [r3, #8]
   8352a:	f8da 3004 	ldr.w	r3, [sl, #4]
   8352e:	e75d      	b.n	833ec <_realloc_r+0xdc>
   83530:	1b83      	subs	r3, r0, r6
   83532:	4437      	add	r7, r6
   83534:	f043 0301 	orr.w	r3, r3, #1
   83538:	f8cb 7008 	str.w	r7, [fp, #8]
   8353c:	607b      	str	r3, [r7, #4]
   8353e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   83542:	4648      	mov	r0, r9
   83544:	f003 0301 	and.w	r3, r3, #1
   83548:	431e      	orrs	r6, r3
   8354a:	f844 6c04 	str.w	r6, [r4, #-4]
   8354e:	f7ff fedd 	bl	8330c <__malloc_unlock>
   83552:	4620      	mov	r0, r4
   83554:	e75a      	b.n	8340c <_realloc_r+0xfc>
   83556:	4621      	mov	r1, r4
   83558:	f7ff fe70 	bl	8323c <memmove>
   8355c:	e796      	b.n	8348c <_realloc_r+0x17c>
   8355e:	eb02 0c03 	add.w	ip, r2, r3
   83562:	f106 0210 	add.w	r2, r6, #16
   83566:	4594      	cmp	ip, r2
   83568:	f6ff af70 	blt.w	8344c <_realloc_r+0x13c>
   8356c:	4657      	mov	r7, sl
   8356e:	f857 1f08 	ldr.w	r1, [r7, #8]!
   83572:	f8da 300c 	ldr.w	r3, [sl, #12]
   83576:	1f2a      	subs	r2, r5, #4
   83578:	2a24      	cmp	r2, #36	; 0x24
   8357a:	60cb      	str	r3, [r1, #12]
   8357c:	6099      	str	r1, [r3, #8]
   8357e:	f200 8086 	bhi.w	8368e <_realloc_r+0x37e>
   83582:	2a13      	cmp	r2, #19
   83584:	d977      	bls.n	83676 <_realloc_r+0x366>
   83586:	6823      	ldr	r3, [r4, #0]
   83588:	2a1b      	cmp	r2, #27
   8358a:	f8ca 3008 	str.w	r3, [sl, #8]
   8358e:	6863      	ldr	r3, [r4, #4]
   83590:	f8ca 300c 	str.w	r3, [sl, #12]
   83594:	f200 8084 	bhi.w	836a0 <_realloc_r+0x390>
   83598:	3408      	adds	r4, #8
   8359a:	f10a 0310 	add.w	r3, sl, #16
   8359e:	6822      	ldr	r2, [r4, #0]
   835a0:	601a      	str	r2, [r3, #0]
   835a2:	6862      	ldr	r2, [r4, #4]
   835a4:	605a      	str	r2, [r3, #4]
   835a6:	68a2      	ldr	r2, [r4, #8]
   835a8:	609a      	str	r2, [r3, #8]
   835aa:	ebc6 020c 	rsb	r2, r6, ip
   835ae:	eb0a 0306 	add.w	r3, sl, r6
   835b2:	f042 0201 	orr.w	r2, r2, #1
   835b6:	f8cb 3008 	str.w	r3, [fp, #8]
   835ba:	605a      	str	r2, [r3, #4]
   835bc:	f8da 3004 	ldr.w	r3, [sl, #4]
   835c0:	4648      	mov	r0, r9
   835c2:	f003 0301 	and.w	r3, r3, #1
   835c6:	431e      	orrs	r6, r3
   835c8:	f8ca 6004 	str.w	r6, [sl, #4]
   835cc:	f7ff fe9e 	bl	8330c <__malloc_unlock>
   835d0:	4638      	mov	r0, r7
   835d2:	e71b      	b.n	8340c <_realloc_r+0xfc>
   835d4:	68a3      	ldr	r3, [r4, #8]
   835d6:	2a24      	cmp	r2, #36	; 0x24
   835d8:	6083      	str	r3, [r0, #8]
   835da:	68e3      	ldr	r3, [r4, #12]
   835dc:	60c3      	str	r3, [r0, #12]
   835de:	d02b      	beq.n	83638 <_realloc_r+0x328>
   835e0:	f100 0310 	add.w	r3, r0, #16
   835e4:	f104 0210 	add.w	r2, r4, #16
   835e8:	e74a      	b.n	83480 <_realloc_r+0x170>
   835ea:	f850 2c04 	ldr.w	r2, [r0, #-4]
   835ee:	46a0      	mov	r8, r4
   835f0:	f022 0203 	bic.w	r2, r2, #3
   835f4:	4415      	add	r5, r2
   835f6:	e6f9      	b.n	833ec <_realloc_r+0xdc>
   835f8:	4621      	mov	r1, r4
   835fa:	4640      	mov	r0, r8
   835fc:	4675      	mov	r5, lr
   835fe:	4657      	mov	r7, sl
   83600:	f7ff fe1c 	bl	8323c <memmove>
   83604:	f8da 3004 	ldr.w	r3, [sl, #4]
   83608:	e6f0      	b.n	833ec <_realloc_r+0xdc>
   8360a:	4642      	mov	r2, r8
   8360c:	e76e      	b.n	834ec <_realloc_r+0x1dc>
   8360e:	4621      	mov	r1, r4
   83610:	4640      	mov	r0, r8
   83612:	461d      	mov	r5, r3
   83614:	4657      	mov	r7, sl
   83616:	f7ff fe11 	bl	8323c <memmove>
   8361a:	f8da 3004 	ldr.w	r3, [sl, #4]
   8361e:	e6e5      	b.n	833ec <_realloc_r+0xdc>
   83620:	68a3      	ldr	r3, [r4, #8]
   83622:	2a24      	cmp	r2, #36	; 0x24
   83624:	f8ca 3010 	str.w	r3, [sl, #16]
   83628:	68e3      	ldr	r3, [r4, #12]
   8362a:	f8ca 3014 	str.w	r3, [sl, #20]
   8362e:	d018      	beq.n	83662 <_realloc_r+0x352>
   83630:	3410      	adds	r4, #16
   83632:	f10a 0318 	add.w	r3, sl, #24
   83636:	e770      	b.n	8351a <_realloc_r+0x20a>
   83638:	6922      	ldr	r2, [r4, #16]
   8363a:	f100 0318 	add.w	r3, r0, #24
   8363e:	6102      	str	r2, [r0, #16]
   83640:	6961      	ldr	r1, [r4, #20]
   83642:	f104 0218 	add.w	r2, r4, #24
   83646:	6141      	str	r1, [r0, #20]
   83648:	e71a      	b.n	83480 <_realloc_r+0x170>
   8364a:	68a1      	ldr	r1, [r4, #8]
   8364c:	2a24      	cmp	r2, #36	; 0x24
   8364e:	f8ca 1010 	str.w	r1, [sl, #16]
   83652:	68e1      	ldr	r1, [r4, #12]
   83654:	f8ca 1014 	str.w	r1, [sl, #20]
   83658:	d00f      	beq.n	8367a <_realloc_r+0x36a>
   8365a:	3410      	adds	r4, #16
   8365c:	f10a 0218 	add.w	r2, sl, #24
   83660:	e744      	b.n	834ec <_realloc_r+0x1dc>
   83662:	6922      	ldr	r2, [r4, #16]
   83664:	f10a 0320 	add.w	r3, sl, #32
   83668:	f8ca 2018 	str.w	r2, [sl, #24]
   8366c:	6962      	ldr	r2, [r4, #20]
   8366e:	3418      	adds	r4, #24
   83670:	f8ca 201c 	str.w	r2, [sl, #28]
   83674:	e751      	b.n	8351a <_realloc_r+0x20a>
   83676:	463b      	mov	r3, r7
   83678:	e791      	b.n	8359e <_realloc_r+0x28e>
   8367a:	6921      	ldr	r1, [r4, #16]
   8367c:	f10a 0220 	add.w	r2, sl, #32
   83680:	f8ca 1018 	str.w	r1, [sl, #24]
   83684:	6961      	ldr	r1, [r4, #20]
   83686:	3418      	adds	r4, #24
   83688:	f8ca 101c 	str.w	r1, [sl, #28]
   8368c:	e72e      	b.n	834ec <_realloc_r+0x1dc>
   8368e:	4621      	mov	r1, r4
   83690:	4638      	mov	r0, r7
   83692:	f8cd c004 	str.w	ip, [sp, #4]
   83696:	f7ff fdd1 	bl	8323c <memmove>
   8369a:	f8dd c004 	ldr.w	ip, [sp, #4]
   8369e:	e784      	b.n	835aa <_realloc_r+0x29a>
   836a0:	68a3      	ldr	r3, [r4, #8]
   836a2:	2a24      	cmp	r2, #36	; 0x24
   836a4:	f8ca 3010 	str.w	r3, [sl, #16]
   836a8:	68e3      	ldr	r3, [r4, #12]
   836aa:	f8ca 3014 	str.w	r3, [sl, #20]
   836ae:	d003      	beq.n	836b8 <_realloc_r+0x3a8>
   836b0:	3410      	adds	r4, #16
   836b2:	f10a 0318 	add.w	r3, sl, #24
   836b6:	e772      	b.n	8359e <_realloc_r+0x28e>
   836b8:	6922      	ldr	r2, [r4, #16]
   836ba:	f10a 0320 	add.w	r3, sl, #32
   836be:	f8ca 2018 	str.w	r2, [sl, #24]
   836c2:	6962      	ldr	r2, [r4, #20]
   836c4:	3418      	adds	r4, #24
   836c6:	f8ca 201c 	str.w	r2, [sl, #28]
   836ca:	e768      	b.n	8359e <_realloc_r+0x28e>
   836cc:	20070598 	.word	0x20070598

000836d0 <_sbrk_r>:
   836d0:	b538      	push	{r3, r4, r5, lr}
   836d2:	4c07      	ldr	r4, [pc, #28]	; (836f0 <_sbrk_r+0x20>)
   836d4:	2300      	movs	r3, #0
   836d6:	4605      	mov	r5, r0
   836d8:	4608      	mov	r0, r1
   836da:	6023      	str	r3, [r4, #0]
   836dc:	f7fd fba8 	bl	80e30 <_sbrk>
   836e0:	1c43      	adds	r3, r0, #1
   836e2:	d000      	beq.n	836e6 <_sbrk_r+0x16>
   836e4:	bd38      	pop	{r3, r4, r5, pc}
   836e6:	6823      	ldr	r3, [r4, #0]
   836e8:	2b00      	cmp	r3, #0
   836ea:	d0fb      	beq.n	836e4 <_sbrk_r+0x14>
   836ec:	602b      	str	r3, [r5, #0]
   836ee:	bd38      	pop	{r3, r4, r5, pc}
   836f0:	20070ba8 	.word	0x20070ba8

000836f4 <__sread>:
   836f4:	b510      	push	{r4, lr}
   836f6:	460c      	mov	r4, r1
   836f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   836fc:	f000 f9c2 	bl	83a84 <_read_r>
   83700:	2800      	cmp	r0, #0
   83702:	db03      	blt.n	8370c <__sread+0x18>
   83704:	6d23      	ldr	r3, [r4, #80]	; 0x50
   83706:	4403      	add	r3, r0
   83708:	6523      	str	r3, [r4, #80]	; 0x50
   8370a:	bd10      	pop	{r4, pc}
   8370c:	89a3      	ldrh	r3, [r4, #12]
   8370e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   83712:	81a3      	strh	r3, [r4, #12]
   83714:	bd10      	pop	{r4, pc}
   83716:	bf00      	nop

00083718 <__swrite>:
   83718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8371c:	460c      	mov	r4, r1
   8371e:	8989      	ldrh	r1, [r1, #12]
   83720:	461d      	mov	r5, r3
   83722:	05cb      	lsls	r3, r1, #23
   83724:	4616      	mov	r6, r2
   83726:	4607      	mov	r7, r0
   83728:	d506      	bpl.n	83738 <__swrite+0x20>
   8372a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8372e:	2200      	movs	r2, #0
   83730:	2302      	movs	r3, #2
   83732:	f000 f993 	bl	83a5c <_lseek_r>
   83736:	89a1      	ldrh	r1, [r4, #12]
   83738:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   8373c:	81a1      	strh	r1, [r4, #12]
   8373e:	4638      	mov	r0, r7
   83740:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   83744:	4632      	mov	r2, r6
   83746:	462b      	mov	r3, r5
   83748:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8374c:	f000 b89e 	b.w	8388c <_write_r>

00083750 <__sseek>:
   83750:	b510      	push	{r4, lr}
   83752:	460c      	mov	r4, r1
   83754:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83758:	f000 f980 	bl	83a5c <_lseek_r>
   8375c:	89a3      	ldrh	r3, [r4, #12]
   8375e:	1c42      	adds	r2, r0, #1
   83760:	bf0e      	itee	eq
   83762:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   83766:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   8376a:	6520      	strne	r0, [r4, #80]	; 0x50
   8376c:	81a3      	strh	r3, [r4, #12]
   8376e:	bd10      	pop	{r4, pc}

00083770 <__sclose>:
   83770:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83774:	f000 b8f2 	b.w	8395c <_close_r>

00083778 <__swbuf_r>:
   83778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8377a:	460d      	mov	r5, r1
   8377c:	4614      	mov	r4, r2
   8377e:	4607      	mov	r7, r0
   83780:	b110      	cbz	r0, 83788 <__swbuf_r+0x10>
   83782:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83784:	2b00      	cmp	r3, #0
   83786:	d048      	beq.n	8381a <__swbuf_r+0xa2>
   83788:	89a2      	ldrh	r2, [r4, #12]
   8378a:	69a0      	ldr	r0, [r4, #24]
   8378c:	b293      	uxth	r3, r2
   8378e:	60a0      	str	r0, [r4, #8]
   83790:	0718      	lsls	r0, r3, #28
   83792:	d538      	bpl.n	83806 <__swbuf_r+0x8e>
   83794:	6926      	ldr	r6, [r4, #16]
   83796:	2e00      	cmp	r6, #0
   83798:	d035      	beq.n	83806 <__swbuf_r+0x8e>
   8379a:	0499      	lsls	r1, r3, #18
   8379c:	b2ed      	uxtb	r5, r5
   8379e:	d515      	bpl.n	837cc <__swbuf_r+0x54>
   837a0:	6823      	ldr	r3, [r4, #0]
   837a2:	6962      	ldr	r2, [r4, #20]
   837a4:	1b9e      	subs	r6, r3, r6
   837a6:	4296      	cmp	r6, r2
   837a8:	da1c      	bge.n	837e4 <__swbuf_r+0x6c>
   837aa:	3601      	adds	r6, #1
   837ac:	68a2      	ldr	r2, [r4, #8]
   837ae:	1c59      	adds	r1, r3, #1
   837b0:	3a01      	subs	r2, #1
   837b2:	60a2      	str	r2, [r4, #8]
   837b4:	6021      	str	r1, [r4, #0]
   837b6:	701d      	strb	r5, [r3, #0]
   837b8:	6963      	ldr	r3, [r4, #20]
   837ba:	42b3      	cmp	r3, r6
   837bc:	d01a      	beq.n	837f4 <__swbuf_r+0x7c>
   837be:	89a3      	ldrh	r3, [r4, #12]
   837c0:	07db      	lsls	r3, r3, #31
   837c2:	d501      	bpl.n	837c8 <__swbuf_r+0x50>
   837c4:	2d0a      	cmp	r5, #10
   837c6:	d015      	beq.n	837f4 <__swbuf_r+0x7c>
   837c8:	4628      	mov	r0, r5
   837ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   837cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
   837ce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   837d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   837d6:	6663      	str	r3, [r4, #100]	; 0x64
   837d8:	6823      	ldr	r3, [r4, #0]
   837da:	81a2      	strh	r2, [r4, #12]
   837dc:	6962      	ldr	r2, [r4, #20]
   837de:	1b9e      	subs	r6, r3, r6
   837e0:	4296      	cmp	r6, r2
   837e2:	dbe2      	blt.n	837aa <__swbuf_r+0x32>
   837e4:	4638      	mov	r0, r7
   837e6:	4621      	mov	r1, r4
   837e8:	f7fe fde4 	bl	823b4 <_fflush_r>
   837ec:	b940      	cbnz	r0, 83800 <__swbuf_r+0x88>
   837ee:	6823      	ldr	r3, [r4, #0]
   837f0:	2601      	movs	r6, #1
   837f2:	e7db      	b.n	837ac <__swbuf_r+0x34>
   837f4:	4638      	mov	r0, r7
   837f6:	4621      	mov	r1, r4
   837f8:	f7fe fddc 	bl	823b4 <_fflush_r>
   837fc:	2800      	cmp	r0, #0
   837fe:	d0e3      	beq.n	837c8 <__swbuf_r+0x50>
   83800:	f04f 30ff 	mov.w	r0, #4294967295
   83804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83806:	4638      	mov	r0, r7
   83808:	4621      	mov	r1, r4
   8380a:	f7fe fcbd 	bl	82188 <__swsetup_r>
   8380e:	2800      	cmp	r0, #0
   83810:	d1f6      	bne.n	83800 <__swbuf_r+0x88>
   83812:	89a2      	ldrh	r2, [r4, #12]
   83814:	6926      	ldr	r6, [r4, #16]
   83816:	b293      	uxth	r3, r2
   83818:	e7bf      	b.n	8379a <__swbuf_r+0x22>
   8381a:	f7fe fde7 	bl	823ec <__sinit>
   8381e:	e7b3      	b.n	83788 <__swbuf_r+0x10>

00083820 <_wcrtomb_r>:
   83820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83824:	461e      	mov	r6, r3
   83826:	b086      	sub	sp, #24
   83828:	460c      	mov	r4, r1
   8382a:	4605      	mov	r5, r0
   8382c:	4617      	mov	r7, r2
   8382e:	4b0f      	ldr	r3, [pc, #60]	; (8386c <_wcrtomb_r+0x4c>)
   83830:	b191      	cbz	r1, 83858 <_wcrtomb_r+0x38>
   83832:	f8d3 8000 	ldr.w	r8, [r3]
   83836:	f7ff f999 	bl	82b6c <__locale_charset>
   8383a:	9600      	str	r6, [sp, #0]
   8383c:	4603      	mov	r3, r0
   8383e:	4621      	mov	r1, r4
   83840:	463a      	mov	r2, r7
   83842:	4628      	mov	r0, r5
   83844:	47c0      	blx	r8
   83846:	1c43      	adds	r3, r0, #1
   83848:	d103      	bne.n	83852 <_wcrtomb_r+0x32>
   8384a:	2200      	movs	r2, #0
   8384c:	238a      	movs	r3, #138	; 0x8a
   8384e:	6032      	str	r2, [r6, #0]
   83850:	602b      	str	r3, [r5, #0]
   83852:	b006      	add	sp, #24
   83854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83858:	681f      	ldr	r7, [r3, #0]
   8385a:	f7ff f987 	bl	82b6c <__locale_charset>
   8385e:	9600      	str	r6, [sp, #0]
   83860:	4603      	mov	r3, r0
   83862:	4622      	mov	r2, r4
   83864:	4628      	mov	r0, r5
   83866:	a903      	add	r1, sp, #12
   83868:	47b8      	blx	r7
   8386a:	e7ec      	b.n	83846 <_wcrtomb_r+0x26>
   8386c:	200709a8 	.word	0x200709a8

00083870 <__ascii_wctomb>:
   83870:	b121      	cbz	r1, 8387c <__ascii_wctomb+0xc>
   83872:	2aff      	cmp	r2, #255	; 0xff
   83874:	d804      	bhi.n	83880 <__ascii_wctomb+0x10>
   83876:	700a      	strb	r2, [r1, #0]
   83878:	2001      	movs	r0, #1
   8387a:	4770      	bx	lr
   8387c:	4608      	mov	r0, r1
   8387e:	4770      	bx	lr
   83880:	238a      	movs	r3, #138	; 0x8a
   83882:	6003      	str	r3, [r0, #0]
   83884:	f04f 30ff 	mov.w	r0, #4294967295
   83888:	4770      	bx	lr
   8388a:	bf00      	nop

0008388c <_write_r>:
   8388c:	b570      	push	{r4, r5, r6, lr}
   8388e:	4c08      	ldr	r4, [pc, #32]	; (838b0 <_write_r+0x24>)
   83890:	4606      	mov	r6, r0
   83892:	2500      	movs	r5, #0
   83894:	4608      	mov	r0, r1
   83896:	4611      	mov	r1, r2
   83898:	461a      	mov	r2, r3
   8389a:	6025      	str	r5, [r4, #0]
   8389c:	f7fc fe5c 	bl	80558 <_write>
   838a0:	1c43      	adds	r3, r0, #1
   838a2:	d000      	beq.n	838a6 <_write_r+0x1a>
   838a4:	bd70      	pop	{r4, r5, r6, pc}
   838a6:	6823      	ldr	r3, [r4, #0]
   838a8:	2b00      	cmp	r3, #0
   838aa:	d0fb      	beq.n	838a4 <_write_r+0x18>
   838ac:	6033      	str	r3, [r6, #0]
   838ae:	bd70      	pop	{r4, r5, r6, pc}
   838b0:	20070ba8 	.word	0x20070ba8

000838b4 <__register_exitproc>:
   838b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   838b6:	4c27      	ldr	r4, [pc, #156]	; (83954 <__register_exitproc+0xa0>)
   838b8:	b085      	sub	sp, #20
   838ba:	6826      	ldr	r6, [r4, #0]
   838bc:	4607      	mov	r7, r0
   838be:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   838c2:	2c00      	cmp	r4, #0
   838c4:	d040      	beq.n	83948 <__register_exitproc+0x94>
   838c6:	6865      	ldr	r5, [r4, #4]
   838c8:	2d1f      	cmp	r5, #31
   838ca:	dd1e      	ble.n	8390a <__register_exitproc+0x56>
   838cc:	4822      	ldr	r0, [pc, #136]	; (83958 <__register_exitproc+0xa4>)
   838ce:	b918      	cbnz	r0, 838d8 <__register_exitproc+0x24>
   838d0:	f04f 30ff 	mov.w	r0, #4294967295
   838d4:	b005      	add	sp, #20
   838d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   838d8:	f44f 70c8 	mov.w	r0, #400	; 0x190
   838dc:	9103      	str	r1, [sp, #12]
   838de:	9202      	str	r2, [sp, #8]
   838e0:	9301      	str	r3, [sp, #4]
   838e2:	f7ff f9bd 	bl	82c60 <malloc>
   838e6:	9903      	ldr	r1, [sp, #12]
   838e8:	4604      	mov	r4, r0
   838ea:	9a02      	ldr	r2, [sp, #8]
   838ec:	9b01      	ldr	r3, [sp, #4]
   838ee:	2800      	cmp	r0, #0
   838f0:	d0ee      	beq.n	838d0 <__register_exitproc+0x1c>
   838f2:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
   838f6:	2000      	movs	r0, #0
   838f8:	6025      	str	r5, [r4, #0]
   838fa:	6060      	str	r0, [r4, #4]
   838fc:	4605      	mov	r5, r0
   838fe:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   83902:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   83906:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   8390a:	b93f      	cbnz	r7, 8391c <__register_exitproc+0x68>
   8390c:	1c6b      	adds	r3, r5, #1
   8390e:	2000      	movs	r0, #0
   83910:	3502      	adds	r5, #2
   83912:	6063      	str	r3, [r4, #4]
   83914:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
   83918:	b005      	add	sp, #20
   8391a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8391c:	2601      	movs	r6, #1
   8391e:	40ae      	lsls	r6, r5
   83920:	eb04 0085 	add.w	r0, r4, r5, lsl #2
   83924:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   83928:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   8392c:	2f02      	cmp	r7, #2
   8392e:	ea42 0206 	orr.w	r2, r2, r6
   83932:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   83936:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   8393a:	d1e7      	bne.n	8390c <__register_exitproc+0x58>
   8393c:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   83940:	431e      	orrs	r6, r3
   83942:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
   83946:	e7e1      	b.n	8390c <__register_exitproc+0x58>
   83948:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   8394c:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   83950:	e7b9      	b.n	838c6 <__register_exitproc+0x12>
   83952:	bf00      	nop
   83954:	000840a0 	.word	0x000840a0
   83958:	00082c61 	.word	0x00082c61

0008395c <_close_r>:
   8395c:	b538      	push	{r3, r4, r5, lr}
   8395e:	4c07      	ldr	r4, [pc, #28]	; (8397c <_close_r+0x20>)
   83960:	2300      	movs	r3, #0
   83962:	4605      	mov	r5, r0
   83964:	4608      	mov	r0, r1
   83966:	6023      	str	r3, [r4, #0]
   83968:	f7fd fa7c 	bl	80e64 <_close>
   8396c:	1c43      	adds	r3, r0, #1
   8396e:	d000      	beq.n	83972 <_close_r+0x16>
   83970:	bd38      	pop	{r3, r4, r5, pc}
   83972:	6823      	ldr	r3, [r4, #0]
   83974:	2b00      	cmp	r3, #0
   83976:	d0fb      	beq.n	83970 <_close_r+0x14>
   83978:	602b      	str	r3, [r5, #0]
   8397a:	bd38      	pop	{r3, r4, r5, pc}
   8397c:	20070ba8 	.word	0x20070ba8

00083980 <_fclose_r>:
   83980:	b570      	push	{r4, r5, r6, lr}
   83982:	460c      	mov	r4, r1
   83984:	4605      	mov	r5, r0
   83986:	b131      	cbz	r1, 83996 <_fclose_r+0x16>
   83988:	b110      	cbz	r0, 83990 <_fclose_r+0x10>
   8398a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8398c:	2b00      	cmp	r3, #0
   8398e:	d02f      	beq.n	839f0 <_fclose_r+0x70>
   83990:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83994:	b90b      	cbnz	r3, 8399a <_fclose_r+0x1a>
   83996:	2000      	movs	r0, #0
   83998:	bd70      	pop	{r4, r5, r6, pc}
   8399a:	4628      	mov	r0, r5
   8399c:	4621      	mov	r1, r4
   8399e:	f7fe fd09 	bl	823b4 <_fflush_r>
   839a2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   839a4:	4606      	mov	r6, r0
   839a6:	b133      	cbz	r3, 839b6 <_fclose_r+0x36>
   839a8:	4628      	mov	r0, r5
   839aa:	69e1      	ldr	r1, [r4, #28]
   839ac:	4798      	blx	r3
   839ae:	2800      	cmp	r0, #0
   839b0:	bfb8      	it	lt
   839b2:	f04f 36ff 	movlt.w	r6, #4294967295
   839b6:	89a3      	ldrh	r3, [r4, #12]
   839b8:	061b      	lsls	r3, r3, #24
   839ba:	d41c      	bmi.n	839f6 <_fclose_r+0x76>
   839bc:	6b21      	ldr	r1, [r4, #48]	; 0x30
   839be:	b141      	cbz	r1, 839d2 <_fclose_r+0x52>
   839c0:	f104 0340 	add.w	r3, r4, #64	; 0x40
   839c4:	4299      	cmp	r1, r3
   839c6:	d002      	beq.n	839ce <_fclose_r+0x4e>
   839c8:	4628      	mov	r0, r5
   839ca:	f7fe fe53 	bl	82674 <_free_r>
   839ce:	2300      	movs	r3, #0
   839d0:	6323      	str	r3, [r4, #48]	; 0x30
   839d2:	6c61      	ldr	r1, [r4, #68]	; 0x44
   839d4:	b121      	cbz	r1, 839e0 <_fclose_r+0x60>
   839d6:	4628      	mov	r0, r5
   839d8:	f7fe fe4c 	bl	82674 <_free_r>
   839dc:	2300      	movs	r3, #0
   839de:	6463      	str	r3, [r4, #68]	; 0x44
   839e0:	f7fe fd7e 	bl	824e0 <__sfp_lock_acquire>
   839e4:	2300      	movs	r3, #0
   839e6:	81a3      	strh	r3, [r4, #12]
   839e8:	f7fe fd7c 	bl	824e4 <__sfp_lock_release>
   839ec:	4630      	mov	r0, r6
   839ee:	bd70      	pop	{r4, r5, r6, pc}
   839f0:	f7fe fcfc 	bl	823ec <__sinit>
   839f4:	e7cc      	b.n	83990 <_fclose_r+0x10>
   839f6:	4628      	mov	r0, r5
   839f8:	6921      	ldr	r1, [r4, #16]
   839fa:	f7fe fe3b 	bl	82674 <_free_r>
   839fe:	e7dd      	b.n	839bc <_fclose_r+0x3c>

00083a00 <fclose>:
   83a00:	4b02      	ldr	r3, [pc, #8]	; (83a0c <fclose+0xc>)
   83a02:	4601      	mov	r1, r0
   83a04:	6818      	ldr	r0, [r3, #0]
   83a06:	f7ff bfbb 	b.w	83980 <_fclose_r>
   83a0a:	bf00      	nop
   83a0c:	20070570 	.word	0x20070570

00083a10 <_fstat_r>:
   83a10:	b538      	push	{r3, r4, r5, lr}
   83a12:	4c08      	ldr	r4, [pc, #32]	; (83a34 <_fstat_r+0x24>)
   83a14:	2300      	movs	r3, #0
   83a16:	4605      	mov	r5, r0
   83a18:	4608      	mov	r0, r1
   83a1a:	4611      	mov	r1, r2
   83a1c:	6023      	str	r3, [r4, #0]
   83a1e:	f7fd fa25 	bl	80e6c <_fstat>
   83a22:	1c43      	adds	r3, r0, #1
   83a24:	d000      	beq.n	83a28 <_fstat_r+0x18>
   83a26:	bd38      	pop	{r3, r4, r5, pc}
   83a28:	6823      	ldr	r3, [r4, #0]
   83a2a:	2b00      	cmp	r3, #0
   83a2c:	d0fb      	beq.n	83a26 <_fstat_r+0x16>
   83a2e:	602b      	str	r3, [r5, #0]
   83a30:	bd38      	pop	{r3, r4, r5, pc}
   83a32:	bf00      	nop
   83a34:	20070ba8 	.word	0x20070ba8

00083a38 <_isatty_r>:
   83a38:	b538      	push	{r3, r4, r5, lr}
   83a3a:	4c07      	ldr	r4, [pc, #28]	; (83a58 <_isatty_r+0x20>)
   83a3c:	2300      	movs	r3, #0
   83a3e:	4605      	mov	r5, r0
   83a40:	4608      	mov	r0, r1
   83a42:	6023      	str	r3, [r4, #0]
   83a44:	f7fd fa18 	bl	80e78 <_isatty>
   83a48:	1c43      	adds	r3, r0, #1
   83a4a:	d000      	beq.n	83a4e <_isatty_r+0x16>
   83a4c:	bd38      	pop	{r3, r4, r5, pc}
   83a4e:	6823      	ldr	r3, [r4, #0]
   83a50:	2b00      	cmp	r3, #0
   83a52:	d0fb      	beq.n	83a4c <_isatty_r+0x14>
   83a54:	602b      	str	r3, [r5, #0]
   83a56:	bd38      	pop	{r3, r4, r5, pc}
   83a58:	20070ba8 	.word	0x20070ba8

00083a5c <_lseek_r>:
   83a5c:	b570      	push	{r4, r5, r6, lr}
   83a5e:	4c08      	ldr	r4, [pc, #32]	; (83a80 <_lseek_r+0x24>)
   83a60:	4606      	mov	r6, r0
   83a62:	2500      	movs	r5, #0
   83a64:	4608      	mov	r0, r1
   83a66:	4611      	mov	r1, r2
   83a68:	461a      	mov	r2, r3
   83a6a:	6025      	str	r5, [r4, #0]
   83a6c:	f7fd fa06 	bl	80e7c <_lseek>
   83a70:	1c43      	adds	r3, r0, #1
   83a72:	d000      	beq.n	83a76 <_lseek_r+0x1a>
   83a74:	bd70      	pop	{r4, r5, r6, pc}
   83a76:	6823      	ldr	r3, [r4, #0]
   83a78:	2b00      	cmp	r3, #0
   83a7a:	d0fb      	beq.n	83a74 <_lseek_r+0x18>
   83a7c:	6033      	str	r3, [r6, #0]
   83a7e:	bd70      	pop	{r4, r5, r6, pc}
   83a80:	20070ba8 	.word	0x20070ba8

00083a84 <_read_r>:
   83a84:	b570      	push	{r4, r5, r6, lr}
   83a86:	4c08      	ldr	r4, [pc, #32]	; (83aa8 <_read_r+0x24>)
   83a88:	4606      	mov	r6, r0
   83a8a:	2500      	movs	r5, #0
   83a8c:	4608      	mov	r0, r1
   83a8e:	4611      	mov	r1, r2
   83a90:	461a      	mov	r2, r3
   83a92:	6025      	str	r5, [r4, #0]
   83a94:	f7fc fbb0 	bl	801f8 <_read>
   83a98:	1c43      	adds	r3, r0, #1
   83a9a:	d000      	beq.n	83a9e <_read_r+0x1a>
   83a9c:	bd70      	pop	{r4, r5, r6, pc}
   83a9e:	6823      	ldr	r3, [r4, #0]
   83aa0:	2b00      	cmp	r3, #0
   83aa2:	d0fb      	beq.n	83a9c <_read_r+0x18>
   83aa4:	6033      	str	r3, [r6, #0]
   83aa6:	bd70      	pop	{r4, r5, r6, pc}
   83aa8:	20070ba8 	.word	0x20070ba8

00083aac <__aeabi_uldivmod>:
   83aac:	b94b      	cbnz	r3, 83ac2 <__aeabi_uldivmod+0x16>
   83aae:	b942      	cbnz	r2, 83ac2 <__aeabi_uldivmod+0x16>
   83ab0:	2900      	cmp	r1, #0
   83ab2:	bf08      	it	eq
   83ab4:	2800      	cmpeq	r0, #0
   83ab6:	d002      	beq.n	83abe <__aeabi_uldivmod+0x12>
   83ab8:	f04f 31ff 	mov.w	r1, #4294967295
   83abc:	4608      	mov	r0, r1
   83abe:	f000 b83b 	b.w	83b38 <__aeabi_idiv0>
   83ac2:	b082      	sub	sp, #8
   83ac4:	46ec      	mov	ip, sp
   83ac6:	e92d 5000 	stmdb	sp!, {ip, lr}
   83aca:	f000 f81d 	bl	83b08 <__gnu_uldivmod_helper>
   83ace:	f8dd e004 	ldr.w	lr, [sp, #4]
   83ad2:	b002      	add	sp, #8
   83ad4:	bc0c      	pop	{r2, r3}
   83ad6:	4770      	bx	lr

00083ad8 <__gnu_ldivmod_helper>:
   83ad8:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   83adc:	9e08      	ldr	r6, [sp, #32]
   83ade:	4614      	mov	r4, r2
   83ae0:	461d      	mov	r5, r3
   83ae2:	4680      	mov	r8, r0
   83ae4:	4689      	mov	r9, r1
   83ae6:	f000 f829 	bl	83b3c <__divdi3>
   83aea:	fb04 f301 	mul.w	r3, r4, r1
   83aee:	fba4 ab00 	umull	sl, fp, r4, r0
   83af2:	fb00 3205 	mla	r2, r0, r5, r3
   83af6:	4493      	add	fp, r2
   83af8:	ebb8 080a 	subs.w	r8, r8, sl
   83afc:	eb69 090b 	sbc.w	r9, r9, fp
   83b00:	e9c6 8900 	strd	r8, r9, [r6]
   83b04:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

00083b08 <__gnu_uldivmod_helper>:
   83b08:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   83b0c:	9e08      	ldr	r6, [sp, #32]
   83b0e:	4614      	mov	r4, r2
   83b10:	461d      	mov	r5, r3
   83b12:	4680      	mov	r8, r0
   83b14:	4689      	mov	r9, r1
   83b16:	f000 f961 	bl	83ddc <__udivdi3>
   83b1a:	fb00 f505 	mul.w	r5, r0, r5
   83b1e:	fba0 ab04 	umull	sl, fp, r0, r4
   83b22:	fb04 5401 	mla	r4, r4, r1, r5
   83b26:	44a3      	add	fp, r4
   83b28:	ebb8 080a 	subs.w	r8, r8, sl
   83b2c:	eb69 090b 	sbc.w	r9, r9, fp
   83b30:	e9c6 8900 	strd	r8, r9, [r6]
   83b34:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

00083b38 <__aeabi_idiv0>:
   83b38:	4770      	bx	lr
   83b3a:	bf00      	nop

00083b3c <__divdi3>:
   83b3c:	2900      	cmp	r1, #0
   83b3e:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83b42:	f2c0 80a1 	blt.w	83c88 <__divdi3+0x14c>
   83b46:	2400      	movs	r4, #0
   83b48:	2b00      	cmp	r3, #0
   83b4a:	f2c0 8098 	blt.w	83c7e <__divdi3+0x142>
   83b4e:	4615      	mov	r5, r2
   83b50:	4606      	mov	r6, r0
   83b52:	460f      	mov	r7, r1
   83b54:	2b00      	cmp	r3, #0
   83b56:	d13f      	bne.n	83bd8 <__divdi3+0x9c>
   83b58:	428a      	cmp	r2, r1
   83b5a:	d958      	bls.n	83c0e <__divdi3+0xd2>
   83b5c:	fab2 f382 	clz	r3, r2
   83b60:	b14b      	cbz	r3, 83b76 <__divdi3+0x3a>
   83b62:	f1c3 0220 	rsb	r2, r3, #32
   83b66:	fa01 f703 	lsl.w	r7, r1, r3
   83b6a:	fa20 f202 	lsr.w	r2, r0, r2
   83b6e:	409d      	lsls	r5, r3
   83b70:	fa00 f603 	lsl.w	r6, r0, r3
   83b74:	4317      	orrs	r7, r2
   83b76:	0c29      	lsrs	r1, r5, #16
   83b78:	fbb7 f2f1 	udiv	r2, r7, r1
   83b7c:	fb01 7712 	mls	r7, r1, r2, r7
   83b80:	b2a8      	uxth	r0, r5
   83b82:	fb00 f302 	mul.w	r3, r0, r2
   83b86:	ea4f 4c16 	mov.w	ip, r6, lsr #16
   83b8a:	ea4c 4707 	orr.w	r7, ip, r7, lsl #16
   83b8e:	42bb      	cmp	r3, r7
   83b90:	d909      	bls.n	83ba6 <__divdi3+0x6a>
   83b92:	197f      	adds	r7, r7, r5
   83b94:	f102 3cff 	add.w	ip, r2, #4294967295
   83b98:	f080 8105 	bcs.w	83da6 <__divdi3+0x26a>
   83b9c:	42bb      	cmp	r3, r7
   83b9e:	f240 8102 	bls.w	83da6 <__divdi3+0x26a>
   83ba2:	3a02      	subs	r2, #2
   83ba4:	442f      	add	r7, r5
   83ba6:	1aff      	subs	r7, r7, r3
   83ba8:	fbb7 f3f1 	udiv	r3, r7, r1
   83bac:	fb01 7113 	mls	r1, r1, r3, r7
   83bb0:	fb00 f003 	mul.w	r0, r0, r3
   83bb4:	b2b6      	uxth	r6, r6
   83bb6:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
   83bba:	4288      	cmp	r0, r1
   83bbc:	d908      	bls.n	83bd0 <__divdi3+0x94>
   83bbe:	1949      	adds	r1, r1, r5
   83bc0:	f103 37ff 	add.w	r7, r3, #4294967295
   83bc4:	f080 80f1 	bcs.w	83daa <__divdi3+0x26e>
   83bc8:	4288      	cmp	r0, r1
   83bca:	f240 80ee 	bls.w	83daa <__divdi3+0x26e>
   83bce:	3b02      	subs	r3, #2
   83bd0:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   83bd4:	2300      	movs	r3, #0
   83bd6:	e003      	b.n	83be0 <__divdi3+0xa4>
   83bd8:	428b      	cmp	r3, r1
   83bda:	d90a      	bls.n	83bf2 <__divdi3+0xb6>
   83bdc:	2300      	movs	r3, #0
   83bde:	461a      	mov	r2, r3
   83be0:	4610      	mov	r0, r2
   83be2:	4619      	mov	r1, r3
   83be4:	b114      	cbz	r4, 83bec <__divdi3+0xb0>
   83be6:	4240      	negs	r0, r0
   83be8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   83bec:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83bf0:	4770      	bx	lr
   83bf2:	fab3 f883 	clz	r8, r3
   83bf6:	f1b8 0f00 	cmp.w	r8, #0
   83bfa:	f040 8088 	bne.w	83d0e <__divdi3+0x1d2>
   83bfe:	428b      	cmp	r3, r1
   83c00:	d302      	bcc.n	83c08 <__divdi3+0xcc>
   83c02:	4282      	cmp	r2, r0
   83c04:	f200 80e2 	bhi.w	83dcc <__divdi3+0x290>
   83c08:	2300      	movs	r3, #0
   83c0a:	2201      	movs	r2, #1
   83c0c:	e7e8      	b.n	83be0 <__divdi3+0xa4>
   83c0e:	b912      	cbnz	r2, 83c16 <__divdi3+0xda>
   83c10:	2301      	movs	r3, #1
   83c12:	fbb3 f5f2 	udiv	r5, r3, r2
   83c16:	fab5 f285 	clz	r2, r5
   83c1a:	2a00      	cmp	r2, #0
   83c1c:	d13a      	bne.n	83c94 <__divdi3+0x158>
   83c1e:	1b7f      	subs	r7, r7, r5
   83c20:	0c28      	lsrs	r0, r5, #16
   83c22:	fa1f fc85 	uxth.w	ip, r5
   83c26:	2301      	movs	r3, #1
   83c28:	fbb7 f1f0 	udiv	r1, r7, r0
   83c2c:	fb00 7711 	mls	r7, r0, r1, r7
   83c30:	fb0c f201 	mul.w	r2, ip, r1
   83c34:	ea4f 4816 	mov.w	r8, r6, lsr #16
   83c38:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
   83c3c:	42ba      	cmp	r2, r7
   83c3e:	d907      	bls.n	83c50 <__divdi3+0x114>
   83c40:	197f      	adds	r7, r7, r5
   83c42:	f101 38ff 	add.w	r8, r1, #4294967295
   83c46:	d202      	bcs.n	83c4e <__divdi3+0x112>
   83c48:	42ba      	cmp	r2, r7
   83c4a:	f200 80c4 	bhi.w	83dd6 <__divdi3+0x29a>
   83c4e:	4641      	mov	r1, r8
   83c50:	1abf      	subs	r7, r7, r2
   83c52:	fbb7 f2f0 	udiv	r2, r7, r0
   83c56:	fb00 7012 	mls	r0, r0, r2, r7
   83c5a:	fb0c fc02 	mul.w	ip, ip, r2
   83c5e:	b2b6      	uxth	r6, r6
   83c60:	ea46 4000 	orr.w	r0, r6, r0, lsl #16
   83c64:	4584      	cmp	ip, r0
   83c66:	d907      	bls.n	83c78 <__divdi3+0x13c>
   83c68:	1940      	adds	r0, r0, r5
   83c6a:	f102 37ff 	add.w	r7, r2, #4294967295
   83c6e:	d202      	bcs.n	83c76 <__divdi3+0x13a>
   83c70:	4584      	cmp	ip, r0
   83c72:	f200 80ae 	bhi.w	83dd2 <__divdi3+0x296>
   83c76:	463a      	mov	r2, r7
   83c78:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   83c7c:	e7b0      	b.n	83be0 <__divdi3+0xa4>
   83c7e:	43e4      	mvns	r4, r4
   83c80:	4252      	negs	r2, r2
   83c82:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   83c86:	e762      	b.n	83b4e <__divdi3+0x12>
   83c88:	4240      	negs	r0, r0
   83c8a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   83c8e:	f04f 34ff 	mov.w	r4, #4294967295
   83c92:	e759      	b.n	83b48 <__divdi3+0xc>
   83c94:	4095      	lsls	r5, r2
   83c96:	f1c2 0920 	rsb	r9, r2, #32
   83c9a:	fa27 f109 	lsr.w	r1, r7, r9
   83c9e:	fa26 f909 	lsr.w	r9, r6, r9
   83ca2:	4097      	lsls	r7, r2
   83ca4:	0c28      	lsrs	r0, r5, #16
   83ca6:	fbb1 f8f0 	udiv	r8, r1, r0
   83caa:	fb00 1118 	mls	r1, r0, r8, r1
   83cae:	fa1f fc85 	uxth.w	ip, r5
   83cb2:	fb0c f308 	mul.w	r3, ip, r8
   83cb6:	ea49 0907 	orr.w	r9, r9, r7
   83cba:	ea4f 4719 	mov.w	r7, r9, lsr #16
   83cbe:	ea47 4101 	orr.w	r1, r7, r1, lsl #16
   83cc2:	428b      	cmp	r3, r1
   83cc4:	fa06 f602 	lsl.w	r6, r6, r2
   83cc8:	d908      	bls.n	83cdc <__divdi3+0x1a0>
   83cca:	1949      	adds	r1, r1, r5
   83ccc:	f108 32ff 	add.w	r2, r8, #4294967295
   83cd0:	d27a      	bcs.n	83dc8 <__divdi3+0x28c>
   83cd2:	428b      	cmp	r3, r1
   83cd4:	d978      	bls.n	83dc8 <__divdi3+0x28c>
   83cd6:	f1a8 0802 	sub.w	r8, r8, #2
   83cda:	4429      	add	r1, r5
   83cdc:	1ac9      	subs	r1, r1, r3
   83cde:	fbb1 f3f0 	udiv	r3, r1, r0
   83ce2:	fb00 1713 	mls	r7, r0, r3, r1
   83ce6:	fb0c f203 	mul.w	r2, ip, r3
   83cea:	fa1f f989 	uxth.w	r9, r9
   83cee:	ea49 4707 	orr.w	r7, r9, r7, lsl #16
   83cf2:	42ba      	cmp	r2, r7
   83cf4:	d907      	bls.n	83d06 <__divdi3+0x1ca>
   83cf6:	197f      	adds	r7, r7, r5
   83cf8:	f103 31ff 	add.w	r1, r3, #4294967295
   83cfc:	d260      	bcs.n	83dc0 <__divdi3+0x284>
   83cfe:	42ba      	cmp	r2, r7
   83d00:	d95e      	bls.n	83dc0 <__divdi3+0x284>
   83d02:	3b02      	subs	r3, #2
   83d04:	442f      	add	r7, r5
   83d06:	1abf      	subs	r7, r7, r2
   83d08:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   83d0c:	e78c      	b.n	83c28 <__divdi3+0xec>
   83d0e:	f1c8 0220 	rsb	r2, r8, #32
   83d12:	fa25 f102 	lsr.w	r1, r5, r2
   83d16:	fa03 fc08 	lsl.w	ip, r3, r8
   83d1a:	fa27 f302 	lsr.w	r3, r7, r2
   83d1e:	fa20 f202 	lsr.w	r2, r0, r2
   83d22:	fa07 f708 	lsl.w	r7, r7, r8
   83d26:	ea41 0c0c 	orr.w	ip, r1, ip
   83d2a:	ea4f 491c 	mov.w	r9, ip, lsr #16
   83d2e:	fbb3 f1f9 	udiv	r1, r3, r9
   83d32:	fb09 3311 	mls	r3, r9, r1, r3
   83d36:	fa1f fa8c 	uxth.w	sl, ip
   83d3a:	fb0a fb01 	mul.w	fp, sl, r1
   83d3e:	4317      	orrs	r7, r2
   83d40:	0c3a      	lsrs	r2, r7, #16
   83d42:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   83d46:	459b      	cmp	fp, r3
   83d48:	fa05 f008 	lsl.w	r0, r5, r8
   83d4c:	d908      	bls.n	83d60 <__divdi3+0x224>
   83d4e:	eb13 030c 	adds.w	r3, r3, ip
   83d52:	f101 32ff 	add.w	r2, r1, #4294967295
   83d56:	d235      	bcs.n	83dc4 <__divdi3+0x288>
   83d58:	459b      	cmp	fp, r3
   83d5a:	d933      	bls.n	83dc4 <__divdi3+0x288>
   83d5c:	3902      	subs	r1, #2
   83d5e:	4463      	add	r3, ip
   83d60:	ebcb 0303 	rsb	r3, fp, r3
   83d64:	fbb3 f2f9 	udiv	r2, r3, r9
   83d68:	fb09 3312 	mls	r3, r9, r2, r3
   83d6c:	fb0a fa02 	mul.w	sl, sl, r2
   83d70:	b2bf      	uxth	r7, r7
   83d72:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
   83d76:	45ba      	cmp	sl, r7
   83d78:	d908      	bls.n	83d8c <__divdi3+0x250>
   83d7a:	eb17 070c 	adds.w	r7, r7, ip
   83d7e:	f102 33ff 	add.w	r3, r2, #4294967295
   83d82:	d21b      	bcs.n	83dbc <__divdi3+0x280>
   83d84:	45ba      	cmp	sl, r7
   83d86:	d919      	bls.n	83dbc <__divdi3+0x280>
   83d88:	3a02      	subs	r2, #2
   83d8a:	4467      	add	r7, ip
   83d8c:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
   83d90:	fba5 0100 	umull	r0, r1, r5, r0
   83d94:	ebca 0707 	rsb	r7, sl, r7
   83d98:	428f      	cmp	r7, r1
   83d9a:	f04f 0300 	mov.w	r3, #0
   83d9e:	d30a      	bcc.n	83db6 <__divdi3+0x27a>
   83da0:	d005      	beq.n	83dae <__divdi3+0x272>
   83da2:	462a      	mov	r2, r5
   83da4:	e71c      	b.n	83be0 <__divdi3+0xa4>
   83da6:	4662      	mov	r2, ip
   83da8:	e6fd      	b.n	83ba6 <__divdi3+0x6a>
   83daa:	463b      	mov	r3, r7
   83dac:	e710      	b.n	83bd0 <__divdi3+0x94>
   83dae:	fa06 f608 	lsl.w	r6, r6, r8
   83db2:	4286      	cmp	r6, r0
   83db4:	d2f5      	bcs.n	83da2 <__divdi3+0x266>
   83db6:	1e6a      	subs	r2, r5, #1
   83db8:	2300      	movs	r3, #0
   83dba:	e711      	b.n	83be0 <__divdi3+0xa4>
   83dbc:	461a      	mov	r2, r3
   83dbe:	e7e5      	b.n	83d8c <__divdi3+0x250>
   83dc0:	460b      	mov	r3, r1
   83dc2:	e7a0      	b.n	83d06 <__divdi3+0x1ca>
   83dc4:	4611      	mov	r1, r2
   83dc6:	e7cb      	b.n	83d60 <__divdi3+0x224>
   83dc8:	4690      	mov	r8, r2
   83dca:	e787      	b.n	83cdc <__divdi3+0x1a0>
   83dcc:	4643      	mov	r3, r8
   83dce:	4642      	mov	r2, r8
   83dd0:	e706      	b.n	83be0 <__divdi3+0xa4>
   83dd2:	3a02      	subs	r2, #2
   83dd4:	e750      	b.n	83c78 <__divdi3+0x13c>
   83dd6:	3902      	subs	r1, #2
   83dd8:	442f      	add	r7, r5
   83dda:	e739      	b.n	83c50 <__divdi3+0x114>

00083ddc <__udivdi3>:
   83ddc:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83de0:	4614      	mov	r4, r2
   83de2:	4605      	mov	r5, r0
   83de4:	460e      	mov	r6, r1
   83de6:	2b00      	cmp	r3, #0
   83de8:	d143      	bne.n	83e72 <__udivdi3+0x96>
   83dea:	428a      	cmp	r2, r1
   83dec:	d953      	bls.n	83e96 <__udivdi3+0xba>
   83dee:	fab2 f782 	clz	r7, r2
   83df2:	b157      	cbz	r7, 83e0a <__udivdi3+0x2e>
   83df4:	f1c7 0620 	rsb	r6, r7, #32
   83df8:	fa20 f606 	lsr.w	r6, r0, r6
   83dfc:	fa01 f307 	lsl.w	r3, r1, r7
   83e00:	fa02 f407 	lsl.w	r4, r2, r7
   83e04:	fa00 f507 	lsl.w	r5, r0, r7
   83e08:	431e      	orrs	r6, r3
   83e0a:	0c21      	lsrs	r1, r4, #16
   83e0c:	fbb6 f2f1 	udiv	r2, r6, r1
   83e10:	fb01 6612 	mls	r6, r1, r2, r6
   83e14:	b2a0      	uxth	r0, r4
   83e16:	fb00 f302 	mul.w	r3, r0, r2
   83e1a:	0c2f      	lsrs	r7, r5, #16
   83e1c:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   83e20:	42b3      	cmp	r3, r6
   83e22:	d909      	bls.n	83e38 <__udivdi3+0x5c>
   83e24:	1936      	adds	r6, r6, r4
   83e26:	f102 37ff 	add.w	r7, r2, #4294967295
   83e2a:	f080 80fd 	bcs.w	84028 <__udivdi3+0x24c>
   83e2e:	42b3      	cmp	r3, r6
   83e30:	f240 80fa 	bls.w	84028 <__udivdi3+0x24c>
   83e34:	3a02      	subs	r2, #2
   83e36:	4426      	add	r6, r4
   83e38:	1af6      	subs	r6, r6, r3
   83e3a:	fbb6 f3f1 	udiv	r3, r6, r1
   83e3e:	fb01 6113 	mls	r1, r1, r3, r6
   83e42:	fb00 f003 	mul.w	r0, r0, r3
   83e46:	b2ad      	uxth	r5, r5
   83e48:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
   83e4c:	4288      	cmp	r0, r1
   83e4e:	d908      	bls.n	83e62 <__udivdi3+0x86>
   83e50:	1909      	adds	r1, r1, r4
   83e52:	f103 36ff 	add.w	r6, r3, #4294967295
   83e56:	f080 80e9 	bcs.w	8402c <__udivdi3+0x250>
   83e5a:	4288      	cmp	r0, r1
   83e5c:	f240 80e6 	bls.w	8402c <__udivdi3+0x250>
   83e60:	3b02      	subs	r3, #2
   83e62:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   83e66:	2300      	movs	r3, #0
   83e68:	4610      	mov	r0, r2
   83e6a:	4619      	mov	r1, r3
   83e6c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83e70:	4770      	bx	lr
   83e72:	428b      	cmp	r3, r1
   83e74:	d84c      	bhi.n	83f10 <__udivdi3+0x134>
   83e76:	fab3 f683 	clz	r6, r3
   83e7a:	2e00      	cmp	r6, #0
   83e7c:	d14f      	bne.n	83f1e <__udivdi3+0x142>
   83e7e:	428b      	cmp	r3, r1
   83e80:	d302      	bcc.n	83e88 <__udivdi3+0xac>
   83e82:	4282      	cmp	r2, r0
   83e84:	f200 80dd 	bhi.w	84042 <__udivdi3+0x266>
   83e88:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83e8c:	2300      	movs	r3, #0
   83e8e:	2201      	movs	r2, #1
   83e90:	4610      	mov	r0, r2
   83e92:	4619      	mov	r1, r3
   83e94:	4770      	bx	lr
   83e96:	b912      	cbnz	r2, 83e9e <__udivdi3+0xc2>
   83e98:	2401      	movs	r4, #1
   83e9a:	fbb4 f4f2 	udiv	r4, r4, r2
   83e9e:	fab4 f284 	clz	r2, r4
   83ea2:	2a00      	cmp	r2, #0
   83ea4:	f040 8082 	bne.w	83fac <__udivdi3+0x1d0>
   83ea8:	1b09      	subs	r1, r1, r4
   83eaa:	0c26      	lsrs	r6, r4, #16
   83eac:	b2a7      	uxth	r7, r4
   83eae:	2301      	movs	r3, #1
   83eb0:	fbb1 f0f6 	udiv	r0, r1, r6
   83eb4:	fb06 1110 	mls	r1, r6, r0, r1
   83eb8:	fb07 f200 	mul.w	r2, r7, r0
   83ebc:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   83ec0:	ea4c 4101 	orr.w	r1, ip, r1, lsl #16
   83ec4:	428a      	cmp	r2, r1
   83ec6:	d907      	bls.n	83ed8 <__udivdi3+0xfc>
   83ec8:	1909      	adds	r1, r1, r4
   83eca:	f100 3cff 	add.w	ip, r0, #4294967295
   83ece:	d202      	bcs.n	83ed6 <__udivdi3+0xfa>
   83ed0:	428a      	cmp	r2, r1
   83ed2:	f200 80c8 	bhi.w	84066 <__udivdi3+0x28a>
   83ed6:	4660      	mov	r0, ip
   83ed8:	1a89      	subs	r1, r1, r2
   83eda:	fbb1 f2f6 	udiv	r2, r1, r6
   83ede:	fb06 1112 	mls	r1, r6, r2, r1
   83ee2:	fb07 f702 	mul.w	r7, r7, r2
   83ee6:	b2ad      	uxth	r5, r5
   83ee8:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
   83eec:	42af      	cmp	r7, r5
   83eee:	d908      	bls.n	83f02 <__udivdi3+0x126>
   83ef0:	192c      	adds	r4, r5, r4
   83ef2:	f102 31ff 	add.w	r1, r2, #4294967295
   83ef6:	f080 809b 	bcs.w	84030 <__udivdi3+0x254>
   83efa:	42a7      	cmp	r7, r4
   83efc:	f240 8098 	bls.w	84030 <__udivdi3+0x254>
   83f00:	3a02      	subs	r2, #2
   83f02:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
   83f06:	4610      	mov	r0, r2
   83f08:	4619      	mov	r1, r3
   83f0a:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83f0e:	4770      	bx	lr
   83f10:	2300      	movs	r3, #0
   83f12:	461a      	mov	r2, r3
   83f14:	4610      	mov	r0, r2
   83f16:	4619      	mov	r1, r3
   83f18:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83f1c:	4770      	bx	lr
   83f1e:	f1c6 0520 	rsb	r5, r6, #32
   83f22:	fa22 f705 	lsr.w	r7, r2, r5
   83f26:	fa03 f406 	lsl.w	r4, r3, r6
   83f2a:	fa21 f305 	lsr.w	r3, r1, r5
   83f2e:	fa01 fb06 	lsl.w	fp, r1, r6
   83f32:	fa20 f505 	lsr.w	r5, r0, r5
   83f36:	433c      	orrs	r4, r7
   83f38:	ea4f 4814 	mov.w	r8, r4, lsr #16
   83f3c:	fbb3 fcf8 	udiv	ip, r3, r8
   83f40:	fb08 331c 	mls	r3, r8, ip, r3
   83f44:	fa1f f984 	uxth.w	r9, r4
   83f48:	fb09 fa0c 	mul.w	sl, r9, ip
   83f4c:	ea45 0b0b 	orr.w	fp, r5, fp
   83f50:	ea4f 451b 	mov.w	r5, fp, lsr #16
   83f54:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
   83f58:	459a      	cmp	sl, r3
   83f5a:	fa02 f206 	lsl.w	r2, r2, r6
   83f5e:	d904      	bls.n	83f6a <__udivdi3+0x18e>
   83f60:	191b      	adds	r3, r3, r4
   83f62:	f10c 35ff 	add.w	r5, ip, #4294967295
   83f66:	d36f      	bcc.n	84048 <__udivdi3+0x26c>
   83f68:	46ac      	mov	ip, r5
   83f6a:	ebca 0303 	rsb	r3, sl, r3
   83f6e:	fbb3 f5f8 	udiv	r5, r3, r8
   83f72:	fb08 3315 	mls	r3, r8, r5, r3
   83f76:	fb09 f905 	mul.w	r9, r9, r5
   83f7a:	fa1f fb8b 	uxth.w	fp, fp
   83f7e:	ea4b 4703 	orr.w	r7, fp, r3, lsl #16
   83f82:	45b9      	cmp	r9, r7
   83f84:	d904      	bls.n	83f90 <__udivdi3+0x1b4>
   83f86:	193f      	adds	r7, r7, r4
   83f88:	f105 33ff 	add.w	r3, r5, #4294967295
   83f8c:	d362      	bcc.n	84054 <__udivdi3+0x278>
   83f8e:	461d      	mov	r5, r3
   83f90:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
   83f94:	fbac 2302 	umull	r2, r3, ip, r2
   83f98:	ebc9 0707 	rsb	r7, r9, r7
   83f9c:	429f      	cmp	r7, r3
   83f9e:	f04f 0500 	mov.w	r5, #0
   83fa2:	d34a      	bcc.n	8403a <__udivdi3+0x25e>
   83fa4:	d046      	beq.n	84034 <__udivdi3+0x258>
   83fa6:	4662      	mov	r2, ip
   83fa8:	462b      	mov	r3, r5
   83faa:	e75d      	b.n	83e68 <__udivdi3+0x8c>
   83fac:	4094      	lsls	r4, r2
   83fae:	f1c2 0920 	rsb	r9, r2, #32
   83fb2:	fa21 fc09 	lsr.w	ip, r1, r9
   83fb6:	4091      	lsls	r1, r2
   83fb8:	fa20 f909 	lsr.w	r9, r0, r9
   83fbc:	0c26      	lsrs	r6, r4, #16
   83fbe:	fbbc f8f6 	udiv	r8, ip, r6
   83fc2:	fb06 cc18 	mls	ip, r6, r8, ip
   83fc6:	b2a7      	uxth	r7, r4
   83fc8:	fb07 f308 	mul.w	r3, r7, r8
   83fcc:	ea49 0901 	orr.w	r9, r9, r1
   83fd0:	ea4f 4119 	mov.w	r1, r9, lsr #16
   83fd4:	ea41 4c0c 	orr.w	ip, r1, ip, lsl #16
   83fd8:	4563      	cmp	r3, ip
   83fda:	fa00 f502 	lsl.w	r5, r0, r2
   83fde:	d909      	bls.n	83ff4 <__udivdi3+0x218>
   83fe0:	eb1c 0c04 	adds.w	ip, ip, r4
   83fe4:	f108 32ff 	add.w	r2, r8, #4294967295
   83fe8:	d23b      	bcs.n	84062 <__udivdi3+0x286>
   83fea:	4563      	cmp	r3, ip
   83fec:	d939      	bls.n	84062 <__udivdi3+0x286>
   83fee:	f1a8 0802 	sub.w	r8, r8, #2
   83ff2:	44a4      	add	ip, r4
   83ff4:	ebc3 0c0c 	rsb	ip, r3, ip
   83ff8:	fbbc f3f6 	udiv	r3, ip, r6
   83ffc:	fb06 c113 	mls	r1, r6, r3, ip
   84000:	fb07 f203 	mul.w	r2, r7, r3
   84004:	fa1f f989 	uxth.w	r9, r9
   84008:	ea49 4101 	orr.w	r1, r9, r1, lsl #16
   8400c:	428a      	cmp	r2, r1
   8400e:	d907      	bls.n	84020 <__udivdi3+0x244>
   84010:	1909      	adds	r1, r1, r4
   84012:	f103 30ff 	add.w	r0, r3, #4294967295
   84016:	d222      	bcs.n	8405e <__udivdi3+0x282>
   84018:	428a      	cmp	r2, r1
   8401a:	d920      	bls.n	8405e <__udivdi3+0x282>
   8401c:	3b02      	subs	r3, #2
   8401e:	4421      	add	r1, r4
   84020:	1a89      	subs	r1, r1, r2
   84022:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   84026:	e743      	b.n	83eb0 <__udivdi3+0xd4>
   84028:	463a      	mov	r2, r7
   8402a:	e705      	b.n	83e38 <__udivdi3+0x5c>
   8402c:	4633      	mov	r3, r6
   8402e:	e718      	b.n	83e62 <__udivdi3+0x86>
   84030:	460a      	mov	r2, r1
   84032:	e766      	b.n	83f02 <__udivdi3+0x126>
   84034:	40b0      	lsls	r0, r6
   84036:	4290      	cmp	r0, r2
   84038:	d2b5      	bcs.n	83fa6 <__udivdi3+0x1ca>
   8403a:	f10c 32ff 	add.w	r2, ip, #4294967295
   8403e:	2300      	movs	r3, #0
   84040:	e712      	b.n	83e68 <__udivdi3+0x8c>
   84042:	4633      	mov	r3, r6
   84044:	4632      	mov	r2, r6
   84046:	e70f      	b.n	83e68 <__udivdi3+0x8c>
   84048:	459a      	cmp	sl, r3
   8404a:	d98d      	bls.n	83f68 <__udivdi3+0x18c>
   8404c:	f1ac 0c02 	sub.w	ip, ip, #2
   84050:	4423      	add	r3, r4
   84052:	e78a      	b.n	83f6a <__udivdi3+0x18e>
   84054:	45b9      	cmp	r9, r7
   84056:	d99a      	bls.n	83f8e <__udivdi3+0x1b2>
   84058:	3d02      	subs	r5, #2
   8405a:	4427      	add	r7, r4
   8405c:	e798      	b.n	83f90 <__udivdi3+0x1b4>
   8405e:	4603      	mov	r3, r0
   84060:	e7de      	b.n	84020 <__udivdi3+0x244>
   84062:	4690      	mov	r8, r2
   84064:	e7c6      	b.n	83ff4 <__udivdi3+0x218>
   84066:	3802      	subs	r0, #2
   84068:	4421      	add	r1, r4
   8406a:	e735      	b.n	83ed8 <__udivdi3+0xfc>
   8406c:	736e6f43 	.word	0x736e6f43
   84070:	20656c6f 	.word	0x20656c6f
   84074:	64616572 	.word	0x64616572
   84078:	00000a79 	.word	0x00000a79
   8407c:	3d3d3d3d 	.word	0x3d3d3d3d
   84080:	3d3d3d3d 	.word	0x3d3d3d3d
   84084:	3d3d3d3d 	.word	0x3d3d3d3d
   84088:	00000a3d 	.word	0x00000a3d
   8408c:	72616843 	.word	0x72616843
   84090:	65746361 	.word	0x65746361
   84094:	203d2072 	.word	0x203d2072
   84098:	000a6925 	.word	0x000a6925
   8409c:	00000043 	.word	0x00000043

000840a0 <_global_impure_ptr>:
   840a0:	20070148 33323130 37363534 42413938     H.. 0123456789AB
   840b0:	46454443 00000000 33323130 37363534     CDEF....01234567
   840c0:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   840d0:	0000296c                                l)..

000840d4 <zeroes.6721>:
   840d4:	30303030 30303030 30303030 30303030     0000000000000000

000840e4 <blanks.6720>:
   840e4:	20202020 20202020 20202020 20202020                     

000840f4 <_init>:
   840f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   840f6:	bf00      	nop
   840f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   840fa:	bc08      	pop	{r3}
   840fc:	469e      	mov	lr, r3
   840fe:	4770      	bx	lr

00084100 <__init_array_start>:
   84100:	0008224d 	.word	0x0008224d

00084104 <__frame_dummy_init_array_entry>:
   84104:	00080119                                ....

00084108 <_fini>:
   84108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8410a:	bf00      	nop
   8410c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8410e:	bc08      	pop	{r3}
   84110:	469e      	mov	lr, r3
   84112:	4770      	bx	lr

00084114 <__fini_array_start>:
   84114:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20070000:	f3bf 8f5f 	dmb	sy
20070004:	3801      	subs	r0, #1
20070006:	d1fb      	bne.n	20070000 <portable_delay_cycles>
20070008:	4770      	bx	lr
2007000a:	bf00      	nop

2007000c <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007000c:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070010:	4a20      	ldr	r2, [pc, #128]	; (20070094 <SystemInit+0x88>)
20070012:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070014:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070018:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007001a:	4b1f      	ldr	r3, [pc, #124]	; (20070098 <SystemInit+0x8c>)
2007001c:	6a1b      	ldr	r3, [r3, #32]
2007001e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070022:	d107      	bne.n	20070034 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070024:	4a1d      	ldr	r2, [pc, #116]	; (2007009c <SystemInit+0x90>)
20070026:	4b1c      	ldr	r3, [pc, #112]	; (20070098 <SystemInit+0x8c>)
20070028:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007002a:	461a      	mov	r2, r3
2007002c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007002e:	f013 0f01 	tst.w	r3, #1
20070032:	d0fb      	beq.n	2007002c <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070034:	4a1a      	ldr	r2, [pc, #104]	; (200700a0 <SystemInit+0x94>)
20070036:	4b18      	ldr	r3, [pc, #96]	; (20070098 <SystemInit+0x8c>)
20070038:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007003a:	461a      	mov	r2, r3
2007003c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007003e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070042:	d0fb      	beq.n	2007003c <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070044:	4b14      	ldr	r3, [pc, #80]	; (20070098 <SystemInit+0x8c>)
20070046:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20070048:	f022 0203 	bic.w	r2, r2, #3
2007004c:	f042 0201 	orr.w	r2, r2, #1
20070050:	631a      	str	r2, [r3, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070052:	461a      	mov	r2, r3
20070054:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070056:	f013 0f08 	tst.w	r3, #8
2007005a:	d0fb      	beq.n	20070054 <SystemInit+0x48>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007005c:	4a11      	ldr	r2, [pc, #68]	; (200700a4 <SystemInit+0x98>)
2007005e:	4b0e      	ldr	r3, [pc, #56]	; (20070098 <SystemInit+0x8c>)
20070060:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070062:	461a      	mov	r2, r3
20070064:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070066:	f013 0f02 	tst.w	r3, #2
2007006a:	d0fb      	beq.n	20070064 <SystemInit+0x58>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007006c:	2211      	movs	r2, #17
2007006e:	4b0a      	ldr	r3, [pc, #40]	; (20070098 <SystemInit+0x8c>)
20070070:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070072:	461a      	mov	r2, r3
20070074:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070076:	f013 0f08 	tst.w	r3, #8
2007007a:	d0fb      	beq.n	20070074 <SystemInit+0x68>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007007c:	2212      	movs	r2, #18
2007007e:	4b06      	ldr	r3, [pc, #24]	; (20070098 <SystemInit+0x8c>)
20070080:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070082:	461a      	mov	r2, r3
20070084:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070086:	f013 0f08 	tst.w	r3, #8
2007008a:	d0fb      	beq.n	20070084 <SystemInit+0x78>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007008c:	4a06      	ldr	r2, [pc, #24]	; (200700a8 <SystemInit+0x9c>)
2007008e:	4b07      	ldr	r3, [pc, #28]	; (200700ac <SystemInit+0xa0>)
20070090:	601a      	str	r2, [r3, #0]
20070092:	4770      	bx	lr
20070094:	400e0a00 	.word	0x400e0a00
20070098:	400e0600 	.word	0x400e0600
2007009c:	00370809 	.word	0x00370809
200700a0:	01370809 	.word	0x01370809
200700a4:	200d3f01 	.word	0x200d3f01
200700a8:	0501bd00 	.word	0x0501bd00
200700ac:	20070140 	.word	0x20070140

200700b0 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700b0:	4b1b      	ldr	r3, [pc, #108]	; (20070120 <system_init_flash+0x70>)
200700b2:	4298      	cmp	r0, r3
200700b4:	d806      	bhi.n	200700c4 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700b6:	2300      	movs	r3, #0
200700b8:	4a1a      	ldr	r2, [pc, #104]	; (20070124 <system_init_flash+0x74>)
200700ba:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700bc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700c0:	6013      	str	r3, [r2, #0]
200700c2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700c4:	4b18      	ldr	r3, [pc, #96]	; (20070128 <system_init_flash+0x78>)
200700c6:	4298      	cmp	r0, r3
200700c8:	d807      	bhi.n	200700da <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700ca:	f44f 7380 	mov.w	r3, #256	; 0x100
200700ce:	4a15      	ldr	r2, [pc, #84]	; (20070124 <system_init_flash+0x74>)
200700d0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700d2:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700d6:	6013      	str	r3, [r2, #0]
200700d8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700da:	4b14      	ldr	r3, [pc, #80]	; (2007012c <system_init_flash+0x7c>)
200700dc:	4298      	cmp	r0, r3
200700de:	d807      	bhi.n	200700f0 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700e0:	f44f 7300 	mov.w	r3, #512	; 0x200
200700e4:	4a0f      	ldr	r2, [pc, #60]	; (20070124 <system_init_flash+0x74>)
200700e6:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700e8:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ec:	6013      	str	r3, [r2, #0]
200700ee:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700f0:	4b0f      	ldr	r3, [pc, #60]	; (20070130 <system_init_flash+0x80>)
200700f2:	4298      	cmp	r0, r3
200700f4:	d807      	bhi.n	20070106 <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700f6:	f44f 7340 	mov.w	r3, #768	; 0x300
200700fa:	4a0a      	ldr	r2, [pc, #40]	; (20070124 <system_init_flash+0x74>)
200700fc:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700fe:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070102:	6013      	str	r3, [r2, #0]
20070104:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
20070106:	4b0b      	ldr	r3, [pc, #44]	; (20070134 <system_init_flash+0x84>)
20070108:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007010a:	bf94      	ite	ls
2007010c:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070110:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070114:	4a03      	ldr	r2, [pc, #12]	; (20070124 <system_init_flash+0x74>)
20070116:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
20070118:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007011c:	6013      	str	r3, [r2, #0]
2007011e:	4770      	bx	lr
20070120:	0121eabf 	.word	0x0121eabf
20070124:	400e0a00 	.word	0x400e0a00
20070128:	02faf07f 	.word	0x02faf07f
2007012c:	03d08fff 	.word	0x03d08fff
20070130:	04c4b3ff 	.word	0x04c4b3ff
20070134:	055d4a7f 	.word	0x055d4a7f

20070138 <xNextTaskUnblockTime>:
20070138:	ffffffff                                ....

2007013c <g_interrupt_enabled>:
2007013c:	00000001                                ....

20070140 <SystemCoreClock>:
20070140:	003d0900 00000000                       ..=.....

20070148 <impure_data>:
20070148:	00000000 20070434 2007049c 20070504     ....4.. ... ... 
	...
2007017c:	0008409c 00000000 00000000 00000000     .@..............
	...
200701f0:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20070200:	0005deec 0000000b 00000000 00000000     ................
	...

20070570 <_impure_ptr>:
20070570:	20070148                                H.. 

20070574 <lc_ctype_charset>:
20070574:	49435341 00000049 00000000 00000000     ASCII...........
	...

20070594 <__mb_cur_max>:
20070594:	00000001                                ....

20070598 <__malloc_av_>:
	...
200705a0:	20070598 20070598 200705a0 200705a0     ... ... ... ... 
200705b0:	200705a8 200705a8 200705b0 200705b0     ... ... ... ... 
200705c0:	200705b8 200705b8 200705c0 200705c0     ... ... ... ... 
200705d0:	200705c8 200705c8 200705d0 200705d0     ... ... ... ... 
200705e0:	200705d8 200705d8 200705e0 200705e0     ... ... ... ... 
200705f0:	200705e8 200705e8 200705f0 200705f0     ... ... ... ... 
20070600:	200705f8 200705f8 20070600 20070600     ... ... ... ... 
20070610:	20070608 20070608 20070610 20070610     ... ... ... ... 
20070620:	20070618 20070618 20070620 20070620     ... ...  ..  .. 
20070630:	20070628 20070628 20070630 20070630     (.. (.. 0.. 0.. 
20070640:	20070638 20070638 20070640 20070640     8.. 8.. @.. @.. 
20070650:	20070648 20070648 20070650 20070650     H.. H.. P.. P.. 
20070660:	20070658 20070658 20070660 20070660     X.. X.. `.. `.. 
20070670:	20070668 20070668 20070670 20070670     h.. h.. p.. p.. 
20070680:	20070678 20070678 20070680 20070680     x.. x.. ... ... 
20070690:	20070688 20070688 20070690 20070690     ... ... ... ... 
200706a0:	20070698 20070698 200706a0 200706a0     ... ... ... ... 
200706b0:	200706a8 200706a8 200706b0 200706b0     ... ... ... ... 
200706c0:	200706b8 200706b8 200706c0 200706c0     ... ... ... ... 
200706d0:	200706c8 200706c8 200706d0 200706d0     ... ... ... ... 
200706e0:	200706d8 200706d8 200706e0 200706e0     ... ... ... ... 
200706f0:	200706e8 200706e8 200706f0 200706f0     ... ... ... ... 
20070700:	200706f8 200706f8 20070700 20070700     ... ... ... ... 
20070710:	20070708 20070708 20070710 20070710     ... ... ... ... 
20070720:	20070718 20070718 20070720 20070720     ... ...  ..  .. 
20070730:	20070728 20070728 20070730 20070730     (.. (.. 0.. 0.. 
20070740:	20070738 20070738 20070740 20070740     8.. 8.. @.. @.. 
20070750:	20070748 20070748 20070750 20070750     H.. H.. P.. P.. 
20070760:	20070758 20070758 20070760 20070760     X.. X.. `.. `.. 
20070770:	20070768 20070768 20070770 20070770     h.. h.. p.. p.. 
20070780:	20070778 20070778 20070780 20070780     x.. x.. ... ... 
20070790:	20070788 20070788 20070790 20070790     ... ... ... ... 
200707a0:	20070798 20070798 200707a0 200707a0     ... ... ... ... 
200707b0:	200707a8 200707a8 200707b0 200707b0     ... ... ... ... 
200707c0:	200707b8 200707b8 200707c0 200707c0     ... ... ... ... 
200707d0:	200707c8 200707c8 200707d0 200707d0     ... ... ... ... 
200707e0:	200707d8 200707d8 200707e0 200707e0     ... ... ... ... 
200707f0:	200707e8 200707e8 200707f0 200707f0     ... ... ... ... 
20070800:	200707f8 200707f8 20070800 20070800     ... ... ... ... 
20070810:	20070808 20070808 20070810 20070810     ... ... ... ... 
20070820:	20070818 20070818 20070820 20070820     ... ...  ..  .. 
20070830:	20070828 20070828 20070830 20070830     (.. (.. 0.. 0.. 
20070840:	20070838 20070838 20070840 20070840     8.. 8.. @.. @.. 
20070850:	20070848 20070848 20070850 20070850     H.. H.. P.. P.. 
20070860:	20070858 20070858 20070860 20070860     X.. X.. `.. `.. 
20070870:	20070868 20070868 20070870 20070870     h.. h.. p.. p.. 
20070880:	20070878 20070878 20070880 20070880     x.. x.. ... ... 
20070890:	20070888 20070888 20070890 20070890     ... ... ... ... 
200708a0:	20070898 20070898 200708a0 200708a0     ... ... ... ... 
200708b0:	200708a8 200708a8 200708b0 200708b0     ... ... ... ... 
200708c0:	200708b8 200708b8 200708c0 200708c0     ... ... ... ... 
200708d0:	200708c8 200708c8 200708d0 200708d0     ... ... ... ... 
200708e0:	200708d8 200708d8 200708e0 200708e0     ... ... ... ... 
200708f0:	200708e8 200708e8 200708f0 200708f0     ... ... ... ... 
20070900:	200708f8 200708f8 20070900 20070900     ... ... ... ... 
20070910:	20070908 20070908 20070910 20070910     ... ... ... ... 
20070920:	20070918 20070918 20070920 20070920     ... ...  ..  .. 
20070930:	20070928 20070928 20070930 20070930     (.. (.. 0.. 0.. 
20070940:	20070938 20070938 20070940 20070940     8.. 8.. @.. @.. 
20070950:	20070948 20070948 20070950 20070950     H.. H.. P.. P.. 
20070960:	20070958 20070958 20070960 20070960     X.. X.. `.. `.. 
20070970:	20070968 20070968 20070970 20070970     h.. h.. p.. p.. 
20070980:	20070978 20070978 20070980 20070980     x.. x.. ... ... 
20070990:	20070988 20070988 20070990 20070990     ... ... ... ... 

200709a0 <__malloc_trim_threshold>:
200709a0:	00020000                                ....

200709a4 <__malloc_sbrk_base>:
200709a4:	ffffffff                                ....

200709a8 <__wctomb>:
200709a8:	00083871                                q8..
