
Objectify.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006364  00080000  00080000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00086364  00086364  0000e364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000a44  20070000  0008636c  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000354  20070a44  00086db0  00010a44  2**2
                  ALLOC
  4 .stack        00002000  20070d98  00087104  00010a44  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00010a44  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  00010a6d  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001241f  00000000  00000000  00010ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000031cf  00000000  00000000  00022ee7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00006bd9  00000000  00000000  000260b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000d00  00000000  00000000  0002cc8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000c80  00000000  00000000  0002d98f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001b1e7  00000000  00000000  0002e60f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00013e49  00000000  00000000  000497f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0006fe9f  00000000  00000000  0005d63f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000277c  00000000  00000000  000cd4e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20072d98 	.word	0x20072d98
   80004:	000823a5 	.word	0x000823a5
   80008:	000823a1 	.word	0x000823a1
   8000c:	000823a1 	.word	0x000823a1
   80010:	000823a1 	.word	0x000823a1
   80014:	000823a1 	.word	0x000823a1
   80018:	000823a1 	.word	0x000823a1
	...
   8002c:	000823a1 	.word	0x000823a1
   80030:	000823a1 	.word	0x000823a1
   80034:	00000000 	.word	0x00000000
   80038:	000823a1 	.word	0x000823a1
   8003c:	000823a1 	.word	0x000823a1
   80040:	000823a1 	.word	0x000823a1
   80044:	000823a1 	.word	0x000823a1
   80048:	000823a1 	.word	0x000823a1
   8004c:	000823a1 	.word	0x000823a1
   80050:	000823a1 	.word	0x000823a1
   80054:	000823a1 	.word	0x000823a1
   80058:	000823a1 	.word	0x000823a1
   8005c:	000823a1 	.word	0x000823a1
   80060:	000823a1 	.word	0x000823a1
   80064:	000823a1 	.word	0x000823a1
   80068:	00000000 	.word	0x00000000
   8006c:	000810cd 	.word	0x000810cd
   80070:	000810e1 	.word	0x000810e1
   80074:	000810f5 	.word	0x000810f5
   80078:	00081109 	.word	0x00081109
	...
   80084:	000825c1 	.word	0x000825c1
   80088:	000823a1 	.word	0x000823a1
   8008c:	000823a1 	.word	0x000823a1
   80090:	000823a1 	.word	0x000823a1
   80094:	000823a1 	.word	0x000823a1
   80098:	000823a1 	.word	0x000823a1
   8009c:	000823a1 	.word	0x000823a1
   800a0:	000823a1 	.word	0x000823a1
   800a4:	00000000 	.word	0x00000000
   800a8:	000823a1 	.word	0x000823a1
   800ac:	000823a1 	.word	0x000823a1
   800b0:	000823a1 	.word	0x000823a1
   800b4:	000823a1 	.word	0x000823a1
   800b8:	000823a1 	.word	0x000823a1
   800bc:	000823a1 	.word	0x000823a1
   800c0:	000823a1 	.word	0x000823a1
   800c4:	000823a1 	.word	0x000823a1
   800c8:	000823a1 	.word	0x000823a1
   800cc:	000823a1 	.word	0x000823a1
   800d0:	000823a1 	.word	0x000823a1
   800d4:	000823a1 	.word	0x000823a1
   800d8:	000823a1 	.word	0x000823a1
   800dc:	000823a1 	.word	0x000823a1
   800e0:	000817b9 	.word	0x000817b9
   800e4:	000823a1 	.word	0x000823a1
   800e8:	000823a1 	.word	0x000823a1
   800ec:	000823a1 	.word	0x000823a1
   800f0:	000823a1 	.word	0x000823a1

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070a44 	.word	0x20070a44
   80110:	00000000 	.word	0x00000000
   80114:	0008636c 	.word	0x0008636c

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b06      	ldr	r3, [pc, #24]	; (80134 <frame_dummy+0x1c>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4806      	ldr	r0, [pc, #24]	; (80138 <frame_dummy+0x20>)
   80120:	4906      	ldr	r1, [pc, #24]	; (8013c <frame_dummy+0x24>)
   80122:	f3af 8000 	nop.w
   80126:	4806      	ldr	r0, [pc, #24]	; (80140 <frame_dummy+0x28>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b113      	cbz	r3, 80132 <frame_dummy+0x1a>
   8012c:	4b05      	ldr	r3, [pc, #20]	; (80144 <frame_dummy+0x2c>)
   8012e:	b103      	cbz	r3, 80132 <frame_dummy+0x1a>
   80130:	4798      	blx	r3
   80132:	bd08      	pop	{r3, pc}
   80134:	00000000 	.word	0x00000000
   80138:	0008636c 	.word	0x0008636c
   8013c:	20070a48 	.word	0x20070a48
   80140:	0008636c 	.word	0x0008636c
   80144:	00000000 	.word	0x00000000

00080148 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   80148:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   8014a:	480e      	ldr	r0, [pc, #56]	; (80184 <sysclk_init+0x3c>)
   8014c:	4b0e      	ldr	r3, [pc, #56]	; (80188 <sysclk_init+0x40>)
   8014e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   80150:	2000      	movs	r0, #0
   80152:	213e      	movs	r1, #62	; 0x3e
   80154:	4b0d      	ldr	r3, [pc, #52]	; (8018c <sysclk_init+0x44>)
   80156:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   80158:	4c0d      	ldr	r4, [pc, #52]	; (80190 <sysclk_init+0x48>)
   8015a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   8015c:	2800      	cmp	r0, #0
   8015e:	d0fc      	beq.n	8015a <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   80160:	4b0c      	ldr	r3, [pc, #48]	; (80194 <sysclk_init+0x4c>)
   80162:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   80164:	4a0c      	ldr	r2, [pc, #48]	; (80198 <sysclk_init+0x50>)
   80166:	4b0d      	ldr	r3, [pc, #52]	; (8019c <sysclk_init+0x54>)
   80168:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   8016a:	4c0d      	ldr	r4, [pc, #52]	; (801a0 <sysclk_init+0x58>)
   8016c:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   8016e:	2800      	cmp	r0, #0
   80170:	d0fc      	beq.n	8016c <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   80172:	2010      	movs	r0, #16
   80174:	4b0b      	ldr	r3, [pc, #44]	; (801a4 <sysclk_init+0x5c>)
   80176:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   80178:	4b0b      	ldr	r3, [pc, #44]	; (801a8 <sysclk_init+0x60>)
   8017a:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   8017c:	4801      	ldr	r0, [pc, #4]	; (80184 <sysclk_init+0x3c>)
   8017e:	4b02      	ldr	r3, [pc, #8]	; (80188 <sysclk_init+0x40>)
   80180:	4798      	blx	r3
   80182:	bd10      	pop	{r4, pc}
   80184:	0501bd00 	.word	0x0501bd00
   80188:	200700b1 	.word	0x200700b1
   8018c:	00081181 	.word	0x00081181
   80190:	000811d5 	.word	0x000811d5
   80194:	000811e5 	.word	0x000811e5
   80198:	200d3f01 	.word	0x200d3f01
   8019c:	400e0600 	.word	0x400e0600
   801a0:	000811f5 	.word	0x000811f5
   801a4:	0008111d 	.word	0x0008111d
   801a8:	00082455 	.word	0x00082455

000801ac <usart_serial_read_packet>:
 * \param len    Length of data
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
   801ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   801b0:	b083      	sub	sp, #12
   801b2:	4605      	mov	r5, r0
	while (len) {
   801b4:	4690      	mov	r8, r2
   801b6:	2a00      	cmp	r2, #0
   801b8:	d047      	beq.n	8024a <usart_serial_read_packet+0x9e>
   801ba:	1c4e      	adds	r6, r1, #1
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   801bc:	4f25      	ldr	r7, [pc, #148]	; (80254 <usart_serial_read_packet+0xa8>)
		while (usart_read(p_usart, &val));
   801be:	4c26      	ldr	r4, [pc, #152]	; (80258 <usart_serial_read_packet+0xac>)
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   801c0:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 8026c <usart_serial_read_packet+0xc0>
	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
   801c4:	f8df b094 	ldr.w	fp, [pc, #148]	; 8025c <usart_serial_read_packet+0xb0>
   801c8:	f106 39ff 	add.w	r9, r6, #4294967295
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
	uint32_t val = 0;
   801cc:	2300      	movs	r3, #0
   801ce:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   801d0:	4b22      	ldr	r3, [pc, #136]	; (8025c <usart_serial_read_packet+0xb0>)
   801d2:	429d      	cmp	r5, r3
   801d4:	d106      	bne.n	801e4 <usart_serial_read_packet+0x38>
		while (uart_read((Uart*)p_usart, data));
   801d6:	4658      	mov	r0, fp
   801d8:	4649      	mov	r1, r9
   801da:	4b21      	ldr	r3, [pc, #132]	; (80260 <usart_serial_read_packet+0xb4>)
   801dc:	4798      	blx	r3
   801de:	2800      	cmp	r0, #0
   801e0:	d1f9      	bne.n	801d6 <usart_serial_read_packet+0x2a>
   801e2:	e019      	b.n	80218 <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   801e4:	4b1f      	ldr	r3, [pc, #124]	; (80264 <usart_serial_read_packet+0xb8>)
   801e6:	429d      	cmp	r5, r3
   801e8:	d109      	bne.n	801fe <usart_serial_read_packet+0x52>
		while (usart_read(p_usart, &val));
   801ea:	4699      	mov	r9, r3
   801ec:	4648      	mov	r0, r9
   801ee:	a901      	add	r1, sp, #4
   801f0:	47a0      	blx	r4
   801f2:	2800      	cmp	r0, #0
   801f4:	d1fa      	bne.n	801ec <usart_serial_read_packet+0x40>
		*data = (uint8_t)(val & 0xFF);
   801f6:	9b01      	ldr	r3, [sp, #4]
   801f8:	f806 3c01 	strb.w	r3, [r6, #-1]
   801fc:	e017      	b.n	8022e <usart_serial_read_packet+0x82>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   801fe:	4b1a      	ldr	r3, [pc, #104]	; (80268 <usart_serial_read_packet+0xbc>)
   80200:	429d      	cmp	r5, r3
   80202:	d109      	bne.n	80218 <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
   80204:	4699      	mov	r9, r3
   80206:	4648      	mov	r0, r9
   80208:	a901      	add	r1, sp, #4
   8020a:	47a0      	blx	r4
   8020c:	2800      	cmp	r0, #0
   8020e:	d1fa      	bne.n	80206 <usart_serial_read_packet+0x5a>
		*data = (uint8_t)(val & 0xFF);
   80210:	9b01      	ldr	r3, [sp, #4]
   80212:	f806 3c01 	strb.w	r3, [r6, #-1]
   80216:	e014      	b.n	80242 <usart_serial_read_packet+0x96>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80218:	4555      	cmp	r5, sl
   8021a:	d108      	bne.n	8022e <usart_serial_read_packet+0x82>
		while (usart_read(p_usart, &val));
   8021c:	4650      	mov	r0, sl
   8021e:	a901      	add	r1, sp, #4
   80220:	47a0      	blx	r4
   80222:	2800      	cmp	r0, #0
   80224:	d1fa      	bne.n	8021c <usart_serial_read_packet+0x70>
		*data = (uint8_t)(val & 0xFF);
   80226:	9b01      	ldr	r3, [sp, #4]
   80228:	f806 3c01 	strb.w	r3, [r6, #-1]
   8022c:	e009      	b.n	80242 <usart_serial_read_packet+0x96>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   8022e:	42bd      	cmp	r5, r7
   80230:	d107      	bne.n	80242 <usart_serial_read_packet+0x96>
		while (usart_read(p_usart, &val));
   80232:	4638      	mov	r0, r7
   80234:	a901      	add	r1, sp, #4
   80236:	47a0      	blx	r4
   80238:	2800      	cmp	r0, #0
   8023a:	d1fa      	bne.n	80232 <usart_serial_read_packet+0x86>
		*data = (uint8_t)(val & 0xFF);
   8023c:	9b01      	ldr	r3, [sp, #4]
   8023e:	f806 3c01 	strb.w	r3, [r6, #-1]
   80242:	3601      	adds	r6, #1
   80244:	f1b8 0801 	subs.w	r8, r8, #1
   80248:	d1be      	bne.n	801c8 <usart_serial_read_packet+0x1c>
		usart_serial_getchar(usart, data);
		len--;
		data++;
	}
	return STATUS_OK;
}
   8024a:	2000      	movs	r0, #0
   8024c:	b003      	add	sp, #12
   8024e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80252:	bf00      	nop
   80254:	400a4000 	.word	0x400a4000
   80258:	00082389 	.word	0x00082389
   8025c:	400e0800 	.word	0x400e0800
   80260:	000812b5 	.word	0x000812b5
   80264:	40098000 	.word	0x40098000
   80268:	4009c000 	.word	0x4009c000
   8026c:	400a0000 	.word	0x400a0000

00080270 <udi_cdc_comm_enable>:
	uint8_t port;
	uint8_t iface_comm_num;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
	udi_cdc_nb_comm_enabled = 0;
   80270:	490e      	ldr	r1, [pc, #56]	; (802ac <udi_cdc_comm_enable+0x3c>)
   80272:	2300      	movs	r3, #0
   80274:	700b      	strb	r3, [r1, #0]
	}
	port = udi_cdc_nb_comm_enabled;
#endif

	// Initialize control signal management
	udi_cdc_state[port] = CPU_TO_LE16(0);
   80276:	4a0e      	ldr	r2, [pc, #56]	; (802b0 <udi_cdc_comm_enable+0x40>)
   80278:	8013      	strh	r3, [r2, #0]

	uid_cdc_state_msg[port].header.bmRequestType =
   8027a:	4a0e      	ldr	r2, [pc, #56]	; (802b4 <udi_cdc_comm_enable+0x44>)
   8027c:	20a1      	movs	r0, #161	; 0xa1
   8027e:	7010      	strb	r0, [r2, #0]
			USB_REQ_DIR_IN | USB_REQ_TYPE_CLASS |
			USB_REQ_RECIP_INTERFACE;
	uid_cdc_state_msg[port].header.bNotification = USB_REQ_CDC_NOTIFY_SERIAL_STATE;
   80280:	2020      	movs	r0, #32
   80282:	7050      	strb	r0, [r2, #1]
	uid_cdc_state_msg[port].header.wValue = LE16(0);
   80284:	8053      	strh	r3, [r2, #2]
	default:
		iface_comm_num = UDI_CDC_COMM_IFACE_NUMBER_0;
		break;
	}

	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
   80286:	8093      	strh	r3, [r2, #4]
	uid_cdc_state_msg[port].header.wLength = LE16(2);
   80288:	2002      	movs	r0, #2
   8028a:	80d0      	strh	r0, [r2, #6]
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
   8028c:	8113      	strh	r3, [r2, #8]

	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
   8028e:	4a0a      	ldr	r2, [pc, #40]	; (802b8 <udi_cdc_comm_enable+0x48>)
   80290:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
   80294:	6010      	str	r0, [r2, #0]
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
   80296:	7113      	strb	r3, [r2, #4]
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
   80298:	7153      	strb	r3, [r2, #5]
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
   8029a:	2308      	movs	r3, #8
   8029c:	7193      	strb	r3, [r2, #6]
	// to initialize memories or indicate that interface is enabled
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
	if (!UDI_CDC_ENABLE_EXT(port)) {
		return false;
	}
	udi_cdc_nb_comm_enabled++;
   8029e:	780b      	ldrb	r3, [r1, #0]
   802a0:	3301      	adds	r3, #1
   802a2:	b2db      	uxtb	r3, r3
   802a4:	700b      	strb	r3, [r1, #0]
	return true;
}
   802a6:	2001      	movs	r0, #1
   802a8:	4770      	bx	lr
   802aa:	bf00      	nop
   802ac:	20070afc 	.word	0x20070afc
   802b0:	20070ba8 	.word	0x20070ba8
   802b4:	20070b14 	.word	0x20070b14
   802b8:	20070a60 	.word	0x20070a60

000802bc <udi_cdc_comm_disable>:
}

void udi_cdc_comm_disable(void)
{
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
   802bc:	4b02      	ldr	r3, [pc, #8]	; (802c8 <udi_cdc_comm_disable+0xc>)
   802be:	781a      	ldrb	r2, [r3, #0]
   802c0:	3a01      	subs	r2, #1
   802c2:	b2d2      	uxtb	r2, r2
   802c4:	701a      	strb	r2, [r3, #0]
   802c6:	4770      	bx	lr
   802c8:	20070afc 	.word	0x20070afc

000802cc <udi_cdc_data_disable>:
void udi_cdc_data_disable(void)
{
	uint8_t port;

	Assert(udi_cdc_nb_data_enabled != 0);
	udi_cdc_nb_data_enabled--;
   802cc:	4b04      	ldr	r3, [pc, #16]	; (802e0 <udi_cdc_data_disable+0x14>)
   802ce:	781a      	ldrb	r2, [r3, #0]
   802d0:	3a01      	subs	r2, #1
   802d2:	b2d2      	uxtb	r2, r2
   802d4:	701a      	strb	r2, [r3, #0]
	port = udi_cdc_nb_data_enabled;
   802d6:	781b      	ldrb	r3, [r3, #0]
	UDI_CDC_DISABLE_EXT(port);
	udi_cdc_data_running = false;
   802d8:	2200      	movs	r2, #0
   802da:	4b02      	ldr	r3, [pc, #8]	; (802e4 <udi_cdc_data_disable+0x18>)
   802dc:	701a      	strb	r2, [r3, #0]
   802de:	4770      	bx	lr
   802e0:	20070a68 	.word	0x20070a68
   802e4:	20070b08 	.word	0x20070b08

000802e8 <udi_cdc_data_setup>:
}

bool udi_cdc_data_setup(void)
{
	return false;  // request Not supported
}
   802e8:	2000      	movs	r0, #0
   802ea:	4770      	bx	lr

000802ec <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
	return 0;      // CDC don't have multiple alternate setting
}
   802ec:	2000      	movs	r0, #0
   802ee:	4770      	bx	lr

000802f0 <udi_cdc_comm_setup>:

bool udi_cdc_comm_setup(void)
{
	uint8_t port = udi_cdc_setup_to_port();

	if (Udd_setup_is_in()) {
   802f0:	4b1d      	ldr	r3, [pc, #116]	; (80368 <udi_cdc_comm_setup+0x78>)
   802f2:	781b      	ldrb	r3, [r3, #0]
   802f4:	f013 0f80 	tst.w	r3, #128	; 0x80
   802f8:	d012      	beq.n	80320 <udi_cdc_comm_setup+0x30>
		// GET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
   802fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
   802fe:	2b20      	cmp	r3, #32
   80300:	d128      	bne.n	80354 <udi_cdc_comm_setup+0x64>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
   80302:	4b19      	ldr	r3, [pc, #100]	; (80368 <udi_cdc_comm_setup+0x78>)
   80304:	785b      	ldrb	r3, [r3, #1]
   80306:	2b21      	cmp	r3, #33	; 0x21
   80308:	d126      	bne.n	80358 <udi_cdc_comm_setup+0x68>
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
   8030a:	4b17      	ldr	r3, [pc, #92]	; (80368 <udi_cdc_comm_setup+0x78>)
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
   8030c:	88db      	ldrh	r3, [r3, #6]
   8030e:	2b07      	cmp	r3, #7
   80310:	d124      	bne.n	8035c <udi_cdc_comm_setup+0x6c>
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.payload =
   80312:	4b15      	ldr	r3, [pc, #84]	; (80368 <udi_cdc_comm_setup+0x78>)
   80314:	4a15      	ldr	r2, [pc, #84]	; (8036c <udi_cdc_comm_setup+0x7c>)
   80316:	609a      	str	r2, [r3, #8]
						(uint8_t *) &
						udi_cdc_line_coding[port];
				udd_g_ctrlreq.payload_size =
   80318:	2207      	movs	r2, #7
   8031a:	819a      	strh	r2, [r3, #12]
						sizeof(usb_cdc_line_coding_t);
				return true;
   8031c:	2001      	movs	r0, #1
   8031e:	4770      	bx	lr
			}
		}
	}
	if (Udd_setup_is_out()) {
		// SET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
   80320:	f003 0360 	and.w	r3, r3, #96	; 0x60
   80324:	2b20      	cmp	r3, #32
   80326:	d11b      	bne.n	80360 <udi_cdc_comm_setup+0x70>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
   80328:	4b0f      	ldr	r3, [pc, #60]	; (80368 <udi_cdc_comm_setup+0x78>)
   8032a:	7858      	ldrb	r0, [r3, #1]
   8032c:	2820      	cmp	r0, #32
   8032e:	d004      	beq.n	8033a <udi_cdc_comm_setup+0x4a>
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
			}
		}
	}
	return false;  // request Not supported
   80330:	2822      	cmp	r0, #34	; 0x22
   80332:	bf14      	ite	ne
   80334:	2000      	movne	r0, #0
   80336:	2001      	moveq	r0, #1
   80338:	4770      	bx	lr
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
   8033a:	4b0b      	ldr	r3, [pc, #44]	; (80368 <udi_cdc_comm_setup+0x78>)
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
   8033c:	88db      	ldrh	r3, [r3, #6]
   8033e:	2b07      	cmp	r3, #7
   80340:	d110      	bne.n	80364 <udi_cdc_comm_setup+0x74>
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.callback =
   80342:	4b09      	ldr	r3, [pc, #36]	; (80368 <udi_cdc_comm_setup+0x78>)
   80344:	4a0a      	ldr	r2, [pc, #40]	; (80370 <udi_cdc_comm_setup+0x80>)
   80346:	611a      	str	r2, [r3, #16]
						udi_cdc_line_coding_received;
				udd_g_ctrlreq.payload =
   80348:	4a08      	ldr	r2, [pc, #32]	; (8036c <udi_cdc_comm_setup+0x7c>)
   8034a:	609a      	str	r2, [r3, #8]
						(uint8_t *) &
						udi_cdc_line_coding[port];
				udd_g_ctrlreq.payload_size =
   8034c:	2207      	movs	r2, #7
   8034e:	819a      	strh	r2, [r3, #12]
						sizeof(usb_cdc_line_coding_t);
				return true;
   80350:	2001      	movs	r0, #1
   80352:	4770      	bx	lr
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
			}
		}
	}
	return false;  // request Not supported
   80354:	2000      	movs	r0, #0
   80356:	4770      	bx	lr
   80358:	2000      	movs	r0, #0
   8035a:	4770      	bx	lr
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
   8035c:	2000      	movs	r0, #0
   8035e:	4770      	bx	lr
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
			}
		}
	}
	return false;  // request Not supported
   80360:	2000      	movs	r0, #0
   80362:	4770      	bx	lr
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
   80364:	2000      	movs	r0, #0
				return true;
			}
		}
	}
	return false;  // request Not supported
}
   80366:	4770      	bx	lr
   80368:	20070d7c 	.word	0x20070d7c
   8036c:	20070a60 	.word	0x20070a60
   80370:	00080375 	.word	0x00080375

00080374 <udi_cdc_line_coding_received>:
	}
	return port;
}

static void udi_cdc_line_coding_received(void)
{
   80374:	4770      	bx	lr
   80376:	bf00      	nop

00080378 <udi_cdc_tx_send>:
	udi_cdc_tx_send(port);
}


static void udi_cdc_tx_send(uint8_t port)
{
   80378:	b530      	push	{r4, r5, lr}
   8037a:	b083      	sub	sp, #12

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
   8037c:	4b42      	ldr	r3, [pc, #264]	; (80488 <udi_cdc_tx_send+0x110>)
   8037e:	781b      	ldrb	r3, [r3, #0]
   80380:	f013 0fff 	tst.w	r3, #255	; 0xff
   80384:	d17e      	bne.n	80484 <udi_cdc_tx_send+0x10c>
		return; // Already on going or wait next SOF to send next data
	}
	if (udd_is_high_speed()) {
   80386:	4b41      	ldr	r3, [pc, #260]	; (8048c <udi_cdc_tx_send+0x114>)
   80388:	4798      	blx	r3
   8038a:	b130      	cbz	r0, 8039a <udi_cdc_tx_send+0x22>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
   8038c:	4b40      	ldr	r3, [pc, #256]	; (80490 <udi_cdc_tx_send+0x118>)
   8038e:	881c      	ldrh	r4, [r3, #0]
   80390:	4b40      	ldr	r3, [pc, #256]	; (80494 <udi_cdc_tx_send+0x11c>)
   80392:	4798      	blx	r3
   80394:	4284      	cmp	r4, r0
   80396:	d106      	bne.n	803a6 <udi_cdc_tx_send+0x2e>
   80398:	e074      	b.n	80484 <udi_cdc_tx_send+0x10c>
			return; // Wait next SOF to send next data
		}
	}else{
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
   8039a:	4b3d      	ldr	r3, [pc, #244]	; (80490 <udi_cdc_tx_send+0x118>)
   8039c:	881c      	ldrh	r4, [r3, #0]
   8039e:	4b3e      	ldr	r3, [pc, #248]	; (80498 <udi_cdc_tx_send+0x120>)
   803a0:	4798      	blx	r3
   803a2:	4284      	cmp	r4, r0
   803a4:	d06e      	beq.n	80484 <udi_cdc_tx_send+0x10c>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   803a6:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
   803aa:	f1d3 0501 	rsbs	r5, r3, #1
   803ae:	bf38      	it	cc
   803b0:	2500      	movcc	r5, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   803b2:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   803b4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   803b8:	2200      	movs	r2, #0
   803ba:	4b38      	ldr	r3, [pc, #224]	; (8049c <udi_cdc_tx_send+0x124>)
   803bc:	701a      	strb	r2, [r3, #0]
			return; // Wait next SOF to send next data
		}
	}

	flags = cpu_irq_save(); // to protect udi_cdc_tx_buf_sel
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
   803be:	4b38      	ldr	r3, [pc, #224]	; (804a0 <udi_cdc_tx_send+0x128>)
   803c0:	781c      	ldrb	r4, [r3, #0]
   803c2:	b2e4      	uxtb	r4, r4
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
   803c4:	4b37      	ldr	r3, [pc, #220]	; (804a4 <udi_cdc_tx_send+0x12c>)
   803c6:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
   803ca:	b9db      	cbnz	r3, 80404 <udi_cdc_tx_send+0x8c>
		sof_zlp_counter++;
   803cc:	4b36      	ldr	r3, [pc, #216]	; (804a8 <udi_cdc_tx_send+0x130>)
   803ce:	881a      	ldrh	r2, [r3, #0]
   803d0:	3201      	adds	r2, #1
   803d2:	801a      	strh	r2, [r3, #0]
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
   803d4:	4b2d      	ldr	r3, [pc, #180]	; (8048c <udi_cdc_tx_send+0x114>)
   803d6:	4798      	blx	r3
   803d8:	b918      	cbnz	r0, 803e2 <udi_cdc_tx_send+0x6a>
   803da:	4b33      	ldr	r3, [pc, #204]	; (804a8 <udi_cdc_tx_send+0x130>)
   803dc:	881b      	ldrh	r3, [r3, #0]
   803de:	2b63      	cmp	r3, #99	; 0x63
   803e0:	d907      	bls.n	803f2 <udi_cdc_tx_send+0x7a>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
   803e2:	4b2a      	ldr	r3, [pc, #168]	; (8048c <udi_cdc_tx_send+0x114>)
   803e4:	4798      	blx	r3
   803e6:	b168      	cbz	r0, 80404 <udi_cdc_tx_send+0x8c>
   803e8:	4b2f      	ldr	r3, [pc, #188]	; (804a8 <udi_cdc_tx_send+0x130>)
   803ea:	881b      	ldrh	r3, [r3, #0]
   803ec:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
   803f0:	d208      	bcs.n	80404 <udi_cdc_tx_send+0x8c>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   803f2:	2d00      	cmp	r5, #0
   803f4:	d046      	beq.n	80484 <udi_cdc_tx_send+0x10c>
		cpu_irq_enable();
   803f6:	2201      	movs	r2, #1
   803f8:	4b28      	ldr	r3, [pc, #160]	; (8049c <udi_cdc_tx_send+0x124>)
   803fa:	701a      	strb	r2, [r3, #0]
   803fc:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   80400:	b662      	cpsie	i
   80402:	e03f      	b.n	80484 <udi_cdc_tx_send+0x10c>
			cpu_irq_restore(flags);
			return;
		}
	}
	sof_zlp_counter = 0;
   80404:	2200      	movs	r2, #0
   80406:	4b28      	ldr	r3, [pc, #160]	; (804a8 <udi_cdc_tx_send+0x130>)
   80408:	801a      	strh	r2, [r3, #0]

	if (!udi_cdc_tx_both_buf_to_send[port]) {
   8040a:	4b28      	ldr	r3, [pc, #160]	; (804ac <udi_cdc_tx_send+0x134>)
   8040c:	781b      	ldrb	r3, [r3, #0]
   8040e:	f013 0fff 	tst.w	r3, #255	; 0xff
   80412:	d106      	bne.n	80422 <udi_cdc_tx_send+0xaa>
		// Send current Buffer
		// and switch the current buffer
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
   80414:	4294      	cmp	r4, r2
   80416:	bf14      	ite	ne
   80418:	2200      	movne	r2, #0
   8041a:	2201      	moveq	r2, #1
   8041c:	4b20      	ldr	r3, [pc, #128]	; (804a0 <udi_cdc_tx_send+0x128>)
   8041e:	701a      	strb	r2, [r3, #0]
   80420:	e003      	b.n	8042a <udi_cdc_tx_send+0xb2>
	}else{
		// Send the other Buffer
		// and no switch the current buffer
		buf_sel_trans = (buf_sel_trans==0)?1:0;
   80422:	f1d4 0401 	rsbs	r4, r4, #1
   80426:	bf38      	it	cc
   80428:	2400      	movcc	r4, #0
	}
	udi_cdc_tx_trans_ongoing[port] = true;
   8042a:	2201      	movs	r2, #1
   8042c:	4b16      	ldr	r3, [pc, #88]	; (80488 <udi_cdc_tx_send+0x110>)
   8042e:	701a      	strb	r2, [r3, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   80430:	b125      	cbz	r5, 8043c <udi_cdc_tx_send+0xc4>
		cpu_irq_enable();
   80432:	4b1a      	ldr	r3, [pc, #104]	; (8049c <udi_cdc_tx_send+0x124>)
   80434:	701a      	strb	r2, [r3, #0]
   80436:	f3bf 8f5f 	dmb	sy
   8043a:	b662      	cpsie	i
	cpu_irq_restore(flags);

	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
   8043c:	4625      	mov	r5, r4
   8043e:	4b19      	ldr	r3, [pc, #100]	; (804a4 <udi_cdc_tx_send+0x12c>)
   80440:	f833 4014 	ldrh.w	r4, [r3, r4, lsl #1]
   80444:	3c40      	subs	r4, #64	; 0x40
   80446:	bf18      	it	ne
   80448:	2401      	movne	r4, #1
	if (b_short_packet) {
   8044a:	b164      	cbz	r4, 80466 <udi_cdc_tx_send+0xee>
		if (udd_is_high_speed()) {
   8044c:	4b0f      	ldr	r3, [pc, #60]	; (8048c <udi_cdc_tx_send+0x114>)
   8044e:	4798      	blx	r3
   80450:	b120      	cbz	r0, 8045c <udi_cdc_tx_send+0xe4>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
   80452:	4b10      	ldr	r3, [pc, #64]	; (80494 <udi_cdc_tx_send+0x11c>)
   80454:	4798      	blx	r3
   80456:	4b0e      	ldr	r3, [pc, #56]	; (80490 <udi_cdc_tx_send+0x118>)
   80458:	8018      	strh	r0, [r3, #0]
   8045a:	e007      	b.n	8046c <udi_cdc_tx_send+0xf4>
		}else{
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
   8045c:	4b0e      	ldr	r3, [pc, #56]	; (80498 <udi_cdc_tx_send+0x120>)
   8045e:	4798      	blx	r3
   80460:	4b0b      	ldr	r3, [pc, #44]	; (80490 <udi_cdc_tx_send+0x118>)
   80462:	8018      	strh	r0, [r3, #0]
   80464:	e002      	b.n	8046c <udi_cdc_tx_send+0xf4>
		}
	}else{
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
   80466:	2200      	movs	r2, #0
   80468:	4b09      	ldr	r3, [pc, #36]	; (80490 <udi_cdc_tx_send+0x118>)
   8046a:	801a      	strh	r2, [r3, #0]
		break;
	}
	udd_ep_run( ep,
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
   8046c:	4b0d      	ldr	r3, [pc, #52]	; (804a4 <udi_cdc_tx_send+0x12c>)
#undef UDI_CDC_PORT_TO_DATA_EP_IN
	default:
		ep = UDI_CDC_DATA_EP_IN_0;
		break;
	}
	udd_ep_run( ep,
   8046e:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
   80472:	4a0f      	ldr	r2, [pc, #60]	; (804b0 <udi_cdc_tx_send+0x138>)
   80474:	9200      	str	r2, [sp, #0]
   80476:	2081      	movs	r0, #129	; 0x81
   80478:	4621      	mov	r1, r4
   8047a:	4a0e      	ldr	r2, [pc, #56]	; (804b4 <udi_cdc_tx_send+0x13c>)
   8047c:	eb02 1285 	add.w	r2, r2, r5, lsl #6
   80480:	4c0d      	ldr	r4, [pc, #52]	; (804b8 <udi_cdc_tx_send+0x140>)
   80482:	47a0      	blx	r4
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
			udi_cdc_data_sent);
}
   80484:	b003      	add	sp, #12
   80486:	bd30      	pop	{r4, r5, pc}
   80488:	20070b10 	.word	0x20070b10
   8048c:	00081dad 	.word	0x00081dad
   80490:	20070b04 	.word	0x20070b04
   80494:	00081df9 	.word	0x00081df9
   80498:	00081de9 	.word	0x00081de9
   8049c:	200701d8 	.word	0x200701d8
   804a0:	20070a6c 	.word	0x20070a6c
   804a4:	20070af0 	.word	0x20070af0
   804a8:	20070af4 	.word	0x20070af4
   804ac:	20070ba4 	.word	0x20070ba4
   804b0:	000804bd 	.word	0x000804bd
   804b4:	20070a70 	.word	0x20070a70
   804b8:	00082025 	.word	0x00082025

000804bc <udi_cdc_data_sent>:
	udi_cdc_rx_start(port);
}


static void udi_cdc_data_sent(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
   804bc:	b508      	push	{r3, lr}
	default:
		port = 0;
		break;
	}

	if (UDD_EP_TRANSFER_OK != status) {
   804be:	b978      	cbnz	r0, 804e0 <udi_cdc_data_sent+0x24>
		// Abort transfer
		return;
	}
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
   804c0:	4b08      	ldr	r3, [pc, #32]	; (804e4 <udi_cdc_data_sent+0x28>)
   804c2:	781b      	ldrb	r3, [r3, #0]
   804c4:	f013 0fff 	tst.w	r3, #255	; 0xff
   804c8:	bf14      	ite	ne
   804ca:	2200      	movne	r2, #0
   804cc:	2201      	moveq	r2, #1
   804ce:	4b06      	ldr	r3, [pc, #24]	; (804e8 <udi_cdc_data_sent+0x2c>)
   804d0:	f823 0012 	strh.w	r0, [r3, r2, lsl #1]
	udi_cdc_tx_both_buf_to_send[port] = false;
   804d4:	4b05      	ldr	r3, [pc, #20]	; (804ec <udi_cdc_data_sent+0x30>)
   804d6:	7018      	strb	r0, [r3, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
   804d8:	4b05      	ldr	r3, [pc, #20]	; (804f0 <udi_cdc_data_sent+0x34>)
   804da:	7018      	strb	r0, [r3, #0]

	if (n != 0) {
		UDI_CDC_TX_EMPTY_NOTIFY(port);
	}
	udi_cdc_tx_send(port);
   804dc:	4b05      	ldr	r3, [pc, #20]	; (804f4 <udi_cdc_data_sent+0x38>)
   804de:	4798      	blx	r3
   804e0:	bd08      	pop	{r3, pc}
   804e2:	bf00      	nop
   804e4:	20070a6c 	.word	0x20070a6c
   804e8:	20070af0 	.word	0x20070af0
   804ec:	20070ba4 	.word	0x20070ba4
   804f0:	20070b10 	.word	0x20070b10
   804f4:	00080379 	.word	0x00080379

000804f8 <udi_cdc_data_sof_notify>:
{
	return 0;      // CDC don't have multiple alternate setting
}

void udi_cdc_data_sof_notify(void)
{
   804f8:	b508      	push	{r3, lr}
	static uint8_t port_notify = 0;

	// A call of udi_cdc_data_sof_notify() is done for each port
	udi_cdc_tx_send(port_notify);
   804fa:	2000      	movs	r0, #0
   804fc:	4b01      	ldr	r3, [pc, #4]	; (80504 <udi_cdc_data_sof_notify+0xc>)
   804fe:	4798      	blx	r3
   80500:	bd08      	pop	{r3, pc}
   80502:	bf00      	nop
   80504:	00080379 	.word	0x00080379

00080508 <udi_cdc_multi_get_nb_received_data>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   80508:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   8050c:	b672      	cpsid	i
   8050e:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   80512:	2100      	movs	r1, #0
   80514:	4a0a      	ldr	r2, [pc, #40]	; (80540 <udi_cdc_multi_get_nb_received_data+0x38>)
   80516:	7011      	strb	r1, [r2, #0]

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
   80518:	4a0a      	ldr	r2, [pc, #40]	; (80544 <udi_cdc_multi_get_nb_received_data+0x3c>)
   8051a:	8812      	ldrh	r2, [r2, #0]
   8051c:	b292      	uxth	r2, r2
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
   8051e:	490a      	ldr	r1, [pc, #40]	; (80548 <udi_cdc_multi_get_nb_received_data+0x40>)
   80520:	7808      	ldrb	r0, [r1, #0]
   80522:	b2c0      	uxtb	r0, r0
   80524:	4909      	ldr	r1, [pc, #36]	; (8054c <udi_cdc_multi_get_nb_received_data+0x44>)
   80526:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
   8052a:	b280      	uxth	r0, r0
   8052c:	1a80      	subs	r0, r0, r2
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   8052e:	b92b      	cbnz	r3, 8053c <udi_cdc_multi_get_nb_received_data+0x34>
		cpu_irq_enable();
   80530:	2201      	movs	r2, #1
   80532:	4b03      	ldr	r3, [pc, #12]	; (80540 <udi_cdc_multi_get_nb_received_data+0x38>)
   80534:	701a      	strb	r2, [r3, #0]
   80536:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   8053a:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return nb_received;
}
   8053c:	4770      	bx	lr
   8053e:	bf00      	nop
   80540:	200701d8 	.word	0x200701d8
   80544:	20070b00 	.word	0x20070b00
   80548:	20070b0c 	.word	0x20070b0c
   8054c:	20070af8 	.word	0x20070af8

00080550 <udi_cdc_multi_is_rx_ready>:
{
	return udi_cdc_multi_get_nb_received_data(0);
}

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
   80550:	b508      	push	{r3, lr}
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
   80552:	4b03      	ldr	r3, [pc, #12]	; (80560 <udi_cdc_multi_is_rx_ready+0x10>)
   80554:	4798      	blx	r3
}
   80556:	3000      	adds	r0, #0
   80558:	bf18      	it	ne
   8055a:	2001      	movne	r0, #1
   8055c:	bd08      	pop	{r3, pc}
   8055e:	bf00      	nop
   80560:	00080509 	.word	0x00080509

00080564 <udi_cdc_rx_start>:
//-------------------------------------------------
//------- Internal routines to process data transfer


static bool udi_cdc_rx_start(uint8_t port)
{
   80564:	b510      	push	{r4, lr}
   80566:	b082      	sub	sp, #8
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   80568:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
   8056c:	f1d3 0301 	rsbs	r3, r3, #1
   80570:	bf38      	it	cc
   80572:	2300      	movcc	r3, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   80574:	b672      	cpsid	i
   80576:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8057a:	2100      	movs	r1, #0
   8057c:	4a1f      	ldr	r2, [pc, #124]	; (805fc <udi_cdc_rx_start+0x98>)
   8057e:	7011      	strb	r1, [r2, #0]
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
   80580:	4a1f      	ldr	r2, [pc, #124]	; (80600 <udi_cdc_rx_start+0x9c>)
   80582:	7814      	ldrb	r4, [r2, #0]
   80584:	b2e4      	uxtb	r4, r4
	if (udi_cdc_rx_trans_ongoing[port] ||
   80586:	4a1f      	ldr	r2, [pc, #124]	; (80604 <udi_cdc_rx_start+0xa0>)
   80588:	7812      	ldrb	r2, [r2, #0]
   8058a:	f012 0fff 	tst.w	r2, #255	; 0xff
   8058e:	d108      	bne.n	805a2 <udi_cdc_rx_start+0x3e>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
   80590:	4a1d      	ldr	r2, [pc, #116]	; (80608 <udi_cdc_rx_start+0xa4>)
   80592:	8811      	ldrh	r1, [r2, #0]
   80594:	b289      	uxth	r1, r1
   80596:	4a1d      	ldr	r2, [pc, #116]	; (8060c <udi_cdc_rx_start+0xa8>)
   80598:	f832 2014 	ldrh.w	r2, [r2, r4, lsl #1]
   8059c:	b292      	uxth	r2, r2
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
	if (udi_cdc_rx_trans_ongoing[port] ||
   8059e:	4291      	cmp	r1, r2
   805a0:	d208      	bcs.n	805b4 <udi_cdc_rx_start+0x50>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   805a2:	b33b      	cbz	r3, 805f4 <udi_cdc_rx_start+0x90>
		cpu_irq_enable();
   805a4:	2201      	movs	r2, #1
   805a6:	4b15      	ldr	r3, [pc, #84]	; (805fc <udi_cdc_rx_start+0x98>)
   805a8:	701a      	strb	r2, [r3, #0]
   805aa:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   805ae:	b662      	cpsie	i
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
		// Transfer already on-going or current buffer no empty
		cpu_irq_restore(flags);
		return false;
   805b0:	2000      	movs	r0, #0
   805b2:	e020      	b.n	805f6 <udi_cdc_rx_start+0x92>
	}

	// Change current buffer
	udi_cdc_rx_pos[port] = 0;
   805b4:	2100      	movs	r1, #0
   805b6:	4a14      	ldr	r2, [pc, #80]	; (80608 <udi_cdc_rx_start+0xa4>)
   805b8:	8011      	strh	r1, [r2, #0]
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
   805ba:	428c      	cmp	r4, r1
   805bc:	bf14      	ite	ne
   805be:	2100      	movne	r1, #0
   805c0:	2101      	moveq	r1, #1
   805c2:	4a0f      	ldr	r2, [pc, #60]	; (80600 <udi_cdc_rx_start+0x9c>)
   805c4:	7011      	strb	r1, [r2, #0]

	// Start transfer on RX
	udi_cdc_rx_trans_ongoing[port] = true;
   805c6:	2101      	movs	r1, #1
   805c8:	4a0e      	ldr	r2, [pc, #56]	; (80604 <udi_cdc_rx_start+0xa0>)
   805ca:	7011      	strb	r1, [r2, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   805cc:	b123      	cbz	r3, 805d8 <udi_cdc_rx_start+0x74>
		cpu_irq_enable();
   805ce:	4b0b      	ldr	r3, [pc, #44]	; (805fc <udi_cdc_rx_start+0x98>)
   805d0:	7019      	strb	r1, [r3, #0]
   805d2:	f3bf 8f5f 	dmb	sy
   805d6:	b662      	cpsie	i
	cpu_irq_restore(flags);

	if (udi_cdc_multi_is_rx_ready(port)) {
   805d8:	2000      	movs	r0, #0
   805da:	4b0d      	ldr	r3, [pc, #52]	; (80610 <udi_cdc_rx_start+0xac>)
   805dc:	4798      	blx	r3
#undef UDI_CDC_PORT_TO_DATA_EP_OUT
	default:
		ep = UDI_CDC_DATA_EP_OUT_0;
		break;
	}
	return udd_ep_run(ep,
   805de:	4b0d      	ldr	r3, [pc, #52]	; (80614 <udi_cdc_rx_start+0xb0>)
   805e0:	9300      	str	r3, [sp, #0]
   805e2:	2002      	movs	r0, #2
   805e4:	2101      	movs	r1, #1
   805e6:	4a0c      	ldr	r2, [pc, #48]	; (80618 <udi_cdc_rx_start+0xb4>)
   805e8:	eb02 1284 	add.w	r2, r2, r4, lsl #6
   805ec:	2340      	movs	r3, #64	; 0x40
   805ee:	4c0b      	ldr	r4, [pc, #44]	; (8061c <udi_cdc_rx_start+0xb8>)
   805f0:	47a0      	blx	r4
   805f2:	e000      	b.n	805f6 <udi_cdc_rx_start+0x92>
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
	if (udi_cdc_rx_trans_ongoing[port] ||
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
		// Transfer already on-going or current buffer no empty
		cpu_irq_restore(flags);
		return false;
   805f4:	2000      	movs	r0, #0
	return udd_ep_run(ep,
			true,
			udi_cdc_rx_buf[port][buf_sel_trans],
			UDI_CDC_RX_BUFFERS,
			udi_cdc_data_received);
}
   805f6:	b002      	add	sp, #8
   805f8:	bd10      	pop	{r4, pc}
   805fa:	bf00      	nop
   805fc:	200701d8 	.word	0x200701d8
   80600:	20070b0c 	.word	0x20070b0c
   80604:	20070ba0 	.word	0x20070ba0
   80608:	20070b00 	.word	0x20070b00
   8060c:	20070af8 	.word	0x20070af8
   80610:	00080551 	.word	0x00080551
   80614:	000806b1 	.word	0x000806b1
   80618:	20070b20 	.word	0x20070b20
   8061c:	00082025 	.word	0x00082025

00080620 <udi_cdc_data_enable>:
	udi_cdc_nb_comm_enabled++;
	return true;
}

bool udi_cdc_data_enable(void)
{
   80620:	b510      	push	{r4, lr}
	uint8_t port;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
	udi_cdc_nb_data_enabled = 0;
   80622:	2400      	movs	r4, #0
   80624:	4b15      	ldr	r3, [pc, #84]	; (8067c <udi_cdc_data_enable+0x5c>)
   80626:	701c      	strb	r4, [r3, #0]
	}
	port = udi_cdc_nb_data_enabled;
#endif

	// Initialize TX management
	udi_cdc_tx_trans_ongoing[port] = false;
   80628:	4b15      	ldr	r3, [pc, #84]	; (80680 <udi_cdc_data_enable+0x60>)
   8062a:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_both_buf_to_send[port] = false;
   8062c:	4b15      	ldr	r3, [pc, #84]	; (80684 <udi_cdc_data_enable+0x64>)
   8062e:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_sel[port] = 0;
   80630:	4b15      	ldr	r3, [pc, #84]	; (80688 <udi_cdc_data_enable+0x68>)
   80632:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][0] = 0;
   80634:	4b15      	ldr	r3, [pc, #84]	; (8068c <udi_cdc_data_enable+0x6c>)
   80636:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][1] = 0;
   80638:	805c      	strh	r4, [r3, #2]
	udi_cdc_tx_sof_num[port] = 0;
   8063a:	4b15      	ldr	r3, [pc, #84]	; (80690 <udi_cdc_data_enable+0x70>)
   8063c:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_send(port);
   8063e:	4620      	mov	r0, r4
   80640:	4b14      	ldr	r3, [pc, #80]	; (80694 <udi_cdc_data_enable+0x74>)
   80642:	4798      	blx	r3

	// Initialize RX management
	udi_cdc_rx_trans_ongoing[port] = false;
   80644:	4b14      	ldr	r3, [pc, #80]	; (80698 <udi_cdc_data_enable+0x78>)
   80646:	701c      	strb	r4, [r3, #0]
	udi_cdc_rx_buf_sel[port] = 0;
   80648:	4b14      	ldr	r3, [pc, #80]	; (8069c <udi_cdc_data_enable+0x7c>)
   8064a:	701c      	strb	r4, [r3, #0]
	udi_cdc_rx_buf_nb[port][0] = 0;
   8064c:	4b14      	ldr	r3, [pc, #80]	; (806a0 <udi_cdc_data_enable+0x80>)
   8064e:	801c      	strh	r4, [r3, #0]
	udi_cdc_rx_buf_nb[port][1] = 0;
   80650:	805c      	strh	r4, [r3, #2]
	udi_cdc_rx_pos[port] = 0;
   80652:	4b14      	ldr	r3, [pc, #80]	; (806a4 <udi_cdc_data_enable+0x84>)
   80654:	801c      	strh	r4, [r3, #0]
	if (!udi_cdc_rx_start(port)) {
   80656:	4620      	mov	r0, r4
   80658:	4b13      	ldr	r3, [pc, #76]	; (806a8 <udi_cdc_data_enable+0x88>)
   8065a:	4798      	blx	r3
   8065c:	4602      	mov	r2, r0
   8065e:	b158      	cbz	r0, 80678 <udi_cdc_data_enable+0x58>
		return false;
	}
	udi_cdc_nb_data_enabled++;
   80660:	4b06      	ldr	r3, [pc, #24]	; (8067c <udi_cdc_data_enable+0x5c>)
   80662:	7819      	ldrb	r1, [r3, #0]
   80664:	3101      	adds	r1, #1
   80666:	b2c9      	uxtb	r1, r1
   80668:	7019      	strb	r1, [r3, #0]
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
   8066a:	781b      	ldrb	r3, [r3, #0]
   8066c:	b2db      	uxtb	r3, r3
   8066e:	2b01      	cmp	r3, #1
   80670:	d102      	bne.n	80678 <udi_cdc_data_enable+0x58>
		udi_cdc_data_running = true;
   80672:	2101      	movs	r1, #1
   80674:	4b0d      	ldr	r3, [pc, #52]	; (806ac <udi_cdc_data_enable+0x8c>)
   80676:	7019      	strb	r1, [r3, #0]
	}
	return true;
}
   80678:	4610      	mov	r0, r2
   8067a:	bd10      	pop	{r4, pc}
   8067c:	20070a68 	.word	0x20070a68
   80680:	20070b10 	.word	0x20070b10
   80684:	20070ba4 	.word	0x20070ba4
   80688:	20070a6c 	.word	0x20070a6c
   8068c:	20070af0 	.word	0x20070af0
   80690:	20070b04 	.word	0x20070b04
   80694:	00080379 	.word	0x00080379
   80698:	20070ba0 	.word	0x20070ba0
   8069c:	20070b0c 	.word	0x20070b0c
   806a0:	20070af8 	.word	0x20070af8
   806a4:	20070b00 	.word	0x20070b00
   806a8:	00080565 	.word	0x00080565
   806ac:	20070b08 	.word	0x20070b08

000806b0 <udi_cdc_data_received>:
			udi_cdc_data_received);
}


static void udi_cdc_data_received(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
   806b0:	b510      	push	{r4, lr}
   806b2:	b082      	sub	sp, #8
	default:
		port = 0;
		break;
	}

	if (UDD_EP_TRANSFER_OK != status) {
   806b4:	b9d8      	cbnz	r0, 806ee <udi_cdc_data_received+0x3e>
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
   806b6:	4b0f      	ldr	r3, [pc, #60]	; (806f4 <udi_cdc_data_received+0x44>)
   806b8:	781b      	ldrb	r3, [r3, #0]
   806ba:	f013 0fff 	tst.w	r3, #255	; 0xff
   806be:	bf14      	ite	ne
   806c0:	2300      	movne	r3, #0
   806c2:	2301      	moveq	r3, #1
	if (!n) {
   806c4:	b951      	cbnz	r1, 806dc <udi_cdc_data_received+0x2c>
		udd_ep_run( ep,
   806c6:	490c      	ldr	r1, [pc, #48]	; (806f8 <udi_cdc_data_received+0x48>)
   806c8:	9100      	str	r1, [sp, #0]
   806ca:	4610      	mov	r0, r2
   806cc:	2101      	movs	r1, #1
   806ce:	4a0b      	ldr	r2, [pc, #44]	; (806fc <udi_cdc_data_received+0x4c>)
   806d0:	eb02 1283 	add.w	r2, r2, r3, lsl #6
   806d4:	2340      	movs	r3, #64	; 0x40
   806d6:	4c0a      	ldr	r4, [pc, #40]	; (80700 <udi_cdc_data_received+0x50>)
   806d8:	47a0      	blx	r4
				true,
				udi_cdc_rx_buf[port][buf_sel_trans],
				UDI_CDC_RX_BUFFERS,
				udi_cdc_data_received);
		return;
   806da:	e008      	b.n	806ee <udi_cdc_data_received+0x3e>
	}
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
   806dc:	b289      	uxth	r1, r1
   806de:	4a09      	ldr	r2, [pc, #36]	; (80704 <udi_cdc_data_received+0x54>)
   806e0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	udi_cdc_rx_trans_ongoing[port] = false;
   806e4:	2000      	movs	r0, #0
   806e6:	4b08      	ldr	r3, [pc, #32]	; (80708 <udi_cdc_data_received+0x58>)
   806e8:	7018      	strb	r0, [r3, #0]
	udi_cdc_rx_start(port);
   806ea:	4b08      	ldr	r3, [pc, #32]	; (8070c <udi_cdc_data_received+0x5c>)
   806ec:	4798      	blx	r3
}
   806ee:	b002      	add	sp, #8
   806f0:	bd10      	pop	{r4, pc}
   806f2:	bf00      	nop
   806f4:	20070b0c 	.word	0x20070b0c
   806f8:	000806b1 	.word	0x000806b1
   806fc:	20070b20 	.word	0x20070b20
   80700:	00082025 	.word	0x00082025
   80704:	20070af8 	.word	0x20070af8
   80708:	20070ba0 	.word	0x20070ba0
   8070c:	00080565 	.word	0x00080565

00080710 <udc_next_desc_in_iface>:
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
   80710:	4b0f      	ldr	r3, [pc, #60]	; (80750 <udc_next_desc_in_iface+0x40>)
   80712:	681b      	ldr	r3, [r3, #0]
   80714:	681b      	ldr	r3, [r3, #0]
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
   80716:	885a      	ldrh	r2, [r3, #2]
   80718:	441a      	add	r2, r3
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   8071a:	7803      	ldrb	r3, [r0, #0]
   8071c:	4418      	add	r0, r3
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
   8071e:	4290      	cmp	r0, r2
   80720:	d210      	bcs.n	80744 <udc_next_desc_in_iface+0x34>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
   80722:	7843      	ldrb	r3, [r0, #1]
   80724:	2b04      	cmp	r3, #4
   80726:	d00f      	beq.n	80748 <udc_next_desc_in_iface+0x38>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
   80728:	428b      	cmp	r3, r1
   8072a:	d105      	bne.n	80738 <udc_next_desc_in_iface+0x28>
   8072c:	4770      	bx	lr
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
   8072e:	7843      	ldrb	r3, [r0, #1]
   80730:	2b04      	cmp	r3, #4
   80732:	d00b      	beq.n	8074c <udc_next_desc_in_iface+0x3c>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
   80734:	428b      	cmp	r3, r1
   80736:	d00a      	beq.n	8074e <udc_next_desc_in_iface+0x3e>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   80738:	7803      	ldrb	r3, [r0, #0]
   8073a:	4418      	add	r0, r3
	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
   8073c:	4290      	cmp	r0, r2
   8073e:	d3f6      	bcc.n	8072e <udc_next_desc_in_iface+0x1e>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
	}
	return NULL; // No specific descriptor found
   80740:	2000      	movs	r0, #0
   80742:	4770      	bx	lr
   80744:	2000      	movs	r0, #0
   80746:	4770      	bx	lr
   80748:	2000      	movs	r0, #0
   8074a:	4770      	bx	lr
   8074c:	2000      	movs	r0, #0
}
   8074e:	4770      	bx	lr
   80750:	20070bac 	.word	0x20070bac

00080754 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
   80754:	b508      	push	{r3, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
   80756:	4b03      	ldr	r3, [pc, #12]	; (80764 <udc_valid_address+0x10>)
   80758:	7898      	ldrb	r0, [r3, #2]
   8075a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   8075e:	4b02      	ldr	r3, [pc, #8]	; (80768 <udc_valid_address+0x14>)
   80760:	4798      	blx	r3
   80762:	bd08      	pop	{r3, pc}
   80764:	20070d7c 	.word	0x20070d7c
   80768:	00081db1 	.word	0x00081db1

0008076c <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
   8076c:	b410      	push	{r4}
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
   8076e:	4b16      	ldr	r3, [pc, #88]	; (807c8 <udc_update_iface_desc+0x5c>)
   80770:	781b      	ldrb	r3, [r3, #0]
   80772:	b303      	cbz	r3, 807b6 <udc_update_iface_desc+0x4a>
		return false;
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   80774:	4b15      	ldr	r3, [pc, #84]	; (807cc <udc_update_iface_desc+0x60>)
   80776:	681b      	ldr	r3, [r3, #0]
   80778:	681b      	ldr	r3, [r3, #0]
   8077a:	791a      	ldrb	r2, [r3, #4]
   8077c:	4282      	cmp	r2, r0
   8077e:	d91c      	bls.n	807ba <udc_update_iface_desc+0x4e>
		return false;
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
   80780:	4a13      	ldr	r2, [pc, #76]	; (807d0 <udc_update_iface_desc+0x64>)
   80782:	6013      	str	r3, [r2, #0]
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
   80784:	885c      	ldrh	r4, [r3, #2]
   80786:	441c      	add	r4, r3
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
   80788:	42a3      	cmp	r3, r4
   8078a:	d218      	bcs.n	807be <udc_update_iface_desc+0x52>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
   8078c:	785a      	ldrb	r2, [r3, #1]
   8078e:	2a04      	cmp	r2, #4
   80790:	d109      	bne.n	807a6 <udc_update_iface_desc+0x3a>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
   80792:	789a      	ldrb	r2, [r3, #2]
   80794:	4282      	cmp	r2, r0
   80796:	d106      	bne.n	807a6 <udc_update_iface_desc+0x3a>
   80798:	78da      	ldrb	r2, [r3, #3]
   8079a:	428a      	cmp	r2, r1
   8079c:	d103      	bne.n	807a6 <udc_update_iface_desc+0x3a>
   8079e:	4a0c      	ldr	r2, [pc, #48]	; (807d0 <udc_update_iface_desc+0x64>)
   807a0:	6013      	str	r3, [r2, #0]
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
   807a2:	2001      	movs	r0, #1
   807a4:	e00c      	b.n	807c0 <udc_update_iface_desc+0x54>
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
   807a6:	781a      	ldrb	r2, [r3, #0]
   807a8:	4413      	add	r3, r2
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
   807aa:	42a3      	cmp	r3, r4
   807ac:	d3ee      	bcc.n	8078c <udc_update_iface_desc+0x20>
   807ae:	4a08      	ldr	r2, [pc, #32]	; (807d0 <udc_update_iface_desc+0x64>)
   807b0:	6013      	str	r3, [r2, #0]
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
   807b2:	2000      	movs	r0, #0
   807b4:	e004      	b.n	807c0 <udc_update_iface_desc+0x54>
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
		return false;
   807b6:	2000      	movs	r0, #0
   807b8:	e002      	b.n	807c0 <udc_update_iface_desc+0x54>
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
   807ba:	2000      	movs	r0, #0
   807bc:	e000      	b.n	807c0 <udc_update_iface_desc+0x54>
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
   807be:	2000      	movs	r0, #0
}
   807c0:	f85d 4b04 	ldr.w	r4, [sp], #4
   807c4:	4770      	bx	lr
   807c6:	bf00      	nop
   807c8:	20070bbc 	.word	0x20070bbc
   807cc:	20070bac 	.word	0x20070bac
   807d0:	20070bc0 	.word	0x20070bc0

000807d4 <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
   807d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   807d8:	4604      	mov	r4, r0
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   807da:	2100      	movs	r1, #0
   807dc:	4b12      	ldr	r3, [pc, #72]	; (80828 <udc_iface_disable+0x54>)
   807de:	4798      	blx	r3
   807e0:	4680      	mov	r8, r0
   807e2:	b1e8      	cbz	r0, 80820 <udc_iface_disable+0x4c>
		return false;
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   807e4:	4b11      	ldr	r3, [pc, #68]	; (8082c <udc_iface_disable+0x58>)
   807e6:	681b      	ldr	r3, [r3, #0]
   807e8:	685b      	ldr	r3, [r3, #4]
   807ea:	f853 9024 	ldr.w	r9, [r3, r4, lsl #2]

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   807ee:	f8d9 300c 	ldr.w	r3, [r9, #12]
   807f2:	4798      	blx	r3
   807f4:	4601      	mov	r1, r0
   807f6:	4620      	mov	r0, r4
   807f8:	4b0b      	ldr	r3, [pc, #44]	; (80828 <udc_iface_disable+0x54>)
   807fa:	4798      	blx	r3
   807fc:	4680      	mov	r8, r0
   807fe:	b178      	cbz	r0, 80820 <udc_iface_disable+0x4c>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   80800:	4b0b      	ldr	r3, [pc, #44]	; (80830 <udc_iface_disable+0x5c>)
   80802:	681c      	ldr	r4, [r3, #0]
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   80804:	2605      	movs	r6, #5
   80806:	4d0b      	ldr	r5, [pc, #44]	; (80834 <udc_iface_disable+0x60>)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
   80808:	4f0b      	ldr	r7, [pc, #44]	; (80838 <udc_iface_disable+0x64>)
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   8080a:	4620      	mov	r0, r4
   8080c:	4631      	mov	r1, r6
   8080e:	47a8      	blx	r5
					udc_next_desc_in_iface((UDC_DESC_STORAGE
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
   80810:	4604      	mov	r4, r0
   80812:	b110      	cbz	r0, 8081a <udc_iface_disable+0x46>
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
   80814:	7880      	ldrb	r0, [r0, #2]
   80816:	47b8      	blx	r7
		}
   80818:	e7f7      	b.n	8080a <udc_iface_disable+0x36>
	}
#endif

	// Disable interface
	udi_api->disable();
   8081a:	f8d9 3004 	ldr.w	r3, [r9, #4]
   8081e:	4798      	blx	r3
	return true;
}
   80820:	4640      	mov	r0, r8
   80822:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80826:	bf00      	nop
   80828:	0008076d 	.word	0x0008076d
   8082c:	20070bac 	.word	0x20070bac
   80830:	20070bc0 	.word	0x20070bc0
   80834:	00080711 	.word	0x00080711
   80838:	00081e15 	.word	0x00081e15

0008083c <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
   8083c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80840:	4680      	mov	r8, r0
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
   80842:	4b10      	ldr	r3, [pc, #64]	; (80884 <udc_iface_enable+0x48>)
   80844:	4798      	blx	r3
   80846:	4603      	mov	r3, r0
   80848:	b1c8      	cbz	r0, 8087e <udc_iface_enable+0x42>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   8084a:	4b0f      	ldr	r3, [pc, #60]	; (80888 <udc_iface_enable+0x4c>)
   8084c:	681c      	ldr	r4, [r3, #0]
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   8084e:	2605      	movs	r6, #5
   80850:	4d0e      	ldr	r5, [pc, #56]	; (8088c <udc_iface_enable+0x50>)
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
   80852:	4f0f      	ldr	r7, [pc, #60]	; (80890 <udc_iface_enable+0x54>)

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   80854:	4620      	mov	r0, r4
   80856:	4631      	mov	r1, r6
   80858:	47a8      	blx	r5
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
   8085a:	4604      	mov	r4, r0
   8085c:	b138      	cbz	r0, 8086e <udc_iface_enable+0x32>
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
   8085e:	7880      	ldrb	r0, [r0, #2]
   80860:	78e1      	ldrb	r1, [r4, #3]
   80862:	88a2      	ldrh	r2, [r4, #4]
   80864:	47b8      	blx	r7
   80866:	4603      	mov	r3, r0
   80868:	2800      	cmp	r0, #0
   8086a:	d1f3      	bne.n	80854 <udc_iface_enable+0x18>
   8086c:	e007      	b.n	8087e <udc_iface_enable+0x42>
			return false;
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
   8086e:	4b09      	ldr	r3, [pc, #36]	; (80894 <udc_iface_enable+0x58>)
   80870:	681b      	ldr	r3, [r3, #0]
   80872:	685b      	ldr	r3, [r3, #4]
   80874:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
   80878:	681b      	ldr	r3, [r3, #0]
   8087a:	4798      	blx	r3
   8087c:	4603      	mov	r3, r0
}
   8087e:	4618      	mov	r0, r3
   80880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80884:	0008076d 	.word	0x0008076d
   80888:	20070bc0 	.word	0x20070bc0
   8088c:	00080711 	.word	0x00080711
   80890:	00082119 	.word	0x00082119
   80894:	20070bac 	.word	0x20070bac

00080898 <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
   80898:	b570      	push	{r4, r5, r6, lr}
	uint8_t iface_num;

	if (udc_num_configuration) {
   8089a:	4b0d      	ldr	r3, [pc, #52]	; (808d0 <udc_reset+0x38>)
   8089c:	781b      	ldrb	r3, [r3, #0]
   8089e:	b183      	cbz	r3, 808c2 <udc_reset+0x2a>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   808a0:	4b0c      	ldr	r3, [pc, #48]	; (808d4 <udc_reset+0x3c>)
   808a2:	681b      	ldr	r3, [r3, #0]
   808a4:	681b      	ldr	r3, [r3, #0]
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
   808a6:	791b      	ldrb	r3, [r3, #4]
   808a8:	b15b      	cbz	r3, 808c2 <udc_reset+0x2a>
   808aa:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
   808ac:	4e0a      	ldr	r6, [pc, #40]	; (808d8 <udc_reset+0x40>)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   808ae:	4d09      	ldr	r5, [pc, #36]	; (808d4 <udc_reset+0x3c>)
				iface_num++) {
			udc_iface_disable(iface_num);
   808b0:	4620      	mov	r0, r4
   808b2:	47b0      	blx	r6
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
   808b4:	3401      	adds	r4, #1
   808b6:	b2e4      	uxtb	r4, r4
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   808b8:	682b      	ldr	r3, [r5, #0]
   808ba:	681b      	ldr	r3, [r3, #0]
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
   808bc:	791b      	ldrb	r3, [r3, #4]
   808be:	42a3      	cmp	r3, r4
   808c0:	d8f6      	bhi.n	808b0 <udc_reset+0x18>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
   808c2:	2200      	movs	r2, #0
   808c4:	4b02      	ldr	r3, [pc, #8]	; (808d0 <udc_reset+0x38>)
   808c6:	701a      	strb	r2, [r3, #0]
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
   808c8:	2201      	movs	r2, #1
   808ca:	4b04      	ldr	r3, [pc, #16]	; (808dc <udc_reset+0x44>)
   808cc:	801a      	strh	r2, [r3, #0]
   808ce:	bd70      	pop	{r4, r5, r6, pc}
   808d0:	20070bbc 	.word	0x20070bbc
   808d4:	20070bac 	.word	0x20070bac
   808d8:	000807d5 	.word	0x000807d5
   808dc:	20070bb8 	.word	0x20070bb8

000808e0 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
   808e0:	b538      	push	{r3, r4, r5, lr}
	uint8_t iface_num;

	if (udc_num_configuration) {
   808e2:	4b0c      	ldr	r3, [pc, #48]	; (80914 <udc_sof_notify+0x34>)
   808e4:	781b      	ldrb	r3, [r3, #0]
   808e6:	b19b      	cbz	r3, 80910 <udc_sof_notify+0x30>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   808e8:	4b0b      	ldr	r3, [pc, #44]	; (80918 <udc_sof_notify+0x38>)
   808ea:	681b      	ldr	r3, [r3, #0]
   808ec:	681a      	ldr	r2, [r3, #0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
   808ee:	7912      	ldrb	r2, [r2, #4]
   808f0:	b172      	cbz	r2, 80910 <udc_sof_notify+0x30>
   808f2:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   808f4:	4d08      	ldr	r5, [pc, #32]	; (80918 <udc_sof_notify+0x38>)
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
   808f6:	685b      	ldr	r3, [r3, #4]
   808f8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   808fc:	691b      	ldr	r3, [r3, #16]
   808fe:	b103      	cbz	r3, 80902 <udc_sof_notify+0x22>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
   80900:	4798      	blx	r3
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
   80902:	3401      	adds	r4, #1
   80904:	b2e4      	uxtb	r4, r4
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   80906:	682b      	ldr	r3, [r5, #0]
   80908:	681a      	ldr	r2, [r3, #0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
   8090a:	7912      	ldrb	r2, [r2, #4]
   8090c:	42a2      	cmp	r2, r4
   8090e:	d8f2      	bhi.n	808f6 <udc_sof_notify+0x16>
   80910:	bd38      	pop	{r3, r4, r5, pc}
   80912:	bf00      	nop
   80914:	20070bbc 	.word	0x20070bbc
   80918:	20070bac 	.word	0x20070bac

0008091c <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
   8091c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
   80920:	4b77      	ldr	r3, [pc, #476]	; (80b00 <udc_process_setup+0x1e4>)
   80922:	2200      	movs	r2, #0
   80924:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
   80926:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   80928:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
   8092a:	781b      	ldrb	r3, [r3, #0]
   8092c:	f013 0f80 	tst.w	r3, #128	; 0x80
   80930:	f000 81e6 	beq.w	80d00 <udc_process_setup+0x3e4>
		if (udd_g_ctrlreq.req.wLength == 0) {
   80934:	4a72      	ldr	r2, [pc, #456]	; (80b00 <udc_process_setup+0x1e4>)
   80936:	88d2      	ldrh	r2, [r2, #6]
   80938:	2a00      	cmp	r2, #0
   8093a:	f040 81e5 	bne.w	80d08 <udc_process_setup+0x3ec>
   8093e:	e1db      	b.n	80cf8 <udc_process_setup+0x3dc>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   80940:	f013 031f 	ands.w	r3, r3, #31
   80944:	d167      	bne.n	80a16 <udc_process_setup+0xfa>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
   80946:	496e      	ldr	r1, [pc, #440]	; (80b00 <udc_process_setup+0x1e4>)
   80948:	7849      	ldrb	r1, [r1, #1]
   8094a:	2906      	cmp	r1, #6
   8094c:	d00d      	beq.n	8096a <udc_process_setup+0x4e>
   8094e:	2908      	cmp	r1, #8
   80950:	d057      	beq.n	80a02 <udc_process_setup+0xe6>
   80952:	2900      	cmp	r1, #0
   80954:	d15f      	bne.n	80a16 <udc_process_setup+0xfa>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
   80956:	2a02      	cmp	r2, #2
   80958:	d105      	bne.n	80966 <udc_process_setup+0x4a>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
   8095a:	486a      	ldr	r0, [pc, #424]	; (80b04 <udc_process_setup+0x1e8>)
   8095c:	2102      	movs	r1, #2
   8095e:	4b6a      	ldr	r3, [pc, #424]	; (80b08 <udc_process_setup+0x1ec>)
   80960:	4798      	blx	r3
			sizeof(udc_device_status));
	return true;
   80962:	2401      	movs	r4, #1
   80964:	e174      	b.n	80c50 <udc_process_setup+0x334>
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
		return false;
   80966:	2400      	movs	r4, #0
   80968:	e172      	b.n	80c50 <udc_process_setup+0x334>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
   8096a:	4b65      	ldr	r3, [pc, #404]	; (80b00 <udc_process_setup+0x1e4>)
   8096c:	885a      	ldrh	r2, [r3, #2]

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
   8096e:	0a13      	lsrs	r3, r2, #8
   80970:	3b01      	subs	r3, #1
   80972:	2b0e      	cmp	r3, #14
   80974:	d83b      	bhi.n	809ee <udc_process_setup+0xd2>
   80976:	e8df f003 	tbb	[pc, r3]
   8097a:	0f08      	.short	0x0f08
   8097c:	3a3a3a2a 	.word	0x3a3a3a2a
   80980:	3a3a3a3a 	.word	0x3a3a3a3a
   80984:	3a3a3a3a 	.word	0x3a3a3a3a
   80988:	22          	.byte	0x22
   80989:	00          	.byte	0x00
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
   8098a:	4b60      	ldr	r3, [pc, #384]	; (80b0c <udc_process_setup+0x1f0>)
   8098c:	681b      	ldr	r3, [r3, #0]
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
   8098e:	4618      	mov	r0, r3
   80990:	7819      	ldrb	r1, [r3, #0]
   80992:	4b5d      	ldr	r3, [pc, #372]	; (80b08 <udc_process_setup+0x1ec>)
   80994:	4798      	blx	r3
   80996:	e021      	b.n	809dc <udc_process_setup+0xc0>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
   80998:	b2d2      	uxtb	r2, r2
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
   8099a:	4b5c      	ldr	r3, [pc, #368]	; (80b0c <udc_process_setup+0x1f0>)
   8099c:	681b      	ldr	r3, [r3, #0]
   8099e:	7c5b      	ldrb	r3, [r3, #17]
   809a0:	4293      	cmp	r3, r2
   809a2:	d926      	bls.n	809f2 <udc_process_setup+0xd6>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
   809a4:	4b59      	ldr	r3, [pc, #356]	; (80b0c <udc_process_setup+0x1f0>)
   809a6:	685b      	ldr	r3, [r3, #4]
   809a8:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
   809ac:	4618      	mov	r0, r3
   809ae:	8859      	ldrh	r1, [r3, #2]
   809b0:	4b55      	ldr	r3, [pc, #340]	; (80b08 <udc_process_setup+0x1ec>)
   809b2:	4798      	blx	r3
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   809b4:	4b52      	ldr	r3, [pc, #328]	; (80b00 <udc_process_setup+0x1e4>)
   809b6:	689b      	ldr	r3, [r3, #8]
   809b8:	2202      	movs	r2, #2
   809ba:	705a      	strb	r2, [r3, #1]
   809bc:	e00e      	b.n	809dc <udc_process_setup+0xc0>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
   809be:	4b53      	ldr	r3, [pc, #332]	; (80b0c <udc_process_setup+0x1f0>)
   809c0:	689b      	ldr	r3, [r3, #8]
   809c2:	b1c3      	cbz	r3, 809f6 <udc_process_setup+0xda>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
   809c4:	4618      	mov	r0, r3
   809c6:	8859      	ldrh	r1, [r3, #2]
   809c8:	4b4f      	ldr	r3, [pc, #316]	; (80b08 <udc_process_setup+0x1ec>)
   809ca:	4798      	blx	r3
   809cc:	e006      	b.n	809dc <udc_process_setup+0xc0>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
   809ce:	f012 0fff 	tst.w	r2, #255	; 0xff
   809d2:	d112      	bne.n	809fa <udc_process_setup+0xde>
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
   809d4:	484e      	ldr	r0, [pc, #312]	; (80b10 <udc_process_setup+0x1f4>)
   809d6:	2104      	movs	r1, #4
   809d8:	4b4b      	ldr	r3, [pc, #300]	; (80b08 <udc_process_setup+0x1ec>)
   809da:	4798      	blx	r3
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
   809dc:	4b48      	ldr	r3, [pc, #288]	; (80b00 <udc_process_setup+0x1e4>)
   809de:	88da      	ldrh	r2, [r3, #6]
   809e0:	899b      	ldrh	r3, [r3, #12]
   809e2:	4293      	cmp	r3, r2
   809e4:	d90b      	bls.n	809fe <udc_process_setup+0xe2>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   809e6:	4b46      	ldr	r3, [pc, #280]	; (80b00 <udc_process_setup+0x1e4>)
   809e8:	819a      	strh	r2, [r3, #12]
	}
	return true;
   809ea:	2401      	movs	r4, #1
   809ec:	e130      	b.n	80c50 <udc_process_setup+0x334>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
   809ee:	2400      	movs	r4, #0
   809f0:	e12e      	b.n	80c50 <udc_process_setup+0x334>
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
   809f2:	2400      	movs	r4, #0
   809f4:	e12c      	b.n	80c50 <udc_process_setup+0x334>
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
			return false;
   809f6:	2400      	movs	r4, #0
   809f8:	e12a      	b.n	80c50 <udc_process_setup+0x334>
		break;

	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
			return false;
   809fa:	2400      	movs	r4, #0
   809fc:	e128      	b.n	80c50 <udc_process_setup+0x334>
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
	}
	return true;
   809fe:	2401      	movs	r4, #1
   80a00:	e126      	b.n	80c50 <udc_process_setup+0x334>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
   80a02:	2a01      	cmp	r2, #1
   80a04:	d105      	bne.n	80a12 <udc_process_setup+0xf6>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
   80a06:	4843      	ldr	r0, [pc, #268]	; (80b14 <udc_process_setup+0x1f8>)
   80a08:	2101      	movs	r1, #1
   80a0a:	4b3f      	ldr	r3, [pc, #252]	; (80b08 <udc_process_setup+0x1ec>)
   80a0c:	4798      	blx	r3
	return true;
   80a0e:	2401      	movs	r4, #1
   80a10:	e11e      	b.n	80c50 <udc_process_setup+0x334>
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
		return false;
   80a12:	2400      	movs	r4, #0
   80a14:	e11c      	b.n	80c50 <udc_process_setup+0x334>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   80a16:	2b01      	cmp	r3, #1
   80a18:	d12a      	bne.n	80a70 <udc_process_setup+0x154>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
   80a1a:	4939      	ldr	r1, [pc, #228]	; (80b00 <udc_process_setup+0x1e4>)
   80a1c:	7849      	ldrb	r1, [r1, #1]
   80a1e:	290a      	cmp	r1, #10
   80a20:	d126      	bne.n	80a70 <udc_process_setup+0x154>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
   80a22:	2a01      	cmp	r2, #1
   80a24:	d11e      	bne.n	80a64 <udc_process_setup+0x148>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
   80a26:	4b3b      	ldr	r3, [pc, #236]	; (80b14 <udc_process_setup+0x1f8>)
   80a28:	781b      	ldrb	r3, [r3, #0]
   80a2a:	b1eb      	cbz	r3, 80a68 <udc_process_setup+0x14c>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   80a2c:	4b34      	ldr	r3, [pc, #208]	; (80b00 <udc_process_setup+0x1e4>)
   80a2e:	791d      	ldrb	r5, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   80a30:	4b39      	ldr	r3, [pc, #228]	; (80b18 <udc_process_setup+0x1fc>)
   80a32:	681e      	ldr	r6, [r3, #0]
   80a34:	6833      	ldr	r3, [r6, #0]
   80a36:	791b      	ldrb	r3, [r3, #4]
   80a38:	42ab      	cmp	r3, r5
   80a3a:	d917      	bls.n	80a6c <udc_process_setup+0x150>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   80a3c:	4628      	mov	r0, r5
   80a3e:	2100      	movs	r1, #0
   80a40:	4b36      	ldr	r3, [pc, #216]	; (80b1c <udc_process_setup+0x200>)
   80a42:	4798      	blx	r3
   80a44:	4604      	mov	r4, r0
   80a46:	2800      	cmp	r0, #0
   80a48:	f000 8102 	beq.w	80c50 <udc_process_setup+0x334>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   80a4c:	6873      	ldr	r3, [r6, #4]
	udc_iface_setting = udi_api->getsetting();
   80a4e:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
   80a52:	68db      	ldr	r3, [r3, #12]
   80a54:	4798      	blx	r3
   80a56:	4b32      	ldr	r3, [pc, #200]	; (80b20 <udc_process_setup+0x204>)
   80a58:	7018      	strb	r0, [r3, #0]

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
   80a5a:	4618      	mov	r0, r3
   80a5c:	2101      	movs	r1, #1
   80a5e:	4b2a      	ldr	r3, [pc, #168]	; (80b08 <udc_process_setup+0x1ec>)
   80a60:	4798      	blx	r3
   80a62:	e0f5      	b.n	80c50 <udc_process_setup+0x334>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
		return false; // Error in request
   80a64:	2400      	movs	r4, #0
   80a66:	e0f3      	b.n	80c50 <udc_process_setup+0x334>
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
   80a68:	2400      	movs	r4, #0
   80a6a:	e0f1      	b.n	80c50 <udc_process_setup+0x334>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
   80a6c:	2400      	movs	r4, #0
   80a6e:	e0ef      	b.n	80c50 <udc_process_setup+0x334>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   80a70:	2b02      	cmp	r3, #2
   80a72:	f040 80ef 	bne.w	80c54 <udc_process_setup+0x338>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
   80a76:	4b22      	ldr	r3, [pc, #136]	; (80b00 <udc_process_setup+0x1e4>)
   80a78:	785b      	ldrb	r3, [r3, #1]
   80a7a:	2b00      	cmp	r3, #0
   80a7c:	f040 80e3 	bne.w	80c46 <udc_process_setup+0x32a>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
   80a80:	2a02      	cmp	r2, #2
   80a82:	d10b      	bne.n	80a9c <udc_process_setup+0x180>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
   80a84:	4b1e      	ldr	r3, [pc, #120]	; (80b00 <udc_process_setup+0x1e4>)
   80a86:	7918      	ldrb	r0, [r3, #4]
   80a88:	4b26      	ldr	r3, [pc, #152]	; (80b24 <udc_process_setup+0x208>)
   80a8a:	4798      	blx	r3
   80a8c:	4b26      	ldr	r3, [pc, #152]	; (80b28 <udc_process_setup+0x20c>)
   80a8e:	8018      	strh	r0, [r3, #0]
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
   80a90:	4618      	mov	r0, r3
   80a92:	2102      	movs	r1, #2
   80a94:	4b1c      	ldr	r3, [pc, #112]	; (80b08 <udc_process_setup+0x1ec>)
   80a96:	4798      	blx	r3
			sizeof(udc_ep_status));
	return true;
   80a98:	2401      	movs	r4, #1
   80a9a:	e0d9      	b.n	80c50 <udc_process_setup+0x334>
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
		return false;
   80a9c:	2400      	movs	r4, #0
   80a9e:	e0d7      	b.n	80c50 <udc_process_setup+0x334>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   80aa0:	f013 031f 	ands.w	r3, r3, #31
   80aa4:	f040 8084 	bne.w	80bb0 <udc_process_setup+0x294>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
   80aa8:	4a15      	ldr	r2, [pc, #84]	; (80b00 <udc_process_setup+0x1e4>)
   80aaa:	7852      	ldrb	r2, [r2, #1]
   80aac:	3a01      	subs	r2, #1
   80aae:	2a08      	cmp	r2, #8
   80ab0:	d87e      	bhi.n	80bb0 <udc_process_setup+0x294>
   80ab2:	e8df f012 	tbh	[pc, r2, lsl #1]
   80ab6:	0013      	.short	0x0013
   80ab8:	00ca007d 	.word	0x00ca007d
   80abc:	0009007d 	.word	0x0009007d
   80ac0:	007d007d 	.word	0x007d007d
   80ac4:	003d007d 	.word	0x003d007d
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
   80ac8:	4b0d      	ldr	r3, [pc, #52]	; (80b00 <udc_process_setup+0x1e4>)
   80aca:	88db      	ldrh	r3, [r3, #6]
   80acc:	b923      	cbnz	r3, 80ad8 <udc_process_setup+0x1bc>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
   80ace:	4a17      	ldr	r2, [pc, #92]	; (80b2c <udc_process_setup+0x210>)
   80ad0:	4b0b      	ldr	r3, [pc, #44]	; (80b00 <udc_process_setup+0x1e4>)
   80ad2:	611a      	str	r2, [r3, #16]
	return true;
   80ad4:	2401      	movs	r4, #1
   80ad6:	e0bb      	b.n	80c50 <udc_process_setup+0x334>
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
   80ad8:	2400      	movs	r4, #0
   80ada:	e0b9      	b.n	80c50 <udc_process_setup+0x334>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
   80adc:	4b08      	ldr	r3, [pc, #32]	; (80b00 <udc_process_setup+0x1e4>)
   80ade:	88db      	ldrh	r3, [r3, #6]
   80ae0:	b953      	cbnz	r3, 80af8 <udc_process_setup+0x1dc>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
   80ae2:	4b07      	ldr	r3, [pc, #28]	; (80b00 <udc_process_setup+0x1e4>)
   80ae4:	885b      	ldrh	r3, [r3, #2]
   80ae6:	2b01      	cmp	r3, #1
   80ae8:	d108      	bne.n	80afc <udc_process_setup+0x1e0>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
   80aea:	4b06      	ldr	r3, [pc, #24]	; (80b04 <udc_process_setup+0x1e8>)
   80aec:	881a      	ldrh	r2, [r3, #0]
   80aee:	f022 0202 	bic.w	r2, r2, #2
   80af2:	801a      	strh	r2, [r3, #0]
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
   80af4:	2401      	movs	r4, #1
   80af6:	e0ab      	b.n	80c50 <udc_process_setup+0x334>
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
   80af8:	2400      	movs	r4, #0
   80afa:	e0a9      	b.n	80c50 <udc_process_setup+0x334>
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
	}
	return false;
   80afc:	2400      	movs	r4, #0
   80afe:	e0a7      	b.n	80c50 <udc_process_setup+0x334>
   80b00:	20070d7c 	.word	0x20070d7c
   80b04:	20070bb8 	.word	0x20070bb8
   80b08:	00081e09 	.word	0x00081e09
   80b0c:	20070160 	.word	0x20070160
   80b10:	200701d4 	.word	0x200701d4
   80b14:	20070bbc 	.word	0x20070bbc
   80b18:	20070bac 	.word	0x20070bac
   80b1c:	0008076d 	.word	0x0008076d
   80b20:	20070bb4 	.word	0x20070bb4
   80b24:	00081e6d 	.word	0x00081e6d
   80b28:	20070bb0 	.word	0x20070bb0
   80b2c:	00080755 	.word	0x00080755
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
   80b30:	4b79      	ldr	r3, [pc, #484]	; (80d18 <udc_process_setup+0x3fc>)
   80b32:	88db      	ldrh	r3, [r3, #6]
   80b34:	2b00      	cmp	r3, #0
   80b36:	d131      	bne.n	80b9c <udc_process_setup+0x280>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
   80b38:	4b78      	ldr	r3, [pc, #480]	; (80d1c <udc_process_setup+0x400>)
   80b3a:	4798      	blx	r3
   80b3c:	2800      	cmp	r0, #0
   80b3e:	d02f      	beq.n	80ba0 <udc_process_setup+0x284>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   80b40:	4b75      	ldr	r3, [pc, #468]	; (80d18 <udc_process_setup+0x3fc>)
   80b42:	789a      	ldrb	r2, [r3, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
   80b44:	4b76      	ldr	r3, [pc, #472]	; (80d20 <udc_process_setup+0x404>)
   80b46:	681b      	ldr	r3, [r3, #0]
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   80b48:	7c5b      	ldrb	r3, [r3, #17]
   80b4a:	429a      	cmp	r2, r3
   80b4c:	dc2a      	bgt.n	80ba4 <udc_process_setup+0x288>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
   80b4e:	4b75      	ldr	r3, [pc, #468]	; (80d24 <udc_process_setup+0x408>)
   80b50:	4798      	blx	r3

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
   80b52:	4b71      	ldr	r3, [pc, #452]	; (80d18 <udc_process_setup+0x3fc>)
   80b54:	789b      	ldrb	r3, [r3, #2]
   80b56:	4a74      	ldr	r2, [pc, #464]	; (80d28 <udc_process_setup+0x40c>)
   80b58:	7013      	strb	r3, [r2, #0]
	if (udc_num_configuration == 0) {
   80b5a:	b32b      	cbz	r3, 80ba8 <udc_process_setup+0x28c>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
   80b5c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   80b60:	3b01      	subs	r3, #1
   80b62:	4a6f      	ldr	r2, [pc, #444]	; (80d20 <udc_process_setup+0x404>)
   80b64:	6852      	ldr	r2, [r2, #4]
   80b66:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
   80b6a:	4970      	ldr	r1, [pc, #448]	; (80d2c <udc_process_setup+0x410>)
   80b6c:	6008      	str	r0, [r1, #0]
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   80b6e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
   80b72:	791b      	ldrb	r3, [r3, #4]
   80b74:	b1d3      	cbz	r3, 80bac <udc_process_setup+0x290>
   80b76:	2500      	movs	r5, #0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
   80b78:	462f      	mov	r7, r5
   80b7a:	4e6d      	ldr	r6, [pc, #436]	; (80d30 <udc_process_setup+0x414>)
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   80b7c:	4688      	mov	r8, r1
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
   80b7e:	4628      	mov	r0, r5
   80b80:	4639      	mov	r1, r7
   80b82:	47b0      	blx	r6
   80b84:	4604      	mov	r4, r0
   80b86:	2800      	cmp	r0, #0
   80b88:	d062      	beq.n	80c50 <udc_process_setup+0x334>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
   80b8a:	3501      	adds	r5, #1
   80b8c:	b2ed      	uxtb	r5, r5
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   80b8e:	f8d8 3000 	ldr.w	r3, [r8]
   80b92:	681b      	ldr	r3, [r3, #0]
   80b94:	791b      	ldrb	r3, [r3, #4]
   80b96:	42ab      	cmp	r3, r5
   80b98:	d8f1      	bhi.n	80b7e <udc_process_setup+0x262>
   80b9a:	e059      	b.n	80c50 <udc_process_setup+0x334>
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
		return false;
   80b9c:	2400      	movs	r4, #0
   80b9e:	e057      	b.n	80c50 <udc_process_setup+0x334>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
		return false;
   80ba0:	2400      	movs	r4, #0
   80ba2:	e055      	b.n	80c50 <udc_process_setup+0x334>
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
				udc_config.confdev_lsfs->bNumConfigurations) {
			return false;
   80ba4:	2400      	movs	r4, #0
   80ba6:	e053      	b.n	80c50 <udc_process_setup+0x334>
	udc_reset();

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
	if (udc_num_configuration == 0) {
		return true; // Default empty configuration requested
   80ba8:	2401      	movs	r4, #1
   80baa:	e051      	b.n	80c50 <udc_process_setup+0x334>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
		}
	}
	return true;
   80bac:	2401      	movs	r4, #1
   80bae:	e04f      	b.n	80c50 <udc_process_setup+0x334>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   80bb0:	2b01      	cmp	r3, #1
   80bb2:	d11c      	bne.n	80bee <udc_process_setup+0x2d2>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
   80bb4:	4a58      	ldr	r2, [pc, #352]	; (80d18 <udc_process_setup+0x3fc>)
   80bb6:	7852      	ldrb	r2, [r2, #1]
   80bb8:	2a0b      	cmp	r2, #11
   80bba:	d118      	bne.n	80bee <udc_process_setup+0x2d2>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
   80bbc:	4b56      	ldr	r3, [pc, #344]	; (80d18 <udc_process_setup+0x3fc>)
   80bbe:	88db      	ldrh	r3, [r3, #6]
   80bc0:	b98b      	cbnz	r3, 80be6 <udc_process_setup+0x2ca>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
   80bc2:	4b59      	ldr	r3, [pc, #356]	; (80d28 <udc_process_setup+0x40c>)
   80bc4:	781b      	ldrb	r3, [r3, #0]
   80bc6:	b183      	cbz	r3, 80bea <udc_process_setup+0x2ce>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   80bc8:	4b53      	ldr	r3, [pc, #332]	; (80d18 <udc_process_setup+0x3fc>)
   80bca:	791d      	ldrb	r5, [r3, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
   80bcc:	885e      	ldrh	r6, [r3, #2]

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
   80bce:	4628      	mov	r0, r5
   80bd0:	4b58      	ldr	r3, [pc, #352]	; (80d34 <udc_process_setup+0x418>)
   80bd2:	4798      	blx	r3
   80bd4:	4604      	mov	r4, r0
   80bd6:	2800      	cmp	r0, #0
   80bd8:	d03a      	beq.n	80c50 <udc_process_setup+0x334>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
   80bda:	4628      	mov	r0, r5
   80bdc:	b2f1      	uxtb	r1, r6
   80bde:	4b54      	ldr	r3, [pc, #336]	; (80d30 <udc_process_setup+0x414>)
   80be0:	4798      	blx	r3
   80be2:	4604      	mov	r4, r0
   80be4:	e034      	b.n	80c50 <udc_process_setup+0x334>
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
		return false; // Error in request
   80be6:	2400      	movs	r4, #0
   80be8:	e032      	b.n	80c50 <udc_process_setup+0x334>
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
   80bea:	2400      	movs	r4, #0
   80bec:	e030      	b.n	80c50 <udc_process_setup+0x334>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   80bee:	2b02      	cmp	r3, #2
   80bf0:	d130      	bne.n	80c54 <udc_process_setup+0x338>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
   80bf2:	4b49      	ldr	r3, [pc, #292]	; (80d18 <udc_process_setup+0x3fc>)
   80bf4:	785b      	ldrb	r3, [r3, #1]
   80bf6:	2b01      	cmp	r3, #1
   80bf8:	d002      	beq.n	80c00 <udc_process_setup+0x2e4>
   80bfa:	2b03      	cmp	r3, #3
   80bfc:	d010      	beq.n	80c20 <udc_process_setup+0x304>
   80bfe:	e026      	b.n	80c4e <udc_process_setup+0x332>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
   80c00:	4b45      	ldr	r3, [pc, #276]	; (80d18 <udc_process_setup+0x3fc>)
   80c02:	88db      	ldrh	r3, [r3, #6]
   80c04:	b943      	cbnz	r3, 80c18 <udc_process_setup+0x2fc>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   80c06:	4b44      	ldr	r3, [pc, #272]	; (80d18 <udc_process_setup+0x3fc>)
   80c08:	885b      	ldrh	r3, [r3, #2]
   80c0a:	b93b      	cbnz	r3, 80c1c <udc_process_setup+0x300>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   80c0c:	4b42      	ldr	r3, [pc, #264]	; (80d18 <udc_process_setup+0x3fc>)
   80c0e:	7918      	ldrb	r0, [r3, #4]
   80c10:	4b49      	ldr	r3, [pc, #292]	; (80d38 <udc_process_setup+0x41c>)
   80c12:	4798      	blx	r3
   80c14:	4604      	mov	r4, r0
   80c16:	e01b      	b.n	80c50 <udc_process_setup+0x334>
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
   80c18:	2400      	movs	r4, #0
   80c1a:	e019      	b.n	80c50 <udc_process_setup+0x334>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
   80c1c:	2400      	movs	r4, #0
   80c1e:	e017      	b.n	80c50 <udc_process_setup+0x334>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
   80c20:	4b3d      	ldr	r3, [pc, #244]	; (80d18 <udc_process_setup+0x3fc>)
   80c22:	88db      	ldrh	r3, [r3, #6]
   80c24:	b95b      	cbnz	r3, 80c3e <udc_process_setup+0x322>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   80c26:	4b3c      	ldr	r3, [pc, #240]	; (80d18 <udc_process_setup+0x3fc>)
   80c28:	885b      	ldrh	r3, [r3, #2]
   80c2a:	b953      	cbnz	r3, 80c42 <udc_process_setup+0x326>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
   80c2c:	4c3a      	ldr	r4, [pc, #232]	; (80d18 <udc_process_setup+0x3fc>)
   80c2e:	7920      	ldrb	r0, [r4, #4]
   80c30:	4b42      	ldr	r3, [pc, #264]	; (80d3c <udc_process_setup+0x420>)
   80c32:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   80c34:	7920      	ldrb	r0, [r4, #4]
   80c36:	4b42      	ldr	r3, [pc, #264]	; (80d40 <udc_process_setup+0x424>)
   80c38:	4798      	blx	r3
   80c3a:	4604      	mov	r4, r0
   80c3c:	e008      	b.n	80c50 <udc_process_setup+0x334>
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
   80c3e:	2400      	movs	r4, #0
   80c40:	e006      	b.n	80c50 <udc_process_setup+0x334>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
   80c42:	2400      	movs	r4, #0
   80c44:	e004      	b.n	80c50 <udc_process_setup+0x334>
				break;
			}
		}
#endif
	}
	return false;
   80c46:	2400      	movs	r4, #0
   80c48:	e002      	b.n	80c50 <udc_process_setup+0x334>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
   80c4a:	2400      	movs	r4, #0
   80c4c:	e000      	b.n	80c50 <udc_process_setup+0x334>
				break;
			}
		}
#endif
	}
	return false;
   80c4e:	2400      	movs	r4, #0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
   80c50:	2c00      	cmp	r4, #0
   80c52:	d15d      	bne.n	80d10 <udc_process_setup+0x3f4>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
   80c54:	4b30      	ldr	r3, [pc, #192]	; (80d18 <udc_process_setup+0x3fc>)
   80c56:	781b      	ldrb	r3, [r3, #0]
   80c58:	f003 031f 	and.w	r3, r3, #31
   80c5c:	2b01      	cmp	r3, #1
   80c5e:	d11e      	bne.n	80c9e <udc_process_setup+0x382>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
   80c60:	4b31      	ldr	r3, [pc, #196]	; (80d28 <udc_process_setup+0x40c>)
   80c62:	781b      	ldrb	r3, [r3, #0]
   80c64:	b1db      	cbz	r3, 80c9e <udc_process_setup+0x382>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   80c66:	4b2c      	ldr	r3, [pc, #176]	; (80d18 <udc_process_setup+0x3fc>)
   80c68:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   80c6a:	4b30      	ldr	r3, [pc, #192]	; (80d2c <udc_process_setup+0x410>)
   80c6c:	681d      	ldr	r5, [r3, #0]
   80c6e:	682b      	ldr	r3, [r5, #0]
   80c70:	791b      	ldrb	r3, [r3, #4]
   80c72:	42a3      	cmp	r3, r4
   80c74:	d913      	bls.n	80c9e <udc_process_setup+0x382>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   80c76:	4620      	mov	r0, r4
   80c78:	2100      	movs	r1, #0
   80c7a:	4b32      	ldr	r3, [pc, #200]	; (80d44 <udc_process_setup+0x428>)
   80c7c:	4798      	blx	r3
   80c7e:	b170      	cbz	r0, 80c9e <udc_process_setup+0x382>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   80c80:	686b      	ldr	r3, [r5, #4]
   80c82:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   80c86:	68eb      	ldr	r3, [r5, #12]
   80c88:	4798      	blx	r3
   80c8a:	4601      	mov	r1, r0
   80c8c:	4620      	mov	r0, r4
   80c8e:	4b2d      	ldr	r3, [pc, #180]	; (80d44 <udc_process_setup+0x428>)
   80c90:	4798      	blx	r3
   80c92:	b120      	cbz	r0, 80c9e <udc_process_setup+0x382>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
   80c94:	68ab      	ldr	r3, [r5, #8]
   80c96:	4798      	blx	r3
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
   80c98:	4604      	mov	r4, r0
   80c9a:	2800      	cmp	r0, #0
   80c9c:	d138      	bne.n	80d10 <udc_process_setup+0x3f4>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
   80c9e:	4b1e      	ldr	r3, [pc, #120]	; (80d18 <udc_process_setup+0x3fc>)
   80ca0:	781b      	ldrb	r3, [r3, #0]
   80ca2:	f003 031f 	and.w	r3, r3, #31
   80ca6:	2b02      	cmp	r3, #2
   80ca8:	d128      	bne.n	80cfc <udc_process_setup+0x3e0>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
   80caa:	4b1f      	ldr	r3, [pc, #124]	; (80d28 <udc_process_setup+0x40c>)
   80cac:	781b      	ldrb	r3, [r3, #0]
   80cae:	b1fb      	cbz	r3, 80cf0 <udc_process_setup+0x3d4>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   80cb0:	4b1e      	ldr	r3, [pc, #120]	; (80d2c <udc_process_setup+0x410>)
   80cb2:	681b      	ldr	r3, [r3, #0]
   80cb4:	681a      	ldr	r2, [r3, #0]
   80cb6:	7912      	ldrb	r2, [r2, #4]
   80cb8:	b1e2      	cbz	r2, 80cf4 <udc_process_setup+0x3d8>
   80cba:	2500      	movs	r5, #0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   80cbc:	4f21      	ldr	r7, [pc, #132]	; (80d44 <udc_process_setup+0x428>)
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   80cbe:	f8df 806c 	ldr.w	r8, [pc, #108]	; 80d2c <udc_process_setup+0x410>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
   80cc2:	685b      	ldr	r3, [r3, #4]
   80cc4:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   80cc8:	68f3      	ldr	r3, [r6, #12]
   80cca:	4798      	blx	r3
   80ccc:	4601      	mov	r1, r0
   80cce:	4628      	mov	r0, r5
   80cd0:	47b8      	blx	r7
   80cd2:	4604      	mov	r4, r0
   80cd4:	b1e0      	cbz	r0, 80d10 <udc_process_setup+0x3f4>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
   80cd6:	68b3      	ldr	r3, [r6, #8]
   80cd8:	4798      	blx	r3
   80cda:	4604      	mov	r4, r0
   80cdc:	b9c0      	cbnz	r0, 80d10 <udc_process_setup+0x3f4>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
   80cde:	3501      	adds	r5, #1
   80ce0:	b2ed      	uxtb	r5, r5
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   80ce2:	f8d8 3000 	ldr.w	r3, [r8]
   80ce6:	681a      	ldr	r2, [r3, #0]
   80ce8:	7912      	ldrb	r2, [r2, #4]
   80cea:	42aa      	cmp	r2, r5
   80cec:	d8e9      	bhi.n	80cc2 <udc_process_setup+0x3a6>
   80cee:	e00f      	b.n	80d10 <udc_process_setup+0x3f4>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
   80cf0:	2400      	movs	r4, #0
   80cf2:	e00d      	b.n	80d10 <udc_process_setup+0x3f4>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
   80cf4:	2400      	movs	r4, #0
   80cf6:	e00b      	b.n	80d10 <udc_process_setup+0x3f4>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
   80cf8:	2400      	movs	r4, #0
   80cfa:	e009      	b.n	80d10 <udc_process_setup+0x3f4>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
   80cfc:	2400      	movs	r4, #0
   80cfe:	e007      	b.n	80d10 <udc_process_setup+0x3f4>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
   80d00:	f013 0f60 	tst.w	r3, #96	; 0x60
   80d04:	d1a6      	bne.n	80c54 <udc_process_setup+0x338>
   80d06:	e6cb      	b.n	80aa0 <udc_process_setup+0x184>
   80d08:	f013 0f60 	tst.w	r3, #96	; 0x60
   80d0c:	d1a2      	bne.n	80c54 <udc_process_setup+0x338>
   80d0e:	e617      	b.n	80940 <udc_process_setup+0x24>
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
   80d10:	4620      	mov	r0, r4
   80d12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80d16:	bf00      	nop
   80d18:	20070d7c 	.word	0x20070d7c
   80d1c:	00081dd9 	.word	0x00081dd9
   80d20:	20070160 	.word	0x20070160
   80d24:	00080899 	.word	0x00080899
   80d28:	20070bbc 	.word	0x20070bbc
   80d2c:	20070bac 	.word	0x20070bac
   80d30:	0008083d 	.word	0x0008083d
   80d34:	000807d5 	.word	0x000807d5
   80d38:	00081f69 	.word	0x00081f69
   80d3c:	000822f5 	.word	0x000822f5
   80d40:	00081e81 	.word	0x00081e81
   80d44:	0008076d 	.word	0x0008076d

00080d48 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   80d48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80d4c:	460c      	mov	r4, r1
   80d4e:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
   80d50:	b960      	cbnz	r0, 80d6c <_read+0x24>
		return -1;
	}

	for (; len > 0; --len) {
   80d52:	2a00      	cmp	r2, #0
   80d54:	dd0e      	ble.n	80d74 <_read+0x2c>
   80d56:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   80d58:	4e09      	ldr	r6, [pc, #36]	; (80d80 <_read+0x38>)
   80d5a:	4d0a      	ldr	r5, [pc, #40]	; (80d84 <_read+0x3c>)
   80d5c:	6830      	ldr	r0, [r6, #0]
   80d5e:	4621      	mov	r1, r4
   80d60:	682b      	ldr	r3, [r5, #0]
   80d62:	4798      	blx	r3
		ptr++;
   80d64:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   80d66:	42bc      	cmp	r4, r7
   80d68:	d1f8      	bne.n	80d5c <_read+0x14>
   80d6a:	e006      	b.n	80d7a <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
   80d6c:	f04f 30ff 	mov.w	r0, #4294967295
   80d70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len > 0; --len) {
   80d74:	2000      	movs	r0, #0
   80d76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
   80d7a:	4640      	mov	r0, r8
	}
	return nChars;
}
   80d7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80d80:	20070d78 	.word	0x20070d78
   80d84:	20070d70 	.word	0x20070d70

00080d88 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   80d88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80d8c:	460e      	mov	r6, r1
   80d8e:	4615      	mov	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   80d90:	3801      	subs	r0, #1
   80d92:	2802      	cmp	r0, #2
   80d94:	d80f      	bhi.n	80db6 <_write+0x2e>
		return -1;
	}

	for (; len != 0; --len) {
   80d96:	b192      	cbz	r2, 80dbe <_write+0x36>
   80d98:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
   80d9a:	f8df 803c 	ldr.w	r8, [pc, #60]	; 80dd8 <_write+0x50>
   80d9e:	4f0d      	ldr	r7, [pc, #52]	; (80dd4 <_write+0x4c>)
   80da0:	f8d8 0000 	ldr.w	r0, [r8]
   80da4:	5d31      	ldrb	r1, [r6, r4]
   80da6:	683b      	ldr	r3, [r7, #0]
   80da8:	4798      	blx	r3
   80daa:	2800      	cmp	r0, #0
   80dac:	db0a      	blt.n	80dc4 <_write+0x3c>
			return -1;
		}
		++nChars;
   80dae:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   80db0:	42a5      	cmp	r5, r4
   80db2:	d1f5      	bne.n	80da0 <_write+0x18>
   80db4:	e00a      	b.n	80dcc <_write+0x44>
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
   80db6:	f04f 30ff 	mov.w	r0, #4294967295
   80dba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len != 0; --len) {
   80dbe:	2000      	movs	r0, #0
   80dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
   80dc4:	f04f 30ff 	mov.w	r0, #4294967295
   80dc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		++nChars;
   80dcc:	4620      	mov	r0, r4
	}
	return nChars;
}
   80dce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80dd2:	bf00      	nop
   80dd4:	20070d74 	.word	0x20070d74
   80dd8:	20070d78 	.word	0x20070d78

00080ddc <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   80ddc:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   80dde:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   80de2:	4b16      	ldr	r3, [pc, #88]	; (80e3c <board_init+0x60>)
   80de4:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   80de6:	200b      	movs	r0, #11
   80de8:	4c15      	ldr	r4, [pc, #84]	; (80e40 <board_init+0x64>)
   80dea:	47a0      	blx	r4
   80dec:	200c      	movs	r0, #12
   80dee:	47a0      	blx	r4
   80df0:	200d      	movs	r0, #13
   80df2:	47a0      	blx	r4
   80df4:	200e      	movs	r0, #14
   80df6:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   80df8:	203b      	movs	r0, #59	; 0x3b
   80dfa:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80dfe:	4c11      	ldr	r4, [pc, #68]	; (80e44 <board_init+0x68>)
   80e00:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   80e02:	2055      	movs	r0, #85	; 0x55
   80e04:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80e08:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   80e0a:	2056      	movs	r0, #86	; 0x56
   80e0c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80e10:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   80e12:	2068      	movs	r0, #104	; 0x68
   80e14:	490c      	ldr	r1, [pc, #48]	; (80e48 <board_init+0x6c>)
   80e16:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   80e18:	205c      	movs	r0, #92	; 0x5c
   80e1a:	490c      	ldr	r1, [pc, #48]	; (80e4c <board_init+0x70>)
   80e1c:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   80e1e:	480c      	ldr	r0, [pc, #48]	; (80e50 <board_init+0x74>)
   80e20:	f44f 7140 	mov.w	r1, #768	; 0x300
   80e24:	4a0b      	ldr	r2, [pc, #44]	; (80e54 <board_init+0x78>)
   80e26:	4b0c      	ldr	r3, [pc, #48]	; (80e58 <board_init+0x7c>)
   80e28:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   80e2a:	202b      	movs	r0, #43	; 0x2b
   80e2c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80e30:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   80e32:	202a      	movs	r0, #42	; 0x2a
   80e34:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80e38:	47a0      	blx	r4
   80e3a:	bd10      	pop	{r4, pc}
   80e3c:	400e1a50 	.word	0x400e1a50
   80e40:	00081205 	.word	0x00081205
   80e44:	00080f01 	.word	0x00080f01
   80e48:	28000079 	.word	0x28000079
   80e4c:	28000001 	.word	0x28000001
   80e50:	400e0e00 	.word	0x400e0e00
   80e54:	08000001 	.word	0x08000001
   80e58:	00080fd5 	.word	0x00080fd5

00080e5c <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   80e5c:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   80e5e:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   80e62:	d016      	beq.n	80e92 <pio_set_peripheral+0x36>
   80e64:	d804      	bhi.n	80e70 <pio_set_peripheral+0x14>
   80e66:	b1c1      	cbz	r1, 80e9a <pio_set_peripheral+0x3e>
   80e68:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   80e6c:	d00a      	beq.n	80e84 <pio_set_peripheral+0x28>
   80e6e:	e013      	b.n	80e98 <pio_set_peripheral+0x3c>
   80e70:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   80e74:	d011      	beq.n	80e9a <pio_set_peripheral+0x3e>
   80e76:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   80e7a:	d00e      	beq.n	80e9a <pio_set_peripheral+0x3e>
   80e7c:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   80e80:	d10a      	bne.n	80e98 <pio_set_peripheral+0x3c>
   80e82:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   80e84:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   80e86:	6f01      	ldr	r1, [r0, #112]	; 0x70
   80e88:	400b      	ands	r3, r1
   80e8a:	ea23 0302 	bic.w	r3, r3, r2
   80e8e:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   80e90:	e002      	b.n	80e98 <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   80e92:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   80e94:	4313      	orrs	r3, r2
   80e96:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   80e98:	6042      	str	r2, [r0, #4]
   80e9a:	4770      	bx	lr

00080e9c <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   80e9c:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80e9e:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   80ea2:	bf14      	ite	ne
   80ea4:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80ea6:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   80ea8:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   80eac:	bf14      	ite	ne
   80eae:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   80eb0:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   80eb2:	f012 0f02 	tst.w	r2, #2
   80eb6:	d002      	beq.n	80ebe <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   80eb8:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   80ebc:	e004      	b.n	80ec8 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   80ebe:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   80ec2:	bf18      	it	ne
   80ec4:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   80ec8:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   80eca:	6001      	str	r1, [r0, #0]
   80ecc:	4770      	bx	lr
   80ece:	bf00      	nop

00080ed0 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   80ed0:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   80ed2:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80ed4:	9c01      	ldr	r4, [sp, #4]
   80ed6:	b10c      	cbz	r4, 80edc <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   80ed8:	6641      	str	r1, [r0, #100]	; 0x64
   80eda:	e000      	b.n	80ede <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80edc:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   80ede:	b10b      	cbz	r3, 80ee4 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   80ee0:	6501      	str	r1, [r0, #80]	; 0x50
   80ee2:	e000      	b.n	80ee6 <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   80ee4:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   80ee6:	b10a      	cbz	r2, 80eec <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   80ee8:	6301      	str	r1, [r0, #48]	; 0x30
   80eea:	e000      	b.n	80eee <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   80eec:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   80eee:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   80ef0:	6001      	str	r1, [r0, #0]
}
   80ef2:	f85d 4b04 	ldr.w	r4, [sp], #4
   80ef6:	4770      	bx	lr

00080ef8 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   80ef8:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   80efa:	4770      	bx	lr

00080efc <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   80efc:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   80efe:	4770      	bx	lr

00080f00 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   80f00:	b570      	push	{r4, r5, r6, lr}
   80f02:	b082      	sub	sp, #8
   80f04:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   80f06:	0944      	lsrs	r4, r0, #5
   80f08:	f504 1400 	add.w	r4, r4, #2097152	; 0x200000
   80f0c:	f204 7407 	addw	r4, r4, #1799	; 0x707
   80f10:	0266      	lsls	r6, r4, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   80f12:	f001 44f0 	and.w	r4, r1, #2013265920	; 0x78000000
   80f16:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   80f1a:	d030      	beq.n	80f7e <pio_configure_pin+0x7e>
   80f1c:	d806      	bhi.n	80f2c <pio_configure_pin+0x2c>
   80f1e:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   80f22:	d00a      	beq.n	80f3a <pio_configure_pin+0x3a>
   80f24:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   80f28:	d018      	beq.n	80f5c <pio_configure_pin+0x5c>
   80f2a:	e049      	b.n	80fc0 <pio_configure_pin+0xc0>
   80f2c:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   80f30:	d030      	beq.n	80f94 <pio_configure_pin+0x94>
   80f32:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   80f36:	d02d      	beq.n	80f94 <pio_configure_pin+0x94>
   80f38:	e042      	b.n	80fc0 <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   80f3a:	f000 001f 	and.w	r0, r0, #31
   80f3e:	2401      	movs	r4, #1
   80f40:	4084      	lsls	r4, r0
   80f42:	4630      	mov	r0, r6
   80f44:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80f48:	4622      	mov	r2, r4
   80f4a:	4b1f      	ldr	r3, [pc, #124]	; (80fc8 <pio_configure_pin+0xc8>)
   80f4c:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80f4e:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80f52:	bf14      	ite	ne
   80f54:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80f56:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80f58:	2001      	movs	r0, #1
   80f5a:	e032      	b.n	80fc2 <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   80f5c:	f000 001f 	and.w	r0, r0, #31
   80f60:	2401      	movs	r4, #1
   80f62:	4084      	lsls	r4, r0
   80f64:	4630      	mov	r0, r6
   80f66:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80f6a:	4622      	mov	r2, r4
   80f6c:	4b16      	ldr	r3, [pc, #88]	; (80fc8 <pio_configure_pin+0xc8>)
   80f6e:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80f70:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80f74:	bf14      	ite	ne
   80f76:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80f78:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80f7a:	2001      	movs	r0, #1
   80f7c:	e021      	b.n	80fc2 <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   80f7e:	f000 011f 	and.w	r1, r0, #31
   80f82:	2401      	movs	r4, #1
   80f84:	4630      	mov	r0, r6
   80f86:	fa04 f101 	lsl.w	r1, r4, r1
   80f8a:	462a      	mov	r2, r5
   80f8c:	4b0f      	ldr	r3, [pc, #60]	; (80fcc <pio_configure_pin+0xcc>)
   80f8e:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80f90:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   80f92:	e016      	b.n	80fc2 <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80f94:	f000 011f 	and.w	r1, r0, #31
   80f98:	2401      	movs	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80f9a:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80f9e:	ea05 0304 	and.w	r3, r5, r4
   80fa2:	9300      	str	r3, [sp, #0]
   80fa4:	4630      	mov	r0, r6
   80fa6:	fa04 f101 	lsl.w	r1, r4, r1
   80faa:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80fae:	bf14      	ite	ne
   80fb0:	2200      	movne	r2, #0
   80fb2:	2201      	moveq	r2, #1
   80fb4:	f3c5 0380 	ubfx	r3, r5, #2, #1
   80fb8:	4d05      	ldr	r5, [pc, #20]	; (80fd0 <pio_configure_pin+0xd0>)
   80fba:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
   80fbc:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   80fbe:	e000      	b.n	80fc2 <pio_configure_pin+0xc2>

	default:
		return 0;
   80fc0:	2000      	movs	r0, #0
	}

	return 1;
}
   80fc2:	b002      	add	sp, #8
   80fc4:	bd70      	pop	{r4, r5, r6, pc}
   80fc6:	bf00      	nop
   80fc8:	00080e5d 	.word	0x00080e5d
   80fcc:	00080e9d 	.word	0x00080e9d
   80fd0:	00080ed1 	.word	0x00080ed1

00080fd4 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   80fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
   80fd6:	b083      	sub	sp, #12
   80fd8:	4607      	mov	r7, r0
   80fda:	460e      	mov	r6, r1
   80fdc:	4615      	mov	r5, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   80fde:	f002 44f0 	and.w	r4, r2, #2013265920	; 0x78000000
   80fe2:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   80fe6:	d026      	beq.n	81036 <pio_configure_pin_group+0x62>
   80fe8:	d806      	bhi.n	80ff8 <pio_configure_pin_group+0x24>
   80fea:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   80fee:	d00a      	beq.n	81006 <pio_configure_pin_group+0x32>
   80ff0:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   80ff4:	d013      	beq.n	8101e <pio_configure_pin_group+0x4a>
   80ff6:	e034      	b.n	81062 <pio_configure_pin_group+0x8e>
   80ff8:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   80ffc:	d01f      	beq.n	8103e <pio_configure_pin_group+0x6a>
   80ffe:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   81002:	d01c      	beq.n	8103e <pio_configure_pin_group+0x6a>
   81004:	e02d      	b.n	81062 <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   81006:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8100a:	4632      	mov	r2, r6
   8100c:	4b16      	ldr	r3, [pc, #88]	; (81068 <pio_configure_pin_group+0x94>)
   8100e:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   81010:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   81014:	bf14      	ite	ne
   81016:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81018:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   8101a:	2001      	movs	r0, #1
   8101c:	e022      	b.n	81064 <pio_configure_pin_group+0x90>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   8101e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   81022:	4632      	mov	r2, r6
   81024:	4b10      	ldr	r3, [pc, #64]	; (81068 <pio_configure_pin_group+0x94>)
   81026:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   81028:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   8102c:	bf14      	ite	ne
   8102e:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81030:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   81032:	2001      	movs	r0, #1
   81034:	e016      	b.n	81064 <pio_configure_pin_group+0x90>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   81036:	4b0d      	ldr	r3, [pc, #52]	; (8106c <pio_configure_pin_group+0x98>)
   81038:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   8103a:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   8103c:	e012      	b.n	81064 <pio_configure_pin_group+0x90>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   8103e:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   81042:	f005 0301 	and.w	r3, r5, #1
   81046:	9300      	str	r3, [sp, #0]
   81048:	4638      	mov	r0, r7
   8104a:	4631      	mov	r1, r6
   8104c:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   81050:	bf14      	ite	ne
   81052:	2200      	movne	r2, #0
   81054:	2201      	moveq	r2, #1
   81056:	f3c5 0380 	ubfx	r3, r5, #2, #1
   8105a:	4c05      	ldr	r4, [pc, #20]	; (81070 <pio_configure_pin_group+0x9c>)
   8105c:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   8105e:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   81060:	e000      	b.n	81064 <pio_configure_pin_group+0x90>

	default:
		return 0;
   81062:	2000      	movs	r0, #0
	}

	return 1;
}
   81064:	b003      	add	sp, #12
   81066:	bdf0      	pop	{r4, r5, r6, r7, pc}
   81068:	00080e5d 	.word	0x00080e5d
   8106c:	00080e9d 	.word	0x00080e9d
   81070:	00080ed1 	.word	0x00080ed1

00081074 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   81074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81078:	4604      	mov	r4, r0
   8107a:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   8107c:	4b10      	ldr	r3, [pc, #64]	; (810c0 <pio_handler_process+0x4c>)
   8107e:	4798      	blx	r3
   81080:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   81082:	4620      	mov	r0, r4
   81084:	4b0f      	ldr	r3, [pc, #60]	; (810c4 <pio_handler_process+0x50>)
   81086:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   81088:	4005      	ands	r5, r0
   8108a:	d017      	beq.n	810bc <pio_handler_process+0x48>
   8108c:	4f0e      	ldr	r7, [pc, #56]	; (810c8 <pio_handler_process+0x54>)
   8108e:	f107 040c 	add.w	r4, r7, #12
   81092:	376c      	adds	r7, #108	; 0x6c
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   81094:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   81098:	42b3      	cmp	r3, r6
   8109a:	d10a      	bne.n	810b2 <pio_handler_process+0x3e>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   8109c:	f854 1c08 	ldr.w	r1, [r4, #-8]
   810a0:	4229      	tst	r1, r5
   810a2:	d006      	beq.n	810b2 <pio_handler_process+0x3e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   810a4:	6823      	ldr	r3, [r4, #0]
   810a6:	4630      	mov	r0, r6
   810a8:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   810aa:	f854 3c08 	ldr.w	r3, [r4, #-8]
   810ae:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   810b2:	42bc      	cmp	r4, r7
   810b4:	d002      	beq.n	810bc <pio_handler_process+0x48>
   810b6:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   810b8:	2d00      	cmp	r5, #0
   810ba:	d1eb      	bne.n	81094 <pio_handler_process+0x20>
   810bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   810c0:	00080ef9 	.word	0x00080ef9
   810c4:	00080efd 	.word	0x00080efd
   810c8:	20070bc4 	.word	0x20070bc4

000810cc <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   810cc:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   810ce:	4802      	ldr	r0, [pc, #8]	; (810d8 <PIOA_Handler+0xc>)
   810d0:	210b      	movs	r1, #11
   810d2:	4b02      	ldr	r3, [pc, #8]	; (810dc <PIOA_Handler+0x10>)
   810d4:	4798      	blx	r3
   810d6:	bd08      	pop	{r3, pc}
   810d8:	400e0e00 	.word	0x400e0e00
   810dc:	00081075 	.word	0x00081075

000810e0 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   810e0:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   810e2:	4802      	ldr	r0, [pc, #8]	; (810ec <PIOB_Handler+0xc>)
   810e4:	210c      	movs	r1, #12
   810e6:	4b02      	ldr	r3, [pc, #8]	; (810f0 <PIOB_Handler+0x10>)
   810e8:	4798      	blx	r3
   810ea:	bd08      	pop	{r3, pc}
   810ec:	400e1000 	.word	0x400e1000
   810f0:	00081075 	.word	0x00081075

000810f4 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   810f4:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   810f6:	4802      	ldr	r0, [pc, #8]	; (81100 <PIOC_Handler+0xc>)
   810f8:	210d      	movs	r1, #13
   810fa:	4b02      	ldr	r3, [pc, #8]	; (81104 <PIOC_Handler+0x10>)
   810fc:	4798      	blx	r3
   810fe:	bd08      	pop	{r3, pc}
   81100:	400e1200 	.word	0x400e1200
   81104:	00081075 	.word	0x00081075

00081108 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   81108:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   8110a:	4802      	ldr	r0, [pc, #8]	; (81114 <PIOD_Handler+0xc>)
   8110c:	210e      	movs	r1, #14
   8110e:	4b02      	ldr	r3, [pc, #8]	; (81118 <PIOD_Handler+0x10>)
   81110:	4798      	blx	r3
   81112:	bd08      	pop	{r3, pc}
   81114:	400e1400 	.word	0x400e1400
   81118:	00081075 	.word	0x00081075

0008111c <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   8111c:	4b17      	ldr	r3, [pc, #92]	; (8117c <pmc_switch_mck_to_pllack+0x60>)
   8111e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   81120:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   81124:	4310      	orrs	r0, r2
   81126:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81128:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8112a:	f013 0f08 	tst.w	r3, #8
   8112e:	d109      	bne.n	81144 <pmc_switch_mck_to_pllack+0x28>
   81130:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81134:	4911      	ldr	r1, [pc, #68]	; (8117c <pmc_switch_mck_to_pllack+0x60>)
   81136:	e001      	b.n	8113c <pmc_switch_mck_to_pllack+0x20>
			--ul_timeout) {
		if (ul_timeout == 0) {
   81138:	3b01      	subs	r3, #1
   8113a:	d019      	beq.n	81170 <pmc_switch_mck_to_pllack+0x54>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8113c:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   8113e:	f012 0f08 	tst.w	r2, #8
   81142:	d0f9      	beq.n	81138 <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   81144:	4b0d      	ldr	r3, [pc, #52]	; (8117c <pmc_switch_mck_to_pllack+0x60>)
   81146:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   81148:	f022 0203 	bic.w	r2, r2, #3
   8114c:	f042 0202 	orr.w	r2, r2, #2
   81150:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81152:	6e98      	ldr	r0, [r3, #104]	; 0x68
   81154:	f010 0008 	ands.w	r0, r0, #8
   81158:	d10c      	bne.n	81174 <pmc_switch_mck_to_pllack+0x58>
   8115a:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8115e:	4907      	ldr	r1, [pc, #28]	; (8117c <pmc_switch_mck_to_pllack+0x60>)
   81160:	e001      	b.n	81166 <pmc_switch_mck_to_pllack+0x4a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   81162:	3b01      	subs	r3, #1
   81164:	d008      	beq.n	81178 <pmc_switch_mck_to_pllack+0x5c>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81166:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   81168:	f012 0f08 	tst.w	r2, #8
   8116c:	d0f9      	beq.n	81162 <pmc_switch_mck_to_pllack+0x46>
   8116e:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   81170:	2001      	movs	r0, #1
   81172:	4770      	bx	lr
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   81174:	2000      	movs	r0, #0
   81176:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   81178:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   8117a:	4770      	bx	lr
   8117c:	400e0600 	.word	0x400e0600

00081180 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   81180:	b138      	cbz	r0, 81192 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   81182:	4911      	ldr	r1, [pc, #68]	; (811c8 <pmc_switch_mainck_to_xtal+0x48>)
   81184:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   81186:	4a11      	ldr	r2, [pc, #68]	; (811cc <pmc_switch_mainck_to_xtal+0x4c>)
   81188:	401a      	ands	r2, r3
   8118a:	4b11      	ldr	r3, [pc, #68]	; (811d0 <pmc_switch_mainck_to_xtal+0x50>)
   8118c:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   8118e:	620b      	str	r3, [r1, #32]
   81190:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   81192:	4a0d      	ldr	r2, [pc, #52]	; (811c8 <pmc_switch_mainck_to_xtal+0x48>)
   81194:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   81196:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   8119a:	f023 0303 	bic.w	r3, r3, #3
   8119e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   811a2:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   811a6:	0209      	lsls	r1, r1, #8
   811a8:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   811aa:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   811ac:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   811ae:	6e93      	ldr	r3, [r2, #104]	; 0x68
   811b0:	f013 0f01 	tst.w	r3, #1
   811b4:	d0fb      	beq.n	811ae <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   811b6:	4a04      	ldr	r2, [pc, #16]	; (811c8 <pmc_switch_mainck_to_xtal+0x48>)
   811b8:	6a13      	ldr	r3, [r2, #32]
   811ba:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   811be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   811c2:	6213      	str	r3, [r2, #32]
   811c4:	4770      	bx	lr
   811c6:	bf00      	nop
   811c8:	400e0600 	.word	0x400e0600
   811cc:	fec8fffc 	.word	0xfec8fffc
   811d0:	01370002 	.word	0x01370002

000811d4 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   811d4:	4b02      	ldr	r3, [pc, #8]	; (811e0 <pmc_osc_is_ready_mainck+0xc>)
   811d6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   811d8:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   811dc:	4770      	bx	lr
   811de:	bf00      	nop
   811e0:	400e0600 	.word	0x400e0600

000811e4 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   811e4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   811e8:	4b01      	ldr	r3, [pc, #4]	; (811f0 <pmc_disable_pllack+0xc>)
   811ea:	629a      	str	r2, [r3, #40]	; 0x28
   811ec:	4770      	bx	lr
   811ee:	bf00      	nop
   811f0:	400e0600 	.word	0x400e0600

000811f4 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   811f4:	4b02      	ldr	r3, [pc, #8]	; (81200 <pmc_is_locked_pllack+0xc>)
   811f6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   811f8:	f000 0002 	and.w	r0, r0, #2
   811fc:	4770      	bx	lr
   811fe:	bf00      	nop
   81200:	400e0600 	.word	0x400e0600

00081204 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   81204:	282c      	cmp	r0, #44	; 0x2c
   81206:	d820      	bhi.n	8124a <pmc_enable_periph_clk+0x46>
		return 1;
	}

	if (ul_id < 32) {
   81208:	281f      	cmp	r0, #31
   8120a:	d80d      	bhi.n	81228 <pmc_enable_periph_clk+0x24>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   8120c:	4b12      	ldr	r3, [pc, #72]	; (81258 <pmc_enable_periph_clk+0x54>)
   8120e:	699a      	ldr	r2, [r3, #24]
   81210:	2301      	movs	r3, #1
   81212:	4083      	lsls	r3, r0
   81214:	401a      	ands	r2, r3
   81216:	4293      	cmp	r3, r2
   81218:	d019      	beq.n	8124e <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER0 = 1 << ul_id;
   8121a:	2301      	movs	r3, #1
   8121c:	fa03 f000 	lsl.w	r0, r3, r0
   81220:	4b0d      	ldr	r3, [pc, #52]	; (81258 <pmc_enable_periph_clk+0x54>)
   81222:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   81224:	2000      	movs	r0, #0
   81226:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   81228:	4b0b      	ldr	r3, [pc, #44]	; (81258 <pmc_enable_periph_clk+0x54>)
   8122a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
   8122e:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   81230:	2301      	movs	r3, #1
   81232:	4083      	lsls	r3, r0
   81234:	401a      	ands	r2, r3
   81236:	4293      	cmp	r3, r2
   81238:	d00b      	beq.n	81252 <pmc_enable_periph_clk+0x4e>
			PMC->PMC_PCER1 = 1 << ul_id;
   8123a:	2301      	movs	r3, #1
   8123c:	fa03 f000 	lsl.w	r0, r3, r0
   81240:	4b05      	ldr	r3, [pc, #20]	; (81258 <pmc_enable_periph_clk+0x54>)
   81242:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   81246:	2000      	movs	r0, #0
   81248:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   8124a:	2001      	movs	r0, #1
   8124c:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   8124e:	2000      	movs	r0, #0
   81250:	4770      	bx	lr
   81252:	2000      	movs	r0, #0
}
   81254:	4770      	bx	lr
   81256:	bf00      	nop
   81258:	400e0600 	.word	0x400e0600

0008125c <pmc_is_wakeup_clocks_restored>:
	}
}

bool pmc_is_wakeup_clocks_restored(void)
{
	return !b_is_sleep_clock_used;
   8125c:	4b02      	ldr	r3, [pc, #8]	; (81268 <pmc_is_wakeup_clocks_restored+0xc>)
   8125e:	7818      	ldrb	r0, [r3, #0]
}
   81260:	f080 0001 	eor.w	r0, r0, #1
   81264:	4770      	bx	lr
   81266:	bf00      	nop
   81268:	20070c34 	.word	0x20070c34

0008126c <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   8126c:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   8126e:	23ac      	movs	r3, #172	; 0xac
   81270:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   81272:	680a      	ldr	r2, [r1, #0]
   81274:	684b      	ldr	r3, [r1, #4]
   81276:	fbb2 f3f3 	udiv	r3, r2, r3
   8127a:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   8127c:	1e5c      	subs	r4, r3, #1
   8127e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   81282:	4294      	cmp	r4, r2
   81284:	d80a      	bhi.n	8129c <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
   81286:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   81288:	688b      	ldr	r3, [r1, #8]
   8128a:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   8128c:	f240 2302 	movw	r3, #514	; 0x202
   81290:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   81294:	2350      	movs	r3, #80	; 0x50
   81296:	6003      	str	r3, [r0, #0]

	return 0;
   81298:	2000      	movs	r0, #0
   8129a:	e000      	b.n	8129e <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
   8129c:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
   8129e:	f85d 4b04 	ldr.w	r4, [sp], #4
   812a2:	4770      	bx	lr

000812a4 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   812a4:	6943      	ldr	r3, [r0, #20]
   812a6:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   812aa:	bf1a      	itte	ne
   812ac:	61c1      	strne	r1, [r0, #28]
	return 0;
   812ae:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
   812b0:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
   812b2:	4770      	bx	lr

000812b4 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   812b4:	6943      	ldr	r3, [r0, #20]
   812b6:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   812ba:	bf1d      	ittte	ne
   812bc:	6983      	ldrne	r3, [r0, #24]
   812be:	700b      	strbne	r3, [r1, #0]
	return 0;
   812c0:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
   812c2:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
   812c4:	4770      	bx	lr
   812c6:	bf00      	nop

000812c8 <udd_ctrl_init>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   812c8:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   812cc:	b672      	cpsid	i
   812ce:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   812d2:	2100      	movs	r1, #0
   812d4:	4a0a      	ldr	r2, [pc, #40]	; (81300 <udd_ctrl_init+0x38>)
   812d6:	7011      	strb	r1, [r2, #0]
	// In case of abort of IN Data Phase:
	// No need to abort IN transfer (rise TXINI),
	// because it is automatically done by hardware when a Setup packet is received.
	// But the interrupt must be disabled to don't generate interrupt TXINI
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
   812d8:	2101      	movs	r1, #1
   812da:	4a0a      	ldr	r2, [pc, #40]	; (81304 <udd_ctrl_init+0x3c>)
   812dc:	6011      	str	r1, [r2, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   812de:	b923      	cbnz	r3, 812ea <udd_ctrl_init+0x22>
		cpu_irq_enable();
   812e0:	4b07      	ldr	r3, [pc, #28]	; (81300 <udd_ctrl_init+0x38>)
   812e2:	7019      	strb	r1, [r3, #0]
   812e4:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   812e8:	b662      	cpsie	i
	cpu_irq_restore(flags);

	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);
   812ea:	2202      	movs	r2, #2
   812ec:	4b06      	ldr	r3, [pc, #24]	; (81308 <udd_ctrl_init+0x40>)
   812ee:	601a      	str	r2, [r3, #0]

	udd_g_ctrlreq.callback = NULL;
   812f0:	4a06      	ldr	r2, [pc, #24]	; (8130c <udd_ctrl_init+0x44>)
   812f2:	2300      	movs	r3, #0
   812f4:	6113      	str	r3, [r2, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   812f6:	6153      	str	r3, [r2, #20]
	udd_g_ctrlreq.payload_size = 0;
   812f8:	8193      	strh	r3, [r2, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
   812fa:	4a05      	ldr	r2, [pc, #20]	; (81310 <udd_ctrl_init+0x48>)
   812fc:	7013      	strb	r3, [r2, #0]
   812fe:	4770      	bx	lr
   81300:	200701d8 	.word	0x200701d8
   81304:	400ac220 	.word	0x400ac220
   81308:	400ac160 	.word	0x400ac160
   8130c:	20070d7c 	.word	0x20070d7c
   81310:	20070c84 	.word	0x20070c84

00081314 <udd_ctrl_stall_data>:


static void udd_ctrl_stall_data(void)
{
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   81314:	2205      	movs	r2, #5
   81316:	4b03      	ldr	r3, [pc, #12]	; (81324 <udd_ctrl_stall_data+0x10>)
   81318:	701a      	strb	r2, [r3, #0]
	udd_enable_stall_handshake(0);
   8131a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   8131e:	4b02      	ldr	r3, [pc, #8]	; (81328 <udd_ctrl_stall_data+0x14>)
   81320:	601a      	str	r2, [r3, #0]
   81322:	4770      	bx	lr
   81324:	20070c84 	.word	0x20070c84
   81328:	400ac1f0 	.word	0x400ac1f0

0008132c <udd_ctrl_send_zlp_in>:

static void udd_ctrl_send_zlp_in(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
   8132c:	2203      	movs	r2, #3
   8132e:	4b0d      	ldr	r3, [pc, #52]	; (81364 <udd_ctrl_send_zlp_in+0x38>)
   81330:	701a      	strb	r2, [r3, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   81332:	f3ef 8010 	mrs	r0, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   81336:	b672      	cpsid	i
   81338:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   8133c:	2200      	movs	r2, #0
   8133e:	4b0a      	ldr	r3, [pc, #40]	; (81368 <udd_ctrl_send_zlp_in+0x3c>)
   81340:	701a      	strb	r2, [r3, #0]

	// Validate and send empty IN packet on control endpoint
	flags = cpu_irq_save();
	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
   81342:	490a      	ldr	r1, [pc, #40]	; (8136c <udd_ctrl_send_zlp_in+0x40>)
   81344:	2201      	movs	r2, #1
   81346:	600a      	str	r2, [r1, #0]
	udd_enable_in_send_interrupt(0);
   81348:	4b09      	ldr	r3, [pc, #36]	; (81370 <udd_ctrl_send_zlp_in+0x44>)
   8134a:	601a      	str	r2, [r3, #0]
	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
   8134c:	2208      	movs	r2, #8
   8134e:	600a      	str	r2, [r1, #0]
	udd_enable_nak_out_interrupt(0);
   81350:	601a      	str	r2, [r3, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   81352:	b928      	cbnz	r0, 81360 <udd_ctrl_send_zlp_in+0x34>
		cpu_irq_enable();
   81354:	2201      	movs	r2, #1
   81356:	4b04      	ldr	r3, [pc, #16]	; (81368 <udd_ctrl_send_zlp_in+0x3c>)
   81358:	701a      	strb	r2, [r3, #0]
   8135a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   8135e:	b662      	cpsie	i
   81360:	4770      	bx	lr
   81362:	bf00      	nop
   81364:	20070c84 	.word	0x20070c84
   81368:	200701d8 	.word	0x200701d8
   8136c:	400ac160 	.word	0x400ac160
   81370:	400ac1f0 	.word	0x400ac1f0

00081374 <udd_ctrl_endofrequest>:
	cpu_irq_restore(flags);
}


static void udd_ctrl_endofrequest(void)
{
   81374:	b508      	push	{r3, lr}
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
   81376:	4b02      	ldr	r3, [pc, #8]	; (81380 <udd_ctrl_endofrequest+0xc>)
   81378:	691b      	ldr	r3, [r3, #16]
   8137a:	b103      	cbz	r3, 8137e <udd_ctrl_endofrequest+0xa>
		udd_g_ctrlreq.callback();
   8137c:	4798      	blx	r3
   8137e:	bd08      	pop	{r3, pc}
   81380:	20070d7c 	.word	0x20070d7c

00081384 <udd_ctrl_in_sent>:
	}
}


static void udd_ctrl_in_sent(void)
{
   81384:	b538      	push	{r3, r4, r5, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   81386:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   8138a:	b672      	cpsid	i
   8138c:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   81390:	2100      	movs	r1, #0
   81392:	4a48      	ldr	r2, [pc, #288]	; (814b4 <udd_ctrl_in_sent+0x130>)
   81394:	7011      	strb	r1, [r2, #0]
	uint8_t i;
	uint8_t *ptr_dest, *ptr_src;
	irqflags_t flags;

	flags = cpu_irq_save();
	udd_disable_in_send_interrupt(0);
   81396:	2101      	movs	r1, #1
   81398:	4a47      	ldr	r2, [pc, #284]	; (814b8 <udd_ctrl_in_sent+0x134>)
   8139a:	6011      	str	r1, [r2, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   8139c:	b923      	cbnz	r3, 813a8 <udd_ctrl_in_sent+0x24>
		cpu_irq_enable();
   8139e:	4b45      	ldr	r3, [pc, #276]	; (814b4 <udd_ctrl_in_sent+0x130>)
   813a0:	7019      	strb	r1, [r3, #0]
   813a2:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   813a6:	b662      	cpsie	i
	cpu_irq_restore(flags);

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   813a8:	4b44      	ldr	r3, [pc, #272]	; (814bc <udd_ctrl_in_sent+0x138>)
   813aa:	781b      	ldrb	r3, [r3, #0]
   813ac:	2b03      	cmp	r3, #3
   813ae:	d104      	bne.n	813ba <udd_ctrl_in_sent+0x36>
		// ZLP on IN is sent, then valid end of setup request
		udd_ctrl_endofrequest();
   813b0:	4b43      	ldr	r3, [pc, #268]	; (814c0 <udd_ctrl_in_sent+0x13c>)
   813b2:	4798      	blx	r3
		// Reinitializes control endpoint management
		udd_ctrl_init();
   813b4:	4b43      	ldr	r3, [pc, #268]	; (814c4 <udd_ctrl_in_sent+0x140>)
   813b6:	4798      	blx	r3
		return;
   813b8:	bd38      	pop	{r3, r4, r5, pc}
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_IN);

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   813ba:	4b43      	ldr	r3, [pc, #268]	; (814c8 <udd_ctrl_in_sent+0x144>)
   813bc:	881b      	ldrh	r3, [r3, #0]
   813be:	4a43      	ldr	r2, [pc, #268]	; (814cc <udd_ctrl_in_sent+0x148>)
   813c0:	8994      	ldrh	r4, [r2, #12]
   813c2:	1ae4      	subs	r4, r4, r3
   813c4:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
   813c6:	2c00      	cmp	r4, #0
   813c8:	d12e      	bne.n	81428 <udd_ctrl_in_sent+0xa4>
		// All content of current buffer payload are sent
		// Update number of total data sending by previous playlaod buffer
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   813ca:	4a41      	ldr	r2, [pc, #260]	; (814d0 <udd_ctrl_in_sent+0x14c>)
   813cc:	8811      	ldrh	r1, [r2, #0]
   813ce:	440b      	add	r3, r1
   813d0:	b29b      	uxth	r3, r3
   813d2:	8013      	strh	r3, [r2, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_buf_cnt)
   813d4:	4a3d      	ldr	r2, [pc, #244]	; (814cc <udd_ctrl_in_sent+0x148>)
   813d6:	88d2      	ldrh	r2, [r2, #6]
   813d8:	429a      	cmp	r2, r3
   813da:	d002      	beq.n	813e2 <udd_ctrl_in_sent+0x5e>
					|| b_shortpacket) {
   813dc:	4b3d      	ldr	r3, [pc, #244]	; (814d4 <udd_ctrl_in_sent+0x150>)
   813de:	781b      	ldrb	r3, [r3, #0]
   813e0:	b1c3      	cbz	r3, 81414 <udd_ctrl_in_sent+0x90>

static void udd_ctrl_send_zlp_out(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   813e2:	2204      	movs	r2, #4
   813e4:	4b35      	ldr	r3, [pc, #212]	; (814bc <udd_ctrl_in_sent+0x138>)
   813e6:	701a      	strb	r2, [r3, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   813e8:	f3ef 8210 	mrs	r2, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   813ec:	b672      	cpsid	i
   813ee:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   813f2:	2100      	movs	r1, #0
   813f4:	4b2f      	ldr	r3, [pc, #188]	; (814b4 <udd_ctrl_in_sent+0x130>)
   813f6:	7019      	strb	r1, [r3, #0]
	// No action is necessary to accept OUT ZLP
	// because the buffer of control endpoint is already free

	// To detect a protocol error, enable nak interrupt on data IN phase
	flags = cpu_irq_save();
	udd_ack_nak_in(0);
   813f8:	2310      	movs	r3, #16
   813fa:	4937      	ldr	r1, [pc, #220]	; (814d8 <udd_ctrl_in_sent+0x154>)
   813fc:	600b      	str	r3, [r1, #0]
	udd_enable_nak_in_interrupt(0);
   813fe:	3190      	adds	r1, #144	; 0x90
   81400:	600b      	str	r3, [r1, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   81402:	2a00      	cmp	r2, #0
   81404:	d155      	bne.n	814b2 <udd_ctrl_in_sent+0x12e>
		cpu_irq_enable();
   81406:	2201      	movs	r2, #1
   81408:	4b2a      	ldr	r3, [pc, #168]	; (814b4 <udd_ctrl_in_sent+0x130>)
   8140a:	701a      	strb	r2, [r3, #0]
   8140c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   81410:	b662      	cpsie	i
   81412:	bd38      	pop	{r3, r4, r5, pc}
			// Generate an OUT ZLP for handshake phase.
			udd_ctrl_send_zlp_out();
			return;
		}
		// Need of new buffer because the data phase is not complete
		if ((!udd_g_ctrlreq.over_under_run)
   81414:	4b2d      	ldr	r3, [pc, #180]	; (814cc <udd_ctrl_in_sent+0x148>)
   81416:	695b      	ldr	r3, [r3, #20]
   81418:	b16b      	cbz	r3, 81436 <udd_ctrl_in_sent+0xb2>
				|| (!udd_g_ctrlreq.over_under_run())) {
   8141a:	4798      	blx	r3
   8141c:	b158      	cbz	r0, 81436 <udd_ctrl_in_sent+0xb2>
			// Underrun then send zlp on IN
			// Here nb_remain=0 and allows to send a IN ZLP
		} else {
			// A new payload buffer is given
			udd_ctrl_payload_buf_cnt = 0;
   8141e:	2200      	movs	r2, #0
   81420:	4b29      	ldr	r3, [pc, #164]	; (814c8 <udd_ctrl_in_sent+0x144>)
   81422:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
   81424:	4b29      	ldr	r3, [pc, #164]	; (814cc <udd_ctrl_in_sent+0x148>)
   81426:	899c      	ldrh	r4, [r3, #12]
		}
	}
	// Continue transfer and send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
   81428:	2c3f      	cmp	r4, #63	; 0x3f
   8142a:	d904      	bls.n	81436 <udd_ctrl_in_sent+0xb2>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
		b_shortpacket = false;
   8142c:	2200      	movs	r2, #0
   8142e:	4b29      	ldr	r3, [pc, #164]	; (814d4 <udd_ctrl_in_sent+0x150>)
   81430:	701a      	strb	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
		}
	}
	// Continue transfer and send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
   81432:	2440      	movs	r4, #64	; 0x40
   81434:	e002      	b.n	8143c <udd_ctrl_in_sent+0xb8>
		b_shortpacket = false;
	} else {
		b_shortpacket = true;
   81436:	2201      	movs	r2, #1
   81438:	4b26      	ldr	r3, [pc, #152]	; (814d4 <udd_ctrl_in_sent+0x150>)
   8143a:	701a      	strb	r2, [r3, #0]
	}
	// Fill buffer of endpoint control
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   8143c:	4b23      	ldr	r3, [pc, #140]	; (814cc <udd_ctrl_in_sent+0x148>)
   8143e:	689d      	ldr	r5, [r3, #8]
   81440:	4b21      	ldr	r3, [pc, #132]	; (814c8 <udd_ctrl_in_sent+0x144>)
   81442:	881a      	ldrh	r2, [r3, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   81444:	f3ef 8010 	mrs	r0, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
   81448:	f1d0 0001 	rsbs	r0, r0, #1
   8144c:	bf38      	it	cc
   8144e:	2000      	movcc	r0, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   81450:	b672      	cpsid	i
   81452:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   81456:	2100      	movs	r1, #0
   81458:	4b16      	ldr	r3, [pc, #88]	; (814b4 <udd_ctrl_in_sent+0x130>)
   8145a:	7019      	strb	r1, [r3, #0]
	// a next setup reception in same endpoint 0 DPRAM.
	// Thereby, an OUT ZLP reception must check before IN data write
	// and if no OUT ZLP is recevied the data must be written quickly (800us)
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
	if (Is_udd_out_received(0)) {
   8145c:	4b1f      	ldr	r3, [pc, #124]	; (814dc <udd_ctrl_in_sent+0x158>)
   8145e:	681b      	ldr	r3, [r3, #0]
   81460:	f013 0f02 	tst.w	r3, #2
   81464:	d101      	bne.n	8146a <udd_ctrl_in_sent+0xe6>
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
   81466:	b95c      	cbnz	r4, 81480 <udd_ctrl_in_sent+0xfc>
   81468:	e013      	b.n	81492 <udd_ctrl_in_sent+0x10e>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   8146a:	b128      	cbz	r0, 81478 <udd_ctrl_in_sent+0xf4>
		cpu_irq_enable();
   8146c:	2201      	movs	r2, #1
   8146e:	4b11      	ldr	r3, [pc, #68]	; (814b4 <udd_ctrl_in_sent+0x130>)
   81470:	701a      	strb	r2, [r3, #0]
   81472:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   81476:	b662      	cpsie	i
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
	if (Is_udd_out_received(0)) {
		// IN DATA phase aborted by OUT ZLP
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   81478:	2204      	movs	r2, #4
   8147a:	4b10      	ldr	r3, [pc, #64]	; (814bc <udd_ctrl_in_sent+0x138>)
   8147c:	701a      	strb	r2, [r3, #0]
		return; // Exit of IN DATA phase
   8147e:	bd38      	pop	{r3, r4, r5, pc}
	} else {
		b_shortpacket = true;
	}
	// Fill buffer of endpoint control
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   81480:	442a      	add	r2, r5
   81482:	4b17      	ldr	r3, [pc, #92]	; (814e0 <udd_ctrl_in_sent+0x15c>)
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
		*ptr_dest++ = *ptr_src++;
   81484:	f812 1b01 	ldrb.w	r1, [r2], #1
   81488:	f803 1b01 	strb.w	r1, [r3], #1
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
   8148c:	b2d9      	uxtb	r1, r3
   8148e:	42a1      	cmp	r1, r4
   81490:	d3f8      	bcc.n	81484 <udd_ctrl_in_sent+0x100>
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_buf_cnt += nb_remain;
   81492:	4b0d      	ldr	r3, [pc, #52]	; (814c8 <udd_ctrl_in_sent+0x144>)
   81494:	881a      	ldrh	r2, [r3, #0]
   81496:	4414      	add	r4, r2
   81498:	801c      	strh	r4, [r3, #0]

	// Validate and send the data available in the control endpoint buffer
	udd_ack_in_send(0);
   8149a:	2301      	movs	r3, #1
   8149c:	4a0e      	ldr	r2, [pc, #56]	; (814d8 <udd_ctrl_in_sent+0x154>)
   8149e:	6013      	str	r3, [r2, #0]
	udd_enable_in_send_interrupt(0);
   814a0:	3290      	adds	r2, #144	; 0x90
   814a2:	6013      	str	r3, [r2, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   814a4:	b128      	cbz	r0, 814b2 <udd_ctrl_in_sent+0x12e>
		cpu_irq_enable();
   814a6:	461a      	mov	r2, r3
   814a8:	4b02      	ldr	r3, [pc, #8]	; (814b4 <udd_ctrl_in_sent+0x130>)
   814aa:	701a      	strb	r2, [r3, #0]
   814ac:	f3bf 8f5f 	dmb	sy
   814b0:	b662      	cpsie	i
   814b2:	bd38      	pop	{r3, r4, r5, pc}
   814b4:	200701d8 	.word	0x200701d8
   814b8:	400ac220 	.word	0x400ac220
   814bc:	20070c84 	.word	0x20070c84
   814c0:	00081375 	.word	0x00081375
   814c4:	000812c9 	.word	0x000812c9
   814c8:	20070c86 	.word	0x20070c86
   814cc:	20070d7c 	.word	0x20070d7c
   814d0:	20070c80 	.word	0x20070c80
   814d4:	20070c83 	.word	0x20070c83
   814d8:	400ac160 	.word	0x400ac160
   814dc:	400ac130 	.word	0x400ac130
   814e0:	20180000 	.word	0x20180000

000814e4 <udd_ep_finish_job>:
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
}


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
{
   814e4:	b510      	push	{r4, lr}
   814e6:	4603      	mov	r3, r0
	if (ptr_job->busy == false) {
   814e8:	7d04      	ldrb	r4, [r0, #20]
   814ea:	f014 0f01 	tst.w	r4, #1
   814ee:	d010      	beq.n	81512 <udd_ep_finish_job+0x2e>
		return; // No on-going job
	}
	dbg_print("(JobE%x:%d) ", (ptr_job-udd_ep_job)+1, b_abort);
	ptr_job->busy = false;
   814f0:	7d04      	ldrb	r4, [r0, #20]
   814f2:	f36f 0400 	bfc	r4, #0, #1
   814f6:	7504      	strb	r4, [r0, #20]
	if (NULL == ptr_job->call_trans) {
   814f8:	6804      	ldr	r4, [r0, #0]
   814fa:	b154      	cbz	r4, 81512 <udd_ep_finish_job+0x2e>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_in(ep_num)) {
   814fc:	4805      	ldr	r0, [pc, #20]	; (81514 <udd_ep_finish_job+0x30>)
   814fe:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
   81502:	f410 7f80 	tst.w	r0, #256	; 0x100
		ep_num |= USB_EP_DIR_IN;
   81506:	bf18      	it	ne
   81508:	f042 0280 	orrne.w	r2, r2, #128	; 0x80
	}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   8150c:	4608      	mov	r0, r1
   8150e:	6899      	ldr	r1, [r3, #8]
   81510:	47a0      	blx	r4
   81512:	bd10      	pop	{r4, pc}
   81514:	400ac100 	.word	0x400ac100

00081518 <udd_ep_trans_done>:
			UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}

#ifdef UDD_EP_DMA_SUPPORTED
static void udd_ep_trans_done(udd_ep_id_t ep)
{
   81518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8151a:	4602      	mov	r2, r0
	udd_ep_job_t *ptr_job;
	iram_size_t next_trans;
	irqflags_t flags;

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep - 1];
   8151c:	1e41      	subs	r1, r0, #1
   8151e:	eb01 0041 	add.w	r0, r1, r1, lsl #1
   81522:	4b4d      	ldr	r3, [pc, #308]	; (81658 <udd_ep_trans_done+0x140>)
   81524:	eb03 03c0 	add.w	r3, r3, r0, lsl #3

	if (!ptr_job->busy) {
   81528:	7d18      	ldrb	r0, [r3, #20]
   8152a:	f010 0f01 	tst.w	r0, #1
   8152e:	f000 8092 	beq.w	81656 <udd_ep_trans_done+0x13e>
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->buf_cnt != ptr_job->buf_size) {
   81532:	68d8      	ldr	r0, [r3, #12]
   81534:	689c      	ldr	r4, [r3, #8]
   81536:	42a0      	cmp	r0, r4
   81538:	d067      	beq.n	8160a <udd_ep_trans_done+0xf2>
		// Need to send or receiv other data
		next_trans = ptr_job->buf_size - ptr_job->buf_cnt;
   8153a:	1a24      	subs	r4, r4, r0

		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
   8153c:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
			next_trans = UDD_ENDPOINT_MAX_TRANS;

			// Set 0 to tranfer the maximum
			udd_dma_ctrl = UOTGHS_DEVDMACONTROL_BUFF_LENGTH(0);
		} else {
			udd_dma_ctrl = UOTGHS_DEVDMACONTROL_BUFF_LENGTH(next_trans);
   81540:	bf92      	itee	ls
   81542:	0426      	lslls	r6, r4, #16
		next_trans = ptr_job->buf_size - ptr_job->buf_cnt;

		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
			// The USB hardware support a maximum
			// transfer size of UDD_ENDPOINT_MAX_TRANS Bytes
			next_trans = UDD_ENDPOINT_MAX_TRANS;
   81544:	f44f 3480 	movhi.w	r4, #65536	; 0x10000

			// Set 0 to tranfer the maximum
			udd_dma_ctrl = UOTGHS_DEVDMACONTROL_BUFF_LENGTH(0);
   81548:	2600      	movhi	r6, #0
		} else {
			udd_dma_ctrl = UOTGHS_DEVDMACONTROL_BUFF_LENGTH(next_trans);
		}
		if (Is_udd_endpoint_in(ep)) {
   8154a:	4d44      	ldr	r5, [pc, #272]	; (8165c <udd_ep_trans_done+0x144>)
   8154c:	f855 7022 	ldr.w	r7, [r5, r2, lsl #2]
   81550:	f417 7f80 	tst.w	r7, #256	; 0x100
   81554:	d00f      	beq.n	81576 <udd_ep_trans_done+0x5e>
			if (0 != (next_trans % udd_get_endpoint_size(ep))) {
   81556:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
   8155a:	f3c5 1502 	ubfx	r5, r5, #4, #3
   8155e:	2708      	movs	r7, #8
   81560:	fa07 f505 	lsl.w	r5, r7, r5
   81564:	3d01      	subs	r5, #1
   81566:	422c      	tst	r4, r5
   81568:	d016      	beq.n	81598 <udd_ep_trans_done+0x80>
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				udd_dma_ctrl |= UOTGHS_DEVDMACONTROL_END_B_EN;
   8156a:	433e      	orrs	r6, r7
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
   8156c:	7d1d      	ldrb	r5, [r3, #20]
   8156e:	f36f 0541 	bfc	r5, #1, #1
   81572:	751d      	strb	r5, [r3, #20]
   81574:	e010      	b.n	81598 <udd_ep_trans_done+0x80>
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
   81576:	f855 7022 	ldr.w	r7, [r5, r2, lsl #2]
   8157a:	f3c7 27c1 	ubfx	r7, r7, #11, #2
   8157e:	2f01      	cmp	r7, #1
   81580:	d108      	bne.n	81594 <udd_ep_trans_done+0x7c>
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {
   81582:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
   81586:	f3c5 1502 	ubfx	r5, r5, #4, #3
   8158a:	2708      	movs	r7, #8
   8158c:	fa07 f505 	lsl.w	r5, r7, r5
   81590:	42ac      	cmp	r4, r5
   81592:	d801      	bhi.n	81598 <udd_ep_trans_done+0x80>

				// Enable short packet reception
				udd_dma_ctrl |= UOTGHS_DEVDMACONTROL_END_TR_IT
   81594:	f046 0614 	orr.w	r6, r6, #20
						| UOTGHS_DEVDMACONTROL_END_TR_EN;
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (uint32_t) & ptr_job->buf[ptr_job->buf_cnt]);
   81598:	4d31      	ldr	r5, [pc, #196]	; (81660 <udd_ep_trans_done+0x148>)
   8159a:	eb05 1502 	add.w	r5, r5, r2, lsl #4
   8159e:	685f      	ldr	r7, [r3, #4]
   815a0:	4438      	add	r0, r7
   815a2:	6068      	str	r0, [r5, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   815a4:	f3ef 8010 	mrs	r0, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
   815a8:	f1d0 0c01 	rsbs	ip, r0, #1
   815ac:	bf38      	it	cc
   815ae:	f04f 0c00 	movcc.w	ip, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   815b2:	b672      	cpsid	i
   815b4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   815b8:	2700      	movs	r7, #0
   815ba:	482a      	ldr	r0, [pc, #168]	; (81664 <udd_ep_trans_done+0x14c>)
   815bc:	7007      	strb	r7, [r0, #0]


		// Disable IRQs to have a short sequence
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
		if (!(udd_endpoint_dma_get_status(ep)
   815be:	68e8      	ldr	r0, [r5, #12]
   815c0:	f010 0f10 	tst.w	r0, #16
   815c4:	d116      	bne.n	815f4 <udd_ep_trans_done+0xdc>
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (uint32_t) & ptr_job->buf[ptr_job->buf_cnt]);
		udd_dma_ctrl |= UOTGHS_DEVDMACONTROL_END_BUFFIT |
   815c6:	f046 0621 	orr.w	r6, r6, #33	; 0x21
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
		if (!(udd_endpoint_dma_get_status(ep)
				& UOTGHS_DEVDMASTATUS_END_TR_ST)) {
			dbg_print("dmaS%x ", ep);
			udd_endpoint_dma_set_control(ep, udd_dma_ctrl);
   815ca:	60ae      	str	r6, [r5, #8]
			ptr_job->buf_cnt += next_trans;
   815cc:	68da      	ldr	r2, [r3, #12]
   815ce:	4422      	add	r2, r4
   815d0:	60da      	str	r2, [r3, #12]
			ptr_job->buf_load = next_trans;
   815d2:	611c      	str	r4, [r3, #16]
			udd_enable_endpoint_dma_interrupt(ep);
   815d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
   815d8:	fa03 f101 	lsl.w	r1, r3, r1
   815dc:	4b22      	ldr	r3, [pc, #136]	; (81668 <udd_ep_trans_done+0x150>)
   815de:	6199      	str	r1, [r3, #24]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   815e0:	f1bc 0f00 	cmp.w	ip, #0
   815e4:	d037      	beq.n	81656 <udd_ep_trans_done+0x13e>
		cpu_irq_enable();
   815e6:	2201      	movs	r2, #1
   815e8:	4b1e      	ldr	r3, [pc, #120]	; (81664 <udd_ep_trans_done+0x14c>)
   815ea:	701a      	strb	r2, [r3, #0]
   815ec:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   815f0:	b662      	cpsie	i
   815f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   815f4:	f1bc 0f00 	cmp.w	ip, #0
   815f8:	d005      	beq.n	81606 <udd_ep_trans_done+0xee>
		cpu_irq_enable();
   815fa:	2001      	movs	r0, #1
   815fc:	4919      	ldr	r1, [pc, #100]	; (81664 <udd_ep_trans_done+0x14c>)
   815fe:	7008      	strb	r0, [r1, #0]
   81600:	f3bf 8f5f 	dmb	sy
   81604:	b662      	cpsie	i
		cpu_irq_restore(flags);

		// Here a ZLP has been recieved
		// and the DMA transfer must be not started.
		// It is the end of transfer
		ptr_job->buf_size = ptr_job->buf_cnt;
   81606:	68d9      	ldr	r1, [r3, #12]
   81608:	6099      	str	r1, [r3, #8]
	}
	if (Is_udd_endpoint_in(ep)) {
   8160a:	4914      	ldr	r1, [pc, #80]	; (8165c <udd_ep_trans_done+0x144>)
   8160c:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
   81610:	f411 7f80 	tst.w	r1, #256	; 0x100
   81614:	d01b      	beq.n	8164e <udd_ep_trans_done+0x136>
		if (ptr_job->b_shortpacket) {
   81616:	7d19      	ldrb	r1, [r3, #20]
   81618:	f011 0f02 	tst.w	r1, #2
   8161c:	d017      	beq.n	8164e <udd_ep_trans_done+0x136>
			dbg_print("zlpS%x ", ep);
			// Need to send a ZLP (No possible with USB DMA)
			// enable interrupt to wait a free bank to sent ZLP
			udd_ack_in_send(ep);
   8161e:	2101      	movs	r1, #1
   81620:	4b12      	ldr	r3, [pc, #72]	; (8166c <udd_ep_trans_done+0x154>)
   81622:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			if (Is_udd_write_enabled(ep)) {
   81626:	3b30      	subs	r3, #48	; 0x30
   81628:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   8162c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
				// Force interrupt in case of ep already free
				udd_raise_in_send(ep);
   81630:	bf1c      	itt	ne
   81632:	4b0f      	ldrne	r3, [pc, #60]	; (81670 <udd_ep_trans_done+0x158>)
   81634:	f843 1022 	strne.w	r1, [r3, r2, lsl #2]
			}
			udd_enable_in_send_interrupt(ep);
   81638:	2101      	movs	r1, #1
   8163a:	4b0e      	ldr	r3, [pc, #56]	; (81674 <udd_ep_trans_done+0x15c>)
   8163c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			udd_enable_endpoint_interrupt(ep);
   81640:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   81644:	fa03 f202 	lsl.w	r2, r3, r2
   81648:	4b07      	ldr	r3, [pc, #28]	; (81668 <udd_ep_trans_done+0x150>)
   8164a:	619a      	str	r2, [r3, #24]
			return;
   8164c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
	}
	dbg_print("dmaE ");
	// Call callback to signal end of transfer
	udd_ep_finish_job(ptr_job, false, ep);
   8164e:	4618      	mov	r0, r3
   81650:	2100      	movs	r1, #0
   81652:	4b09      	ldr	r3, [pc, #36]	; (81678 <udd_ep_trans_done+0x160>)
   81654:	4798      	blx	r3
   81656:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81658:	20070c38 	.word	0x20070c38
   8165c:	400ac100 	.word	0x400ac100
   81660:	400ac300 	.word	0x400ac300
   81664:	200701d8 	.word	0x200701d8
   81668:	400ac000 	.word	0x400ac000
   8166c:	400ac160 	.word	0x400ac160
   81670:	400ac190 	.word	0x400ac190
   81674:	400ac1f0 	.word	0x400ac1f0
   81678:	000814e5 	.word	0x000814e5

0008167c <udd_sleep_mode>:
 *
 * \param b_enable true to authorize idle mode
 */
static void udd_sleep_mode(bool b_idle)
{
	if (!b_idle && udd_b_idle) {
   8167c:	4602      	mov	r2, r0
   8167e:	2800      	cmp	r0, #0
   81680:	d135      	bne.n	816ee <udd_sleep_mode+0x72>
   81682:	4b1d      	ldr	r3, [pc, #116]	; (816f8 <udd_sleep_mode+0x7c>)
   81684:	781b      	ldrb	r3, [r3, #0]
   81686:	b37b      	cbz	r3, 816e8 <udd_sleep_mode+0x6c>
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
   81688:	4b1c      	ldr	r3, [pc, #112]	; (816fc <udd_sleep_mode+0x80>)
   8168a:	789b      	ldrb	r3, [r3, #2]
   8168c:	b903      	cbnz	r3, 81690 <udd_sleep_mode+0x14>
   8168e:	e7fe      	b.n	8168e <udd_sleep_mode+0x12>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   81690:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   81694:	b672      	cpsid	i
   81696:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   8169a:	2000      	movs	r0, #0
   8169c:	4b18      	ldr	r3, [pc, #96]	; (81700 <udd_sleep_mode+0x84>)
   8169e:	7018      	strb	r0, [r3, #0]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
   816a0:	4b16      	ldr	r3, [pc, #88]	; (816fc <udd_sleep_mode+0x80>)
   816a2:	7898      	ldrb	r0, [r3, #2]
   816a4:	3801      	subs	r0, #1
   816a6:	7098      	strb	r0, [r3, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   816a8:	b9f1      	cbnz	r1, 816e8 <udd_sleep_mode+0x6c>
		cpu_irq_enable();
   816aa:	2101      	movs	r1, #1
   816ac:	4b14      	ldr	r3, [pc, #80]	; (81700 <udd_sleep_mode+0x84>)
   816ae:	7019      	strb	r1, [r3, #0]
   816b0:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   816b4:	b662      	cpsie	i
   816b6:	e017      	b.n	816e8 <udd_sleep_mode+0x6c>
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
   816b8:	4b10      	ldr	r3, [pc, #64]	; (816fc <udd_sleep_mode+0x80>)
   816ba:	789b      	ldrb	r3, [r3, #2]
   816bc:	2bff      	cmp	r3, #255	; 0xff
   816be:	d100      	bne.n	816c2 <udd_sleep_mode+0x46>
   816c0:	e7fe      	b.n	816c0 <udd_sleep_mode+0x44>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   816c2:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   816c6:	b672      	cpsid	i
   816c8:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   816cc:	2000      	movs	r0, #0
   816ce:	4b0c      	ldr	r3, [pc, #48]	; (81700 <udd_sleep_mode+0x84>)
   816d0:	7018      	strb	r0, [r3, #0]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
   816d2:	4b0a      	ldr	r3, [pc, #40]	; (816fc <udd_sleep_mode+0x80>)
   816d4:	7898      	ldrb	r0, [r3, #2]
   816d6:	3001      	adds	r0, #1
   816d8:	7098      	strb	r0, [r3, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   816da:	b929      	cbnz	r1, 816e8 <udd_sleep_mode+0x6c>
		cpu_irq_enable();
   816dc:	2101      	movs	r1, #1
   816de:	4b08      	ldr	r3, [pc, #32]	; (81700 <udd_sleep_mode+0x84>)
   816e0:	7019      	strb	r1, [r3, #0]
   816e2:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   816e6:	b662      	cpsie	i
	}
	if (b_idle && !udd_b_idle) {
		dbg_print("_W ");
		sleepmgr_lock_mode(UOTGHS_SLEEP_MODE_USB_IDLE);
	}
	udd_b_idle = b_idle;
   816e8:	4b03      	ldr	r3, [pc, #12]	; (816f8 <udd_sleep_mode+0x7c>)
   816ea:	701a      	strb	r2, [r3, #0]
   816ec:	4770      	bx	lr
{
	if (!b_idle && udd_b_idle) {
		dbg_print("_S ");
		sleepmgr_unlock_mode(UOTGHS_SLEEP_MODE_USB_IDLE);
	}
	if (b_idle && !udd_b_idle) {
   816ee:	4b02      	ldr	r3, [pc, #8]	; (816f8 <udd_sleep_mode+0x7c>)
   816f0:	781b      	ldrb	r3, [r3, #0]
   816f2:	2b00      	cmp	r3, #0
   816f4:	d1f8      	bne.n	816e8 <udd_sleep_mode+0x6c>
   816f6:	e7df      	b.n	816b8 <udd_sleep_mode+0x3c>
   816f8:	20070c82 	.word	0x20070c82
   816fc:	20070d68 	.word	0x20070d68
   81700:	200701d8 	.word	0x200701d8

00081704 <udd_attach>:
	cpu_irq_restore(flags);
}


void udd_attach(void)
{
   81704:	b538      	push	{r3, r4, r5, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   81706:	f3ef 8510 	mrs	r5, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   8170a:	b672      	cpsid	i
   8170c:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   81710:	2200      	movs	r2, #0
   81712:	4b19      	ldr	r3, [pc, #100]	; (81778 <udd_attach+0x74>)
   81714:	701a      	strb	r2, [r3, #0]
	irqflags_t flags;
	flags = cpu_irq_save();

	// At startup the USB bus state is unknown,
	// therefore the state is considered IDLE to not miss any USB event
	udd_sleep_mode(true);
   81716:	2001      	movs	r0, #1
   81718:	4b18      	ldr	r3, [pc, #96]	; (8177c <udd_attach+0x78>)
   8171a:	4798      	blx	r3
	otg_unfreeze_clock();
   8171c:	4b18      	ldr	r3, [pc, #96]	; (81780 <udd_attach+0x7c>)
   8171e:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   81722:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
   81726:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800

	// This section of clock check can be improved with a chek of
	// USB clock source via sysclk()
	// Check USB clock because the source can be a PLL
	while (!Is_otg_clock_usable());
   8172a:	461a      	mov	r2, r3
   8172c:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
   81730:	f413 4f80 	tst.w	r3, #16384	; 0x4000
   81734:	d0fa      	beq.n	8172c <udd_attach+0x28>

	// Authorize attach if Vbus is present
	udd_attach_device();
   81736:	4b12      	ldr	r3, [pc, #72]	; (81780 <udd_attach+0x7c>)
   81738:	681a      	ldr	r2, [r3, #0]
   8173a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   8173e:	601a      	str	r2, [r3, #0]

	// Enable USB line events
	udd_enable_reset_interrupt();
   81740:	2408      	movs	r4, #8
   81742:	619c      	str	r4, [r3, #24]
	udd_enable_suspend_interrupt();
   81744:	2101      	movs	r1, #1
   81746:	6199      	str	r1, [r3, #24]
	udd_enable_wake_up_interrupt();
   81748:	2210      	movs	r2, #16
   8174a:	619a      	str	r2, [r3, #24]
	udd_enable_sof_interrupt();
   8174c:	2004      	movs	r0, #4
   8174e:	6198      	str	r0, [r3, #24]
#ifdef USB_DEVICE_HS_SUPPORT
	udd_enable_msof_interrupt();
#endif
	// Reset following interupts flag
	udd_ack_reset();
   81750:	609c      	str	r4, [r3, #8]
	udd_ack_sof();
   81752:	6098      	str	r0, [r3, #8]
	udd_ack_msof();
   81754:	2002      	movs	r0, #2
   81756:	6098      	str	r0, [r3, #8]

	// The first suspend interrupt must be forced
	// The first suspend interrupt is not detected else raise it
	udd_raise_suspend();
   81758:	60d9      	str	r1, [r3, #12]

	udd_ack_wake_up();
   8175a:	609a      	str	r2, [r3, #8]
	otg_freeze_clock();
   8175c:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   81760:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   81764:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   81768:	b925      	cbnz	r5, 81774 <udd_attach+0x70>
		cpu_irq_enable();
   8176a:	4b03      	ldr	r3, [pc, #12]	; (81778 <udd_attach+0x74>)
   8176c:	7019      	strb	r1, [r3, #0]
   8176e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   81772:	b662      	cpsie	i
   81774:	bd38      	pop	{r3, r4, r5, pc}
   81776:	bf00      	nop
   81778:	200701d8 	.word	0x200701d8
   8177c:	0008167d 	.word	0x0008167d
   81780:	400ac000 	.word	0x400ac000

00081784 <udd_detach>:
	cpu_irq_restore(flags);
}


void udd_detach(void)
{
   81784:	b508      	push	{r3, lr}
	otg_unfreeze_clock();
   81786:	4b0a      	ldr	r3, [pc, #40]	; (817b0 <udd_detach+0x2c>)
   81788:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   8178c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
   81790:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800

	// Detach device from the bus
	udd_detach_device();
   81794:	681a      	ldr	r2, [r3, #0]
   81796:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   8179a:	601a      	str	r2, [r3, #0]
	otg_freeze_clock();
   8179c:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   817a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   817a4:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	udd_sleep_mode(false);
   817a8:	2000      	movs	r0, #0
   817aa:	4b02      	ldr	r3, [pc, #8]	; (817b4 <udd_detach+0x30>)
   817ac:	4798      	blx	r3
   817ae:	bd08      	pop	{r3, pc}
   817b0:	400ac000 	.word	0x400ac000
   817b4:	0008167d 	.word	0x0008167d

000817b8 <UOTGHS_Handler>:
void udd_interrupt(void);
void udd_interrupt(void)
#else
ISR(UDD_USB_INT_FUN)
#endif
{
   817b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	/* For fast wakeup clocks restore
	 * In WAIT mode, clocks are switched to FASTRC.
	 * After wakeup clocks should be restored, before that ISR should not
	 * be served.
	 */
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
   817bc:	4b9c      	ldr	r3, [pc, #624]	; (81a30 <UOTGHS_Handler+0x278>)
   817be:	4798      	blx	r3
   817c0:	b960      	cbnz	r0, 817dc <UOTGHS_Handler+0x24>
   817c2:	4b9c      	ldr	r3, [pc, #624]	; (81a34 <UOTGHS_Handler+0x27c>)
   817c4:	685b      	ldr	r3, [r3, #4]
   817c6:	f013 0f01 	tst.w	r3, #1
   817ca:	d107      	bne.n	817dc <UOTGHS_Handler+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   817cc:	b672      	cpsid	i
   817ce:	f3bf 8f5f 	dmb	sy
		cpu_irq_disable();
   817d2:	2200      	movs	r2, #0
   817d4:	4b98      	ldr	r3, [pc, #608]	; (81a38 <UOTGHS_Handler+0x280>)
   817d6:	701a      	strb	r2, [r3, #0]
		return;
   817d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}

	if (Is_udd_sof()) {
   817dc:	4b95      	ldr	r3, [pc, #596]	; (81a34 <UOTGHS_Handler+0x27c>)
   817de:	685b      	ldr	r3, [r3, #4]
   817e0:	f013 0f04 	tst.w	r3, #4
   817e4:	d00c      	beq.n	81800 <UOTGHS_Handler+0x48>
		udd_ack_sof();
   817e6:	4b93      	ldr	r3, [pc, #588]	; (81a34 <UOTGHS_Handler+0x27c>)
   817e8:	2204      	movs	r2, #4
   817ea:	609a      	str	r2, [r3, #8]
		if (Is_udd_full_speed_mode()) {
   817ec:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
   817f0:	f413 5f40 	tst.w	r3, #12288	; 0x3000
   817f4:	f040 82b1 	bne.w	81d5a <UOTGHS_Handler+0x5a2>
			udc_sof_notify();
   817f8:	4b90      	ldr	r3, [pc, #576]	; (81a3c <UOTGHS_Handler+0x284>)
   817fa:	4798      	blx	r3
   817fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_sof_end;
	}

	if (Is_udd_msof()) {
   81800:	4b8c      	ldr	r3, [pc, #560]	; (81a34 <UOTGHS_Handler+0x27c>)
   81802:	685b      	ldr	r3, [r3, #4]
   81804:	f013 0f02 	tst.w	r3, #2
   81808:	d006      	beq.n	81818 <UOTGHS_Handler+0x60>
		udd_ack_msof();
   8180a:	2202      	movs	r2, #2
   8180c:	4b89      	ldr	r3, [pc, #548]	; (81a34 <UOTGHS_Handler+0x27c>)
   8180e:	609a      	str	r2, [r3, #8]
		udc_sof_notify();
   81810:	4b8a      	ldr	r3, [pc, #552]	; (81a3c <UOTGHS_Handler+0x284>)
   81812:	4798      	blx	r3
		goto udd_interrupt_sof_end;
   81814:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}


static bool udd_ctrl_interrupt(void)
{

	if (!Is_udd_endpoint_interrupt(0)) {
   81818:	4b86      	ldr	r3, [pc, #536]	; (81a34 <UOTGHS_Handler+0x27c>)
   8181a:	685b      	ldr	r3, [r3, #4]
   8181c:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   81820:	f000 828b 	beq.w	81d3a <UOTGHS_Handler+0x582>
	}

	dbg_print("0: ");

	// By default disable overflow and underflow interrupt
	udd_disable_nak_in_interrupt(0);
   81824:	4b86      	ldr	r3, [pc, #536]	; (81a40 <UOTGHS_Handler+0x288>)
   81826:	2210      	movs	r2, #16
   81828:	601a      	str	r2, [r3, #0]
	udd_disable_nak_out_interrupt(0);
   8182a:	2208      	movs	r2, #8
   8182c:	601a      	str	r2, [r3, #0]

	// Search event on control endpoint
	if (Is_udd_setup_received(0)) {
   8182e:	3bf0      	subs	r3, #240	; 0xf0
   81830:	681b      	ldr	r3, [r3, #0]
   81832:	f013 0f04 	tst.w	r3, #4
   81836:	d060      	beq.n	818fa <UOTGHS_Handler+0x142>
static void udd_ctrl_setup_received(void)
{
	irqflags_t flags;
	uint8_t i;

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
   81838:	4b82      	ldr	r3, [pc, #520]	; (81a44 <UOTGHS_Handler+0x28c>)
   8183a:	781b      	ldrb	r3, [r3, #0]
   8183c:	b11b      	cbz	r3, 81846 <UOTGHS_Handler+0x8e>
		// May be a hidden DATA or ZLP phase or protocol abort
		udd_ctrl_endofrequest();
   8183e:	4b82      	ldr	r3, [pc, #520]	; (81a48 <UOTGHS_Handler+0x290>)
   81840:	4798      	blx	r3

		// Reinitializes control endpoint management
		udd_ctrl_init();
   81842:	4b82      	ldr	r3, [pc, #520]	; (81a4c <UOTGHS_Handler+0x294>)
   81844:	4798      	blx	r3
	}
	// Fill setup request structure
	if (8 != udd_byte_count(0)) {
   81846:	4b82      	ldr	r3, [pc, #520]	; (81a50 <UOTGHS_Handler+0x298>)
   81848:	681b      	ldr	r3, [r3, #0]
   8184a:	f3c3 530a 	ubfx	r3, r3, #20, #11
   8184e:	2b08      	cmp	r3, #8
   81850:	d006      	beq.n	81860 <UOTGHS_Handler+0xa8>
		udd_ctrl_stall_data();
   81852:	4b80      	ldr	r3, [pc, #512]	; (81a54 <UOTGHS_Handler+0x29c>)
   81854:	4798      	blx	r3
		udd_ack_setup_received(0);
   81856:	2204      	movs	r2, #4
   81858:	4b7f      	ldr	r3, [pc, #508]	; (81a58 <UOTGHS_Handler+0x2a0>)
   8185a:	601a      	str	r2, [r3, #0]
   8185c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

		// Reinitializes control endpoint management
		udd_ctrl_init();
	}
	// Fill setup request structure
	if (8 != udd_byte_count(0)) {
   81860:	4b7e      	ldr	r3, [pc, #504]	; (81a5c <UOTGHS_Handler+0x2a4>)
   81862:	4d7f      	ldr	r5, [pc, #508]	; (81a60 <UOTGHS_Handler+0x2a8>)
   81864:	4c7f      	ldr	r4, [pc, #508]	; (81a64 <UOTGHS_Handler+0x2ac>)
		udd_ctrl_stall_data();
		udd_ack_setup_received(0);
		return; // Error data number doesn't correspond to SETUP packet
	}
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0,8);
	for (i = 0; i < 8; i++) {
   81866:	4880      	ldr	r0, [pc, #512]	; (81a68 <UOTGHS_Handler+0x2b0>)
		((uint8_t*) &udd_g_ctrlreq.req)[i] = *ptr++;
   81868:	f813 1b01 	ldrb.w	r1, [r3], #1
   8186c:	195a      	adds	r2, r3, r5
   8186e:	5511      	strb	r1, [r2, r4]
		udd_ctrl_stall_data();
		udd_ack_setup_received(0);
		return; // Error data number doesn't correspond to SETUP packet
	}
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0,8);
	for (i = 0; i < 8; i++) {
   81870:	4283      	cmp	r3, r0
   81872:	d1f9      	bne.n	81868 <UOTGHS_Handler+0xb0>
	udd_g_ctrlreq.req.wValue = le16_to_cpu(udd_g_ctrlreq.req.wValue);
	udd_g_ctrlreq.req.wIndex = le16_to_cpu(udd_g_ctrlreq.req.wIndex);
	udd_g_ctrlreq.req.wLength = le16_to_cpu(udd_g_ctrlreq.req.wLength);

	// Decode setup request
	if (udc_process_setup() == false) {
   81874:	4b7d      	ldr	r3, [pc, #500]	; (81a6c <UOTGHS_Handler+0x2b4>)
   81876:	4798      	blx	r3
   81878:	b930      	cbnz	r0, 81888 <UOTGHS_Handler+0xd0>
		// Setup request unknow then stall it
		udd_ctrl_stall_data();
   8187a:	4b76      	ldr	r3, [pc, #472]	; (81a54 <UOTGHS_Handler+0x29c>)
   8187c:	4798      	blx	r3
		udd_ack_setup_received(0);
   8187e:	2204      	movs	r2, #4
   81880:	4b75      	ldr	r3, [pc, #468]	; (81a58 <UOTGHS_Handler+0x2a0>)
   81882:	601a      	str	r2, [r3, #0]
   81884:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return;
	}
	udd_ack_setup_received(0);
   81888:	2204      	movs	r2, #4
   8188a:	4b73      	ldr	r3, [pc, #460]	; (81a58 <UOTGHS_Handler+0x2a0>)
   8188c:	601a      	str	r2, [r3, #0]

	if (Udd_setup_is_in()) {
   8188e:	4b74      	ldr	r3, [pc, #464]	; (81a60 <UOTGHS_Handler+0x2a8>)
   81890:	f993 3000 	ldrsb.w	r3, [r3]
   81894:	2b00      	cmp	r3, #0
   81896:	da0b      	bge.n	818b0 <UOTGHS_Handler+0xf8>
		// IN data phase requested
		udd_ctrl_prev_payload_buf_cnt = 0;
   81898:	2300      	movs	r3, #0
   8189a:	4a75      	ldr	r2, [pc, #468]	; (81a70 <UOTGHS_Handler+0x2b8>)
   8189c:	8013      	strh	r3, [r2, #0]
		udd_ctrl_payload_buf_cnt = 0;
   8189e:	4a75      	ldr	r2, [pc, #468]	; (81a74 <UOTGHS_Handler+0x2bc>)
   818a0:	8013      	strh	r3, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
   818a2:	2202      	movs	r2, #2
   818a4:	4b67      	ldr	r3, [pc, #412]	; (81a44 <UOTGHS_Handler+0x28c>)
   818a6:	701a      	strb	r2, [r3, #0]
		udd_ctrl_in_sent(); // Send first data transfer
   818a8:	4b73      	ldr	r3, [pc, #460]	; (81a78 <UOTGHS_Handler+0x2c0>)
   818aa:	4798      	blx	r3
   818ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else {
		if (0 == udd_g_ctrlreq.req.wLength) {
   818b0:	4b6b      	ldr	r3, [pc, #428]	; (81a60 <UOTGHS_Handler+0x2a8>)
   818b2:	88db      	ldrh	r3, [r3, #6]
   818b4:	b91b      	cbnz	r3, 818be <UOTGHS_Handler+0x106>
			// No data phase requested
			// Send IN ZLP to ACK setup request
			udd_ctrl_send_zlp_in();
   818b6:	4b71      	ldr	r3, [pc, #452]	; (81a7c <UOTGHS_Handler+0x2c4>)
   818b8:	4798      	blx	r3
   818ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return;
		}
		// OUT data phase requested
		udd_ctrl_prev_payload_buf_cnt = 0;
   818be:	2300      	movs	r3, #0
   818c0:	4a6b      	ldr	r2, [pc, #428]	; (81a70 <UOTGHS_Handler+0x2b8>)
   818c2:	8013      	strh	r3, [r2, #0]
		udd_ctrl_payload_buf_cnt = 0;
   818c4:	4a6b      	ldr	r2, [pc, #428]	; (81a74 <UOTGHS_Handler+0x2bc>)
   818c6:	8013      	strh	r3, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
   818c8:	2101      	movs	r1, #1
   818ca:	4a5e      	ldr	r2, [pc, #376]	; (81a44 <UOTGHS_Handler+0x28c>)
   818cc:	7011      	strb	r1, [r2, #0]
		// To detect a protocol error, enable nak interrupt on data IN phase
		udd_ack_nak_in(0);
   818ce:	2210      	movs	r2, #16
   818d0:	4961      	ldr	r1, [pc, #388]	; (81a58 <UOTGHS_Handler+0x2a0>)
   818d2:	600a      	str	r2, [r1, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   818d4:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   818d8:	b672      	cpsid	i
   818da:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   818de:	4856      	ldr	r0, [pc, #344]	; (81a38 <UOTGHS_Handler+0x280>)
   818e0:	7003      	strb	r3, [r0, #0]
		flags = cpu_irq_save();
		udd_enable_nak_in_interrupt(0);
   818e2:	4b67      	ldr	r3, [pc, #412]	; (81a80 <UOTGHS_Handler+0x2c8>)
   818e4:	601a      	str	r2, [r3, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   818e6:	2900      	cmp	r1, #0
   818e8:	f040 8237 	bne.w	81d5a <UOTGHS_Handler+0x5a2>
		cpu_irq_enable();
   818ec:	2201      	movs	r2, #1
   818ee:	7002      	strb	r2, [r0, #0]
   818f0:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   818f4:	b662      	cpsie	i
   818f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dbg_print("stup ");
		// SETUP packet received
		udd_ctrl_setup_received();
		return true;
	}
	if (Is_udd_in_send(0) && Is_udd_in_send_interrupt_enabled(0)) {
   818fa:	4b55      	ldr	r3, [pc, #340]	; (81a50 <UOTGHS_Handler+0x298>)
   818fc:	681b      	ldr	r3, [r3, #0]
   818fe:	f013 0f01 	tst.w	r3, #1
   81902:	d008      	beq.n	81916 <UOTGHS_Handler+0x15e>
   81904:	4b5f      	ldr	r3, [pc, #380]	; (81a84 <UOTGHS_Handler+0x2cc>)
   81906:	681b      	ldr	r3, [r3, #0]
   81908:	f013 0f01 	tst.w	r3, #1
   8190c:	d003      	beq.n	81916 <UOTGHS_Handler+0x15e>
		dbg_print("in ");
		// IN packet sent
		udd_ctrl_in_sent();
   8190e:	4b5a      	ldr	r3, [pc, #360]	; (81a78 <UOTGHS_Handler+0x2c0>)
   81910:	4798      	blx	r3
   81912:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return true;
	}
	if (Is_udd_out_received(0)) {
   81916:	4b4e      	ldr	r3, [pc, #312]	; (81a50 <UOTGHS_Handler+0x298>)
   81918:	681b      	ldr	r3, [r3, #0]
   8191a:	f013 0f02 	tst.w	r3, #2
   8191e:	f000 80b3 	beq.w	81a88 <UOTGHS_Handler+0x2d0>
{
	irqflags_t flags;
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
   81922:	4b48      	ldr	r3, [pc, #288]	; (81a44 <UOTGHS_Handler+0x28c>)
   81924:	781b      	ldrb	r3, [r3, #0]
   81926:	2b01      	cmp	r3, #1
   81928:	d00c      	beq.n	81944 <UOTGHS_Handler+0x18c>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
   8192a:	2b02      	cmp	r3, #2
   8192c:	d001      	beq.n	81932 <UOTGHS_Handler+0x17a>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
   8192e:	2b04      	cmp	r3, #4
   81930:	d102      	bne.n	81938 <UOTGHS_Handler+0x180>
						udd_ep_control_state)) {
			// End of SETUP request:
			// - Data IN Phase aborted,
			// - or last Data IN Phase hidden by ZLP OUT sending quiclky,
			// - or ZLP OUT received normaly.
			udd_ctrl_endofrequest();
   81932:	4b45      	ldr	r3, [pc, #276]	; (81a48 <UOTGHS_Handler+0x290>)
   81934:	4798      	blx	r3
   81936:	e001      	b.n	8193c <UOTGHS_Handler+0x184>
		} else {
			// Protocol error during SETUP request
			udd_ctrl_stall_data();
   81938:	4b46      	ldr	r3, [pc, #280]	; (81a54 <UOTGHS_Handler+0x29c>)
   8193a:	4798      	blx	r3
		}
		// Reinitializes control endpoint management
		udd_ctrl_init();
   8193c:	4b43      	ldr	r3, [pc, #268]	; (81a4c <UOTGHS_Handler+0x294>)
   8193e:	4798      	blx	r3
   81940:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return;
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
   81944:	4b42      	ldr	r3, [pc, #264]	; (81a50 <UOTGHS_Handler+0x298>)
   81946:	6818      	ldr	r0, [r3, #0]
   81948:	f3c0 500a 	ubfx	r0, r0, #20, #11
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_buf_cnt + nb_data)) {
   8194c:	4b44      	ldr	r3, [pc, #272]	; (81a60 <UOTGHS_Handler+0x2a8>)
   8194e:	899b      	ldrh	r3, [r3, #12]
   81950:	4a48      	ldr	r2, [pc, #288]	; (81a74 <UOTGHS_Handler+0x2bc>)
   81952:	8814      	ldrh	r4, [r2, #0]
   81954:	1822      	adds	r2, r4, r0
   81956:	4293      	cmp	r3, r2
		// Reinitializes control endpoint management
		udd_ctrl_init();
		return;
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
   81958:	bfae      	itee	ge
   8195a:	b280      	uxthge	r0, r0
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_buf_cnt + nb_data)) {
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   8195c:	ebc4 0303 	rsblt	r3, r4, r3
   81960:	b298      	uxthlt	r0, r3
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   81962:	4b3f      	ldr	r3, [pc, #252]	; (81a60 <UOTGHS_Handler+0x2a8>)
   81964:	689a      	ldr	r2, [r3, #8]
   81966:	4422      	add	r2, r4
	for (i = 0; i < nb_data; i++) {
   81968:	b1a0      	cbz	r0, 81994 <UOTGHS_Handler+0x1dc>
	nb_data = udd_byte_count(0);
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_buf_cnt + nb_data)) {
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   8196a:	4b3c      	ldr	r3, [pc, #240]	; (81a5c <UOTGHS_Handler+0x2a4>)
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
	for (i = 0; i < nb_data; i++) {
		*ptr_dest++ = *ptr_src++;
   8196c:	f813 1b01 	ldrb.w	r1, [r3], #1
   81970:	f802 1b01 	strb.w	r1, [r2], #1
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
	for (i = 0; i < nb_data; i++) {
   81974:	b2d9      	uxtb	r1, r3
   81976:	4281      	cmp	r1, r0
   81978:	d3f8      	bcc.n	8196c <UOTGHS_Handler+0x1b4>
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_buf_cnt += nb_data;
   8197a:	4404      	add	r4, r0
   8197c:	b2a4      	uxth	r4, r4
   8197e:	4b3d      	ldr	r3, [pc, #244]	; (81a74 <UOTGHS_Handler+0x2bc>)
   81980:	801c      	strh	r4, [r3, #0]

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
   81982:	2840      	cmp	r0, #64	; 0x40
   81984:	d106      	bne.n	81994 <UOTGHS_Handler+0x1dc>
			|| (udd_g_ctrlreq.req.wLength <=
   81986:	4b36      	ldr	r3, [pc, #216]	; (81a60 <UOTGHS_Handler+0x2a8>)
   81988:	88da      	ldrh	r2, [r3, #6]
					(udd_ctrl_prev_payload_buf_cnt +
   8198a:	4b39      	ldr	r3, [pc, #228]	; (81a70 <UOTGHS_Handler+0x2b8>)
   8198c:	881b      	ldrh	r3, [r3, #0]
   8198e:	4423      	add	r3, r4
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_buf_cnt += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
			|| (udd_g_ctrlreq.req.wLength <=
   81990:	429a      	cmp	r2, r3
   81992:	dc13      	bgt.n	819bc <UOTGHS_Handler+0x204>
					(udd_ctrl_prev_payload_buf_cnt +
							udd_ctrl_payload_buf_cnt))) {
		// End of reception because it is a short packet
		// Before send ZLP, call intermediat calback
		// in case of data receiv generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_buf_cnt;
   81994:	4b32      	ldr	r3, [pc, #200]	; (81a60 <UOTGHS_Handler+0x2a8>)
   81996:	819c      	strh	r4, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
   81998:	695b      	ldr	r3, [r3, #20]
   8199a:	b143      	cbz	r3, 819ae <UOTGHS_Handler+0x1f6>
			if (!udd_g_ctrlreq.over_under_run()) {
   8199c:	4798      	blx	r3
   8199e:	b930      	cbnz	r0, 819ae <UOTGHS_Handler+0x1f6>
				// Stall ZLP
				udd_ctrl_stall_data();
   819a0:	4b2c      	ldr	r3, [pc, #176]	; (81a54 <UOTGHS_Handler+0x29c>)
   819a2:	4798      	blx	r3
				// Ack reception of OUT to replace NAK by a STALL
				udd_ack_out_received(0);
   819a4:	2202      	movs	r2, #2
   819a6:	4b2c      	ldr	r3, [pc, #176]	; (81a58 <UOTGHS_Handler+0x2a0>)
   819a8:	601a      	str	r2, [r3, #0]
   819aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ack_out_received(0);
   819ae:	2202      	movs	r2, #2
   819b0:	4b29      	ldr	r3, [pc, #164]	; (81a58 <UOTGHS_Handler+0x2a0>)
   819b2:	601a      	str	r2, [r3, #0]
		udd_ctrl_send_zlp_in();
   819b4:	4b31      	ldr	r3, [pc, #196]	; (81a7c <UOTGHS_Handler+0x2c4>)
   819b6:	4798      	blx	r3
   819b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_buf_cnt) {
   819bc:	4b28      	ldr	r3, [pc, #160]	; (81a60 <UOTGHS_Handler+0x2a8>)
   819be:	899b      	ldrh	r3, [r3, #12]
   819c0:	42a3      	cmp	r3, r4
   819c2:	d11a      	bne.n	819fa <UOTGHS_Handler+0x242>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
   819c4:	4b26      	ldr	r3, [pc, #152]	; (81a60 <UOTGHS_Handler+0x2a8>)
   819c6:	695b      	ldr	r3, [r3, #20]
   819c8:	b933      	cbnz	r3, 819d8 <UOTGHS_Handler+0x220>
			// No callback availabled to request a new payload buffer
			udd_ctrl_stall_data();
   819ca:	4b22      	ldr	r3, [pc, #136]	; (81a54 <UOTGHS_Handler+0x29c>)
   819cc:	4798      	blx	r3
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
   819ce:	2202      	movs	r2, #2
   819d0:	4b21      	ldr	r3, [pc, #132]	; (81a58 <UOTGHS_Handler+0x2a0>)
   819d2:	601a      	str	r2, [r3, #0]
   819d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
   819d8:	4798      	blx	r3
   819da:	b930      	cbnz	r0, 819ea <UOTGHS_Handler+0x232>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
   819dc:	4b1d      	ldr	r3, [pc, #116]	; (81a54 <UOTGHS_Handler+0x29c>)
   819de:	4798      	blx	r3
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
   819e0:	2202      	movs	r2, #2
   819e2:	4b1d      	ldr	r3, [pc, #116]	; (81a58 <UOTGHS_Handler+0x2a0>)
   819e4:	601a      	str	r2, [r3, #0]
   819e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   819ea:	4a21      	ldr	r2, [pc, #132]	; (81a70 <UOTGHS_Handler+0x2b8>)
   819ec:	4b21      	ldr	r3, [pc, #132]	; (81a74 <UOTGHS_Handler+0x2bc>)
   819ee:	8818      	ldrh	r0, [r3, #0]
   819f0:	8811      	ldrh	r1, [r2, #0]
   819f2:	4401      	add	r1, r0
   819f4:	8011      	strh	r1, [r2, #0]
		// Reinit reception on payload buffer
		udd_ctrl_payload_buf_cnt = 0;
   819f6:	2200      	movs	r2, #0
   819f8:	801a      	strh	r2, [r3, #0]
	}
	// Free buffer of control endpoint to authorize next reception
	udd_ack_out_received(0);
   819fa:	4a17      	ldr	r2, [pc, #92]	; (81a58 <UOTGHS_Handler+0x2a0>)
   819fc:	2302      	movs	r3, #2
   819fe:	6013      	str	r3, [r2, #0]
	// To detect a protocol error, enable nak interrupt on data IN phase
	udd_ack_nak_in(0);
   81a00:	2310      	movs	r3, #16
   81a02:	6013      	str	r3, [r2, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   81a04:	f3ef 8210 	mrs	r2, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   81a08:	b672      	cpsid	i
   81a0a:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   81a0e:	2000      	movs	r0, #0
   81a10:	4909      	ldr	r1, [pc, #36]	; (81a38 <UOTGHS_Handler+0x280>)
   81a12:	7008      	strb	r0, [r1, #0]
	flags = cpu_irq_save();
	udd_enable_nak_in_interrupt(0);
   81a14:	491a      	ldr	r1, [pc, #104]	; (81a80 <UOTGHS_Handler+0x2c8>)
   81a16:	600b      	str	r3, [r1, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   81a18:	2a00      	cmp	r2, #0
   81a1a:	f040 819e 	bne.w	81d5a <UOTGHS_Handler+0x5a2>
		cpu_irq_enable();
   81a1e:	2201      	movs	r2, #1
   81a20:	4b05      	ldr	r3, [pc, #20]	; (81a38 <UOTGHS_Handler+0x280>)
   81a22:	701a      	strb	r2, [r3, #0]
   81a24:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   81a28:	b662      	cpsie	i
   81a2a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81a2e:	bf00      	nop
   81a30:	0008125d 	.word	0x0008125d
   81a34:	400ac000 	.word	0x400ac000
   81a38:	200701d8 	.word	0x200701d8
   81a3c:	000808e1 	.word	0x000808e1
   81a40:	400ac220 	.word	0x400ac220
   81a44:	20070c84 	.word	0x20070c84
   81a48:	00081375 	.word	0x00081375
   81a4c:	000812c9 	.word	0x000812c9
   81a50:	400ac130 	.word	0x400ac130
   81a54:	00081315 	.word	0x00081315
   81a58:	400ac160 	.word	0x400ac160
   81a5c:	20180000 	.word	0x20180000
   81a60:	20070d7c 	.word	0x20070d7c
   81a64:	dfe7ffff 	.word	0xdfe7ffff
   81a68:	20180008 	.word	0x20180008
   81a6c:	0008091d 	.word	0x0008091d
   81a70:	20070c80 	.word	0x20070c80
   81a74:	20070c86 	.word	0x20070c86
   81a78:	00081385 	.word	0x00081385
   81a7c:	0008132d 	.word	0x0008132d
   81a80:	400ac1f0 	.word	0x400ac1f0
   81a84:	400ac1c0 	.word	0x400ac1c0
		dbg_print("out ");
		// OUT packet received
		udd_ctrl_out_received();
		return true;
	}
	if (Is_udd_nak_out(0)) {
   81a88:	4bb5      	ldr	r3, [pc, #724]	; (81d60 <UOTGHS_Handler+0x5a8>)
   81a8a:	681b      	ldr	r3, [r3, #0]
   81a8c:	f013 0f08 	tst.w	r3, #8
   81a90:	d013      	beq.n	81aba <UOTGHS_Handler+0x302>
		dbg_print("nako ");
		// Overflow on OUT packet
		udd_ack_nak_out(0);
   81a92:	2208      	movs	r2, #8
   81a94:	4bb3      	ldr	r3, [pc, #716]	; (81d64 <UOTGHS_Handler+0x5ac>)
   81a96:	601a      	str	r2, [r3, #0]
}


static void udd_ctrl_overflow(void)
{
	if (Is_udd_in_send(0))
   81a98:	3b30      	subs	r3, #48	; 0x30
   81a9a:	681b      	ldr	r3, [r3, #0]
   81a9c:	f013 0f01 	tst.w	r3, #1
   81aa0:	f040 815b 	bne.w	81d5a <UOTGHS_Handler+0x5a2>
		return; // Overflow ignored if IN data is received

	// The case of UDD_EPCTRL_DATA_IN is not managed
	// because the OUT endpoint is already free and OUT ZLP accepted

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   81aa4:	4bb0      	ldr	r3, [pc, #704]	; (81d68 <UOTGHS_Handler+0x5b0>)
   81aa6:	781b      	ldrb	r3, [r3, #0]
   81aa8:	2b03      	cmp	r3, #3
   81aaa:	f040 8156 	bne.w	81d5a <UOTGHS_Handler+0x5a2>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data
		udd_enable_stall_handshake(0);
   81aae:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   81ab2:	4bae      	ldr	r3, [pc, #696]	; (81d6c <UOTGHS_Handler+0x5b4>)
   81ab4:	601a      	str	r2, [r3, #0]
   81ab6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		// Overflow on OUT packet
		udd_ack_nak_out(0);
		udd_ctrl_overflow();
		return true;
	}
	if (Is_udd_nak_in(0)) {
   81aba:	4ba9      	ldr	r3, [pc, #676]	; (81d60 <UOTGHS_Handler+0x5a8>)
   81abc:	681b      	ldr	r3, [r3, #0]
   81abe:	f013 0f10 	tst.w	r3, #16
   81ac2:	f000 813a 	beq.w	81d3a <UOTGHS_Handler+0x582>
		dbg_print("naki ");
		// Underflow on IN packet
		udd_ack_nak_in(0);
   81ac6:	2210      	movs	r2, #16
   81ac8:	4ba6      	ldr	r3, [pc, #664]	; (81d64 <UOTGHS_Handler+0x5ac>)
   81aca:	601a      	str	r2, [r3, #0]
}


static void udd_ctrl_underflow(void)
{
	if (Is_udd_out_received(0))
   81acc:	3b30      	subs	r3, #48	; 0x30
   81ace:	681b      	ldr	r3, [r3, #0]
   81ad0:	f013 0f02 	tst.w	r3, #2
   81ad4:	f040 8141 	bne.w	81d5a <UOTGHS_Handler+0x5a2>
		return; // Underflow ignored if OUT data is received

	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
   81ad8:	4ba3      	ldr	r3, [pc, #652]	; (81d68 <UOTGHS_Handler+0x5b0>)
   81ada:	781b      	ldrb	r3, [r3, #0]
   81adc:	2b01      	cmp	r3, #1
   81ade:	d103      	bne.n	81ae8 <UOTGHS_Handler+0x330>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
   81ae0:	4ba3      	ldr	r3, [pc, #652]	; (81d70 <UOTGHS_Handler+0x5b8>)
   81ae2:	4798      	blx	r3
   81ae4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
   81ae8:	2b04      	cmp	r3, #4
   81aea:	f040 8136 	bne.w	81d5a <UOTGHS_Handler+0x5a2>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data
		udd_enable_stall_handshake(0);
   81aee:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   81af2:	4b9e      	ldr	r3, [pc, #632]	; (81d6c <UOTGHS_Handler+0x5b4>)
   81af4:	601a      	str	r2, [r3, #0]
   81af6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81afa:	b2da      	uxtb	r2, r3
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   81afc:	469c      	mov	ip, r3
   81afe:	46a2      	mov	sl, r4

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   81b00:	692f      	ldr	r7, [r5, #16]
   81b02:	1e5e      	subs	r6, r3, #1
   81b04:	fa08 f606 	lsl.w	r6, r8, r6
   81b08:	423e      	tst	r6, r7
   81b0a:	d018      	beq.n	81b3e <UOTGHS_Handler+0x386>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
   81b0c:	686f      	ldr	r7, [r5, #4]
   81b0e:	423e      	tst	r6, r7
   81b10:	d015      	beq.n	81b3e <UOTGHS_Handler+0x386>
			uint32_t nb_remaining;
			if (udd_endpoint_dma_get_status(ep)
   81b12:	4b98      	ldr	r3, [pc, #608]	; (81d74 <UOTGHS_Handler+0x5bc>)
   81b14:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   81b18:	68d9      	ldr	r1, [r3, #12]
   81b1a:	f011 0f01 	tst.w	r1, #1
   81b1e:	f040 811c 	bne.w	81d5a <UOTGHS_Handler+0x5a2>
					& UOTGHS_DEVDMASTATUS_CHANN_ENB) {
				return true; // Ignore EOT_STA interrupt
			}
			dbg_print("dma%x: ", ep);
			udd_disable_endpoint_dma_interrupt(ep);
   81b22:	4995      	ldr	r1, [pc, #596]	; (81d78 <UOTGHS_Handler+0x5c0>)
   81b24:	614e      	str	r6, [r1, #20]
			// Save number of data no transfered
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
   81b26:	68db      	ldr	r3, [r3, #12]
					UOTGHS_DEVDMASTATUS_BUFF_COUNT_Msk)
					>> UOTGHS_DEVDMASTATUS_BUFF_COUNT_Pos;
			if (nb_remaining) {
   81b28:	0c1b      	lsrs	r3, r3, #16
   81b2a:	d003      	beq.n	81b34 <UOTGHS_Handler+0x37c>
				// Transfer no complete (short packet or ZLP) then:
				// Update number of data transfered
				ptr_job->buf_cnt -= nb_remaining;
   81b2c:	68e1      	ldr	r1, [r4, #12]
   81b2e:	1acb      	subs	r3, r1, r3
   81b30:	60e3      	str	r3, [r4, #12]
				// Set transfer complete to stop the transfer
				ptr_job->buf_size = ptr_job->buf_cnt;
   81b32:	60a3      	str	r3, [r4, #8]
			}
			udd_ep_trans_done(ep);
   81b34:	4610      	mov	r0, r2
   81b36:	4b91      	ldr	r3, [pc, #580]	; (81d7c <UOTGHS_Handler+0x5c4>)
   81b38:	4798      	blx	r3
   81b3a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   81b3e:	692e      	ldr	r6, [r5, #16]
   81b40:	fa09 fc0c 	lsl.w	ip, r9, ip
   81b44:	ea1c 0f06 	tst.w	ip, r6
   81b48:	d046      	beq.n	81bd8 <UOTGHS_Handler+0x420>
   81b4a:	ea4f 0b83 	mov.w	fp, r3, lsl #2
   81b4e:	f101 0790 	add.w	r7, r1, #144	; 0x90
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   81b52:	f8d1 6090 	ldr.w	r6, [r1, #144]	; 0x90
   81b56:	f016 0f01 	tst.w	r6, #1
   81b5a:	d014      	beq.n	81b86 <UOTGHS_Handler+0x3ce>
					&& Is_udd_in_send(ep)) {
   81b5c:	680e      	ldr	r6, [r1, #0]
   81b5e:	f016 0f01 	tst.w	r6, #1
   81b62:	d010      	beq.n	81b86 <UOTGHS_Handler+0x3ce>
				dbg_print("I ");
				udd_disable_in_send_interrupt(ep);
   81b64:	4b86      	ldr	r3, [pc, #536]	; (81d80 <UOTGHS_Handler+0x5c8>)
   81b66:	2101      	movs	r1, #1
   81b68:	f84b 1003 	str.w	r1, [fp, r3]
				// One bank is free then send a ZLP
				udd_ack_in_send(ep);
   81b6c:	487d      	ldr	r0, [pc, #500]	; (81d64 <UOTGHS_Handler+0x5ac>)
   81b6e:	f84b 1000 	str.w	r1, [fp, r0]
				udd_ack_fifocon(ep);
   81b72:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   81b76:	f84b 1003 	str.w	r1, [fp, r3]
				udd_ep_finish_job(ptr_job, false, ep);
   81b7a:	4650      	mov	r0, sl
   81b7c:	2100      	movs	r1, #0
   81b7e:	4b81      	ldr	r3, [pc, #516]	; (81d84 <UOTGHS_Handler+0x5cc>)
   81b80:	4798      	blx	r3
   81b82:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				return true;
			}
			if (Is_udd_bank_interrupt_enabled(ep)
   81b86:	683a      	ldr	r2, [r7, #0]
   81b88:	f412 5f80 	tst.w	r2, #4096	; 0x1000
   81b8c:	d024      	beq.n	81bd8 <UOTGHS_Handler+0x420>
					&& (0 == udd_nb_busy_bank(ep))) {
   81b8e:	680a      	ldr	r2, [r1, #0]
   81b90:	f412 5f40 	tst.w	r2, #12288	; 0x3000
   81b94:	d120      	bne.n	81bd8 <UOTGHS_Handler+0x420>
				dbg_print("EoT ");
				// End of background transfer on IN endpoint
				udd_disable_bank_interrupt(ep);
   81b96:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   81b9a:	4b79      	ldr	r3, [pc, #484]	; (81d80 <UOTGHS_Handler+0x5c8>)
   81b9c:	f84b 2003 	str.w	r2, [fp, r3]
				udd_disable_endpoint_interrupt(ep);
   81ba0:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
   81ba4:	f8c3 c014 	str.w	ip, [r3, #20]

				Assert(ptr_job->stall_requested);
				// A stall has been requested during backgound transfer
				ptr_job->stall_requested = false;
   81ba8:	f89a 3014 	ldrb.w	r3, [sl, #20]
   81bac:	f36f 0382 	bfc	r3, #2, #1
   81bb0:	f88a 3014 	strb.w	r3, [sl, #20]
				udd_disable_endpoint_bank_autoswitch(ep);
   81bb4:	4b74      	ldr	r3, [pc, #464]	; (81d88 <UOTGHS_Handler+0x5d0>)
   81bb6:	f85b 2003 	ldr.w	r2, [fp, r3]
   81bba:	f422 7200 	bic.w	r2, r2, #512	; 0x200
   81bbe:	f84b 2003 	str.w	r2, [fp, r3]
				udd_enable_stall_handshake(ep);
   81bc2:	33f0      	adds	r3, #240	; 0xf0
   81bc4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   81bc8:	f84b 2003 	str.w	r2, [fp, r3]
				udd_reset_data_toggle(ep);
   81bcc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   81bd0:	f84b 2003 	str.w	r2, [fp, r3]
   81bd4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81bd8:	3301      	adds	r3, #1
   81bda:	3418      	adds	r4, #24
   81bdc:	3104      	adds	r1, #4
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   81bde:	2b04      	cmp	r3, #4
   81be0:	d18b      	bne.n	81afa <UOTGHS_Handler+0x342>
   81be2:	e0b4      	b.n	81d4e <UOTGHS_Handler+0x596>
	}
#endif

	// USB bus reset detection
	if (Is_udd_reset()) {
		udd_ack_reset();
   81be4:	2208      	movs	r2, #8
   81be6:	4b64      	ldr	r3, [pc, #400]	; (81d78 <UOTGHS_Handler+0x5c0>)
   81be8:	609a      	str	r2, [r3, #8]
   81bea:	4605      	mov	r5, r0
static void udd_ep_job_table_kill(void)
{
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   81bec:	2400      	movs	r4, #0
		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
   81bee:	2701      	movs	r7, #1
   81bf0:	4e64      	ldr	r6, [pc, #400]	; (81d84 <UOTGHS_Handler+0x5cc>)
   81bf2:	3401      	adds	r4, #1
   81bf4:	b2e4      	uxtb	r4, r4
   81bf6:	4628      	mov	r0, r5
   81bf8:	4639      	mov	r1, r7
   81bfa:	4622      	mov	r2, r4
   81bfc:	47b0      	blx	r6
   81bfe:	3518      	adds	r5, #24
static void udd_ep_job_table_kill(void)
{
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   81c00:	2c03      	cmp	r4, #3
   81c02:	d1f6      	bne.n	81bf2 <UOTGHS_Handler+0x43a>
		// Abort all jobs on-going
#if (USB_DEVICE_MAX_EP != 0)
		udd_ep_job_table_kill();
#endif
		// Reset USB Device Stack Core
		udc_reset();
   81c04:	4b61      	ldr	r3, [pc, #388]	; (81d8c <UOTGHS_Handler+0x5d4>)
   81c06:	4798      	blx	r3
static void udd_reset_ep_ctrl(void)
{
	irqflags_t flags;

	// Reset USB address to 0
	udd_configure_address(0);
   81c08:	4b5b      	ldr	r3, [pc, #364]	; (81d78 <UOTGHS_Handler+0x5c0>)
   81c0a:	681a      	ldr	r2, [r3, #0]
   81c0c:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   81c10:	601a      	str	r2, [r3, #0]
	udd_enable_address();
   81c12:	681a      	ldr	r2, [r3, #0]
   81c14:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   81c18:	601a      	str	r2, [r3, #0]

	// Alloc and configure control endpoint
	udd_configure_endpoint(0,
   81c1a:	4a5b      	ldr	r2, [pc, #364]	; (81d88 <UOTGHS_Handler+0x5d0>)
   81c1c:	6811      	ldr	r1, [r2, #0]
   81c1e:	f421 51cb 	bic.w	r1, r1, #6496	; 0x1960
   81c22:	f021 011c 	bic.w	r1, r1, #28
   81c26:	f041 0130 	orr.w	r1, r1, #48	; 0x30
   81c2a:	6011      	str	r1, [r2, #0]
		USB_EP_TYPE_CONTROL,
		0,
		USB_DEVICE_EP_CTRL_SIZE,
		UOTGHS_DEVEPTCFG_EPBK_1_BANK);

	udd_allocate_memory(0);
   81c2c:	6811      	ldr	r1, [r2, #0]
   81c2e:	f041 0102 	orr.w	r1, r1, #2
   81c32:	6011      	str	r1, [r2, #0]
	udd_enable_endpoint(0);
   81c34:	69da      	ldr	r2, [r3, #28]
   81c36:	f042 0201 	orr.w	r2, r2, #1
   81c3a:	61da      	str	r2, [r3, #28]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   81c3c:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   81c40:	b672      	cpsid	i
   81c42:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   81c46:	2000      	movs	r0, #0
   81c48:	4a51      	ldr	r2, [pc, #324]	; (81d90 <UOTGHS_Handler+0x5d8>)
   81c4a:	7010      	strb	r0, [r2, #0]
	flags = cpu_irq_save();
	udd_enable_setup_received_interrupt(0);
   81c4c:	4a47      	ldr	r2, [pc, #284]	; (81d6c <UOTGHS_Handler+0x5b4>)
   81c4e:	2004      	movs	r0, #4
   81c50:	6010      	str	r0, [r2, #0]
	udd_enable_out_received_interrupt(0);
   81c52:	2002      	movs	r0, #2
   81c54:	6010      	str	r0, [r2, #0]
	udd_enable_endpoint_interrupt(0);
   81c56:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   81c5a:	619a      	str	r2, [r3, #24]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   81c5c:	b929      	cbnz	r1, 81c6a <UOTGHS_Handler+0x4b2>
		cpu_irq_enable();
   81c5e:	2201      	movs	r2, #1
   81c60:	4b4b      	ldr	r3, [pc, #300]	; (81d90 <UOTGHS_Handler+0x5d8>)
   81c62:	701a      	strb	r2, [r3, #0]
   81c64:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   81c68:	b662      	cpsie	i
		// Reset USB Device Stack Core
		udc_reset();
		// Reset endpoint control
		udd_reset_ep_ctrl();
		// Reset endpoint control management
		udd_ctrl_init();
   81c6a:	4b4a      	ldr	r3, [pc, #296]	; (81d94 <UOTGHS_Handler+0x5dc>)
   81c6c:	4798      	blx	r3
		goto udd_interrupt_end;
   81c6e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}

	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
   81c72:	4b41      	ldr	r3, [pc, #260]	; (81d78 <UOTGHS_Handler+0x5c0>)
   81c74:	691b      	ldr	r3, [r3, #16]
   81c76:	f013 0f01 	tst.w	r3, #1
   81c7a:	d01a      	beq.n	81cb2 <UOTGHS_Handler+0x4fa>
   81c7c:	4b3e      	ldr	r3, [pc, #248]	; (81d78 <UOTGHS_Handler+0x5c0>)
   81c7e:	685b      	ldr	r3, [r3, #4]
   81c80:	f013 0f01 	tst.w	r3, #1
   81c84:	d015      	beq.n	81cb2 <UOTGHS_Handler+0x4fa>
		otg_unfreeze_clock();
   81c86:	4b3c      	ldr	r3, [pc, #240]	; (81d78 <UOTGHS_Handler+0x5c0>)
   81c88:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   81c8c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
   81c90:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
		// The suspend interrupt is automatic acked when a wakeup occur
		udd_disable_suspend_interrupt();
   81c94:	2201      	movs	r2, #1
   81c96:	615a      	str	r2, [r3, #20]
		udd_enable_wake_up_interrupt();
   81c98:	2210      	movs	r2, #16
   81c9a:	619a      	str	r2, [r3, #24]
		otg_freeze_clock(); // Mandatory to exit of sleep mode after a wakeup event
   81c9c:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   81ca0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   81ca4:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
		udd_sleep_mode(false);  // Enter in SUSPEND mode
   81ca8:	2000      	movs	r0, #0
   81caa:	4b3b      	ldr	r3, [pc, #236]	; (81d98 <UOTGHS_Handler+0x5e0>)
   81cac:	4798      	blx	r3
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_end;
   81cae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}

	if (Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) {
   81cb2:	4b31      	ldr	r3, [pc, #196]	; (81d78 <UOTGHS_Handler+0x5c0>)
   81cb4:	691b      	ldr	r3, [r3, #16]
   81cb6:	f013 0f10 	tst.w	r3, #16
   81cba:	d01e      	beq.n	81cfa <UOTGHS_Handler+0x542>
   81cbc:	4b2e      	ldr	r3, [pc, #184]	; (81d78 <UOTGHS_Handler+0x5c0>)
   81cbe:	685b      	ldr	r3, [r3, #4]
   81cc0:	f013 0f10 	tst.w	r3, #16
   81cc4:	d019      	beq.n	81cfa <UOTGHS_Handler+0x542>
		// Ack wakeup interrupt and enable suspend interrupt
		otg_unfreeze_clock();
   81cc6:	4b2c      	ldr	r3, [pc, #176]	; (81d78 <UOTGHS_Handler+0x5c0>)
   81cc8:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   81ccc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
   81cd0:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
		// Check USB clock ready after suspend and eventually sleep USB clock
		while (!Is_otg_clock_usable()) {
   81cd4:	e003      	b.n	81cde <UOTGHS_Handler+0x526>
			if (Is_udd_suspend()) {
   81cd6:	685a      	ldr	r2, [r3, #4]
   81cd8:	f012 0f01 	tst.w	r2, #1
   81cdc:	d104      	bne.n	81ce8 <UOTGHS_Handler+0x530>

	if (Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) {
		// Ack wakeup interrupt and enable suspend interrupt
		otg_unfreeze_clock();
		// Check USB clock ready after suspend and eventually sleep USB clock
		while (!Is_otg_clock_usable()) {
   81cde:	f8d3 2804 	ldr.w	r2, [r3, #2052]	; 0x804
   81ce2:	f412 4f80 	tst.w	r2, #16384	; 0x4000
   81ce6:	d0f6      	beq.n	81cd6 <UOTGHS_Handler+0x51e>
			if (Is_udd_suspend()) {
				break; // In case of USB state change in HS
			}
		};
		// The wakeup interrupt is automatic acked when a suspend occur
		udd_disable_wake_up_interrupt();
   81ce8:	4b23      	ldr	r3, [pc, #140]	; (81d78 <UOTGHS_Handler+0x5c0>)
   81cea:	2210      	movs	r2, #16
   81cec:	615a      	str	r2, [r3, #20]
		udd_enable_suspend_interrupt();
   81cee:	2001      	movs	r0, #1
   81cf0:	6198      	str	r0, [r3, #24]
		udd_sleep_mode(true); // Enter in IDLE mode
   81cf2:	4b29      	ldr	r3, [pc, #164]	; (81d98 <UOTGHS_Handler+0x5e0>)
   81cf4:	4798      	blx	r3
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
#endif
		goto udd_interrupt_end;
   81cf6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}

	if (Is_otg_vbus_transition()) {
   81cfa:	4b1f      	ldr	r3, [pc, #124]	; (81d78 <UOTGHS_Handler+0x5c0>)
   81cfc:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
   81d00:	f013 0f02 	tst.w	r3, #2
   81d04:	d029      	beq.n	81d5a <UOTGHS_Handler+0x5a2>
		dbg_print("VBus ");
		// Ack Vbus transition and send status to high level
		otg_unfreeze_clock();
   81d06:	4b1c      	ldr	r3, [pc, #112]	; (81d78 <UOTGHS_Handler+0x5c0>)
   81d08:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   81d0c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
   81d10:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
		otg_ack_vbus_transition();
   81d14:	2202      	movs	r2, #2
   81d16:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
		otg_freeze_clock();
   81d1a:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   81d1e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   81d22:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
#ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
		if (Is_otg_vbus_high()) {
   81d26:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
   81d2a:	f413 6f00 	tst.w	r3, #2048	; 0x800
			udd_attach();
   81d2e:	bf14      	ite	ne
   81d30:	4b1a      	ldrne	r3, [pc, #104]	; (81d9c <UOTGHS_Handler+0x5e4>)
		} else {
			udd_detach();
   81d32:	4b1b      	ldreq	r3, [pc, #108]	; (81da0 <UOTGHS_Handler+0x5e8>)
   81d34:	4798      	blx	r3
   81d36:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81d3a:	481a      	ldr	r0, [pc, #104]	; (81da4 <UOTGHS_Handler+0x5ec>)
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
	for (i = 0; i < nb_data; i++) {
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_buf_cnt += nb_data;
   81d3c:	4604      	mov	r4, r0
   81d3e:	491a      	ldr	r1, [pc, #104]	; (81da8 <UOTGHS_Handler+0x5f0>)
   81d40:	2301      	movs	r3, #1
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   81d42:	4d0d      	ldr	r5, [pc, #52]	; (81d78 <UOTGHS_Handler+0x5c0>)
   81d44:	f04f 7800 	mov.w	r8, #33554432	; 0x2000000
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   81d48:	f44f 5980 	mov.w	r9, #4096	; 0x1000
   81d4c:	e6d5      	b.n	81afa <UOTGHS_Handler+0x342>
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
	}
#endif

	// USB bus reset detection
	if (Is_udd_reset()) {
   81d4e:	4b0a      	ldr	r3, [pc, #40]	; (81d78 <UOTGHS_Handler+0x5c0>)
   81d50:	685b      	ldr	r3, [r3, #4]
   81d52:	f013 0f08 	tst.w	r3, #8
   81d56:	d08c      	beq.n	81c72 <UOTGHS_Handler+0x4ba>
   81d58:	e744      	b.n	81be4 <UOTGHS_Handler+0x42c>
   81d5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81d5e:	bf00      	nop
   81d60:	400ac130 	.word	0x400ac130
   81d64:	400ac160 	.word	0x400ac160
   81d68:	20070c84 	.word	0x20070c84
   81d6c:	400ac1f0 	.word	0x400ac1f0
   81d70:	0008132d 	.word	0x0008132d
   81d74:	400ac300 	.word	0x400ac300
   81d78:	400ac000 	.word	0x400ac000
   81d7c:	00081519 	.word	0x00081519
   81d80:	400ac220 	.word	0x400ac220
   81d84:	000814e5 	.word	0x000814e5
   81d88:	400ac100 	.word	0x400ac100
   81d8c:	00080899 	.word	0x00080899
   81d90:	200701d8 	.word	0x200701d8
   81d94:	000812c9 	.word	0x000812c9
   81d98:	0008167d 	.word	0x0008167d
   81d9c:	00081705 	.word	0x00081705
   81da0:	00081785 	.word	0x00081785
   81da4:	20070c38 	.word	0x20070c38
   81da8:	400ac134 	.word	0x400ac134

00081dac <udd_is_high_speed>:
#ifdef USB_DEVICE_HS_SUPPORT
	return !Is_udd_full_speed_mode();
#else
	return false;
#endif
}
   81dac:	2000      	movs	r0, #0
   81dae:	4770      	bx	lr

00081db0 <udd_set_address>:


void udd_set_address(uint8_t address)
{
	udd_disable_address();
   81db0:	4b08      	ldr	r3, [pc, #32]	; (81dd4 <udd_set_address+0x24>)
   81db2:	681a      	ldr	r2, [r3, #0]
   81db4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   81db8:	601a      	str	r2, [r3, #0]
	udd_configure_address(address);
   81dba:	681a      	ldr	r2, [r3, #0]
   81dbc:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   81dc0:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   81dc4:	4302      	orrs	r2, r0
   81dc6:	601a      	str	r2, [r3, #0]
	udd_enable_address();
   81dc8:	681a      	ldr	r2, [r3, #0]
   81dca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   81dce:	601a      	str	r2, [r3, #0]
   81dd0:	4770      	bx	lr
   81dd2:	bf00      	nop
   81dd4:	400ac000 	.word	0x400ac000

00081dd8 <udd_getaddress>:
}


uint8_t udd_getaddress(void)
{
	return udd_get_configured_address();
   81dd8:	4b02      	ldr	r3, [pc, #8]	; (81de4 <udd_getaddress+0xc>)
   81dda:	6818      	ldr	r0, [r3, #0]
}
   81ddc:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   81de0:	4770      	bx	lr
   81de2:	bf00      	nop
   81de4:	400ac000 	.word	0x400ac000

00081de8 <udd_get_frame_number>:


uint16_t udd_get_frame_number(void)
{
	return udd_frame_number();
   81de8:	4b02      	ldr	r3, [pc, #8]	; (81df4 <udd_get_frame_number+0xc>)
   81dea:	6a18      	ldr	r0, [r3, #32]
}
   81dec:	f3c0 00ca 	ubfx	r0, r0, #3, #11
   81df0:	4770      	bx	lr
   81df2:	bf00      	nop
   81df4:	400ac000 	.word	0x400ac000

00081df8 <udd_get_micro_frame_number>:

uint16_t udd_get_micro_frame_number(void)
{
	return udd_micro_frame_number();
   81df8:	4b02      	ldr	r3, [pc, #8]	; (81e04 <udd_get_micro_frame_number+0xc>)
   81dfa:	6a18      	ldr	r0, [r3, #32]
}
   81dfc:	f3c0 000d 	ubfx	r0, r0, #0, #14
   81e00:	4770      	bx	lr
   81e02:	bf00      	nop
   81e04:	400ac000 	.word	0x400ac000

00081e08 <udd_set_setup_payload>:
}


void udd_set_setup_payload(uint8_t *payload, uint16_t payload_size)
{
	udd_g_ctrlreq.payload = payload;
   81e08:	4b01      	ldr	r3, [pc, #4]	; (81e10 <udd_set_setup_payload+0x8>)
   81e0a:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
   81e0c:	8199      	strh	r1, [r3, #12]
   81e0e:	4770      	bx	lr
   81e10:	20070d7c 	.word	0x20070d7c

00081e14 <udd_ep_free>:
	return true;
}


void udd_ep_free(udd_ep_id_t ep)
{
   81e14:	b570      	push	{r4, r5, r6, lr}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   81e16:	f000 020f 	and.w	r2, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
   81e1a:	2a03      	cmp	r2, #3
   81e1c:	d81f      	bhi.n	81e5e <udd_ep_free+0x4a>
		return;
	}
	udd_disable_endpoint(ep_index);
   81e1e:	4b10      	ldr	r3, [pc, #64]	; (81e60 <udd_ep_free+0x4c>)
   81e20:	69d8      	ldr	r0, [r3, #28]
   81e22:	2101      	movs	r1, #1
   81e24:	fa01 f402 	lsl.w	r4, r1, r2
   81e28:	ea20 0004 	bic.w	r0, r0, r4
   81e2c:	61d8      	str	r0, [r3, #28]
	udd_unallocate_memory(ep_index);
   81e2e:	f503 7380 	add.w	r3, r3, #256	; 0x100
   81e32:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   81e36:	f020 0002 	bic.w	r0, r0, #2
   81e3a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
static void udd_ep_abort_job(udd_ep_id_t ep)
{
	ep &= USB_EP_ADDR_MASK;

	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
   81e3e:	1e54      	subs	r4, r2, #1
   81e40:	4d08      	ldr	r5, [pc, #32]	; (81e64 <udd_ep_free+0x50>)
   81e42:	fa04 f601 	lsl.w	r6, r4, r1
   81e46:	1930      	adds	r0, r6, r4
   81e48:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
   81e4c:	4b06      	ldr	r3, [pc, #24]	; (81e68 <udd_ep_free+0x54>)
   81e4e:	4798      	blx	r3
		return;
	}
	udd_disable_endpoint(ep_index);
	udd_unallocate_memory(ep_index);
	udd_ep_abort_job(ep);
	udd_ep_job[ep_index - 1].stall_requested = false;
   81e50:	4434      	add	r4, r6
   81e52:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
   81e56:	7d2b      	ldrb	r3, [r5, #20]
   81e58:	f36f 0382 	bfc	r3, #2, #1
   81e5c:	752b      	strb	r3, [r5, #20]
   81e5e:	bd70      	pop	{r4, r5, r6, pc}
   81e60:	400ac000 	.word	0x400ac000
   81e64:	20070c38 	.word	0x20070c38
   81e68:	000814e5 	.word	0x000814e5

00081e6c <udd_ep_is_halted>:


bool udd_ep_is_halted(udd_ep_id_t ep)
{
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	return Is_udd_endpoint_stall_requested(ep_index);
   81e6c:	f000 000f 	and.w	r0, r0, #15
   81e70:	4b02      	ldr	r3, [pc, #8]	; (81e7c <udd_ep_is_halted+0x10>)
   81e72:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
   81e76:	f3c0 40c0 	ubfx	r0, r0, #19, #1
   81e7a:	4770      	bx	lr
   81e7c:	400ac1c0 	.word	0x400ac1c0

00081e80 <udd_ep_set_halt>:


bool udd_ep_set_halt(udd_ep_id_t ep)
{
   81e80:	b430      	push	{r4, r5}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   81e82:	f000 030f 	and.w	r3, r0, #15
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	irqflags_t flags;

	if (USB_DEVICE_MAX_EP < ep_index) {
   81e86:	2b03      	cmp	r3, #3
   81e88:	d854      	bhi.n	81f34 <udd_ep_set_halt+0xb4>
		return false;
	}

	if (Is_udd_endpoint_stall_requested(ep_index) // Endpoint stalled
   81e8a:	4a31      	ldr	r2, [pc, #196]	; (81f50 <udd_ep_set_halt+0xd0>)
   81e8c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   81e90:	f412 2f00 	tst.w	r2, #524288	; 0x80000
   81e94:	d150      	bne.n	81f38 <udd_ep_set_halt+0xb8>


bool udd_ep_set_halt(udd_ep_id_t ep)
{
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
   81e96:	1e5a      	subs	r2, r3, #1
   81e98:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   81e9c:	492d      	ldr	r1, [pc, #180]	; (81f54 <udd_ep_set_halt+0xd4>)
   81e9e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
	if (USB_DEVICE_MAX_EP < ep_index) {
		return false;
	}

	if (Is_udd_endpoint_stall_requested(ep_index) // Endpoint stalled
			|| ptr_job->stall_requested) { // Endpoint stall is requested
   81ea2:	7d11      	ldrb	r1, [r2, #20]
   81ea4:	f011 0f04 	tst.w	r1, #4
   81ea8:	d148      	bne.n	81f3c <udd_ep_set_halt+0xbc>
		return true; // Already STALL
	}

	if (ptr_job->busy == true) {
   81eaa:	f011 0f01 	tst.w	r1, #1
   81eae:	d147      	bne.n	81f40 <udd_ep_set_halt+0xc0>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   81eb0:	f3ef 8110 	mrs	r1, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
   81eb4:	f1d1 0101 	rsbs	r1, r1, #1
   81eb8:	bf38      	it	cc
   81eba:	2100      	movcc	r1, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   81ebc:	b672      	cpsid	i
   81ebe:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   81ec2:	2500      	movs	r5, #0
   81ec4:	4c24      	ldr	r4, [pc, #144]	; (81f58 <udd_ep_set_halt+0xd8>)
   81ec6:	7025      	strb	r5, [r4, #0]
		return false; // Job on going, stall impossible
	}

	flags = cpu_irq_save();
	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
   81ec8:	f010 0f80 	tst.w	r0, #128	; 0x80
   81ecc:	d01a      	beq.n	81f04 <udd_ep_set_halt+0x84>
   81ece:	4823      	ldr	r0, [pc, #140]	; (81f5c <udd_ep_set_halt+0xdc>)
   81ed0:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
   81ed4:	f410 5f40 	tst.w	r0, #12288	; 0x3000
   81ed8:	d014      	beq.n	81f04 <udd_ep_set_halt+0x84>
		// Delay the stall after the end of IN transfer on USB line
		ptr_job->stall_requested = true;
   81eda:	7d10      	ldrb	r0, [r2, #20]
   81edc:	f040 0004 	orr.w	r0, r0, #4
   81ee0:	7510      	strb	r0, [r2, #20]
#ifdef UDD_EP_FIFO_SUPPORTED
		udd_disable_in_send_interrupt(ep_index);
		udd_enable_endpoint_bank_autoswitch(ep_index);
#endif
		udd_enable_bank_interrupt(ep_index);
   81ee2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   81ee6:	481e      	ldr	r0, [pc, #120]	; (81f60 <udd_ep_set_halt+0xe0>)
   81ee8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		udd_enable_endpoint_interrupt(ep_index);
   81eec:	fa02 f303 	lsl.w	r3, r2, r3
   81ef0:	f5a0 70f8 	sub.w	r0, r0, #496	; 0x1f0
   81ef4:	6183      	str	r3, [r0, #24]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   81ef6:	b329      	cbz	r1, 81f44 <udd_ep_set_halt+0xc4>
		cpu_irq_enable();
   81ef8:	2001      	movs	r0, #1
   81efa:	7020      	strb	r0, [r4, #0]
   81efc:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   81f00:	b662      	cpsie	i
   81f02:	e022      	b.n	81f4a <udd_ep_set_halt+0xca>
		cpu_irq_restore(flags);
		return true;
	}
	// Stall endpoint immediately
	udd_disable_endpoint_bank_autoswitch(ep_index);
   81f04:	4a17      	ldr	r2, [pc, #92]	; (81f64 <udd_ep_set_halt+0xe4>)
   81f06:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
   81f0a:	f420 7000 	bic.w	r0, r0, #512	; 0x200
   81f0e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
	udd_ack_stall(ep_index);
   81f12:	2040      	movs	r0, #64	; 0x40
   81f14:	3260      	adds	r2, #96	; 0x60
   81f16:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
	udd_enable_stall_handshake(ep_index);
   81f1a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
   81f1e:	3290      	adds	r2, #144	; 0x90
   81f20:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   81f24:	b181      	cbz	r1, 81f48 <udd_ep_set_halt+0xc8>
		cpu_irq_enable();
   81f26:	2001      	movs	r0, #1
   81f28:	4b0b      	ldr	r3, [pc, #44]	; (81f58 <udd_ep_set_halt+0xd8>)
   81f2a:	7018      	strb	r0, [r3, #0]
   81f2c:	f3bf 8f5f 	dmb	sy
   81f30:	b662      	cpsie	i
   81f32:	e00a      	b.n	81f4a <udd_ep_set_halt+0xca>
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	irqflags_t flags;

	if (USB_DEVICE_MAX_EP < ep_index) {
		return false;
   81f34:	2000      	movs	r0, #0
   81f36:	e008      	b.n	81f4a <udd_ep_set_halt+0xca>
	}

	if (Is_udd_endpoint_stall_requested(ep_index) // Endpoint stalled
			|| ptr_job->stall_requested) { // Endpoint stall is requested
		return true; // Already STALL
   81f38:	2001      	movs	r0, #1
   81f3a:	e006      	b.n	81f4a <udd_ep_set_halt+0xca>
   81f3c:	2001      	movs	r0, #1
   81f3e:	e004      	b.n	81f4a <udd_ep_set_halt+0xca>
	}

	if (ptr_job->busy == true) {
		return false; // Job on going, stall impossible
   81f40:	2000      	movs	r0, #0
   81f42:	e002      	b.n	81f4a <udd_ep_set_halt+0xca>
		udd_enable_endpoint_bank_autoswitch(ep_index);
#endif
		udd_enable_bank_interrupt(ep_index);
		udd_enable_endpoint_interrupt(ep_index);
		cpu_irq_restore(flags);
		return true;
   81f44:	2001      	movs	r0, #1
   81f46:	e000      	b.n	81f4a <udd_ep_set_halt+0xca>
	// Stall endpoint immediately
	udd_disable_endpoint_bank_autoswitch(ep_index);
	udd_ack_stall(ep_index);
	udd_enable_stall_handshake(ep_index);
	cpu_irq_restore(flags);
	return true;
   81f48:	2001      	movs	r0, #1
}
   81f4a:	bc30      	pop	{r4, r5}
   81f4c:	4770      	bx	lr
   81f4e:	bf00      	nop
   81f50:	400ac1c0 	.word	0x400ac1c0
   81f54:	20070c38 	.word	0x20070c38
   81f58:	200701d8 	.word	0x200701d8
   81f5c:	400ac130 	.word	0x400ac130
   81f60:	400ac1f0 	.word	0x400ac1f0
   81f64:	400ac100 	.word	0x400ac100

00081f68 <udd_ep_clear_halt>:


bool udd_ep_clear_halt(udd_ep_id_t ep)
{
   81f68:	b538      	push	{r3, r4, r5, lr}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   81f6a:	f000 000f 	and.w	r0, r0, #15
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	bool b_stall_cleared = false;

	if (USB_DEVICE_MAX_EP < ep_index)
   81f6e:	2803      	cmp	r0, #3
   81f70:	d840      	bhi.n	81ff4 <udd_ep_clear_halt+0x8c>


bool udd_ep_clear_halt(udd_ep_id_t ep)
{
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
   81f72:	4927      	ldr	r1, [pc, #156]	; (82010 <udd_ep_clear_halt+0xa8>)
   81f74:	1e43      	subs	r3, r0, #1
   81f76:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   81f7a:	00dc      	lsls	r4, r3, #3
   81f7c:	190b      	adds	r3, r1, r4
	bool b_stall_cleared = false;

	if (USB_DEVICE_MAX_EP < ep_index)
		return false;

	if (ptr_job->stall_requested) {
   81f7e:	7d1a      	ldrb	r2, [r3, #20]
   81f80:	f012 0f04 	tst.w	r2, #4
   81f84:	d03a      	beq.n	81ffc <udd_ep_clear_halt+0x94>
		// Endpoint stall has been requested but not done
		// Remove stall request
		ptr_job->stall_requested = false;
   81f86:	7d1a      	ldrb	r2, [r3, #20]
   81f88:	f36f 0282 	bfc	r2, #2, #1
   81f8c:	751a      	strb	r2, [r3, #20]
		udd_disable_bank_interrupt(ep_index);
   81f8e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   81f92:	4d20      	ldr	r5, [pc, #128]	; (82014 <udd_ep_clear_halt+0xac>)
   81f94:	f845 2020 	str.w	r2, [r5, r0, lsl #2]
		udd_disable_endpoint_interrupt(ep_index);
   81f98:	4082      	lsls	r2, r0
   81f9a:	f5a5 7508 	sub.w	r5, r5, #544	; 0x220
   81f9e:	616a      	str	r2, [r5, #20]
		b_stall_cleared = true;
	}
	if (Is_udd_endpoint_stall_requested(ep_index)) {
   81fa0:	0082      	lsls	r2, r0, #2
   81fa2:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
   81fa6:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
   81faa:	f410 2f00 	tst.w	r0, #524288	; 0x80000
   81fae:	d015      	beq.n	81fdc <udd_ep_clear_halt+0x74>
		if (Is_udd_stall(ep_index)) {
   81fb0:	4819      	ldr	r0, [pc, #100]	; (82018 <udd_ep_clear_halt+0xb0>)
   81fb2:	5810      	ldr	r0, [r2, r0]
   81fb4:	f010 0f40 	tst.w	r0, #64	; 0x40
   81fb8:	d006      	beq.n	81fc8 <udd_ep_clear_halt+0x60>
			udd_ack_stall(ep_index);
   81fba:	2540      	movs	r5, #64	; 0x40
   81fbc:	4817      	ldr	r0, [pc, #92]	; (8201c <udd_ep_clear_halt+0xb4>)
   81fbe:	5015      	str	r5, [r2, r0]
			// A packet has been stalled
			// then reset datatoggle
			udd_reset_data_toggle(ep_index);
   81fc0:	f44f 2580 	mov.w	r5, #262144	; 0x40000
   81fc4:	3090      	adds	r0, #144	; 0x90
   81fc6:	5015      	str	r5, [r2, r0]
		}
		// Disable stall
		udd_disable_stall_handshake(ep_index);
   81fc8:	f44f 2500 	mov.w	r5, #524288	; 0x80000
   81fcc:	4811      	ldr	r0, [pc, #68]	; (82014 <udd_ep_clear_halt+0xac>)
   81fce:	5015      	str	r5, [r2, r0]
		udd_enable_endpoint_bank_autoswitch(ep_index);
   81fd0:	f5a0 7090 	sub.w	r0, r0, #288	; 0x120
   81fd4:	5815      	ldr	r5, [r2, r0]
   81fd6:	f445 7500 	orr.w	r5, r5, #512	; 0x200
   81fda:	5015      	str	r5, [r2, r0]
		b_stall_cleared = true;
	}
	if (b_stall_cleared) {
		// If a job is register on clear halt action
		// then execute callback
		if (ptr_job->busy == true) {
   81fdc:	7d1a      	ldrb	r2, [r3, #20]
   81fde:	f012 0f01 	tst.w	r2, #1
   81fe2:	d009      	beq.n	81ff8 <udd_ep_clear_halt+0x90>
			ptr_job->busy = false;
   81fe4:	7d1a      	ldrb	r2, [r3, #20]
   81fe6:	f36f 0200 	bfc	r2, #0, #1
   81fea:	751a      	strb	r2, [r3, #20]
			ptr_job->call_nohalt();
   81fec:	590b      	ldr	r3, [r1, r4]
   81fee:	4798      	blx	r3
		}
	}
	return true;
   81ff0:	2001      	movs	r0, #1
   81ff2:	bd38      	pop	{r3, r4, r5, pc}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	bool b_stall_cleared = false;

	if (USB_DEVICE_MAX_EP < ep_index)
		return false;
   81ff4:	2000      	movs	r0, #0
   81ff6:	bd38      	pop	{r3, r4, r5, pc}
		if (ptr_job->busy == true) {
			ptr_job->busy = false;
			ptr_job->call_nohalt();
		}
	}
	return true;
   81ff8:	2001      	movs	r0, #1
   81ffa:	bd38      	pop	{r3, r4, r5, pc}
		ptr_job->stall_requested = false;
		udd_disable_bank_interrupt(ep_index);
		udd_disable_endpoint_interrupt(ep_index);
		b_stall_cleared = true;
	}
	if (Is_udd_endpoint_stall_requested(ep_index)) {
   81ffc:	0082      	lsls	r2, r0, #2
   81ffe:	4d08      	ldr	r5, [pc, #32]	; (82020 <udd_ep_clear_halt+0xb8>)
   82000:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
   82004:	f410 2f00 	tst.w	r0, #524288	; 0x80000
   82008:	d1d2      	bne.n	81fb0 <udd_ep_clear_halt+0x48>
		if (ptr_job->busy == true) {
			ptr_job->busy = false;
			ptr_job->call_nohalt();
		}
	}
	return true;
   8200a:	2001      	movs	r0, #1
}
   8200c:	bd38      	pop	{r3, r4, r5, pc}
   8200e:	bf00      	nop
   82010:	20070c38 	.word	0x20070c38
   82014:	400ac220 	.word	0x400ac220
   82018:	400ac130 	.word	0x400ac130
   8201c:	400ac160 	.word	0x400ac160
   82020:	400ac1c0 	.word	0x400ac1c0

00082024 <udd_ep_run>:


bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket,
		uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   82024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	bool b_dir_in = Is_udd_endpoint_in(ep & USB_EP_ADDR_MASK);
#endif
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	ep &= USB_EP_ADDR_MASK;
   82028:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep) {
   8202c:	2803      	cmp	r0, #3
   8202e:	d85a      	bhi.n	820e6 <udd_ep_run+0xc2>
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
   82030:	4c34      	ldr	r4, [pc, #208]	; (82104 <udd_ep_run+0xe0>)
   82032:	69e4      	ldr	r4, [r4, #28]
   82034:	2501      	movs	r5, #1
   82036:	4085      	lsls	r5, r0
   82038:	4225      	tst	r5, r4
   8203a:	d057      	beq.n	820ec <udd_ep_run+0xc8>
			|| Is_udd_endpoint_stall_requested(ep)
   8203c:	4c32      	ldr	r4, [pc, #200]	; (82108 <udd_ep_run+0xe4>)
   8203e:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
   82042:	f414 2f00 	tst.w	r4, #524288	; 0x80000
   82046:	d154      	bne.n	820f2 <udd_ep_run+0xce>
	if (USB_DEVICE_MAX_EP < ep) {
		return false;
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];
   82048:	4e30      	ldr	r6, [pc, #192]	; (8210c <udd_ep_run+0xe8>)
   8204a:	1e44      	subs	r4, r0, #1
   8204c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   82050:	00e5      	lsls	r5, r4, #3
   82052:	1974      	adds	r4, r6, r5

	if ((!Is_udd_endpoint_enabled(ep))
			|| Is_udd_endpoint_stall_requested(ep)
			|| ptr_job->stall_requested) {
   82054:	7d27      	ldrb	r7, [r4, #20]
   82056:	f017 0f04 	tst.w	r7, #4
   8205a:	d14d      	bne.n	820f8 <udd_ep_run+0xd4>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8205c:	f3ef 8710 	mrs	r7, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
   82060:	f1d7 0801 	rsbs	r8, r7, #1
   82064:	bf38      	it	cc
   82066:	f04f 0800 	movcc.w	r8, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   8206a:	b672      	cpsid	i
   8206c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   82070:	f04f 0c00 	mov.w	ip, #0
   82074:	4f26      	ldr	r7, [pc, #152]	; (82110 <udd_ep_run+0xec>)
   82076:	f887 c000 	strb.w	ip, [r7]
		return false; // Endpoint is halted
	}

	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
   8207a:	7d27      	ldrb	r7, [r4, #20]
   8207c:	f017 0f01 	tst.w	r7, #1
   82080:	d00b      	beq.n	8209a <udd_ep_run+0x76>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   82082:	f1b8 0f00 	cmp.w	r8, #0
   82086:	d03a      	beq.n	820fe <udd_ep_run+0xda>
		cpu_irq_enable();
   82088:	2201      	movs	r2, #1
   8208a:	4b21      	ldr	r3, [pc, #132]	; (82110 <udd_ep_run+0xec>)
   8208c:	701a      	strb	r2, [r3, #0]
   8208e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   82092:	b662      	cpsie	i
		cpu_irq_restore(flags);
		return false; // Job already on going
   82094:	4660      	mov	r0, ip
   82096:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}
	ptr_job->busy = true;
   8209a:	7d27      	ldrb	r7, [r4, #20]
   8209c:	f047 0701 	orr.w	r7, r7, #1
   820a0:	7527      	strb	r7, [r4, #20]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   820a2:	f1b8 0f00 	cmp.w	r8, #0
   820a6:	d007      	beq.n	820b8 <udd_ep_run+0x94>
		cpu_irq_enable();
   820a8:	f04f 0e01 	mov.w	lr, #1
   820ac:	4f18      	ldr	r7, [pc, #96]	; (82110 <udd_ep_run+0xec>)
   820ae:	f887 e000 	strb.w	lr, [r7]
   820b2:	f3bf 8f5f 	dmb	sy
   820b6:	b662      	cpsie	i
	cpu_irq_restore(flags);

	// No job running. Let's setup a new one.
	ptr_job->buf = buf;
   820b8:	6062      	str	r2, [r4, #4]
	ptr_job->buf_size = buf_size;
   820ba:	60a3      	str	r3, [r4, #8]
	ptr_job->buf_cnt = 0;
   820bc:	2200      	movs	r2, #0
   820be:	60e2      	str	r2, [r4, #12]
	ptr_job->buf_load = 0;
   820c0:	6122      	str	r2, [r4, #16]
	ptr_job->call_trans = callback;
   820c2:	9a06      	ldr	r2, [sp, #24]
   820c4:	5172      	str	r2, [r6, r5]
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
   820c6:	b921      	cbnz	r1, 820d2 <udd_ep_run+0xae>
   820c8:	f1d3 0301 	rsbs	r3, r3, #1
   820cc:	bf38      	it	cc
   820ce:	2300      	movcc	r3, #0
   820d0:	e000      	b.n	820d4 <udd_ep_run+0xb0>
   820d2:	2301      	movs	r3, #1
   820d4:	7d22      	ldrb	r2, [r4, #20]
   820d6:	f363 0241 	bfi	r2, r3, #1, #1
   820da:	7522      	strb	r2, [r4, #20]
#endif // UDD_EP_FIFO_SUPPORTED

#ifdef UDD_EP_DMA_SUPPORTED
	// Request first DMA transfer
	dbg_print("(exDMA%x) ", ep);
	udd_ep_trans_done(ep);
   820dc:	4b0d      	ldr	r3, [pc, #52]	; (82114 <udd_ep_run+0xf0>)
   820de:	4798      	blx	r3
	return true;
   820e0:	2001      	movs	r0, #1
   820e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	ep &= USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep) {
		return false;
   820e6:	2000      	movs	r0, #0
   820e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
			|| Is_udd_endpoint_stall_requested(ep)
			|| ptr_job->stall_requested) {
		return false; // Endpoint is halted
   820ec:	2000      	movs	r0, #0
   820ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   820f2:	2000      	movs	r0, #0
   820f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   820f8:	2000      	movs	r0, #0
   820fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
		cpu_irq_restore(flags);
		return false; // Job already on going
   820fe:	2000      	movs	r0, #0
	// Request first DMA transfer
	dbg_print("(exDMA%x) ", ep);
	udd_ep_trans_done(ep);
	return true;
#endif
}
   82100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82104:	400ac000 	.word	0x400ac000
   82108:	400ac1c0 	.word	0x400ac1c0
   8210c:	20070c38 	.word	0x20070c38
   82110:	200701d8 	.word	0x200701d8
   82114:	00081519 	.word	0x00081519

00082118 <udd_ep_alloc>:


#if (0 != USB_DEVICE_MAX_EP)
bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes,
		uint16_t MaxEndpointSize)
{
   82118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8211c:	b083      	sub	sp, #12
	bool b_dir_in;
	uint16_t ep_allocated;
	uint8_t nb_bank, bank, i;

	b_dir_in = ep & USB_EP_DIR_IN;
	ep = ep & USB_EP_ADDR_MASK;
   8211e:	f000 040f 	and.w	r4, r0, #15

	if (ep > USB_DEVICE_MAX_EP) {
   82122:	2c03      	cmp	r4, #3
   82124:	f200 80c7 	bhi.w	822b6 <udd_ep_alloc+0x19e>
		return false;
	}
	if (Is_udd_endpoint_enabled(ep)) {
   82128:	4b6c      	ldr	r3, [pc, #432]	; (822dc <udd_ep_alloc+0x1c4>)
   8212a:	69db      	ldr	r3, [r3, #28]
   8212c:	4626      	mov	r6, r4
   8212e:	2501      	movs	r5, #1
   82130:	40a5      	lsls	r5, r4
   82132:	421d      	tst	r5, r3
   82134:	f040 80c1 	bne.w	822ba <udd_ep_alloc+0x1a2>
		return false;
	}
	dbg_print("alloc(%x, %d) ", ep, MaxEndpointSize);

	// Bank choise
	switch (bmAttributes & USB_EP_TYPE_MASK) {
   82138:	f011 0303 	ands.w	r3, r1, #3
   8213c:	f000 80bf 	beq.w	822be <udd_ep_alloc+0x1a6>
   82140:	2b02      	cmp	r3, #2
   82142:	d902      	bls.n	8214a <udd_ep_alloc+0x32>
   82144:	2b03      	cmp	r3, #3
   82146:	d002      	beq.n	8214e <udd_ep_alloc+0x36>
   82148:	e0b9      	b.n	822be <udd_ep_alloc+0x1a6>
	case 1:
		bank = UOTGHS_DEVEPTCFG_EPBK_1_BANK >>
				UOTGHS_DEVEPTCFG_EPBK_Pos;
		break;
	case 2:
		bank = UOTGHS_DEVEPTCFG_EPBK_2_BANK >>
   8214a:	2701      	movs	r7, #1
   8214c:	e000      	b.n	82150 <udd_ep_alloc+0x38>
		Assert(false);
		return false;
	}
	switch (nb_bank) {
	case 1:
		bank = UOTGHS_DEVEPTCFG_EPBK_1_BANK >>
   8214e:	2700      	movs	r7, #0
	Assert((MaxEndpointSize == 1023)
		|| !(MaxEndpointSize & (MaxEndpointSize - 1)));
	Assert(MaxEndpointSize >= 8);

	// Set configuration of new endpoint
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   82150:	ea4f 0c84 	mov.w	ip, r4, lsl #2
   82154:	4d62      	ldr	r5, [pc, #392]	; (822e0 <udd_ep_alloc+0x1c8>)
   82156:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   8215a:	f423 53cb 	bic.w	r3, r3, #6496	; 0x1960
   8215e:	f023 031c 	bic.w	r3, r3, #28
   82162:	02c9      	lsls	r1, r1, #11
   82164:	f401 51c0 	and.w	r1, r1, #6144	; 0x1800
   82168:	f000 0080 	and.w	r0, r0, #128	; 0x80
   8216c:	2800      	cmp	r0, #0
   8216e:	bf0c      	ite	eq
   82170:	2000      	moveq	r0, #0
   82172:	f44f 7080 	movne.w	r0, #256	; 0x100
   82176:	f5a2 6880 	sub.w	r8, r2, #1024	; 0x400
   8217a:	fa1f f888 	uxth.w	r8, r8
   8217e:	f5b8 4f7c 	cmp.w	r8, #64512	; 0xfc00
   82182:	d304      	bcc.n	8218e <udd_ep_alloc+0x76>
   82184:	2a08      	cmp	r2, #8
   82186:	d905      	bls.n	82194 <udd_ep_alloc+0x7c>
   82188:	0052      	lsls	r2, r2, #1
   8218a:	3a01      	subs	r2, #1
   8218c:	e003      	b.n	82196 <udd_ep_alloc+0x7e>
   8218e:	f240 72ff 	movw	r2, #2047	; 0x7ff
   82192:	e000      	b.n	82196 <udd_ep_alloc+0x7e>
   82194:	220f      	movs	r2, #15
   82196:	fab2 f282 	clz	r2, r2
   8219a:	ea41 0787 	orr.w	r7, r1, r7, lsl #2
   8219e:	4307      	orrs	r7, r0
   821a0:	f1c2 021c 	rsb	r2, r2, #28
   821a4:	ea47 1202 	orr.w	r2, r7, r2, lsl #4
   821a8:	f422 62d0 	bic.w	r2, r2, #1664	; 0x680
   821ac:	f022 0203 	bic.w	r2, r2, #3
   821b0:	04d2      	lsls	r2, r2, #19
   821b2:	0cd2      	lsrs	r2, r2, #19
   821b4:	4313      	orrs	r3, r2
   821b6:	f84c 3005 	str.w	r3, [ip, r5]
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;
   821ba:	2701      	movs	r7, #1
   821bc:	fa07 f606 	lsl.w	r6, r7, r6
   821c0:	b2b7      	uxth	r7, r6

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
   821c2:	2c02      	cmp	r4, #2
   821c4:	f200 8081 	bhi.w	822ca <udd_ep_alloc+0x1b2>
   821c8:	4a46      	ldr	r2, [pc, #280]	; (822e4 <udd_ep_alloc+0x1cc>)
   821ca:	2303      	movs	r3, #3
		if (Is_udd_endpoint_enabled(i)) {
   821cc:	4843      	ldr	r0, [pc, #268]	; (822dc <udd_ep_alloc+0x1c4>)
   821ce:	2601      	movs	r6, #1
   821d0:	69c5      	ldr	r5, [r0, #28]
   821d2:	fa06 f103 	lsl.w	r1, r6, r3
   821d6:	4229      	tst	r1, r5
   821d8:	d009      	beq.n	821ee <udd_ep_alloc+0xd6>
			ep_allocated |= 1 << i;
   821da:	430f      	orrs	r7, r1
   821dc:	b2bf      	uxth	r7, r7
			udd_disable_endpoint(i);
   821de:	69c5      	ldr	r5, [r0, #28]
   821e0:	ea25 0101 	bic.w	r1, r5, r1
   821e4:	61c1      	str	r1, [r0, #28]
			udd_unallocate_memory(i);
   821e6:	6811      	ldr	r1, [r2, #0]
   821e8:	f021 0102 	bic.w	r1, r1, #2
   821ec:	6011      	str	r1, [r2, #0]
   821ee:	3b01      	subs	r3, #1
   821f0:	3a04      	subs	r2, #4
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
   821f2:	b2d9      	uxtb	r1, r3
   821f4:	42a1      	cmp	r1, r4
   821f6:	d8eb      	bhi.n	821d0 <udd_ep_alloc+0xb8>
   821f8:	e067      	b.n	822ca <udd_ep_alloc+0x1b2>
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
		if (ep_allocated & (1 << i)) {
   821fa:	fa47 f304 	asr.w	r3, r7, r4
   821fe:	f013 0f01 	tst.w	r3, #1
   82202:	d052      	beq.n	822aa <udd_ep_alloc+0x192>
			udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
   82204:	1e63      	subs	r3, r4, #1
   82206:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
   8220a:	eb08 05cc 	add.w	r5, r8, ip, lsl #3
			bool b_restart = ptr_job->busy;
   8220e:	7d2b      	ldrb	r3, [r5, #20]
   82210:	f003 0201 	and.w	r2, r3, #1
			// Restart running job because
			// memory window slides up and its data is lost
			ptr_job->busy = false;
   82214:	f36f 0300 	bfc	r3, #0, #1
   82218:	752b      	strb	r3, [r5, #20]
			// Re-allocate memory
			udd_allocate_memory(i);
   8221a:	00a1      	lsls	r1, r4, #2
   8221c:	eb01 0a06 	add.w	sl, r1, r6
   82220:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
   82224:	f043 0302 	orr.w	r3, r3, #2
   82228:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
			udd_enable_endpoint(i);
   8222c:	4b2b      	ldr	r3, [pc, #172]	; (822dc <udd_ep_alloc+0x1c4>)
   8222e:	69d8      	ldr	r0, [r3, #28]
   82230:	f04f 0b01 	mov.w	fp, #1
   82234:	fa0b fb04 	lsl.w	fp, fp, r4
   82238:	ea4b 0000 	orr.w	r0, fp, r0
   8223c:	61d8      	str	r0, [r3, #28]
			if (!Is_udd_endpoint_configured(i)) {
   8223e:	f859 3024 	ldr.w	r3, [r9, r4, lsl #2]
   82242:	f413 2f80 	tst.w	r3, #262144	; 0x40000
   82246:	d10f      	bne.n	82268 <udd_ep_alloc+0x150>
				dbg_print("ErrRealloc%d ", i);
				if (NULL == ptr_job->call_trans) {
   82248:	682b      	ldr	r3, [r5, #0]
   8224a:	2b00      	cmp	r3, #0
   8224c:	d039      	beq.n	822c2 <udd_ep_alloc+0x1aa>
					return false;
				}
				if (Is_udd_endpoint_in(i)) {
   8224e:	f8da 2000 	ldr.w	r2, [sl]
   82252:	f412 7f80 	tst.w	r2, #256	; 0x100
					i |= USB_EP_DIR_IN;
   82256:	bf18      	it	ne
   82258:	f044 0480 	orrne.w	r4, r4, #128	; 0x80
				}
				ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
   8225c:	2001      	movs	r0, #1
   8225e:	68e9      	ldr	r1, [r5, #12]
   82260:	4622      	mov	r2, r4
   82262:	4798      	blx	r3
						ptr_job->buf_cnt, i);
				return false;
   82264:	2000      	movs	r0, #0
   82266:	e036      	b.n	822d6 <udd_ep_alloc+0x1be>
			}
			udd_enable_endpoint_bank_autoswitch(i);
   82268:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
   8226c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   82270:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
			if (b_restart) {
   82274:	b1ca      	cbz	r2, 822aa <udd_ep_alloc+0x192>
				if (!Is_udd_endpoint_dma_supported(i)
					&& !Is_udd_endpoint_in(i)) {
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
   82276:	68ea      	ldr	r2, [r5, #12]
   82278:	692b      	ldr	r3, [r5, #16]
   8227a:	1ad3      	subs	r3, r2, r3
   8227c:	60eb      	str	r3, [r5, #12]
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   8227e:	598a      	ldr	r2, [r1, r6]
   82280:	f412 7f80 	tst.w	r2, #256	; 0x100
   82284:	bf14      	ite	ne
   82286:	f044 0080 	orrne.w	r0, r4, #128	; 0x80
   8228a:	4620      	moveq	r0, r4
							(i | USB_EP_DIR_IN) : i,
						ptr_job->b_shortpacket,
   8228c:	7d29      	ldrb	r1, [r5, #20]
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   8228e:	f8d5 e004 	ldr.w	lr, [r5, #4]
   82292:	68ad      	ldr	r5, [r5, #8]
   82294:	f858 203c 	ldr.w	r2, [r8, ip, lsl #3]
   82298:	9200      	str	r2, [sp, #0]
   8229a:	f3c1 0140 	ubfx	r1, r1, #1, #1
   8229e:	eb0e 0203 	add.w	r2, lr, r3
   822a2:	1aeb      	subs	r3, r5, r3
   822a4:	4d10      	ldr	r5, [pc, #64]	; (822e8 <udd_ep_alloc+0x1d0>)
   822a6:	47a8      	blx	r5
						ptr_job->b_shortpacket,
						&ptr_job->buf[ptr_job->buf_cnt],
						ptr_job->buf_size
							- ptr_job->buf_cnt,
						ptr_job->call_trans);
				if (!b_restart) {
   822a8:	b168      	cbz	r0, 822c6 <udd_ep_alloc+0x1ae>
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   822aa:	3401      	adds	r4, #1
   822ac:	b2e4      	uxtb	r4, r4
   822ae:	2c04      	cmp	r4, #4
   822b0:	d1a3      	bne.n	821fa <udd_ep_alloc+0xe2>
					return false;
				}
			}
		}
	}
	return true;
   822b2:	2001      	movs	r0, #1
   822b4:	e00f      	b.n	822d6 <udd_ep_alloc+0x1be>

	b_dir_in = ep & USB_EP_DIR_IN;
	ep = ep & USB_EP_ADDR_MASK;

	if (ep > USB_DEVICE_MAX_EP) {
		return false;
   822b6:	2000      	movs	r0, #0
   822b8:	e00d      	b.n	822d6 <udd_ep_alloc+0x1be>
	}
	if (Is_udd_endpoint_enabled(ep)) {
		return false;
   822ba:	2000      	movs	r0, #0
   822bc:	e00b      	b.n	822d6 <udd_ep_alloc+0x1be>
	case USB_EP_TYPE_BULK:
		nb_bank = UDD_BULK_NB_BANK(ep);
		break;
	default:
		Assert(false);
		return false;
   822be:	2000      	movs	r0, #0
   822c0:	e009      	b.n	822d6 <udd_ep_alloc+0x1be>
			udd_allocate_memory(i);
			udd_enable_endpoint(i);
			if (!Is_udd_endpoint_configured(i)) {
				dbg_print("ErrRealloc%d ", i);
				if (NULL == ptr_job->call_trans) {
					return false;
   822c2:	2000      	movs	r0, #0
   822c4:	e007      	b.n	822d6 <udd_ep_alloc+0x1be>
						ptr_job->buf_size
							- ptr_job->buf_cnt,
						ptr_job->call_trans);
				if (!b_restart) {
					dbg_print("ErrReRun%d ", i);
					return false;
   822c6:	2000      	movs	r0, #0
   822c8:	e005      	b.n	822d6 <udd_ep_alloc+0x1be>
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
		if (ep_allocated & (1 << i)) {
			udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
   822ca:	f8df 8020 	ldr.w	r8, [pc, #32]	; 822ec <udd_ep_alloc+0x1d4>
			bool b_restart = ptr_job->busy;
			// Restart running job because
			// memory window slides up and its data is lost
			ptr_job->busy = false;
			// Re-allocate memory
			udd_allocate_memory(i);
   822ce:	4e04      	ldr	r6, [pc, #16]	; (822e0 <udd_ep_alloc+0x1c8>)
			udd_enable_endpoint(i);
			if (!Is_udd_endpoint_configured(i)) {
   822d0:	f8df 901c 	ldr.w	r9, [pc, #28]	; 822f0 <udd_ep_alloc+0x1d8>
   822d4:	e791      	b.n	821fa <udd_ep_alloc+0xe2>
				}
			}
		}
	}
	return true;
}
   822d6:	b003      	add	sp, #12
   822d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   822dc:	400ac000 	.word	0x400ac000
   822e0:	400ac100 	.word	0x400ac100
   822e4:	400ac10c 	.word	0x400ac10c
   822e8:	00082025 	.word	0x00082025
   822ec:	20070c38 	.word	0x20070c38
   822f0:	400ac130 	.word	0x400ac130

000822f4 <udd_ep_abort>:
#endif
}


void udd_ep_abort(udd_ep_id_t ep)
{
   822f4:	b570      	push	{r4, r5, r6, lr}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   822f6:	f000 020f 	and.w	r2, r0, #15
		udd_disable_in_send_interrupt(ep_index);
	} else
#endif
	{
		// Stop DMA transfer
		udd_disable_endpoint_dma_interrupt(ep_index);
   822fa:	1e56      	subs	r6, r2, #1
   822fc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   82300:	40b1      	lsls	r1, r6
   82302:	4b15      	ldr	r3, [pc, #84]	; (82358 <udd_ep_abort+0x64>)
   82304:	6159      	str	r1, [r3, #20]
		udd_endpoint_dma_set_control(ep_index, 0);
   82306:	4915      	ldr	r1, [pc, #84]	; (8235c <udd_ep_abort+0x68>)
   82308:	eb01 1102 	add.w	r1, r1, r2, lsl #4
   8230c:	2400      	movs	r4, #0
   8230e:	608c      	str	r4, [r1, #8]
	}
	udd_disable_endpoint_interrupt(ep_index);
   82310:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   82314:	4091      	lsls	r1, r2
   82316:	6159      	str	r1, [r3, #20]
	// Kill IN banks
	if (ep & USB_EP_DIR_IN) {
   82318:	f010 0f80 	tst.w	r0, #128	; 0x80
   8231c:	d012      	beq.n	82344 <udd_ep_abort+0x50>
		while(udd_nb_busy_bank(ep_index)) {
   8231e:	0093      	lsls	r3, r2, #2
   82320:	480f      	ldr	r0, [pc, #60]	; (82360 <udd_ep_abort+0x6c>)
   82322:	4418      	add	r0, r3
			udd_kill_last_in_bank(ep_index);
   82324:	4c0f      	ldr	r4, [pc, #60]	; (82364 <udd_ep_abort+0x70>)
   82326:	441c      	add	r4, r3
   82328:	f44f 5500 	mov.w	r5, #8192	; 0x2000
			while(Is_udd_kill_last(ep_index));
   8232c:	490e      	ldr	r1, [pc, #56]	; (82368 <udd_ep_abort+0x74>)
   8232e:	4419      	add	r1, r3
   82330:	e004      	b.n	8233c <udd_ep_abort+0x48>
	}
	udd_disable_endpoint_interrupt(ep_index);
	// Kill IN banks
	if (ep & USB_EP_DIR_IN) {
		while(udd_nb_busy_bank(ep_index)) {
			udd_kill_last_in_bank(ep_index);
   82332:	6025      	str	r5, [r4, #0]
			while(Is_udd_kill_last(ep_index));
   82334:	680b      	ldr	r3, [r1, #0]
   82336:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   8233a:	d1fb      	bne.n	82334 <udd_ep_abort+0x40>
		udd_endpoint_dma_set_control(ep_index, 0);
	}
	udd_disable_endpoint_interrupt(ep_index);
	// Kill IN banks
	if (ep & USB_EP_DIR_IN) {
		while(udd_nb_busy_bank(ep_index)) {
   8233c:	6803      	ldr	r3, [r0, #0]
   8233e:	f413 5f40 	tst.w	r3, #12288	; 0x3000
   82342:	d1f6      	bne.n	82332 <udd_ep_abort+0x3e>
static void udd_ep_abort_job(udd_ep_id_t ep)
{
	ep &= USB_EP_ADDR_MASK;

	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
   82344:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   82348:	4808      	ldr	r0, [pc, #32]	; (8236c <udd_ep_abort+0x78>)
   8234a:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
   8234e:	2101      	movs	r1, #1
   82350:	4b07      	ldr	r3, [pc, #28]	; (82370 <udd_ep_abort+0x7c>)
   82352:	4798      	blx	r3
   82354:	bd70      	pop	{r4, r5, r6, pc}
   82356:	bf00      	nop
   82358:	400ac000 	.word	0x400ac000
   8235c:	400ac300 	.word	0x400ac300
   82360:	400ac130 	.word	0x400ac130
   82364:	400ac1f0 	.word	0x400ac1f0
   82368:	400ac1c0 	.word	0x400ac1c0
   8236c:	20070c38 	.word	0x20070c38
   82370:	000814e5 	.word	0x000814e5

00082374 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   82374:	6943      	ldr	r3, [r0, #20]
   82376:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   8237a:	bf1d      	ittte	ne
   8237c:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   82380:	61c1      	strne	r1, [r0, #28]
	return 0;
   82382:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
   82384:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
   82386:	4770      	bx	lr

00082388 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   82388:	6943      	ldr	r3, [r0, #20]
   8238a:	f013 0f01 	tst.w	r3, #1
   8238e:	d005      	beq.n	8239c <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   82390:	6983      	ldr	r3, [r0, #24]
   82392:	f3c3 0308 	ubfx	r3, r3, #0, #9
   82396:	600b      	str	r3, [r1, #0]

	return 0;
   82398:	2000      	movs	r0, #0
   8239a:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   8239c:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   8239e:	4770      	bx	lr

000823a0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   823a0:	e7fe      	b.n	823a0 <Dummy_Handler>
   823a2:	bf00      	nop

000823a4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   823a4:	b510      	push	{r4, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   823a6:	4b1e      	ldr	r3, [pc, #120]	; (82420 <Reset_Handler+0x7c>)
   823a8:	4a1e      	ldr	r2, [pc, #120]	; (82424 <Reset_Handler+0x80>)
   823aa:	429a      	cmp	r2, r3
   823ac:	d003      	beq.n	823b6 <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   823ae:	4b1e      	ldr	r3, [pc, #120]	; (82428 <Reset_Handler+0x84>)
   823b0:	4a1b      	ldr	r2, [pc, #108]	; (82420 <Reset_Handler+0x7c>)
   823b2:	429a      	cmp	r2, r3
   823b4:	d304      	bcc.n	823c0 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   823b6:	4b1d      	ldr	r3, [pc, #116]	; (8242c <Reset_Handler+0x88>)
   823b8:	4a1d      	ldr	r2, [pc, #116]	; (82430 <Reset_Handler+0x8c>)
   823ba:	429a      	cmp	r2, r3
   823bc:	d30f      	bcc.n	823de <Reset_Handler+0x3a>
   823be:	e01a      	b.n	823f6 <Reset_Handler+0x52>
   823c0:	4b1c      	ldr	r3, [pc, #112]	; (82434 <Reset_Handler+0x90>)
   823c2:	4c1d      	ldr	r4, [pc, #116]	; (82438 <Reset_Handler+0x94>)
   823c4:	1ae4      	subs	r4, r4, r3
   823c6:	f024 0403 	bic.w	r4, r4, #3
   823ca:	3404      	adds	r4, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   823cc:	2300      	movs	r3, #0
			*pDest++ = *pSrc++;
   823ce:	4814      	ldr	r0, [pc, #80]	; (82420 <Reset_Handler+0x7c>)
   823d0:	4914      	ldr	r1, [pc, #80]	; (82424 <Reset_Handler+0x80>)
   823d2:	585a      	ldr	r2, [r3, r1]
   823d4:	501a      	str	r2, [r3, r0]
   823d6:	3304      	adds	r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   823d8:	42a3      	cmp	r3, r4
   823da:	d1fa      	bne.n	823d2 <Reset_Handler+0x2e>
   823dc:	e7eb      	b.n	823b6 <Reset_Handler+0x12>
   823de:	4b17      	ldr	r3, [pc, #92]	; (8243c <Reset_Handler+0x98>)
   823e0:	4917      	ldr	r1, [pc, #92]	; (82440 <Reset_Handler+0x9c>)
   823e2:	1ac9      	subs	r1, r1, r3
   823e4:	f021 0103 	bic.w	r1, r1, #3
   823e8:	1d1a      	adds	r2, r3, #4
   823ea:	4411      	add	r1, r2
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   823ec:	2200      	movs	r2, #0
   823ee:	f843 2f04 	str.w	r2, [r3, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   823f2:	428b      	cmp	r3, r1
   823f4:	d1fb      	bne.n	823ee <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   823f6:	4a13      	ldr	r2, [pc, #76]	; (82444 <Reset_Handler+0xa0>)
   823f8:	f022 4360 	bic.w	r3, r2, #3758096384	; 0xe0000000
   823fc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   82400:	4911      	ldr	r1, [pc, #68]	; (82448 <Reset_Handler+0xa4>)
   82402:	608b      	str	r3, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   82404:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
   82408:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
   8240c:	d203      	bcs.n	82416 <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   8240e:	688a      	ldr	r2, [r1, #8]
   82410:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   82414:	608a      	str	r2, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   82416:	4b0d      	ldr	r3, [pc, #52]	; (8244c <Reset_Handler+0xa8>)
   82418:	4798      	blx	r3

	/* Branch to main function */
	main();
   8241a:	4b0d      	ldr	r3, [pc, #52]	; (82450 <Reset_Handler+0xac>)
   8241c:	4798      	blx	r3
   8241e:	e7fe      	b.n	8241e <Reset_Handler+0x7a>
   82420:	20070000 	.word	0x20070000
   82424:	0008636c 	.word	0x0008636c
   82428:	20070a44 	.word	0x20070a44
   8242c:	20070d98 	.word	0x20070d98
   82430:	20070a44 	.word	0x20070a44
   82434:	20070004 	.word	0x20070004
   82438:	20070a47 	.word	0x20070a47
   8243c:	20070a40 	.word	0x20070a40
   82440:	20070d93 	.word	0x20070d93
   82444:	00080000 	.word	0x00080000
   82448:	e000ed00 	.word	0xe000ed00
   8244c:	00083335 	.word	0x00083335
   82450:	000829ed 	.word	0x000829ed

00082454 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   82454:	4b3e      	ldr	r3, [pc, #248]	; (82550 <SystemCoreClockUpdate+0xfc>)
   82456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82458:	f003 0303 	and.w	r3, r3, #3
   8245c:	2b03      	cmp	r3, #3
   8245e:	d85f      	bhi.n	82520 <SystemCoreClockUpdate+0xcc>
   82460:	e8df f003 	tbb	[pc, r3]
   82464:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   82468:	4b3a      	ldr	r3, [pc, #232]	; (82554 <SystemCoreClockUpdate+0x100>)
   8246a:	695b      	ldr	r3, [r3, #20]
   8246c:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   82470:	bf14      	ite	ne
   82472:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   82476:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   8247a:	4b37      	ldr	r3, [pc, #220]	; (82558 <SystemCoreClockUpdate+0x104>)
   8247c:	601a      	str	r2, [r3, #0]
   8247e:	e04f      	b.n	82520 <SystemCoreClockUpdate+0xcc>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   82480:	4b33      	ldr	r3, [pc, #204]	; (82550 <SystemCoreClockUpdate+0xfc>)
   82482:	6a1b      	ldr	r3, [r3, #32]
   82484:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   82488:	d003      	beq.n	82492 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   8248a:	4a34      	ldr	r2, [pc, #208]	; (8255c <SystemCoreClockUpdate+0x108>)
   8248c:	4b32      	ldr	r3, [pc, #200]	; (82558 <SystemCoreClockUpdate+0x104>)
   8248e:	601a      	str	r2, [r3, #0]
   82490:	e046      	b.n	82520 <SystemCoreClockUpdate+0xcc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   82492:	4a33      	ldr	r2, [pc, #204]	; (82560 <SystemCoreClockUpdate+0x10c>)
   82494:	4b30      	ldr	r3, [pc, #192]	; (82558 <SystemCoreClockUpdate+0x104>)
   82496:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   82498:	4b2d      	ldr	r3, [pc, #180]	; (82550 <SystemCoreClockUpdate+0xfc>)
   8249a:	6a1b      	ldr	r3, [r3, #32]
   8249c:	f003 0370 	and.w	r3, r3, #112	; 0x70
   824a0:	2b10      	cmp	r3, #16
   824a2:	d002      	beq.n	824aa <SystemCoreClockUpdate+0x56>
   824a4:	2b20      	cmp	r3, #32
   824a6:	d004      	beq.n	824b2 <SystemCoreClockUpdate+0x5e>
   824a8:	e03a      	b.n	82520 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   824aa:	4a2e      	ldr	r2, [pc, #184]	; (82564 <SystemCoreClockUpdate+0x110>)
   824ac:	4b2a      	ldr	r3, [pc, #168]	; (82558 <SystemCoreClockUpdate+0x104>)
   824ae:	601a      	str	r2, [r3, #0]
				break;
   824b0:	e036      	b.n	82520 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   824b2:	4a2a      	ldr	r2, [pc, #168]	; (8255c <SystemCoreClockUpdate+0x108>)
   824b4:	4b28      	ldr	r3, [pc, #160]	; (82558 <SystemCoreClockUpdate+0x104>)
   824b6:	601a      	str	r2, [r3, #0]
				break;
   824b8:	e032      	b.n	82520 <SystemCoreClockUpdate+0xcc>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   824ba:	4b25      	ldr	r3, [pc, #148]	; (82550 <SystemCoreClockUpdate+0xfc>)
   824bc:	6a1b      	ldr	r3, [r3, #32]
   824be:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   824c2:	d003      	beq.n	824cc <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   824c4:	4a25      	ldr	r2, [pc, #148]	; (8255c <SystemCoreClockUpdate+0x108>)
   824c6:	4b24      	ldr	r3, [pc, #144]	; (82558 <SystemCoreClockUpdate+0x104>)
   824c8:	601a      	str	r2, [r3, #0]
   824ca:	e012      	b.n	824f2 <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   824cc:	4a24      	ldr	r2, [pc, #144]	; (82560 <SystemCoreClockUpdate+0x10c>)
   824ce:	4b22      	ldr	r3, [pc, #136]	; (82558 <SystemCoreClockUpdate+0x104>)
   824d0:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   824d2:	4b1f      	ldr	r3, [pc, #124]	; (82550 <SystemCoreClockUpdate+0xfc>)
   824d4:	6a1b      	ldr	r3, [r3, #32]
   824d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
   824da:	2b10      	cmp	r3, #16
   824dc:	d002      	beq.n	824e4 <SystemCoreClockUpdate+0x90>
   824de:	2b20      	cmp	r3, #32
   824e0:	d004      	beq.n	824ec <SystemCoreClockUpdate+0x98>
   824e2:	e006      	b.n	824f2 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   824e4:	4a1f      	ldr	r2, [pc, #124]	; (82564 <SystemCoreClockUpdate+0x110>)
   824e6:	4b1c      	ldr	r3, [pc, #112]	; (82558 <SystemCoreClockUpdate+0x104>)
   824e8:	601a      	str	r2, [r3, #0]
				break;
   824ea:	e002      	b.n	824f2 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   824ec:	4a1b      	ldr	r2, [pc, #108]	; (8255c <SystemCoreClockUpdate+0x108>)
   824ee:	4b1a      	ldr	r3, [pc, #104]	; (82558 <SystemCoreClockUpdate+0x104>)
   824f0:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   824f2:	4b17      	ldr	r3, [pc, #92]	; (82550 <SystemCoreClockUpdate+0xfc>)
   824f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   824f6:	f003 0303 	and.w	r3, r3, #3
   824fa:	2b02      	cmp	r3, #2
   824fc:	d10d      	bne.n	8251a <SystemCoreClockUpdate+0xc6>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   824fe:	4b14      	ldr	r3, [pc, #80]	; (82550 <SystemCoreClockUpdate+0xfc>)
   82500:	6a98      	ldr	r0, [r3, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   82502:	6a99      	ldr	r1, [r3, #40]	; 0x28
   82504:	4b14      	ldr	r3, [pc, #80]	; (82558 <SystemCoreClockUpdate+0x104>)
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   82506:	f3c0 400a 	ubfx	r0, r0, #16, #11
   8250a:	681a      	ldr	r2, [r3, #0]
   8250c:	fb00 2202 	mla	r2, r0, r2, r2
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   82510:	b2c9      	uxtb	r1, r1
   82512:	fbb2 f2f1 	udiv	r2, r2, r1
   82516:	601a      	str	r2, [r3, #0]
   82518:	e002      	b.n	82520 <SystemCoreClockUpdate+0xcc>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   8251a:	4a13      	ldr	r2, [pc, #76]	; (82568 <SystemCoreClockUpdate+0x114>)
   8251c:	4b0e      	ldr	r3, [pc, #56]	; (82558 <SystemCoreClockUpdate+0x104>)
   8251e:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   82520:	4b0b      	ldr	r3, [pc, #44]	; (82550 <SystemCoreClockUpdate+0xfc>)
   82522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82524:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82528:	2b70      	cmp	r3, #112	; 0x70
   8252a:	d107      	bne.n	8253c <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
   8252c:	4b0a      	ldr	r3, [pc, #40]	; (82558 <SystemCoreClockUpdate+0x104>)
   8252e:	681a      	ldr	r2, [r3, #0]
   82530:	490e      	ldr	r1, [pc, #56]	; (8256c <SystemCoreClockUpdate+0x118>)
   82532:	fba1 0202 	umull	r0, r2, r1, r2
   82536:	0852      	lsrs	r2, r2, #1
   82538:	601a      	str	r2, [r3, #0]
   8253a:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   8253c:	4b04      	ldr	r3, [pc, #16]	; (82550 <SystemCoreClockUpdate+0xfc>)
   8253e:	6b19      	ldr	r1, [r3, #48]	; 0x30
   82540:	4b05      	ldr	r3, [pc, #20]	; (82558 <SystemCoreClockUpdate+0x104>)
   82542:	f3c1 1102 	ubfx	r1, r1, #4, #3
   82546:	681a      	ldr	r2, [r3, #0]
   82548:	40ca      	lsrs	r2, r1
   8254a:	601a      	str	r2, [r3, #0]
   8254c:	4770      	bx	lr
   8254e:	bf00      	nop
   82550:	400e0600 	.word	0x400e0600
   82554:	400e1a10 	.word	0x400e1a10
   82558:	200701dc 	.word	0x200701dc
   8255c:	00b71b00 	.word	0x00b71b00
   82560:	003d0900 	.word	0x003d0900
   82564:	007a1200 	.word	0x007a1200
   82568:	0e4e1c00 	.word	0x0e4e1c00
   8256c:	aaaaaaab 	.word	0xaaaaaaab

00082570 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   82570:	4b09      	ldr	r3, [pc, #36]	; (82598 <_sbrk+0x28>)
   82572:	681b      	ldr	r3, [r3, #0]
   82574:	b913      	cbnz	r3, 8257c <_sbrk+0xc>
		heap = (unsigned char *)&_end;
   82576:	4a09      	ldr	r2, [pc, #36]	; (8259c <_sbrk+0x2c>)
   82578:	4b07      	ldr	r3, [pc, #28]	; (82598 <_sbrk+0x28>)
   8257a:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   8257c:	4b06      	ldr	r3, [pc, #24]	; (82598 <_sbrk+0x28>)
   8257e:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   82580:	181a      	adds	r2, r3, r0
   82582:	4907      	ldr	r1, [pc, #28]	; (825a0 <_sbrk+0x30>)
   82584:	4291      	cmp	r1, r2
   82586:	db04      	blt.n	82592 <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
   82588:	4610      	mov	r0, r2
   8258a:	4a03      	ldr	r2, [pc, #12]	; (82598 <_sbrk+0x28>)
   8258c:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   8258e:	4618      	mov	r0, r3
   82590:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
   82592:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
   82596:	4770      	bx	lr
   82598:	20070c88 	.word	0x20070c88
   8259c:	20072d98 	.word	0x20072d98
   825a0:	20087ffc 	.word	0x20087ffc

000825a4 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   825a4:	f04f 30ff 	mov.w	r0, #4294967295
   825a8:	4770      	bx	lr
   825aa:	bf00      	nop

000825ac <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   825ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   825b0:	604b      	str	r3, [r1, #4]

	return 0;
}
   825b2:	2000      	movs	r0, #0
   825b4:	4770      	bx	lr
   825b6:	bf00      	nop

000825b8 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   825b8:	2001      	movs	r0, #1
   825ba:	4770      	bx	lr

000825bc <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   825bc:	2000      	movs	r0, #0
   825be:	4770      	bx	lr

000825c0 <USART0_Handler>:
#if SAMD || SAMR21 || SAML21
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
   825c0:	b500      	push	{lr}
   825c2:	b083      	sub	sp, #12
	uint8_t temp;
#if SAMD || SAMR21 || SAML21
	usart_serial_read_packet(&host_uart_module, &temp, 1);
#else
	usart_serial_read_packet(USART_HOST, &temp, 1);
   825c4:	4811      	ldr	r0, [pc, #68]	; (8260c <USART0_Handler+0x4c>)
   825c6:	f10d 0107 	add.w	r1, sp, #7
   825ca:	2201      	movs	r2, #1
   825cc:	4b10      	ldr	r3, [pc, #64]	; (82610 <USART0_Handler+0x50>)
   825ce:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   825d0:	b672      	cpsid	i
   825d2:	f3bf 8f5f 	dmb	sy
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
   825d6:	2200      	movs	r2, #0
   825d8:	4b0e      	ldr	r3, [pc, #56]	; (82614 <USART0_Handler+0x54>)
   825da:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
   825dc:	4b0e      	ldr	r3, [pc, #56]	; (82618 <USART0_Handler+0x58>)
   825de:	781b      	ldrb	r3, [r3, #0]
   825e0:	f89d 1007 	ldrb.w	r1, [sp, #7]
   825e4:	4a0d      	ldr	r2, [pc, #52]	; (8261c <USART0_Handler+0x5c>)
   825e6:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
   825e8:	2b9b      	cmp	r3, #155	; 0x9b
   825ea:	d103      	bne.n	825f4 <USART0_Handler+0x34>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
   825ec:	2200      	movs	r2, #0
   825ee:	4b0a      	ldr	r3, [pc, #40]	; (82618 <USART0_Handler+0x58>)
   825f0:	701a      	strb	r2, [r3, #0]
   825f2:	e002      	b.n	825fa <USART0_Handler+0x3a>
	} else {
		serial_rx_buf_tail++;
   825f4:	3301      	adds	r3, #1
   825f6:	4a08      	ldr	r2, [pc, #32]	; (82618 <USART0_Handler+0x58>)
   825f8:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
   825fa:	2201      	movs	r2, #1
   825fc:	4b05      	ldr	r3, [pc, #20]	; (82614 <USART0_Handler+0x54>)
   825fe:	701a      	strb	r2, [r3, #0]
   82600:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   82604:	b662      	cpsie	i
}
   82606:	b003      	add	sp, #12
   82608:	f85d fb04 	ldr.w	pc, [sp], #4
   8260c:	40098000 	.word	0x40098000
   82610:	000801ad 	.word	0x000801ad
   82614:	200701d8 	.word	0x200701d8
   82618:	20070d28 	.word	0x20070d28
   8261c:	20070c8c 	.word	0x20070c8c

00082620 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   82620:	b5f0      	push	{r4, r5, r6, r7, lr}
   82622:	b083      	sub	sp, #12
   82624:	4604      	mov	r4, r0
   82626:	460d      	mov	r5, r1
	uint32_t val = 0;
   82628:	2300      	movs	r3, #0
   8262a:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   8262c:	4b1f      	ldr	r3, [pc, #124]	; (826ac <usart_serial_getchar+0x8c>)
   8262e:	4298      	cmp	r0, r3
   82630:	d107      	bne.n	82642 <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
   82632:	461f      	mov	r7, r3
   82634:	4e1e      	ldr	r6, [pc, #120]	; (826b0 <usart_serial_getchar+0x90>)
   82636:	4638      	mov	r0, r7
   82638:	4629      	mov	r1, r5
   8263a:	47b0      	blx	r6
   8263c:	2800      	cmp	r0, #0
   8263e:	d1fa      	bne.n	82636 <usart_serial_getchar+0x16>
   82640:	e019      	b.n	82676 <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   82642:	4b1c      	ldr	r3, [pc, #112]	; (826b4 <usart_serial_getchar+0x94>)
   82644:	4298      	cmp	r0, r3
   82646:	d109      	bne.n	8265c <usart_serial_getchar+0x3c>
		while (usart_read(p_usart, &val));
   82648:	461f      	mov	r7, r3
   8264a:	4e1b      	ldr	r6, [pc, #108]	; (826b8 <usart_serial_getchar+0x98>)
   8264c:	4638      	mov	r0, r7
   8264e:	a901      	add	r1, sp, #4
   82650:	47b0      	blx	r6
   82652:	2800      	cmp	r0, #0
   82654:	d1fa      	bne.n	8264c <usart_serial_getchar+0x2c>
		*data = (uint8_t)(val & 0xFF);
   82656:	9b01      	ldr	r3, [sp, #4]
   82658:	702b      	strb	r3, [r5, #0]
   8265a:	e019      	b.n	82690 <usart_serial_getchar+0x70>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   8265c:	4b17      	ldr	r3, [pc, #92]	; (826bc <usart_serial_getchar+0x9c>)
   8265e:	4298      	cmp	r0, r3
   82660:	d109      	bne.n	82676 <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
   82662:	461e      	mov	r6, r3
   82664:	4c14      	ldr	r4, [pc, #80]	; (826b8 <usart_serial_getchar+0x98>)
   82666:	4630      	mov	r0, r6
   82668:	a901      	add	r1, sp, #4
   8266a:	47a0      	blx	r4
   8266c:	2800      	cmp	r0, #0
   8266e:	d1fa      	bne.n	82666 <usart_serial_getchar+0x46>
		*data = (uint8_t)(val & 0xFF);
   82670:	9b01      	ldr	r3, [sp, #4]
   82672:	702b      	strb	r3, [r5, #0]
   82674:	e018      	b.n	826a8 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   82676:	4b12      	ldr	r3, [pc, #72]	; (826c0 <usart_serial_getchar+0xa0>)
   82678:	429c      	cmp	r4, r3
   8267a:	d109      	bne.n	82690 <usart_serial_getchar+0x70>
		while (usart_read(p_usart, &val));
   8267c:	461e      	mov	r6, r3
   8267e:	4c0e      	ldr	r4, [pc, #56]	; (826b8 <usart_serial_getchar+0x98>)
   82680:	4630      	mov	r0, r6
   82682:	a901      	add	r1, sp, #4
   82684:	47a0      	blx	r4
   82686:	2800      	cmp	r0, #0
   82688:	d1fa      	bne.n	82680 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
   8268a:	9b01      	ldr	r3, [sp, #4]
   8268c:	702b      	strb	r3, [r5, #0]
   8268e:	e00b      	b.n	826a8 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   82690:	4b0c      	ldr	r3, [pc, #48]	; (826c4 <usart_serial_getchar+0xa4>)
   82692:	429c      	cmp	r4, r3
   82694:	d108      	bne.n	826a8 <usart_serial_getchar+0x88>
		while (usart_read(p_usart, &val));
   82696:	461e      	mov	r6, r3
   82698:	4c07      	ldr	r4, [pc, #28]	; (826b8 <usart_serial_getchar+0x98>)
   8269a:	4630      	mov	r0, r6
   8269c:	a901      	add	r1, sp, #4
   8269e:	47a0      	blx	r4
   826a0:	2800      	cmp	r0, #0
   826a2:	d1fa      	bne.n	8269a <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
   826a4:	9b01      	ldr	r3, [sp, #4]
   826a6:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   826a8:	b003      	add	sp, #12
   826aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   826ac:	400e0800 	.word	0x400e0800
   826b0:	000812b5 	.word	0x000812b5
   826b4:	40098000 	.word	0x40098000
   826b8:	00082389 	.word	0x00082389
   826bc:	4009c000 	.word	0x4009c000
   826c0:	400a0000 	.word	0x400a0000
   826c4:	400a4000 	.word	0x400a4000

000826c8 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   826c8:	b570      	push	{r4, r5, r6, lr}
   826ca:	460c      	mov	r4, r1
#ifdef UART
	if (UART == (Uart*)p_usart) {
   826cc:	4b21      	ldr	r3, [pc, #132]	; (82754 <usart_serial_putchar+0x8c>)
   826ce:	4298      	cmp	r0, r3
   826d0:	d107      	bne.n	826e2 <usart_serial_putchar+0x1a>
		while (uart_write((Uart*)p_usart, c)!=0);
   826d2:	461e      	mov	r6, r3
   826d4:	4d20      	ldr	r5, [pc, #128]	; (82758 <usart_serial_putchar+0x90>)
   826d6:	4630      	mov	r0, r6
   826d8:	4621      	mov	r1, r4
   826da:	47a8      	blx	r5
   826dc:	2800      	cmp	r0, #0
   826de:	d1fa      	bne.n	826d6 <usart_serial_putchar+0xe>
   826e0:	e02b      	b.n	8273a <usart_serial_putchar+0x72>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   826e2:	4b1e      	ldr	r3, [pc, #120]	; (8275c <usart_serial_putchar+0x94>)
   826e4:	4298      	cmp	r0, r3
   826e6:	d107      	bne.n	826f8 <usart_serial_putchar+0x30>
		while (usart_write(p_usart, c)!=0);
   826e8:	461e      	mov	r6, r3
   826ea:	4d1d      	ldr	r5, [pc, #116]	; (82760 <usart_serial_putchar+0x98>)
   826ec:	4630      	mov	r0, r6
   826ee:	4621      	mov	r1, r4
   826f0:	47a8      	blx	r5
   826f2:	2800      	cmp	r0, #0
   826f4:	d1fa      	bne.n	826ec <usart_serial_putchar+0x24>
   826f6:	e022      	b.n	8273e <usart_serial_putchar+0x76>
		return 1;
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   826f8:	4b1a      	ldr	r3, [pc, #104]	; (82764 <usart_serial_putchar+0x9c>)
   826fa:	4298      	cmp	r0, r3
   826fc:	d107      	bne.n	8270e <usart_serial_putchar+0x46>
		while (usart_write(p_usart, c)!=0);
   826fe:	461e      	mov	r6, r3
   82700:	4d17      	ldr	r5, [pc, #92]	; (82760 <usart_serial_putchar+0x98>)
   82702:	4630      	mov	r0, r6
   82704:	4621      	mov	r1, r4
   82706:	47a8      	blx	r5
   82708:	2800      	cmp	r0, #0
   8270a:	d1fa      	bne.n	82702 <usart_serial_putchar+0x3a>
   8270c:	e019      	b.n	82742 <usart_serial_putchar+0x7a>
		return 1;
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   8270e:	4b16      	ldr	r3, [pc, #88]	; (82768 <usart_serial_putchar+0xa0>)
   82710:	4298      	cmp	r0, r3
   82712:	d107      	bne.n	82724 <usart_serial_putchar+0x5c>
		while (usart_write(p_usart, c)!=0);
   82714:	461e      	mov	r6, r3
   82716:	4d12      	ldr	r5, [pc, #72]	; (82760 <usart_serial_putchar+0x98>)
   82718:	4630      	mov	r0, r6
   8271a:	4621      	mov	r1, r4
   8271c:	47a8      	blx	r5
   8271e:	2800      	cmp	r0, #0
   82720:	d1fa      	bne.n	82718 <usart_serial_putchar+0x50>
   82722:	e010      	b.n	82746 <usart_serial_putchar+0x7e>
		return 1;
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   82724:	4b11      	ldr	r3, [pc, #68]	; (8276c <usart_serial_putchar+0xa4>)
   82726:	4298      	cmp	r0, r3
   82728:	d10f      	bne.n	8274a <usart_serial_putchar+0x82>
		while (usart_write(p_usart, c)!=0);
   8272a:	461e      	mov	r6, r3
   8272c:	4d0c      	ldr	r5, [pc, #48]	; (82760 <usart_serial_putchar+0x98>)
   8272e:	4630      	mov	r0, r6
   82730:	4621      	mov	r1, r4
   82732:	47a8      	blx	r5
   82734:	2800      	cmp	r0, #0
   82736:	d1fa      	bne.n	8272e <usart_serial_putchar+0x66>
   82738:	e009      	b.n	8274e <usart_serial_putchar+0x86>
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
   8273a:	2001      	movs	r0, #1
   8273c:	bd70      	pop	{r4, r5, r6, pc}
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   8273e:	2001      	movs	r0, #1
   82740:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   82742:	2001      	movs	r0, #1
   82744:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   82746:	2001      	movs	r0, #1
   82748:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   8274a:	2000      	movs	r0, #0
   8274c:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   8274e:	2001      	movs	r0, #1
	}
# endif
#endif /* ifdef USART */

	return 0;
}
   82750:	bd70      	pop	{r4, r5, r6, pc}
   82752:	bf00      	nop
   82754:	400e0800 	.word	0x400e0800
   82758:	000812a5 	.word	0x000812a5
   8275c:	40098000 	.word	0x40098000
   82760:	00082375 	.word	0x00082375
   82764:	4009c000 	.word	0x4009c000
   82768:	400a0000 	.word	0x400a0000
   8276c:	400a4000 	.word	0x400a4000

00082770 <configureConsole>:
uint16_t tick = 0;

void servoControll(unsigned long dist);

void configureConsole()
{
   82770:	b530      	push	{r4, r5, lr}
   82772:	b085      	sub	sp, #20
   82774:	2008      	movs	r0, #8
   82776:	4d12      	ldr	r5, [pc, #72]	; (827c0 <configureConsole+0x50>)
   82778:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   8277a:	4c12      	ldr	r4, [pc, #72]	; (827c4 <configureConsole+0x54>)
   8277c:	4b12      	ldr	r3, [pc, #72]	; (827c8 <configureConsole+0x58>)
   8277e:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   82780:	4a12      	ldr	r2, [pc, #72]	; (827cc <configureConsole+0x5c>)
   82782:	4b13      	ldr	r3, [pc, #76]	; (827d0 <configureConsole+0x60>)
   82784:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   82786:	4a13      	ldr	r2, [pc, #76]	; (827d4 <configureConsole+0x64>)
   82788:	4b13      	ldr	r3, [pc, #76]	; (827d8 <configureConsole+0x68>)
   8278a:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   8278c:	4b13      	ldr	r3, [pc, #76]	; (827dc <configureConsole+0x6c>)
   8278e:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   82790:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   82794:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   82796:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8279a:	9303      	str	r3, [sp, #12]
   8279c:	2008      	movs	r0, #8
   8279e:	47a8      	blx	r5
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   827a0:	4620      	mov	r0, r4
   827a2:	a901      	add	r1, sp, #4
   827a4:	4b0e      	ldr	r3, [pc, #56]	; (827e0 <configureConsole+0x70>)
   827a6:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   827a8:	4d0e      	ldr	r5, [pc, #56]	; (827e4 <configureConsole+0x74>)
   827aa:	682b      	ldr	r3, [r5, #0]
   827ac:	6898      	ldr	r0, [r3, #8]
   827ae:	2100      	movs	r1, #0
   827b0:	4c0d      	ldr	r4, [pc, #52]	; (827e8 <configureConsole+0x78>)
   827b2:	47a0      	blx	r4
	setbuf(stdin, NULL);
   827b4:	682b      	ldr	r3, [r5, #0]
   827b6:	6858      	ldr	r0, [r3, #4]
   827b8:	2100      	movs	r1, #0
   827ba:	47a0      	blx	r4
		.paritytype = UART_MR_PAR_NO
	};
	
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONSOLE_UART, &uart_serial_options);
}
   827bc:	b005      	add	sp, #20
   827be:	bd30      	pop	{r4, r5, pc}
   827c0:	00081205 	.word	0x00081205
   827c4:	400e0800 	.word	0x400e0800
   827c8:	20070d78 	.word	0x20070d78
   827cc:	000826c9 	.word	0x000826c9
   827d0:	20070d74 	.word	0x20070d74
   827d4:	00082621 	.word	0x00082621
   827d8:	20070d70 	.word	0x20070d70
   827dc:	0501bd00 	.word	0x0501bd00
   827e0:	0008126d 	.word	0x0008126d
   827e4:	20070608 	.word	0x20070608
   827e8:	0008352d 	.word	0x0008352d

000827ec <pulseIn>:


long pulseIn()
{
   827ec:	b538      	push	{r3, r4, r5, lr}
	//printf("pulseread");
	//timeout zone
	unsigned long numloops = 0;
   827ee:	2400      	movs	r4, #0
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   827f0:	4a17      	ldr	r2, [pc, #92]	; (82850 <pulseIn+0x64>)
	unsigned long maxloops = 500000;
	unsigned long width = 0;
	// wait for the pulse to start
	while (ioport_get_pin_level(echo)== LOW)
	{
		if (numloops++ == maxloops)
   827f2:	4918      	ldr	r1, [pc, #96]	; (82854 <pulseIn+0x68>)
	//timeout zone
	unsigned long numloops = 0;
	unsigned long maxloops = 500000;
	unsigned long width = 0;
	// wait for the pulse to start
	while (ioport_get_pin_level(echo)== LOW)
   827f4:	e00e      	b.n	82814 <pulseIn+0x28>
	{
		if (numloops++ == maxloops)
   827f6:	3401      	adds	r4, #1
   827f8:	428c      	cmp	r4, r1
   827fa:	d10b      	bne.n	82814 <pulseIn+0x28>
		{
			printf("brokenLOW");
   827fc:	4816      	ldr	r0, [pc, #88]	; (82858 <pulseIn+0x6c>)
   827fe:	4b17      	ldr	r3, [pc, #92]	; (8285c <pulseIn+0x70>)
   82800:	4798      	blx	r3
   82802:	4b13      	ldr	r3, [pc, #76]	; (82850 <pulseIn+0x64>)
   82804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
			break;
		}
	}
	
	// wait for the pulse to stop @ here we are measuring the pulse width = incrementing the WIDTH value by one each cycle. atmega328 1 micro second is equal to 16 cycles.
	while (ioport_get_pin_level(echo)==HIGH)
   82806:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
   8280a:	d01a      	beq.n	82842 <pulseIn+0x56>
	{
		if (numloops++ == maxloops) 
   8280c:	4b14      	ldr	r3, [pc, #80]	; (82860 <pulseIn+0x74>)
   8280e:	429c      	cmp	r4, r3
   82810:	d10e      	bne.n	82830 <pulseIn+0x44>
   82812:	e008      	b.n	82826 <pulseIn+0x3a>
   82814:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
	//timeout zone
	unsigned long numloops = 0;
	unsigned long maxloops = 500000;
	unsigned long width = 0;
	// wait for the pulse to start
	while (ioport_get_pin_level(echo)== LOW)
   82816:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
   8281a:	d0ec      	beq.n	827f6 <pulseIn+0xa>
   8281c:	e7f1      	b.n	82802 <pulseIn+0x16>
   8281e:	1963      	adds	r3, r4, r5
	}
	
	// wait for the pulse to stop @ here we are measuring the pulse width = incrementing the WIDTH value by one each cycle. atmega328 1 micro second is equal to 16 cycles.
	while (ioport_get_pin_level(echo)==HIGH)
	{
		if (numloops++ == maxloops) 
   82820:	428b      	cmp	r3, r1
   82822:	d108      	bne.n	82836 <pulseIn+0x4a>
   82824:	e000      	b.n	82828 <pulseIn+0x3c>
   82826:	2500      	movs	r5, #0
		{
			printf("brokenHIGH");
   82828:	480e      	ldr	r0, [pc, #56]	; (82864 <pulseIn+0x78>)
   8282a:	4b0c      	ldr	r3, [pc, #48]	; (8285c <pulseIn+0x70>)
   8282c:	4798      	blx	r3
			break;
   8282e:	e009      	b.n	82844 <pulseIn+0x58>
	}
	
	// wait for the pulse to stop @ here we are measuring the pulse width = incrementing the WIDTH value by one each cycle. atmega328 1 micro second is equal to 16 cycles.
	while (ioport_get_pin_level(echo)==HIGH)
	{
		if (numloops++ == maxloops) 
   82830:	2500      	movs	r5, #0
   82832:	4a07      	ldr	r2, [pc, #28]	; (82850 <pulseIn+0x64>)
   82834:	490a      	ldr	r1, [pc, #40]	; (82860 <pulseIn+0x74>)
		{
			printf("brokenHIGH");
			break;
		}
		width++;
   82836:	3501      	adds	r5, #1
   82838:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
			break;
		}
	}
	
	// wait for the pulse to stop @ here we are measuring the pulse width = incrementing the WIDTH value by one each cycle. atmega328 1 micro second is equal to 16 cycles.
	while (ioport_get_pin_level(echo)==HIGH)
   8283a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
   8283e:	d1ee      	bne.n	8281e <pulseIn+0x32>
   82840:	e000      	b.n	82844 <pulseIn+0x58>
   82842:	2500      	movs	r5, #0
			printf("brokenHIGH");
			break;
		}
		width++;
	}
	return width/scaling;
   82844:	0868      	lsrs	r0, r5, #1
   82846:	4b08      	ldr	r3, [pc, #32]	; (82868 <pulseIn+0x7c>)
   82848:	fba3 2000 	umull	r2, r0, r3, r0
}
   8284c:	0940      	lsrs	r0, r0, #5
   8284e:	bd38      	pop	{r3, r4, r5, pc}
   82850:	400e1200 	.word	0x400e1200
   82854:	0007a121 	.word	0x0007a121
   82858:	000862c8 	.word	0x000862c8
   8285c:	00083385 	.word	0x00083385
   82860:	0007a120 	.word	0x0007a120
   82864:	000862d4 	.word	0x000862d4
   82868:	4c8f8d29 	.word	0x4c8f8d29
   8286c:	00000000 	.word	0x00000000

00082870 <servoControll>:
		servoControll(distance);
		delay_us(500);
		
}
void servoControll(unsigned long dist)
{
   82870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82874:	4680      	mov	r8, r0
	
	if(status == STATUS_SEARCHING)
   82876:	4b3e      	ldr	r3, [pc, #248]	; (82970 <servoControll+0x100>)
   82878:	781b      	ldrb	r3, [r3, #0]
   8287a:	2b00      	cmp	r3, #0
   8287c:	d13f      	bne.n	828fe <servoControll+0x8e>
	{
		deg++;
   8287e:	4a3d      	ldr	r2, [pc, #244]	; (82974 <servoControll+0x104>)
   82880:	7813      	ldrb	r3, [r2, #0]
   82882:	3301      	adds	r3, #1
   82884:	b2db      	uxtb	r3, r3
   82886:	7013      	strb	r3, [r2, #0]
		if(preDist >0 && dist <= (preDist/2))
   82888:	4a3b      	ldr	r2, [pc, #236]	; (82978 <servoControll+0x108>)
   8288a:	7812      	ldrb	r2, [r2, #0]
   8288c:	b152      	cbz	r2, 828a4 <servoControll+0x34>
   8288e:	ebb0 0f52 	cmp.w	r0, r2, lsr #1
   82892:	d807      	bhi.n	828a4 <servoControll+0x34>
		{
			sum = sum + deg;
   82894:	4a39      	ldr	r2, [pc, #228]	; (8297c <servoControll+0x10c>)
   82896:	8811      	ldrh	r1, [r2, #0]
   82898:	4419      	add	r1, r3
   8289a:	8011      	strh	r1, [r2, #0]
			tick++;
   8289c:	4a38      	ldr	r2, [pc, #224]	; (82980 <servoControll+0x110>)
   8289e:	8811      	ldrh	r1, [r2, #0]
   828a0:	3101      	adds	r1, #1
   828a2:	8011      	strh	r1, [r2, #0]
		}
		
		if(deg == 120 && tick>10)
   828a4:	2b78      	cmp	r3, #120	; 0x78
   828a6:	d153      	bne.n	82950 <servoControll+0xe0>
   828a8:	4b35      	ldr	r3, [pc, #212]	; (82980 <servoControll+0x110>)
   828aa:	881b      	ldrh	r3, [r3, #0]
   828ac:	2b0a      	cmp	r3, #10
   828ae:	d917      	bls.n	828e0 <servoControll+0x70>
		{
			status = STATUS_FOUND;
   828b0:	2101      	movs	r1, #1
   828b2:	4a2f      	ldr	r2, [pc, #188]	; (82970 <servoControll+0x100>)
   828b4:	7011      	strb	r1, [r2, #0]
			deg = sum / tick;
   828b6:	4a31      	ldr	r2, [pc, #196]	; (8297c <servoControll+0x10c>)
   828b8:	8812      	ldrh	r2, [r2, #0]
   828ba:	fbb2 f3f3 	udiv	r3, r2, r3
   828be:	4a2d      	ldr	r2, [pc, #180]	; (82974 <servoControll+0x104>)
   828c0:	7013      	strb	r3, [r2, #0]
			
			if(dir) dir = 0;
   828c2:	4b30      	ldr	r3, [pc, #192]	; (82984 <servoControll+0x114>)
   828c4:	f993 3000 	ldrsb.w	r3, [r3]
   828c8:	b11b      	cbz	r3, 828d2 <servoControll+0x62>
   828ca:	2200      	movs	r2, #0
   828cc:	4b2d      	ldr	r3, [pc, #180]	; (82984 <servoControll+0x114>)
   828ce:	701a      	strb	r2, [r3, #0]
   828d0:	e002      	b.n	828d8 <servoControll+0x68>
			else dir = 1;
   828d2:	2201      	movs	r2, #1
   828d4:	4b2b      	ldr	r3, [pc, #172]	; (82984 <servoControll+0x114>)
   828d6:	701a      	strb	r2, [r3, #0]
			
			tick = 0;
   828d8:	2200      	movs	r2, #0
   828da:	4b29      	ldr	r3, [pc, #164]	; (82980 <servoControll+0x110>)
   828dc:	801a      	strh	r2, [r3, #0]
   828de:	e037      	b.n	82950 <servoControll+0xe0>
			
		}else if(deg == 120)
		{
			if(dir) dir = 0;
   828e0:	4b28      	ldr	r3, [pc, #160]	; (82984 <servoControll+0x114>)
   828e2:	f993 3000 	ldrsb.w	r3, [r3]
   828e6:	b11b      	cbz	r3, 828f0 <servoControll+0x80>
   828e8:	2200      	movs	r2, #0
   828ea:	4b26      	ldr	r3, [pc, #152]	; (82984 <servoControll+0x114>)
   828ec:	701a      	strb	r2, [r3, #0]
   828ee:	e002      	b.n	828f6 <servoControll+0x86>
			else dir = 1;
   828f0:	2201      	movs	r2, #1
   828f2:	4b24      	ldr	r3, [pc, #144]	; (82984 <servoControll+0x114>)
   828f4:	701a      	strb	r2, [r3, #0]
			deg = 0;
   828f6:	2200      	movs	r2, #0
   828f8:	4b1e      	ldr	r3, [pc, #120]	; (82974 <servoControll+0x104>)
   828fa:	701a      	strb	r2, [r3, #0]
   828fc:	e028      	b.n	82950 <servoControll+0xe0>
		}
	}else
	{
		if(dist < (preDist*0.95) || dist > (preDist*1.05))
   828fe:	4b22      	ldr	r3, [pc, #136]	; (82988 <servoControll+0x118>)
   82900:	4798      	blx	r3
   82902:	4604      	mov	r4, r0
   82904:	460d      	mov	r5, r1
   82906:	4b1c      	ldr	r3, [pc, #112]	; (82978 <servoControll+0x108>)
   82908:	7818      	ldrb	r0, [r3, #0]
   8290a:	4b20      	ldr	r3, [pc, #128]	; (8298c <servoControll+0x11c>)
   8290c:	4798      	blx	r3
   8290e:	4606      	mov	r6, r0
   82910:	460f      	mov	r7, r1
   82912:	a313      	add	r3, pc, #76	; (adr r3, 82960 <servoControll+0xf0>)
   82914:	e9d3 2300 	ldrd	r2, r3, [r3]
   82918:	f8df c074 	ldr.w	ip, [pc, #116]	; 82990 <servoControll+0x120>
   8291c:	47e0      	blx	ip
   8291e:	4602      	mov	r2, r0
   82920:	460b      	mov	r3, r1
   82922:	4620      	mov	r0, r4
   82924:	4629      	mov	r1, r5
   82926:	f8df c070 	ldr.w	ip, [pc, #112]	; 82998 <servoControll+0x128>
   8292a:	47e0      	blx	ip
   8292c:	b968      	cbnz	r0, 8294a <servoControll+0xda>
   8292e:	4630      	mov	r0, r6
   82930:	4639      	mov	r1, r7
   82932:	a30d      	add	r3, pc, #52	; (adr r3, 82968 <servoControll+0xf8>)
   82934:	e9d3 2300 	ldrd	r2, r3, [r3]
   82938:	4e15      	ldr	r6, [pc, #84]	; (82990 <servoControll+0x120>)
   8293a:	47b0      	blx	r6
   8293c:	4602      	mov	r2, r0
   8293e:	460b      	mov	r3, r1
   82940:	4620      	mov	r0, r4
   82942:	4629      	mov	r1, r5
   82944:	4c13      	ldr	r4, [pc, #76]	; (82994 <servoControll+0x124>)
   82946:	47a0      	blx	r4
   82948:	b110      	cbz	r0, 82950 <servoControll+0xe0>
		{
			status = STATUS_SEARCHING;
   8294a:	2200      	movs	r2, #0
   8294c:	4b08      	ldr	r3, [pc, #32]	; (82970 <servoControll+0x100>)
   8294e:	701a      	strb	r2, [r3, #0]
		}
	}
	
	
	
preDist = dist;
   82950:	4b09      	ldr	r3, [pc, #36]	; (82978 <servoControll+0x108>)
   82952:	f883 8000 	strb.w	r8, [r3]
   82956:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8295a:	bf00      	nop
   8295c:	f3af 8000 	nop.w
   82960:	66666666 	.word	0x66666666
   82964:	3fee6666 	.word	0x3fee6666
   82968:	cccccccd 	.word	0xcccccccd
   8296c:	3ff0cccc 	.word	0x3ff0cccc
   82970:	20070d31 	.word	0x20070d31
   82974:	20070d30 	.word	0x20070d30
   82978:	20070d2f 	.word	0x20070d2f
   8297c:	20070d2c 	.word	0x20070d2c
   82980:	20070d2a 	.word	0x20070d2a
   82984:	20070d2e 	.word	0x20070d2e
   82988:	00082d15 	.word	0x00082d15
   8298c:	00082d35 	.word	0x00082d35
   82990:	00082e01 	.word	0x00082e01
   82994:	00083321 	.word	0x00083321
   82998:	000832e5 	.word	0x000832e5
   8299c:	f3af 8000 	nop.w

000829a0 <testingUltraSound>:
	}
	return width/scaling;
}

void testingUltraSound()
{
   829a0:	b570      	push	{r4, r5, r6, lr}
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   829a2:	4d0c      	ldr	r5, [pc, #48]	; (829d4 <testingUltraSound+0x34>)
   829a4:	f04f 6680 	mov.w	r6, #67108864	; 0x4000000
   829a8:	636e      	str	r6, [r5, #52]	; 0x34
		unsigned long distance;
	

		
		ioport_set_pin_level(trig, LOW);
		delay_us(2);
   829aa:	200c      	movs	r0, #12
   829ac:	4c0a      	ldr	r4, [pc, #40]	; (829d8 <testingUltraSound+0x38>)
   829ae:	47a0      	blx	r4
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   829b0:	632e      	str	r6, [r5, #48]	; 0x30
		ioport_set_pin_level(trig, HIGH);
		delay_us(10);
   829b2:	203c      	movs	r0, #60	; 0x3c
   829b4:	47a0      	blx	r4
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   829b6:	636e      	str	r6, [r5, #52]	; 0x34
		ioport_set_pin_level(trig, LOW);
		distance = pulseIn();
   829b8:	4b08      	ldr	r3, [pc, #32]	; (829dc <testingUltraSound+0x3c>)
   829ba:	4798      	blx	r3
   829bc:	4605      	mov	r5, r0
		printf("%d cm\n", distance);
   829be:	4808      	ldr	r0, [pc, #32]	; (829e0 <testingUltraSound+0x40>)
   829c0:	4629      	mov	r1, r5
   829c2:	4b08      	ldr	r3, [pc, #32]	; (829e4 <testingUltraSound+0x44>)
   829c4:	4798      	blx	r3
		servoControll(distance);
   829c6:	4628      	mov	r0, r5
   829c8:	4b07      	ldr	r3, [pc, #28]	; (829e8 <testingUltraSound+0x48>)
   829ca:	4798      	blx	r3
		delay_us(500);
   829cc:	f640 30b8 	movw	r0, #3000	; 0xbb8
   829d0:	47a0      	blx	r4
   829d2:	bd70      	pop	{r4, r5, r6, pc}
   829d4:	400e1200 	.word	0x400e1200
   829d8:	20070001 	.word	0x20070001
   829dc:	000827ed 	.word	0x000827ed
   829e0:	000862e0 	.word	0x000862e0
   829e4:	00083385 	.word	0x00083385
   829e8:	00082871 	.word	0x00082871

000829ec <main>:
	
	
}

int main (void)
{
   829ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   829f0:	4b1e      	ldr	r3, [pc, #120]	; (82a6c <main+0x80>)
   829f2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   829f6:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   829f8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   829fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   82a00:	615a      	str	r2, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   82a02:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   82a06:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   82a0a:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   82a0c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   82a10:	635a      	str	r2, [r3, #52]	; 0x34
	ioport_set_pin_dir(trig,IOPORT_DIR_OUTPUT);
	ioport_set_pin_dir(echo, IOPORT_DIR_INPUT);
	ioport_set_pin_dir(led, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(led,LOW);
	//turn of watchdog
	WDT->WDT_MR = WDT_MR_WDDIS;
   82a12:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   82a16:	f503 6305 	add.w	r3, r3, #2128	; 0x850
   82a1a:	605a      	str	r2, [r3, #4]
	
	//init clock
	sysclk_init();
   82a1c:	4b14      	ldr	r3, [pc, #80]	; (82a70 <main+0x84>)
   82a1e:	4798      	blx	r3
	//init board
	board_init();
   82a20:	4b14      	ldr	r3, [pc, #80]	; (82a74 <main+0x88>)
   82a22:	4798      	blx	r3
	//init serial communication, printf ..
	configureConsole();
   82a24:	4b14      	ldr	r3, [pc, #80]	; (82a78 <main+0x8c>)
   82a26:	4798      	blx	r3
	//test ultrasound sensor
	while(1)
	{	
	if(status == STATUS_FOUND)
   82a28:	4f14      	ldr	r7, [pc, #80]	; (82a7c <main+0x90>)
	{
		ioport_set_pin_level(led, HIGH);
		delay_ms(2);
		ioport_set_pin_level(led, LOW);
		delay_ms(20);
	}else if(dir = 1)
   82a2a:	f8df 8060 	ldr.w	r8, [pc, #96]	; 82a8c <main+0xa0>
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   82a2e:	4e0f      	ldr	r6, [pc, #60]	; (82a6c <main+0x80>)
	//init serial communication, printf ..
	configureConsole();
	//test ultrasound sensor
	while(1)
	{	
	if(status == STATUS_FOUND)
   82a30:	783b      	ldrb	r3, [r7, #0]
   82a32:	2b01      	cmp	r3, #1
   82a34:	d10a      	bne.n	82a4c <main+0x60>
   82a36:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
   82a3a:	6335      	str	r5, [r6, #48]	; 0x30
		{
			ioport_set_pin_level(led, HIGH);
			delay_us(1500);
   82a3c:	f242 3028 	movw	r0, #9000	; 0x2328
   82a40:	4c0f      	ldr	r4, [pc, #60]	; (82a80 <main+0x94>)
   82a42:	47a0      	blx	r4
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   82a44:	6375      	str	r5, [r6, #52]	; 0x34
			ioport_set_pin_level(led, LOW);
			delay_ms(20);
   82a46:	480f      	ldr	r0, [pc, #60]	; (82a84 <main+0x98>)
   82a48:	47a0      	blx	r4
   82a4a:	e00c      	b.n	82a66 <main+0x7a>
	{
		ioport_set_pin_level(led, HIGH);
		delay_ms(2);
		ioport_set_pin_level(led, LOW);
		delay_ms(20);
	}else if(dir = 1)
   82a4c:	2301      	movs	r3, #1
   82a4e:	f888 3000 	strb.w	r3, [r8]
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   82a52:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
   82a56:	6335      	str	r5, [r6, #48]	; 0x30
	{
		ioport_set_pin_level(led, HIGH);
		delay_ms(1);
   82a58:	f241 7070 	movw	r0, #6000	; 0x1770
   82a5c:	4c08      	ldr	r4, [pc, #32]	; (82a80 <main+0x94>)
   82a5e:	47a0      	blx	r4
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   82a60:	6375      	str	r5, [r6, #52]	; 0x34
		ioport_set_pin_level(led, LOW);
		delay_ms(20);
   82a62:	4808      	ldr	r0, [pc, #32]	; (82a84 <main+0x98>)
   82a64:	47a0      	blx	r4
	}
	testingUltraSound();
   82a66:	4b08      	ldr	r3, [pc, #32]	; (82a88 <main+0x9c>)
   82a68:	4798      	blx	r3
	
	}
   82a6a:	e7e1      	b.n	82a30 <main+0x44>
   82a6c:	400e1200 	.word	0x400e1200
   82a70:	00080149 	.word	0x00080149
   82a74:	00080ddd 	.word	0x00080ddd
   82a78:	00082771 	.word	0x00082771
   82a7c:	20070d31 	.word	0x20070d31
   82a80:	20070001 	.word	0x20070001
   82a84:	0001d4c0 	.word	0x0001d4c0
   82a88:	000829a1 	.word	0x000829a1
   82a8c:	20070d2e 	.word	0x20070d2e

00082a90 <__aeabi_drsub>:
   82a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   82a94:	e002      	b.n	82a9c <__adddf3>
   82a96:	bf00      	nop

00082a98 <__aeabi_dsub>:
   82a98:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00082a9c <__adddf3>:
   82a9c:	b530      	push	{r4, r5, lr}
   82a9e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   82aa2:	ea4f 0543 	mov.w	r5, r3, lsl #1
   82aa6:	ea94 0f05 	teq	r4, r5
   82aaa:	bf08      	it	eq
   82aac:	ea90 0f02 	teqeq	r0, r2
   82ab0:	bf1f      	itttt	ne
   82ab2:	ea54 0c00 	orrsne.w	ip, r4, r0
   82ab6:	ea55 0c02 	orrsne.w	ip, r5, r2
   82aba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   82abe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   82ac2:	f000 80e2 	beq.w	82c8a <__adddf3+0x1ee>
   82ac6:	ea4f 5454 	mov.w	r4, r4, lsr #21
   82aca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   82ace:	bfb8      	it	lt
   82ad0:	426d      	neglt	r5, r5
   82ad2:	dd0c      	ble.n	82aee <__adddf3+0x52>
   82ad4:	442c      	add	r4, r5
   82ad6:	ea80 0202 	eor.w	r2, r0, r2
   82ada:	ea81 0303 	eor.w	r3, r1, r3
   82ade:	ea82 0000 	eor.w	r0, r2, r0
   82ae2:	ea83 0101 	eor.w	r1, r3, r1
   82ae6:	ea80 0202 	eor.w	r2, r0, r2
   82aea:	ea81 0303 	eor.w	r3, r1, r3
   82aee:	2d36      	cmp	r5, #54	; 0x36
   82af0:	bf88      	it	hi
   82af2:	bd30      	pophi	{r4, r5, pc}
   82af4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   82af8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   82afc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   82b00:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   82b04:	d002      	beq.n	82b0c <__adddf3+0x70>
   82b06:	4240      	negs	r0, r0
   82b08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   82b0c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   82b10:	ea4f 3303 	mov.w	r3, r3, lsl #12
   82b14:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   82b18:	d002      	beq.n	82b20 <__adddf3+0x84>
   82b1a:	4252      	negs	r2, r2
   82b1c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   82b20:	ea94 0f05 	teq	r4, r5
   82b24:	f000 80a7 	beq.w	82c76 <__adddf3+0x1da>
   82b28:	f1a4 0401 	sub.w	r4, r4, #1
   82b2c:	f1d5 0e20 	rsbs	lr, r5, #32
   82b30:	db0d      	blt.n	82b4e <__adddf3+0xb2>
   82b32:	fa02 fc0e 	lsl.w	ip, r2, lr
   82b36:	fa22 f205 	lsr.w	r2, r2, r5
   82b3a:	1880      	adds	r0, r0, r2
   82b3c:	f141 0100 	adc.w	r1, r1, #0
   82b40:	fa03 f20e 	lsl.w	r2, r3, lr
   82b44:	1880      	adds	r0, r0, r2
   82b46:	fa43 f305 	asr.w	r3, r3, r5
   82b4a:	4159      	adcs	r1, r3
   82b4c:	e00e      	b.n	82b6c <__adddf3+0xd0>
   82b4e:	f1a5 0520 	sub.w	r5, r5, #32
   82b52:	f10e 0e20 	add.w	lr, lr, #32
   82b56:	2a01      	cmp	r2, #1
   82b58:	fa03 fc0e 	lsl.w	ip, r3, lr
   82b5c:	bf28      	it	cs
   82b5e:	f04c 0c02 	orrcs.w	ip, ip, #2
   82b62:	fa43 f305 	asr.w	r3, r3, r5
   82b66:	18c0      	adds	r0, r0, r3
   82b68:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   82b6c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   82b70:	d507      	bpl.n	82b82 <__adddf3+0xe6>
   82b72:	f04f 0e00 	mov.w	lr, #0
   82b76:	f1dc 0c00 	rsbs	ip, ip, #0
   82b7a:	eb7e 0000 	sbcs.w	r0, lr, r0
   82b7e:	eb6e 0101 	sbc.w	r1, lr, r1
   82b82:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   82b86:	d31b      	bcc.n	82bc0 <__adddf3+0x124>
   82b88:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   82b8c:	d30c      	bcc.n	82ba8 <__adddf3+0x10c>
   82b8e:	0849      	lsrs	r1, r1, #1
   82b90:	ea5f 0030 	movs.w	r0, r0, rrx
   82b94:	ea4f 0c3c 	mov.w	ip, ip, rrx
   82b98:	f104 0401 	add.w	r4, r4, #1
   82b9c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   82ba0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   82ba4:	f080 809a 	bcs.w	82cdc <__adddf3+0x240>
   82ba8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   82bac:	bf08      	it	eq
   82bae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   82bb2:	f150 0000 	adcs.w	r0, r0, #0
   82bb6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   82bba:	ea41 0105 	orr.w	r1, r1, r5
   82bbe:	bd30      	pop	{r4, r5, pc}
   82bc0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   82bc4:	4140      	adcs	r0, r0
   82bc6:	eb41 0101 	adc.w	r1, r1, r1
   82bca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   82bce:	f1a4 0401 	sub.w	r4, r4, #1
   82bd2:	d1e9      	bne.n	82ba8 <__adddf3+0x10c>
   82bd4:	f091 0f00 	teq	r1, #0
   82bd8:	bf04      	itt	eq
   82bda:	4601      	moveq	r1, r0
   82bdc:	2000      	moveq	r0, #0
   82bde:	fab1 f381 	clz	r3, r1
   82be2:	bf08      	it	eq
   82be4:	3320      	addeq	r3, #32
   82be6:	f1a3 030b 	sub.w	r3, r3, #11
   82bea:	f1b3 0220 	subs.w	r2, r3, #32
   82bee:	da0c      	bge.n	82c0a <__adddf3+0x16e>
   82bf0:	320c      	adds	r2, #12
   82bf2:	dd08      	ble.n	82c06 <__adddf3+0x16a>
   82bf4:	f102 0c14 	add.w	ip, r2, #20
   82bf8:	f1c2 020c 	rsb	r2, r2, #12
   82bfc:	fa01 f00c 	lsl.w	r0, r1, ip
   82c00:	fa21 f102 	lsr.w	r1, r1, r2
   82c04:	e00c      	b.n	82c20 <__adddf3+0x184>
   82c06:	f102 0214 	add.w	r2, r2, #20
   82c0a:	bfd8      	it	le
   82c0c:	f1c2 0c20 	rsble	ip, r2, #32
   82c10:	fa01 f102 	lsl.w	r1, r1, r2
   82c14:	fa20 fc0c 	lsr.w	ip, r0, ip
   82c18:	bfdc      	itt	le
   82c1a:	ea41 010c 	orrle.w	r1, r1, ip
   82c1e:	4090      	lslle	r0, r2
   82c20:	1ae4      	subs	r4, r4, r3
   82c22:	bfa2      	ittt	ge
   82c24:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   82c28:	4329      	orrge	r1, r5
   82c2a:	bd30      	popge	{r4, r5, pc}
   82c2c:	ea6f 0404 	mvn.w	r4, r4
   82c30:	3c1f      	subs	r4, #31
   82c32:	da1c      	bge.n	82c6e <__adddf3+0x1d2>
   82c34:	340c      	adds	r4, #12
   82c36:	dc0e      	bgt.n	82c56 <__adddf3+0x1ba>
   82c38:	f104 0414 	add.w	r4, r4, #20
   82c3c:	f1c4 0220 	rsb	r2, r4, #32
   82c40:	fa20 f004 	lsr.w	r0, r0, r4
   82c44:	fa01 f302 	lsl.w	r3, r1, r2
   82c48:	ea40 0003 	orr.w	r0, r0, r3
   82c4c:	fa21 f304 	lsr.w	r3, r1, r4
   82c50:	ea45 0103 	orr.w	r1, r5, r3
   82c54:	bd30      	pop	{r4, r5, pc}
   82c56:	f1c4 040c 	rsb	r4, r4, #12
   82c5a:	f1c4 0220 	rsb	r2, r4, #32
   82c5e:	fa20 f002 	lsr.w	r0, r0, r2
   82c62:	fa01 f304 	lsl.w	r3, r1, r4
   82c66:	ea40 0003 	orr.w	r0, r0, r3
   82c6a:	4629      	mov	r1, r5
   82c6c:	bd30      	pop	{r4, r5, pc}
   82c6e:	fa21 f004 	lsr.w	r0, r1, r4
   82c72:	4629      	mov	r1, r5
   82c74:	bd30      	pop	{r4, r5, pc}
   82c76:	f094 0f00 	teq	r4, #0
   82c7a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   82c7e:	bf06      	itte	eq
   82c80:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   82c84:	3401      	addeq	r4, #1
   82c86:	3d01      	subne	r5, #1
   82c88:	e74e      	b.n	82b28 <__adddf3+0x8c>
   82c8a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   82c8e:	bf18      	it	ne
   82c90:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   82c94:	d029      	beq.n	82cea <__adddf3+0x24e>
   82c96:	ea94 0f05 	teq	r4, r5
   82c9a:	bf08      	it	eq
   82c9c:	ea90 0f02 	teqeq	r0, r2
   82ca0:	d005      	beq.n	82cae <__adddf3+0x212>
   82ca2:	ea54 0c00 	orrs.w	ip, r4, r0
   82ca6:	bf04      	itt	eq
   82ca8:	4619      	moveq	r1, r3
   82caa:	4610      	moveq	r0, r2
   82cac:	bd30      	pop	{r4, r5, pc}
   82cae:	ea91 0f03 	teq	r1, r3
   82cb2:	bf1e      	ittt	ne
   82cb4:	2100      	movne	r1, #0
   82cb6:	2000      	movne	r0, #0
   82cb8:	bd30      	popne	{r4, r5, pc}
   82cba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   82cbe:	d105      	bne.n	82ccc <__adddf3+0x230>
   82cc0:	0040      	lsls	r0, r0, #1
   82cc2:	4149      	adcs	r1, r1
   82cc4:	bf28      	it	cs
   82cc6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   82cca:	bd30      	pop	{r4, r5, pc}
   82ccc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   82cd0:	bf3c      	itt	cc
   82cd2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   82cd6:	bd30      	popcc	{r4, r5, pc}
   82cd8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   82cdc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   82ce0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   82ce4:	f04f 0000 	mov.w	r0, #0
   82ce8:	bd30      	pop	{r4, r5, pc}
   82cea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   82cee:	bf1a      	itte	ne
   82cf0:	4619      	movne	r1, r3
   82cf2:	4610      	movne	r0, r2
   82cf4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   82cf8:	bf1c      	itt	ne
   82cfa:	460b      	movne	r3, r1
   82cfc:	4602      	movne	r2, r0
   82cfe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   82d02:	bf06      	itte	eq
   82d04:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   82d08:	ea91 0f03 	teqeq	r1, r3
   82d0c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   82d10:	bd30      	pop	{r4, r5, pc}
   82d12:	bf00      	nop

00082d14 <__aeabi_ui2d>:
   82d14:	f090 0f00 	teq	r0, #0
   82d18:	bf04      	itt	eq
   82d1a:	2100      	moveq	r1, #0
   82d1c:	4770      	bxeq	lr
   82d1e:	b530      	push	{r4, r5, lr}
   82d20:	f44f 6480 	mov.w	r4, #1024	; 0x400
   82d24:	f104 0432 	add.w	r4, r4, #50	; 0x32
   82d28:	f04f 0500 	mov.w	r5, #0
   82d2c:	f04f 0100 	mov.w	r1, #0
   82d30:	e750      	b.n	82bd4 <__adddf3+0x138>
   82d32:	bf00      	nop

00082d34 <__aeabi_i2d>:
   82d34:	f090 0f00 	teq	r0, #0
   82d38:	bf04      	itt	eq
   82d3a:	2100      	moveq	r1, #0
   82d3c:	4770      	bxeq	lr
   82d3e:	b530      	push	{r4, r5, lr}
   82d40:	f44f 6480 	mov.w	r4, #1024	; 0x400
   82d44:	f104 0432 	add.w	r4, r4, #50	; 0x32
   82d48:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   82d4c:	bf48      	it	mi
   82d4e:	4240      	negmi	r0, r0
   82d50:	f04f 0100 	mov.w	r1, #0
   82d54:	e73e      	b.n	82bd4 <__adddf3+0x138>
   82d56:	bf00      	nop

00082d58 <__aeabi_f2d>:
   82d58:	0042      	lsls	r2, r0, #1
   82d5a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   82d5e:	ea4f 0131 	mov.w	r1, r1, rrx
   82d62:	ea4f 7002 	mov.w	r0, r2, lsl #28
   82d66:	bf1f      	itttt	ne
   82d68:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   82d6c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   82d70:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   82d74:	4770      	bxne	lr
   82d76:	f092 0f00 	teq	r2, #0
   82d7a:	bf14      	ite	ne
   82d7c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   82d80:	4770      	bxeq	lr
   82d82:	b530      	push	{r4, r5, lr}
   82d84:	f44f 7460 	mov.w	r4, #896	; 0x380
   82d88:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   82d8c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   82d90:	e720      	b.n	82bd4 <__adddf3+0x138>
   82d92:	bf00      	nop

00082d94 <__aeabi_ul2d>:
   82d94:	ea50 0201 	orrs.w	r2, r0, r1
   82d98:	bf08      	it	eq
   82d9a:	4770      	bxeq	lr
   82d9c:	b530      	push	{r4, r5, lr}
   82d9e:	f04f 0500 	mov.w	r5, #0
   82da2:	e00a      	b.n	82dba <__aeabi_l2d+0x16>

00082da4 <__aeabi_l2d>:
   82da4:	ea50 0201 	orrs.w	r2, r0, r1
   82da8:	bf08      	it	eq
   82daa:	4770      	bxeq	lr
   82dac:	b530      	push	{r4, r5, lr}
   82dae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   82db2:	d502      	bpl.n	82dba <__aeabi_l2d+0x16>
   82db4:	4240      	negs	r0, r0
   82db6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   82dba:	f44f 6480 	mov.w	r4, #1024	; 0x400
   82dbe:	f104 0432 	add.w	r4, r4, #50	; 0x32
   82dc2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   82dc6:	f43f aedc 	beq.w	82b82 <__adddf3+0xe6>
   82dca:	f04f 0203 	mov.w	r2, #3
   82dce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   82dd2:	bf18      	it	ne
   82dd4:	3203      	addne	r2, #3
   82dd6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   82dda:	bf18      	it	ne
   82ddc:	3203      	addne	r2, #3
   82dde:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   82de2:	f1c2 0320 	rsb	r3, r2, #32
   82de6:	fa00 fc03 	lsl.w	ip, r0, r3
   82dea:	fa20 f002 	lsr.w	r0, r0, r2
   82dee:	fa01 fe03 	lsl.w	lr, r1, r3
   82df2:	ea40 000e 	orr.w	r0, r0, lr
   82df6:	fa21 f102 	lsr.w	r1, r1, r2
   82dfa:	4414      	add	r4, r2
   82dfc:	e6c1      	b.n	82b82 <__adddf3+0xe6>
   82dfe:	bf00      	nop

00082e00 <__aeabi_dmul>:
   82e00:	b570      	push	{r4, r5, r6, lr}
   82e02:	f04f 0cff 	mov.w	ip, #255	; 0xff
   82e06:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   82e0a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   82e0e:	bf1d      	ittte	ne
   82e10:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   82e14:	ea94 0f0c 	teqne	r4, ip
   82e18:	ea95 0f0c 	teqne	r5, ip
   82e1c:	f000 f8de 	bleq	82fdc <__aeabi_dmul+0x1dc>
   82e20:	442c      	add	r4, r5
   82e22:	ea81 0603 	eor.w	r6, r1, r3
   82e26:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   82e2a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   82e2e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   82e32:	bf18      	it	ne
   82e34:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   82e38:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   82e3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   82e40:	d038      	beq.n	82eb4 <__aeabi_dmul+0xb4>
   82e42:	fba0 ce02 	umull	ip, lr, r0, r2
   82e46:	f04f 0500 	mov.w	r5, #0
   82e4a:	fbe1 e502 	umlal	lr, r5, r1, r2
   82e4e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   82e52:	fbe0 e503 	umlal	lr, r5, r0, r3
   82e56:	f04f 0600 	mov.w	r6, #0
   82e5a:	fbe1 5603 	umlal	r5, r6, r1, r3
   82e5e:	f09c 0f00 	teq	ip, #0
   82e62:	bf18      	it	ne
   82e64:	f04e 0e01 	orrne.w	lr, lr, #1
   82e68:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   82e6c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   82e70:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   82e74:	d204      	bcs.n	82e80 <__aeabi_dmul+0x80>
   82e76:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   82e7a:	416d      	adcs	r5, r5
   82e7c:	eb46 0606 	adc.w	r6, r6, r6
   82e80:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   82e84:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   82e88:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   82e8c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   82e90:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   82e94:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   82e98:	bf88      	it	hi
   82e9a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   82e9e:	d81e      	bhi.n	82ede <__aeabi_dmul+0xde>
   82ea0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   82ea4:	bf08      	it	eq
   82ea6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   82eaa:	f150 0000 	adcs.w	r0, r0, #0
   82eae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   82eb2:	bd70      	pop	{r4, r5, r6, pc}
   82eb4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   82eb8:	ea46 0101 	orr.w	r1, r6, r1
   82ebc:	ea40 0002 	orr.w	r0, r0, r2
   82ec0:	ea81 0103 	eor.w	r1, r1, r3
   82ec4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   82ec8:	bfc2      	ittt	gt
   82eca:	ebd4 050c 	rsbsgt	r5, r4, ip
   82ece:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   82ed2:	bd70      	popgt	{r4, r5, r6, pc}
   82ed4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   82ed8:	f04f 0e00 	mov.w	lr, #0
   82edc:	3c01      	subs	r4, #1
   82ede:	f300 80ab 	bgt.w	83038 <__aeabi_dmul+0x238>
   82ee2:	f114 0f36 	cmn.w	r4, #54	; 0x36
   82ee6:	bfde      	ittt	le
   82ee8:	2000      	movle	r0, #0
   82eea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   82eee:	bd70      	pople	{r4, r5, r6, pc}
   82ef0:	f1c4 0400 	rsb	r4, r4, #0
   82ef4:	3c20      	subs	r4, #32
   82ef6:	da35      	bge.n	82f64 <__aeabi_dmul+0x164>
   82ef8:	340c      	adds	r4, #12
   82efa:	dc1b      	bgt.n	82f34 <__aeabi_dmul+0x134>
   82efc:	f104 0414 	add.w	r4, r4, #20
   82f00:	f1c4 0520 	rsb	r5, r4, #32
   82f04:	fa00 f305 	lsl.w	r3, r0, r5
   82f08:	fa20 f004 	lsr.w	r0, r0, r4
   82f0c:	fa01 f205 	lsl.w	r2, r1, r5
   82f10:	ea40 0002 	orr.w	r0, r0, r2
   82f14:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   82f18:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   82f1c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   82f20:	fa21 f604 	lsr.w	r6, r1, r4
   82f24:	eb42 0106 	adc.w	r1, r2, r6
   82f28:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   82f2c:	bf08      	it	eq
   82f2e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   82f32:	bd70      	pop	{r4, r5, r6, pc}
   82f34:	f1c4 040c 	rsb	r4, r4, #12
   82f38:	f1c4 0520 	rsb	r5, r4, #32
   82f3c:	fa00 f304 	lsl.w	r3, r0, r4
   82f40:	fa20 f005 	lsr.w	r0, r0, r5
   82f44:	fa01 f204 	lsl.w	r2, r1, r4
   82f48:	ea40 0002 	orr.w	r0, r0, r2
   82f4c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   82f50:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   82f54:	f141 0100 	adc.w	r1, r1, #0
   82f58:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   82f5c:	bf08      	it	eq
   82f5e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   82f62:	bd70      	pop	{r4, r5, r6, pc}
   82f64:	f1c4 0520 	rsb	r5, r4, #32
   82f68:	fa00 f205 	lsl.w	r2, r0, r5
   82f6c:	ea4e 0e02 	orr.w	lr, lr, r2
   82f70:	fa20 f304 	lsr.w	r3, r0, r4
   82f74:	fa01 f205 	lsl.w	r2, r1, r5
   82f78:	ea43 0302 	orr.w	r3, r3, r2
   82f7c:	fa21 f004 	lsr.w	r0, r1, r4
   82f80:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   82f84:	fa21 f204 	lsr.w	r2, r1, r4
   82f88:	ea20 0002 	bic.w	r0, r0, r2
   82f8c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   82f90:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   82f94:	bf08      	it	eq
   82f96:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   82f9a:	bd70      	pop	{r4, r5, r6, pc}
   82f9c:	f094 0f00 	teq	r4, #0
   82fa0:	d10f      	bne.n	82fc2 <__aeabi_dmul+0x1c2>
   82fa2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   82fa6:	0040      	lsls	r0, r0, #1
   82fa8:	eb41 0101 	adc.w	r1, r1, r1
   82fac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   82fb0:	bf08      	it	eq
   82fb2:	3c01      	subeq	r4, #1
   82fb4:	d0f7      	beq.n	82fa6 <__aeabi_dmul+0x1a6>
   82fb6:	ea41 0106 	orr.w	r1, r1, r6
   82fba:	f095 0f00 	teq	r5, #0
   82fbe:	bf18      	it	ne
   82fc0:	4770      	bxne	lr
   82fc2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   82fc6:	0052      	lsls	r2, r2, #1
   82fc8:	eb43 0303 	adc.w	r3, r3, r3
   82fcc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   82fd0:	bf08      	it	eq
   82fd2:	3d01      	subeq	r5, #1
   82fd4:	d0f7      	beq.n	82fc6 <__aeabi_dmul+0x1c6>
   82fd6:	ea43 0306 	orr.w	r3, r3, r6
   82fda:	4770      	bx	lr
   82fdc:	ea94 0f0c 	teq	r4, ip
   82fe0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   82fe4:	bf18      	it	ne
   82fe6:	ea95 0f0c 	teqne	r5, ip
   82fea:	d00c      	beq.n	83006 <__aeabi_dmul+0x206>
   82fec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   82ff0:	bf18      	it	ne
   82ff2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   82ff6:	d1d1      	bne.n	82f9c <__aeabi_dmul+0x19c>
   82ff8:	ea81 0103 	eor.w	r1, r1, r3
   82ffc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   83000:	f04f 0000 	mov.w	r0, #0
   83004:	bd70      	pop	{r4, r5, r6, pc}
   83006:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8300a:	bf06      	itte	eq
   8300c:	4610      	moveq	r0, r2
   8300e:	4619      	moveq	r1, r3
   83010:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   83014:	d019      	beq.n	8304a <__aeabi_dmul+0x24a>
   83016:	ea94 0f0c 	teq	r4, ip
   8301a:	d102      	bne.n	83022 <__aeabi_dmul+0x222>
   8301c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   83020:	d113      	bne.n	8304a <__aeabi_dmul+0x24a>
   83022:	ea95 0f0c 	teq	r5, ip
   83026:	d105      	bne.n	83034 <__aeabi_dmul+0x234>
   83028:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   8302c:	bf1c      	itt	ne
   8302e:	4610      	movne	r0, r2
   83030:	4619      	movne	r1, r3
   83032:	d10a      	bne.n	8304a <__aeabi_dmul+0x24a>
   83034:	ea81 0103 	eor.w	r1, r1, r3
   83038:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8303c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   83040:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   83044:	f04f 0000 	mov.w	r0, #0
   83048:	bd70      	pop	{r4, r5, r6, pc}
   8304a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8304e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   83052:	bd70      	pop	{r4, r5, r6, pc}

00083054 <__aeabi_ddiv>:
   83054:	b570      	push	{r4, r5, r6, lr}
   83056:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8305a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8305e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   83062:	bf1d      	ittte	ne
   83064:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   83068:	ea94 0f0c 	teqne	r4, ip
   8306c:	ea95 0f0c 	teqne	r5, ip
   83070:	f000 f8a7 	bleq	831c2 <__aeabi_ddiv+0x16e>
   83074:	eba4 0405 	sub.w	r4, r4, r5
   83078:	ea81 0e03 	eor.w	lr, r1, r3
   8307c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   83080:	ea4f 3101 	mov.w	r1, r1, lsl #12
   83084:	f000 8088 	beq.w	83198 <__aeabi_ddiv+0x144>
   83088:	ea4f 3303 	mov.w	r3, r3, lsl #12
   8308c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   83090:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   83094:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   83098:	ea4f 2202 	mov.w	r2, r2, lsl #8
   8309c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   830a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   830a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
   830a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   830ac:	429d      	cmp	r5, r3
   830ae:	bf08      	it	eq
   830b0:	4296      	cmpeq	r6, r2
   830b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   830b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
   830ba:	d202      	bcs.n	830c2 <__aeabi_ddiv+0x6e>
   830bc:	085b      	lsrs	r3, r3, #1
   830be:	ea4f 0232 	mov.w	r2, r2, rrx
   830c2:	1ab6      	subs	r6, r6, r2
   830c4:	eb65 0503 	sbc.w	r5, r5, r3
   830c8:	085b      	lsrs	r3, r3, #1
   830ca:	ea4f 0232 	mov.w	r2, r2, rrx
   830ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   830d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   830d6:	ebb6 0e02 	subs.w	lr, r6, r2
   830da:	eb75 0e03 	sbcs.w	lr, r5, r3
   830de:	bf22      	ittt	cs
   830e0:	1ab6      	subcs	r6, r6, r2
   830e2:	4675      	movcs	r5, lr
   830e4:	ea40 000c 	orrcs.w	r0, r0, ip
   830e8:	085b      	lsrs	r3, r3, #1
   830ea:	ea4f 0232 	mov.w	r2, r2, rrx
   830ee:	ebb6 0e02 	subs.w	lr, r6, r2
   830f2:	eb75 0e03 	sbcs.w	lr, r5, r3
   830f6:	bf22      	ittt	cs
   830f8:	1ab6      	subcs	r6, r6, r2
   830fa:	4675      	movcs	r5, lr
   830fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   83100:	085b      	lsrs	r3, r3, #1
   83102:	ea4f 0232 	mov.w	r2, r2, rrx
   83106:	ebb6 0e02 	subs.w	lr, r6, r2
   8310a:	eb75 0e03 	sbcs.w	lr, r5, r3
   8310e:	bf22      	ittt	cs
   83110:	1ab6      	subcs	r6, r6, r2
   83112:	4675      	movcs	r5, lr
   83114:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   83118:	085b      	lsrs	r3, r3, #1
   8311a:	ea4f 0232 	mov.w	r2, r2, rrx
   8311e:	ebb6 0e02 	subs.w	lr, r6, r2
   83122:	eb75 0e03 	sbcs.w	lr, r5, r3
   83126:	bf22      	ittt	cs
   83128:	1ab6      	subcs	r6, r6, r2
   8312a:	4675      	movcs	r5, lr
   8312c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   83130:	ea55 0e06 	orrs.w	lr, r5, r6
   83134:	d018      	beq.n	83168 <__aeabi_ddiv+0x114>
   83136:	ea4f 1505 	mov.w	r5, r5, lsl #4
   8313a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   8313e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   83142:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   83146:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   8314a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   8314e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   83152:	d1c0      	bne.n	830d6 <__aeabi_ddiv+0x82>
   83154:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   83158:	d10b      	bne.n	83172 <__aeabi_ddiv+0x11e>
   8315a:	ea41 0100 	orr.w	r1, r1, r0
   8315e:	f04f 0000 	mov.w	r0, #0
   83162:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   83166:	e7b6      	b.n	830d6 <__aeabi_ddiv+0x82>
   83168:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8316c:	bf04      	itt	eq
   8316e:	4301      	orreq	r1, r0
   83170:	2000      	moveq	r0, #0
   83172:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   83176:	bf88      	it	hi
   83178:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8317c:	f63f aeaf 	bhi.w	82ede <__aeabi_dmul+0xde>
   83180:	ebb5 0c03 	subs.w	ip, r5, r3
   83184:	bf04      	itt	eq
   83186:	ebb6 0c02 	subseq.w	ip, r6, r2
   8318a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8318e:	f150 0000 	adcs.w	r0, r0, #0
   83192:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   83196:	bd70      	pop	{r4, r5, r6, pc}
   83198:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   8319c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   831a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   831a4:	bfc2      	ittt	gt
   831a6:	ebd4 050c 	rsbsgt	r5, r4, ip
   831aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   831ae:	bd70      	popgt	{r4, r5, r6, pc}
   831b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   831b4:	f04f 0e00 	mov.w	lr, #0
   831b8:	3c01      	subs	r4, #1
   831ba:	e690      	b.n	82ede <__aeabi_dmul+0xde>
   831bc:	ea45 0e06 	orr.w	lr, r5, r6
   831c0:	e68d      	b.n	82ede <__aeabi_dmul+0xde>
   831c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   831c6:	ea94 0f0c 	teq	r4, ip
   831ca:	bf08      	it	eq
   831cc:	ea95 0f0c 	teqeq	r5, ip
   831d0:	f43f af3b 	beq.w	8304a <__aeabi_dmul+0x24a>
   831d4:	ea94 0f0c 	teq	r4, ip
   831d8:	d10a      	bne.n	831f0 <__aeabi_ddiv+0x19c>
   831da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   831de:	f47f af34 	bne.w	8304a <__aeabi_dmul+0x24a>
   831e2:	ea95 0f0c 	teq	r5, ip
   831e6:	f47f af25 	bne.w	83034 <__aeabi_dmul+0x234>
   831ea:	4610      	mov	r0, r2
   831ec:	4619      	mov	r1, r3
   831ee:	e72c      	b.n	8304a <__aeabi_dmul+0x24a>
   831f0:	ea95 0f0c 	teq	r5, ip
   831f4:	d106      	bne.n	83204 <__aeabi_ddiv+0x1b0>
   831f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   831fa:	f43f aefd 	beq.w	82ff8 <__aeabi_dmul+0x1f8>
   831fe:	4610      	mov	r0, r2
   83200:	4619      	mov	r1, r3
   83202:	e722      	b.n	8304a <__aeabi_dmul+0x24a>
   83204:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   83208:	bf18      	it	ne
   8320a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8320e:	f47f aec5 	bne.w	82f9c <__aeabi_dmul+0x19c>
   83212:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   83216:	f47f af0d 	bne.w	83034 <__aeabi_dmul+0x234>
   8321a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   8321e:	f47f aeeb 	bne.w	82ff8 <__aeabi_dmul+0x1f8>
   83222:	e712      	b.n	8304a <__aeabi_dmul+0x24a>

00083224 <__gedf2>:
   83224:	f04f 3cff 	mov.w	ip, #4294967295
   83228:	e006      	b.n	83238 <__cmpdf2+0x4>
   8322a:	bf00      	nop

0008322c <__ledf2>:
   8322c:	f04f 0c01 	mov.w	ip, #1
   83230:	e002      	b.n	83238 <__cmpdf2+0x4>
   83232:	bf00      	nop

00083234 <__cmpdf2>:
   83234:	f04f 0c01 	mov.w	ip, #1
   83238:	f84d cd04 	str.w	ip, [sp, #-4]!
   8323c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   83240:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   83244:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   83248:	bf18      	it	ne
   8324a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   8324e:	d01b      	beq.n	83288 <__cmpdf2+0x54>
   83250:	b001      	add	sp, #4
   83252:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   83256:	bf0c      	ite	eq
   83258:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   8325c:	ea91 0f03 	teqne	r1, r3
   83260:	bf02      	ittt	eq
   83262:	ea90 0f02 	teqeq	r0, r2
   83266:	2000      	moveq	r0, #0
   83268:	4770      	bxeq	lr
   8326a:	f110 0f00 	cmn.w	r0, #0
   8326e:	ea91 0f03 	teq	r1, r3
   83272:	bf58      	it	pl
   83274:	4299      	cmppl	r1, r3
   83276:	bf08      	it	eq
   83278:	4290      	cmpeq	r0, r2
   8327a:	bf2c      	ite	cs
   8327c:	17d8      	asrcs	r0, r3, #31
   8327e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   83282:	f040 0001 	orr.w	r0, r0, #1
   83286:	4770      	bx	lr
   83288:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8328c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   83290:	d102      	bne.n	83298 <__cmpdf2+0x64>
   83292:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   83296:	d107      	bne.n	832a8 <__cmpdf2+0x74>
   83298:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8329c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   832a0:	d1d6      	bne.n	83250 <__cmpdf2+0x1c>
   832a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   832a6:	d0d3      	beq.n	83250 <__cmpdf2+0x1c>
   832a8:	f85d 0b04 	ldr.w	r0, [sp], #4
   832ac:	4770      	bx	lr
   832ae:	bf00      	nop

000832b0 <__aeabi_cdrcmple>:
   832b0:	4684      	mov	ip, r0
   832b2:	4610      	mov	r0, r2
   832b4:	4662      	mov	r2, ip
   832b6:	468c      	mov	ip, r1
   832b8:	4619      	mov	r1, r3
   832ba:	4663      	mov	r3, ip
   832bc:	e000      	b.n	832c0 <__aeabi_cdcmpeq>
   832be:	bf00      	nop

000832c0 <__aeabi_cdcmpeq>:
   832c0:	b501      	push	{r0, lr}
   832c2:	f7ff ffb7 	bl	83234 <__cmpdf2>
   832c6:	2800      	cmp	r0, #0
   832c8:	bf48      	it	mi
   832ca:	f110 0f00 	cmnmi.w	r0, #0
   832ce:	bd01      	pop	{r0, pc}

000832d0 <__aeabi_dcmpeq>:
   832d0:	f84d ed08 	str.w	lr, [sp, #-8]!
   832d4:	f7ff fff4 	bl	832c0 <__aeabi_cdcmpeq>
   832d8:	bf0c      	ite	eq
   832da:	2001      	moveq	r0, #1
   832dc:	2000      	movne	r0, #0
   832de:	f85d fb08 	ldr.w	pc, [sp], #8
   832e2:	bf00      	nop

000832e4 <__aeabi_dcmplt>:
   832e4:	f84d ed08 	str.w	lr, [sp, #-8]!
   832e8:	f7ff ffea 	bl	832c0 <__aeabi_cdcmpeq>
   832ec:	bf34      	ite	cc
   832ee:	2001      	movcc	r0, #1
   832f0:	2000      	movcs	r0, #0
   832f2:	f85d fb08 	ldr.w	pc, [sp], #8
   832f6:	bf00      	nop

000832f8 <__aeabi_dcmple>:
   832f8:	f84d ed08 	str.w	lr, [sp, #-8]!
   832fc:	f7ff ffe0 	bl	832c0 <__aeabi_cdcmpeq>
   83300:	bf94      	ite	ls
   83302:	2001      	movls	r0, #1
   83304:	2000      	movhi	r0, #0
   83306:	f85d fb08 	ldr.w	pc, [sp], #8
   8330a:	bf00      	nop

0008330c <__aeabi_dcmpge>:
   8330c:	f84d ed08 	str.w	lr, [sp, #-8]!
   83310:	f7ff ffce 	bl	832b0 <__aeabi_cdrcmple>
   83314:	bf94      	ite	ls
   83316:	2001      	movls	r0, #1
   83318:	2000      	movhi	r0, #0
   8331a:	f85d fb08 	ldr.w	pc, [sp], #8
   8331e:	bf00      	nop

00083320 <__aeabi_dcmpgt>:
   83320:	f84d ed08 	str.w	lr, [sp, #-8]!
   83324:	f7ff ffc4 	bl	832b0 <__aeabi_cdrcmple>
   83328:	bf34      	ite	cc
   8332a:	2001      	movcc	r0, #1
   8332c:	2000      	movcs	r0, #0
   8332e:	f85d fb08 	ldr.w	pc, [sp], #8
   83332:	bf00      	nop

00083334 <__libc_init_array>:
   83334:	b570      	push	{r4, r5, r6, lr}
   83336:	4e0f      	ldr	r6, [pc, #60]	; (83374 <__libc_init_array+0x40>)
   83338:	4d0f      	ldr	r5, [pc, #60]	; (83378 <__libc_init_array+0x44>)
   8333a:	1b76      	subs	r6, r6, r5
   8333c:	10b6      	asrs	r6, r6, #2
   8333e:	d007      	beq.n	83350 <__libc_init_array+0x1c>
   83340:	3d04      	subs	r5, #4
   83342:	2400      	movs	r4, #0
   83344:	3401      	adds	r4, #1
   83346:	f855 3f04 	ldr.w	r3, [r5, #4]!
   8334a:	4798      	blx	r3
   8334c:	42a6      	cmp	r6, r4
   8334e:	d1f9      	bne.n	83344 <__libc_init_array+0x10>
   83350:	4e0a      	ldr	r6, [pc, #40]	; (8337c <__libc_init_array+0x48>)
   83352:	4d0b      	ldr	r5, [pc, #44]	; (83380 <__libc_init_array+0x4c>)
   83354:	f002 fff4 	bl	86340 <_init>
   83358:	1b76      	subs	r6, r6, r5
   8335a:	10b6      	asrs	r6, r6, #2
   8335c:	d008      	beq.n	83370 <__libc_init_array+0x3c>
   8335e:	3d04      	subs	r5, #4
   83360:	2400      	movs	r4, #0
   83362:	3401      	adds	r4, #1
   83364:	f855 3f04 	ldr.w	r3, [r5, #4]!
   83368:	4798      	blx	r3
   8336a:	42a6      	cmp	r6, r4
   8336c:	d1f9      	bne.n	83362 <__libc_init_array+0x2e>
   8336e:	bd70      	pop	{r4, r5, r6, pc}
   83370:	bd70      	pop	{r4, r5, r6, pc}
   83372:	bf00      	nop
   83374:	0008634c 	.word	0x0008634c
   83378:	0008634c 	.word	0x0008634c
   8337c:	00086354 	.word	0x00086354
   83380:	0008634c 	.word	0x0008634c

00083384 <iprintf>:
   83384:	b40f      	push	{r0, r1, r2, r3}
   83386:	b510      	push	{r4, lr}
   83388:	4b07      	ldr	r3, [pc, #28]	; (833a8 <iprintf+0x24>)
   8338a:	b082      	sub	sp, #8
   8338c:	ac04      	add	r4, sp, #16
   8338e:	f854 2b04 	ldr.w	r2, [r4], #4
   83392:	6818      	ldr	r0, [r3, #0]
   83394:	4623      	mov	r3, r4
   83396:	6881      	ldr	r1, [r0, #8]
   83398:	9401      	str	r4, [sp, #4]
   8339a:	f000 f98b 	bl	836b4 <_vfiprintf_r>
   8339e:	b002      	add	sp, #8
   833a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   833a4:	b004      	add	sp, #16
   833a6:	4770      	bx	lr
   833a8:	20070608 	.word	0x20070608

000833ac <memcpy>:
   833ac:	4684      	mov	ip, r0
   833ae:	ea41 0300 	orr.w	r3, r1, r0
   833b2:	f013 0303 	ands.w	r3, r3, #3
   833b6:	d149      	bne.n	8344c <memcpy+0xa0>
   833b8:	3a40      	subs	r2, #64	; 0x40
   833ba:	d323      	bcc.n	83404 <memcpy+0x58>
   833bc:	680b      	ldr	r3, [r1, #0]
   833be:	6003      	str	r3, [r0, #0]
   833c0:	684b      	ldr	r3, [r1, #4]
   833c2:	6043      	str	r3, [r0, #4]
   833c4:	688b      	ldr	r3, [r1, #8]
   833c6:	6083      	str	r3, [r0, #8]
   833c8:	68cb      	ldr	r3, [r1, #12]
   833ca:	60c3      	str	r3, [r0, #12]
   833cc:	690b      	ldr	r3, [r1, #16]
   833ce:	6103      	str	r3, [r0, #16]
   833d0:	694b      	ldr	r3, [r1, #20]
   833d2:	6143      	str	r3, [r0, #20]
   833d4:	698b      	ldr	r3, [r1, #24]
   833d6:	6183      	str	r3, [r0, #24]
   833d8:	69cb      	ldr	r3, [r1, #28]
   833da:	61c3      	str	r3, [r0, #28]
   833dc:	6a0b      	ldr	r3, [r1, #32]
   833de:	6203      	str	r3, [r0, #32]
   833e0:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   833e2:	6243      	str	r3, [r0, #36]	; 0x24
   833e4:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   833e6:	6283      	str	r3, [r0, #40]	; 0x28
   833e8:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   833ea:	62c3      	str	r3, [r0, #44]	; 0x2c
   833ec:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   833ee:	6303      	str	r3, [r0, #48]	; 0x30
   833f0:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   833f2:	6343      	str	r3, [r0, #52]	; 0x34
   833f4:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   833f6:	6383      	str	r3, [r0, #56]	; 0x38
   833f8:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   833fa:	63c3      	str	r3, [r0, #60]	; 0x3c
   833fc:	3040      	adds	r0, #64	; 0x40
   833fe:	3140      	adds	r1, #64	; 0x40
   83400:	3a40      	subs	r2, #64	; 0x40
   83402:	d2db      	bcs.n	833bc <memcpy+0x10>
   83404:	3230      	adds	r2, #48	; 0x30
   83406:	d30b      	bcc.n	83420 <memcpy+0x74>
   83408:	680b      	ldr	r3, [r1, #0]
   8340a:	6003      	str	r3, [r0, #0]
   8340c:	684b      	ldr	r3, [r1, #4]
   8340e:	6043      	str	r3, [r0, #4]
   83410:	688b      	ldr	r3, [r1, #8]
   83412:	6083      	str	r3, [r0, #8]
   83414:	68cb      	ldr	r3, [r1, #12]
   83416:	60c3      	str	r3, [r0, #12]
   83418:	3010      	adds	r0, #16
   8341a:	3110      	adds	r1, #16
   8341c:	3a10      	subs	r2, #16
   8341e:	d2f3      	bcs.n	83408 <memcpy+0x5c>
   83420:	320c      	adds	r2, #12
   83422:	d305      	bcc.n	83430 <memcpy+0x84>
   83424:	f851 3b04 	ldr.w	r3, [r1], #4
   83428:	f840 3b04 	str.w	r3, [r0], #4
   8342c:	3a04      	subs	r2, #4
   8342e:	d2f9      	bcs.n	83424 <memcpy+0x78>
   83430:	3204      	adds	r2, #4
   83432:	d008      	beq.n	83446 <memcpy+0x9a>
   83434:	07d2      	lsls	r2, r2, #31
   83436:	bf1c      	itt	ne
   83438:	f811 3b01 	ldrbne.w	r3, [r1], #1
   8343c:	f800 3b01 	strbne.w	r3, [r0], #1
   83440:	d301      	bcc.n	83446 <memcpy+0x9a>
   83442:	880b      	ldrh	r3, [r1, #0]
   83444:	8003      	strh	r3, [r0, #0]
   83446:	4660      	mov	r0, ip
   83448:	4770      	bx	lr
   8344a:	bf00      	nop
   8344c:	2a08      	cmp	r2, #8
   8344e:	d313      	bcc.n	83478 <memcpy+0xcc>
   83450:	078b      	lsls	r3, r1, #30
   83452:	d0b1      	beq.n	833b8 <memcpy+0xc>
   83454:	f010 0303 	ands.w	r3, r0, #3
   83458:	d0ae      	beq.n	833b8 <memcpy+0xc>
   8345a:	f1c3 0304 	rsb	r3, r3, #4
   8345e:	1ad2      	subs	r2, r2, r3
   83460:	07db      	lsls	r3, r3, #31
   83462:	bf1c      	itt	ne
   83464:	f811 3b01 	ldrbne.w	r3, [r1], #1
   83468:	f800 3b01 	strbne.w	r3, [r0], #1
   8346c:	d3a4      	bcc.n	833b8 <memcpy+0xc>
   8346e:	f831 3b02 	ldrh.w	r3, [r1], #2
   83472:	f820 3b02 	strh.w	r3, [r0], #2
   83476:	e79f      	b.n	833b8 <memcpy+0xc>
   83478:	3a04      	subs	r2, #4
   8347a:	d3d9      	bcc.n	83430 <memcpy+0x84>
   8347c:	3a01      	subs	r2, #1
   8347e:	f811 3b01 	ldrb.w	r3, [r1], #1
   83482:	f800 3b01 	strb.w	r3, [r0], #1
   83486:	d2f9      	bcs.n	8347c <memcpy+0xd0>
   83488:	780b      	ldrb	r3, [r1, #0]
   8348a:	7003      	strb	r3, [r0, #0]
   8348c:	784b      	ldrb	r3, [r1, #1]
   8348e:	7043      	strb	r3, [r0, #1]
   83490:	788b      	ldrb	r3, [r1, #2]
   83492:	7083      	strb	r3, [r0, #2]
   83494:	4660      	mov	r0, ip
   83496:	4770      	bx	lr

00083498 <memset>:
   83498:	b4f0      	push	{r4, r5, r6, r7}
   8349a:	0784      	lsls	r4, r0, #30
   8349c:	d043      	beq.n	83526 <memset+0x8e>
   8349e:	1e54      	subs	r4, r2, #1
   834a0:	2a00      	cmp	r2, #0
   834a2:	d03e      	beq.n	83522 <memset+0x8a>
   834a4:	b2cd      	uxtb	r5, r1
   834a6:	4603      	mov	r3, r0
   834a8:	e003      	b.n	834b2 <memset+0x1a>
   834aa:	1e62      	subs	r2, r4, #1
   834ac:	2c00      	cmp	r4, #0
   834ae:	d038      	beq.n	83522 <memset+0x8a>
   834b0:	4614      	mov	r4, r2
   834b2:	f803 5b01 	strb.w	r5, [r3], #1
   834b6:	079a      	lsls	r2, r3, #30
   834b8:	d1f7      	bne.n	834aa <memset+0x12>
   834ba:	2c03      	cmp	r4, #3
   834bc:	d92a      	bls.n	83514 <memset+0x7c>
   834be:	b2cd      	uxtb	r5, r1
   834c0:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   834c4:	2c0f      	cmp	r4, #15
   834c6:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   834ca:	d915      	bls.n	834f8 <memset+0x60>
   834cc:	f1a4 0710 	sub.w	r7, r4, #16
   834d0:	093f      	lsrs	r7, r7, #4
   834d2:	f103 0610 	add.w	r6, r3, #16
   834d6:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   834da:	461a      	mov	r2, r3
   834dc:	6015      	str	r5, [r2, #0]
   834de:	6055      	str	r5, [r2, #4]
   834e0:	6095      	str	r5, [r2, #8]
   834e2:	60d5      	str	r5, [r2, #12]
   834e4:	3210      	adds	r2, #16
   834e6:	42b2      	cmp	r2, r6
   834e8:	d1f8      	bne.n	834dc <memset+0x44>
   834ea:	f004 040f 	and.w	r4, r4, #15
   834ee:	3701      	adds	r7, #1
   834f0:	2c03      	cmp	r4, #3
   834f2:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   834f6:	d90d      	bls.n	83514 <memset+0x7c>
   834f8:	461e      	mov	r6, r3
   834fa:	4622      	mov	r2, r4
   834fc:	3a04      	subs	r2, #4
   834fe:	2a03      	cmp	r2, #3
   83500:	f846 5b04 	str.w	r5, [r6], #4
   83504:	d8fa      	bhi.n	834fc <memset+0x64>
   83506:	1f22      	subs	r2, r4, #4
   83508:	f022 0203 	bic.w	r2, r2, #3
   8350c:	3204      	adds	r2, #4
   8350e:	4413      	add	r3, r2
   83510:	f004 0403 	and.w	r4, r4, #3
   83514:	b12c      	cbz	r4, 83522 <memset+0x8a>
   83516:	b2c9      	uxtb	r1, r1
   83518:	441c      	add	r4, r3
   8351a:	f803 1b01 	strb.w	r1, [r3], #1
   8351e:	42a3      	cmp	r3, r4
   83520:	d1fb      	bne.n	8351a <memset+0x82>
   83522:	bcf0      	pop	{r4, r5, r6, r7}
   83524:	4770      	bx	lr
   83526:	4614      	mov	r4, r2
   83528:	4603      	mov	r3, r0
   8352a:	e7c6      	b.n	834ba <memset+0x22>

0008352c <setbuf>:
   8352c:	2900      	cmp	r1, #0
   8352e:	bf0c      	ite	eq
   83530:	2202      	moveq	r2, #2
   83532:	2200      	movne	r2, #0
   83534:	f44f 6380 	mov.w	r3, #1024	; 0x400
   83538:	f000 b800 	b.w	8353c <setvbuf>

0008353c <setvbuf>:
   8353c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83540:	4d3c      	ldr	r5, [pc, #240]	; (83634 <setvbuf+0xf8>)
   83542:	4604      	mov	r4, r0
   83544:	682d      	ldr	r5, [r5, #0]
   83546:	4688      	mov	r8, r1
   83548:	4616      	mov	r6, r2
   8354a:	461f      	mov	r7, r3
   8354c:	b115      	cbz	r5, 83554 <setvbuf+0x18>
   8354e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   83550:	2b00      	cmp	r3, #0
   83552:	d04f      	beq.n	835f4 <setvbuf+0xb8>
   83554:	2e02      	cmp	r6, #2
   83556:	d830      	bhi.n	835ba <setvbuf+0x7e>
   83558:	2f00      	cmp	r7, #0
   8355a:	db2e      	blt.n	835ba <setvbuf+0x7e>
   8355c:	4628      	mov	r0, r5
   8355e:	4621      	mov	r1, r4
   83560:	f001 f826 	bl	845b0 <_fflush_r>
   83564:	89a3      	ldrh	r3, [r4, #12]
   83566:	2200      	movs	r2, #0
   83568:	6062      	str	r2, [r4, #4]
   8356a:	61a2      	str	r2, [r4, #24]
   8356c:	061a      	lsls	r2, r3, #24
   8356e:	d428      	bmi.n	835c2 <setvbuf+0x86>
   83570:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   83574:	b29b      	uxth	r3, r3
   83576:	2e02      	cmp	r6, #2
   83578:	81a3      	strh	r3, [r4, #12]
   8357a:	d02d      	beq.n	835d8 <setvbuf+0x9c>
   8357c:	f1b8 0f00 	cmp.w	r8, #0
   83580:	d03c      	beq.n	835fc <setvbuf+0xc0>
   83582:	2e01      	cmp	r6, #1
   83584:	d013      	beq.n	835ae <setvbuf+0x72>
   83586:	b29b      	uxth	r3, r3
   83588:	f003 0008 	and.w	r0, r3, #8
   8358c:	4a2a      	ldr	r2, [pc, #168]	; (83638 <setvbuf+0xfc>)
   8358e:	b280      	uxth	r0, r0
   83590:	63ea      	str	r2, [r5, #60]	; 0x3c
   83592:	f8c4 8000 	str.w	r8, [r4]
   83596:	f8c4 8010 	str.w	r8, [r4, #16]
   8359a:	6167      	str	r7, [r4, #20]
   8359c:	b178      	cbz	r0, 835be <setvbuf+0x82>
   8359e:	f013 0f03 	tst.w	r3, #3
   835a2:	bf18      	it	ne
   835a4:	2700      	movne	r7, #0
   835a6:	60a7      	str	r7, [r4, #8]
   835a8:	2000      	movs	r0, #0
   835aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   835ae:	f043 0301 	orr.w	r3, r3, #1
   835b2:	427a      	negs	r2, r7
   835b4:	81a3      	strh	r3, [r4, #12]
   835b6:	61a2      	str	r2, [r4, #24]
   835b8:	e7e5      	b.n	83586 <setvbuf+0x4a>
   835ba:	f04f 30ff 	mov.w	r0, #4294967295
   835be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   835c2:	4628      	mov	r0, r5
   835c4:	6921      	ldr	r1, [r4, #16]
   835c6:	f001 f953 	bl	84870 <_free_r>
   835ca:	89a3      	ldrh	r3, [r4, #12]
   835cc:	2e02      	cmp	r6, #2
   835ce:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   835d2:	b29b      	uxth	r3, r3
   835d4:	81a3      	strh	r3, [r4, #12]
   835d6:	d1d1      	bne.n	8357c <setvbuf+0x40>
   835d8:	2000      	movs	r0, #0
   835da:	f104 0243 	add.w	r2, r4, #67	; 0x43
   835de:	f043 0302 	orr.w	r3, r3, #2
   835e2:	2500      	movs	r5, #0
   835e4:	2101      	movs	r1, #1
   835e6:	81a3      	strh	r3, [r4, #12]
   835e8:	60a5      	str	r5, [r4, #8]
   835ea:	6022      	str	r2, [r4, #0]
   835ec:	6122      	str	r2, [r4, #16]
   835ee:	6161      	str	r1, [r4, #20]
   835f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   835f4:	4628      	mov	r0, r5
   835f6:	f000 fff7 	bl	845e8 <__sinit>
   835fa:	e7ab      	b.n	83554 <setvbuf+0x18>
   835fc:	2f00      	cmp	r7, #0
   835fe:	bf08      	it	eq
   83600:	f44f 6780 	moveq.w	r7, #1024	; 0x400
   83604:	4638      	mov	r0, r7
   83606:	f001 fc29 	bl	84e5c <malloc>
   8360a:	4680      	mov	r8, r0
   8360c:	b128      	cbz	r0, 8361a <setvbuf+0xde>
   8360e:	89a3      	ldrh	r3, [r4, #12]
   83610:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   83614:	b29b      	uxth	r3, r3
   83616:	81a3      	strh	r3, [r4, #12]
   83618:	e7b3      	b.n	83582 <setvbuf+0x46>
   8361a:	f44f 6080 	mov.w	r0, #1024	; 0x400
   8361e:	f001 fc1d 	bl	84e5c <malloc>
   83622:	4680      	mov	r8, r0
   83624:	b918      	cbnz	r0, 8362e <setvbuf+0xf2>
   83626:	89a3      	ldrh	r3, [r4, #12]
   83628:	f04f 30ff 	mov.w	r0, #4294967295
   8362c:	e7d5      	b.n	835da <setvbuf+0x9e>
   8362e:	f44f 6780 	mov.w	r7, #1024	; 0x400
   83632:	e7ec      	b.n	8360e <setvbuf+0xd2>
   83634:	20070608 	.word	0x20070608
   83638:	000845dd 	.word	0x000845dd

0008363c <__sprint_r.part.0>:
   8363c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   8363e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   83642:	049c      	lsls	r4, r3, #18
   83644:	460e      	mov	r6, r1
   83646:	4680      	mov	r8, r0
   83648:	4691      	mov	r9, r2
   8364a:	d52a      	bpl.n	836a2 <__sprint_r.part.0+0x66>
   8364c:	6893      	ldr	r3, [r2, #8]
   8364e:	6812      	ldr	r2, [r2, #0]
   83650:	f102 0a08 	add.w	sl, r2, #8
   83654:	b31b      	cbz	r3, 8369e <__sprint_r.part.0+0x62>
   83656:	e91a 00a0 	ldmdb	sl, {r5, r7}
   8365a:	08bf      	lsrs	r7, r7, #2
   8365c:	d017      	beq.n	8368e <__sprint_r.part.0+0x52>
   8365e:	3d04      	subs	r5, #4
   83660:	2400      	movs	r4, #0
   83662:	e001      	b.n	83668 <__sprint_r.part.0+0x2c>
   83664:	42a7      	cmp	r7, r4
   83666:	d010      	beq.n	8368a <__sprint_r.part.0+0x4e>
   83668:	4640      	mov	r0, r8
   8366a:	f855 1f04 	ldr.w	r1, [r5, #4]!
   8366e:	4632      	mov	r2, r6
   83670:	f001 f850 	bl	84714 <_fputwc_r>
   83674:	1c43      	adds	r3, r0, #1
   83676:	f104 0401 	add.w	r4, r4, #1
   8367a:	d1f3      	bne.n	83664 <__sprint_r.part.0+0x28>
   8367c:	2300      	movs	r3, #0
   8367e:	f8c9 3008 	str.w	r3, [r9, #8]
   83682:	f8c9 3004 	str.w	r3, [r9, #4]
   83686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8368a:	f8d9 3008 	ldr.w	r3, [r9, #8]
   8368e:	eba3 0387 	sub.w	r3, r3, r7, lsl #2
   83692:	f8c9 3008 	str.w	r3, [r9, #8]
   83696:	f10a 0a08 	add.w	sl, sl, #8
   8369a:	2b00      	cmp	r3, #0
   8369c:	d1db      	bne.n	83656 <__sprint_r.part.0+0x1a>
   8369e:	2000      	movs	r0, #0
   836a0:	e7ec      	b.n	8367c <__sprint_r.part.0+0x40>
   836a2:	f001 f9b1 	bl	84a08 <__sfvwrite_r>
   836a6:	2300      	movs	r3, #0
   836a8:	f8c9 3008 	str.w	r3, [r9, #8]
   836ac:	f8c9 3004 	str.w	r3, [r9, #4]
   836b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000836b4 <_vfiprintf_r>:
   836b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   836b8:	b0b1      	sub	sp, #196	; 0xc4
   836ba:	461c      	mov	r4, r3
   836bc:	9102      	str	r1, [sp, #8]
   836be:	4690      	mov	r8, r2
   836c0:	9308      	str	r3, [sp, #32]
   836c2:	9006      	str	r0, [sp, #24]
   836c4:	b118      	cbz	r0, 836ce <_vfiprintf_r+0x1a>
   836c6:	6b83      	ldr	r3, [r0, #56]	; 0x38
   836c8:	2b00      	cmp	r3, #0
   836ca:	f000 80e8 	beq.w	8389e <_vfiprintf_r+0x1ea>
   836ce:	9d02      	ldr	r5, [sp, #8]
   836d0:	89ab      	ldrh	r3, [r5, #12]
   836d2:	b29a      	uxth	r2, r3
   836d4:	0490      	lsls	r0, r2, #18
   836d6:	d407      	bmi.n	836e8 <_vfiprintf_r+0x34>
   836d8:	6e6a      	ldr	r2, [r5, #100]	; 0x64
   836da:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   836de:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
   836e2:	81ab      	strh	r3, [r5, #12]
   836e4:	b29a      	uxth	r2, r3
   836e6:	6669      	str	r1, [r5, #100]	; 0x64
   836e8:	0711      	lsls	r1, r2, #28
   836ea:	f140 80b7 	bpl.w	8385c <_vfiprintf_r+0x1a8>
   836ee:	f8dd b008 	ldr.w	fp, [sp, #8]
   836f2:	f8db 3010 	ldr.w	r3, [fp, #16]
   836f6:	2b00      	cmp	r3, #0
   836f8:	f000 80b0 	beq.w	8385c <_vfiprintf_r+0x1a8>
   836fc:	f002 021a 	and.w	r2, r2, #26
   83700:	2a0a      	cmp	r2, #10
   83702:	f000 80b7 	beq.w	83874 <_vfiprintf_r+0x1c0>
   83706:	2300      	movs	r3, #0
   83708:	f10d 0980 	add.w	r9, sp, #128	; 0x80
   8370c:	930a      	str	r3, [sp, #40]	; 0x28
   8370e:	9315      	str	r3, [sp, #84]	; 0x54
   83710:	9314      	str	r3, [sp, #80]	; 0x50
   83712:	9309      	str	r3, [sp, #36]	; 0x24
   83714:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
   83718:	464e      	mov	r6, r9
   8371a:	f898 3000 	ldrb.w	r3, [r8]
   8371e:	2b00      	cmp	r3, #0
   83720:	f000 84c8 	beq.w	840b4 <_vfiprintf_r+0xa00>
   83724:	2b25      	cmp	r3, #37	; 0x25
   83726:	f000 84c5 	beq.w	840b4 <_vfiprintf_r+0xa00>
   8372a:	f108 0201 	add.w	r2, r8, #1
   8372e:	e001      	b.n	83734 <_vfiprintf_r+0x80>
   83730:	2b25      	cmp	r3, #37	; 0x25
   83732:	d004      	beq.n	8373e <_vfiprintf_r+0x8a>
   83734:	7813      	ldrb	r3, [r2, #0]
   83736:	4614      	mov	r4, r2
   83738:	3201      	adds	r2, #1
   8373a:	2b00      	cmp	r3, #0
   8373c:	d1f8      	bne.n	83730 <_vfiprintf_r+0x7c>
   8373e:	ebc8 0504 	rsb	r5, r8, r4
   83742:	b195      	cbz	r5, 8376a <_vfiprintf_r+0xb6>
   83744:	9b14      	ldr	r3, [sp, #80]	; 0x50
   83746:	9a15      	ldr	r2, [sp, #84]	; 0x54
   83748:	3301      	adds	r3, #1
   8374a:	442a      	add	r2, r5
   8374c:	2b07      	cmp	r3, #7
   8374e:	f8c6 8000 	str.w	r8, [r6]
   83752:	6075      	str	r5, [r6, #4]
   83754:	9215      	str	r2, [sp, #84]	; 0x54
   83756:	9314      	str	r3, [sp, #80]	; 0x50
   83758:	dd7b      	ble.n	83852 <_vfiprintf_r+0x19e>
   8375a:	2a00      	cmp	r2, #0
   8375c:	f040 84d5 	bne.w	8410a <_vfiprintf_r+0xa56>
   83760:	9809      	ldr	r0, [sp, #36]	; 0x24
   83762:	9214      	str	r2, [sp, #80]	; 0x50
   83764:	4428      	add	r0, r5
   83766:	464e      	mov	r6, r9
   83768:	9009      	str	r0, [sp, #36]	; 0x24
   8376a:	7823      	ldrb	r3, [r4, #0]
   8376c:	2b00      	cmp	r3, #0
   8376e:	f000 83ed 	beq.w	83f4c <_vfiprintf_r+0x898>
   83772:	2100      	movs	r1, #0
   83774:	f04f 0200 	mov.w	r2, #0
   83778:	f04f 3cff 	mov.w	ip, #4294967295
   8377c:	7863      	ldrb	r3, [r4, #1]
   8377e:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
   83782:	9104      	str	r1, [sp, #16]
   83784:	468a      	mov	sl, r1
   83786:	f104 0801 	add.w	r8, r4, #1
   8378a:	4608      	mov	r0, r1
   8378c:	4665      	mov	r5, ip
   8378e:	f108 0801 	add.w	r8, r8, #1
   83792:	f1a3 0220 	sub.w	r2, r3, #32
   83796:	2a58      	cmp	r2, #88	; 0x58
   83798:	f200 82d9 	bhi.w	83d4e <_vfiprintf_r+0x69a>
   8379c:	e8df f012 	tbh	[pc, r2, lsl #1]
   837a0:	02d702cb 	.word	0x02d702cb
   837a4:	02d202d7 	.word	0x02d202d7
   837a8:	02d702d7 	.word	0x02d702d7
   837ac:	02d702d7 	.word	0x02d702d7
   837b0:	02d702d7 	.word	0x02d702d7
   837b4:	028f0282 	.word	0x028f0282
   837b8:	008402d7 	.word	0x008402d7
   837bc:	02d70293 	.word	0x02d70293
   837c0:	0196012b 	.word	0x0196012b
   837c4:	01960196 	.word	0x01960196
   837c8:	01960196 	.word	0x01960196
   837cc:	01960196 	.word	0x01960196
   837d0:	01960196 	.word	0x01960196
   837d4:	02d702d7 	.word	0x02d702d7
   837d8:	02d702d7 	.word	0x02d702d7
   837dc:	02d702d7 	.word	0x02d702d7
   837e0:	02d702d7 	.word	0x02d702d7
   837e4:	02d702d7 	.word	0x02d702d7
   837e8:	02d70130 	.word	0x02d70130
   837ec:	02d702d7 	.word	0x02d702d7
   837f0:	02d702d7 	.word	0x02d702d7
   837f4:	02d702d7 	.word	0x02d702d7
   837f8:	02d702d7 	.word	0x02d702d7
   837fc:	017b02d7 	.word	0x017b02d7
   83800:	02d702d7 	.word	0x02d702d7
   83804:	02d702d7 	.word	0x02d702d7
   83808:	01a402d7 	.word	0x01a402d7
   8380c:	02d702d7 	.word	0x02d702d7
   83810:	02d701bf 	.word	0x02d701bf
   83814:	02d702d7 	.word	0x02d702d7
   83818:	02d702d7 	.word	0x02d702d7
   8381c:	02d702d7 	.word	0x02d702d7
   83820:	02d702d7 	.word	0x02d702d7
   83824:	01e402d7 	.word	0x01e402d7
   83828:	02d701fa 	.word	0x02d701fa
   8382c:	02d702d7 	.word	0x02d702d7
   83830:	01fa0216 	.word	0x01fa0216
   83834:	02d702d7 	.word	0x02d702d7
   83838:	02d7021b 	.word	0x02d7021b
   8383c:	00890228 	.word	0x00890228
   83840:	027d0266 	.word	0x027d0266
   83844:	023a02d7 	.word	0x023a02d7
   83848:	011902d7 	.word	0x011902d7
   8384c:	02d702d7 	.word	0x02d702d7
   83850:	02af      	.short	0x02af
   83852:	3608      	adds	r6, #8
   83854:	9809      	ldr	r0, [sp, #36]	; 0x24
   83856:	4428      	add	r0, r5
   83858:	9009      	str	r0, [sp, #36]	; 0x24
   8385a:	e786      	b.n	8376a <_vfiprintf_r+0xb6>
   8385c:	9806      	ldr	r0, [sp, #24]
   8385e:	9902      	ldr	r1, [sp, #8]
   83860:	f000 fd90 	bl	84384 <__swsetup_r>
   83864:	b9b0      	cbnz	r0, 83894 <_vfiprintf_r+0x1e0>
   83866:	9d02      	ldr	r5, [sp, #8]
   83868:	89aa      	ldrh	r2, [r5, #12]
   8386a:	f002 021a 	and.w	r2, r2, #26
   8386e:	2a0a      	cmp	r2, #10
   83870:	f47f af49 	bne.w	83706 <_vfiprintf_r+0x52>
   83874:	f8dd b008 	ldr.w	fp, [sp, #8]
   83878:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
   8387c:	2b00      	cmp	r3, #0
   8387e:	f6ff af42 	blt.w	83706 <_vfiprintf_r+0x52>
   83882:	9806      	ldr	r0, [sp, #24]
   83884:	4659      	mov	r1, fp
   83886:	4642      	mov	r2, r8
   83888:	4623      	mov	r3, r4
   8388a:	f000 fd3d 	bl	84308 <__sbprintf>
   8388e:	b031      	add	sp, #196	; 0xc4
   83890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83894:	f04f 30ff 	mov.w	r0, #4294967295
   83898:	b031      	add	sp, #196	; 0xc4
   8389a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8389e:	f000 fea3 	bl	845e8 <__sinit>
   838a2:	e714      	b.n	836ce <_vfiprintf_r+0x1a>
   838a4:	4240      	negs	r0, r0
   838a6:	9308      	str	r3, [sp, #32]
   838a8:	f04a 0a04 	orr.w	sl, sl, #4
   838ac:	f898 3000 	ldrb.w	r3, [r8]
   838b0:	e76d      	b.n	8378e <_vfiprintf_r+0xda>
   838b2:	f01a 0320 	ands.w	r3, sl, #32
   838b6:	9004      	str	r0, [sp, #16]
   838b8:	46ac      	mov	ip, r5
   838ba:	f000 80f4 	beq.w	83aa6 <_vfiprintf_r+0x3f2>
   838be:	f8dd b020 	ldr.w	fp, [sp, #32]
   838c2:	f10b 0307 	add.w	r3, fp, #7
   838c6:	f023 0307 	bic.w	r3, r3, #7
   838ca:	f103 0408 	add.w	r4, r3, #8
   838ce:	9408      	str	r4, [sp, #32]
   838d0:	e9d3 4500 	ldrd	r4, r5, [r3]
   838d4:	2300      	movs	r3, #0
   838d6:	f04f 0000 	mov.w	r0, #0
   838da:	2100      	movs	r1, #0
   838dc:	f88d 0047 	strb.w	r0, [sp, #71]	; 0x47
   838e0:	f8cd c014 	str.w	ip, [sp, #20]
   838e4:	9107      	str	r1, [sp, #28]
   838e6:	f1bc 0f00 	cmp.w	ip, #0
   838ea:	bfa8      	it	ge
   838ec:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
   838f0:	ea54 0205 	orrs.w	r2, r4, r5
   838f4:	f040 80ad 	bne.w	83a52 <_vfiprintf_r+0x39e>
   838f8:	f1bc 0f00 	cmp.w	ip, #0
   838fc:	f040 80a9 	bne.w	83a52 <_vfiprintf_r+0x39e>
   83900:	2b00      	cmp	r3, #0
   83902:	f040 83c0 	bne.w	84086 <_vfiprintf_r+0x9d2>
   83906:	f01a 0f01 	tst.w	sl, #1
   8390a:	f000 83bc 	beq.w	84086 <_vfiprintf_r+0x9d2>
   8390e:	2330      	movs	r3, #48	; 0x30
   83910:	af30      	add	r7, sp, #192	; 0xc0
   83912:	f807 3d41 	strb.w	r3, [r7, #-65]!
   83916:	ebc7 0409 	rsb	r4, r7, r9
   8391a:	9405      	str	r4, [sp, #20]
   8391c:	f8dd b014 	ldr.w	fp, [sp, #20]
   83920:	9c07      	ldr	r4, [sp, #28]
   83922:	45e3      	cmp	fp, ip
   83924:	bfb8      	it	lt
   83926:	46e3      	movlt	fp, ip
   83928:	f8cd b00c 	str.w	fp, [sp, #12]
   8392c:	b11c      	cbz	r4, 83936 <_vfiprintf_r+0x282>
   8392e:	f10b 0b01 	add.w	fp, fp, #1
   83932:	f8cd b00c 	str.w	fp, [sp, #12]
   83936:	f01a 0502 	ands.w	r5, sl, #2
   8393a:	9507      	str	r5, [sp, #28]
   8393c:	d005      	beq.n	8394a <_vfiprintf_r+0x296>
   8393e:	f8dd b00c 	ldr.w	fp, [sp, #12]
   83942:	f10b 0b02 	add.w	fp, fp, #2
   83946:	f8cd b00c 	str.w	fp, [sp, #12]
   8394a:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
   8394e:	930b      	str	r3, [sp, #44]	; 0x2c
   83950:	f040 821b 	bne.w	83d8a <_vfiprintf_r+0x6d6>
   83954:	9d04      	ldr	r5, [sp, #16]
   83956:	f8dd b00c 	ldr.w	fp, [sp, #12]
   8395a:	ebcb 0405 	rsb	r4, fp, r5
   8395e:	2c00      	cmp	r4, #0
   83960:	f340 8213 	ble.w	83d8a <_vfiprintf_r+0x6d6>
   83964:	2c10      	cmp	r4, #16
   83966:	f340 8489 	ble.w	8427c <_vfiprintf_r+0xbc8>
   8396a:	4dbe      	ldr	r5, [pc, #760]	; (83c64 <_vfiprintf_r+0x5b0>)
   8396c:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8396e:	462b      	mov	r3, r5
   83970:	9814      	ldr	r0, [sp, #80]	; 0x50
   83972:	4625      	mov	r5, r4
   83974:	f04f 0b10 	mov.w	fp, #16
   83978:	4664      	mov	r4, ip
   8397a:	46b4      	mov	ip, r6
   8397c:	461e      	mov	r6, r3
   8397e:	e006      	b.n	8398e <_vfiprintf_r+0x2da>
   83980:	1c83      	adds	r3, r0, #2
   83982:	f10c 0c08 	add.w	ip, ip, #8
   83986:	4608      	mov	r0, r1
   83988:	3d10      	subs	r5, #16
   8398a:	2d10      	cmp	r5, #16
   8398c:	dd11      	ble.n	839b2 <_vfiprintf_r+0x2fe>
   8398e:	1c41      	adds	r1, r0, #1
   83990:	3210      	adds	r2, #16
   83992:	2907      	cmp	r1, #7
   83994:	9215      	str	r2, [sp, #84]	; 0x54
   83996:	e88c 0840 	stmia.w	ip, {r6, fp}
   8399a:	9114      	str	r1, [sp, #80]	; 0x50
   8399c:	ddf0      	ble.n	83980 <_vfiprintf_r+0x2cc>
   8399e:	2a00      	cmp	r2, #0
   839a0:	f040 81e6 	bne.w	83d70 <_vfiprintf_r+0x6bc>
   839a4:	3d10      	subs	r5, #16
   839a6:	2d10      	cmp	r5, #16
   839a8:	f04f 0301 	mov.w	r3, #1
   839ac:	4610      	mov	r0, r2
   839ae:	46cc      	mov	ip, r9
   839b0:	dced      	bgt.n	8398e <_vfiprintf_r+0x2da>
   839b2:	4631      	mov	r1, r6
   839b4:	4666      	mov	r6, ip
   839b6:	46a4      	mov	ip, r4
   839b8:	462c      	mov	r4, r5
   839ba:	460d      	mov	r5, r1
   839bc:	4422      	add	r2, r4
   839be:	2b07      	cmp	r3, #7
   839c0:	9215      	str	r2, [sp, #84]	; 0x54
   839c2:	6035      	str	r5, [r6, #0]
   839c4:	6074      	str	r4, [r6, #4]
   839c6:	9314      	str	r3, [sp, #80]	; 0x50
   839c8:	f300 836d 	bgt.w	840a6 <_vfiprintf_r+0x9f2>
   839cc:	3608      	adds	r6, #8
   839ce:	1c59      	adds	r1, r3, #1
   839d0:	e1de      	b.n	83d90 <_vfiprintf_r+0x6dc>
   839d2:	f01a 0f20 	tst.w	sl, #32
   839d6:	9004      	str	r0, [sp, #16]
   839d8:	46ac      	mov	ip, r5
   839da:	f000 808d 	beq.w	83af8 <_vfiprintf_r+0x444>
   839de:	9d08      	ldr	r5, [sp, #32]
   839e0:	1deb      	adds	r3, r5, #7
   839e2:	f023 0307 	bic.w	r3, r3, #7
   839e6:	f103 0b08 	add.w	fp, r3, #8
   839ea:	e9d3 4500 	ldrd	r4, r5, [r3]
   839ee:	f8cd b020 	str.w	fp, [sp, #32]
   839f2:	2301      	movs	r3, #1
   839f4:	e76f      	b.n	838d6 <_vfiprintf_r+0x222>
   839f6:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
   839fa:	f898 3000 	ldrb.w	r3, [r8]
   839fe:	e6c6      	b.n	8378e <_vfiprintf_r+0xda>
   83a00:	f04a 0a10 	orr.w	sl, sl, #16
   83a04:	f01a 0f20 	tst.w	sl, #32
   83a08:	9004      	str	r0, [sp, #16]
   83a0a:	46ac      	mov	ip, r5
   83a0c:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   83a10:	f000 80c8 	beq.w	83ba4 <_vfiprintf_r+0x4f0>
   83a14:	9c08      	ldr	r4, [sp, #32]
   83a16:	1de1      	adds	r1, r4, #7
   83a18:	f021 0107 	bic.w	r1, r1, #7
   83a1c:	e9d1 2300 	ldrd	r2, r3, [r1]
   83a20:	3108      	adds	r1, #8
   83a22:	9108      	str	r1, [sp, #32]
   83a24:	4614      	mov	r4, r2
   83a26:	461d      	mov	r5, r3
   83a28:	2a00      	cmp	r2, #0
   83a2a:	f173 0b00 	sbcs.w	fp, r3, #0
   83a2e:	f2c0 83ce 	blt.w	841ce <_vfiprintf_r+0xb1a>
   83a32:	f1bc 0f00 	cmp.w	ip, #0
   83a36:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
   83a3a:	bfa8      	it	ge
   83a3c:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
   83a40:	ea54 0205 	orrs.w	r2, r4, r5
   83a44:	9007      	str	r0, [sp, #28]
   83a46:	f8cd c014 	str.w	ip, [sp, #20]
   83a4a:	f04f 0301 	mov.w	r3, #1
   83a4e:	f43f af53 	beq.w	838f8 <_vfiprintf_r+0x244>
   83a52:	2b01      	cmp	r3, #1
   83a54:	f000 8319 	beq.w	8408a <_vfiprintf_r+0x9d6>
   83a58:	2b02      	cmp	r3, #2
   83a5a:	f10d 037f 	add.w	r3, sp, #127	; 0x7f
   83a5e:	f040 824c 	bne.w	83efa <_vfiprintf_r+0x846>
   83a62:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   83a66:	4619      	mov	r1, r3
   83a68:	f004 000f 	and.w	r0, r4, #15
   83a6c:	0922      	lsrs	r2, r4, #4
   83a6e:	f81b 0000 	ldrb.w	r0, [fp, r0]
   83a72:	ea42 7205 	orr.w	r2, r2, r5, lsl #28
   83a76:	092b      	lsrs	r3, r5, #4
   83a78:	7008      	strb	r0, [r1, #0]
   83a7a:	ea52 0003 	orrs.w	r0, r2, r3
   83a7e:	460f      	mov	r7, r1
   83a80:	4614      	mov	r4, r2
   83a82:	461d      	mov	r5, r3
   83a84:	f101 31ff 	add.w	r1, r1, #4294967295
   83a88:	d1ee      	bne.n	83a68 <_vfiprintf_r+0x3b4>
   83a8a:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   83a8e:	ebc7 0309 	rsb	r3, r7, r9
   83a92:	9305      	str	r3, [sp, #20]
   83a94:	e742      	b.n	8391c <_vfiprintf_r+0x268>
   83a96:	f04a 0a10 	orr.w	sl, sl, #16
   83a9a:	f01a 0320 	ands.w	r3, sl, #32
   83a9e:	9004      	str	r0, [sp, #16]
   83aa0:	46ac      	mov	ip, r5
   83aa2:	f47f af0c 	bne.w	838be <_vfiprintf_r+0x20a>
   83aa6:	f01a 0210 	ands.w	r2, sl, #16
   83aaa:	f040 8311 	bne.w	840d0 <_vfiprintf_r+0xa1c>
   83aae:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
   83ab2:	f000 830d 	beq.w	840d0 <_vfiprintf_r+0xa1c>
   83ab6:	f8dd b020 	ldr.w	fp, [sp, #32]
   83aba:	4613      	mov	r3, r2
   83abc:	f8bb 4000 	ldrh.w	r4, [fp]
   83ac0:	f10b 0b04 	add.w	fp, fp, #4
   83ac4:	2500      	movs	r5, #0
   83ac6:	f8cd b020 	str.w	fp, [sp, #32]
   83aca:	e704      	b.n	838d6 <_vfiprintf_r+0x222>
   83acc:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   83ad0:	2000      	movs	r0, #0
   83ad2:	f818 3b01 	ldrb.w	r3, [r8], #1
   83ad6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   83ada:	eb02 0040 	add.w	r0, r2, r0, lsl #1
   83ade:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   83ae2:	2a09      	cmp	r2, #9
   83ae4:	d9f5      	bls.n	83ad2 <_vfiprintf_r+0x41e>
   83ae6:	e654      	b.n	83792 <_vfiprintf_r+0xde>
   83ae8:	f04a 0a10 	orr.w	sl, sl, #16
   83aec:	f01a 0f20 	tst.w	sl, #32
   83af0:	9004      	str	r0, [sp, #16]
   83af2:	46ac      	mov	ip, r5
   83af4:	f47f af73 	bne.w	839de <_vfiprintf_r+0x32a>
   83af8:	f01a 0f10 	tst.w	sl, #16
   83afc:	f040 82ef 	bne.w	840de <_vfiprintf_r+0xa2a>
   83b00:	f01a 0f40 	tst.w	sl, #64	; 0x40
   83b04:	f000 82eb 	beq.w	840de <_vfiprintf_r+0xa2a>
   83b08:	f8dd b020 	ldr.w	fp, [sp, #32]
   83b0c:	2500      	movs	r5, #0
   83b0e:	f8bb 4000 	ldrh.w	r4, [fp]
   83b12:	f10b 0b04 	add.w	fp, fp, #4
   83b16:	2301      	movs	r3, #1
   83b18:	f8cd b020 	str.w	fp, [sp, #32]
   83b1c:	e6db      	b.n	838d6 <_vfiprintf_r+0x222>
   83b1e:	46ac      	mov	ip, r5
   83b20:	4d51      	ldr	r5, [pc, #324]	; (83c68 <_vfiprintf_r+0x5b4>)
   83b22:	f01a 0f20 	tst.w	sl, #32
   83b26:	9004      	str	r0, [sp, #16]
   83b28:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   83b2c:	950a      	str	r5, [sp, #40]	; 0x28
   83b2e:	f000 80f0 	beq.w	83d12 <_vfiprintf_r+0x65e>
   83b32:	9d08      	ldr	r5, [sp, #32]
   83b34:	1dea      	adds	r2, r5, #7
   83b36:	f022 0207 	bic.w	r2, r2, #7
   83b3a:	f102 0b08 	add.w	fp, r2, #8
   83b3e:	f8cd b020 	str.w	fp, [sp, #32]
   83b42:	e9d2 4500 	ldrd	r4, r5, [r2]
   83b46:	f01a 0f01 	tst.w	sl, #1
   83b4a:	f000 82aa 	beq.w	840a2 <_vfiprintf_r+0x9ee>
   83b4e:	ea54 0b05 	orrs.w	fp, r4, r5
   83b52:	f000 82a6 	beq.w	840a2 <_vfiprintf_r+0x9ee>
   83b56:	2230      	movs	r2, #48	; 0x30
   83b58:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
   83b5c:	f04a 0a02 	orr.w	sl, sl, #2
   83b60:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   83b64:	2302      	movs	r3, #2
   83b66:	e6b6      	b.n	838d6 <_vfiprintf_r+0x222>
   83b68:	9b08      	ldr	r3, [sp, #32]
   83b6a:	f8dd b020 	ldr.w	fp, [sp, #32]
   83b6e:	681b      	ldr	r3, [r3, #0]
   83b70:	2401      	movs	r4, #1
   83b72:	f04f 0500 	mov.w	r5, #0
   83b76:	f10b 0b04 	add.w	fp, fp, #4
   83b7a:	9004      	str	r0, [sp, #16]
   83b7c:	9403      	str	r4, [sp, #12]
   83b7e:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
   83b82:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   83b86:	f8cd b020 	str.w	fp, [sp, #32]
   83b8a:	9405      	str	r4, [sp, #20]
   83b8c:	af16      	add	r7, sp, #88	; 0x58
   83b8e:	f04f 0c00 	mov.w	ip, #0
   83b92:	e6d0      	b.n	83936 <_vfiprintf_r+0x282>
   83b94:	f01a 0f20 	tst.w	sl, #32
   83b98:	9004      	str	r0, [sp, #16]
   83b9a:	46ac      	mov	ip, r5
   83b9c:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   83ba0:	f47f af38 	bne.w	83a14 <_vfiprintf_r+0x360>
   83ba4:	f01a 0f10 	tst.w	sl, #16
   83ba8:	f040 82a7 	bne.w	840fa <_vfiprintf_r+0xa46>
   83bac:	f01a 0f40 	tst.w	sl, #64	; 0x40
   83bb0:	f000 82a3 	beq.w	840fa <_vfiprintf_r+0xa46>
   83bb4:	f8dd b020 	ldr.w	fp, [sp, #32]
   83bb8:	f9bb 4000 	ldrsh.w	r4, [fp]
   83bbc:	f10b 0b04 	add.w	fp, fp, #4
   83bc0:	17e5      	asrs	r5, r4, #31
   83bc2:	4622      	mov	r2, r4
   83bc4:	462b      	mov	r3, r5
   83bc6:	f8cd b020 	str.w	fp, [sp, #32]
   83bca:	e72d      	b.n	83a28 <_vfiprintf_r+0x374>
   83bcc:	f04a 0a40 	orr.w	sl, sl, #64	; 0x40
   83bd0:	f898 3000 	ldrb.w	r3, [r8]
   83bd4:	e5db      	b.n	8378e <_vfiprintf_r+0xda>
   83bd6:	f898 3000 	ldrb.w	r3, [r8]
   83bda:	4642      	mov	r2, r8
   83bdc:	2b6c      	cmp	r3, #108	; 0x6c
   83bde:	bf03      	ittte	eq
   83be0:	f108 0801 	addeq.w	r8, r8, #1
   83be4:	f04a 0a20 	orreq.w	sl, sl, #32
   83be8:	7853      	ldrbeq	r3, [r2, #1]
   83bea:	f04a 0a10 	orrne.w	sl, sl, #16
   83bee:	e5ce      	b.n	8378e <_vfiprintf_r+0xda>
   83bf0:	f01a 0f20 	tst.w	sl, #32
   83bf4:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   83bf8:	f000 82f7 	beq.w	841ea <_vfiprintf_r+0xb36>
   83bfc:	9c08      	ldr	r4, [sp, #32]
   83bfe:	6821      	ldr	r1, [r4, #0]
   83c00:	9c09      	ldr	r4, [sp, #36]	; 0x24
   83c02:	17e5      	asrs	r5, r4, #31
   83c04:	462b      	mov	r3, r5
   83c06:	9d08      	ldr	r5, [sp, #32]
   83c08:	4622      	mov	r2, r4
   83c0a:	3504      	adds	r5, #4
   83c0c:	9508      	str	r5, [sp, #32]
   83c0e:	e9c1 2300 	strd	r2, r3, [r1]
   83c12:	e582      	b.n	8371a <_vfiprintf_r+0x66>
   83c14:	9c08      	ldr	r4, [sp, #32]
   83c16:	46ac      	mov	ip, r5
   83c18:	6827      	ldr	r7, [r4, #0]
   83c1a:	f04f 0500 	mov.w	r5, #0
   83c1e:	9004      	str	r0, [sp, #16]
   83c20:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
   83c24:	3404      	adds	r4, #4
   83c26:	2f00      	cmp	r7, #0
   83c28:	f000 8332 	beq.w	84290 <_vfiprintf_r+0xbdc>
   83c2c:	f1bc 0f00 	cmp.w	ip, #0
   83c30:	4638      	mov	r0, r7
   83c32:	f2c0 8307 	blt.w	84244 <_vfiprintf_r+0xb90>
   83c36:	4662      	mov	r2, ip
   83c38:	2100      	movs	r1, #0
   83c3a:	f8cd c004 	str.w	ip, [sp, #4]
   83c3e:	f001 fbb1 	bl	853a4 <memchr>
   83c42:	f8dd c004 	ldr.w	ip, [sp, #4]
   83c46:	2800      	cmp	r0, #0
   83c48:	f000 833a 	beq.w	842c0 <_vfiprintf_r+0xc0c>
   83c4c:	1bc0      	subs	r0, r0, r7
   83c4e:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
   83c52:	4560      	cmp	r0, ip
   83c54:	bfa8      	it	ge
   83c56:	4660      	movge	r0, ip
   83c58:	9005      	str	r0, [sp, #20]
   83c5a:	9408      	str	r4, [sp, #32]
   83c5c:	9507      	str	r5, [sp, #28]
   83c5e:	f04f 0c00 	mov.w	ip, #0
   83c62:	e65b      	b.n	8391c <_vfiprintf_r+0x268>
   83c64:	00086330 	.word	0x00086330
   83c68:	000862f0 	.word	0x000862f0
   83c6c:	9b08      	ldr	r3, [sp, #32]
   83c6e:	f8dd b020 	ldr.w	fp, [sp, #32]
   83c72:	9004      	str	r0, [sp, #16]
   83c74:	48b2      	ldr	r0, [pc, #712]	; (83f40 <_vfiprintf_r+0x88c>)
   83c76:	681c      	ldr	r4, [r3, #0]
   83c78:	2230      	movs	r2, #48	; 0x30
   83c7a:	2378      	movs	r3, #120	; 0x78
   83c7c:	f10b 0b04 	add.w	fp, fp, #4
   83c80:	46ac      	mov	ip, r5
   83c82:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
   83c86:	f04a 0a02 	orr.w	sl, sl, #2
   83c8a:	f8cd b020 	str.w	fp, [sp, #32]
   83c8e:	2500      	movs	r5, #0
   83c90:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   83c94:	900a      	str	r0, [sp, #40]	; 0x28
   83c96:	2302      	movs	r3, #2
   83c98:	e61d      	b.n	838d6 <_vfiprintf_r+0x222>
   83c9a:	f04a 0a20 	orr.w	sl, sl, #32
   83c9e:	f898 3000 	ldrb.w	r3, [r8]
   83ca2:	e574      	b.n	8378e <_vfiprintf_r+0xda>
   83ca4:	f8dd b020 	ldr.w	fp, [sp, #32]
   83ca8:	f8db 0000 	ldr.w	r0, [fp]
   83cac:	f10b 0304 	add.w	r3, fp, #4
   83cb0:	2800      	cmp	r0, #0
   83cb2:	f6ff adf7 	blt.w	838a4 <_vfiprintf_r+0x1f0>
   83cb6:	9308      	str	r3, [sp, #32]
   83cb8:	f898 3000 	ldrb.w	r3, [r8]
   83cbc:	e567      	b.n	8378e <_vfiprintf_r+0xda>
   83cbe:	f898 3000 	ldrb.w	r3, [r8]
   83cc2:	212b      	movs	r1, #43	; 0x2b
   83cc4:	e563      	b.n	8378e <_vfiprintf_r+0xda>
   83cc6:	f898 3000 	ldrb.w	r3, [r8]
   83cca:	f108 0401 	add.w	r4, r8, #1
   83cce:	2b2a      	cmp	r3, #42	; 0x2a
   83cd0:	f000 8305 	beq.w	842de <_vfiprintf_r+0xc2a>
   83cd4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   83cd8:	2a09      	cmp	r2, #9
   83cda:	bf98      	it	ls
   83cdc:	2500      	movls	r5, #0
   83cde:	f200 82fa 	bhi.w	842d6 <_vfiprintf_r+0xc22>
   83ce2:	f814 3b01 	ldrb.w	r3, [r4], #1
   83ce6:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   83cea:	eb02 0545 	add.w	r5, r2, r5, lsl #1
   83cee:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   83cf2:	2a09      	cmp	r2, #9
   83cf4:	d9f5      	bls.n	83ce2 <_vfiprintf_r+0x62e>
   83cf6:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
   83cfa:	46a0      	mov	r8, r4
   83cfc:	e549      	b.n	83792 <_vfiprintf_r+0xde>
   83cfe:	4c90      	ldr	r4, [pc, #576]	; (83f40 <_vfiprintf_r+0x88c>)
   83d00:	f01a 0f20 	tst.w	sl, #32
   83d04:	9004      	str	r0, [sp, #16]
   83d06:	46ac      	mov	ip, r5
   83d08:	940a      	str	r4, [sp, #40]	; 0x28
   83d0a:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   83d0e:	f47f af10 	bne.w	83b32 <_vfiprintf_r+0x47e>
   83d12:	f01a 0f10 	tst.w	sl, #16
   83d16:	f040 81ea 	bne.w	840ee <_vfiprintf_r+0xa3a>
   83d1a:	f01a 0f40 	tst.w	sl, #64	; 0x40
   83d1e:	f000 81e6 	beq.w	840ee <_vfiprintf_r+0xa3a>
   83d22:	f8dd b020 	ldr.w	fp, [sp, #32]
   83d26:	2500      	movs	r5, #0
   83d28:	f8bb 4000 	ldrh.w	r4, [fp]
   83d2c:	f10b 0b04 	add.w	fp, fp, #4
   83d30:	f8cd b020 	str.w	fp, [sp, #32]
   83d34:	e707      	b.n	83b46 <_vfiprintf_r+0x492>
   83d36:	f898 3000 	ldrb.w	r3, [r8]
   83d3a:	2900      	cmp	r1, #0
   83d3c:	f47f ad27 	bne.w	8378e <_vfiprintf_r+0xda>
   83d40:	2120      	movs	r1, #32
   83d42:	e524      	b.n	8378e <_vfiprintf_r+0xda>
   83d44:	f04a 0a01 	orr.w	sl, sl, #1
   83d48:	f898 3000 	ldrb.w	r3, [r8]
   83d4c:	e51f      	b.n	8378e <_vfiprintf_r+0xda>
   83d4e:	9004      	str	r0, [sp, #16]
   83d50:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   83d54:	2b00      	cmp	r3, #0
   83d56:	f000 80f9 	beq.w	83f4c <_vfiprintf_r+0x898>
   83d5a:	2501      	movs	r5, #1
   83d5c:	f04f 0b00 	mov.w	fp, #0
   83d60:	9503      	str	r5, [sp, #12]
   83d62:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   83d66:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
   83d6a:	9505      	str	r5, [sp, #20]
   83d6c:	af16      	add	r7, sp, #88	; 0x58
   83d6e:	e70e      	b.n	83b8e <_vfiprintf_r+0x4da>
   83d70:	9806      	ldr	r0, [sp, #24]
   83d72:	9902      	ldr	r1, [sp, #8]
   83d74:	aa13      	add	r2, sp, #76	; 0x4c
   83d76:	f7ff fc61 	bl	8363c <__sprint_r.part.0>
   83d7a:	2800      	cmp	r0, #0
   83d7c:	f040 80ed 	bne.w	83f5a <_vfiprintf_r+0x8a6>
   83d80:	9814      	ldr	r0, [sp, #80]	; 0x50
   83d82:	9a15      	ldr	r2, [sp, #84]	; 0x54
   83d84:	1c43      	adds	r3, r0, #1
   83d86:	46cc      	mov	ip, r9
   83d88:	e5fe      	b.n	83988 <_vfiprintf_r+0x2d4>
   83d8a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   83d8c:	9a15      	ldr	r2, [sp, #84]	; 0x54
   83d8e:	1c59      	adds	r1, r3, #1
   83d90:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
   83d94:	b168      	cbz	r0, 83db2 <_vfiprintf_r+0x6fe>
   83d96:	3201      	adds	r2, #1
   83d98:	f10d 0047 	add.w	r0, sp, #71	; 0x47
   83d9c:	2301      	movs	r3, #1
   83d9e:	2907      	cmp	r1, #7
   83da0:	9215      	str	r2, [sp, #84]	; 0x54
   83da2:	9114      	str	r1, [sp, #80]	; 0x50
   83da4:	e886 0009 	stmia.w	r6, {r0, r3}
   83da8:	f300 8160 	bgt.w	8406c <_vfiprintf_r+0x9b8>
   83dac:	460b      	mov	r3, r1
   83dae:	3608      	adds	r6, #8
   83db0:	3101      	adds	r1, #1
   83db2:	9c07      	ldr	r4, [sp, #28]
   83db4:	b164      	cbz	r4, 83dd0 <_vfiprintf_r+0x71c>
   83db6:	3202      	adds	r2, #2
   83db8:	a812      	add	r0, sp, #72	; 0x48
   83dba:	2302      	movs	r3, #2
   83dbc:	2907      	cmp	r1, #7
   83dbe:	9215      	str	r2, [sp, #84]	; 0x54
   83dc0:	9114      	str	r1, [sp, #80]	; 0x50
   83dc2:	e886 0009 	stmia.w	r6, {r0, r3}
   83dc6:	f300 8157 	bgt.w	84078 <_vfiprintf_r+0x9c4>
   83dca:	460b      	mov	r3, r1
   83dcc:	3608      	adds	r6, #8
   83dce:	3101      	adds	r1, #1
   83dd0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   83dd2:	2d80      	cmp	r5, #128	; 0x80
   83dd4:	f000 8101 	beq.w	83fda <_vfiprintf_r+0x926>
   83dd8:	9d05      	ldr	r5, [sp, #20]
   83dda:	ebc5 040c 	rsb	r4, r5, ip
   83dde:	2c00      	cmp	r4, #0
   83de0:	dd2f      	ble.n	83e42 <_vfiprintf_r+0x78e>
   83de2:	2c10      	cmp	r4, #16
   83de4:	4d57      	ldr	r5, [pc, #348]	; (83f44 <_vfiprintf_r+0x890>)
   83de6:	dd22      	ble.n	83e2e <_vfiprintf_r+0x77a>
   83de8:	4630      	mov	r0, r6
   83dea:	f04f 0b10 	mov.w	fp, #16
   83dee:	462e      	mov	r6, r5
   83df0:	4625      	mov	r5, r4
   83df2:	9c06      	ldr	r4, [sp, #24]
   83df4:	e006      	b.n	83e04 <_vfiprintf_r+0x750>
   83df6:	f103 0c02 	add.w	ip, r3, #2
   83dfa:	3008      	adds	r0, #8
   83dfc:	460b      	mov	r3, r1
   83dfe:	3d10      	subs	r5, #16
   83e00:	2d10      	cmp	r5, #16
   83e02:	dd10      	ble.n	83e26 <_vfiprintf_r+0x772>
   83e04:	1c59      	adds	r1, r3, #1
   83e06:	3210      	adds	r2, #16
   83e08:	2907      	cmp	r1, #7
   83e0a:	9215      	str	r2, [sp, #84]	; 0x54
   83e0c:	e880 0840 	stmia.w	r0, {r6, fp}
   83e10:	9114      	str	r1, [sp, #80]	; 0x50
   83e12:	ddf0      	ble.n	83df6 <_vfiprintf_r+0x742>
   83e14:	2a00      	cmp	r2, #0
   83e16:	d163      	bne.n	83ee0 <_vfiprintf_r+0x82c>
   83e18:	3d10      	subs	r5, #16
   83e1a:	2d10      	cmp	r5, #16
   83e1c:	f04f 0c01 	mov.w	ip, #1
   83e20:	4613      	mov	r3, r2
   83e22:	4648      	mov	r0, r9
   83e24:	dcee      	bgt.n	83e04 <_vfiprintf_r+0x750>
   83e26:	462c      	mov	r4, r5
   83e28:	4661      	mov	r1, ip
   83e2a:	4635      	mov	r5, r6
   83e2c:	4606      	mov	r6, r0
   83e2e:	4422      	add	r2, r4
   83e30:	2907      	cmp	r1, #7
   83e32:	9215      	str	r2, [sp, #84]	; 0x54
   83e34:	6035      	str	r5, [r6, #0]
   83e36:	6074      	str	r4, [r6, #4]
   83e38:	9114      	str	r1, [sp, #80]	; 0x50
   83e3a:	f300 80c1 	bgt.w	83fc0 <_vfiprintf_r+0x90c>
   83e3e:	3608      	adds	r6, #8
   83e40:	3101      	adds	r1, #1
   83e42:	9d05      	ldr	r5, [sp, #20]
   83e44:	2907      	cmp	r1, #7
   83e46:	442a      	add	r2, r5
   83e48:	9215      	str	r2, [sp, #84]	; 0x54
   83e4a:	6037      	str	r7, [r6, #0]
   83e4c:	6075      	str	r5, [r6, #4]
   83e4e:	9114      	str	r1, [sp, #80]	; 0x50
   83e50:	f340 80c1 	ble.w	83fd6 <_vfiprintf_r+0x922>
   83e54:	2a00      	cmp	r2, #0
   83e56:	f040 8130 	bne.w	840ba <_vfiprintf_r+0xa06>
   83e5a:	9214      	str	r2, [sp, #80]	; 0x50
   83e5c:	464e      	mov	r6, r9
   83e5e:	f01a 0f04 	tst.w	sl, #4
   83e62:	f000 808b 	beq.w	83f7c <_vfiprintf_r+0x8c8>
   83e66:	9d04      	ldr	r5, [sp, #16]
   83e68:	f8dd b00c 	ldr.w	fp, [sp, #12]
   83e6c:	ebcb 0405 	rsb	r4, fp, r5
   83e70:	2c00      	cmp	r4, #0
   83e72:	f340 8083 	ble.w	83f7c <_vfiprintf_r+0x8c8>
   83e76:	2c10      	cmp	r4, #16
   83e78:	f340 821e 	ble.w	842b8 <_vfiprintf_r+0xc04>
   83e7c:	9914      	ldr	r1, [sp, #80]	; 0x50
   83e7e:	4d32      	ldr	r5, [pc, #200]	; (83f48 <_vfiprintf_r+0x894>)
   83e80:	2710      	movs	r7, #16
   83e82:	f8dd a018 	ldr.w	sl, [sp, #24]
   83e86:	f8dd b008 	ldr.w	fp, [sp, #8]
   83e8a:	e005      	b.n	83e98 <_vfiprintf_r+0x7e4>
   83e8c:	1c88      	adds	r0, r1, #2
   83e8e:	3608      	adds	r6, #8
   83e90:	4619      	mov	r1, r3
   83e92:	3c10      	subs	r4, #16
   83e94:	2c10      	cmp	r4, #16
   83e96:	dd10      	ble.n	83eba <_vfiprintf_r+0x806>
   83e98:	1c4b      	adds	r3, r1, #1
   83e9a:	3210      	adds	r2, #16
   83e9c:	2b07      	cmp	r3, #7
   83e9e:	9215      	str	r2, [sp, #84]	; 0x54
   83ea0:	e886 00a0 	stmia.w	r6, {r5, r7}
   83ea4:	9314      	str	r3, [sp, #80]	; 0x50
   83ea6:	ddf1      	ble.n	83e8c <_vfiprintf_r+0x7d8>
   83ea8:	2a00      	cmp	r2, #0
   83eaa:	d17d      	bne.n	83fa8 <_vfiprintf_r+0x8f4>
   83eac:	3c10      	subs	r4, #16
   83eae:	2c10      	cmp	r4, #16
   83eb0:	f04f 0001 	mov.w	r0, #1
   83eb4:	4611      	mov	r1, r2
   83eb6:	464e      	mov	r6, r9
   83eb8:	dcee      	bgt.n	83e98 <_vfiprintf_r+0x7e4>
   83eba:	4422      	add	r2, r4
   83ebc:	2807      	cmp	r0, #7
   83ebe:	9215      	str	r2, [sp, #84]	; 0x54
   83ec0:	6035      	str	r5, [r6, #0]
   83ec2:	6074      	str	r4, [r6, #4]
   83ec4:	9014      	str	r0, [sp, #80]	; 0x50
   83ec6:	dd59      	ble.n	83f7c <_vfiprintf_r+0x8c8>
   83ec8:	2a00      	cmp	r2, #0
   83eca:	d14f      	bne.n	83f6c <_vfiprintf_r+0x8b8>
   83ecc:	9c09      	ldr	r4, [sp, #36]	; 0x24
   83ece:	f8dd b00c 	ldr.w	fp, [sp, #12]
   83ed2:	9d04      	ldr	r5, [sp, #16]
   83ed4:	45ab      	cmp	fp, r5
   83ed6:	bfac      	ite	ge
   83ed8:	445c      	addge	r4, fp
   83eda:	1964      	addlt	r4, r4, r5
   83edc:	9409      	str	r4, [sp, #36]	; 0x24
   83ede:	e05e      	b.n	83f9e <_vfiprintf_r+0x8ea>
   83ee0:	4620      	mov	r0, r4
   83ee2:	9902      	ldr	r1, [sp, #8]
   83ee4:	aa13      	add	r2, sp, #76	; 0x4c
   83ee6:	f7ff fba9 	bl	8363c <__sprint_r.part.0>
   83eea:	2800      	cmp	r0, #0
   83eec:	d135      	bne.n	83f5a <_vfiprintf_r+0x8a6>
   83eee:	9b14      	ldr	r3, [sp, #80]	; 0x50
   83ef0:	9a15      	ldr	r2, [sp, #84]	; 0x54
   83ef2:	f103 0c01 	add.w	ip, r3, #1
   83ef6:	4648      	mov	r0, r9
   83ef8:	e781      	b.n	83dfe <_vfiprintf_r+0x74a>
   83efa:	08e0      	lsrs	r0, r4, #3
   83efc:	ea40 7045 	orr.w	r0, r0, r5, lsl #29
   83f00:	f004 0207 	and.w	r2, r4, #7
   83f04:	08e9      	lsrs	r1, r5, #3
   83f06:	3230      	adds	r2, #48	; 0x30
   83f08:	ea50 0b01 	orrs.w	fp, r0, r1
   83f0c:	461f      	mov	r7, r3
   83f0e:	701a      	strb	r2, [r3, #0]
   83f10:	4604      	mov	r4, r0
   83f12:	460d      	mov	r5, r1
   83f14:	f103 33ff 	add.w	r3, r3, #4294967295
   83f18:	d1ef      	bne.n	83efa <_vfiprintf_r+0x846>
   83f1a:	f01a 0f01 	tst.w	sl, #1
   83f1e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   83f22:	4639      	mov	r1, r7
   83f24:	f000 80b9 	beq.w	8409a <_vfiprintf_r+0x9e6>
   83f28:	2a30      	cmp	r2, #48	; 0x30
   83f2a:	f43f acf4 	beq.w	83916 <_vfiprintf_r+0x262>
   83f2e:	461f      	mov	r7, r3
   83f30:	ebc7 0509 	rsb	r5, r7, r9
   83f34:	2330      	movs	r3, #48	; 0x30
   83f36:	9505      	str	r5, [sp, #20]
   83f38:	f801 3c01 	strb.w	r3, [r1, #-1]
   83f3c:	e4ee      	b.n	8391c <_vfiprintf_r+0x268>
   83f3e:	bf00      	nop
   83f40:	00086304 	.word	0x00086304
   83f44:	00086320 	.word	0x00086320
   83f48:	00086330 	.word	0x00086330
   83f4c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   83f4e:	b123      	cbz	r3, 83f5a <_vfiprintf_r+0x8a6>
   83f50:	9806      	ldr	r0, [sp, #24]
   83f52:	9902      	ldr	r1, [sp, #8]
   83f54:	aa13      	add	r2, sp, #76	; 0x4c
   83f56:	f7ff fb71 	bl	8363c <__sprint_r.part.0>
   83f5a:	9c02      	ldr	r4, [sp, #8]
   83f5c:	89a3      	ldrh	r3, [r4, #12]
   83f5e:	065b      	lsls	r3, r3, #25
   83f60:	f53f ac98 	bmi.w	83894 <_vfiprintf_r+0x1e0>
   83f64:	9809      	ldr	r0, [sp, #36]	; 0x24
   83f66:	b031      	add	sp, #196	; 0xc4
   83f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83f6c:	9806      	ldr	r0, [sp, #24]
   83f6e:	9902      	ldr	r1, [sp, #8]
   83f70:	aa13      	add	r2, sp, #76	; 0x4c
   83f72:	f7ff fb63 	bl	8363c <__sprint_r.part.0>
   83f76:	2800      	cmp	r0, #0
   83f78:	d1ef      	bne.n	83f5a <_vfiprintf_r+0x8a6>
   83f7a:	9a15      	ldr	r2, [sp, #84]	; 0x54
   83f7c:	9c09      	ldr	r4, [sp, #36]	; 0x24
   83f7e:	f8dd b00c 	ldr.w	fp, [sp, #12]
   83f82:	9d04      	ldr	r5, [sp, #16]
   83f84:	45ab      	cmp	fp, r5
   83f86:	bfac      	ite	ge
   83f88:	445c      	addge	r4, fp
   83f8a:	1964      	addlt	r4, r4, r5
   83f8c:	9409      	str	r4, [sp, #36]	; 0x24
   83f8e:	b132      	cbz	r2, 83f9e <_vfiprintf_r+0x8ea>
   83f90:	9806      	ldr	r0, [sp, #24]
   83f92:	9902      	ldr	r1, [sp, #8]
   83f94:	aa13      	add	r2, sp, #76	; 0x4c
   83f96:	f7ff fb51 	bl	8363c <__sprint_r.part.0>
   83f9a:	2800      	cmp	r0, #0
   83f9c:	d1dd      	bne.n	83f5a <_vfiprintf_r+0x8a6>
   83f9e:	2000      	movs	r0, #0
   83fa0:	9014      	str	r0, [sp, #80]	; 0x50
   83fa2:	464e      	mov	r6, r9
   83fa4:	f7ff bbb9 	b.w	8371a <_vfiprintf_r+0x66>
   83fa8:	4650      	mov	r0, sl
   83faa:	4659      	mov	r1, fp
   83fac:	aa13      	add	r2, sp, #76	; 0x4c
   83fae:	f7ff fb45 	bl	8363c <__sprint_r.part.0>
   83fb2:	2800      	cmp	r0, #0
   83fb4:	d1d1      	bne.n	83f5a <_vfiprintf_r+0x8a6>
   83fb6:	9914      	ldr	r1, [sp, #80]	; 0x50
   83fb8:	9a15      	ldr	r2, [sp, #84]	; 0x54
   83fba:	1c48      	adds	r0, r1, #1
   83fbc:	464e      	mov	r6, r9
   83fbe:	e768      	b.n	83e92 <_vfiprintf_r+0x7de>
   83fc0:	2a00      	cmp	r2, #0
   83fc2:	f040 80f7 	bne.w	841b4 <_vfiprintf_r+0xb00>
   83fc6:	9c05      	ldr	r4, [sp, #20]
   83fc8:	2301      	movs	r3, #1
   83fca:	9720      	str	r7, [sp, #128]	; 0x80
   83fcc:	9421      	str	r4, [sp, #132]	; 0x84
   83fce:	9415      	str	r4, [sp, #84]	; 0x54
   83fd0:	4622      	mov	r2, r4
   83fd2:	9314      	str	r3, [sp, #80]	; 0x50
   83fd4:	464e      	mov	r6, r9
   83fd6:	3608      	adds	r6, #8
   83fd8:	e741      	b.n	83e5e <_vfiprintf_r+0x7aa>
   83fda:	9d04      	ldr	r5, [sp, #16]
   83fdc:	f8dd b00c 	ldr.w	fp, [sp, #12]
   83fe0:	ebcb 0405 	rsb	r4, fp, r5
   83fe4:	2c00      	cmp	r4, #0
   83fe6:	f77f aef7 	ble.w	83dd8 <_vfiprintf_r+0x724>
   83fea:	2c10      	cmp	r4, #16
   83fec:	4da6      	ldr	r5, [pc, #664]	; (84288 <_vfiprintf_r+0xbd4>)
   83fee:	f340 8170 	ble.w	842d2 <_vfiprintf_r+0xc1e>
   83ff2:	4629      	mov	r1, r5
   83ff4:	f04f 0b10 	mov.w	fp, #16
   83ff8:	4625      	mov	r5, r4
   83ffa:	4664      	mov	r4, ip
   83ffc:	46b4      	mov	ip, r6
   83ffe:	460e      	mov	r6, r1
   84000:	e006      	b.n	84010 <_vfiprintf_r+0x95c>
   84002:	1c98      	adds	r0, r3, #2
   84004:	f10c 0c08 	add.w	ip, ip, #8
   84008:	460b      	mov	r3, r1
   8400a:	3d10      	subs	r5, #16
   8400c:	2d10      	cmp	r5, #16
   8400e:	dd0f      	ble.n	84030 <_vfiprintf_r+0x97c>
   84010:	1c59      	adds	r1, r3, #1
   84012:	3210      	adds	r2, #16
   84014:	2907      	cmp	r1, #7
   84016:	9215      	str	r2, [sp, #84]	; 0x54
   84018:	e88c 0840 	stmia.w	ip, {r6, fp}
   8401c:	9114      	str	r1, [sp, #80]	; 0x50
   8401e:	ddf0      	ble.n	84002 <_vfiprintf_r+0x94e>
   84020:	b9ba      	cbnz	r2, 84052 <_vfiprintf_r+0x99e>
   84022:	3d10      	subs	r5, #16
   84024:	2d10      	cmp	r5, #16
   84026:	f04f 0001 	mov.w	r0, #1
   8402a:	4613      	mov	r3, r2
   8402c:	46cc      	mov	ip, r9
   8402e:	dcef      	bgt.n	84010 <_vfiprintf_r+0x95c>
   84030:	4633      	mov	r3, r6
   84032:	4666      	mov	r6, ip
   84034:	46a4      	mov	ip, r4
   84036:	462c      	mov	r4, r5
   84038:	461d      	mov	r5, r3
   8403a:	4422      	add	r2, r4
   8403c:	2807      	cmp	r0, #7
   8403e:	9215      	str	r2, [sp, #84]	; 0x54
   84040:	6035      	str	r5, [r6, #0]
   84042:	6074      	str	r4, [r6, #4]
   84044:	9014      	str	r0, [sp, #80]	; 0x50
   84046:	f300 80af 	bgt.w	841a8 <_vfiprintf_r+0xaf4>
   8404a:	3608      	adds	r6, #8
   8404c:	1c41      	adds	r1, r0, #1
   8404e:	4603      	mov	r3, r0
   84050:	e6c2      	b.n	83dd8 <_vfiprintf_r+0x724>
   84052:	9806      	ldr	r0, [sp, #24]
   84054:	9902      	ldr	r1, [sp, #8]
   84056:	aa13      	add	r2, sp, #76	; 0x4c
   84058:	f7ff faf0 	bl	8363c <__sprint_r.part.0>
   8405c:	2800      	cmp	r0, #0
   8405e:	f47f af7c 	bne.w	83f5a <_vfiprintf_r+0x8a6>
   84062:	9b14      	ldr	r3, [sp, #80]	; 0x50
   84064:	9a15      	ldr	r2, [sp, #84]	; 0x54
   84066:	1c58      	adds	r0, r3, #1
   84068:	46cc      	mov	ip, r9
   8406a:	e7ce      	b.n	8400a <_vfiprintf_r+0x956>
   8406c:	2a00      	cmp	r2, #0
   8406e:	d179      	bne.n	84164 <_vfiprintf_r+0xab0>
   84070:	4619      	mov	r1, r3
   84072:	464e      	mov	r6, r9
   84074:	4613      	mov	r3, r2
   84076:	e69c      	b.n	83db2 <_vfiprintf_r+0x6fe>
   84078:	2a00      	cmp	r2, #0
   8407a:	f040 8084 	bne.w	84186 <_vfiprintf_r+0xad2>
   8407e:	2101      	movs	r1, #1
   84080:	4613      	mov	r3, r2
   84082:	464e      	mov	r6, r9
   84084:	e6a4      	b.n	83dd0 <_vfiprintf_r+0x71c>
   84086:	464f      	mov	r7, r9
   84088:	e448      	b.n	8391c <_vfiprintf_r+0x268>
   8408a:	2d00      	cmp	r5, #0
   8408c:	bf08      	it	eq
   8408e:	2c0a      	cmpeq	r4, #10
   84090:	d246      	bcs.n	84120 <_vfiprintf_r+0xa6c>
   84092:	3430      	adds	r4, #48	; 0x30
   84094:	af30      	add	r7, sp, #192	; 0xc0
   84096:	f807 4d41 	strb.w	r4, [r7, #-65]!
   8409a:	ebc7 0309 	rsb	r3, r7, r9
   8409e:	9305      	str	r3, [sp, #20]
   840a0:	e43c      	b.n	8391c <_vfiprintf_r+0x268>
   840a2:	2302      	movs	r3, #2
   840a4:	e417      	b.n	838d6 <_vfiprintf_r+0x222>
   840a6:	2a00      	cmp	r2, #0
   840a8:	f040 80af 	bne.w	8420a <_vfiprintf_r+0xb56>
   840ac:	4613      	mov	r3, r2
   840ae:	2101      	movs	r1, #1
   840b0:	464e      	mov	r6, r9
   840b2:	e66d      	b.n	83d90 <_vfiprintf_r+0x6dc>
   840b4:	4644      	mov	r4, r8
   840b6:	f7ff bb58 	b.w	8376a <_vfiprintf_r+0xb6>
   840ba:	9806      	ldr	r0, [sp, #24]
   840bc:	9902      	ldr	r1, [sp, #8]
   840be:	aa13      	add	r2, sp, #76	; 0x4c
   840c0:	f7ff fabc 	bl	8363c <__sprint_r.part.0>
   840c4:	2800      	cmp	r0, #0
   840c6:	f47f af48 	bne.w	83f5a <_vfiprintf_r+0x8a6>
   840ca:	9a15      	ldr	r2, [sp, #84]	; 0x54
   840cc:	464e      	mov	r6, r9
   840ce:	e6c6      	b.n	83e5e <_vfiprintf_r+0x7aa>
   840d0:	9d08      	ldr	r5, [sp, #32]
   840d2:	682c      	ldr	r4, [r5, #0]
   840d4:	3504      	adds	r5, #4
   840d6:	9508      	str	r5, [sp, #32]
   840d8:	2500      	movs	r5, #0
   840da:	f7ff bbfc 	b.w	838d6 <_vfiprintf_r+0x222>
   840de:	9d08      	ldr	r5, [sp, #32]
   840e0:	2301      	movs	r3, #1
   840e2:	682c      	ldr	r4, [r5, #0]
   840e4:	3504      	adds	r5, #4
   840e6:	9508      	str	r5, [sp, #32]
   840e8:	2500      	movs	r5, #0
   840ea:	f7ff bbf4 	b.w	838d6 <_vfiprintf_r+0x222>
   840ee:	9d08      	ldr	r5, [sp, #32]
   840f0:	682c      	ldr	r4, [r5, #0]
   840f2:	3504      	adds	r5, #4
   840f4:	9508      	str	r5, [sp, #32]
   840f6:	2500      	movs	r5, #0
   840f8:	e525      	b.n	83b46 <_vfiprintf_r+0x492>
   840fa:	9d08      	ldr	r5, [sp, #32]
   840fc:	682c      	ldr	r4, [r5, #0]
   840fe:	3504      	adds	r5, #4
   84100:	9508      	str	r5, [sp, #32]
   84102:	17e5      	asrs	r5, r4, #31
   84104:	4622      	mov	r2, r4
   84106:	462b      	mov	r3, r5
   84108:	e48e      	b.n	83a28 <_vfiprintf_r+0x374>
   8410a:	9806      	ldr	r0, [sp, #24]
   8410c:	9902      	ldr	r1, [sp, #8]
   8410e:	aa13      	add	r2, sp, #76	; 0x4c
   84110:	f7ff fa94 	bl	8363c <__sprint_r.part.0>
   84114:	2800      	cmp	r0, #0
   84116:	f47f af20 	bne.w	83f5a <_vfiprintf_r+0x8a6>
   8411a:	464e      	mov	r6, r9
   8411c:	f7ff bb9a 	b.w	83854 <_vfiprintf_r+0x1a0>
   84120:	f10d 0b7f 	add.w	fp, sp, #127	; 0x7f
   84124:	9603      	str	r6, [sp, #12]
   84126:	465e      	mov	r6, fp
   84128:	46e3      	mov	fp, ip
   8412a:	4620      	mov	r0, r4
   8412c:	4629      	mov	r1, r5
   8412e:	220a      	movs	r2, #10
   84130:	2300      	movs	r3, #0
   84132:	f001 fde9 	bl	85d08 <__aeabi_uldivmod>
   84136:	3230      	adds	r2, #48	; 0x30
   84138:	7032      	strb	r2, [r6, #0]
   8413a:	4620      	mov	r0, r4
   8413c:	4629      	mov	r1, r5
   8413e:	220a      	movs	r2, #10
   84140:	2300      	movs	r3, #0
   84142:	f001 fde1 	bl	85d08 <__aeabi_uldivmod>
   84146:	4604      	mov	r4, r0
   84148:	460d      	mov	r5, r1
   8414a:	ea54 0005 	orrs.w	r0, r4, r5
   8414e:	4637      	mov	r7, r6
   84150:	f106 36ff 	add.w	r6, r6, #4294967295
   84154:	d1e9      	bne.n	8412a <_vfiprintf_r+0xa76>
   84156:	ebc7 0309 	rsb	r3, r7, r9
   8415a:	46dc      	mov	ip, fp
   8415c:	9e03      	ldr	r6, [sp, #12]
   8415e:	9305      	str	r3, [sp, #20]
   84160:	f7ff bbdc 	b.w	8391c <_vfiprintf_r+0x268>
   84164:	9806      	ldr	r0, [sp, #24]
   84166:	9902      	ldr	r1, [sp, #8]
   84168:	aa13      	add	r2, sp, #76	; 0x4c
   8416a:	f8cd c004 	str.w	ip, [sp, #4]
   8416e:	f7ff fa65 	bl	8363c <__sprint_r.part.0>
   84172:	f8dd c004 	ldr.w	ip, [sp, #4]
   84176:	2800      	cmp	r0, #0
   84178:	f47f aeef 	bne.w	83f5a <_vfiprintf_r+0x8a6>
   8417c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   8417e:	9a15      	ldr	r2, [sp, #84]	; 0x54
   84180:	1c59      	adds	r1, r3, #1
   84182:	464e      	mov	r6, r9
   84184:	e615      	b.n	83db2 <_vfiprintf_r+0x6fe>
   84186:	9806      	ldr	r0, [sp, #24]
   84188:	9902      	ldr	r1, [sp, #8]
   8418a:	aa13      	add	r2, sp, #76	; 0x4c
   8418c:	f8cd c004 	str.w	ip, [sp, #4]
   84190:	f7ff fa54 	bl	8363c <__sprint_r.part.0>
   84194:	f8dd c004 	ldr.w	ip, [sp, #4]
   84198:	2800      	cmp	r0, #0
   8419a:	f47f aede 	bne.w	83f5a <_vfiprintf_r+0x8a6>
   8419e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   841a0:	9a15      	ldr	r2, [sp, #84]	; 0x54
   841a2:	1c59      	adds	r1, r3, #1
   841a4:	464e      	mov	r6, r9
   841a6:	e613      	b.n	83dd0 <_vfiprintf_r+0x71c>
   841a8:	2a00      	cmp	r2, #0
   841aa:	d156      	bne.n	8425a <_vfiprintf_r+0xba6>
   841ac:	2101      	movs	r1, #1
   841ae:	4613      	mov	r3, r2
   841b0:	464e      	mov	r6, r9
   841b2:	e611      	b.n	83dd8 <_vfiprintf_r+0x724>
   841b4:	9806      	ldr	r0, [sp, #24]
   841b6:	9902      	ldr	r1, [sp, #8]
   841b8:	aa13      	add	r2, sp, #76	; 0x4c
   841ba:	f7ff fa3f 	bl	8363c <__sprint_r.part.0>
   841be:	2800      	cmp	r0, #0
   841c0:	f47f aecb 	bne.w	83f5a <_vfiprintf_r+0x8a6>
   841c4:	9914      	ldr	r1, [sp, #80]	; 0x50
   841c6:	9a15      	ldr	r2, [sp, #84]	; 0x54
   841c8:	3101      	adds	r1, #1
   841ca:	464e      	mov	r6, r9
   841cc:	e639      	b.n	83e42 <_vfiprintf_r+0x78e>
   841ce:	f04f 0b2d 	mov.w	fp, #45	; 0x2d
   841d2:	4264      	negs	r4, r4
   841d4:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   841d8:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
   841dc:	f8cd b01c 	str.w	fp, [sp, #28]
   841e0:	f8cd c014 	str.w	ip, [sp, #20]
   841e4:	2301      	movs	r3, #1
   841e6:	f7ff bb7e 	b.w	838e6 <_vfiprintf_r+0x232>
   841ea:	f01a 0f10 	tst.w	sl, #16
   841ee:	d11d      	bne.n	8422c <_vfiprintf_r+0xb78>
   841f0:	f01a 0f40 	tst.w	sl, #64	; 0x40
   841f4:	d058      	beq.n	842a8 <_vfiprintf_r+0xbf4>
   841f6:	9d08      	ldr	r5, [sp, #32]
   841f8:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
   841fc:	682b      	ldr	r3, [r5, #0]
   841fe:	3504      	adds	r5, #4
   84200:	9508      	str	r5, [sp, #32]
   84202:	f8a3 b000 	strh.w	fp, [r3]
   84206:	f7ff ba88 	b.w	8371a <_vfiprintf_r+0x66>
   8420a:	9806      	ldr	r0, [sp, #24]
   8420c:	9902      	ldr	r1, [sp, #8]
   8420e:	aa13      	add	r2, sp, #76	; 0x4c
   84210:	f8cd c004 	str.w	ip, [sp, #4]
   84214:	f7ff fa12 	bl	8363c <__sprint_r.part.0>
   84218:	f8dd c004 	ldr.w	ip, [sp, #4]
   8421c:	2800      	cmp	r0, #0
   8421e:	f47f ae9c 	bne.w	83f5a <_vfiprintf_r+0x8a6>
   84222:	9b14      	ldr	r3, [sp, #80]	; 0x50
   84224:	9a15      	ldr	r2, [sp, #84]	; 0x54
   84226:	1c59      	adds	r1, r3, #1
   84228:	464e      	mov	r6, r9
   8422a:	e5b1      	b.n	83d90 <_vfiprintf_r+0x6dc>
   8422c:	f8dd b020 	ldr.w	fp, [sp, #32]
   84230:	9c09      	ldr	r4, [sp, #36]	; 0x24
   84232:	f8db 3000 	ldr.w	r3, [fp]
   84236:	f10b 0b04 	add.w	fp, fp, #4
   8423a:	f8cd b020 	str.w	fp, [sp, #32]
   8423e:	601c      	str	r4, [r3, #0]
   84240:	f7ff ba6b 	b.w	8371a <_vfiprintf_r+0x66>
   84244:	9408      	str	r4, [sp, #32]
   84246:	f001 fb95 	bl	85974 <strlen>
   8424a:	f89d 4047 	ldrb.w	r4, [sp, #71]	; 0x47
   8424e:	9005      	str	r0, [sp, #20]
   84250:	9407      	str	r4, [sp, #28]
   84252:	f04f 0c00 	mov.w	ip, #0
   84256:	f7ff bb61 	b.w	8391c <_vfiprintf_r+0x268>
   8425a:	9806      	ldr	r0, [sp, #24]
   8425c:	9902      	ldr	r1, [sp, #8]
   8425e:	aa13      	add	r2, sp, #76	; 0x4c
   84260:	f8cd c004 	str.w	ip, [sp, #4]
   84264:	f7ff f9ea 	bl	8363c <__sprint_r.part.0>
   84268:	f8dd c004 	ldr.w	ip, [sp, #4]
   8426c:	2800      	cmp	r0, #0
   8426e:	f47f ae74 	bne.w	83f5a <_vfiprintf_r+0x8a6>
   84272:	9b14      	ldr	r3, [sp, #80]	; 0x50
   84274:	9a15      	ldr	r2, [sp, #84]	; 0x54
   84276:	1c59      	adds	r1, r3, #1
   84278:	464e      	mov	r6, r9
   8427a:	e5ad      	b.n	83dd8 <_vfiprintf_r+0x724>
   8427c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   8427e:	9a15      	ldr	r2, [sp, #84]	; 0x54
   84280:	3301      	adds	r3, #1
   84282:	4d02      	ldr	r5, [pc, #8]	; (8428c <_vfiprintf_r+0xbd8>)
   84284:	f7ff bb9a 	b.w	839bc <_vfiprintf_r+0x308>
   84288:	00086320 	.word	0x00086320
   8428c:	00086330 	.word	0x00086330
   84290:	f1bc 0f06 	cmp.w	ip, #6
   84294:	bf34      	ite	cc
   84296:	4663      	movcc	r3, ip
   84298:	2306      	movcs	r3, #6
   8429a:	9408      	str	r4, [sp, #32]
   8429c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
   842a0:	9305      	str	r3, [sp, #20]
   842a2:	9403      	str	r4, [sp, #12]
   842a4:	4f16      	ldr	r7, [pc, #88]	; (84300 <_vfiprintf_r+0xc4c>)
   842a6:	e472      	b.n	83b8e <_vfiprintf_r+0x4da>
   842a8:	9c08      	ldr	r4, [sp, #32]
   842aa:	9d09      	ldr	r5, [sp, #36]	; 0x24
   842ac:	6823      	ldr	r3, [r4, #0]
   842ae:	3404      	adds	r4, #4
   842b0:	9408      	str	r4, [sp, #32]
   842b2:	601d      	str	r5, [r3, #0]
   842b4:	f7ff ba31 	b.w	8371a <_vfiprintf_r+0x66>
   842b8:	9814      	ldr	r0, [sp, #80]	; 0x50
   842ba:	4d12      	ldr	r5, [pc, #72]	; (84304 <_vfiprintf_r+0xc50>)
   842bc:	3001      	adds	r0, #1
   842be:	e5fc      	b.n	83eba <_vfiprintf_r+0x806>
   842c0:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
   842c4:	f8cd c014 	str.w	ip, [sp, #20]
   842c8:	9507      	str	r5, [sp, #28]
   842ca:	9408      	str	r4, [sp, #32]
   842cc:	4684      	mov	ip, r0
   842ce:	f7ff bb25 	b.w	8391c <_vfiprintf_r+0x268>
   842d2:	4608      	mov	r0, r1
   842d4:	e6b1      	b.n	8403a <_vfiprintf_r+0x986>
   842d6:	46a0      	mov	r8, r4
   842d8:	2500      	movs	r5, #0
   842da:	f7ff ba5a 	b.w	83792 <_vfiprintf_r+0xde>
   842de:	f8dd b020 	ldr.w	fp, [sp, #32]
   842e2:	f898 3001 	ldrb.w	r3, [r8, #1]
   842e6:	f8db 5000 	ldr.w	r5, [fp]
   842ea:	f10b 0204 	add.w	r2, fp, #4
   842ee:	2d00      	cmp	r5, #0
   842f0:	9208      	str	r2, [sp, #32]
   842f2:	46a0      	mov	r8, r4
   842f4:	f6bf aa4b 	bge.w	8378e <_vfiprintf_r+0xda>
   842f8:	f04f 35ff 	mov.w	r5, #4294967295
   842fc:	f7ff ba47 	b.w	8378e <_vfiprintf_r+0xda>
   84300:	00086318 	.word	0x00086318
   84304:	00086330 	.word	0x00086330

00084308 <__sbprintf>:
   84308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8430c:	6e4f      	ldr	r7, [r1, #100]	; 0x64
   8430e:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   84312:	4688      	mov	r8, r1
   84314:	9719      	str	r7, [sp, #100]	; 0x64
   84316:	f8d8 701c 	ldr.w	r7, [r8, #28]
   8431a:	f8b1 a00c 	ldrh.w	sl, [r1, #12]
   8431e:	f8b1 900e 	ldrh.w	r9, [r1, #14]
   84322:	9707      	str	r7, [sp, #28]
   84324:	f8d8 7024 	ldr.w	r7, [r8, #36]	; 0x24
   84328:	ac1a      	add	r4, sp, #104	; 0x68
   8432a:	f44f 6580 	mov.w	r5, #1024	; 0x400
   8432e:	f02a 0a02 	bic.w	sl, sl, #2
   84332:	2600      	movs	r6, #0
   84334:	4669      	mov	r1, sp
   84336:	9400      	str	r4, [sp, #0]
   84338:	9404      	str	r4, [sp, #16]
   8433a:	9502      	str	r5, [sp, #8]
   8433c:	9505      	str	r5, [sp, #20]
   8433e:	f8ad a00c 	strh.w	sl, [sp, #12]
   84342:	f8ad 900e 	strh.w	r9, [sp, #14]
   84346:	9709      	str	r7, [sp, #36]	; 0x24
   84348:	9606      	str	r6, [sp, #24]
   8434a:	4605      	mov	r5, r0
   8434c:	f7ff f9b2 	bl	836b4 <_vfiprintf_r>
   84350:	1e04      	subs	r4, r0, #0
   84352:	db07      	blt.n	84364 <__sbprintf+0x5c>
   84354:	4628      	mov	r0, r5
   84356:	4669      	mov	r1, sp
   84358:	f000 f92a 	bl	845b0 <_fflush_r>
   8435c:	42b0      	cmp	r0, r6
   8435e:	bf18      	it	ne
   84360:	f04f 34ff 	movne.w	r4, #4294967295
   84364:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   84368:	065b      	lsls	r3, r3, #25
   8436a:	d505      	bpl.n	84378 <__sbprintf+0x70>
   8436c:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   84370:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   84374:	f8a8 300c 	strh.w	r3, [r8, #12]
   84378:	4620      	mov	r0, r4
   8437a:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   8437e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   84382:	bf00      	nop

00084384 <__swsetup_r>:
   84384:	4b2f      	ldr	r3, [pc, #188]	; (84444 <__swsetup_r+0xc0>)
   84386:	b570      	push	{r4, r5, r6, lr}
   84388:	4606      	mov	r6, r0
   8438a:	6818      	ldr	r0, [r3, #0]
   8438c:	460c      	mov	r4, r1
   8438e:	b110      	cbz	r0, 84396 <__swsetup_r+0x12>
   84390:	6b82      	ldr	r2, [r0, #56]	; 0x38
   84392:	2a00      	cmp	r2, #0
   84394:	d036      	beq.n	84404 <__swsetup_r+0x80>
   84396:	89a5      	ldrh	r5, [r4, #12]
   84398:	b2ab      	uxth	r3, r5
   8439a:	0719      	lsls	r1, r3, #28
   8439c:	d50c      	bpl.n	843b8 <__swsetup_r+0x34>
   8439e:	6922      	ldr	r2, [r4, #16]
   843a0:	b1aa      	cbz	r2, 843ce <__swsetup_r+0x4a>
   843a2:	f013 0101 	ands.w	r1, r3, #1
   843a6:	d01e      	beq.n	843e6 <__swsetup_r+0x62>
   843a8:	6963      	ldr	r3, [r4, #20]
   843aa:	2100      	movs	r1, #0
   843ac:	425b      	negs	r3, r3
   843ae:	61a3      	str	r3, [r4, #24]
   843b0:	60a1      	str	r1, [r4, #8]
   843b2:	b1f2      	cbz	r2, 843f2 <__swsetup_r+0x6e>
   843b4:	2000      	movs	r0, #0
   843b6:	bd70      	pop	{r4, r5, r6, pc}
   843b8:	06da      	lsls	r2, r3, #27
   843ba:	d53a      	bpl.n	84432 <__swsetup_r+0xae>
   843bc:	075b      	lsls	r3, r3, #29
   843be:	d424      	bmi.n	8440a <__swsetup_r+0x86>
   843c0:	6922      	ldr	r2, [r4, #16]
   843c2:	f045 0308 	orr.w	r3, r5, #8
   843c6:	81a3      	strh	r3, [r4, #12]
   843c8:	b29b      	uxth	r3, r3
   843ca:	2a00      	cmp	r2, #0
   843cc:	d1e9      	bne.n	843a2 <__swsetup_r+0x1e>
   843ce:	f403 7120 	and.w	r1, r3, #640	; 0x280
   843d2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   843d6:	d0e4      	beq.n	843a2 <__swsetup_r+0x1e>
   843d8:	4630      	mov	r0, r6
   843da:	4621      	mov	r1, r4
   843dc:	f000 fcce 	bl	84d7c <__smakebuf_r>
   843e0:	89a3      	ldrh	r3, [r4, #12]
   843e2:	6922      	ldr	r2, [r4, #16]
   843e4:	e7dd      	b.n	843a2 <__swsetup_r+0x1e>
   843e6:	0798      	lsls	r0, r3, #30
   843e8:	bf58      	it	pl
   843ea:	6961      	ldrpl	r1, [r4, #20]
   843ec:	60a1      	str	r1, [r4, #8]
   843ee:	2a00      	cmp	r2, #0
   843f0:	d1e0      	bne.n	843b4 <__swsetup_r+0x30>
   843f2:	89a3      	ldrh	r3, [r4, #12]
   843f4:	061a      	lsls	r2, r3, #24
   843f6:	d5dd      	bpl.n	843b4 <__swsetup_r+0x30>
   843f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   843fc:	81a3      	strh	r3, [r4, #12]
   843fe:	f04f 30ff 	mov.w	r0, #4294967295
   84402:	bd70      	pop	{r4, r5, r6, pc}
   84404:	f000 f8f0 	bl	845e8 <__sinit>
   84408:	e7c5      	b.n	84396 <__swsetup_r+0x12>
   8440a:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8440c:	b149      	cbz	r1, 84422 <__swsetup_r+0x9e>
   8440e:	f104 0340 	add.w	r3, r4, #64	; 0x40
   84412:	4299      	cmp	r1, r3
   84414:	d003      	beq.n	8441e <__swsetup_r+0x9a>
   84416:	4630      	mov	r0, r6
   84418:	f000 fa2a 	bl	84870 <_free_r>
   8441c:	89a5      	ldrh	r5, [r4, #12]
   8441e:	2300      	movs	r3, #0
   84420:	6323      	str	r3, [r4, #48]	; 0x30
   84422:	6922      	ldr	r2, [r4, #16]
   84424:	f025 0524 	bic.w	r5, r5, #36	; 0x24
   84428:	2100      	movs	r1, #0
   8442a:	b2ad      	uxth	r5, r5
   8442c:	6022      	str	r2, [r4, #0]
   8442e:	6061      	str	r1, [r4, #4]
   84430:	e7c7      	b.n	843c2 <__swsetup_r+0x3e>
   84432:	f045 0540 	orr.w	r5, r5, #64	; 0x40
   84436:	2309      	movs	r3, #9
   84438:	6033      	str	r3, [r6, #0]
   8443a:	f04f 30ff 	mov.w	r0, #4294967295
   8443e:	81a5      	strh	r5, [r4, #12]
   84440:	bd70      	pop	{r4, r5, r6, pc}
   84442:	bf00      	nop
   84444:	20070608 	.word	0x20070608

00084448 <register_fini>:
   84448:	4b02      	ldr	r3, [pc, #8]	; (84454 <register_fini+0xc>)
   8444a:	b113      	cbz	r3, 84452 <register_fini+0xa>
   8444c:	4802      	ldr	r0, [pc, #8]	; (84458 <register_fini+0x10>)
   8444e:	f000 b805 	b.w	8445c <atexit>
   84452:	4770      	bx	lr
   84454:	00000000 	.word	0x00000000
   84458:	000846e5 	.word	0x000846e5

0008445c <atexit>:
   8445c:	4601      	mov	r1, r0
   8445e:	2000      	movs	r0, #0
   84460:	4602      	mov	r2, r0
   84462:	4603      	mov	r3, r0
   84464:	f001 bb54 	b.w	85b10 <__register_exitproc>

00084468 <__sflush_r>:
   84468:	898b      	ldrh	r3, [r1, #12]
   8446a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8446e:	b29a      	uxth	r2, r3
   84470:	460d      	mov	r5, r1
   84472:	0711      	lsls	r1, r2, #28
   84474:	4680      	mov	r8, r0
   84476:	d43c      	bmi.n	844f2 <__sflush_r+0x8a>
   84478:	686a      	ldr	r2, [r5, #4]
   8447a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   8447e:	2a00      	cmp	r2, #0
   84480:	81ab      	strh	r3, [r5, #12]
   84482:	dd59      	ble.n	84538 <__sflush_r+0xd0>
   84484:	6aac      	ldr	r4, [r5, #40]	; 0x28
   84486:	2c00      	cmp	r4, #0
   84488:	d04b      	beq.n	84522 <__sflush_r+0xba>
   8448a:	b29b      	uxth	r3, r3
   8448c:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   84490:	2100      	movs	r1, #0
   84492:	b292      	uxth	r2, r2
   84494:	f8d8 6000 	ldr.w	r6, [r8]
   84498:	f8c8 1000 	str.w	r1, [r8]
   8449c:	2a00      	cmp	r2, #0
   8449e:	d04f      	beq.n	84540 <__sflush_r+0xd8>
   844a0:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   844a2:	075f      	lsls	r7, r3, #29
   844a4:	d505      	bpl.n	844b2 <__sflush_r+0x4a>
   844a6:	6869      	ldr	r1, [r5, #4]
   844a8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   844aa:	1a52      	subs	r2, r2, r1
   844ac:	b10b      	cbz	r3, 844b2 <__sflush_r+0x4a>
   844ae:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   844b0:	1ad2      	subs	r2, r2, r3
   844b2:	4640      	mov	r0, r8
   844b4:	69e9      	ldr	r1, [r5, #28]
   844b6:	2300      	movs	r3, #0
   844b8:	47a0      	blx	r4
   844ba:	1c44      	adds	r4, r0, #1
   844bc:	d04a      	beq.n	84554 <__sflush_r+0xec>
   844be:	89ab      	ldrh	r3, [r5, #12]
   844c0:	692a      	ldr	r2, [r5, #16]
   844c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   844c6:	b29b      	uxth	r3, r3
   844c8:	2100      	movs	r1, #0
   844ca:	602a      	str	r2, [r5, #0]
   844cc:	04da      	lsls	r2, r3, #19
   844ce:	81ab      	strh	r3, [r5, #12]
   844d0:	6069      	str	r1, [r5, #4]
   844d2:	d44c      	bmi.n	8456e <__sflush_r+0x106>
   844d4:	6b29      	ldr	r1, [r5, #48]	; 0x30
   844d6:	f8c8 6000 	str.w	r6, [r8]
   844da:	b311      	cbz	r1, 84522 <__sflush_r+0xba>
   844dc:	f105 0340 	add.w	r3, r5, #64	; 0x40
   844e0:	4299      	cmp	r1, r3
   844e2:	d002      	beq.n	844ea <__sflush_r+0x82>
   844e4:	4640      	mov	r0, r8
   844e6:	f000 f9c3 	bl	84870 <_free_r>
   844ea:	2000      	movs	r0, #0
   844ec:	6328      	str	r0, [r5, #48]	; 0x30
   844ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   844f2:	692e      	ldr	r6, [r5, #16]
   844f4:	b1ae      	cbz	r6, 84522 <__sflush_r+0xba>
   844f6:	0791      	lsls	r1, r2, #30
   844f8:	682c      	ldr	r4, [r5, #0]
   844fa:	bf0c      	ite	eq
   844fc:	696b      	ldreq	r3, [r5, #20]
   844fe:	2300      	movne	r3, #0
   84500:	602e      	str	r6, [r5, #0]
   84502:	1ba4      	subs	r4, r4, r6
   84504:	60ab      	str	r3, [r5, #8]
   84506:	e00a      	b.n	8451e <__sflush_r+0xb6>
   84508:	4632      	mov	r2, r6
   8450a:	4623      	mov	r3, r4
   8450c:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   8450e:	4640      	mov	r0, r8
   84510:	69e9      	ldr	r1, [r5, #28]
   84512:	47b8      	blx	r7
   84514:	2800      	cmp	r0, #0
   84516:	ebc0 0404 	rsb	r4, r0, r4
   8451a:	4406      	add	r6, r0
   8451c:	dd04      	ble.n	84528 <__sflush_r+0xc0>
   8451e:	2c00      	cmp	r4, #0
   84520:	dcf2      	bgt.n	84508 <__sflush_r+0xa0>
   84522:	2000      	movs	r0, #0
   84524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84528:	89ab      	ldrh	r3, [r5, #12]
   8452a:	f04f 30ff 	mov.w	r0, #4294967295
   8452e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   84532:	81ab      	strh	r3, [r5, #12]
   84534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84538:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   8453a:	2a00      	cmp	r2, #0
   8453c:	dca2      	bgt.n	84484 <__sflush_r+0x1c>
   8453e:	e7f0      	b.n	84522 <__sflush_r+0xba>
   84540:	2301      	movs	r3, #1
   84542:	4640      	mov	r0, r8
   84544:	69e9      	ldr	r1, [r5, #28]
   84546:	47a0      	blx	r4
   84548:	1c43      	adds	r3, r0, #1
   8454a:	4602      	mov	r2, r0
   8454c:	d01e      	beq.n	8458c <__sflush_r+0x124>
   8454e:	89ab      	ldrh	r3, [r5, #12]
   84550:	6aac      	ldr	r4, [r5, #40]	; 0x28
   84552:	e7a6      	b.n	844a2 <__sflush_r+0x3a>
   84554:	f8d8 3000 	ldr.w	r3, [r8]
   84558:	b95b      	cbnz	r3, 84572 <__sflush_r+0x10a>
   8455a:	89aa      	ldrh	r2, [r5, #12]
   8455c:	6929      	ldr	r1, [r5, #16]
   8455e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   84562:	b292      	uxth	r2, r2
   84564:	606b      	str	r3, [r5, #4]
   84566:	04d3      	lsls	r3, r2, #19
   84568:	81aa      	strh	r2, [r5, #12]
   8456a:	6029      	str	r1, [r5, #0]
   8456c:	d5b2      	bpl.n	844d4 <__sflush_r+0x6c>
   8456e:	6528      	str	r0, [r5, #80]	; 0x50
   84570:	e7b0      	b.n	844d4 <__sflush_r+0x6c>
   84572:	2b1d      	cmp	r3, #29
   84574:	d001      	beq.n	8457a <__sflush_r+0x112>
   84576:	2b16      	cmp	r3, #22
   84578:	d113      	bne.n	845a2 <__sflush_r+0x13a>
   8457a:	89a9      	ldrh	r1, [r5, #12]
   8457c:	692b      	ldr	r3, [r5, #16]
   8457e:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
   84582:	2200      	movs	r2, #0
   84584:	81a9      	strh	r1, [r5, #12]
   84586:	602b      	str	r3, [r5, #0]
   84588:	606a      	str	r2, [r5, #4]
   8458a:	e7a3      	b.n	844d4 <__sflush_r+0x6c>
   8458c:	f8d8 3000 	ldr.w	r3, [r8]
   84590:	2b00      	cmp	r3, #0
   84592:	d0dc      	beq.n	8454e <__sflush_r+0xe6>
   84594:	2b1d      	cmp	r3, #29
   84596:	d001      	beq.n	8459c <__sflush_r+0x134>
   84598:	2b16      	cmp	r3, #22
   8459a:	d1c5      	bne.n	84528 <__sflush_r+0xc0>
   8459c:	f8c8 6000 	str.w	r6, [r8]
   845a0:	e7bf      	b.n	84522 <__sflush_r+0xba>
   845a2:	89ab      	ldrh	r3, [r5, #12]
   845a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   845a8:	81ab      	strh	r3, [r5, #12]
   845aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   845ae:	bf00      	nop

000845b0 <_fflush_r>:
   845b0:	b510      	push	{r4, lr}
   845b2:	4604      	mov	r4, r0
   845b4:	b082      	sub	sp, #8
   845b6:	b108      	cbz	r0, 845bc <_fflush_r+0xc>
   845b8:	6b83      	ldr	r3, [r0, #56]	; 0x38
   845ba:	b153      	cbz	r3, 845d2 <_fflush_r+0x22>
   845bc:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   845c0:	b908      	cbnz	r0, 845c6 <_fflush_r+0x16>
   845c2:	b002      	add	sp, #8
   845c4:	bd10      	pop	{r4, pc}
   845c6:	4620      	mov	r0, r4
   845c8:	b002      	add	sp, #8
   845ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   845ce:	f7ff bf4b 	b.w	84468 <__sflush_r>
   845d2:	9101      	str	r1, [sp, #4]
   845d4:	f000 f808 	bl	845e8 <__sinit>
   845d8:	9901      	ldr	r1, [sp, #4]
   845da:	e7ef      	b.n	845bc <_fflush_r+0xc>

000845dc <_cleanup_r>:
   845dc:	4901      	ldr	r1, [pc, #4]	; (845e4 <_cleanup_r+0x8>)
   845de:	f000 bb9f 	b.w	84d20 <_fwalk>
   845e2:	bf00      	nop
   845e4:	00085c5d 	.word	0x00085c5d

000845e8 <__sinit>:
   845e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   845ec:	6b84      	ldr	r4, [r0, #56]	; 0x38
   845ee:	b083      	sub	sp, #12
   845f0:	4607      	mov	r7, r0
   845f2:	2c00      	cmp	r4, #0
   845f4:	d165      	bne.n	846c2 <__sinit+0xda>
   845f6:	687d      	ldr	r5, [r7, #4]
   845f8:	4833      	ldr	r0, [pc, #204]	; (846c8 <__sinit+0xe0>)
   845fa:	2304      	movs	r3, #4
   845fc:	2103      	movs	r1, #3
   845fe:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   84602:	63f8      	str	r0, [r7, #60]	; 0x3c
   84604:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   84608:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   8460c:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   84610:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   84614:	81ab      	strh	r3, [r5, #12]
   84616:	602c      	str	r4, [r5, #0]
   84618:	606c      	str	r4, [r5, #4]
   8461a:	60ac      	str	r4, [r5, #8]
   8461c:	666c      	str	r4, [r5, #100]	; 0x64
   8461e:	81ec      	strh	r4, [r5, #14]
   84620:	612c      	str	r4, [r5, #16]
   84622:	616c      	str	r4, [r5, #20]
   84624:	61ac      	str	r4, [r5, #24]
   84626:	4621      	mov	r1, r4
   84628:	2208      	movs	r2, #8
   8462a:	f7fe ff35 	bl	83498 <memset>
   8462e:	f8df b09c 	ldr.w	fp, [pc, #156]	; 846cc <__sinit+0xe4>
   84632:	68be      	ldr	r6, [r7, #8]
   84634:	f8df a098 	ldr.w	sl, [pc, #152]	; 846d0 <__sinit+0xe8>
   84638:	f8df 9098 	ldr.w	r9, [pc, #152]	; 846d4 <__sinit+0xec>
   8463c:	f8df 8098 	ldr.w	r8, [pc, #152]	; 846d8 <__sinit+0xf0>
   84640:	2301      	movs	r3, #1
   84642:	2209      	movs	r2, #9
   84644:	61ed      	str	r5, [r5, #28]
   84646:	f8c5 b020 	str.w	fp, [r5, #32]
   8464a:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   8464e:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   84652:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   84656:	4621      	mov	r1, r4
   84658:	81f3      	strh	r3, [r6, #14]
   8465a:	81b2      	strh	r2, [r6, #12]
   8465c:	6034      	str	r4, [r6, #0]
   8465e:	6074      	str	r4, [r6, #4]
   84660:	60b4      	str	r4, [r6, #8]
   84662:	6674      	str	r4, [r6, #100]	; 0x64
   84664:	6134      	str	r4, [r6, #16]
   84666:	6174      	str	r4, [r6, #20]
   84668:	61b4      	str	r4, [r6, #24]
   8466a:	2208      	movs	r2, #8
   8466c:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   84670:	9301      	str	r3, [sp, #4]
   84672:	f7fe ff11 	bl	83498 <memset>
   84676:	68fd      	ldr	r5, [r7, #12]
   84678:	2012      	movs	r0, #18
   8467a:	2202      	movs	r2, #2
   8467c:	61f6      	str	r6, [r6, #28]
   8467e:	f8c6 b020 	str.w	fp, [r6, #32]
   84682:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   84686:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   8468a:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   8468e:	4621      	mov	r1, r4
   84690:	81a8      	strh	r0, [r5, #12]
   84692:	81ea      	strh	r2, [r5, #14]
   84694:	602c      	str	r4, [r5, #0]
   84696:	606c      	str	r4, [r5, #4]
   84698:	60ac      	str	r4, [r5, #8]
   8469a:	666c      	str	r4, [r5, #100]	; 0x64
   8469c:	612c      	str	r4, [r5, #16]
   8469e:	616c      	str	r4, [r5, #20]
   846a0:	61ac      	str	r4, [r5, #24]
   846a2:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   846a6:	2208      	movs	r2, #8
   846a8:	f7fe fef6 	bl	83498 <memset>
   846ac:	9b01      	ldr	r3, [sp, #4]
   846ae:	61ed      	str	r5, [r5, #28]
   846b0:	f8c5 b020 	str.w	fp, [r5, #32]
   846b4:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   846b8:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   846bc:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   846c0:	63bb      	str	r3, [r7, #56]	; 0x38
   846c2:	b003      	add	sp, #12
   846c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   846c8:	000845dd 	.word	0x000845dd
   846cc:	000858f1 	.word	0x000858f1
   846d0:	00085915 	.word	0x00085915
   846d4:	0008594d 	.word	0x0008594d
   846d8:	0008596d 	.word	0x0008596d

000846dc <__sfp_lock_acquire>:
   846dc:	4770      	bx	lr
   846de:	bf00      	nop

000846e0 <__sfp_lock_release>:
   846e0:	4770      	bx	lr
   846e2:	bf00      	nop

000846e4 <__libc_fini_array>:
   846e4:	b538      	push	{r3, r4, r5, lr}
   846e6:	4d09      	ldr	r5, [pc, #36]	; (8470c <__libc_fini_array+0x28>)
   846e8:	4c09      	ldr	r4, [pc, #36]	; (84710 <__libc_fini_array+0x2c>)
   846ea:	1b64      	subs	r4, r4, r5
   846ec:	10a4      	asrs	r4, r4, #2
   846ee:	bf18      	it	ne
   846f0:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
   846f4:	d005      	beq.n	84702 <__libc_fini_array+0x1e>
   846f6:	3c01      	subs	r4, #1
   846f8:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   846fc:	4798      	blx	r3
   846fe:	2c00      	cmp	r4, #0
   84700:	d1f9      	bne.n	846f6 <__libc_fini_array+0x12>
   84702:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   84706:	f001 be25 	b.w	86354 <_fini>
   8470a:	bf00      	nop
   8470c:	00086360 	.word	0x00086360
   84710:	00086364 	.word	0x00086364

00084714 <_fputwc_r>:
   84714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84718:	8993      	ldrh	r3, [r2, #12]
   8471a:	460f      	mov	r7, r1
   8471c:	0499      	lsls	r1, r3, #18
   8471e:	b082      	sub	sp, #8
   84720:	4614      	mov	r4, r2
   84722:	4680      	mov	r8, r0
   84724:	d406      	bmi.n	84734 <_fputwc_r+0x20>
   84726:	6e52      	ldr	r2, [r2, #100]	; 0x64
   84728:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   8472c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   84730:	81a3      	strh	r3, [r4, #12]
   84732:	6662      	str	r2, [r4, #100]	; 0x64
   84734:	f000 fb1c 	bl	84d70 <__locale_mb_cur_max>
   84738:	2801      	cmp	r0, #1
   8473a:	d03e      	beq.n	847ba <_fputwc_r+0xa6>
   8473c:	463a      	mov	r2, r7
   8473e:	4640      	mov	r0, r8
   84740:	a901      	add	r1, sp, #4
   84742:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   84746:	f001 f999 	bl	85a7c <_wcrtomb_r>
   8474a:	1c42      	adds	r2, r0, #1
   8474c:	4606      	mov	r6, r0
   8474e:	d02d      	beq.n	847ac <_fputwc_r+0x98>
   84750:	2800      	cmp	r0, #0
   84752:	d03a      	beq.n	847ca <_fputwc_r+0xb6>
   84754:	f89d 1004 	ldrb.w	r1, [sp, #4]
   84758:	2500      	movs	r5, #0
   8475a:	e009      	b.n	84770 <_fputwc_r+0x5c>
   8475c:	6823      	ldr	r3, [r4, #0]
   8475e:	7019      	strb	r1, [r3, #0]
   84760:	6823      	ldr	r3, [r4, #0]
   84762:	3301      	adds	r3, #1
   84764:	6023      	str	r3, [r4, #0]
   84766:	3501      	adds	r5, #1
   84768:	42b5      	cmp	r5, r6
   8476a:	d22e      	bcs.n	847ca <_fputwc_r+0xb6>
   8476c:	ab01      	add	r3, sp, #4
   8476e:	5ce9      	ldrb	r1, [r5, r3]
   84770:	68a3      	ldr	r3, [r4, #8]
   84772:	3b01      	subs	r3, #1
   84774:	2b00      	cmp	r3, #0
   84776:	60a3      	str	r3, [r4, #8]
   84778:	daf0      	bge.n	8475c <_fputwc_r+0x48>
   8477a:	69a2      	ldr	r2, [r4, #24]
   8477c:	4293      	cmp	r3, r2
   8477e:	db06      	blt.n	8478e <_fputwc_r+0x7a>
   84780:	6823      	ldr	r3, [r4, #0]
   84782:	7019      	strb	r1, [r3, #0]
   84784:	6823      	ldr	r3, [r4, #0]
   84786:	7819      	ldrb	r1, [r3, #0]
   84788:	3301      	adds	r3, #1
   8478a:	290a      	cmp	r1, #10
   8478c:	d1ea      	bne.n	84764 <_fputwc_r+0x50>
   8478e:	4640      	mov	r0, r8
   84790:	4622      	mov	r2, r4
   84792:	f001 f91f 	bl	859d4 <__swbuf_r>
   84796:	f1b0 33ff 	subs.w	r3, r0, #4294967295
   8479a:	4258      	negs	r0, r3
   8479c:	4158      	adcs	r0, r3
   8479e:	2800      	cmp	r0, #0
   847a0:	d0e1      	beq.n	84766 <_fputwc_r+0x52>
   847a2:	f04f 30ff 	mov.w	r0, #4294967295
   847a6:	b002      	add	sp, #8
   847a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   847ac:	89a3      	ldrh	r3, [r4, #12]
   847ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   847b2:	81a3      	strh	r3, [r4, #12]
   847b4:	b002      	add	sp, #8
   847b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   847ba:	1e7b      	subs	r3, r7, #1
   847bc:	2bfe      	cmp	r3, #254	; 0xfe
   847be:	d8bd      	bhi.n	8473c <_fputwc_r+0x28>
   847c0:	b2f9      	uxtb	r1, r7
   847c2:	4606      	mov	r6, r0
   847c4:	f88d 1004 	strb.w	r1, [sp, #4]
   847c8:	e7c6      	b.n	84758 <_fputwc_r+0x44>
   847ca:	4638      	mov	r0, r7
   847cc:	b002      	add	sp, #8
   847ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   847d2:	bf00      	nop

000847d4 <_malloc_trim_r>:
   847d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   847d6:	4d23      	ldr	r5, [pc, #140]	; (84864 <_malloc_trim_r+0x90>)
   847d8:	460f      	mov	r7, r1
   847da:	4604      	mov	r4, r0
   847dc:	f000 fe92 	bl	85504 <__malloc_lock>
   847e0:	68ab      	ldr	r3, [r5, #8]
   847e2:	685e      	ldr	r6, [r3, #4]
   847e4:	f026 0603 	bic.w	r6, r6, #3
   847e8:	1bf1      	subs	r1, r6, r7
   847ea:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   847ee:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   847f2:	f021 010f 	bic.w	r1, r1, #15
   847f6:	f5a1 5780 	sub.w	r7, r1, #4096	; 0x1000
   847fa:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
   847fe:	db07      	blt.n	84810 <_malloc_trim_r+0x3c>
   84800:	4620      	mov	r0, r4
   84802:	2100      	movs	r1, #0
   84804:	f001 f862 	bl	858cc <_sbrk_r>
   84808:	68ab      	ldr	r3, [r5, #8]
   8480a:	4433      	add	r3, r6
   8480c:	4298      	cmp	r0, r3
   8480e:	d004      	beq.n	8481a <_malloc_trim_r+0x46>
   84810:	4620      	mov	r0, r4
   84812:	f000 fe79 	bl	85508 <__malloc_unlock>
   84816:	2000      	movs	r0, #0
   84818:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8481a:	4620      	mov	r0, r4
   8481c:	4279      	negs	r1, r7
   8481e:	f001 f855 	bl	858cc <_sbrk_r>
   84822:	3001      	adds	r0, #1
   84824:	d00d      	beq.n	84842 <_malloc_trim_r+0x6e>
   84826:	4b10      	ldr	r3, [pc, #64]	; (84868 <_malloc_trim_r+0x94>)
   84828:	68aa      	ldr	r2, [r5, #8]
   8482a:	6819      	ldr	r1, [r3, #0]
   8482c:	1bf6      	subs	r6, r6, r7
   8482e:	f046 0601 	orr.w	r6, r6, #1
   84832:	4620      	mov	r0, r4
   84834:	1bc9      	subs	r1, r1, r7
   84836:	6056      	str	r6, [r2, #4]
   84838:	6019      	str	r1, [r3, #0]
   8483a:	f000 fe65 	bl	85508 <__malloc_unlock>
   8483e:	2001      	movs	r0, #1
   84840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84842:	4620      	mov	r0, r4
   84844:	2100      	movs	r1, #0
   84846:	f001 f841 	bl	858cc <_sbrk_r>
   8484a:	68ab      	ldr	r3, [r5, #8]
   8484c:	1ac2      	subs	r2, r0, r3
   8484e:	2a0f      	cmp	r2, #15
   84850:	ddde      	ble.n	84810 <_malloc_trim_r+0x3c>
   84852:	4d06      	ldr	r5, [pc, #24]	; (8486c <_malloc_trim_r+0x98>)
   84854:	4904      	ldr	r1, [pc, #16]	; (84868 <_malloc_trim_r+0x94>)
   84856:	682d      	ldr	r5, [r5, #0]
   84858:	f042 0201 	orr.w	r2, r2, #1
   8485c:	1b40      	subs	r0, r0, r5
   8485e:	605a      	str	r2, [r3, #4]
   84860:	6008      	str	r0, [r1, #0]
   84862:	e7d5      	b.n	84810 <_malloc_trim_r+0x3c>
   84864:	20070630 	.word	0x20070630
   84868:	20070d40 	.word	0x20070d40
   8486c:	20070a3c 	.word	0x20070a3c

00084870 <_free_r>:
   84870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84874:	460d      	mov	r5, r1
   84876:	4606      	mov	r6, r0
   84878:	2900      	cmp	r1, #0
   8487a:	d055      	beq.n	84928 <_free_r+0xb8>
   8487c:	f000 fe42 	bl	85504 <__malloc_lock>
   84880:	f855 1c04 	ldr.w	r1, [r5, #-4]
   84884:	f8df c170 	ldr.w	ip, [pc, #368]	; 849f8 <_free_r+0x188>
   84888:	f1a5 0408 	sub.w	r4, r5, #8
   8488c:	f021 0301 	bic.w	r3, r1, #1
   84890:	18e2      	adds	r2, r4, r3
   84892:	f8dc 0008 	ldr.w	r0, [ip, #8]
   84896:	6857      	ldr	r7, [r2, #4]
   84898:	4290      	cmp	r0, r2
   8489a:	f027 0703 	bic.w	r7, r7, #3
   8489e:	d068      	beq.n	84972 <_free_r+0x102>
   848a0:	f011 0101 	ands.w	r1, r1, #1
   848a4:	6057      	str	r7, [r2, #4]
   848a6:	d032      	beq.n	8490e <_free_r+0x9e>
   848a8:	2100      	movs	r1, #0
   848aa:	19d0      	adds	r0, r2, r7
   848ac:	6840      	ldr	r0, [r0, #4]
   848ae:	07c0      	lsls	r0, r0, #31
   848b0:	d406      	bmi.n	848c0 <_free_r+0x50>
   848b2:	443b      	add	r3, r7
   848b4:	6890      	ldr	r0, [r2, #8]
   848b6:	2900      	cmp	r1, #0
   848b8:	d04d      	beq.n	84956 <_free_r+0xe6>
   848ba:	68d2      	ldr	r2, [r2, #12]
   848bc:	60c2      	str	r2, [r0, #12]
   848be:	6090      	str	r0, [r2, #8]
   848c0:	f043 0201 	orr.w	r2, r3, #1
   848c4:	6062      	str	r2, [r4, #4]
   848c6:	50e3      	str	r3, [r4, r3]
   848c8:	b9e1      	cbnz	r1, 84904 <_free_r+0x94>
   848ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   848ce:	d32d      	bcc.n	8492c <_free_r+0xbc>
   848d0:	0a5a      	lsrs	r2, r3, #9
   848d2:	2a04      	cmp	r2, #4
   848d4:	d869      	bhi.n	849aa <_free_r+0x13a>
   848d6:	0998      	lsrs	r0, r3, #6
   848d8:	3038      	adds	r0, #56	; 0x38
   848da:	0041      	lsls	r1, r0, #1
   848dc:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
   848e0:	f8dc 2008 	ldr.w	r2, [ip, #8]
   848e4:	4944      	ldr	r1, [pc, #272]	; (849f8 <_free_r+0x188>)
   848e6:	4562      	cmp	r2, ip
   848e8:	d065      	beq.n	849b6 <_free_r+0x146>
   848ea:	6851      	ldr	r1, [r2, #4]
   848ec:	f021 0103 	bic.w	r1, r1, #3
   848f0:	428b      	cmp	r3, r1
   848f2:	d202      	bcs.n	848fa <_free_r+0x8a>
   848f4:	6892      	ldr	r2, [r2, #8]
   848f6:	4594      	cmp	ip, r2
   848f8:	d1f7      	bne.n	848ea <_free_r+0x7a>
   848fa:	68d3      	ldr	r3, [r2, #12]
   848fc:	60e3      	str	r3, [r4, #12]
   848fe:	60a2      	str	r2, [r4, #8]
   84900:	609c      	str	r4, [r3, #8]
   84902:	60d4      	str	r4, [r2, #12]
   84904:	4630      	mov	r0, r6
   84906:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8490a:	f000 bdfd 	b.w	85508 <__malloc_unlock>
   8490e:	f855 5c08 	ldr.w	r5, [r5, #-8]
   84912:	f10c 0808 	add.w	r8, ip, #8
   84916:	1b64      	subs	r4, r4, r5
   84918:	68a0      	ldr	r0, [r4, #8]
   8491a:	442b      	add	r3, r5
   8491c:	4540      	cmp	r0, r8
   8491e:	d042      	beq.n	849a6 <_free_r+0x136>
   84920:	68e5      	ldr	r5, [r4, #12]
   84922:	60c5      	str	r5, [r0, #12]
   84924:	60a8      	str	r0, [r5, #8]
   84926:	e7c0      	b.n	848aa <_free_r+0x3a>
   84928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8492c:	08db      	lsrs	r3, r3, #3
   8492e:	109a      	asrs	r2, r3, #2
   84930:	2001      	movs	r0, #1
   84932:	4090      	lsls	r0, r2
   84934:	f8dc 1004 	ldr.w	r1, [ip, #4]
   84938:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
   8493c:	689a      	ldr	r2, [r3, #8]
   8493e:	4301      	orrs	r1, r0
   84940:	60a2      	str	r2, [r4, #8]
   84942:	60e3      	str	r3, [r4, #12]
   84944:	f8cc 1004 	str.w	r1, [ip, #4]
   84948:	4630      	mov	r0, r6
   8494a:	609c      	str	r4, [r3, #8]
   8494c:	60d4      	str	r4, [r2, #12]
   8494e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   84952:	f000 bdd9 	b.w	85508 <__malloc_unlock>
   84956:	4d29      	ldr	r5, [pc, #164]	; (849fc <_free_r+0x18c>)
   84958:	42a8      	cmp	r0, r5
   8495a:	d1ae      	bne.n	848ba <_free_r+0x4a>
   8495c:	f043 0201 	orr.w	r2, r3, #1
   84960:	f8cc 4014 	str.w	r4, [ip, #20]
   84964:	f8cc 4010 	str.w	r4, [ip, #16]
   84968:	60e0      	str	r0, [r4, #12]
   8496a:	60a0      	str	r0, [r4, #8]
   8496c:	6062      	str	r2, [r4, #4]
   8496e:	50e3      	str	r3, [r4, r3]
   84970:	e7c8      	b.n	84904 <_free_r+0x94>
   84972:	441f      	add	r7, r3
   84974:	07cb      	lsls	r3, r1, #31
   84976:	d407      	bmi.n	84988 <_free_r+0x118>
   84978:	f855 1c08 	ldr.w	r1, [r5, #-8]
   8497c:	1a64      	subs	r4, r4, r1
   8497e:	68e3      	ldr	r3, [r4, #12]
   84980:	68a2      	ldr	r2, [r4, #8]
   84982:	440f      	add	r7, r1
   84984:	60d3      	str	r3, [r2, #12]
   84986:	609a      	str	r2, [r3, #8]
   84988:	4b1d      	ldr	r3, [pc, #116]	; (84a00 <_free_r+0x190>)
   8498a:	f047 0201 	orr.w	r2, r7, #1
   8498e:	681b      	ldr	r3, [r3, #0]
   84990:	6062      	str	r2, [r4, #4]
   84992:	429f      	cmp	r7, r3
   84994:	f8cc 4008 	str.w	r4, [ip, #8]
   84998:	d3b4      	bcc.n	84904 <_free_r+0x94>
   8499a:	4b1a      	ldr	r3, [pc, #104]	; (84a04 <_free_r+0x194>)
   8499c:	4630      	mov	r0, r6
   8499e:	6819      	ldr	r1, [r3, #0]
   849a0:	f7ff ff18 	bl	847d4 <_malloc_trim_r>
   849a4:	e7ae      	b.n	84904 <_free_r+0x94>
   849a6:	2101      	movs	r1, #1
   849a8:	e77f      	b.n	848aa <_free_r+0x3a>
   849aa:	2a14      	cmp	r2, #20
   849ac:	d80b      	bhi.n	849c6 <_free_r+0x156>
   849ae:	f102 005b 	add.w	r0, r2, #91	; 0x5b
   849b2:	0041      	lsls	r1, r0, #1
   849b4:	e792      	b.n	848dc <_free_r+0x6c>
   849b6:	1080      	asrs	r0, r0, #2
   849b8:	2501      	movs	r5, #1
   849ba:	4085      	lsls	r5, r0
   849bc:	6848      	ldr	r0, [r1, #4]
   849be:	4613      	mov	r3, r2
   849c0:	4328      	orrs	r0, r5
   849c2:	6048      	str	r0, [r1, #4]
   849c4:	e79a      	b.n	848fc <_free_r+0x8c>
   849c6:	2a54      	cmp	r2, #84	; 0x54
   849c8:	d803      	bhi.n	849d2 <_free_r+0x162>
   849ca:	0b18      	lsrs	r0, r3, #12
   849cc:	306e      	adds	r0, #110	; 0x6e
   849ce:	0041      	lsls	r1, r0, #1
   849d0:	e784      	b.n	848dc <_free_r+0x6c>
   849d2:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   849d6:	d803      	bhi.n	849e0 <_free_r+0x170>
   849d8:	0bd8      	lsrs	r0, r3, #15
   849da:	3077      	adds	r0, #119	; 0x77
   849dc:	0041      	lsls	r1, r0, #1
   849de:	e77d      	b.n	848dc <_free_r+0x6c>
   849e0:	f240 5154 	movw	r1, #1364	; 0x554
   849e4:	428a      	cmp	r2, r1
   849e6:	d803      	bhi.n	849f0 <_free_r+0x180>
   849e8:	0c98      	lsrs	r0, r3, #18
   849ea:	307c      	adds	r0, #124	; 0x7c
   849ec:	0041      	lsls	r1, r0, #1
   849ee:	e775      	b.n	848dc <_free_r+0x6c>
   849f0:	21fc      	movs	r1, #252	; 0xfc
   849f2:	207e      	movs	r0, #126	; 0x7e
   849f4:	e772      	b.n	848dc <_free_r+0x6c>
   849f6:	bf00      	nop
   849f8:	20070630 	.word	0x20070630
   849fc:	20070638 	.word	0x20070638
   84a00:	20070a38 	.word	0x20070a38
   84a04:	20070d3c 	.word	0x20070d3c

00084a08 <__sfvwrite_r>:
   84a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84a0c:	6893      	ldr	r3, [r2, #8]
   84a0e:	b083      	sub	sp, #12
   84a10:	4616      	mov	r6, r2
   84a12:	4681      	mov	r9, r0
   84a14:	460c      	mov	r4, r1
   84a16:	b32b      	cbz	r3, 84a64 <__sfvwrite_r+0x5c>
   84a18:	898b      	ldrh	r3, [r1, #12]
   84a1a:	0719      	lsls	r1, r3, #28
   84a1c:	d526      	bpl.n	84a6c <__sfvwrite_r+0x64>
   84a1e:	6922      	ldr	r2, [r4, #16]
   84a20:	b322      	cbz	r2, 84a6c <__sfvwrite_r+0x64>
   84a22:	f003 0202 	and.w	r2, r3, #2
   84a26:	b292      	uxth	r2, r2
   84a28:	6835      	ldr	r5, [r6, #0]
   84a2a:	2a00      	cmp	r2, #0
   84a2c:	d02c      	beq.n	84a88 <__sfvwrite_r+0x80>
   84a2e:	f04f 0a00 	mov.w	sl, #0
   84a32:	f8df b2e8 	ldr.w	fp, [pc, #744]	; 84d1c <__sfvwrite_r+0x314>
   84a36:	46d0      	mov	r8, sl
   84a38:	45d8      	cmp	r8, fp
   84a3a:	bf34      	ite	cc
   84a3c:	4643      	movcc	r3, r8
   84a3e:	465b      	movcs	r3, fp
   84a40:	4652      	mov	r2, sl
   84a42:	4648      	mov	r0, r9
   84a44:	f1b8 0f00 	cmp.w	r8, #0
   84a48:	d04f      	beq.n	84aea <__sfvwrite_r+0xe2>
   84a4a:	69e1      	ldr	r1, [r4, #28]
   84a4c:	6a67      	ldr	r7, [r4, #36]	; 0x24
   84a4e:	47b8      	blx	r7
   84a50:	2800      	cmp	r0, #0
   84a52:	dd56      	ble.n	84b02 <__sfvwrite_r+0xfa>
   84a54:	68b3      	ldr	r3, [r6, #8]
   84a56:	4482      	add	sl, r0
   84a58:	1a1b      	subs	r3, r3, r0
   84a5a:	ebc0 0808 	rsb	r8, r0, r8
   84a5e:	60b3      	str	r3, [r6, #8]
   84a60:	2b00      	cmp	r3, #0
   84a62:	d1e9      	bne.n	84a38 <__sfvwrite_r+0x30>
   84a64:	2000      	movs	r0, #0
   84a66:	b003      	add	sp, #12
   84a68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84a6c:	4648      	mov	r0, r9
   84a6e:	4621      	mov	r1, r4
   84a70:	f7ff fc88 	bl	84384 <__swsetup_r>
   84a74:	2800      	cmp	r0, #0
   84a76:	f040 8148 	bne.w	84d0a <__sfvwrite_r+0x302>
   84a7a:	89a3      	ldrh	r3, [r4, #12]
   84a7c:	6835      	ldr	r5, [r6, #0]
   84a7e:	f003 0202 	and.w	r2, r3, #2
   84a82:	b292      	uxth	r2, r2
   84a84:	2a00      	cmp	r2, #0
   84a86:	d1d2      	bne.n	84a2e <__sfvwrite_r+0x26>
   84a88:	f013 0a01 	ands.w	sl, r3, #1
   84a8c:	d142      	bne.n	84b14 <__sfvwrite_r+0x10c>
   84a8e:	46d0      	mov	r8, sl
   84a90:	f1b8 0f00 	cmp.w	r8, #0
   84a94:	d023      	beq.n	84ade <__sfvwrite_r+0xd6>
   84a96:	059a      	lsls	r2, r3, #22
   84a98:	68a7      	ldr	r7, [r4, #8]
   84a9a:	d576      	bpl.n	84b8a <__sfvwrite_r+0x182>
   84a9c:	45b8      	cmp	r8, r7
   84a9e:	f0c0 80a4 	bcc.w	84bea <__sfvwrite_r+0x1e2>
   84aa2:	f413 6f90 	tst.w	r3, #1152	; 0x480
   84aa6:	f040 80b2 	bne.w	84c0e <__sfvwrite_r+0x206>
   84aaa:	6820      	ldr	r0, [r4, #0]
   84aac:	46bb      	mov	fp, r7
   84aae:	4651      	mov	r1, sl
   84ab0:	465a      	mov	r2, fp
   84ab2:	f000 fcc1 	bl	85438 <memmove>
   84ab6:	68a2      	ldr	r2, [r4, #8]
   84ab8:	6821      	ldr	r1, [r4, #0]
   84aba:	1bd2      	subs	r2, r2, r7
   84abc:	eb01 030b 	add.w	r3, r1, fp
   84ac0:	60a2      	str	r2, [r4, #8]
   84ac2:	6023      	str	r3, [r4, #0]
   84ac4:	4642      	mov	r2, r8
   84ac6:	68b3      	ldr	r3, [r6, #8]
   84ac8:	4492      	add	sl, r2
   84aca:	1a9b      	subs	r3, r3, r2
   84acc:	ebc2 0808 	rsb	r8, r2, r8
   84ad0:	60b3      	str	r3, [r6, #8]
   84ad2:	2b00      	cmp	r3, #0
   84ad4:	d0c6      	beq.n	84a64 <__sfvwrite_r+0x5c>
   84ad6:	89a3      	ldrh	r3, [r4, #12]
   84ad8:	f1b8 0f00 	cmp.w	r8, #0
   84adc:	d1db      	bne.n	84a96 <__sfvwrite_r+0x8e>
   84ade:	f8d5 a000 	ldr.w	sl, [r5]
   84ae2:	f8d5 8004 	ldr.w	r8, [r5, #4]
   84ae6:	3508      	adds	r5, #8
   84ae8:	e7d2      	b.n	84a90 <__sfvwrite_r+0x88>
   84aea:	f8d5 a000 	ldr.w	sl, [r5]
   84aee:	f8d5 8004 	ldr.w	r8, [r5, #4]
   84af2:	3508      	adds	r5, #8
   84af4:	e7a0      	b.n	84a38 <__sfvwrite_r+0x30>
   84af6:	4648      	mov	r0, r9
   84af8:	4621      	mov	r1, r4
   84afa:	f7ff fd59 	bl	845b0 <_fflush_r>
   84afe:	2800      	cmp	r0, #0
   84b00:	d059      	beq.n	84bb6 <__sfvwrite_r+0x1ae>
   84b02:	89a3      	ldrh	r3, [r4, #12]
   84b04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   84b08:	f04f 30ff 	mov.w	r0, #4294967295
   84b0c:	81a3      	strh	r3, [r4, #12]
   84b0e:	b003      	add	sp, #12
   84b10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84b14:	4692      	mov	sl, r2
   84b16:	9201      	str	r2, [sp, #4]
   84b18:	4693      	mov	fp, r2
   84b1a:	4690      	mov	r8, r2
   84b1c:	f1b8 0f00 	cmp.w	r8, #0
   84b20:	d02b      	beq.n	84b7a <__sfvwrite_r+0x172>
   84b22:	9f01      	ldr	r7, [sp, #4]
   84b24:	2f00      	cmp	r7, #0
   84b26:	d064      	beq.n	84bf2 <__sfvwrite_r+0x1ea>
   84b28:	6820      	ldr	r0, [r4, #0]
   84b2a:	6921      	ldr	r1, [r4, #16]
   84b2c:	45c2      	cmp	sl, r8
   84b2e:	bf34      	ite	cc
   84b30:	4653      	movcc	r3, sl
   84b32:	4643      	movcs	r3, r8
   84b34:	4288      	cmp	r0, r1
   84b36:	461f      	mov	r7, r3
   84b38:	f8d4 c008 	ldr.w	ip, [r4, #8]
   84b3c:	6962      	ldr	r2, [r4, #20]
   84b3e:	d903      	bls.n	84b48 <__sfvwrite_r+0x140>
   84b40:	4494      	add	ip, r2
   84b42:	4563      	cmp	r3, ip
   84b44:	f300 80ae 	bgt.w	84ca4 <__sfvwrite_r+0x29c>
   84b48:	4293      	cmp	r3, r2
   84b4a:	db36      	blt.n	84bba <__sfvwrite_r+0x1b2>
   84b4c:	4613      	mov	r3, r2
   84b4e:	6a67      	ldr	r7, [r4, #36]	; 0x24
   84b50:	4648      	mov	r0, r9
   84b52:	69e1      	ldr	r1, [r4, #28]
   84b54:	465a      	mov	r2, fp
   84b56:	47b8      	blx	r7
   84b58:	1e07      	subs	r7, r0, #0
   84b5a:	ddd2      	ble.n	84b02 <__sfvwrite_r+0xfa>
   84b5c:	ebba 0a07 	subs.w	sl, sl, r7
   84b60:	d03a      	beq.n	84bd8 <__sfvwrite_r+0x1d0>
   84b62:	68b3      	ldr	r3, [r6, #8]
   84b64:	44bb      	add	fp, r7
   84b66:	1bdb      	subs	r3, r3, r7
   84b68:	ebc7 0808 	rsb	r8, r7, r8
   84b6c:	60b3      	str	r3, [r6, #8]
   84b6e:	2b00      	cmp	r3, #0
   84b70:	f43f af78 	beq.w	84a64 <__sfvwrite_r+0x5c>
   84b74:	f1b8 0f00 	cmp.w	r8, #0
   84b78:	d1d3      	bne.n	84b22 <__sfvwrite_r+0x11a>
   84b7a:	2700      	movs	r7, #0
   84b7c:	f8d5 b000 	ldr.w	fp, [r5]
   84b80:	f8d5 8004 	ldr.w	r8, [r5, #4]
   84b84:	9701      	str	r7, [sp, #4]
   84b86:	3508      	adds	r5, #8
   84b88:	e7c8      	b.n	84b1c <__sfvwrite_r+0x114>
   84b8a:	6820      	ldr	r0, [r4, #0]
   84b8c:	6923      	ldr	r3, [r4, #16]
   84b8e:	4298      	cmp	r0, r3
   84b90:	d802      	bhi.n	84b98 <__sfvwrite_r+0x190>
   84b92:	6963      	ldr	r3, [r4, #20]
   84b94:	4598      	cmp	r8, r3
   84b96:	d272      	bcs.n	84c7e <__sfvwrite_r+0x276>
   84b98:	45b8      	cmp	r8, r7
   84b9a:	bf38      	it	cc
   84b9c:	4647      	movcc	r7, r8
   84b9e:	463a      	mov	r2, r7
   84ba0:	4651      	mov	r1, sl
   84ba2:	f000 fc49 	bl	85438 <memmove>
   84ba6:	68a3      	ldr	r3, [r4, #8]
   84ba8:	6822      	ldr	r2, [r4, #0]
   84baa:	1bdb      	subs	r3, r3, r7
   84bac:	443a      	add	r2, r7
   84bae:	60a3      	str	r3, [r4, #8]
   84bb0:	6022      	str	r2, [r4, #0]
   84bb2:	2b00      	cmp	r3, #0
   84bb4:	d09f      	beq.n	84af6 <__sfvwrite_r+0xee>
   84bb6:	463a      	mov	r2, r7
   84bb8:	e785      	b.n	84ac6 <__sfvwrite_r+0xbe>
   84bba:	461a      	mov	r2, r3
   84bbc:	4659      	mov	r1, fp
   84bbe:	9300      	str	r3, [sp, #0]
   84bc0:	f000 fc3a 	bl	85438 <memmove>
   84bc4:	9b00      	ldr	r3, [sp, #0]
   84bc6:	68a1      	ldr	r1, [r4, #8]
   84bc8:	6822      	ldr	r2, [r4, #0]
   84bca:	1ac9      	subs	r1, r1, r3
   84bcc:	ebba 0a07 	subs.w	sl, sl, r7
   84bd0:	4413      	add	r3, r2
   84bd2:	60a1      	str	r1, [r4, #8]
   84bd4:	6023      	str	r3, [r4, #0]
   84bd6:	d1c4      	bne.n	84b62 <__sfvwrite_r+0x15a>
   84bd8:	4648      	mov	r0, r9
   84bda:	4621      	mov	r1, r4
   84bdc:	f7ff fce8 	bl	845b0 <_fflush_r>
   84be0:	2800      	cmp	r0, #0
   84be2:	d18e      	bne.n	84b02 <__sfvwrite_r+0xfa>
   84be4:	f8cd a004 	str.w	sl, [sp, #4]
   84be8:	e7bb      	b.n	84b62 <__sfvwrite_r+0x15a>
   84bea:	6820      	ldr	r0, [r4, #0]
   84bec:	4647      	mov	r7, r8
   84bee:	46c3      	mov	fp, r8
   84bf0:	e75d      	b.n	84aae <__sfvwrite_r+0xa6>
   84bf2:	4658      	mov	r0, fp
   84bf4:	210a      	movs	r1, #10
   84bf6:	4642      	mov	r2, r8
   84bf8:	f000 fbd4 	bl	853a4 <memchr>
   84bfc:	2800      	cmp	r0, #0
   84bfe:	d07f      	beq.n	84d00 <__sfvwrite_r+0x2f8>
   84c00:	f100 0a01 	add.w	sl, r0, #1
   84c04:	2701      	movs	r7, #1
   84c06:	ebcb 0a0a 	rsb	sl, fp, sl
   84c0a:	9701      	str	r7, [sp, #4]
   84c0c:	e78c      	b.n	84b28 <__sfvwrite_r+0x120>
   84c0e:	6822      	ldr	r2, [r4, #0]
   84c10:	6921      	ldr	r1, [r4, #16]
   84c12:	6967      	ldr	r7, [r4, #20]
   84c14:	ebc1 0c02 	rsb	ip, r1, r2
   84c18:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   84c1c:	f10c 0201 	add.w	r2, ip, #1
   84c20:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   84c24:	4442      	add	r2, r8
   84c26:	107f      	asrs	r7, r7, #1
   84c28:	4297      	cmp	r7, r2
   84c2a:	bf34      	ite	cc
   84c2c:	4617      	movcc	r7, r2
   84c2e:	463a      	movcs	r2, r7
   84c30:	055b      	lsls	r3, r3, #21
   84c32:	d54f      	bpl.n	84cd4 <__sfvwrite_r+0x2cc>
   84c34:	4611      	mov	r1, r2
   84c36:	4648      	mov	r0, r9
   84c38:	f8cd c000 	str.w	ip, [sp]
   84c3c:	f000 f916 	bl	84e6c <_malloc_r>
   84c40:	f8dd c000 	ldr.w	ip, [sp]
   84c44:	4683      	mov	fp, r0
   84c46:	2800      	cmp	r0, #0
   84c48:	d062      	beq.n	84d10 <__sfvwrite_r+0x308>
   84c4a:	4662      	mov	r2, ip
   84c4c:	6921      	ldr	r1, [r4, #16]
   84c4e:	f8cd c000 	str.w	ip, [sp]
   84c52:	f7fe fbab 	bl	833ac <memcpy>
   84c56:	89a2      	ldrh	r2, [r4, #12]
   84c58:	f8dd c000 	ldr.w	ip, [sp]
   84c5c:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   84c60:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   84c64:	81a2      	strh	r2, [r4, #12]
   84c66:	eb0b 000c 	add.w	r0, fp, ip
   84c6a:	ebcc 0207 	rsb	r2, ip, r7
   84c6e:	f8c4 b010 	str.w	fp, [r4, #16]
   84c72:	6167      	str	r7, [r4, #20]
   84c74:	6020      	str	r0, [r4, #0]
   84c76:	60a2      	str	r2, [r4, #8]
   84c78:	4647      	mov	r7, r8
   84c7a:	46c3      	mov	fp, r8
   84c7c:	e717      	b.n	84aae <__sfvwrite_r+0xa6>
   84c7e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   84c82:	4590      	cmp	r8, r2
   84c84:	bf38      	it	cc
   84c86:	4642      	movcc	r2, r8
   84c88:	fb92 f2f3 	sdiv	r2, r2, r3
   84c8c:	fb02 f303 	mul.w	r3, r2, r3
   84c90:	6a67      	ldr	r7, [r4, #36]	; 0x24
   84c92:	4648      	mov	r0, r9
   84c94:	69e1      	ldr	r1, [r4, #28]
   84c96:	4652      	mov	r2, sl
   84c98:	47b8      	blx	r7
   84c9a:	2800      	cmp	r0, #0
   84c9c:	f77f af31 	ble.w	84b02 <__sfvwrite_r+0xfa>
   84ca0:	4602      	mov	r2, r0
   84ca2:	e710      	b.n	84ac6 <__sfvwrite_r+0xbe>
   84ca4:	4662      	mov	r2, ip
   84ca6:	4659      	mov	r1, fp
   84ca8:	f8cd c000 	str.w	ip, [sp]
   84cac:	f000 fbc4 	bl	85438 <memmove>
   84cb0:	f8dd c000 	ldr.w	ip, [sp]
   84cb4:	6823      	ldr	r3, [r4, #0]
   84cb6:	4648      	mov	r0, r9
   84cb8:	4463      	add	r3, ip
   84cba:	6023      	str	r3, [r4, #0]
   84cbc:	4621      	mov	r1, r4
   84cbe:	f8cd c000 	str.w	ip, [sp]
   84cc2:	f7ff fc75 	bl	845b0 <_fflush_r>
   84cc6:	f8dd c000 	ldr.w	ip, [sp]
   84cca:	2800      	cmp	r0, #0
   84ccc:	f47f af19 	bne.w	84b02 <__sfvwrite_r+0xfa>
   84cd0:	4667      	mov	r7, ip
   84cd2:	e743      	b.n	84b5c <__sfvwrite_r+0x154>
   84cd4:	4648      	mov	r0, r9
   84cd6:	f8cd c000 	str.w	ip, [sp]
   84cda:	f000 fc17 	bl	8550c <_realloc_r>
   84cde:	f8dd c000 	ldr.w	ip, [sp]
   84ce2:	4683      	mov	fp, r0
   84ce4:	2800      	cmp	r0, #0
   84ce6:	d1be      	bne.n	84c66 <__sfvwrite_r+0x25e>
   84ce8:	4648      	mov	r0, r9
   84cea:	6921      	ldr	r1, [r4, #16]
   84cec:	f7ff fdc0 	bl	84870 <_free_r>
   84cf0:	89a3      	ldrh	r3, [r4, #12]
   84cf2:	220c      	movs	r2, #12
   84cf4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   84cf8:	b29b      	uxth	r3, r3
   84cfa:	f8c9 2000 	str.w	r2, [r9]
   84cfe:	e701      	b.n	84b04 <__sfvwrite_r+0xfc>
   84d00:	2701      	movs	r7, #1
   84d02:	f108 0a01 	add.w	sl, r8, #1
   84d06:	9701      	str	r7, [sp, #4]
   84d08:	e70e      	b.n	84b28 <__sfvwrite_r+0x120>
   84d0a:	f04f 30ff 	mov.w	r0, #4294967295
   84d0e:	e6aa      	b.n	84a66 <__sfvwrite_r+0x5e>
   84d10:	230c      	movs	r3, #12
   84d12:	f8c9 3000 	str.w	r3, [r9]
   84d16:	89a3      	ldrh	r3, [r4, #12]
   84d18:	e6f4      	b.n	84b04 <__sfvwrite_r+0xfc>
   84d1a:	bf00      	nop
   84d1c:	7ffffc00 	.word	0x7ffffc00

00084d20 <_fwalk>:
   84d20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84d24:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
   84d28:	4688      	mov	r8, r1
   84d2a:	d019      	beq.n	84d60 <_fwalk+0x40>
   84d2c:	2600      	movs	r6, #0
   84d2e:	687d      	ldr	r5, [r7, #4]
   84d30:	68bc      	ldr	r4, [r7, #8]
   84d32:	3d01      	subs	r5, #1
   84d34:	d40e      	bmi.n	84d54 <_fwalk+0x34>
   84d36:	89a3      	ldrh	r3, [r4, #12]
   84d38:	3d01      	subs	r5, #1
   84d3a:	2b01      	cmp	r3, #1
   84d3c:	d906      	bls.n	84d4c <_fwalk+0x2c>
   84d3e:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   84d42:	4620      	mov	r0, r4
   84d44:	3301      	adds	r3, #1
   84d46:	d001      	beq.n	84d4c <_fwalk+0x2c>
   84d48:	47c0      	blx	r8
   84d4a:	4306      	orrs	r6, r0
   84d4c:	1c6b      	adds	r3, r5, #1
   84d4e:	f104 0468 	add.w	r4, r4, #104	; 0x68
   84d52:	d1f0      	bne.n	84d36 <_fwalk+0x16>
   84d54:	683f      	ldr	r7, [r7, #0]
   84d56:	2f00      	cmp	r7, #0
   84d58:	d1e9      	bne.n	84d2e <_fwalk+0xe>
   84d5a:	4630      	mov	r0, r6
   84d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84d60:	463e      	mov	r6, r7
   84d62:	4630      	mov	r0, r6
   84d64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00084d68 <__locale_charset>:
   84d68:	4800      	ldr	r0, [pc, #0]	; (84d6c <__locale_charset+0x4>)
   84d6a:	4770      	bx	lr
   84d6c:	2007060c 	.word	0x2007060c

00084d70 <__locale_mb_cur_max>:
   84d70:	4b01      	ldr	r3, [pc, #4]	; (84d78 <__locale_mb_cur_max+0x8>)
   84d72:	6818      	ldr	r0, [r3, #0]
   84d74:	4770      	bx	lr
   84d76:	bf00      	nop
   84d78:	2007062c 	.word	0x2007062c

00084d7c <__smakebuf_r>:
   84d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
   84d7e:	898b      	ldrh	r3, [r1, #12]
   84d80:	b091      	sub	sp, #68	; 0x44
   84d82:	b29a      	uxth	r2, r3
   84d84:	0796      	lsls	r6, r2, #30
   84d86:	460c      	mov	r4, r1
   84d88:	4605      	mov	r5, r0
   84d8a:	d437      	bmi.n	84dfc <__smakebuf_r+0x80>
   84d8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   84d90:	2900      	cmp	r1, #0
   84d92:	db17      	blt.n	84dc4 <__smakebuf_r+0x48>
   84d94:	aa01      	add	r2, sp, #4
   84d96:	f000 ff69 	bl	85c6c <_fstat_r>
   84d9a:	2800      	cmp	r0, #0
   84d9c:	db10      	blt.n	84dc0 <__smakebuf_r+0x44>
   84d9e:	9b02      	ldr	r3, [sp, #8]
   84da0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
   84da4:	f5b3 5100 	subs.w	r1, r3, #8192	; 0x2000
   84da8:	424f      	negs	r7, r1
   84daa:	414f      	adcs	r7, r1
   84dac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   84db0:	d02c      	beq.n	84e0c <__smakebuf_r+0x90>
   84db2:	89a3      	ldrh	r3, [r4, #12]
   84db4:	f44f 6680 	mov.w	r6, #1024	; 0x400
   84db8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   84dbc:	81a3      	strh	r3, [r4, #12]
   84dbe:	e00b      	b.n	84dd8 <__smakebuf_r+0x5c>
   84dc0:	89a3      	ldrh	r3, [r4, #12]
   84dc2:	b29a      	uxth	r2, r3
   84dc4:	f012 0f80 	tst.w	r2, #128	; 0x80
   84dc8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   84dcc:	81a3      	strh	r3, [r4, #12]
   84dce:	bf14      	ite	ne
   84dd0:	2640      	movne	r6, #64	; 0x40
   84dd2:	f44f 6680 	moveq.w	r6, #1024	; 0x400
   84dd6:	2700      	movs	r7, #0
   84dd8:	4628      	mov	r0, r5
   84dda:	4631      	mov	r1, r6
   84ddc:	f000 f846 	bl	84e6c <_malloc_r>
   84de0:	89a3      	ldrh	r3, [r4, #12]
   84de2:	2800      	cmp	r0, #0
   84de4:	d029      	beq.n	84e3a <__smakebuf_r+0xbe>
   84de6:	4a1b      	ldr	r2, [pc, #108]	; (84e54 <__smakebuf_r+0xd8>)
   84de8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   84dec:	63ea      	str	r2, [r5, #60]	; 0x3c
   84dee:	81a3      	strh	r3, [r4, #12]
   84df0:	6020      	str	r0, [r4, #0]
   84df2:	6120      	str	r0, [r4, #16]
   84df4:	6166      	str	r6, [r4, #20]
   84df6:	b9a7      	cbnz	r7, 84e22 <__smakebuf_r+0xa6>
   84df8:	b011      	add	sp, #68	; 0x44
   84dfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84dfc:	f101 0343 	add.w	r3, r1, #67	; 0x43
   84e00:	2201      	movs	r2, #1
   84e02:	600b      	str	r3, [r1, #0]
   84e04:	610b      	str	r3, [r1, #16]
   84e06:	614a      	str	r2, [r1, #20]
   84e08:	b011      	add	sp, #68	; 0x44
   84e0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84e0c:	4a12      	ldr	r2, [pc, #72]	; (84e58 <__smakebuf_r+0xdc>)
   84e0e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   84e10:	4293      	cmp	r3, r2
   84e12:	d1ce      	bne.n	84db2 <__smakebuf_r+0x36>
   84e14:	89a3      	ldrh	r3, [r4, #12]
   84e16:	f44f 6680 	mov.w	r6, #1024	; 0x400
   84e1a:	4333      	orrs	r3, r6
   84e1c:	81a3      	strh	r3, [r4, #12]
   84e1e:	64e6      	str	r6, [r4, #76]	; 0x4c
   84e20:	e7da      	b.n	84dd8 <__smakebuf_r+0x5c>
   84e22:	4628      	mov	r0, r5
   84e24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   84e28:	f000 ff34 	bl	85c94 <_isatty_r>
   84e2c:	2800      	cmp	r0, #0
   84e2e:	d0e3      	beq.n	84df8 <__smakebuf_r+0x7c>
   84e30:	89a3      	ldrh	r3, [r4, #12]
   84e32:	f043 0301 	orr.w	r3, r3, #1
   84e36:	81a3      	strh	r3, [r4, #12]
   84e38:	e7de      	b.n	84df8 <__smakebuf_r+0x7c>
   84e3a:	059a      	lsls	r2, r3, #22
   84e3c:	d4dc      	bmi.n	84df8 <__smakebuf_r+0x7c>
   84e3e:	f104 0243 	add.w	r2, r4, #67	; 0x43
   84e42:	f043 0302 	orr.w	r3, r3, #2
   84e46:	2101      	movs	r1, #1
   84e48:	81a3      	strh	r3, [r4, #12]
   84e4a:	6022      	str	r2, [r4, #0]
   84e4c:	6122      	str	r2, [r4, #16]
   84e4e:	6161      	str	r1, [r4, #20]
   84e50:	e7d2      	b.n	84df8 <__smakebuf_r+0x7c>
   84e52:	bf00      	nop
   84e54:	000845dd 	.word	0x000845dd
   84e58:	0008594d 	.word	0x0008594d

00084e5c <malloc>:
   84e5c:	4b02      	ldr	r3, [pc, #8]	; (84e68 <malloc+0xc>)
   84e5e:	4601      	mov	r1, r0
   84e60:	6818      	ldr	r0, [r3, #0]
   84e62:	f000 b803 	b.w	84e6c <_malloc_r>
   84e66:	bf00      	nop
   84e68:	20070608 	.word	0x20070608

00084e6c <_malloc_r>:
   84e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84e70:	f101 050b 	add.w	r5, r1, #11
   84e74:	2d16      	cmp	r5, #22
   84e76:	b083      	sub	sp, #12
   84e78:	4606      	mov	r6, r0
   84e7a:	d927      	bls.n	84ecc <_malloc_r+0x60>
   84e7c:	f035 0507 	bics.w	r5, r5, #7
   84e80:	d427      	bmi.n	84ed2 <_malloc_r+0x66>
   84e82:	42a9      	cmp	r1, r5
   84e84:	d825      	bhi.n	84ed2 <_malloc_r+0x66>
   84e86:	4630      	mov	r0, r6
   84e88:	f000 fb3c 	bl	85504 <__malloc_lock>
   84e8c:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   84e90:	d226      	bcs.n	84ee0 <_malloc_r+0x74>
   84e92:	4fc1      	ldr	r7, [pc, #772]	; (85198 <_malloc_r+0x32c>)
   84e94:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
   84e98:	eb07 03cc 	add.w	r3, r7, ip, lsl #3
   84e9c:	68dc      	ldr	r4, [r3, #12]
   84e9e:	429c      	cmp	r4, r3
   84ea0:	f000 81d2 	beq.w	85248 <_malloc_r+0x3dc>
   84ea4:	6863      	ldr	r3, [r4, #4]
   84ea6:	68e2      	ldr	r2, [r4, #12]
   84ea8:	f023 0303 	bic.w	r3, r3, #3
   84eac:	4423      	add	r3, r4
   84eae:	6858      	ldr	r0, [r3, #4]
   84eb0:	68a1      	ldr	r1, [r4, #8]
   84eb2:	f040 0501 	orr.w	r5, r0, #1
   84eb6:	60ca      	str	r2, [r1, #12]
   84eb8:	4630      	mov	r0, r6
   84eba:	6091      	str	r1, [r2, #8]
   84ebc:	605d      	str	r5, [r3, #4]
   84ebe:	f000 fb23 	bl	85508 <__malloc_unlock>
   84ec2:	3408      	adds	r4, #8
   84ec4:	4620      	mov	r0, r4
   84ec6:	b003      	add	sp, #12
   84ec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84ecc:	2510      	movs	r5, #16
   84ece:	42a9      	cmp	r1, r5
   84ed0:	d9d9      	bls.n	84e86 <_malloc_r+0x1a>
   84ed2:	2400      	movs	r4, #0
   84ed4:	230c      	movs	r3, #12
   84ed6:	4620      	mov	r0, r4
   84ed8:	6033      	str	r3, [r6, #0]
   84eda:	b003      	add	sp, #12
   84edc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84ee0:	ea5f 2c55 	movs.w	ip, r5, lsr #9
   84ee4:	f000 8089 	beq.w	84ffa <_malloc_r+0x18e>
   84ee8:	f1bc 0f04 	cmp.w	ip, #4
   84eec:	f200 8160 	bhi.w	851b0 <_malloc_r+0x344>
   84ef0:	ea4f 1c95 	mov.w	ip, r5, lsr #6
   84ef4:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
   84ef8:	ea4f 014c 	mov.w	r1, ip, lsl #1
   84efc:	4fa6      	ldr	r7, [pc, #664]	; (85198 <_malloc_r+0x32c>)
   84efe:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   84f02:	68cc      	ldr	r4, [r1, #12]
   84f04:	42a1      	cmp	r1, r4
   84f06:	d105      	bne.n	84f14 <_malloc_r+0xa8>
   84f08:	e00c      	b.n	84f24 <_malloc_r+0xb8>
   84f0a:	2b00      	cmp	r3, #0
   84f0c:	da79      	bge.n	85002 <_malloc_r+0x196>
   84f0e:	68e4      	ldr	r4, [r4, #12]
   84f10:	42a1      	cmp	r1, r4
   84f12:	d007      	beq.n	84f24 <_malloc_r+0xb8>
   84f14:	6862      	ldr	r2, [r4, #4]
   84f16:	f022 0203 	bic.w	r2, r2, #3
   84f1a:	1b53      	subs	r3, r2, r5
   84f1c:	2b0f      	cmp	r3, #15
   84f1e:	ddf4      	ble.n	84f0a <_malloc_r+0x9e>
   84f20:	f10c 3cff 	add.w	ip, ip, #4294967295
   84f24:	f10c 0c01 	add.w	ip, ip, #1
   84f28:	4b9b      	ldr	r3, [pc, #620]	; (85198 <_malloc_r+0x32c>)
   84f2a:	693c      	ldr	r4, [r7, #16]
   84f2c:	f103 0e08 	add.w	lr, r3, #8
   84f30:	4574      	cmp	r4, lr
   84f32:	f000 817e 	beq.w	85232 <_malloc_r+0x3c6>
   84f36:	6861      	ldr	r1, [r4, #4]
   84f38:	f021 0103 	bic.w	r1, r1, #3
   84f3c:	1b4a      	subs	r2, r1, r5
   84f3e:	2a0f      	cmp	r2, #15
   84f40:	f300 8164 	bgt.w	8520c <_malloc_r+0x3a0>
   84f44:	2a00      	cmp	r2, #0
   84f46:	f8c3 e014 	str.w	lr, [r3, #20]
   84f4a:	f8c3 e010 	str.w	lr, [r3, #16]
   84f4e:	da69      	bge.n	85024 <_malloc_r+0x1b8>
   84f50:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   84f54:	f080 813a 	bcs.w	851cc <_malloc_r+0x360>
   84f58:	08c9      	lsrs	r1, r1, #3
   84f5a:	108a      	asrs	r2, r1, #2
   84f5c:	f04f 0801 	mov.w	r8, #1
   84f60:	fa08 f802 	lsl.w	r8, r8, r2
   84f64:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   84f68:	685a      	ldr	r2, [r3, #4]
   84f6a:	6888      	ldr	r0, [r1, #8]
   84f6c:	ea48 0202 	orr.w	r2, r8, r2
   84f70:	60a0      	str	r0, [r4, #8]
   84f72:	60e1      	str	r1, [r4, #12]
   84f74:	605a      	str	r2, [r3, #4]
   84f76:	608c      	str	r4, [r1, #8]
   84f78:	60c4      	str	r4, [r0, #12]
   84f7a:	ea4f 03ac 	mov.w	r3, ip, asr #2
   84f7e:	2001      	movs	r0, #1
   84f80:	4098      	lsls	r0, r3
   84f82:	4290      	cmp	r0, r2
   84f84:	d85b      	bhi.n	8503e <_malloc_r+0x1d2>
   84f86:	4202      	tst	r2, r0
   84f88:	d106      	bne.n	84f98 <_malloc_r+0x12c>
   84f8a:	f02c 0c03 	bic.w	ip, ip, #3
   84f8e:	0040      	lsls	r0, r0, #1
   84f90:	4202      	tst	r2, r0
   84f92:	f10c 0c04 	add.w	ip, ip, #4
   84f96:	d0fa      	beq.n	84f8e <_malloc_r+0x122>
   84f98:	eb07 08cc 	add.w	r8, r7, ip, lsl #3
   84f9c:	4644      	mov	r4, r8
   84f9e:	46e1      	mov	r9, ip
   84fa0:	68e3      	ldr	r3, [r4, #12]
   84fa2:	429c      	cmp	r4, r3
   84fa4:	d107      	bne.n	84fb6 <_malloc_r+0x14a>
   84fa6:	e146      	b.n	85236 <_malloc_r+0x3ca>
   84fa8:	2a00      	cmp	r2, #0
   84faa:	f280 8157 	bge.w	8525c <_malloc_r+0x3f0>
   84fae:	68db      	ldr	r3, [r3, #12]
   84fb0:	429c      	cmp	r4, r3
   84fb2:	f000 8140 	beq.w	85236 <_malloc_r+0x3ca>
   84fb6:	6859      	ldr	r1, [r3, #4]
   84fb8:	f021 0103 	bic.w	r1, r1, #3
   84fbc:	1b4a      	subs	r2, r1, r5
   84fbe:	2a0f      	cmp	r2, #15
   84fc0:	ddf2      	ble.n	84fa8 <_malloc_r+0x13c>
   84fc2:	461c      	mov	r4, r3
   84fc4:	f854 cf08 	ldr.w	ip, [r4, #8]!
   84fc8:	68d9      	ldr	r1, [r3, #12]
   84fca:	f045 0901 	orr.w	r9, r5, #1
   84fce:	f042 0801 	orr.w	r8, r2, #1
   84fd2:	441d      	add	r5, r3
   84fd4:	f8c3 9004 	str.w	r9, [r3, #4]
   84fd8:	4630      	mov	r0, r6
   84fda:	f8cc 100c 	str.w	r1, [ip, #12]
   84fde:	f8c1 c008 	str.w	ip, [r1, #8]
   84fe2:	617d      	str	r5, [r7, #20]
   84fe4:	613d      	str	r5, [r7, #16]
   84fe6:	f8c5 e00c 	str.w	lr, [r5, #12]
   84fea:	f8c5 e008 	str.w	lr, [r5, #8]
   84fee:	f8c5 8004 	str.w	r8, [r5, #4]
   84ff2:	50aa      	str	r2, [r5, r2]
   84ff4:	f000 fa88 	bl	85508 <__malloc_unlock>
   84ff8:	e764      	b.n	84ec4 <_malloc_r+0x58>
   84ffa:	217e      	movs	r1, #126	; 0x7e
   84ffc:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
   85000:	e77c      	b.n	84efc <_malloc_r+0x90>
   85002:	4422      	add	r2, r4
   85004:	6850      	ldr	r0, [r2, #4]
   85006:	68e3      	ldr	r3, [r4, #12]
   85008:	68a1      	ldr	r1, [r4, #8]
   8500a:	f040 0501 	orr.w	r5, r0, #1
   8500e:	60cb      	str	r3, [r1, #12]
   85010:	4630      	mov	r0, r6
   85012:	6099      	str	r1, [r3, #8]
   85014:	6055      	str	r5, [r2, #4]
   85016:	f000 fa77 	bl	85508 <__malloc_unlock>
   8501a:	3408      	adds	r4, #8
   8501c:	4620      	mov	r0, r4
   8501e:	b003      	add	sp, #12
   85020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85024:	4421      	add	r1, r4
   85026:	684b      	ldr	r3, [r1, #4]
   85028:	4630      	mov	r0, r6
   8502a:	f043 0301 	orr.w	r3, r3, #1
   8502e:	604b      	str	r3, [r1, #4]
   85030:	f000 fa6a 	bl	85508 <__malloc_unlock>
   85034:	3408      	adds	r4, #8
   85036:	4620      	mov	r0, r4
   85038:	b003      	add	sp, #12
   8503a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8503e:	68bc      	ldr	r4, [r7, #8]
   85040:	6863      	ldr	r3, [r4, #4]
   85042:	f023 0903 	bic.w	r9, r3, #3
   85046:	45a9      	cmp	r9, r5
   85048:	d304      	bcc.n	85054 <_malloc_r+0x1e8>
   8504a:	ebc5 0309 	rsb	r3, r5, r9
   8504e:	2b0f      	cmp	r3, #15
   85050:	f300 8091 	bgt.w	85176 <_malloc_r+0x30a>
   85054:	4b51      	ldr	r3, [pc, #324]	; (8519c <_malloc_r+0x330>)
   85056:	4a52      	ldr	r2, [pc, #328]	; (851a0 <_malloc_r+0x334>)
   85058:	6819      	ldr	r1, [r3, #0]
   8505a:	6813      	ldr	r3, [r2, #0]
   8505c:	eb05 0a01 	add.w	sl, r5, r1
   85060:	3301      	adds	r3, #1
   85062:	eb04 0b09 	add.w	fp, r4, r9
   85066:	f000 8161 	beq.w	8532c <_malloc_r+0x4c0>
   8506a:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
   8506e:	f10a 0a0f 	add.w	sl, sl, #15
   85072:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
   85076:	f02a 0a0f 	bic.w	sl, sl, #15
   8507a:	4630      	mov	r0, r6
   8507c:	4651      	mov	r1, sl
   8507e:	9201      	str	r2, [sp, #4]
   85080:	f000 fc24 	bl	858cc <_sbrk_r>
   85084:	f1b0 3fff 	cmp.w	r0, #4294967295
   85088:	4680      	mov	r8, r0
   8508a:	9a01      	ldr	r2, [sp, #4]
   8508c:	f000 8101 	beq.w	85292 <_malloc_r+0x426>
   85090:	4583      	cmp	fp, r0
   85092:	f200 80fb 	bhi.w	8528c <_malloc_r+0x420>
   85096:	f8df c114 	ldr.w	ip, [pc, #276]	; 851ac <_malloc_r+0x340>
   8509a:	45c3      	cmp	fp, r8
   8509c:	f8dc 3000 	ldr.w	r3, [ip]
   850a0:	4453      	add	r3, sl
   850a2:	f8cc 3000 	str.w	r3, [ip]
   850a6:	f000 814a 	beq.w	8533e <_malloc_r+0x4d2>
   850aa:	6812      	ldr	r2, [r2, #0]
   850ac:	493c      	ldr	r1, [pc, #240]	; (851a0 <_malloc_r+0x334>)
   850ae:	3201      	adds	r2, #1
   850b0:	bf1b      	ittet	ne
   850b2:	ebcb 0b08 	rsbne	fp, fp, r8
   850b6:	445b      	addne	r3, fp
   850b8:	f8c1 8000 	streq.w	r8, [r1]
   850bc:	f8cc 3000 	strne.w	r3, [ip]
   850c0:	f018 0307 	ands.w	r3, r8, #7
   850c4:	f000 8114 	beq.w	852f0 <_malloc_r+0x484>
   850c8:	f1c3 0208 	rsb	r2, r3, #8
   850cc:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
   850d0:	4490      	add	r8, r2
   850d2:	3308      	adds	r3, #8
   850d4:	44c2      	add	sl, r8
   850d6:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
   850da:	ebca 0a03 	rsb	sl, sl, r3
   850de:	4651      	mov	r1, sl
   850e0:	4630      	mov	r0, r6
   850e2:	f8cd c004 	str.w	ip, [sp, #4]
   850e6:	f000 fbf1 	bl	858cc <_sbrk_r>
   850ea:	1c43      	adds	r3, r0, #1
   850ec:	f8dd c004 	ldr.w	ip, [sp, #4]
   850f0:	f000 8135 	beq.w	8535e <_malloc_r+0x4f2>
   850f4:	ebc8 0200 	rsb	r2, r8, r0
   850f8:	4452      	add	r2, sl
   850fa:	f042 0201 	orr.w	r2, r2, #1
   850fe:	f8dc 3000 	ldr.w	r3, [ip]
   85102:	42bc      	cmp	r4, r7
   85104:	4453      	add	r3, sl
   85106:	f8c7 8008 	str.w	r8, [r7, #8]
   8510a:	f8cc 3000 	str.w	r3, [ip]
   8510e:	f8c8 2004 	str.w	r2, [r8, #4]
   85112:	f8df a098 	ldr.w	sl, [pc, #152]	; 851ac <_malloc_r+0x340>
   85116:	d015      	beq.n	85144 <_malloc_r+0x2d8>
   85118:	f1b9 0f0f 	cmp.w	r9, #15
   8511c:	f240 80eb 	bls.w	852f6 <_malloc_r+0x48a>
   85120:	6861      	ldr	r1, [r4, #4]
   85122:	f1a9 020c 	sub.w	r2, r9, #12
   85126:	f022 0207 	bic.w	r2, r2, #7
   8512a:	f001 0101 	and.w	r1, r1, #1
   8512e:	ea42 0e01 	orr.w	lr, r2, r1
   85132:	2005      	movs	r0, #5
   85134:	18a1      	adds	r1, r4, r2
   85136:	2a0f      	cmp	r2, #15
   85138:	f8c4 e004 	str.w	lr, [r4, #4]
   8513c:	6048      	str	r0, [r1, #4]
   8513e:	6088      	str	r0, [r1, #8]
   85140:	f200 8111 	bhi.w	85366 <_malloc_r+0x4fa>
   85144:	4a17      	ldr	r2, [pc, #92]	; (851a4 <_malloc_r+0x338>)
   85146:	68bc      	ldr	r4, [r7, #8]
   85148:	6811      	ldr	r1, [r2, #0]
   8514a:	428b      	cmp	r3, r1
   8514c:	bf88      	it	hi
   8514e:	6013      	strhi	r3, [r2, #0]
   85150:	4a15      	ldr	r2, [pc, #84]	; (851a8 <_malloc_r+0x33c>)
   85152:	6811      	ldr	r1, [r2, #0]
   85154:	428b      	cmp	r3, r1
   85156:	bf88      	it	hi
   85158:	6013      	strhi	r3, [r2, #0]
   8515a:	6862      	ldr	r2, [r4, #4]
   8515c:	f022 0203 	bic.w	r2, r2, #3
   85160:	4295      	cmp	r5, r2
   85162:	ebc5 0302 	rsb	r3, r5, r2
   85166:	d801      	bhi.n	8516c <_malloc_r+0x300>
   85168:	2b0f      	cmp	r3, #15
   8516a:	dc04      	bgt.n	85176 <_malloc_r+0x30a>
   8516c:	4630      	mov	r0, r6
   8516e:	f000 f9cb 	bl	85508 <__malloc_unlock>
   85172:	2400      	movs	r4, #0
   85174:	e6a6      	b.n	84ec4 <_malloc_r+0x58>
   85176:	f045 0201 	orr.w	r2, r5, #1
   8517a:	f043 0301 	orr.w	r3, r3, #1
   8517e:	4425      	add	r5, r4
   85180:	6062      	str	r2, [r4, #4]
   85182:	4630      	mov	r0, r6
   85184:	60bd      	str	r5, [r7, #8]
   85186:	606b      	str	r3, [r5, #4]
   85188:	f000 f9be 	bl	85508 <__malloc_unlock>
   8518c:	3408      	adds	r4, #8
   8518e:	4620      	mov	r0, r4
   85190:	b003      	add	sp, #12
   85192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85196:	bf00      	nop
   85198:	20070630 	.word	0x20070630
   8519c:	20070d3c 	.word	0x20070d3c
   851a0:	20070a3c 	.word	0x20070a3c
   851a4:	20070d38 	.word	0x20070d38
   851a8:	20070d34 	.word	0x20070d34
   851ac:	20070d40 	.word	0x20070d40
   851b0:	f1bc 0f14 	cmp.w	ip, #20
   851b4:	d961      	bls.n	8527a <_malloc_r+0x40e>
   851b6:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
   851ba:	f200 808f 	bhi.w	852dc <_malloc_r+0x470>
   851be:	ea4f 3c15 	mov.w	ip, r5, lsr #12
   851c2:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
   851c6:	ea4f 014c 	mov.w	r1, ip, lsl #1
   851ca:	e697      	b.n	84efc <_malloc_r+0x90>
   851cc:	0a4b      	lsrs	r3, r1, #9
   851ce:	2b04      	cmp	r3, #4
   851d0:	d958      	bls.n	85284 <_malloc_r+0x418>
   851d2:	2b14      	cmp	r3, #20
   851d4:	f200 80ad 	bhi.w	85332 <_malloc_r+0x4c6>
   851d8:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   851dc:	0050      	lsls	r0, r2, #1
   851de:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   851e2:	6883      	ldr	r3, [r0, #8]
   851e4:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 853a0 <_malloc_r+0x534>
   851e8:	4283      	cmp	r3, r0
   851ea:	f000 808a 	beq.w	85302 <_malloc_r+0x496>
   851ee:	685a      	ldr	r2, [r3, #4]
   851f0:	f022 0203 	bic.w	r2, r2, #3
   851f4:	4291      	cmp	r1, r2
   851f6:	d202      	bcs.n	851fe <_malloc_r+0x392>
   851f8:	689b      	ldr	r3, [r3, #8]
   851fa:	4298      	cmp	r0, r3
   851fc:	d1f7      	bne.n	851ee <_malloc_r+0x382>
   851fe:	68d9      	ldr	r1, [r3, #12]
   85200:	687a      	ldr	r2, [r7, #4]
   85202:	60e1      	str	r1, [r4, #12]
   85204:	60a3      	str	r3, [r4, #8]
   85206:	608c      	str	r4, [r1, #8]
   85208:	60dc      	str	r4, [r3, #12]
   8520a:	e6b6      	b.n	84f7a <_malloc_r+0x10e>
   8520c:	f045 0701 	orr.w	r7, r5, #1
   85210:	f042 0101 	orr.w	r1, r2, #1
   85214:	4425      	add	r5, r4
   85216:	6067      	str	r7, [r4, #4]
   85218:	4630      	mov	r0, r6
   8521a:	615d      	str	r5, [r3, #20]
   8521c:	611d      	str	r5, [r3, #16]
   8521e:	f8c5 e00c 	str.w	lr, [r5, #12]
   85222:	f8c5 e008 	str.w	lr, [r5, #8]
   85226:	6069      	str	r1, [r5, #4]
   85228:	50aa      	str	r2, [r5, r2]
   8522a:	3408      	adds	r4, #8
   8522c:	f000 f96c 	bl	85508 <__malloc_unlock>
   85230:	e648      	b.n	84ec4 <_malloc_r+0x58>
   85232:	685a      	ldr	r2, [r3, #4]
   85234:	e6a1      	b.n	84f7a <_malloc_r+0x10e>
   85236:	f109 0901 	add.w	r9, r9, #1
   8523a:	f019 0f03 	tst.w	r9, #3
   8523e:	f104 0408 	add.w	r4, r4, #8
   85242:	f47f aead 	bne.w	84fa0 <_malloc_r+0x134>
   85246:	e02d      	b.n	852a4 <_malloc_r+0x438>
   85248:	f104 0308 	add.w	r3, r4, #8
   8524c:	6964      	ldr	r4, [r4, #20]
   8524e:	42a3      	cmp	r3, r4
   85250:	bf08      	it	eq
   85252:	f10c 0c02 	addeq.w	ip, ip, #2
   85256:	f43f ae67 	beq.w	84f28 <_malloc_r+0xbc>
   8525a:	e623      	b.n	84ea4 <_malloc_r+0x38>
   8525c:	4419      	add	r1, r3
   8525e:	6848      	ldr	r0, [r1, #4]
   85260:	461c      	mov	r4, r3
   85262:	f854 2f08 	ldr.w	r2, [r4, #8]!
   85266:	68db      	ldr	r3, [r3, #12]
   85268:	f040 0501 	orr.w	r5, r0, #1
   8526c:	604d      	str	r5, [r1, #4]
   8526e:	4630      	mov	r0, r6
   85270:	60d3      	str	r3, [r2, #12]
   85272:	609a      	str	r2, [r3, #8]
   85274:	f000 f948 	bl	85508 <__malloc_unlock>
   85278:	e624      	b.n	84ec4 <_malloc_r+0x58>
   8527a:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
   8527e:	ea4f 014c 	mov.w	r1, ip, lsl #1
   85282:	e63b      	b.n	84efc <_malloc_r+0x90>
   85284:	098a      	lsrs	r2, r1, #6
   85286:	3238      	adds	r2, #56	; 0x38
   85288:	0050      	lsls	r0, r2, #1
   8528a:	e7a8      	b.n	851de <_malloc_r+0x372>
   8528c:	42bc      	cmp	r4, r7
   8528e:	f43f af02 	beq.w	85096 <_malloc_r+0x22a>
   85292:	68bc      	ldr	r4, [r7, #8]
   85294:	6862      	ldr	r2, [r4, #4]
   85296:	f022 0203 	bic.w	r2, r2, #3
   8529a:	e761      	b.n	85160 <_malloc_r+0x2f4>
   8529c:	f8d8 8000 	ldr.w	r8, [r8]
   852a0:	4598      	cmp	r8, r3
   852a2:	d17a      	bne.n	8539a <_malloc_r+0x52e>
   852a4:	f01c 0f03 	tst.w	ip, #3
   852a8:	f1a8 0308 	sub.w	r3, r8, #8
   852ac:	f10c 3cff 	add.w	ip, ip, #4294967295
   852b0:	d1f4      	bne.n	8529c <_malloc_r+0x430>
   852b2:	687b      	ldr	r3, [r7, #4]
   852b4:	ea23 0300 	bic.w	r3, r3, r0
   852b8:	607b      	str	r3, [r7, #4]
   852ba:	0040      	lsls	r0, r0, #1
   852bc:	4298      	cmp	r0, r3
   852be:	f63f aebe 	bhi.w	8503e <_malloc_r+0x1d2>
   852c2:	2800      	cmp	r0, #0
   852c4:	f43f aebb 	beq.w	8503e <_malloc_r+0x1d2>
   852c8:	4203      	tst	r3, r0
   852ca:	46cc      	mov	ip, r9
   852cc:	f47f ae64 	bne.w	84f98 <_malloc_r+0x12c>
   852d0:	0040      	lsls	r0, r0, #1
   852d2:	4203      	tst	r3, r0
   852d4:	f10c 0c04 	add.w	ip, ip, #4
   852d8:	d0fa      	beq.n	852d0 <_malloc_r+0x464>
   852da:	e65d      	b.n	84f98 <_malloc_r+0x12c>
   852dc:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
   852e0:	d819      	bhi.n	85316 <_malloc_r+0x4aa>
   852e2:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
   852e6:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
   852ea:	ea4f 014c 	mov.w	r1, ip, lsl #1
   852ee:	e605      	b.n	84efc <_malloc_r+0x90>
   852f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   852f4:	e6ee      	b.n	850d4 <_malloc_r+0x268>
   852f6:	2301      	movs	r3, #1
   852f8:	f8c8 3004 	str.w	r3, [r8, #4]
   852fc:	4644      	mov	r4, r8
   852fe:	2200      	movs	r2, #0
   85300:	e72e      	b.n	85160 <_malloc_r+0x2f4>
   85302:	1092      	asrs	r2, r2, #2
   85304:	2001      	movs	r0, #1
   85306:	4090      	lsls	r0, r2
   85308:	f8d8 2004 	ldr.w	r2, [r8, #4]
   8530c:	4619      	mov	r1, r3
   8530e:	4302      	orrs	r2, r0
   85310:	f8c8 2004 	str.w	r2, [r8, #4]
   85314:	e775      	b.n	85202 <_malloc_r+0x396>
   85316:	f240 5354 	movw	r3, #1364	; 0x554
   8531a:	459c      	cmp	ip, r3
   8531c:	d81b      	bhi.n	85356 <_malloc_r+0x4ea>
   8531e:	ea4f 4c95 	mov.w	ip, r5, lsr #18
   85322:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
   85326:	ea4f 014c 	mov.w	r1, ip, lsl #1
   8532a:	e5e7      	b.n	84efc <_malloc_r+0x90>
   8532c:	f10a 0a10 	add.w	sl, sl, #16
   85330:	e6a3      	b.n	8507a <_malloc_r+0x20e>
   85332:	2b54      	cmp	r3, #84	; 0x54
   85334:	d81f      	bhi.n	85376 <_malloc_r+0x50a>
   85336:	0b0a      	lsrs	r2, r1, #12
   85338:	326e      	adds	r2, #110	; 0x6e
   8533a:	0050      	lsls	r0, r2, #1
   8533c:	e74f      	b.n	851de <_malloc_r+0x372>
   8533e:	f3cb 010b 	ubfx	r1, fp, #0, #12
   85342:	2900      	cmp	r1, #0
   85344:	f47f aeb1 	bne.w	850aa <_malloc_r+0x23e>
   85348:	eb0a 0109 	add.w	r1, sl, r9
   8534c:	68ba      	ldr	r2, [r7, #8]
   8534e:	f041 0101 	orr.w	r1, r1, #1
   85352:	6051      	str	r1, [r2, #4]
   85354:	e6f6      	b.n	85144 <_malloc_r+0x2d8>
   85356:	21fc      	movs	r1, #252	; 0xfc
   85358:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
   8535c:	e5ce      	b.n	84efc <_malloc_r+0x90>
   8535e:	2201      	movs	r2, #1
   85360:	f04f 0a00 	mov.w	sl, #0
   85364:	e6cb      	b.n	850fe <_malloc_r+0x292>
   85366:	f104 0108 	add.w	r1, r4, #8
   8536a:	4630      	mov	r0, r6
   8536c:	f7ff fa80 	bl	84870 <_free_r>
   85370:	f8da 3000 	ldr.w	r3, [sl]
   85374:	e6e6      	b.n	85144 <_malloc_r+0x2d8>
   85376:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8537a:	d803      	bhi.n	85384 <_malloc_r+0x518>
   8537c:	0bca      	lsrs	r2, r1, #15
   8537e:	3277      	adds	r2, #119	; 0x77
   85380:	0050      	lsls	r0, r2, #1
   85382:	e72c      	b.n	851de <_malloc_r+0x372>
   85384:	f240 5254 	movw	r2, #1364	; 0x554
   85388:	4293      	cmp	r3, r2
   8538a:	d803      	bhi.n	85394 <_malloc_r+0x528>
   8538c:	0c8a      	lsrs	r2, r1, #18
   8538e:	327c      	adds	r2, #124	; 0x7c
   85390:	0050      	lsls	r0, r2, #1
   85392:	e724      	b.n	851de <_malloc_r+0x372>
   85394:	20fc      	movs	r0, #252	; 0xfc
   85396:	227e      	movs	r2, #126	; 0x7e
   85398:	e721      	b.n	851de <_malloc_r+0x372>
   8539a:	687b      	ldr	r3, [r7, #4]
   8539c:	e78d      	b.n	852ba <_malloc_r+0x44e>
   8539e:	bf00      	nop
   853a0:	20070630 	.word	0x20070630

000853a4 <memchr>:
   853a4:	0783      	lsls	r3, r0, #30
   853a6:	b470      	push	{r4, r5, r6}
   853a8:	b2c9      	uxtb	r1, r1
   853aa:	d040      	beq.n	8542e <memchr+0x8a>
   853ac:	1e54      	subs	r4, r2, #1
   853ae:	b32a      	cbz	r2, 853fc <memchr+0x58>
   853b0:	7803      	ldrb	r3, [r0, #0]
   853b2:	428b      	cmp	r3, r1
   853b4:	d023      	beq.n	853fe <memchr+0x5a>
   853b6:	1c43      	adds	r3, r0, #1
   853b8:	e004      	b.n	853c4 <memchr+0x20>
   853ba:	b1fc      	cbz	r4, 853fc <memchr+0x58>
   853bc:	7805      	ldrb	r5, [r0, #0]
   853be:	4614      	mov	r4, r2
   853c0:	428d      	cmp	r5, r1
   853c2:	d01c      	beq.n	853fe <memchr+0x5a>
   853c4:	f013 0f03 	tst.w	r3, #3
   853c8:	4618      	mov	r0, r3
   853ca:	f104 32ff 	add.w	r2, r4, #4294967295
   853ce:	f103 0301 	add.w	r3, r3, #1
   853d2:	d1f2      	bne.n	853ba <memchr+0x16>
   853d4:	2c03      	cmp	r4, #3
   853d6:	d814      	bhi.n	85402 <memchr+0x5e>
   853d8:	1e65      	subs	r5, r4, #1
   853da:	b354      	cbz	r4, 85432 <memchr+0x8e>
   853dc:	7803      	ldrb	r3, [r0, #0]
   853de:	428b      	cmp	r3, r1
   853e0:	d00d      	beq.n	853fe <memchr+0x5a>
   853e2:	1c42      	adds	r2, r0, #1
   853e4:	2300      	movs	r3, #0
   853e6:	e002      	b.n	853ee <memchr+0x4a>
   853e8:	7804      	ldrb	r4, [r0, #0]
   853ea:	428c      	cmp	r4, r1
   853ec:	d007      	beq.n	853fe <memchr+0x5a>
   853ee:	42ab      	cmp	r3, r5
   853f0:	4610      	mov	r0, r2
   853f2:	f103 0301 	add.w	r3, r3, #1
   853f6:	f102 0201 	add.w	r2, r2, #1
   853fa:	d1f5      	bne.n	853e8 <memchr+0x44>
   853fc:	2000      	movs	r0, #0
   853fe:	bc70      	pop	{r4, r5, r6}
   85400:	4770      	bx	lr
   85402:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
   85406:	4603      	mov	r3, r0
   85408:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   8540c:	681a      	ldr	r2, [r3, #0]
   8540e:	4618      	mov	r0, r3
   85410:	4072      	eors	r2, r6
   85412:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
   85416:	ea25 0202 	bic.w	r2, r5, r2
   8541a:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   8541e:	f103 0304 	add.w	r3, r3, #4
   85422:	d1d9      	bne.n	853d8 <memchr+0x34>
   85424:	3c04      	subs	r4, #4
   85426:	2c03      	cmp	r4, #3
   85428:	4618      	mov	r0, r3
   8542a:	d8ef      	bhi.n	8540c <memchr+0x68>
   8542c:	e7d4      	b.n	853d8 <memchr+0x34>
   8542e:	4614      	mov	r4, r2
   85430:	e7d0      	b.n	853d4 <memchr+0x30>
   85432:	4620      	mov	r0, r4
   85434:	e7e3      	b.n	853fe <memchr+0x5a>
   85436:	bf00      	nop

00085438 <memmove>:
   85438:	4288      	cmp	r0, r1
   8543a:	b4f0      	push	{r4, r5, r6, r7}
   8543c:	d910      	bls.n	85460 <memmove+0x28>
   8543e:	188c      	adds	r4, r1, r2
   85440:	42a0      	cmp	r0, r4
   85442:	d20d      	bcs.n	85460 <memmove+0x28>
   85444:	1885      	adds	r5, r0, r2
   85446:	1e53      	subs	r3, r2, #1
   85448:	b142      	cbz	r2, 8545c <memmove+0x24>
   8544a:	4621      	mov	r1, r4
   8544c:	462a      	mov	r2, r5
   8544e:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
   85452:	3b01      	subs	r3, #1
   85454:	f802 4d01 	strb.w	r4, [r2, #-1]!
   85458:	1c5c      	adds	r4, r3, #1
   8545a:	d1f8      	bne.n	8544e <memmove+0x16>
   8545c:	bcf0      	pop	{r4, r5, r6, r7}
   8545e:	4770      	bx	lr
   85460:	2a0f      	cmp	r2, #15
   85462:	d944      	bls.n	854ee <memmove+0xb6>
   85464:	ea40 0301 	orr.w	r3, r0, r1
   85468:	079b      	lsls	r3, r3, #30
   8546a:	d144      	bne.n	854f6 <memmove+0xbe>
   8546c:	f1a2 0710 	sub.w	r7, r2, #16
   85470:	093f      	lsrs	r7, r7, #4
   85472:	eb00 1607 	add.w	r6, r0, r7, lsl #4
   85476:	3610      	adds	r6, #16
   85478:	460c      	mov	r4, r1
   8547a:	4603      	mov	r3, r0
   8547c:	6825      	ldr	r5, [r4, #0]
   8547e:	3310      	adds	r3, #16
   85480:	f843 5c10 	str.w	r5, [r3, #-16]
   85484:	6865      	ldr	r5, [r4, #4]
   85486:	3410      	adds	r4, #16
   85488:	f843 5c0c 	str.w	r5, [r3, #-12]
   8548c:	f854 5c08 	ldr.w	r5, [r4, #-8]
   85490:	f843 5c08 	str.w	r5, [r3, #-8]
   85494:	f854 5c04 	ldr.w	r5, [r4, #-4]
   85498:	f843 5c04 	str.w	r5, [r3, #-4]
   8549c:	42b3      	cmp	r3, r6
   8549e:	d1ed      	bne.n	8547c <memmove+0x44>
   854a0:	1c7b      	adds	r3, r7, #1
   854a2:	f002 0c0f 	and.w	ip, r2, #15
   854a6:	011b      	lsls	r3, r3, #4
   854a8:	f1bc 0f03 	cmp.w	ip, #3
   854ac:	4419      	add	r1, r3
   854ae:	4403      	add	r3, r0
   854b0:	d923      	bls.n	854fa <memmove+0xc2>
   854b2:	460e      	mov	r6, r1
   854b4:	461d      	mov	r5, r3
   854b6:	4664      	mov	r4, ip
   854b8:	f856 7b04 	ldr.w	r7, [r6], #4
   854bc:	3c04      	subs	r4, #4
   854be:	2c03      	cmp	r4, #3
   854c0:	f845 7b04 	str.w	r7, [r5], #4
   854c4:	d8f8      	bhi.n	854b8 <memmove+0x80>
   854c6:	f1ac 0404 	sub.w	r4, ip, #4
   854ca:	f024 0403 	bic.w	r4, r4, #3
   854ce:	3404      	adds	r4, #4
   854d0:	f002 0203 	and.w	r2, r2, #3
   854d4:	4423      	add	r3, r4
   854d6:	4421      	add	r1, r4
   854d8:	2a00      	cmp	r2, #0
   854da:	d0bf      	beq.n	8545c <memmove+0x24>
   854dc:	441a      	add	r2, r3
   854de:	f811 4b01 	ldrb.w	r4, [r1], #1
   854e2:	f803 4b01 	strb.w	r4, [r3], #1
   854e6:	4293      	cmp	r3, r2
   854e8:	d1f9      	bne.n	854de <memmove+0xa6>
   854ea:	bcf0      	pop	{r4, r5, r6, r7}
   854ec:	4770      	bx	lr
   854ee:	4603      	mov	r3, r0
   854f0:	2a00      	cmp	r2, #0
   854f2:	d1f3      	bne.n	854dc <memmove+0xa4>
   854f4:	e7b2      	b.n	8545c <memmove+0x24>
   854f6:	4603      	mov	r3, r0
   854f8:	e7f0      	b.n	854dc <memmove+0xa4>
   854fa:	4662      	mov	r2, ip
   854fc:	2a00      	cmp	r2, #0
   854fe:	d1ed      	bne.n	854dc <memmove+0xa4>
   85500:	e7ac      	b.n	8545c <memmove+0x24>
   85502:	bf00      	nop

00085504 <__malloc_lock>:
   85504:	4770      	bx	lr
   85506:	bf00      	nop

00085508 <__malloc_unlock>:
   85508:	4770      	bx	lr
   8550a:	bf00      	nop

0008550c <_realloc_r>:
   8550c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85510:	460c      	mov	r4, r1
   85512:	b083      	sub	sp, #12
   85514:	4690      	mov	r8, r2
   85516:	4681      	mov	r9, r0
   85518:	2900      	cmp	r1, #0
   8551a:	f000 80ba 	beq.w	85692 <_realloc_r+0x186>
   8551e:	f7ff fff1 	bl	85504 <__malloc_lock>
   85522:	f108 060b 	add.w	r6, r8, #11
   85526:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8552a:	2e16      	cmp	r6, #22
   8552c:	f023 0503 	bic.w	r5, r3, #3
   85530:	f1a4 0708 	sub.w	r7, r4, #8
   85534:	d84b      	bhi.n	855ce <_realloc_r+0xc2>
   85536:	2110      	movs	r1, #16
   85538:	460e      	mov	r6, r1
   8553a:	45b0      	cmp	r8, r6
   8553c:	d84c      	bhi.n	855d8 <_realloc_r+0xcc>
   8553e:	428d      	cmp	r5, r1
   85540:	da51      	bge.n	855e6 <_realloc_r+0xda>
   85542:	f8df b384 	ldr.w	fp, [pc, #900]	; 858c8 <_realloc_r+0x3bc>
   85546:	1978      	adds	r0, r7, r5
   85548:	f8db e008 	ldr.w	lr, [fp, #8]
   8554c:	4586      	cmp	lr, r0
   8554e:	f000 80a6 	beq.w	8569e <_realloc_r+0x192>
   85552:	6842      	ldr	r2, [r0, #4]
   85554:	f022 0c01 	bic.w	ip, r2, #1
   85558:	4484      	add	ip, r0
   8555a:	f8dc c004 	ldr.w	ip, [ip, #4]
   8555e:	f01c 0f01 	tst.w	ip, #1
   85562:	d054      	beq.n	8560e <_realloc_r+0x102>
   85564:	2200      	movs	r2, #0
   85566:	4610      	mov	r0, r2
   85568:	07db      	lsls	r3, r3, #31
   8556a:	d46f      	bmi.n	8564c <_realloc_r+0x140>
   8556c:	f854 3c08 	ldr.w	r3, [r4, #-8]
   85570:	ebc3 0a07 	rsb	sl, r3, r7
   85574:	f8da 3004 	ldr.w	r3, [sl, #4]
   85578:	f023 0303 	bic.w	r3, r3, #3
   8557c:	442b      	add	r3, r5
   8557e:	2800      	cmp	r0, #0
   85580:	d062      	beq.n	85648 <_realloc_r+0x13c>
   85582:	4570      	cmp	r0, lr
   85584:	f000 80e9 	beq.w	8575a <_realloc_r+0x24e>
   85588:	eb02 0e03 	add.w	lr, r2, r3
   8558c:	458e      	cmp	lr, r1
   8558e:	db5b      	blt.n	85648 <_realloc_r+0x13c>
   85590:	68c3      	ldr	r3, [r0, #12]
   85592:	6882      	ldr	r2, [r0, #8]
   85594:	46d0      	mov	r8, sl
   85596:	60d3      	str	r3, [r2, #12]
   85598:	609a      	str	r2, [r3, #8]
   8559a:	f858 1f08 	ldr.w	r1, [r8, #8]!
   8559e:	f8da 300c 	ldr.w	r3, [sl, #12]
   855a2:	1f2a      	subs	r2, r5, #4
   855a4:	2a24      	cmp	r2, #36	; 0x24
   855a6:	60cb      	str	r3, [r1, #12]
   855a8:	6099      	str	r1, [r3, #8]
   855aa:	f200 8123 	bhi.w	857f4 <_realloc_r+0x2e8>
   855ae:	2a13      	cmp	r2, #19
   855b0:	f240 80b0 	bls.w	85714 <_realloc_r+0x208>
   855b4:	6823      	ldr	r3, [r4, #0]
   855b6:	2a1b      	cmp	r2, #27
   855b8:	f8ca 3008 	str.w	r3, [sl, #8]
   855bc:	6863      	ldr	r3, [r4, #4]
   855be:	f8ca 300c 	str.w	r3, [sl, #12]
   855c2:	f200 812b 	bhi.w	8581c <_realloc_r+0x310>
   855c6:	3408      	adds	r4, #8
   855c8:	f10a 0310 	add.w	r3, sl, #16
   855cc:	e0a3      	b.n	85716 <_realloc_r+0x20a>
   855ce:	f026 0607 	bic.w	r6, r6, #7
   855d2:	2e00      	cmp	r6, #0
   855d4:	4631      	mov	r1, r6
   855d6:	dab0      	bge.n	8553a <_realloc_r+0x2e>
   855d8:	230c      	movs	r3, #12
   855da:	2000      	movs	r0, #0
   855dc:	f8c9 3000 	str.w	r3, [r9]
   855e0:	b003      	add	sp, #12
   855e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   855e6:	46a0      	mov	r8, r4
   855e8:	1baa      	subs	r2, r5, r6
   855ea:	2a0f      	cmp	r2, #15
   855ec:	f003 0301 	and.w	r3, r3, #1
   855f0:	d81a      	bhi.n	85628 <_realloc_r+0x11c>
   855f2:	432b      	orrs	r3, r5
   855f4:	607b      	str	r3, [r7, #4]
   855f6:	443d      	add	r5, r7
   855f8:	686b      	ldr	r3, [r5, #4]
   855fa:	f043 0301 	orr.w	r3, r3, #1
   855fe:	606b      	str	r3, [r5, #4]
   85600:	4648      	mov	r0, r9
   85602:	f7ff ff81 	bl	85508 <__malloc_unlock>
   85606:	4640      	mov	r0, r8
   85608:	b003      	add	sp, #12
   8560a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8560e:	f022 0203 	bic.w	r2, r2, #3
   85612:	eb02 0c05 	add.w	ip, r2, r5
   85616:	458c      	cmp	ip, r1
   85618:	dba6      	blt.n	85568 <_realloc_r+0x5c>
   8561a:	68c2      	ldr	r2, [r0, #12]
   8561c:	6881      	ldr	r1, [r0, #8]
   8561e:	46a0      	mov	r8, r4
   85620:	60ca      	str	r2, [r1, #12]
   85622:	4665      	mov	r5, ip
   85624:	6091      	str	r1, [r2, #8]
   85626:	e7df      	b.n	855e8 <_realloc_r+0xdc>
   85628:	19b9      	adds	r1, r7, r6
   8562a:	4333      	orrs	r3, r6
   8562c:	f042 0001 	orr.w	r0, r2, #1
   85630:	607b      	str	r3, [r7, #4]
   85632:	440a      	add	r2, r1
   85634:	6048      	str	r0, [r1, #4]
   85636:	6853      	ldr	r3, [r2, #4]
   85638:	3108      	adds	r1, #8
   8563a:	f043 0301 	orr.w	r3, r3, #1
   8563e:	6053      	str	r3, [r2, #4]
   85640:	4648      	mov	r0, r9
   85642:	f7ff f915 	bl	84870 <_free_r>
   85646:	e7db      	b.n	85600 <_realloc_r+0xf4>
   85648:	428b      	cmp	r3, r1
   8564a:	da33      	bge.n	856b4 <_realloc_r+0x1a8>
   8564c:	4641      	mov	r1, r8
   8564e:	4648      	mov	r0, r9
   85650:	f7ff fc0c 	bl	84e6c <_malloc_r>
   85654:	4680      	mov	r8, r0
   85656:	2800      	cmp	r0, #0
   85658:	d0d2      	beq.n	85600 <_realloc_r+0xf4>
   8565a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8565e:	f1a0 0108 	sub.w	r1, r0, #8
   85662:	f023 0201 	bic.w	r2, r3, #1
   85666:	443a      	add	r2, r7
   85668:	4291      	cmp	r1, r2
   8566a:	f000 80bc 	beq.w	857e6 <_realloc_r+0x2da>
   8566e:	1f2a      	subs	r2, r5, #4
   85670:	2a24      	cmp	r2, #36	; 0x24
   85672:	d86e      	bhi.n	85752 <_realloc_r+0x246>
   85674:	2a13      	cmp	r2, #19
   85676:	d842      	bhi.n	856fe <_realloc_r+0x1f2>
   85678:	4603      	mov	r3, r0
   8567a:	4622      	mov	r2, r4
   8567c:	6811      	ldr	r1, [r2, #0]
   8567e:	6019      	str	r1, [r3, #0]
   85680:	6851      	ldr	r1, [r2, #4]
   85682:	6059      	str	r1, [r3, #4]
   85684:	6892      	ldr	r2, [r2, #8]
   85686:	609a      	str	r2, [r3, #8]
   85688:	4621      	mov	r1, r4
   8568a:	4648      	mov	r0, r9
   8568c:	f7ff f8f0 	bl	84870 <_free_r>
   85690:	e7b6      	b.n	85600 <_realloc_r+0xf4>
   85692:	4611      	mov	r1, r2
   85694:	b003      	add	sp, #12
   85696:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8569a:	f7ff bbe7 	b.w	84e6c <_malloc_r>
   8569e:	f8de 2004 	ldr.w	r2, [lr, #4]
   856a2:	f106 0c10 	add.w	ip, r6, #16
   856a6:	f022 0203 	bic.w	r2, r2, #3
   856aa:	1950      	adds	r0, r2, r5
   856ac:	4560      	cmp	r0, ip
   856ae:	da3d      	bge.n	8572c <_realloc_r+0x220>
   856b0:	4670      	mov	r0, lr
   856b2:	e759      	b.n	85568 <_realloc_r+0x5c>
   856b4:	46d0      	mov	r8, sl
   856b6:	f858 0f08 	ldr.w	r0, [r8, #8]!
   856ba:	f8da 100c 	ldr.w	r1, [sl, #12]
   856be:	1f2a      	subs	r2, r5, #4
   856c0:	2a24      	cmp	r2, #36	; 0x24
   856c2:	60c1      	str	r1, [r0, #12]
   856c4:	6088      	str	r0, [r1, #8]
   856c6:	f200 80a0 	bhi.w	8580a <_realloc_r+0x2fe>
   856ca:	2a13      	cmp	r2, #19
   856cc:	f240 809b 	bls.w	85806 <_realloc_r+0x2fa>
   856d0:	6821      	ldr	r1, [r4, #0]
   856d2:	2a1b      	cmp	r2, #27
   856d4:	f8ca 1008 	str.w	r1, [sl, #8]
   856d8:	6861      	ldr	r1, [r4, #4]
   856da:	f8ca 100c 	str.w	r1, [sl, #12]
   856de:	f200 80b2 	bhi.w	85846 <_realloc_r+0x33a>
   856e2:	3408      	adds	r4, #8
   856e4:	f10a 0210 	add.w	r2, sl, #16
   856e8:	6821      	ldr	r1, [r4, #0]
   856ea:	461d      	mov	r5, r3
   856ec:	6011      	str	r1, [r2, #0]
   856ee:	6861      	ldr	r1, [r4, #4]
   856f0:	4657      	mov	r7, sl
   856f2:	6051      	str	r1, [r2, #4]
   856f4:	68a3      	ldr	r3, [r4, #8]
   856f6:	6093      	str	r3, [r2, #8]
   856f8:	f8da 3004 	ldr.w	r3, [sl, #4]
   856fc:	e774      	b.n	855e8 <_realloc_r+0xdc>
   856fe:	6823      	ldr	r3, [r4, #0]
   85700:	2a1b      	cmp	r2, #27
   85702:	6003      	str	r3, [r0, #0]
   85704:	6863      	ldr	r3, [r4, #4]
   85706:	6043      	str	r3, [r0, #4]
   85708:	d862      	bhi.n	857d0 <_realloc_r+0x2c4>
   8570a:	f100 0308 	add.w	r3, r0, #8
   8570e:	f104 0208 	add.w	r2, r4, #8
   85712:	e7b3      	b.n	8567c <_realloc_r+0x170>
   85714:	4643      	mov	r3, r8
   85716:	6822      	ldr	r2, [r4, #0]
   85718:	4675      	mov	r5, lr
   8571a:	601a      	str	r2, [r3, #0]
   8571c:	6862      	ldr	r2, [r4, #4]
   8571e:	4657      	mov	r7, sl
   85720:	605a      	str	r2, [r3, #4]
   85722:	68a2      	ldr	r2, [r4, #8]
   85724:	609a      	str	r2, [r3, #8]
   85726:	f8da 3004 	ldr.w	r3, [sl, #4]
   8572a:	e75d      	b.n	855e8 <_realloc_r+0xdc>
   8572c:	1b83      	subs	r3, r0, r6
   8572e:	4437      	add	r7, r6
   85730:	f043 0301 	orr.w	r3, r3, #1
   85734:	f8cb 7008 	str.w	r7, [fp, #8]
   85738:	607b      	str	r3, [r7, #4]
   8573a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8573e:	4648      	mov	r0, r9
   85740:	f003 0301 	and.w	r3, r3, #1
   85744:	431e      	orrs	r6, r3
   85746:	f844 6c04 	str.w	r6, [r4, #-4]
   8574a:	f7ff fedd 	bl	85508 <__malloc_unlock>
   8574e:	4620      	mov	r0, r4
   85750:	e75a      	b.n	85608 <_realloc_r+0xfc>
   85752:	4621      	mov	r1, r4
   85754:	f7ff fe70 	bl	85438 <memmove>
   85758:	e796      	b.n	85688 <_realloc_r+0x17c>
   8575a:	eb02 0c03 	add.w	ip, r2, r3
   8575e:	f106 0210 	add.w	r2, r6, #16
   85762:	4594      	cmp	ip, r2
   85764:	f6ff af70 	blt.w	85648 <_realloc_r+0x13c>
   85768:	4657      	mov	r7, sl
   8576a:	f857 1f08 	ldr.w	r1, [r7, #8]!
   8576e:	f8da 300c 	ldr.w	r3, [sl, #12]
   85772:	1f2a      	subs	r2, r5, #4
   85774:	2a24      	cmp	r2, #36	; 0x24
   85776:	60cb      	str	r3, [r1, #12]
   85778:	6099      	str	r1, [r3, #8]
   8577a:	f200 8086 	bhi.w	8588a <_realloc_r+0x37e>
   8577e:	2a13      	cmp	r2, #19
   85780:	d977      	bls.n	85872 <_realloc_r+0x366>
   85782:	6823      	ldr	r3, [r4, #0]
   85784:	2a1b      	cmp	r2, #27
   85786:	f8ca 3008 	str.w	r3, [sl, #8]
   8578a:	6863      	ldr	r3, [r4, #4]
   8578c:	f8ca 300c 	str.w	r3, [sl, #12]
   85790:	f200 8084 	bhi.w	8589c <_realloc_r+0x390>
   85794:	3408      	adds	r4, #8
   85796:	f10a 0310 	add.w	r3, sl, #16
   8579a:	6822      	ldr	r2, [r4, #0]
   8579c:	601a      	str	r2, [r3, #0]
   8579e:	6862      	ldr	r2, [r4, #4]
   857a0:	605a      	str	r2, [r3, #4]
   857a2:	68a2      	ldr	r2, [r4, #8]
   857a4:	609a      	str	r2, [r3, #8]
   857a6:	ebc6 020c 	rsb	r2, r6, ip
   857aa:	eb0a 0306 	add.w	r3, sl, r6
   857ae:	f042 0201 	orr.w	r2, r2, #1
   857b2:	f8cb 3008 	str.w	r3, [fp, #8]
   857b6:	605a      	str	r2, [r3, #4]
   857b8:	f8da 3004 	ldr.w	r3, [sl, #4]
   857bc:	4648      	mov	r0, r9
   857be:	f003 0301 	and.w	r3, r3, #1
   857c2:	431e      	orrs	r6, r3
   857c4:	f8ca 6004 	str.w	r6, [sl, #4]
   857c8:	f7ff fe9e 	bl	85508 <__malloc_unlock>
   857cc:	4638      	mov	r0, r7
   857ce:	e71b      	b.n	85608 <_realloc_r+0xfc>
   857d0:	68a3      	ldr	r3, [r4, #8]
   857d2:	2a24      	cmp	r2, #36	; 0x24
   857d4:	6083      	str	r3, [r0, #8]
   857d6:	68e3      	ldr	r3, [r4, #12]
   857d8:	60c3      	str	r3, [r0, #12]
   857da:	d02b      	beq.n	85834 <_realloc_r+0x328>
   857dc:	f100 0310 	add.w	r3, r0, #16
   857e0:	f104 0210 	add.w	r2, r4, #16
   857e4:	e74a      	b.n	8567c <_realloc_r+0x170>
   857e6:	f850 2c04 	ldr.w	r2, [r0, #-4]
   857ea:	46a0      	mov	r8, r4
   857ec:	f022 0203 	bic.w	r2, r2, #3
   857f0:	4415      	add	r5, r2
   857f2:	e6f9      	b.n	855e8 <_realloc_r+0xdc>
   857f4:	4621      	mov	r1, r4
   857f6:	4640      	mov	r0, r8
   857f8:	4675      	mov	r5, lr
   857fa:	4657      	mov	r7, sl
   857fc:	f7ff fe1c 	bl	85438 <memmove>
   85800:	f8da 3004 	ldr.w	r3, [sl, #4]
   85804:	e6f0      	b.n	855e8 <_realloc_r+0xdc>
   85806:	4642      	mov	r2, r8
   85808:	e76e      	b.n	856e8 <_realloc_r+0x1dc>
   8580a:	4621      	mov	r1, r4
   8580c:	4640      	mov	r0, r8
   8580e:	461d      	mov	r5, r3
   85810:	4657      	mov	r7, sl
   85812:	f7ff fe11 	bl	85438 <memmove>
   85816:	f8da 3004 	ldr.w	r3, [sl, #4]
   8581a:	e6e5      	b.n	855e8 <_realloc_r+0xdc>
   8581c:	68a3      	ldr	r3, [r4, #8]
   8581e:	2a24      	cmp	r2, #36	; 0x24
   85820:	f8ca 3010 	str.w	r3, [sl, #16]
   85824:	68e3      	ldr	r3, [r4, #12]
   85826:	f8ca 3014 	str.w	r3, [sl, #20]
   8582a:	d018      	beq.n	8585e <_realloc_r+0x352>
   8582c:	3410      	adds	r4, #16
   8582e:	f10a 0318 	add.w	r3, sl, #24
   85832:	e770      	b.n	85716 <_realloc_r+0x20a>
   85834:	6922      	ldr	r2, [r4, #16]
   85836:	f100 0318 	add.w	r3, r0, #24
   8583a:	6102      	str	r2, [r0, #16]
   8583c:	6961      	ldr	r1, [r4, #20]
   8583e:	f104 0218 	add.w	r2, r4, #24
   85842:	6141      	str	r1, [r0, #20]
   85844:	e71a      	b.n	8567c <_realloc_r+0x170>
   85846:	68a1      	ldr	r1, [r4, #8]
   85848:	2a24      	cmp	r2, #36	; 0x24
   8584a:	f8ca 1010 	str.w	r1, [sl, #16]
   8584e:	68e1      	ldr	r1, [r4, #12]
   85850:	f8ca 1014 	str.w	r1, [sl, #20]
   85854:	d00f      	beq.n	85876 <_realloc_r+0x36a>
   85856:	3410      	adds	r4, #16
   85858:	f10a 0218 	add.w	r2, sl, #24
   8585c:	e744      	b.n	856e8 <_realloc_r+0x1dc>
   8585e:	6922      	ldr	r2, [r4, #16]
   85860:	f10a 0320 	add.w	r3, sl, #32
   85864:	f8ca 2018 	str.w	r2, [sl, #24]
   85868:	6962      	ldr	r2, [r4, #20]
   8586a:	3418      	adds	r4, #24
   8586c:	f8ca 201c 	str.w	r2, [sl, #28]
   85870:	e751      	b.n	85716 <_realloc_r+0x20a>
   85872:	463b      	mov	r3, r7
   85874:	e791      	b.n	8579a <_realloc_r+0x28e>
   85876:	6921      	ldr	r1, [r4, #16]
   85878:	f10a 0220 	add.w	r2, sl, #32
   8587c:	f8ca 1018 	str.w	r1, [sl, #24]
   85880:	6961      	ldr	r1, [r4, #20]
   85882:	3418      	adds	r4, #24
   85884:	f8ca 101c 	str.w	r1, [sl, #28]
   85888:	e72e      	b.n	856e8 <_realloc_r+0x1dc>
   8588a:	4621      	mov	r1, r4
   8588c:	4638      	mov	r0, r7
   8588e:	f8cd c004 	str.w	ip, [sp, #4]
   85892:	f7ff fdd1 	bl	85438 <memmove>
   85896:	f8dd c004 	ldr.w	ip, [sp, #4]
   8589a:	e784      	b.n	857a6 <_realloc_r+0x29a>
   8589c:	68a3      	ldr	r3, [r4, #8]
   8589e:	2a24      	cmp	r2, #36	; 0x24
   858a0:	f8ca 3010 	str.w	r3, [sl, #16]
   858a4:	68e3      	ldr	r3, [r4, #12]
   858a6:	f8ca 3014 	str.w	r3, [sl, #20]
   858aa:	d003      	beq.n	858b4 <_realloc_r+0x3a8>
   858ac:	3410      	adds	r4, #16
   858ae:	f10a 0318 	add.w	r3, sl, #24
   858b2:	e772      	b.n	8579a <_realloc_r+0x28e>
   858b4:	6922      	ldr	r2, [r4, #16]
   858b6:	f10a 0320 	add.w	r3, sl, #32
   858ba:	f8ca 2018 	str.w	r2, [sl, #24]
   858be:	6962      	ldr	r2, [r4, #20]
   858c0:	3418      	adds	r4, #24
   858c2:	f8ca 201c 	str.w	r2, [sl, #28]
   858c6:	e768      	b.n	8579a <_realloc_r+0x28e>
   858c8:	20070630 	.word	0x20070630

000858cc <_sbrk_r>:
   858cc:	b538      	push	{r3, r4, r5, lr}
   858ce:	4c07      	ldr	r4, [pc, #28]	; (858ec <_sbrk_r+0x20>)
   858d0:	2300      	movs	r3, #0
   858d2:	4605      	mov	r5, r0
   858d4:	4608      	mov	r0, r1
   858d6:	6023      	str	r3, [r4, #0]
   858d8:	f7fc fe4a 	bl	82570 <_sbrk>
   858dc:	1c43      	adds	r3, r0, #1
   858de:	d000      	beq.n	858e2 <_sbrk_r+0x16>
   858e0:	bd38      	pop	{r3, r4, r5, pc}
   858e2:	6823      	ldr	r3, [r4, #0]
   858e4:	2b00      	cmp	r3, #0
   858e6:	d0fb      	beq.n	858e0 <_sbrk_r+0x14>
   858e8:	602b      	str	r3, [r5, #0]
   858ea:	bd38      	pop	{r3, r4, r5, pc}
   858ec:	20070d94 	.word	0x20070d94

000858f0 <__sread>:
   858f0:	b510      	push	{r4, lr}
   858f2:	460c      	mov	r4, r1
   858f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   858f8:	f000 f9f2 	bl	85ce0 <_read_r>
   858fc:	2800      	cmp	r0, #0
   858fe:	db03      	blt.n	85908 <__sread+0x18>
   85900:	6d23      	ldr	r3, [r4, #80]	; 0x50
   85902:	4403      	add	r3, r0
   85904:	6523      	str	r3, [r4, #80]	; 0x50
   85906:	bd10      	pop	{r4, pc}
   85908:	89a3      	ldrh	r3, [r4, #12]
   8590a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   8590e:	81a3      	strh	r3, [r4, #12]
   85910:	bd10      	pop	{r4, pc}
   85912:	bf00      	nop

00085914 <__swrite>:
   85914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   85918:	460c      	mov	r4, r1
   8591a:	8989      	ldrh	r1, [r1, #12]
   8591c:	461d      	mov	r5, r3
   8591e:	05cb      	lsls	r3, r1, #23
   85920:	4616      	mov	r6, r2
   85922:	4607      	mov	r7, r0
   85924:	d506      	bpl.n	85934 <__swrite+0x20>
   85926:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8592a:	2200      	movs	r2, #0
   8592c:	2302      	movs	r3, #2
   8592e:	f000 f9c3 	bl	85cb8 <_lseek_r>
   85932:	89a1      	ldrh	r1, [r4, #12]
   85934:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   85938:	81a1      	strh	r1, [r4, #12]
   8593a:	4638      	mov	r0, r7
   8593c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   85940:	4632      	mov	r2, r6
   85942:	462b      	mov	r3, r5
   85944:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   85948:	f000 b8ce 	b.w	85ae8 <_write_r>

0008594c <__sseek>:
   8594c:	b510      	push	{r4, lr}
   8594e:	460c      	mov	r4, r1
   85950:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   85954:	f000 f9b0 	bl	85cb8 <_lseek_r>
   85958:	89a3      	ldrh	r3, [r4, #12]
   8595a:	1c42      	adds	r2, r0, #1
   8595c:	bf0e      	itee	eq
   8595e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   85962:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   85966:	6520      	strne	r0, [r4, #80]	; 0x50
   85968:	81a3      	strh	r3, [r4, #12]
   8596a:	bd10      	pop	{r4, pc}

0008596c <__sclose>:
   8596c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   85970:	f000 b922 	b.w	85bb8 <_close_r>

00085974 <strlen>:
   85974:	f020 0103 	bic.w	r1, r0, #3
   85978:	f010 0003 	ands.w	r0, r0, #3
   8597c:	f1c0 0000 	rsb	r0, r0, #0
   85980:	f851 3b04 	ldr.w	r3, [r1], #4
   85984:	f100 0c04 	add.w	ip, r0, #4
   85988:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   8598c:	f06f 0200 	mvn.w	r2, #0
   85990:	bf1c      	itt	ne
   85992:	fa22 f20c 	lsrne.w	r2, r2, ip
   85996:	4313      	orrne	r3, r2
   85998:	f04f 0c01 	mov.w	ip, #1
   8599c:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   859a0:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   859a4:	eba3 020c 	sub.w	r2, r3, ip
   859a8:	ea22 0203 	bic.w	r2, r2, r3
   859ac:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   859b0:	bf04      	itt	eq
   859b2:	f851 3b04 	ldreq.w	r3, [r1], #4
   859b6:	3004      	addeq	r0, #4
   859b8:	d0f4      	beq.n	859a4 <strlen+0x30>
   859ba:	f013 0fff 	tst.w	r3, #255	; 0xff
   859be:	bf1f      	itttt	ne
   859c0:	3001      	addne	r0, #1
   859c2:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
   859c6:	3001      	addne	r0, #1
   859c8:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
   859cc:	bf18      	it	ne
   859ce:	3001      	addne	r0, #1
   859d0:	4770      	bx	lr
   859d2:	bf00      	nop

000859d4 <__swbuf_r>:
   859d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   859d6:	460d      	mov	r5, r1
   859d8:	4614      	mov	r4, r2
   859da:	4607      	mov	r7, r0
   859dc:	b110      	cbz	r0, 859e4 <__swbuf_r+0x10>
   859de:	6b83      	ldr	r3, [r0, #56]	; 0x38
   859e0:	2b00      	cmp	r3, #0
   859e2:	d048      	beq.n	85a76 <__swbuf_r+0xa2>
   859e4:	89a2      	ldrh	r2, [r4, #12]
   859e6:	69a0      	ldr	r0, [r4, #24]
   859e8:	b293      	uxth	r3, r2
   859ea:	60a0      	str	r0, [r4, #8]
   859ec:	0718      	lsls	r0, r3, #28
   859ee:	d538      	bpl.n	85a62 <__swbuf_r+0x8e>
   859f0:	6926      	ldr	r6, [r4, #16]
   859f2:	2e00      	cmp	r6, #0
   859f4:	d035      	beq.n	85a62 <__swbuf_r+0x8e>
   859f6:	0499      	lsls	r1, r3, #18
   859f8:	b2ed      	uxtb	r5, r5
   859fa:	d515      	bpl.n	85a28 <__swbuf_r+0x54>
   859fc:	6823      	ldr	r3, [r4, #0]
   859fe:	6962      	ldr	r2, [r4, #20]
   85a00:	1b9e      	subs	r6, r3, r6
   85a02:	4296      	cmp	r6, r2
   85a04:	da1c      	bge.n	85a40 <__swbuf_r+0x6c>
   85a06:	3601      	adds	r6, #1
   85a08:	68a2      	ldr	r2, [r4, #8]
   85a0a:	1c59      	adds	r1, r3, #1
   85a0c:	3a01      	subs	r2, #1
   85a0e:	60a2      	str	r2, [r4, #8]
   85a10:	6021      	str	r1, [r4, #0]
   85a12:	701d      	strb	r5, [r3, #0]
   85a14:	6963      	ldr	r3, [r4, #20]
   85a16:	42b3      	cmp	r3, r6
   85a18:	d01a      	beq.n	85a50 <__swbuf_r+0x7c>
   85a1a:	89a3      	ldrh	r3, [r4, #12]
   85a1c:	07db      	lsls	r3, r3, #31
   85a1e:	d501      	bpl.n	85a24 <__swbuf_r+0x50>
   85a20:	2d0a      	cmp	r5, #10
   85a22:	d015      	beq.n	85a50 <__swbuf_r+0x7c>
   85a24:	4628      	mov	r0, r5
   85a26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   85a28:	6e63      	ldr	r3, [r4, #100]	; 0x64
   85a2a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   85a2e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   85a32:	6663      	str	r3, [r4, #100]	; 0x64
   85a34:	6823      	ldr	r3, [r4, #0]
   85a36:	81a2      	strh	r2, [r4, #12]
   85a38:	6962      	ldr	r2, [r4, #20]
   85a3a:	1b9e      	subs	r6, r3, r6
   85a3c:	4296      	cmp	r6, r2
   85a3e:	dbe2      	blt.n	85a06 <__swbuf_r+0x32>
   85a40:	4638      	mov	r0, r7
   85a42:	4621      	mov	r1, r4
   85a44:	f7fe fdb4 	bl	845b0 <_fflush_r>
   85a48:	b940      	cbnz	r0, 85a5c <__swbuf_r+0x88>
   85a4a:	6823      	ldr	r3, [r4, #0]
   85a4c:	2601      	movs	r6, #1
   85a4e:	e7db      	b.n	85a08 <__swbuf_r+0x34>
   85a50:	4638      	mov	r0, r7
   85a52:	4621      	mov	r1, r4
   85a54:	f7fe fdac 	bl	845b0 <_fflush_r>
   85a58:	2800      	cmp	r0, #0
   85a5a:	d0e3      	beq.n	85a24 <__swbuf_r+0x50>
   85a5c:	f04f 30ff 	mov.w	r0, #4294967295
   85a60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   85a62:	4638      	mov	r0, r7
   85a64:	4621      	mov	r1, r4
   85a66:	f7fe fc8d 	bl	84384 <__swsetup_r>
   85a6a:	2800      	cmp	r0, #0
   85a6c:	d1f6      	bne.n	85a5c <__swbuf_r+0x88>
   85a6e:	89a2      	ldrh	r2, [r4, #12]
   85a70:	6926      	ldr	r6, [r4, #16]
   85a72:	b293      	uxth	r3, r2
   85a74:	e7bf      	b.n	859f6 <__swbuf_r+0x22>
   85a76:	f7fe fdb7 	bl	845e8 <__sinit>
   85a7a:	e7b3      	b.n	859e4 <__swbuf_r+0x10>

00085a7c <_wcrtomb_r>:
   85a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   85a80:	461e      	mov	r6, r3
   85a82:	b086      	sub	sp, #24
   85a84:	460c      	mov	r4, r1
   85a86:	4605      	mov	r5, r0
   85a88:	4617      	mov	r7, r2
   85a8a:	4b0f      	ldr	r3, [pc, #60]	; (85ac8 <_wcrtomb_r+0x4c>)
   85a8c:	b191      	cbz	r1, 85ab4 <_wcrtomb_r+0x38>
   85a8e:	f8d3 8000 	ldr.w	r8, [r3]
   85a92:	f7ff f969 	bl	84d68 <__locale_charset>
   85a96:	9600      	str	r6, [sp, #0]
   85a98:	4603      	mov	r3, r0
   85a9a:	4621      	mov	r1, r4
   85a9c:	463a      	mov	r2, r7
   85a9e:	4628      	mov	r0, r5
   85aa0:	47c0      	blx	r8
   85aa2:	1c43      	adds	r3, r0, #1
   85aa4:	d103      	bne.n	85aae <_wcrtomb_r+0x32>
   85aa6:	2200      	movs	r2, #0
   85aa8:	238a      	movs	r3, #138	; 0x8a
   85aaa:	6032      	str	r2, [r6, #0]
   85aac:	602b      	str	r3, [r5, #0]
   85aae:	b006      	add	sp, #24
   85ab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85ab4:	681f      	ldr	r7, [r3, #0]
   85ab6:	f7ff f957 	bl	84d68 <__locale_charset>
   85aba:	9600      	str	r6, [sp, #0]
   85abc:	4603      	mov	r3, r0
   85abe:	4622      	mov	r2, r4
   85ac0:	4628      	mov	r0, r5
   85ac2:	a903      	add	r1, sp, #12
   85ac4:	47b8      	blx	r7
   85ac6:	e7ec      	b.n	85aa2 <_wcrtomb_r+0x26>
   85ac8:	20070a40 	.word	0x20070a40

00085acc <__ascii_wctomb>:
   85acc:	b121      	cbz	r1, 85ad8 <__ascii_wctomb+0xc>
   85ace:	2aff      	cmp	r2, #255	; 0xff
   85ad0:	d804      	bhi.n	85adc <__ascii_wctomb+0x10>
   85ad2:	700a      	strb	r2, [r1, #0]
   85ad4:	2001      	movs	r0, #1
   85ad6:	4770      	bx	lr
   85ad8:	4608      	mov	r0, r1
   85ada:	4770      	bx	lr
   85adc:	238a      	movs	r3, #138	; 0x8a
   85ade:	6003      	str	r3, [r0, #0]
   85ae0:	f04f 30ff 	mov.w	r0, #4294967295
   85ae4:	4770      	bx	lr
   85ae6:	bf00      	nop

00085ae8 <_write_r>:
   85ae8:	b570      	push	{r4, r5, r6, lr}
   85aea:	4c08      	ldr	r4, [pc, #32]	; (85b0c <_write_r+0x24>)
   85aec:	4606      	mov	r6, r0
   85aee:	2500      	movs	r5, #0
   85af0:	4608      	mov	r0, r1
   85af2:	4611      	mov	r1, r2
   85af4:	461a      	mov	r2, r3
   85af6:	6025      	str	r5, [r4, #0]
   85af8:	f7fb f946 	bl	80d88 <_write>
   85afc:	1c43      	adds	r3, r0, #1
   85afe:	d000      	beq.n	85b02 <_write_r+0x1a>
   85b00:	bd70      	pop	{r4, r5, r6, pc}
   85b02:	6823      	ldr	r3, [r4, #0]
   85b04:	2b00      	cmp	r3, #0
   85b06:	d0fb      	beq.n	85b00 <_write_r+0x18>
   85b08:	6033      	str	r3, [r6, #0]
   85b0a:	bd70      	pop	{r4, r5, r6, pc}
   85b0c:	20070d94 	.word	0x20070d94

00085b10 <__register_exitproc>:
   85b10:	b5f0      	push	{r4, r5, r6, r7, lr}
   85b12:	4c27      	ldr	r4, [pc, #156]	; (85bb0 <__register_exitproc+0xa0>)
   85b14:	b085      	sub	sp, #20
   85b16:	6826      	ldr	r6, [r4, #0]
   85b18:	4607      	mov	r7, r0
   85b1a:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   85b1e:	2c00      	cmp	r4, #0
   85b20:	d040      	beq.n	85ba4 <__register_exitproc+0x94>
   85b22:	6865      	ldr	r5, [r4, #4]
   85b24:	2d1f      	cmp	r5, #31
   85b26:	dd1e      	ble.n	85b66 <__register_exitproc+0x56>
   85b28:	4822      	ldr	r0, [pc, #136]	; (85bb4 <__register_exitproc+0xa4>)
   85b2a:	b918      	cbnz	r0, 85b34 <__register_exitproc+0x24>
   85b2c:	f04f 30ff 	mov.w	r0, #4294967295
   85b30:	b005      	add	sp, #20
   85b32:	bdf0      	pop	{r4, r5, r6, r7, pc}
   85b34:	f44f 70c8 	mov.w	r0, #400	; 0x190
   85b38:	9103      	str	r1, [sp, #12]
   85b3a:	9202      	str	r2, [sp, #8]
   85b3c:	9301      	str	r3, [sp, #4]
   85b3e:	f7ff f98d 	bl	84e5c <malloc>
   85b42:	9903      	ldr	r1, [sp, #12]
   85b44:	4604      	mov	r4, r0
   85b46:	9a02      	ldr	r2, [sp, #8]
   85b48:	9b01      	ldr	r3, [sp, #4]
   85b4a:	2800      	cmp	r0, #0
   85b4c:	d0ee      	beq.n	85b2c <__register_exitproc+0x1c>
   85b4e:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
   85b52:	2000      	movs	r0, #0
   85b54:	6025      	str	r5, [r4, #0]
   85b56:	6060      	str	r0, [r4, #4]
   85b58:	4605      	mov	r5, r0
   85b5a:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   85b5e:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   85b62:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   85b66:	b93f      	cbnz	r7, 85b78 <__register_exitproc+0x68>
   85b68:	1c6b      	adds	r3, r5, #1
   85b6a:	2000      	movs	r0, #0
   85b6c:	3502      	adds	r5, #2
   85b6e:	6063      	str	r3, [r4, #4]
   85b70:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
   85b74:	b005      	add	sp, #20
   85b76:	bdf0      	pop	{r4, r5, r6, r7, pc}
   85b78:	2601      	movs	r6, #1
   85b7a:	40ae      	lsls	r6, r5
   85b7c:	eb04 0085 	add.w	r0, r4, r5, lsl #2
   85b80:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   85b84:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   85b88:	2f02      	cmp	r7, #2
   85b8a:	ea42 0206 	orr.w	r2, r2, r6
   85b8e:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   85b92:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   85b96:	d1e7      	bne.n	85b68 <__register_exitproc+0x58>
   85b98:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   85b9c:	431e      	orrs	r6, r3
   85b9e:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
   85ba2:	e7e1      	b.n	85b68 <__register_exitproc+0x58>
   85ba4:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   85ba8:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   85bac:	e7b9      	b.n	85b22 <__register_exitproc+0x12>
   85bae:	bf00      	nop
   85bb0:	000862ec 	.word	0x000862ec
   85bb4:	00084e5d 	.word	0x00084e5d

00085bb8 <_close_r>:
   85bb8:	b538      	push	{r3, r4, r5, lr}
   85bba:	4c07      	ldr	r4, [pc, #28]	; (85bd8 <_close_r+0x20>)
   85bbc:	2300      	movs	r3, #0
   85bbe:	4605      	mov	r5, r0
   85bc0:	4608      	mov	r0, r1
   85bc2:	6023      	str	r3, [r4, #0]
   85bc4:	f7fc fcee 	bl	825a4 <_close>
   85bc8:	1c43      	adds	r3, r0, #1
   85bca:	d000      	beq.n	85bce <_close_r+0x16>
   85bcc:	bd38      	pop	{r3, r4, r5, pc}
   85bce:	6823      	ldr	r3, [r4, #0]
   85bd0:	2b00      	cmp	r3, #0
   85bd2:	d0fb      	beq.n	85bcc <_close_r+0x14>
   85bd4:	602b      	str	r3, [r5, #0]
   85bd6:	bd38      	pop	{r3, r4, r5, pc}
   85bd8:	20070d94 	.word	0x20070d94

00085bdc <_fclose_r>:
   85bdc:	b570      	push	{r4, r5, r6, lr}
   85bde:	460c      	mov	r4, r1
   85be0:	4605      	mov	r5, r0
   85be2:	b131      	cbz	r1, 85bf2 <_fclose_r+0x16>
   85be4:	b110      	cbz	r0, 85bec <_fclose_r+0x10>
   85be6:	6b83      	ldr	r3, [r0, #56]	; 0x38
   85be8:	2b00      	cmp	r3, #0
   85bea:	d02f      	beq.n	85c4c <_fclose_r+0x70>
   85bec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   85bf0:	b90b      	cbnz	r3, 85bf6 <_fclose_r+0x1a>
   85bf2:	2000      	movs	r0, #0
   85bf4:	bd70      	pop	{r4, r5, r6, pc}
   85bf6:	4628      	mov	r0, r5
   85bf8:	4621      	mov	r1, r4
   85bfa:	f7fe fcd9 	bl	845b0 <_fflush_r>
   85bfe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   85c00:	4606      	mov	r6, r0
   85c02:	b133      	cbz	r3, 85c12 <_fclose_r+0x36>
   85c04:	4628      	mov	r0, r5
   85c06:	69e1      	ldr	r1, [r4, #28]
   85c08:	4798      	blx	r3
   85c0a:	2800      	cmp	r0, #0
   85c0c:	bfb8      	it	lt
   85c0e:	f04f 36ff 	movlt.w	r6, #4294967295
   85c12:	89a3      	ldrh	r3, [r4, #12]
   85c14:	061b      	lsls	r3, r3, #24
   85c16:	d41c      	bmi.n	85c52 <_fclose_r+0x76>
   85c18:	6b21      	ldr	r1, [r4, #48]	; 0x30
   85c1a:	b141      	cbz	r1, 85c2e <_fclose_r+0x52>
   85c1c:	f104 0340 	add.w	r3, r4, #64	; 0x40
   85c20:	4299      	cmp	r1, r3
   85c22:	d002      	beq.n	85c2a <_fclose_r+0x4e>
   85c24:	4628      	mov	r0, r5
   85c26:	f7fe fe23 	bl	84870 <_free_r>
   85c2a:	2300      	movs	r3, #0
   85c2c:	6323      	str	r3, [r4, #48]	; 0x30
   85c2e:	6c61      	ldr	r1, [r4, #68]	; 0x44
   85c30:	b121      	cbz	r1, 85c3c <_fclose_r+0x60>
   85c32:	4628      	mov	r0, r5
   85c34:	f7fe fe1c 	bl	84870 <_free_r>
   85c38:	2300      	movs	r3, #0
   85c3a:	6463      	str	r3, [r4, #68]	; 0x44
   85c3c:	f7fe fd4e 	bl	846dc <__sfp_lock_acquire>
   85c40:	2300      	movs	r3, #0
   85c42:	81a3      	strh	r3, [r4, #12]
   85c44:	f7fe fd4c 	bl	846e0 <__sfp_lock_release>
   85c48:	4630      	mov	r0, r6
   85c4a:	bd70      	pop	{r4, r5, r6, pc}
   85c4c:	f7fe fccc 	bl	845e8 <__sinit>
   85c50:	e7cc      	b.n	85bec <_fclose_r+0x10>
   85c52:	4628      	mov	r0, r5
   85c54:	6921      	ldr	r1, [r4, #16]
   85c56:	f7fe fe0b 	bl	84870 <_free_r>
   85c5a:	e7dd      	b.n	85c18 <_fclose_r+0x3c>

00085c5c <fclose>:
   85c5c:	4b02      	ldr	r3, [pc, #8]	; (85c68 <fclose+0xc>)
   85c5e:	4601      	mov	r1, r0
   85c60:	6818      	ldr	r0, [r3, #0]
   85c62:	f7ff bfbb 	b.w	85bdc <_fclose_r>
   85c66:	bf00      	nop
   85c68:	20070608 	.word	0x20070608

00085c6c <_fstat_r>:
   85c6c:	b538      	push	{r3, r4, r5, lr}
   85c6e:	4c08      	ldr	r4, [pc, #32]	; (85c90 <_fstat_r+0x24>)
   85c70:	2300      	movs	r3, #0
   85c72:	4605      	mov	r5, r0
   85c74:	4608      	mov	r0, r1
   85c76:	4611      	mov	r1, r2
   85c78:	6023      	str	r3, [r4, #0]
   85c7a:	f7fc fc97 	bl	825ac <_fstat>
   85c7e:	1c43      	adds	r3, r0, #1
   85c80:	d000      	beq.n	85c84 <_fstat_r+0x18>
   85c82:	bd38      	pop	{r3, r4, r5, pc}
   85c84:	6823      	ldr	r3, [r4, #0]
   85c86:	2b00      	cmp	r3, #0
   85c88:	d0fb      	beq.n	85c82 <_fstat_r+0x16>
   85c8a:	602b      	str	r3, [r5, #0]
   85c8c:	bd38      	pop	{r3, r4, r5, pc}
   85c8e:	bf00      	nop
   85c90:	20070d94 	.word	0x20070d94

00085c94 <_isatty_r>:
   85c94:	b538      	push	{r3, r4, r5, lr}
   85c96:	4c07      	ldr	r4, [pc, #28]	; (85cb4 <_isatty_r+0x20>)
   85c98:	2300      	movs	r3, #0
   85c9a:	4605      	mov	r5, r0
   85c9c:	4608      	mov	r0, r1
   85c9e:	6023      	str	r3, [r4, #0]
   85ca0:	f7fc fc8a 	bl	825b8 <_isatty>
   85ca4:	1c43      	adds	r3, r0, #1
   85ca6:	d000      	beq.n	85caa <_isatty_r+0x16>
   85ca8:	bd38      	pop	{r3, r4, r5, pc}
   85caa:	6823      	ldr	r3, [r4, #0]
   85cac:	2b00      	cmp	r3, #0
   85cae:	d0fb      	beq.n	85ca8 <_isatty_r+0x14>
   85cb0:	602b      	str	r3, [r5, #0]
   85cb2:	bd38      	pop	{r3, r4, r5, pc}
   85cb4:	20070d94 	.word	0x20070d94

00085cb8 <_lseek_r>:
   85cb8:	b570      	push	{r4, r5, r6, lr}
   85cba:	4c08      	ldr	r4, [pc, #32]	; (85cdc <_lseek_r+0x24>)
   85cbc:	4606      	mov	r6, r0
   85cbe:	2500      	movs	r5, #0
   85cc0:	4608      	mov	r0, r1
   85cc2:	4611      	mov	r1, r2
   85cc4:	461a      	mov	r2, r3
   85cc6:	6025      	str	r5, [r4, #0]
   85cc8:	f7fc fc78 	bl	825bc <_lseek>
   85ccc:	1c43      	adds	r3, r0, #1
   85cce:	d000      	beq.n	85cd2 <_lseek_r+0x1a>
   85cd0:	bd70      	pop	{r4, r5, r6, pc}
   85cd2:	6823      	ldr	r3, [r4, #0]
   85cd4:	2b00      	cmp	r3, #0
   85cd6:	d0fb      	beq.n	85cd0 <_lseek_r+0x18>
   85cd8:	6033      	str	r3, [r6, #0]
   85cda:	bd70      	pop	{r4, r5, r6, pc}
   85cdc:	20070d94 	.word	0x20070d94

00085ce0 <_read_r>:
   85ce0:	b570      	push	{r4, r5, r6, lr}
   85ce2:	4c08      	ldr	r4, [pc, #32]	; (85d04 <_read_r+0x24>)
   85ce4:	4606      	mov	r6, r0
   85ce6:	2500      	movs	r5, #0
   85ce8:	4608      	mov	r0, r1
   85cea:	4611      	mov	r1, r2
   85cec:	461a      	mov	r2, r3
   85cee:	6025      	str	r5, [r4, #0]
   85cf0:	f7fb f82a 	bl	80d48 <_read>
   85cf4:	1c43      	adds	r3, r0, #1
   85cf6:	d000      	beq.n	85cfa <_read_r+0x1a>
   85cf8:	bd70      	pop	{r4, r5, r6, pc}
   85cfa:	6823      	ldr	r3, [r4, #0]
   85cfc:	2b00      	cmp	r3, #0
   85cfe:	d0fb      	beq.n	85cf8 <_read_r+0x18>
   85d00:	6033      	str	r3, [r6, #0]
   85d02:	bd70      	pop	{r4, r5, r6, pc}
   85d04:	20070d94 	.word	0x20070d94

00085d08 <__aeabi_uldivmod>:
   85d08:	b94b      	cbnz	r3, 85d1e <__aeabi_uldivmod+0x16>
   85d0a:	b942      	cbnz	r2, 85d1e <__aeabi_uldivmod+0x16>
   85d0c:	2900      	cmp	r1, #0
   85d0e:	bf08      	it	eq
   85d10:	2800      	cmpeq	r0, #0
   85d12:	d002      	beq.n	85d1a <__aeabi_uldivmod+0x12>
   85d14:	f04f 31ff 	mov.w	r1, #4294967295
   85d18:	4608      	mov	r0, r1
   85d1a:	f000 b83b 	b.w	85d94 <__aeabi_idiv0>
   85d1e:	b082      	sub	sp, #8
   85d20:	46ec      	mov	ip, sp
   85d22:	e92d 5000 	stmdb	sp!, {ip, lr}
   85d26:	f000 f81d 	bl	85d64 <__gnu_uldivmod_helper>
   85d2a:	f8dd e004 	ldr.w	lr, [sp, #4]
   85d2e:	b002      	add	sp, #8
   85d30:	bc0c      	pop	{r2, r3}
   85d32:	4770      	bx	lr

00085d34 <__gnu_ldivmod_helper>:
   85d34:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   85d38:	9e08      	ldr	r6, [sp, #32]
   85d3a:	4614      	mov	r4, r2
   85d3c:	461d      	mov	r5, r3
   85d3e:	4680      	mov	r8, r0
   85d40:	4689      	mov	r9, r1
   85d42:	f000 f829 	bl	85d98 <__divdi3>
   85d46:	fb04 f301 	mul.w	r3, r4, r1
   85d4a:	fba4 ab00 	umull	sl, fp, r4, r0
   85d4e:	fb00 3205 	mla	r2, r0, r5, r3
   85d52:	4493      	add	fp, r2
   85d54:	ebb8 080a 	subs.w	r8, r8, sl
   85d58:	eb69 090b 	sbc.w	r9, r9, fp
   85d5c:	e9c6 8900 	strd	r8, r9, [r6]
   85d60:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

00085d64 <__gnu_uldivmod_helper>:
   85d64:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   85d68:	9e08      	ldr	r6, [sp, #32]
   85d6a:	4614      	mov	r4, r2
   85d6c:	461d      	mov	r5, r3
   85d6e:	4680      	mov	r8, r0
   85d70:	4689      	mov	r9, r1
   85d72:	f000 f961 	bl	86038 <__udivdi3>
   85d76:	fb00 f505 	mul.w	r5, r0, r5
   85d7a:	fba0 ab04 	umull	sl, fp, r0, r4
   85d7e:	fb04 5401 	mla	r4, r4, r1, r5
   85d82:	44a3      	add	fp, r4
   85d84:	ebb8 080a 	subs.w	r8, r8, sl
   85d88:	eb69 090b 	sbc.w	r9, r9, fp
   85d8c:	e9c6 8900 	strd	r8, r9, [r6]
   85d90:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

00085d94 <__aeabi_idiv0>:
   85d94:	4770      	bx	lr
   85d96:	bf00      	nop

00085d98 <__divdi3>:
   85d98:	2900      	cmp	r1, #0
   85d9a:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   85d9e:	f2c0 80a1 	blt.w	85ee4 <__divdi3+0x14c>
   85da2:	2400      	movs	r4, #0
   85da4:	2b00      	cmp	r3, #0
   85da6:	f2c0 8098 	blt.w	85eda <__divdi3+0x142>
   85daa:	4615      	mov	r5, r2
   85dac:	4606      	mov	r6, r0
   85dae:	460f      	mov	r7, r1
   85db0:	2b00      	cmp	r3, #0
   85db2:	d13f      	bne.n	85e34 <__divdi3+0x9c>
   85db4:	428a      	cmp	r2, r1
   85db6:	d958      	bls.n	85e6a <__divdi3+0xd2>
   85db8:	fab2 f382 	clz	r3, r2
   85dbc:	b14b      	cbz	r3, 85dd2 <__divdi3+0x3a>
   85dbe:	f1c3 0220 	rsb	r2, r3, #32
   85dc2:	fa01 f703 	lsl.w	r7, r1, r3
   85dc6:	fa20 f202 	lsr.w	r2, r0, r2
   85dca:	409d      	lsls	r5, r3
   85dcc:	fa00 f603 	lsl.w	r6, r0, r3
   85dd0:	4317      	orrs	r7, r2
   85dd2:	0c29      	lsrs	r1, r5, #16
   85dd4:	fbb7 f2f1 	udiv	r2, r7, r1
   85dd8:	fb01 7712 	mls	r7, r1, r2, r7
   85ddc:	b2a8      	uxth	r0, r5
   85dde:	fb00 f302 	mul.w	r3, r0, r2
   85de2:	ea4f 4c16 	mov.w	ip, r6, lsr #16
   85de6:	ea4c 4707 	orr.w	r7, ip, r7, lsl #16
   85dea:	42bb      	cmp	r3, r7
   85dec:	d909      	bls.n	85e02 <__divdi3+0x6a>
   85dee:	197f      	adds	r7, r7, r5
   85df0:	f102 3cff 	add.w	ip, r2, #4294967295
   85df4:	f080 8105 	bcs.w	86002 <__divdi3+0x26a>
   85df8:	42bb      	cmp	r3, r7
   85dfa:	f240 8102 	bls.w	86002 <__divdi3+0x26a>
   85dfe:	3a02      	subs	r2, #2
   85e00:	442f      	add	r7, r5
   85e02:	1aff      	subs	r7, r7, r3
   85e04:	fbb7 f3f1 	udiv	r3, r7, r1
   85e08:	fb01 7113 	mls	r1, r1, r3, r7
   85e0c:	fb00 f003 	mul.w	r0, r0, r3
   85e10:	b2b6      	uxth	r6, r6
   85e12:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
   85e16:	4288      	cmp	r0, r1
   85e18:	d908      	bls.n	85e2c <__divdi3+0x94>
   85e1a:	1949      	adds	r1, r1, r5
   85e1c:	f103 37ff 	add.w	r7, r3, #4294967295
   85e20:	f080 80f1 	bcs.w	86006 <__divdi3+0x26e>
   85e24:	4288      	cmp	r0, r1
   85e26:	f240 80ee 	bls.w	86006 <__divdi3+0x26e>
   85e2a:	3b02      	subs	r3, #2
   85e2c:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   85e30:	2300      	movs	r3, #0
   85e32:	e003      	b.n	85e3c <__divdi3+0xa4>
   85e34:	428b      	cmp	r3, r1
   85e36:	d90a      	bls.n	85e4e <__divdi3+0xb6>
   85e38:	2300      	movs	r3, #0
   85e3a:	461a      	mov	r2, r3
   85e3c:	4610      	mov	r0, r2
   85e3e:	4619      	mov	r1, r3
   85e40:	b114      	cbz	r4, 85e48 <__divdi3+0xb0>
   85e42:	4240      	negs	r0, r0
   85e44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   85e48:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   85e4c:	4770      	bx	lr
   85e4e:	fab3 f883 	clz	r8, r3
   85e52:	f1b8 0f00 	cmp.w	r8, #0
   85e56:	f040 8088 	bne.w	85f6a <__divdi3+0x1d2>
   85e5a:	428b      	cmp	r3, r1
   85e5c:	d302      	bcc.n	85e64 <__divdi3+0xcc>
   85e5e:	4282      	cmp	r2, r0
   85e60:	f200 80e2 	bhi.w	86028 <__divdi3+0x290>
   85e64:	2300      	movs	r3, #0
   85e66:	2201      	movs	r2, #1
   85e68:	e7e8      	b.n	85e3c <__divdi3+0xa4>
   85e6a:	b912      	cbnz	r2, 85e72 <__divdi3+0xda>
   85e6c:	2301      	movs	r3, #1
   85e6e:	fbb3 f5f2 	udiv	r5, r3, r2
   85e72:	fab5 f285 	clz	r2, r5
   85e76:	2a00      	cmp	r2, #0
   85e78:	d13a      	bne.n	85ef0 <__divdi3+0x158>
   85e7a:	1b7f      	subs	r7, r7, r5
   85e7c:	0c28      	lsrs	r0, r5, #16
   85e7e:	fa1f fc85 	uxth.w	ip, r5
   85e82:	2301      	movs	r3, #1
   85e84:	fbb7 f1f0 	udiv	r1, r7, r0
   85e88:	fb00 7711 	mls	r7, r0, r1, r7
   85e8c:	fb0c f201 	mul.w	r2, ip, r1
   85e90:	ea4f 4816 	mov.w	r8, r6, lsr #16
   85e94:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
   85e98:	42ba      	cmp	r2, r7
   85e9a:	d907      	bls.n	85eac <__divdi3+0x114>
   85e9c:	197f      	adds	r7, r7, r5
   85e9e:	f101 38ff 	add.w	r8, r1, #4294967295
   85ea2:	d202      	bcs.n	85eaa <__divdi3+0x112>
   85ea4:	42ba      	cmp	r2, r7
   85ea6:	f200 80c4 	bhi.w	86032 <__divdi3+0x29a>
   85eaa:	4641      	mov	r1, r8
   85eac:	1abf      	subs	r7, r7, r2
   85eae:	fbb7 f2f0 	udiv	r2, r7, r0
   85eb2:	fb00 7012 	mls	r0, r0, r2, r7
   85eb6:	fb0c fc02 	mul.w	ip, ip, r2
   85eba:	b2b6      	uxth	r6, r6
   85ebc:	ea46 4000 	orr.w	r0, r6, r0, lsl #16
   85ec0:	4584      	cmp	ip, r0
   85ec2:	d907      	bls.n	85ed4 <__divdi3+0x13c>
   85ec4:	1940      	adds	r0, r0, r5
   85ec6:	f102 37ff 	add.w	r7, r2, #4294967295
   85eca:	d202      	bcs.n	85ed2 <__divdi3+0x13a>
   85ecc:	4584      	cmp	ip, r0
   85ece:	f200 80ae 	bhi.w	8602e <__divdi3+0x296>
   85ed2:	463a      	mov	r2, r7
   85ed4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   85ed8:	e7b0      	b.n	85e3c <__divdi3+0xa4>
   85eda:	43e4      	mvns	r4, r4
   85edc:	4252      	negs	r2, r2
   85ede:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   85ee2:	e762      	b.n	85daa <__divdi3+0x12>
   85ee4:	4240      	negs	r0, r0
   85ee6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   85eea:	f04f 34ff 	mov.w	r4, #4294967295
   85eee:	e759      	b.n	85da4 <__divdi3+0xc>
   85ef0:	4095      	lsls	r5, r2
   85ef2:	f1c2 0920 	rsb	r9, r2, #32
   85ef6:	fa27 f109 	lsr.w	r1, r7, r9
   85efa:	fa26 f909 	lsr.w	r9, r6, r9
   85efe:	4097      	lsls	r7, r2
   85f00:	0c28      	lsrs	r0, r5, #16
   85f02:	fbb1 f8f0 	udiv	r8, r1, r0
   85f06:	fb00 1118 	mls	r1, r0, r8, r1
   85f0a:	fa1f fc85 	uxth.w	ip, r5
   85f0e:	fb0c f308 	mul.w	r3, ip, r8
   85f12:	ea49 0907 	orr.w	r9, r9, r7
   85f16:	ea4f 4719 	mov.w	r7, r9, lsr #16
   85f1a:	ea47 4101 	orr.w	r1, r7, r1, lsl #16
   85f1e:	428b      	cmp	r3, r1
   85f20:	fa06 f602 	lsl.w	r6, r6, r2
   85f24:	d908      	bls.n	85f38 <__divdi3+0x1a0>
   85f26:	1949      	adds	r1, r1, r5
   85f28:	f108 32ff 	add.w	r2, r8, #4294967295
   85f2c:	d27a      	bcs.n	86024 <__divdi3+0x28c>
   85f2e:	428b      	cmp	r3, r1
   85f30:	d978      	bls.n	86024 <__divdi3+0x28c>
   85f32:	f1a8 0802 	sub.w	r8, r8, #2
   85f36:	4429      	add	r1, r5
   85f38:	1ac9      	subs	r1, r1, r3
   85f3a:	fbb1 f3f0 	udiv	r3, r1, r0
   85f3e:	fb00 1713 	mls	r7, r0, r3, r1
   85f42:	fb0c f203 	mul.w	r2, ip, r3
   85f46:	fa1f f989 	uxth.w	r9, r9
   85f4a:	ea49 4707 	orr.w	r7, r9, r7, lsl #16
   85f4e:	42ba      	cmp	r2, r7
   85f50:	d907      	bls.n	85f62 <__divdi3+0x1ca>
   85f52:	197f      	adds	r7, r7, r5
   85f54:	f103 31ff 	add.w	r1, r3, #4294967295
   85f58:	d260      	bcs.n	8601c <__divdi3+0x284>
   85f5a:	42ba      	cmp	r2, r7
   85f5c:	d95e      	bls.n	8601c <__divdi3+0x284>
   85f5e:	3b02      	subs	r3, #2
   85f60:	442f      	add	r7, r5
   85f62:	1abf      	subs	r7, r7, r2
   85f64:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   85f68:	e78c      	b.n	85e84 <__divdi3+0xec>
   85f6a:	f1c8 0220 	rsb	r2, r8, #32
   85f6e:	fa25 f102 	lsr.w	r1, r5, r2
   85f72:	fa03 fc08 	lsl.w	ip, r3, r8
   85f76:	fa27 f302 	lsr.w	r3, r7, r2
   85f7a:	fa20 f202 	lsr.w	r2, r0, r2
   85f7e:	fa07 f708 	lsl.w	r7, r7, r8
   85f82:	ea41 0c0c 	orr.w	ip, r1, ip
   85f86:	ea4f 491c 	mov.w	r9, ip, lsr #16
   85f8a:	fbb3 f1f9 	udiv	r1, r3, r9
   85f8e:	fb09 3311 	mls	r3, r9, r1, r3
   85f92:	fa1f fa8c 	uxth.w	sl, ip
   85f96:	fb0a fb01 	mul.w	fp, sl, r1
   85f9a:	4317      	orrs	r7, r2
   85f9c:	0c3a      	lsrs	r2, r7, #16
   85f9e:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   85fa2:	459b      	cmp	fp, r3
   85fa4:	fa05 f008 	lsl.w	r0, r5, r8
   85fa8:	d908      	bls.n	85fbc <__divdi3+0x224>
   85faa:	eb13 030c 	adds.w	r3, r3, ip
   85fae:	f101 32ff 	add.w	r2, r1, #4294967295
   85fb2:	d235      	bcs.n	86020 <__divdi3+0x288>
   85fb4:	459b      	cmp	fp, r3
   85fb6:	d933      	bls.n	86020 <__divdi3+0x288>
   85fb8:	3902      	subs	r1, #2
   85fba:	4463      	add	r3, ip
   85fbc:	ebcb 0303 	rsb	r3, fp, r3
   85fc0:	fbb3 f2f9 	udiv	r2, r3, r9
   85fc4:	fb09 3312 	mls	r3, r9, r2, r3
   85fc8:	fb0a fa02 	mul.w	sl, sl, r2
   85fcc:	b2bf      	uxth	r7, r7
   85fce:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
   85fd2:	45ba      	cmp	sl, r7
   85fd4:	d908      	bls.n	85fe8 <__divdi3+0x250>
   85fd6:	eb17 070c 	adds.w	r7, r7, ip
   85fda:	f102 33ff 	add.w	r3, r2, #4294967295
   85fde:	d21b      	bcs.n	86018 <__divdi3+0x280>
   85fe0:	45ba      	cmp	sl, r7
   85fe2:	d919      	bls.n	86018 <__divdi3+0x280>
   85fe4:	3a02      	subs	r2, #2
   85fe6:	4467      	add	r7, ip
   85fe8:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
   85fec:	fba5 0100 	umull	r0, r1, r5, r0
   85ff0:	ebca 0707 	rsb	r7, sl, r7
   85ff4:	428f      	cmp	r7, r1
   85ff6:	f04f 0300 	mov.w	r3, #0
   85ffa:	d30a      	bcc.n	86012 <__divdi3+0x27a>
   85ffc:	d005      	beq.n	8600a <__divdi3+0x272>
   85ffe:	462a      	mov	r2, r5
   86000:	e71c      	b.n	85e3c <__divdi3+0xa4>
   86002:	4662      	mov	r2, ip
   86004:	e6fd      	b.n	85e02 <__divdi3+0x6a>
   86006:	463b      	mov	r3, r7
   86008:	e710      	b.n	85e2c <__divdi3+0x94>
   8600a:	fa06 f608 	lsl.w	r6, r6, r8
   8600e:	4286      	cmp	r6, r0
   86010:	d2f5      	bcs.n	85ffe <__divdi3+0x266>
   86012:	1e6a      	subs	r2, r5, #1
   86014:	2300      	movs	r3, #0
   86016:	e711      	b.n	85e3c <__divdi3+0xa4>
   86018:	461a      	mov	r2, r3
   8601a:	e7e5      	b.n	85fe8 <__divdi3+0x250>
   8601c:	460b      	mov	r3, r1
   8601e:	e7a0      	b.n	85f62 <__divdi3+0x1ca>
   86020:	4611      	mov	r1, r2
   86022:	e7cb      	b.n	85fbc <__divdi3+0x224>
   86024:	4690      	mov	r8, r2
   86026:	e787      	b.n	85f38 <__divdi3+0x1a0>
   86028:	4643      	mov	r3, r8
   8602a:	4642      	mov	r2, r8
   8602c:	e706      	b.n	85e3c <__divdi3+0xa4>
   8602e:	3a02      	subs	r2, #2
   86030:	e750      	b.n	85ed4 <__divdi3+0x13c>
   86032:	3902      	subs	r1, #2
   86034:	442f      	add	r7, r5
   86036:	e739      	b.n	85eac <__divdi3+0x114>

00086038 <__udivdi3>:
   86038:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8603c:	4614      	mov	r4, r2
   8603e:	4605      	mov	r5, r0
   86040:	460e      	mov	r6, r1
   86042:	2b00      	cmp	r3, #0
   86044:	d143      	bne.n	860ce <__udivdi3+0x96>
   86046:	428a      	cmp	r2, r1
   86048:	d953      	bls.n	860f2 <__udivdi3+0xba>
   8604a:	fab2 f782 	clz	r7, r2
   8604e:	b157      	cbz	r7, 86066 <__udivdi3+0x2e>
   86050:	f1c7 0620 	rsb	r6, r7, #32
   86054:	fa20 f606 	lsr.w	r6, r0, r6
   86058:	fa01 f307 	lsl.w	r3, r1, r7
   8605c:	fa02 f407 	lsl.w	r4, r2, r7
   86060:	fa00 f507 	lsl.w	r5, r0, r7
   86064:	431e      	orrs	r6, r3
   86066:	0c21      	lsrs	r1, r4, #16
   86068:	fbb6 f2f1 	udiv	r2, r6, r1
   8606c:	fb01 6612 	mls	r6, r1, r2, r6
   86070:	b2a0      	uxth	r0, r4
   86072:	fb00 f302 	mul.w	r3, r0, r2
   86076:	0c2f      	lsrs	r7, r5, #16
   86078:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   8607c:	42b3      	cmp	r3, r6
   8607e:	d909      	bls.n	86094 <__udivdi3+0x5c>
   86080:	1936      	adds	r6, r6, r4
   86082:	f102 37ff 	add.w	r7, r2, #4294967295
   86086:	f080 80fd 	bcs.w	86284 <__udivdi3+0x24c>
   8608a:	42b3      	cmp	r3, r6
   8608c:	f240 80fa 	bls.w	86284 <__udivdi3+0x24c>
   86090:	3a02      	subs	r2, #2
   86092:	4426      	add	r6, r4
   86094:	1af6      	subs	r6, r6, r3
   86096:	fbb6 f3f1 	udiv	r3, r6, r1
   8609a:	fb01 6113 	mls	r1, r1, r3, r6
   8609e:	fb00 f003 	mul.w	r0, r0, r3
   860a2:	b2ad      	uxth	r5, r5
   860a4:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
   860a8:	4288      	cmp	r0, r1
   860aa:	d908      	bls.n	860be <__udivdi3+0x86>
   860ac:	1909      	adds	r1, r1, r4
   860ae:	f103 36ff 	add.w	r6, r3, #4294967295
   860b2:	f080 80e9 	bcs.w	86288 <__udivdi3+0x250>
   860b6:	4288      	cmp	r0, r1
   860b8:	f240 80e6 	bls.w	86288 <__udivdi3+0x250>
   860bc:	3b02      	subs	r3, #2
   860be:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   860c2:	2300      	movs	r3, #0
   860c4:	4610      	mov	r0, r2
   860c6:	4619      	mov	r1, r3
   860c8:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   860cc:	4770      	bx	lr
   860ce:	428b      	cmp	r3, r1
   860d0:	d84c      	bhi.n	8616c <__udivdi3+0x134>
   860d2:	fab3 f683 	clz	r6, r3
   860d6:	2e00      	cmp	r6, #0
   860d8:	d14f      	bne.n	8617a <__udivdi3+0x142>
   860da:	428b      	cmp	r3, r1
   860dc:	d302      	bcc.n	860e4 <__udivdi3+0xac>
   860de:	4282      	cmp	r2, r0
   860e0:	f200 80dd 	bhi.w	8629e <__udivdi3+0x266>
   860e4:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   860e8:	2300      	movs	r3, #0
   860ea:	2201      	movs	r2, #1
   860ec:	4610      	mov	r0, r2
   860ee:	4619      	mov	r1, r3
   860f0:	4770      	bx	lr
   860f2:	b912      	cbnz	r2, 860fa <__udivdi3+0xc2>
   860f4:	2401      	movs	r4, #1
   860f6:	fbb4 f4f2 	udiv	r4, r4, r2
   860fa:	fab4 f284 	clz	r2, r4
   860fe:	2a00      	cmp	r2, #0
   86100:	f040 8082 	bne.w	86208 <__udivdi3+0x1d0>
   86104:	1b09      	subs	r1, r1, r4
   86106:	0c26      	lsrs	r6, r4, #16
   86108:	b2a7      	uxth	r7, r4
   8610a:	2301      	movs	r3, #1
   8610c:	fbb1 f0f6 	udiv	r0, r1, r6
   86110:	fb06 1110 	mls	r1, r6, r0, r1
   86114:	fb07 f200 	mul.w	r2, r7, r0
   86118:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   8611c:	ea4c 4101 	orr.w	r1, ip, r1, lsl #16
   86120:	428a      	cmp	r2, r1
   86122:	d907      	bls.n	86134 <__udivdi3+0xfc>
   86124:	1909      	adds	r1, r1, r4
   86126:	f100 3cff 	add.w	ip, r0, #4294967295
   8612a:	d202      	bcs.n	86132 <__udivdi3+0xfa>
   8612c:	428a      	cmp	r2, r1
   8612e:	f200 80c8 	bhi.w	862c2 <__udivdi3+0x28a>
   86132:	4660      	mov	r0, ip
   86134:	1a89      	subs	r1, r1, r2
   86136:	fbb1 f2f6 	udiv	r2, r1, r6
   8613a:	fb06 1112 	mls	r1, r6, r2, r1
   8613e:	fb07 f702 	mul.w	r7, r7, r2
   86142:	b2ad      	uxth	r5, r5
   86144:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
   86148:	42af      	cmp	r7, r5
   8614a:	d908      	bls.n	8615e <__udivdi3+0x126>
   8614c:	192c      	adds	r4, r5, r4
   8614e:	f102 31ff 	add.w	r1, r2, #4294967295
   86152:	f080 809b 	bcs.w	8628c <__udivdi3+0x254>
   86156:	42a7      	cmp	r7, r4
   86158:	f240 8098 	bls.w	8628c <__udivdi3+0x254>
   8615c:	3a02      	subs	r2, #2
   8615e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
   86162:	4610      	mov	r0, r2
   86164:	4619      	mov	r1, r3
   86166:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8616a:	4770      	bx	lr
   8616c:	2300      	movs	r3, #0
   8616e:	461a      	mov	r2, r3
   86170:	4610      	mov	r0, r2
   86172:	4619      	mov	r1, r3
   86174:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   86178:	4770      	bx	lr
   8617a:	f1c6 0520 	rsb	r5, r6, #32
   8617e:	fa22 f705 	lsr.w	r7, r2, r5
   86182:	fa03 f406 	lsl.w	r4, r3, r6
   86186:	fa21 f305 	lsr.w	r3, r1, r5
   8618a:	fa01 fb06 	lsl.w	fp, r1, r6
   8618e:	fa20 f505 	lsr.w	r5, r0, r5
   86192:	433c      	orrs	r4, r7
   86194:	ea4f 4814 	mov.w	r8, r4, lsr #16
   86198:	fbb3 fcf8 	udiv	ip, r3, r8
   8619c:	fb08 331c 	mls	r3, r8, ip, r3
   861a0:	fa1f f984 	uxth.w	r9, r4
   861a4:	fb09 fa0c 	mul.w	sl, r9, ip
   861a8:	ea45 0b0b 	orr.w	fp, r5, fp
   861ac:	ea4f 451b 	mov.w	r5, fp, lsr #16
   861b0:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
   861b4:	459a      	cmp	sl, r3
   861b6:	fa02 f206 	lsl.w	r2, r2, r6
   861ba:	d904      	bls.n	861c6 <__udivdi3+0x18e>
   861bc:	191b      	adds	r3, r3, r4
   861be:	f10c 35ff 	add.w	r5, ip, #4294967295
   861c2:	d36f      	bcc.n	862a4 <__udivdi3+0x26c>
   861c4:	46ac      	mov	ip, r5
   861c6:	ebca 0303 	rsb	r3, sl, r3
   861ca:	fbb3 f5f8 	udiv	r5, r3, r8
   861ce:	fb08 3315 	mls	r3, r8, r5, r3
   861d2:	fb09 f905 	mul.w	r9, r9, r5
   861d6:	fa1f fb8b 	uxth.w	fp, fp
   861da:	ea4b 4703 	orr.w	r7, fp, r3, lsl #16
   861de:	45b9      	cmp	r9, r7
   861e0:	d904      	bls.n	861ec <__udivdi3+0x1b4>
   861e2:	193f      	adds	r7, r7, r4
   861e4:	f105 33ff 	add.w	r3, r5, #4294967295
   861e8:	d362      	bcc.n	862b0 <__udivdi3+0x278>
   861ea:	461d      	mov	r5, r3
   861ec:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
   861f0:	fbac 2302 	umull	r2, r3, ip, r2
   861f4:	ebc9 0707 	rsb	r7, r9, r7
   861f8:	429f      	cmp	r7, r3
   861fa:	f04f 0500 	mov.w	r5, #0
   861fe:	d34a      	bcc.n	86296 <__udivdi3+0x25e>
   86200:	d046      	beq.n	86290 <__udivdi3+0x258>
   86202:	4662      	mov	r2, ip
   86204:	462b      	mov	r3, r5
   86206:	e75d      	b.n	860c4 <__udivdi3+0x8c>
   86208:	4094      	lsls	r4, r2
   8620a:	f1c2 0920 	rsb	r9, r2, #32
   8620e:	fa21 fc09 	lsr.w	ip, r1, r9
   86212:	4091      	lsls	r1, r2
   86214:	fa20 f909 	lsr.w	r9, r0, r9
   86218:	0c26      	lsrs	r6, r4, #16
   8621a:	fbbc f8f6 	udiv	r8, ip, r6
   8621e:	fb06 cc18 	mls	ip, r6, r8, ip
   86222:	b2a7      	uxth	r7, r4
   86224:	fb07 f308 	mul.w	r3, r7, r8
   86228:	ea49 0901 	orr.w	r9, r9, r1
   8622c:	ea4f 4119 	mov.w	r1, r9, lsr #16
   86230:	ea41 4c0c 	orr.w	ip, r1, ip, lsl #16
   86234:	4563      	cmp	r3, ip
   86236:	fa00 f502 	lsl.w	r5, r0, r2
   8623a:	d909      	bls.n	86250 <__udivdi3+0x218>
   8623c:	eb1c 0c04 	adds.w	ip, ip, r4
   86240:	f108 32ff 	add.w	r2, r8, #4294967295
   86244:	d23b      	bcs.n	862be <__udivdi3+0x286>
   86246:	4563      	cmp	r3, ip
   86248:	d939      	bls.n	862be <__udivdi3+0x286>
   8624a:	f1a8 0802 	sub.w	r8, r8, #2
   8624e:	44a4      	add	ip, r4
   86250:	ebc3 0c0c 	rsb	ip, r3, ip
   86254:	fbbc f3f6 	udiv	r3, ip, r6
   86258:	fb06 c113 	mls	r1, r6, r3, ip
   8625c:	fb07 f203 	mul.w	r2, r7, r3
   86260:	fa1f f989 	uxth.w	r9, r9
   86264:	ea49 4101 	orr.w	r1, r9, r1, lsl #16
   86268:	428a      	cmp	r2, r1
   8626a:	d907      	bls.n	8627c <__udivdi3+0x244>
   8626c:	1909      	adds	r1, r1, r4
   8626e:	f103 30ff 	add.w	r0, r3, #4294967295
   86272:	d222      	bcs.n	862ba <__udivdi3+0x282>
   86274:	428a      	cmp	r2, r1
   86276:	d920      	bls.n	862ba <__udivdi3+0x282>
   86278:	3b02      	subs	r3, #2
   8627a:	4421      	add	r1, r4
   8627c:	1a89      	subs	r1, r1, r2
   8627e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   86282:	e743      	b.n	8610c <__udivdi3+0xd4>
   86284:	463a      	mov	r2, r7
   86286:	e705      	b.n	86094 <__udivdi3+0x5c>
   86288:	4633      	mov	r3, r6
   8628a:	e718      	b.n	860be <__udivdi3+0x86>
   8628c:	460a      	mov	r2, r1
   8628e:	e766      	b.n	8615e <__udivdi3+0x126>
   86290:	40b0      	lsls	r0, r6
   86292:	4290      	cmp	r0, r2
   86294:	d2b5      	bcs.n	86202 <__udivdi3+0x1ca>
   86296:	f10c 32ff 	add.w	r2, ip, #4294967295
   8629a:	2300      	movs	r3, #0
   8629c:	e712      	b.n	860c4 <__udivdi3+0x8c>
   8629e:	4633      	mov	r3, r6
   862a0:	4632      	mov	r2, r6
   862a2:	e70f      	b.n	860c4 <__udivdi3+0x8c>
   862a4:	459a      	cmp	sl, r3
   862a6:	d98d      	bls.n	861c4 <__udivdi3+0x18c>
   862a8:	f1ac 0c02 	sub.w	ip, ip, #2
   862ac:	4423      	add	r3, r4
   862ae:	e78a      	b.n	861c6 <__udivdi3+0x18e>
   862b0:	45b9      	cmp	r9, r7
   862b2:	d99a      	bls.n	861ea <__udivdi3+0x1b2>
   862b4:	3d02      	subs	r5, #2
   862b6:	4427      	add	r7, r4
   862b8:	e798      	b.n	861ec <__udivdi3+0x1b4>
   862ba:	4603      	mov	r3, r0
   862bc:	e7de      	b.n	8627c <__udivdi3+0x244>
   862be:	4690      	mov	r8, r2
   862c0:	e7c6      	b.n	86250 <__udivdi3+0x218>
   862c2:	3802      	subs	r0, #2
   862c4:	4421      	add	r1, r4
   862c6:	e735      	b.n	86134 <__udivdi3+0xfc>
   862c8:	6b6f7262 	.word	0x6b6f7262
   862cc:	4f4c6e65 	.word	0x4f4c6e65
   862d0:	00000057 	.word	0x00000057
   862d4:	6b6f7262 	.word	0x6b6f7262
   862d8:	49486e65 	.word	0x49486e65
   862dc:	00004847 	.word	0x00004847
   862e0:	63206425 	.word	0x63206425
   862e4:	00000a6d 	.word	0x00000a6d
   862e8:	00000043 	.word	0x00000043

000862ec <_global_impure_ptr>:
   862ec:	200701e0 33323130 37363534 42413938     ... 0123456789AB
   862fc:	46454443 00000000 33323130 37363534     CDEF....01234567
   8630c:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   8631c:	0000296c                                l)..

00086320 <zeroes.6721>:
   86320:	30303030 30303030 30303030 30303030     0000000000000000

00086330 <blanks.6720>:
   86330:	20202020 20202020 20202020 20202020                     

00086340 <_init>:
   86340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   86342:	bf00      	nop
   86344:	bcf8      	pop	{r3, r4, r5, r6, r7}
   86346:	bc08      	pop	{r3}
   86348:	469e      	mov	lr, r3
   8634a:	4770      	bx	lr

0008634c <__init_array_start>:
   8634c:	00084449 	.word	0x00084449

00086350 <__frame_dummy_init_array_entry>:
   86350:	00080119                                ....

00086354 <_fini>:
   86354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   86356:	bf00      	nop
   86358:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8635a:	bc08      	pop	{r3}
   8635c:	469e      	mov	lr, r3
   8635e:	4770      	bx	lr

00086360 <__fini_array_start>:
   86360:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20070000:	f3bf 8f5f 	dmb	sy
20070004:	3801      	subs	r0, #1
20070006:	d1fb      	bne.n	20070000 <portable_delay_cycles>
20070008:	4770      	bx	lr
2007000a:	bf00      	nop

2007000c <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007000c:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070010:	4a20      	ldr	r2, [pc, #128]	; (20070094 <SystemInit+0x88>)
20070012:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070014:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070018:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007001a:	4b1f      	ldr	r3, [pc, #124]	; (20070098 <SystemInit+0x8c>)
2007001c:	6a1b      	ldr	r3, [r3, #32]
2007001e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070022:	d107      	bne.n	20070034 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070024:	4a1d      	ldr	r2, [pc, #116]	; (2007009c <SystemInit+0x90>)
20070026:	4b1c      	ldr	r3, [pc, #112]	; (20070098 <SystemInit+0x8c>)
20070028:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007002a:	461a      	mov	r2, r3
2007002c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007002e:	f013 0f01 	tst.w	r3, #1
20070032:	d0fb      	beq.n	2007002c <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070034:	4a1a      	ldr	r2, [pc, #104]	; (200700a0 <SystemInit+0x94>)
20070036:	4b18      	ldr	r3, [pc, #96]	; (20070098 <SystemInit+0x8c>)
20070038:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007003a:	461a      	mov	r2, r3
2007003c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007003e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070042:	d0fb      	beq.n	2007003c <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070044:	4b14      	ldr	r3, [pc, #80]	; (20070098 <SystemInit+0x8c>)
20070046:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20070048:	f022 0203 	bic.w	r2, r2, #3
2007004c:	f042 0201 	orr.w	r2, r2, #1
20070050:	631a      	str	r2, [r3, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070052:	461a      	mov	r2, r3
20070054:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070056:	f013 0f08 	tst.w	r3, #8
2007005a:	d0fb      	beq.n	20070054 <SystemInit+0x48>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007005c:	4a11      	ldr	r2, [pc, #68]	; (200700a4 <SystemInit+0x98>)
2007005e:	4b0e      	ldr	r3, [pc, #56]	; (20070098 <SystemInit+0x8c>)
20070060:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070062:	461a      	mov	r2, r3
20070064:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070066:	f013 0f02 	tst.w	r3, #2
2007006a:	d0fb      	beq.n	20070064 <SystemInit+0x58>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007006c:	2211      	movs	r2, #17
2007006e:	4b0a      	ldr	r3, [pc, #40]	; (20070098 <SystemInit+0x8c>)
20070070:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070072:	461a      	mov	r2, r3
20070074:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070076:	f013 0f08 	tst.w	r3, #8
2007007a:	d0fb      	beq.n	20070074 <SystemInit+0x68>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007007c:	2212      	movs	r2, #18
2007007e:	4b06      	ldr	r3, [pc, #24]	; (20070098 <SystemInit+0x8c>)
20070080:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070082:	461a      	mov	r2, r3
20070084:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070086:	f013 0f08 	tst.w	r3, #8
2007008a:	d0fb      	beq.n	20070084 <SystemInit+0x78>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007008c:	4a06      	ldr	r2, [pc, #24]	; (200700a8 <SystemInit+0x9c>)
2007008e:	4b07      	ldr	r3, [pc, #28]	; (200700ac <SystemInit+0xa0>)
20070090:	601a      	str	r2, [r3, #0]
20070092:	4770      	bx	lr
20070094:	400e0a00 	.word	0x400e0a00
20070098:	400e0600 	.word	0x400e0600
2007009c:	00370809 	.word	0x00370809
200700a0:	01370809 	.word	0x01370809
200700a4:	200d3f01 	.word	0x200d3f01
200700a8:	0501bd00 	.word	0x0501bd00
200700ac:	200701dc 	.word	0x200701dc

200700b0 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700b0:	4b1b      	ldr	r3, [pc, #108]	; (20070120 <system_init_flash+0x70>)
200700b2:	4298      	cmp	r0, r3
200700b4:	d806      	bhi.n	200700c4 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700b6:	2300      	movs	r3, #0
200700b8:	4a1a      	ldr	r2, [pc, #104]	; (20070124 <system_init_flash+0x74>)
200700ba:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700bc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700c0:	6013      	str	r3, [r2, #0]
200700c2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700c4:	4b18      	ldr	r3, [pc, #96]	; (20070128 <system_init_flash+0x78>)
200700c6:	4298      	cmp	r0, r3
200700c8:	d807      	bhi.n	200700da <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700ca:	f44f 7380 	mov.w	r3, #256	; 0x100
200700ce:	4a15      	ldr	r2, [pc, #84]	; (20070124 <system_init_flash+0x74>)
200700d0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700d2:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700d6:	6013      	str	r3, [r2, #0]
200700d8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700da:	4b14      	ldr	r3, [pc, #80]	; (2007012c <system_init_flash+0x7c>)
200700dc:	4298      	cmp	r0, r3
200700de:	d807      	bhi.n	200700f0 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700e0:	f44f 7300 	mov.w	r3, #512	; 0x200
200700e4:	4a0f      	ldr	r2, [pc, #60]	; (20070124 <system_init_flash+0x74>)
200700e6:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700e8:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ec:	6013      	str	r3, [r2, #0]
200700ee:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700f0:	4b0f      	ldr	r3, [pc, #60]	; (20070130 <system_init_flash+0x80>)
200700f2:	4298      	cmp	r0, r3
200700f4:	d807      	bhi.n	20070106 <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700f6:	f44f 7340 	mov.w	r3, #768	; 0x300
200700fa:	4a0a      	ldr	r2, [pc, #40]	; (20070124 <system_init_flash+0x74>)
200700fc:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700fe:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070102:	6013      	str	r3, [r2, #0]
20070104:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
20070106:	4b0b      	ldr	r3, [pc, #44]	; (20070134 <system_init_flash+0x84>)
20070108:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007010a:	bf94      	ite	ls
2007010c:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070110:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070114:	4a03      	ldr	r2, [pc, #12]	; (20070124 <system_init_flash+0x74>)
20070116:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
20070118:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007011c:	6013      	str	r3, [r2, #0]
2007011e:	4770      	bx	lr
20070120:	0121eabf 	.word	0x0121eabf
20070124:	400e0a00 	.word	0x400e0a00
20070128:	02faf07f 	.word	0x02faf07f
2007012c:	03d08fff 	.word	0x03d08fff
20070130:	04c4b3ff 	.word	0x04c4b3ff
20070134:	055d4a7f 	.word	0x055d4a7f

20070138 <udi_api_cdc_data>:
20070138:	00080621 000802cd 000802e9 000802ed     !...............
20070148:	000804f9                                ....

2007014c <udi_api_cdc_comm>:
2007014c:	00080271 000802bd 000802f1 000802ed     q...............
2007015c:	00000000                                ....

20070160 <udc_config>:
20070160:	2007017c 20070174 00000000              |.. t.. ....

2007016c <udi_apis>:
2007016c:	2007014c 20070138                       L.. 8.. 

20070174 <udc_config_fs>:
20070174:	20070190 2007016c                       ... l.. 

2007017c <udc_device_desc>:
2007017c:	02000112 40000002 240403eb 00000100     .......@...$....
2007018c:	00000100                                ....

20070190 <udc_desc_fs>:
20070190:	00430209 c0000102 00040932 02020100     ..C.....2.......
200701a0:	24050001 04011000 05020224 01000624     ...$....$...$...
200701b0:	03012405 83050701 10004003 00010409     .$.......@......
200701c0:	00000a02 81050700 00004002 02020507     .........@......
200701d0:	00000040                                @...

200701d4 <udc_string_desc_languageid>:
200701d4:	04090304                                ....

200701d8 <g_interrupt_enabled>:
200701d8:	00000001                                ....

200701dc <SystemCoreClock>:
200701dc:	003d0900                                ..=.

200701e0 <impure_data>:
200701e0:	00000000 200704cc 20070534 2007059c     ....... 4.. ... 
	...
20070214:	000862e8 00000000 00000000 00000000     .b..............
	...
20070288:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20070298:	0005deec 0000000b 00000000 00000000     ................
	...

20070608 <_impure_ptr>:
20070608:	200701e0                                ... 

2007060c <lc_ctype_charset>:
2007060c:	49435341 00000049 00000000 00000000     ASCII...........
	...

2007062c <__mb_cur_max>:
2007062c:	00000001                                ....

20070630 <__malloc_av_>:
	...
20070638:	20070630 20070630 20070638 20070638     0.. 0.. 8.. 8.. 
20070648:	20070640 20070640 20070648 20070648     @.. @.. H.. H.. 
20070658:	20070650 20070650 20070658 20070658     P.. P.. X.. X.. 
20070668:	20070660 20070660 20070668 20070668     `.. `.. h.. h.. 
20070678:	20070670 20070670 20070678 20070678     p.. p.. x.. x.. 
20070688:	20070680 20070680 20070688 20070688     ... ... ... ... 
20070698:	20070690 20070690 20070698 20070698     ... ... ... ... 
200706a8:	200706a0 200706a0 200706a8 200706a8     ... ... ... ... 
200706b8:	200706b0 200706b0 200706b8 200706b8     ... ... ... ... 
200706c8:	200706c0 200706c0 200706c8 200706c8     ... ... ... ... 
200706d8:	200706d0 200706d0 200706d8 200706d8     ... ... ... ... 
200706e8:	200706e0 200706e0 200706e8 200706e8     ... ... ... ... 
200706f8:	200706f0 200706f0 200706f8 200706f8     ... ... ... ... 
20070708:	20070700 20070700 20070708 20070708     ... ... ... ... 
20070718:	20070710 20070710 20070718 20070718     ... ... ... ... 
20070728:	20070720 20070720 20070728 20070728      ..  .. (.. (.. 
20070738:	20070730 20070730 20070738 20070738     0.. 0.. 8.. 8.. 
20070748:	20070740 20070740 20070748 20070748     @.. @.. H.. H.. 
20070758:	20070750 20070750 20070758 20070758     P.. P.. X.. X.. 
20070768:	20070760 20070760 20070768 20070768     `.. `.. h.. h.. 
20070778:	20070770 20070770 20070778 20070778     p.. p.. x.. x.. 
20070788:	20070780 20070780 20070788 20070788     ... ... ... ... 
20070798:	20070790 20070790 20070798 20070798     ... ... ... ... 
200707a8:	200707a0 200707a0 200707a8 200707a8     ... ... ... ... 
200707b8:	200707b0 200707b0 200707b8 200707b8     ... ... ... ... 
200707c8:	200707c0 200707c0 200707c8 200707c8     ... ... ... ... 
200707d8:	200707d0 200707d0 200707d8 200707d8     ... ... ... ... 
200707e8:	200707e0 200707e0 200707e8 200707e8     ... ... ... ... 
200707f8:	200707f0 200707f0 200707f8 200707f8     ... ... ... ... 
20070808:	20070800 20070800 20070808 20070808     ... ... ... ... 
20070818:	20070810 20070810 20070818 20070818     ... ... ... ... 
20070828:	20070820 20070820 20070828 20070828      ..  .. (.. (.. 
20070838:	20070830 20070830 20070838 20070838     0.. 0.. 8.. 8.. 
20070848:	20070840 20070840 20070848 20070848     @.. @.. H.. H.. 
20070858:	20070850 20070850 20070858 20070858     P.. P.. X.. X.. 
20070868:	20070860 20070860 20070868 20070868     `.. `.. h.. h.. 
20070878:	20070870 20070870 20070878 20070878     p.. p.. x.. x.. 
20070888:	20070880 20070880 20070888 20070888     ... ... ... ... 
20070898:	20070890 20070890 20070898 20070898     ... ... ... ... 
200708a8:	200708a0 200708a0 200708a8 200708a8     ... ... ... ... 
200708b8:	200708b0 200708b0 200708b8 200708b8     ... ... ... ... 
200708c8:	200708c0 200708c0 200708c8 200708c8     ... ... ... ... 
200708d8:	200708d0 200708d0 200708d8 200708d8     ... ... ... ... 
200708e8:	200708e0 200708e0 200708e8 200708e8     ... ... ... ... 
200708f8:	200708f0 200708f0 200708f8 200708f8     ... ... ... ... 
20070908:	20070900 20070900 20070908 20070908     ... ... ... ... 
20070918:	20070910 20070910 20070918 20070918     ... ... ... ... 
20070928:	20070920 20070920 20070928 20070928      ..  .. (.. (.. 
20070938:	20070930 20070930 20070938 20070938     0.. 0.. 8.. 8.. 
20070948:	20070940 20070940 20070948 20070948     @.. @.. H.. H.. 
20070958:	20070950 20070950 20070958 20070958     P.. P.. X.. X.. 
20070968:	20070960 20070960 20070968 20070968     `.. `.. h.. h.. 
20070978:	20070970 20070970 20070978 20070978     p.. p.. x.. x.. 
20070988:	20070980 20070980 20070988 20070988     ... ... ... ... 
20070998:	20070990 20070990 20070998 20070998     ... ... ... ... 
200709a8:	200709a0 200709a0 200709a8 200709a8     ... ... ... ... 
200709b8:	200709b0 200709b0 200709b8 200709b8     ... ... ... ... 
200709c8:	200709c0 200709c0 200709c8 200709c8     ... ... ... ... 
200709d8:	200709d0 200709d0 200709d8 200709d8     ... ... ... ... 
200709e8:	200709e0 200709e0 200709e8 200709e8     ... ... ... ... 
200709f8:	200709f0 200709f0 200709f8 200709f8     ... ... ... ... 
20070a08:	20070a00 20070a00 20070a08 20070a08     ... ... ... ... 
20070a18:	20070a10 20070a10 20070a18 20070a18     ... ... ... ... 
20070a28:	20070a20 20070a20 20070a28 20070a28      ..  .. (.. (.. 

20070a38 <__malloc_trim_threshold>:
20070a38:	00020000                                ....

20070a3c <__malloc_sbrk_base>:
20070a3c:	ffffffff                                ....

20070a40 <__wctomb>:
20070a40:	00085acd                                .Z..
