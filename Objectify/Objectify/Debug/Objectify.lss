
Objectify.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000037e4  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000a1c  20070000  000837e4  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          00000350  20070a1c  00084200  00010a1c  2**2
                  ALLOC
  3 .stack        00002004  20070d6c  00084550  00010a1c  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  00010a1c  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  00010a45  2**0
                  CONTENTS, READONLY
  6 .debug_info   00012584  00000000  00000000  00010aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000031cf  00000000  00000000  00023024  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00006c4c  00000000  00000000  000261f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000d00  00000000  00000000  0002ce3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000c80  00000000  00000000  0002db3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001b1ff  00000000  00000000  0002e7bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00013e72  00000000  00000000  000499be  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0006feef  00000000  00000000  0005d830  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000224c  00000000  00000000  000cd720  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20072d70 	.word	0x20072d70
   80004:	000823a5 	.word	0x000823a5
   80008:	000823a1 	.word	0x000823a1
   8000c:	000823a1 	.word	0x000823a1
   80010:	000823a1 	.word	0x000823a1
   80014:	000823a1 	.word	0x000823a1
   80018:	000823a1 	.word	0x000823a1
	...
   8002c:	000823a1 	.word	0x000823a1
   80030:	000823a1 	.word	0x000823a1
   80034:	00000000 	.word	0x00000000
   80038:	000823a1 	.word	0x000823a1
   8003c:	000823a1 	.word	0x000823a1
   80040:	000823a1 	.word	0x000823a1
   80044:	000823a1 	.word	0x000823a1
   80048:	000823a1 	.word	0x000823a1
   8004c:	000823a1 	.word	0x000823a1
   80050:	000823a1 	.word	0x000823a1
   80054:	000823a1 	.word	0x000823a1
   80058:	000823a1 	.word	0x000823a1
   8005c:	000823a1 	.word	0x000823a1
   80060:	000823a1 	.word	0x000823a1
   80064:	000823a1 	.word	0x000823a1
   80068:	00000000 	.word	0x00000000
   8006c:	000810cd 	.word	0x000810cd
   80070:	000810e1 	.word	0x000810e1
   80074:	000810f5 	.word	0x000810f5
   80078:	00081109 	.word	0x00081109
	...
   80084:	000825b1 	.word	0x000825b1
   80088:	000823a1 	.word	0x000823a1
   8008c:	000823a1 	.word	0x000823a1
   80090:	000823a1 	.word	0x000823a1
   80094:	000823a1 	.word	0x000823a1
   80098:	000823a1 	.word	0x000823a1
   8009c:	000823a1 	.word	0x000823a1
   800a0:	000823a1 	.word	0x000823a1
   800a4:	00000000 	.word	0x00000000
   800a8:	000823a1 	.word	0x000823a1
   800ac:	000823a1 	.word	0x000823a1
   800b0:	000823a1 	.word	0x000823a1
   800b4:	000823a1 	.word	0x000823a1
   800b8:	000823a1 	.word	0x000823a1
   800bc:	000823a1 	.word	0x000823a1
   800c0:	000823a1 	.word	0x000823a1
   800c4:	000823a1 	.word	0x000823a1
   800c8:	000823a1 	.word	0x000823a1
   800cc:	000823a1 	.word	0x000823a1
   800d0:	000823a1 	.word	0x000823a1
   800d4:	000823a1 	.word	0x000823a1
   800d8:	000823a1 	.word	0x000823a1
   800dc:	000823a1 	.word	0x000823a1
   800e0:	000817b9 	.word	0x000817b9
   800e4:	000823a1 	.word	0x000823a1
   800e8:	000823a1 	.word	0x000823a1
   800ec:	000823a1 	.word	0x000823a1
   800f0:	000823a1 	.word	0x000823a1

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070a1c 	.word	0x20070a1c
   80110:	00000000 	.word	0x00000000
   80114:	000837e4 	.word	0x000837e4

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b06      	ldr	r3, [pc, #24]	; (80134 <frame_dummy+0x1c>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4806      	ldr	r0, [pc, #24]	; (80138 <frame_dummy+0x20>)
   80120:	4906      	ldr	r1, [pc, #24]	; (8013c <frame_dummy+0x24>)
   80122:	f3af 8000 	nop.w
   80126:	4806      	ldr	r0, [pc, #24]	; (80140 <frame_dummy+0x28>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b113      	cbz	r3, 80132 <frame_dummy+0x1a>
   8012c:	4b05      	ldr	r3, [pc, #20]	; (80144 <frame_dummy+0x2c>)
   8012e:	b103      	cbz	r3, 80132 <frame_dummy+0x1a>
   80130:	4798      	blx	r3
   80132:	bd08      	pop	{r3, pc}
   80134:	00000000 	.word	0x00000000
   80138:	000837e4 	.word	0x000837e4
   8013c:	20070a20 	.word	0x20070a20
   80140:	000837e4 	.word	0x000837e4
   80144:	00000000 	.word	0x00000000

00080148 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   80148:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   8014a:	480e      	ldr	r0, [pc, #56]	; (80184 <sysclk_init+0x3c>)
   8014c:	4b0e      	ldr	r3, [pc, #56]	; (80188 <sysclk_init+0x40>)
   8014e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   80150:	2000      	movs	r0, #0
   80152:	213e      	movs	r1, #62	; 0x3e
   80154:	4b0d      	ldr	r3, [pc, #52]	; (8018c <sysclk_init+0x44>)
   80156:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   80158:	4c0d      	ldr	r4, [pc, #52]	; (80190 <sysclk_init+0x48>)
   8015a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   8015c:	2800      	cmp	r0, #0
   8015e:	d0fc      	beq.n	8015a <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   80160:	4b0c      	ldr	r3, [pc, #48]	; (80194 <sysclk_init+0x4c>)
   80162:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   80164:	4a0c      	ldr	r2, [pc, #48]	; (80198 <sysclk_init+0x50>)
   80166:	4b0d      	ldr	r3, [pc, #52]	; (8019c <sysclk_init+0x54>)
   80168:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   8016a:	4c0d      	ldr	r4, [pc, #52]	; (801a0 <sysclk_init+0x58>)
   8016c:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   8016e:	2800      	cmp	r0, #0
   80170:	d0fc      	beq.n	8016c <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   80172:	2010      	movs	r0, #16
   80174:	4b0b      	ldr	r3, [pc, #44]	; (801a4 <sysclk_init+0x5c>)
   80176:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   80178:	4b0b      	ldr	r3, [pc, #44]	; (801a8 <sysclk_init+0x60>)
   8017a:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   8017c:	4801      	ldr	r0, [pc, #4]	; (80184 <sysclk_init+0x3c>)
   8017e:	4b02      	ldr	r3, [pc, #8]	; (80188 <sysclk_init+0x40>)
   80180:	4798      	blx	r3
   80182:	bd10      	pop	{r4, pc}
   80184:	0501bd00 	.word	0x0501bd00
   80188:	200700b1 	.word	0x200700b1
   8018c:	00081181 	.word	0x00081181
   80190:	000811d5 	.word	0x000811d5
   80194:	000811e5 	.word	0x000811e5
   80198:	200d3f01 	.word	0x200d3f01
   8019c:	400e0600 	.word	0x400e0600
   801a0:	000811f5 	.word	0x000811f5
   801a4:	0008111d 	.word	0x0008111d
   801a8:	00082455 	.word	0x00082455

000801ac <usart_serial_read_packet>:
 * \param len    Length of data
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
   801ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   801b0:	b083      	sub	sp, #12
   801b2:	4605      	mov	r5, r0
	while (len) {
   801b4:	4690      	mov	r8, r2
   801b6:	2a00      	cmp	r2, #0
   801b8:	d047      	beq.n	8024a <usart_serial_read_packet+0x9e>
   801ba:	1c4e      	adds	r6, r1, #1
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   801bc:	4f25      	ldr	r7, [pc, #148]	; (80254 <usart_serial_read_packet+0xa8>)
		while (usart_read(p_usart, &val));
   801be:	4c26      	ldr	r4, [pc, #152]	; (80258 <usart_serial_read_packet+0xac>)
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   801c0:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 8026c <usart_serial_read_packet+0xc0>
	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
   801c4:	f8df b094 	ldr.w	fp, [pc, #148]	; 8025c <usart_serial_read_packet+0xb0>
   801c8:	f106 39ff 	add.w	r9, r6, #4294967295
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
	uint32_t val = 0;
   801cc:	2300      	movs	r3, #0
   801ce:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   801d0:	4b22      	ldr	r3, [pc, #136]	; (8025c <usart_serial_read_packet+0xb0>)
   801d2:	429d      	cmp	r5, r3
   801d4:	d106      	bne.n	801e4 <usart_serial_read_packet+0x38>
		while (uart_read((Uart*)p_usart, data));
   801d6:	4658      	mov	r0, fp
   801d8:	4649      	mov	r1, r9
   801da:	4b21      	ldr	r3, [pc, #132]	; (80260 <usart_serial_read_packet+0xb4>)
   801dc:	4798      	blx	r3
   801de:	2800      	cmp	r0, #0
   801e0:	d1f9      	bne.n	801d6 <usart_serial_read_packet+0x2a>
   801e2:	e019      	b.n	80218 <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   801e4:	4b1f      	ldr	r3, [pc, #124]	; (80264 <usart_serial_read_packet+0xb8>)
   801e6:	429d      	cmp	r5, r3
   801e8:	d109      	bne.n	801fe <usart_serial_read_packet+0x52>
		while (usart_read(p_usart, &val));
   801ea:	4699      	mov	r9, r3
   801ec:	4648      	mov	r0, r9
   801ee:	a901      	add	r1, sp, #4
   801f0:	47a0      	blx	r4
   801f2:	2800      	cmp	r0, #0
   801f4:	d1fa      	bne.n	801ec <usart_serial_read_packet+0x40>
		*data = (uint8_t)(val & 0xFF);
   801f6:	9b01      	ldr	r3, [sp, #4]
   801f8:	f806 3c01 	strb.w	r3, [r6, #-1]
   801fc:	e017      	b.n	8022e <usart_serial_read_packet+0x82>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   801fe:	4b1a      	ldr	r3, [pc, #104]	; (80268 <usart_serial_read_packet+0xbc>)
   80200:	429d      	cmp	r5, r3
   80202:	d109      	bne.n	80218 <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
   80204:	4699      	mov	r9, r3
   80206:	4648      	mov	r0, r9
   80208:	a901      	add	r1, sp, #4
   8020a:	47a0      	blx	r4
   8020c:	2800      	cmp	r0, #0
   8020e:	d1fa      	bne.n	80206 <usart_serial_read_packet+0x5a>
		*data = (uint8_t)(val & 0xFF);
   80210:	9b01      	ldr	r3, [sp, #4]
   80212:	f806 3c01 	strb.w	r3, [r6, #-1]
   80216:	e014      	b.n	80242 <usart_serial_read_packet+0x96>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80218:	4555      	cmp	r5, sl
   8021a:	d108      	bne.n	8022e <usart_serial_read_packet+0x82>
		while (usart_read(p_usart, &val));
   8021c:	4650      	mov	r0, sl
   8021e:	a901      	add	r1, sp, #4
   80220:	47a0      	blx	r4
   80222:	2800      	cmp	r0, #0
   80224:	d1fa      	bne.n	8021c <usart_serial_read_packet+0x70>
		*data = (uint8_t)(val & 0xFF);
   80226:	9b01      	ldr	r3, [sp, #4]
   80228:	f806 3c01 	strb.w	r3, [r6, #-1]
   8022c:	e009      	b.n	80242 <usart_serial_read_packet+0x96>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   8022e:	42bd      	cmp	r5, r7
   80230:	d107      	bne.n	80242 <usart_serial_read_packet+0x96>
		while (usart_read(p_usart, &val));
   80232:	4638      	mov	r0, r7
   80234:	a901      	add	r1, sp, #4
   80236:	47a0      	blx	r4
   80238:	2800      	cmp	r0, #0
   8023a:	d1fa      	bne.n	80232 <usart_serial_read_packet+0x86>
		*data = (uint8_t)(val & 0xFF);
   8023c:	9b01      	ldr	r3, [sp, #4]
   8023e:	f806 3c01 	strb.w	r3, [r6, #-1]
   80242:	3601      	adds	r6, #1
   80244:	f1b8 0801 	subs.w	r8, r8, #1
   80248:	d1be      	bne.n	801c8 <usart_serial_read_packet+0x1c>
		usart_serial_getchar(usart, data);
		len--;
		data++;
	}
	return STATUS_OK;
}
   8024a:	2000      	movs	r0, #0
   8024c:	b003      	add	sp, #12
   8024e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80252:	bf00      	nop
   80254:	400a4000 	.word	0x400a4000
   80258:	00082389 	.word	0x00082389
   8025c:	400e0800 	.word	0x400e0800
   80260:	000812b5 	.word	0x000812b5
   80264:	40098000 	.word	0x40098000
   80268:	4009c000 	.word	0x4009c000
   8026c:	400a0000 	.word	0x400a0000

00080270 <udi_cdc_comm_enable>:
	uint8_t port;
	uint8_t iface_comm_num;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
	udi_cdc_nb_comm_enabled = 0;
   80270:	490e      	ldr	r1, [pc, #56]	; (802ac <udi_cdc_comm_enable+0x3c>)
   80272:	2300      	movs	r3, #0
   80274:	700b      	strb	r3, [r1, #0]
	}
	port = udi_cdc_nb_comm_enabled;
#endif

	// Initialize control signal management
	udi_cdc_state[port] = CPU_TO_LE16(0);
   80276:	4a0e      	ldr	r2, [pc, #56]	; (802b0 <udi_cdc_comm_enable+0x40>)
   80278:	8013      	strh	r3, [r2, #0]

	uid_cdc_state_msg[port].header.bmRequestType =
   8027a:	4a0e      	ldr	r2, [pc, #56]	; (802b4 <udi_cdc_comm_enable+0x44>)
   8027c:	20a1      	movs	r0, #161	; 0xa1
   8027e:	7010      	strb	r0, [r2, #0]
			USB_REQ_DIR_IN | USB_REQ_TYPE_CLASS |
			USB_REQ_RECIP_INTERFACE;
	uid_cdc_state_msg[port].header.bNotification = USB_REQ_CDC_NOTIFY_SERIAL_STATE;
   80280:	2020      	movs	r0, #32
   80282:	7050      	strb	r0, [r2, #1]
	uid_cdc_state_msg[port].header.wValue = LE16(0);
   80284:	8053      	strh	r3, [r2, #2]
	default:
		iface_comm_num = UDI_CDC_COMM_IFACE_NUMBER_0;
		break;
	}

	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
   80286:	8093      	strh	r3, [r2, #4]
	uid_cdc_state_msg[port].header.wLength = LE16(2);
   80288:	2002      	movs	r0, #2
   8028a:	80d0      	strh	r0, [r2, #6]
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
   8028c:	8113      	strh	r3, [r2, #8]

	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
   8028e:	4a0a      	ldr	r2, [pc, #40]	; (802b8 <udi_cdc_comm_enable+0x48>)
   80290:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
   80294:	6010      	str	r0, [r2, #0]
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
   80296:	7113      	strb	r3, [r2, #4]
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
   80298:	7153      	strb	r3, [r2, #5]
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
   8029a:	2308      	movs	r3, #8
   8029c:	7193      	strb	r3, [r2, #6]
	// to initialize memories or indicate that interface is enabled
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
	if (!UDI_CDC_ENABLE_EXT(port)) {
		return false;
	}
	udi_cdc_nb_comm_enabled++;
   8029e:	780b      	ldrb	r3, [r1, #0]
   802a0:	3301      	adds	r3, #1
   802a2:	b2db      	uxtb	r3, r3
   802a4:	700b      	strb	r3, [r1, #0]
	return true;
}
   802a6:	2001      	movs	r0, #1
   802a8:	4770      	bx	lr
   802aa:	bf00      	nop
   802ac:	20070ad4 	.word	0x20070ad4
   802b0:	20070b80 	.word	0x20070b80
   802b4:	20070aec 	.word	0x20070aec
   802b8:	20070a38 	.word	0x20070a38

000802bc <udi_cdc_comm_disable>:
}

void udi_cdc_comm_disable(void)
{
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
   802bc:	4b02      	ldr	r3, [pc, #8]	; (802c8 <udi_cdc_comm_disable+0xc>)
   802be:	781a      	ldrb	r2, [r3, #0]
   802c0:	3a01      	subs	r2, #1
   802c2:	b2d2      	uxtb	r2, r2
   802c4:	701a      	strb	r2, [r3, #0]
   802c6:	4770      	bx	lr
   802c8:	20070ad4 	.word	0x20070ad4

000802cc <udi_cdc_data_disable>:
void udi_cdc_data_disable(void)
{
	uint8_t port;

	Assert(udi_cdc_nb_data_enabled != 0);
	udi_cdc_nb_data_enabled--;
   802cc:	4b04      	ldr	r3, [pc, #16]	; (802e0 <udi_cdc_data_disable+0x14>)
   802ce:	781a      	ldrb	r2, [r3, #0]
   802d0:	3a01      	subs	r2, #1
   802d2:	b2d2      	uxtb	r2, r2
   802d4:	701a      	strb	r2, [r3, #0]
	port = udi_cdc_nb_data_enabled;
   802d6:	781b      	ldrb	r3, [r3, #0]
	UDI_CDC_DISABLE_EXT(port);
	udi_cdc_data_running = false;
   802d8:	2200      	movs	r2, #0
   802da:	4b02      	ldr	r3, [pc, #8]	; (802e4 <udi_cdc_data_disable+0x18>)
   802dc:	701a      	strb	r2, [r3, #0]
   802de:	4770      	bx	lr
   802e0:	20070a40 	.word	0x20070a40
   802e4:	20070ae0 	.word	0x20070ae0

000802e8 <udi_cdc_data_setup>:
}

bool udi_cdc_data_setup(void)
{
	return false;  // request Not supported
}
   802e8:	2000      	movs	r0, #0
   802ea:	4770      	bx	lr

000802ec <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
	return 0;      // CDC don't have multiple alternate setting
}
   802ec:	2000      	movs	r0, #0
   802ee:	4770      	bx	lr

000802f0 <udi_cdc_comm_setup>:

bool udi_cdc_comm_setup(void)
{
	uint8_t port = udi_cdc_setup_to_port();

	if (Udd_setup_is_in()) {
   802f0:	4b1d      	ldr	r3, [pc, #116]	; (80368 <udi_cdc_comm_setup+0x78>)
   802f2:	781b      	ldrb	r3, [r3, #0]
   802f4:	f013 0f80 	tst.w	r3, #128	; 0x80
   802f8:	d012      	beq.n	80320 <udi_cdc_comm_setup+0x30>
		// GET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
   802fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
   802fe:	2b20      	cmp	r3, #32
   80300:	d128      	bne.n	80354 <udi_cdc_comm_setup+0x64>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
   80302:	4b19      	ldr	r3, [pc, #100]	; (80368 <udi_cdc_comm_setup+0x78>)
   80304:	785b      	ldrb	r3, [r3, #1]
   80306:	2b21      	cmp	r3, #33	; 0x21
   80308:	d126      	bne.n	80358 <udi_cdc_comm_setup+0x68>
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
   8030a:	4b17      	ldr	r3, [pc, #92]	; (80368 <udi_cdc_comm_setup+0x78>)
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
   8030c:	88db      	ldrh	r3, [r3, #6]
   8030e:	2b07      	cmp	r3, #7
   80310:	d124      	bne.n	8035c <udi_cdc_comm_setup+0x6c>
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.payload =
   80312:	4b15      	ldr	r3, [pc, #84]	; (80368 <udi_cdc_comm_setup+0x78>)
   80314:	4a15      	ldr	r2, [pc, #84]	; (8036c <udi_cdc_comm_setup+0x7c>)
   80316:	609a      	str	r2, [r3, #8]
						(uint8_t *) &
						udi_cdc_line_coding[port];
				udd_g_ctrlreq.payload_size =
   80318:	2207      	movs	r2, #7
   8031a:	819a      	strh	r2, [r3, #12]
						sizeof(usb_cdc_line_coding_t);
				return true;
   8031c:	2001      	movs	r0, #1
   8031e:	4770      	bx	lr
			}
		}
	}
	if (Udd_setup_is_out()) {
		// SET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
   80320:	f003 0360 	and.w	r3, r3, #96	; 0x60
   80324:	2b20      	cmp	r3, #32
   80326:	d11b      	bne.n	80360 <udi_cdc_comm_setup+0x70>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
   80328:	4b0f      	ldr	r3, [pc, #60]	; (80368 <udi_cdc_comm_setup+0x78>)
   8032a:	7858      	ldrb	r0, [r3, #1]
   8032c:	2820      	cmp	r0, #32
   8032e:	d004      	beq.n	8033a <udi_cdc_comm_setup+0x4a>
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
			}
		}
	}
	return false;  // request Not supported
   80330:	2822      	cmp	r0, #34	; 0x22
   80332:	bf14      	ite	ne
   80334:	2000      	movne	r0, #0
   80336:	2001      	moveq	r0, #1
   80338:	4770      	bx	lr
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
   8033a:	4b0b      	ldr	r3, [pc, #44]	; (80368 <udi_cdc_comm_setup+0x78>)
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
   8033c:	88db      	ldrh	r3, [r3, #6]
   8033e:	2b07      	cmp	r3, #7
   80340:	d110      	bne.n	80364 <udi_cdc_comm_setup+0x74>
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.callback =
   80342:	4b09      	ldr	r3, [pc, #36]	; (80368 <udi_cdc_comm_setup+0x78>)
   80344:	4a0a      	ldr	r2, [pc, #40]	; (80370 <udi_cdc_comm_setup+0x80>)
   80346:	611a      	str	r2, [r3, #16]
						udi_cdc_line_coding_received;
				udd_g_ctrlreq.payload =
   80348:	4a08      	ldr	r2, [pc, #32]	; (8036c <udi_cdc_comm_setup+0x7c>)
   8034a:	609a      	str	r2, [r3, #8]
						(uint8_t *) &
						udi_cdc_line_coding[port];
				udd_g_ctrlreq.payload_size =
   8034c:	2207      	movs	r2, #7
   8034e:	819a      	strh	r2, [r3, #12]
						sizeof(usb_cdc_line_coding_t);
				return true;
   80350:	2001      	movs	r0, #1
   80352:	4770      	bx	lr
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
			}
		}
	}
	return false;  // request Not supported
   80354:	2000      	movs	r0, #0
   80356:	4770      	bx	lr
   80358:	2000      	movs	r0, #0
   8035a:	4770      	bx	lr
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
   8035c:	2000      	movs	r0, #0
   8035e:	4770      	bx	lr
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
			}
		}
	}
	return false;  // request Not supported
   80360:	2000      	movs	r0, #0
   80362:	4770      	bx	lr
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
   80364:	2000      	movs	r0, #0
				return true;
			}
		}
	}
	return false;  // request Not supported
}
   80366:	4770      	bx	lr
   80368:	20070d50 	.word	0x20070d50
   8036c:	20070a38 	.word	0x20070a38
   80370:	00080375 	.word	0x00080375

00080374 <udi_cdc_line_coding_received>:
	}
	return port;
}

static void udi_cdc_line_coding_received(void)
{
   80374:	4770      	bx	lr
   80376:	bf00      	nop

00080378 <udi_cdc_tx_send>:
	udi_cdc_tx_send(port);
}


static void udi_cdc_tx_send(uint8_t port)
{
   80378:	b530      	push	{r4, r5, lr}
   8037a:	b083      	sub	sp, #12

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
   8037c:	4b42      	ldr	r3, [pc, #264]	; (80488 <udi_cdc_tx_send+0x110>)
   8037e:	781b      	ldrb	r3, [r3, #0]
   80380:	f013 0fff 	tst.w	r3, #255	; 0xff
   80384:	d17e      	bne.n	80484 <udi_cdc_tx_send+0x10c>
		return; // Already on going or wait next SOF to send next data
	}
	if (udd_is_high_speed()) {
   80386:	4b41      	ldr	r3, [pc, #260]	; (8048c <udi_cdc_tx_send+0x114>)
   80388:	4798      	blx	r3
   8038a:	b130      	cbz	r0, 8039a <udi_cdc_tx_send+0x22>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
   8038c:	4b40      	ldr	r3, [pc, #256]	; (80490 <udi_cdc_tx_send+0x118>)
   8038e:	881c      	ldrh	r4, [r3, #0]
   80390:	4b40      	ldr	r3, [pc, #256]	; (80494 <udi_cdc_tx_send+0x11c>)
   80392:	4798      	blx	r3
   80394:	4284      	cmp	r4, r0
   80396:	d106      	bne.n	803a6 <udi_cdc_tx_send+0x2e>
   80398:	e074      	b.n	80484 <udi_cdc_tx_send+0x10c>
			return; // Wait next SOF to send next data
		}
	}else{
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
   8039a:	4b3d      	ldr	r3, [pc, #244]	; (80490 <udi_cdc_tx_send+0x118>)
   8039c:	881c      	ldrh	r4, [r3, #0]
   8039e:	4b3e      	ldr	r3, [pc, #248]	; (80498 <udi_cdc_tx_send+0x120>)
   803a0:	4798      	blx	r3
   803a2:	4284      	cmp	r4, r0
   803a4:	d06e      	beq.n	80484 <udi_cdc_tx_send+0x10c>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   803a6:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
   803aa:	f1d3 0501 	rsbs	r5, r3, #1
   803ae:	bf38      	it	cc
   803b0:	2500      	movcc	r5, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   803b2:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   803b4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   803b8:	2200      	movs	r2, #0
   803ba:	4b38      	ldr	r3, [pc, #224]	; (8049c <udi_cdc_tx_send+0x124>)
   803bc:	701a      	strb	r2, [r3, #0]
			return; // Wait next SOF to send next data
		}
	}

	flags = cpu_irq_save(); // to protect udi_cdc_tx_buf_sel
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
   803be:	4b38      	ldr	r3, [pc, #224]	; (804a0 <udi_cdc_tx_send+0x128>)
   803c0:	781c      	ldrb	r4, [r3, #0]
   803c2:	b2e4      	uxtb	r4, r4
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
   803c4:	4b37      	ldr	r3, [pc, #220]	; (804a4 <udi_cdc_tx_send+0x12c>)
   803c6:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
   803ca:	b9db      	cbnz	r3, 80404 <udi_cdc_tx_send+0x8c>
		sof_zlp_counter++;
   803cc:	4b36      	ldr	r3, [pc, #216]	; (804a8 <udi_cdc_tx_send+0x130>)
   803ce:	881a      	ldrh	r2, [r3, #0]
   803d0:	3201      	adds	r2, #1
   803d2:	801a      	strh	r2, [r3, #0]
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
   803d4:	4b2d      	ldr	r3, [pc, #180]	; (8048c <udi_cdc_tx_send+0x114>)
   803d6:	4798      	blx	r3
   803d8:	b918      	cbnz	r0, 803e2 <udi_cdc_tx_send+0x6a>
   803da:	4b33      	ldr	r3, [pc, #204]	; (804a8 <udi_cdc_tx_send+0x130>)
   803dc:	881b      	ldrh	r3, [r3, #0]
   803de:	2b63      	cmp	r3, #99	; 0x63
   803e0:	d907      	bls.n	803f2 <udi_cdc_tx_send+0x7a>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
   803e2:	4b2a      	ldr	r3, [pc, #168]	; (8048c <udi_cdc_tx_send+0x114>)
   803e4:	4798      	blx	r3
   803e6:	b168      	cbz	r0, 80404 <udi_cdc_tx_send+0x8c>
   803e8:	4b2f      	ldr	r3, [pc, #188]	; (804a8 <udi_cdc_tx_send+0x130>)
   803ea:	881b      	ldrh	r3, [r3, #0]
   803ec:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
   803f0:	d208      	bcs.n	80404 <udi_cdc_tx_send+0x8c>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   803f2:	2d00      	cmp	r5, #0
   803f4:	d046      	beq.n	80484 <udi_cdc_tx_send+0x10c>
		cpu_irq_enable();
   803f6:	2201      	movs	r2, #1
   803f8:	4b28      	ldr	r3, [pc, #160]	; (8049c <udi_cdc_tx_send+0x124>)
   803fa:	701a      	strb	r2, [r3, #0]
   803fc:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   80400:	b662      	cpsie	i
   80402:	e03f      	b.n	80484 <udi_cdc_tx_send+0x10c>
			cpu_irq_restore(flags);
			return;
		}
	}
	sof_zlp_counter = 0;
   80404:	2200      	movs	r2, #0
   80406:	4b28      	ldr	r3, [pc, #160]	; (804a8 <udi_cdc_tx_send+0x130>)
   80408:	801a      	strh	r2, [r3, #0]

	if (!udi_cdc_tx_both_buf_to_send[port]) {
   8040a:	4b28      	ldr	r3, [pc, #160]	; (804ac <udi_cdc_tx_send+0x134>)
   8040c:	781b      	ldrb	r3, [r3, #0]
   8040e:	f013 0fff 	tst.w	r3, #255	; 0xff
   80412:	d106      	bne.n	80422 <udi_cdc_tx_send+0xaa>
		// Send current Buffer
		// and switch the current buffer
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
   80414:	4294      	cmp	r4, r2
   80416:	bf14      	ite	ne
   80418:	2200      	movne	r2, #0
   8041a:	2201      	moveq	r2, #1
   8041c:	4b20      	ldr	r3, [pc, #128]	; (804a0 <udi_cdc_tx_send+0x128>)
   8041e:	701a      	strb	r2, [r3, #0]
   80420:	e003      	b.n	8042a <udi_cdc_tx_send+0xb2>
	}else{
		// Send the other Buffer
		// and no switch the current buffer
		buf_sel_trans = (buf_sel_trans==0)?1:0;
   80422:	f1d4 0401 	rsbs	r4, r4, #1
   80426:	bf38      	it	cc
   80428:	2400      	movcc	r4, #0
	}
	udi_cdc_tx_trans_ongoing[port] = true;
   8042a:	2201      	movs	r2, #1
   8042c:	4b16      	ldr	r3, [pc, #88]	; (80488 <udi_cdc_tx_send+0x110>)
   8042e:	701a      	strb	r2, [r3, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   80430:	b125      	cbz	r5, 8043c <udi_cdc_tx_send+0xc4>
		cpu_irq_enable();
   80432:	4b1a      	ldr	r3, [pc, #104]	; (8049c <udi_cdc_tx_send+0x124>)
   80434:	701a      	strb	r2, [r3, #0]
   80436:	f3bf 8f5f 	dmb	sy
   8043a:	b662      	cpsie	i
	cpu_irq_restore(flags);

	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
   8043c:	4625      	mov	r5, r4
   8043e:	4b19      	ldr	r3, [pc, #100]	; (804a4 <udi_cdc_tx_send+0x12c>)
   80440:	f833 4014 	ldrh.w	r4, [r3, r4, lsl #1]
   80444:	3c40      	subs	r4, #64	; 0x40
   80446:	bf18      	it	ne
   80448:	2401      	movne	r4, #1
	if (b_short_packet) {
   8044a:	b164      	cbz	r4, 80466 <udi_cdc_tx_send+0xee>
		if (udd_is_high_speed()) {
   8044c:	4b0f      	ldr	r3, [pc, #60]	; (8048c <udi_cdc_tx_send+0x114>)
   8044e:	4798      	blx	r3
   80450:	b120      	cbz	r0, 8045c <udi_cdc_tx_send+0xe4>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
   80452:	4b10      	ldr	r3, [pc, #64]	; (80494 <udi_cdc_tx_send+0x11c>)
   80454:	4798      	blx	r3
   80456:	4b0e      	ldr	r3, [pc, #56]	; (80490 <udi_cdc_tx_send+0x118>)
   80458:	8018      	strh	r0, [r3, #0]
   8045a:	e007      	b.n	8046c <udi_cdc_tx_send+0xf4>
		}else{
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
   8045c:	4b0e      	ldr	r3, [pc, #56]	; (80498 <udi_cdc_tx_send+0x120>)
   8045e:	4798      	blx	r3
   80460:	4b0b      	ldr	r3, [pc, #44]	; (80490 <udi_cdc_tx_send+0x118>)
   80462:	8018      	strh	r0, [r3, #0]
   80464:	e002      	b.n	8046c <udi_cdc_tx_send+0xf4>
		}
	}else{
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
   80466:	2200      	movs	r2, #0
   80468:	4b09      	ldr	r3, [pc, #36]	; (80490 <udi_cdc_tx_send+0x118>)
   8046a:	801a      	strh	r2, [r3, #0]
		break;
	}
	udd_ep_run( ep,
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
   8046c:	4b0d      	ldr	r3, [pc, #52]	; (804a4 <udi_cdc_tx_send+0x12c>)
#undef UDI_CDC_PORT_TO_DATA_EP_IN
	default:
		ep = UDI_CDC_DATA_EP_IN_0;
		break;
	}
	udd_ep_run( ep,
   8046e:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
   80472:	4a0f      	ldr	r2, [pc, #60]	; (804b0 <udi_cdc_tx_send+0x138>)
   80474:	9200      	str	r2, [sp, #0]
   80476:	2081      	movs	r0, #129	; 0x81
   80478:	4621      	mov	r1, r4
   8047a:	4a0e      	ldr	r2, [pc, #56]	; (804b4 <udi_cdc_tx_send+0x13c>)
   8047c:	eb02 1285 	add.w	r2, r2, r5, lsl #6
   80480:	4c0d      	ldr	r4, [pc, #52]	; (804b8 <udi_cdc_tx_send+0x140>)
   80482:	47a0      	blx	r4
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
			udi_cdc_data_sent);
}
   80484:	b003      	add	sp, #12
   80486:	bd30      	pop	{r4, r5, pc}
   80488:	20070ae8 	.word	0x20070ae8
   8048c:	00081dad 	.word	0x00081dad
   80490:	20070adc 	.word	0x20070adc
   80494:	00081df9 	.word	0x00081df9
   80498:	00081de9 	.word	0x00081de9
   8049c:	200701d8 	.word	0x200701d8
   804a0:	20070a44 	.word	0x20070a44
   804a4:	20070ac8 	.word	0x20070ac8
   804a8:	20070acc 	.word	0x20070acc
   804ac:	20070b7c 	.word	0x20070b7c
   804b0:	000804bd 	.word	0x000804bd
   804b4:	20070a48 	.word	0x20070a48
   804b8:	00082025 	.word	0x00082025

000804bc <udi_cdc_data_sent>:
	udi_cdc_rx_start(port);
}


static void udi_cdc_data_sent(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
   804bc:	b508      	push	{r3, lr}
	default:
		port = 0;
		break;
	}

	if (UDD_EP_TRANSFER_OK != status) {
   804be:	b978      	cbnz	r0, 804e0 <udi_cdc_data_sent+0x24>
		// Abort transfer
		return;
	}
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
   804c0:	4b08      	ldr	r3, [pc, #32]	; (804e4 <udi_cdc_data_sent+0x28>)
   804c2:	781b      	ldrb	r3, [r3, #0]
   804c4:	f013 0fff 	tst.w	r3, #255	; 0xff
   804c8:	bf14      	ite	ne
   804ca:	2200      	movne	r2, #0
   804cc:	2201      	moveq	r2, #1
   804ce:	4b06      	ldr	r3, [pc, #24]	; (804e8 <udi_cdc_data_sent+0x2c>)
   804d0:	f823 0012 	strh.w	r0, [r3, r2, lsl #1]
	udi_cdc_tx_both_buf_to_send[port] = false;
   804d4:	4b05      	ldr	r3, [pc, #20]	; (804ec <udi_cdc_data_sent+0x30>)
   804d6:	7018      	strb	r0, [r3, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
   804d8:	4b05      	ldr	r3, [pc, #20]	; (804f0 <udi_cdc_data_sent+0x34>)
   804da:	7018      	strb	r0, [r3, #0]

	if (n != 0) {
		UDI_CDC_TX_EMPTY_NOTIFY(port);
	}
	udi_cdc_tx_send(port);
   804dc:	4b05      	ldr	r3, [pc, #20]	; (804f4 <udi_cdc_data_sent+0x38>)
   804de:	4798      	blx	r3
   804e0:	bd08      	pop	{r3, pc}
   804e2:	bf00      	nop
   804e4:	20070a44 	.word	0x20070a44
   804e8:	20070ac8 	.word	0x20070ac8
   804ec:	20070b7c 	.word	0x20070b7c
   804f0:	20070ae8 	.word	0x20070ae8
   804f4:	00080379 	.word	0x00080379

000804f8 <udi_cdc_data_sof_notify>:
{
	return 0;      // CDC don't have multiple alternate setting
}

void udi_cdc_data_sof_notify(void)
{
   804f8:	b508      	push	{r3, lr}
	static uint8_t port_notify = 0;

	// A call of udi_cdc_data_sof_notify() is done for each port
	udi_cdc_tx_send(port_notify);
   804fa:	2000      	movs	r0, #0
   804fc:	4b01      	ldr	r3, [pc, #4]	; (80504 <udi_cdc_data_sof_notify+0xc>)
   804fe:	4798      	blx	r3
   80500:	bd08      	pop	{r3, pc}
   80502:	bf00      	nop
   80504:	00080379 	.word	0x00080379

00080508 <udi_cdc_multi_get_nb_received_data>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   80508:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   8050c:	b672      	cpsid	i
   8050e:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   80512:	2100      	movs	r1, #0
   80514:	4a0a      	ldr	r2, [pc, #40]	; (80540 <udi_cdc_multi_get_nb_received_data+0x38>)
   80516:	7011      	strb	r1, [r2, #0]

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
   80518:	4a0a      	ldr	r2, [pc, #40]	; (80544 <udi_cdc_multi_get_nb_received_data+0x3c>)
   8051a:	8812      	ldrh	r2, [r2, #0]
   8051c:	b292      	uxth	r2, r2
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
   8051e:	490a      	ldr	r1, [pc, #40]	; (80548 <udi_cdc_multi_get_nb_received_data+0x40>)
   80520:	7808      	ldrb	r0, [r1, #0]
   80522:	b2c0      	uxtb	r0, r0
   80524:	4909      	ldr	r1, [pc, #36]	; (8054c <udi_cdc_multi_get_nb_received_data+0x44>)
   80526:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
   8052a:	b280      	uxth	r0, r0
   8052c:	1a80      	subs	r0, r0, r2
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   8052e:	b92b      	cbnz	r3, 8053c <udi_cdc_multi_get_nb_received_data+0x34>
		cpu_irq_enable();
   80530:	2201      	movs	r2, #1
   80532:	4b03      	ldr	r3, [pc, #12]	; (80540 <udi_cdc_multi_get_nb_received_data+0x38>)
   80534:	701a      	strb	r2, [r3, #0]
   80536:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   8053a:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return nb_received;
}
   8053c:	4770      	bx	lr
   8053e:	bf00      	nop
   80540:	200701d8 	.word	0x200701d8
   80544:	20070ad8 	.word	0x20070ad8
   80548:	20070ae4 	.word	0x20070ae4
   8054c:	20070ad0 	.word	0x20070ad0

00080550 <udi_cdc_multi_is_rx_ready>:
{
	return udi_cdc_multi_get_nb_received_data(0);
}

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
   80550:	b508      	push	{r3, lr}
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
   80552:	4b03      	ldr	r3, [pc, #12]	; (80560 <udi_cdc_multi_is_rx_ready+0x10>)
   80554:	4798      	blx	r3
}
   80556:	3000      	adds	r0, #0
   80558:	bf18      	it	ne
   8055a:	2001      	movne	r0, #1
   8055c:	bd08      	pop	{r3, pc}
   8055e:	bf00      	nop
   80560:	00080509 	.word	0x00080509

00080564 <udi_cdc_rx_start>:
//-------------------------------------------------
//------- Internal routines to process data transfer


static bool udi_cdc_rx_start(uint8_t port)
{
   80564:	b510      	push	{r4, lr}
   80566:	b082      	sub	sp, #8
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   80568:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
   8056c:	f1d3 0301 	rsbs	r3, r3, #1
   80570:	bf38      	it	cc
   80572:	2300      	movcc	r3, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   80574:	b672      	cpsid	i
   80576:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8057a:	2100      	movs	r1, #0
   8057c:	4a1f      	ldr	r2, [pc, #124]	; (805fc <udi_cdc_rx_start+0x98>)
   8057e:	7011      	strb	r1, [r2, #0]
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
   80580:	4a1f      	ldr	r2, [pc, #124]	; (80600 <udi_cdc_rx_start+0x9c>)
   80582:	7814      	ldrb	r4, [r2, #0]
   80584:	b2e4      	uxtb	r4, r4
	if (udi_cdc_rx_trans_ongoing[port] ||
   80586:	4a1f      	ldr	r2, [pc, #124]	; (80604 <udi_cdc_rx_start+0xa0>)
   80588:	7812      	ldrb	r2, [r2, #0]
   8058a:	f012 0fff 	tst.w	r2, #255	; 0xff
   8058e:	d108      	bne.n	805a2 <udi_cdc_rx_start+0x3e>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
   80590:	4a1d      	ldr	r2, [pc, #116]	; (80608 <udi_cdc_rx_start+0xa4>)
   80592:	8811      	ldrh	r1, [r2, #0]
   80594:	b289      	uxth	r1, r1
   80596:	4a1d      	ldr	r2, [pc, #116]	; (8060c <udi_cdc_rx_start+0xa8>)
   80598:	f832 2014 	ldrh.w	r2, [r2, r4, lsl #1]
   8059c:	b292      	uxth	r2, r2
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
	if (udi_cdc_rx_trans_ongoing[port] ||
   8059e:	4291      	cmp	r1, r2
   805a0:	d208      	bcs.n	805b4 <udi_cdc_rx_start+0x50>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   805a2:	b33b      	cbz	r3, 805f4 <udi_cdc_rx_start+0x90>
		cpu_irq_enable();
   805a4:	2201      	movs	r2, #1
   805a6:	4b15      	ldr	r3, [pc, #84]	; (805fc <udi_cdc_rx_start+0x98>)
   805a8:	701a      	strb	r2, [r3, #0]
   805aa:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   805ae:	b662      	cpsie	i
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
		// Transfer already on-going or current buffer no empty
		cpu_irq_restore(flags);
		return false;
   805b0:	2000      	movs	r0, #0
   805b2:	e020      	b.n	805f6 <udi_cdc_rx_start+0x92>
	}

	// Change current buffer
	udi_cdc_rx_pos[port] = 0;
   805b4:	2100      	movs	r1, #0
   805b6:	4a14      	ldr	r2, [pc, #80]	; (80608 <udi_cdc_rx_start+0xa4>)
   805b8:	8011      	strh	r1, [r2, #0]
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
   805ba:	428c      	cmp	r4, r1
   805bc:	bf14      	ite	ne
   805be:	2100      	movne	r1, #0
   805c0:	2101      	moveq	r1, #1
   805c2:	4a0f      	ldr	r2, [pc, #60]	; (80600 <udi_cdc_rx_start+0x9c>)
   805c4:	7011      	strb	r1, [r2, #0]

	// Start transfer on RX
	udi_cdc_rx_trans_ongoing[port] = true;
   805c6:	2101      	movs	r1, #1
   805c8:	4a0e      	ldr	r2, [pc, #56]	; (80604 <udi_cdc_rx_start+0xa0>)
   805ca:	7011      	strb	r1, [r2, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   805cc:	b123      	cbz	r3, 805d8 <udi_cdc_rx_start+0x74>
		cpu_irq_enable();
   805ce:	4b0b      	ldr	r3, [pc, #44]	; (805fc <udi_cdc_rx_start+0x98>)
   805d0:	7019      	strb	r1, [r3, #0]
   805d2:	f3bf 8f5f 	dmb	sy
   805d6:	b662      	cpsie	i
	cpu_irq_restore(flags);

	if (udi_cdc_multi_is_rx_ready(port)) {
   805d8:	2000      	movs	r0, #0
   805da:	4b0d      	ldr	r3, [pc, #52]	; (80610 <udi_cdc_rx_start+0xac>)
   805dc:	4798      	blx	r3
#undef UDI_CDC_PORT_TO_DATA_EP_OUT
	default:
		ep = UDI_CDC_DATA_EP_OUT_0;
		break;
	}
	return udd_ep_run(ep,
   805de:	4b0d      	ldr	r3, [pc, #52]	; (80614 <udi_cdc_rx_start+0xb0>)
   805e0:	9300      	str	r3, [sp, #0]
   805e2:	2002      	movs	r0, #2
   805e4:	2101      	movs	r1, #1
   805e6:	4a0c      	ldr	r2, [pc, #48]	; (80618 <udi_cdc_rx_start+0xb4>)
   805e8:	eb02 1284 	add.w	r2, r2, r4, lsl #6
   805ec:	2340      	movs	r3, #64	; 0x40
   805ee:	4c0b      	ldr	r4, [pc, #44]	; (8061c <udi_cdc_rx_start+0xb8>)
   805f0:	47a0      	blx	r4
   805f2:	e000      	b.n	805f6 <udi_cdc_rx_start+0x92>
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
	if (udi_cdc_rx_trans_ongoing[port] ||
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
		// Transfer already on-going or current buffer no empty
		cpu_irq_restore(flags);
		return false;
   805f4:	2000      	movs	r0, #0
	return udd_ep_run(ep,
			true,
			udi_cdc_rx_buf[port][buf_sel_trans],
			UDI_CDC_RX_BUFFERS,
			udi_cdc_data_received);
}
   805f6:	b002      	add	sp, #8
   805f8:	bd10      	pop	{r4, pc}
   805fa:	bf00      	nop
   805fc:	200701d8 	.word	0x200701d8
   80600:	20070ae4 	.word	0x20070ae4
   80604:	20070b78 	.word	0x20070b78
   80608:	20070ad8 	.word	0x20070ad8
   8060c:	20070ad0 	.word	0x20070ad0
   80610:	00080551 	.word	0x00080551
   80614:	000806b1 	.word	0x000806b1
   80618:	20070af8 	.word	0x20070af8
   8061c:	00082025 	.word	0x00082025

00080620 <udi_cdc_data_enable>:
	udi_cdc_nb_comm_enabled++;
	return true;
}

bool udi_cdc_data_enable(void)
{
   80620:	b510      	push	{r4, lr}
	uint8_t port;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
	udi_cdc_nb_data_enabled = 0;
   80622:	2400      	movs	r4, #0
   80624:	4b15      	ldr	r3, [pc, #84]	; (8067c <udi_cdc_data_enable+0x5c>)
   80626:	701c      	strb	r4, [r3, #0]
	}
	port = udi_cdc_nb_data_enabled;
#endif

	// Initialize TX management
	udi_cdc_tx_trans_ongoing[port] = false;
   80628:	4b15      	ldr	r3, [pc, #84]	; (80680 <udi_cdc_data_enable+0x60>)
   8062a:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_both_buf_to_send[port] = false;
   8062c:	4b15      	ldr	r3, [pc, #84]	; (80684 <udi_cdc_data_enable+0x64>)
   8062e:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_sel[port] = 0;
   80630:	4b15      	ldr	r3, [pc, #84]	; (80688 <udi_cdc_data_enable+0x68>)
   80632:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][0] = 0;
   80634:	4b15      	ldr	r3, [pc, #84]	; (8068c <udi_cdc_data_enable+0x6c>)
   80636:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][1] = 0;
   80638:	805c      	strh	r4, [r3, #2]
	udi_cdc_tx_sof_num[port] = 0;
   8063a:	4b15      	ldr	r3, [pc, #84]	; (80690 <udi_cdc_data_enable+0x70>)
   8063c:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_send(port);
   8063e:	4620      	mov	r0, r4
   80640:	4b14      	ldr	r3, [pc, #80]	; (80694 <udi_cdc_data_enable+0x74>)
   80642:	4798      	blx	r3

	// Initialize RX management
	udi_cdc_rx_trans_ongoing[port] = false;
   80644:	4b14      	ldr	r3, [pc, #80]	; (80698 <udi_cdc_data_enable+0x78>)
   80646:	701c      	strb	r4, [r3, #0]
	udi_cdc_rx_buf_sel[port] = 0;
   80648:	4b14      	ldr	r3, [pc, #80]	; (8069c <udi_cdc_data_enable+0x7c>)
   8064a:	701c      	strb	r4, [r3, #0]
	udi_cdc_rx_buf_nb[port][0] = 0;
   8064c:	4b14      	ldr	r3, [pc, #80]	; (806a0 <udi_cdc_data_enable+0x80>)
   8064e:	801c      	strh	r4, [r3, #0]
	udi_cdc_rx_buf_nb[port][1] = 0;
   80650:	805c      	strh	r4, [r3, #2]
	udi_cdc_rx_pos[port] = 0;
   80652:	4b14      	ldr	r3, [pc, #80]	; (806a4 <udi_cdc_data_enable+0x84>)
   80654:	801c      	strh	r4, [r3, #0]
	if (!udi_cdc_rx_start(port)) {
   80656:	4620      	mov	r0, r4
   80658:	4b13      	ldr	r3, [pc, #76]	; (806a8 <udi_cdc_data_enable+0x88>)
   8065a:	4798      	blx	r3
   8065c:	4602      	mov	r2, r0
   8065e:	b158      	cbz	r0, 80678 <udi_cdc_data_enable+0x58>
		return false;
	}
	udi_cdc_nb_data_enabled++;
   80660:	4b06      	ldr	r3, [pc, #24]	; (8067c <udi_cdc_data_enable+0x5c>)
   80662:	7819      	ldrb	r1, [r3, #0]
   80664:	3101      	adds	r1, #1
   80666:	b2c9      	uxtb	r1, r1
   80668:	7019      	strb	r1, [r3, #0]
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
   8066a:	781b      	ldrb	r3, [r3, #0]
   8066c:	b2db      	uxtb	r3, r3
   8066e:	2b01      	cmp	r3, #1
   80670:	d102      	bne.n	80678 <udi_cdc_data_enable+0x58>
		udi_cdc_data_running = true;
   80672:	2101      	movs	r1, #1
   80674:	4b0d      	ldr	r3, [pc, #52]	; (806ac <udi_cdc_data_enable+0x8c>)
   80676:	7019      	strb	r1, [r3, #0]
	}
	return true;
}
   80678:	4610      	mov	r0, r2
   8067a:	bd10      	pop	{r4, pc}
   8067c:	20070a40 	.word	0x20070a40
   80680:	20070ae8 	.word	0x20070ae8
   80684:	20070b7c 	.word	0x20070b7c
   80688:	20070a44 	.word	0x20070a44
   8068c:	20070ac8 	.word	0x20070ac8
   80690:	20070adc 	.word	0x20070adc
   80694:	00080379 	.word	0x00080379
   80698:	20070b78 	.word	0x20070b78
   8069c:	20070ae4 	.word	0x20070ae4
   806a0:	20070ad0 	.word	0x20070ad0
   806a4:	20070ad8 	.word	0x20070ad8
   806a8:	00080565 	.word	0x00080565
   806ac:	20070ae0 	.word	0x20070ae0

000806b0 <udi_cdc_data_received>:
			udi_cdc_data_received);
}


static void udi_cdc_data_received(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
   806b0:	b510      	push	{r4, lr}
   806b2:	b082      	sub	sp, #8
	default:
		port = 0;
		break;
	}

	if (UDD_EP_TRANSFER_OK != status) {
   806b4:	b9d8      	cbnz	r0, 806ee <udi_cdc_data_received+0x3e>
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
   806b6:	4b0f      	ldr	r3, [pc, #60]	; (806f4 <udi_cdc_data_received+0x44>)
   806b8:	781b      	ldrb	r3, [r3, #0]
   806ba:	f013 0fff 	tst.w	r3, #255	; 0xff
   806be:	bf14      	ite	ne
   806c0:	2300      	movne	r3, #0
   806c2:	2301      	moveq	r3, #1
	if (!n) {
   806c4:	b951      	cbnz	r1, 806dc <udi_cdc_data_received+0x2c>
		udd_ep_run( ep,
   806c6:	490c      	ldr	r1, [pc, #48]	; (806f8 <udi_cdc_data_received+0x48>)
   806c8:	9100      	str	r1, [sp, #0]
   806ca:	4610      	mov	r0, r2
   806cc:	2101      	movs	r1, #1
   806ce:	4a0b      	ldr	r2, [pc, #44]	; (806fc <udi_cdc_data_received+0x4c>)
   806d0:	eb02 1283 	add.w	r2, r2, r3, lsl #6
   806d4:	2340      	movs	r3, #64	; 0x40
   806d6:	4c0a      	ldr	r4, [pc, #40]	; (80700 <udi_cdc_data_received+0x50>)
   806d8:	47a0      	blx	r4
				true,
				udi_cdc_rx_buf[port][buf_sel_trans],
				UDI_CDC_RX_BUFFERS,
				udi_cdc_data_received);
		return;
   806da:	e008      	b.n	806ee <udi_cdc_data_received+0x3e>
	}
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
   806dc:	b289      	uxth	r1, r1
   806de:	4a09      	ldr	r2, [pc, #36]	; (80704 <udi_cdc_data_received+0x54>)
   806e0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	udi_cdc_rx_trans_ongoing[port] = false;
   806e4:	2000      	movs	r0, #0
   806e6:	4b08      	ldr	r3, [pc, #32]	; (80708 <udi_cdc_data_received+0x58>)
   806e8:	7018      	strb	r0, [r3, #0]
	udi_cdc_rx_start(port);
   806ea:	4b08      	ldr	r3, [pc, #32]	; (8070c <udi_cdc_data_received+0x5c>)
   806ec:	4798      	blx	r3
}
   806ee:	b002      	add	sp, #8
   806f0:	bd10      	pop	{r4, pc}
   806f2:	bf00      	nop
   806f4:	20070ae4 	.word	0x20070ae4
   806f8:	000806b1 	.word	0x000806b1
   806fc:	20070af8 	.word	0x20070af8
   80700:	00082025 	.word	0x00082025
   80704:	20070ad0 	.word	0x20070ad0
   80708:	20070b78 	.word	0x20070b78
   8070c:	00080565 	.word	0x00080565

00080710 <udc_next_desc_in_iface>:
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
   80710:	4b0f      	ldr	r3, [pc, #60]	; (80750 <udc_next_desc_in_iface+0x40>)
   80712:	681b      	ldr	r3, [r3, #0]
   80714:	681b      	ldr	r3, [r3, #0]
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
   80716:	885a      	ldrh	r2, [r3, #2]
   80718:	441a      	add	r2, r3
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   8071a:	7803      	ldrb	r3, [r0, #0]
   8071c:	4418      	add	r0, r3
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
   8071e:	4290      	cmp	r0, r2
   80720:	d210      	bcs.n	80744 <udc_next_desc_in_iface+0x34>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
   80722:	7843      	ldrb	r3, [r0, #1]
   80724:	2b04      	cmp	r3, #4
   80726:	d00f      	beq.n	80748 <udc_next_desc_in_iface+0x38>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
   80728:	428b      	cmp	r3, r1
   8072a:	d105      	bne.n	80738 <udc_next_desc_in_iface+0x28>
   8072c:	4770      	bx	lr
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
   8072e:	7843      	ldrb	r3, [r0, #1]
   80730:	2b04      	cmp	r3, #4
   80732:	d00b      	beq.n	8074c <udc_next_desc_in_iface+0x3c>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
   80734:	428b      	cmp	r3, r1
   80736:	d00a      	beq.n	8074e <udc_next_desc_in_iface+0x3e>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   80738:	7803      	ldrb	r3, [r0, #0]
   8073a:	4418      	add	r0, r3
	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
   8073c:	4290      	cmp	r0, r2
   8073e:	d3f6      	bcc.n	8072e <udc_next_desc_in_iface+0x1e>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
	}
	return NULL; // No specific descriptor found
   80740:	2000      	movs	r0, #0
   80742:	4770      	bx	lr
   80744:	2000      	movs	r0, #0
   80746:	4770      	bx	lr
   80748:	2000      	movs	r0, #0
   8074a:	4770      	bx	lr
   8074c:	2000      	movs	r0, #0
}
   8074e:	4770      	bx	lr
   80750:	20070b84 	.word	0x20070b84

00080754 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
   80754:	b508      	push	{r3, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
   80756:	4b03      	ldr	r3, [pc, #12]	; (80764 <udc_valid_address+0x10>)
   80758:	7898      	ldrb	r0, [r3, #2]
   8075a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   8075e:	4b02      	ldr	r3, [pc, #8]	; (80768 <udc_valid_address+0x14>)
   80760:	4798      	blx	r3
   80762:	bd08      	pop	{r3, pc}
   80764:	20070d50 	.word	0x20070d50
   80768:	00081db1 	.word	0x00081db1

0008076c <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
   8076c:	b410      	push	{r4}
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
   8076e:	4b16      	ldr	r3, [pc, #88]	; (807c8 <udc_update_iface_desc+0x5c>)
   80770:	781b      	ldrb	r3, [r3, #0]
   80772:	b303      	cbz	r3, 807b6 <udc_update_iface_desc+0x4a>
		return false;
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   80774:	4b15      	ldr	r3, [pc, #84]	; (807cc <udc_update_iface_desc+0x60>)
   80776:	681b      	ldr	r3, [r3, #0]
   80778:	681b      	ldr	r3, [r3, #0]
   8077a:	791a      	ldrb	r2, [r3, #4]
   8077c:	4282      	cmp	r2, r0
   8077e:	d91c      	bls.n	807ba <udc_update_iface_desc+0x4e>
		return false;
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
   80780:	4a13      	ldr	r2, [pc, #76]	; (807d0 <udc_update_iface_desc+0x64>)
   80782:	6013      	str	r3, [r2, #0]
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
   80784:	885c      	ldrh	r4, [r3, #2]
   80786:	441c      	add	r4, r3
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
   80788:	42a3      	cmp	r3, r4
   8078a:	d218      	bcs.n	807be <udc_update_iface_desc+0x52>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
   8078c:	785a      	ldrb	r2, [r3, #1]
   8078e:	2a04      	cmp	r2, #4
   80790:	d109      	bne.n	807a6 <udc_update_iface_desc+0x3a>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
   80792:	789a      	ldrb	r2, [r3, #2]
   80794:	4282      	cmp	r2, r0
   80796:	d106      	bne.n	807a6 <udc_update_iface_desc+0x3a>
   80798:	78da      	ldrb	r2, [r3, #3]
   8079a:	428a      	cmp	r2, r1
   8079c:	d103      	bne.n	807a6 <udc_update_iface_desc+0x3a>
   8079e:	4a0c      	ldr	r2, [pc, #48]	; (807d0 <udc_update_iface_desc+0x64>)
   807a0:	6013      	str	r3, [r2, #0]
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
   807a2:	2001      	movs	r0, #1
   807a4:	e00c      	b.n	807c0 <udc_update_iface_desc+0x54>
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
   807a6:	781a      	ldrb	r2, [r3, #0]
   807a8:	4413      	add	r3, r2
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
   807aa:	42a3      	cmp	r3, r4
   807ac:	d3ee      	bcc.n	8078c <udc_update_iface_desc+0x20>
   807ae:	4a08      	ldr	r2, [pc, #32]	; (807d0 <udc_update_iface_desc+0x64>)
   807b0:	6013      	str	r3, [r2, #0]
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
   807b2:	2000      	movs	r0, #0
   807b4:	e004      	b.n	807c0 <udc_update_iface_desc+0x54>
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
		return false;
   807b6:	2000      	movs	r0, #0
   807b8:	e002      	b.n	807c0 <udc_update_iface_desc+0x54>
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
   807ba:	2000      	movs	r0, #0
   807bc:	e000      	b.n	807c0 <udc_update_iface_desc+0x54>
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
   807be:	2000      	movs	r0, #0
}
   807c0:	f85d 4b04 	ldr.w	r4, [sp], #4
   807c4:	4770      	bx	lr
   807c6:	bf00      	nop
   807c8:	20070b94 	.word	0x20070b94
   807cc:	20070b84 	.word	0x20070b84
   807d0:	20070b98 	.word	0x20070b98

000807d4 <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
   807d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   807d8:	4604      	mov	r4, r0
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   807da:	2100      	movs	r1, #0
   807dc:	4b12      	ldr	r3, [pc, #72]	; (80828 <udc_iface_disable+0x54>)
   807de:	4798      	blx	r3
   807e0:	4680      	mov	r8, r0
   807e2:	b1e8      	cbz	r0, 80820 <udc_iface_disable+0x4c>
		return false;
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   807e4:	4b11      	ldr	r3, [pc, #68]	; (8082c <udc_iface_disable+0x58>)
   807e6:	681b      	ldr	r3, [r3, #0]
   807e8:	685b      	ldr	r3, [r3, #4]
   807ea:	f853 9024 	ldr.w	r9, [r3, r4, lsl #2]

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   807ee:	f8d9 300c 	ldr.w	r3, [r9, #12]
   807f2:	4798      	blx	r3
   807f4:	4601      	mov	r1, r0
   807f6:	4620      	mov	r0, r4
   807f8:	4b0b      	ldr	r3, [pc, #44]	; (80828 <udc_iface_disable+0x54>)
   807fa:	4798      	blx	r3
   807fc:	4680      	mov	r8, r0
   807fe:	b178      	cbz	r0, 80820 <udc_iface_disable+0x4c>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   80800:	4b0b      	ldr	r3, [pc, #44]	; (80830 <udc_iface_disable+0x5c>)
   80802:	681c      	ldr	r4, [r3, #0]
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   80804:	2605      	movs	r6, #5
   80806:	4d0b      	ldr	r5, [pc, #44]	; (80834 <udc_iface_disable+0x60>)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
   80808:	4f0b      	ldr	r7, [pc, #44]	; (80838 <udc_iface_disable+0x64>)
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   8080a:	4620      	mov	r0, r4
   8080c:	4631      	mov	r1, r6
   8080e:	47a8      	blx	r5
					udc_next_desc_in_iface((UDC_DESC_STORAGE
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
   80810:	4604      	mov	r4, r0
   80812:	b110      	cbz	r0, 8081a <udc_iface_disable+0x46>
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
   80814:	7880      	ldrb	r0, [r0, #2]
   80816:	47b8      	blx	r7
		}
   80818:	e7f7      	b.n	8080a <udc_iface_disable+0x36>
	}
#endif

	// Disable interface
	udi_api->disable();
   8081a:	f8d9 3004 	ldr.w	r3, [r9, #4]
   8081e:	4798      	blx	r3
	return true;
}
   80820:	4640      	mov	r0, r8
   80822:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80826:	bf00      	nop
   80828:	0008076d 	.word	0x0008076d
   8082c:	20070b84 	.word	0x20070b84
   80830:	20070b98 	.word	0x20070b98
   80834:	00080711 	.word	0x00080711
   80838:	00081e15 	.word	0x00081e15

0008083c <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
   8083c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80840:	4680      	mov	r8, r0
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
   80842:	4b10      	ldr	r3, [pc, #64]	; (80884 <udc_iface_enable+0x48>)
   80844:	4798      	blx	r3
   80846:	4603      	mov	r3, r0
   80848:	b1c8      	cbz	r0, 8087e <udc_iface_enable+0x42>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   8084a:	4b0f      	ldr	r3, [pc, #60]	; (80888 <udc_iface_enable+0x4c>)
   8084c:	681c      	ldr	r4, [r3, #0]
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   8084e:	2605      	movs	r6, #5
   80850:	4d0e      	ldr	r5, [pc, #56]	; (8088c <udc_iface_enable+0x50>)
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
   80852:	4f0f      	ldr	r7, [pc, #60]	; (80890 <udc_iface_enable+0x54>)

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   80854:	4620      	mov	r0, r4
   80856:	4631      	mov	r1, r6
   80858:	47a8      	blx	r5
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
   8085a:	4604      	mov	r4, r0
   8085c:	b138      	cbz	r0, 8086e <udc_iface_enable+0x32>
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
   8085e:	7880      	ldrb	r0, [r0, #2]
   80860:	78e1      	ldrb	r1, [r4, #3]
   80862:	88a2      	ldrh	r2, [r4, #4]
   80864:	47b8      	blx	r7
   80866:	4603      	mov	r3, r0
   80868:	2800      	cmp	r0, #0
   8086a:	d1f3      	bne.n	80854 <udc_iface_enable+0x18>
   8086c:	e007      	b.n	8087e <udc_iface_enable+0x42>
			return false;
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
   8086e:	4b09      	ldr	r3, [pc, #36]	; (80894 <udc_iface_enable+0x58>)
   80870:	681b      	ldr	r3, [r3, #0]
   80872:	685b      	ldr	r3, [r3, #4]
   80874:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
   80878:	681b      	ldr	r3, [r3, #0]
   8087a:	4798      	blx	r3
   8087c:	4603      	mov	r3, r0
}
   8087e:	4618      	mov	r0, r3
   80880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80884:	0008076d 	.word	0x0008076d
   80888:	20070b98 	.word	0x20070b98
   8088c:	00080711 	.word	0x00080711
   80890:	00082119 	.word	0x00082119
   80894:	20070b84 	.word	0x20070b84

00080898 <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
   80898:	b570      	push	{r4, r5, r6, lr}
	uint8_t iface_num;

	if (udc_num_configuration) {
   8089a:	4b0d      	ldr	r3, [pc, #52]	; (808d0 <udc_reset+0x38>)
   8089c:	781b      	ldrb	r3, [r3, #0]
   8089e:	b183      	cbz	r3, 808c2 <udc_reset+0x2a>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   808a0:	4b0c      	ldr	r3, [pc, #48]	; (808d4 <udc_reset+0x3c>)
   808a2:	681b      	ldr	r3, [r3, #0]
   808a4:	681b      	ldr	r3, [r3, #0]
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
   808a6:	791b      	ldrb	r3, [r3, #4]
   808a8:	b15b      	cbz	r3, 808c2 <udc_reset+0x2a>
   808aa:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
   808ac:	4e0a      	ldr	r6, [pc, #40]	; (808d8 <udc_reset+0x40>)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   808ae:	4d09      	ldr	r5, [pc, #36]	; (808d4 <udc_reset+0x3c>)
				iface_num++) {
			udc_iface_disable(iface_num);
   808b0:	4620      	mov	r0, r4
   808b2:	47b0      	blx	r6
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
   808b4:	3401      	adds	r4, #1
   808b6:	b2e4      	uxtb	r4, r4
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   808b8:	682b      	ldr	r3, [r5, #0]
   808ba:	681b      	ldr	r3, [r3, #0]
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
   808bc:	791b      	ldrb	r3, [r3, #4]
   808be:	42a3      	cmp	r3, r4
   808c0:	d8f6      	bhi.n	808b0 <udc_reset+0x18>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
   808c2:	2200      	movs	r2, #0
   808c4:	4b02      	ldr	r3, [pc, #8]	; (808d0 <udc_reset+0x38>)
   808c6:	701a      	strb	r2, [r3, #0]
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
   808c8:	2201      	movs	r2, #1
   808ca:	4b04      	ldr	r3, [pc, #16]	; (808dc <udc_reset+0x44>)
   808cc:	801a      	strh	r2, [r3, #0]
   808ce:	bd70      	pop	{r4, r5, r6, pc}
   808d0:	20070b94 	.word	0x20070b94
   808d4:	20070b84 	.word	0x20070b84
   808d8:	000807d5 	.word	0x000807d5
   808dc:	20070b90 	.word	0x20070b90

000808e0 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
   808e0:	b538      	push	{r3, r4, r5, lr}
	uint8_t iface_num;

	if (udc_num_configuration) {
   808e2:	4b0c      	ldr	r3, [pc, #48]	; (80914 <udc_sof_notify+0x34>)
   808e4:	781b      	ldrb	r3, [r3, #0]
   808e6:	b19b      	cbz	r3, 80910 <udc_sof_notify+0x30>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   808e8:	4b0b      	ldr	r3, [pc, #44]	; (80918 <udc_sof_notify+0x38>)
   808ea:	681b      	ldr	r3, [r3, #0]
   808ec:	681a      	ldr	r2, [r3, #0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
   808ee:	7912      	ldrb	r2, [r2, #4]
   808f0:	b172      	cbz	r2, 80910 <udc_sof_notify+0x30>
   808f2:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   808f4:	4d08      	ldr	r5, [pc, #32]	; (80918 <udc_sof_notify+0x38>)
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
   808f6:	685b      	ldr	r3, [r3, #4]
   808f8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   808fc:	691b      	ldr	r3, [r3, #16]
   808fe:	b103      	cbz	r3, 80902 <udc_sof_notify+0x22>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
   80900:	4798      	blx	r3
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
   80902:	3401      	adds	r4, #1
   80904:	b2e4      	uxtb	r4, r4
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   80906:	682b      	ldr	r3, [r5, #0]
   80908:	681a      	ldr	r2, [r3, #0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
   8090a:	7912      	ldrb	r2, [r2, #4]
   8090c:	42a2      	cmp	r2, r4
   8090e:	d8f2      	bhi.n	808f6 <udc_sof_notify+0x16>
   80910:	bd38      	pop	{r3, r4, r5, pc}
   80912:	bf00      	nop
   80914:	20070b94 	.word	0x20070b94
   80918:	20070b84 	.word	0x20070b84

0008091c <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
   8091c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
   80920:	4b77      	ldr	r3, [pc, #476]	; (80b00 <udc_process_setup+0x1e4>)
   80922:	2200      	movs	r2, #0
   80924:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
   80926:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   80928:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
   8092a:	781b      	ldrb	r3, [r3, #0]
   8092c:	f013 0f80 	tst.w	r3, #128	; 0x80
   80930:	f000 81e6 	beq.w	80d00 <udc_process_setup+0x3e4>
		if (udd_g_ctrlreq.req.wLength == 0) {
   80934:	4a72      	ldr	r2, [pc, #456]	; (80b00 <udc_process_setup+0x1e4>)
   80936:	88d2      	ldrh	r2, [r2, #6]
   80938:	2a00      	cmp	r2, #0
   8093a:	f040 81e5 	bne.w	80d08 <udc_process_setup+0x3ec>
   8093e:	e1db      	b.n	80cf8 <udc_process_setup+0x3dc>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   80940:	f013 031f 	ands.w	r3, r3, #31
   80944:	d167      	bne.n	80a16 <udc_process_setup+0xfa>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
   80946:	496e      	ldr	r1, [pc, #440]	; (80b00 <udc_process_setup+0x1e4>)
   80948:	7849      	ldrb	r1, [r1, #1]
   8094a:	2906      	cmp	r1, #6
   8094c:	d00d      	beq.n	8096a <udc_process_setup+0x4e>
   8094e:	2908      	cmp	r1, #8
   80950:	d057      	beq.n	80a02 <udc_process_setup+0xe6>
   80952:	2900      	cmp	r1, #0
   80954:	d15f      	bne.n	80a16 <udc_process_setup+0xfa>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
   80956:	2a02      	cmp	r2, #2
   80958:	d105      	bne.n	80966 <udc_process_setup+0x4a>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
   8095a:	486a      	ldr	r0, [pc, #424]	; (80b04 <udc_process_setup+0x1e8>)
   8095c:	2102      	movs	r1, #2
   8095e:	4b6a      	ldr	r3, [pc, #424]	; (80b08 <udc_process_setup+0x1ec>)
   80960:	4798      	blx	r3
			sizeof(udc_device_status));
	return true;
   80962:	2401      	movs	r4, #1
   80964:	e174      	b.n	80c50 <udc_process_setup+0x334>
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
		return false;
   80966:	2400      	movs	r4, #0
   80968:	e172      	b.n	80c50 <udc_process_setup+0x334>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
   8096a:	4b65      	ldr	r3, [pc, #404]	; (80b00 <udc_process_setup+0x1e4>)
   8096c:	885a      	ldrh	r2, [r3, #2]

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
   8096e:	0a13      	lsrs	r3, r2, #8
   80970:	3b01      	subs	r3, #1
   80972:	2b0e      	cmp	r3, #14
   80974:	d83b      	bhi.n	809ee <udc_process_setup+0xd2>
   80976:	e8df f003 	tbb	[pc, r3]
   8097a:	0f08      	.short	0x0f08
   8097c:	3a3a3a2a 	.word	0x3a3a3a2a
   80980:	3a3a3a3a 	.word	0x3a3a3a3a
   80984:	3a3a3a3a 	.word	0x3a3a3a3a
   80988:	22          	.byte	0x22
   80989:	00          	.byte	0x00
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
   8098a:	4b60      	ldr	r3, [pc, #384]	; (80b0c <udc_process_setup+0x1f0>)
   8098c:	681b      	ldr	r3, [r3, #0]
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
   8098e:	4618      	mov	r0, r3
   80990:	7819      	ldrb	r1, [r3, #0]
   80992:	4b5d      	ldr	r3, [pc, #372]	; (80b08 <udc_process_setup+0x1ec>)
   80994:	4798      	blx	r3
   80996:	e021      	b.n	809dc <udc_process_setup+0xc0>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
   80998:	b2d2      	uxtb	r2, r2
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
   8099a:	4b5c      	ldr	r3, [pc, #368]	; (80b0c <udc_process_setup+0x1f0>)
   8099c:	681b      	ldr	r3, [r3, #0]
   8099e:	7c5b      	ldrb	r3, [r3, #17]
   809a0:	4293      	cmp	r3, r2
   809a2:	d926      	bls.n	809f2 <udc_process_setup+0xd6>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
   809a4:	4b59      	ldr	r3, [pc, #356]	; (80b0c <udc_process_setup+0x1f0>)
   809a6:	685b      	ldr	r3, [r3, #4]
   809a8:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
   809ac:	4618      	mov	r0, r3
   809ae:	8859      	ldrh	r1, [r3, #2]
   809b0:	4b55      	ldr	r3, [pc, #340]	; (80b08 <udc_process_setup+0x1ec>)
   809b2:	4798      	blx	r3
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   809b4:	4b52      	ldr	r3, [pc, #328]	; (80b00 <udc_process_setup+0x1e4>)
   809b6:	689b      	ldr	r3, [r3, #8]
   809b8:	2202      	movs	r2, #2
   809ba:	705a      	strb	r2, [r3, #1]
   809bc:	e00e      	b.n	809dc <udc_process_setup+0xc0>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
   809be:	4b53      	ldr	r3, [pc, #332]	; (80b0c <udc_process_setup+0x1f0>)
   809c0:	689b      	ldr	r3, [r3, #8]
   809c2:	b1c3      	cbz	r3, 809f6 <udc_process_setup+0xda>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
   809c4:	4618      	mov	r0, r3
   809c6:	8859      	ldrh	r1, [r3, #2]
   809c8:	4b4f      	ldr	r3, [pc, #316]	; (80b08 <udc_process_setup+0x1ec>)
   809ca:	4798      	blx	r3
   809cc:	e006      	b.n	809dc <udc_process_setup+0xc0>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
   809ce:	f012 0fff 	tst.w	r2, #255	; 0xff
   809d2:	d112      	bne.n	809fa <udc_process_setup+0xde>
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
   809d4:	484e      	ldr	r0, [pc, #312]	; (80b10 <udc_process_setup+0x1f4>)
   809d6:	2104      	movs	r1, #4
   809d8:	4b4b      	ldr	r3, [pc, #300]	; (80b08 <udc_process_setup+0x1ec>)
   809da:	4798      	blx	r3
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
   809dc:	4b48      	ldr	r3, [pc, #288]	; (80b00 <udc_process_setup+0x1e4>)
   809de:	88da      	ldrh	r2, [r3, #6]
   809e0:	899b      	ldrh	r3, [r3, #12]
   809e2:	4293      	cmp	r3, r2
   809e4:	d90b      	bls.n	809fe <udc_process_setup+0xe2>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   809e6:	4b46      	ldr	r3, [pc, #280]	; (80b00 <udc_process_setup+0x1e4>)
   809e8:	819a      	strh	r2, [r3, #12]
	}
	return true;
   809ea:	2401      	movs	r4, #1
   809ec:	e130      	b.n	80c50 <udc_process_setup+0x334>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
   809ee:	2400      	movs	r4, #0
   809f0:	e12e      	b.n	80c50 <udc_process_setup+0x334>
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
   809f2:	2400      	movs	r4, #0
   809f4:	e12c      	b.n	80c50 <udc_process_setup+0x334>
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
			return false;
   809f6:	2400      	movs	r4, #0
   809f8:	e12a      	b.n	80c50 <udc_process_setup+0x334>
		break;

	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
			return false;
   809fa:	2400      	movs	r4, #0
   809fc:	e128      	b.n	80c50 <udc_process_setup+0x334>
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
	}
	return true;
   809fe:	2401      	movs	r4, #1
   80a00:	e126      	b.n	80c50 <udc_process_setup+0x334>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
   80a02:	2a01      	cmp	r2, #1
   80a04:	d105      	bne.n	80a12 <udc_process_setup+0xf6>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
   80a06:	4843      	ldr	r0, [pc, #268]	; (80b14 <udc_process_setup+0x1f8>)
   80a08:	2101      	movs	r1, #1
   80a0a:	4b3f      	ldr	r3, [pc, #252]	; (80b08 <udc_process_setup+0x1ec>)
   80a0c:	4798      	blx	r3
	return true;
   80a0e:	2401      	movs	r4, #1
   80a10:	e11e      	b.n	80c50 <udc_process_setup+0x334>
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
		return false;
   80a12:	2400      	movs	r4, #0
   80a14:	e11c      	b.n	80c50 <udc_process_setup+0x334>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   80a16:	2b01      	cmp	r3, #1
   80a18:	d12a      	bne.n	80a70 <udc_process_setup+0x154>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
   80a1a:	4939      	ldr	r1, [pc, #228]	; (80b00 <udc_process_setup+0x1e4>)
   80a1c:	7849      	ldrb	r1, [r1, #1]
   80a1e:	290a      	cmp	r1, #10
   80a20:	d126      	bne.n	80a70 <udc_process_setup+0x154>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
   80a22:	2a01      	cmp	r2, #1
   80a24:	d11e      	bne.n	80a64 <udc_process_setup+0x148>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
   80a26:	4b3b      	ldr	r3, [pc, #236]	; (80b14 <udc_process_setup+0x1f8>)
   80a28:	781b      	ldrb	r3, [r3, #0]
   80a2a:	b1eb      	cbz	r3, 80a68 <udc_process_setup+0x14c>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   80a2c:	4b34      	ldr	r3, [pc, #208]	; (80b00 <udc_process_setup+0x1e4>)
   80a2e:	791d      	ldrb	r5, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   80a30:	4b39      	ldr	r3, [pc, #228]	; (80b18 <udc_process_setup+0x1fc>)
   80a32:	681e      	ldr	r6, [r3, #0]
   80a34:	6833      	ldr	r3, [r6, #0]
   80a36:	791b      	ldrb	r3, [r3, #4]
   80a38:	42ab      	cmp	r3, r5
   80a3a:	d917      	bls.n	80a6c <udc_process_setup+0x150>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   80a3c:	4628      	mov	r0, r5
   80a3e:	2100      	movs	r1, #0
   80a40:	4b36      	ldr	r3, [pc, #216]	; (80b1c <udc_process_setup+0x200>)
   80a42:	4798      	blx	r3
   80a44:	4604      	mov	r4, r0
   80a46:	2800      	cmp	r0, #0
   80a48:	f000 8102 	beq.w	80c50 <udc_process_setup+0x334>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   80a4c:	6873      	ldr	r3, [r6, #4]
	udc_iface_setting = udi_api->getsetting();
   80a4e:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
   80a52:	68db      	ldr	r3, [r3, #12]
   80a54:	4798      	blx	r3
   80a56:	4b32      	ldr	r3, [pc, #200]	; (80b20 <udc_process_setup+0x204>)
   80a58:	7018      	strb	r0, [r3, #0]

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
   80a5a:	4618      	mov	r0, r3
   80a5c:	2101      	movs	r1, #1
   80a5e:	4b2a      	ldr	r3, [pc, #168]	; (80b08 <udc_process_setup+0x1ec>)
   80a60:	4798      	blx	r3
   80a62:	e0f5      	b.n	80c50 <udc_process_setup+0x334>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
		return false; // Error in request
   80a64:	2400      	movs	r4, #0
   80a66:	e0f3      	b.n	80c50 <udc_process_setup+0x334>
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
   80a68:	2400      	movs	r4, #0
   80a6a:	e0f1      	b.n	80c50 <udc_process_setup+0x334>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
   80a6c:	2400      	movs	r4, #0
   80a6e:	e0ef      	b.n	80c50 <udc_process_setup+0x334>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   80a70:	2b02      	cmp	r3, #2
   80a72:	f040 80ef 	bne.w	80c54 <udc_process_setup+0x338>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
   80a76:	4b22      	ldr	r3, [pc, #136]	; (80b00 <udc_process_setup+0x1e4>)
   80a78:	785b      	ldrb	r3, [r3, #1]
   80a7a:	2b00      	cmp	r3, #0
   80a7c:	f040 80e3 	bne.w	80c46 <udc_process_setup+0x32a>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
   80a80:	2a02      	cmp	r2, #2
   80a82:	d10b      	bne.n	80a9c <udc_process_setup+0x180>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
   80a84:	4b1e      	ldr	r3, [pc, #120]	; (80b00 <udc_process_setup+0x1e4>)
   80a86:	7918      	ldrb	r0, [r3, #4]
   80a88:	4b26      	ldr	r3, [pc, #152]	; (80b24 <udc_process_setup+0x208>)
   80a8a:	4798      	blx	r3
   80a8c:	4b26      	ldr	r3, [pc, #152]	; (80b28 <udc_process_setup+0x20c>)
   80a8e:	8018      	strh	r0, [r3, #0]
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
   80a90:	4618      	mov	r0, r3
   80a92:	2102      	movs	r1, #2
   80a94:	4b1c      	ldr	r3, [pc, #112]	; (80b08 <udc_process_setup+0x1ec>)
   80a96:	4798      	blx	r3
			sizeof(udc_ep_status));
	return true;
   80a98:	2401      	movs	r4, #1
   80a9a:	e0d9      	b.n	80c50 <udc_process_setup+0x334>
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
		return false;
   80a9c:	2400      	movs	r4, #0
   80a9e:	e0d7      	b.n	80c50 <udc_process_setup+0x334>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   80aa0:	f013 031f 	ands.w	r3, r3, #31
   80aa4:	f040 8084 	bne.w	80bb0 <udc_process_setup+0x294>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
   80aa8:	4a15      	ldr	r2, [pc, #84]	; (80b00 <udc_process_setup+0x1e4>)
   80aaa:	7852      	ldrb	r2, [r2, #1]
   80aac:	3a01      	subs	r2, #1
   80aae:	2a08      	cmp	r2, #8
   80ab0:	d87e      	bhi.n	80bb0 <udc_process_setup+0x294>
   80ab2:	e8df f012 	tbh	[pc, r2, lsl #1]
   80ab6:	0013      	.short	0x0013
   80ab8:	00ca007d 	.word	0x00ca007d
   80abc:	0009007d 	.word	0x0009007d
   80ac0:	007d007d 	.word	0x007d007d
   80ac4:	003d007d 	.word	0x003d007d
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
   80ac8:	4b0d      	ldr	r3, [pc, #52]	; (80b00 <udc_process_setup+0x1e4>)
   80aca:	88db      	ldrh	r3, [r3, #6]
   80acc:	b923      	cbnz	r3, 80ad8 <udc_process_setup+0x1bc>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
   80ace:	4a17      	ldr	r2, [pc, #92]	; (80b2c <udc_process_setup+0x210>)
   80ad0:	4b0b      	ldr	r3, [pc, #44]	; (80b00 <udc_process_setup+0x1e4>)
   80ad2:	611a      	str	r2, [r3, #16]
	return true;
   80ad4:	2401      	movs	r4, #1
   80ad6:	e0bb      	b.n	80c50 <udc_process_setup+0x334>
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
   80ad8:	2400      	movs	r4, #0
   80ada:	e0b9      	b.n	80c50 <udc_process_setup+0x334>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
   80adc:	4b08      	ldr	r3, [pc, #32]	; (80b00 <udc_process_setup+0x1e4>)
   80ade:	88db      	ldrh	r3, [r3, #6]
   80ae0:	b953      	cbnz	r3, 80af8 <udc_process_setup+0x1dc>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
   80ae2:	4b07      	ldr	r3, [pc, #28]	; (80b00 <udc_process_setup+0x1e4>)
   80ae4:	885b      	ldrh	r3, [r3, #2]
   80ae6:	2b01      	cmp	r3, #1
   80ae8:	d108      	bne.n	80afc <udc_process_setup+0x1e0>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
   80aea:	4b06      	ldr	r3, [pc, #24]	; (80b04 <udc_process_setup+0x1e8>)
   80aec:	881a      	ldrh	r2, [r3, #0]
   80aee:	f022 0202 	bic.w	r2, r2, #2
   80af2:	801a      	strh	r2, [r3, #0]
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
   80af4:	2401      	movs	r4, #1
   80af6:	e0ab      	b.n	80c50 <udc_process_setup+0x334>
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
   80af8:	2400      	movs	r4, #0
   80afa:	e0a9      	b.n	80c50 <udc_process_setup+0x334>
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
	}
	return false;
   80afc:	2400      	movs	r4, #0
   80afe:	e0a7      	b.n	80c50 <udc_process_setup+0x334>
   80b00:	20070d50 	.word	0x20070d50
   80b04:	20070b90 	.word	0x20070b90
   80b08:	00081e09 	.word	0x00081e09
   80b0c:	20070160 	.word	0x20070160
   80b10:	200701d4 	.word	0x200701d4
   80b14:	20070b94 	.word	0x20070b94
   80b18:	20070b84 	.word	0x20070b84
   80b1c:	0008076d 	.word	0x0008076d
   80b20:	20070b8c 	.word	0x20070b8c
   80b24:	00081e6d 	.word	0x00081e6d
   80b28:	20070b88 	.word	0x20070b88
   80b2c:	00080755 	.word	0x00080755
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
   80b30:	4b79      	ldr	r3, [pc, #484]	; (80d18 <udc_process_setup+0x3fc>)
   80b32:	88db      	ldrh	r3, [r3, #6]
   80b34:	2b00      	cmp	r3, #0
   80b36:	d131      	bne.n	80b9c <udc_process_setup+0x280>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
   80b38:	4b78      	ldr	r3, [pc, #480]	; (80d1c <udc_process_setup+0x400>)
   80b3a:	4798      	blx	r3
   80b3c:	2800      	cmp	r0, #0
   80b3e:	d02f      	beq.n	80ba0 <udc_process_setup+0x284>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   80b40:	4b75      	ldr	r3, [pc, #468]	; (80d18 <udc_process_setup+0x3fc>)
   80b42:	789a      	ldrb	r2, [r3, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
   80b44:	4b76      	ldr	r3, [pc, #472]	; (80d20 <udc_process_setup+0x404>)
   80b46:	681b      	ldr	r3, [r3, #0]
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   80b48:	7c5b      	ldrb	r3, [r3, #17]
   80b4a:	429a      	cmp	r2, r3
   80b4c:	dc2a      	bgt.n	80ba4 <udc_process_setup+0x288>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
   80b4e:	4b75      	ldr	r3, [pc, #468]	; (80d24 <udc_process_setup+0x408>)
   80b50:	4798      	blx	r3

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
   80b52:	4b71      	ldr	r3, [pc, #452]	; (80d18 <udc_process_setup+0x3fc>)
   80b54:	789b      	ldrb	r3, [r3, #2]
   80b56:	4a74      	ldr	r2, [pc, #464]	; (80d28 <udc_process_setup+0x40c>)
   80b58:	7013      	strb	r3, [r2, #0]
	if (udc_num_configuration == 0) {
   80b5a:	b32b      	cbz	r3, 80ba8 <udc_process_setup+0x28c>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
   80b5c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   80b60:	3b01      	subs	r3, #1
   80b62:	4a6f      	ldr	r2, [pc, #444]	; (80d20 <udc_process_setup+0x404>)
   80b64:	6852      	ldr	r2, [r2, #4]
   80b66:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
   80b6a:	4970      	ldr	r1, [pc, #448]	; (80d2c <udc_process_setup+0x410>)
   80b6c:	6008      	str	r0, [r1, #0]
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   80b6e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
   80b72:	791b      	ldrb	r3, [r3, #4]
   80b74:	b1d3      	cbz	r3, 80bac <udc_process_setup+0x290>
   80b76:	2500      	movs	r5, #0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
   80b78:	462f      	mov	r7, r5
   80b7a:	4e6d      	ldr	r6, [pc, #436]	; (80d30 <udc_process_setup+0x414>)
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   80b7c:	4688      	mov	r8, r1
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
   80b7e:	4628      	mov	r0, r5
   80b80:	4639      	mov	r1, r7
   80b82:	47b0      	blx	r6
   80b84:	4604      	mov	r4, r0
   80b86:	2800      	cmp	r0, #0
   80b88:	d062      	beq.n	80c50 <udc_process_setup+0x334>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
   80b8a:	3501      	adds	r5, #1
   80b8c:	b2ed      	uxtb	r5, r5
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   80b8e:	f8d8 3000 	ldr.w	r3, [r8]
   80b92:	681b      	ldr	r3, [r3, #0]
   80b94:	791b      	ldrb	r3, [r3, #4]
   80b96:	42ab      	cmp	r3, r5
   80b98:	d8f1      	bhi.n	80b7e <udc_process_setup+0x262>
   80b9a:	e059      	b.n	80c50 <udc_process_setup+0x334>
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
		return false;
   80b9c:	2400      	movs	r4, #0
   80b9e:	e057      	b.n	80c50 <udc_process_setup+0x334>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
		return false;
   80ba0:	2400      	movs	r4, #0
   80ba2:	e055      	b.n	80c50 <udc_process_setup+0x334>
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
				udc_config.confdev_lsfs->bNumConfigurations) {
			return false;
   80ba4:	2400      	movs	r4, #0
   80ba6:	e053      	b.n	80c50 <udc_process_setup+0x334>
	udc_reset();

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
	if (udc_num_configuration == 0) {
		return true; // Default empty configuration requested
   80ba8:	2401      	movs	r4, #1
   80baa:	e051      	b.n	80c50 <udc_process_setup+0x334>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
		}
	}
	return true;
   80bac:	2401      	movs	r4, #1
   80bae:	e04f      	b.n	80c50 <udc_process_setup+0x334>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   80bb0:	2b01      	cmp	r3, #1
   80bb2:	d11c      	bne.n	80bee <udc_process_setup+0x2d2>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
   80bb4:	4a58      	ldr	r2, [pc, #352]	; (80d18 <udc_process_setup+0x3fc>)
   80bb6:	7852      	ldrb	r2, [r2, #1]
   80bb8:	2a0b      	cmp	r2, #11
   80bba:	d118      	bne.n	80bee <udc_process_setup+0x2d2>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
   80bbc:	4b56      	ldr	r3, [pc, #344]	; (80d18 <udc_process_setup+0x3fc>)
   80bbe:	88db      	ldrh	r3, [r3, #6]
   80bc0:	b98b      	cbnz	r3, 80be6 <udc_process_setup+0x2ca>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
   80bc2:	4b59      	ldr	r3, [pc, #356]	; (80d28 <udc_process_setup+0x40c>)
   80bc4:	781b      	ldrb	r3, [r3, #0]
   80bc6:	b183      	cbz	r3, 80bea <udc_process_setup+0x2ce>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   80bc8:	4b53      	ldr	r3, [pc, #332]	; (80d18 <udc_process_setup+0x3fc>)
   80bca:	791d      	ldrb	r5, [r3, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
   80bcc:	885e      	ldrh	r6, [r3, #2]

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
   80bce:	4628      	mov	r0, r5
   80bd0:	4b58      	ldr	r3, [pc, #352]	; (80d34 <udc_process_setup+0x418>)
   80bd2:	4798      	blx	r3
   80bd4:	4604      	mov	r4, r0
   80bd6:	2800      	cmp	r0, #0
   80bd8:	d03a      	beq.n	80c50 <udc_process_setup+0x334>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
   80bda:	4628      	mov	r0, r5
   80bdc:	b2f1      	uxtb	r1, r6
   80bde:	4b54      	ldr	r3, [pc, #336]	; (80d30 <udc_process_setup+0x414>)
   80be0:	4798      	blx	r3
   80be2:	4604      	mov	r4, r0
   80be4:	e034      	b.n	80c50 <udc_process_setup+0x334>
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
		return false; // Error in request
   80be6:	2400      	movs	r4, #0
   80be8:	e032      	b.n	80c50 <udc_process_setup+0x334>
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
   80bea:	2400      	movs	r4, #0
   80bec:	e030      	b.n	80c50 <udc_process_setup+0x334>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   80bee:	2b02      	cmp	r3, #2
   80bf0:	d130      	bne.n	80c54 <udc_process_setup+0x338>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
   80bf2:	4b49      	ldr	r3, [pc, #292]	; (80d18 <udc_process_setup+0x3fc>)
   80bf4:	785b      	ldrb	r3, [r3, #1]
   80bf6:	2b01      	cmp	r3, #1
   80bf8:	d002      	beq.n	80c00 <udc_process_setup+0x2e4>
   80bfa:	2b03      	cmp	r3, #3
   80bfc:	d010      	beq.n	80c20 <udc_process_setup+0x304>
   80bfe:	e026      	b.n	80c4e <udc_process_setup+0x332>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
   80c00:	4b45      	ldr	r3, [pc, #276]	; (80d18 <udc_process_setup+0x3fc>)
   80c02:	88db      	ldrh	r3, [r3, #6]
   80c04:	b943      	cbnz	r3, 80c18 <udc_process_setup+0x2fc>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   80c06:	4b44      	ldr	r3, [pc, #272]	; (80d18 <udc_process_setup+0x3fc>)
   80c08:	885b      	ldrh	r3, [r3, #2]
   80c0a:	b93b      	cbnz	r3, 80c1c <udc_process_setup+0x300>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   80c0c:	4b42      	ldr	r3, [pc, #264]	; (80d18 <udc_process_setup+0x3fc>)
   80c0e:	7918      	ldrb	r0, [r3, #4]
   80c10:	4b49      	ldr	r3, [pc, #292]	; (80d38 <udc_process_setup+0x41c>)
   80c12:	4798      	blx	r3
   80c14:	4604      	mov	r4, r0
   80c16:	e01b      	b.n	80c50 <udc_process_setup+0x334>
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
   80c18:	2400      	movs	r4, #0
   80c1a:	e019      	b.n	80c50 <udc_process_setup+0x334>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
   80c1c:	2400      	movs	r4, #0
   80c1e:	e017      	b.n	80c50 <udc_process_setup+0x334>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
   80c20:	4b3d      	ldr	r3, [pc, #244]	; (80d18 <udc_process_setup+0x3fc>)
   80c22:	88db      	ldrh	r3, [r3, #6]
   80c24:	b95b      	cbnz	r3, 80c3e <udc_process_setup+0x322>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   80c26:	4b3c      	ldr	r3, [pc, #240]	; (80d18 <udc_process_setup+0x3fc>)
   80c28:	885b      	ldrh	r3, [r3, #2]
   80c2a:	b953      	cbnz	r3, 80c42 <udc_process_setup+0x326>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
   80c2c:	4c3a      	ldr	r4, [pc, #232]	; (80d18 <udc_process_setup+0x3fc>)
   80c2e:	7920      	ldrb	r0, [r4, #4]
   80c30:	4b42      	ldr	r3, [pc, #264]	; (80d3c <udc_process_setup+0x420>)
   80c32:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   80c34:	7920      	ldrb	r0, [r4, #4]
   80c36:	4b42      	ldr	r3, [pc, #264]	; (80d40 <udc_process_setup+0x424>)
   80c38:	4798      	blx	r3
   80c3a:	4604      	mov	r4, r0
   80c3c:	e008      	b.n	80c50 <udc_process_setup+0x334>
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
   80c3e:	2400      	movs	r4, #0
   80c40:	e006      	b.n	80c50 <udc_process_setup+0x334>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
   80c42:	2400      	movs	r4, #0
   80c44:	e004      	b.n	80c50 <udc_process_setup+0x334>
				break;
			}
		}
#endif
	}
	return false;
   80c46:	2400      	movs	r4, #0
   80c48:	e002      	b.n	80c50 <udc_process_setup+0x334>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
   80c4a:	2400      	movs	r4, #0
   80c4c:	e000      	b.n	80c50 <udc_process_setup+0x334>
				break;
			}
		}
#endif
	}
	return false;
   80c4e:	2400      	movs	r4, #0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
   80c50:	2c00      	cmp	r4, #0
   80c52:	d15d      	bne.n	80d10 <udc_process_setup+0x3f4>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
   80c54:	4b30      	ldr	r3, [pc, #192]	; (80d18 <udc_process_setup+0x3fc>)
   80c56:	781b      	ldrb	r3, [r3, #0]
   80c58:	f003 031f 	and.w	r3, r3, #31
   80c5c:	2b01      	cmp	r3, #1
   80c5e:	d11e      	bne.n	80c9e <udc_process_setup+0x382>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
   80c60:	4b31      	ldr	r3, [pc, #196]	; (80d28 <udc_process_setup+0x40c>)
   80c62:	781b      	ldrb	r3, [r3, #0]
   80c64:	b1db      	cbz	r3, 80c9e <udc_process_setup+0x382>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   80c66:	4b2c      	ldr	r3, [pc, #176]	; (80d18 <udc_process_setup+0x3fc>)
   80c68:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   80c6a:	4b30      	ldr	r3, [pc, #192]	; (80d2c <udc_process_setup+0x410>)
   80c6c:	681d      	ldr	r5, [r3, #0]
   80c6e:	682b      	ldr	r3, [r5, #0]
   80c70:	791b      	ldrb	r3, [r3, #4]
   80c72:	42a3      	cmp	r3, r4
   80c74:	d913      	bls.n	80c9e <udc_process_setup+0x382>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   80c76:	4620      	mov	r0, r4
   80c78:	2100      	movs	r1, #0
   80c7a:	4b32      	ldr	r3, [pc, #200]	; (80d44 <udc_process_setup+0x428>)
   80c7c:	4798      	blx	r3
   80c7e:	b170      	cbz	r0, 80c9e <udc_process_setup+0x382>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   80c80:	686b      	ldr	r3, [r5, #4]
   80c82:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   80c86:	68eb      	ldr	r3, [r5, #12]
   80c88:	4798      	blx	r3
   80c8a:	4601      	mov	r1, r0
   80c8c:	4620      	mov	r0, r4
   80c8e:	4b2d      	ldr	r3, [pc, #180]	; (80d44 <udc_process_setup+0x428>)
   80c90:	4798      	blx	r3
   80c92:	b120      	cbz	r0, 80c9e <udc_process_setup+0x382>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
   80c94:	68ab      	ldr	r3, [r5, #8]
   80c96:	4798      	blx	r3
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
   80c98:	4604      	mov	r4, r0
   80c9a:	2800      	cmp	r0, #0
   80c9c:	d138      	bne.n	80d10 <udc_process_setup+0x3f4>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
   80c9e:	4b1e      	ldr	r3, [pc, #120]	; (80d18 <udc_process_setup+0x3fc>)
   80ca0:	781b      	ldrb	r3, [r3, #0]
   80ca2:	f003 031f 	and.w	r3, r3, #31
   80ca6:	2b02      	cmp	r3, #2
   80ca8:	d128      	bne.n	80cfc <udc_process_setup+0x3e0>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
   80caa:	4b1f      	ldr	r3, [pc, #124]	; (80d28 <udc_process_setup+0x40c>)
   80cac:	781b      	ldrb	r3, [r3, #0]
   80cae:	b1fb      	cbz	r3, 80cf0 <udc_process_setup+0x3d4>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   80cb0:	4b1e      	ldr	r3, [pc, #120]	; (80d2c <udc_process_setup+0x410>)
   80cb2:	681b      	ldr	r3, [r3, #0]
   80cb4:	681a      	ldr	r2, [r3, #0]
   80cb6:	7912      	ldrb	r2, [r2, #4]
   80cb8:	b1e2      	cbz	r2, 80cf4 <udc_process_setup+0x3d8>
   80cba:	2500      	movs	r5, #0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   80cbc:	4f21      	ldr	r7, [pc, #132]	; (80d44 <udc_process_setup+0x428>)
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   80cbe:	f8df 806c 	ldr.w	r8, [pc, #108]	; 80d2c <udc_process_setup+0x410>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
   80cc2:	685b      	ldr	r3, [r3, #4]
   80cc4:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   80cc8:	68f3      	ldr	r3, [r6, #12]
   80cca:	4798      	blx	r3
   80ccc:	4601      	mov	r1, r0
   80cce:	4628      	mov	r0, r5
   80cd0:	47b8      	blx	r7
   80cd2:	4604      	mov	r4, r0
   80cd4:	b1e0      	cbz	r0, 80d10 <udc_process_setup+0x3f4>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
   80cd6:	68b3      	ldr	r3, [r6, #8]
   80cd8:	4798      	blx	r3
   80cda:	4604      	mov	r4, r0
   80cdc:	b9c0      	cbnz	r0, 80d10 <udc_process_setup+0x3f4>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
   80cde:	3501      	adds	r5, #1
   80ce0:	b2ed      	uxtb	r5, r5
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   80ce2:	f8d8 3000 	ldr.w	r3, [r8]
   80ce6:	681a      	ldr	r2, [r3, #0]
   80ce8:	7912      	ldrb	r2, [r2, #4]
   80cea:	42aa      	cmp	r2, r5
   80cec:	d8e9      	bhi.n	80cc2 <udc_process_setup+0x3a6>
   80cee:	e00f      	b.n	80d10 <udc_process_setup+0x3f4>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
   80cf0:	2400      	movs	r4, #0
   80cf2:	e00d      	b.n	80d10 <udc_process_setup+0x3f4>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
   80cf4:	2400      	movs	r4, #0
   80cf6:	e00b      	b.n	80d10 <udc_process_setup+0x3f4>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
   80cf8:	2400      	movs	r4, #0
   80cfa:	e009      	b.n	80d10 <udc_process_setup+0x3f4>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
   80cfc:	2400      	movs	r4, #0
   80cfe:	e007      	b.n	80d10 <udc_process_setup+0x3f4>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
   80d00:	f013 0f60 	tst.w	r3, #96	; 0x60
   80d04:	d1a6      	bne.n	80c54 <udc_process_setup+0x338>
   80d06:	e6cb      	b.n	80aa0 <udc_process_setup+0x184>
   80d08:	f013 0f60 	tst.w	r3, #96	; 0x60
   80d0c:	d1a2      	bne.n	80c54 <udc_process_setup+0x338>
   80d0e:	e617      	b.n	80940 <udc_process_setup+0x24>
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
   80d10:	4620      	mov	r0, r4
   80d12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80d16:	bf00      	nop
   80d18:	20070d50 	.word	0x20070d50
   80d1c:	00081dd9 	.word	0x00081dd9
   80d20:	20070160 	.word	0x20070160
   80d24:	00080899 	.word	0x00080899
   80d28:	20070b94 	.word	0x20070b94
   80d2c:	20070b84 	.word	0x20070b84
   80d30:	0008083d 	.word	0x0008083d
   80d34:	000807d5 	.word	0x000807d5
   80d38:	00081f69 	.word	0x00081f69
   80d3c:	000822f5 	.word	0x000822f5
   80d40:	00081e81 	.word	0x00081e81
   80d44:	0008076d 	.word	0x0008076d

00080d48 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   80d48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80d4c:	460c      	mov	r4, r1
   80d4e:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
   80d50:	b960      	cbnz	r0, 80d6c <_read+0x24>
		return -1;
	}

	for (; len > 0; --len) {
   80d52:	2a00      	cmp	r2, #0
   80d54:	dd0e      	ble.n	80d74 <_read+0x2c>
   80d56:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   80d58:	4e09      	ldr	r6, [pc, #36]	; (80d80 <_read+0x38>)
   80d5a:	4d0a      	ldr	r5, [pc, #40]	; (80d84 <_read+0x3c>)
   80d5c:	6830      	ldr	r0, [r6, #0]
   80d5e:	4621      	mov	r1, r4
   80d60:	682b      	ldr	r3, [r5, #0]
   80d62:	4798      	blx	r3
		ptr++;
   80d64:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   80d66:	42bc      	cmp	r4, r7
   80d68:	d1f8      	bne.n	80d5c <_read+0x14>
   80d6a:	e006      	b.n	80d7a <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
   80d6c:	f04f 30ff 	mov.w	r0, #4294967295
   80d70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len > 0; --len) {
   80d74:	2000      	movs	r0, #0
   80d76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
   80d7a:	4640      	mov	r0, r8
	}
	return nChars;
}
   80d7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80d80:	20070d4c 	.word	0x20070d4c
   80d84:	20070d44 	.word	0x20070d44

00080d88 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   80d88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80d8c:	460e      	mov	r6, r1
   80d8e:	4615      	mov	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   80d90:	3801      	subs	r0, #1
   80d92:	2802      	cmp	r0, #2
   80d94:	d80f      	bhi.n	80db6 <_write+0x2e>
		return -1;
	}

	for (; len != 0; --len) {
   80d96:	b192      	cbz	r2, 80dbe <_write+0x36>
   80d98:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
   80d9a:	f8df 803c 	ldr.w	r8, [pc, #60]	; 80dd8 <_write+0x50>
   80d9e:	4f0d      	ldr	r7, [pc, #52]	; (80dd4 <_write+0x4c>)
   80da0:	f8d8 0000 	ldr.w	r0, [r8]
   80da4:	5d31      	ldrb	r1, [r6, r4]
   80da6:	683b      	ldr	r3, [r7, #0]
   80da8:	4798      	blx	r3
   80daa:	2800      	cmp	r0, #0
   80dac:	db0a      	blt.n	80dc4 <_write+0x3c>
			return -1;
		}
		++nChars;
   80dae:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   80db0:	42a5      	cmp	r5, r4
   80db2:	d1f5      	bne.n	80da0 <_write+0x18>
   80db4:	e00a      	b.n	80dcc <_write+0x44>
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
   80db6:	f04f 30ff 	mov.w	r0, #4294967295
   80dba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len != 0; --len) {
   80dbe:	2000      	movs	r0, #0
   80dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
   80dc4:	f04f 30ff 	mov.w	r0, #4294967295
   80dc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		++nChars;
   80dcc:	4620      	mov	r0, r4
	}
	return nChars;
}
   80dce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80dd2:	bf00      	nop
   80dd4:	20070d48 	.word	0x20070d48
   80dd8:	20070d4c 	.word	0x20070d4c

00080ddc <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   80ddc:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   80dde:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   80de2:	4b16      	ldr	r3, [pc, #88]	; (80e3c <board_init+0x60>)
   80de4:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   80de6:	200b      	movs	r0, #11
   80de8:	4c15      	ldr	r4, [pc, #84]	; (80e40 <board_init+0x64>)
   80dea:	47a0      	blx	r4
   80dec:	200c      	movs	r0, #12
   80dee:	47a0      	blx	r4
   80df0:	200d      	movs	r0, #13
   80df2:	47a0      	blx	r4
   80df4:	200e      	movs	r0, #14
   80df6:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   80df8:	203b      	movs	r0, #59	; 0x3b
   80dfa:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80dfe:	4c11      	ldr	r4, [pc, #68]	; (80e44 <board_init+0x68>)
   80e00:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   80e02:	2055      	movs	r0, #85	; 0x55
   80e04:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80e08:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   80e0a:	2056      	movs	r0, #86	; 0x56
   80e0c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80e10:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   80e12:	2068      	movs	r0, #104	; 0x68
   80e14:	490c      	ldr	r1, [pc, #48]	; (80e48 <board_init+0x6c>)
   80e16:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   80e18:	205c      	movs	r0, #92	; 0x5c
   80e1a:	490c      	ldr	r1, [pc, #48]	; (80e4c <board_init+0x70>)
   80e1c:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   80e1e:	480c      	ldr	r0, [pc, #48]	; (80e50 <board_init+0x74>)
   80e20:	f44f 7140 	mov.w	r1, #768	; 0x300
   80e24:	4a0b      	ldr	r2, [pc, #44]	; (80e54 <board_init+0x78>)
   80e26:	4b0c      	ldr	r3, [pc, #48]	; (80e58 <board_init+0x7c>)
   80e28:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   80e2a:	202b      	movs	r0, #43	; 0x2b
   80e2c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80e30:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   80e32:	202a      	movs	r0, #42	; 0x2a
   80e34:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80e38:	47a0      	blx	r4
   80e3a:	bd10      	pop	{r4, pc}
   80e3c:	400e1a50 	.word	0x400e1a50
   80e40:	00081205 	.word	0x00081205
   80e44:	00080f01 	.word	0x00080f01
   80e48:	28000079 	.word	0x28000079
   80e4c:	28000001 	.word	0x28000001
   80e50:	400e0e00 	.word	0x400e0e00
   80e54:	08000001 	.word	0x08000001
   80e58:	00080fd5 	.word	0x00080fd5

00080e5c <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   80e5c:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   80e5e:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   80e62:	d016      	beq.n	80e92 <pio_set_peripheral+0x36>
   80e64:	d804      	bhi.n	80e70 <pio_set_peripheral+0x14>
   80e66:	b1c1      	cbz	r1, 80e9a <pio_set_peripheral+0x3e>
   80e68:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   80e6c:	d00a      	beq.n	80e84 <pio_set_peripheral+0x28>
   80e6e:	e013      	b.n	80e98 <pio_set_peripheral+0x3c>
   80e70:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   80e74:	d011      	beq.n	80e9a <pio_set_peripheral+0x3e>
   80e76:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   80e7a:	d00e      	beq.n	80e9a <pio_set_peripheral+0x3e>
   80e7c:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   80e80:	d10a      	bne.n	80e98 <pio_set_peripheral+0x3c>
   80e82:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   80e84:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   80e86:	6f01      	ldr	r1, [r0, #112]	; 0x70
   80e88:	400b      	ands	r3, r1
   80e8a:	ea23 0302 	bic.w	r3, r3, r2
   80e8e:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   80e90:	e002      	b.n	80e98 <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   80e92:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   80e94:	4313      	orrs	r3, r2
   80e96:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   80e98:	6042      	str	r2, [r0, #4]
   80e9a:	4770      	bx	lr

00080e9c <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   80e9c:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80e9e:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   80ea2:	bf14      	ite	ne
   80ea4:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80ea6:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   80ea8:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   80eac:	bf14      	ite	ne
   80eae:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   80eb0:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   80eb2:	f012 0f02 	tst.w	r2, #2
   80eb6:	d002      	beq.n	80ebe <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   80eb8:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   80ebc:	e004      	b.n	80ec8 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   80ebe:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   80ec2:	bf18      	it	ne
   80ec4:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   80ec8:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   80eca:	6001      	str	r1, [r0, #0]
   80ecc:	4770      	bx	lr
   80ece:	bf00      	nop

00080ed0 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   80ed0:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   80ed2:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80ed4:	9c01      	ldr	r4, [sp, #4]
   80ed6:	b10c      	cbz	r4, 80edc <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   80ed8:	6641      	str	r1, [r0, #100]	; 0x64
   80eda:	e000      	b.n	80ede <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80edc:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   80ede:	b10b      	cbz	r3, 80ee4 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   80ee0:	6501      	str	r1, [r0, #80]	; 0x50
   80ee2:	e000      	b.n	80ee6 <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   80ee4:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   80ee6:	b10a      	cbz	r2, 80eec <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   80ee8:	6301      	str	r1, [r0, #48]	; 0x30
   80eea:	e000      	b.n	80eee <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   80eec:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   80eee:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   80ef0:	6001      	str	r1, [r0, #0]
}
   80ef2:	f85d 4b04 	ldr.w	r4, [sp], #4
   80ef6:	4770      	bx	lr

00080ef8 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   80ef8:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   80efa:	4770      	bx	lr

00080efc <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   80efc:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   80efe:	4770      	bx	lr

00080f00 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   80f00:	b570      	push	{r4, r5, r6, lr}
   80f02:	b082      	sub	sp, #8
   80f04:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   80f06:	0944      	lsrs	r4, r0, #5
   80f08:	f504 1400 	add.w	r4, r4, #2097152	; 0x200000
   80f0c:	f204 7407 	addw	r4, r4, #1799	; 0x707
   80f10:	0266      	lsls	r6, r4, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   80f12:	f001 44f0 	and.w	r4, r1, #2013265920	; 0x78000000
   80f16:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   80f1a:	d030      	beq.n	80f7e <pio_configure_pin+0x7e>
   80f1c:	d806      	bhi.n	80f2c <pio_configure_pin+0x2c>
   80f1e:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   80f22:	d00a      	beq.n	80f3a <pio_configure_pin+0x3a>
   80f24:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   80f28:	d018      	beq.n	80f5c <pio_configure_pin+0x5c>
   80f2a:	e049      	b.n	80fc0 <pio_configure_pin+0xc0>
   80f2c:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   80f30:	d030      	beq.n	80f94 <pio_configure_pin+0x94>
   80f32:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   80f36:	d02d      	beq.n	80f94 <pio_configure_pin+0x94>
   80f38:	e042      	b.n	80fc0 <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   80f3a:	f000 001f 	and.w	r0, r0, #31
   80f3e:	2401      	movs	r4, #1
   80f40:	4084      	lsls	r4, r0
   80f42:	4630      	mov	r0, r6
   80f44:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80f48:	4622      	mov	r2, r4
   80f4a:	4b1f      	ldr	r3, [pc, #124]	; (80fc8 <pio_configure_pin+0xc8>)
   80f4c:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80f4e:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80f52:	bf14      	ite	ne
   80f54:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80f56:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80f58:	2001      	movs	r0, #1
   80f5a:	e032      	b.n	80fc2 <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   80f5c:	f000 001f 	and.w	r0, r0, #31
   80f60:	2401      	movs	r4, #1
   80f62:	4084      	lsls	r4, r0
   80f64:	4630      	mov	r0, r6
   80f66:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80f6a:	4622      	mov	r2, r4
   80f6c:	4b16      	ldr	r3, [pc, #88]	; (80fc8 <pio_configure_pin+0xc8>)
   80f6e:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80f70:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80f74:	bf14      	ite	ne
   80f76:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80f78:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80f7a:	2001      	movs	r0, #1
   80f7c:	e021      	b.n	80fc2 <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   80f7e:	f000 011f 	and.w	r1, r0, #31
   80f82:	2401      	movs	r4, #1
   80f84:	4630      	mov	r0, r6
   80f86:	fa04 f101 	lsl.w	r1, r4, r1
   80f8a:	462a      	mov	r2, r5
   80f8c:	4b0f      	ldr	r3, [pc, #60]	; (80fcc <pio_configure_pin+0xcc>)
   80f8e:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80f90:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   80f92:	e016      	b.n	80fc2 <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80f94:	f000 011f 	and.w	r1, r0, #31
   80f98:	2401      	movs	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80f9a:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80f9e:	ea05 0304 	and.w	r3, r5, r4
   80fa2:	9300      	str	r3, [sp, #0]
   80fa4:	4630      	mov	r0, r6
   80fa6:	fa04 f101 	lsl.w	r1, r4, r1
   80faa:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80fae:	bf14      	ite	ne
   80fb0:	2200      	movne	r2, #0
   80fb2:	2201      	moveq	r2, #1
   80fb4:	f3c5 0380 	ubfx	r3, r5, #2, #1
   80fb8:	4d05      	ldr	r5, [pc, #20]	; (80fd0 <pio_configure_pin+0xd0>)
   80fba:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
   80fbc:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   80fbe:	e000      	b.n	80fc2 <pio_configure_pin+0xc2>

	default:
		return 0;
   80fc0:	2000      	movs	r0, #0
	}

	return 1;
}
   80fc2:	b002      	add	sp, #8
   80fc4:	bd70      	pop	{r4, r5, r6, pc}
   80fc6:	bf00      	nop
   80fc8:	00080e5d 	.word	0x00080e5d
   80fcc:	00080e9d 	.word	0x00080e9d
   80fd0:	00080ed1 	.word	0x00080ed1

00080fd4 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   80fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
   80fd6:	b083      	sub	sp, #12
   80fd8:	4607      	mov	r7, r0
   80fda:	460e      	mov	r6, r1
   80fdc:	4615      	mov	r5, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   80fde:	f002 44f0 	and.w	r4, r2, #2013265920	; 0x78000000
   80fe2:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   80fe6:	d026      	beq.n	81036 <pio_configure_pin_group+0x62>
   80fe8:	d806      	bhi.n	80ff8 <pio_configure_pin_group+0x24>
   80fea:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   80fee:	d00a      	beq.n	81006 <pio_configure_pin_group+0x32>
   80ff0:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   80ff4:	d013      	beq.n	8101e <pio_configure_pin_group+0x4a>
   80ff6:	e034      	b.n	81062 <pio_configure_pin_group+0x8e>
   80ff8:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   80ffc:	d01f      	beq.n	8103e <pio_configure_pin_group+0x6a>
   80ffe:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   81002:	d01c      	beq.n	8103e <pio_configure_pin_group+0x6a>
   81004:	e02d      	b.n	81062 <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   81006:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8100a:	4632      	mov	r2, r6
   8100c:	4b16      	ldr	r3, [pc, #88]	; (81068 <pio_configure_pin_group+0x94>)
   8100e:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   81010:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   81014:	bf14      	ite	ne
   81016:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81018:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   8101a:	2001      	movs	r0, #1
   8101c:	e022      	b.n	81064 <pio_configure_pin_group+0x90>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   8101e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   81022:	4632      	mov	r2, r6
   81024:	4b10      	ldr	r3, [pc, #64]	; (81068 <pio_configure_pin_group+0x94>)
   81026:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   81028:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   8102c:	bf14      	ite	ne
   8102e:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81030:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   81032:	2001      	movs	r0, #1
   81034:	e016      	b.n	81064 <pio_configure_pin_group+0x90>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   81036:	4b0d      	ldr	r3, [pc, #52]	; (8106c <pio_configure_pin_group+0x98>)
   81038:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   8103a:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   8103c:	e012      	b.n	81064 <pio_configure_pin_group+0x90>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   8103e:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   81042:	f005 0301 	and.w	r3, r5, #1
   81046:	9300      	str	r3, [sp, #0]
   81048:	4638      	mov	r0, r7
   8104a:	4631      	mov	r1, r6
   8104c:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   81050:	bf14      	ite	ne
   81052:	2200      	movne	r2, #0
   81054:	2201      	moveq	r2, #1
   81056:	f3c5 0380 	ubfx	r3, r5, #2, #1
   8105a:	4c05      	ldr	r4, [pc, #20]	; (81070 <pio_configure_pin_group+0x9c>)
   8105c:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   8105e:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   81060:	e000      	b.n	81064 <pio_configure_pin_group+0x90>

	default:
		return 0;
   81062:	2000      	movs	r0, #0
	}

	return 1;
}
   81064:	b003      	add	sp, #12
   81066:	bdf0      	pop	{r4, r5, r6, r7, pc}
   81068:	00080e5d 	.word	0x00080e5d
   8106c:	00080e9d 	.word	0x00080e9d
   81070:	00080ed1 	.word	0x00080ed1

00081074 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   81074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81078:	4604      	mov	r4, r0
   8107a:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   8107c:	4b10      	ldr	r3, [pc, #64]	; (810c0 <pio_handler_process+0x4c>)
   8107e:	4798      	blx	r3
   81080:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   81082:	4620      	mov	r0, r4
   81084:	4b0f      	ldr	r3, [pc, #60]	; (810c4 <pio_handler_process+0x50>)
   81086:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   81088:	4005      	ands	r5, r0
   8108a:	d017      	beq.n	810bc <pio_handler_process+0x48>
   8108c:	4f0e      	ldr	r7, [pc, #56]	; (810c8 <pio_handler_process+0x54>)
   8108e:	f107 040c 	add.w	r4, r7, #12
   81092:	376c      	adds	r7, #108	; 0x6c
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   81094:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   81098:	42b3      	cmp	r3, r6
   8109a:	d10a      	bne.n	810b2 <pio_handler_process+0x3e>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   8109c:	f854 1c08 	ldr.w	r1, [r4, #-8]
   810a0:	4229      	tst	r1, r5
   810a2:	d006      	beq.n	810b2 <pio_handler_process+0x3e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   810a4:	6823      	ldr	r3, [r4, #0]
   810a6:	4630      	mov	r0, r6
   810a8:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   810aa:	f854 3c08 	ldr.w	r3, [r4, #-8]
   810ae:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   810b2:	42bc      	cmp	r4, r7
   810b4:	d002      	beq.n	810bc <pio_handler_process+0x48>
   810b6:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   810b8:	2d00      	cmp	r5, #0
   810ba:	d1eb      	bne.n	81094 <pio_handler_process+0x20>
   810bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   810c0:	00080ef9 	.word	0x00080ef9
   810c4:	00080efd 	.word	0x00080efd
   810c8:	20070b9c 	.word	0x20070b9c

000810cc <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   810cc:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   810ce:	4802      	ldr	r0, [pc, #8]	; (810d8 <PIOA_Handler+0xc>)
   810d0:	210b      	movs	r1, #11
   810d2:	4b02      	ldr	r3, [pc, #8]	; (810dc <PIOA_Handler+0x10>)
   810d4:	4798      	blx	r3
   810d6:	bd08      	pop	{r3, pc}
   810d8:	400e0e00 	.word	0x400e0e00
   810dc:	00081075 	.word	0x00081075

000810e0 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   810e0:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   810e2:	4802      	ldr	r0, [pc, #8]	; (810ec <PIOB_Handler+0xc>)
   810e4:	210c      	movs	r1, #12
   810e6:	4b02      	ldr	r3, [pc, #8]	; (810f0 <PIOB_Handler+0x10>)
   810e8:	4798      	blx	r3
   810ea:	bd08      	pop	{r3, pc}
   810ec:	400e1000 	.word	0x400e1000
   810f0:	00081075 	.word	0x00081075

000810f4 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   810f4:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   810f6:	4802      	ldr	r0, [pc, #8]	; (81100 <PIOC_Handler+0xc>)
   810f8:	210d      	movs	r1, #13
   810fa:	4b02      	ldr	r3, [pc, #8]	; (81104 <PIOC_Handler+0x10>)
   810fc:	4798      	blx	r3
   810fe:	bd08      	pop	{r3, pc}
   81100:	400e1200 	.word	0x400e1200
   81104:	00081075 	.word	0x00081075

00081108 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   81108:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   8110a:	4802      	ldr	r0, [pc, #8]	; (81114 <PIOD_Handler+0xc>)
   8110c:	210e      	movs	r1, #14
   8110e:	4b02      	ldr	r3, [pc, #8]	; (81118 <PIOD_Handler+0x10>)
   81110:	4798      	blx	r3
   81112:	bd08      	pop	{r3, pc}
   81114:	400e1400 	.word	0x400e1400
   81118:	00081075 	.word	0x00081075

0008111c <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   8111c:	4b17      	ldr	r3, [pc, #92]	; (8117c <pmc_switch_mck_to_pllack+0x60>)
   8111e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   81120:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   81124:	4310      	orrs	r0, r2
   81126:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81128:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8112a:	f013 0f08 	tst.w	r3, #8
   8112e:	d109      	bne.n	81144 <pmc_switch_mck_to_pllack+0x28>
   81130:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81134:	4911      	ldr	r1, [pc, #68]	; (8117c <pmc_switch_mck_to_pllack+0x60>)
   81136:	e001      	b.n	8113c <pmc_switch_mck_to_pllack+0x20>
			--ul_timeout) {
		if (ul_timeout == 0) {
   81138:	3b01      	subs	r3, #1
   8113a:	d019      	beq.n	81170 <pmc_switch_mck_to_pllack+0x54>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8113c:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   8113e:	f012 0f08 	tst.w	r2, #8
   81142:	d0f9      	beq.n	81138 <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   81144:	4b0d      	ldr	r3, [pc, #52]	; (8117c <pmc_switch_mck_to_pllack+0x60>)
   81146:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   81148:	f022 0203 	bic.w	r2, r2, #3
   8114c:	f042 0202 	orr.w	r2, r2, #2
   81150:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81152:	6e98      	ldr	r0, [r3, #104]	; 0x68
   81154:	f010 0008 	ands.w	r0, r0, #8
   81158:	d10c      	bne.n	81174 <pmc_switch_mck_to_pllack+0x58>
   8115a:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8115e:	4907      	ldr	r1, [pc, #28]	; (8117c <pmc_switch_mck_to_pllack+0x60>)
   81160:	e001      	b.n	81166 <pmc_switch_mck_to_pllack+0x4a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   81162:	3b01      	subs	r3, #1
   81164:	d008      	beq.n	81178 <pmc_switch_mck_to_pllack+0x5c>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81166:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   81168:	f012 0f08 	tst.w	r2, #8
   8116c:	d0f9      	beq.n	81162 <pmc_switch_mck_to_pllack+0x46>
   8116e:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   81170:	2001      	movs	r0, #1
   81172:	4770      	bx	lr
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   81174:	2000      	movs	r0, #0
   81176:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   81178:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   8117a:	4770      	bx	lr
   8117c:	400e0600 	.word	0x400e0600

00081180 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   81180:	b138      	cbz	r0, 81192 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   81182:	4911      	ldr	r1, [pc, #68]	; (811c8 <pmc_switch_mainck_to_xtal+0x48>)
   81184:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   81186:	4a11      	ldr	r2, [pc, #68]	; (811cc <pmc_switch_mainck_to_xtal+0x4c>)
   81188:	401a      	ands	r2, r3
   8118a:	4b11      	ldr	r3, [pc, #68]	; (811d0 <pmc_switch_mainck_to_xtal+0x50>)
   8118c:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   8118e:	620b      	str	r3, [r1, #32]
   81190:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   81192:	4a0d      	ldr	r2, [pc, #52]	; (811c8 <pmc_switch_mainck_to_xtal+0x48>)
   81194:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   81196:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   8119a:	f023 0303 	bic.w	r3, r3, #3
   8119e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   811a2:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   811a6:	0209      	lsls	r1, r1, #8
   811a8:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   811aa:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   811ac:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   811ae:	6e93      	ldr	r3, [r2, #104]	; 0x68
   811b0:	f013 0f01 	tst.w	r3, #1
   811b4:	d0fb      	beq.n	811ae <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   811b6:	4a04      	ldr	r2, [pc, #16]	; (811c8 <pmc_switch_mainck_to_xtal+0x48>)
   811b8:	6a13      	ldr	r3, [r2, #32]
   811ba:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   811be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   811c2:	6213      	str	r3, [r2, #32]
   811c4:	4770      	bx	lr
   811c6:	bf00      	nop
   811c8:	400e0600 	.word	0x400e0600
   811cc:	fec8fffc 	.word	0xfec8fffc
   811d0:	01370002 	.word	0x01370002

000811d4 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   811d4:	4b02      	ldr	r3, [pc, #8]	; (811e0 <pmc_osc_is_ready_mainck+0xc>)
   811d6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   811d8:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   811dc:	4770      	bx	lr
   811de:	bf00      	nop
   811e0:	400e0600 	.word	0x400e0600

000811e4 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   811e4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   811e8:	4b01      	ldr	r3, [pc, #4]	; (811f0 <pmc_disable_pllack+0xc>)
   811ea:	629a      	str	r2, [r3, #40]	; 0x28
   811ec:	4770      	bx	lr
   811ee:	bf00      	nop
   811f0:	400e0600 	.word	0x400e0600

000811f4 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   811f4:	4b02      	ldr	r3, [pc, #8]	; (81200 <pmc_is_locked_pllack+0xc>)
   811f6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   811f8:	f000 0002 	and.w	r0, r0, #2
   811fc:	4770      	bx	lr
   811fe:	bf00      	nop
   81200:	400e0600 	.word	0x400e0600

00081204 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   81204:	282c      	cmp	r0, #44	; 0x2c
   81206:	d820      	bhi.n	8124a <pmc_enable_periph_clk+0x46>
		return 1;
	}

	if (ul_id < 32) {
   81208:	281f      	cmp	r0, #31
   8120a:	d80d      	bhi.n	81228 <pmc_enable_periph_clk+0x24>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   8120c:	4b12      	ldr	r3, [pc, #72]	; (81258 <pmc_enable_periph_clk+0x54>)
   8120e:	699a      	ldr	r2, [r3, #24]
   81210:	2301      	movs	r3, #1
   81212:	4083      	lsls	r3, r0
   81214:	401a      	ands	r2, r3
   81216:	4293      	cmp	r3, r2
   81218:	d019      	beq.n	8124e <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER0 = 1 << ul_id;
   8121a:	2301      	movs	r3, #1
   8121c:	fa03 f000 	lsl.w	r0, r3, r0
   81220:	4b0d      	ldr	r3, [pc, #52]	; (81258 <pmc_enable_periph_clk+0x54>)
   81222:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   81224:	2000      	movs	r0, #0
   81226:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   81228:	4b0b      	ldr	r3, [pc, #44]	; (81258 <pmc_enable_periph_clk+0x54>)
   8122a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
   8122e:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   81230:	2301      	movs	r3, #1
   81232:	4083      	lsls	r3, r0
   81234:	401a      	ands	r2, r3
   81236:	4293      	cmp	r3, r2
   81238:	d00b      	beq.n	81252 <pmc_enable_periph_clk+0x4e>
			PMC->PMC_PCER1 = 1 << ul_id;
   8123a:	2301      	movs	r3, #1
   8123c:	fa03 f000 	lsl.w	r0, r3, r0
   81240:	4b05      	ldr	r3, [pc, #20]	; (81258 <pmc_enable_periph_clk+0x54>)
   81242:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   81246:	2000      	movs	r0, #0
   81248:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   8124a:	2001      	movs	r0, #1
   8124c:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   8124e:	2000      	movs	r0, #0
   81250:	4770      	bx	lr
   81252:	2000      	movs	r0, #0
}
   81254:	4770      	bx	lr
   81256:	bf00      	nop
   81258:	400e0600 	.word	0x400e0600

0008125c <pmc_is_wakeup_clocks_restored>:
	}
}

bool pmc_is_wakeup_clocks_restored(void)
{
	return !b_is_sleep_clock_used;
   8125c:	4b02      	ldr	r3, [pc, #8]	; (81268 <pmc_is_wakeup_clocks_restored+0xc>)
   8125e:	7818      	ldrb	r0, [r3, #0]
}
   81260:	f080 0001 	eor.w	r0, r0, #1
   81264:	4770      	bx	lr
   81266:	bf00      	nop
   81268:	20070c0c 	.word	0x20070c0c

0008126c <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   8126c:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   8126e:	23ac      	movs	r3, #172	; 0xac
   81270:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   81272:	680a      	ldr	r2, [r1, #0]
   81274:	684b      	ldr	r3, [r1, #4]
   81276:	fbb2 f3f3 	udiv	r3, r2, r3
   8127a:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   8127c:	1e5c      	subs	r4, r3, #1
   8127e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   81282:	4294      	cmp	r4, r2
   81284:	d80a      	bhi.n	8129c <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
   81286:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   81288:	688b      	ldr	r3, [r1, #8]
   8128a:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   8128c:	f240 2302 	movw	r3, #514	; 0x202
   81290:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   81294:	2350      	movs	r3, #80	; 0x50
   81296:	6003      	str	r3, [r0, #0]

	return 0;
   81298:	2000      	movs	r0, #0
   8129a:	e000      	b.n	8129e <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
   8129c:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
   8129e:	f85d 4b04 	ldr.w	r4, [sp], #4
   812a2:	4770      	bx	lr

000812a4 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   812a4:	6943      	ldr	r3, [r0, #20]
   812a6:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   812aa:	bf1a      	itte	ne
   812ac:	61c1      	strne	r1, [r0, #28]
	return 0;
   812ae:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
   812b0:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
   812b2:	4770      	bx	lr

000812b4 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   812b4:	6943      	ldr	r3, [r0, #20]
   812b6:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   812ba:	bf1d      	ittte	ne
   812bc:	6983      	ldrne	r3, [r0, #24]
   812be:	700b      	strbne	r3, [r1, #0]
	return 0;
   812c0:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
   812c2:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
   812c4:	4770      	bx	lr
   812c6:	bf00      	nop

000812c8 <udd_ctrl_init>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   812c8:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   812cc:	b672      	cpsid	i
   812ce:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   812d2:	2100      	movs	r1, #0
   812d4:	4a0a      	ldr	r2, [pc, #40]	; (81300 <udd_ctrl_init+0x38>)
   812d6:	7011      	strb	r1, [r2, #0]
	// In case of abort of IN Data Phase:
	// No need to abort IN transfer (rise TXINI),
	// because it is automatically done by hardware when a Setup packet is received.
	// But the interrupt must be disabled to don't generate interrupt TXINI
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
   812d8:	2101      	movs	r1, #1
   812da:	4a0a      	ldr	r2, [pc, #40]	; (81304 <udd_ctrl_init+0x3c>)
   812dc:	6011      	str	r1, [r2, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   812de:	b923      	cbnz	r3, 812ea <udd_ctrl_init+0x22>
		cpu_irq_enable();
   812e0:	4b07      	ldr	r3, [pc, #28]	; (81300 <udd_ctrl_init+0x38>)
   812e2:	7019      	strb	r1, [r3, #0]
   812e4:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   812e8:	b662      	cpsie	i
	cpu_irq_restore(flags);

	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);
   812ea:	2202      	movs	r2, #2
   812ec:	4b06      	ldr	r3, [pc, #24]	; (81308 <udd_ctrl_init+0x40>)
   812ee:	601a      	str	r2, [r3, #0]

	udd_g_ctrlreq.callback = NULL;
   812f0:	4a06      	ldr	r2, [pc, #24]	; (8130c <udd_ctrl_init+0x44>)
   812f2:	2300      	movs	r3, #0
   812f4:	6113      	str	r3, [r2, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   812f6:	6153      	str	r3, [r2, #20]
	udd_g_ctrlreq.payload_size = 0;
   812f8:	8193      	strh	r3, [r2, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
   812fa:	4a05      	ldr	r2, [pc, #20]	; (81310 <udd_ctrl_init+0x48>)
   812fc:	7013      	strb	r3, [r2, #0]
   812fe:	4770      	bx	lr
   81300:	200701d8 	.word	0x200701d8
   81304:	400ac220 	.word	0x400ac220
   81308:	400ac160 	.word	0x400ac160
   8130c:	20070d50 	.word	0x20070d50
   81310:	20070c5c 	.word	0x20070c5c

00081314 <udd_ctrl_stall_data>:


static void udd_ctrl_stall_data(void)
{
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   81314:	2205      	movs	r2, #5
   81316:	4b03      	ldr	r3, [pc, #12]	; (81324 <udd_ctrl_stall_data+0x10>)
   81318:	701a      	strb	r2, [r3, #0]
	udd_enable_stall_handshake(0);
   8131a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   8131e:	4b02      	ldr	r3, [pc, #8]	; (81328 <udd_ctrl_stall_data+0x14>)
   81320:	601a      	str	r2, [r3, #0]
   81322:	4770      	bx	lr
   81324:	20070c5c 	.word	0x20070c5c
   81328:	400ac1f0 	.word	0x400ac1f0

0008132c <udd_ctrl_send_zlp_in>:

static void udd_ctrl_send_zlp_in(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
   8132c:	2203      	movs	r2, #3
   8132e:	4b0d      	ldr	r3, [pc, #52]	; (81364 <udd_ctrl_send_zlp_in+0x38>)
   81330:	701a      	strb	r2, [r3, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   81332:	f3ef 8010 	mrs	r0, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   81336:	b672      	cpsid	i
   81338:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   8133c:	2200      	movs	r2, #0
   8133e:	4b0a      	ldr	r3, [pc, #40]	; (81368 <udd_ctrl_send_zlp_in+0x3c>)
   81340:	701a      	strb	r2, [r3, #0]

	// Validate and send empty IN packet on control endpoint
	flags = cpu_irq_save();
	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
   81342:	490a      	ldr	r1, [pc, #40]	; (8136c <udd_ctrl_send_zlp_in+0x40>)
   81344:	2201      	movs	r2, #1
   81346:	600a      	str	r2, [r1, #0]
	udd_enable_in_send_interrupt(0);
   81348:	4b09      	ldr	r3, [pc, #36]	; (81370 <udd_ctrl_send_zlp_in+0x44>)
   8134a:	601a      	str	r2, [r3, #0]
	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
   8134c:	2208      	movs	r2, #8
   8134e:	600a      	str	r2, [r1, #0]
	udd_enable_nak_out_interrupt(0);
   81350:	601a      	str	r2, [r3, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   81352:	b928      	cbnz	r0, 81360 <udd_ctrl_send_zlp_in+0x34>
		cpu_irq_enable();
   81354:	2201      	movs	r2, #1
   81356:	4b04      	ldr	r3, [pc, #16]	; (81368 <udd_ctrl_send_zlp_in+0x3c>)
   81358:	701a      	strb	r2, [r3, #0]
   8135a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   8135e:	b662      	cpsie	i
   81360:	4770      	bx	lr
   81362:	bf00      	nop
   81364:	20070c5c 	.word	0x20070c5c
   81368:	200701d8 	.word	0x200701d8
   8136c:	400ac160 	.word	0x400ac160
   81370:	400ac1f0 	.word	0x400ac1f0

00081374 <udd_ctrl_endofrequest>:
	cpu_irq_restore(flags);
}


static void udd_ctrl_endofrequest(void)
{
   81374:	b508      	push	{r3, lr}
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
   81376:	4b02      	ldr	r3, [pc, #8]	; (81380 <udd_ctrl_endofrequest+0xc>)
   81378:	691b      	ldr	r3, [r3, #16]
   8137a:	b103      	cbz	r3, 8137e <udd_ctrl_endofrequest+0xa>
		udd_g_ctrlreq.callback();
   8137c:	4798      	blx	r3
   8137e:	bd08      	pop	{r3, pc}
   81380:	20070d50 	.word	0x20070d50

00081384 <udd_ctrl_in_sent>:
	}
}


static void udd_ctrl_in_sent(void)
{
   81384:	b538      	push	{r3, r4, r5, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   81386:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   8138a:	b672      	cpsid	i
   8138c:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   81390:	2100      	movs	r1, #0
   81392:	4a48      	ldr	r2, [pc, #288]	; (814b4 <udd_ctrl_in_sent+0x130>)
   81394:	7011      	strb	r1, [r2, #0]
	uint8_t i;
	uint8_t *ptr_dest, *ptr_src;
	irqflags_t flags;

	flags = cpu_irq_save();
	udd_disable_in_send_interrupt(0);
   81396:	2101      	movs	r1, #1
   81398:	4a47      	ldr	r2, [pc, #284]	; (814b8 <udd_ctrl_in_sent+0x134>)
   8139a:	6011      	str	r1, [r2, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   8139c:	b923      	cbnz	r3, 813a8 <udd_ctrl_in_sent+0x24>
		cpu_irq_enable();
   8139e:	4b45      	ldr	r3, [pc, #276]	; (814b4 <udd_ctrl_in_sent+0x130>)
   813a0:	7019      	strb	r1, [r3, #0]
   813a2:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   813a6:	b662      	cpsie	i
	cpu_irq_restore(flags);

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   813a8:	4b44      	ldr	r3, [pc, #272]	; (814bc <udd_ctrl_in_sent+0x138>)
   813aa:	781b      	ldrb	r3, [r3, #0]
   813ac:	2b03      	cmp	r3, #3
   813ae:	d104      	bne.n	813ba <udd_ctrl_in_sent+0x36>
		// ZLP on IN is sent, then valid end of setup request
		udd_ctrl_endofrequest();
   813b0:	4b43      	ldr	r3, [pc, #268]	; (814c0 <udd_ctrl_in_sent+0x13c>)
   813b2:	4798      	blx	r3
		// Reinitializes control endpoint management
		udd_ctrl_init();
   813b4:	4b43      	ldr	r3, [pc, #268]	; (814c4 <udd_ctrl_in_sent+0x140>)
   813b6:	4798      	blx	r3
		return;
   813b8:	bd38      	pop	{r3, r4, r5, pc}
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_IN);

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   813ba:	4b43      	ldr	r3, [pc, #268]	; (814c8 <udd_ctrl_in_sent+0x144>)
   813bc:	881b      	ldrh	r3, [r3, #0]
   813be:	4a43      	ldr	r2, [pc, #268]	; (814cc <udd_ctrl_in_sent+0x148>)
   813c0:	8994      	ldrh	r4, [r2, #12]
   813c2:	1ae4      	subs	r4, r4, r3
   813c4:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
   813c6:	2c00      	cmp	r4, #0
   813c8:	d12e      	bne.n	81428 <udd_ctrl_in_sent+0xa4>
		// All content of current buffer payload are sent
		// Update number of total data sending by previous playlaod buffer
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   813ca:	4a41      	ldr	r2, [pc, #260]	; (814d0 <udd_ctrl_in_sent+0x14c>)
   813cc:	8811      	ldrh	r1, [r2, #0]
   813ce:	440b      	add	r3, r1
   813d0:	b29b      	uxth	r3, r3
   813d2:	8013      	strh	r3, [r2, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_buf_cnt)
   813d4:	4a3d      	ldr	r2, [pc, #244]	; (814cc <udd_ctrl_in_sent+0x148>)
   813d6:	88d2      	ldrh	r2, [r2, #6]
   813d8:	429a      	cmp	r2, r3
   813da:	d002      	beq.n	813e2 <udd_ctrl_in_sent+0x5e>
					|| b_shortpacket) {
   813dc:	4b3d      	ldr	r3, [pc, #244]	; (814d4 <udd_ctrl_in_sent+0x150>)
   813de:	781b      	ldrb	r3, [r3, #0]
   813e0:	b1c3      	cbz	r3, 81414 <udd_ctrl_in_sent+0x90>

static void udd_ctrl_send_zlp_out(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   813e2:	2204      	movs	r2, #4
   813e4:	4b35      	ldr	r3, [pc, #212]	; (814bc <udd_ctrl_in_sent+0x138>)
   813e6:	701a      	strb	r2, [r3, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   813e8:	f3ef 8210 	mrs	r2, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   813ec:	b672      	cpsid	i
   813ee:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   813f2:	2100      	movs	r1, #0
   813f4:	4b2f      	ldr	r3, [pc, #188]	; (814b4 <udd_ctrl_in_sent+0x130>)
   813f6:	7019      	strb	r1, [r3, #0]
	// No action is necessary to accept OUT ZLP
	// because the buffer of control endpoint is already free

	// To detect a protocol error, enable nak interrupt on data IN phase
	flags = cpu_irq_save();
	udd_ack_nak_in(0);
   813f8:	2310      	movs	r3, #16
   813fa:	4937      	ldr	r1, [pc, #220]	; (814d8 <udd_ctrl_in_sent+0x154>)
   813fc:	600b      	str	r3, [r1, #0]
	udd_enable_nak_in_interrupt(0);
   813fe:	3190      	adds	r1, #144	; 0x90
   81400:	600b      	str	r3, [r1, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   81402:	2a00      	cmp	r2, #0
   81404:	d155      	bne.n	814b2 <udd_ctrl_in_sent+0x12e>
		cpu_irq_enable();
   81406:	2201      	movs	r2, #1
   81408:	4b2a      	ldr	r3, [pc, #168]	; (814b4 <udd_ctrl_in_sent+0x130>)
   8140a:	701a      	strb	r2, [r3, #0]
   8140c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   81410:	b662      	cpsie	i
   81412:	bd38      	pop	{r3, r4, r5, pc}
			// Generate an OUT ZLP for handshake phase.
			udd_ctrl_send_zlp_out();
			return;
		}
		// Need of new buffer because the data phase is not complete
		if ((!udd_g_ctrlreq.over_under_run)
   81414:	4b2d      	ldr	r3, [pc, #180]	; (814cc <udd_ctrl_in_sent+0x148>)
   81416:	695b      	ldr	r3, [r3, #20]
   81418:	b16b      	cbz	r3, 81436 <udd_ctrl_in_sent+0xb2>
				|| (!udd_g_ctrlreq.over_under_run())) {
   8141a:	4798      	blx	r3
   8141c:	b158      	cbz	r0, 81436 <udd_ctrl_in_sent+0xb2>
			// Underrun then send zlp on IN
			// Here nb_remain=0 and allows to send a IN ZLP
		} else {
			// A new payload buffer is given
			udd_ctrl_payload_buf_cnt = 0;
   8141e:	2200      	movs	r2, #0
   81420:	4b29      	ldr	r3, [pc, #164]	; (814c8 <udd_ctrl_in_sent+0x144>)
   81422:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
   81424:	4b29      	ldr	r3, [pc, #164]	; (814cc <udd_ctrl_in_sent+0x148>)
   81426:	899c      	ldrh	r4, [r3, #12]
		}
	}
	// Continue transfer and send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
   81428:	2c3f      	cmp	r4, #63	; 0x3f
   8142a:	d904      	bls.n	81436 <udd_ctrl_in_sent+0xb2>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
		b_shortpacket = false;
   8142c:	2200      	movs	r2, #0
   8142e:	4b29      	ldr	r3, [pc, #164]	; (814d4 <udd_ctrl_in_sent+0x150>)
   81430:	701a      	strb	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
		}
	}
	// Continue transfer and send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
   81432:	2440      	movs	r4, #64	; 0x40
   81434:	e002      	b.n	8143c <udd_ctrl_in_sent+0xb8>
		b_shortpacket = false;
	} else {
		b_shortpacket = true;
   81436:	2201      	movs	r2, #1
   81438:	4b26      	ldr	r3, [pc, #152]	; (814d4 <udd_ctrl_in_sent+0x150>)
   8143a:	701a      	strb	r2, [r3, #0]
	}
	// Fill buffer of endpoint control
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   8143c:	4b23      	ldr	r3, [pc, #140]	; (814cc <udd_ctrl_in_sent+0x148>)
   8143e:	689d      	ldr	r5, [r3, #8]
   81440:	4b21      	ldr	r3, [pc, #132]	; (814c8 <udd_ctrl_in_sent+0x144>)
   81442:	881a      	ldrh	r2, [r3, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   81444:	f3ef 8010 	mrs	r0, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
   81448:	f1d0 0001 	rsbs	r0, r0, #1
   8144c:	bf38      	it	cc
   8144e:	2000      	movcc	r0, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   81450:	b672      	cpsid	i
   81452:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   81456:	2100      	movs	r1, #0
   81458:	4b16      	ldr	r3, [pc, #88]	; (814b4 <udd_ctrl_in_sent+0x130>)
   8145a:	7019      	strb	r1, [r3, #0]
	// a next setup reception in same endpoint 0 DPRAM.
	// Thereby, an OUT ZLP reception must check before IN data write
	// and if no OUT ZLP is recevied the data must be written quickly (800us)
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
	if (Is_udd_out_received(0)) {
   8145c:	4b1f      	ldr	r3, [pc, #124]	; (814dc <udd_ctrl_in_sent+0x158>)
   8145e:	681b      	ldr	r3, [r3, #0]
   81460:	f013 0f02 	tst.w	r3, #2
   81464:	d101      	bne.n	8146a <udd_ctrl_in_sent+0xe6>
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
   81466:	b95c      	cbnz	r4, 81480 <udd_ctrl_in_sent+0xfc>
   81468:	e013      	b.n	81492 <udd_ctrl_in_sent+0x10e>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   8146a:	b128      	cbz	r0, 81478 <udd_ctrl_in_sent+0xf4>
		cpu_irq_enable();
   8146c:	2201      	movs	r2, #1
   8146e:	4b11      	ldr	r3, [pc, #68]	; (814b4 <udd_ctrl_in_sent+0x130>)
   81470:	701a      	strb	r2, [r3, #0]
   81472:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   81476:	b662      	cpsie	i
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
	if (Is_udd_out_received(0)) {
		// IN DATA phase aborted by OUT ZLP
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   81478:	2204      	movs	r2, #4
   8147a:	4b10      	ldr	r3, [pc, #64]	; (814bc <udd_ctrl_in_sent+0x138>)
   8147c:	701a      	strb	r2, [r3, #0]
		return; // Exit of IN DATA phase
   8147e:	bd38      	pop	{r3, r4, r5, pc}
	} else {
		b_shortpacket = true;
	}
	// Fill buffer of endpoint control
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   81480:	442a      	add	r2, r5
   81482:	4b17      	ldr	r3, [pc, #92]	; (814e0 <udd_ctrl_in_sent+0x15c>)
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
		*ptr_dest++ = *ptr_src++;
   81484:	f812 1b01 	ldrb.w	r1, [r2], #1
   81488:	f803 1b01 	strb.w	r1, [r3], #1
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
   8148c:	b2d9      	uxtb	r1, r3
   8148e:	42a1      	cmp	r1, r4
   81490:	d3f8      	bcc.n	81484 <udd_ctrl_in_sent+0x100>
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_buf_cnt += nb_remain;
   81492:	4b0d      	ldr	r3, [pc, #52]	; (814c8 <udd_ctrl_in_sent+0x144>)
   81494:	881a      	ldrh	r2, [r3, #0]
   81496:	4414      	add	r4, r2
   81498:	801c      	strh	r4, [r3, #0]

	// Validate and send the data available in the control endpoint buffer
	udd_ack_in_send(0);
   8149a:	2301      	movs	r3, #1
   8149c:	4a0e      	ldr	r2, [pc, #56]	; (814d8 <udd_ctrl_in_sent+0x154>)
   8149e:	6013      	str	r3, [r2, #0]
	udd_enable_in_send_interrupt(0);
   814a0:	3290      	adds	r2, #144	; 0x90
   814a2:	6013      	str	r3, [r2, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   814a4:	b128      	cbz	r0, 814b2 <udd_ctrl_in_sent+0x12e>
		cpu_irq_enable();
   814a6:	461a      	mov	r2, r3
   814a8:	4b02      	ldr	r3, [pc, #8]	; (814b4 <udd_ctrl_in_sent+0x130>)
   814aa:	701a      	strb	r2, [r3, #0]
   814ac:	f3bf 8f5f 	dmb	sy
   814b0:	b662      	cpsie	i
   814b2:	bd38      	pop	{r3, r4, r5, pc}
   814b4:	200701d8 	.word	0x200701d8
   814b8:	400ac220 	.word	0x400ac220
   814bc:	20070c5c 	.word	0x20070c5c
   814c0:	00081375 	.word	0x00081375
   814c4:	000812c9 	.word	0x000812c9
   814c8:	20070c5e 	.word	0x20070c5e
   814cc:	20070d50 	.word	0x20070d50
   814d0:	20070c58 	.word	0x20070c58
   814d4:	20070c5b 	.word	0x20070c5b
   814d8:	400ac160 	.word	0x400ac160
   814dc:	400ac130 	.word	0x400ac130
   814e0:	20180000 	.word	0x20180000

000814e4 <udd_ep_finish_job>:
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
}


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
{
   814e4:	b510      	push	{r4, lr}
   814e6:	4603      	mov	r3, r0
	if (ptr_job->busy == false) {
   814e8:	7d04      	ldrb	r4, [r0, #20]
   814ea:	f014 0f01 	tst.w	r4, #1
   814ee:	d010      	beq.n	81512 <udd_ep_finish_job+0x2e>
		return; // No on-going job
	}
	dbg_print("(JobE%x:%d) ", (ptr_job-udd_ep_job)+1, b_abort);
	ptr_job->busy = false;
   814f0:	7d04      	ldrb	r4, [r0, #20]
   814f2:	f36f 0400 	bfc	r4, #0, #1
   814f6:	7504      	strb	r4, [r0, #20]
	if (NULL == ptr_job->call_trans) {
   814f8:	6804      	ldr	r4, [r0, #0]
   814fa:	b154      	cbz	r4, 81512 <udd_ep_finish_job+0x2e>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_in(ep_num)) {
   814fc:	4805      	ldr	r0, [pc, #20]	; (81514 <udd_ep_finish_job+0x30>)
   814fe:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
   81502:	f410 7f80 	tst.w	r0, #256	; 0x100
		ep_num |= USB_EP_DIR_IN;
   81506:	bf18      	it	ne
   81508:	f042 0280 	orrne.w	r2, r2, #128	; 0x80
	}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   8150c:	4608      	mov	r0, r1
   8150e:	6899      	ldr	r1, [r3, #8]
   81510:	47a0      	blx	r4
   81512:	bd10      	pop	{r4, pc}
   81514:	400ac100 	.word	0x400ac100

00081518 <udd_ep_trans_done>:
			UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}

#ifdef UDD_EP_DMA_SUPPORTED
static void udd_ep_trans_done(udd_ep_id_t ep)
{
   81518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8151a:	4602      	mov	r2, r0
	udd_ep_job_t *ptr_job;
	iram_size_t next_trans;
	irqflags_t flags;

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep - 1];
   8151c:	1e41      	subs	r1, r0, #1
   8151e:	eb01 0041 	add.w	r0, r1, r1, lsl #1
   81522:	4b4d      	ldr	r3, [pc, #308]	; (81658 <udd_ep_trans_done+0x140>)
   81524:	eb03 03c0 	add.w	r3, r3, r0, lsl #3

	if (!ptr_job->busy) {
   81528:	7d18      	ldrb	r0, [r3, #20]
   8152a:	f010 0f01 	tst.w	r0, #1
   8152e:	f000 8092 	beq.w	81656 <udd_ep_trans_done+0x13e>
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->buf_cnt != ptr_job->buf_size) {
   81532:	68d8      	ldr	r0, [r3, #12]
   81534:	689c      	ldr	r4, [r3, #8]
   81536:	42a0      	cmp	r0, r4
   81538:	d067      	beq.n	8160a <udd_ep_trans_done+0xf2>
		// Need to send or receiv other data
		next_trans = ptr_job->buf_size - ptr_job->buf_cnt;
   8153a:	1a24      	subs	r4, r4, r0

		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
   8153c:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
			next_trans = UDD_ENDPOINT_MAX_TRANS;

			// Set 0 to tranfer the maximum
			udd_dma_ctrl = UOTGHS_DEVDMACONTROL_BUFF_LENGTH(0);
		} else {
			udd_dma_ctrl = UOTGHS_DEVDMACONTROL_BUFF_LENGTH(next_trans);
   81540:	bf92      	itee	ls
   81542:	0426      	lslls	r6, r4, #16
		next_trans = ptr_job->buf_size - ptr_job->buf_cnt;

		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
			// The USB hardware support a maximum
			// transfer size of UDD_ENDPOINT_MAX_TRANS Bytes
			next_trans = UDD_ENDPOINT_MAX_TRANS;
   81544:	f44f 3480 	movhi.w	r4, #65536	; 0x10000

			// Set 0 to tranfer the maximum
			udd_dma_ctrl = UOTGHS_DEVDMACONTROL_BUFF_LENGTH(0);
   81548:	2600      	movhi	r6, #0
		} else {
			udd_dma_ctrl = UOTGHS_DEVDMACONTROL_BUFF_LENGTH(next_trans);
		}
		if (Is_udd_endpoint_in(ep)) {
   8154a:	4d44      	ldr	r5, [pc, #272]	; (8165c <udd_ep_trans_done+0x144>)
   8154c:	f855 7022 	ldr.w	r7, [r5, r2, lsl #2]
   81550:	f417 7f80 	tst.w	r7, #256	; 0x100
   81554:	d00f      	beq.n	81576 <udd_ep_trans_done+0x5e>
			if (0 != (next_trans % udd_get_endpoint_size(ep))) {
   81556:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
   8155a:	f3c5 1502 	ubfx	r5, r5, #4, #3
   8155e:	2708      	movs	r7, #8
   81560:	fa07 f505 	lsl.w	r5, r7, r5
   81564:	3d01      	subs	r5, #1
   81566:	422c      	tst	r4, r5
   81568:	d016      	beq.n	81598 <udd_ep_trans_done+0x80>
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				udd_dma_ctrl |= UOTGHS_DEVDMACONTROL_END_B_EN;
   8156a:	433e      	orrs	r6, r7
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
   8156c:	7d1d      	ldrb	r5, [r3, #20]
   8156e:	f36f 0541 	bfc	r5, #1, #1
   81572:	751d      	strb	r5, [r3, #20]
   81574:	e010      	b.n	81598 <udd_ep_trans_done+0x80>
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
   81576:	f855 7022 	ldr.w	r7, [r5, r2, lsl #2]
   8157a:	f3c7 27c1 	ubfx	r7, r7, #11, #2
   8157e:	2f01      	cmp	r7, #1
   81580:	d108      	bne.n	81594 <udd_ep_trans_done+0x7c>
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {
   81582:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
   81586:	f3c5 1502 	ubfx	r5, r5, #4, #3
   8158a:	2708      	movs	r7, #8
   8158c:	fa07 f505 	lsl.w	r5, r7, r5
   81590:	42ac      	cmp	r4, r5
   81592:	d801      	bhi.n	81598 <udd_ep_trans_done+0x80>

				// Enable short packet reception
				udd_dma_ctrl |= UOTGHS_DEVDMACONTROL_END_TR_IT
   81594:	f046 0614 	orr.w	r6, r6, #20
						| UOTGHS_DEVDMACONTROL_END_TR_EN;
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (uint32_t) & ptr_job->buf[ptr_job->buf_cnt]);
   81598:	4d31      	ldr	r5, [pc, #196]	; (81660 <udd_ep_trans_done+0x148>)
   8159a:	eb05 1502 	add.w	r5, r5, r2, lsl #4
   8159e:	685f      	ldr	r7, [r3, #4]
   815a0:	4438      	add	r0, r7
   815a2:	6068      	str	r0, [r5, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   815a4:	f3ef 8010 	mrs	r0, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
   815a8:	f1d0 0c01 	rsbs	ip, r0, #1
   815ac:	bf38      	it	cc
   815ae:	f04f 0c00 	movcc.w	ip, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   815b2:	b672      	cpsid	i
   815b4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   815b8:	2700      	movs	r7, #0
   815ba:	482a      	ldr	r0, [pc, #168]	; (81664 <udd_ep_trans_done+0x14c>)
   815bc:	7007      	strb	r7, [r0, #0]


		// Disable IRQs to have a short sequence
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
		if (!(udd_endpoint_dma_get_status(ep)
   815be:	68e8      	ldr	r0, [r5, #12]
   815c0:	f010 0f10 	tst.w	r0, #16
   815c4:	d116      	bne.n	815f4 <udd_ep_trans_done+0xdc>
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (uint32_t) & ptr_job->buf[ptr_job->buf_cnt]);
		udd_dma_ctrl |= UOTGHS_DEVDMACONTROL_END_BUFFIT |
   815c6:	f046 0621 	orr.w	r6, r6, #33	; 0x21
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
		if (!(udd_endpoint_dma_get_status(ep)
				& UOTGHS_DEVDMASTATUS_END_TR_ST)) {
			dbg_print("dmaS%x ", ep);
			udd_endpoint_dma_set_control(ep, udd_dma_ctrl);
   815ca:	60ae      	str	r6, [r5, #8]
			ptr_job->buf_cnt += next_trans;
   815cc:	68da      	ldr	r2, [r3, #12]
   815ce:	4422      	add	r2, r4
   815d0:	60da      	str	r2, [r3, #12]
			ptr_job->buf_load = next_trans;
   815d2:	611c      	str	r4, [r3, #16]
			udd_enable_endpoint_dma_interrupt(ep);
   815d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
   815d8:	fa03 f101 	lsl.w	r1, r3, r1
   815dc:	4b22      	ldr	r3, [pc, #136]	; (81668 <udd_ep_trans_done+0x150>)
   815de:	6199      	str	r1, [r3, #24]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   815e0:	f1bc 0f00 	cmp.w	ip, #0
   815e4:	d037      	beq.n	81656 <udd_ep_trans_done+0x13e>
		cpu_irq_enable();
   815e6:	2201      	movs	r2, #1
   815e8:	4b1e      	ldr	r3, [pc, #120]	; (81664 <udd_ep_trans_done+0x14c>)
   815ea:	701a      	strb	r2, [r3, #0]
   815ec:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   815f0:	b662      	cpsie	i
   815f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   815f4:	f1bc 0f00 	cmp.w	ip, #0
   815f8:	d005      	beq.n	81606 <udd_ep_trans_done+0xee>
		cpu_irq_enable();
   815fa:	2001      	movs	r0, #1
   815fc:	4919      	ldr	r1, [pc, #100]	; (81664 <udd_ep_trans_done+0x14c>)
   815fe:	7008      	strb	r0, [r1, #0]
   81600:	f3bf 8f5f 	dmb	sy
   81604:	b662      	cpsie	i
		cpu_irq_restore(flags);

		// Here a ZLP has been recieved
		// and the DMA transfer must be not started.
		// It is the end of transfer
		ptr_job->buf_size = ptr_job->buf_cnt;
   81606:	68d9      	ldr	r1, [r3, #12]
   81608:	6099      	str	r1, [r3, #8]
	}
	if (Is_udd_endpoint_in(ep)) {
   8160a:	4914      	ldr	r1, [pc, #80]	; (8165c <udd_ep_trans_done+0x144>)
   8160c:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
   81610:	f411 7f80 	tst.w	r1, #256	; 0x100
   81614:	d01b      	beq.n	8164e <udd_ep_trans_done+0x136>
		if (ptr_job->b_shortpacket) {
   81616:	7d19      	ldrb	r1, [r3, #20]
   81618:	f011 0f02 	tst.w	r1, #2
   8161c:	d017      	beq.n	8164e <udd_ep_trans_done+0x136>
			dbg_print("zlpS%x ", ep);
			// Need to send a ZLP (No possible with USB DMA)
			// enable interrupt to wait a free bank to sent ZLP
			udd_ack_in_send(ep);
   8161e:	2101      	movs	r1, #1
   81620:	4b12      	ldr	r3, [pc, #72]	; (8166c <udd_ep_trans_done+0x154>)
   81622:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			if (Is_udd_write_enabled(ep)) {
   81626:	3b30      	subs	r3, #48	; 0x30
   81628:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   8162c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
				// Force interrupt in case of ep already free
				udd_raise_in_send(ep);
   81630:	bf1c      	itt	ne
   81632:	4b0f      	ldrne	r3, [pc, #60]	; (81670 <udd_ep_trans_done+0x158>)
   81634:	f843 1022 	strne.w	r1, [r3, r2, lsl #2]
			}
			udd_enable_in_send_interrupt(ep);
   81638:	2101      	movs	r1, #1
   8163a:	4b0e      	ldr	r3, [pc, #56]	; (81674 <udd_ep_trans_done+0x15c>)
   8163c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			udd_enable_endpoint_interrupt(ep);
   81640:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   81644:	fa03 f202 	lsl.w	r2, r3, r2
   81648:	4b07      	ldr	r3, [pc, #28]	; (81668 <udd_ep_trans_done+0x150>)
   8164a:	619a      	str	r2, [r3, #24]
			return;
   8164c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
	}
	dbg_print("dmaE ");
	// Call callback to signal end of transfer
	udd_ep_finish_job(ptr_job, false, ep);
   8164e:	4618      	mov	r0, r3
   81650:	2100      	movs	r1, #0
   81652:	4b09      	ldr	r3, [pc, #36]	; (81678 <udd_ep_trans_done+0x160>)
   81654:	4798      	blx	r3
   81656:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81658:	20070c10 	.word	0x20070c10
   8165c:	400ac100 	.word	0x400ac100
   81660:	400ac300 	.word	0x400ac300
   81664:	200701d8 	.word	0x200701d8
   81668:	400ac000 	.word	0x400ac000
   8166c:	400ac160 	.word	0x400ac160
   81670:	400ac190 	.word	0x400ac190
   81674:	400ac1f0 	.word	0x400ac1f0
   81678:	000814e5 	.word	0x000814e5

0008167c <udd_sleep_mode>:
 *
 * \param b_enable true to authorize idle mode
 */
static void udd_sleep_mode(bool b_idle)
{
	if (!b_idle && udd_b_idle) {
   8167c:	4602      	mov	r2, r0
   8167e:	2800      	cmp	r0, #0
   81680:	d135      	bne.n	816ee <udd_sleep_mode+0x72>
   81682:	4b1d      	ldr	r3, [pc, #116]	; (816f8 <udd_sleep_mode+0x7c>)
   81684:	781b      	ldrb	r3, [r3, #0]
   81686:	b37b      	cbz	r3, 816e8 <udd_sleep_mode+0x6c>
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
   81688:	4b1c      	ldr	r3, [pc, #112]	; (816fc <udd_sleep_mode+0x80>)
   8168a:	789b      	ldrb	r3, [r3, #2]
   8168c:	b903      	cbnz	r3, 81690 <udd_sleep_mode+0x14>
   8168e:	e7fe      	b.n	8168e <udd_sleep_mode+0x12>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   81690:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   81694:	b672      	cpsid	i
   81696:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   8169a:	2000      	movs	r0, #0
   8169c:	4b18      	ldr	r3, [pc, #96]	; (81700 <udd_sleep_mode+0x84>)
   8169e:	7018      	strb	r0, [r3, #0]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
   816a0:	4b16      	ldr	r3, [pc, #88]	; (816fc <udd_sleep_mode+0x80>)
   816a2:	7898      	ldrb	r0, [r3, #2]
   816a4:	3801      	subs	r0, #1
   816a6:	7098      	strb	r0, [r3, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   816a8:	b9f1      	cbnz	r1, 816e8 <udd_sleep_mode+0x6c>
		cpu_irq_enable();
   816aa:	2101      	movs	r1, #1
   816ac:	4b14      	ldr	r3, [pc, #80]	; (81700 <udd_sleep_mode+0x84>)
   816ae:	7019      	strb	r1, [r3, #0]
   816b0:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   816b4:	b662      	cpsie	i
   816b6:	e017      	b.n	816e8 <udd_sleep_mode+0x6c>
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
   816b8:	4b10      	ldr	r3, [pc, #64]	; (816fc <udd_sleep_mode+0x80>)
   816ba:	789b      	ldrb	r3, [r3, #2]
   816bc:	2bff      	cmp	r3, #255	; 0xff
   816be:	d100      	bne.n	816c2 <udd_sleep_mode+0x46>
   816c0:	e7fe      	b.n	816c0 <udd_sleep_mode+0x44>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   816c2:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   816c6:	b672      	cpsid	i
   816c8:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   816cc:	2000      	movs	r0, #0
   816ce:	4b0c      	ldr	r3, [pc, #48]	; (81700 <udd_sleep_mode+0x84>)
   816d0:	7018      	strb	r0, [r3, #0]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
   816d2:	4b0a      	ldr	r3, [pc, #40]	; (816fc <udd_sleep_mode+0x80>)
   816d4:	7898      	ldrb	r0, [r3, #2]
   816d6:	3001      	adds	r0, #1
   816d8:	7098      	strb	r0, [r3, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   816da:	b929      	cbnz	r1, 816e8 <udd_sleep_mode+0x6c>
		cpu_irq_enable();
   816dc:	2101      	movs	r1, #1
   816de:	4b08      	ldr	r3, [pc, #32]	; (81700 <udd_sleep_mode+0x84>)
   816e0:	7019      	strb	r1, [r3, #0]
   816e2:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   816e6:	b662      	cpsie	i
	}
	if (b_idle && !udd_b_idle) {
		dbg_print("_W ");
		sleepmgr_lock_mode(UOTGHS_SLEEP_MODE_USB_IDLE);
	}
	udd_b_idle = b_idle;
   816e8:	4b03      	ldr	r3, [pc, #12]	; (816f8 <udd_sleep_mode+0x7c>)
   816ea:	701a      	strb	r2, [r3, #0]
   816ec:	4770      	bx	lr
{
	if (!b_idle && udd_b_idle) {
		dbg_print("_S ");
		sleepmgr_unlock_mode(UOTGHS_SLEEP_MODE_USB_IDLE);
	}
	if (b_idle && !udd_b_idle) {
   816ee:	4b02      	ldr	r3, [pc, #8]	; (816f8 <udd_sleep_mode+0x7c>)
   816f0:	781b      	ldrb	r3, [r3, #0]
   816f2:	2b00      	cmp	r3, #0
   816f4:	d1f8      	bne.n	816e8 <udd_sleep_mode+0x6c>
   816f6:	e7df      	b.n	816b8 <udd_sleep_mode+0x3c>
   816f8:	20070c5a 	.word	0x20070c5a
   816fc:	20070d3c 	.word	0x20070d3c
   81700:	200701d8 	.word	0x200701d8

00081704 <udd_attach>:
	cpu_irq_restore(flags);
}


void udd_attach(void)
{
   81704:	b538      	push	{r3, r4, r5, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   81706:	f3ef 8510 	mrs	r5, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   8170a:	b672      	cpsid	i
   8170c:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   81710:	2200      	movs	r2, #0
   81712:	4b19      	ldr	r3, [pc, #100]	; (81778 <udd_attach+0x74>)
   81714:	701a      	strb	r2, [r3, #0]
	irqflags_t flags;
	flags = cpu_irq_save();

	// At startup the USB bus state is unknown,
	// therefore the state is considered IDLE to not miss any USB event
	udd_sleep_mode(true);
   81716:	2001      	movs	r0, #1
   81718:	4b18      	ldr	r3, [pc, #96]	; (8177c <udd_attach+0x78>)
   8171a:	4798      	blx	r3
	otg_unfreeze_clock();
   8171c:	4b18      	ldr	r3, [pc, #96]	; (81780 <udd_attach+0x7c>)
   8171e:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   81722:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
   81726:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800

	// This section of clock check can be improved with a chek of
	// USB clock source via sysclk()
	// Check USB clock because the source can be a PLL
	while (!Is_otg_clock_usable());
   8172a:	461a      	mov	r2, r3
   8172c:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
   81730:	f413 4f80 	tst.w	r3, #16384	; 0x4000
   81734:	d0fa      	beq.n	8172c <udd_attach+0x28>

	// Authorize attach if Vbus is present
	udd_attach_device();
   81736:	4b12      	ldr	r3, [pc, #72]	; (81780 <udd_attach+0x7c>)
   81738:	681a      	ldr	r2, [r3, #0]
   8173a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   8173e:	601a      	str	r2, [r3, #0]

	// Enable USB line events
	udd_enable_reset_interrupt();
   81740:	2408      	movs	r4, #8
   81742:	619c      	str	r4, [r3, #24]
	udd_enable_suspend_interrupt();
   81744:	2101      	movs	r1, #1
   81746:	6199      	str	r1, [r3, #24]
	udd_enable_wake_up_interrupt();
   81748:	2210      	movs	r2, #16
   8174a:	619a      	str	r2, [r3, #24]
	udd_enable_sof_interrupt();
   8174c:	2004      	movs	r0, #4
   8174e:	6198      	str	r0, [r3, #24]
#ifdef USB_DEVICE_HS_SUPPORT
	udd_enable_msof_interrupt();
#endif
	// Reset following interupts flag
	udd_ack_reset();
   81750:	609c      	str	r4, [r3, #8]
	udd_ack_sof();
   81752:	6098      	str	r0, [r3, #8]
	udd_ack_msof();
   81754:	2002      	movs	r0, #2
   81756:	6098      	str	r0, [r3, #8]

	// The first suspend interrupt must be forced
	// The first suspend interrupt is not detected else raise it
	udd_raise_suspend();
   81758:	60d9      	str	r1, [r3, #12]

	udd_ack_wake_up();
   8175a:	609a      	str	r2, [r3, #8]
	otg_freeze_clock();
   8175c:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   81760:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   81764:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   81768:	b925      	cbnz	r5, 81774 <udd_attach+0x70>
		cpu_irq_enable();
   8176a:	4b03      	ldr	r3, [pc, #12]	; (81778 <udd_attach+0x74>)
   8176c:	7019      	strb	r1, [r3, #0]
   8176e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   81772:	b662      	cpsie	i
   81774:	bd38      	pop	{r3, r4, r5, pc}
   81776:	bf00      	nop
   81778:	200701d8 	.word	0x200701d8
   8177c:	0008167d 	.word	0x0008167d
   81780:	400ac000 	.word	0x400ac000

00081784 <udd_detach>:
	cpu_irq_restore(flags);
}


void udd_detach(void)
{
   81784:	b508      	push	{r3, lr}
	otg_unfreeze_clock();
   81786:	4b0a      	ldr	r3, [pc, #40]	; (817b0 <udd_detach+0x2c>)
   81788:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   8178c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
   81790:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800

	// Detach device from the bus
	udd_detach_device();
   81794:	681a      	ldr	r2, [r3, #0]
   81796:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   8179a:	601a      	str	r2, [r3, #0]
	otg_freeze_clock();
   8179c:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   817a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   817a4:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	udd_sleep_mode(false);
   817a8:	2000      	movs	r0, #0
   817aa:	4b02      	ldr	r3, [pc, #8]	; (817b4 <udd_detach+0x30>)
   817ac:	4798      	blx	r3
   817ae:	bd08      	pop	{r3, pc}
   817b0:	400ac000 	.word	0x400ac000
   817b4:	0008167d 	.word	0x0008167d

000817b8 <UOTGHS_Handler>:
void udd_interrupt(void);
void udd_interrupt(void)
#else
ISR(UDD_USB_INT_FUN)
#endif
{
   817b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	/* For fast wakeup clocks restore
	 * In WAIT mode, clocks are switched to FASTRC.
	 * After wakeup clocks should be restored, before that ISR should not
	 * be served.
	 */
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
   817bc:	4b9c      	ldr	r3, [pc, #624]	; (81a30 <UOTGHS_Handler+0x278>)
   817be:	4798      	blx	r3
   817c0:	b960      	cbnz	r0, 817dc <UOTGHS_Handler+0x24>
   817c2:	4b9c      	ldr	r3, [pc, #624]	; (81a34 <UOTGHS_Handler+0x27c>)
   817c4:	685b      	ldr	r3, [r3, #4]
   817c6:	f013 0f01 	tst.w	r3, #1
   817ca:	d107      	bne.n	817dc <UOTGHS_Handler+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   817cc:	b672      	cpsid	i
   817ce:	f3bf 8f5f 	dmb	sy
		cpu_irq_disable();
   817d2:	2200      	movs	r2, #0
   817d4:	4b98      	ldr	r3, [pc, #608]	; (81a38 <UOTGHS_Handler+0x280>)
   817d6:	701a      	strb	r2, [r3, #0]
		return;
   817d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}

	if (Is_udd_sof()) {
   817dc:	4b95      	ldr	r3, [pc, #596]	; (81a34 <UOTGHS_Handler+0x27c>)
   817de:	685b      	ldr	r3, [r3, #4]
   817e0:	f013 0f04 	tst.w	r3, #4
   817e4:	d00c      	beq.n	81800 <UOTGHS_Handler+0x48>
		udd_ack_sof();
   817e6:	4b93      	ldr	r3, [pc, #588]	; (81a34 <UOTGHS_Handler+0x27c>)
   817e8:	2204      	movs	r2, #4
   817ea:	609a      	str	r2, [r3, #8]
		if (Is_udd_full_speed_mode()) {
   817ec:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
   817f0:	f413 5f40 	tst.w	r3, #12288	; 0x3000
   817f4:	f040 82b1 	bne.w	81d5a <UOTGHS_Handler+0x5a2>
			udc_sof_notify();
   817f8:	4b90      	ldr	r3, [pc, #576]	; (81a3c <UOTGHS_Handler+0x284>)
   817fa:	4798      	blx	r3
   817fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_sof_end;
	}

	if (Is_udd_msof()) {
   81800:	4b8c      	ldr	r3, [pc, #560]	; (81a34 <UOTGHS_Handler+0x27c>)
   81802:	685b      	ldr	r3, [r3, #4]
   81804:	f013 0f02 	tst.w	r3, #2
   81808:	d006      	beq.n	81818 <UOTGHS_Handler+0x60>
		udd_ack_msof();
   8180a:	2202      	movs	r2, #2
   8180c:	4b89      	ldr	r3, [pc, #548]	; (81a34 <UOTGHS_Handler+0x27c>)
   8180e:	609a      	str	r2, [r3, #8]
		udc_sof_notify();
   81810:	4b8a      	ldr	r3, [pc, #552]	; (81a3c <UOTGHS_Handler+0x284>)
   81812:	4798      	blx	r3
		goto udd_interrupt_sof_end;
   81814:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}


static bool udd_ctrl_interrupt(void)
{

	if (!Is_udd_endpoint_interrupt(0)) {
   81818:	4b86      	ldr	r3, [pc, #536]	; (81a34 <UOTGHS_Handler+0x27c>)
   8181a:	685b      	ldr	r3, [r3, #4]
   8181c:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   81820:	f000 828b 	beq.w	81d3a <UOTGHS_Handler+0x582>
	}

	dbg_print("0: ");

	// By default disable overflow and underflow interrupt
	udd_disable_nak_in_interrupt(0);
   81824:	4b86      	ldr	r3, [pc, #536]	; (81a40 <UOTGHS_Handler+0x288>)
   81826:	2210      	movs	r2, #16
   81828:	601a      	str	r2, [r3, #0]
	udd_disable_nak_out_interrupt(0);
   8182a:	2208      	movs	r2, #8
   8182c:	601a      	str	r2, [r3, #0]

	// Search event on control endpoint
	if (Is_udd_setup_received(0)) {
   8182e:	3bf0      	subs	r3, #240	; 0xf0
   81830:	681b      	ldr	r3, [r3, #0]
   81832:	f013 0f04 	tst.w	r3, #4
   81836:	d060      	beq.n	818fa <UOTGHS_Handler+0x142>
static void udd_ctrl_setup_received(void)
{
	irqflags_t flags;
	uint8_t i;

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
   81838:	4b82      	ldr	r3, [pc, #520]	; (81a44 <UOTGHS_Handler+0x28c>)
   8183a:	781b      	ldrb	r3, [r3, #0]
   8183c:	b11b      	cbz	r3, 81846 <UOTGHS_Handler+0x8e>
		// May be a hidden DATA or ZLP phase or protocol abort
		udd_ctrl_endofrequest();
   8183e:	4b82      	ldr	r3, [pc, #520]	; (81a48 <UOTGHS_Handler+0x290>)
   81840:	4798      	blx	r3

		// Reinitializes control endpoint management
		udd_ctrl_init();
   81842:	4b82      	ldr	r3, [pc, #520]	; (81a4c <UOTGHS_Handler+0x294>)
   81844:	4798      	blx	r3
	}
	// Fill setup request structure
	if (8 != udd_byte_count(0)) {
   81846:	4b82      	ldr	r3, [pc, #520]	; (81a50 <UOTGHS_Handler+0x298>)
   81848:	681b      	ldr	r3, [r3, #0]
   8184a:	f3c3 530a 	ubfx	r3, r3, #20, #11
   8184e:	2b08      	cmp	r3, #8
   81850:	d006      	beq.n	81860 <UOTGHS_Handler+0xa8>
		udd_ctrl_stall_data();
   81852:	4b80      	ldr	r3, [pc, #512]	; (81a54 <UOTGHS_Handler+0x29c>)
   81854:	4798      	blx	r3
		udd_ack_setup_received(0);
   81856:	2204      	movs	r2, #4
   81858:	4b7f      	ldr	r3, [pc, #508]	; (81a58 <UOTGHS_Handler+0x2a0>)
   8185a:	601a      	str	r2, [r3, #0]
   8185c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

		// Reinitializes control endpoint management
		udd_ctrl_init();
	}
	// Fill setup request structure
	if (8 != udd_byte_count(0)) {
   81860:	4b7e      	ldr	r3, [pc, #504]	; (81a5c <UOTGHS_Handler+0x2a4>)
   81862:	4d7f      	ldr	r5, [pc, #508]	; (81a60 <UOTGHS_Handler+0x2a8>)
   81864:	4c7f      	ldr	r4, [pc, #508]	; (81a64 <UOTGHS_Handler+0x2ac>)
		udd_ctrl_stall_data();
		udd_ack_setup_received(0);
		return; // Error data number doesn't correspond to SETUP packet
	}
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0,8);
	for (i = 0; i < 8; i++) {
   81866:	4880      	ldr	r0, [pc, #512]	; (81a68 <UOTGHS_Handler+0x2b0>)
		((uint8_t*) &udd_g_ctrlreq.req)[i] = *ptr++;
   81868:	f813 1b01 	ldrb.w	r1, [r3], #1
   8186c:	195a      	adds	r2, r3, r5
   8186e:	5511      	strb	r1, [r2, r4]
		udd_ctrl_stall_data();
		udd_ack_setup_received(0);
		return; // Error data number doesn't correspond to SETUP packet
	}
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0,8);
	for (i = 0; i < 8; i++) {
   81870:	4283      	cmp	r3, r0
   81872:	d1f9      	bne.n	81868 <UOTGHS_Handler+0xb0>
	udd_g_ctrlreq.req.wValue = le16_to_cpu(udd_g_ctrlreq.req.wValue);
	udd_g_ctrlreq.req.wIndex = le16_to_cpu(udd_g_ctrlreq.req.wIndex);
	udd_g_ctrlreq.req.wLength = le16_to_cpu(udd_g_ctrlreq.req.wLength);

	// Decode setup request
	if (udc_process_setup() == false) {
   81874:	4b7d      	ldr	r3, [pc, #500]	; (81a6c <UOTGHS_Handler+0x2b4>)
   81876:	4798      	blx	r3
   81878:	b930      	cbnz	r0, 81888 <UOTGHS_Handler+0xd0>
		// Setup request unknow then stall it
		udd_ctrl_stall_data();
   8187a:	4b76      	ldr	r3, [pc, #472]	; (81a54 <UOTGHS_Handler+0x29c>)
   8187c:	4798      	blx	r3
		udd_ack_setup_received(0);
   8187e:	2204      	movs	r2, #4
   81880:	4b75      	ldr	r3, [pc, #468]	; (81a58 <UOTGHS_Handler+0x2a0>)
   81882:	601a      	str	r2, [r3, #0]
   81884:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return;
	}
	udd_ack_setup_received(0);
   81888:	2204      	movs	r2, #4
   8188a:	4b73      	ldr	r3, [pc, #460]	; (81a58 <UOTGHS_Handler+0x2a0>)
   8188c:	601a      	str	r2, [r3, #0]

	if (Udd_setup_is_in()) {
   8188e:	4b74      	ldr	r3, [pc, #464]	; (81a60 <UOTGHS_Handler+0x2a8>)
   81890:	f993 3000 	ldrsb.w	r3, [r3]
   81894:	2b00      	cmp	r3, #0
   81896:	da0b      	bge.n	818b0 <UOTGHS_Handler+0xf8>
		// IN data phase requested
		udd_ctrl_prev_payload_buf_cnt = 0;
   81898:	2300      	movs	r3, #0
   8189a:	4a75      	ldr	r2, [pc, #468]	; (81a70 <UOTGHS_Handler+0x2b8>)
   8189c:	8013      	strh	r3, [r2, #0]
		udd_ctrl_payload_buf_cnt = 0;
   8189e:	4a75      	ldr	r2, [pc, #468]	; (81a74 <UOTGHS_Handler+0x2bc>)
   818a0:	8013      	strh	r3, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
   818a2:	2202      	movs	r2, #2
   818a4:	4b67      	ldr	r3, [pc, #412]	; (81a44 <UOTGHS_Handler+0x28c>)
   818a6:	701a      	strb	r2, [r3, #0]
		udd_ctrl_in_sent(); // Send first data transfer
   818a8:	4b73      	ldr	r3, [pc, #460]	; (81a78 <UOTGHS_Handler+0x2c0>)
   818aa:	4798      	blx	r3
   818ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else {
		if (0 == udd_g_ctrlreq.req.wLength) {
   818b0:	4b6b      	ldr	r3, [pc, #428]	; (81a60 <UOTGHS_Handler+0x2a8>)
   818b2:	88db      	ldrh	r3, [r3, #6]
   818b4:	b91b      	cbnz	r3, 818be <UOTGHS_Handler+0x106>
			// No data phase requested
			// Send IN ZLP to ACK setup request
			udd_ctrl_send_zlp_in();
   818b6:	4b71      	ldr	r3, [pc, #452]	; (81a7c <UOTGHS_Handler+0x2c4>)
   818b8:	4798      	blx	r3
   818ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return;
		}
		// OUT data phase requested
		udd_ctrl_prev_payload_buf_cnt = 0;
   818be:	2300      	movs	r3, #0
   818c0:	4a6b      	ldr	r2, [pc, #428]	; (81a70 <UOTGHS_Handler+0x2b8>)
   818c2:	8013      	strh	r3, [r2, #0]
		udd_ctrl_payload_buf_cnt = 0;
   818c4:	4a6b      	ldr	r2, [pc, #428]	; (81a74 <UOTGHS_Handler+0x2bc>)
   818c6:	8013      	strh	r3, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
   818c8:	2101      	movs	r1, #1
   818ca:	4a5e      	ldr	r2, [pc, #376]	; (81a44 <UOTGHS_Handler+0x28c>)
   818cc:	7011      	strb	r1, [r2, #0]
		// To detect a protocol error, enable nak interrupt on data IN phase
		udd_ack_nak_in(0);
   818ce:	2210      	movs	r2, #16
   818d0:	4961      	ldr	r1, [pc, #388]	; (81a58 <UOTGHS_Handler+0x2a0>)
   818d2:	600a      	str	r2, [r1, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   818d4:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   818d8:	b672      	cpsid	i
   818da:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   818de:	4856      	ldr	r0, [pc, #344]	; (81a38 <UOTGHS_Handler+0x280>)
   818e0:	7003      	strb	r3, [r0, #0]
		flags = cpu_irq_save();
		udd_enable_nak_in_interrupt(0);
   818e2:	4b67      	ldr	r3, [pc, #412]	; (81a80 <UOTGHS_Handler+0x2c8>)
   818e4:	601a      	str	r2, [r3, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   818e6:	2900      	cmp	r1, #0
   818e8:	f040 8237 	bne.w	81d5a <UOTGHS_Handler+0x5a2>
		cpu_irq_enable();
   818ec:	2201      	movs	r2, #1
   818ee:	7002      	strb	r2, [r0, #0]
   818f0:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   818f4:	b662      	cpsie	i
   818f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dbg_print("stup ");
		// SETUP packet received
		udd_ctrl_setup_received();
		return true;
	}
	if (Is_udd_in_send(0) && Is_udd_in_send_interrupt_enabled(0)) {
   818fa:	4b55      	ldr	r3, [pc, #340]	; (81a50 <UOTGHS_Handler+0x298>)
   818fc:	681b      	ldr	r3, [r3, #0]
   818fe:	f013 0f01 	tst.w	r3, #1
   81902:	d008      	beq.n	81916 <UOTGHS_Handler+0x15e>
   81904:	4b5f      	ldr	r3, [pc, #380]	; (81a84 <UOTGHS_Handler+0x2cc>)
   81906:	681b      	ldr	r3, [r3, #0]
   81908:	f013 0f01 	tst.w	r3, #1
   8190c:	d003      	beq.n	81916 <UOTGHS_Handler+0x15e>
		dbg_print("in ");
		// IN packet sent
		udd_ctrl_in_sent();
   8190e:	4b5a      	ldr	r3, [pc, #360]	; (81a78 <UOTGHS_Handler+0x2c0>)
   81910:	4798      	blx	r3
   81912:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return true;
	}
	if (Is_udd_out_received(0)) {
   81916:	4b4e      	ldr	r3, [pc, #312]	; (81a50 <UOTGHS_Handler+0x298>)
   81918:	681b      	ldr	r3, [r3, #0]
   8191a:	f013 0f02 	tst.w	r3, #2
   8191e:	f000 80b3 	beq.w	81a88 <UOTGHS_Handler+0x2d0>
{
	irqflags_t flags;
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
   81922:	4b48      	ldr	r3, [pc, #288]	; (81a44 <UOTGHS_Handler+0x28c>)
   81924:	781b      	ldrb	r3, [r3, #0]
   81926:	2b01      	cmp	r3, #1
   81928:	d00c      	beq.n	81944 <UOTGHS_Handler+0x18c>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
   8192a:	2b02      	cmp	r3, #2
   8192c:	d001      	beq.n	81932 <UOTGHS_Handler+0x17a>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
   8192e:	2b04      	cmp	r3, #4
   81930:	d102      	bne.n	81938 <UOTGHS_Handler+0x180>
						udd_ep_control_state)) {
			// End of SETUP request:
			// - Data IN Phase aborted,
			// - or last Data IN Phase hidden by ZLP OUT sending quiclky,
			// - or ZLP OUT received normaly.
			udd_ctrl_endofrequest();
   81932:	4b45      	ldr	r3, [pc, #276]	; (81a48 <UOTGHS_Handler+0x290>)
   81934:	4798      	blx	r3
   81936:	e001      	b.n	8193c <UOTGHS_Handler+0x184>
		} else {
			// Protocol error during SETUP request
			udd_ctrl_stall_data();
   81938:	4b46      	ldr	r3, [pc, #280]	; (81a54 <UOTGHS_Handler+0x29c>)
   8193a:	4798      	blx	r3
		}
		// Reinitializes control endpoint management
		udd_ctrl_init();
   8193c:	4b43      	ldr	r3, [pc, #268]	; (81a4c <UOTGHS_Handler+0x294>)
   8193e:	4798      	blx	r3
   81940:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return;
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
   81944:	4b42      	ldr	r3, [pc, #264]	; (81a50 <UOTGHS_Handler+0x298>)
   81946:	6818      	ldr	r0, [r3, #0]
   81948:	f3c0 500a 	ubfx	r0, r0, #20, #11
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_buf_cnt + nb_data)) {
   8194c:	4b44      	ldr	r3, [pc, #272]	; (81a60 <UOTGHS_Handler+0x2a8>)
   8194e:	899b      	ldrh	r3, [r3, #12]
   81950:	4a48      	ldr	r2, [pc, #288]	; (81a74 <UOTGHS_Handler+0x2bc>)
   81952:	8814      	ldrh	r4, [r2, #0]
   81954:	1822      	adds	r2, r4, r0
   81956:	4293      	cmp	r3, r2
		// Reinitializes control endpoint management
		udd_ctrl_init();
		return;
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
   81958:	bfae      	itee	ge
   8195a:	b280      	uxthge	r0, r0
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_buf_cnt + nb_data)) {
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   8195c:	ebc4 0303 	rsblt	r3, r4, r3
   81960:	b298      	uxthlt	r0, r3
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   81962:	4b3f      	ldr	r3, [pc, #252]	; (81a60 <UOTGHS_Handler+0x2a8>)
   81964:	689a      	ldr	r2, [r3, #8]
   81966:	4422      	add	r2, r4
	for (i = 0; i < nb_data; i++) {
   81968:	b1a0      	cbz	r0, 81994 <UOTGHS_Handler+0x1dc>
	nb_data = udd_byte_count(0);
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_buf_cnt + nb_data)) {
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   8196a:	4b3c      	ldr	r3, [pc, #240]	; (81a5c <UOTGHS_Handler+0x2a4>)
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
	for (i = 0; i < nb_data; i++) {
		*ptr_dest++ = *ptr_src++;
   8196c:	f813 1b01 	ldrb.w	r1, [r3], #1
   81970:	f802 1b01 	strb.w	r1, [r2], #1
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
	for (i = 0; i < nb_data; i++) {
   81974:	b2d9      	uxtb	r1, r3
   81976:	4281      	cmp	r1, r0
   81978:	d3f8      	bcc.n	8196c <UOTGHS_Handler+0x1b4>
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_buf_cnt += nb_data;
   8197a:	4404      	add	r4, r0
   8197c:	b2a4      	uxth	r4, r4
   8197e:	4b3d      	ldr	r3, [pc, #244]	; (81a74 <UOTGHS_Handler+0x2bc>)
   81980:	801c      	strh	r4, [r3, #0]

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
   81982:	2840      	cmp	r0, #64	; 0x40
   81984:	d106      	bne.n	81994 <UOTGHS_Handler+0x1dc>
			|| (udd_g_ctrlreq.req.wLength <=
   81986:	4b36      	ldr	r3, [pc, #216]	; (81a60 <UOTGHS_Handler+0x2a8>)
   81988:	88da      	ldrh	r2, [r3, #6]
					(udd_ctrl_prev_payload_buf_cnt +
   8198a:	4b39      	ldr	r3, [pc, #228]	; (81a70 <UOTGHS_Handler+0x2b8>)
   8198c:	881b      	ldrh	r3, [r3, #0]
   8198e:	4423      	add	r3, r4
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_buf_cnt += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
			|| (udd_g_ctrlreq.req.wLength <=
   81990:	429a      	cmp	r2, r3
   81992:	dc13      	bgt.n	819bc <UOTGHS_Handler+0x204>
					(udd_ctrl_prev_payload_buf_cnt +
							udd_ctrl_payload_buf_cnt))) {
		// End of reception because it is a short packet
		// Before send ZLP, call intermediat calback
		// in case of data receiv generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_buf_cnt;
   81994:	4b32      	ldr	r3, [pc, #200]	; (81a60 <UOTGHS_Handler+0x2a8>)
   81996:	819c      	strh	r4, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
   81998:	695b      	ldr	r3, [r3, #20]
   8199a:	b143      	cbz	r3, 819ae <UOTGHS_Handler+0x1f6>
			if (!udd_g_ctrlreq.over_under_run()) {
   8199c:	4798      	blx	r3
   8199e:	b930      	cbnz	r0, 819ae <UOTGHS_Handler+0x1f6>
				// Stall ZLP
				udd_ctrl_stall_data();
   819a0:	4b2c      	ldr	r3, [pc, #176]	; (81a54 <UOTGHS_Handler+0x29c>)
   819a2:	4798      	blx	r3
				// Ack reception of OUT to replace NAK by a STALL
				udd_ack_out_received(0);
   819a4:	2202      	movs	r2, #2
   819a6:	4b2c      	ldr	r3, [pc, #176]	; (81a58 <UOTGHS_Handler+0x2a0>)
   819a8:	601a      	str	r2, [r3, #0]
   819aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ack_out_received(0);
   819ae:	2202      	movs	r2, #2
   819b0:	4b29      	ldr	r3, [pc, #164]	; (81a58 <UOTGHS_Handler+0x2a0>)
   819b2:	601a      	str	r2, [r3, #0]
		udd_ctrl_send_zlp_in();
   819b4:	4b31      	ldr	r3, [pc, #196]	; (81a7c <UOTGHS_Handler+0x2c4>)
   819b6:	4798      	blx	r3
   819b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_buf_cnt) {
   819bc:	4b28      	ldr	r3, [pc, #160]	; (81a60 <UOTGHS_Handler+0x2a8>)
   819be:	899b      	ldrh	r3, [r3, #12]
   819c0:	42a3      	cmp	r3, r4
   819c2:	d11a      	bne.n	819fa <UOTGHS_Handler+0x242>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
   819c4:	4b26      	ldr	r3, [pc, #152]	; (81a60 <UOTGHS_Handler+0x2a8>)
   819c6:	695b      	ldr	r3, [r3, #20]
   819c8:	b933      	cbnz	r3, 819d8 <UOTGHS_Handler+0x220>
			// No callback availabled to request a new payload buffer
			udd_ctrl_stall_data();
   819ca:	4b22      	ldr	r3, [pc, #136]	; (81a54 <UOTGHS_Handler+0x29c>)
   819cc:	4798      	blx	r3
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
   819ce:	2202      	movs	r2, #2
   819d0:	4b21      	ldr	r3, [pc, #132]	; (81a58 <UOTGHS_Handler+0x2a0>)
   819d2:	601a      	str	r2, [r3, #0]
   819d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
   819d8:	4798      	blx	r3
   819da:	b930      	cbnz	r0, 819ea <UOTGHS_Handler+0x232>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
   819dc:	4b1d      	ldr	r3, [pc, #116]	; (81a54 <UOTGHS_Handler+0x29c>)
   819de:	4798      	blx	r3
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
   819e0:	2202      	movs	r2, #2
   819e2:	4b1d      	ldr	r3, [pc, #116]	; (81a58 <UOTGHS_Handler+0x2a0>)
   819e4:	601a      	str	r2, [r3, #0]
   819e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   819ea:	4a21      	ldr	r2, [pc, #132]	; (81a70 <UOTGHS_Handler+0x2b8>)
   819ec:	4b21      	ldr	r3, [pc, #132]	; (81a74 <UOTGHS_Handler+0x2bc>)
   819ee:	8818      	ldrh	r0, [r3, #0]
   819f0:	8811      	ldrh	r1, [r2, #0]
   819f2:	4401      	add	r1, r0
   819f4:	8011      	strh	r1, [r2, #0]
		// Reinit reception on payload buffer
		udd_ctrl_payload_buf_cnt = 0;
   819f6:	2200      	movs	r2, #0
   819f8:	801a      	strh	r2, [r3, #0]
	}
	// Free buffer of control endpoint to authorize next reception
	udd_ack_out_received(0);
   819fa:	4a17      	ldr	r2, [pc, #92]	; (81a58 <UOTGHS_Handler+0x2a0>)
   819fc:	2302      	movs	r3, #2
   819fe:	6013      	str	r3, [r2, #0]
	// To detect a protocol error, enable nak interrupt on data IN phase
	udd_ack_nak_in(0);
   81a00:	2310      	movs	r3, #16
   81a02:	6013      	str	r3, [r2, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   81a04:	f3ef 8210 	mrs	r2, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   81a08:	b672      	cpsid	i
   81a0a:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   81a0e:	2000      	movs	r0, #0
   81a10:	4909      	ldr	r1, [pc, #36]	; (81a38 <UOTGHS_Handler+0x280>)
   81a12:	7008      	strb	r0, [r1, #0]
	flags = cpu_irq_save();
	udd_enable_nak_in_interrupt(0);
   81a14:	491a      	ldr	r1, [pc, #104]	; (81a80 <UOTGHS_Handler+0x2c8>)
   81a16:	600b      	str	r3, [r1, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   81a18:	2a00      	cmp	r2, #0
   81a1a:	f040 819e 	bne.w	81d5a <UOTGHS_Handler+0x5a2>
		cpu_irq_enable();
   81a1e:	2201      	movs	r2, #1
   81a20:	4b05      	ldr	r3, [pc, #20]	; (81a38 <UOTGHS_Handler+0x280>)
   81a22:	701a      	strb	r2, [r3, #0]
   81a24:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   81a28:	b662      	cpsie	i
   81a2a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81a2e:	bf00      	nop
   81a30:	0008125d 	.word	0x0008125d
   81a34:	400ac000 	.word	0x400ac000
   81a38:	200701d8 	.word	0x200701d8
   81a3c:	000808e1 	.word	0x000808e1
   81a40:	400ac220 	.word	0x400ac220
   81a44:	20070c5c 	.word	0x20070c5c
   81a48:	00081375 	.word	0x00081375
   81a4c:	000812c9 	.word	0x000812c9
   81a50:	400ac130 	.word	0x400ac130
   81a54:	00081315 	.word	0x00081315
   81a58:	400ac160 	.word	0x400ac160
   81a5c:	20180000 	.word	0x20180000
   81a60:	20070d50 	.word	0x20070d50
   81a64:	dfe7ffff 	.word	0xdfe7ffff
   81a68:	20180008 	.word	0x20180008
   81a6c:	0008091d 	.word	0x0008091d
   81a70:	20070c58 	.word	0x20070c58
   81a74:	20070c5e 	.word	0x20070c5e
   81a78:	00081385 	.word	0x00081385
   81a7c:	0008132d 	.word	0x0008132d
   81a80:	400ac1f0 	.word	0x400ac1f0
   81a84:	400ac1c0 	.word	0x400ac1c0
		dbg_print("out ");
		// OUT packet received
		udd_ctrl_out_received();
		return true;
	}
	if (Is_udd_nak_out(0)) {
   81a88:	4bb5      	ldr	r3, [pc, #724]	; (81d60 <UOTGHS_Handler+0x5a8>)
   81a8a:	681b      	ldr	r3, [r3, #0]
   81a8c:	f013 0f08 	tst.w	r3, #8
   81a90:	d013      	beq.n	81aba <UOTGHS_Handler+0x302>
		dbg_print("nako ");
		// Overflow on OUT packet
		udd_ack_nak_out(0);
   81a92:	2208      	movs	r2, #8
   81a94:	4bb3      	ldr	r3, [pc, #716]	; (81d64 <UOTGHS_Handler+0x5ac>)
   81a96:	601a      	str	r2, [r3, #0]
}


static void udd_ctrl_overflow(void)
{
	if (Is_udd_in_send(0))
   81a98:	3b30      	subs	r3, #48	; 0x30
   81a9a:	681b      	ldr	r3, [r3, #0]
   81a9c:	f013 0f01 	tst.w	r3, #1
   81aa0:	f040 815b 	bne.w	81d5a <UOTGHS_Handler+0x5a2>
		return; // Overflow ignored if IN data is received

	// The case of UDD_EPCTRL_DATA_IN is not managed
	// because the OUT endpoint is already free and OUT ZLP accepted

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   81aa4:	4bb0      	ldr	r3, [pc, #704]	; (81d68 <UOTGHS_Handler+0x5b0>)
   81aa6:	781b      	ldrb	r3, [r3, #0]
   81aa8:	2b03      	cmp	r3, #3
   81aaa:	f040 8156 	bne.w	81d5a <UOTGHS_Handler+0x5a2>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data
		udd_enable_stall_handshake(0);
   81aae:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   81ab2:	4bae      	ldr	r3, [pc, #696]	; (81d6c <UOTGHS_Handler+0x5b4>)
   81ab4:	601a      	str	r2, [r3, #0]
   81ab6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		// Overflow on OUT packet
		udd_ack_nak_out(0);
		udd_ctrl_overflow();
		return true;
	}
	if (Is_udd_nak_in(0)) {
   81aba:	4ba9      	ldr	r3, [pc, #676]	; (81d60 <UOTGHS_Handler+0x5a8>)
   81abc:	681b      	ldr	r3, [r3, #0]
   81abe:	f013 0f10 	tst.w	r3, #16
   81ac2:	f000 813a 	beq.w	81d3a <UOTGHS_Handler+0x582>
		dbg_print("naki ");
		// Underflow on IN packet
		udd_ack_nak_in(0);
   81ac6:	2210      	movs	r2, #16
   81ac8:	4ba6      	ldr	r3, [pc, #664]	; (81d64 <UOTGHS_Handler+0x5ac>)
   81aca:	601a      	str	r2, [r3, #0]
}


static void udd_ctrl_underflow(void)
{
	if (Is_udd_out_received(0))
   81acc:	3b30      	subs	r3, #48	; 0x30
   81ace:	681b      	ldr	r3, [r3, #0]
   81ad0:	f013 0f02 	tst.w	r3, #2
   81ad4:	f040 8141 	bne.w	81d5a <UOTGHS_Handler+0x5a2>
		return; // Underflow ignored if OUT data is received

	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
   81ad8:	4ba3      	ldr	r3, [pc, #652]	; (81d68 <UOTGHS_Handler+0x5b0>)
   81ada:	781b      	ldrb	r3, [r3, #0]
   81adc:	2b01      	cmp	r3, #1
   81ade:	d103      	bne.n	81ae8 <UOTGHS_Handler+0x330>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
   81ae0:	4ba3      	ldr	r3, [pc, #652]	; (81d70 <UOTGHS_Handler+0x5b8>)
   81ae2:	4798      	blx	r3
   81ae4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
   81ae8:	2b04      	cmp	r3, #4
   81aea:	f040 8136 	bne.w	81d5a <UOTGHS_Handler+0x5a2>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data
		udd_enable_stall_handshake(0);
   81aee:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   81af2:	4b9e      	ldr	r3, [pc, #632]	; (81d6c <UOTGHS_Handler+0x5b4>)
   81af4:	601a      	str	r2, [r3, #0]
   81af6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81afa:	b2da      	uxtb	r2, r3
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   81afc:	469c      	mov	ip, r3
   81afe:	46a2      	mov	sl, r4

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   81b00:	692f      	ldr	r7, [r5, #16]
   81b02:	1e5e      	subs	r6, r3, #1
   81b04:	fa08 f606 	lsl.w	r6, r8, r6
   81b08:	423e      	tst	r6, r7
   81b0a:	d018      	beq.n	81b3e <UOTGHS_Handler+0x386>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
   81b0c:	686f      	ldr	r7, [r5, #4]
   81b0e:	423e      	tst	r6, r7
   81b10:	d015      	beq.n	81b3e <UOTGHS_Handler+0x386>
			uint32_t nb_remaining;
			if (udd_endpoint_dma_get_status(ep)
   81b12:	4b98      	ldr	r3, [pc, #608]	; (81d74 <UOTGHS_Handler+0x5bc>)
   81b14:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   81b18:	68d9      	ldr	r1, [r3, #12]
   81b1a:	f011 0f01 	tst.w	r1, #1
   81b1e:	f040 811c 	bne.w	81d5a <UOTGHS_Handler+0x5a2>
					& UOTGHS_DEVDMASTATUS_CHANN_ENB) {
				return true; // Ignore EOT_STA interrupt
			}
			dbg_print("dma%x: ", ep);
			udd_disable_endpoint_dma_interrupt(ep);
   81b22:	4995      	ldr	r1, [pc, #596]	; (81d78 <UOTGHS_Handler+0x5c0>)
   81b24:	614e      	str	r6, [r1, #20]
			// Save number of data no transfered
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
   81b26:	68db      	ldr	r3, [r3, #12]
					UOTGHS_DEVDMASTATUS_BUFF_COUNT_Msk)
					>> UOTGHS_DEVDMASTATUS_BUFF_COUNT_Pos;
			if (nb_remaining) {
   81b28:	0c1b      	lsrs	r3, r3, #16
   81b2a:	d003      	beq.n	81b34 <UOTGHS_Handler+0x37c>
				// Transfer no complete (short packet or ZLP) then:
				// Update number of data transfered
				ptr_job->buf_cnt -= nb_remaining;
   81b2c:	68e1      	ldr	r1, [r4, #12]
   81b2e:	1acb      	subs	r3, r1, r3
   81b30:	60e3      	str	r3, [r4, #12]
				// Set transfer complete to stop the transfer
				ptr_job->buf_size = ptr_job->buf_cnt;
   81b32:	60a3      	str	r3, [r4, #8]
			}
			udd_ep_trans_done(ep);
   81b34:	4610      	mov	r0, r2
   81b36:	4b91      	ldr	r3, [pc, #580]	; (81d7c <UOTGHS_Handler+0x5c4>)
   81b38:	4798      	blx	r3
   81b3a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   81b3e:	692e      	ldr	r6, [r5, #16]
   81b40:	fa09 fc0c 	lsl.w	ip, r9, ip
   81b44:	ea1c 0f06 	tst.w	ip, r6
   81b48:	d046      	beq.n	81bd8 <UOTGHS_Handler+0x420>
   81b4a:	ea4f 0b83 	mov.w	fp, r3, lsl #2
   81b4e:	f101 0790 	add.w	r7, r1, #144	; 0x90
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   81b52:	f8d1 6090 	ldr.w	r6, [r1, #144]	; 0x90
   81b56:	f016 0f01 	tst.w	r6, #1
   81b5a:	d014      	beq.n	81b86 <UOTGHS_Handler+0x3ce>
					&& Is_udd_in_send(ep)) {
   81b5c:	680e      	ldr	r6, [r1, #0]
   81b5e:	f016 0f01 	tst.w	r6, #1
   81b62:	d010      	beq.n	81b86 <UOTGHS_Handler+0x3ce>
				dbg_print("I ");
				udd_disable_in_send_interrupt(ep);
   81b64:	4b86      	ldr	r3, [pc, #536]	; (81d80 <UOTGHS_Handler+0x5c8>)
   81b66:	2101      	movs	r1, #1
   81b68:	f84b 1003 	str.w	r1, [fp, r3]
				// One bank is free then send a ZLP
				udd_ack_in_send(ep);
   81b6c:	487d      	ldr	r0, [pc, #500]	; (81d64 <UOTGHS_Handler+0x5ac>)
   81b6e:	f84b 1000 	str.w	r1, [fp, r0]
				udd_ack_fifocon(ep);
   81b72:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   81b76:	f84b 1003 	str.w	r1, [fp, r3]
				udd_ep_finish_job(ptr_job, false, ep);
   81b7a:	4650      	mov	r0, sl
   81b7c:	2100      	movs	r1, #0
   81b7e:	4b81      	ldr	r3, [pc, #516]	; (81d84 <UOTGHS_Handler+0x5cc>)
   81b80:	4798      	blx	r3
   81b82:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				return true;
			}
			if (Is_udd_bank_interrupt_enabled(ep)
   81b86:	683a      	ldr	r2, [r7, #0]
   81b88:	f412 5f80 	tst.w	r2, #4096	; 0x1000
   81b8c:	d024      	beq.n	81bd8 <UOTGHS_Handler+0x420>
					&& (0 == udd_nb_busy_bank(ep))) {
   81b8e:	680a      	ldr	r2, [r1, #0]
   81b90:	f412 5f40 	tst.w	r2, #12288	; 0x3000
   81b94:	d120      	bne.n	81bd8 <UOTGHS_Handler+0x420>
				dbg_print("EoT ");
				// End of background transfer on IN endpoint
				udd_disable_bank_interrupt(ep);
   81b96:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   81b9a:	4b79      	ldr	r3, [pc, #484]	; (81d80 <UOTGHS_Handler+0x5c8>)
   81b9c:	f84b 2003 	str.w	r2, [fp, r3]
				udd_disable_endpoint_interrupt(ep);
   81ba0:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
   81ba4:	f8c3 c014 	str.w	ip, [r3, #20]

				Assert(ptr_job->stall_requested);
				// A stall has been requested during backgound transfer
				ptr_job->stall_requested = false;
   81ba8:	f89a 3014 	ldrb.w	r3, [sl, #20]
   81bac:	f36f 0382 	bfc	r3, #2, #1
   81bb0:	f88a 3014 	strb.w	r3, [sl, #20]
				udd_disable_endpoint_bank_autoswitch(ep);
   81bb4:	4b74      	ldr	r3, [pc, #464]	; (81d88 <UOTGHS_Handler+0x5d0>)
   81bb6:	f85b 2003 	ldr.w	r2, [fp, r3]
   81bba:	f422 7200 	bic.w	r2, r2, #512	; 0x200
   81bbe:	f84b 2003 	str.w	r2, [fp, r3]
				udd_enable_stall_handshake(ep);
   81bc2:	33f0      	adds	r3, #240	; 0xf0
   81bc4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   81bc8:	f84b 2003 	str.w	r2, [fp, r3]
				udd_reset_data_toggle(ep);
   81bcc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   81bd0:	f84b 2003 	str.w	r2, [fp, r3]
   81bd4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81bd8:	3301      	adds	r3, #1
   81bda:	3418      	adds	r4, #24
   81bdc:	3104      	adds	r1, #4
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   81bde:	2b04      	cmp	r3, #4
   81be0:	d18b      	bne.n	81afa <UOTGHS_Handler+0x342>
   81be2:	e0b4      	b.n	81d4e <UOTGHS_Handler+0x596>
	}
#endif

	// USB bus reset detection
	if (Is_udd_reset()) {
		udd_ack_reset();
   81be4:	2208      	movs	r2, #8
   81be6:	4b64      	ldr	r3, [pc, #400]	; (81d78 <UOTGHS_Handler+0x5c0>)
   81be8:	609a      	str	r2, [r3, #8]
   81bea:	4605      	mov	r5, r0
static void udd_ep_job_table_kill(void)
{
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   81bec:	2400      	movs	r4, #0
		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
   81bee:	2701      	movs	r7, #1
   81bf0:	4e64      	ldr	r6, [pc, #400]	; (81d84 <UOTGHS_Handler+0x5cc>)
   81bf2:	3401      	adds	r4, #1
   81bf4:	b2e4      	uxtb	r4, r4
   81bf6:	4628      	mov	r0, r5
   81bf8:	4639      	mov	r1, r7
   81bfa:	4622      	mov	r2, r4
   81bfc:	47b0      	blx	r6
   81bfe:	3518      	adds	r5, #24
static void udd_ep_job_table_kill(void)
{
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   81c00:	2c03      	cmp	r4, #3
   81c02:	d1f6      	bne.n	81bf2 <UOTGHS_Handler+0x43a>
		// Abort all jobs on-going
#if (USB_DEVICE_MAX_EP != 0)
		udd_ep_job_table_kill();
#endif
		// Reset USB Device Stack Core
		udc_reset();
   81c04:	4b61      	ldr	r3, [pc, #388]	; (81d8c <UOTGHS_Handler+0x5d4>)
   81c06:	4798      	blx	r3
static void udd_reset_ep_ctrl(void)
{
	irqflags_t flags;

	// Reset USB address to 0
	udd_configure_address(0);
   81c08:	4b5b      	ldr	r3, [pc, #364]	; (81d78 <UOTGHS_Handler+0x5c0>)
   81c0a:	681a      	ldr	r2, [r3, #0]
   81c0c:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   81c10:	601a      	str	r2, [r3, #0]
	udd_enable_address();
   81c12:	681a      	ldr	r2, [r3, #0]
   81c14:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   81c18:	601a      	str	r2, [r3, #0]

	// Alloc and configure control endpoint
	udd_configure_endpoint(0,
   81c1a:	4a5b      	ldr	r2, [pc, #364]	; (81d88 <UOTGHS_Handler+0x5d0>)
   81c1c:	6811      	ldr	r1, [r2, #0]
   81c1e:	f421 51cb 	bic.w	r1, r1, #6496	; 0x1960
   81c22:	f021 011c 	bic.w	r1, r1, #28
   81c26:	f041 0130 	orr.w	r1, r1, #48	; 0x30
   81c2a:	6011      	str	r1, [r2, #0]
		USB_EP_TYPE_CONTROL,
		0,
		USB_DEVICE_EP_CTRL_SIZE,
		UOTGHS_DEVEPTCFG_EPBK_1_BANK);

	udd_allocate_memory(0);
   81c2c:	6811      	ldr	r1, [r2, #0]
   81c2e:	f041 0102 	orr.w	r1, r1, #2
   81c32:	6011      	str	r1, [r2, #0]
	udd_enable_endpoint(0);
   81c34:	69da      	ldr	r2, [r3, #28]
   81c36:	f042 0201 	orr.w	r2, r2, #1
   81c3a:	61da      	str	r2, [r3, #28]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   81c3c:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   81c40:	b672      	cpsid	i
   81c42:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   81c46:	2000      	movs	r0, #0
   81c48:	4a51      	ldr	r2, [pc, #324]	; (81d90 <UOTGHS_Handler+0x5d8>)
   81c4a:	7010      	strb	r0, [r2, #0]
	flags = cpu_irq_save();
	udd_enable_setup_received_interrupt(0);
   81c4c:	4a47      	ldr	r2, [pc, #284]	; (81d6c <UOTGHS_Handler+0x5b4>)
   81c4e:	2004      	movs	r0, #4
   81c50:	6010      	str	r0, [r2, #0]
	udd_enable_out_received_interrupt(0);
   81c52:	2002      	movs	r0, #2
   81c54:	6010      	str	r0, [r2, #0]
	udd_enable_endpoint_interrupt(0);
   81c56:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   81c5a:	619a      	str	r2, [r3, #24]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   81c5c:	b929      	cbnz	r1, 81c6a <UOTGHS_Handler+0x4b2>
		cpu_irq_enable();
   81c5e:	2201      	movs	r2, #1
   81c60:	4b4b      	ldr	r3, [pc, #300]	; (81d90 <UOTGHS_Handler+0x5d8>)
   81c62:	701a      	strb	r2, [r3, #0]
   81c64:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   81c68:	b662      	cpsie	i
		// Reset USB Device Stack Core
		udc_reset();
		// Reset endpoint control
		udd_reset_ep_ctrl();
		// Reset endpoint control management
		udd_ctrl_init();
   81c6a:	4b4a      	ldr	r3, [pc, #296]	; (81d94 <UOTGHS_Handler+0x5dc>)
   81c6c:	4798      	blx	r3
		goto udd_interrupt_end;
   81c6e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}

	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
   81c72:	4b41      	ldr	r3, [pc, #260]	; (81d78 <UOTGHS_Handler+0x5c0>)
   81c74:	691b      	ldr	r3, [r3, #16]
   81c76:	f013 0f01 	tst.w	r3, #1
   81c7a:	d01a      	beq.n	81cb2 <UOTGHS_Handler+0x4fa>
   81c7c:	4b3e      	ldr	r3, [pc, #248]	; (81d78 <UOTGHS_Handler+0x5c0>)
   81c7e:	685b      	ldr	r3, [r3, #4]
   81c80:	f013 0f01 	tst.w	r3, #1
   81c84:	d015      	beq.n	81cb2 <UOTGHS_Handler+0x4fa>
		otg_unfreeze_clock();
   81c86:	4b3c      	ldr	r3, [pc, #240]	; (81d78 <UOTGHS_Handler+0x5c0>)
   81c88:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   81c8c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
   81c90:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
		// The suspend interrupt is automatic acked when a wakeup occur
		udd_disable_suspend_interrupt();
   81c94:	2201      	movs	r2, #1
   81c96:	615a      	str	r2, [r3, #20]
		udd_enable_wake_up_interrupt();
   81c98:	2210      	movs	r2, #16
   81c9a:	619a      	str	r2, [r3, #24]
		otg_freeze_clock(); // Mandatory to exit of sleep mode after a wakeup event
   81c9c:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   81ca0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   81ca4:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
		udd_sleep_mode(false);  // Enter in SUSPEND mode
   81ca8:	2000      	movs	r0, #0
   81caa:	4b3b      	ldr	r3, [pc, #236]	; (81d98 <UOTGHS_Handler+0x5e0>)
   81cac:	4798      	blx	r3
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_end;
   81cae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}

	if (Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) {
   81cb2:	4b31      	ldr	r3, [pc, #196]	; (81d78 <UOTGHS_Handler+0x5c0>)
   81cb4:	691b      	ldr	r3, [r3, #16]
   81cb6:	f013 0f10 	tst.w	r3, #16
   81cba:	d01e      	beq.n	81cfa <UOTGHS_Handler+0x542>
   81cbc:	4b2e      	ldr	r3, [pc, #184]	; (81d78 <UOTGHS_Handler+0x5c0>)
   81cbe:	685b      	ldr	r3, [r3, #4]
   81cc0:	f013 0f10 	tst.w	r3, #16
   81cc4:	d019      	beq.n	81cfa <UOTGHS_Handler+0x542>
		// Ack wakeup interrupt and enable suspend interrupt
		otg_unfreeze_clock();
   81cc6:	4b2c      	ldr	r3, [pc, #176]	; (81d78 <UOTGHS_Handler+0x5c0>)
   81cc8:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   81ccc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
   81cd0:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
		// Check USB clock ready after suspend and eventually sleep USB clock
		while (!Is_otg_clock_usable()) {
   81cd4:	e003      	b.n	81cde <UOTGHS_Handler+0x526>
			if (Is_udd_suspend()) {
   81cd6:	685a      	ldr	r2, [r3, #4]
   81cd8:	f012 0f01 	tst.w	r2, #1
   81cdc:	d104      	bne.n	81ce8 <UOTGHS_Handler+0x530>

	if (Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) {
		// Ack wakeup interrupt and enable suspend interrupt
		otg_unfreeze_clock();
		// Check USB clock ready after suspend and eventually sleep USB clock
		while (!Is_otg_clock_usable()) {
   81cde:	f8d3 2804 	ldr.w	r2, [r3, #2052]	; 0x804
   81ce2:	f412 4f80 	tst.w	r2, #16384	; 0x4000
   81ce6:	d0f6      	beq.n	81cd6 <UOTGHS_Handler+0x51e>
			if (Is_udd_suspend()) {
				break; // In case of USB state change in HS
			}
		};
		// The wakeup interrupt is automatic acked when a suspend occur
		udd_disable_wake_up_interrupt();
   81ce8:	4b23      	ldr	r3, [pc, #140]	; (81d78 <UOTGHS_Handler+0x5c0>)
   81cea:	2210      	movs	r2, #16
   81cec:	615a      	str	r2, [r3, #20]
		udd_enable_suspend_interrupt();
   81cee:	2001      	movs	r0, #1
   81cf0:	6198      	str	r0, [r3, #24]
		udd_sleep_mode(true); // Enter in IDLE mode
   81cf2:	4b29      	ldr	r3, [pc, #164]	; (81d98 <UOTGHS_Handler+0x5e0>)
   81cf4:	4798      	blx	r3
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
#endif
		goto udd_interrupt_end;
   81cf6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}

	if (Is_otg_vbus_transition()) {
   81cfa:	4b1f      	ldr	r3, [pc, #124]	; (81d78 <UOTGHS_Handler+0x5c0>)
   81cfc:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
   81d00:	f013 0f02 	tst.w	r3, #2
   81d04:	d029      	beq.n	81d5a <UOTGHS_Handler+0x5a2>
		dbg_print("VBus ");
		// Ack Vbus transition and send status to high level
		otg_unfreeze_clock();
   81d06:	4b1c      	ldr	r3, [pc, #112]	; (81d78 <UOTGHS_Handler+0x5c0>)
   81d08:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   81d0c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
   81d10:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
		otg_ack_vbus_transition();
   81d14:	2202      	movs	r2, #2
   81d16:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
		otg_freeze_clock();
   81d1a:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   81d1e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   81d22:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
#ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
		if (Is_otg_vbus_high()) {
   81d26:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
   81d2a:	f413 6f00 	tst.w	r3, #2048	; 0x800
			udd_attach();
   81d2e:	bf14      	ite	ne
   81d30:	4b1a      	ldrne	r3, [pc, #104]	; (81d9c <UOTGHS_Handler+0x5e4>)
		} else {
			udd_detach();
   81d32:	4b1b      	ldreq	r3, [pc, #108]	; (81da0 <UOTGHS_Handler+0x5e8>)
   81d34:	4798      	blx	r3
   81d36:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81d3a:	481a      	ldr	r0, [pc, #104]	; (81da4 <UOTGHS_Handler+0x5ec>)
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
	for (i = 0; i < nb_data; i++) {
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_buf_cnt += nb_data;
   81d3c:	4604      	mov	r4, r0
   81d3e:	491a      	ldr	r1, [pc, #104]	; (81da8 <UOTGHS_Handler+0x5f0>)
   81d40:	2301      	movs	r3, #1
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   81d42:	4d0d      	ldr	r5, [pc, #52]	; (81d78 <UOTGHS_Handler+0x5c0>)
   81d44:	f04f 7800 	mov.w	r8, #33554432	; 0x2000000
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   81d48:	f44f 5980 	mov.w	r9, #4096	; 0x1000
   81d4c:	e6d5      	b.n	81afa <UOTGHS_Handler+0x342>
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
	}
#endif

	// USB bus reset detection
	if (Is_udd_reset()) {
   81d4e:	4b0a      	ldr	r3, [pc, #40]	; (81d78 <UOTGHS_Handler+0x5c0>)
   81d50:	685b      	ldr	r3, [r3, #4]
   81d52:	f013 0f08 	tst.w	r3, #8
   81d56:	d08c      	beq.n	81c72 <UOTGHS_Handler+0x4ba>
   81d58:	e744      	b.n	81be4 <UOTGHS_Handler+0x42c>
   81d5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81d5e:	bf00      	nop
   81d60:	400ac130 	.word	0x400ac130
   81d64:	400ac160 	.word	0x400ac160
   81d68:	20070c5c 	.word	0x20070c5c
   81d6c:	400ac1f0 	.word	0x400ac1f0
   81d70:	0008132d 	.word	0x0008132d
   81d74:	400ac300 	.word	0x400ac300
   81d78:	400ac000 	.word	0x400ac000
   81d7c:	00081519 	.word	0x00081519
   81d80:	400ac220 	.word	0x400ac220
   81d84:	000814e5 	.word	0x000814e5
   81d88:	400ac100 	.word	0x400ac100
   81d8c:	00080899 	.word	0x00080899
   81d90:	200701d8 	.word	0x200701d8
   81d94:	000812c9 	.word	0x000812c9
   81d98:	0008167d 	.word	0x0008167d
   81d9c:	00081705 	.word	0x00081705
   81da0:	00081785 	.word	0x00081785
   81da4:	20070c10 	.word	0x20070c10
   81da8:	400ac134 	.word	0x400ac134

00081dac <udd_is_high_speed>:
#ifdef USB_DEVICE_HS_SUPPORT
	return !Is_udd_full_speed_mode();
#else
	return false;
#endif
}
   81dac:	2000      	movs	r0, #0
   81dae:	4770      	bx	lr

00081db0 <udd_set_address>:


void udd_set_address(uint8_t address)
{
	udd_disable_address();
   81db0:	4b08      	ldr	r3, [pc, #32]	; (81dd4 <udd_set_address+0x24>)
   81db2:	681a      	ldr	r2, [r3, #0]
   81db4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   81db8:	601a      	str	r2, [r3, #0]
	udd_configure_address(address);
   81dba:	681a      	ldr	r2, [r3, #0]
   81dbc:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   81dc0:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   81dc4:	4302      	orrs	r2, r0
   81dc6:	601a      	str	r2, [r3, #0]
	udd_enable_address();
   81dc8:	681a      	ldr	r2, [r3, #0]
   81dca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   81dce:	601a      	str	r2, [r3, #0]
   81dd0:	4770      	bx	lr
   81dd2:	bf00      	nop
   81dd4:	400ac000 	.word	0x400ac000

00081dd8 <udd_getaddress>:
}


uint8_t udd_getaddress(void)
{
	return udd_get_configured_address();
   81dd8:	4b02      	ldr	r3, [pc, #8]	; (81de4 <udd_getaddress+0xc>)
   81dda:	6818      	ldr	r0, [r3, #0]
}
   81ddc:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   81de0:	4770      	bx	lr
   81de2:	bf00      	nop
   81de4:	400ac000 	.word	0x400ac000

00081de8 <udd_get_frame_number>:


uint16_t udd_get_frame_number(void)
{
	return udd_frame_number();
   81de8:	4b02      	ldr	r3, [pc, #8]	; (81df4 <udd_get_frame_number+0xc>)
   81dea:	6a18      	ldr	r0, [r3, #32]
}
   81dec:	f3c0 00ca 	ubfx	r0, r0, #3, #11
   81df0:	4770      	bx	lr
   81df2:	bf00      	nop
   81df4:	400ac000 	.word	0x400ac000

00081df8 <udd_get_micro_frame_number>:

uint16_t udd_get_micro_frame_number(void)
{
	return udd_micro_frame_number();
   81df8:	4b02      	ldr	r3, [pc, #8]	; (81e04 <udd_get_micro_frame_number+0xc>)
   81dfa:	6a18      	ldr	r0, [r3, #32]
}
   81dfc:	f3c0 000d 	ubfx	r0, r0, #0, #14
   81e00:	4770      	bx	lr
   81e02:	bf00      	nop
   81e04:	400ac000 	.word	0x400ac000

00081e08 <udd_set_setup_payload>:
}


void udd_set_setup_payload(uint8_t *payload, uint16_t payload_size)
{
	udd_g_ctrlreq.payload = payload;
   81e08:	4b01      	ldr	r3, [pc, #4]	; (81e10 <udd_set_setup_payload+0x8>)
   81e0a:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
   81e0c:	8199      	strh	r1, [r3, #12]
   81e0e:	4770      	bx	lr
   81e10:	20070d50 	.word	0x20070d50

00081e14 <udd_ep_free>:
	return true;
}


void udd_ep_free(udd_ep_id_t ep)
{
   81e14:	b570      	push	{r4, r5, r6, lr}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   81e16:	f000 020f 	and.w	r2, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
   81e1a:	2a03      	cmp	r2, #3
   81e1c:	d81f      	bhi.n	81e5e <udd_ep_free+0x4a>
		return;
	}
	udd_disable_endpoint(ep_index);
   81e1e:	4b10      	ldr	r3, [pc, #64]	; (81e60 <udd_ep_free+0x4c>)
   81e20:	69d8      	ldr	r0, [r3, #28]
   81e22:	2101      	movs	r1, #1
   81e24:	fa01 f402 	lsl.w	r4, r1, r2
   81e28:	ea20 0004 	bic.w	r0, r0, r4
   81e2c:	61d8      	str	r0, [r3, #28]
	udd_unallocate_memory(ep_index);
   81e2e:	f503 7380 	add.w	r3, r3, #256	; 0x100
   81e32:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   81e36:	f020 0002 	bic.w	r0, r0, #2
   81e3a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
static void udd_ep_abort_job(udd_ep_id_t ep)
{
	ep &= USB_EP_ADDR_MASK;

	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
   81e3e:	1e54      	subs	r4, r2, #1
   81e40:	4d08      	ldr	r5, [pc, #32]	; (81e64 <udd_ep_free+0x50>)
   81e42:	fa04 f601 	lsl.w	r6, r4, r1
   81e46:	1930      	adds	r0, r6, r4
   81e48:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
   81e4c:	4b06      	ldr	r3, [pc, #24]	; (81e68 <udd_ep_free+0x54>)
   81e4e:	4798      	blx	r3
		return;
	}
	udd_disable_endpoint(ep_index);
	udd_unallocate_memory(ep_index);
	udd_ep_abort_job(ep);
	udd_ep_job[ep_index - 1].stall_requested = false;
   81e50:	4434      	add	r4, r6
   81e52:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
   81e56:	7d2b      	ldrb	r3, [r5, #20]
   81e58:	f36f 0382 	bfc	r3, #2, #1
   81e5c:	752b      	strb	r3, [r5, #20]
   81e5e:	bd70      	pop	{r4, r5, r6, pc}
   81e60:	400ac000 	.word	0x400ac000
   81e64:	20070c10 	.word	0x20070c10
   81e68:	000814e5 	.word	0x000814e5

00081e6c <udd_ep_is_halted>:


bool udd_ep_is_halted(udd_ep_id_t ep)
{
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	return Is_udd_endpoint_stall_requested(ep_index);
   81e6c:	f000 000f 	and.w	r0, r0, #15
   81e70:	4b02      	ldr	r3, [pc, #8]	; (81e7c <udd_ep_is_halted+0x10>)
   81e72:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
   81e76:	f3c0 40c0 	ubfx	r0, r0, #19, #1
   81e7a:	4770      	bx	lr
   81e7c:	400ac1c0 	.word	0x400ac1c0

00081e80 <udd_ep_set_halt>:


bool udd_ep_set_halt(udd_ep_id_t ep)
{
   81e80:	b430      	push	{r4, r5}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   81e82:	f000 030f 	and.w	r3, r0, #15
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	irqflags_t flags;

	if (USB_DEVICE_MAX_EP < ep_index) {
   81e86:	2b03      	cmp	r3, #3
   81e88:	d854      	bhi.n	81f34 <udd_ep_set_halt+0xb4>
		return false;
	}

	if (Is_udd_endpoint_stall_requested(ep_index) // Endpoint stalled
   81e8a:	4a31      	ldr	r2, [pc, #196]	; (81f50 <udd_ep_set_halt+0xd0>)
   81e8c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   81e90:	f412 2f00 	tst.w	r2, #524288	; 0x80000
   81e94:	d150      	bne.n	81f38 <udd_ep_set_halt+0xb8>


bool udd_ep_set_halt(udd_ep_id_t ep)
{
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
   81e96:	1e5a      	subs	r2, r3, #1
   81e98:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   81e9c:	492d      	ldr	r1, [pc, #180]	; (81f54 <udd_ep_set_halt+0xd4>)
   81e9e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
	if (USB_DEVICE_MAX_EP < ep_index) {
		return false;
	}

	if (Is_udd_endpoint_stall_requested(ep_index) // Endpoint stalled
			|| ptr_job->stall_requested) { // Endpoint stall is requested
   81ea2:	7d11      	ldrb	r1, [r2, #20]
   81ea4:	f011 0f04 	tst.w	r1, #4
   81ea8:	d148      	bne.n	81f3c <udd_ep_set_halt+0xbc>
		return true; // Already STALL
	}

	if (ptr_job->busy == true) {
   81eaa:	f011 0f01 	tst.w	r1, #1
   81eae:	d147      	bne.n	81f40 <udd_ep_set_halt+0xc0>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   81eb0:	f3ef 8110 	mrs	r1, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
   81eb4:	f1d1 0101 	rsbs	r1, r1, #1
   81eb8:	bf38      	it	cc
   81eba:	2100      	movcc	r1, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   81ebc:	b672      	cpsid	i
   81ebe:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   81ec2:	2500      	movs	r5, #0
   81ec4:	4c24      	ldr	r4, [pc, #144]	; (81f58 <udd_ep_set_halt+0xd8>)
   81ec6:	7025      	strb	r5, [r4, #0]
		return false; // Job on going, stall impossible
	}

	flags = cpu_irq_save();
	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
   81ec8:	f010 0f80 	tst.w	r0, #128	; 0x80
   81ecc:	d01a      	beq.n	81f04 <udd_ep_set_halt+0x84>
   81ece:	4823      	ldr	r0, [pc, #140]	; (81f5c <udd_ep_set_halt+0xdc>)
   81ed0:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
   81ed4:	f410 5f40 	tst.w	r0, #12288	; 0x3000
   81ed8:	d014      	beq.n	81f04 <udd_ep_set_halt+0x84>
		// Delay the stall after the end of IN transfer on USB line
		ptr_job->stall_requested = true;
   81eda:	7d10      	ldrb	r0, [r2, #20]
   81edc:	f040 0004 	orr.w	r0, r0, #4
   81ee0:	7510      	strb	r0, [r2, #20]
#ifdef UDD_EP_FIFO_SUPPORTED
		udd_disable_in_send_interrupt(ep_index);
		udd_enable_endpoint_bank_autoswitch(ep_index);
#endif
		udd_enable_bank_interrupt(ep_index);
   81ee2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   81ee6:	481e      	ldr	r0, [pc, #120]	; (81f60 <udd_ep_set_halt+0xe0>)
   81ee8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		udd_enable_endpoint_interrupt(ep_index);
   81eec:	fa02 f303 	lsl.w	r3, r2, r3
   81ef0:	f5a0 70f8 	sub.w	r0, r0, #496	; 0x1f0
   81ef4:	6183      	str	r3, [r0, #24]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   81ef6:	b329      	cbz	r1, 81f44 <udd_ep_set_halt+0xc4>
		cpu_irq_enable();
   81ef8:	2001      	movs	r0, #1
   81efa:	7020      	strb	r0, [r4, #0]
   81efc:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   81f00:	b662      	cpsie	i
   81f02:	e022      	b.n	81f4a <udd_ep_set_halt+0xca>
		cpu_irq_restore(flags);
		return true;
	}
	// Stall endpoint immediately
	udd_disable_endpoint_bank_autoswitch(ep_index);
   81f04:	4a17      	ldr	r2, [pc, #92]	; (81f64 <udd_ep_set_halt+0xe4>)
   81f06:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
   81f0a:	f420 7000 	bic.w	r0, r0, #512	; 0x200
   81f0e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
	udd_ack_stall(ep_index);
   81f12:	2040      	movs	r0, #64	; 0x40
   81f14:	3260      	adds	r2, #96	; 0x60
   81f16:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
	udd_enable_stall_handshake(ep_index);
   81f1a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
   81f1e:	3290      	adds	r2, #144	; 0x90
   81f20:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   81f24:	b181      	cbz	r1, 81f48 <udd_ep_set_halt+0xc8>
		cpu_irq_enable();
   81f26:	2001      	movs	r0, #1
   81f28:	4b0b      	ldr	r3, [pc, #44]	; (81f58 <udd_ep_set_halt+0xd8>)
   81f2a:	7018      	strb	r0, [r3, #0]
   81f2c:	f3bf 8f5f 	dmb	sy
   81f30:	b662      	cpsie	i
   81f32:	e00a      	b.n	81f4a <udd_ep_set_halt+0xca>
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	irqflags_t flags;

	if (USB_DEVICE_MAX_EP < ep_index) {
		return false;
   81f34:	2000      	movs	r0, #0
   81f36:	e008      	b.n	81f4a <udd_ep_set_halt+0xca>
	}

	if (Is_udd_endpoint_stall_requested(ep_index) // Endpoint stalled
			|| ptr_job->stall_requested) { // Endpoint stall is requested
		return true; // Already STALL
   81f38:	2001      	movs	r0, #1
   81f3a:	e006      	b.n	81f4a <udd_ep_set_halt+0xca>
   81f3c:	2001      	movs	r0, #1
   81f3e:	e004      	b.n	81f4a <udd_ep_set_halt+0xca>
	}

	if (ptr_job->busy == true) {
		return false; // Job on going, stall impossible
   81f40:	2000      	movs	r0, #0
   81f42:	e002      	b.n	81f4a <udd_ep_set_halt+0xca>
		udd_enable_endpoint_bank_autoswitch(ep_index);
#endif
		udd_enable_bank_interrupt(ep_index);
		udd_enable_endpoint_interrupt(ep_index);
		cpu_irq_restore(flags);
		return true;
   81f44:	2001      	movs	r0, #1
   81f46:	e000      	b.n	81f4a <udd_ep_set_halt+0xca>
	// Stall endpoint immediately
	udd_disable_endpoint_bank_autoswitch(ep_index);
	udd_ack_stall(ep_index);
	udd_enable_stall_handshake(ep_index);
	cpu_irq_restore(flags);
	return true;
   81f48:	2001      	movs	r0, #1
}
   81f4a:	bc30      	pop	{r4, r5}
   81f4c:	4770      	bx	lr
   81f4e:	bf00      	nop
   81f50:	400ac1c0 	.word	0x400ac1c0
   81f54:	20070c10 	.word	0x20070c10
   81f58:	200701d8 	.word	0x200701d8
   81f5c:	400ac130 	.word	0x400ac130
   81f60:	400ac1f0 	.word	0x400ac1f0
   81f64:	400ac100 	.word	0x400ac100

00081f68 <udd_ep_clear_halt>:


bool udd_ep_clear_halt(udd_ep_id_t ep)
{
   81f68:	b538      	push	{r3, r4, r5, lr}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   81f6a:	f000 000f 	and.w	r0, r0, #15
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	bool b_stall_cleared = false;

	if (USB_DEVICE_MAX_EP < ep_index)
   81f6e:	2803      	cmp	r0, #3
   81f70:	d840      	bhi.n	81ff4 <udd_ep_clear_halt+0x8c>


bool udd_ep_clear_halt(udd_ep_id_t ep)
{
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
   81f72:	4927      	ldr	r1, [pc, #156]	; (82010 <udd_ep_clear_halt+0xa8>)
   81f74:	1e43      	subs	r3, r0, #1
   81f76:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   81f7a:	00dc      	lsls	r4, r3, #3
   81f7c:	190b      	adds	r3, r1, r4
	bool b_stall_cleared = false;

	if (USB_DEVICE_MAX_EP < ep_index)
		return false;

	if (ptr_job->stall_requested) {
   81f7e:	7d1a      	ldrb	r2, [r3, #20]
   81f80:	f012 0f04 	tst.w	r2, #4
   81f84:	d03a      	beq.n	81ffc <udd_ep_clear_halt+0x94>
		// Endpoint stall has been requested but not done
		// Remove stall request
		ptr_job->stall_requested = false;
   81f86:	7d1a      	ldrb	r2, [r3, #20]
   81f88:	f36f 0282 	bfc	r2, #2, #1
   81f8c:	751a      	strb	r2, [r3, #20]
		udd_disable_bank_interrupt(ep_index);
   81f8e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   81f92:	4d20      	ldr	r5, [pc, #128]	; (82014 <udd_ep_clear_halt+0xac>)
   81f94:	f845 2020 	str.w	r2, [r5, r0, lsl #2]
		udd_disable_endpoint_interrupt(ep_index);
   81f98:	4082      	lsls	r2, r0
   81f9a:	f5a5 7508 	sub.w	r5, r5, #544	; 0x220
   81f9e:	616a      	str	r2, [r5, #20]
		b_stall_cleared = true;
	}
	if (Is_udd_endpoint_stall_requested(ep_index)) {
   81fa0:	0082      	lsls	r2, r0, #2
   81fa2:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
   81fa6:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
   81faa:	f410 2f00 	tst.w	r0, #524288	; 0x80000
   81fae:	d015      	beq.n	81fdc <udd_ep_clear_halt+0x74>
		if (Is_udd_stall(ep_index)) {
   81fb0:	4819      	ldr	r0, [pc, #100]	; (82018 <udd_ep_clear_halt+0xb0>)
   81fb2:	5810      	ldr	r0, [r2, r0]
   81fb4:	f010 0f40 	tst.w	r0, #64	; 0x40
   81fb8:	d006      	beq.n	81fc8 <udd_ep_clear_halt+0x60>
			udd_ack_stall(ep_index);
   81fba:	2540      	movs	r5, #64	; 0x40
   81fbc:	4817      	ldr	r0, [pc, #92]	; (8201c <udd_ep_clear_halt+0xb4>)
   81fbe:	5015      	str	r5, [r2, r0]
			// A packet has been stalled
			// then reset datatoggle
			udd_reset_data_toggle(ep_index);
   81fc0:	f44f 2580 	mov.w	r5, #262144	; 0x40000
   81fc4:	3090      	adds	r0, #144	; 0x90
   81fc6:	5015      	str	r5, [r2, r0]
		}
		// Disable stall
		udd_disable_stall_handshake(ep_index);
   81fc8:	f44f 2500 	mov.w	r5, #524288	; 0x80000
   81fcc:	4811      	ldr	r0, [pc, #68]	; (82014 <udd_ep_clear_halt+0xac>)
   81fce:	5015      	str	r5, [r2, r0]
		udd_enable_endpoint_bank_autoswitch(ep_index);
   81fd0:	f5a0 7090 	sub.w	r0, r0, #288	; 0x120
   81fd4:	5815      	ldr	r5, [r2, r0]
   81fd6:	f445 7500 	orr.w	r5, r5, #512	; 0x200
   81fda:	5015      	str	r5, [r2, r0]
		b_stall_cleared = true;
	}
	if (b_stall_cleared) {
		// If a job is register on clear halt action
		// then execute callback
		if (ptr_job->busy == true) {
   81fdc:	7d1a      	ldrb	r2, [r3, #20]
   81fde:	f012 0f01 	tst.w	r2, #1
   81fe2:	d009      	beq.n	81ff8 <udd_ep_clear_halt+0x90>
			ptr_job->busy = false;
   81fe4:	7d1a      	ldrb	r2, [r3, #20]
   81fe6:	f36f 0200 	bfc	r2, #0, #1
   81fea:	751a      	strb	r2, [r3, #20]
			ptr_job->call_nohalt();
   81fec:	590b      	ldr	r3, [r1, r4]
   81fee:	4798      	blx	r3
		}
	}
	return true;
   81ff0:	2001      	movs	r0, #1
   81ff2:	bd38      	pop	{r3, r4, r5, pc}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	bool b_stall_cleared = false;

	if (USB_DEVICE_MAX_EP < ep_index)
		return false;
   81ff4:	2000      	movs	r0, #0
   81ff6:	bd38      	pop	{r3, r4, r5, pc}
		if (ptr_job->busy == true) {
			ptr_job->busy = false;
			ptr_job->call_nohalt();
		}
	}
	return true;
   81ff8:	2001      	movs	r0, #1
   81ffa:	bd38      	pop	{r3, r4, r5, pc}
		ptr_job->stall_requested = false;
		udd_disable_bank_interrupt(ep_index);
		udd_disable_endpoint_interrupt(ep_index);
		b_stall_cleared = true;
	}
	if (Is_udd_endpoint_stall_requested(ep_index)) {
   81ffc:	0082      	lsls	r2, r0, #2
   81ffe:	4d08      	ldr	r5, [pc, #32]	; (82020 <udd_ep_clear_halt+0xb8>)
   82000:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
   82004:	f410 2f00 	tst.w	r0, #524288	; 0x80000
   82008:	d1d2      	bne.n	81fb0 <udd_ep_clear_halt+0x48>
		if (ptr_job->busy == true) {
			ptr_job->busy = false;
			ptr_job->call_nohalt();
		}
	}
	return true;
   8200a:	2001      	movs	r0, #1
}
   8200c:	bd38      	pop	{r3, r4, r5, pc}
   8200e:	bf00      	nop
   82010:	20070c10 	.word	0x20070c10
   82014:	400ac220 	.word	0x400ac220
   82018:	400ac130 	.word	0x400ac130
   8201c:	400ac160 	.word	0x400ac160
   82020:	400ac1c0 	.word	0x400ac1c0

00082024 <udd_ep_run>:


bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket,
		uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   82024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	bool b_dir_in = Is_udd_endpoint_in(ep & USB_EP_ADDR_MASK);
#endif
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	ep &= USB_EP_ADDR_MASK;
   82028:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep) {
   8202c:	2803      	cmp	r0, #3
   8202e:	d85a      	bhi.n	820e6 <udd_ep_run+0xc2>
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
   82030:	4c34      	ldr	r4, [pc, #208]	; (82104 <udd_ep_run+0xe0>)
   82032:	69e4      	ldr	r4, [r4, #28]
   82034:	2501      	movs	r5, #1
   82036:	4085      	lsls	r5, r0
   82038:	4225      	tst	r5, r4
   8203a:	d057      	beq.n	820ec <udd_ep_run+0xc8>
			|| Is_udd_endpoint_stall_requested(ep)
   8203c:	4c32      	ldr	r4, [pc, #200]	; (82108 <udd_ep_run+0xe4>)
   8203e:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
   82042:	f414 2f00 	tst.w	r4, #524288	; 0x80000
   82046:	d154      	bne.n	820f2 <udd_ep_run+0xce>
	if (USB_DEVICE_MAX_EP < ep) {
		return false;
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];
   82048:	4e30      	ldr	r6, [pc, #192]	; (8210c <udd_ep_run+0xe8>)
   8204a:	1e44      	subs	r4, r0, #1
   8204c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   82050:	00e5      	lsls	r5, r4, #3
   82052:	1974      	adds	r4, r6, r5

	if ((!Is_udd_endpoint_enabled(ep))
			|| Is_udd_endpoint_stall_requested(ep)
			|| ptr_job->stall_requested) {
   82054:	7d27      	ldrb	r7, [r4, #20]
   82056:	f017 0f04 	tst.w	r7, #4
   8205a:	d14d      	bne.n	820f8 <udd_ep_run+0xd4>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8205c:	f3ef 8710 	mrs	r7, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
   82060:	f1d7 0801 	rsbs	r8, r7, #1
   82064:	bf38      	it	cc
   82066:	f04f 0800 	movcc.w	r8, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   8206a:	b672      	cpsid	i
   8206c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   82070:	f04f 0c00 	mov.w	ip, #0
   82074:	4f26      	ldr	r7, [pc, #152]	; (82110 <udd_ep_run+0xec>)
   82076:	f887 c000 	strb.w	ip, [r7]
		return false; // Endpoint is halted
	}

	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
   8207a:	7d27      	ldrb	r7, [r4, #20]
   8207c:	f017 0f01 	tst.w	r7, #1
   82080:	d00b      	beq.n	8209a <udd_ep_run+0x76>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   82082:	f1b8 0f00 	cmp.w	r8, #0
   82086:	d03a      	beq.n	820fe <udd_ep_run+0xda>
		cpu_irq_enable();
   82088:	2201      	movs	r2, #1
   8208a:	4b21      	ldr	r3, [pc, #132]	; (82110 <udd_ep_run+0xec>)
   8208c:	701a      	strb	r2, [r3, #0]
   8208e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   82092:	b662      	cpsie	i
		cpu_irq_restore(flags);
		return false; // Job already on going
   82094:	4660      	mov	r0, ip
   82096:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}
	ptr_job->busy = true;
   8209a:	7d27      	ldrb	r7, [r4, #20]
   8209c:	f047 0701 	orr.w	r7, r7, #1
   820a0:	7527      	strb	r7, [r4, #20]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   820a2:	f1b8 0f00 	cmp.w	r8, #0
   820a6:	d007      	beq.n	820b8 <udd_ep_run+0x94>
		cpu_irq_enable();
   820a8:	f04f 0e01 	mov.w	lr, #1
   820ac:	4f18      	ldr	r7, [pc, #96]	; (82110 <udd_ep_run+0xec>)
   820ae:	f887 e000 	strb.w	lr, [r7]
   820b2:	f3bf 8f5f 	dmb	sy
   820b6:	b662      	cpsie	i
	cpu_irq_restore(flags);

	// No job running. Let's setup a new one.
	ptr_job->buf = buf;
   820b8:	6062      	str	r2, [r4, #4]
	ptr_job->buf_size = buf_size;
   820ba:	60a3      	str	r3, [r4, #8]
	ptr_job->buf_cnt = 0;
   820bc:	2200      	movs	r2, #0
   820be:	60e2      	str	r2, [r4, #12]
	ptr_job->buf_load = 0;
   820c0:	6122      	str	r2, [r4, #16]
	ptr_job->call_trans = callback;
   820c2:	9a06      	ldr	r2, [sp, #24]
   820c4:	5172      	str	r2, [r6, r5]
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
   820c6:	b921      	cbnz	r1, 820d2 <udd_ep_run+0xae>
   820c8:	f1d3 0301 	rsbs	r3, r3, #1
   820cc:	bf38      	it	cc
   820ce:	2300      	movcc	r3, #0
   820d0:	e000      	b.n	820d4 <udd_ep_run+0xb0>
   820d2:	2301      	movs	r3, #1
   820d4:	7d22      	ldrb	r2, [r4, #20]
   820d6:	f363 0241 	bfi	r2, r3, #1, #1
   820da:	7522      	strb	r2, [r4, #20]
#endif // UDD_EP_FIFO_SUPPORTED

#ifdef UDD_EP_DMA_SUPPORTED
	// Request first DMA transfer
	dbg_print("(exDMA%x) ", ep);
	udd_ep_trans_done(ep);
   820dc:	4b0d      	ldr	r3, [pc, #52]	; (82114 <udd_ep_run+0xf0>)
   820de:	4798      	blx	r3
	return true;
   820e0:	2001      	movs	r0, #1
   820e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	ep &= USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep) {
		return false;
   820e6:	2000      	movs	r0, #0
   820e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
			|| Is_udd_endpoint_stall_requested(ep)
			|| ptr_job->stall_requested) {
		return false; // Endpoint is halted
   820ec:	2000      	movs	r0, #0
   820ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   820f2:	2000      	movs	r0, #0
   820f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   820f8:	2000      	movs	r0, #0
   820fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
		cpu_irq_restore(flags);
		return false; // Job already on going
   820fe:	2000      	movs	r0, #0
	// Request first DMA transfer
	dbg_print("(exDMA%x) ", ep);
	udd_ep_trans_done(ep);
	return true;
#endif
}
   82100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82104:	400ac000 	.word	0x400ac000
   82108:	400ac1c0 	.word	0x400ac1c0
   8210c:	20070c10 	.word	0x20070c10
   82110:	200701d8 	.word	0x200701d8
   82114:	00081519 	.word	0x00081519

00082118 <udd_ep_alloc>:


#if (0 != USB_DEVICE_MAX_EP)
bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes,
		uint16_t MaxEndpointSize)
{
   82118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8211c:	b083      	sub	sp, #12
	bool b_dir_in;
	uint16_t ep_allocated;
	uint8_t nb_bank, bank, i;

	b_dir_in = ep & USB_EP_DIR_IN;
	ep = ep & USB_EP_ADDR_MASK;
   8211e:	f000 040f 	and.w	r4, r0, #15

	if (ep > USB_DEVICE_MAX_EP) {
   82122:	2c03      	cmp	r4, #3
   82124:	f200 80c7 	bhi.w	822b6 <udd_ep_alloc+0x19e>
		return false;
	}
	if (Is_udd_endpoint_enabled(ep)) {
   82128:	4b6c      	ldr	r3, [pc, #432]	; (822dc <udd_ep_alloc+0x1c4>)
   8212a:	69db      	ldr	r3, [r3, #28]
   8212c:	4626      	mov	r6, r4
   8212e:	2501      	movs	r5, #1
   82130:	40a5      	lsls	r5, r4
   82132:	421d      	tst	r5, r3
   82134:	f040 80c1 	bne.w	822ba <udd_ep_alloc+0x1a2>
		return false;
	}
	dbg_print("alloc(%x, %d) ", ep, MaxEndpointSize);

	// Bank choise
	switch (bmAttributes & USB_EP_TYPE_MASK) {
   82138:	f011 0303 	ands.w	r3, r1, #3
   8213c:	f000 80bf 	beq.w	822be <udd_ep_alloc+0x1a6>
   82140:	2b02      	cmp	r3, #2
   82142:	d902      	bls.n	8214a <udd_ep_alloc+0x32>
   82144:	2b03      	cmp	r3, #3
   82146:	d002      	beq.n	8214e <udd_ep_alloc+0x36>
   82148:	e0b9      	b.n	822be <udd_ep_alloc+0x1a6>
	case 1:
		bank = UOTGHS_DEVEPTCFG_EPBK_1_BANK >>
				UOTGHS_DEVEPTCFG_EPBK_Pos;
		break;
	case 2:
		bank = UOTGHS_DEVEPTCFG_EPBK_2_BANK >>
   8214a:	2701      	movs	r7, #1
   8214c:	e000      	b.n	82150 <udd_ep_alloc+0x38>
		Assert(false);
		return false;
	}
	switch (nb_bank) {
	case 1:
		bank = UOTGHS_DEVEPTCFG_EPBK_1_BANK >>
   8214e:	2700      	movs	r7, #0
	Assert((MaxEndpointSize == 1023)
		|| !(MaxEndpointSize & (MaxEndpointSize - 1)));
	Assert(MaxEndpointSize >= 8);

	// Set configuration of new endpoint
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   82150:	ea4f 0c84 	mov.w	ip, r4, lsl #2
   82154:	4d62      	ldr	r5, [pc, #392]	; (822e0 <udd_ep_alloc+0x1c8>)
   82156:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   8215a:	f423 53cb 	bic.w	r3, r3, #6496	; 0x1960
   8215e:	f023 031c 	bic.w	r3, r3, #28
   82162:	02c9      	lsls	r1, r1, #11
   82164:	f401 51c0 	and.w	r1, r1, #6144	; 0x1800
   82168:	f000 0080 	and.w	r0, r0, #128	; 0x80
   8216c:	2800      	cmp	r0, #0
   8216e:	bf0c      	ite	eq
   82170:	2000      	moveq	r0, #0
   82172:	f44f 7080 	movne.w	r0, #256	; 0x100
   82176:	f5a2 6880 	sub.w	r8, r2, #1024	; 0x400
   8217a:	fa1f f888 	uxth.w	r8, r8
   8217e:	f5b8 4f7c 	cmp.w	r8, #64512	; 0xfc00
   82182:	d304      	bcc.n	8218e <udd_ep_alloc+0x76>
   82184:	2a08      	cmp	r2, #8
   82186:	d905      	bls.n	82194 <udd_ep_alloc+0x7c>
   82188:	0052      	lsls	r2, r2, #1
   8218a:	3a01      	subs	r2, #1
   8218c:	e003      	b.n	82196 <udd_ep_alloc+0x7e>
   8218e:	f240 72ff 	movw	r2, #2047	; 0x7ff
   82192:	e000      	b.n	82196 <udd_ep_alloc+0x7e>
   82194:	220f      	movs	r2, #15
   82196:	fab2 f282 	clz	r2, r2
   8219a:	ea41 0787 	orr.w	r7, r1, r7, lsl #2
   8219e:	4307      	orrs	r7, r0
   821a0:	f1c2 021c 	rsb	r2, r2, #28
   821a4:	ea47 1202 	orr.w	r2, r7, r2, lsl #4
   821a8:	f422 62d0 	bic.w	r2, r2, #1664	; 0x680
   821ac:	f022 0203 	bic.w	r2, r2, #3
   821b0:	04d2      	lsls	r2, r2, #19
   821b2:	0cd2      	lsrs	r2, r2, #19
   821b4:	4313      	orrs	r3, r2
   821b6:	f84c 3005 	str.w	r3, [ip, r5]
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;
   821ba:	2701      	movs	r7, #1
   821bc:	fa07 f606 	lsl.w	r6, r7, r6
   821c0:	b2b7      	uxth	r7, r6

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
   821c2:	2c02      	cmp	r4, #2
   821c4:	f200 8081 	bhi.w	822ca <udd_ep_alloc+0x1b2>
   821c8:	4a46      	ldr	r2, [pc, #280]	; (822e4 <udd_ep_alloc+0x1cc>)
   821ca:	2303      	movs	r3, #3
		if (Is_udd_endpoint_enabled(i)) {
   821cc:	4843      	ldr	r0, [pc, #268]	; (822dc <udd_ep_alloc+0x1c4>)
   821ce:	2601      	movs	r6, #1
   821d0:	69c5      	ldr	r5, [r0, #28]
   821d2:	fa06 f103 	lsl.w	r1, r6, r3
   821d6:	4229      	tst	r1, r5
   821d8:	d009      	beq.n	821ee <udd_ep_alloc+0xd6>
			ep_allocated |= 1 << i;
   821da:	430f      	orrs	r7, r1
   821dc:	b2bf      	uxth	r7, r7
			udd_disable_endpoint(i);
   821de:	69c5      	ldr	r5, [r0, #28]
   821e0:	ea25 0101 	bic.w	r1, r5, r1
   821e4:	61c1      	str	r1, [r0, #28]
			udd_unallocate_memory(i);
   821e6:	6811      	ldr	r1, [r2, #0]
   821e8:	f021 0102 	bic.w	r1, r1, #2
   821ec:	6011      	str	r1, [r2, #0]
   821ee:	3b01      	subs	r3, #1
   821f0:	3a04      	subs	r2, #4
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
   821f2:	b2d9      	uxtb	r1, r3
   821f4:	42a1      	cmp	r1, r4
   821f6:	d8eb      	bhi.n	821d0 <udd_ep_alloc+0xb8>
   821f8:	e067      	b.n	822ca <udd_ep_alloc+0x1b2>
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
		if (ep_allocated & (1 << i)) {
   821fa:	fa47 f304 	asr.w	r3, r7, r4
   821fe:	f013 0f01 	tst.w	r3, #1
   82202:	d052      	beq.n	822aa <udd_ep_alloc+0x192>
			udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
   82204:	1e63      	subs	r3, r4, #1
   82206:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
   8220a:	eb08 05cc 	add.w	r5, r8, ip, lsl #3
			bool b_restart = ptr_job->busy;
   8220e:	7d2b      	ldrb	r3, [r5, #20]
   82210:	f003 0201 	and.w	r2, r3, #1
			// Restart running job because
			// memory window slides up and its data is lost
			ptr_job->busy = false;
   82214:	f36f 0300 	bfc	r3, #0, #1
   82218:	752b      	strb	r3, [r5, #20]
			// Re-allocate memory
			udd_allocate_memory(i);
   8221a:	00a1      	lsls	r1, r4, #2
   8221c:	eb01 0a06 	add.w	sl, r1, r6
   82220:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
   82224:	f043 0302 	orr.w	r3, r3, #2
   82228:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
			udd_enable_endpoint(i);
   8222c:	4b2b      	ldr	r3, [pc, #172]	; (822dc <udd_ep_alloc+0x1c4>)
   8222e:	69d8      	ldr	r0, [r3, #28]
   82230:	f04f 0b01 	mov.w	fp, #1
   82234:	fa0b fb04 	lsl.w	fp, fp, r4
   82238:	ea4b 0000 	orr.w	r0, fp, r0
   8223c:	61d8      	str	r0, [r3, #28]
			if (!Is_udd_endpoint_configured(i)) {
   8223e:	f859 3024 	ldr.w	r3, [r9, r4, lsl #2]
   82242:	f413 2f80 	tst.w	r3, #262144	; 0x40000
   82246:	d10f      	bne.n	82268 <udd_ep_alloc+0x150>
				dbg_print("ErrRealloc%d ", i);
				if (NULL == ptr_job->call_trans) {
   82248:	682b      	ldr	r3, [r5, #0]
   8224a:	2b00      	cmp	r3, #0
   8224c:	d039      	beq.n	822c2 <udd_ep_alloc+0x1aa>
					return false;
				}
				if (Is_udd_endpoint_in(i)) {
   8224e:	f8da 2000 	ldr.w	r2, [sl]
   82252:	f412 7f80 	tst.w	r2, #256	; 0x100
					i |= USB_EP_DIR_IN;
   82256:	bf18      	it	ne
   82258:	f044 0480 	orrne.w	r4, r4, #128	; 0x80
				}
				ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
   8225c:	2001      	movs	r0, #1
   8225e:	68e9      	ldr	r1, [r5, #12]
   82260:	4622      	mov	r2, r4
   82262:	4798      	blx	r3
						ptr_job->buf_cnt, i);
				return false;
   82264:	2000      	movs	r0, #0
   82266:	e036      	b.n	822d6 <udd_ep_alloc+0x1be>
			}
			udd_enable_endpoint_bank_autoswitch(i);
   82268:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
   8226c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   82270:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
			if (b_restart) {
   82274:	b1ca      	cbz	r2, 822aa <udd_ep_alloc+0x192>
				if (!Is_udd_endpoint_dma_supported(i)
					&& !Is_udd_endpoint_in(i)) {
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
   82276:	68ea      	ldr	r2, [r5, #12]
   82278:	692b      	ldr	r3, [r5, #16]
   8227a:	1ad3      	subs	r3, r2, r3
   8227c:	60eb      	str	r3, [r5, #12]
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   8227e:	598a      	ldr	r2, [r1, r6]
   82280:	f412 7f80 	tst.w	r2, #256	; 0x100
   82284:	bf14      	ite	ne
   82286:	f044 0080 	orrne.w	r0, r4, #128	; 0x80
   8228a:	4620      	moveq	r0, r4
							(i | USB_EP_DIR_IN) : i,
						ptr_job->b_shortpacket,
   8228c:	7d29      	ldrb	r1, [r5, #20]
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   8228e:	f8d5 e004 	ldr.w	lr, [r5, #4]
   82292:	68ad      	ldr	r5, [r5, #8]
   82294:	f858 203c 	ldr.w	r2, [r8, ip, lsl #3]
   82298:	9200      	str	r2, [sp, #0]
   8229a:	f3c1 0140 	ubfx	r1, r1, #1, #1
   8229e:	eb0e 0203 	add.w	r2, lr, r3
   822a2:	1aeb      	subs	r3, r5, r3
   822a4:	4d10      	ldr	r5, [pc, #64]	; (822e8 <udd_ep_alloc+0x1d0>)
   822a6:	47a8      	blx	r5
						ptr_job->b_shortpacket,
						&ptr_job->buf[ptr_job->buf_cnt],
						ptr_job->buf_size
							- ptr_job->buf_cnt,
						ptr_job->call_trans);
				if (!b_restart) {
   822a8:	b168      	cbz	r0, 822c6 <udd_ep_alloc+0x1ae>
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   822aa:	3401      	adds	r4, #1
   822ac:	b2e4      	uxtb	r4, r4
   822ae:	2c04      	cmp	r4, #4
   822b0:	d1a3      	bne.n	821fa <udd_ep_alloc+0xe2>
					return false;
				}
			}
		}
	}
	return true;
   822b2:	2001      	movs	r0, #1
   822b4:	e00f      	b.n	822d6 <udd_ep_alloc+0x1be>

	b_dir_in = ep & USB_EP_DIR_IN;
	ep = ep & USB_EP_ADDR_MASK;

	if (ep > USB_DEVICE_MAX_EP) {
		return false;
   822b6:	2000      	movs	r0, #0
   822b8:	e00d      	b.n	822d6 <udd_ep_alloc+0x1be>
	}
	if (Is_udd_endpoint_enabled(ep)) {
		return false;
   822ba:	2000      	movs	r0, #0
   822bc:	e00b      	b.n	822d6 <udd_ep_alloc+0x1be>
	case USB_EP_TYPE_BULK:
		nb_bank = UDD_BULK_NB_BANK(ep);
		break;
	default:
		Assert(false);
		return false;
   822be:	2000      	movs	r0, #0
   822c0:	e009      	b.n	822d6 <udd_ep_alloc+0x1be>
			udd_allocate_memory(i);
			udd_enable_endpoint(i);
			if (!Is_udd_endpoint_configured(i)) {
				dbg_print("ErrRealloc%d ", i);
				if (NULL == ptr_job->call_trans) {
					return false;
   822c2:	2000      	movs	r0, #0
   822c4:	e007      	b.n	822d6 <udd_ep_alloc+0x1be>
						ptr_job->buf_size
							- ptr_job->buf_cnt,
						ptr_job->call_trans);
				if (!b_restart) {
					dbg_print("ErrReRun%d ", i);
					return false;
   822c6:	2000      	movs	r0, #0
   822c8:	e005      	b.n	822d6 <udd_ep_alloc+0x1be>
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
		if (ep_allocated & (1 << i)) {
			udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
   822ca:	f8df 8020 	ldr.w	r8, [pc, #32]	; 822ec <udd_ep_alloc+0x1d4>
			bool b_restart = ptr_job->busy;
			// Restart running job because
			// memory window slides up and its data is lost
			ptr_job->busy = false;
			// Re-allocate memory
			udd_allocate_memory(i);
   822ce:	4e04      	ldr	r6, [pc, #16]	; (822e0 <udd_ep_alloc+0x1c8>)
			udd_enable_endpoint(i);
			if (!Is_udd_endpoint_configured(i)) {
   822d0:	f8df 901c 	ldr.w	r9, [pc, #28]	; 822f0 <udd_ep_alloc+0x1d8>
   822d4:	e791      	b.n	821fa <udd_ep_alloc+0xe2>
				}
			}
		}
	}
	return true;
}
   822d6:	b003      	add	sp, #12
   822d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   822dc:	400ac000 	.word	0x400ac000
   822e0:	400ac100 	.word	0x400ac100
   822e4:	400ac10c 	.word	0x400ac10c
   822e8:	00082025 	.word	0x00082025
   822ec:	20070c10 	.word	0x20070c10
   822f0:	400ac130 	.word	0x400ac130

000822f4 <udd_ep_abort>:
#endif
}


void udd_ep_abort(udd_ep_id_t ep)
{
   822f4:	b570      	push	{r4, r5, r6, lr}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   822f6:	f000 020f 	and.w	r2, r0, #15
		udd_disable_in_send_interrupt(ep_index);
	} else
#endif
	{
		// Stop DMA transfer
		udd_disable_endpoint_dma_interrupt(ep_index);
   822fa:	1e56      	subs	r6, r2, #1
   822fc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   82300:	40b1      	lsls	r1, r6
   82302:	4b15      	ldr	r3, [pc, #84]	; (82358 <udd_ep_abort+0x64>)
   82304:	6159      	str	r1, [r3, #20]
		udd_endpoint_dma_set_control(ep_index, 0);
   82306:	4915      	ldr	r1, [pc, #84]	; (8235c <udd_ep_abort+0x68>)
   82308:	eb01 1102 	add.w	r1, r1, r2, lsl #4
   8230c:	2400      	movs	r4, #0
   8230e:	608c      	str	r4, [r1, #8]
	}
	udd_disable_endpoint_interrupt(ep_index);
   82310:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   82314:	4091      	lsls	r1, r2
   82316:	6159      	str	r1, [r3, #20]
	// Kill IN banks
	if (ep & USB_EP_DIR_IN) {
   82318:	f010 0f80 	tst.w	r0, #128	; 0x80
   8231c:	d012      	beq.n	82344 <udd_ep_abort+0x50>
		while(udd_nb_busy_bank(ep_index)) {
   8231e:	0093      	lsls	r3, r2, #2
   82320:	480f      	ldr	r0, [pc, #60]	; (82360 <udd_ep_abort+0x6c>)
   82322:	4418      	add	r0, r3
			udd_kill_last_in_bank(ep_index);
   82324:	4c0f      	ldr	r4, [pc, #60]	; (82364 <udd_ep_abort+0x70>)
   82326:	441c      	add	r4, r3
   82328:	f44f 5500 	mov.w	r5, #8192	; 0x2000
			while(Is_udd_kill_last(ep_index));
   8232c:	490e      	ldr	r1, [pc, #56]	; (82368 <udd_ep_abort+0x74>)
   8232e:	4419      	add	r1, r3
   82330:	e004      	b.n	8233c <udd_ep_abort+0x48>
	}
	udd_disable_endpoint_interrupt(ep_index);
	// Kill IN banks
	if (ep & USB_EP_DIR_IN) {
		while(udd_nb_busy_bank(ep_index)) {
			udd_kill_last_in_bank(ep_index);
   82332:	6025      	str	r5, [r4, #0]
			while(Is_udd_kill_last(ep_index));
   82334:	680b      	ldr	r3, [r1, #0]
   82336:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   8233a:	d1fb      	bne.n	82334 <udd_ep_abort+0x40>
		udd_endpoint_dma_set_control(ep_index, 0);
	}
	udd_disable_endpoint_interrupt(ep_index);
	// Kill IN banks
	if (ep & USB_EP_DIR_IN) {
		while(udd_nb_busy_bank(ep_index)) {
   8233c:	6803      	ldr	r3, [r0, #0]
   8233e:	f413 5f40 	tst.w	r3, #12288	; 0x3000
   82342:	d1f6      	bne.n	82332 <udd_ep_abort+0x3e>
static void udd_ep_abort_job(udd_ep_id_t ep)
{
	ep &= USB_EP_ADDR_MASK;

	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
   82344:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   82348:	4808      	ldr	r0, [pc, #32]	; (8236c <udd_ep_abort+0x78>)
   8234a:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
   8234e:	2101      	movs	r1, #1
   82350:	4b07      	ldr	r3, [pc, #28]	; (82370 <udd_ep_abort+0x7c>)
   82352:	4798      	blx	r3
   82354:	bd70      	pop	{r4, r5, r6, pc}
   82356:	bf00      	nop
   82358:	400ac000 	.word	0x400ac000
   8235c:	400ac300 	.word	0x400ac300
   82360:	400ac130 	.word	0x400ac130
   82364:	400ac1f0 	.word	0x400ac1f0
   82368:	400ac1c0 	.word	0x400ac1c0
   8236c:	20070c10 	.word	0x20070c10
   82370:	000814e5 	.word	0x000814e5

00082374 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   82374:	6943      	ldr	r3, [r0, #20]
   82376:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   8237a:	bf1d      	ittte	ne
   8237c:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   82380:	61c1      	strne	r1, [r0, #28]
	return 0;
   82382:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
   82384:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
   82386:	4770      	bx	lr

00082388 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   82388:	6943      	ldr	r3, [r0, #20]
   8238a:	f013 0f01 	tst.w	r3, #1
   8238e:	d005      	beq.n	8239c <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   82390:	6983      	ldr	r3, [r0, #24]
   82392:	f3c3 0308 	ubfx	r3, r3, #0, #9
   82396:	600b      	str	r3, [r1, #0]

	return 0;
   82398:	2000      	movs	r0, #0
   8239a:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   8239c:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   8239e:	4770      	bx	lr

000823a0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   823a0:	e7fe      	b.n	823a0 <Dummy_Handler>
   823a2:	bf00      	nop

000823a4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   823a4:	b510      	push	{r4, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   823a6:	4b1e      	ldr	r3, [pc, #120]	; (82420 <Reset_Handler+0x7c>)
   823a8:	4a1e      	ldr	r2, [pc, #120]	; (82424 <Reset_Handler+0x80>)
   823aa:	429a      	cmp	r2, r3
   823ac:	d003      	beq.n	823b6 <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   823ae:	4b1e      	ldr	r3, [pc, #120]	; (82428 <Reset_Handler+0x84>)
   823b0:	4a1b      	ldr	r2, [pc, #108]	; (82420 <Reset_Handler+0x7c>)
   823b2:	429a      	cmp	r2, r3
   823b4:	d304      	bcc.n	823c0 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   823b6:	4b1d      	ldr	r3, [pc, #116]	; (8242c <Reset_Handler+0x88>)
   823b8:	4a1d      	ldr	r2, [pc, #116]	; (82430 <Reset_Handler+0x8c>)
   823ba:	429a      	cmp	r2, r3
   823bc:	d30f      	bcc.n	823de <Reset_Handler+0x3a>
   823be:	e01a      	b.n	823f6 <Reset_Handler+0x52>
   823c0:	4b1c      	ldr	r3, [pc, #112]	; (82434 <Reset_Handler+0x90>)
   823c2:	4c1d      	ldr	r4, [pc, #116]	; (82438 <Reset_Handler+0x94>)
   823c4:	1ae4      	subs	r4, r4, r3
   823c6:	f024 0403 	bic.w	r4, r4, #3
   823ca:	3404      	adds	r4, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   823cc:	2300      	movs	r3, #0
			*pDest++ = *pSrc++;
   823ce:	4814      	ldr	r0, [pc, #80]	; (82420 <Reset_Handler+0x7c>)
   823d0:	4914      	ldr	r1, [pc, #80]	; (82424 <Reset_Handler+0x80>)
   823d2:	585a      	ldr	r2, [r3, r1]
   823d4:	501a      	str	r2, [r3, r0]
   823d6:	3304      	adds	r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   823d8:	42a3      	cmp	r3, r4
   823da:	d1fa      	bne.n	823d2 <Reset_Handler+0x2e>
   823dc:	e7eb      	b.n	823b6 <Reset_Handler+0x12>
   823de:	4b17      	ldr	r3, [pc, #92]	; (8243c <Reset_Handler+0x98>)
   823e0:	4917      	ldr	r1, [pc, #92]	; (82440 <Reset_Handler+0x9c>)
   823e2:	1ac9      	subs	r1, r1, r3
   823e4:	f021 0103 	bic.w	r1, r1, #3
   823e8:	1d1a      	adds	r2, r3, #4
   823ea:	4411      	add	r1, r2
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   823ec:	2200      	movs	r2, #0
   823ee:	f843 2f04 	str.w	r2, [r3, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   823f2:	428b      	cmp	r3, r1
   823f4:	d1fb      	bne.n	823ee <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   823f6:	4a13      	ldr	r2, [pc, #76]	; (82444 <Reset_Handler+0xa0>)
   823f8:	f022 4360 	bic.w	r3, r2, #3758096384	; 0xe0000000
   823fc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   82400:	4911      	ldr	r1, [pc, #68]	; (82448 <Reset_Handler+0xa4>)
   82402:	608b      	str	r3, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   82404:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
   82408:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
   8240c:	d203      	bcs.n	82416 <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   8240e:	688a      	ldr	r2, [r1, #8]
   82410:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   82414:	608a      	str	r2, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   82416:	4b0d      	ldr	r3, [pc, #52]	; (8244c <Reset_Handler+0xa8>)
   82418:	4798      	blx	r3

	/* Branch to main function */
	main();
   8241a:	4b0d      	ldr	r3, [pc, #52]	; (82450 <Reset_Handler+0xac>)
   8241c:	4798      	blx	r3
   8241e:	e7fe      	b.n	8241e <Reset_Handler+0x7a>
   82420:	20070000 	.word	0x20070000
   82424:	000837e4 	.word	0x000837e4
   82428:	20070a1c 	.word	0x20070a1c
   8242c:	20070d6c 	.word	0x20070d6c
   82430:	20070a1c 	.word	0x20070a1c
   82434:	20070004 	.word	0x20070004
   82438:	20070a1f 	.word	0x20070a1f
   8243c:	20070a18 	.word	0x20070a18
   82440:	20070d67 	.word	0x20070d67
   82444:	00080000 	.word	0x00080000
   82448:	e000ed00 	.word	0xe000ed00
   8244c:	000828b1 	.word	0x000828b1
   82450:	000827dd 	.word	0x000827dd

00082454 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   82454:	4b3e      	ldr	r3, [pc, #248]	; (82550 <SystemCoreClockUpdate+0xfc>)
   82456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82458:	f003 0303 	and.w	r3, r3, #3
   8245c:	2b03      	cmp	r3, #3
   8245e:	d85f      	bhi.n	82520 <SystemCoreClockUpdate+0xcc>
   82460:	e8df f003 	tbb	[pc, r3]
   82464:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   82468:	4b3a      	ldr	r3, [pc, #232]	; (82554 <SystemCoreClockUpdate+0x100>)
   8246a:	695b      	ldr	r3, [r3, #20]
   8246c:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   82470:	bf14      	ite	ne
   82472:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   82476:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   8247a:	4b37      	ldr	r3, [pc, #220]	; (82558 <SystemCoreClockUpdate+0x104>)
   8247c:	601a      	str	r2, [r3, #0]
   8247e:	e04f      	b.n	82520 <SystemCoreClockUpdate+0xcc>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   82480:	4b33      	ldr	r3, [pc, #204]	; (82550 <SystemCoreClockUpdate+0xfc>)
   82482:	6a1b      	ldr	r3, [r3, #32]
   82484:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   82488:	d003      	beq.n	82492 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   8248a:	4a34      	ldr	r2, [pc, #208]	; (8255c <SystemCoreClockUpdate+0x108>)
   8248c:	4b32      	ldr	r3, [pc, #200]	; (82558 <SystemCoreClockUpdate+0x104>)
   8248e:	601a      	str	r2, [r3, #0]
   82490:	e046      	b.n	82520 <SystemCoreClockUpdate+0xcc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   82492:	4a33      	ldr	r2, [pc, #204]	; (82560 <SystemCoreClockUpdate+0x10c>)
   82494:	4b30      	ldr	r3, [pc, #192]	; (82558 <SystemCoreClockUpdate+0x104>)
   82496:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   82498:	4b2d      	ldr	r3, [pc, #180]	; (82550 <SystemCoreClockUpdate+0xfc>)
   8249a:	6a1b      	ldr	r3, [r3, #32]
   8249c:	f003 0370 	and.w	r3, r3, #112	; 0x70
   824a0:	2b10      	cmp	r3, #16
   824a2:	d002      	beq.n	824aa <SystemCoreClockUpdate+0x56>
   824a4:	2b20      	cmp	r3, #32
   824a6:	d004      	beq.n	824b2 <SystemCoreClockUpdate+0x5e>
   824a8:	e03a      	b.n	82520 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   824aa:	4a2e      	ldr	r2, [pc, #184]	; (82564 <SystemCoreClockUpdate+0x110>)
   824ac:	4b2a      	ldr	r3, [pc, #168]	; (82558 <SystemCoreClockUpdate+0x104>)
   824ae:	601a      	str	r2, [r3, #0]
				break;
   824b0:	e036      	b.n	82520 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   824b2:	4a2a      	ldr	r2, [pc, #168]	; (8255c <SystemCoreClockUpdate+0x108>)
   824b4:	4b28      	ldr	r3, [pc, #160]	; (82558 <SystemCoreClockUpdate+0x104>)
   824b6:	601a      	str	r2, [r3, #0]
				break;
   824b8:	e032      	b.n	82520 <SystemCoreClockUpdate+0xcc>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   824ba:	4b25      	ldr	r3, [pc, #148]	; (82550 <SystemCoreClockUpdate+0xfc>)
   824bc:	6a1b      	ldr	r3, [r3, #32]
   824be:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   824c2:	d003      	beq.n	824cc <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   824c4:	4a25      	ldr	r2, [pc, #148]	; (8255c <SystemCoreClockUpdate+0x108>)
   824c6:	4b24      	ldr	r3, [pc, #144]	; (82558 <SystemCoreClockUpdate+0x104>)
   824c8:	601a      	str	r2, [r3, #0]
   824ca:	e012      	b.n	824f2 <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   824cc:	4a24      	ldr	r2, [pc, #144]	; (82560 <SystemCoreClockUpdate+0x10c>)
   824ce:	4b22      	ldr	r3, [pc, #136]	; (82558 <SystemCoreClockUpdate+0x104>)
   824d0:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   824d2:	4b1f      	ldr	r3, [pc, #124]	; (82550 <SystemCoreClockUpdate+0xfc>)
   824d4:	6a1b      	ldr	r3, [r3, #32]
   824d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
   824da:	2b10      	cmp	r3, #16
   824dc:	d002      	beq.n	824e4 <SystemCoreClockUpdate+0x90>
   824de:	2b20      	cmp	r3, #32
   824e0:	d004      	beq.n	824ec <SystemCoreClockUpdate+0x98>
   824e2:	e006      	b.n	824f2 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   824e4:	4a1f      	ldr	r2, [pc, #124]	; (82564 <SystemCoreClockUpdate+0x110>)
   824e6:	4b1c      	ldr	r3, [pc, #112]	; (82558 <SystemCoreClockUpdate+0x104>)
   824e8:	601a      	str	r2, [r3, #0]
				break;
   824ea:	e002      	b.n	824f2 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   824ec:	4a1b      	ldr	r2, [pc, #108]	; (8255c <SystemCoreClockUpdate+0x108>)
   824ee:	4b1a      	ldr	r3, [pc, #104]	; (82558 <SystemCoreClockUpdate+0x104>)
   824f0:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   824f2:	4b17      	ldr	r3, [pc, #92]	; (82550 <SystemCoreClockUpdate+0xfc>)
   824f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   824f6:	f003 0303 	and.w	r3, r3, #3
   824fa:	2b02      	cmp	r3, #2
   824fc:	d10d      	bne.n	8251a <SystemCoreClockUpdate+0xc6>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   824fe:	4b14      	ldr	r3, [pc, #80]	; (82550 <SystemCoreClockUpdate+0xfc>)
   82500:	6a98      	ldr	r0, [r3, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   82502:	6a99      	ldr	r1, [r3, #40]	; 0x28
   82504:	4b14      	ldr	r3, [pc, #80]	; (82558 <SystemCoreClockUpdate+0x104>)
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   82506:	f3c0 400a 	ubfx	r0, r0, #16, #11
   8250a:	681a      	ldr	r2, [r3, #0]
   8250c:	fb00 2202 	mla	r2, r0, r2, r2
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   82510:	b2c9      	uxtb	r1, r1
   82512:	fbb2 f2f1 	udiv	r2, r2, r1
   82516:	601a      	str	r2, [r3, #0]
   82518:	e002      	b.n	82520 <SystemCoreClockUpdate+0xcc>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   8251a:	4a13      	ldr	r2, [pc, #76]	; (82568 <SystemCoreClockUpdate+0x114>)
   8251c:	4b0e      	ldr	r3, [pc, #56]	; (82558 <SystemCoreClockUpdate+0x104>)
   8251e:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   82520:	4b0b      	ldr	r3, [pc, #44]	; (82550 <SystemCoreClockUpdate+0xfc>)
   82522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82524:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82528:	2b70      	cmp	r3, #112	; 0x70
   8252a:	d107      	bne.n	8253c <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
   8252c:	4b0a      	ldr	r3, [pc, #40]	; (82558 <SystemCoreClockUpdate+0x104>)
   8252e:	681a      	ldr	r2, [r3, #0]
   82530:	490e      	ldr	r1, [pc, #56]	; (8256c <SystemCoreClockUpdate+0x118>)
   82532:	fba1 0202 	umull	r0, r2, r1, r2
   82536:	0852      	lsrs	r2, r2, #1
   82538:	601a      	str	r2, [r3, #0]
   8253a:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   8253c:	4b04      	ldr	r3, [pc, #16]	; (82550 <SystemCoreClockUpdate+0xfc>)
   8253e:	6b19      	ldr	r1, [r3, #48]	; 0x30
   82540:	4b05      	ldr	r3, [pc, #20]	; (82558 <SystemCoreClockUpdate+0x104>)
   82542:	f3c1 1102 	ubfx	r1, r1, #4, #3
   82546:	681a      	ldr	r2, [r3, #0]
   82548:	40ca      	lsrs	r2, r1
   8254a:	601a      	str	r2, [r3, #0]
   8254c:	4770      	bx	lr
   8254e:	bf00      	nop
   82550:	400e0600 	.word	0x400e0600
   82554:	400e1a10 	.word	0x400e1a10
   82558:	200701dc 	.word	0x200701dc
   8255c:	00b71b00 	.word	0x00b71b00
   82560:	003d0900 	.word	0x003d0900
   82564:	007a1200 	.word	0x007a1200
   82568:	0e4e1c00 	.word	0x0e4e1c00
   8256c:	aaaaaaab 	.word	0xaaaaaaab

00082570 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   82570:	4b09      	ldr	r3, [pc, #36]	; (82598 <_sbrk+0x28>)
   82572:	681b      	ldr	r3, [r3, #0]
   82574:	b913      	cbnz	r3, 8257c <_sbrk+0xc>
		heap = (unsigned char *)&_end;
   82576:	4a09      	ldr	r2, [pc, #36]	; (8259c <_sbrk+0x2c>)
   82578:	4b07      	ldr	r3, [pc, #28]	; (82598 <_sbrk+0x28>)
   8257a:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   8257c:	4b06      	ldr	r3, [pc, #24]	; (82598 <_sbrk+0x28>)
   8257e:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   82580:	181a      	adds	r2, r3, r0
   82582:	4907      	ldr	r1, [pc, #28]	; (825a0 <_sbrk+0x30>)
   82584:	4291      	cmp	r1, r2
   82586:	db04      	blt.n	82592 <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
   82588:	4610      	mov	r0, r2
   8258a:	4a03      	ldr	r2, [pc, #12]	; (82598 <_sbrk+0x28>)
   8258c:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   8258e:	4618      	mov	r0, r3
   82590:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
   82592:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
   82596:	4770      	bx	lr
   82598:	20070c60 	.word	0x20070c60
   8259c:	20072d70 	.word	0x20072d70
   825a0:	20087ffc 	.word	0x20087ffc

000825a4 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   825a4:	f04f 30ff 	mov.w	r0, #4294967295
   825a8:	4770      	bx	lr
   825aa:	bf00      	nop

000825ac <_lseek>:
}

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   825ac:	2000      	movs	r0, #0
   825ae:	4770      	bx	lr

000825b0 <USART0_Handler>:
#if SAMD || SAMR21 || SAML21
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
   825b0:	b500      	push	{lr}
   825b2:	b083      	sub	sp, #12
	uint8_t temp;
#if SAMD || SAMR21 || SAML21
	usart_serial_read_packet(&host_uart_module, &temp, 1);
#else
	usart_serial_read_packet(USART_HOST, &temp, 1);
   825b4:	4811      	ldr	r0, [pc, #68]	; (825fc <USART0_Handler+0x4c>)
   825b6:	f10d 0107 	add.w	r1, sp, #7
   825ba:	2201      	movs	r2, #1
   825bc:	4b10      	ldr	r3, [pc, #64]	; (82600 <USART0_Handler+0x50>)
   825be:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   825c0:	b672      	cpsid	i
   825c2:	f3bf 8f5f 	dmb	sy
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
   825c6:	2200      	movs	r2, #0
   825c8:	4b0e      	ldr	r3, [pc, #56]	; (82604 <USART0_Handler+0x54>)
   825ca:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
   825cc:	4b0e      	ldr	r3, [pc, #56]	; (82608 <USART0_Handler+0x58>)
   825ce:	781b      	ldrb	r3, [r3, #0]
   825d0:	f89d 1007 	ldrb.w	r1, [sp, #7]
   825d4:	4a0d      	ldr	r2, [pc, #52]	; (8260c <USART0_Handler+0x5c>)
   825d6:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
   825d8:	2b9b      	cmp	r3, #155	; 0x9b
   825da:	d103      	bne.n	825e4 <USART0_Handler+0x34>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
   825dc:	2200      	movs	r2, #0
   825de:	4b0a      	ldr	r3, [pc, #40]	; (82608 <USART0_Handler+0x58>)
   825e0:	701a      	strb	r2, [r3, #0]
   825e2:	e002      	b.n	825ea <USART0_Handler+0x3a>
	} else {
		serial_rx_buf_tail++;
   825e4:	3301      	adds	r3, #1
   825e6:	4a08      	ldr	r2, [pc, #32]	; (82608 <USART0_Handler+0x58>)
   825e8:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
   825ea:	2201      	movs	r2, #1
   825ec:	4b05      	ldr	r3, [pc, #20]	; (82604 <USART0_Handler+0x54>)
   825ee:	701a      	strb	r2, [r3, #0]
   825f0:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   825f4:	b662      	cpsie	i
}
   825f6:	b003      	add	sp, #12
   825f8:	f85d fb04 	ldr.w	pc, [sp], #4
   825fc:	40098000 	.word	0x40098000
   82600:	000801ad 	.word	0x000801ad
   82604:	200701d8 	.word	0x200701d8
   82608:	20070d00 	.word	0x20070d00
   8260c:	20070c64 	.word	0x20070c64

00082610 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   82610:	b5f0      	push	{r4, r5, r6, r7, lr}
   82612:	b083      	sub	sp, #12
   82614:	4604      	mov	r4, r0
   82616:	460d      	mov	r5, r1
	uint32_t val = 0;
   82618:	2300      	movs	r3, #0
   8261a:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   8261c:	4b1f      	ldr	r3, [pc, #124]	; (8269c <usart_serial_getchar+0x8c>)
   8261e:	4298      	cmp	r0, r3
   82620:	d107      	bne.n	82632 <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
   82622:	461f      	mov	r7, r3
   82624:	4e1e      	ldr	r6, [pc, #120]	; (826a0 <usart_serial_getchar+0x90>)
   82626:	4638      	mov	r0, r7
   82628:	4629      	mov	r1, r5
   8262a:	47b0      	blx	r6
   8262c:	2800      	cmp	r0, #0
   8262e:	d1fa      	bne.n	82626 <usart_serial_getchar+0x16>
   82630:	e019      	b.n	82666 <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   82632:	4b1c      	ldr	r3, [pc, #112]	; (826a4 <usart_serial_getchar+0x94>)
   82634:	4298      	cmp	r0, r3
   82636:	d109      	bne.n	8264c <usart_serial_getchar+0x3c>
		while (usart_read(p_usart, &val));
   82638:	461f      	mov	r7, r3
   8263a:	4e1b      	ldr	r6, [pc, #108]	; (826a8 <usart_serial_getchar+0x98>)
   8263c:	4638      	mov	r0, r7
   8263e:	a901      	add	r1, sp, #4
   82640:	47b0      	blx	r6
   82642:	2800      	cmp	r0, #0
   82644:	d1fa      	bne.n	8263c <usart_serial_getchar+0x2c>
		*data = (uint8_t)(val & 0xFF);
   82646:	9b01      	ldr	r3, [sp, #4]
   82648:	702b      	strb	r3, [r5, #0]
   8264a:	e019      	b.n	82680 <usart_serial_getchar+0x70>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   8264c:	4b17      	ldr	r3, [pc, #92]	; (826ac <usart_serial_getchar+0x9c>)
   8264e:	4298      	cmp	r0, r3
   82650:	d109      	bne.n	82666 <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
   82652:	461e      	mov	r6, r3
   82654:	4c14      	ldr	r4, [pc, #80]	; (826a8 <usart_serial_getchar+0x98>)
   82656:	4630      	mov	r0, r6
   82658:	a901      	add	r1, sp, #4
   8265a:	47a0      	blx	r4
   8265c:	2800      	cmp	r0, #0
   8265e:	d1fa      	bne.n	82656 <usart_serial_getchar+0x46>
		*data = (uint8_t)(val & 0xFF);
   82660:	9b01      	ldr	r3, [sp, #4]
   82662:	702b      	strb	r3, [r5, #0]
   82664:	e018      	b.n	82698 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   82666:	4b12      	ldr	r3, [pc, #72]	; (826b0 <usart_serial_getchar+0xa0>)
   82668:	429c      	cmp	r4, r3
   8266a:	d109      	bne.n	82680 <usart_serial_getchar+0x70>
		while (usart_read(p_usart, &val));
   8266c:	461e      	mov	r6, r3
   8266e:	4c0e      	ldr	r4, [pc, #56]	; (826a8 <usart_serial_getchar+0x98>)
   82670:	4630      	mov	r0, r6
   82672:	a901      	add	r1, sp, #4
   82674:	47a0      	blx	r4
   82676:	2800      	cmp	r0, #0
   82678:	d1fa      	bne.n	82670 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
   8267a:	9b01      	ldr	r3, [sp, #4]
   8267c:	702b      	strb	r3, [r5, #0]
   8267e:	e00b      	b.n	82698 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   82680:	4b0c      	ldr	r3, [pc, #48]	; (826b4 <usart_serial_getchar+0xa4>)
   82682:	429c      	cmp	r4, r3
   82684:	d108      	bne.n	82698 <usart_serial_getchar+0x88>
		while (usart_read(p_usart, &val));
   82686:	461e      	mov	r6, r3
   82688:	4c07      	ldr	r4, [pc, #28]	; (826a8 <usart_serial_getchar+0x98>)
   8268a:	4630      	mov	r0, r6
   8268c:	a901      	add	r1, sp, #4
   8268e:	47a0      	blx	r4
   82690:	2800      	cmp	r0, #0
   82692:	d1fa      	bne.n	8268a <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
   82694:	9b01      	ldr	r3, [sp, #4]
   82696:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   82698:	b003      	add	sp, #12
   8269a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8269c:	400e0800 	.word	0x400e0800
   826a0:	000812b5 	.word	0x000812b5
   826a4:	40098000 	.word	0x40098000
   826a8:	00082389 	.word	0x00082389
   826ac:	4009c000 	.word	0x4009c000
   826b0:	400a0000 	.word	0x400a0000
   826b4:	400a4000 	.word	0x400a4000

000826b8 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   826b8:	b570      	push	{r4, r5, r6, lr}
   826ba:	460c      	mov	r4, r1
#ifdef UART
	if (UART == (Uart*)p_usart) {
   826bc:	4b21      	ldr	r3, [pc, #132]	; (82744 <usart_serial_putchar+0x8c>)
   826be:	4298      	cmp	r0, r3
   826c0:	d107      	bne.n	826d2 <usart_serial_putchar+0x1a>
		while (uart_write((Uart*)p_usart, c)!=0);
   826c2:	461e      	mov	r6, r3
   826c4:	4d20      	ldr	r5, [pc, #128]	; (82748 <usart_serial_putchar+0x90>)
   826c6:	4630      	mov	r0, r6
   826c8:	4621      	mov	r1, r4
   826ca:	47a8      	blx	r5
   826cc:	2800      	cmp	r0, #0
   826ce:	d1fa      	bne.n	826c6 <usart_serial_putchar+0xe>
   826d0:	e02b      	b.n	8272a <usart_serial_putchar+0x72>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   826d2:	4b1e      	ldr	r3, [pc, #120]	; (8274c <usart_serial_putchar+0x94>)
   826d4:	4298      	cmp	r0, r3
   826d6:	d107      	bne.n	826e8 <usart_serial_putchar+0x30>
		while (usart_write(p_usart, c)!=0);
   826d8:	461e      	mov	r6, r3
   826da:	4d1d      	ldr	r5, [pc, #116]	; (82750 <usart_serial_putchar+0x98>)
   826dc:	4630      	mov	r0, r6
   826de:	4621      	mov	r1, r4
   826e0:	47a8      	blx	r5
   826e2:	2800      	cmp	r0, #0
   826e4:	d1fa      	bne.n	826dc <usart_serial_putchar+0x24>
   826e6:	e022      	b.n	8272e <usart_serial_putchar+0x76>
		return 1;
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   826e8:	4b1a      	ldr	r3, [pc, #104]	; (82754 <usart_serial_putchar+0x9c>)
   826ea:	4298      	cmp	r0, r3
   826ec:	d107      	bne.n	826fe <usart_serial_putchar+0x46>
		while (usart_write(p_usart, c)!=0);
   826ee:	461e      	mov	r6, r3
   826f0:	4d17      	ldr	r5, [pc, #92]	; (82750 <usart_serial_putchar+0x98>)
   826f2:	4630      	mov	r0, r6
   826f4:	4621      	mov	r1, r4
   826f6:	47a8      	blx	r5
   826f8:	2800      	cmp	r0, #0
   826fa:	d1fa      	bne.n	826f2 <usart_serial_putchar+0x3a>
   826fc:	e019      	b.n	82732 <usart_serial_putchar+0x7a>
		return 1;
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   826fe:	4b16      	ldr	r3, [pc, #88]	; (82758 <usart_serial_putchar+0xa0>)
   82700:	4298      	cmp	r0, r3
   82702:	d107      	bne.n	82714 <usart_serial_putchar+0x5c>
		while (usart_write(p_usart, c)!=0);
   82704:	461e      	mov	r6, r3
   82706:	4d12      	ldr	r5, [pc, #72]	; (82750 <usart_serial_putchar+0x98>)
   82708:	4630      	mov	r0, r6
   8270a:	4621      	mov	r1, r4
   8270c:	47a8      	blx	r5
   8270e:	2800      	cmp	r0, #0
   82710:	d1fa      	bne.n	82708 <usart_serial_putchar+0x50>
   82712:	e010      	b.n	82736 <usart_serial_putchar+0x7e>
		return 1;
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   82714:	4b11      	ldr	r3, [pc, #68]	; (8275c <usart_serial_putchar+0xa4>)
   82716:	4298      	cmp	r0, r3
   82718:	d10f      	bne.n	8273a <usart_serial_putchar+0x82>
		while (usart_write(p_usart, c)!=0);
   8271a:	461e      	mov	r6, r3
   8271c:	4d0c      	ldr	r5, [pc, #48]	; (82750 <usart_serial_putchar+0x98>)
   8271e:	4630      	mov	r0, r6
   82720:	4621      	mov	r1, r4
   82722:	47a8      	blx	r5
   82724:	2800      	cmp	r0, #0
   82726:	d1fa      	bne.n	8271e <usart_serial_putchar+0x66>
   82728:	e009      	b.n	8273e <usart_serial_putchar+0x86>
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
   8272a:	2001      	movs	r0, #1
   8272c:	bd70      	pop	{r4, r5, r6, pc}
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   8272e:	2001      	movs	r0, #1
   82730:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   82732:	2001      	movs	r0, #1
   82734:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   82736:	2001      	movs	r0, #1
   82738:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   8273a:	2000      	movs	r0, #0
   8273c:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   8273e:	2001      	movs	r0, #1
	}
# endif
#endif /* ifdef USART */

	return 0;
}
   82740:	bd70      	pop	{r4, r5, r6, pc}
   82742:	bf00      	nop
   82744:	400e0800 	.word	0x400e0800
   82748:	000812a5 	.word	0x000812a5
   8274c:	40098000 	.word	0x40098000
   82750:	00082375 	.word	0x00082375
   82754:	4009c000 	.word	0x4009c000
   82758:	400a0000 	.word	0x400a0000
   8275c:	400a4000 	.word	0x400a4000

00082760 <configureConsole>:
uint16_t tick = 0;
uint8_t errors = 0;
void servoControll(unsigned long dist);

void configureConsole()
{
   82760:	b530      	push	{r4, r5, lr}
   82762:	b085      	sub	sp, #20
   82764:	2008      	movs	r0, #8
   82766:	4d12      	ldr	r5, [pc, #72]	; (827b0 <configureConsole+0x50>)
   82768:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   8276a:	4c12      	ldr	r4, [pc, #72]	; (827b4 <configureConsole+0x54>)
   8276c:	4b12      	ldr	r3, [pc, #72]	; (827b8 <configureConsole+0x58>)
   8276e:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   82770:	4a12      	ldr	r2, [pc, #72]	; (827bc <configureConsole+0x5c>)
   82772:	4b13      	ldr	r3, [pc, #76]	; (827c0 <configureConsole+0x60>)
   82774:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   82776:	4a13      	ldr	r2, [pc, #76]	; (827c4 <configureConsole+0x64>)
   82778:	4b13      	ldr	r3, [pc, #76]	; (827c8 <configureConsole+0x68>)
   8277a:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   8277c:	4b13      	ldr	r3, [pc, #76]	; (827cc <configureConsole+0x6c>)
   8277e:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   82780:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   82784:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   82786:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8278a:	9303      	str	r3, [sp, #12]
   8278c:	2008      	movs	r0, #8
   8278e:	47a8      	blx	r5
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   82790:	4620      	mov	r0, r4
   82792:	a901      	add	r1, sp, #4
   82794:	4b0e      	ldr	r3, [pc, #56]	; (827d0 <configureConsole+0x70>)
   82796:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   82798:	4d0e      	ldr	r5, [pc, #56]	; (827d4 <configureConsole+0x74>)
   8279a:	682b      	ldr	r3, [r5, #0]
   8279c:	6898      	ldr	r0, [r3, #8]
   8279e:	2100      	movs	r1, #0
   827a0:	4c0d      	ldr	r4, [pc, #52]	; (827d8 <configureConsole+0x78>)
   827a2:	47a0      	blx	r4
	setbuf(stdin, NULL);
   827a4:	682b      	ldr	r3, [r5, #0]
   827a6:	6858      	ldr	r0, [r3, #4]
   827a8:	2100      	movs	r1, #0
   827aa:	47a0      	blx	r4
		.paritytype = UART_MR_PAR_NO
	};
	
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONSOLE_UART, &uart_serial_options);
}
   827ac:	b005      	add	sp, #20
   827ae:	bd30      	pop	{r4, r5, pc}
   827b0:	00081205 	.word	0x00081205
   827b4:	400e0800 	.word	0x400e0800
   827b8:	20070d4c 	.word	0x20070d4c
   827bc:	000826b9 	.word	0x000826b9
   827c0:	20070d48 	.word	0x20070d48
   827c4:	00082611 	.word	0x00082611
   827c8:	20070d44 	.word	0x20070d44
   827cc:	0501bd00 	.word	0x0501bd00
   827d0:	0008126d 	.word	0x0008126d
   827d4:	20070608 	.word	0x20070608
   827d8:	00082995 	.word	0x00082995

000827dc <main>:
	
	
}

int main (void)
{
   827dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   827de:	4b2c      	ldr	r3, [pc, #176]	; (82890 <main+0xb4>)
   827e0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   827e4:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   827e6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   827ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   827ee:	615a      	str	r2, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   827f0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   827f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   827f8:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   827fa:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   827fe:	635a      	str	r2, [r3, #52]	; 0x34
	ioport_set_pin_dir(trig,IOPORT_DIR_OUTPUT);
	ioport_set_pin_dir(echo, IOPORT_DIR_INPUT);
	ioport_set_pin_dir(led, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(led,LOW);
	//turn of watchdog
	WDT->WDT_MR = WDT_MR_WDDIS;
   82800:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   82804:	f503 6305 	add.w	r3, r3, #2128	; 0x850
   82808:	605a      	str	r2, [r3, #4]
	
	//init clock
	sysclk_init();
   8280a:	4b22      	ldr	r3, [pc, #136]	; (82894 <main+0xb8>)
   8280c:	4798      	blx	r3
	//init board
	board_init();
   8280e:	4b22      	ldr	r3, [pc, #136]	; (82898 <main+0xbc>)
   82810:	4798      	blx	r3
	//init serial communication, printf ..
	configureConsole();
   82812:	4b22      	ldr	r3, [pc, #136]	; (8289c <main+0xc0>)
   82814:	4798      	blx	r3
	//test ultrasound sensor
	tick = 20;
   82816:	2214      	movs	r2, #20
   82818:	4b21      	ldr	r3, [pc, #132]	; (828a0 <main+0xc4>)
   8281a:	801a      	strh	r2, [r3, #0]
	while(1)
	{	
		switch(dir){
   8281c:	4c21      	ldr	r4, [pc, #132]	; (828a4 <main+0xc8>)
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   8281e:	4e1c      	ldr	r6, [pc, #112]	; (82890 <main+0xb4>)
		break;
		
		case LEFT:
		//printf("SEARCHING DIR 1");
		ioport_set_pin_level(led, HIGH);
		delay_us(1300); 
   82820:	4d21      	ldr	r5, [pc, #132]	; (828a8 <main+0xcc>)
	configureConsole();
	//test ultrasound sensor
	tick = 20;
	while(1)
	{	
		switch(dir){
   82822:	f994 3000 	ldrsb.w	r3, [r4]
   82826:	2b01      	cmp	r3, #1
   82828:	d017      	beq.n	8285a <main+0x7e>
   8282a:	2b02      	cmp	r3, #2
   8282c:	d001      	beq.n	82832 <main+0x56>
   8282e:	b9eb      	cbnz	r3, 8286c <main+0x90>
   82830:	e009      	b.n	82846 <main+0x6a>
   82832:	f04f 7780 	mov.w	r7, #16777216	; 0x1000000
   82836:	6337      	str	r7, [r6, #48]	; 0x30
		case STOP:
			ioport_set_pin_level(led, HIGH);
			delay_us(1500);
   82838:	f242 3028 	movw	r0, #9000	; 0x2328
   8283c:	47a8      	blx	r5
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   8283e:	6377      	str	r7, [r6, #52]	; 0x34
			ioport_set_pin_level(led, LOW);
			delay_us(100000);
   82840:	481a      	ldr	r0, [pc, #104]	; (828ac <main+0xd0>)
   82842:	47a8      	blx	r5
			break;
   82844:	e012      	b.n	8286c <main+0x90>
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   82846:	f04f 7780 	mov.w	r7, #16777216	; 0x1000000
   8284a:	6337      	str	r7, [r6, #48]	; 0x30
	
		case RIGHT:
		//printf("SEARCHING DIR 0");
		ioport_set_pin_level(led, HIGH);
		delay_us(1671);
   8284c:	f242 702a 	movw	r0, #10026	; 0x272a
   82850:	47a8      	blx	r5
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   82852:	6377      	str	r7, [r6, #52]	; 0x34
		ioport_set_pin_level(led, LOW);
		delay_us(100000);
   82854:	4815      	ldr	r0, [pc, #84]	; (828ac <main+0xd0>)
   82856:	47a8      	blx	r5
		break;
   82858:	e008      	b.n	8286c <main+0x90>
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   8285a:	f04f 7780 	mov.w	r7, #16777216	; 0x1000000
   8285e:	6337      	str	r7, [r6, #48]	; 0x30
		
		case LEFT:
		//printf("SEARCHING DIR 1");
		ioport_set_pin_level(led, HIGH);
		delay_us(1300); 
   82860:	f641 6078 	movw	r0, #7800	; 0x1e78
   82864:	47a8      	blx	r5
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   82866:	6377      	str	r7, [r6, #52]	; 0x34
		ioport_set_pin_level(led, LOW);
		delay_us(100000);
   82868:	4810      	ldr	r0, [pc, #64]	; (828ac <main+0xd0>)
   8286a:	47a8      	blx	r5
	}
	//testingUltraSound();
	
	/**TESTNING AV SYMMETRISK VRIDNING.
	**/
	if(tick == 0){
   8286c:	4b0c      	ldr	r3, [pc, #48]	; (828a0 <main+0xc4>)
   8286e:	881b      	ldrh	r3, [r3, #0]
   82870:	b94b      	cbnz	r3, 82886 <main+0xaa>
		tick = 20;
   82872:	2214      	movs	r2, #20
   82874:	4b0a      	ldr	r3, [pc, #40]	; (828a0 <main+0xc4>)
   82876:	801a      	strh	r2, [r3, #0]
		if(dir==LEFT) dir = RIGHT;
   82878:	f994 3000 	ldrsb.w	r3, [r4]
   8287c:	2b01      	cmp	r3, #1
   8287e:	bf0c      	ite	eq
   82880:	2300      	moveq	r3, #0
		else dir = LEFT;
   82882:	2301      	movne	r3, #1
   82884:	7023      	strb	r3, [r4, #0]
		//dir = STOP;
	}
	tick--;
   82886:	4b06      	ldr	r3, [pc, #24]	; (828a0 <main+0xc4>)
   82888:	881a      	ldrh	r2, [r3, #0]
   8288a:	3a01      	subs	r2, #1
   8288c:	801a      	strh	r2, [r3, #0]
	//**/
	}
   8288e:	e7c8      	b.n	82822 <main+0x46>
   82890:	400e1200 	.word	0x400e1200
   82894:	00080149 	.word	0x00080149
   82898:	00080ddd 	.word	0x00080ddd
   8289c:	00082761 	.word	0x00082761
   828a0:	20070d02 	.word	0x20070d02
   828a4:	20070d04 	.word	0x20070d04
   828a8:	20070001 	.word	0x20070001
   828ac:	000927c0 	.word	0x000927c0

000828b0 <__libc_init_array>:
   828b0:	b570      	push	{r4, r5, r6, lr}
   828b2:	4e0f      	ldr	r6, [pc, #60]	; (828f0 <__libc_init_array+0x40>)
   828b4:	4d0f      	ldr	r5, [pc, #60]	; (828f4 <__libc_init_array+0x44>)
   828b6:	1b76      	subs	r6, r6, r5
   828b8:	10b6      	asrs	r6, r6, #2
   828ba:	d007      	beq.n	828cc <__libc_init_array+0x1c>
   828bc:	3d04      	subs	r5, #4
   828be:	2400      	movs	r4, #0
   828c0:	3401      	adds	r4, #1
   828c2:	f855 3f04 	ldr.w	r3, [r5, #4]!
   828c6:	4798      	blx	r3
   828c8:	42a6      	cmp	r6, r4
   828ca:	d1f9      	bne.n	828c0 <__libc_init_array+0x10>
   828cc:	4e0a      	ldr	r6, [pc, #40]	; (828f8 <__libc_init_array+0x48>)
   828ce:	4d0b      	ldr	r5, [pc, #44]	; (828fc <__libc_init_array+0x4c>)
   828d0:	f000 ff76 	bl	837c0 <_init>
   828d4:	1b76      	subs	r6, r6, r5
   828d6:	10b6      	asrs	r6, r6, #2
   828d8:	d008      	beq.n	828ec <__libc_init_array+0x3c>
   828da:	3d04      	subs	r5, #4
   828dc:	2400      	movs	r4, #0
   828de:	3401      	adds	r4, #1
   828e0:	f855 3f04 	ldr.w	r3, [r5, #4]!
   828e4:	4798      	blx	r3
   828e6:	42a6      	cmp	r6, r4
   828e8:	d1f9      	bne.n	828de <__libc_init_array+0x2e>
   828ea:	bd70      	pop	{r4, r5, r6, pc}
   828ec:	bd70      	pop	{r4, r5, r6, pc}
   828ee:	bf00      	nop
   828f0:	000837cc 	.word	0x000837cc
   828f4:	000837cc 	.word	0x000837cc
   828f8:	000837d4 	.word	0x000837d4
   828fc:	000837cc 	.word	0x000837cc

00082900 <memset>:
   82900:	b4f0      	push	{r4, r5, r6, r7}
   82902:	0784      	lsls	r4, r0, #30
   82904:	d043      	beq.n	8298e <memset+0x8e>
   82906:	1e54      	subs	r4, r2, #1
   82908:	2a00      	cmp	r2, #0
   8290a:	d03e      	beq.n	8298a <memset+0x8a>
   8290c:	b2cd      	uxtb	r5, r1
   8290e:	4603      	mov	r3, r0
   82910:	e003      	b.n	8291a <memset+0x1a>
   82912:	1e62      	subs	r2, r4, #1
   82914:	2c00      	cmp	r4, #0
   82916:	d038      	beq.n	8298a <memset+0x8a>
   82918:	4614      	mov	r4, r2
   8291a:	f803 5b01 	strb.w	r5, [r3], #1
   8291e:	079a      	lsls	r2, r3, #30
   82920:	d1f7      	bne.n	82912 <memset+0x12>
   82922:	2c03      	cmp	r4, #3
   82924:	d92a      	bls.n	8297c <memset+0x7c>
   82926:	b2cd      	uxtb	r5, r1
   82928:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   8292c:	2c0f      	cmp	r4, #15
   8292e:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   82932:	d915      	bls.n	82960 <memset+0x60>
   82934:	f1a4 0710 	sub.w	r7, r4, #16
   82938:	093f      	lsrs	r7, r7, #4
   8293a:	f103 0610 	add.w	r6, r3, #16
   8293e:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   82942:	461a      	mov	r2, r3
   82944:	6015      	str	r5, [r2, #0]
   82946:	6055      	str	r5, [r2, #4]
   82948:	6095      	str	r5, [r2, #8]
   8294a:	60d5      	str	r5, [r2, #12]
   8294c:	3210      	adds	r2, #16
   8294e:	42b2      	cmp	r2, r6
   82950:	d1f8      	bne.n	82944 <memset+0x44>
   82952:	f004 040f 	and.w	r4, r4, #15
   82956:	3701      	adds	r7, #1
   82958:	2c03      	cmp	r4, #3
   8295a:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   8295e:	d90d      	bls.n	8297c <memset+0x7c>
   82960:	461e      	mov	r6, r3
   82962:	4622      	mov	r2, r4
   82964:	3a04      	subs	r2, #4
   82966:	2a03      	cmp	r2, #3
   82968:	f846 5b04 	str.w	r5, [r6], #4
   8296c:	d8fa      	bhi.n	82964 <memset+0x64>
   8296e:	1f22      	subs	r2, r4, #4
   82970:	f022 0203 	bic.w	r2, r2, #3
   82974:	3204      	adds	r2, #4
   82976:	4413      	add	r3, r2
   82978:	f004 0403 	and.w	r4, r4, #3
   8297c:	b12c      	cbz	r4, 8298a <memset+0x8a>
   8297e:	b2c9      	uxtb	r1, r1
   82980:	441c      	add	r4, r3
   82982:	f803 1b01 	strb.w	r1, [r3], #1
   82986:	42a3      	cmp	r3, r4
   82988:	d1fb      	bne.n	82982 <memset+0x82>
   8298a:	bcf0      	pop	{r4, r5, r6, r7}
   8298c:	4770      	bx	lr
   8298e:	4614      	mov	r4, r2
   82990:	4603      	mov	r3, r0
   82992:	e7c6      	b.n	82922 <memset+0x22>

00082994 <setbuf>:
   82994:	2900      	cmp	r1, #0
   82996:	bf0c      	ite	eq
   82998:	2202      	moveq	r2, #2
   8299a:	2200      	movne	r2, #0
   8299c:	f44f 6380 	mov.w	r3, #1024	; 0x400
   829a0:	f000 b800 	b.w	829a4 <setvbuf>

000829a4 <setvbuf>:
   829a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   829a8:	4d3c      	ldr	r5, [pc, #240]	; (82a9c <setvbuf+0xf8>)
   829aa:	4604      	mov	r4, r0
   829ac:	682d      	ldr	r5, [r5, #0]
   829ae:	4688      	mov	r8, r1
   829b0:	4616      	mov	r6, r2
   829b2:	461f      	mov	r7, r3
   829b4:	b115      	cbz	r5, 829bc <setvbuf+0x18>
   829b6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   829b8:	2b00      	cmp	r3, #0
   829ba:	d04f      	beq.n	82a5c <setvbuf+0xb8>
   829bc:	2e02      	cmp	r6, #2
   829be:	d830      	bhi.n	82a22 <setvbuf+0x7e>
   829c0:	2f00      	cmp	r7, #0
   829c2:	db2e      	blt.n	82a22 <setvbuf+0x7e>
   829c4:	4628      	mov	r0, r5
   829c6:	4621      	mov	r1, r4
   829c8:	f000 f920 	bl	82c0c <_fflush_r>
   829cc:	89a3      	ldrh	r3, [r4, #12]
   829ce:	2200      	movs	r2, #0
   829d0:	6062      	str	r2, [r4, #4]
   829d2:	61a2      	str	r2, [r4, #24]
   829d4:	061a      	lsls	r2, r3, #24
   829d6:	d428      	bmi.n	82a2a <setvbuf+0x86>
   829d8:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   829dc:	b29b      	uxth	r3, r3
   829de:	2e02      	cmp	r6, #2
   829e0:	81a3      	strh	r3, [r4, #12]
   829e2:	d02d      	beq.n	82a40 <setvbuf+0x9c>
   829e4:	f1b8 0f00 	cmp.w	r8, #0
   829e8:	d03c      	beq.n	82a64 <setvbuf+0xc0>
   829ea:	2e01      	cmp	r6, #1
   829ec:	d013      	beq.n	82a16 <setvbuf+0x72>
   829ee:	b29b      	uxth	r3, r3
   829f0:	f003 0008 	and.w	r0, r3, #8
   829f4:	4a2a      	ldr	r2, [pc, #168]	; (82aa0 <setvbuf+0xfc>)
   829f6:	b280      	uxth	r0, r0
   829f8:	63ea      	str	r2, [r5, #60]	; 0x3c
   829fa:	f8c4 8000 	str.w	r8, [r4]
   829fe:	f8c4 8010 	str.w	r8, [r4, #16]
   82a02:	6167      	str	r7, [r4, #20]
   82a04:	b178      	cbz	r0, 82a26 <setvbuf+0x82>
   82a06:	f013 0f03 	tst.w	r3, #3
   82a0a:	bf18      	it	ne
   82a0c:	2700      	movne	r7, #0
   82a0e:	60a7      	str	r7, [r4, #8]
   82a10:	2000      	movs	r0, #0
   82a12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82a16:	f043 0301 	orr.w	r3, r3, #1
   82a1a:	427a      	negs	r2, r7
   82a1c:	81a3      	strh	r3, [r4, #12]
   82a1e:	61a2      	str	r2, [r4, #24]
   82a20:	e7e5      	b.n	829ee <setvbuf+0x4a>
   82a22:	f04f 30ff 	mov.w	r0, #4294967295
   82a26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82a2a:	4628      	mov	r0, r5
   82a2c:	6921      	ldr	r1, [r4, #16]
   82a2e:	f000 f9ed 	bl	82e0c <_free_r>
   82a32:	89a3      	ldrh	r3, [r4, #12]
   82a34:	2e02      	cmp	r6, #2
   82a36:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   82a3a:	b29b      	uxth	r3, r3
   82a3c:	81a3      	strh	r3, [r4, #12]
   82a3e:	d1d1      	bne.n	829e4 <setvbuf+0x40>
   82a40:	2000      	movs	r0, #0
   82a42:	f104 0243 	add.w	r2, r4, #67	; 0x43
   82a46:	f043 0302 	orr.w	r3, r3, #2
   82a4a:	2500      	movs	r5, #0
   82a4c:	2101      	movs	r1, #1
   82a4e:	81a3      	strh	r3, [r4, #12]
   82a50:	60a5      	str	r5, [r4, #8]
   82a52:	6022      	str	r2, [r4, #0]
   82a54:	6122      	str	r2, [r4, #16]
   82a56:	6161      	str	r1, [r4, #20]
   82a58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82a5c:	4628      	mov	r0, r5
   82a5e:	f000 f8f1 	bl	82c44 <__sinit>
   82a62:	e7ab      	b.n	829bc <setvbuf+0x18>
   82a64:	2f00      	cmp	r7, #0
   82a66:	bf08      	it	eq
   82a68:	f44f 6780 	moveq.w	r7, #1024	; 0x400
   82a6c:	4638      	mov	r0, r7
   82a6e:	f000 fabd 	bl	82fec <malloc>
   82a72:	4680      	mov	r8, r0
   82a74:	b128      	cbz	r0, 82a82 <setvbuf+0xde>
   82a76:	89a3      	ldrh	r3, [r4, #12]
   82a78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   82a7c:	b29b      	uxth	r3, r3
   82a7e:	81a3      	strh	r3, [r4, #12]
   82a80:	e7b3      	b.n	829ea <setvbuf+0x46>
   82a82:	f44f 6080 	mov.w	r0, #1024	; 0x400
   82a86:	f000 fab1 	bl	82fec <malloc>
   82a8a:	4680      	mov	r8, r0
   82a8c:	b918      	cbnz	r0, 82a96 <setvbuf+0xf2>
   82a8e:	89a3      	ldrh	r3, [r4, #12]
   82a90:	f04f 30ff 	mov.w	r0, #4294967295
   82a94:	e7d5      	b.n	82a42 <setvbuf+0x9e>
   82a96:	f44f 6780 	mov.w	r7, #1024	; 0x400
   82a9a:	e7ec      	b.n	82a76 <setvbuf+0xd2>
   82a9c:	20070608 	.word	0x20070608
   82aa0:	00082c39 	.word	0x00082c39

00082aa4 <register_fini>:
   82aa4:	4b02      	ldr	r3, [pc, #8]	; (82ab0 <register_fini+0xc>)
   82aa6:	b113      	cbz	r3, 82aae <register_fini+0xa>
   82aa8:	4802      	ldr	r0, [pc, #8]	; (82ab4 <register_fini+0x10>)
   82aaa:	f000 b805 	b.w	82ab8 <atexit>
   82aae:	4770      	bx	lr
   82ab0:	00000000 	.word	0x00000000
   82ab4:	00082d41 	.word	0x00082d41

00082ab8 <atexit>:
   82ab8:	4601      	mov	r1, r0
   82aba:	2000      	movs	r0, #0
   82abc:	4602      	mov	r2, r0
   82abe:	4603      	mov	r3, r0
   82ac0:	f000 bda4 	b.w	8360c <__register_exitproc>

00082ac4 <__sflush_r>:
   82ac4:	898b      	ldrh	r3, [r1, #12]
   82ac6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82aca:	b29a      	uxth	r2, r3
   82acc:	460d      	mov	r5, r1
   82ace:	0711      	lsls	r1, r2, #28
   82ad0:	4680      	mov	r8, r0
   82ad2:	d43c      	bmi.n	82b4e <__sflush_r+0x8a>
   82ad4:	686a      	ldr	r2, [r5, #4]
   82ad6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   82ada:	2a00      	cmp	r2, #0
   82adc:	81ab      	strh	r3, [r5, #12]
   82ade:	dd59      	ble.n	82b94 <__sflush_r+0xd0>
   82ae0:	6aac      	ldr	r4, [r5, #40]	; 0x28
   82ae2:	2c00      	cmp	r4, #0
   82ae4:	d04b      	beq.n	82b7e <__sflush_r+0xba>
   82ae6:	b29b      	uxth	r3, r3
   82ae8:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   82aec:	2100      	movs	r1, #0
   82aee:	b292      	uxth	r2, r2
   82af0:	f8d8 6000 	ldr.w	r6, [r8]
   82af4:	f8c8 1000 	str.w	r1, [r8]
   82af8:	2a00      	cmp	r2, #0
   82afa:	d04f      	beq.n	82b9c <__sflush_r+0xd8>
   82afc:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   82afe:	075f      	lsls	r7, r3, #29
   82b00:	d505      	bpl.n	82b0e <__sflush_r+0x4a>
   82b02:	6869      	ldr	r1, [r5, #4]
   82b04:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   82b06:	1a52      	subs	r2, r2, r1
   82b08:	b10b      	cbz	r3, 82b0e <__sflush_r+0x4a>
   82b0a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   82b0c:	1ad2      	subs	r2, r2, r3
   82b0e:	4640      	mov	r0, r8
   82b10:	69e9      	ldr	r1, [r5, #28]
   82b12:	2300      	movs	r3, #0
   82b14:	47a0      	blx	r4
   82b16:	1c44      	adds	r4, r0, #1
   82b18:	d04a      	beq.n	82bb0 <__sflush_r+0xec>
   82b1a:	89ab      	ldrh	r3, [r5, #12]
   82b1c:	692a      	ldr	r2, [r5, #16]
   82b1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   82b22:	b29b      	uxth	r3, r3
   82b24:	2100      	movs	r1, #0
   82b26:	602a      	str	r2, [r5, #0]
   82b28:	04da      	lsls	r2, r3, #19
   82b2a:	81ab      	strh	r3, [r5, #12]
   82b2c:	6069      	str	r1, [r5, #4]
   82b2e:	d44c      	bmi.n	82bca <__sflush_r+0x106>
   82b30:	6b29      	ldr	r1, [r5, #48]	; 0x30
   82b32:	f8c8 6000 	str.w	r6, [r8]
   82b36:	b311      	cbz	r1, 82b7e <__sflush_r+0xba>
   82b38:	f105 0340 	add.w	r3, r5, #64	; 0x40
   82b3c:	4299      	cmp	r1, r3
   82b3e:	d002      	beq.n	82b46 <__sflush_r+0x82>
   82b40:	4640      	mov	r0, r8
   82b42:	f000 f963 	bl	82e0c <_free_r>
   82b46:	2000      	movs	r0, #0
   82b48:	6328      	str	r0, [r5, #48]	; 0x30
   82b4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82b4e:	692e      	ldr	r6, [r5, #16]
   82b50:	b1ae      	cbz	r6, 82b7e <__sflush_r+0xba>
   82b52:	0791      	lsls	r1, r2, #30
   82b54:	682c      	ldr	r4, [r5, #0]
   82b56:	bf0c      	ite	eq
   82b58:	696b      	ldreq	r3, [r5, #20]
   82b5a:	2300      	movne	r3, #0
   82b5c:	602e      	str	r6, [r5, #0]
   82b5e:	1ba4      	subs	r4, r4, r6
   82b60:	60ab      	str	r3, [r5, #8]
   82b62:	e00a      	b.n	82b7a <__sflush_r+0xb6>
   82b64:	4632      	mov	r2, r6
   82b66:	4623      	mov	r3, r4
   82b68:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   82b6a:	4640      	mov	r0, r8
   82b6c:	69e9      	ldr	r1, [r5, #28]
   82b6e:	47b8      	blx	r7
   82b70:	2800      	cmp	r0, #0
   82b72:	ebc0 0404 	rsb	r4, r0, r4
   82b76:	4406      	add	r6, r0
   82b78:	dd04      	ble.n	82b84 <__sflush_r+0xc0>
   82b7a:	2c00      	cmp	r4, #0
   82b7c:	dcf2      	bgt.n	82b64 <__sflush_r+0xa0>
   82b7e:	2000      	movs	r0, #0
   82b80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82b84:	89ab      	ldrh	r3, [r5, #12]
   82b86:	f04f 30ff 	mov.w	r0, #4294967295
   82b8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82b8e:	81ab      	strh	r3, [r5, #12]
   82b90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82b94:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   82b96:	2a00      	cmp	r2, #0
   82b98:	dca2      	bgt.n	82ae0 <__sflush_r+0x1c>
   82b9a:	e7f0      	b.n	82b7e <__sflush_r+0xba>
   82b9c:	2301      	movs	r3, #1
   82b9e:	4640      	mov	r0, r8
   82ba0:	69e9      	ldr	r1, [r5, #28]
   82ba2:	47a0      	blx	r4
   82ba4:	1c43      	adds	r3, r0, #1
   82ba6:	4602      	mov	r2, r0
   82ba8:	d01e      	beq.n	82be8 <__sflush_r+0x124>
   82baa:	89ab      	ldrh	r3, [r5, #12]
   82bac:	6aac      	ldr	r4, [r5, #40]	; 0x28
   82bae:	e7a6      	b.n	82afe <__sflush_r+0x3a>
   82bb0:	f8d8 3000 	ldr.w	r3, [r8]
   82bb4:	b95b      	cbnz	r3, 82bce <__sflush_r+0x10a>
   82bb6:	89aa      	ldrh	r2, [r5, #12]
   82bb8:	6929      	ldr	r1, [r5, #16]
   82bba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   82bbe:	b292      	uxth	r2, r2
   82bc0:	606b      	str	r3, [r5, #4]
   82bc2:	04d3      	lsls	r3, r2, #19
   82bc4:	81aa      	strh	r2, [r5, #12]
   82bc6:	6029      	str	r1, [r5, #0]
   82bc8:	d5b2      	bpl.n	82b30 <__sflush_r+0x6c>
   82bca:	6528      	str	r0, [r5, #80]	; 0x50
   82bcc:	e7b0      	b.n	82b30 <__sflush_r+0x6c>
   82bce:	2b1d      	cmp	r3, #29
   82bd0:	d001      	beq.n	82bd6 <__sflush_r+0x112>
   82bd2:	2b16      	cmp	r3, #22
   82bd4:	d113      	bne.n	82bfe <__sflush_r+0x13a>
   82bd6:	89a9      	ldrh	r1, [r5, #12]
   82bd8:	692b      	ldr	r3, [r5, #16]
   82bda:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
   82bde:	2200      	movs	r2, #0
   82be0:	81a9      	strh	r1, [r5, #12]
   82be2:	602b      	str	r3, [r5, #0]
   82be4:	606a      	str	r2, [r5, #4]
   82be6:	e7a3      	b.n	82b30 <__sflush_r+0x6c>
   82be8:	f8d8 3000 	ldr.w	r3, [r8]
   82bec:	2b00      	cmp	r3, #0
   82bee:	d0dc      	beq.n	82baa <__sflush_r+0xe6>
   82bf0:	2b1d      	cmp	r3, #29
   82bf2:	d001      	beq.n	82bf8 <__sflush_r+0x134>
   82bf4:	2b16      	cmp	r3, #22
   82bf6:	d1c5      	bne.n	82b84 <__sflush_r+0xc0>
   82bf8:	f8c8 6000 	str.w	r6, [r8]
   82bfc:	e7bf      	b.n	82b7e <__sflush_r+0xba>
   82bfe:	89ab      	ldrh	r3, [r5, #12]
   82c00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82c04:	81ab      	strh	r3, [r5, #12]
   82c06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82c0a:	bf00      	nop

00082c0c <_fflush_r>:
   82c0c:	b510      	push	{r4, lr}
   82c0e:	4604      	mov	r4, r0
   82c10:	b082      	sub	sp, #8
   82c12:	b108      	cbz	r0, 82c18 <_fflush_r+0xc>
   82c14:	6b83      	ldr	r3, [r0, #56]	; 0x38
   82c16:	b153      	cbz	r3, 82c2e <_fflush_r+0x22>
   82c18:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   82c1c:	b908      	cbnz	r0, 82c22 <_fflush_r+0x16>
   82c1e:	b002      	add	sp, #8
   82c20:	bd10      	pop	{r4, pc}
   82c22:	4620      	mov	r0, r4
   82c24:	b002      	add	sp, #8
   82c26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   82c2a:	f7ff bf4b 	b.w	82ac4 <__sflush_r>
   82c2e:	9101      	str	r1, [sp, #4]
   82c30:	f000 f808 	bl	82c44 <__sinit>
   82c34:	9901      	ldr	r1, [sp, #4]
   82c36:	e7ef      	b.n	82c18 <_fflush_r+0xc>

00082c38 <_cleanup_r>:
   82c38:	4901      	ldr	r1, [pc, #4]	; (82c40 <_cleanup_r+0x8>)
   82c3a:	f000 b9b3 	b.w	82fa4 <_fwalk>
   82c3e:	bf00      	nop
   82c40:	00083759 	.word	0x00083759

00082c44 <__sinit>:
   82c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82c48:	6b84      	ldr	r4, [r0, #56]	; 0x38
   82c4a:	b083      	sub	sp, #12
   82c4c:	4607      	mov	r7, r0
   82c4e:	2c00      	cmp	r4, #0
   82c50:	d165      	bne.n	82d1e <__sinit+0xda>
   82c52:	687d      	ldr	r5, [r7, #4]
   82c54:	4833      	ldr	r0, [pc, #204]	; (82d24 <__sinit+0xe0>)
   82c56:	2304      	movs	r3, #4
   82c58:	2103      	movs	r1, #3
   82c5a:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   82c5e:	63f8      	str	r0, [r7, #60]	; 0x3c
   82c60:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   82c64:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   82c68:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   82c6c:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   82c70:	81ab      	strh	r3, [r5, #12]
   82c72:	602c      	str	r4, [r5, #0]
   82c74:	606c      	str	r4, [r5, #4]
   82c76:	60ac      	str	r4, [r5, #8]
   82c78:	666c      	str	r4, [r5, #100]	; 0x64
   82c7a:	81ec      	strh	r4, [r5, #14]
   82c7c:	612c      	str	r4, [r5, #16]
   82c7e:	616c      	str	r4, [r5, #20]
   82c80:	61ac      	str	r4, [r5, #24]
   82c82:	4621      	mov	r1, r4
   82c84:	2208      	movs	r2, #8
   82c86:	f7ff fe3b 	bl	82900 <memset>
   82c8a:	f8df b09c 	ldr.w	fp, [pc, #156]	; 82d28 <__sinit+0xe4>
   82c8e:	68be      	ldr	r6, [r7, #8]
   82c90:	f8df a098 	ldr.w	sl, [pc, #152]	; 82d2c <__sinit+0xe8>
   82c94:	f8df 9098 	ldr.w	r9, [pc, #152]	; 82d30 <__sinit+0xec>
   82c98:	f8df 8098 	ldr.w	r8, [pc, #152]	; 82d34 <__sinit+0xf0>
   82c9c:	2301      	movs	r3, #1
   82c9e:	2209      	movs	r2, #9
   82ca0:	61ed      	str	r5, [r5, #28]
   82ca2:	f8c5 b020 	str.w	fp, [r5, #32]
   82ca6:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   82caa:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   82cae:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   82cb2:	4621      	mov	r1, r4
   82cb4:	81f3      	strh	r3, [r6, #14]
   82cb6:	81b2      	strh	r2, [r6, #12]
   82cb8:	6034      	str	r4, [r6, #0]
   82cba:	6074      	str	r4, [r6, #4]
   82cbc:	60b4      	str	r4, [r6, #8]
   82cbe:	6674      	str	r4, [r6, #100]	; 0x64
   82cc0:	6134      	str	r4, [r6, #16]
   82cc2:	6174      	str	r4, [r6, #20]
   82cc4:	61b4      	str	r4, [r6, #24]
   82cc6:	2208      	movs	r2, #8
   82cc8:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   82ccc:	9301      	str	r3, [sp, #4]
   82cce:	f7ff fe17 	bl	82900 <memset>
   82cd2:	68fd      	ldr	r5, [r7, #12]
   82cd4:	2012      	movs	r0, #18
   82cd6:	2202      	movs	r2, #2
   82cd8:	61f6      	str	r6, [r6, #28]
   82cda:	f8c6 b020 	str.w	fp, [r6, #32]
   82cde:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   82ce2:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   82ce6:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   82cea:	4621      	mov	r1, r4
   82cec:	81a8      	strh	r0, [r5, #12]
   82cee:	81ea      	strh	r2, [r5, #14]
   82cf0:	602c      	str	r4, [r5, #0]
   82cf2:	606c      	str	r4, [r5, #4]
   82cf4:	60ac      	str	r4, [r5, #8]
   82cf6:	666c      	str	r4, [r5, #100]	; 0x64
   82cf8:	612c      	str	r4, [r5, #16]
   82cfa:	616c      	str	r4, [r5, #20]
   82cfc:	61ac      	str	r4, [r5, #24]
   82cfe:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   82d02:	2208      	movs	r2, #8
   82d04:	f7ff fdfc 	bl	82900 <memset>
   82d08:	9b01      	ldr	r3, [sp, #4]
   82d0a:	61ed      	str	r5, [r5, #28]
   82d0c:	f8c5 b020 	str.w	fp, [r5, #32]
   82d10:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   82d14:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   82d18:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   82d1c:	63bb      	str	r3, [r7, #56]	; 0x38
   82d1e:	b003      	add	sp, #12
   82d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82d24:	00082c39 	.word	0x00082c39
   82d28:	00083561 	.word	0x00083561
   82d2c:	00083585 	.word	0x00083585
   82d30:	000835bd 	.word	0x000835bd
   82d34:	000835dd 	.word	0x000835dd

00082d38 <__sfp_lock_acquire>:
   82d38:	4770      	bx	lr
   82d3a:	bf00      	nop

00082d3c <__sfp_lock_release>:
   82d3c:	4770      	bx	lr
   82d3e:	bf00      	nop

00082d40 <__libc_fini_array>:
   82d40:	b538      	push	{r3, r4, r5, lr}
   82d42:	4d09      	ldr	r5, [pc, #36]	; (82d68 <__libc_fini_array+0x28>)
   82d44:	4c09      	ldr	r4, [pc, #36]	; (82d6c <__libc_fini_array+0x2c>)
   82d46:	1b64      	subs	r4, r4, r5
   82d48:	10a4      	asrs	r4, r4, #2
   82d4a:	bf18      	it	ne
   82d4c:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
   82d50:	d005      	beq.n	82d5e <__libc_fini_array+0x1e>
   82d52:	3c01      	subs	r4, #1
   82d54:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   82d58:	4798      	blx	r3
   82d5a:	2c00      	cmp	r4, #0
   82d5c:	d1f9      	bne.n	82d52 <__libc_fini_array+0x12>
   82d5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   82d62:	f000 bd37 	b.w	837d4 <_fini>
   82d66:	bf00      	nop
   82d68:	000837e0 	.word	0x000837e0
   82d6c:	000837e4 	.word	0x000837e4

00082d70 <_malloc_trim_r>:
   82d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82d72:	4d23      	ldr	r5, [pc, #140]	; (82e00 <_malloc_trim_r+0x90>)
   82d74:	460f      	mov	r7, r1
   82d76:	4604      	mov	r4, r0
   82d78:	f000 fbdc 	bl	83534 <__malloc_lock>
   82d7c:	68ab      	ldr	r3, [r5, #8]
   82d7e:	685e      	ldr	r6, [r3, #4]
   82d80:	f026 0603 	bic.w	r6, r6, #3
   82d84:	1bf1      	subs	r1, r6, r7
   82d86:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   82d8a:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   82d8e:	f021 010f 	bic.w	r1, r1, #15
   82d92:	f5a1 5780 	sub.w	r7, r1, #4096	; 0x1000
   82d96:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
   82d9a:	db07      	blt.n	82dac <_malloc_trim_r+0x3c>
   82d9c:	4620      	mov	r0, r4
   82d9e:	2100      	movs	r1, #0
   82da0:	f000 fbcc 	bl	8353c <_sbrk_r>
   82da4:	68ab      	ldr	r3, [r5, #8]
   82da6:	4433      	add	r3, r6
   82da8:	4298      	cmp	r0, r3
   82daa:	d004      	beq.n	82db6 <_malloc_trim_r+0x46>
   82dac:	4620      	mov	r0, r4
   82dae:	f000 fbc3 	bl	83538 <__malloc_unlock>
   82db2:	2000      	movs	r0, #0
   82db4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82db6:	4620      	mov	r0, r4
   82db8:	4279      	negs	r1, r7
   82dba:	f000 fbbf 	bl	8353c <_sbrk_r>
   82dbe:	3001      	adds	r0, #1
   82dc0:	d00d      	beq.n	82dde <_malloc_trim_r+0x6e>
   82dc2:	4b10      	ldr	r3, [pc, #64]	; (82e04 <_malloc_trim_r+0x94>)
   82dc4:	68aa      	ldr	r2, [r5, #8]
   82dc6:	6819      	ldr	r1, [r3, #0]
   82dc8:	1bf6      	subs	r6, r6, r7
   82dca:	f046 0601 	orr.w	r6, r6, #1
   82dce:	4620      	mov	r0, r4
   82dd0:	1bc9      	subs	r1, r1, r7
   82dd2:	6056      	str	r6, [r2, #4]
   82dd4:	6019      	str	r1, [r3, #0]
   82dd6:	f000 fbaf 	bl	83538 <__malloc_unlock>
   82dda:	2001      	movs	r0, #1
   82ddc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82dde:	4620      	mov	r0, r4
   82de0:	2100      	movs	r1, #0
   82de2:	f000 fbab 	bl	8353c <_sbrk_r>
   82de6:	68ab      	ldr	r3, [r5, #8]
   82de8:	1ac2      	subs	r2, r0, r3
   82dea:	2a0f      	cmp	r2, #15
   82dec:	ddde      	ble.n	82dac <_malloc_trim_r+0x3c>
   82dee:	4d06      	ldr	r5, [pc, #24]	; (82e08 <_malloc_trim_r+0x98>)
   82df0:	4904      	ldr	r1, [pc, #16]	; (82e04 <_malloc_trim_r+0x94>)
   82df2:	682d      	ldr	r5, [r5, #0]
   82df4:	f042 0201 	orr.w	r2, r2, #1
   82df8:	1b40      	subs	r0, r0, r5
   82dfa:	605a      	str	r2, [r3, #4]
   82dfc:	6008      	str	r0, [r1, #0]
   82dfe:	e7d5      	b.n	82dac <_malloc_trim_r+0x3c>
   82e00:	2007060c 	.word	0x2007060c
   82e04:	20070d14 	.word	0x20070d14
   82e08:	20070a18 	.word	0x20070a18

00082e0c <_free_r>:
   82e0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82e10:	460d      	mov	r5, r1
   82e12:	4606      	mov	r6, r0
   82e14:	2900      	cmp	r1, #0
   82e16:	d055      	beq.n	82ec4 <_free_r+0xb8>
   82e18:	f000 fb8c 	bl	83534 <__malloc_lock>
   82e1c:	f855 1c04 	ldr.w	r1, [r5, #-4]
   82e20:	f8df c170 	ldr.w	ip, [pc, #368]	; 82f94 <_free_r+0x188>
   82e24:	f1a5 0408 	sub.w	r4, r5, #8
   82e28:	f021 0301 	bic.w	r3, r1, #1
   82e2c:	18e2      	adds	r2, r4, r3
   82e2e:	f8dc 0008 	ldr.w	r0, [ip, #8]
   82e32:	6857      	ldr	r7, [r2, #4]
   82e34:	4290      	cmp	r0, r2
   82e36:	f027 0703 	bic.w	r7, r7, #3
   82e3a:	d068      	beq.n	82f0e <_free_r+0x102>
   82e3c:	f011 0101 	ands.w	r1, r1, #1
   82e40:	6057      	str	r7, [r2, #4]
   82e42:	d032      	beq.n	82eaa <_free_r+0x9e>
   82e44:	2100      	movs	r1, #0
   82e46:	19d0      	adds	r0, r2, r7
   82e48:	6840      	ldr	r0, [r0, #4]
   82e4a:	07c0      	lsls	r0, r0, #31
   82e4c:	d406      	bmi.n	82e5c <_free_r+0x50>
   82e4e:	443b      	add	r3, r7
   82e50:	6890      	ldr	r0, [r2, #8]
   82e52:	2900      	cmp	r1, #0
   82e54:	d04d      	beq.n	82ef2 <_free_r+0xe6>
   82e56:	68d2      	ldr	r2, [r2, #12]
   82e58:	60c2      	str	r2, [r0, #12]
   82e5a:	6090      	str	r0, [r2, #8]
   82e5c:	f043 0201 	orr.w	r2, r3, #1
   82e60:	6062      	str	r2, [r4, #4]
   82e62:	50e3      	str	r3, [r4, r3]
   82e64:	b9e1      	cbnz	r1, 82ea0 <_free_r+0x94>
   82e66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   82e6a:	d32d      	bcc.n	82ec8 <_free_r+0xbc>
   82e6c:	0a5a      	lsrs	r2, r3, #9
   82e6e:	2a04      	cmp	r2, #4
   82e70:	d869      	bhi.n	82f46 <_free_r+0x13a>
   82e72:	0998      	lsrs	r0, r3, #6
   82e74:	3038      	adds	r0, #56	; 0x38
   82e76:	0041      	lsls	r1, r0, #1
   82e78:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
   82e7c:	f8dc 2008 	ldr.w	r2, [ip, #8]
   82e80:	4944      	ldr	r1, [pc, #272]	; (82f94 <_free_r+0x188>)
   82e82:	4562      	cmp	r2, ip
   82e84:	d065      	beq.n	82f52 <_free_r+0x146>
   82e86:	6851      	ldr	r1, [r2, #4]
   82e88:	f021 0103 	bic.w	r1, r1, #3
   82e8c:	428b      	cmp	r3, r1
   82e8e:	d202      	bcs.n	82e96 <_free_r+0x8a>
   82e90:	6892      	ldr	r2, [r2, #8]
   82e92:	4594      	cmp	ip, r2
   82e94:	d1f7      	bne.n	82e86 <_free_r+0x7a>
   82e96:	68d3      	ldr	r3, [r2, #12]
   82e98:	60e3      	str	r3, [r4, #12]
   82e9a:	60a2      	str	r2, [r4, #8]
   82e9c:	609c      	str	r4, [r3, #8]
   82e9e:	60d4      	str	r4, [r2, #12]
   82ea0:	4630      	mov	r0, r6
   82ea2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   82ea6:	f000 bb47 	b.w	83538 <__malloc_unlock>
   82eaa:	f855 5c08 	ldr.w	r5, [r5, #-8]
   82eae:	f10c 0808 	add.w	r8, ip, #8
   82eb2:	1b64      	subs	r4, r4, r5
   82eb4:	68a0      	ldr	r0, [r4, #8]
   82eb6:	442b      	add	r3, r5
   82eb8:	4540      	cmp	r0, r8
   82eba:	d042      	beq.n	82f42 <_free_r+0x136>
   82ebc:	68e5      	ldr	r5, [r4, #12]
   82ebe:	60c5      	str	r5, [r0, #12]
   82ec0:	60a8      	str	r0, [r5, #8]
   82ec2:	e7c0      	b.n	82e46 <_free_r+0x3a>
   82ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82ec8:	08db      	lsrs	r3, r3, #3
   82eca:	109a      	asrs	r2, r3, #2
   82ecc:	2001      	movs	r0, #1
   82ece:	4090      	lsls	r0, r2
   82ed0:	f8dc 1004 	ldr.w	r1, [ip, #4]
   82ed4:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
   82ed8:	689a      	ldr	r2, [r3, #8]
   82eda:	4301      	orrs	r1, r0
   82edc:	60a2      	str	r2, [r4, #8]
   82ede:	60e3      	str	r3, [r4, #12]
   82ee0:	f8cc 1004 	str.w	r1, [ip, #4]
   82ee4:	4630      	mov	r0, r6
   82ee6:	609c      	str	r4, [r3, #8]
   82ee8:	60d4      	str	r4, [r2, #12]
   82eea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   82eee:	f000 bb23 	b.w	83538 <__malloc_unlock>
   82ef2:	4d29      	ldr	r5, [pc, #164]	; (82f98 <_free_r+0x18c>)
   82ef4:	42a8      	cmp	r0, r5
   82ef6:	d1ae      	bne.n	82e56 <_free_r+0x4a>
   82ef8:	f043 0201 	orr.w	r2, r3, #1
   82efc:	f8cc 4014 	str.w	r4, [ip, #20]
   82f00:	f8cc 4010 	str.w	r4, [ip, #16]
   82f04:	60e0      	str	r0, [r4, #12]
   82f06:	60a0      	str	r0, [r4, #8]
   82f08:	6062      	str	r2, [r4, #4]
   82f0a:	50e3      	str	r3, [r4, r3]
   82f0c:	e7c8      	b.n	82ea0 <_free_r+0x94>
   82f0e:	441f      	add	r7, r3
   82f10:	07cb      	lsls	r3, r1, #31
   82f12:	d407      	bmi.n	82f24 <_free_r+0x118>
   82f14:	f855 1c08 	ldr.w	r1, [r5, #-8]
   82f18:	1a64      	subs	r4, r4, r1
   82f1a:	68e3      	ldr	r3, [r4, #12]
   82f1c:	68a2      	ldr	r2, [r4, #8]
   82f1e:	440f      	add	r7, r1
   82f20:	60d3      	str	r3, [r2, #12]
   82f22:	609a      	str	r2, [r3, #8]
   82f24:	4b1d      	ldr	r3, [pc, #116]	; (82f9c <_free_r+0x190>)
   82f26:	f047 0201 	orr.w	r2, r7, #1
   82f2a:	681b      	ldr	r3, [r3, #0]
   82f2c:	6062      	str	r2, [r4, #4]
   82f2e:	429f      	cmp	r7, r3
   82f30:	f8cc 4008 	str.w	r4, [ip, #8]
   82f34:	d3b4      	bcc.n	82ea0 <_free_r+0x94>
   82f36:	4b1a      	ldr	r3, [pc, #104]	; (82fa0 <_free_r+0x194>)
   82f38:	4630      	mov	r0, r6
   82f3a:	6819      	ldr	r1, [r3, #0]
   82f3c:	f7ff ff18 	bl	82d70 <_malloc_trim_r>
   82f40:	e7ae      	b.n	82ea0 <_free_r+0x94>
   82f42:	2101      	movs	r1, #1
   82f44:	e77f      	b.n	82e46 <_free_r+0x3a>
   82f46:	2a14      	cmp	r2, #20
   82f48:	d80b      	bhi.n	82f62 <_free_r+0x156>
   82f4a:	f102 005b 	add.w	r0, r2, #91	; 0x5b
   82f4e:	0041      	lsls	r1, r0, #1
   82f50:	e792      	b.n	82e78 <_free_r+0x6c>
   82f52:	1080      	asrs	r0, r0, #2
   82f54:	2501      	movs	r5, #1
   82f56:	4085      	lsls	r5, r0
   82f58:	6848      	ldr	r0, [r1, #4]
   82f5a:	4613      	mov	r3, r2
   82f5c:	4328      	orrs	r0, r5
   82f5e:	6048      	str	r0, [r1, #4]
   82f60:	e79a      	b.n	82e98 <_free_r+0x8c>
   82f62:	2a54      	cmp	r2, #84	; 0x54
   82f64:	d803      	bhi.n	82f6e <_free_r+0x162>
   82f66:	0b18      	lsrs	r0, r3, #12
   82f68:	306e      	adds	r0, #110	; 0x6e
   82f6a:	0041      	lsls	r1, r0, #1
   82f6c:	e784      	b.n	82e78 <_free_r+0x6c>
   82f6e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   82f72:	d803      	bhi.n	82f7c <_free_r+0x170>
   82f74:	0bd8      	lsrs	r0, r3, #15
   82f76:	3077      	adds	r0, #119	; 0x77
   82f78:	0041      	lsls	r1, r0, #1
   82f7a:	e77d      	b.n	82e78 <_free_r+0x6c>
   82f7c:	f240 5154 	movw	r1, #1364	; 0x554
   82f80:	428a      	cmp	r2, r1
   82f82:	d803      	bhi.n	82f8c <_free_r+0x180>
   82f84:	0c98      	lsrs	r0, r3, #18
   82f86:	307c      	adds	r0, #124	; 0x7c
   82f88:	0041      	lsls	r1, r0, #1
   82f8a:	e775      	b.n	82e78 <_free_r+0x6c>
   82f8c:	21fc      	movs	r1, #252	; 0xfc
   82f8e:	207e      	movs	r0, #126	; 0x7e
   82f90:	e772      	b.n	82e78 <_free_r+0x6c>
   82f92:	bf00      	nop
   82f94:	2007060c 	.word	0x2007060c
   82f98:	20070614 	.word	0x20070614
   82f9c:	20070a14 	.word	0x20070a14
   82fa0:	20070d10 	.word	0x20070d10

00082fa4 <_fwalk>:
   82fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82fa8:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
   82fac:	4688      	mov	r8, r1
   82fae:	d019      	beq.n	82fe4 <_fwalk+0x40>
   82fb0:	2600      	movs	r6, #0
   82fb2:	687d      	ldr	r5, [r7, #4]
   82fb4:	68bc      	ldr	r4, [r7, #8]
   82fb6:	3d01      	subs	r5, #1
   82fb8:	d40e      	bmi.n	82fd8 <_fwalk+0x34>
   82fba:	89a3      	ldrh	r3, [r4, #12]
   82fbc:	3d01      	subs	r5, #1
   82fbe:	2b01      	cmp	r3, #1
   82fc0:	d906      	bls.n	82fd0 <_fwalk+0x2c>
   82fc2:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   82fc6:	4620      	mov	r0, r4
   82fc8:	3301      	adds	r3, #1
   82fca:	d001      	beq.n	82fd0 <_fwalk+0x2c>
   82fcc:	47c0      	blx	r8
   82fce:	4306      	orrs	r6, r0
   82fd0:	1c6b      	adds	r3, r5, #1
   82fd2:	f104 0468 	add.w	r4, r4, #104	; 0x68
   82fd6:	d1f0      	bne.n	82fba <_fwalk+0x16>
   82fd8:	683f      	ldr	r7, [r7, #0]
   82fda:	2f00      	cmp	r7, #0
   82fdc:	d1e9      	bne.n	82fb2 <_fwalk+0xe>
   82fde:	4630      	mov	r0, r6
   82fe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82fe4:	463e      	mov	r6, r7
   82fe6:	4630      	mov	r0, r6
   82fe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00082fec <malloc>:
   82fec:	4b02      	ldr	r3, [pc, #8]	; (82ff8 <malloc+0xc>)
   82fee:	4601      	mov	r1, r0
   82ff0:	6818      	ldr	r0, [r3, #0]
   82ff2:	f000 b803 	b.w	82ffc <_malloc_r>
   82ff6:	bf00      	nop
   82ff8:	20070608 	.word	0x20070608

00082ffc <_malloc_r>:
   82ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83000:	f101 050b 	add.w	r5, r1, #11
   83004:	2d16      	cmp	r5, #22
   83006:	b083      	sub	sp, #12
   83008:	4606      	mov	r6, r0
   8300a:	d927      	bls.n	8305c <_malloc_r+0x60>
   8300c:	f035 0507 	bics.w	r5, r5, #7
   83010:	d427      	bmi.n	83062 <_malloc_r+0x66>
   83012:	42a9      	cmp	r1, r5
   83014:	d825      	bhi.n	83062 <_malloc_r+0x66>
   83016:	4630      	mov	r0, r6
   83018:	f000 fa8c 	bl	83534 <__malloc_lock>
   8301c:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   83020:	d226      	bcs.n	83070 <_malloc_r+0x74>
   83022:	4fc1      	ldr	r7, [pc, #772]	; (83328 <_malloc_r+0x32c>)
   83024:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
   83028:	eb07 03cc 	add.w	r3, r7, ip, lsl #3
   8302c:	68dc      	ldr	r4, [r3, #12]
   8302e:	429c      	cmp	r4, r3
   83030:	f000 81d2 	beq.w	833d8 <_malloc_r+0x3dc>
   83034:	6863      	ldr	r3, [r4, #4]
   83036:	68e2      	ldr	r2, [r4, #12]
   83038:	f023 0303 	bic.w	r3, r3, #3
   8303c:	4423      	add	r3, r4
   8303e:	6858      	ldr	r0, [r3, #4]
   83040:	68a1      	ldr	r1, [r4, #8]
   83042:	f040 0501 	orr.w	r5, r0, #1
   83046:	60ca      	str	r2, [r1, #12]
   83048:	4630      	mov	r0, r6
   8304a:	6091      	str	r1, [r2, #8]
   8304c:	605d      	str	r5, [r3, #4]
   8304e:	f000 fa73 	bl	83538 <__malloc_unlock>
   83052:	3408      	adds	r4, #8
   83054:	4620      	mov	r0, r4
   83056:	b003      	add	sp, #12
   83058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8305c:	2510      	movs	r5, #16
   8305e:	42a9      	cmp	r1, r5
   83060:	d9d9      	bls.n	83016 <_malloc_r+0x1a>
   83062:	2400      	movs	r4, #0
   83064:	230c      	movs	r3, #12
   83066:	4620      	mov	r0, r4
   83068:	6033      	str	r3, [r6, #0]
   8306a:	b003      	add	sp, #12
   8306c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83070:	ea5f 2c55 	movs.w	ip, r5, lsr #9
   83074:	f000 8089 	beq.w	8318a <_malloc_r+0x18e>
   83078:	f1bc 0f04 	cmp.w	ip, #4
   8307c:	f200 8160 	bhi.w	83340 <_malloc_r+0x344>
   83080:	ea4f 1c95 	mov.w	ip, r5, lsr #6
   83084:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
   83088:	ea4f 014c 	mov.w	r1, ip, lsl #1
   8308c:	4fa6      	ldr	r7, [pc, #664]	; (83328 <_malloc_r+0x32c>)
   8308e:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   83092:	68cc      	ldr	r4, [r1, #12]
   83094:	42a1      	cmp	r1, r4
   83096:	d105      	bne.n	830a4 <_malloc_r+0xa8>
   83098:	e00c      	b.n	830b4 <_malloc_r+0xb8>
   8309a:	2b00      	cmp	r3, #0
   8309c:	da79      	bge.n	83192 <_malloc_r+0x196>
   8309e:	68e4      	ldr	r4, [r4, #12]
   830a0:	42a1      	cmp	r1, r4
   830a2:	d007      	beq.n	830b4 <_malloc_r+0xb8>
   830a4:	6862      	ldr	r2, [r4, #4]
   830a6:	f022 0203 	bic.w	r2, r2, #3
   830aa:	1b53      	subs	r3, r2, r5
   830ac:	2b0f      	cmp	r3, #15
   830ae:	ddf4      	ble.n	8309a <_malloc_r+0x9e>
   830b0:	f10c 3cff 	add.w	ip, ip, #4294967295
   830b4:	f10c 0c01 	add.w	ip, ip, #1
   830b8:	4b9b      	ldr	r3, [pc, #620]	; (83328 <_malloc_r+0x32c>)
   830ba:	693c      	ldr	r4, [r7, #16]
   830bc:	f103 0e08 	add.w	lr, r3, #8
   830c0:	4574      	cmp	r4, lr
   830c2:	f000 817e 	beq.w	833c2 <_malloc_r+0x3c6>
   830c6:	6861      	ldr	r1, [r4, #4]
   830c8:	f021 0103 	bic.w	r1, r1, #3
   830cc:	1b4a      	subs	r2, r1, r5
   830ce:	2a0f      	cmp	r2, #15
   830d0:	f300 8164 	bgt.w	8339c <_malloc_r+0x3a0>
   830d4:	2a00      	cmp	r2, #0
   830d6:	f8c3 e014 	str.w	lr, [r3, #20]
   830da:	f8c3 e010 	str.w	lr, [r3, #16]
   830de:	da69      	bge.n	831b4 <_malloc_r+0x1b8>
   830e0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   830e4:	f080 813a 	bcs.w	8335c <_malloc_r+0x360>
   830e8:	08c9      	lsrs	r1, r1, #3
   830ea:	108a      	asrs	r2, r1, #2
   830ec:	f04f 0801 	mov.w	r8, #1
   830f0:	fa08 f802 	lsl.w	r8, r8, r2
   830f4:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   830f8:	685a      	ldr	r2, [r3, #4]
   830fa:	6888      	ldr	r0, [r1, #8]
   830fc:	ea48 0202 	orr.w	r2, r8, r2
   83100:	60a0      	str	r0, [r4, #8]
   83102:	60e1      	str	r1, [r4, #12]
   83104:	605a      	str	r2, [r3, #4]
   83106:	608c      	str	r4, [r1, #8]
   83108:	60c4      	str	r4, [r0, #12]
   8310a:	ea4f 03ac 	mov.w	r3, ip, asr #2
   8310e:	2001      	movs	r0, #1
   83110:	4098      	lsls	r0, r3
   83112:	4290      	cmp	r0, r2
   83114:	d85b      	bhi.n	831ce <_malloc_r+0x1d2>
   83116:	4202      	tst	r2, r0
   83118:	d106      	bne.n	83128 <_malloc_r+0x12c>
   8311a:	f02c 0c03 	bic.w	ip, ip, #3
   8311e:	0040      	lsls	r0, r0, #1
   83120:	4202      	tst	r2, r0
   83122:	f10c 0c04 	add.w	ip, ip, #4
   83126:	d0fa      	beq.n	8311e <_malloc_r+0x122>
   83128:	eb07 08cc 	add.w	r8, r7, ip, lsl #3
   8312c:	4644      	mov	r4, r8
   8312e:	46e1      	mov	r9, ip
   83130:	68e3      	ldr	r3, [r4, #12]
   83132:	429c      	cmp	r4, r3
   83134:	d107      	bne.n	83146 <_malloc_r+0x14a>
   83136:	e146      	b.n	833c6 <_malloc_r+0x3ca>
   83138:	2a00      	cmp	r2, #0
   8313a:	f280 8157 	bge.w	833ec <_malloc_r+0x3f0>
   8313e:	68db      	ldr	r3, [r3, #12]
   83140:	429c      	cmp	r4, r3
   83142:	f000 8140 	beq.w	833c6 <_malloc_r+0x3ca>
   83146:	6859      	ldr	r1, [r3, #4]
   83148:	f021 0103 	bic.w	r1, r1, #3
   8314c:	1b4a      	subs	r2, r1, r5
   8314e:	2a0f      	cmp	r2, #15
   83150:	ddf2      	ble.n	83138 <_malloc_r+0x13c>
   83152:	461c      	mov	r4, r3
   83154:	f854 cf08 	ldr.w	ip, [r4, #8]!
   83158:	68d9      	ldr	r1, [r3, #12]
   8315a:	f045 0901 	orr.w	r9, r5, #1
   8315e:	f042 0801 	orr.w	r8, r2, #1
   83162:	441d      	add	r5, r3
   83164:	f8c3 9004 	str.w	r9, [r3, #4]
   83168:	4630      	mov	r0, r6
   8316a:	f8cc 100c 	str.w	r1, [ip, #12]
   8316e:	f8c1 c008 	str.w	ip, [r1, #8]
   83172:	617d      	str	r5, [r7, #20]
   83174:	613d      	str	r5, [r7, #16]
   83176:	f8c5 e00c 	str.w	lr, [r5, #12]
   8317a:	f8c5 e008 	str.w	lr, [r5, #8]
   8317e:	f8c5 8004 	str.w	r8, [r5, #4]
   83182:	50aa      	str	r2, [r5, r2]
   83184:	f000 f9d8 	bl	83538 <__malloc_unlock>
   83188:	e764      	b.n	83054 <_malloc_r+0x58>
   8318a:	217e      	movs	r1, #126	; 0x7e
   8318c:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
   83190:	e77c      	b.n	8308c <_malloc_r+0x90>
   83192:	4422      	add	r2, r4
   83194:	6850      	ldr	r0, [r2, #4]
   83196:	68e3      	ldr	r3, [r4, #12]
   83198:	68a1      	ldr	r1, [r4, #8]
   8319a:	f040 0501 	orr.w	r5, r0, #1
   8319e:	60cb      	str	r3, [r1, #12]
   831a0:	4630      	mov	r0, r6
   831a2:	6099      	str	r1, [r3, #8]
   831a4:	6055      	str	r5, [r2, #4]
   831a6:	f000 f9c7 	bl	83538 <__malloc_unlock>
   831aa:	3408      	adds	r4, #8
   831ac:	4620      	mov	r0, r4
   831ae:	b003      	add	sp, #12
   831b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   831b4:	4421      	add	r1, r4
   831b6:	684b      	ldr	r3, [r1, #4]
   831b8:	4630      	mov	r0, r6
   831ba:	f043 0301 	orr.w	r3, r3, #1
   831be:	604b      	str	r3, [r1, #4]
   831c0:	f000 f9ba 	bl	83538 <__malloc_unlock>
   831c4:	3408      	adds	r4, #8
   831c6:	4620      	mov	r0, r4
   831c8:	b003      	add	sp, #12
   831ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   831ce:	68bc      	ldr	r4, [r7, #8]
   831d0:	6863      	ldr	r3, [r4, #4]
   831d2:	f023 0903 	bic.w	r9, r3, #3
   831d6:	45a9      	cmp	r9, r5
   831d8:	d304      	bcc.n	831e4 <_malloc_r+0x1e8>
   831da:	ebc5 0309 	rsb	r3, r5, r9
   831de:	2b0f      	cmp	r3, #15
   831e0:	f300 8091 	bgt.w	83306 <_malloc_r+0x30a>
   831e4:	4b51      	ldr	r3, [pc, #324]	; (8332c <_malloc_r+0x330>)
   831e6:	4a52      	ldr	r2, [pc, #328]	; (83330 <_malloc_r+0x334>)
   831e8:	6819      	ldr	r1, [r3, #0]
   831ea:	6813      	ldr	r3, [r2, #0]
   831ec:	eb05 0a01 	add.w	sl, r5, r1
   831f0:	3301      	adds	r3, #1
   831f2:	eb04 0b09 	add.w	fp, r4, r9
   831f6:	f000 8161 	beq.w	834bc <_malloc_r+0x4c0>
   831fa:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
   831fe:	f10a 0a0f 	add.w	sl, sl, #15
   83202:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
   83206:	f02a 0a0f 	bic.w	sl, sl, #15
   8320a:	4630      	mov	r0, r6
   8320c:	4651      	mov	r1, sl
   8320e:	9201      	str	r2, [sp, #4]
   83210:	f000 f994 	bl	8353c <_sbrk_r>
   83214:	f1b0 3fff 	cmp.w	r0, #4294967295
   83218:	4680      	mov	r8, r0
   8321a:	9a01      	ldr	r2, [sp, #4]
   8321c:	f000 8101 	beq.w	83422 <_malloc_r+0x426>
   83220:	4583      	cmp	fp, r0
   83222:	f200 80fb 	bhi.w	8341c <_malloc_r+0x420>
   83226:	f8df c114 	ldr.w	ip, [pc, #276]	; 8333c <_malloc_r+0x340>
   8322a:	45c3      	cmp	fp, r8
   8322c:	f8dc 3000 	ldr.w	r3, [ip]
   83230:	4453      	add	r3, sl
   83232:	f8cc 3000 	str.w	r3, [ip]
   83236:	f000 814a 	beq.w	834ce <_malloc_r+0x4d2>
   8323a:	6812      	ldr	r2, [r2, #0]
   8323c:	493c      	ldr	r1, [pc, #240]	; (83330 <_malloc_r+0x334>)
   8323e:	3201      	adds	r2, #1
   83240:	bf1b      	ittet	ne
   83242:	ebcb 0b08 	rsbne	fp, fp, r8
   83246:	445b      	addne	r3, fp
   83248:	f8c1 8000 	streq.w	r8, [r1]
   8324c:	f8cc 3000 	strne.w	r3, [ip]
   83250:	f018 0307 	ands.w	r3, r8, #7
   83254:	f000 8114 	beq.w	83480 <_malloc_r+0x484>
   83258:	f1c3 0208 	rsb	r2, r3, #8
   8325c:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
   83260:	4490      	add	r8, r2
   83262:	3308      	adds	r3, #8
   83264:	44c2      	add	sl, r8
   83266:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
   8326a:	ebca 0a03 	rsb	sl, sl, r3
   8326e:	4651      	mov	r1, sl
   83270:	4630      	mov	r0, r6
   83272:	f8cd c004 	str.w	ip, [sp, #4]
   83276:	f000 f961 	bl	8353c <_sbrk_r>
   8327a:	1c43      	adds	r3, r0, #1
   8327c:	f8dd c004 	ldr.w	ip, [sp, #4]
   83280:	f000 8135 	beq.w	834ee <_malloc_r+0x4f2>
   83284:	ebc8 0200 	rsb	r2, r8, r0
   83288:	4452      	add	r2, sl
   8328a:	f042 0201 	orr.w	r2, r2, #1
   8328e:	f8dc 3000 	ldr.w	r3, [ip]
   83292:	42bc      	cmp	r4, r7
   83294:	4453      	add	r3, sl
   83296:	f8c7 8008 	str.w	r8, [r7, #8]
   8329a:	f8cc 3000 	str.w	r3, [ip]
   8329e:	f8c8 2004 	str.w	r2, [r8, #4]
   832a2:	f8df a098 	ldr.w	sl, [pc, #152]	; 8333c <_malloc_r+0x340>
   832a6:	d015      	beq.n	832d4 <_malloc_r+0x2d8>
   832a8:	f1b9 0f0f 	cmp.w	r9, #15
   832ac:	f240 80eb 	bls.w	83486 <_malloc_r+0x48a>
   832b0:	6861      	ldr	r1, [r4, #4]
   832b2:	f1a9 020c 	sub.w	r2, r9, #12
   832b6:	f022 0207 	bic.w	r2, r2, #7
   832ba:	f001 0101 	and.w	r1, r1, #1
   832be:	ea42 0e01 	orr.w	lr, r2, r1
   832c2:	2005      	movs	r0, #5
   832c4:	18a1      	adds	r1, r4, r2
   832c6:	2a0f      	cmp	r2, #15
   832c8:	f8c4 e004 	str.w	lr, [r4, #4]
   832cc:	6048      	str	r0, [r1, #4]
   832ce:	6088      	str	r0, [r1, #8]
   832d0:	f200 8111 	bhi.w	834f6 <_malloc_r+0x4fa>
   832d4:	4a17      	ldr	r2, [pc, #92]	; (83334 <_malloc_r+0x338>)
   832d6:	68bc      	ldr	r4, [r7, #8]
   832d8:	6811      	ldr	r1, [r2, #0]
   832da:	428b      	cmp	r3, r1
   832dc:	bf88      	it	hi
   832de:	6013      	strhi	r3, [r2, #0]
   832e0:	4a15      	ldr	r2, [pc, #84]	; (83338 <_malloc_r+0x33c>)
   832e2:	6811      	ldr	r1, [r2, #0]
   832e4:	428b      	cmp	r3, r1
   832e6:	bf88      	it	hi
   832e8:	6013      	strhi	r3, [r2, #0]
   832ea:	6862      	ldr	r2, [r4, #4]
   832ec:	f022 0203 	bic.w	r2, r2, #3
   832f0:	4295      	cmp	r5, r2
   832f2:	ebc5 0302 	rsb	r3, r5, r2
   832f6:	d801      	bhi.n	832fc <_malloc_r+0x300>
   832f8:	2b0f      	cmp	r3, #15
   832fa:	dc04      	bgt.n	83306 <_malloc_r+0x30a>
   832fc:	4630      	mov	r0, r6
   832fe:	f000 f91b 	bl	83538 <__malloc_unlock>
   83302:	2400      	movs	r4, #0
   83304:	e6a6      	b.n	83054 <_malloc_r+0x58>
   83306:	f045 0201 	orr.w	r2, r5, #1
   8330a:	f043 0301 	orr.w	r3, r3, #1
   8330e:	4425      	add	r5, r4
   83310:	6062      	str	r2, [r4, #4]
   83312:	4630      	mov	r0, r6
   83314:	60bd      	str	r5, [r7, #8]
   83316:	606b      	str	r3, [r5, #4]
   83318:	f000 f90e 	bl	83538 <__malloc_unlock>
   8331c:	3408      	adds	r4, #8
   8331e:	4620      	mov	r0, r4
   83320:	b003      	add	sp, #12
   83322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83326:	bf00      	nop
   83328:	2007060c 	.word	0x2007060c
   8332c:	20070d10 	.word	0x20070d10
   83330:	20070a18 	.word	0x20070a18
   83334:	20070d0c 	.word	0x20070d0c
   83338:	20070d08 	.word	0x20070d08
   8333c:	20070d14 	.word	0x20070d14
   83340:	f1bc 0f14 	cmp.w	ip, #20
   83344:	d961      	bls.n	8340a <_malloc_r+0x40e>
   83346:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
   8334a:	f200 808f 	bhi.w	8346c <_malloc_r+0x470>
   8334e:	ea4f 3c15 	mov.w	ip, r5, lsr #12
   83352:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
   83356:	ea4f 014c 	mov.w	r1, ip, lsl #1
   8335a:	e697      	b.n	8308c <_malloc_r+0x90>
   8335c:	0a4b      	lsrs	r3, r1, #9
   8335e:	2b04      	cmp	r3, #4
   83360:	d958      	bls.n	83414 <_malloc_r+0x418>
   83362:	2b14      	cmp	r3, #20
   83364:	f200 80ad 	bhi.w	834c2 <_malloc_r+0x4c6>
   83368:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   8336c:	0050      	lsls	r0, r2, #1
   8336e:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   83372:	6883      	ldr	r3, [r0, #8]
   83374:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 83530 <_malloc_r+0x534>
   83378:	4283      	cmp	r3, r0
   8337a:	f000 808a 	beq.w	83492 <_malloc_r+0x496>
   8337e:	685a      	ldr	r2, [r3, #4]
   83380:	f022 0203 	bic.w	r2, r2, #3
   83384:	4291      	cmp	r1, r2
   83386:	d202      	bcs.n	8338e <_malloc_r+0x392>
   83388:	689b      	ldr	r3, [r3, #8]
   8338a:	4298      	cmp	r0, r3
   8338c:	d1f7      	bne.n	8337e <_malloc_r+0x382>
   8338e:	68d9      	ldr	r1, [r3, #12]
   83390:	687a      	ldr	r2, [r7, #4]
   83392:	60e1      	str	r1, [r4, #12]
   83394:	60a3      	str	r3, [r4, #8]
   83396:	608c      	str	r4, [r1, #8]
   83398:	60dc      	str	r4, [r3, #12]
   8339a:	e6b6      	b.n	8310a <_malloc_r+0x10e>
   8339c:	f045 0701 	orr.w	r7, r5, #1
   833a0:	f042 0101 	orr.w	r1, r2, #1
   833a4:	4425      	add	r5, r4
   833a6:	6067      	str	r7, [r4, #4]
   833a8:	4630      	mov	r0, r6
   833aa:	615d      	str	r5, [r3, #20]
   833ac:	611d      	str	r5, [r3, #16]
   833ae:	f8c5 e00c 	str.w	lr, [r5, #12]
   833b2:	f8c5 e008 	str.w	lr, [r5, #8]
   833b6:	6069      	str	r1, [r5, #4]
   833b8:	50aa      	str	r2, [r5, r2]
   833ba:	3408      	adds	r4, #8
   833bc:	f000 f8bc 	bl	83538 <__malloc_unlock>
   833c0:	e648      	b.n	83054 <_malloc_r+0x58>
   833c2:	685a      	ldr	r2, [r3, #4]
   833c4:	e6a1      	b.n	8310a <_malloc_r+0x10e>
   833c6:	f109 0901 	add.w	r9, r9, #1
   833ca:	f019 0f03 	tst.w	r9, #3
   833ce:	f104 0408 	add.w	r4, r4, #8
   833d2:	f47f aead 	bne.w	83130 <_malloc_r+0x134>
   833d6:	e02d      	b.n	83434 <_malloc_r+0x438>
   833d8:	f104 0308 	add.w	r3, r4, #8
   833dc:	6964      	ldr	r4, [r4, #20]
   833de:	42a3      	cmp	r3, r4
   833e0:	bf08      	it	eq
   833e2:	f10c 0c02 	addeq.w	ip, ip, #2
   833e6:	f43f ae67 	beq.w	830b8 <_malloc_r+0xbc>
   833ea:	e623      	b.n	83034 <_malloc_r+0x38>
   833ec:	4419      	add	r1, r3
   833ee:	6848      	ldr	r0, [r1, #4]
   833f0:	461c      	mov	r4, r3
   833f2:	f854 2f08 	ldr.w	r2, [r4, #8]!
   833f6:	68db      	ldr	r3, [r3, #12]
   833f8:	f040 0501 	orr.w	r5, r0, #1
   833fc:	604d      	str	r5, [r1, #4]
   833fe:	4630      	mov	r0, r6
   83400:	60d3      	str	r3, [r2, #12]
   83402:	609a      	str	r2, [r3, #8]
   83404:	f000 f898 	bl	83538 <__malloc_unlock>
   83408:	e624      	b.n	83054 <_malloc_r+0x58>
   8340a:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
   8340e:	ea4f 014c 	mov.w	r1, ip, lsl #1
   83412:	e63b      	b.n	8308c <_malloc_r+0x90>
   83414:	098a      	lsrs	r2, r1, #6
   83416:	3238      	adds	r2, #56	; 0x38
   83418:	0050      	lsls	r0, r2, #1
   8341a:	e7a8      	b.n	8336e <_malloc_r+0x372>
   8341c:	42bc      	cmp	r4, r7
   8341e:	f43f af02 	beq.w	83226 <_malloc_r+0x22a>
   83422:	68bc      	ldr	r4, [r7, #8]
   83424:	6862      	ldr	r2, [r4, #4]
   83426:	f022 0203 	bic.w	r2, r2, #3
   8342a:	e761      	b.n	832f0 <_malloc_r+0x2f4>
   8342c:	f8d8 8000 	ldr.w	r8, [r8]
   83430:	4598      	cmp	r8, r3
   83432:	d17a      	bne.n	8352a <_malloc_r+0x52e>
   83434:	f01c 0f03 	tst.w	ip, #3
   83438:	f1a8 0308 	sub.w	r3, r8, #8
   8343c:	f10c 3cff 	add.w	ip, ip, #4294967295
   83440:	d1f4      	bne.n	8342c <_malloc_r+0x430>
   83442:	687b      	ldr	r3, [r7, #4]
   83444:	ea23 0300 	bic.w	r3, r3, r0
   83448:	607b      	str	r3, [r7, #4]
   8344a:	0040      	lsls	r0, r0, #1
   8344c:	4298      	cmp	r0, r3
   8344e:	f63f aebe 	bhi.w	831ce <_malloc_r+0x1d2>
   83452:	2800      	cmp	r0, #0
   83454:	f43f aebb 	beq.w	831ce <_malloc_r+0x1d2>
   83458:	4203      	tst	r3, r0
   8345a:	46cc      	mov	ip, r9
   8345c:	f47f ae64 	bne.w	83128 <_malloc_r+0x12c>
   83460:	0040      	lsls	r0, r0, #1
   83462:	4203      	tst	r3, r0
   83464:	f10c 0c04 	add.w	ip, ip, #4
   83468:	d0fa      	beq.n	83460 <_malloc_r+0x464>
   8346a:	e65d      	b.n	83128 <_malloc_r+0x12c>
   8346c:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
   83470:	d819      	bhi.n	834a6 <_malloc_r+0x4aa>
   83472:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
   83476:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
   8347a:	ea4f 014c 	mov.w	r1, ip, lsl #1
   8347e:	e605      	b.n	8308c <_malloc_r+0x90>
   83480:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   83484:	e6ee      	b.n	83264 <_malloc_r+0x268>
   83486:	2301      	movs	r3, #1
   83488:	f8c8 3004 	str.w	r3, [r8, #4]
   8348c:	4644      	mov	r4, r8
   8348e:	2200      	movs	r2, #0
   83490:	e72e      	b.n	832f0 <_malloc_r+0x2f4>
   83492:	1092      	asrs	r2, r2, #2
   83494:	2001      	movs	r0, #1
   83496:	4090      	lsls	r0, r2
   83498:	f8d8 2004 	ldr.w	r2, [r8, #4]
   8349c:	4619      	mov	r1, r3
   8349e:	4302      	orrs	r2, r0
   834a0:	f8c8 2004 	str.w	r2, [r8, #4]
   834a4:	e775      	b.n	83392 <_malloc_r+0x396>
   834a6:	f240 5354 	movw	r3, #1364	; 0x554
   834aa:	459c      	cmp	ip, r3
   834ac:	d81b      	bhi.n	834e6 <_malloc_r+0x4ea>
   834ae:	ea4f 4c95 	mov.w	ip, r5, lsr #18
   834b2:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
   834b6:	ea4f 014c 	mov.w	r1, ip, lsl #1
   834ba:	e5e7      	b.n	8308c <_malloc_r+0x90>
   834bc:	f10a 0a10 	add.w	sl, sl, #16
   834c0:	e6a3      	b.n	8320a <_malloc_r+0x20e>
   834c2:	2b54      	cmp	r3, #84	; 0x54
   834c4:	d81f      	bhi.n	83506 <_malloc_r+0x50a>
   834c6:	0b0a      	lsrs	r2, r1, #12
   834c8:	326e      	adds	r2, #110	; 0x6e
   834ca:	0050      	lsls	r0, r2, #1
   834cc:	e74f      	b.n	8336e <_malloc_r+0x372>
   834ce:	f3cb 010b 	ubfx	r1, fp, #0, #12
   834d2:	2900      	cmp	r1, #0
   834d4:	f47f aeb1 	bne.w	8323a <_malloc_r+0x23e>
   834d8:	eb0a 0109 	add.w	r1, sl, r9
   834dc:	68ba      	ldr	r2, [r7, #8]
   834de:	f041 0101 	orr.w	r1, r1, #1
   834e2:	6051      	str	r1, [r2, #4]
   834e4:	e6f6      	b.n	832d4 <_malloc_r+0x2d8>
   834e6:	21fc      	movs	r1, #252	; 0xfc
   834e8:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
   834ec:	e5ce      	b.n	8308c <_malloc_r+0x90>
   834ee:	2201      	movs	r2, #1
   834f0:	f04f 0a00 	mov.w	sl, #0
   834f4:	e6cb      	b.n	8328e <_malloc_r+0x292>
   834f6:	f104 0108 	add.w	r1, r4, #8
   834fa:	4630      	mov	r0, r6
   834fc:	f7ff fc86 	bl	82e0c <_free_r>
   83500:	f8da 3000 	ldr.w	r3, [sl]
   83504:	e6e6      	b.n	832d4 <_malloc_r+0x2d8>
   83506:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8350a:	d803      	bhi.n	83514 <_malloc_r+0x518>
   8350c:	0bca      	lsrs	r2, r1, #15
   8350e:	3277      	adds	r2, #119	; 0x77
   83510:	0050      	lsls	r0, r2, #1
   83512:	e72c      	b.n	8336e <_malloc_r+0x372>
   83514:	f240 5254 	movw	r2, #1364	; 0x554
   83518:	4293      	cmp	r3, r2
   8351a:	d803      	bhi.n	83524 <_malloc_r+0x528>
   8351c:	0c8a      	lsrs	r2, r1, #18
   8351e:	327c      	adds	r2, #124	; 0x7c
   83520:	0050      	lsls	r0, r2, #1
   83522:	e724      	b.n	8336e <_malloc_r+0x372>
   83524:	20fc      	movs	r0, #252	; 0xfc
   83526:	227e      	movs	r2, #126	; 0x7e
   83528:	e721      	b.n	8336e <_malloc_r+0x372>
   8352a:	687b      	ldr	r3, [r7, #4]
   8352c:	e78d      	b.n	8344a <_malloc_r+0x44e>
   8352e:	bf00      	nop
   83530:	2007060c 	.word	0x2007060c

00083534 <__malloc_lock>:
   83534:	4770      	bx	lr
   83536:	bf00      	nop

00083538 <__malloc_unlock>:
   83538:	4770      	bx	lr
   8353a:	bf00      	nop

0008353c <_sbrk_r>:
   8353c:	b538      	push	{r3, r4, r5, lr}
   8353e:	4c07      	ldr	r4, [pc, #28]	; (8355c <_sbrk_r+0x20>)
   83540:	2300      	movs	r3, #0
   83542:	4605      	mov	r5, r0
   83544:	4608      	mov	r0, r1
   83546:	6023      	str	r3, [r4, #0]
   83548:	f7ff f812 	bl	82570 <_sbrk>
   8354c:	1c43      	adds	r3, r0, #1
   8354e:	d000      	beq.n	83552 <_sbrk_r+0x16>
   83550:	bd38      	pop	{r3, r4, r5, pc}
   83552:	6823      	ldr	r3, [r4, #0]
   83554:	2b00      	cmp	r3, #0
   83556:	d0fb      	beq.n	83550 <_sbrk_r+0x14>
   83558:	602b      	str	r3, [r5, #0]
   8355a:	bd38      	pop	{r3, r4, r5, pc}
   8355c:	20070d68 	.word	0x20070d68

00083560 <__sread>:
   83560:	b510      	push	{r4, lr}
   83562:	460c      	mov	r4, r1
   83564:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83568:	f000 f912 	bl	83790 <_read_r>
   8356c:	2800      	cmp	r0, #0
   8356e:	db03      	blt.n	83578 <__sread+0x18>
   83570:	6d23      	ldr	r3, [r4, #80]	; 0x50
   83572:	4403      	add	r3, r0
   83574:	6523      	str	r3, [r4, #80]	; 0x50
   83576:	bd10      	pop	{r4, pc}
   83578:	89a3      	ldrh	r3, [r4, #12]
   8357a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   8357e:	81a3      	strh	r3, [r4, #12]
   83580:	bd10      	pop	{r4, pc}
   83582:	bf00      	nop

00083584 <__swrite>:
   83584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83588:	460c      	mov	r4, r1
   8358a:	8989      	ldrh	r1, [r1, #12]
   8358c:	461d      	mov	r5, r3
   8358e:	05cb      	lsls	r3, r1, #23
   83590:	4616      	mov	r6, r2
   83592:	4607      	mov	r7, r0
   83594:	d506      	bpl.n	835a4 <__swrite+0x20>
   83596:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8359a:	2200      	movs	r2, #0
   8359c:	2302      	movs	r3, #2
   8359e:	f000 f8e3 	bl	83768 <_lseek_r>
   835a2:	89a1      	ldrh	r1, [r4, #12]
   835a4:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   835a8:	81a1      	strh	r1, [r4, #12]
   835aa:	4638      	mov	r0, r7
   835ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   835b0:	4632      	mov	r2, r6
   835b2:	462b      	mov	r3, r5
   835b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   835b8:	f000 b814 	b.w	835e4 <_write_r>

000835bc <__sseek>:
   835bc:	b510      	push	{r4, lr}
   835be:	460c      	mov	r4, r1
   835c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   835c4:	f000 f8d0 	bl	83768 <_lseek_r>
   835c8:	89a3      	ldrh	r3, [r4, #12]
   835ca:	1c42      	adds	r2, r0, #1
   835cc:	bf0e      	itee	eq
   835ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   835d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   835d6:	6520      	strne	r0, [r4, #80]	; 0x50
   835d8:	81a3      	strh	r3, [r4, #12]
   835da:	bd10      	pop	{r4, pc}

000835dc <__sclose>:
   835dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   835e0:	f000 b868 	b.w	836b4 <_close_r>

000835e4 <_write_r>:
   835e4:	b570      	push	{r4, r5, r6, lr}
   835e6:	4c08      	ldr	r4, [pc, #32]	; (83608 <_write_r+0x24>)
   835e8:	4606      	mov	r6, r0
   835ea:	2500      	movs	r5, #0
   835ec:	4608      	mov	r0, r1
   835ee:	4611      	mov	r1, r2
   835f0:	461a      	mov	r2, r3
   835f2:	6025      	str	r5, [r4, #0]
   835f4:	f7fd fbc8 	bl	80d88 <_write>
   835f8:	1c43      	adds	r3, r0, #1
   835fa:	d000      	beq.n	835fe <_write_r+0x1a>
   835fc:	bd70      	pop	{r4, r5, r6, pc}
   835fe:	6823      	ldr	r3, [r4, #0]
   83600:	2b00      	cmp	r3, #0
   83602:	d0fb      	beq.n	835fc <_write_r+0x18>
   83604:	6033      	str	r3, [r6, #0]
   83606:	bd70      	pop	{r4, r5, r6, pc}
   83608:	20070d68 	.word	0x20070d68

0008360c <__register_exitproc>:
   8360c:	b5f0      	push	{r4, r5, r6, r7, lr}
   8360e:	4c27      	ldr	r4, [pc, #156]	; (836ac <__register_exitproc+0xa0>)
   83610:	b085      	sub	sp, #20
   83612:	6826      	ldr	r6, [r4, #0]
   83614:	4607      	mov	r7, r0
   83616:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   8361a:	2c00      	cmp	r4, #0
   8361c:	d040      	beq.n	836a0 <__register_exitproc+0x94>
   8361e:	6865      	ldr	r5, [r4, #4]
   83620:	2d1f      	cmp	r5, #31
   83622:	dd1e      	ble.n	83662 <__register_exitproc+0x56>
   83624:	4822      	ldr	r0, [pc, #136]	; (836b0 <__register_exitproc+0xa4>)
   83626:	b918      	cbnz	r0, 83630 <__register_exitproc+0x24>
   83628:	f04f 30ff 	mov.w	r0, #4294967295
   8362c:	b005      	add	sp, #20
   8362e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83630:	f44f 70c8 	mov.w	r0, #400	; 0x190
   83634:	9103      	str	r1, [sp, #12]
   83636:	9202      	str	r2, [sp, #8]
   83638:	9301      	str	r3, [sp, #4]
   8363a:	f7ff fcd7 	bl	82fec <malloc>
   8363e:	9903      	ldr	r1, [sp, #12]
   83640:	4604      	mov	r4, r0
   83642:	9a02      	ldr	r2, [sp, #8]
   83644:	9b01      	ldr	r3, [sp, #4]
   83646:	2800      	cmp	r0, #0
   83648:	d0ee      	beq.n	83628 <__register_exitproc+0x1c>
   8364a:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
   8364e:	2000      	movs	r0, #0
   83650:	6025      	str	r5, [r4, #0]
   83652:	6060      	str	r0, [r4, #4]
   83654:	4605      	mov	r5, r0
   83656:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   8365a:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   8365e:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   83662:	b93f      	cbnz	r7, 83674 <__register_exitproc+0x68>
   83664:	1c6b      	adds	r3, r5, #1
   83666:	2000      	movs	r0, #0
   83668:	3502      	adds	r5, #2
   8366a:	6063      	str	r3, [r4, #4]
   8366c:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
   83670:	b005      	add	sp, #20
   83672:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83674:	2601      	movs	r6, #1
   83676:	40ae      	lsls	r6, r5
   83678:	eb04 0085 	add.w	r0, r4, r5, lsl #2
   8367c:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   83680:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   83684:	2f02      	cmp	r7, #2
   83686:	ea42 0206 	orr.w	r2, r2, r6
   8368a:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   8368e:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   83692:	d1e7      	bne.n	83664 <__register_exitproc+0x58>
   83694:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   83698:	431e      	orrs	r6, r3
   8369a:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
   8369e:	e7e1      	b.n	83664 <__register_exitproc+0x58>
   836a0:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   836a4:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   836a8:	e7b9      	b.n	8361e <__register_exitproc+0x12>
   836aa:	bf00      	nop
   836ac:	000837bc 	.word	0x000837bc
   836b0:	00082fed 	.word	0x00082fed

000836b4 <_close_r>:
   836b4:	b538      	push	{r3, r4, r5, lr}
   836b6:	4c07      	ldr	r4, [pc, #28]	; (836d4 <_close_r+0x20>)
   836b8:	2300      	movs	r3, #0
   836ba:	4605      	mov	r5, r0
   836bc:	4608      	mov	r0, r1
   836be:	6023      	str	r3, [r4, #0]
   836c0:	f7fe ff70 	bl	825a4 <_close>
   836c4:	1c43      	adds	r3, r0, #1
   836c6:	d000      	beq.n	836ca <_close_r+0x16>
   836c8:	bd38      	pop	{r3, r4, r5, pc}
   836ca:	6823      	ldr	r3, [r4, #0]
   836cc:	2b00      	cmp	r3, #0
   836ce:	d0fb      	beq.n	836c8 <_close_r+0x14>
   836d0:	602b      	str	r3, [r5, #0]
   836d2:	bd38      	pop	{r3, r4, r5, pc}
   836d4:	20070d68 	.word	0x20070d68

000836d8 <_fclose_r>:
   836d8:	b570      	push	{r4, r5, r6, lr}
   836da:	460c      	mov	r4, r1
   836dc:	4605      	mov	r5, r0
   836de:	b131      	cbz	r1, 836ee <_fclose_r+0x16>
   836e0:	b110      	cbz	r0, 836e8 <_fclose_r+0x10>
   836e2:	6b83      	ldr	r3, [r0, #56]	; 0x38
   836e4:	2b00      	cmp	r3, #0
   836e6:	d02f      	beq.n	83748 <_fclose_r+0x70>
   836e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   836ec:	b90b      	cbnz	r3, 836f2 <_fclose_r+0x1a>
   836ee:	2000      	movs	r0, #0
   836f0:	bd70      	pop	{r4, r5, r6, pc}
   836f2:	4628      	mov	r0, r5
   836f4:	4621      	mov	r1, r4
   836f6:	f7ff fa89 	bl	82c0c <_fflush_r>
   836fa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   836fc:	4606      	mov	r6, r0
   836fe:	b133      	cbz	r3, 8370e <_fclose_r+0x36>
   83700:	4628      	mov	r0, r5
   83702:	69e1      	ldr	r1, [r4, #28]
   83704:	4798      	blx	r3
   83706:	2800      	cmp	r0, #0
   83708:	bfb8      	it	lt
   8370a:	f04f 36ff 	movlt.w	r6, #4294967295
   8370e:	89a3      	ldrh	r3, [r4, #12]
   83710:	061b      	lsls	r3, r3, #24
   83712:	d41c      	bmi.n	8374e <_fclose_r+0x76>
   83714:	6b21      	ldr	r1, [r4, #48]	; 0x30
   83716:	b141      	cbz	r1, 8372a <_fclose_r+0x52>
   83718:	f104 0340 	add.w	r3, r4, #64	; 0x40
   8371c:	4299      	cmp	r1, r3
   8371e:	d002      	beq.n	83726 <_fclose_r+0x4e>
   83720:	4628      	mov	r0, r5
   83722:	f7ff fb73 	bl	82e0c <_free_r>
   83726:	2300      	movs	r3, #0
   83728:	6323      	str	r3, [r4, #48]	; 0x30
   8372a:	6c61      	ldr	r1, [r4, #68]	; 0x44
   8372c:	b121      	cbz	r1, 83738 <_fclose_r+0x60>
   8372e:	4628      	mov	r0, r5
   83730:	f7ff fb6c 	bl	82e0c <_free_r>
   83734:	2300      	movs	r3, #0
   83736:	6463      	str	r3, [r4, #68]	; 0x44
   83738:	f7ff fafe 	bl	82d38 <__sfp_lock_acquire>
   8373c:	2300      	movs	r3, #0
   8373e:	81a3      	strh	r3, [r4, #12]
   83740:	f7ff fafc 	bl	82d3c <__sfp_lock_release>
   83744:	4630      	mov	r0, r6
   83746:	bd70      	pop	{r4, r5, r6, pc}
   83748:	f7ff fa7c 	bl	82c44 <__sinit>
   8374c:	e7cc      	b.n	836e8 <_fclose_r+0x10>
   8374e:	4628      	mov	r0, r5
   83750:	6921      	ldr	r1, [r4, #16]
   83752:	f7ff fb5b 	bl	82e0c <_free_r>
   83756:	e7dd      	b.n	83714 <_fclose_r+0x3c>

00083758 <fclose>:
   83758:	4b02      	ldr	r3, [pc, #8]	; (83764 <fclose+0xc>)
   8375a:	4601      	mov	r1, r0
   8375c:	6818      	ldr	r0, [r3, #0]
   8375e:	f7ff bfbb 	b.w	836d8 <_fclose_r>
   83762:	bf00      	nop
   83764:	20070608 	.word	0x20070608

00083768 <_lseek_r>:
   83768:	b570      	push	{r4, r5, r6, lr}
   8376a:	4c08      	ldr	r4, [pc, #32]	; (8378c <_lseek_r+0x24>)
   8376c:	4606      	mov	r6, r0
   8376e:	2500      	movs	r5, #0
   83770:	4608      	mov	r0, r1
   83772:	4611      	mov	r1, r2
   83774:	461a      	mov	r2, r3
   83776:	6025      	str	r5, [r4, #0]
   83778:	f7fe ff18 	bl	825ac <_lseek>
   8377c:	1c43      	adds	r3, r0, #1
   8377e:	d000      	beq.n	83782 <_lseek_r+0x1a>
   83780:	bd70      	pop	{r4, r5, r6, pc}
   83782:	6823      	ldr	r3, [r4, #0]
   83784:	2b00      	cmp	r3, #0
   83786:	d0fb      	beq.n	83780 <_lseek_r+0x18>
   83788:	6033      	str	r3, [r6, #0]
   8378a:	bd70      	pop	{r4, r5, r6, pc}
   8378c:	20070d68 	.word	0x20070d68

00083790 <_read_r>:
   83790:	b570      	push	{r4, r5, r6, lr}
   83792:	4c08      	ldr	r4, [pc, #32]	; (837b4 <_read_r+0x24>)
   83794:	4606      	mov	r6, r0
   83796:	2500      	movs	r5, #0
   83798:	4608      	mov	r0, r1
   8379a:	4611      	mov	r1, r2
   8379c:	461a      	mov	r2, r3
   8379e:	6025      	str	r5, [r4, #0]
   837a0:	f7fd fad2 	bl	80d48 <_read>
   837a4:	1c43      	adds	r3, r0, #1
   837a6:	d000      	beq.n	837aa <_read_r+0x1a>
   837a8:	bd70      	pop	{r4, r5, r6, pc}
   837aa:	6823      	ldr	r3, [r4, #0]
   837ac:	2b00      	cmp	r3, #0
   837ae:	d0fb      	beq.n	837a8 <_read_r+0x18>
   837b0:	6033      	str	r3, [r6, #0]
   837b2:	bd70      	pop	{r4, r5, r6, pc}
   837b4:	20070d68 	.word	0x20070d68
   837b8:	00000043 	.word	0x00000043

000837bc <_global_impure_ptr>:
   837bc:	200701e0                                ... 

000837c0 <_init>:
   837c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   837c2:	bf00      	nop
   837c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   837c6:	bc08      	pop	{r3}
   837c8:	469e      	mov	lr, r3
   837ca:	4770      	bx	lr

000837cc <__init_array_start>:
   837cc:	00082aa5 	.word	0x00082aa5

000837d0 <__frame_dummy_init_array_entry>:
   837d0:	00080119                                ....

000837d4 <_fini>:
   837d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   837d6:	bf00      	nop
   837d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   837da:	bc08      	pop	{r3}
   837dc:	469e      	mov	lr, r3
   837de:	4770      	bx	lr

000837e0 <__fini_array_start>:
   837e0:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20070000:	f3bf 8f5f 	dmb	sy
20070004:	3801      	subs	r0, #1
20070006:	d1fb      	bne.n	20070000 <portable_delay_cycles>
20070008:	4770      	bx	lr
2007000a:	bf00      	nop

2007000c <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007000c:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070010:	4a20      	ldr	r2, [pc, #128]	; (20070094 <SystemInit+0x88>)
20070012:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070014:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070018:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007001a:	4b1f      	ldr	r3, [pc, #124]	; (20070098 <SystemInit+0x8c>)
2007001c:	6a1b      	ldr	r3, [r3, #32]
2007001e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070022:	d107      	bne.n	20070034 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070024:	4a1d      	ldr	r2, [pc, #116]	; (2007009c <SystemInit+0x90>)
20070026:	4b1c      	ldr	r3, [pc, #112]	; (20070098 <SystemInit+0x8c>)
20070028:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007002a:	461a      	mov	r2, r3
2007002c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007002e:	f013 0f01 	tst.w	r3, #1
20070032:	d0fb      	beq.n	2007002c <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070034:	4a1a      	ldr	r2, [pc, #104]	; (200700a0 <SystemInit+0x94>)
20070036:	4b18      	ldr	r3, [pc, #96]	; (20070098 <SystemInit+0x8c>)
20070038:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007003a:	461a      	mov	r2, r3
2007003c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007003e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070042:	d0fb      	beq.n	2007003c <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070044:	4b14      	ldr	r3, [pc, #80]	; (20070098 <SystemInit+0x8c>)
20070046:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20070048:	f022 0203 	bic.w	r2, r2, #3
2007004c:	f042 0201 	orr.w	r2, r2, #1
20070050:	631a      	str	r2, [r3, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070052:	461a      	mov	r2, r3
20070054:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070056:	f013 0f08 	tst.w	r3, #8
2007005a:	d0fb      	beq.n	20070054 <SystemInit+0x48>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007005c:	4a11      	ldr	r2, [pc, #68]	; (200700a4 <SystemInit+0x98>)
2007005e:	4b0e      	ldr	r3, [pc, #56]	; (20070098 <SystemInit+0x8c>)
20070060:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070062:	461a      	mov	r2, r3
20070064:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070066:	f013 0f02 	tst.w	r3, #2
2007006a:	d0fb      	beq.n	20070064 <SystemInit+0x58>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007006c:	2211      	movs	r2, #17
2007006e:	4b0a      	ldr	r3, [pc, #40]	; (20070098 <SystemInit+0x8c>)
20070070:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070072:	461a      	mov	r2, r3
20070074:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070076:	f013 0f08 	tst.w	r3, #8
2007007a:	d0fb      	beq.n	20070074 <SystemInit+0x68>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007007c:	2212      	movs	r2, #18
2007007e:	4b06      	ldr	r3, [pc, #24]	; (20070098 <SystemInit+0x8c>)
20070080:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070082:	461a      	mov	r2, r3
20070084:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070086:	f013 0f08 	tst.w	r3, #8
2007008a:	d0fb      	beq.n	20070084 <SystemInit+0x78>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007008c:	4a06      	ldr	r2, [pc, #24]	; (200700a8 <SystemInit+0x9c>)
2007008e:	4b07      	ldr	r3, [pc, #28]	; (200700ac <SystemInit+0xa0>)
20070090:	601a      	str	r2, [r3, #0]
20070092:	4770      	bx	lr
20070094:	400e0a00 	.word	0x400e0a00
20070098:	400e0600 	.word	0x400e0600
2007009c:	00370809 	.word	0x00370809
200700a0:	01370809 	.word	0x01370809
200700a4:	200d3f01 	.word	0x200d3f01
200700a8:	0501bd00 	.word	0x0501bd00
200700ac:	200701dc 	.word	0x200701dc

200700b0 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700b0:	4b1b      	ldr	r3, [pc, #108]	; (20070120 <system_init_flash+0x70>)
200700b2:	4298      	cmp	r0, r3
200700b4:	d806      	bhi.n	200700c4 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700b6:	2300      	movs	r3, #0
200700b8:	4a1a      	ldr	r2, [pc, #104]	; (20070124 <system_init_flash+0x74>)
200700ba:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700bc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700c0:	6013      	str	r3, [r2, #0]
200700c2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700c4:	4b18      	ldr	r3, [pc, #96]	; (20070128 <system_init_flash+0x78>)
200700c6:	4298      	cmp	r0, r3
200700c8:	d807      	bhi.n	200700da <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700ca:	f44f 7380 	mov.w	r3, #256	; 0x100
200700ce:	4a15      	ldr	r2, [pc, #84]	; (20070124 <system_init_flash+0x74>)
200700d0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700d2:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700d6:	6013      	str	r3, [r2, #0]
200700d8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700da:	4b14      	ldr	r3, [pc, #80]	; (2007012c <system_init_flash+0x7c>)
200700dc:	4298      	cmp	r0, r3
200700de:	d807      	bhi.n	200700f0 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700e0:	f44f 7300 	mov.w	r3, #512	; 0x200
200700e4:	4a0f      	ldr	r2, [pc, #60]	; (20070124 <system_init_flash+0x74>)
200700e6:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700e8:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ec:	6013      	str	r3, [r2, #0]
200700ee:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700f0:	4b0f      	ldr	r3, [pc, #60]	; (20070130 <system_init_flash+0x80>)
200700f2:	4298      	cmp	r0, r3
200700f4:	d807      	bhi.n	20070106 <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700f6:	f44f 7340 	mov.w	r3, #768	; 0x300
200700fa:	4a0a      	ldr	r2, [pc, #40]	; (20070124 <system_init_flash+0x74>)
200700fc:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700fe:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070102:	6013      	str	r3, [r2, #0]
20070104:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
20070106:	4b0b      	ldr	r3, [pc, #44]	; (20070134 <system_init_flash+0x84>)
20070108:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007010a:	bf94      	ite	ls
2007010c:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070110:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070114:	4a03      	ldr	r2, [pc, #12]	; (20070124 <system_init_flash+0x74>)
20070116:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
20070118:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007011c:	6013      	str	r3, [r2, #0]
2007011e:	4770      	bx	lr
20070120:	0121eabf 	.word	0x0121eabf
20070124:	400e0a00 	.word	0x400e0a00
20070128:	02faf07f 	.word	0x02faf07f
2007012c:	03d08fff 	.word	0x03d08fff
20070130:	04c4b3ff 	.word	0x04c4b3ff
20070134:	055d4a7f 	.word	0x055d4a7f

20070138 <udi_api_cdc_data>:
20070138:	00080621 000802cd 000802e9 000802ed     !...............
20070148:	000804f9                                ....

2007014c <udi_api_cdc_comm>:
2007014c:	00080271 000802bd 000802f1 000802ed     q...............
2007015c:	00000000                                ....

20070160 <udc_config>:
20070160:	2007017c 20070174 00000000              |.. t.. ....

2007016c <udi_apis>:
2007016c:	2007014c 20070138                       L.. 8.. 

20070174 <udc_config_fs>:
20070174:	20070190 2007016c                       ... l.. 

2007017c <udc_device_desc>:
2007017c:	02000112 40000002 240403eb 00000100     .......@...$....
2007018c:	00000100                                ....

20070190 <udc_desc_fs>:
20070190:	00430209 c0000102 00040932 02020100     ..C.....2.......
200701a0:	24050001 04011000 05020224 01000624     ...$....$...$...
200701b0:	03012405 83050701 10004003 00010409     .$.......@......
200701c0:	00000a02 81050700 00004002 02020507     .........@......
200701d0:	00000040                                @...

200701d4 <udc_string_desc_languageid>:
200701d4:	04090304                                ....

200701d8 <g_interrupt_enabled>:
200701d8:	00000001                                ....

200701dc <SystemCoreClock>:
200701dc:	003d0900                                ..=.

200701e0 <impure_data>:
200701e0:	00000000 200704cc 20070534 2007059c     ....... 4.. ... 
	...
20070214:	000837b8 00000000 00000000 00000000     .7..............
	...
20070288:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20070298:	0005deec 0000000b 00000000 00000000     ................
	...

20070608 <_impure_ptr>:
20070608:	200701e0                                ... 

2007060c <__malloc_av_>:
	...
20070614:	2007060c 2007060c 20070614 20070614     ... ... ... ... 
20070624:	2007061c 2007061c 20070624 20070624     ... ... $.. $.. 
20070634:	2007062c 2007062c 20070634 20070634     ,.. ,.. 4.. 4.. 
20070644:	2007063c 2007063c 20070644 20070644     <.. <.. D.. D.. 
20070654:	2007064c 2007064c 20070654 20070654     L.. L.. T.. T.. 
20070664:	2007065c 2007065c 20070664 20070664     \.. \.. d.. d.. 
20070674:	2007066c 2007066c 20070674 20070674     l.. l.. t.. t.. 
20070684:	2007067c 2007067c 20070684 20070684     |.. |.. ... ... 
20070694:	2007068c 2007068c 20070694 20070694     ... ... ... ... 
200706a4:	2007069c 2007069c 200706a4 200706a4     ... ... ... ... 
200706b4:	200706ac 200706ac 200706b4 200706b4     ... ... ... ... 
200706c4:	200706bc 200706bc 200706c4 200706c4     ... ... ... ... 
200706d4:	200706cc 200706cc 200706d4 200706d4     ... ... ... ... 
200706e4:	200706dc 200706dc 200706e4 200706e4     ... ... ... ... 
200706f4:	200706ec 200706ec 200706f4 200706f4     ... ... ... ... 
20070704:	200706fc 200706fc 20070704 20070704     ... ... ... ... 
20070714:	2007070c 2007070c 20070714 20070714     ... ... ... ... 
20070724:	2007071c 2007071c 20070724 20070724     ... ... $.. $.. 
20070734:	2007072c 2007072c 20070734 20070734     ,.. ,.. 4.. 4.. 
20070744:	2007073c 2007073c 20070744 20070744     <.. <.. D.. D.. 
20070754:	2007074c 2007074c 20070754 20070754     L.. L.. T.. T.. 
20070764:	2007075c 2007075c 20070764 20070764     \.. \.. d.. d.. 
20070774:	2007076c 2007076c 20070774 20070774     l.. l.. t.. t.. 
20070784:	2007077c 2007077c 20070784 20070784     |.. |.. ... ... 
20070794:	2007078c 2007078c 20070794 20070794     ... ... ... ... 
200707a4:	2007079c 2007079c 200707a4 200707a4     ... ... ... ... 
200707b4:	200707ac 200707ac 200707b4 200707b4     ... ... ... ... 
200707c4:	200707bc 200707bc 200707c4 200707c4     ... ... ... ... 
200707d4:	200707cc 200707cc 200707d4 200707d4     ... ... ... ... 
200707e4:	200707dc 200707dc 200707e4 200707e4     ... ... ... ... 
200707f4:	200707ec 200707ec 200707f4 200707f4     ... ... ... ... 
20070804:	200707fc 200707fc 20070804 20070804     ... ... ... ... 
20070814:	2007080c 2007080c 20070814 20070814     ... ... ... ... 
20070824:	2007081c 2007081c 20070824 20070824     ... ... $.. $.. 
20070834:	2007082c 2007082c 20070834 20070834     ,.. ,.. 4.. 4.. 
20070844:	2007083c 2007083c 20070844 20070844     <.. <.. D.. D.. 
20070854:	2007084c 2007084c 20070854 20070854     L.. L.. T.. T.. 
20070864:	2007085c 2007085c 20070864 20070864     \.. \.. d.. d.. 
20070874:	2007086c 2007086c 20070874 20070874     l.. l.. t.. t.. 
20070884:	2007087c 2007087c 20070884 20070884     |.. |.. ... ... 
20070894:	2007088c 2007088c 20070894 20070894     ... ... ... ... 
200708a4:	2007089c 2007089c 200708a4 200708a4     ... ... ... ... 
200708b4:	200708ac 200708ac 200708b4 200708b4     ... ... ... ... 
200708c4:	200708bc 200708bc 200708c4 200708c4     ... ... ... ... 
200708d4:	200708cc 200708cc 200708d4 200708d4     ... ... ... ... 
200708e4:	200708dc 200708dc 200708e4 200708e4     ... ... ... ... 
200708f4:	200708ec 200708ec 200708f4 200708f4     ... ... ... ... 
20070904:	200708fc 200708fc 20070904 20070904     ... ... ... ... 
20070914:	2007090c 2007090c 20070914 20070914     ... ... ... ... 
20070924:	2007091c 2007091c 20070924 20070924     ... ... $.. $.. 
20070934:	2007092c 2007092c 20070934 20070934     ,.. ,.. 4.. 4.. 
20070944:	2007093c 2007093c 20070944 20070944     <.. <.. D.. D.. 
20070954:	2007094c 2007094c 20070954 20070954     L.. L.. T.. T.. 
20070964:	2007095c 2007095c 20070964 20070964     \.. \.. d.. d.. 
20070974:	2007096c 2007096c 20070974 20070974     l.. l.. t.. t.. 
20070984:	2007097c 2007097c 20070984 20070984     |.. |.. ... ... 
20070994:	2007098c 2007098c 20070994 20070994     ... ... ... ... 
200709a4:	2007099c 2007099c 200709a4 200709a4     ... ... ... ... 
200709b4:	200709ac 200709ac 200709b4 200709b4     ... ... ... ... 
200709c4:	200709bc 200709bc 200709c4 200709c4     ... ... ... ... 
200709d4:	200709cc 200709cc 200709d4 200709d4     ... ... ... ... 
200709e4:	200709dc 200709dc 200709e4 200709e4     ... ... ... ... 
200709f4:	200709ec 200709ec 200709f4 200709f4     ... ... ... ... 
20070a04:	200709fc 200709fc 20070a04 20070a04     ... ... ... ... 

20070a14 <__malloc_trim_threshold>:
20070a14:	00020000                                ....

20070a18 <__malloc_sbrk_base>:
20070a18:	ffffffff                                ....
