
ProjectAdumbrate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003d50  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00083d50  00083d50  0000bd50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000099c  20070000  00083d58  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000178  2007099c  000846f4  0001099c  2**2
                  ALLOC
  4 .stack        00002004  20070b14  0008486c  0001099c  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  0001099c  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  000109c5  2**0
                  CONTENTS, READONLY
  7 .debug_info   0000b88a  00000000  00000000  00010a20  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000221f  00000000  00000000  0001c2aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000408d  00000000  00000000  0001e4c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000009a8  00000000  00000000  00022556  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000008b8  00000000  00000000  00022efe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00006ec1  00000000  00000000  000237b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000e21c  00000000  00000000  0002a677  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00062f80  00000000  00000000  00038893  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00001ed0  00000000  00000000  0009b814  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20072b18 	.word	0x20072b18
   80004:	000808e5 	.word	0x000808e5
   80008:	000808e1 	.word	0x000808e1
   8000c:	000808e1 	.word	0x000808e1
   80010:	000808e1 	.word	0x000808e1
   80014:	000808e1 	.word	0x000808e1
   80018:	000808e1 	.word	0x000808e1
	...
   8002c:	000808e1 	.word	0x000808e1
   80030:	000808e1 	.word	0x000808e1
   80034:	00000000 	.word	0x00000000
   80038:	000808e1 	.word	0x000808e1
   8003c:	000808e1 	.word	0x000808e1
   80040:	000808e1 	.word	0x000808e1
   80044:	000808e1 	.word	0x000808e1
   80048:	000808e1 	.word	0x000808e1
   8004c:	000808e1 	.word	0x000808e1
   80050:	000808e1 	.word	0x000808e1
   80054:	000808e1 	.word	0x000808e1
   80058:	000808e1 	.word	0x000808e1
   8005c:	000808e1 	.word	0x000808e1
   80060:	000808e1 	.word	0x000808e1
   80064:	000808e1 	.word	0x000808e1
   80068:	00000000 	.word	0x00000000
   8006c:	00080751 	.word	0x00080751
   80070:	00080765 	.word	0x00080765
   80074:	00080779 	.word	0x00080779
   80078:	0008078d 	.word	0x0008078d
	...
   80084:	000801b5 	.word	0x000801b5
   80088:	000808e1 	.word	0x000808e1
   8008c:	000808e1 	.word	0x000808e1
   80090:	000808e1 	.word	0x000808e1
   80094:	000808e1 	.word	0x000808e1
   80098:	000808e1 	.word	0x000808e1
   8009c:	000808e1 	.word	0x000808e1
   800a0:	000808e1 	.word	0x000808e1
   800a4:	00000000 	.word	0x00000000
   800a8:	000808e1 	.word	0x000808e1
   800ac:	000808e1 	.word	0x000808e1
   800b0:	000808e1 	.word	0x000808e1
   800b4:	000808e1 	.word	0x000808e1
   800b8:	000808e1 	.word	0x000808e1
   800bc:	000808e1 	.word	0x000808e1
   800c0:	000808e1 	.word	0x000808e1
   800c4:	000808e1 	.word	0x000808e1
   800c8:	000808e1 	.word	0x000808e1
   800cc:	000808e1 	.word	0x000808e1
   800d0:	000808e1 	.word	0x000808e1
   800d4:	000808e1 	.word	0x000808e1
   800d8:	000808e1 	.word	0x000808e1
   800dc:	000808e1 	.word	0x000808e1
   800e0:	000808e1 	.word	0x000808e1
   800e4:	000808e1 	.word	0x000808e1
   800e8:	000808e1 	.word	0x000808e1
   800ec:	000808e1 	.word	0x000808e1
   800f0:	000808e1 	.word	0x000808e1

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	2007099c 	.word	0x2007099c
   80110:	00000000 	.word	0x00000000
   80114:	00083d58 	.word	0x00083d58

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b06      	ldr	r3, [pc, #24]	; (80134 <frame_dummy+0x1c>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4806      	ldr	r0, [pc, #24]	; (80138 <frame_dummy+0x20>)
   80120:	4906      	ldr	r1, [pc, #24]	; (8013c <frame_dummy+0x24>)
   80122:	f3af 8000 	nop.w
   80126:	4806      	ldr	r0, [pc, #24]	; (80140 <frame_dummy+0x28>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b113      	cbz	r3, 80132 <frame_dummy+0x1a>
   8012c:	4b05      	ldr	r3, [pc, #20]	; (80144 <frame_dummy+0x2c>)
   8012e:	b103      	cbz	r3, 80132 <frame_dummy+0x1a>
   80130:	4798      	blx	r3
   80132:	bd08      	pop	{r3, pc}
   80134:	00000000 	.word	0x00000000
   80138:	00083d58 	.word	0x00083d58
   8013c:	200709a0 	.word	0x200709a0
   80140:	00083d58 	.word	0x00083d58
   80144:	00000000 	.word	0x00000000

00080148 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   80148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8014c:	460c      	mov	r4, r1
   8014e:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
   80150:	b960      	cbnz	r0, 8016c <_read+0x24>
		return -1;
	}

	for (; len > 0; --len) {
   80152:	2a00      	cmp	r2, #0
   80154:	dd0e      	ble.n	80174 <_read+0x2c>
   80156:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   80158:	4e09      	ldr	r6, [pc, #36]	; (80180 <_read+0x38>)
   8015a:	4d0a      	ldr	r5, [pc, #40]	; (80184 <_read+0x3c>)
   8015c:	6830      	ldr	r0, [r6, #0]
   8015e:	4621      	mov	r1, r4
   80160:	682b      	ldr	r3, [r5, #0]
   80162:	4798      	blx	r3
		ptr++;
   80164:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   80166:	42bc      	cmp	r4, r7
   80168:	d1f8      	bne.n	8015c <_read+0x14>
   8016a:	e006      	b.n	8017a <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
   8016c:	f04f 30ff 	mov.w	r0, #4294967295
   80170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len > 0; --len) {
   80174:	2000      	movs	r0, #0
   80176:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
   8017a:	4640      	mov	r0, r8
	}
	return nChars;
}
   8017c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80180:	20070b0c 	.word	0x20070b0c
   80184:	20070b04 	.word	0x20070b04

00080188 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   80188:	6943      	ldr	r3, [r0, #20]
   8018a:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   8018e:	bf1d      	ittte	ne
   80190:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   80194:	61c1      	strne	r1, [r0, #28]
	return 0;
   80196:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
   80198:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
   8019a:	4770      	bx	lr

0008019c <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   8019c:	6943      	ldr	r3, [r0, #20]
   8019e:	f013 0f01 	tst.w	r3, #1
   801a2:	d005      	beq.n	801b0 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   801a4:	6983      	ldr	r3, [r0, #24]
   801a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
   801aa:	600b      	str	r3, [r1, #0]

	return 0;
   801ac:	2000      	movs	r0, #0
   801ae:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   801b0:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   801b2:	4770      	bx	lr

000801b4 <USART0_Handler>:
#if SAMD || SAMR21 || SAML21
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
   801b4:	b500      	push	{lr}
   801b6:	b083      	sub	sp, #12
	uint8_t temp;
#if SAMD || SAMR21 || SAML21
	usart_serial_read_packet(&host_uart_module, &temp, 1);
#else
	usart_serial_read_packet(USART_HOST, &temp, 1);
   801b8:	4811      	ldr	r0, [pc, #68]	; (80200 <USART0_Handler+0x4c>)
   801ba:	f10d 0107 	add.w	r1, sp, #7
   801be:	2201      	movs	r2, #1
   801c0:	4b10      	ldr	r3, [pc, #64]	; (80204 <USART0_Handler+0x50>)
   801c2:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   801c4:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   801c6:	f3bf 8f5f 	dmb	sy
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
   801ca:	2200      	movs	r2, #0
   801cc:	4b0e      	ldr	r3, [pc, #56]	; (80208 <USART0_Handler+0x54>)
   801ce:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
   801d0:	4b0e      	ldr	r3, [pc, #56]	; (8020c <USART0_Handler+0x58>)
   801d2:	781b      	ldrb	r3, [r3, #0]
   801d4:	f89d 1007 	ldrb.w	r1, [sp, #7]
   801d8:	4a0d      	ldr	r2, [pc, #52]	; (80210 <USART0_Handler+0x5c>)
   801da:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
   801dc:	2b9b      	cmp	r3, #155	; 0x9b
   801de:	d103      	bne.n	801e8 <USART0_Handler+0x34>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
   801e0:	2200      	movs	r2, #0
   801e2:	4b0a      	ldr	r3, [pc, #40]	; (8020c <USART0_Handler+0x58>)
   801e4:	701a      	strb	r2, [r3, #0]
   801e6:	e002      	b.n	801ee <USART0_Handler+0x3a>
	} else {
		serial_rx_buf_tail++;
   801e8:	3301      	adds	r3, #1
   801ea:	4a08      	ldr	r2, [pc, #32]	; (8020c <USART0_Handler+0x58>)
   801ec:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
   801ee:	2201      	movs	r2, #1
   801f0:	4b05      	ldr	r3, [pc, #20]	; (80208 <USART0_Handler+0x54>)
   801f2:	701a      	strb	r2, [r3, #0]
   801f4:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   801f8:	b662      	cpsie	i
}
   801fa:	b003      	add	sp, #12
   801fc:	f85d fb04 	ldr.w	pc, [sp], #4
   80200:	40098000 	.word	0x40098000
   80204:	00080269 	.word	0x00080269
   80208:	2007012c 	.word	0x2007012c
   8020c:	20070a54 	.word	0x20070a54
   80210:	200709b8 	.word	0x200709b8

00080214 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   80214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80218:	460e      	mov	r6, r1
   8021a:	4615      	mov	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   8021c:	3801      	subs	r0, #1
   8021e:	2802      	cmp	r0, #2
   80220:	d80f      	bhi.n	80242 <_write+0x2e>
		return -1;
	}

	for (; len != 0; --len) {
   80222:	b192      	cbz	r2, 8024a <_write+0x36>
   80224:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
   80226:	f8df 803c 	ldr.w	r8, [pc, #60]	; 80264 <_write+0x50>
   8022a:	4f0d      	ldr	r7, [pc, #52]	; (80260 <_write+0x4c>)
   8022c:	f8d8 0000 	ldr.w	r0, [r8]
   80230:	5d31      	ldrb	r1, [r6, r4]
   80232:	683b      	ldr	r3, [r7, #0]
   80234:	4798      	blx	r3
   80236:	2800      	cmp	r0, #0
   80238:	db0a      	blt.n	80250 <_write+0x3c>
			return -1;
		}
		++nChars;
   8023a:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   8023c:	42a5      	cmp	r5, r4
   8023e:	d1f5      	bne.n	8022c <_write+0x18>
   80240:	e00a      	b.n	80258 <_write+0x44>
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
   80242:	f04f 30ff 	mov.w	r0, #4294967295
   80246:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len != 0; --len) {
   8024a:	2000      	movs	r0, #0
   8024c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
   80250:	f04f 30ff 	mov.w	r0, #4294967295
   80254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		++nChars;
   80258:	4620      	mov	r0, r4
	}
	return nChars;
}
   8025a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8025e:	bf00      	nop
   80260:	20070b08 	.word	0x20070b08
   80264:	20070b0c 	.word	0x20070b0c

00080268 <usart_serial_read_packet>:
 * \param len    Length of data
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
   80268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8026c:	b083      	sub	sp, #12
   8026e:	4605      	mov	r5, r0
	while (len) {
   80270:	4690      	mov	r8, r2
   80272:	2a00      	cmp	r2, #0
   80274:	d047      	beq.n	80306 <usart_serial_read_packet+0x9e>
   80276:	1c4e      	adds	r6, r1, #1
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80278:	4f25      	ldr	r7, [pc, #148]	; (80310 <usart_serial_read_packet+0xa8>)
		while (usart_read(p_usart, &val));
   8027a:	4c26      	ldr	r4, [pc, #152]	; (80314 <usart_serial_read_packet+0xac>)
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   8027c:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 80328 <usart_serial_read_packet+0xc0>
	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
   80280:	f8df b094 	ldr.w	fp, [pc, #148]	; 80318 <usart_serial_read_packet+0xb0>
   80284:	f106 39ff 	add.w	r9, r6, #4294967295
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
	uint32_t val = 0;
   80288:	2300      	movs	r3, #0
   8028a:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   8028c:	4b22      	ldr	r3, [pc, #136]	; (80318 <usart_serial_read_packet+0xb0>)
   8028e:	429d      	cmp	r5, r3
   80290:	d106      	bne.n	802a0 <usart_serial_read_packet+0x38>
		while (uart_read((Uart*)p_usart, data));
   80292:	4658      	mov	r0, fp
   80294:	4649      	mov	r1, r9
   80296:	4b21      	ldr	r3, [pc, #132]	; (8031c <usart_serial_read_packet+0xb4>)
   80298:	4798      	blx	r3
   8029a:	2800      	cmp	r0, #0
   8029c:	d1f9      	bne.n	80292 <usart_serial_read_packet+0x2a>
   8029e:	e019      	b.n	802d4 <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   802a0:	4b1f      	ldr	r3, [pc, #124]	; (80320 <usart_serial_read_packet+0xb8>)
   802a2:	429d      	cmp	r5, r3
   802a4:	d109      	bne.n	802ba <usart_serial_read_packet+0x52>
		while (usart_read(p_usart, &val));
   802a6:	4699      	mov	r9, r3
   802a8:	4648      	mov	r0, r9
   802aa:	a901      	add	r1, sp, #4
   802ac:	47a0      	blx	r4
   802ae:	2800      	cmp	r0, #0
   802b0:	d1fa      	bne.n	802a8 <usart_serial_read_packet+0x40>
		*data = (uint8_t)(val & 0xFF);
   802b2:	9b01      	ldr	r3, [sp, #4]
   802b4:	f806 3c01 	strb.w	r3, [r6, #-1]
   802b8:	e017      	b.n	802ea <usart_serial_read_packet+0x82>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   802ba:	4b1a      	ldr	r3, [pc, #104]	; (80324 <usart_serial_read_packet+0xbc>)
   802bc:	429d      	cmp	r5, r3
   802be:	d109      	bne.n	802d4 <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
   802c0:	4699      	mov	r9, r3
   802c2:	4648      	mov	r0, r9
   802c4:	a901      	add	r1, sp, #4
   802c6:	47a0      	blx	r4
   802c8:	2800      	cmp	r0, #0
   802ca:	d1fa      	bne.n	802c2 <usart_serial_read_packet+0x5a>
		*data = (uint8_t)(val & 0xFF);
   802cc:	9b01      	ldr	r3, [sp, #4]
   802ce:	f806 3c01 	strb.w	r3, [r6, #-1]
   802d2:	e014      	b.n	802fe <usart_serial_read_packet+0x96>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   802d4:	4555      	cmp	r5, sl
   802d6:	d108      	bne.n	802ea <usart_serial_read_packet+0x82>
		while (usart_read(p_usart, &val));
   802d8:	4650      	mov	r0, sl
   802da:	a901      	add	r1, sp, #4
   802dc:	47a0      	blx	r4
   802de:	2800      	cmp	r0, #0
   802e0:	d1fa      	bne.n	802d8 <usart_serial_read_packet+0x70>
		*data = (uint8_t)(val & 0xFF);
   802e2:	9b01      	ldr	r3, [sp, #4]
   802e4:	f806 3c01 	strb.w	r3, [r6, #-1]
   802e8:	e009      	b.n	802fe <usart_serial_read_packet+0x96>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   802ea:	42bd      	cmp	r5, r7
   802ec:	d107      	bne.n	802fe <usart_serial_read_packet+0x96>
		while (usart_read(p_usart, &val));
   802ee:	4638      	mov	r0, r7
   802f0:	a901      	add	r1, sp, #4
   802f2:	47a0      	blx	r4
   802f4:	2800      	cmp	r0, #0
   802f6:	d1fa      	bne.n	802ee <usart_serial_read_packet+0x86>
		*data = (uint8_t)(val & 0xFF);
   802f8:	9b01      	ldr	r3, [sp, #4]
   802fa:	f806 3c01 	strb.w	r3, [r6, #-1]
   802fe:	3601      	adds	r6, #1
   80300:	f1b8 0801 	subs.w	r8, r8, #1
   80304:	d1be      	bne.n	80284 <usart_serial_read_packet+0x1c>
		usart_serial_getchar(usart, data);
		len--;
		data++;
	}
	return STATUS_OK;
}
   80306:	2000      	movs	r0, #0
   80308:	b003      	add	sp, #12
   8030a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8030e:	bf00      	nop
   80310:	400a4000 	.word	0x400a4000
   80314:	0008019d 	.word	0x0008019d
   80318:	400e0800 	.word	0x400e0800
   8031c:	00080375 	.word	0x00080375
   80320:	40098000 	.word	0x40098000
   80324:	4009c000 	.word	0x4009c000
   80328:	400a0000 	.word	0x400a0000

0008032c <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   8032c:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   8032e:	23ac      	movs	r3, #172	; 0xac
   80330:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   80332:	680a      	ldr	r2, [r1, #0]
   80334:	684b      	ldr	r3, [r1, #4]
   80336:	fbb2 f3f3 	udiv	r3, r2, r3
   8033a:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   8033c:	1e5c      	subs	r4, r3, #1
   8033e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   80342:	4294      	cmp	r4, r2
   80344:	d80a      	bhi.n	8035c <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
   80346:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   80348:	688b      	ldr	r3, [r1, #8]
   8034a:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   8034c:	f240 2302 	movw	r3, #514	; 0x202
   80350:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80354:	2350      	movs	r3, #80	; 0x50
   80356:	6003      	str	r3, [r0, #0]

	return 0;
   80358:	2000      	movs	r0, #0
   8035a:	e000      	b.n	8035e <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
   8035c:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
   8035e:	f85d 4b04 	ldr.w	r4, [sp], #4
   80362:	4770      	bx	lr

00080364 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   80364:	6943      	ldr	r3, [r0, #20]
   80366:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   8036a:	bf1a      	itte	ne
   8036c:	61c1      	strne	r1, [r0, #28]
	return 0;
   8036e:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
   80370:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
   80372:	4770      	bx	lr

00080374 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   80374:	6943      	ldr	r3, [r0, #20]
   80376:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   8037a:	bf1d      	ittte	ne
   8037c:	6983      	ldrne	r3, [r0, #24]
   8037e:	700b      	strbne	r3, [r1, #0]
	return 0;
   80380:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
   80382:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
   80384:	4770      	bx	lr
   80386:	bf00      	nop

00080388 <read_counter_value>:
	if((*p_TC_SR0 & (1 << COVFS)) == (1 << COVFS)){ // check if overflow has occurred
		start_clock(); // resets the counter and starts the counter clock anew
		*p_TC_CV = 0;
	}
	*/
	counterValue = *p_TC_CV;
   80388:	4b02      	ldr	r3, [pc, #8]	; (80394 <read_counter_value+0xc>)
   8038a:	6818      	ldr	r0, [r3, #0]
   8038c:	4b02      	ldr	r3, [pc, #8]	; (80398 <read_counter_value+0x10>)
   8038e:	6018      	str	r0, [r3, #0]
	return counterValue;
}
   80390:	4770      	bx	lr
   80392:	bf00      	nop
   80394:	40080010 	.word	0x40080010
   80398:	20070a58 	.word	0x20070a58

0008039c <TC0_init>:
static uint32_t disable_write_protect(uint32_t key){
	if(key == WPKEY_WPMR_PMC)
	{
		*p_PMC_WPMR &= 0;               // clear entire register just to be safe
		*p_PMC_WPMR |= WPKEY_WPMR_PMC;  // first write WPKEY = 0x504D43 to register
		*p_PMC_WPMR &= 0x11111100;      // then clear WPEN bit, mask upper bytes
   8039c:	4b11      	ldr	r3, [pc, #68]	; (803e4 <TC0_init+0x48>)
   8039e:	4a12      	ldr	r2, [pc, #72]	; (803e8 <TC0_init+0x4c>)
   803a0:	6013      	str	r3, [r2, #0]
	}
}

static void enable_clock_TC0CH0(){
	*p_TC_CCR &= ~(1 << CLKDIS); // clear disable bit
	*p_TC_CCR |= (1 << CLKEN);   // set enable bit
   803a2:	4a12      	ldr	r2, [pc, #72]	; (803ec <TC0_init+0x50>)
		}
	}
}

static void enable_clock_TC0CH0(){
	*p_TC_CCR &= ~(1 << CLKDIS); // clear disable bit
   803a4:	6811      	ldr	r1, [r2, #0]
   803a6:	f021 0102 	bic.w	r1, r1, #2
	*p_TC_CCR |= (1 << CLKEN);   // set enable bit
   803aa:	f041 0101 	orr.w	r1, r1, #1
   803ae:	6011      	str	r1, [r2, #0]
	else if (key == WPKEY_WPMR_TC)
	{
		enable_clock_TC0CH0();    /* in order to access TC_WPMR, the Timer Counter clock of the first channel must be enabled */	
		*p_TC_WPMR &= 0;
		*p_TC_WPMR |= WPKEY_WPMR_TC;
		*p_TC_WPMR &= 0x11111100; // disable Write Protect by clearing WPEN bit, mask upper bytes
   803b0:	32e4      	adds	r2, #228	; 0xe4
   803b2:	6013      	str	r3, [r2, #0]

static void enable_periph_clk(uint32_t periph_id){
	//disable_write_protect(WPKEY_WPMR_PMC);
	if(periph_id == PERIPH_ID_TCC0)
	{
		if((*p_PMC_PCSR0 & (1<<PERIPH_ID_TCC0)) != (1<<PERIPH_ID_TCC0)){  /* check status of peripheral clock corresponding to Timer Counter Channel 0 (if enabled) */
   803b4:	4b0e      	ldr	r3, [pc, #56]	; (803f0 <TC0_init+0x54>)
   803b6:	681b      	ldr	r3, [r3, #0]
   803b8:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
   803bc:	d103      	bne.n	803c6 <TC0_init+0x2a>
			*p_PMC_PCER0 = (1 << PERIPH_ID_TCC0);                         /* enable peripheral clock corresponding to Timer Counter Channel 0 */
   803be:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   803c2:	4b0c      	ldr	r3, [pc, #48]	; (803f4 <TC0_init+0x58>)
   803c4:	601a      	str	r2, [r3, #0]
	*p_TC_CMR0 &= ~(1 << WAVE);
}

/* Set TCCLKS bits in TC_CMR (clock selected MCK/2 clock signal (from PMC)) */
static void select_clock(){
	*p_TC_CMR0 &= 0x11111110;
   803c6:	4a0c      	ldr	r2, [pc, #48]	; (803f8 <TC0_init+0x5c>)
   803c8:	6813      	ldr	r3, [r2, #0]
   803ca:	f003 3311 	and.w	r3, r3, #286331153	; 0x11111111
   803ce:	f023 0301 	bic.w	r3, r3, #1
   803d2:	6013      	str	r3, [r2, #0]
/* The start and stop commands are effective only if the clock is enabled */
/* A trigger resets the counter and starts the counter clock */
/* Each channel has a software trigger, available by setting SWTRG in TC_CCR */
/* A software trigger is performed: the counter is reset and the clock is started */
static void start_clock(){
	*p_TC_CCR |= (1 << SWTRG); 
   803d4:	4b05      	ldr	r3, [pc, #20]	; (803ec <TC0_init+0x50>)
		}
	}
}

static void enable_clock_TC0CH0(){
	*p_TC_CCR &= ~(1 << CLKDIS); // clear disable bit
   803d6:	681a      	ldr	r2, [r3, #0]
   803d8:	f022 0202 	bic.w	r2, r2, #2
/* The start and stop commands are effective only if the clock is enabled */
/* A trigger resets the counter and starts the counter clock */
/* Each channel has a software trigger, available by setting SWTRG in TC_CCR */
/* A software trigger is performed: the counter is reset and the clock is started */
static void start_clock(){
	*p_TC_CCR |= (1 << SWTRG); 
   803dc:	f042 0205 	orr.w	r2, r2, #5
   803e0:	601a      	str	r2, [r3, #0]
   803e2:	4770      	bx	lr
   803e4:	00100100 	.word	0x00100100
   803e8:	400e06e4 	.word	0x400e06e4
   803ec:	40080000 	.word	0x40080000
   803f0:	400e0618 	.word	0x400e0618
   803f4:	400e0610 	.word	0x400e0610
   803f8:	40080004 	.word	0x40080004

000803fc <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   803fc:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   803fe:	480e      	ldr	r0, [pc, #56]	; (80438 <sysclk_init+0x3c>)
   80400:	4b0e      	ldr	r3, [pc, #56]	; (8043c <sysclk_init+0x40>)
   80402:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   80404:	2000      	movs	r0, #0
   80406:	213e      	movs	r1, #62	; 0x3e
   80408:	4b0d      	ldr	r3, [pc, #52]	; (80440 <sysclk_init+0x44>)
   8040a:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   8040c:	4c0d      	ldr	r4, [pc, #52]	; (80444 <sysclk_init+0x48>)
   8040e:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   80410:	2800      	cmp	r0, #0
   80412:	d0fc      	beq.n	8040e <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   80414:	4b0c      	ldr	r3, [pc, #48]	; (80448 <sysclk_init+0x4c>)
   80416:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   80418:	4a0c      	ldr	r2, [pc, #48]	; (8044c <sysclk_init+0x50>)
   8041a:	4b0d      	ldr	r3, [pc, #52]	; (80450 <sysclk_init+0x54>)
   8041c:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   8041e:	4c0d      	ldr	r4, [pc, #52]	; (80454 <sysclk_init+0x58>)
   80420:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   80422:	2800      	cmp	r0, #0
   80424:	d0fc      	beq.n	80420 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   80426:	2010      	movs	r0, #16
   80428:	4b0b      	ldr	r3, [pc, #44]	; (80458 <sysclk_init+0x5c>)
   8042a:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   8042c:	4b0b      	ldr	r3, [pc, #44]	; (8045c <sysclk_init+0x60>)
   8042e:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   80430:	4801      	ldr	r0, [pc, #4]	; (80438 <sysclk_init+0x3c>)
   80432:	4b02      	ldr	r3, [pc, #8]	; (8043c <sysclk_init+0x40>)
   80434:	4798      	blx	r3
   80436:	bd10      	pop	{r4, pc}
   80438:	0501bd00 	.word	0x0501bd00
   8043c:	200700a5 	.word	0x200700a5
   80440:	00080805 	.word	0x00080805
   80444:	00080859 	.word	0x00080859
   80448:	00080869 	.word	0x00080869
   8044c:	200d3f01 	.word	0x200d3f01
   80450:	400e0600 	.word	0x400e0600
   80454:	00080879 	.word	0x00080879
   80458:	000807a1 	.word	0x000807a1
   8045c:	00080995 	.word	0x00080995

00080460 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   80460:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   80462:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   80466:	4b16      	ldr	r3, [pc, #88]	; (804c0 <board_init+0x60>)
   80468:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   8046a:	200b      	movs	r0, #11
   8046c:	4c15      	ldr	r4, [pc, #84]	; (804c4 <board_init+0x64>)
   8046e:	47a0      	blx	r4
   80470:	200c      	movs	r0, #12
   80472:	47a0      	blx	r4
   80474:	200d      	movs	r0, #13
   80476:	47a0      	blx	r4
   80478:	200e      	movs	r0, #14
   8047a:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   8047c:	203b      	movs	r0, #59	; 0x3b
   8047e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80482:	4c11      	ldr	r4, [pc, #68]	; (804c8 <board_init+0x68>)
   80484:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   80486:	2055      	movs	r0, #85	; 0x55
   80488:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8048c:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   8048e:	2056      	movs	r0, #86	; 0x56
   80490:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80494:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   80496:	2068      	movs	r0, #104	; 0x68
   80498:	490c      	ldr	r1, [pc, #48]	; (804cc <board_init+0x6c>)
   8049a:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   8049c:	205c      	movs	r0, #92	; 0x5c
   8049e:	490c      	ldr	r1, [pc, #48]	; (804d0 <board_init+0x70>)
   804a0:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   804a2:	480c      	ldr	r0, [pc, #48]	; (804d4 <board_init+0x74>)
   804a4:	f44f 7140 	mov.w	r1, #768	; 0x300
   804a8:	4a0b      	ldr	r2, [pc, #44]	; (804d8 <board_init+0x78>)
   804aa:	4b0c      	ldr	r3, [pc, #48]	; (804dc <board_init+0x7c>)
   804ac:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   804ae:	202b      	movs	r0, #43	; 0x2b
   804b0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   804b4:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   804b6:	202a      	movs	r0, #42	; 0x2a
   804b8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   804bc:	47a0      	blx	r4
   804be:	bd10      	pop	{r4, pc}
   804c0:	400e1a50 	.word	0x400e1a50
   804c4:	00080889 	.word	0x00080889
   804c8:	00080585 	.word	0x00080585
   804cc:	28000079 	.word	0x28000079
   804d0:	28000001 	.word	0x28000001
   804d4:	400e0e00 	.word	0x400e0e00
   804d8:	08000001 	.word	0x08000001
   804dc:	00080659 	.word	0x00080659

000804e0 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   804e0:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   804e2:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   804e6:	d016      	beq.n	80516 <pio_set_peripheral+0x36>
   804e8:	d804      	bhi.n	804f4 <pio_set_peripheral+0x14>
   804ea:	b1c1      	cbz	r1, 8051e <pio_set_peripheral+0x3e>
   804ec:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   804f0:	d00a      	beq.n	80508 <pio_set_peripheral+0x28>
   804f2:	e013      	b.n	8051c <pio_set_peripheral+0x3c>
   804f4:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   804f8:	d011      	beq.n	8051e <pio_set_peripheral+0x3e>
   804fa:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   804fe:	d00e      	beq.n	8051e <pio_set_peripheral+0x3e>
   80500:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   80504:	d10a      	bne.n	8051c <pio_set_peripheral+0x3c>
   80506:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   80508:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   8050a:	6f01      	ldr	r1, [r0, #112]	; 0x70
   8050c:	400b      	ands	r3, r1
   8050e:	ea23 0302 	bic.w	r3, r3, r2
   80512:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   80514:	e002      	b.n	8051c <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   80516:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   80518:	4313      	orrs	r3, r2
   8051a:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   8051c:	6042      	str	r2, [r0, #4]
   8051e:	4770      	bx	lr

00080520 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   80520:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80522:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   80526:	bf14      	ite	ne
   80528:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8052a:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   8052c:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   80530:	bf14      	ite	ne
   80532:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   80534:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   80536:	f012 0f02 	tst.w	r2, #2
   8053a:	d002      	beq.n	80542 <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   8053c:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   80540:	e004      	b.n	8054c <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   80542:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   80546:	bf18      	it	ne
   80548:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   8054c:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   8054e:	6001      	str	r1, [r0, #0]
   80550:	4770      	bx	lr
   80552:	bf00      	nop

00080554 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   80554:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   80556:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80558:	9c01      	ldr	r4, [sp, #4]
   8055a:	b10c      	cbz	r4, 80560 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   8055c:	6641      	str	r1, [r0, #100]	; 0x64
   8055e:	e000      	b.n	80562 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80560:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   80562:	b10b      	cbz	r3, 80568 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   80564:	6501      	str	r1, [r0, #80]	; 0x50
   80566:	e000      	b.n	8056a <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   80568:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   8056a:	b10a      	cbz	r2, 80570 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   8056c:	6301      	str	r1, [r0, #48]	; 0x30
   8056e:	e000      	b.n	80572 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   80570:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   80572:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   80574:	6001      	str	r1, [r0, #0]
}
   80576:	f85d 4b04 	ldr.w	r4, [sp], #4
   8057a:	4770      	bx	lr

0008057c <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   8057c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   8057e:	4770      	bx	lr

00080580 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   80580:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   80582:	4770      	bx	lr

00080584 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   80584:	b570      	push	{r4, r5, r6, lr}
   80586:	b082      	sub	sp, #8
   80588:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   8058a:	0944      	lsrs	r4, r0, #5
   8058c:	f504 1400 	add.w	r4, r4, #2097152	; 0x200000
   80590:	f204 7407 	addw	r4, r4, #1799	; 0x707
   80594:	0266      	lsls	r6, r4, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   80596:	f001 44f0 	and.w	r4, r1, #2013265920	; 0x78000000
   8059a:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   8059e:	d030      	beq.n	80602 <pio_configure_pin+0x7e>
   805a0:	d806      	bhi.n	805b0 <pio_configure_pin+0x2c>
   805a2:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   805a6:	d00a      	beq.n	805be <pio_configure_pin+0x3a>
   805a8:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   805ac:	d018      	beq.n	805e0 <pio_configure_pin+0x5c>
   805ae:	e049      	b.n	80644 <pio_configure_pin+0xc0>
   805b0:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   805b4:	d030      	beq.n	80618 <pio_configure_pin+0x94>
   805b6:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   805ba:	d02d      	beq.n	80618 <pio_configure_pin+0x94>
   805bc:	e042      	b.n	80644 <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   805be:	f000 001f 	and.w	r0, r0, #31
   805c2:	2401      	movs	r4, #1
   805c4:	4084      	lsls	r4, r0
   805c6:	4630      	mov	r0, r6
   805c8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   805cc:	4622      	mov	r2, r4
   805ce:	4b1f      	ldr	r3, [pc, #124]	; (8064c <pio_configure_pin+0xc8>)
   805d0:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   805d2:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   805d6:	bf14      	ite	ne
   805d8:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   805da:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   805dc:	2001      	movs	r0, #1
   805de:	e032      	b.n	80646 <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   805e0:	f000 001f 	and.w	r0, r0, #31
   805e4:	2401      	movs	r4, #1
   805e6:	4084      	lsls	r4, r0
   805e8:	4630      	mov	r0, r6
   805ea:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   805ee:	4622      	mov	r2, r4
   805f0:	4b16      	ldr	r3, [pc, #88]	; (8064c <pio_configure_pin+0xc8>)
   805f2:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   805f4:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   805f8:	bf14      	ite	ne
   805fa:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   805fc:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   805fe:	2001      	movs	r0, #1
   80600:	e021      	b.n	80646 <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   80602:	f000 011f 	and.w	r1, r0, #31
   80606:	2401      	movs	r4, #1
   80608:	4630      	mov	r0, r6
   8060a:	fa04 f101 	lsl.w	r1, r4, r1
   8060e:	462a      	mov	r2, r5
   80610:	4b0f      	ldr	r3, [pc, #60]	; (80650 <pio_configure_pin+0xcc>)
   80612:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80614:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   80616:	e016      	b.n	80646 <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80618:	f000 011f 	and.w	r1, r0, #31
   8061c:	2401      	movs	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   8061e:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80622:	ea05 0304 	and.w	r3, r5, r4
   80626:	9300      	str	r3, [sp, #0]
   80628:	4630      	mov	r0, r6
   8062a:	fa04 f101 	lsl.w	r1, r4, r1
   8062e:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80632:	bf14      	ite	ne
   80634:	2200      	movne	r2, #0
   80636:	2201      	moveq	r2, #1
   80638:	f3c5 0380 	ubfx	r3, r5, #2, #1
   8063c:	4d05      	ldr	r5, [pc, #20]	; (80654 <pio_configure_pin+0xd0>)
   8063e:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
   80640:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   80642:	e000      	b.n	80646 <pio_configure_pin+0xc2>

	default:
		return 0;
   80644:	2000      	movs	r0, #0
	}

	return 1;
}
   80646:	b002      	add	sp, #8
   80648:	bd70      	pop	{r4, r5, r6, pc}
   8064a:	bf00      	nop
   8064c:	000804e1 	.word	0x000804e1
   80650:	00080521 	.word	0x00080521
   80654:	00080555 	.word	0x00080555

00080658 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   80658:	b5f0      	push	{r4, r5, r6, r7, lr}
   8065a:	b083      	sub	sp, #12
   8065c:	4607      	mov	r7, r0
   8065e:	460e      	mov	r6, r1
   80660:	4615      	mov	r5, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   80662:	f002 44f0 	and.w	r4, r2, #2013265920	; 0x78000000
   80666:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   8066a:	d026      	beq.n	806ba <pio_configure_pin_group+0x62>
   8066c:	d806      	bhi.n	8067c <pio_configure_pin_group+0x24>
   8066e:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   80672:	d00a      	beq.n	8068a <pio_configure_pin_group+0x32>
   80674:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   80678:	d013      	beq.n	806a2 <pio_configure_pin_group+0x4a>
   8067a:	e034      	b.n	806e6 <pio_configure_pin_group+0x8e>
   8067c:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   80680:	d01f      	beq.n	806c2 <pio_configure_pin_group+0x6a>
   80682:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   80686:	d01c      	beq.n	806c2 <pio_configure_pin_group+0x6a>
   80688:	e02d      	b.n	806e6 <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   8068a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8068e:	4632      	mov	r2, r6
   80690:	4b16      	ldr	r3, [pc, #88]	; (806ec <pio_configure_pin_group+0x94>)
   80692:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80694:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80698:	bf14      	ite	ne
   8069a:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8069c:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   8069e:	2001      	movs	r0, #1
   806a0:	e022      	b.n	806e8 <pio_configure_pin_group+0x90>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   806a2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   806a6:	4632      	mov	r2, r6
   806a8:	4b10      	ldr	r3, [pc, #64]	; (806ec <pio_configure_pin_group+0x94>)
   806aa:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   806ac:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   806b0:	bf14      	ite	ne
   806b2:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   806b4:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   806b6:	2001      	movs	r0, #1
   806b8:	e016      	b.n	806e8 <pio_configure_pin_group+0x90>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   806ba:	4b0d      	ldr	r3, [pc, #52]	; (806f0 <pio_configure_pin_group+0x98>)
   806bc:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   806be:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   806c0:	e012      	b.n	806e8 <pio_configure_pin_group+0x90>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   806c2:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   806c6:	f005 0301 	and.w	r3, r5, #1
   806ca:	9300      	str	r3, [sp, #0]
   806cc:	4638      	mov	r0, r7
   806ce:	4631      	mov	r1, r6
   806d0:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   806d4:	bf14      	ite	ne
   806d6:	2200      	movne	r2, #0
   806d8:	2201      	moveq	r2, #1
   806da:	f3c5 0380 	ubfx	r3, r5, #2, #1
   806de:	4c05      	ldr	r4, [pc, #20]	; (806f4 <pio_configure_pin_group+0x9c>)
   806e0:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   806e2:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   806e4:	e000      	b.n	806e8 <pio_configure_pin_group+0x90>

	default:
		return 0;
   806e6:	2000      	movs	r0, #0
	}

	return 1;
}
   806e8:	b003      	add	sp, #12
   806ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   806ec:	000804e1 	.word	0x000804e1
   806f0:	00080521 	.word	0x00080521
   806f4:	00080555 	.word	0x00080555

000806f8 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   806f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   806fc:	4604      	mov	r4, r0
   806fe:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   80700:	4b10      	ldr	r3, [pc, #64]	; (80744 <pio_handler_process+0x4c>)
   80702:	4798      	blx	r3
   80704:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   80706:	4620      	mov	r0, r4
   80708:	4b0f      	ldr	r3, [pc, #60]	; (80748 <pio_handler_process+0x50>)
   8070a:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   8070c:	4005      	ands	r5, r0
   8070e:	d017      	beq.n	80740 <pio_handler_process+0x48>
   80710:	4f0e      	ldr	r7, [pc, #56]	; (8074c <pio_handler_process+0x54>)
   80712:	f107 040c 	add.w	r4, r7, #12
   80716:	376c      	adds	r7, #108	; 0x6c
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   80718:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   8071c:	42b3      	cmp	r3, r6
   8071e:	d10a      	bne.n	80736 <pio_handler_process+0x3e>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   80720:	f854 1c08 	ldr.w	r1, [r4, #-8]
   80724:	4229      	tst	r1, r5
   80726:	d006      	beq.n	80736 <pio_handler_process+0x3e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   80728:	6823      	ldr	r3, [r4, #0]
   8072a:	4630      	mov	r0, r6
   8072c:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   8072e:	f854 3c08 	ldr.w	r3, [r4, #-8]
   80732:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   80736:	42bc      	cmp	r4, r7
   80738:	d002      	beq.n	80740 <pio_handler_process+0x48>
   8073a:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   8073c:	2d00      	cmp	r5, #0
   8073e:	d1eb      	bne.n	80718 <pio_handler_process+0x20>
   80740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80744:	0008057d 	.word	0x0008057d
   80748:	00080581 	.word	0x00080581
   8074c:	20070a5c 	.word	0x20070a5c

00080750 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   80750:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   80752:	4802      	ldr	r0, [pc, #8]	; (8075c <PIOA_Handler+0xc>)
   80754:	210b      	movs	r1, #11
   80756:	4b02      	ldr	r3, [pc, #8]	; (80760 <PIOA_Handler+0x10>)
   80758:	4798      	blx	r3
   8075a:	bd08      	pop	{r3, pc}
   8075c:	400e0e00 	.word	0x400e0e00
   80760:	000806f9 	.word	0x000806f9

00080764 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   80764:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   80766:	4802      	ldr	r0, [pc, #8]	; (80770 <PIOB_Handler+0xc>)
   80768:	210c      	movs	r1, #12
   8076a:	4b02      	ldr	r3, [pc, #8]	; (80774 <PIOB_Handler+0x10>)
   8076c:	4798      	blx	r3
   8076e:	bd08      	pop	{r3, pc}
   80770:	400e1000 	.word	0x400e1000
   80774:	000806f9 	.word	0x000806f9

00080778 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   80778:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   8077a:	4802      	ldr	r0, [pc, #8]	; (80784 <PIOC_Handler+0xc>)
   8077c:	210d      	movs	r1, #13
   8077e:	4b02      	ldr	r3, [pc, #8]	; (80788 <PIOC_Handler+0x10>)
   80780:	4798      	blx	r3
   80782:	bd08      	pop	{r3, pc}
   80784:	400e1200 	.word	0x400e1200
   80788:	000806f9 	.word	0x000806f9

0008078c <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   8078c:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   8078e:	4802      	ldr	r0, [pc, #8]	; (80798 <PIOD_Handler+0xc>)
   80790:	210e      	movs	r1, #14
   80792:	4b02      	ldr	r3, [pc, #8]	; (8079c <PIOD_Handler+0x10>)
   80794:	4798      	blx	r3
   80796:	bd08      	pop	{r3, pc}
   80798:	400e1400 	.word	0x400e1400
   8079c:	000806f9 	.word	0x000806f9

000807a0 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   807a0:	4b17      	ldr	r3, [pc, #92]	; (80800 <pmc_switch_mck_to_pllack+0x60>)
   807a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   807a4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   807a8:	4310      	orrs	r0, r2
   807aa:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   807ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   807ae:	f013 0f08 	tst.w	r3, #8
   807b2:	d109      	bne.n	807c8 <pmc_switch_mck_to_pllack+0x28>
   807b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
   807b8:	4911      	ldr	r1, [pc, #68]	; (80800 <pmc_switch_mck_to_pllack+0x60>)
   807ba:	e001      	b.n	807c0 <pmc_switch_mck_to_pllack+0x20>
			--ul_timeout) {
		if (ul_timeout == 0) {
   807bc:	3b01      	subs	r3, #1
   807be:	d019      	beq.n	807f4 <pmc_switch_mck_to_pllack+0x54>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   807c0:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   807c2:	f012 0f08 	tst.w	r2, #8
   807c6:	d0f9      	beq.n	807bc <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   807c8:	4b0d      	ldr	r3, [pc, #52]	; (80800 <pmc_switch_mck_to_pllack+0x60>)
   807ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   807cc:	f022 0203 	bic.w	r2, r2, #3
   807d0:	f042 0202 	orr.w	r2, r2, #2
   807d4:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   807d6:	6e98      	ldr	r0, [r3, #104]	; 0x68
   807d8:	f010 0008 	ands.w	r0, r0, #8
   807dc:	d10c      	bne.n	807f8 <pmc_switch_mck_to_pllack+0x58>
   807de:	f44f 6300 	mov.w	r3, #2048	; 0x800
   807e2:	4907      	ldr	r1, [pc, #28]	; (80800 <pmc_switch_mck_to_pllack+0x60>)
   807e4:	e001      	b.n	807ea <pmc_switch_mck_to_pllack+0x4a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   807e6:	3b01      	subs	r3, #1
   807e8:	d008      	beq.n	807fc <pmc_switch_mck_to_pllack+0x5c>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   807ea:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   807ec:	f012 0f08 	tst.w	r2, #8
   807f0:	d0f9      	beq.n	807e6 <pmc_switch_mck_to_pllack+0x46>
   807f2:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   807f4:	2001      	movs	r0, #1
   807f6:	4770      	bx	lr
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   807f8:	2000      	movs	r0, #0
   807fa:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   807fc:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   807fe:	4770      	bx	lr
   80800:	400e0600 	.word	0x400e0600

00080804 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   80804:	b138      	cbz	r0, 80816 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80806:	4911      	ldr	r1, [pc, #68]	; (8084c <pmc_switch_mainck_to_xtal+0x48>)
   80808:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   8080a:	4a11      	ldr	r2, [pc, #68]	; (80850 <pmc_switch_mainck_to_xtal+0x4c>)
   8080c:	401a      	ands	r2, r3
   8080e:	4b11      	ldr	r3, [pc, #68]	; (80854 <pmc_switch_mainck_to_xtal+0x50>)
   80810:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80812:	620b      	str	r3, [r1, #32]
   80814:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80816:	4a0d      	ldr	r2, [pc, #52]	; (8084c <pmc_switch_mainck_to_xtal+0x48>)
   80818:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   8081a:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   8081e:	f023 0303 	bic.w	r3, r3, #3
   80822:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   80826:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   8082a:	0209      	lsls	r1, r1, #8
   8082c:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   8082e:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80830:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   80832:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80834:	f013 0f01 	tst.w	r3, #1
   80838:	d0fb      	beq.n	80832 <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   8083a:	4a04      	ldr	r2, [pc, #16]	; (8084c <pmc_switch_mainck_to_xtal+0x48>)
   8083c:	6a13      	ldr	r3, [r2, #32]
   8083e:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   80842:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   80846:	6213      	str	r3, [r2, #32]
   80848:	4770      	bx	lr
   8084a:	bf00      	nop
   8084c:	400e0600 	.word	0x400e0600
   80850:	fec8fffc 	.word	0xfec8fffc
   80854:	01370002 	.word	0x01370002

00080858 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   80858:	4b02      	ldr	r3, [pc, #8]	; (80864 <pmc_osc_is_ready_mainck+0xc>)
   8085a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   8085c:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   80860:	4770      	bx	lr
   80862:	bf00      	nop
   80864:	400e0600 	.word	0x400e0600

00080868 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   80868:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   8086c:	4b01      	ldr	r3, [pc, #4]	; (80874 <pmc_disable_pllack+0xc>)
   8086e:	629a      	str	r2, [r3, #40]	; 0x28
   80870:	4770      	bx	lr
   80872:	bf00      	nop
   80874:	400e0600 	.word	0x400e0600

00080878 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   80878:	4b02      	ldr	r3, [pc, #8]	; (80884 <pmc_is_locked_pllack+0xc>)
   8087a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   8087c:	f000 0002 	and.w	r0, r0, #2
   80880:	4770      	bx	lr
   80882:	bf00      	nop
   80884:	400e0600 	.word	0x400e0600

00080888 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   80888:	282c      	cmp	r0, #44	; 0x2c
   8088a:	d820      	bhi.n	808ce <pmc_enable_periph_clk+0x46>
		return 1;
	}

	if (ul_id < 32) {
   8088c:	281f      	cmp	r0, #31
   8088e:	d80d      	bhi.n	808ac <pmc_enable_periph_clk+0x24>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   80890:	4b12      	ldr	r3, [pc, #72]	; (808dc <pmc_enable_periph_clk+0x54>)
   80892:	699a      	ldr	r2, [r3, #24]
   80894:	2301      	movs	r3, #1
   80896:	4083      	lsls	r3, r0
   80898:	401a      	ands	r2, r3
   8089a:	4293      	cmp	r3, r2
   8089c:	d019      	beq.n	808d2 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER0 = 1 << ul_id;
   8089e:	2301      	movs	r3, #1
   808a0:	fa03 f000 	lsl.w	r0, r3, r0
   808a4:	4b0d      	ldr	r3, [pc, #52]	; (808dc <pmc_enable_periph_clk+0x54>)
   808a6:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   808a8:	2000      	movs	r0, #0
   808aa:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   808ac:	4b0b      	ldr	r3, [pc, #44]	; (808dc <pmc_enable_periph_clk+0x54>)
   808ae:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
   808b2:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   808b4:	2301      	movs	r3, #1
   808b6:	4083      	lsls	r3, r0
   808b8:	401a      	ands	r2, r3
   808ba:	4293      	cmp	r3, r2
   808bc:	d00b      	beq.n	808d6 <pmc_enable_periph_clk+0x4e>
			PMC->PMC_PCER1 = 1 << ul_id;
   808be:	2301      	movs	r3, #1
   808c0:	fa03 f000 	lsl.w	r0, r3, r0
   808c4:	4b05      	ldr	r3, [pc, #20]	; (808dc <pmc_enable_periph_clk+0x54>)
   808c6:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   808ca:	2000      	movs	r0, #0
   808cc:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   808ce:	2001      	movs	r0, #1
   808d0:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   808d2:	2000      	movs	r0, #0
   808d4:	4770      	bx	lr
   808d6:	2000      	movs	r0, #0
}
   808d8:	4770      	bx	lr
   808da:	bf00      	nop
   808dc:	400e0600 	.word	0x400e0600

000808e0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   808e0:	e7fe      	b.n	808e0 <Dummy_Handler>
   808e2:	bf00      	nop

000808e4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   808e4:	b510      	push	{r4, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   808e6:	4b1e      	ldr	r3, [pc, #120]	; (80960 <Reset_Handler+0x7c>)
   808e8:	4a1e      	ldr	r2, [pc, #120]	; (80964 <Reset_Handler+0x80>)
   808ea:	429a      	cmp	r2, r3
   808ec:	d003      	beq.n	808f6 <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   808ee:	4b1e      	ldr	r3, [pc, #120]	; (80968 <Reset_Handler+0x84>)
   808f0:	4a1b      	ldr	r2, [pc, #108]	; (80960 <Reset_Handler+0x7c>)
   808f2:	429a      	cmp	r2, r3
   808f4:	d304      	bcc.n	80900 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   808f6:	4b1d      	ldr	r3, [pc, #116]	; (8096c <Reset_Handler+0x88>)
   808f8:	4a1d      	ldr	r2, [pc, #116]	; (80970 <Reset_Handler+0x8c>)
   808fa:	429a      	cmp	r2, r3
   808fc:	d30f      	bcc.n	8091e <Reset_Handler+0x3a>
   808fe:	e01a      	b.n	80936 <Reset_Handler+0x52>
   80900:	4b1c      	ldr	r3, [pc, #112]	; (80974 <Reset_Handler+0x90>)
   80902:	4c1d      	ldr	r4, [pc, #116]	; (80978 <Reset_Handler+0x94>)
   80904:	1ae4      	subs	r4, r4, r3
   80906:	f024 0403 	bic.w	r4, r4, #3
   8090a:	3404      	adds	r4, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   8090c:	2300      	movs	r3, #0
			*pDest++ = *pSrc++;
   8090e:	4814      	ldr	r0, [pc, #80]	; (80960 <Reset_Handler+0x7c>)
   80910:	4914      	ldr	r1, [pc, #80]	; (80964 <Reset_Handler+0x80>)
   80912:	585a      	ldr	r2, [r3, r1]
   80914:	501a      	str	r2, [r3, r0]
   80916:	3304      	adds	r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   80918:	42a3      	cmp	r3, r4
   8091a:	d1fa      	bne.n	80912 <Reset_Handler+0x2e>
   8091c:	e7eb      	b.n	808f6 <Reset_Handler+0x12>
   8091e:	4b17      	ldr	r3, [pc, #92]	; (8097c <Reset_Handler+0x98>)
   80920:	4917      	ldr	r1, [pc, #92]	; (80980 <Reset_Handler+0x9c>)
   80922:	1ac9      	subs	r1, r1, r3
   80924:	f021 0103 	bic.w	r1, r1, #3
   80928:	1d1a      	adds	r2, r3, #4
   8092a:	4411      	add	r1, r2
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   8092c:	2200      	movs	r2, #0
   8092e:	f843 2f04 	str.w	r2, [r3, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80932:	428b      	cmp	r3, r1
   80934:	d1fb      	bne.n	8092e <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   80936:	4a13      	ldr	r2, [pc, #76]	; (80984 <Reset_Handler+0xa0>)
   80938:	f022 4360 	bic.w	r3, r2, #3758096384	; 0xe0000000
   8093c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   80940:	4911      	ldr	r1, [pc, #68]	; (80988 <Reset_Handler+0xa4>)
   80942:	608b      	str	r3, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   80944:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
   80948:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
   8094c:	d203      	bcs.n	80956 <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   8094e:	688a      	ldr	r2, [r1, #8]
   80950:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   80954:	608a      	str	r2, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   80956:	4b0d      	ldr	r3, [pc, #52]	; (8098c <Reset_Handler+0xa8>)
   80958:	4798      	blx	r3

	/* Branch to main function */
	main();
   8095a:	4b0d      	ldr	r3, [pc, #52]	; (80990 <Reset_Handler+0xac>)
   8095c:	4798      	blx	r3
   8095e:	e7fe      	b.n	8095e <Reset_Handler+0x7a>
   80960:	20070000 	.word	0x20070000
   80964:	00083d58 	.word	0x00083d58
   80968:	2007099c 	.word	0x2007099c
   8096c:	20070b14 	.word	0x20070b14
   80970:	2007099c 	.word	0x2007099c
   80974:	20070004 	.word	0x20070004
   80978:	2007099f 	.word	0x2007099f
   8097c:	20070998 	.word	0x20070998
   80980:	20070b0f 	.word	0x20070b0f
   80984:	00080000 	.word	0x00080000
   80988:	e000ed00 	.word	0xe000ed00
   8098c:	00080d0d 	.word	0x00080d0d
   80990:	00080c51 	.word	0x00080c51

00080994 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   80994:	4b3e      	ldr	r3, [pc, #248]	; (80a90 <SystemCoreClockUpdate+0xfc>)
   80996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80998:	f003 0303 	and.w	r3, r3, #3
   8099c:	2b03      	cmp	r3, #3
   8099e:	d85f      	bhi.n	80a60 <SystemCoreClockUpdate+0xcc>
   809a0:	e8df f003 	tbb	[pc, r3]
   809a4:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   809a8:	4b3a      	ldr	r3, [pc, #232]	; (80a94 <SystemCoreClockUpdate+0x100>)
   809aa:	695b      	ldr	r3, [r3, #20]
   809ac:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   809b0:	bf14      	ite	ne
   809b2:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   809b6:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   809ba:	4b37      	ldr	r3, [pc, #220]	; (80a98 <SystemCoreClockUpdate+0x104>)
   809bc:	601a      	str	r2, [r3, #0]
   809be:	e04f      	b.n	80a60 <SystemCoreClockUpdate+0xcc>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   809c0:	4b33      	ldr	r3, [pc, #204]	; (80a90 <SystemCoreClockUpdate+0xfc>)
   809c2:	6a1b      	ldr	r3, [r3, #32]
   809c4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   809c8:	d003      	beq.n	809d2 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   809ca:	4a34      	ldr	r2, [pc, #208]	; (80a9c <SystemCoreClockUpdate+0x108>)
   809cc:	4b32      	ldr	r3, [pc, #200]	; (80a98 <SystemCoreClockUpdate+0x104>)
   809ce:	601a      	str	r2, [r3, #0]
   809d0:	e046      	b.n	80a60 <SystemCoreClockUpdate+0xcc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   809d2:	4a33      	ldr	r2, [pc, #204]	; (80aa0 <SystemCoreClockUpdate+0x10c>)
   809d4:	4b30      	ldr	r3, [pc, #192]	; (80a98 <SystemCoreClockUpdate+0x104>)
   809d6:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   809d8:	4b2d      	ldr	r3, [pc, #180]	; (80a90 <SystemCoreClockUpdate+0xfc>)
   809da:	6a1b      	ldr	r3, [r3, #32]
   809dc:	f003 0370 	and.w	r3, r3, #112	; 0x70
   809e0:	2b10      	cmp	r3, #16
   809e2:	d002      	beq.n	809ea <SystemCoreClockUpdate+0x56>
   809e4:	2b20      	cmp	r3, #32
   809e6:	d004      	beq.n	809f2 <SystemCoreClockUpdate+0x5e>
   809e8:	e03a      	b.n	80a60 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   809ea:	4a2e      	ldr	r2, [pc, #184]	; (80aa4 <SystemCoreClockUpdate+0x110>)
   809ec:	4b2a      	ldr	r3, [pc, #168]	; (80a98 <SystemCoreClockUpdate+0x104>)
   809ee:	601a      	str	r2, [r3, #0]
				break;
   809f0:	e036      	b.n	80a60 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   809f2:	4a2a      	ldr	r2, [pc, #168]	; (80a9c <SystemCoreClockUpdate+0x108>)
   809f4:	4b28      	ldr	r3, [pc, #160]	; (80a98 <SystemCoreClockUpdate+0x104>)
   809f6:	601a      	str	r2, [r3, #0]
				break;
   809f8:	e032      	b.n	80a60 <SystemCoreClockUpdate+0xcc>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   809fa:	4b25      	ldr	r3, [pc, #148]	; (80a90 <SystemCoreClockUpdate+0xfc>)
   809fc:	6a1b      	ldr	r3, [r3, #32]
   809fe:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80a02:	d003      	beq.n	80a0c <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80a04:	4a25      	ldr	r2, [pc, #148]	; (80a9c <SystemCoreClockUpdate+0x108>)
   80a06:	4b24      	ldr	r3, [pc, #144]	; (80a98 <SystemCoreClockUpdate+0x104>)
   80a08:	601a      	str	r2, [r3, #0]
   80a0a:	e012      	b.n	80a32 <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80a0c:	4a24      	ldr	r2, [pc, #144]	; (80aa0 <SystemCoreClockUpdate+0x10c>)
   80a0e:	4b22      	ldr	r3, [pc, #136]	; (80a98 <SystemCoreClockUpdate+0x104>)
   80a10:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80a12:	4b1f      	ldr	r3, [pc, #124]	; (80a90 <SystemCoreClockUpdate+0xfc>)
   80a14:	6a1b      	ldr	r3, [r3, #32]
   80a16:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80a1a:	2b10      	cmp	r3, #16
   80a1c:	d002      	beq.n	80a24 <SystemCoreClockUpdate+0x90>
   80a1e:	2b20      	cmp	r3, #32
   80a20:	d004      	beq.n	80a2c <SystemCoreClockUpdate+0x98>
   80a22:	e006      	b.n	80a32 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   80a24:	4a1f      	ldr	r2, [pc, #124]	; (80aa4 <SystemCoreClockUpdate+0x110>)
   80a26:	4b1c      	ldr	r3, [pc, #112]	; (80a98 <SystemCoreClockUpdate+0x104>)
   80a28:	601a      	str	r2, [r3, #0]
				break;
   80a2a:	e002      	b.n	80a32 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   80a2c:	4a1b      	ldr	r2, [pc, #108]	; (80a9c <SystemCoreClockUpdate+0x108>)
   80a2e:	4b1a      	ldr	r3, [pc, #104]	; (80a98 <SystemCoreClockUpdate+0x104>)
   80a30:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   80a32:	4b17      	ldr	r3, [pc, #92]	; (80a90 <SystemCoreClockUpdate+0xfc>)
   80a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80a36:	f003 0303 	and.w	r3, r3, #3
   80a3a:	2b02      	cmp	r3, #2
   80a3c:	d10d      	bne.n	80a5a <SystemCoreClockUpdate+0xc6>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80a3e:	4b14      	ldr	r3, [pc, #80]	; (80a90 <SystemCoreClockUpdate+0xfc>)
   80a40:	6a98      	ldr	r0, [r3, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80a42:	6a99      	ldr	r1, [r3, #40]	; 0x28
   80a44:	4b14      	ldr	r3, [pc, #80]	; (80a98 <SystemCoreClockUpdate+0x104>)
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80a46:	f3c0 400a 	ubfx	r0, r0, #16, #11
   80a4a:	681a      	ldr	r2, [r3, #0]
   80a4c:	fb00 2202 	mla	r2, r0, r2, r2
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80a50:	b2c9      	uxtb	r1, r1
   80a52:	fbb2 f2f1 	udiv	r2, r2, r1
   80a56:	601a      	str	r2, [r3, #0]
   80a58:	e002      	b.n	80a60 <SystemCoreClockUpdate+0xcc>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   80a5a:	4a13      	ldr	r2, [pc, #76]	; (80aa8 <SystemCoreClockUpdate+0x114>)
   80a5c:	4b0e      	ldr	r3, [pc, #56]	; (80a98 <SystemCoreClockUpdate+0x104>)
   80a5e:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   80a60:	4b0b      	ldr	r3, [pc, #44]	; (80a90 <SystemCoreClockUpdate+0xfc>)
   80a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80a64:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80a68:	2b70      	cmp	r3, #112	; 0x70
   80a6a:	d107      	bne.n	80a7c <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
   80a6c:	4b0a      	ldr	r3, [pc, #40]	; (80a98 <SystemCoreClockUpdate+0x104>)
   80a6e:	681a      	ldr	r2, [r3, #0]
   80a70:	490e      	ldr	r1, [pc, #56]	; (80aac <SystemCoreClockUpdate+0x118>)
   80a72:	fba1 0202 	umull	r0, r2, r1, r2
   80a76:	0852      	lsrs	r2, r2, #1
   80a78:	601a      	str	r2, [r3, #0]
   80a7a:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   80a7c:	4b04      	ldr	r3, [pc, #16]	; (80a90 <SystemCoreClockUpdate+0xfc>)
   80a7e:	6b19      	ldr	r1, [r3, #48]	; 0x30
   80a80:	4b05      	ldr	r3, [pc, #20]	; (80a98 <SystemCoreClockUpdate+0x104>)
   80a82:	f3c1 1102 	ubfx	r1, r1, #4, #3
   80a86:	681a      	ldr	r2, [r3, #0]
   80a88:	40ca      	lsrs	r2, r1
   80a8a:	601a      	str	r2, [r3, #0]
   80a8c:	4770      	bx	lr
   80a8e:	bf00      	nop
   80a90:	400e0600 	.word	0x400e0600
   80a94:	400e1a10 	.word	0x400e1a10
   80a98:	20070130 	.word	0x20070130
   80a9c:	00b71b00 	.word	0x00b71b00
   80aa0:	003d0900 	.word	0x003d0900
   80aa4:	007a1200 	.word	0x007a1200
   80aa8:	0e4e1c00 	.word	0x0e4e1c00
   80aac:	aaaaaaab 	.word	0xaaaaaaab

00080ab0 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   80ab0:	4b09      	ldr	r3, [pc, #36]	; (80ad8 <_sbrk+0x28>)
   80ab2:	681b      	ldr	r3, [r3, #0]
   80ab4:	b913      	cbnz	r3, 80abc <_sbrk+0xc>
		heap = (unsigned char *)&_end;
   80ab6:	4a09      	ldr	r2, [pc, #36]	; (80adc <_sbrk+0x2c>)
   80ab8:	4b07      	ldr	r3, [pc, #28]	; (80ad8 <_sbrk+0x28>)
   80aba:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   80abc:	4b06      	ldr	r3, [pc, #24]	; (80ad8 <_sbrk+0x28>)
   80abe:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   80ac0:	181a      	adds	r2, r3, r0
   80ac2:	4907      	ldr	r1, [pc, #28]	; (80ae0 <_sbrk+0x30>)
   80ac4:	4291      	cmp	r1, r2
   80ac6:	db04      	blt.n	80ad2 <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
   80ac8:	4610      	mov	r0, r2
   80aca:	4a03      	ldr	r2, [pc, #12]	; (80ad8 <_sbrk+0x28>)
   80acc:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   80ace:	4618      	mov	r0, r3
   80ad0:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
   80ad2:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
   80ad6:	4770      	bx	lr
   80ad8:	20070acc 	.word	0x20070acc
   80adc:	20072b18 	.word	0x20072b18
   80ae0:	20087ffc 	.word	0x20087ffc

00080ae4 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   80ae4:	f04f 30ff 	mov.w	r0, #4294967295
   80ae8:	4770      	bx	lr
   80aea:	bf00      	nop

00080aec <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   80aec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   80af0:	604b      	str	r3, [r1, #4]

	return 0;
}
   80af2:	2000      	movs	r0, #0
   80af4:	4770      	bx	lr
   80af6:	bf00      	nop

00080af8 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   80af8:	2001      	movs	r0, #1
   80afa:	4770      	bx	lr

00080afc <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   80afc:	2000      	movs	r0, #0
   80afe:	4770      	bx	lr

00080b00 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   80b00:	b5f0      	push	{r4, r5, r6, r7, lr}
   80b02:	b083      	sub	sp, #12
   80b04:	4604      	mov	r4, r0
   80b06:	460d      	mov	r5, r1
	uint32_t val = 0;
   80b08:	2300      	movs	r3, #0
   80b0a:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   80b0c:	4b1f      	ldr	r3, [pc, #124]	; (80b8c <usart_serial_getchar+0x8c>)
   80b0e:	4298      	cmp	r0, r3
   80b10:	d107      	bne.n	80b22 <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
   80b12:	461f      	mov	r7, r3
   80b14:	4e1e      	ldr	r6, [pc, #120]	; (80b90 <usart_serial_getchar+0x90>)
   80b16:	4638      	mov	r0, r7
   80b18:	4629      	mov	r1, r5
   80b1a:	47b0      	blx	r6
   80b1c:	2800      	cmp	r0, #0
   80b1e:	d1fa      	bne.n	80b16 <usart_serial_getchar+0x16>
   80b20:	e019      	b.n	80b56 <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80b22:	4b1c      	ldr	r3, [pc, #112]	; (80b94 <usart_serial_getchar+0x94>)
   80b24:	4298      	cmp	r0, r3
   80b26:	d109      	bne.n	80b3c <usart_serial_getchar+0x3c>
		while (usart_read(p_usart, &val));
   80b28:	461f      	mov	r7, r3
   80b2a:	4e1b      	ldr	r6, [pc, #108]	; (80b98 <usart_serial_getchar+0x98>)
   80b2c:	4638      	mov	r0, r7
   80b2e:	a901      	add	r1, sp, #4
   80b30:	47b0      	blx	r6
   80b32:	2800      	cmp	r0, #0
   80b34:	d1fa      	bne.n	80b2c <usart_serial_getchar+0x2c>
		*data = (uint8_t)(val & 0xFF);
   80b36:	9b01      	ldr	r3, [sp, #4]
   80b38:	702b      	strb	r3, [r5, #0]
   80b3a:	e019      	b.n	80b70 <usart_serial_getchar+0x70>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80b3c:	4b17      	ldr	r3, [pc, #92]	; (80b9c <usart_serial_getchar+0x9c>)
   80b3e:	4298      	cmp	r0, r3
   80b40:	d109      	bne.n	80b56 <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
   80b42:	461e      	mov	r6, r3
   80b44:	4c14      	ldr	r4, [pc, #80]	; (80b98 <usart_serial_getchar+0x98>)
   80b46:	4630      	mov	r0, r6
   80b48:	a901      	add	r1, sp, #4
   80b4a:	47a0      	blx	r4
   80b4c:	2800      	cmp	r0, #0
   80b4e:	d1fa      	bne.n	80b46 <usart_serial_getchar+0x46>
		*data = (uint8_t)(val & 0xFF);
   80b50:	9b01      	ldr	r3, [sp, #4]
   80b52:	702b      	strb	r3, [r5, #0]
   80b54:	e018      	b.n	80b88 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80b56:	4b12      	ldr	r3, [pc, #72]	; (80ba0 <usart_serial_getchar+0xa0>)
   80b58:	429c      	cmp	r4, r3
   80b5a:	d109      	bne.n	80b70 <usart_serial_getchar+0x70>
		while (usart_read(p_usart, &val));
   80b5c:	461e      	mov	r6, r3
   80b5e:	4c0e      	ldr	r4, [pc, #56]	; (80b98 <usart_serial_getchar+0x98>)
   80b60:	4630      	mov	r0, r6
   80b62:	a901      	add	r1, sp, #4
   80b64:	47a0      	blx	r4
   80b66:	2800      	cmp	r0, #0
   80b68:	d1fa      	bne.n	80b60 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
   80b6a:	9b01      	ldr	r3, [sp, #4]
   80b6c:	702b      	strb	r3, [r5, #0]
   80b6e:	e00b      	b.n	80b88 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80b70:	4b0c      	ldr	r3, [pc, #48]	; (80ba4 <usart_serial_getchar+0xa4>)
   80b72:	429c      	cmp	r4, r3
   80b74:	d108      	bne.n	80b88 <usart_serial_getchar+0x88>
		while (usart_read(p_usart, &val));
   80b76:	461e      	mov	r6, r3
   80b78:	4c07      	ldr	r4, [pc, #28]	; (80b98 <usart_serial_getchar+0x98>)
   80b7a:	4630      	mov	r0, r6
   80b7c:	a901      	add	r1, sp, #4
   80b7e:	47a0      	blx	r4
   80b80:	2800      	cmp	r0, #0
   80b82:	d1fa      	bne.n	80b7a <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
   80b84:	9b01      	ldr	r3, [sp, #4]
   80b86:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   80b88:	b003      	add	sp, #12
   80b8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80b8c:	400e0800 	.word	0x400e0800
   80b90:	00080375 	.word	0x00080375
   80b94:	40098000 	.word	0x40098000
   80b98:	0008019d 	.word	0x0008019d
   80b9c:	4009c000 	.word	0x4009c000
   80ba0:	400a0000 	.word	0x400a0000
   80ba4:	400a4000 	.word	0x400a4000

00080ba8 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   80ba8:	b570      	push	{r4, r5, r6, lr}
   80baa:	460c      	mov	r4, r1
#ifdef UART
	if (UART == (Uart*)p_usart) {
   80bac:	4b21      	ldr	r3, [pc, #132]	; (80c34 <usart_serial_putchar+0x8c>)
   80bae:	4298      	cmp	r0, r3
   80bb0:	d107      	bne.n	80bc2 <usart_serial_putchar+0x1a>
		while (uart_write((Uart*)p_usart, c)!=0);
   80bb2:	461e      	mov	r6, r3
   80bb4:	4d20      	ldr	r5, [pc, #128]	; (80c38 <usart_serial_putchar+0x90>)
   80bb6:	4630      	mov	r0, r6
   80bb8:	4621      	mov	r1, r4
   80bba:	47a8      	blx	r5
   80bbc:	2800      	cmp	r0, #0
   80bbe:	d1fa      	bne.n	80bb6 <usart_serial_putchar+0xe>
   80bc0:	e02b      	b.n	80c1a <usart_serial_putchar+0x72>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80bc2:	4b1e      	ldr	r3, [pc, #120]	; (80c3c <usart_serial_putchar+0x94>)
   80bc4:	4298      	cmp	r0, r3
   80bc6:	d107      	bne.n	80bd8 <usart_serial_putchar+0x30>
		while (usart_write(p_usart, c)!=0);
   80bc8:	461e      	mov	r6, r3
   80bca:	4d1d      	ldr	r5, [pc, #116]	; (80c40 <usart_serial_putchar+0x98>)
   80bcc:	4630      	mov	r0, r6
   80bce:	4621      	mov	r1, r4
   80bd0:	47a8      	blx	r5
   80bd2:	2800      	cmp	r0, #0
   80bd4:	d1fa      	bne.n	80bcc <usart_serial_putchar+0x24>
   80bd6:	e022      	b.n	80c1e <usart_serial_putchar+0x76>
		return 1;
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80bd8:	4b1a      	ldr	r3, [pc, #104]	; (80c44 <usart_serial_putchar+0x9c>)
   80bda:	4298      	cmp	r0, r3
   80bdc:	d107      	bne.n	80bee <usart_serial_putchar+0x46>
		while (usart_write(p_usart, c)!=0);
   80bde:	461e      	mov	r6, r3
   80be0:	4d17      	ldr	r5, [pc, #92]	; (80c40 <usart_serial_putchar+0x98>)
   80be2:	4630      	mov	r0, r6
   80be4:	4621      	mov	r1, r4
   80be6:	47a8      	blx	r5
   80be8:	2800      	cmp	r0, #0
   80bea:	d1fa      	bne.n	80be2 <usart_serial_putchar+0x3a>
   80bec:	e019      	b.n	80c22 <usart_serial_putchar+0x7a>
		return 1;
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80bee:	4b16      	ldr	r3, [pc, #88]	; (80c48 <usart_serial_putchar+0xa0>)
   80bf0:	4298      	cmp	r0, r3
   80bf2:	d107      	bne.n	80c04 <usart_serial_putchar+0x5c>
		while (usart_write(p_usart, c)!=0);
   80bf4:	461e      	mov	r6, r3
   80bf6:	4d12      	ldr	r5, [pc, #72]	; (80c40 <usart_serial_putchar+0x98>)
   80bf8:	4630      	mov	r0, r6
   80bfa:	4621      	mov	r1, r4
   80bfc:	47a8      	blx	r5
   80bfe:	2800      	cmp	r0, #0
   80c00:	d1fa      	bne.n	80bf8 <usart_serial_putchar+0x50>
   80c02:	e010      	b.n	80c26 <usart_serial_putchar+0x7e>
		return 1;
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80c04:	4b11      	ldr	r3, [pc, #68]	; (80c4c <usart_serial_putchar+0xa4>)
   80c06:	4298      	cmp	r0, r3
   80c08:	d10f      	bne.n	80c2a <usart_serial_putchar+0x82>
		while (usart_write(p_usart, c)!=0);
   80c0a:	461e      	mov	r6, r3
   80c0c:	4d0c      	ldr	r5, [pc, #48]	; (80c40 <usart_serial_putchar+0x98>)
   80c0e:	4630      	mov	r0, r6
   80c10:	4621      	mov	r1, r4
   80c12:	47a8      	blx	r5
   80c14:	2800      	cmp	r0, #0
   80c16:	d1fa      	bne.n	80c0e <usart_serial_putchar+0x66>
   80c18:	e009      	b.n	80c2e <usart_serial_putchar+0x86>
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
   80c1a:	2001      	movs	r0, #1
   80c1c:	bd70      	pop	{r4, r5, r6, pc}
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   80c1e:	2001      	movs	r0, #1
   80c20:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   80c22:	2001      	movs	r0, #1
   80c24:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   80c26:	2001      	movs	r0, #1
   80c28:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   80c2a:	2000      	movs	r0, #0
   80c2c:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   80c2e:	2001      	movs	r0, #1
	}
# endif
#endif /* ifdef USART */

	return 0;
}
   80c30:	bd70      	pop	{r4, r5, r6, pc}
   80c32:	bf00      	nop
   80c34:	400e0800 	.word	0x400e0800
   80c38:	00080365 	.word	0x00080365
   80c3c:	40098000 	.word	0x40098000
   80c40:	00080189 	.word	0x00080189
   80c44:	4009c000 	.word	0x4009c000
   80c48:	400a0000 	.word	0x400a0000
   80c4c:	400a4000 	.word	0x400a4000

00080c50 <main>:
	printf("Console ready\n");
	printf("=============\n");
}

int main (void)
{
   80c50:	b570      	push	{r4, r5, r6, lr}
   80c52:	b084      	sub	sp, #16
	/* Insert system clock initialization code here (sysclk_init()). */
	sysclk_init();
   80c54:	4b1a      	ldr	r3, [pc, #104]	; (80cc0 <main+0x70>)
   80c56:	4798      	blx	r3
	board_init();
   80c58:	4b1a      	ldr	r3, [pc, #104]	; (80cc4 <main+0x74>)
   80c5a:	4798      	blx	r3
   80c5c:	2008      	movs	r0, #8
   80c5e:	4d1a      	ldr	r5, [pc, #104]	; (80cc8 <main+0x78>)
   80c60:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   80c62:	4c1a      	ldr	r4, [pc, #104]	; (80ccc <main+0x7c>)
   80c64:	4b1a      	ldr	r3, [pc, #104]	; (80cd0 <main+0x80>)
   80c66:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   80c68:	4a1a      	ldr	r2, [pc, #104]	; (80cd4 <main+0x84>)
   80c6a:	4b1b      	ldr	r3, [pc, #108]	; (80cd8 <main+0x88>)
   80c6c:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   80c6e:	4a1b      	ldr	r2, [pc, #108]	; (80cdc <main+0x8c>)
   80c70:	4b1b      	ldr	r3, [pc, #108]	; (80ce0 <main+0x90>)
   80c72:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   80c74:	4b1b      	ldr	r3, [pc, #108]	; (80ce4 <main+0x94>)
   80c76:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   80c78:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   80c7c:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   80c7e:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80c82:	9303      	str	r3, [sp, #12]
   80c84:	2008      	movs	r0, #8
   80c86:	47a8      	blx	r5
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   80c88:	4620      	mov	r0, r4
   80c8a:	a901      	add	r1, sp, #4
   80c8c:	4b16      	ldr	r3, [pc, #88]	; (80ce8 <main+0x98>)
   80c8e:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   80c90:	4d16      	ldr	r5, [pc, #88]	; (80cec <main+0x9c>)
   80c92:	682b      	ldr	r3, [r5, #0]
   80c94:	6898      	ldr	r0, [r3, #8]
   80c96:	2100      	movs	r1, #0
   80c98:	4c15      	ldr	r4, [pc, #84]	; (80cf0 <main+0xa0>)
   80c9a:	47a0      	blx	r4
	setbuf(stdin, NULL);
   80c9c:	682b      	ldr	r3, [r5, #0]
   80c9e:	6858      	ldr	r0, [r3, #4]
   80ca0:	2100      	movs	r1, #0
   80ca2:	47a0      	blx	r4

	/* Configure console UART. */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
	
	printf("Console ready\n");
   80ca4:	4813      	ldr	r0, [pc, #76]	; (80cf4 <main+0xa4>)
   80ca6:	4c14      	ldr	r4, [pc, #80]	; (80cf8 <main+0xa8>)
   80ca8:	47a0      	blx	r4
	printf("=============\n");
   80caa:	4814      	ldr	r0, [pc, #80]	; (80cfc <main+0xac>)
   80cac:	47a0      	blx	r4
{
	/* Insert system clock initialization code here (sysclk_init()). */
	sysclk_init();
	board_init();
	configure_console();
	TC0_init();
   80cae:	4b14      	ldr	r3, [pc, #80]	; (80d00 <main+0xb0>)
   80cb0:	4798      	blx	r3
	uint32_t value = 0;
	while (1)
	{
		value = read_counter_value();
   80cb2:	4e14      	ldr	r6, [pc, #80]	; (80d04 <main+0xb4>)
		printf("Counter value: %u\n", value);
   80cb4:	4d14      	ldr	r5, [pc, #80]	; (80d08 <main+0xb8>)
	configure_console();
	TC0_init();
	uint32_t value = 0;
	while (1)
	{
		value = read_counter_value();
   80cb6:	47b0      	blx	r6
   80cb8:	4601      	mov	r1, r0
		printf("Counter value: %u\n", value);
   80cba:	4628      	mov	r0, r5
   80cbc:	47a0      	blx	r4
   80cbe:	e7fa      	b.n	80cb6 <main+0x66>
   80cc0:	000803fd 	.word	0x000803fd
   80cc4:	00080461 	.word	0x00080461
   80cc8:	00080889 	.word	0x00080889
   80ccc:	400e0800 	.word	0x400e0800
   80cd0:	20070b0c 	.word	0x20070b0c
   80cd4:	00080ba9 	.word	0x00080ba9
   80cd8:	20070b08 	.word	0x20070b08
   80cdc:	00080b01 	.word	0x00080b01
   80ce0:	20070b04 	.word	0x20070b04
   80ce4:	0501bd00 	.word	0x0501bd00
   80ce8:	0008032d 	.word	0x0008032d
   80cec:	20070560 	.word	0x20070560
   80cf0:	00080e19 	.word	0x00080e19
   80cf4:	00083ca0 	.word	0x00083ca0
   80cf8:	00080d5d 	.word	0x00080d5d
   80cfc:	00083cb0 	.word	0x00083cb0
   80d00:	0008039d 	.word	0x0008039d
   80d04:	00080389 	.word	0x00080389
   80d08:	00083cc0 	.word	0x00083cc0

00080d0c <__libc_init_array>:
   80d0c:	b570      	push	{r4, r5, r6, lr}
   80d0e:	4e0f      	ldr	r6, [pc, #60]	; (80d4c <__libc_init_array+0x40>)
   80d10:	4d0f      	ldr	r5, [pc, #60]	; (80d50 <__libc_init_array+0x44>)
   80d12:	1b76      	subs	r6, r6, r5
   80d14:	10b6      	asrs	r6, r6, #2
   80d16:	d007      	beq.n	80d28 <__libc_init_array+0x1c>
   80d18:	3d04      	subs	r5, #4
   80d1a:	2400      	movs	r4, #0
   80d1c:	3401      	adds	r4, #1
   80d1e:	f855 3f04 	ldr.w	r3, [r5, #4]!
   80d22:	4798      	blx	r3
   80d24:	42a6      	cmp	r6, r4
   80d26:	d1f9      	bne.n	80d1c <__libc_init_array+0x10>
   80d28:	4e0a      	ldr	r6, [pc, #40]	; (80d54 <__libc_init_array+0x48>)
   80d2a:	4d0b      	ldr	r5, [pc, #44]	; (80d58 <__libc_init_array+0x4c>)
   80d2c:	f002 fffe 	bl	83d2c <_init>
   80d30:	1b76      	subs	r6, r6, r5
   80d32:	10b6      	asrs	r6, r6, #2
   80d34:	d008      	beq.n	80d48 <__libc_init_array+0x3c>
   80d36:	3d04      	subs	r5, #4
   80d38:	2400      	movs	r4, #0
   80d3a:	3401      	adds	r4, #1
   80d3c:	f855 3f04 	ldr.w	r3, [r5, #4]!
   80d40:	4798      	blx	r3
   80d42:	42a6      	cmp	r6, r4
   80d44:	d1f9      	bne.n	80d3a <__libc_init_array+0x2e>
   80d46:	bd70      	pop	{r4, r5, r6, pc}
   80d48:	bd70      	pop	{r4, r5, r6, pc}
   80d4a:	bf00      	nop
   80d4c:	00083d38 	.word	0x00083d38
   80d50:	00083d38 	.word	0x00083d38
   80d54:	00083d40 	.word	0x00083d40
   80d58:	00083d38 	.word	0x00083d38

00080d5c <iprintf>:
   80d5c:	b40f      	push	{r0, r1, r2, r3}
   80d5e:	b510      	push	{r4, lr}
   80d60:	4b07      	ldr	r3, [pc, #28]	; (80d80 <iprintf+0x24>)
   80d62:	b082      	sub	sp, #8
   80d64:	ac04      	add	r4, sp, #16
   80d66:	f854 2b04 	ldr.w	r2, [r4], #4
   80d6a:	6818      	ldr	r0, [r3, #0]
   80d6c:	4623      	mov	r3, r4
   80d6e:	6881      	ldr	r1, [r0, #8]
   80d70:	9401      	str	r4, [sp, #4]
   80d72:	f000 f915 	bl	80fa0 <_vfiprintf_r>
   80d76:	b002      	add	sp, #8
   80d78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80d7c:	b004      	add	sp, #16
   80d7e:	4770      	bx	lr
   80d80:	20070560 	.word	0x20070560

00080d84 <memset>:
   80d84:	b4f0      	push	{r4, r5, r6, r7}
   80d86:	0784      	lsls	r4, r0, #30
   80d88:	d043      	beq.n	80e12 <memset+0x8e>
   80d8a:	1e54      	subs	r4, r2, #1
   80d8c:	2a00      	cmp	r2, #0
   80d8e:	d03e      	beq.n	80e0e <memset+0x8a>
   80d90:	b2cd      	uxtb	r5, r1
   80d92:	4603      	mov	r3, r0
   80d94:	e003      	b.n	80d9e <memset+0x1a>
   80d96:	1e62      	subs	r2, r4, #1
   80d98:	2c00      	cmp	r4, #0
   80d9a:	d038      	beq.n	80e0e <memset+0x8a>
   80d9c:	4614      	mov	r4, r2
   80d9e:	f803 5b01 	strb.w	r5, [r3], #1
   80da2:	079a      	lsls	r2, r3, #30
   80da4:	d1f7      	bne.n	80d96 <memset+0x12>
   80da6:	2c03      	cmp	r4, #3
   80da8:	d92a      	bls.n	80e00 <memset+0x7c>
   80daa:	b2cd      	uxtb	r5, r1
   80dac:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   80db0:	2c0f      	cmp	r4, #15
   80db2:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   80db6:	d915      	bls.n	80de4 <memset+0x60>
   80db8:	f1a4 0710 	sub.w	r7, r4, #16
   80dbc:	093f      	lsrs	r7, r7, #4
   80dbe:	f103 0610 	add.w	r6, r3, #16
   80dc2:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   80dc6:	461a      	mov	r2, r3
   80dc8:	6015      	str	r5, [r2, #0]
   80dca:	6055      	str	r5, [r2, #4]
   80dcc:	6095      	str	r5, [r2, #8]
   80dce:	60d5      	str	r5, [r2, #12]
   80dd0:	3210      	adds	r2, #16
   80dd2:	42b2      	cmp	r2, r6
   80dd4:	d1f8      	bne.n	80dc8 <memset+0x44>
   80dd6:	f004 040f 	and.w	r4, r4, #15
   80dda:	3701      	adds	r7, #1
   80ddc:	2c03      	cmp	r4, #3
   80dde:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   80de2:	d90d      	bls.n	80e00 <memset+0x7c>
   80de4:	461e      	mov	r6, r3
   80de6:	4622      	mov	r2, r4
   80de8:	3a04      	subs	r2, #4
   80dea:	2a03      	cmp	r2, #3
   80dec:	f846 5b04 	str.w	r5, [r6], #4
   80df0:	d8fa      	bhi.n	80de8 <memset+0x64>
   80df2:	1f22      	subs	r2, r4, #4
   80df4:	f022 0203 	bic.w	r2, r2, #3
   80df8:	3204      	adds	r2, #4
   80dfa:	4413      	add	r3, r2
   80dfc:	f004 0403 	and.w	r4, r4, #3
   80e00:	b12c      	cbz	r4, 80e0e <memset+0x8a>
   80e02:	b2c9      	uxtb	r1, r1
   80e04:	441c      	add	r4, r3
   80e06:	f803 1b01 	strb.w	r1, [r3], #1
   80e0a:	42a3      	cmp	r3, r4
   80e0c:	d1fb      	bne.n	80e06 <memset+0x82>
   80e0e:	bcf0      	pop	{r4, r5, r6, r7}
   80e10:	4770      	bx	lr
   80e12:	4614      	mov	r4, r2
   80e14:	4603      	mov	r3, r0
   80e16:	e7c6      	b.n	80da6 <memset+0x22>

00080e18 <setbuf>:
   80e18:	2900      	cmp	r1, #0
   80e1a:	bf0c      	ite	eq
   80e1c:	2202      	moveq	r2, #2
   80e1e:	2200      	movne	r2, #0
   80e20:	f44f 6380 	mov.w	r3, #1024	; 0x400
   80e24:	f000 b800 	b.w	80e28 <setvbuf>

00080e28 <setvbuf>:
   80e28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80e2c:	4d3c      	ldr	r5, [pc, #240]	; (80f20 <setvbuf+0xf8>)
   80e2e:	4604      	mov	r4, r0
   80e30:	682d      	ldr	r5, [r5, #0]
   80e32:	4688      	mov	r8, r1
   80e34:	4616      	mov	r6, r2
   80e36:	461f      	mov	r7, r3
   80e38:	b115      	cbz	r5, 80e40 <setvbuf+0x18>
   80e3a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   80e3c:	2b00      	cmp	r3, #0
   80e3e:	d04f      	beq.n	80ee0 <setvbuf+0xb8>
   80e40:	2e02      	cmp	r6, #2
   80e42:	d830      	bhi.n	80ea6 <setvbuf+0x7e>
   80e44:	2f00      	cmp	r7, #0
   80e46:	db2e      	blt.n	80ea6 <setvbuf+0x7e>
   80e48:	4628      	mov	r0, r5
   80e4a:	4621      	mov	r1, r4
   80e4c:	f001 f826 	bl	81e9c <_fflush_r>
   80e50:	89a3      	ldrh	r3, [r4, #12]
   80e52:	2200      	movs	r2, #0
   80e54:	6062      	str	r2, [r4, #4]
   80e56:	61a2      	str	r2, [r4, #24]
   80e58:	061a      	lsls	r2, r3, #24
   80e5a:	d428      	bmi.n	80eae <setvbuf+0x86>
   80e5c:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   80e60:	b29b      	uxth	r3, r3
   80e62:	2e02      	cmp	r6, #2
   80e64:	81a3      	strh	r3, [r4, #12]
   80e66:	d02d      	beq.n	80ec4 <setvbuf+0x9c>
   80e68:	f1b8 0f00 	cmp.w	r8, #0
   80e6c:	d03c      	beq.n	80ee8 <setvbuf+0xc0>
   80e6e:	2e01      	cmp	r6, #1
   80e70:	d013      	beq.n	80e9a <setvbuf+0x72>
   80e72:	b29b      	uxth	r3, r3
   80e74:	f003 0008 	and.w	r0, r3, #8
   80e78:	4a2a      	ldr	r2, [pc, #168]	; (80f24 <setvbuf+0xfc>)
   80e7a:	b280      	uxth	r0, r0
   80e7c:	63ea      	str	r2, [r5, #60]	; 0x3c
   80e7e:	f8c4 8000 	str.w	r8, [r4]
   80e82:	f8c4 8010 	str.w	r8, [r4, #16]
   80e86:	6167      	str	r7, [r4, #20]
   80e88:	b178      	cbz	r0, 80eaa <setvbuf+0x82>
   80e8a:	f013 0f03 	tst.w	r3, #3
   80e8e:	bf18      	it	ne
   80e90:	2700      	movne	r7, #0
   80e92:	60a7      	str	r7, [r4, #8]
   80e94:	2000      	movs	r0, #0
   80e96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80e9a:	f043 0301 	orr.w	r3, r3, #1
   80e9e:	427a      	negs	r2, r7
   80ea0:	81a3      	strh	r3, [r4, #12]
   80ea2:	61a2      	str	r2, [r4, #24]
   80ea4:	e7e5      	b.n	80e72 <setvbuf+0x4a>
   80ea6:	f04f 30ff 	mov.w	r0, #4294967295
   80eaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80eae:	4628      	mov	r0, r5
   80eb0:	6921      	ldr	r1, [r4, #16]
   80eb2:	f001 f953 	bl	8215c <_free_r>
   80eb6:	89a3      	ldrh	r3, [r4, #12]
   80eb8:	2e02      	cmp	r6, #2
   80eba:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   80ebe:	b29b      	uxth	r3, r3
   80ec0:	81a3      	strh	r3, [r4, #12]
   80ec2:	d1d1      	bne.n	80e68 <setvbuf+0x40>
   80ec4:	2000      	movs	r0, #0
   80ec6:	f104 0243 	add.w	r2, r4, #67	; 0x43
   80eca:	f043 0302 	orr.w	r3, r3, #2
   80ece:	2500      	movs	r5, #0
   80ed0:	2101      	movs	r1, #1
   80ed2:	81a3      	strh	r3, [r4, #12]
   80ed4:	60a5      	str	r5, [r4, #8]
   80ed6:	6022      	str	r2, [r4, #0]
   80ed8:	6122      	str	r2, [r4, #16]
   80eda:	6161      	str	r1, [r4, #20]
   80edc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80ee0:	4628      	mov	r0, r5
   80ee2:	f000 fff7 	bl	81ed4 <__sinit>
   80ee6:	e7ab      	b.n	80e40 <setvbuf+0x18>
   80ee8:	2f00      	cmp	r7, #0
   80eea:	bf08      	it	eq
   80eec:	f44f 6780 	moveq.w	r7, #1024	; 0x400
   80ef0:	4638      	mov	r0, r7
   80ef2:	f001 fc29 	bl	82748 <malloc>
   80ef6:	4680      	mov	r8, r0
   80ef8:	b128      	cbz	r0, 80f06 <setvbuf+0xde>
   80efa:	89a3      	ldrh	r3, [r4, #12]
   80efc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   80f00:	b29b      	uxth	r3, r3
   80f02:	81a3      	strh	r3, [r4, #12]
   80f04:	e7b3      	b.n	80e6e <setvbuf+0x46>
   80f06:	f44f 6080 	mov.w	r0, #1024	; 0x400
   80f0a:	f001 fc1d 	bl	82748 <malloc>
   80f0e:	4680      	mov	r8, r0
   80f10:	b918      	cbnz	r0, 80f1a <setvbuf+0xf2>
   80f12:	89a3      	ldrh	r3, [r4, #12]
   80f14:	f04f 30ff 	mov.w	r0, #4294967295
   80f18:	e7d5      	b.n	80ec6 <setvbuf+0x9e>
   80f1a:	f44f 6780 	mov.w	r7, #1024	; 0x400
   80f1e:	e7ec      	b.n	80efa <setvbuf+0xd2>
   80f20:	20070560 	.word	0x20070560
   80f24:	00081ec9 	.word	0x00081ec9

00080f28 <__sprint_r.part.0>:
   80f28:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   80f2a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   80f2e:	049c      	lsls	r4, r3, #18
   80f30:	460e      	mov	r6, r1
   80f32:	4680      	mov	r8, r0
   80f34:	4691      	mov	r9, r2
   80f36:	d52a      	bpl.n	80f8e <__sprint_r.part.0+0x66>
   80f38:	6893      	ldr	r3, [r2, #8]
   80f3a:	6812      	ldr	r2, [r2, #0]
   80f3c:	f102 0a08 	add.w	sl, r2, #8
   80f40:	b31b      	cbz	r3, 80f8a <__sprint_r.part.0+0x62>
   80f42:	e91a 00a0 	ldmdb	sl, {r5, r7}
   80f46:	08bf      	lsrs	r7, r7, #2
   80f48:	d017      	beq.n	80f7a <__sprint_r.part.0+0x52>
   80f4a:	3d04      	subs	r5, #4
   80f4c:	2400      	movs	r4, #0
   80f4e:	e001      	b.n	80f54 <__sprint_r.part.0+0x2c>
   80f50:	42a7      	cmp	r7, r4
   80f52:	d010      	beq.n	80f76 <__sprint_r.part.0+0x4e>
   80f54:	4640      	mov	r0, r8
   80f56:	f855 1f04 	ldr.w	r1, [r5, #4]!
   80f5a:	4632      	mov	r2, r6
   80f5c:	f001 f850 	bl	82000 <_fputwc_r>
   80f60:	1c43      	adds	r3, r0, #1
   80f62:	f104 0401 	add.w	r4, r4, #1
   80f66:	d1f3      	bne.n	80f50 <__sprint_r.part.0+0x28>
   80f68:	2300      	movs	r3, #0
   80f6a:	f8c9 3008 	str.w	r3, [r9, #8]
   80f6e:	f8c9 3004 	str.w	r3, [r9, #4]
   80f72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   80f76:	f8d9 3008 	ldr.w	r3, [r9, #8]
   80f7a:	eba3 0387 	sub.w	r3, r3, r7, lsl #2
   80f7e:	f8c9 3008 	str.w	r3, [r9, #8]
   80f82:	f10a 0a08 	add.w	sl, sl, #8
   80f86:	2b00      	cmp	r3, #0
   80f88:	d1db      	bne.n	80f42 <__sprint_r.part.0+0x1a>
   80f8a:	2000      	movs	r0, #0
   80f8c:	e7ec      	b.n	80f68 <__sprint_r.part.0+0x40>
   80f8e:	f001 f9b1 	bl	822f4 <__sfvwrite_r>
   80f92:	2300      	movs	r3, #0
   80f94:	f8c9 3008 	str.w	r3, [r9, #8]
   80f98:	f8c9 3004 	str.w	r3, [r9, #4]
   80f9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00080fa0 <_vfiprintf_r>:
   80fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80fa4:	b0b1      	sub	sp, #196	; 0xc4
   80fa6:	461c      	mov	r4, r3
   80fa8:	9102      	str	r1, [sp, #8]
   80faa:	4690      	mov	r8, r2
   80fac:	9308      	str	r3, [sp, #32]
   80fae:	9006      	str	r0, [sp, #24]
   80fb0:	b118      	cbz	r0, 80fba <_vfiprintf_r+0x1a>
   80fb2:	6b83      	ldr	r3, [r0, #56]	; 0x38
   80fb4:	2b00      	cmp	r3, #0
   80fb6:	f000 80e8 	beq.w	8118a <_vfiprintf_r+0x1ea>
   80fba:	9d02      	ldr	r5, [sp, #8]
   80fbc:	89ab      	ldrh	r3, [r5, #12]
   80fbe:	b29a      	uxth	r2, r3
   80fc0:	0490      	lsls	r0, r2, #18
   80fc2:	d407      	bmi.n	80fd4 <_vfiprintf_r+0x34>
   80fc4:	6e6a      	ldr	r2, [r5, #100]	; 0x64
   80fc6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   80fca:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
   80fce:	81ab      	strh	r3, [r5, #12]
   80fd0:	b29a      	uxth	r2, r3
   80fd2:	6669      	str	r1, [r5, #100]	; 0x64
   80fd4:	0711      	lsls	r1, r2, #28
   80fd6:	f140 80b7 	bpl.w	81148 <_vfiprintf_r+0x1a8>
   80fda:	f8dd b008 	ldr.w	fp, [sp, #8]
   80fde:	f8db 3010 	ldr.w	r3, [fp, #16]
   80fe2:	2b00      	cmp	r3, #0
   80fe4:	f000 80b0 	beq.w	81148 <_vfiprintf_r+0x1a8>
   80fe8:	f002 021a 	and.w	r2, r2, #26
   80fec:	2a0a      	cmp	r2, #10
   80fee:	f000 80b7 	beq.w	81160 <_vfiprintf_r+0x1c0>
   80ff2:	2300      	movs	r3, #0
   80ff4:	f10d 0980 	add.w	r9, sp, #128	; 0x80
   80ff8:	930a      	str	r3, [sp, #40]	; 0x28
   80ffa:	9315      	str	r3, [sp, #84]	; 0x54
   80ffc:	9314      	str	r3, [sp, #80]	; 0x50
   80ffe:	9309      	str	r3, [sp, #36]	; 0x24
   81000:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
   81004:	464e      	mov	r6, r9
   81006:	f898 3000 	ldrb.w	r3, [r8]
   8100a:	2b00      	cmp	r3, #0
   8100c:	f000 84c8 	beq.w	819a0 <_vfiprintf_r+0xa00>
   81010:	2b25      	cmp	r3, #37	; 0x25
   81012:	f000 84c5 	beq.w	819a0 <_vfiprintf_r+0xa00>
   81016:	f108 0201 	add.w	r2, r8, #1
   8101a:	e001      	b.n	81020 <_vfiprintf_r+0x80>
   8101c:	2b25      	cmp	r3, #37	; 0x25
   8101e:	d004      	beq.n	8102a <_vfiprintf_r+0x8a>
   81020:	7813      	ldrb	r3, [r2, #0]
   81022:	4614      	mov	r4, r2
   81024:	3201      	adds	r2, #1
   81026:	2b00      	cmp	r3, #0
   81028:	d1f8      	bne.n	8101c <_vfiprintf_r+0x7c>
   8102a:	ebc8 0504 	rsb	r5, r8, r4
   8102e:	b195      	cbz	r5, 81056 <_vfiprintf_r+0xb6>
   81030:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81032:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81034:	3301      	adds	r3, #1
   81036:	442a      	add	r2, r5
   81038:	2b07      	cmp	r3, #7
   8103a:	f8c6 8000 	str.w	r8, [r6]
   8103e:	6075      	str	r5, [r6, #4]
   81040:	9215      	str	r2, [sp, #84]	; 0x54
   81042:	9314      	str	r3, [sp, #80]	; 0x50
   81044:	dd7b      	ble.n	8113e <_vfiprintf_r+0x19e>
   81046:	2a00      	cmp	r2, #0
   81048:	f040 84d5 	bne.w	819f6 <_vfiprintf_r+0xa56>
   8104c:	9809      	ldr	r0, [sp, #36]	; 0x24
   8104e:	9214      	str	r2, [sp, #80]	; 0x50
   81050:	4428      	add	r0, r5
   81052:	464e      	mov	r6, r9
   81054:	9009      	str	r0, [sp, #36]	; 0x24
   81056:	7823      	ldrb	r3, [r4, #0]
   81058:	2b00      	cmp	r3, #0
   8105a:	f000 83ed 	beq.w	81838 <_vfiprintf_r+0x898>
   8105e:	2100      	movs	r1, #0
   81060:	f04f 0200 	mov.w	r2, #0
   81064:	f04f 3cff 	mov.w	ip, #4294967295
   81068:	7863      	ldrb	r3, [r4, #1]
   8106a:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
   8106e:	9104      	str	r1, [sp, #16]
   81070:	468a      	mov	sl, r1
   81072:	f104 0801 	add.w	r8, r4, #1
   81076:	4608      	mov	r0, r1
   81078:	4665      	mov	r5, ip
   8107a:	f108 0801 	add.w	r8, r8, #1
   8107e:	f1a3 0220 	sub.w	r2, r3, #32
   81082:	2a58      	cmp	r2, #88	; 0x58
   81084:	f200 82d9 	bhi.w	8163a <_vfiprintf_r+0x69a>
   81088:	e8df f012 	tbh	[pc, r2, lsl #1]
   8108c:	02d702cb 	.word	0x02d702cb
   81090:	02d202d7 	.word	0x02d202d7
   81094:	02d702d7 	.word	0x02d702d7
   81098:	02d702d7 	.word	0x02d702d7
   8109c:	02d702d7 	.word	0x02d702d7
   810a0:	028f0282 	.word	0x028f0282
   810a4:	008402d7 	.word	0x008402d7
   810a8:	02d70293 	.word	0x02d70293
   810ac:	0196012b 	.word	0x0196012b
   810b0:	01960196 	.word	0x01960196
   810b4:	01960196 	.word	0x01960196
   810b8:	01960196 	.word	0x01960196
   810bc:	01960196 	.word	0x01960196
   810c0:	02d702d7 	.word	0x02d702d7
   810c4:	02d702d7 	.word	0x02d702d7
   810c8:	02d702d7 	.word	0x02d702d7
   810cc:	02d702d7 	.word	0x02d702d7
   810d0:	02d702d7 	.word	0x02d702d7
   810d4:	02d70130 	.word	0x02d70130
   810d8:	02d702d7 	.word	0x02d702d7
   810dc:	02d702d7 	.word	0x02d702d7
   810e0:	02d702d7 	.word	0x02d702d7
   810e4:	02d702d7 	.word	0x02d702d7
   810e8:	017b02d7 	.word	0x017b02d7
   810ec:	02d702d7 	.word	0x02d702d7
   810f0:	02d702d7 	.word	0x02d702d7
   810f4:	01a402d7 	.word	0x01a402d7
   810f8:	02d702d7 	.word	0x02d702d7
   810fc:	02d701bf 	.word	0x02d701bf
   81100:	02d702d7 	.word	0x02d702d7
   81104:	02d702d7 	.word	0x02d702d7
   81108:	02d702d7 	.word	0x02d702d7
   8110c:	02d702d7 	.word	0x02d702d7
   81110:	01e402d7 	.word	0x01e402d7
   81114:	02d701fa 	.word	0x02d701fa
   81118:	02d702d7 	.word	0x02d702d7
   8111c:	01fa0216 	.word	0x01fa0216
   81120:	02d702d7 	.word	0x02d702d7
   81124:	02d7021b 	.word	0x02d7021b
   81128:	00890228 	.word	0x00890228
   8112c:	027d0266 	.word	0x027d0266
   81130:	023a02d7 	.word	0x023a02d7
   81134:	011902d7 	.word	0x011902d7
   81138:	02d702d7 	.word	0x02d702d7
   8113c:	02af      	.short	0x02af
   8113e:	3608      	adds	r6, #8
   81140:	9809      	ldr	r0, [sp, #36]	; 0x24
   81142:	4428      	add	r0, r5
   81144:	9009      	str	r0, [sp, #36]	; 0x24
   81146:	e786      	b.n	81056 <_vfiprintf_r+0xb6>
   81148:	9806      	ldr	r0, [sp, #24]
   8114a:	9902      	ldr	r1, [sp, #8]
   8114c:	f000 fd90 	bl	81c70 <__swsetup_r>
   81150:	b9b0      	cbnz	r0, 81180 <_vfiprintf_r+0x1e0>
   81152:	9d02      	ldr	r5, [sp, #8]
   81154:	89aa      	ldrh	r2, [r5, #12]
   81156:	f002 021a 	and.w	r2, r2, #26
   8115a:	2a0a      	cmp	r2, #10
   8115c:	f47f af49 	bne.w	80ff2 <_vfiprintf_r+0x52>
   81160:	f8dd b008 	ldr.w	fp, [sp, #8]
   81164:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
   81168:	2b00      	cmp	r3, #0
   8116a:	f6ff af42 	blt.w	80ff2 <_vfiprintf_r+0x52>
   8116e:	9806      	ldr	r0, [sp, #24]
   81170:	4659      	mov	r1, fp
   81172:	4642      	mov	r2, r8
   81174:	4623      	mov	r3, r4
   81176:	f000 fd3d 	bl	81bf4 <__sbprintf>
   8117a:	b031      	add	sp, #196	; 0xc4
   8117c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81180:	f04f 30ff 	mov.w	r0, #4294967295
   81184:	b031      	add	sp, #196	; 0xc4
   81186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8118a:	f000 fea3 	bl	81ed4 <__sinit>
   8118e:	e714      	b.n	80fba <_vfiprintf_r+0x1a>
   81190:	4240      	negs	r0, r0
   81192:	9308      	str	r3, [sp, #32]
   81194:	f04a 0a04 	orr.w	sl, sl, #4
   81198:	f898 3000 	ldrb.w	r3, [r8]
   8119c:	e76d      	b.n	8107a <_vfiprintf_r+0xda>
   8119e:	f01a 0320 	ands.w	r3, sl, #32
   811a2:	9004      	str	r0, [sp, #16]
   811a4:	46ac      	mov	ip, r5
   811a6:	f000 80f4 	beq.w	81392 <_vfiprintf_r+0x3f2>
   811aa:	f8dd b020 	ldr.w	fp, [sp, #32]
   811ae:	f10b 0307 	add.w	r3, fp, #7
   811b2:	f023 0307 	bic.w	r3, r3, #7
   811b6:	f103 0408 	add.w	r4, r3, #8
   811ba:	9408      	str	r4, [sp, #32]
   811bc:	e9d3 4500 	ldrd	r4, r5, [r3]
   811c0:	2300      	movs	r3, #0
   811c2:	f04f 0000 	mov.w	r0, #0
   811c6:	2100      	movs	r1, #0
   811c8:	f88d 0047 	strb.w	r0, [sp, #71]	; 0x47
   811cc:	f8cd c014 	str.w	ip, [sp, #20]
   811d0:	9107      	str	r1, [sp, #28]
   811d2:	f1bc 0f00 	cmp.w	ip, #0
   811d6:	bfa8      	it	ge
   811d8:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
   811dc:	ea54 0205 	orrs.w	r2, r4, r5
   811e0:	f040 80ad 	bne.w	8133e <_vfiprintf_r+0x39e>
   811e4:	f1bc 0f00 	cmp.w	ip, #0
   811e8:	f040 80a9 	bne.w	8133e <_vfiprintf_r+0x39e>
   811ec:	2b00      	cmp	r3, #0
   811ee:	f040 83c0 	bne.w	81972 <_vfiprintf_r+0x9d2>
   811f2:	f01a 0f01 	tst.w	sl, #1
   811f6:	f000 83bc 	beq.w	81972 <_vfiprintf_r+0x9d2>
   811fa:	2330      	movs	r3, #48	; 0x30
   811fc:	af30      	add	r7, sp, #192	; 0xc0
   811fe:	f807 3d41 	strb.w	r3, [r7, #-65]!
   81202:	ebc7 0409 	rsb	r4, r7, r9
   81206:	9405      	str	r4, [sp, #20]
   81208:	f8dd b014 	ldr.w	fp, [sp, #20]
   8120c:	9c07      	ldr	r4, [sp, #28]
   8120e:	45e3      	cmp	fp, ip
   81210:	bfb8      	it	lt
   81212:	46e3      	movlt	fp, ip
   81214:	f8cd b00c 	str.w	fp, [sp, #12]
   81218:	b11c      	cbz	r4, 81222 <_vfiprintf_r+0x282>
   8121a:	f10b 0b01 	add.w	fp, fp, #1
   8121e:	f8cd b00c 	str.w	fp, [sp, #12]
   81222:	f01a 0502 	ands.w	r5, sl, #2
   81226:	9507      	str	r5, [sp, #28]
   81228:	d005      	beq.n	81236 <_vfiprintf_r+0x296>
   8122a:	f8dd b00c 	ldr.w	fp, [sp, #12]
   8122e:	f10b 0b02 	add.w	fp, fp, #2
   81232:	f8cd b00c 	str.w	fp, [sp, #12]
   81236:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
   8123a:	930b      	str	r3, [sp, #44]	; 0x2c
   8123c:	f040 821b 	bne.w	81676 <_vfiprintf_r+0x6d6>
   81240:	9d04      	ldr	r5, [sp, #16]
   81242:	f8dd b00c 	ldr.w	fp, [sp, #12]
   81246:	ebcb 0405 	rsb	r4, fp, r5
   8124a:	2c00      	cmp	r4, #0
   8124c:	f340 8213 	ble.w	81676 <_vfiprintf_r+0x6d6>
   81250:	2c10      	cmp	r4, #16
   81252:	f340 8489 	ble.w	81b68 <_vfiprintf_r+0xbc8>
   81256:	4dbe      	ldr	r5, [pc, #760]	; (81550 <_vfiprintf_r+0x5b0>)
   81258:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8125a:	462b      	mov	r3, r5
   8125c:	9814      	ldr	r0, [sp, #80]	; 0x50
   8125e:	4625      	mov	r5, r4
   81260:	f04f 0b10 	mov.w	fp, #16
   81264:	4664      	mov	r4, ip
   81266:	46b4      	mov	ip, r6
   81268:	461e      	mov	r6, r3
   8126a:	e006      	b.n	8127a <_vfiprintf_r+0x2da>
   8126c:	1c83      	adds	r3, r0, #2
   8126e:	f10c 0c08 	add.w	ip, ip, #8
   81272:	4608      	mov	r0, r1
   81274:	3d10      	subs	r5, #16
   81276:	2d10      	cmp	r5, #16
   81278:	dd11      	ble.n	8129e <_vfiprintf_r+0x2fe>
   8127a:	1c41      	adds	r1, r0, #1
   8127c:	3210      	adds	r2, #16
   8127e:	2907      	cmp	r1, #7
   81280:	9215      	str	r2, [sp, #84]	; 0x54
   81282:	e88c 0840 	stmia.w	ip, {r6, fp}
   81286:	9114      	str	r1, [sp, #80]	; 0x50
   81288:	ddf0      	ble.n	8126c <_vfiprintf_r+0x2cc>
   8128a:	2a00      	cmp	r2, #0
   8128c:	f040 81e6 	bne.w	8165c <_vfiprintf_r+0x6bc>
   81290:	3d10      	subs	r5, #16
   81292:	2d10      	cmp	r5, #16
   81294:	f04f 0301 	mov.w	r3, #1
   81298:	4610      	mov	r0, r2
   8129a:	46cc      	mov	ip, r9
   8129c:	dced      	bgt.n	8127a <_vfiprintf_r+0x2da>
   8129e:	4631      	mov	r1, r6
   812a0:	4666      	mov	r6, ip
   812a2:	46a4      	mov	ip, r4
   812a4:	462c      	mov	r4, r5
   812a6:	460d      	mov	r5, r1
   812a8:	4422      	add	r2, r4
   812aa:	2b07      	cmp	r3, #7
   812ac:	9215      	str	r2, [sp, #84]	; 0x54
   812ae:	6035      	str	r5, [r6, #0]
   812b0:	6074      	str	r4, [r6, #4]
   812b2:	9314      	str	r3, [sp, #80]	; 0x50
   812b4:	f300 836d 	bgt.w	81992 <_vfiprintf_r+0x9f2>
   812b8:	3608      	adds	r6, #8
   812ba:	1c59      	adds	r1, r3, #1
   812bc:	e1de      	b.n	8167c <_vfiprintf_r+0x6dc>
   812be:	f01a 0f20 	tst.w	sl, #32
   812c2:	9004      	str	r0, [sp, #16]
   812c4:	46ac      	mov	ip, r5
   812c6:	f000 808d 	beq.w	813e4 <_vfiprintf_r+0x444>
   812ca:	9d08      	ldr	r5, [sp, #32]
   812cc:	1deb      	adds	r3, r5, #7
   812ce:	f023 0307 	bic.w	r3, r3, #7
   812d2:	f103 0b08 	add.w	fp, r3, #8
   812d6:	e9d3 4500 	ldrd	r4, r5, [r3]
   812da:	f8cd b020 	str.w	fp, [sp, #32]
   812de:	2301      	movs	r3, #1
   812e0:	e76f      	b.n	811c2 <_vfiprintf_r+0x222>
   812e2:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
   812e6:	f898 3000 	ldrb.w	r3, [r8]
   812ea:	e6c6      	b.n	8107a <_vfiprintf_r+0xda>
   812ec:	f04a 0a10 	orr.w	sl, sl, #16
   812f0:	f01a 0f20 	tst.w	sl, #32
   812f4:	9004      	str	r0, [sp, #16]
   812f6:	46ac      	mov	ip, r5
   812f8:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   812fc:	f000 80c8 	beq.w	81490 <_vfiprintf_r+0x4f0>
   81300:	9c08      	ldr	r4, [sp, #32]
   81302:	1de1      	adds	r1, r4, #7
   81304:	f021 0107 	bic.w	r1, r1, #7
   81308:	e9d1 2300 	ldrd	r2, r3, [r1]
   8130c:	3108      	adds	r1, #8
   8130e:	9108      	str	r1, [sp, #32]
   81310:	4614      	mov	r4, r2
   81312:	461d      	mov	r5, r3
   81314:	2a00      	cmp	r2, #0
   81316:	f173 0b00 	sbcs.w	fp, r3, #0
   8131a:	f2c0 83ce 	blt.w	81aba <_vfiprintf_r+0xb1a>
   8131e:	f1bc 0f00 	cmp.w	ip, #0
   81322:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
   81326:	bfa8      	it	ge
   81328:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
   8132c:	ea54 0205 	orrs.w	r2, r4, r5
   81330:	9007      	str	r0, [sp, #28]
   81332:	f8cd c014 	str.w	ip, [sp, #20]
   81336:	f04f 0301 	mov.w	r3, #1
   8133a:	f43f af53 	beq.w	811e4 <_vfiprintf_r+0x244>
   8133e:	2b01      	cmp	r3, #1
   81340:	f000 8319 	beq.w	81976 <_vfiprintf_r+0x9d6>
   81344:	2b02      	cmp	r3, #2
   81346:	f10d 037f 	add.w	r3, sp, #127	; 0x7f
   8134a:	f040 824c 	bne.w	817e6 <_vfiprintf_r+0x846>
   8134e:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   81352:	4619      	mov	r1, r3
   81354:	f004 000f 	and.w	r0, r4, #15
   81358:	0922      	lsrs	r2, r4, #4
   8135a:	f81b 0000 	ldrb.w	r0, [fp, r0]
   8135e:	ea42 7205 	orr.w	r2, r2, r5, lsl #28
   81362:	092b      	lsrs	r3, r5, #4
   81364:	7008      	strb	r0, [r1, #0]
   81366:	ea52 0003 	orrs.w	r0, r2, r3
   8136a:	460f      	mov	r7, r1
   8136c:	4614      	mov	r4, r2
   8136e:	461d      	mov	r5, r3
   81370:	f101 31ff 	add.w	r1, r1, #4294967295
   81374:	d1ee      	bne.n	81354 <_vfiprintf_r+0x3b4>
   81376:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   8137a:	ebc7 0309 	rsb	r3, r7, r9
   8137e:	9305      	str	r3, [sp, #20]
   81380:	e742      	b.n	81208 <_vfiprintf_r+0x268>
   81382:	f04a 0a10 	orr.w	sl, sl, #16
   81386:	f01a 0320 	ands.w	r3, sl, #32
   8138a:	9004      	str	r0, [sp, #16]
   8138c:	46ac      	mov	ip, r5
   8138e:	f47f af0c 	bne.w	811aa <_vfiprintf_r+0x20a>
   81392:	f01a 0210 	ands.w	r2, sl, #16
   81396:	f040 8311 	bne.w	819bc <_vfiprintf_r+0xa1c>
   8139a:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
   8139e:	f000 830d 	beq.w	819bc <_vfiprintf_r+0xa1c>
   813a2:	f8dd b020 	ldr.w	fp, [sp, #32]
   813a6:	4613      	mov	r3, r2
   813a8:	f8bb 4000 	ldrh.w	r4, [fp]
   813ac:	f10b 0b04 	add.w	fp, fp, #4
   813b0:	2500      	movs	r5, #0
   813b2:	f8cd b020 	str.w	fp, [sp, #32]
   813b6:	e704      	b.n	811c2 <_vfiprintf_r+0x222>
   813b8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   813bc:	2000      	movs	r0, #0
   813be:	f818 3b01 	ldrb.w	r3, [r8], #1
   813c2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   813c6:	eb02 0040 	add.w	r0, r2, r0, lsl #1
   813ca:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   813ce:	2a09      	cmp	r2, #9
   813d0:	d9f5      	bls.n	813be <_vfiprintf_r+0x41e>
   813d2:	e654      	b.n	8107e <_vfiprintf_r+0xde>
   813d4:	f04a 0a10 	orr.w	sl, sl, #16
   813d8:	f01a 0f20 	tst.w	sl, #32
   813dc:	9004      	str	r0, [sp, #16]
   813de:	46ac      	mov	ip, r5
   813e0:	f47f af73 	bne.w	812ca <_vfiprintf_r+0x32a>
   813e4:	f01a 0f10 	tst.w	sl, #16
   813e8:	f040 82ef 	bne.w	819ca <_vfiprintf_r+0xa2a>
   813ec:	f01a 0f40 	tst.w	sl, #64	; 0x40
   813f0:	f000 82eb 	beq.w	819ca <_vfiprintf_r+0xa2a>
   813f4:	f8dd b020 	ldr.w	fp, [sp, #32]
   813f8:	2500      	movs	r5, #0
   813fa:	f8bb 4000 	ldrh.w	r4, [fp]
   813fe:	f10b 0b04 	add.w	fp, fp, #4
   81402:	2301      	movs	r3, #1
   81404:	f8cd b020 	str.w	fp, [sp, #32]
   81408:	e6db      	b.n	811c2 <_vfiprintf_r+0x222>
   8140a:	46ac      	mov	ip, r5
   8140c:	4d51      	ldr	r5, [pc, #324]	; (81554 <_vfiprintf_r+0x5b4>)
   8140e:	f01a 0f20 	tst.w	sl, #32
   81412:	9004      	str	r0, [sp, #16]
   81414:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   81418:	950a      	str	r5, [sp, #40]	; 0x28
   8141a:	f000 80f0 	beq.w	815fe <_vfiprintf_r+0x65e>
   8141e:	9d08      	ldr	r5, [sp, #32]
   81420:	1dea      	adds	r2, r5, #7
   81422:	f022 0207 	bic.w	r2, r2, #7
   81426:	f102 0b08 	add.w	fp, r2, #8
   8142a:	f8cd b020 	str.w	fp, [sp, #32]
   8142e:	e9d2 4500 	ldrd	r4, r5, [r2]
   81432:	f01a 0f01 	tst.w	sl, #1
   81436:	f000 82aa 	beq.w	8198e <_vfiprintf_r+0x9ee>
   8143a:	ea54 0b05 	orrs.w	fp, r4, r5
   8143e:	f000 82a6 	beq.w	8198e <_vfiprintf_r+0x9ee>
   81442:	2230      	movs	r2, #48	; 0x30
   81444:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
   81448:	f04a 0a02 	orr.w	sl, sl, #2
   8144c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   81450:	2302      	movs	r3, #2
   81452:	e6b6      	b.n	811c2 <_vfiprintf_r+0x222>
   81454:	9b08      	ldr	r3, [sp, #32]
   81456:	f8dd b020 	ldr.w	fp, [sp, #32]
   8145a:	681b      	ldr	r3, [r3, #0]
   8145c:	2401      	movs	r4, #1
   8145e:	f04f 0500 	mov.w	r5, #0
   81462:	f10b 0b04 	add.w	fp, fp, #4
   81466:	9004      	str	r0, [sp, #16]
   81468:	9403      	str	r4, [sp, #12]
   8146a:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
   8146e:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   81472:	f8cd b020 	str.w	fp, [sp, #32]
   81476:	9405      	str	r4, [sp, #20]
   81478:	af16      	add	r7, sp, #88	; 0x58
   8147a:	f04f 0c00 	mov.w	ip, #0
   8147e:	e6d0      	b.n	81222 <_vfiprintf_r+0x282>
   81480:	f01a 0f20 	tst.w	sl, #32
   81484:	9004      	str	r0, [sp, #16]
   81486:	46ac      	mov	ip, r5
   81488:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   8148c:	f47f af38 	bne.w	81300 <_vfiprintf_r+0x360>
   81490:	f01a 0f10 	tst.w	sl, #16
   81494:	f040 82a7 	bne.w	819e6 <_vfiprintf_r+0xa46>
   81498:	f01a 0f40 	tst.w	sl, #64	; 0x40
   8149c:	f000 82a3 	beq.w	819e6 <_vfiprintf_r+0xa46>
   814a0:	f8dd b020 	ldr.w	fp, [sp, #32]
   814a4:	f9bb 4000 	ldrsh.w	r4, [fp]
   814a8:	f10b 0b04 	add.w	fp, fp, #4
   814ac:	17e5      	asrs	r5, r4, #31
   814ae:	4622      	mov	r2, r4
   814b0:	462b      	mov	r3, r5
   814b2:	f8cd b020 	str.w	fp, [sp, #32]
   814b6:	e72d      	b.n	81314 <_vfiprintf_r+0x374>
   814b8:	f04a 0a40 	orr.w	sl, sl, #64	; 0x40
   814bc:	f898 3000 	ldrb.w	r3, [r8]
   814c0:	e5db      	b.n	8107a <_vfiprintf_r+0xda>
   814c2:	f898 3000 	ldrb.w	r3, [r8]
   814c6:	4642      	mov	r2, r8
   814c8:	2b6c      	cmp	r3, #108	; 0x6c
   814ca:	bf03      	ittte	eq
   814cc:	f108 0801 	addeq.w	r8, r8, #1
   814d0:	f04a 0a20 	orreq.w	sl, sl, #32
   814d4:	7853      	ldrbeq	r3, [r2, #1]
   814d6:	f04a 0a10 	orrne.w	sl, sl, #16
   814da:	e5ce      	b.n	8107a <_vfiprintf_r+0xda>
   814dc:	f01a 0f20 	tst.w	sl, #32
   814e0:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   814e4:	f000 82f7 	beq.w	81ad6 <_vfiprintf_r+0xb36>
   814e8:	9c08      	ldr	r4, [sp, #32]
   814ea:	6821      	ldr	r1, [r4, #0]
   814ec:	9c09      	ldr	r4, [sp, #36]	; 0x24
   814ee:	17e5      	asrs	r5, r4, #31
   814f0:	462b      	mov	r3, r5
   814f2:	9d08      	ldr	r5, [sp, #32]
   814f4:	4622      	mov	r2, r4
   814f6:	3504      	adds	r5, #4
   814f8:	9508      	str	r5, [sp, #32]
   814fa:	e9c1 2300 	strd	r2, r3, [r1]
   814fe:	e582      	b.n	81006 <_vfiprintf_r+0x66>
   81500:	9c08      	ldr	r4, [sp, #32]
   81502:	46ac      	mov	ip, r5
   81504:	6827      	ldr	r7, [r4, #0]
   81506:	f04f 0500 	mov.w	r5, #0
   8150a:	9004      	str	r0, [sp, #16]
   8150c:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
   81510:	3404      	adds	r4, #4
   81512:	2f00      	cmp	r7, #0
   81514:	f000 8332 	beq.w	81b7c <_vfiprintf_r+0xbdc>
   81518:	f1bc 0f00 	cmp.w	ip, #0
   8151c:	4638      	mov	r0, r7
   8151e:	f2c0 8307 	blt.w	81b30 <_vfiprintf_r+0xb90>
   81522:	4662      	mov	r2, ip
   81524:	2100      	movs	r1, #0
   81526:	f8cd c004 	str.w	ip, [sp, #4]
   8152a:	f001 fbb1 	bl	82c90 <memchr>
   8152e:	f8dd c004 	ldr.w	ip, [sp, #4]
   81532:	2800      	cmp	r0, #0
   81534:	f000 833a 	beq.w	81bac <_vfiprintf_r+0xc0c>
   81538:	1bc0      	subs	r0, r0, r7
   8153a:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
   8153e:	4560      	cmp	r0, ip
   81540:	bfa8      	it	ge
   81542:	4660      	movge	r0, ip
   81544:	9005      	str	r0, [sp, #20]
   81546:	9408      	str	r4, [sp, #32]
   81548:	9507      	str	r5, [sp, #28]
   8154a:	f04f 0c00 	mov.w	ip, #0
   8154e:	e65b      	b.n	81208 <_vfiprintf_r+0x268>
   81550:	00083d1c 	.word	0x00083d1c
   81554:	00083cdc 	.word	0x00083cdc
   81558:	9b08      	ldr	r3, [sp, #32]
   8155a:	f8dd b020 	ldr.w	fp, [sp, #32]
   8155e:	9004      	str	r0, [sp, #16]
   81560:	48b2      	ldr	r0, [pc, #712]	; (8182c <_vfiprintf_r+0x88c>)
   81562:	681c      	ldr	r4, [r3, #0]
   81564:	2230      	movs	r2, #48	; 0x30
   81566:	2378      	movs	r3, #120	; 0x78
   81568:	f10b 0b04 	add.w	fp, fp, #4
   8156c:	46ac      	mov	ip, r5
   8156e:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
   81572:	f04a 0a02 	orr.w	sl, sl, #2
   81576:	f8cd b020 	str.w	fp, [sp, #32]
   8157a:	2500      	movs	r5, #0
   8157c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   81580:	900a      	str	r0, [sp, #40]	; 0x28
   81582:	2302      	movs	r3, #2
   81584:	e61d      	b.n	811c2 <_vfiprintf_r+0x222>
   81586:	f04a 0a20 	orr.w	sl, sl, #32
   8158a:	f898 3000 	ldrb.w	r3, [r8]
   8158e:	e574      	b.n	8107a <_vfiprintf_r+0xda>
   81590:	f8dd b020 	ldr.w	fp, [sp, #32]
   81594:	f8db 0000 	ldr.w	r0, [fp]
   81598:	f10b 0304 	add.w	r3, fp, #4
   8159c:	2800      	cmp	r0, #0
   8159e:	f6ff adf7 	blt.w	81190 <_vfiprintf_r+0x1f0>
   815a2:	9308      	str	r3, [sp, #32]
   815a4:	f898 3000 	ldrb.w	r3, [r8]
   815a8:	e567      	b.n	8107a <_vfiprintf_r+0xda>
   815aa:	f898 3000 	ldrb.w	r3, [r8]
   815ae:	212b      	movs	r1, #43	; 0x2b
   815b0:	e563      	b.n	8107a <_vfiprintf_r+0xda>
   815b2:	f898 3000 	ldrb.w	r3, [r8]
   815b6:	f108 0401 	add.w	r4, r8, #1
   815ba:	2b2a      	cmp	r3, #42	; 0x2a
   815bc:	f000 8305 	beq.w	81bca <_vfiprintf_r+0xc2a>
   815c0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   815c4:	2a09      	cmp	r2, #9
   815c6:	bf98      	it	ls
   815c8:	2500      	movls	r5, #0
   815ca:	f200 82fa 	bhi.w	81bc2 <_vfiprintf_r+0xc22>
   815ce:	f814 3b01 	ldrb.w	r3, [r4], #1
   815d2:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   815d6:	eb02 0545 	add.w	r5, r2, r5, lsl #1
   815da:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   815de:	2a09      	cmp	r2, #9
   815e0:	d9f5      	bls.n	815ce <_vfiprintf_r+0x62e>
   815e2:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
   815e6:	46a0      	mov	r8, r4
   815e8:	e549      	b.n	8107e <_vfiprintf_r+0xde>
   815ea:	4c90      	ldr	r4, [pc, #576]	; (8182c <_vfiprintf_r+0x88c>)
   815ec:	f01a 0f20 	tst.w	sl, #32
   815f0:	9004      	str	r0, [sp, #16]
   815f2:	46ac      	mov	ip, r5
   815f4:	940a      	str	r4, [sp, #40]	; 0x28
   815f6:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   815fa:	f47f af10 	bne.w	8141e <_vfiprintf_r+0x47e>
   815fe:	f01a 0f10 	tst.w	sl, #16
   81602:	f040 81ea 	bne.w	819da <_vfiprintf_r+0xa3a>
   81606:	f01a 0f40 	tst.w	sl, #64	; 0x40
   8160a:	f000 81e6 	beq.w	819da <_vfiprintf_r+0xa3a>
   8160e:	f8dd b020 	ldr.w	fp, [sp, #32]
   81612:	2500      	movs	r5, #0
   81614:	f8bb 4000 	ldrh.w	r4, [fp]
   81618:	f10b 0b04 	add.w	fp, fp, #4
   8161c:	f8cd b020 	str.w	fp, [sp, #32]
   81620:	e707      	b.n	81432 <_vfiprintf_r+0x492>
   81622:	f898 3000 	ldrb.w	r3, [r8]
   81626:	2900      	cmp	r1, #0
   81628:	f47f ad27 	bne.w	8107a <_vfiprintf_r+0xda>
   8162c:	2120      	movs	r1, #32
   8162e:	e524      	b.n	8107a <_vfiprintf_r+0xda>
   81630:	f04a 0a01 	orr.w	sl, sl, #1
   81634:	f898 3000 	ldrb.w	r3, [r8]
   81638:	e51f      	b.n	8107a <_vfiprintf_r+0xda>
   8163a:	9004      	str	r0, [sp, #16]
   8163c:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   81640:	2b00      	cmp	r3, #0
   81642:	f000 80f9 	beq.w	81838 <_vfiprintf_r+0x898>
   81646:	2501      	movs	r5, #1
   81648:	f04f 0b00 	mov.w	fp, #0
   8164c:	9503      	str	r5, [sp, #12]
   8164e:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   81652:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
   81656:	9505      	str	r5, [sp, #20]
   81658:	af16      	add	r7, sp, #88	; 0x58
   8165a:	e70e      	b.n	8147a <_vfiprintf_r+0x4da>
   8165c:	9806      	ldr	r0, [sp, #24]
   8165e:	9902      	ldr	r1, [sp, #8]
   81660:	aa13      	add	r2, sp, #76	; 0x4c
   81662:	f7ff fc61 	bl	80f28 <__sprint_r.part.0>
   81666:	2800      	cmp	r0, #0
   81668:	f040 80ed 	bne.w	81846 <_vfiprintf_r+0x8a6>
   8166c:	9814      	ldr	r0, [sp, #80]	; 0x50
   8166e:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81670:	1c43      	adds	r3, r0, #1
   81672:	46cc      	mov	ip, r9
   81674:	e5fe      	b.n	81274 <_vfiprintf_r+0x2d4>
   81676:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81678:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8167a:	1c59      	adds	r1, r3, #1
   8167c:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
   81680:	b168      	cbz	r0, 8169e <_vfiprintf_r+0x6fe>
   81682:	3201      	adds	r2, #1
   81684:	f10d 0047 	add.w	r0, sp, #71	; 0x47
   81688:	2301      	movs	r3, #1
   8168a:	2907      	cmp	r1, #7
   8168c:	9215      	str	r2, [sp, #84]	; 0x54
   8168e:	9114      	str	r1, [sp, #80]	; 0x50
   81690:	e886 0009 	stmia.w	r6, {r0, r3}
   81694:	f300 8160 	bgt.w	81958 <_vfiprintf_r+0x9b8>
   81698:	460b      	mov	r3, r1
   8169a:	3608      	adds	r6, #8
   8169c:	3101      	adds	r1, #1
   8169e:	9c07      	ldr	r4, [sp, #28]
   816a0:	b164      	cbz	r4, 816bc <_vfiprintf_r+0x71c>
   816a2:	3202      	adds	r2, #2
   816a4:	a812      	add	r0, sp, #72	; 0x48
   816a6:	2302      	movs	r3, #2
   816a8:	2907      	cmp	r1, #7
   816aa:	9215      	str	r2, [sp, #84]	; 0x54
   816ac:	9114      	str	r1, [sp, #80]	; 0x50
   816ae:	e886 0009 	stmia.w	r6, {r0, r3}
   816b2:	f300 8157 	bgt.w	81964 <_vfiprintf_r+0x9c4>
   816b6:	460b      	mov	r3, r1
   816b8:	3608      	adds	r6, #8
   816ba:	3101      	adds	r1, #1
   816bc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   816be:	2d80      	cmp	r5, #128	; 0x80
   816c0:	f000 8101 	beq.w	818c6 <_vfiprintf_r+0x926>
   816c4:	9d05      	ldr	r5, [sp, #20]
   816c6:	ebc5 040c 	rsb	r4, r5, ip
   816ca:	2c00      	cmp	r4, #0
   816cc:	dd2f      	ble.n	8172e <_vfiprintf_r+0x78e>
   816ce:	2c10      	cmp	r4, #16
   816d0:	4d57      	ldr	r5, [pc, #348]	; (81830 <_vfiprintf_r+0x890>)
   816d2:	dd22      	ble.n	8171a <_vfiprintf_r+0x77a>
   816d4:	4630      	mov	r0, r6
   816d6:	f04f 0b10 	mov.w	fp, #16
   816da:	462e      	mov	r6, r5
   816dc:	4625      	mov	r5, r4
   816de:	9c06      	ldr	r4, [sp, #24]
   816e0:	e006      	b.n	816f0 <_vfiprintf_r+0x750>
   816e2:	f103 0c02 	add.w	ip, r3, #2
   816e6:	3008      	adds	r0, #8
   816e8:	460b      	mov	r3, r1
   816ea:	3d10      	subs	r5, #16
   816ec:	2d10      	cmp	r5, #16
   816ee:	dd10      	ble.n	81712 <_vfiprintf_r+0x772>
   816f0:	1c59      	adds	r1, r3, #1
   816f2:	3210      	adds	r2, #16
   816f4:	2907      	cmp	r1, #7
   816f6:	9215      	str	r2, [sp, #84]	; 0x54
   816f8:	e880 0840 	stmia.w	r0, {r6, fp}
   816fc:	9114      	str	r1, [sp, #80]	; 0x50
   816fe:	ddf0      	ble.n	816e2 <_vfiprintf_r+0x742>
   81700:	2a00      	cmp	r2, #0
   81702:	d163      	bne.n	817cc <_vfiprintf_r+0x82c>
   81704:	3d10      	subs	r5, #16
   81706:	2d10      	cmp	r5, #16
   81708:	f04f 0c01 	mov.w	ip, #1
   8170c:	4613      	mov	r3, r2
   8170e:	4648      	mov	r0, r9
   81710:	dcee      	bgt.n	816f0 <_vfiprintf_r+0x750>
   81712:	462c      	mov	r4, r5
   81714:	4661      	mov	r1, ip
   81716:	4635      	mov	r5, r6
   81718:	4606      	mov	r6, r0
   8171a:	4422      	add	r2, r4
   8171c:	2907      	cmp	r1, #7
   8171e:	9215      	str	r2, [sp, #84]	; 0x54
   81720:	6035      	str	r5, [r6, #0]
   81722:	6074      	str	r4, [r6, #4]
   81724:	9114      	str	r1, [sp, #80]	; 0x50
   81726:	f300 80c1 	bgt.w	818ac <_vfiprintf_r+0x90c>
   8172a:	3608      	adds	r6, #8
   8172c:	3101      	adds	r1, #1
   8172e:	9d05      	ldr	r5, [sp, #20]
   81730:	2907      	cmp	r1, #7
   81732:	442a      	add	r2, r5
   81734:	9215      	str	r2, [sp, #84]	; 0x54
   81736:	6037      	str	r7, [r6, #0]
   81738:	6075      	str	r5, [r6, #4]
   8173a:	9114      	str	r1, [sp, #80]	; 0x50
   8173c:	f340 80c1 	ble.w	818c2 <_vfiprintf_r+0x922>
   81740:	2a00      	cmp	r2, #0
   81742:	f040 8130 	bne.w	819a6 <_vfiprintf_r+0xa06>
   81746:	9214      	str	r2, [sp, #80]	; 0x50
   81748:	464e      	mov	r6, r9
   8174a:	f01a 0f04 	tst.w	sl, #4
   8174e:	f000 808b 	beq.w	81868 <_vfiprintf_r+0x8c8>
   81752:	9d04      	ldr	r5, [sp, #16]
   81754:	f8dd b00c 	ldr.w	fp, [sp, #12]
   81758:	ebcb 0405 	rsb	r4, fp, r5
   8175c:	2c00      	cmp	r4, #0
   8175e:	f340 8083 	ble.w	81868 <_vfiprintf_r+0x8c8>
   81762:	2c10      	cmp	r4, #16
   81764:	f340 821e 	ble.w	81ba4 <_vfiprintf_r+0xc04>
   81768:	9914      	ldr	r1, [sp, #80]	; 0x50
   8176a:	4d32      	ldr	r5, [pc, #200]	; (81834 <_vfiprintf_r+0x894>)
   8176c:	2710      	movs	r7, #16
   8176e:	f8dd a018 	ldr.w	sl, [sp, #24]
   81772:	f8dd b008 	ldr.w	fp, [sp, #8]
   81776:	e005      	b.n	81784 <_vfiprintf_r+0x7e4>
   81778:	1c88      	adds	r0, r1, #2
   8177a:	3608      	adds	r6, #8
   8177c:	4619      	mov	r1, r3
   8177e:	3c10      	subs	r4, #16
   81780:	2c10      	cmp	r4, #16
   81782:	dd10      	ble.n	817a6 <_vfiprintf_r+0x806>
   81784:	1c4b      	adds	r3, r1, #1
   81786:	3210      	adds	r2, #16
   81788:	2b07      	cmp	r3, #7
   8178a:	9215      	str	r2, [sp, #84]	; 0x54
   8178c:	e886 00a0 	stmia.w	r6, {r5, r7}
   81790:	9314      	str	r3, [sp, #80]	; 0x50
   81792:	ddf1      	ble.n	81778 <_vfiprintf_r+0x7d8>
   81794:	2a00      	cmp	r2, #0
   81796:	d17d      	bne.n	81894 <_vfiprintf_r+0x8f4>
   81798:	3c10      	subs	r4, #16
   8179a:	2c10      	cmp	r4, #16
   8179c:	f04f 0001 	mov.w	r0, #1
   817a0:	4611      	mov	r1, r2
   817a2:	464e      	mov	r6, r9
   817a4:	dcee      	bgt.n	81784 <_vfiprintf_r+0x7e4>
   817a6:	4422      	add	r2, r4
   817a8:	2807      	cmp	r0, #7
   817aa:	9215      	str	r2, [sp, #84]	; 0x54
   817ac:	6035      	str	r5, [r6, #0]
   817ae:	6074      	str	r4, [r6, #4]
   817b0:	9014      	str	r0, [sp, #80]	; 0x50
   817b2:	dd59      	ble.n	81868 <_vfiprintf_r+0x8c8>
   817b4:	2a00      	cmp	r2, #0
   817b6:	d14f      	bne.n	81858 <_vfiprintf_r+0x8b8>
   817b8:	9c09      	ldr	r4, [sp, #36]	; 0x24
   817ba:	f8dd b00c 	ldr.w	fp, [sp, #12]
   817be:	9d04      	ldr	r5, [sp, #16]
   817c0:	45ab      	cmp	fp, r5
   817c2:	bfac      	ite	ge
   817c4:	445c      	addge	r4, fp
   817c6:	1964      	addlt	r4, r4, r5
   817c8:	9409      	str	r4, [sp, #36]	; 0x24
   817ca:	e05e      	b.n	8188a <_vfiprintf_r+0x8ea>
   817cc:	4620      	mov	r0, r4
   817ce:	9902      	ldr	r1, [sp, #8]
   817d0:	aa13      	add	r2, sp, #76	; 0x4c
   817d2:	f7ff fba9 	bl	80f28 <__sprint_r.part.0>
   817d6:	2800      	cmp	r0, #0
   817d8:	d135      	bne.n	81846 <_vfiprintf_r+0x8a6>
   817da:	9b14      	ldr	r3, [sp, #80]	; 0x50
   817dc:	9a15      	ldr	r2, [sp, #84]	; 0x54
   817de:	f103 0c01 	add.w	ip, r3, #1
   817e2:	4648      	mov	r0, r9
   817e4:	e781      	b.n	816ea <_vfiprintf_r+0x74a>
   817e6:	08e0      	lsrs	r0, r4, #3
   817e8:	ea40 7045 	orr.w	r0, r0, r5, lsl #29
   817ec:	f004 0207 	and.w	r2, r4, #7
   817f0:	08e9      	lsrs	r1, r5, #3
   817f2:	3230      	adds	r2, #48	; 0x30
   817f4:	ea50 0b01 	orrs.w	fp, r0, r1
   817f8:	461f      	mov	r7, r3
   817fa:	701a      	strb	r2, [r3, #0]
   817fc:	4604      	mov	r4, r0
   817fe:	460d      	mov	r5, r1
   81800:	f103 33ff 	add.w	r3, r3, #4294967295
   81804:	d1ef      	bne.n	817e6 <_vfiprintf_r+0x846>
   81806:	f01a 0f01 	tst.w	sl, #1
   8180a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   8180e:	4639      	mov	r1, r7
   81810:	f000 80b9 	beq.w	81986 <_vfiprintf_r+0x9e6>
   81814:	2a30      	cmp	r2, #48	; 0x30
   81816:	f43f acf4 	beq.w	81202 <_vfiprintf_r+0x262>
   8181a:	461f      	mov	r7, r3
   8181c:	ebc7 0509 	rsb	r5, r7, r9
   81820:	2330      	movs	r3, #48	; 0x30
   81822:	9505      	str	r5, [sp, #20]
   81824:	f801 3c01 	strb.w	r3, [r1, #-1]
   81828:	e4ee      	b.n	81208 <_vfiprintf_r+0x268>
   8182a:	bf00      	nop
   8182c:	00083cf0 	.word	0x00083cf0
   81830:	00083d0c 	.word	0x00083d0c
   81834:	00083d1c 	.word	0x00083d1c
   81838:	9b15      	ldr	r3, [sp, #84]	; 0x54
   8183a:	b123      	cbz	r3, 81846 <_vfiprintf_r+0x8a6>
   8183c:	9806      	ldr	r0, [sp, #24]
   8183e:	9902      	ldr	r1, [sp, #8]
   81840:	aa13      	add	r2, sp, #76	; 0x4c
   81842:	f7ff fb71 	bl	80f28 <__sprint_r.part.0>
   81846:	9c02      	ldr	r4, [sp, #8]
   81848:	89a3      	ldrh	r3, [r4, #12]
   8184a:	065b      	lsls	r3, r3, #25
   8184c:	f53f ac98 	bmi.w	81180 <_vfiprintf_r+0x1e0>
   81850:	9809      	ldr	r0, [sp, #36]	; 0x24
   81852:	b031      	add	sp, #196	; 0xc4
   81854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81858:	9806      	ldr	r0, [sp, #24]
   8185a:	9902      	ldr	r1, [sp, #8]
   8185c:	aa13      	add	r2, sp, #76	; 0x4c
   8185e:	f7ff fb63 	bl	80f28 <__sprint_r.part.0>
   81862:	2800      	cmp	r0, #0
   81864:	d1ef      	bne.n	81846 <_vfiprintf_r+0x8a6>
   81866:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81868:	9c09      	ldr	r4, [sp, #36]	; 0x24
   8186a:	f8dd b00c 	ldr.w	fp, [sp, #12]
   8186e:	9d04      	ldr	r5, [sp, #16]
   81870:	45ab      	cmp	fp, r5
   81872:	bfac      	ite	ge
   81874:	445c      	addge	r4, fp
   81876:	1964      	addlt	r4, r4, r5
   81878:	9409      	str	r4, [sp, #36]	; 0x24
   8187a:	b132      	cbz	r2, 8188a <_vfiprintf_r+0x8ea>
   8187c:	9806      	ldr	r0, [sp, #24]
   8187e:	9902      	ldr	r1, [sp, #8]
   81880:	aa13      	add	r2, sp, #76	; 0x4c
   81882:	f7ff fb51 	bl	80f28 <__sprint_r.part.0>
   81886:	2800      	cmp	r0, #0
   81888:	d1dd      	bne.n	81846 <_vfiprintf_r+0x8a6>
   8188a:	2000      	movs	r0, #0
   8188c:	9014      	str	r0, [sp, #80]	; 0x50
   8188e:	464e      	mov	r6, r9
   81890:	f7ff bbb9 	b.w	81006 <_vfiprintf_r+0x66>
   81894:	4650      	mov	r0, sl
   81896:	4659      	mov	r1, fp
   81898:	aa13      	add	r2, sp, #76	; 0x4c
   8189a:	f7ff fb45 	bl	80f28 <__sprint_r.part.0>
   8189e:	2800      	cmp	r0, #0
   818a0:	d1d1      	bne.n	81846 <_vfiprintf_r+0x8a6>
   818a2:	9914      	ldr	r1, [sp, #80]	; 0x50
   818a4:	9a15      	ldr	r2, [sp, #84]	; 0x54
   818a6:	1c48      	adds	r0, r1, #1
   818a8:	464e      	mov	r6, r9
   818aa:	e768      	b.n	8177e <_vfiprintf_r+0x7de>
   818ac:	2a00      	cmp	r2, #0
   818ae:	f040 80f7 	bne.w	81aa0 <_vfiprintf_r+0xb00>
   818b2:	9c05      	ldr	r4, [sp, #20]
   818b4:	2301      	movs	r3, #1
   818b6:	9720      	str	r7, [sp, #128]	; 0x80
   818b8:	9421      	str	r4, [sp, #132]	; 0x84
   818ba:	9415      	str	r4, [sp, #84]	; 0x54
   818bc:	4622      	mov	r2, r4
   818be:	9314      	str	r3, [sp, #80]	; 0x50
   818c0:	464e      	mov	r6, r9
   818c2:	3608      	adds	r6, #8
   818c4:	e741      	b.n	8174a <_vfiprintf_r+0x7aa>
   818c6:	9d04      	ldr	r5, [sp, #16]
   818c8:	f8dd b00c 	ldr.w	fp, [sp, #12]
   818cc:	ebcb 0405 	rsb	r4, fp, r5
   818d0:	2c00      	cmp	r4, #0
   818d2:	f77f aef7 	ble.w	816c4 <_vfiprintf_r+0x724>
   818d6:	2c10      	cmp	r4, #16
   818d8:	4da6      	ldr	r5, [pc, #664]	; (81b74 <_vfiprintf_r+0xbd4>)
   818da:	f340 8170 	ble.w	81bbe <_vfiprintf_r+0xc1e>
   818de:	4629      	mov	r1, r5
   818e0:	f04f 0b10 	mov.w	fp, #16
   818e4:	4625      	mov	r5, r4
   818e6:	4664      	mov	r4, ip
   818e8:	46b4      	mov	ip, r6
   818ea:	460e      	mov	r6, r1
   818ec:	e006      	b.n	818fc <_vfiprintf_r+0x95c>
   818ee:	1c98      	adds	r0, r3, #2
   818f0:	f10c 0c08 	add.w	ip, ip, #8
   818f4:	460b      	mov	r3, r1
   818f6:	3d10      	subs	r5, #16
   818f8:	2d10      	cmp	r5, #16
   818fa:	dd0f      	ble.n	8191c <_vfiprintf_r+0x97c>
   818fc:	1c59      	adds	r1, r3, #1
   818fe:	3210      	adds	r2, #16
   81900:	2907      	cmp	r1, #7
   81902:	9215      	str	r2, [sp, #84]	; 0x54
   81904:	e88c 0840 	stmia.w	ip, {r6, fp}
   81908:	9114      	str	r1, [sp, #80]	; 0x50
   8190a:	ddf0      	ble.n	818ee <_vfiprintf_r+0x94e>
   8190c:	b9ba      	cbnz	r2, 8193e <_vfiprintf_r+0x99e>
   8190e:	3d10      	subs	r5, #16
   81910:	2d10      	cmp	r5, #16
   81912:	f04f 0001 	mov.w	r0, #1
   81916:	4613      	mov	r3, r2
   81918:	46cc      	mov	ip, r9
   8191a:	dcef      	bgt.n	818fc <_vfiprintf_r+0x95c>
   8191c:	4633      	mov	r3, r6
   8191e:	4666      	mov	r6, ip
   81920:	46a4      	mov	ip, r4
   81922:	462c      	mov	r4, r5
   81924:	461d      	mov	r5, r3
   81926:	4422      	add	r2, r4
   81928:	2807      	cmp	r0, #7
   8192a:	9215      	str	r2, [sp, #84]	; 0x54
   8192c:	6035      	str	r5, [r6, #0]
   8192e:	6074      	str	r4, [r6, #4]
   81930:	9014      	str	r0, [sp, #80]	; 0x50
   81932:	f300 80af 	bgt.w	81a94 <_vfiprintf_r+0xaf4>
   81936:	3608      	adds	r6, #8
   81938:	1c41      	adds	r1, r0, #1
   8193a:	4603      	mov	r3, r0
   8193c:	e6c2      	b.n	816c4 <_vfiprintf_r+0x724>
   8193e:	9806      	ldr	r0, [sp, #24]
   81940:	9902      	ldr	r1, [sp, #8]
   81942:	aa13      	add	r2, sp, #76	; 0x4c
   81944:	f7ff faf0 	bl	80f28 <__sprint_r.part.0>
   81948:	2800      	cmp	r0, #0
   8194a:	f47f af7c 	bne.w	81846 <_vfiprintf_r+0x8a6>
   8194e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81950:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81952:	1c58      	adds	r0, r3, #1
   81954:	46cc      	mov	ip, r9
   81956:	e7ce      	b.n	818f6 <_vfiprintf_r+0x956>
   81958:	2a00      	cmp	r2, #0
   8195a:	d179      	bne.n	81a50 <_vfiprintf_r+0xab0>
   8195c:	4619      	mov	r1, r3
   8195e:	464e      	mov	r6, r9
   81960:	4613      	mov	r3, r2
   81962:	e69c      	b.n	8169e <_vfiprintf_r+0x6fe>
   81964:	2a00      	cmp	r2, #0
   81966:	f040 8084 	bne.w	81a72 <_vfiprintf_r+0xad2>
   8196a:	2101      	movs	r1, #1
   8196c:	4613      	mov	r3, r2
   8196e:	464e      	mov	r6, r9
   81970:	e6a4      	b.n	816bc <_vfiprintf_r+0x71c>
   81972:	464f      	mov	r7, r9
   81974:	e448      	b.n	81208 <_vfiprintf_r+0x268>
   81976:	2d00      	cmp	r5, #0
   81978:	bf08      	it	eq
   8197a:	2c0a      	cmpeq	r4, #10
   8197c:	d246      	bcs.n	81a0c <_vfiprintf_r+0xa6c>
   8197e:	3430      	adds	r4, #48	; 0x30
   81980:	af30      	add	r7, sp, #192	; 0xc0
   81982:	f807 4d41 	strb.w	r4, [r7, #-65]!
   81986:	ebc7 0309 	rsb	r3, r7, r9
   8198a:	9305      	str	r3, [sp, #20]
   8198c:	e43c      	b.n	81208 <_vfiprintf_r+0x268>
   8198e:	2302      	movs	r3, #2
   81990:	e417      	b.n	811c2 <_vfiprintf_r+0x222>
   81992:	2a00      	cmp	r2, #0
   81994:	f040 80af 	bne.w	81af6 <_vfiprintf_r+0xb56>
   81998:	4613      	mov	r3, r2
   8199a:	2101      	movs	r1, #1
   8199c:	464e      	mov	r6, r9
   8199e:	e66d      	b.n	8167c <_vfiprintf_r+0x6dc>
   819a0:	4644      	mov	r4, r8
   819a2:	f7ff bb58 	b.w	81056 <_vfiprintf_r+0xb6>
   819a6:	9806      	ldr	r0, [sp, #24]
   819a8:	9902      	ldr	r1, [sp, #8]
   819aa:	aa13      	add	r2, sp, #76	; 0x4c
   819ac:	f7ff fabc 	bl	80f28 <__sprint_r.part.0>
   819b0:	2800      	cmp	r0, #0
   819b2:	f47f af48 	bne.w	81846 <_vfiprintf_r+0x8a6>
   819b6:	9a15      	ldr	r2, [sp, #84]	; 0x54
   819b8:	464e      	mov	r6, r9
   819ba:	e6c6      	b.n	8174a <_vfiprintf_r+0x7aa>
   819bc:	9d08      	ldr	r5, [sp, #32]
   819be:	682c      	ldr	r4, [r5, #0]
   819c0:	3504      	adds	r5, #4
   819c2:	9508      	str	r5, [sp, #32]
   819c4:	2500      	movs	r5, #0
   819c6:	f7ff bbfc 	b.w	811c2 <_vfiprintf_r+0x222>
   819ca:	9d08      	ldr	r5, [sp, #32]
   819cc:	2301      	movs	r3, #1
   819ce:	682c      	ldr	r4, [r5, #0]
   819d0:	3504      	adds	r5, #4
   819d2:	9508      	str	r5, [sp, #32]
   819d4:	2500      	movs	r5, #0
   819d6:	f7ff bbf4 	b.w	811c2 <_vfiprintf_r+0x222>
   819da:	9d08      	ldr	r5, [sp, #32]
   819dc:	682c      	ldr	r4, [r5, #0]
   819de:	3504      	adds	r5, #4
   819e0:	9508      	str	r5, [sp, #32]
   819e2:	2500      	movs	r5, #0
   819e4:	e525      	b.n	81432 <_vfiprintf_r+0x492>
   819e6:	9d08      	ldr	r5, [sp, #32]
   819e8:	682c      	ldr	r4, [r5, #0]
   819ea:	3504      	adds	r5, #4
   819ec:	9508      	str	r5, [sp, #32]
   819ee:	17e5      	asrs	r5, r4, #31
   819f0:	4622      	mov	r2, r4
   819f2:	462b      	mov	r3, r5
   819f4:	e48e      	b.n	81314 <_vfiprintf_r+0x374>
   819f6:	9806      	ldr	r0, [sp, #24]
   819f8:	9902      	ldr	r1, [sp, #8]
   819fa:	aa13      	add	r2, sp, #76	; 0x4c
   819fc:	f7ff fa94 	bl	80f28 <__sprint_r.part.0>
   81a00:	2800      	cmp	r0, #0
   81a02:	f47f af20 	bne.w	81846 <_vfiprintf_r+0x8a6>
   81a06:	464e      	mov	r6, r9
   81a08:	f7ff bb9a 	b.w	81140 <_vfiprintf_r+0x1a0>
   81a0c:	f10d 0b7f 	add.w	fp, sp, #127	; 0x7f
   81a10:	9603      	str	r6, [sp, #12]
   81a12:	465e      	mov	r6, fp
   81a14:	46e3      	mov	fp, ip
   81a16:	4620      	mov	r0, r4
   81a18:	4629      	mov	r1, r5
   81a1a:	220a      	movs	r2, #10
   81a1c:	2300      	movs	r3, #0
   81a1e:	f001 fe5f 	bl	836e0 <__aeabi_uldivmod>
   81a22:	3230      	adds	r2, #48	; 0x30
   81a24:	7032      	strb	r2, [r6, #0]
   81a26:	4620      	mov	r0, r4
   81a28:	4629      	mov	r1, r5
   81a2a:	220a      	movs	r2, #10
   81a2c:	2300      	movs	r3, #0
   81a2e:	f001 fe57 	bl	836e0 <__aeabi_uldivmod>
   81a32:	4604      	mov	r4, r0
   81a34:	460d      	mov	r5, r1
   81a36:	ea54 0005 	orrs.w	r0, r4, r5
   81a3a:	4637      	mov	r7, r6
   81a3c:	f106 36ff 	add.w	r6, r6, #4294967295
   81a40:	d1e9      	bne.n	81a16 <_vfiprintf_r+0xa76>
   81a42:	ebc7 0309 	rsb	r3, r7, r9
   81a46:	46dc      	mov	ip, fp
   81a48:	9e03      	ldr	r6, [sp, #12]
   81a4a:	9305      	str	r3, [sp, #20]
   81a4c:	f7ff bbdc 	b.w	81208 <_vfiprintf_r+0x268>
   81a50:	9806      	ldr	r0, [sp, #24]
   81a52:	9902      	ldr	r1, [sp, #8]
   81a54:	aa13      	add	r2, sp, #76	; 0x4c
   81a56:	f8cd c004 	str.w	ip, [sp, #4]
   81a5a:	f7ff fa65 	bl	80f28 <__sprint_r.part.0>
   81a5e:	f8dd c004 	ldr.w	ip, [sp, #4]
   81a62:	2800      	cmp	r0, #0
   81a64:	f47f aeef 	bne.w	81846 <_vfiprintf_r+0x8a6>
   81a68:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81a6a:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81a6c:	1c59      	adds	r1, r3, #1
   81a6e:	464e      	mov	r6, r9
   81a70:	e615      	b.n	8169e <_vfiprintf_r+0x6fe>
   81a72:	9806      	ldr	r0, [sp, #24]
   81a74:	9902      	ldr	r1, [sp, #8]
   81a76:	aa13      	add	r2, sp, #76	; 0x4c
   81a78:	f8cd c004 	str.w	ip, [sp, #4]
   81a7c:	f7ff fa54 	bl	80f28 <__sprint_r.part.0>
   81a80:	f8dd c004 	ldr.w	ip, [sp, #4]
   81a84:	2800      	cmp	r0, #0
   81a86:	f47f aede 	bne.w	81846 <_vfiprintf_r+0x8a6>
   81a8a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81a8c:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81a8e:	1c59      	adds	r1, r3, #1
   81a90:	464e      	mov	r6, r9
   81a92:	e613      	b.n	816bc <_vfiprintf_r+0x71c>
   81a94:	2a00      	cmp	r2, #0
   81a96:	d156      	bne.n	81b46 <_vfiprintf_r+0xba6>
   81a98:	2101      	movs	r1, #1
   81a9a:	4613      	mov	r3, r2
   81a9c:	464e      	mov	r6, r9
   81a9e:	e611      	b.n	816c4 <_vfiprintf_r+0x724>
   81aa0:	9806      	ldr	r0, [sp, #24]
   81aa2:	9902      	ldr	r1, [sp, #8]
   81aa4:	aa13      	add	r2, sp, #76	; 0x4c
   81aa6:	f7ff fa3f 	bl	80f28 <__sprint_r.part.0>
   81aaa:	2800      	cmp	r0, #0
   81aac:	f47f aecb 	bne.w	81846 <_vfiprintf_r+0x8a6>
   81ab0:	9914      	ldr	r1, [sp, #80]	; 0x50
   81ab2:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81ab4:	3101      	adds	r1, #1
   81ab6:	464e      	mov	r6, r9
   81ab8:	e639      	b.n	8172e <_vfiprintf_r+0x78e>
   81aba:	f04f 0b2d 	mov.w	fp, #45	; 0x2d
   81abe:	4264      	negs	r4, r4
   81ac0:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   81ac4:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
   81ac8:	f8cd b01c 	str.w	fp, [sp, #28]
   81acc:	f8cd c014 	str.w	ip, [sp, #20]
   81ad0:	2301      	movs	r3, #1
   81ad2:	f7ff bb7e 	b.w	811d2 <_vfiprintf_r+0x232>
   81ad6:	f01a 0f10 	tst.w	sl, #16
   81ada:	d11d      	bne.n	81b18 <_vfiprintf_r+0xb78>
   81adc:	f01a 0f40 	tst.w	sl, #64	; 0x40
   81ae0:	d058      	beq.n	81b94 <_vfiprintf_r+0xbf4>
   81ae2:	9d08      	ldr	r5, [sp, #32]
   81ae4:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
   81ae8:	682b      	ldr	r3, [r5, #0]
   81aea:	3504      	adds	r5, #4
   81aec:	9508      	str	r5, [sp, #32]
   81aee:	f8a3 b000 	strh.w	fp, [r3]
   81af2:	f7ff ba88 	b.w	81006 <_vfiprintf_r+0x66>
   81af6:	9806      	ldr	r0, [sp, #24]
   81af8:	9902      	ldr	r1, [sp, #8]
   81afa:	aa13      	add	r2, sp, #76	; 0x4c
   81afc:	f8cd c004 	str.w	ip, [sp, #4]
   81b00:	f7ff fa12 	bl	80f28 <__sprint_r.part.0>
   81b04:	f8dd c004 	ldr.w	ip, [sp, #4]
   81b08:	2800      	cmp	r0, #0
   81b0a:	f47f ae9c 	bne.w	81846 <_vfiprintf_r+0x8a6>
   81b0e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81b10:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81b12:	1c59      	adds	r1, r3, #1
   81b14:	464e      	mov	r6, r9
   81b16:	e5b1      	b.n	8167c <_vfiprintf_r+0x6dc>
   81b18:	f8dd b020 	ldr.w	fp, [sp, #32]
   81b1c:	9c09      	ldr	r4, [sp, #36]	; 0x24
   81b1e:	f8db 3000 	ldr.w	r3, [fp]
   81b22:	f10b 0b04 	add.w	fp, fp, #4
   81b26:	f8cd b020 	str.w	fp, [sp, #32]
   81b2a:	601c      	str	r4, [r3, #0]
   81b2c:	f7ff ba6b 	b.w	81006 <_vfiprintf_r+0x66>
   81b30:	9408      	str	r4, [sp, #32]
   81b32:	f001 fc0b 	bl	8334c <strlen>
   81b36:	f89d 4047 	ldrb.w	r4, [sp, #71]	; 0x47
   81b3a:	9005      	str	r0, [sp, #20]
   81b3c:	9407      	str	r4, [sp, #28]
   81b3e:	f04f 0c00 	mov.w	ip, #0
   81b42:	f7ff bb61 	b.w	81208 <_vfiprintf_r+0x268>
   81b46:	9806      	ldr	r0, [sp, #24]
   81b48:	9902      	ldr	r1, [sp, #8]
   81b4a:	aa13      	add	r2, sp, #76	; 0x4c
   81b4c:	f8cd c004 	str.w	ip, [sp, #4]
   81b50:	f7ff f9ea 	bl	80f28 <__sprint_r.part.0>
   81b54:	f8dd c004 	ldr.w	ip, [sp, #4]
   81b58:	2800      	cmp	r0, #0
   81b5a:	f47f ae74 	bne.w	81846 <_vfiprintf_r+0x8a6>
   81b5e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81b60:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81b62:	1c59      	adds	r1, r3, #1
   81b64:	464e      	mov	r6, r9
   81b66:	e5ad      	b.n	816c4 <_vfiprintf_r+0x724>
   81b68:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81b6a:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81b6c:	3301      	adds	r3, #1
   81b6e:	4d02      	ldr	r5, [pc, #8]	; (81b78 <_vfiprintf_r+0xbd8>)
   81b70:	f7ff bb9a 	b.w	812a8 <_vfiprintf_r+0x308>
   81b74:	00083d0c 	.word	0x00083d0c
   81b78:	00083d1c 	.word	0x00083d1c
   81b7c:	f1bc 0f06 	cmp.w	ip, #6
   81b80:	bf34      	ite	cc
   81b82:	4663      	movcc	r3, ip
   81b84:	2306      	movcs	r3, #6
   81b86:	9408      	str	r4, [sp, #32]
   81b88:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
   81b8c:	9305      	str	r3, [sp, #20]
   81b8e:	9403      	str	r4, [sp, #12]
   81b90:	4f16      	ldr	r7, [pc, #88]	; (81bec <_vfiprintf_r+0xc4c>)
   81b92:	e472      	b.n	8147a <_vfiprintf_r+0x4da>
   81b94:	9c08      	ldr	r4, [sp, #32]
   81b96:	9d09      	ldr	r5, [sp, #36]	; 0x24
   81b98:	6823      	ldr	r3, [r4, #0]
   81b9a:	3404      	adds	r4, #4
   81b9c:	9408      	str	r4, [sp, #32]
   81b9e:	601d      	str	r5, [r3, #0]
   81ba0:	f7ff ba31 	b.w	81006 <_vfiprintf_r+0x66>
   81ba4:	9814      	ldr	r0, [sp, #80]	; 0x50
   81ba6:	4d12      	ldr	r5, [pc, #72]	; (81bf0 <_vfiprintf_r+0xc50>)
   81ba8:	3001      	adds	r0, #1
   81baa:	e5fc      	b.n	817a6 <_vfiprintf_r+0x806>
   81bac:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
   81bb0:	f8cd c014 	str.w	ip, [sp, #20]
   81bb4:	9507      	str	r5, [sp, #28]
   81bb6:	9408      	str	r4, [sp, #32]
   81bb8:	4684      	mov	ip, r0
   81bba:	f7ff bb25 	b.w	81208 <_vfiprintf_r+0x268>
   81bbe:	4608      	mov	r0, r1
   81bc0:	e6b1      	b.n	81926 <_vfiprintf_r+0x986>
   81bc2:	46a0      	mov	r8, r4
   81bc4:	2500      	movs	r5, #0
   81bc6:	f7ff ba5a 	b.w	8107e <_vfiprintf_r+0xde>
   81bca:	f8dd b020 	ldr.w	fp, [sp, #32]
   81bce:	f898 3001 	ldrb.w	r3, [r8, #1]
   81bd2:	f8db 5000 	ldr.w	r5, [fp]
   81bd6:	f10b 0204 	add.w	r2, fp, #4
   81bda:	2d00      	cmp	r5, #0
   81bdc:	9208      	str	r2, [sp, #32]
   81bde:	46a0      	mov	r8, r4
   81be0:	f6bf aa4b 	bge.w	8107a <_vfiprintf_r+0xda>
   81be4:	f04f 35ff 	mov.w	r5, #4294967295
   81be8:	f7ff ba47 	b.w	8107a <_vfiprintf_r+0xda>
   81bec:	00083d04 	.word	0x00083d04
   81bf0:	00083d1c 	.word	0x00083d1c

00081bf4 <__sbprintf>:
   81bf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   81bf8:	6e4f      	ldr	r7, [r1, #100]	; 0x64
   81bfa:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   81bfe:	4688      	mov	r8, r1
   81c00:	9719      	str	r7, [sp, #100]	; 0x64
   81c02:	f8d8 701c 	ldr.w	r7, [r8, #28]
   81c06:	f8b1 a00c 	ldrh.w	sl, [r1, #12]
   81c0a:	f8b1 900e 	ldrh.w	r9, [r1, #14]
   81c0e:	9707      	str	r7, [sp, #28]
   81c10:	f8d8 7024 	ldr.w	r7, [r8, #36]	; 0x24
   81c14:	ac1a      	add	r4, sp, #104	; 0x68
   81c16:	f44f 6580 	mov.w	r5, #1024	; 0x400
   81c1a:	f02a 0a02 	bic.w	sl, sl, #2
   81c1e:	2600      	movs	r6, #0
   81c20:	4669      	mov	r1, sp
   81c22:	9400      	str	r4, [sp, #0]
   81c24:	9404      	str	r4, [sp, #16]
   81c26:	9502      	str	r5, [sp, #8]
   81c28:	9505      	str	r5, [sp, #20]
   81c2a:	f8ad a00c 	strh.w	sl, [sp, #12]
   81c2e:	f8ad 900e 	strh.w	r9, [sp, #14]
   81c32:	9709      	str	r7, [sp, #36]	; 0x24
   81c34:	9606      	str	r6, [sp, #24]
   81c36:	4605      	mov	r5, r0
   81c38:	f7ff f9b2 	bl	80fa0 <_vfiprintf_r>
   81c3c:	1e04      	subs	r4, r0, #0
   81c3e:	db07      	blt.n	81c50 <__sbprintf+0x5c>
   81c40:	4628      	mov	r0, r5
   81c42:	4669      	mov	r1, sp
   81c44:	f000 f92a 	bl	81e9c <_fflush_r>
   81c48:	42b0      	cmp	r0, r6
   81c4a:	bf18      	it	ne
   81c4c:	f04f 34ff 	movne.w	r4, #4294967295
   81c50:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   81c54:	065b      	lsls	r3, r3, #25
   81c56:	d505      	bpl.n	81c64 <__sbprintf+0x70>
   81c58:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   81c5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   81c60:	f8a8 300c 	strh.w	r3, [r8, #12]
   81c64:	4620      	mov	r0, r4
   81c66:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   81c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   81c6e:	bf00      	nop

00081c70 <__swsetup_r>:
   81c70:	4b2f      	ldr	r3, [pc, #188]	; (81d30 <__swsetup_r+0xc0>)
   81c72:	b570      	push	{r4, r5, r6, lr}
   81c74:	4606      	mov	r6, r0
   81c76:	6818      	ldr	r0, [r3, #0]
   81c78:	460c      	mov	r4, r1
   81c7a:	b110      	cbz	r0, 81c82 <__swsetup_r+0x12>
   81c7c:	6b82      	ldr	r2, [r0, #56]	; 0x38
   81c7e:	2a00      	cmp	r2, #0
   81c80:	d036      	beq.n	81cf0 <__swsetup_r+0x80>
   81c82:	89a5      	ldrh	r5, [r4, #12]
   81c84:	b2ab      	uxth	r3, r5
   81c86:	0719      	lsls	r1, r3, #28
   81c88:	d50c      	bpl.n	81ca4 <__swsetup_r+0x34>
   81c8a:	6922      	ldr	r2, [r4, #16]
   81c8c:	b1aa      	cbz	r2, 81cba <__swsetup_r+0x4a>
   81c8e:	f013 0101 	ands.w	r1, r3, #1
   81c92:	d01e      	beq.n	81cd2 <__swsetup_r+0x62>
   81c94:	6963      	ldr	r3, [r4, #20]
   81c96:	2100      	movs	r1, #0
   81c98:	425b      	negs	r3, r3
   81c9a:	61a3      	str	r3, [r4, #24]
   81c9c:	60a1      	str	r1, [r4, #8]
   81c9e:	b1f2      	cbz	r2, 81cde <__swsetup_r+0x6e>
   81ca0:	2000      	movs	r0, #0
   81ca2:	bd70      	pop	{r4, r5, r6, pc}
   81ca4:	06da      	lsls	r2, r3, #27
   81ca6:	d53a      	bpl.n	81d1e <__swsetup_r+0xae>
   81ca8:	075b      	lsls	r3, r3, #29
   81caa:	d424      	bmi.n	81cf6 <__swsetup_r+0x86>
   81cac:	6922      	ldr	r2, [r4, #16]
   81cae:	f045 0308 	orr.w	r3, r5, #8
   81cb2:	81a3      	strh	r3, [r4, #12]
   81cb4:	b29b      	uxth	r3, r3
   81cb6:	2a00      	cmp	r2, #0
   81cb8:	d1e9      	bne.n	81c8e <__swsetup_r+0x1e>
   81cba:	f403 7120 	and.w	r1, r3, #640	; 0x280
   81cbe:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   81cc2:	d0e4      	beq.n	81c8e <__swsetup_r+0x1e>
   81cc4:	4630      	mov	r0, r6
   81cc6:	4621      	mov	r1, r4
   81cc8:	f000 fcce 	bl	82668 <__smakebuf_r>
   81ccc:	89a3      	ldrh	r3, [r4, #12]
   81cce:	6922      	ldr	r2, [r4, #16]
   81cd0:	e7dd      	b.n	81c8e <__swsetup_r+0x1e>
   81cd2:	0798      	lsls	r0, r3, #30
   81cd4:	bf58      	it	pl
   81cd6:	6961      	ldrpl	r1, [r4, #20]
   81cd8:	60a1      	str	r1, [r4, #8]
   81cda:	2a00      	cmp	r2, #0
   81cdc:	d1e0      	bne.n	81ca0 <__swsetup_r+0x30>
   81cde:	89a3      	ldrh	r3, [r4, #12]
   81ce0:	061a      	lsls	r2, r3, #24
   81ce2:	d5dd      	bpl.n	81ca0 <__swsetup_r+0x30>
   81ce4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   81ce8:	81a3      	strh	r3, [r4, #12]
   81cea:	f04f 30ff 	mov.w	r0, #4294967295
   81cee:	bd70      	pop	{r4, r5, r6, pc}
   81cf0:	f000 f8f0 	bl	81ed4 <__sinit>
   81cf4:	e7c5      	b.n	81c82 <__swsetup_r+0x12>
   81cf6:	6b21      	ldr	r1, [r4, #48]	; 0x30
   81cf8:	b149      	cbz	r1, 81d0e <__swsetup_r+0x9e>
   81cfa:	f104 0340 	add.w	r3, r4, #64	; 0x40
   81cfe:	4299      	cmp	r1, r3
   81d00:	d003      	beq.n	81d0a <__swsetup_r+0x9a>
   81d02:	4630      	mov	r0, r6
   81d04:	f000 fa2a 	bl	8215c <_free_r>
   81d08:	89a5      	ldrh	r5, [r4, #12]
   81d0a:	2300      	movs	r3, #0
   81d0c:	6323      	str	r3, [r4, #48]	; 0x30
   81d0e:	6922      	ldr	r2, [r4, #16]
   81d10:	f025 0524 	bic.w	r5, r5, #36	; 0x24
   81d14:	2100      	movs	r1, #0
   81d16:	b2ad      	uxth	r5, r5
   81d18:	6022      	str	r2, [r4, #0]
   81d1a:	6061      	str	r1, [r4, #4]
   81d1c:	e7c7      	b.n	81cae <__swsetup_r+0x3e>
   81d1e:	f045 0540 	orr.w	r5, r5, #64	; 0x40
   81d22:	2309      	movs	r3, #9
   81d24:	6033      	str	r3, [r6, #0]
   81d26:	f04f 30ff 	mov.w	r0, #4294967295
   81d2a:	81a5      	strh	r5, [r4, #12]
   81d2c:	bd70      	pop	{r4, r5, r6, pc}
   81d2e:	bf00      	nop
   81d30:	20070560 	.word	0x20070560

00081d34 <register_fini>:
   81d34:	4b02      	ldr	r3, [pc, #8]	; (81d40 <register_fini+0xc>)
   81d36:	b113      	cbz	r3, 81d3e <register_fini+0xa>
   81d38:	4802      	ldr	r0, [pc, #8]	; (81d44 <register_fini+0x10>)
   81d3a:	f000 b805 	b.w	81d48 <atexit>
   81d3e:	4770      	bx	lr
   81d40:	00000000 	.word	0x00000000
   81d44:	00081fd1 	.word	0x00081fd1

00081d48 <atexit>:
   81d48:	4601      	mov	r1, r0
   81d4a:	2000      	movs	r0, #0
   81d4c:	4602      	mov	r2, r0
   81d4e:	4603      	mov	r3, r0
   81d50:	f001 bbca 	b.w	834e8 <__register_exitproc>

00081d54 <__sflush_r>:
   81d54:	898b      	ldrh	r3, [r1, #12]
   81d56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81d5a:	b29a      	uxth	r2, r3
   81d5c:	460d      	mov	r5, r1
   81d5e:	0711      	lsls	r1, r2, #28
   81d60:	4680      	mov	r8, r0
   81d62:	d43c      	bmi.n	81dde <__sflush_r+0x8a>
   81d64:	686a      	ldr	r2, [r5, #4]
   81d66:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   81d6a:	2a00      	cmp	r2, #0
   81d6c:	81ab      	strh	r3, [r5, #12]
   81d6e:	dd59      	ble.n	81e24 <__sflush_r+0xd0>
   81d70:	6aac      	ldr	r4, [r5, #40]	; 0x28
   81d72:	2c00      	cmp	r4, #0
   81d74:	d04b      	beq.n	81e0e <__sflush_r+0xba>
   81d76:	b29b      	uxth	r3, r3
   81d78:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   81d7c:	2100      	movs	r1, #0
   81d7e:	b292      	uxth	r2, r2
   81d80:	f8d8 6000 	ldr.w	r6, [r8]
   81d84:	f8c8 1000 	str.w	r1, [r8]
   81d88:	2a00      	cmp	r2, #0
   81d8a:	d04f      	beq.n	81e2c <__sflush_r+0xd8>
   81d8c:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   81d8e:	075f      	lsls	r7, r3, #29
   81d90:	d505      	bpl.n	81d9e <__sflush_r+0x4a>
   81d92:	6869      	ldr	r1, [r5, #4]
   81d94:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   81d96:	1a52      	subs	r2, r2, r1
   81d98:	b10b      	cbz	r3, 81d9e <__sflush_r+0x4a>
   81d9a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   81d9c:	1ad2      	subs	r2, r2, r3
   81d9e:	4640      	mov	r0, r8
   81da0:	69e9      	ldr	r1, [r5, #28]
   81da2:	2300      	movs	r3, #0
   81da4:	47a0      	blx	r4
   81da6:	1c44      	adds	r4, r0, #1
   81da8:	d04a      	beq.n	81e40 <__sflush_r+0xec>
   81daa:	89ab      	ldrh	r3, [r5, #12]
   81dac:	692a      	ldr	r2, [r5, #16]
   81dae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   81db2:	b29b      	uxth	r3, r3
   81db4:	2100      	movs	r1, #0
   81db6:	602a      	str	r2, [r5, #0]
   81db8:	04da      	lsls	r2, r3, #19
   81dba:	81ab      	strh	r3, [r5, #12]
   81dbc:	6069      	str	r1, [r5, #4]
   81dbe:	d44c      	bmi.n	81e5a <__sflush_r+0x106>
   81dc0:	6b29      	ldr	r1, [r5, #48]	; 0x30
   81dc2:	f8c8 6000 	str.w	r6, [r8]
   81dc6:	b311      	cbz	r1, 81e0e <__sflush_r+0xba>
   81dc8:	f105 0340 	add.w	r3, r5, #64	; 0x40
   81dcc:	4299      	cmp	r1, r3
   81dce:	d002      	beq.n	81dd6 <__sflush_r+0x82>
   81dd0:	4640      	mov	r0, r8
   81dd2:	f000 f9c3 	bl	8215c <_free_r>
   81dd6:	2000      	movs	r0, #0
   81dd8:	6328      	str	r0, [r5, #48]	; 0x30
   81dda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81dde:	692e      	ldr	r6, [r5, #16]
   81de0:	b1ae      	cbz	r6, 81e0e <__sflush_r+0xba>
   81de2:	0791      	lsls	r1, r2, #30
   81de4:	682c      	ldr	r4, [r5, #0]
   81de6:	bf0c      	ite	eq
   81de8:	696b      	ldreq	r3, [r5, #20]
   81dea:	2300      	movne	r3, #0
   81dec:	602e      	str	r6, [r5, #0]
   81dee:	1ba4      	subs	r4, r4, r6
   81df0:	60ab      	str	r3, [r5, #8]
   81df2:	e00a      	b.n	81e0a <__sflush_r+0xb6>
   81df4:	4632      	mov	r2, r6
   81df6:	4623      	mov	r3, r4
   81df8:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   81dfa:	4640      	mov	r0, r8
   81dfc:	69e9      	ldr	r1, [r5, #28]
   81dfe:	47b8      	blx	r7
   81e00:	2800      	cmp	r0, #0
   81e02:	ebc0 0404 	rsb	r4, r0, r4
   81e06:	4406      	add	r6, r0
   81e08:	dd04      	ble.n	81e14 <__sflush_r+0xc0>
   81e0a:	2c00      	cmp	r4, #0
   81e0c:	dcf2      	bgt.n	81df4 <__sflush_r+0xa0>
   81e0e:	2000      	movs	r0, #0
   81e10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81e14:	89ab      	ldrh	r3, [r5, #12]
   81e16:	f04f 30ff 	mov.w	r0, #4294967295
   81e1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   81e1e:	81ab      	strh	r3, [r5, #12]
   81e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81e24:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   81e26:	2a00      	cmp	r2, #0
   81e28:	dca2      	bgt.n	81d70 <__sflush_r+0x1c>
   81e2a:	e7f0      	b.n	81e0e <__sflush_r+0xba>
   81e2c:	2301      	movs	r3, #1
   81e2e:	4640      	mov	r0, r8
   81e30:	69e9      	ldr	r1, [r5, #28]
   81e32:	47a0      	blx	r4
   81e34:	1c43      	adds	r3, r0, #1
   81e36:	4602      	mov	r2, r0
   81e38:	d01e      	beq.n	81e78 <__sflush_r+0x124>
   81e3a:	89ab      	ldrh	r3, [r5, #12]
   81e3c:	6aac      	ldr	r4, [r5, #40]	; 0x28
   81e3e:	e7a6      	b.n	81d8e <__sflush_r+0x3a>
   81e40:	f8d8 3000 	ldr.w	r3, [r8]
   81e44:	b95b      	cbnz	r3, 81e5e <__sflush_r+0x10a>
   81e46:	89aa      	ldrh	r2, [r5, #12]
   81e48:	6929      	ldr	r1, [r5, #16]
   81e4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   81e4e:	b292      	uxth	r2, r2
   81e50:	606b      	str	r3, [r5, #4]
   81e52:	04d3      	lsls	r3, r2, #19
   81e54:	81aa      	strh	r2, [r5, #12]
   81e56:	6029      	str	r1, [r5, #0]
   81e58:	d5b2      	bpl.n	81dc0 <__sflush_r+0x6c>
   81e5a:	6528      	str	r0, [r5, #80]	; 0x50
   81e5c:	e7b0      	b.n	81dc0 <__sflush_r+0x6c>
   81e5e:	2b1d      	cmp	r3, #29
   81e60:	d001      	beq.n	81e66 <__sflush_r+0x112>
   81e62:	2b16      	cmp	r3, #22
   81e64:	d113      	bne.n	81e8e <__sflush_r+0x13a>
   81e66:	89a9      	ldrh	r1, [r5, #12]
   81e68:	692b      	ldr	r3, [r5, #16]
   81e6a:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
   81e6e:	2200      	movs	r2, #0
   81e70:	81a9      	strh	r1, [r5, #12]
   81e72:	602b      	str	r3, [r5, #0]
   81e74:	606a      	str	r2, [r5, #4]
   81e76:	e7a3      	b.n	81dc0 <__sflush_r+0x6c>
   81e78:	f8d8 3000 	ldr.w	r3, [r8]
   81e7c:	2b00      	cmp	r3, #0
   81e7e:	d0dc      	beq.n	81e3a <__sflush_r+0xe6>
   81e80:	2b1d      	cmp	r3, #29
   81e82:	d001      	beq.n	81e88 <__sflush_r+0x134>
   81e84:	2b16      	cmp	r3, #22
   81e86:	d1c5      	bne.n	81e14 <__sflush_r+0xc0>
   81e88:	f8c8 6000 	str.w	r6, [r8]
   81e8c:	e7bf      	b.n	81e0e <__sflush_r+0xba>
   81e8e:	89ab      	ldrh	r3, [r5, #12]
   81e90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   81e94:	81ab      	strh	r3, [r5, #12]
   81e96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81e9a:	bf00      	nop

00081e9c <_fflush_r>:
   81e9c:	b510      	push	{r4, lr}
   81e9e:	4604      	mov	r4, r0
   81ea0:	b082      	sub	sp, #8
   81ea2:	b108      	cbz	r0, 81ea8 <_fflush_r+0xc>
   81ea4:	6b83      	ldr	r3, [r0, #56]	; 0x38
   81ea6:	b153      	cbz	r3, 81ebe <_fflush_r+0x22>
   81ea8:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   81eac:	b908      	cbnz	r0, 81eb2 <_fflush_r+0x16>
   81eae:	b002      	add	sp, #8
   81eb0:	bd10      	pop	{r4, pc}
   81eb2:	4620      	mov	r0, r4
   81eb4:	b002      	add	sp, #8
   81eb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   81eba:	f7ff bf4b 	b.w	81d54 <__sflush_r>
   81ebe:	9101      	str	r1, [sp, #4]
   81ec0:	f000 f808 	bl	81ed4 <__sinit>
   81ec4:	9901      	ldr	r1, [sp, #4]
   81ec6:	e7ef      	b.n	81ea8 <_fflush_r+0xc>

00081ec8 <_cleanup_r>:
   81ec8:	4901      	ldr	r1, [pc, #4]	; (81ed0 <_cleanup_r+0x8>)
   81eca:	f000 bb9f 	b.w	8260c <_fwalk>
   81ece:	bf00      	nop
   81ed0:	00083635 	.word	0x00083635

00081ed4 <__sinit>:
   81ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81ed8:	6b84      	ldr	r4, [r0, #56]	; 0x38
   81eda:	b083      	sub	sp, #12
   81edc:	4607      	mov	r7, r0
   81ede:	2c00      	cmp	r4, #0
   81ee0:	d165      	bne.n	81fae <__sinit+0xda>
   81ee2:	687d      	ldr	r5, [r7, #4]
   81ee4:	4833      	ldr	r0, [pc, #204]	; (81fb4 <__sinit+0xe0>)
   81ee6:	2304      	movs	r3, #4
   81ee8:	2103      	movs	r1, #3
   81eea:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   81eee:	63f8      	str	r0, [r7, #60]	; 0x3c
   81ef0:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   81ef4:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   81ef8:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   81efc:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   81f00:	81ab      	strh	r3, [r5, #12]
   81f02:	602c      	str	r4, [r5, #0]
   81f04:	606c      	str	r4, [r5, #4]
   81f06:	60ac      	str	r4, [r5, #8]
   81f08:	666c      	str	r4, [r5, #100]	; 0x64
   81f0a:	81ec      	strh	r4, [r5, #14]
   81f0c:	612c      	str	r4, [r5, #16]
   81f0e:	616c      	str	r4, [r5, #20]
   81f10:	61ac      	str	r4, [r5, #24]
   81f12:	4621      	mov	r1, r4
   81f14:	2208      	movs	r2, #8
   81f16:	f7fe ff35 	bl	80d84 <memset>
   81f1a:	f8df b09c 	ldr.w	fp, [pc, #156]	; 81fb8 <__sinit+0xe4>
   81f1e:	68be      	ldr	r6, [r7, #8]
   81f20:	f8df a098 	ldr.w	sl, [pc, #152]	; 81fbc <__sinit+0xe8>
   81f24:	f8df 9098 	ldr.w	r9, [pc, #152]	; 81fc0 <__sinit+0xec>
   81f28:	f8df 8098 	ldr.w	r8, [pc, #152]	; 81fc4 <__sinit+0xf0>
   81f2c:	2301      	movs	r3, #1
   81f2e:	2209      	movs	r2, #9
   81f30:	61ed      	str	r5, [r5, #28]
   81f32:	f8c5 b020 	str.w	fp, [r5, #32]
   81f36:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   81f3a:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   81f3e:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   81f42:	4621      	mov	r1, r4
   81f44:	81f3      	strh	r3, [r6, #14]
   81f46:	81b2      	strh	r2, [r6, #12]
   81f48:	6034      	str	r4, [r6, #0]
   81f4a:	6074      	str	r4, [r6, #4]
   81f4c:	60b4      	str	r4, [r6, #8]
   81f4e:	6674      	str	r4, [r6, #100]	; 0x64
   81f50:	6134      	str	r4, [r6, #16]
   81f52:	6174      	str	r4, [r6, #20]
   81f54:	61b4      	str	r4, [r6, #24]
   81f56:	2208      	movs	r2, #8
   81f58:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   81f5c:	9301      	str	r3, [sp, #4]
   81f5e:	f7fe ff11 	bl	80d84 <memset>
   81f62:	68fd      	ldr	r5, [r7, #12]
   81f64:	2012      	movs	r0, #18
   81f66:	2202      	movs	r2, #2
   81f68:	61f6      	str	r6, [r6, #28]
   81f6a:	f8c6 b020 	str.w	fp, [r6, #32]
   81f6e:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   81f72:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   81f76:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   81f7a:	4621      	mov	r1, r4
   81f7c:	81a8      	strh	r0, [r5, #12]
   81f7e:	81ea      	strh	r2, [r5, #14]
   81f80:	602c      	str	r4, [r5, #0]
   81f82:	606c      	str	r4, [r5, #4]
   81f84:	60ac      	str	r4, [r5, #8]
   81f86:	666c      	str	r4, [r5, #100]	; 0x64
   81f88:	612c      	str	r4, [r5, #16]
   81f8a:	616c      	str	r4, [r5, #20]
   81f8c:	61ac      	str	r4, [r5, #24]
   81f8e:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   81f92:	2208      	movs	r2, #8
   81f94:	f7fe fef6 	bl	80d84 <memset>
   81f98:	9b01      	ldr	r3, [sp, #4]
   81f9a:	61ed      	str	r5, [r5, #28]
   81f9c:	f8c5 b020 	str.w	fp, [r5, #32]
   81fa0:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   81fa4:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   81fa8:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   81fac:	63bb      	str	r3, [r7, #56]	; 0x38
   81fae:	b003      	add	sp, #12
   81fb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81fb4:	00081ec9 	.word	0x00081ec9
   81fb8:	000832c9 	.word	0x000832c9
   81fbc:	000832ed 	.word	0x000832ed
   81fc0:	00083325 	.word	0x00083325
   81fc4:	00083345 	.word	0x00083345

00081fc8 <__sfp_lock_acquire>:
   81fc8:	4770      	bx	lr
   81fca:	bf00      	nop

00081fcc <__sfp_lock_release>:
   81fcc:	4770      	bx	lr
   81fce:	bf00      	nop

00081fd0 <__libc_fini_array>:
   81fd0:	b538      	push	{r3, r4, r5, lr}
   81fd2:	4d09      	ldr	r5, [pc, #36]	; (81ff8 <__libc_fini_array+0x28>)
   81fd4:	4c09      	ldr	r4, [pc, #36]	; (81ffc <__libc_fini_array+0x2c>)
   81fd6:	1b64      	subs	r4, r4, r5
   81fd8:	10a4      	asrs	r4, r4, #2
   81fda:	bf18      	it	ne
   81fdc:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
   81fe0:	d005      	beq.n	81fee <__libc_fini_array+0x1e>
   81fe2:	3c01      	subs	r4, #1
   81fe4:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   81fe8:	4798      	blx	r3
   81fea:	2c00      	cmp	r4, #0
   81fec:	d1f9      	bne.n	81fe2 <__libc_fini_array+0x12>
   81fee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   81ff2:	f001 bea5 	b.w	83d40 <_fini>
   81ff6:	bf00      	nop
   81ff8:	00083d4c 	.word	0x00083d4c
   81ffc:	00083d50 	.word	0x00083d50

00082000 <_fputwc_r>:
   82000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82004:	8993      	ldrh	r3, [r2, #12]
   82006:	460f      	mov	r7, r1
   82008:	0499      	lsls	r1, r3, #18
   8200a:	b082      	sub	sp, #8
   8200c:	4614      	mov	r4, r2
   8200e:	4680      	mov	r8, r0
   82010:	d406      	bmi.n	82020 <_fputwc_r+0x20>
   82012:	6e52      	ldr	r2, [r2, #100]	; 0x64
   82014:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   82018:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   8201c:	81a3      	strh	r3, [r4, #12]
   8201e:	6662      	str	r2, [r4, #100]	; 0x64
   82020:	f000 fb1c 	bl	8265c <__locale_mb_cur_max>
   82024:	2801      	cmp	r0, #1
   82026:	d03e      	beq.n	820a6 <_fputwc_r+0xa6>
   82028:	463a      	mov	r2, r7
   8202a:	4640      	mov	r0, r8
   8202c:	a901      	add	r1, sp, #4
   8202e:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   82032:	f001 fa0f 	bl	83454 <_wcrtomb_r>
   82036:	1c42      	adds	r2, r0, #1
   82038:	4606      	mov	r6, r0
   8203a:	d02d      	beq.n	82098 <_fputwc_r+0x98>
   8203c:	2800      	cmp	r0, #0
   8203e:	d03a      	beq.n	820b6 <_fputwc_r+0xb6>
   82040:	f89d 1004 	ldrb.w	r1, [sp, #4]
   82044:	2500      	movs	r5, #0
   82046:	e009      	b.n	8205c <_fputwc_r+0x5c>
   82048:	6823      	ldr	r3, [r4, #0]
   8204a:	7019      	strb	r1, [r3, #0]
   8204c:	6823      	ldr	r3, [r4, #0]
   8204e:	3301      	adds	r3, #1
   82050:	6023      	str	r3, [r4, #0]
   82052:	3501      	adds	r5, #1
   82054:	42b5      	cmp	r5, r6
   82056:	d22e      	bcs.n	820b6 <_fputwc_r+0xb6>
   82058:	ab01      	add	r3, sp, #4
   8205a:	5ce9      	ldrb	r1, [r5, r3]
   8205c:	68a3      	ldr	r3, [r4, #8]
   8205e:	3b01      	subs	r3, #1
   82060:	2b00      	cmp	r3, #0
   82062:	60a3      	str	r3, [r4, #8]
   82064:	daf0      	bge.n	82048 <_fputwc_r+0x48>
   82066:	69a2      	ldr	r2, [r4, #24]
   82068:	4293      	cmp	r3, r2
   8206a:	db06      	blt.n	8207a <_fputwc_r+0x7a>
   8206c:	6823      	ldr	r3, [r4, #0]
   8206e:	7019      	strb	r1, [r3, #0]
   82070:	6823      	ldr	r3, [r4, #0]
   82072:	7819      	ldrb	r1, [r3, #0]
   82074:	3301      	adds	r3, #1
   82076:	290a      	cmp	r1, #10
   82078:	d1ea      	bne.n	82050 <_fputwc_r+0x50>
   8207a:	4640      	mov	r0, r8
   8207c:	4622      	mov	r2, r4
   8207e:	f001 f995 	bl	833ac <__swbuf_r>
   82082:	f1b0 33ff 	subs.w	r3, r0, #4294967295
   82086:	4258      	negs	r0, r3
   82088:	4158      	adcs	r0, r3
   8208a:	2800      	cmp	r0, #0
   8208c:	d0e1      	beq.n	82052 <_fputwc_r+0x52>
   8208e:	f04f 30ff 	mov.w	r0, #4294967295
   82092:	b002      	add	sp, #8
   82094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82098:	89a3      	ldrh	r3, [r4, #12]
   8209a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8209e:	81a3      	strh	r3, [r4, #12]
   820a0:	b002      	add	sp, #8
   820a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   820a6:	1e7b      	subs	r3, r7, #1
   820a8:	2bfe      	cmp	r3, #254	; 0xfe
   820aa:	d8bd      	bhi.n	82028 <_fputwc_r+0x28>
   820ac:	b2f9      	uxtb	r1, r7
   820ae:	4606      	mov	r6, r0
   820b0:	f88d 1004 	strb.w	r1, [sp, #4]
   820b4:	e7c6      	b.n	82044 <_fputwc_r+0x44>
   820b6:	4638      	mov	r0, r7
   820b8:	b002      	add	sp, #8
   820ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   820be:	bf00      	nop

000820c0 <_malloc_trim_r>:
   820c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   820c2:	4d23      	ldr	r5, [pc, #140]	; (82150 <_malloc_trim_r+0x90>)
   820c4:	460f      	mov	r7, r1
   820c6:	4604      	mov	r4, r0
   820c8:	f000 ff08 	bl	82edc <__malloc_lock>
   820cc:	68ab      	ldr	r3, [r5, #8]
   820ce:	685e      	ldr	r6, [r3, #4]
   820d0:	f026 0603 	bic.w	r6, r6, #3
   820d4:	1bf1      	subs	r1, r6, r7
   820d6:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   820da:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   820de:	f021 010f 	bic.w	r1, r1, #15
   820e2:	f5a1 5780 	sub.w	r7, r1, #4096	; 0x1000
   820e6:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
   820ea:	db07      	blt.n	820fc <_malloc_trim_r+0x3c>
   820ec:	4620      	mov	r0, r4
   820ee:	2100      	movs	r1, #0
   820f0:	f001 f8d8 	bl	832a4 <_sbrk_r>
   820f4:	68ab      	ldr	r3, [r5, #8]
   820f6:	4433      	add	r3, r6
   820f8:	4298      	cmp	r0, r3
   820fa:	d004      	beq.n	82106 <_malloc_trim_r+0x46>
   820fc:	4620      	mov	r0, r4
   820fe:	f000 feef 	bl	82ee0 <__malloc_unlock>
   82102:	2000      	movs	r0, #0
   82104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82106:	4620      	mov	r0, r4
   82108:	4279      	negs	r1, r7
   8210a:	f001 f8cb 	bl	832a4 <_sbrk_r>
   8210e:	3001      	adds	r0, #1
   82110:	d00d      	beq.n	8212e <_malloc_trim_r+0x6e>
   82112:	4b10      	ldr	r3, [pc, #64]	; (82154 <_malloc_trim_r+0x94>)
   82114:	68aa      	ldr	r2, [r5, #8]
   82116:	6819      	ldr	r1, [r3, #0]
   82118:	1bf6      	subs	r6, r6, r7
   8211a:	f046 0601 	orr.w	r6, r6, #1
   8211e:	4620      	mov	r0, r4
   82120:	1bc9      	subs	r1, r1, r7
   82122:	6056      	str	r6, [r2, #4]
   82124:	6019      	str	r1, [r3, #0]
   82126:	f000 fedb 	bl	82ee0 <__malloc_unlock>
   8212a:	2001      	movs	r0, #1
   8212c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8212e:	4620      	mov	r0, r4
   82130:	2100      	movs	r1, #0
   82132:	f001 f8b7 	bl	832a4 <_sbrk_r>
   82136:	68ab      	ldr	r3, [r5, #8]
   82138:	1ac2      	subs	r2, r0, r3
   8213a:	2a0f      	cmp	r2, #15
   8213c:	ddde      	ble.n	820fc <_malloc_trim_r+0x3c>
   8213e:	4d06      	ldr	r5, [pc, #24]	; (82158 <_malloc_trim_r+0x98>)
   82140:	4904      	ldr	r1, [pc, #16]	; (82154 <_malloc_trim_r+0x94>)
   82142:	682d      	ldr	r5, [r5, #0]
   82144:	f042 0201 	orr.w	r2, r2, #1
   82148:	1b40      	subs	r0, r0, r5
   8214a:	605a      	str	r2, [r3, #4]
   8214c:	6008      	str	r0, [r1, #0]
   8214e:	e7d5      	b.n	820fc <_malloc_trim_r+0x3c>
   82150:	20070588 	.word	0x20070588
   82154:	20070adc 	.word	0x20070adc
   82158:	20070994 	.word	0x20070994

0008215c <_free_r>:
   8215c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82160:	460d      	mov	r5, r1
   82162:	4606      	mov	r6, r0
   82164:	2900      	cmp	r1, #0
   82166:	d055      	beq.n	82214 <_free_r+0xb8>
   82168:	f000 feb8 	bl	82edc <__malloc_lock>
   8216c:	f855 1c04 	ldr.w	r1, [r5, #-4]
   82170:	f8df c170 	ldr.w	ip, [pc, #368]	; 822e4 <_free_r+0x188>
   82174:	f1a5 0408 	sub.w	r4, r5, #8
   82178:	f021 0301 	bic.w	r3, r1, #1
   8217c:	18e2      	adds	r2, r4, r3
   8217e:	f8dc 0008 	ldr.w	r0, [ip, #8]
   82182:	6857      	ldr	r7, [r2, #4]
   82184:	4290      	cmp	r0, r2
   82186:	f027 0703 	bic.w	r7, r7, #3
   8218a:	d068      	beq.n	8225e <_free_r+0x102>
   8218c:	f011 0101 	ands.w	r1, r1, #1
   82190:	6057      	str	r7, [r2, #4]
   82192:	d032      	beq.n	821fa <_free_r+0x9e>
   82194:	2100      	movs	r1, #0
   82196:	19d0      	adds	r0, r2, r7
   82198:	6840      	ldr	r0, [r0, #4]
   8219a:	07c0      	lsls	r0, r0, #31
   8219c:	d406      	bmi.n	821ac <_free_r+0x50>
   8219e:	443b      	add	r3, r7
   821a0:	6890      	ldr	r0, [r2, #8]
   821a2:	2900      	cmp	r1, #0
   821a4:	d04d      	beq.n	82242 <_free_r+0xe6>
   821a6:	68d2      	ldr	r2, [r2, #12]
   821a8:	60c2      	str	r2, [r0, #12]
   821aa:	6090      	str	r0, [r2, #8]
   821ac:	f043 0201 	orr.w	r2, r3, #1
   821b0:	6062      	str	r2, [r4, #4]
   821b2:	50e3      	str	r3, [r4, r3]
   821b4:	b9e1      	cbnz	r1, 821f0 <_free_r+0x94>
   821b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   821ba:	d32d      	bcc.n	82218 <_free_r+0xbc>
   821bc:	0a5a      	lsrs	r2, r3, #9
   821be:	2a04      	cmp	r2, #4
   821c0:	d869      	bhi.n	82296 <_free_r+0x13a>
   821c2:	0998      	lsrs	r0, r3, #6
   821c4:	3038      	adds	r0, #56	; 0x38
   821c6:	0041      	lsls	r1, r0, #1
   821c8:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
   821cc:	f8dc 2008 	ldr.w	r2, [ip, #8]
   821d0:	4944      	ldr	r1, [pc, #272]	; (822e4 <_free_r+0x188>)
   821d2:	4562      	cmp	r2, ip
   821d4:	d065      	beq.n	822a2 <_free_r+0x146>
   821d6:	6851      	ldr	r1, [r2, #4]
   821d8:	f021 0103 	bic.w	r1, r1, #3
   821dc:	428b      	cmp	r3, r1
   821de:	d202      	bcs.n	821e6 <_free_r+0x8a>
   821e0:	6892      	ldr	r2, [r2, #8]
   821e2:	4594      	cmp	ip, r2
   821e4:	d1f7      	bne.n	821d6 <_free_r+0x7a>
   821e6:	68d3      	ldr	r3, [r2, #12]
   821e8:	60e3      	str	r3, [r4, #12]
   821ea:	60a2      	str	r2, [r4, #8]
   821ec:	609c      	str	r4, [r3, #8]
   821ee:	60d4      	str	r4, [r2, #12]
   821f0:	4630      	mov	r0, r6
   821f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   821f6:	f000 be73 	b.w	82ee0 <__malloc_unlock>
   821fa:	f855 5c08 	ldr.w	r5, [r5, #-8]
   821fe:	f10c 0808 	add.w	r8, ip, #8
   82202:	1b64      	subs	r4, r4, r5
   82204:	68a0      	ldr	r0, [r4, #8]
   82206:	442b      	add	r3, r5
   82208:	4540      	cmp	r0, r8
   8220a:	d042      	beq.n	82292 <_free_r+0x136>
   8220c:	68e5      	ldr	r5, [r4, #12]
   8220e:	60c5      	str	r5, [r0, #12]
   82210:	60a8      	str	r0, [r5, #8]
   82212:	e7c0      	b.n	82196 <_free_r+0x3a>
   82214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82218:	08db      	lsrs	r3, r3, #3
   8221a:	109a      	asrs	r2, r3, #2
   8221c:	2001      	movs	r0, #1
   8221e:	4090      	lsls	r0, r2
   82220:	f8dc 1004 	ldr.w	r1, [ip, #4]
   82224:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
   82228:	689a      	ldr	r2, [r3, #8]
   8222a:	4301      	orrs	r1, r0
   8222c:	60a2      	str	r2, [r4, #8]
   8222e:	60e3      	str	r3, [r4, #12]
   82230:	f8cc 1004 	str.w	r1, [ip, #4]
   82234:	4630      	mov	r0, r6
   82236:	609c      	str	r4, [r3, #8]
   82238:	60d4      	str	r4, [r2, #12]
   8223a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8223e:	f000 be4f 	b.w	82ee0 <__malloc_unlock>
   82242:	4d29      	ldr	r5, [pc, #164]	; (822e8 <_free_r+0x18c>)
   82244:	42a8      	cmp	r0, r5
   82246:	d1ae      	bne.n	821a6 <_free_r+0x4a>
   82248:	f043 0201 	orr.w	r2, r3, #1
   8224c:	f8cc 4014 	str.w	r4, [ip, #20]
   82250:	f8cc 4010 	str.w	r4, [ip, #16]
   82254:	60e0      	str	r0, [r4, #12]
   82256:	60a0      	str	r0, [r4, #8]
   82258:	6062      	str	r2, [r4, #4]
   8225a:	50e3      	str	r3, [r4, r3]
   8225c:	e7c8      	b.n	821f0 <_free_r+0x94>
   8225e:	441f      	add	r7, r3
   82260:	07cb      	lsls	r3, r1, #31
   82262:	d407      	bmi.n	82274 <_free_r+0x118>
   82264:	f855 1c08 	ldr.w	r1, [r5, #-8]
   82268:	1a64      	subs	r4, r4, r1
   8226a:	68e3      	ldr	r3, [r4, #12]
   8226c:	68a2      	ldr	r2, [r4, #8]
   8226e:	440f      	add	r7, r1
   82270:	60d3      	str	r3, [r2, #12]
   82272:	609a      	str	r2, [r3, #8]
   82274:	4b1d      	ldr	r3, [pc, #116]	; (822ec <_free_r+0x190>)
   82276:	f047 0201 	orr.w	r2, r7, #1
   8227a:	681b      	ldr	r3, [r3, #0]
   8227c:	6062      	str	r2, [r4, #4]
   8227e:	429f      	cmp	r7, r3
   82280:	f8cc 4008 	str.w	r4, [ip, #8]
   82284:	d3b4      	bcc.n	821f0 <_free_r+0x94>
   82286:	4b1a      	ldr	r3, [pc, #104]	; (822f0 <_free_r+0x194>)
   82288:	4630      	mov	r0, r6
   8228a:	6819      	ldr	r1, [r3, #0]
   8228c:	f7ff ff18 	bl	820c0 <_malloc_trim_r>
   82290:	e7ae      	b.n	821f0 <_free_r+0x94>
   82292:	2101      	movs	r1, #1
   82294:	e77f      	b.n	82196 <_free_r+0x3a>
   82296:	2a14      	cmp	r2, #20
   82298:	d80b      	bhi.n	822b2 <_free_r+0x156>
   8229a:	f102 005b 	add.w	r0, r2, #91	; 0x5b
   8229e:	0041      	lsls	r1, r0, #1
   822a0:	e792      	b.n	821c8 <_free_r+0x6c>
   822a2:	1080      	asrs	r0, r0, #2
   822a4:	2501      	movs	r5, #1
   822a6:	4085      	lsls	r5, r0
   822a8:	6848      	ldr	r0, [r1, #4]
   822aa:	4613      	mov	r3, r2
   822ac:	4328      	orrs	r0, r5
   822ae:	6048      	str	r0, [r1, #4]
   822b0:	e79a      	b.n	821e8 <_free_r+0x8c>
   822b2:	2a54      	cmp	r2, #84	; 0x54
   822b4:	d803      	bhi.n	822be <_free_r+0x162>
   822b6:	0b18      	lsrs	r0, r3, #12
   822b8:	306e      	adds	r0, #110	; 0x6e
   822ba:	0041      	lsls	r1, r0, #1
   822bc:	e784      	b.n	821c8 <_free_r+0x6c>
   822be:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   822c2:	d803      	bhi.n	822cc <_free_r+0x170>
   822c4:	0bd8      	lsrs	r0, r3, #15
   822c6:	3077      	adds	r0, #119	; 0x77
   822c8:	0041      	lsls	r1, r0, #1
   822ca:	e77d      	b.n	821c8 <_free_r+0x6c>
   822cc:	f240 5154 	movw	r1, #1364	; 0x554
   822d0:	428a      	cmp	r2, r1
   822d2:	d803      	bhi.n	822dc <_free_r+0x180>
   822d4:	0c98      	lsrs	r0, r3, #18
   822d6:	307c      	adds	r0, #124	; 0x7c
   822d8:	0041      	lsls	r1, r0, #1
   822da:	e775      	b.n	821c8 <_free_r+0x6c>
   822dc:	21fc      	movs	r1, #252	; 0xfc
   822de:	207e      	movs	r0, #126	; 0x7e
   822e0:	e772      	b.n	821c8 <_free_r+0x6c>
   822e2:	bf00      	nop
   822e4:	20070588 	.word	0x20070588
   822e8:	20070590 	.word	0x20070590
   822ec:	20070990 	.word	0x20070990
   822f0:	20070ad8 	.word	0x20070ad8

000822f4 <__sfvwrite_r>:
   822f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   822f8:	6893      	ldr	r3, [r2, #8]
   822fa:	b083      	sub	sp, #12
   822fc:	4616      	mov	r6, r2
   822fe:	4681      	mov	r9, r0
   82300:	460c      	mov	r4, r1
   82302:	b32b      	cbz	r3, 82350 <__sfvwrite_r+0x5c>
   82304:	898b      	ldrh	r3, [r1, #12]
   82306:	0719      	lsls	r1, r3, #28
   82308:	d526      	bpl.n	82358 <__sfvwrite_r+0x64>
   8230a:	6922      	ldr	r2, [r4, #16]
   8230c:	b322      	cbz	r2, 82358 <__sfvwrite_r+0x64>
   8230e:	f003 0202 	and.w	r2, r3, #2
   82312:	b292      	uxth	r2, r2
   82314:	6835      	ldr	r5, [r6, #0]
   82316:	2a00      	cmp	r2, #0
   82318:	d02c      	beq.n	82374 <__sfvwrite_r+0x80>
   8231a:	f04f 0a00 	mov.w	sl, #0
   8231e:	f8df b2e8 	ldr.w	fp, [pc, #744]	; 82608 <__sfvwrite_r+0x314>
   82322:	46d0      	mov	r8, sl
   82324:	45d8      	cmp	r8, fp
   82326:	bf34      	ite	cc
   82328:	4643      	movcc	r3, r8
   8232a:	465b      	movcs	r3, fp
   8232c:	4652      	mov	r2, sl
   8232e:	4648      	mov	r0, r9
   82330:	f1b8 0f00 	cmp.w	r8, #0
   82334:	d04f      	beq.n	823d6 <__sfvwrite_r+0xe2>
   82336:	69e1      	ldr	r1, [r4, #28]
   82338:	6a67      	ldr	r7, [r4, #36]	; 0x24
   8233a:	47b8      	blx	r7
   8233c:	2800      	cmp	r0, #0
   8233e:	dd56      	ble.n	823ee <__sfvwrite_r+0xfa>
   82340:	68b3      	ldr	r3, [r6, #8]
   82342:	4482      	add	sl, r0
   82344:	1a1b      	subs	r3, r3, r0
   82346:	ebc0 0808 	rsb	r8, r0, r8
   8234a:	60b3      	str	r3, [r6, #8]
   8234c:	2b00      	cmp	r3, #0
   8234e:	d1e9      	bne.n	82324 <__sfvwrite_r+0x30>
   82350:	2000      	movs	r0, #0
   82352:	b003      	add	sp, #12
   82354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82358:	4648      	mov	r0, r9
   8235a:	4621      	mov	r1, r4
   8235c:	f7ff fc88 	bl	81c70 <__swsetup_r>
   82360:	2800      	cmp	r0, #0
   82362:	f040 8148 	bne.w	825f6 <__sfvwrite_r+0x302>
   82366:	89a3      	ldrh	r3, [r4, #12]
   82368:	6835      	ldr	r5, [r6, #0]
   8236a:	f003 0202 	and.w	r2, r3, #2
   8236e:	b292      	uxth	r2, r2
   82370:	2a00      	cmp	r2, #0
   82372:	d1d2      	bne.n	8231a <__sfvwrite_r+0x26>
   82374:	f013 0a01 	ands.w	sl, r3, #1
   82378:	d142      	bne.n	82400 <__sfvwrite_r+0x10c>
   8237a:	46d0      	mov	r8, sl
   8237c:	f1b8 0f00 	cmp.w	r8, #0
   82380:	d023      	beq.n	823ca <__sfvwrite_r+0xd6>
   82382:	059a      	lsls	r2, r3, #22
   82384:	68a7      	ldr	r7, [r4, #8]
   82386:	d576      	bpl.n	82476 <__sfvwrite_r+0x182>
   82388:	45b8      	cmp	r8, r7
   8238a:	f0c0 80a4 	bcc.w	824d6 <__sfvwrite_r+0x1e2>
   8238e:	f413 6f90 	tst.w	r3, #1152	; 0x480
   82392:	f040 80b2 	bne.w	824fa <__sfvwrite_r+0x206>
   82396:	6820      	ldr	r0, [r4, #0]
   82398:	46bb      	mov	fp, r7
   8239a:	4651      	mov	r1, sl
   8239c:	465a      	mov	r2, fp
   8239e:	f000 fd37 	bl	82e10 <memmove>
   823a2:	68a2      	ldr	r2, [r4, #8]
   823a4:	6821      	ldr	r1, [r4, #0]
   823a6:	1bd2      	subs	r2, r2, r7
   823a8:	eb01 030b 	add.w	r3, r1, fp
   823ac:	60a2      	str	r2, [r4, #8]
   823ae:	6023      	str	r3, [r4, #0]
   823b0:	4642      	mov	r2, r8
   823b2:	68b3      	ldr	r3, [r6, #8]
   823b4:	4492      	add	sl, r2
   823b6:	1a9b      	subs	r3, r3, r2
   823b8:	ebc2 0808 	rsb	r8, r2, r8
   823bc:	60b3      	str	r3, [r6, #8]
   823be:	2b00      	cmp	r3, #0
   823c0:	d0c6      	beq.n	82350 <__sfvwrite_r+0x5c>
   823c2:	89a3      	ldrh	r3, [r4, #12]
   823c4:	f1b8 0f00 	cmp.w	r8, #0
   823c8:	d1db      	bne.n	82382 <__sfvwrite_r+0x8e>
   823ca:	f8d5 a000 	ldr.w	sl, [r5]
   823ce:	f8d5 8004 	ldr.w	r8, [r5, #4]
   823d2:	3508      	adds	r5, #8
   823d4:	e7d2      	b.n	8237c <__sfvwrite_r+0x88>
   823d6:	f8d5 a000 	ldr.w	sl, [r5]
   823da:	f8d5 8004 	ldr.w	r8, [r5, #4]
   823de:	3508      	adds	r5, #8
   823e0:	e7a0      	b.n	82324 <__sfvwrite_r+0x30>
   823e2:	4648      	mov	r0, r9
   823e4:	4621      	mov	r1, r4
   823e6:	f7ff fd59 	bl	81e9c <_fflush_r>
   823ea:	2800      	cmp	r0, #0
   823ec:	d059      	beq.n	824a2 <__sfvwrite_r+0x1ae>
   823ee:	89a3      	ldrh	r3, [r4, #12]
   823f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   823f4:	f04f 30ff 	mov.w	r0, #4294967295
   823f8:	81a3      	strh	r3, [r4, #12]
   823fa:	b003      	add	sp, #12
   823fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82400:	4692      	mov	sl, r2
   82402:	9201      	str	r2, [sp, #4]
   82404:	4693      	mov	fp, r2
   82406:	4690      	mov	r8, r2
   82408:	f1b8 0f00 	cmp.w	r8, #0
   8240c:	d02b      	beq.n	82466 <__sfvwrite_r+0x172>
   8240e:	9f01      	ldr	r7, [sp, #4]
   82410:	2f00      	cmp	r7, #0
   82412:	d064      	beq.n	824de <__sfvwrite_r+0x1ea>
   82414:	6820      	ldr	r0, [r4, #0]
   82416:	6921      	ldr	r1, [r4, #16]
   82418:	45c2      	cmp	sl, r8
   8241a:	bf34      	ite	cc
   8241c:	4653      	movcc	r3, sl
   8241e:	4643      	movcs	r3, r8
   82420:	4288      	cmp	r0, r1
   82422:	461f      	mov	r7, r3
   82424:	f8d4 c008 	ldr.w	ip, [r4, #8]
   82428:	6962      	ldr	r2, [r4, #20]
   8242a:	d903      	bls.n	82434 <__sfvwrite_r+0x140>
   8242c:	4494      	add	ip, r2
   8242e:	4563      	cmp	r3, ip
   82430:	f300 80ae 	bgt.w	82590 <__sfvwrite_r+0x29c>
   82434:	4293      	cmp	r3, r2
   82436:	db36      	blt.n	824a6 <__sfvwrite_r+0x1b2>
   82438:	4613      	mov	r3, r2
   8243a:	6a67      	ldr	r7, [r4, #36]	; 0x24
   8243c:	4648      	mov	r0, r9
   8243e:	69e1      	ldr	r1, [r4, #28]
   82440:	465a      	mov	r2, fp
   82442:	47b8      	blx	r7
   82444:	1e07      	subs	r7, r0, #0
   82446:	ddd2      	ble.n	823ee <__sfvwrite_r+0xfa>
   82448:	ebba 0a07 	subs.w	sl, sl, r7
   8244c:	d03a      	beq.n	824c4 <__sfvwrite_r+0x1d0>
   8244e:	68b3      	ldr	r3, [r6, #8]
   82450:	44bb      	add	fp, r7
   82452:	1bdb      	subs	r3, r3, r7
   82454:	ebc7 0808 	rsb	r8, r7, r8
   82458:	60b3      	str	r3, [r6, #8]
   8245a:	2b00      	cmp	r3, #0
   8245c:	f43f af78 	beq.w	82350 <__sfvwrite_r+0x5c>
   82460:	f1b8 0f00 	cmp.w	r8, #0
   82464:	d1d3      	bne.n	8240e <__sfvwrite_r+0x11a>
   82466:	2700      	movs	r7, #0
   82468:	f8d5 b000 	ldr.w	fp, [r5]
   8246c:	f8d5 8004 	ldr.w	r8, [r5, #4]
   82470:	9701      	str	r7, [sp, #4]
   82472:	3508      	adds	r5, #8
   82474:	e7c8      	b.n	82408 <__sfvwrite_r+0x114>
   82476:	6820      	ldr	r0, [r4, #0]
   82478:	6923      	ldr	r3, [r4, #16]
   8247a:	4298      	cmp	r0, r3
   8247c:	d802      	bhi.n	82484 <__sfvwrite_r+0x190>
   8247e:	6963      	ldr	r3, [r4, #20]
   82480:	4598      	cmp	r8, r3
   82482:	d272      	bcs.n	8256a <__sfvwrite_r+0x276>
   82484:	45b8      	cmp	r8, r7
   82486:	bf38      	it	cc
   82488:	4647      	movcc	r7, r8
   8248a:	463a      	mov	r2, r7
   8248c:	4651      	mov	r1, sl
   8248e:	f000 fcbf 	bl	82e10 <memmove>
   82492:	68a3      	ldr	r3, [r4, #8]
   82494:	6822      	ldr	r2, [r4, #0]
   82496:	1bdb      	subs	r3, r3, r7
   82498:	443a      	add	r2, r7
   8249a:	60a3      	str	r3, [r4, #8]
   8249c:	6022      	str	r2, [r4, #0]
   8249e:	2b00      	cmp	r3, #0
   824a0:	d09f      	beq.n	823e2 <__sfvwrite_r+0xee>
   824a2:	463a      	mov	r2, r7
   824a4:	e785      	b.n	823b2 <__sfvwrite_r+0xbe>
   824a6:	461a      	mov	r2, r3
   824a8:	4659      	mov	r1, fp
   824aa:	9300      	str	r3, [sp, #0]
   824ac:	f000 fcb0 	bl	82e10 <memmove>
   824b0:	9b00      	ldr	r3, [sp, #0]
   824b2:	68a1      	ldr	r1, [r4, #8]
   824b4:	6822      	ldr	r2, [r4, #0]
   824b6:	1ac9      	subs	r1, r1, r3
   824b8:	ebba 0a07 	subs.w	sl, sl, r7
   824bc:	4413      	add	r3, r2
   824be:	60a1      	str	r1, [r4, #8]
   824c0:	6023      	str	r3, [r4, #0]
   824c2:	d1c4      	bne.n	8244e <__sfvwrite_r+0x15a>
   824c4:	4648      	mov	r0, r9
   824c6:	4621      	mov	r1, r4
   824c8:	f7ff fce8 	bl	81e9c <_fflush_r>
   824cc:	2800      	cmp	r0, #0
   824ce:	d18e      	bne.n	823ee <__sfvwrite_r+0xfa>
   824d0:	f8cd a004 	str.w	sl, [sp, #4]
   824d4:	e7bb      	b.n	8244e <__sfvwrite_r+0x15a>
   824d6:	6820      	ldr	r0, [r4, #0]
   824d8:	4647      	mov	r7, r8
   824da:	46c3      	mov	fp, r8
   824dc:	e75d      	b.n	8239a <__sfvwrite_r+0xa6>
   824de:	4658      	mov	r0, fp
   824e0:	210a      	movs	r1, #10
   824e2:	4642      	mov	r2, r8
   824e4:	f000 fbd4 	bl	82c90 <memchr>
   824e8:	2800      	cmp	r0, #0
   824ea:	d07f      	beq.n	825ec <__sfvwrite_r+0x2f8>
   824ec:	f100 0a01 	add.w	sl, r0, #1
   824f0:	2701      	movs	r7, #1
   824f2:	ebcb 0a0a 	rsb	sl, fp, sl
   824f6:	9701      	str	r7, [sp, #4]
   824f8:	e78c      	b.n	82414 <__sfvwrite_r+0x120>
   824fa:	6822      	ldr	r2, [r4, #0]
   824fc:	6921      	ldr	r1, [r4, #16]
   824fe:	6967      	ldr	r7, [r4, #20]
   82500:	ebc1 0c02 	rsb	ip, r1, r2
   82504:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   82508:	f10c 0201 	add.w	r2, ip, #1
   8250c:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   82510:	4442      	add	r2, r8
   82512:	107f      	asrs	r7, r7, #1
   82514:	4297      	cmp	r7, r2
   82516:	bf34      	ite	cc
   82518:	4617      	movcc	r7, r2
   8251a:	463a      	movcs	r2, r7
   8251c:	055b      	lsls	r3, r3, #21
   8251e:	d54f      	bpl.n	825c0 <__sfvwrite_r+0x2cc>
   82520:	4611      	mov	r1, r2
   82522:	4648      	mov	r0, r9
   82524:	f8cd c000 	str.w	ip, [sp]
   82528:	f000 f916 	bl	82758 <_malloc_r>
   8252c:	f8dd c000 	ldr.w	ip, [sp]
   82530:	4683      	mov	fp, r0
   82532:	2800      	cmp	r0, #0
   82534:	d062      	beq.n	825fc <__sfvwrite_r+0x308>
   82536:	4662      	mov	r2, ip
   82538:	6921      	ldr	r1, [r4, #16]
   8253a:	f8cd c000 	str.w	ip, [sp]
   8253e:	f000 fbf1 	bl	82d24 <memcpy>
   82542:	89a2      	ldrh	r2, [r4, #12]
   82544:	f8dd c000 	ldr.w	ip, [sp]
   82548:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   8254c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   82550:	81a2      	strh	r2, [r4, #12]
   82552:	eb0b 000c 	add.w	r0, fp, ip
   82556:	ebcc 0207 	rsb	r2, ip, r7
   8255a:	f8c4 b010 	str.w	fp, [r4, #16]
   8255e:	6167      	str	r7, [r4, #20]
   82560:	6020      	str	r0, [r4, #0]
   82562:	60a2      	str	r2, [r4, #8]
   82564:	4647      	mov	r7, r8
   82566:	46c3      	mov	fp, r8
   82568:	e717      	b.n	8239a <__sfvwrite_r+0xa6>
   8256a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   8256e:	4590      	cmp	r8, r2
   82570:	bf38      	it	cc
   82572:	4642      	movcc	r2, r8
   82574:	fb92 f2f3 	sdiv	r2, r2, r3
   82578:	fb02 f303 	mul.w	r3, r2, r3
   8257c:	6a67      	ldr	r7, [r4, #36]	; 0x24
   8257e:	4648      	mov	r0, r9
   82580:	69e1      	ldr	r1, [r4, #28]
   82582:	4652      	mov	r2, sl
   82584:	47b8      	blx	r7
   82586:	2800      	cmp	r0, #0
   82588:	f77f af31 	ble.w	823ee <__sfvwrite_r+0xfa>
   8258c:	4602      	mov	r2, r0
   8258e:	e710      	b.n	823b2 <__sfvwrite_r+0xbe>
   82590:	4662      	mov	r2, ip
   82592:	4659      	mov	r1, fp
   82594:	f8cd c000 	str.w	ip, [sp]
   82598:	f000 fc3a 	bl	82e10 <memmove>
   8259c:	f8dd c000 	ldr.w	ip, [sp]
   825a0:	6823      	ldr	r3, [r4, #0]
   825a2:	4648      	mov	r0, r9
   825a4:	4463      	add	r3, ip
   825a6:	6023      	str	r3, [r4, #0]
   825a8:	4621      	mov	r1, r4
   825aa:	f8cd c000 	str.w	ip, [sp]
   825ae:	f7ff fc75 	bl	81e9c <_fflush_r>
   825b2:	f8dd c000 	ldr.w	ip, [sp]
   825b6:	2800      	cmp	r0, #0
   825b8:	f47f af19 	bne.w	823ee <__sfvwrite_r+0xfa>
   825bc:	4667      	mov	r7, ip
   825be:	e743      	b.n	82448 <__sfvwrite_r+0x154>
   825c0:	4648      	mov	r0, r9
   825c2:	f8cd c000 	str.w	ip, [sp]
   825c6:	f000 fc8d 	bl	82ee4 <_realloc_r>
   825ca:	f8dd c000 	ldr.w	ip, [sp]
   825ce:	4683      	mov	fp, r0
   825d0:	2800      	cmp	r0, #0
   825d2:	d1be      	bne.n	82552 <__sfvwrite_r+0x25e>
   825d4:	4648      	mov	r0, r9
   825d6:	6921      	ldr	r1, [r4, #16]
   825d8:	f7ff fdc0 	bl	8215c <_free_r>
   825dc:	89a3      	ldrh	r3, [r4, #12]
   825de:	220c      	movs	r2, #12
   825e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   825e4:	b29b      	uxth	r3, r3
   825e6:	f8c9 2000 	str.w	r2, [r9]
   825ea:	e701      	b.n	823f0 <__sfvwrite_r+0xfc>
   825ec:	2701      	movs	r7, #1
   825ee:	f108 0a01 	add.w	sl, r8, #1
   825f2:	9701      	str	r7, [sp, #4]
   825f4:	e70e      	b.n	82414 <__sfvwrite_r+0x120>
   825f6:	f04f 30ff 	mov.w	r0, #4294967295
   825fa:	e6aa      	b.n	82352 <__sfvwrite_r+0x5e>
   825fc:	230c      	movs	r3, #12
   825fe:	f8c9 3000 	str.w	r3, [r9]
   82602:	89a3      	ldrh	r3, [r4, #12]
   82604:	e6f4      	b.n	823f0 <__sfvwrite_r+0xfc>
   82606:	bf00      	nop
   82608:	7ffffc00 	.word	0x7ffffc00

0008260c <_fwalk>:
   8260c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82610:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
   82614:	4688      	mov	r8, r1
   82616:	d019      	beq.n	8264c <_fwalk+0x40>
   82618:	2600      	movs	r6, #0
   8261a:	687d      	ldr	r5, [r7, #4]
   8261c:	68bc      	ldr	r4, [r7, #8]
   8261e:	3d01      	subs	r5, #1
   82620:	d40e      	bmi.n	82640 <_fwalk+0x34>
   82622:	89a3      	ldrh	r3, [r4, #12]
   82624:	3d01      	subs	r5, #1
   82626:	2b01      	cmp	r3, #1
   82628:	d906      	bls.n	82638 <_fwalk+0x2c>
   8262a:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   8262e:	4620      	mov	r0, r4
   82630:	3301      	adds	r3, #1
   82632:	d001      	beq.n	82638 <_fwalk+0x2c>
   82634:	47c0      	blx	r8
   82636:	4306      	orrs	r6, r0
   82638:	1c6b      	adds	r3, r5, #1
   8263a:	f104 0468 	add.w	r4, r4, #104	; 0x68
   8263e:	d1f0      	bne.n	82622 <_fwalk+0x16>
   82640:	683f      	ldr	r7, [r7, #0]
   82642:	2f00      	cmp	r7, #0
   82644:	d1e9      	bne.n	8261a <_fwalk+0xe>
   82646:	4630      	mov	r0, r6
   82648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8264c:	463e      	mov	r6, r7
   8264e:	4630      	mov	r0, r6
   82650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00082654 <__locale_charset>:
   82654:	4800      	ldr	r0, [pc, #0]	; (82658 <__locale_charset+0x4>)
   82656:	4770      	bx	lr
   82658:	20070564 	.word	0x20070564

0008265c <__locale_mb_cur_max>:
   8265c:	4b01      	ldr	r3, [pc, #4]	; (82664 <__locale_mb_cur_max+0x8>)
   8265e:	6818      	ldr	r0, [r3, #0]
   82660:	4770      	bx	lr
   82662:	bf00      	nop
   82664:	20070584 	.word	0x20070584

00082668 <__smakebuf_r>:
   82668:	b5f0      	push	{r4, r5, r6, r7, lr}
   8266a:	898b      	ldrh	r3, [r1, #12]
   8266c:	b091      	sub	sp, #68	; 0x44
   8266e:	b29a      	uxth	r2, r3
   82670:	0796      	lsls	r6, r2, #30
   82672:	460c      	mov	r4, r1
   82674:	4605      	mov	r5, r0
   82676:	d437      	bmi.n	826e8 <__smakebuf_r+0x80>
   82678:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8267c:	2900      	cmp	r1, #0
   8267e:	db17      	blt.n	826b0 <__smakebuf_r+0x48>
   82680:	aa01      	add	r2, sp, #4
   82682:	f000 ffdf 	bl	83644 <_fstat_r>
   82686:	2800      	cmp	r0, #0
   82688:	db10      	blt.n	826ac <__smakebuf_r+0x44>
   8268a:	9b02      	ldr	r3, [sp, #8]
   8268c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
   82690:	f5b3 5100 	subs.w	r1, r3, #8192	; 0x2000
   82694:	424f      	negs	r7, r1
   82696:	414f      	adcs	r7, r1
   82698:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   8269c:	d02c      	beq.n	826f8 <__smakebuf_r+0x90>
   8269e:	89a3      	ldrh	r3, [r4, #12]
   826a0:	f44f 6680 	mov.w	r6, #1024	; 0x400
   826a4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   826a8:	81a3      	strh	r3, [r4, #12]
   826aa:	e00b      	b.n	826c4 <__smakebuf_r+0x5c>
   826ac:	89a3      	ldrh	r3, [r4, #12]
   826ae:	b29a      	uxth	r2, r3
   826b0:	f012 0f80 	tst.w	r2, #128	; 0x80
   826b4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   826b8:	81a3      	strh	r3, [r4, #12]
   826ba:	bf14      	ite	ne
   826bc:	2640      	movne	r6, #64	; 0x40
   826be:	f44f 6680 	moveq.w	r6, #1024	; 0x400
   826c2:	2700      	movs	r7, #0
   826c4:	4628      	mov	r0, r5
   826c6:	4631      	mov	r1, r6
   826c8:	f000 f846 	bl	82758 <_malloc_r>
   826cc:	89a3      	ldrh	r3, [r4, #12]
   826ce:	2800      	cmp	r0, #0
   826d0:	d029      	beq.n	82726 <__smakebuf_r+0xbe>
   826d2:	4a1b      	ldr	r2, [pc, #108]	; (82740 <__smakebuf_r+0xd8>)
   826d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   826d8:	63ea      	str	r2, [r5, #60]	; 0x3c
   826da:	81a3      	strh	r3, [r4, #12]
   826dc:	6020      	str	r0, [r4, #0]
   826de:	6120      	str	r0, [r4, #16]
   826e0:	6166      	str	r6, [r4, #20]
   826e2:	b9a7      	cbnz	r7, 8270e <__smakebuf_r+0xa6>
   826e4:	b011      	add	sp, #68	; 0x44
   826e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   826e8:	f101 0343 	add.w	r3, r1, #67	; 0x43
   826ec:	2201      	movs	r2, #1
   826ee:	600b      	str	r3, [r1, #0]
   826f0:	610b      	str	r3, [r1, #16]
   826f2:	614a      	str	r2, [r1, #20]
   826f4:	b011      	add	sp, #68	; 0x44
   826f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   826f8:	4a12      	ldr	r2, [pc, #72]	; (82744 <__smakebuf_r+0xdc>)
   826fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   826fc:	4293      	cmp	r3, r2
   826fe:	d1ce      	bne.n	8269e <__smakebuf_r+0x36>
   82700:	89a3      	ldrh	r3, [r4, #12]
   82702:	f44f 6680 	mov.w	r6, #1024	; 0x400
   82706:	4333      	orrs	r3, r6
   82708:	81a3      	strh	r3, [r4, #12]
   8270a:	64e6      	str	r6, [r4, #76]	; 0x4c
   8270c:	e7da      	b.n	826c4 <__smakebuf_r+0x5c>
   8270e:	4628      	mov	r0, r5
   82710:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   82714:	f000 ffaa 	bl	8366c <_isatty_r>
   82718:	2800      	cmp	r0, #0
   8271a:	d0e3      	beq.n	826e4 <__smakebuf_r+0x7c>
   8271c:	89a3      	ldrh	r3, [r4, #12]
   8271e:	f043 0301 	orr.w	r3, r3, #1
   82722:	81a3      	strh	r3, [r4, #12]
   82724:	e7de      	b.n	826e4 <__smakebuf_r+0x7c>
   82726:	059a      	lsls	r2, r3, #22
   82728:	d4dc      	bmi.n	826e4 <__smakebuf_r+0x7c>
   8272a:	f104 0243 	add.w	r2, r4, #67	; 0x43
   8272e:	f043 0302 	orr.w	r3, r3, #2
   82732:	2101      	movs	r1, #1
   82734:	81a3      	strh	r3, [r4, #12]
   82736:	6022      	str	r2, [r4, #0]
   82738:	6122      	str	r2, [r4, #16]
   8273a:	6161      	str	r1, [r4, #20]
   8273c:	e7d2      	b.n	826e4 <__smakebuf_r+0x7c>
   8273e:	bf00      	nop
   82740:	00081ec9 	.word	0x00081ec9
   82744:	00083325 	.word	0x00083325

00082748 <malloc>:
   82748:	4b02      	ldr	r3, [pc, #8]	; (82754 <malloc+0xc>)
   8274a:	4601      	mov	r1, r0
   8274c:	6818      	ldr	r0, [r3, #0]
   8274e:	f000 b803 	b.w	82758 <_malloc_r>
   82752:	bf00      	nop
   82754:	20070560 	.word	0x20070560

00082758 <_malloc_r>:
   82758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8275c:	f101 050b 	add.w	r5, r1, #11
   82760:	2d16      	cmp	r5, #22
   82762:	b083      	sub	sp, #12
   82764:	4606      	mov	r6, r0
   82766:	d927      	bls.n	827b8 <_malloc_r+0x60>
   82768:	f035 0507 	bics.w	r5, r5, #7
   8276c:	d427      	bmi.n	827be <_malloc_r+0x66>
   8276e:	42a9      	cmp	r1, r5
   82770:	d825      	bhi.n	827be <_malloc_r+0x66>
   82772:	4630      	mov	r0, r6
   82774:	f000 fbb2 	bl	82edc <__malloc_lock>
   82778:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   8277c:	d226      	bcs.n	827cc <_malloc_r+0x74>
   8277e:	4fc1      	ldr	r7, [pc, #772]	; (82a84 <_malloc_r+0x32c>)
   82780:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
   82784:	eb07 03cc 	add.w	r3, r7, ip, lsl #3
   82788:	68dc      	ldr	r4, [r3, #12]
   8278a:	429c      	cmp	r4, r3
   8278c:	f000 81d2 	beq.w	82b34 <_malloc_r+0x3dc>
   82790:	6863      	ldr	r3, [r4, #4]
   82792:	68e2      	ldr	r2, [r4, #12]
   82794:	f023 0303 	bic.w	r3, r3, #3
   82798:	4423      	add	r3, r4
   8279a:	6858      	ldr	r0, [r3, #4]
   8279c:	68a1      	ldr	r1, [r4, #8]
   8279e:	f040 0501 	orr.w	r5, r0, #1
   827a2:	60ca      	str	r2, [r1, #12]
   827a4:	4630      	mov	r0, r6
   827a6:	6091      	str	r1, [r2, #8]
   827a8:	605d      	str	r5, [r3, #4]
   827aa:	f000 fb99 	bl	82ee0 <__malloc_unlock>
   827ae:	3408      	adds	r4, #8
   827b0:	4620      	mov	r0, r4
   827b2:	b003      	add	sp, #12
   827b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   827b8:	2510      	movs	r5, #16
   827ba:	42a9      	cmp	r1, r5
   827bc:	d9d9      	bls.n	82772 <_malloc_r+0x1a>
   827be:	2400      	movs	r4, #0
   827c0:	230c      	movs	r3, #12
   827c2:	4620      	mov	r0, r4
   827c4:	6033      	str	r3, [r6, #0]
   827c6:	b003      	add	sp, #12
   827c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   827cc:	ea5f 2c55 	movs.w	ip, r5, lsr #9
   827d0:	f000 8089 	beq.w	828e6 <_malloc_r+0x18e>
   827d4:	f1bc 0f04 	cmp.w	ip, #4
   827d8:	f200 8160 	bhi.w	82a9c <_malloc_r+0x344>
   827dc:	ea4f 1c95 	mov.w	ip, r5, lsr #6
   827e0:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
   827e4:	ea4f 014c 	mov.w	r1, ip, lsl #1
   827e8:	4fa6      	ldr	r7, [pc, #664]	; (82a84 <_malloc_r+0x32c>)
   827ea:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   827ee:	68cc      	ldr	r4, [r1, #12]
   827f0:	42a1      	cmp	r1, r4
   827f2:	d105      	bne.n	82800 <_malloc_r+0xa8>
   827f4:	e00c      	b.n	82810 <_malloc_r+0xb8>
   827f6:	2b00      	cmp	r3, #0
   827f8:	da79      	bge.n	828ee <_malloc_r+0x196>
   827fa:	68e4      	ldr	r4, [r4, #12]
   827fc:	42a1      	cmp	r1, r4
   827fe:	d007      	beq.n	82810 <_malloc_r+0xb8>
   82800:	6862      	ldr	r2, [r4, #4]
   82802:	f022 0203 	bic.w	r2, r2, #3
   82806:	1b53      	subs	r3, r2, r5
   82808:	2b0f      	cmp	r3, #15
   8280a:	ddf4      	ble.n	827f6 <_malloc_r+0x9e>
   8280c:	f10c 3cff 	add.w	ip, ip, #4294967295
   82810:	f10c 0c01 	add.w	ip, ip, #1
   82814:	4b9b      	ldr	r3, [pc, #620]	; (82a84 <_malloc_r+0x32c>)
   82816:	693c      	ldr	r4, [r7, #16]
   82818:	f103 0e08 	add.w	lr, r3, #8
   8281c:	4574      	cmp	r4, lr
   8281e:	f000 817e 	beq.w	82b1e <_malloc_r+0x3c6>
   82822:	6861      	ldr	r1, [r4, #4]
   82824:	f021 0103 	bic.w	r1, r1, #3
   82828:	1b4a      	subs	r2, r1, r5
   8282a:	2a0f      	cmp	r2, #15
   8282c:	f300 8164 	bgt.w	82af8 <_malloc_r+0x3a0>
   82830:	2a00      	cmp	r2, #0
   82832:	f8c3 e014 	str.w	lr, [r3, #20]
   82836:	f8c3 e010 	str.w	lr, [r3, #16]
   8283a:	da69      	bge.n	82910 <_malloc_r+0x1b8>
   8283c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   82840:	f080 813a 	bcs.w	82ab8 <_malloc_r+0x360>
   82844:	08c9      	lsrs	r1, r1, #3
   82846:	108a      	asrs	r2, r1, #2
   82848:	f04f 0801 	mov.w	r8, #1
   8284c:	fa08 f802 	lsl.w	r8, r8, r2
   82850:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   82854:	685a      	ldr	r2, [r3, #4]
   82856:	6888      	ldr	r0, [r1, #8]
   82858:	ea48 0202 	orr.w	r2, r8, r2
   8285c:	60a0      	str	r0, [r4, #8]
   8285e:	60e1      	str	r1, [r4, #12]
   82860:	605a      	str	r2, [r3, #4]
   82862:	608c      	str	r4, [r1, #8]
   82864:	60c4      	str	r4, [r0, #12]
   82866:	ea4f 03ac 	mov.w	r3, ip, asr #2
   8286a:	2001      	movs	r0, #1
   8286c:	4098      	lsls	r0, r3
   8286e:	4290      	cmp	r0, r2
   82870:	d85b      	bhi.n	8292a <_malloc_r+0x1d2>
   82872:	4202      	tst	r2, r0
   82874:	d106      	bne.n	82884 <_malloc_r+0x12c>
   82876:	f02c 0c03 	bic.w	ip, ip, #3
   8287a:	0040      	lsls	r0, r0, #1
   8287c:	4202      	tst	r2, r0
   8287e:	f10c 0c04 	add.w	ip, ip, #4
   82882:	d0fa      	beq.n	8287a <_malloc_r+0x122>
   82884:	eb07 08cc 	add.w	r8, r7, ip, lsl #3
   82888:	4644      	mov	r4, r8
   8288a:	46e1      	mov	r9, ip
   8288c:	68e3      	ldr	r3, [r4, #12]
   8288e:	429c      	cmp	r4, r3
   82890:	d107      	bne.n	828a2 <_malloc_r+0x14a>
   82892:	e146      	b.n	82b22 <_malloc_r+0x3ca>
   82894:	2a00      	cmp	r2, #0
   82896:	f280 8157 	bge.w	82b48 <_malloc_r+0x3f0>
   8289a:	68db      	ldr	r3, [r3, #12]
   8289c:	429c      	cmp	r4, r3
   8289e:	f000 8140 	beq.w	82b22 <_malloc_r+0x3ca>
   828a2:	6859      	ldr	r1, [r3, #4]
   828a4:	f021 0103 	bic.w	r1, r1, #3
   828a8:	1b4a      	subs	r2, r1, r5
   828aa:	2a0f      	cmp	r2, #15
   828ac:	ddf2      	ble.n	82894 <_malloc_r+0x13c>
   828ae:	461c      	mov	r4, r3
   828b0:	f854 cf08 	ldr.w	ip, [r4, #8]!
   828b4:	68d9      	ldr	r1, [r3, #12]
   828b6:	f045 0901 	orr.w	r9, r5, #1
   828ba:	f042 0801 	orr.w	r8, r2, #1
   828be:	441d      	add	r5, r3
   828c0:	f8c3 9004 	str.w	r9, [r3, #4]
   828c4:	4630      	mov	r0, r6
   828c6:	f8cc 100c 	str.w	r1, [ip, #12]
   828ca:	f8c1 c008 	str.w	ip, [r1, #8]
   828ce:	617d      	str	r5, [r7, #20]
   828d0:	613d      	str	r5, [r7, #16]
   828d2:	f8c5 e00c 	str.w	lr, [r5, #12]
   828d6:	f8c5 e008 	str.w	lr, [r5, #8]
   828da:	f8c5 8004 	str.w	r8, [r5, #4]
   828de:	50aa      	str	r2, [r5, r2]
   828e0:	f000 fafe 	bl	82ee0 <__malloc_unlock>
   828e4:	e764      	b.n	827b0 <_malloc_r+0x58>
   828e6:	217e      	movs	r1, #126	; 0x7e
   828e8:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
   828ec:	e77c      	b.n	827e8 <_malloc_r+0x90>
   828ee:	4422      	add	r2, r4
   828f0:	6850      	ldr	r0, [r2, #4]
   828f2:	68e3      	ldr	r3, [r4, #12]
   828f4:	68a1      	ldr	r1, [r4, #8]
   828f6:	f040 0501 	orr.w	r5, r0, #1
   828fa:	60cb      	str	r3, [r1, #12]
   828fc:	4630      	mov	r0, r6
   828fe:	6099      	str	r1, [r3, #8]
   82900:	6055      	str	r5, [r2, #4]
   82902:	f000 faed 	bl	82ee0 <__malloc_unlock>
   82906:	3408      	adds	r4, #8
   82908:	4620      	mov	r0, r4
   8290a:	b003      	add	sp, #12
   8290c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82910:	4421      	add	r1, r4
   82912:	684b      	ldr	r3, [r1, #4]
   82914:	4630      	mov	r0, r6
   82916:	f043 0301 	orr.w	r3, r3, #1
   8291a:	604b      	str	r3, [r1, #4]
   8291c:	f000 fae0 	bl	82ee0 <__malloc_unlock>
   82920:	3408      	adds	r4, #8
   82922:	4620      	mov	r0, r4
   82924:	b003      	add	sp, #12
   82926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8292a:	68bc      	ldr	r4, [r7, #8]
   8292c:	6863      	ldr	r3, [r4, #4]
   8292e:	f023 0903 	bic.w	r9, r3, #3
   82932:	45a9      	cmp	r9, r5
   82934:	d304      	bcc.n	82940 <_malloc_r+0x1e8>
   82936:	ebc5 0309 	rsb	r3, r5, r9
   8293a:	2b0f      	cmp	r3, #15
   8293c:	f300 8091 	bgt.w	82a62 <_malloc_r+0x30a>
   82940:	4b51      	ldr	r3, [pc, #324]	; (82a88 <_malloc_r+0x330>)
   82942:	4a52      	ldr	r2, [pc, #328]	; (82a8c <_malloc_r+0x334>)
   82944:	6819      	ldr	r1, [r3, #0]
   82946:	6813      	ldr	r3, [r2, #0]
   82948:	eb05 0a01 	add.w	sl, r5, r1
   8294c:	3301      	adds	r3, #1
   8294e:	eb04 0b09 	add.w	fp, r4, r9
   82952:	f000 8161 	beq.w	82c18 <_malloc_r+0x4c0>
   82956:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
   8295a:	f10a 0a0f 	add.w	sl, sl, #15
   8295e:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
   82962:	f02a 0a0f 	bic.w	sl, sl, #15
   82966:	4630      	mov	r0, r6
   82968:	4651      	mov	r1, sl
   8296a:	9201      	str	r2, [sp, #4]
   8296c:	f000 fc9a 	bl	832a4 <_sbrk_r>
   82970:	f1b0 3fff 	cmp.w	r0, #4294967295
   82974:	4680      	mov	r8, r0
   82976:	9a01      	ldr	r2, [sp, #4]
   82978:	f000 8101 	beq.w	82b7e <_malloc_r+0x426>
   8297c:	4583      	cmp	fp, r0
   8297e:	f200 80fb 	bhi.w	82b78 <_malloc_r+0x420>
   82982:	f8df c114 	ldr.w	ip, [pc, #276]	; 82a98 <_malloc_r+0x340>
   82986:	45c3      	cmp	fp, r8
   82988:	f8dc 3000 	ldr.w	r3, [ip]
   8298c:	4453      	add	r3, sl
   8298e:	f8cc 3000 	str.w	r3, [ip]
   82992:	f000 814a 	beq.w	82c2a <_malloc_r+0x4d2>
   82996:	6812      	ldr	r2, [r2, #0]
   82998:	493c      	ldr	r1, [pc, #240]	; (82a8c <_malloc_r+0x334>)
   8299a:	3201      	adds	r2, #1
   8299c:	bf1b      	ittet	ne
   8299e:	ebcb 0b08 	rsbne	fp, fp, r8
   829a2:	445b      	addne	r3, fp
   829a4:	f8c1 8000 	streq.w	r8, [r1]
   829a8:	f8cc 3000 	strne.w	r3, [ip]
   829ac:	f018 0307 	ands.w	r3, r8, #7
   829b0:	f000 8114 	beq.w	82bdc <_malloc_r+0x484>
   829b4:	f1c3 0208 	rsb	r2, r3, #8
   829b8:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
   829bc:	4490      	add	r8, r2
   829be:	3308      	adds	r3, #8
   829c0:	44c2      	add	sl, r8
   829c2:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
   829c6:	ebca 0a03 	rsb	sl, sl, r3
   829ca:	4651      	mov	r1, sl
   829cc:	4630      	mov	r0, r6
   829ce:	f8cd c004 	str.w	ip, [sp, #4]
   829d2:	f000 fc67 	bl	832a4 <_sbrk_r>
   829d6:	1c43      	adds	r3, r0, #1
   829d8:	f8dd c004 	ldr.w	ip, [sp, #4]
   829dc:	f000 8135 	beq.w	82c4a <_malloc_r+0x4f2>
   829e0:	ebc8 0200 	rsb	r2, r8, r0
   829e4:	4452      	add	r2, sl
   829e6:	f042 0201 	orr.w	r2, r2, #1
   829ea:	f8dc 3000 	ldr.w	r3, [ip]
   829ee:	42bc      	cmp	r4, r7
   829f0:	4453      	add	r3, sl
   829f2:	f8c7 8008 	str.w	r8, [r7, #8]
   829f6:	f8cc 3000 	str.w	r3, [ip]
   829fa:	f8c8 2004 	str.w	r2, [r8, #4]
   829fe:	f8df a098 	ldr.w	sl, [pc, #152]	; 82a98 <_malloc_r+0x340>
   82a02:	d015      	beq.n	82a30 <_malloc_r+0x2d8>
   82a04:	f1b9 0f0f 	cmp.w	r9, #15
   82a08:	f240 80eb 	bls.w	82be2 <_malloc_r+0x48a>
   82a0c:	6861      	ldr	r1, [r4, #4]
   82a0e:	f1a9 020c 	sub.w	r2, r9, #12
   82a12:	f022 0207 	bic.w	r2, r2, #7
   82a16:	f001 0101 	and.w	r1, r1, #1
   82a1a:	ea42 0e01 	orr.w	lr, r2, r1
   82a1e:	2005      	movs	r0, #5
   82a20:	18a1      	adds	r1, r4, r2
   82a22:	2a0f      	cmp	r2, #15
   82a24:	f8c4 e004 	str.w	lr, [r4, #4]
   82a28:	6048      	str	r0, [r1, #4]
   82a2a:	6088      	str	r0, [r1, #8]
   82a2c:	f200 8111 	bhi.w	82c52 <_malloc_r+0x4fa>
   82a30:	4a17      	ldr	r2, [pc, #92]	; (82a90 <_malloc_r+0x338>)
   82a32:	68bc      	ldr	r4, [r7, #8]
   82a34:	6811      	ldr	r1, [r2, #0]
   82a36:	428b      	cmp	r3, r1
   82a38:	bf88      	it	hi
   82a3a:	6013      	strhi	r3, [r2, #0]
   82a3c:	4a15      	ldr	r2, [pc, #84]	; (82a94 <_malloc_r+0x33c>)
   82a3e:	6811      	ldr	r1, [r2, #0]
   82a40:	428b      	cmp	r3, r1
   82a42:	bf88      	it	hi
   82a44:	6013      	strhi	r3, [r2, #0]
   82a46:	6862      	ldr	r2, [r4, #4]
   82a48:	f022 0203 	bic.w	r2, r2, #3
   82a4c:	4295      	cmp	r5, r2
   82a4e:	ebc5 0302 	rsb	r3, r5, r2
   82a52:	d801      	bhi.n	82a58 <_malloc_r+0x300>
   82a54:	2b0f      	cmp	r3, #15
   82a56:	dc04      	bgt.n	82a62 <_malloc_r+0x30a>
   82a58:	4630      	mov	r0, r6
   82a5a:	f000 fa41 	bl	82ee0 <__malloc_unlock>
   82a5e:	2400      	movs	r4, #0
   82a60:	e6a6      	b.n	827b0 <_malloc_r+0x58>
   82a62:	f045 0201 	orr.w	r2, r5, #1
   82a66:	f043 0301 	orr.w	r3, r3, #1
   82a6a:	4425      	add	r5, r4
   82a6c:	6062      	str	r2, [r4, #4]
   82a6e:	4630      	mov	r0, r6
   82a70:	60bd      	str	r5, [r7, #8]
   82a72:	606b      	str	r3, [r5, #4]
   82a74:	f000 fa34 	bl	82ee0 <__malloc_unlock>
   82a78:	3408      	adds	r4, #8
   82a7a:	4620      	mov	r0, r4
   82a7c:	b003      	add	sp, #12
   82a7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82a82:	bf00      	nop
   82a84:	20070588 	.word	0x20070588
   82a88:	20070ad8 	.word	0x20070ad8
   82a8c:	20070994 	.word	0x20070994
   82a90:	20070ad4 	.word	0x20070ad4
   82a94:	20070ad0 	.word	0x20070ad0
   82a98:	20070adc 	.word	0x20070adc
   82a9c:	f1bc 0f14 	cmp.w	ip, #20
   82aa0:	d961      	bls.n	82b66 <_malloc_r+0x40e>
   82aa2:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
   82aa6:	f200 808f 	bhi.w	82bc8 <_malloc_r+0x470>
   82aaa:	ea4f 3c15 	mov.w	ip, r5, lsr #12
   82aae:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
   82ab2:	ea4f 014c 	mov.w	r1, ip, lsl #1
   82ab6:	e697      	b.n	827e8 <_malloc_r+0x90>
   82ab8:	0a4b      	lsrs	r3, r1, #9
   82aba:	2b04      	cmp	r3, #4
   82abc:	d958      	bls.n	82b70 <_malloc_r+0x418>
   82abe:	2b14      	cmp	r3, #20
   82ac0:	f200 80ad 	bhi.w	82c1e <_malloc_r+0x4c6>
   82ac4:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   82ac8:	0050      	lsls	r0, r2, #1
   82aca:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   82ace:	6883      	ldr	r3, [r0, #8]
   82ad0:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 82c8c <_malloc_r+0x534>
   82ad4:	4283      	cmp	r3, r0
   82ad6:	f000 808a 	beq.w	82bee <_malloc_r+0x496>
   82ada:	685a      	ldr	r2, [r3, #4]
   82adc:	f022 0203 	bic.w	r2, r2, #3
   82ae0:	4291      	cmp	r1, r2
   82ae2:	d202      	bcs.n	82aea <_malloc_r+0x392>
   82ae4:	689b      	ldr	r3, [r3, #8]
   82ae6:	4298      	cmp	r0, r3
   82ae8:	d1f7      	bne.n	82ada <_malloc_r+0x382>
   82aea:	68d9      	ldr	r1, [r3, #12]
   82aec:	687a      	ldr	r2, [r7, #4]
   82aee:	60e1      	str	r1, [r4, #12]
   82af0:	60a3      	str	r3, [r4, #8]
   82af2:	608c      	str	r4, [r1, #8]
   82af4:	60dc      	str	r4, [r3, #12]
   82af6:	e6b6      	b.n	82866 <_malloc_r+0x10e>
   82af8:	f045 0701 	orr.w	r7, r5, #1
   82afc:	f042 0101 	orr.w	r1, r2, #1
   82b00:	4425      	add	r5, r4
   82b02:	6067      	str	r7, [r4, #4]
   82b04:	4630      	mov	r0, r6
   82b06:	615d      	str	r5, [r3, #20]
   82b08:	611d      	str	r5, [r3, #16]
   82b0a:	f8c5 e00c 	str.w	lr, [r5, #12]
   82b0e:	f8c5 e008 	str.w	lr, [r5, #8]
   82b12:	6069      	str	r1, [r5, #4]
   82b14:	50aa      	str	r2, [r5, r2]
   82b16:	3408      	adds	r4, #8
   82b18:	f000 f9e2 	bl	82ee0 <__malloc_unlock>
   82b1c:	e648      	b.n	827b0 <_malloc_r+0x58>
   82b1e:	685a      	ldr	r2, [r3, #4]
   82b20:	e6a1      	b.n	82866 <_malloc_r+0x10e>
   82b22:	f109 0901 	add.w	r9, r9, #1
   82b26:	f019 0f03 	tst.w	r9, #3
   82b2a:	f104 0408 	add.w	r4, r4, #8
   82b2e:	f47f aead 	bne.w	8288c <_malloc_r+0x134>
   82b32:	e02d      	b.n	82b90 <_malloc_r+0x438>
   82b34:	f104 0308 	add.w	r3, r4, #8
   82b38:	6964      	ldr	r4, [r4, #20]
   82b3a:	42a3      	cmp	r3, r4
   82b3c:	bf08      	it	eq
   82b3e:	f10c 0c02 	addeq.w	ip, ip, #2
   82b42:	f43f ae67 	beq.w	82814 <_malloc_r+0xbc>
   82b46:	e623      	b.n	82790 <_malloc_r+0x38>
   82b48:	4419      	add	r1, r3
   82b4a:	6848      	ldr	r0, [r1, #4]
   82b4c:	461c      	mov	r4, r3
   82b4e:	f854 2f08 	ldr.w	r2, [r4, #8]!
   82b52:	68db      	ldr	r3, [r3, #12]
   82b54:	f040 0501 	orr.w	r5, r0, #1
   82b58:	604d      	str	r5, [r1, #4]
   82b5a:	4630      	mov	r0, r6
   82b5c:	60d3      	str	r3, [r2, #12]
   82b5e:	609a      	str	r2, [r3, #8]
   82b60:	f000 f9be 	bl	82ee0 <__malloc_unlock>
   82b64:	e624      	b.n	827b0 <_malloc_r+0x58>
   82b66:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
   82b6a:	ea4f 014c 	mov.w	r1, ip, lsl #1
   82b6e:	e63b      	b.n	827e8 <_malloc_r+0x90>
   82b70:	098a      	lsrs	r2, r1, #6
   82b72:	3238      	adds	r2, #56	; 0x38
   82b74:	0050      	lsls	r0, r2, #1
   82b76:	e7a8      	b.n	82aca <_malloc_r+0x372>
   82b78:	42bc      	cmp	r4, r7
   82b7a:	f43f af02 	beq.w	82982 <_malloc_r+0x22a>
   82b7e:	68bc      	ldr	r4, [r7, #8]
   82b80:	6862      	ldr	r2, [r4, #4]
   82b82:	f022 0203 	bic.w	r2, r2, #3
   82b86:	e761      	b.n	82a4c <_malloc_r+0x2f4>
   82b88:	f8d8 8000 	ldr.w	r8, [r8]
   82b8c:	4598      	cmp	r8, r3
   82b8e:	d17a      	bne.n	82c86 <_malloc_r+0x52e>
   82b90:	f01c 0f03 	tst.w	ip, #3
   82b94:	f1a8 0308 	sub.w	r3, r8, #8
   82b98:	f10c 3cff 	add.w	ip, ip, #4294967295
   82b9c:	d1f4      	bne.n	82b88 <_malloc_r+0x430>
   82b9e:	687b      	ldr	r3, [r7, #4]
   82ba0:	ea23 0300 	bic.w	r3, r3, r0
   82ba4:	607b      	str	r3, [r7, #4]
   82ba6:	0040      	lsls	r0, r0, #1
   82ba8:	4298      	cmp	r0, r3
   82baa:	f63f aebe 	bhi.w	8292a <_malloc_r+0x1d2>
   82bae:	2800      	cmp	r0, #0
   82bb0:	f43f aebb 	beq.w	8292a <_malloc_r+0x1d2>
   82bb4:	4203      	tst	r3, r0
   82bb6:	46cc      	mov	ip, r9
   82bb8:	f47f ae64 	bne.w	82884 <_malloc_r+0x12c>
   82bbc:	0040      	lsls	r0, r0, #1
   82bbe:	4203      	tst	r3, r0
   82bc0:	f10c 0c04 	add.w	ip, ip, #4
   82bc4:	d0fa      	beq.n	82bbc <_malloc_r+0x464>
   82bc6:	e65d      	b.n	82884 <_malloc_r+0x12c>
   82bc8:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
   82bcc:	d819      	bhi.n	82c02 <_malloc_r+0x4aa>
   82bce:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
   82bd2:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
   82bd6:	ea4f 014c 	mov.w	r1, ip, lsl #1
   82bda:	e605      	b.n	827e8 <_malloc_r+0x90>
   82bdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   82be0:	e6ee      	b.n	829c0 <_malloc_r+0x268>
   82be2:	2301      	movs	r3, #1
   82be4:	f8c8 3004 	str.w	r3, [r8, #4]
   82be8:	4644      	mov	r4, r8
   82bea:	2200      	movs	r2, #0
   82bec:	e72e      	b.n	82a4c <_malloc_r+0x2f4>
   82bee:	1092      	asrs	r2, r2, #2
   82bf0:	2001      	movs	r0, #1
   82bf2:	4090      	lsls	r0, r2
   82bf4:	f8d8 2004 	ldr.w	r2, [r8, #4]
   82bf8:	4619      	mov	r1, r3
   82bfa:	4302      	orrs	r2, r0
   82bfc:	f8c8 2004 	str.w	r2, [r8, #4]
   82c00:	e775      	b.n	82aee <_malloc_r+0x396>
   82c02:	f240 5354 	movw	r3, #1364	; 0x554
   82c06:	459c      	cmp	ip, r3
   82c08:	d81b      	bhi.n	82c42 <_malloc_r+0x4ea>
   82c0a:	ea4f 4c95 	mov.w	ip, r5, lsr #18
   82c0e:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
   82c12:	ea4f 014c 	mov.w	r1, ip, lsl #1
   82c16:	e5e7      	b.n	827e8 <_malloc_r+0x90>
   82c18:	f10a 0a10 	add.w	sl, sl, #16
   82c1c:	e6a3      	b.n	82966 <_malloc_r+0x20e>
   82c1e:	2b54      	cmp	r3, #84	; 0x54
   82c20:	d81f      	bhi.n	82c62 <_malloc_r+0x50a>
   82c22:	0b0a      	lsrs	r2, r1, #12
   82c24:	326e      	adds	r2, #110	; 0x6e
   82c26:	0050      	lsls	r0, r2, #1
   82c28:	e74f      	b.n	82aca <_malloc_r+0x372>
   82c2a:	f3cb 010b 	ubfx	r1, fp, #0, #12
   82c2e:	2900      	cmp	r1, #0
   82c30:	f47f aeb1 	bne.w	82996 <_malloc_r+0x23e>
   82c34:	eb0a 0109 	add.w	r1, sl, r9
   82c38:	68ba      	ldr	r2, [r7, #8]
   82c3a:	f041 0101 	orr.w	r1, r1, #1
   82c3e:	6051      	str	r1, [r2, #4]
   82c40:	e6f6      	b.n	82a30 <_malloc_r+0x2d8>
   82c42:	21fc      	movs	r1, #252	; 0xfc
   82c44:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
   82c48:	e5ce      	b.n	827e8 <_malloc_r+0x90>
   82c4a:	2201      	movs	r2, #1
   82c4c:	f04f 0a00 	mov.w	sl, #0
   82c50:	e6cb      	b.n	829ea <_malloc_r+0x292>
   82c52:	f104 0108 	add.w	r1, r4, #8
   82c56:	4630      	mov	r0, r6
   82c58:	f7ff fa80 	bl	8215c <_free_r>
   82c5c:	f8da 3000 	ldr.w	r3, [sl]
   82c60:	e6e6      	b.n	82a30 <_malloc_r+0x2d8>
   82c62:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   82c66:	d803      	bhi.n	82c70 <_malloc_r+0x518>
   82c68:	0bca      	lsrs	r2, r1, #15
   82c6a:	3277      	adds	r2, #119	; 0x77
   82c6c:	0050      	lsls	r0, r2, #1
   82c6e:	e72c      	b.n	82aca <_malloc_r+0x372>
   82c70:	f240 5254 	movw	r2, #1364	; 0x554
   82c74:	4293      	cmp	r3, r2
   82c76:	d803      	bhi.n	82c80 <_malloc_r+0x528>
   82c78:	0c8a      	lsrs	r2, r1, #18
   82c7a:	327c      	adds	r2, #124	; 0x7c
   82c7c:	0050      	lsls	r0, r2, #1
   82c7e:	e724      	b.n	82aca <_malloc_r+0x372>
   82c80:	20fc      	movs	r0, #252	; 0xfc
   82c82:	227e      	movs	r2, #126	; 0x7e
   82c84:	e721      	b.n	82aca <_malloc_r+0x372>
   82c86:	687b      	ldr	r3, [r7, #4]
   82c88:	e78d      	b.n	82ba6 <_malloc_r+0x44e>
   82c8a:	bf00      	nop
   82c8c:	20070588 	.word	0x20070588

00082c90 <memchr>:
   82c90:	0783      	lsls	r3, r0, #30
   82c92:	b470      	push	{r4, r5, r6}
   82c94:	b2c9      	uxtb	r1, r1
   82c96:	d040      	beq.n	82d1a <memchr+0x8a>
   82c98:	1e54      	subs	r4, r2, #1
   82c9a:	b32a      	cbz	r2, 82ce8 <memchr+0x58>
   82c9c:	7803      	ldrb	r3, [r0, #0]
   82c9e:	428b      	cmp	r3, r1
   82ca0:	d023      	beq.n	82cea <memchr+0x5a>
   82ca2:	1c43      	adds	r3, r0, #1
   82ca4:	e004      	b.n	82cb0 <memchr+0x20>
   82ca6:	b1fc      	cbz	r4, 82ce8 <memchr+0x58>
   82ca8:	7805      	ldrb	r5, [r0, #0]
   82caa:	4614      	mov	r4, r2
   82cac:	428d      	cmp	r5, r1
   82cae:	d01c      	beq.n	82cea <memchr+0x5a>
   82cb0:	f013 0f03 	tst.w	r3, #3
   82cb4:	4618      	mov	r0, r3
   82cb6:	f104 32ff 	add.w	r2, r4, #4294967295
   82cba:	f103 0301 	add.w	r3, r3, #1
   82cbe:	d1f2      	bne.n	82ca6 <memchr+0x16>
   82cc0:	2c03      	cmp	r4, #3
   82cc2:	d814      	bhi.n	82cee <memchr+0x5e>
   82cc4:	1e65      	subs	r5, r4, #1
   82cc6:	b354      	cbz	r4, 82d1e <memchr+0x8e>
   82cc8:	7803      	ldrb	r3, [r0, #0]
   82cca:	428b      	cmp	r3, r1
   82ccc:	d00d      	beq.n	82cea <memchr+0x5a>
   82cce:	1c42      	adds	r2, r0, #1
   82cd0:	2300      	movs	r3, #0
   82cd2:	e002      	b.n	82cda <memchr+0x4a>
   82cd4:	7804      	ldrb	r4, [r0, #0]
   82cd6:	428c      	cmp	r4, r1
   82cd8:	d007      	beq.n	82cea <memchr+0x5a>
   82cda:	42ab      	cmp	r3, r5
   82cdc:	4610      	mov	r0, r2
   82cde:	f103 0301 	add.w	r3, r3, #1
   82ce2:	f102 0201 	add.w	r2, r2, #1
   82ce6:	d1f5      	bne.n	82cd4 <memchr+0x44>
   82ce8:	2000      	movs	r0, #0
   82cea:	bc70      	pop	{r4, r5, r6}
   82cec:	4770      	bx	lr
   82cee:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
   82cf2:	4603      	mov	r3, r0
   82cf4:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   82cf8:	681a      	ldr	r2, [r3, #0]
   82cfa:	4618      	mov	r0, r3
   82cfc:	4072      	eors	r2, r6
   82cfe:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
   82d02:	ea25 0202 	bic.w	r2, r5, r2
   82d06:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   82d0a:	f103 0304 	add.w	r3, r3, #4
   82d0e:	d1d9      	bne.n	82cc4 <memchr+0x34>
   82d10:	3c04      	subs	r4, #4
   82d12:	2c03      	cmp	r4, #3
   82d14:	4618      	mov	r0, r3
   82d16:	d8ef      	bhi.n	82cf8 <memchr+0x68>
   82d18:	e7d4      	b.n	82cc4 <memchr+0x34>
   82d1a:	4614      	mov	r4, r2
   82d1c:	e7d0      	b.n	82cc0 <memchr+0x30>
   82d1e:	4620      	mov	r0, r4
   82d20:	e7e3      	b.n	82cea <memchr+0x5a>
   82d22:	bf00      	nop

00082d24 <memcpy>:
   82d24:	4684      	mov	ip, r0
   82d26:	ea41 0300 	orr.w	r3, r1, r0
   82d2a:	f013 0303 	ands.w	r3, r3, #3
   82d2e:	d149      	bne.n	82dc4 <memcpy+0xa0>
   82d30:	3a40      	subs	r2, #64	; 0x40
   82d32:	d323      	bcc.n	82d7c <memcpy+0x58>
   82d34:	680b      	ldr	r3, [r1, #0]
   82d36:	6003      	str	r3, [r0, #0]
   82d38:	684b      	ldr	r3, [r1, #4]
   82d3a:	6043      	str	r3, [r0, #4]
   82d3c:	688b      	ldr	r3, [r1, #8]
   82d3e:	6083      	str	r3, [r0, #8]
   82d40:	68cb      	ldr	r3, [r1, #12]
   82d42:	60c3      	str	r3, [r0, #12]
   82d44:	690b      	ldr	r3, [r1, #16]
   82d46:	6103      	str	r3, [r0, #16]
   82d48:	694b      	ldr	r3, [r1, #20]
   82d4a:	6143      	str	r3, [r0, #20]
   82d4c:	698b      	ldr	r3, [r1, #24]
   82d4e:	6183      	str	r3, [r0, #24]
   82d50:	69cb      	ldr	r3, [r1, #28]
   82d52:	61c3      	str	r3, [r0, #28]
   82d54:	6a0b      	ldr	r3, [r1, #32]
   82d56:	6203      	str	r3, [r0, #32]
   82d58:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   82d5a:	6243      	str	r3, [r0, #36]	; 0x24
   82d5c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   82d5e:	6283      	str	r3, [r0, #40]	; 0x28
   82d60:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   82d62:	62c3      	str	r3, [r0, #44]	; 0x2c
   82d64:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   82d66:	6303      	str	r3, [r0, #48]	; 0x30
   82d68:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   82d6a:	6343      	str	r3, [r0, #52]	; 0x34
   82d6c:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   82d6e:	6383      	str	r3, [r0, #56]	; 0x38
   82d70:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   82d72:	63c3      	str	r3, [r0, #60]	; 0x3c
   82d74:	3040      	adds	r0, #64	; 0x40
   82d76:	3140      	adds	r1, #64	; 0x40
   82d78:	3a40      	subs	r2, #64	; 0x40
   82d7a:	d2db      	bcs.n	82d34 <memcpy+0x10>
   82d7c:	3230      	adds	r2, #48	; 0x30
   82d7e:	d30b      	bcc.n	82d98 <memcpy+0x74>
   82d80:	680b      	ldr	r3, [r1, #0]
   82d82:	6003      	str	r3, [r0, #0]
   82d84:	684b      	ldr	r3, [r1, #4]
   82d86:	6043      	str	r3, [r0, #4]
   82d88:	688b      	ldr	r3, [r1, #8]
   82d8a:	6083      	str	r3, [r0, #8]
   82d8c:	68cb      	ldr	r3, [r1, #12]
   82d8e:	60c3      	str	r3, [r0, #12]
   82d90:	3010      	adds	r0, #16
   82d92:	3110      	adds	r1, #16
   82d94:	3a10      	subs	r2, #16
   82d96:	d2f3      	bcs.n	82d80 <memcpy+0x5c>
   82d98:	320c      	adds	r2, #12
   82d9a:	d305      	bcc.n	82da8 <memcpy+0x84>
   82d9c:	f851 3b04 	ldr.w	r3, [r1], #4
   82da0:	f840 3b04 	str.w	r3, [r0], #4
   82da4:	3a04      	subs	r2, #4
   82da6:	d2f9      	bcs.n	82d9c <memcpy+0x78>
   82da8:	3204      	adds	r2, #4
   82daa:	d008      	beq.n	82dbe <memcpy+0x9a>
   82dac:	07d2      	lsls	r2, r2, #31
   82dae:	bf1c      	itt	ne
   82db0:	f811 3b01 	ldrbne.w	r3, [r1], #1
   82db4:	f800 3b01 	strbne.w	r3, [r0], #1
   82db8:	d301      	bcc.n	82dbe <memcpy+0x9a>
   82dba:	880b      	ldrh	r3, [r1, #0]
   82dbc:	8003      	strh	r3, [r0, #0]
   82dbe:	4660      	mov	r0, ip
   82dc0:	4770      	bx	lr
   82dc2:	bf00      	nop
   82dc4:	2a08      	cmp	r2, #8
   82dc6:	d313      	bcc.n	82df0 <memcpy+0xcc>
   82dc8:	078b      	lsls	r3, r1, #30
   82dca:	d0b1      	beq.n	82d30 <memcpy+0xc>
   82dcc:	f010 0303 	ands.w	r3, r0, #3
   82dd0:	d0ae      	beq.n	82d30 <memcpy+0xc>
   82dd2:	f1c3 0304 	rsb	r3, r3, #4
   82dd6:	1ad2      	subs	r2, r2, r3
   82dd8:	07db      	lsls	r3, r3, #31
   82dda:	bf1c      	itt	ne
   82ddc:	f811 3b01 	ldrbne.w	r3, [r1], #1
   82de0:	f800 3b01 	strbne.w	r3, [r0], #1
   82de4:	d3a4      	bcc.n	82d30 <memcpy+0xc>
   82de6:	f831 3b02 	ldrh.w	r3, [r1], #2
   82dea:	f820 3b02 	strh.w	r3, [r0], #2
   82dee:	e79f      	b.n	82d30 <memcpy+0xc>
   82df0:	3a04      	subs	r2, #4
   82df2:	d3d9      	bcc.n	82da8 <memcpy+0x84>
   82df4:	3a01      	subs	r2, #1
   82df6:	f811 3b01 	ldrb.w	r3, [r1], #1
   82dfa:	f800 3b01 	strb.w	r3, [r0], #1
   82dfe:	d2f9      	bcs.n	82df4 <memcpy+0xd0>
   82e00:	780b      	ldrb	r3, [r1, #0]
   82e02:	7003      	strb	r3, [r0, #0]
   82e04:	784b      	ldrb	r3, [r1, #1]
   82e06:	7043      	strb	r3, [r0, #1]
   82e08:	788b      	ldrb	r3, [r1, #2]
   82e0a:	7083      	strb	r3, [r0, #2]
   82e0c:	4660      	mov	r0, ip
   82e0e:	4770      	bx	lr

00082e10 <memmove>:
   82e10:	4288      	cmp	r0, r1
   82e12:	b4f0      	push	{r4, r5, r6, r7}
   82e14:	d910      	bls.n	82e38 <memmove+0x28>
   82e16:	188c      	adds	r4, r1, r2
   82e18:	42a0      	cmp	r0, r4
   82e1a:	d20d      	bcs.n	82e38 <memmove+0x28>
   82e1c:	1885      	adds	r5, r0, r2
   82e1e:	1e53      	subs	r3, r2, #1
   82e20:	b142      	cbz	r2, 82e34 <memmove+0x24>
   82e22:	4621      	mov	r1, r4
   82e24:	462a      	mov	r2, r5
   82e26:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
   82e2a:	3b01      	subs	r3, #1
   82e2c:	f802 4d01 	strb.w	r4, [r2, #-1]!
   82e30:	1c5c      	adds	r4, r3, #1
   82e32:	d1f8      	bne.n	82e26 <memmove+0x16>
   82e34:	bcf0      	pop	{r4, r5, r6, r7}
   82e36:	4770      	bx	lr
   82e38:	2a0f      	cmp	r2, #15
   82e3a:	d944      	bls.n	82ec6 <memmove+0xb6>
   82e3c:	ea40 0301 	orr.w	r3, r0, r1
   82e40:	079b      	lsls	r3, r3, #30
   82e42:	d144      	bne.n	82ece <memmove+0xbe>
   82e44:	f1a2 0710 	sub.w	r7, r2, #16
   82e48:	093f      	lsrs	r7, r7, #4
   82e4a:	eb00 1607 	add.w	r6, r0, r7, lsl #4
   82e4e:	3610      	adds	r6, #16
   82e50:	460c      	mov	r4, r1
   82e52:	4603      	mov	r3, r0
   82e54:	6825      	ldr	r5, [r4, #0]
   82e56:	3310      	adds	r3, #16
   82e58:	f843 5c10 	str.w	r5, [r3, #-16]
   82e5c:	6865      	ldr	r5, [r4, #4]
   82e5e:	3410      	adds	r4, #16
   82e60:	f843 5c0c 	str.w	r5, [r3, #-12]
   82e64:	f854 5c08 	ldr.w	r5, [r4, #-8]
   82e68:	f843 5c08 	str.w	r5, [r3, #-8]
   82e6c:	f854 5c04 	ldr.w	r5, [r4, #-4]
   82e70:	f843 5c04 	str.w	r5, [r3, #-4]
   82e74:	42b3      	cmp	r3, r6
   82e76:	d1ed      	bne.n	82e54 <memmove+0x44>
   82e78:	1c7b      	adds	r3, r7, #1
   82e7a:	f002 0c0f 	and.w	ip, r2, #15
   82e7e:	011b      	lsls	r3, r3, #4
   82e80:	f1bc 0f03 	cmp.w	ip, #3
   82e84:	4419      	add	r1, r3
   82e86:	4403      	add	r3, r0
   82e88:	d923      	bls.n	82ed2 <memmove+0xc2>
   82e8a:	460e      	mov	r6, r1
   82e8c:	461d      	mov	r5, r3
   82e8e:	4664      	mov	r4, ip
   82e90:	f856 7b04 	ldr.w	r7, [r6], #4
   82e94:	3c04      	subs	r4, #4
   82e96:	2c03      	cmp	r4, #3
   82e98:	f845 7b04 	str.w	r7, [r5], #4
   82e9c:	d8f8      	bhi.n	82e90 <memmove+0x80>
   82e9e:	f1ac 0404 	sub.w	r4, ip, #4
   82ea2:	f024 0403 	bic.w	r4, r4, #3
   82ea6:	3404      	adds	r4, #4
   82ea8:	f002 0203 	and.w	r2, r2, #3
   82eac:	4423      	add	r3, r4
   82eae:	4421      	add	r1, r4
   82eb0:	2a00      	cmp	r2, #0
   82eb2:	d0bf      	beq.n	82e34 <memmove+0x24>
   82eb4:	441a      	add	r2, r3
   82eb6:	f811 4b01 	ldrb.w	r4, [r1], #1
   82eba:	f803 4b01 	strb.w	r4, [r3], #1
   82ebe:	4293      	cmp	r3, r2
   82ec0:	d1f9      	bne.n	82eb6 <memmove+0xa6>
   82ec2:	bcf0      	pop	{r4, r5, r6, r7}
   82ec4:	4770      	bx	lr
   82ec6:	4603      	mov	r3, r0
   82ec8:	2a00      	cmp	r2, #0
   82eca:	d1f3      	bne.n	82eb4 <memmove+0xa4>
   82ecc:	e7b2      	b.n	82e34 <memmove+0x24>
   82ece:	4603      	mov	r3, r0
   82ed0:	e7f0      	b.n	82eb4 <memmove+0xa4>
   82ed2:	4662      	mov	r2, ip
   82ed4:	2a00      	cmp	r2, #0
   82ed6:	d1ed      	bne.n	82eb4 <memmove+0xa4>
   82ed8:	e7ac      	b.n	82e34 <memmove+0x24>
   82eda:	bf00      	nop

00082edc <__malloc_lock>:
   82edc:	4770      	bx	lr
   82ede:	bf00      	nop

00082ee0 <__malloc_unlock>:
   82ee0:	4770      	bx	lr
   82ee2:	bf00      	nop

00082ee4 <_realloc_r>:
   82ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82ee8:	460c      	mov	r4, r1
   82eea:	b083      	sub	sp, #12
   82eec:	4690      	mov	r8, r2
   82eee:	4681      	mov	r9, r0
   82ef0:	2900      	cmp	r1, #0
   82ef2:	f000 80ba 	beq.w	8306a <_realloc_r+0x186>
   82ef6:	f7ff fff1 	bl	82edc <__malloc_lock>
   82efa:	f108 060b 	add.w	r6, r8, #11
   82efe:	f854 3c04 	ldr.w	r3, [r4, #-4]
   82f02:	2e16      	cmp	r6, #22
   82f04:	f023 0503 	bic.w	r5, r3, #3
   82f08:	f1a4 0708 	sub.w	r7, r4, #8
   82f0c:	d84b      	bhi.n	82fa6 <_realloc_r+0xc2>
   82f0e:	2110      	movs	r1, #16
   82f10:	460e      	mov	r6, r1
   82f12:	45b0      	cmp	r8, r6
   82f14:	d84c      	bhi.n	82fb0 <_realloc_r+0xcc>
   82f16:	428d      	cmp	r5, r1
   82f18:	da51      	bge.n	82fbe <_realloc_r+0xda>
   82f1a:	f8df b384 	ldr.w	fp, [pc, #900]	; 832a0 <_realloc_r+0x3bc>
   82f1e:	1978      	adds	r0, r7, r5
   82f20:	f8db e008 	ldr.w	lr, [fp, #8]
   82f24:	4586      	cmp	lr, r0
   82f26:	f000 80a6 	beq.w	83076 <_realloc_r+0x192>
   82f2a:	6842      	ldr	r2, [r0, #4]
   82f2c:	f022 0c01 	bic.w	ip, r2, #1
   82f30:	4484      	add	ip, r0
   82f32:	f8dc c004 	ldr.w	ip, [ip, #4]
   82f36:	f01c 0f01 	tst.w	ip, #1
   82f3a:	d054      	beq.n	82fe6 <_realloc_r+0x102>
   82f3c:	2200      	movs	r2, #0
   82f3e:	4610      	mov	r0, r2
   82f40:	07db      	lsls	r3, r3, #31
   82f42:	d46f      	bmi.n	83024 <_realloc_r+0x140>
   82f44:	f854 3c08 	ldr.w	r3, [r4, #-8]
   82f48:	ebc3 0a07 	rsb	sl, r3, r7
   82f4c:	f8da 3004 	ldr.w	r3, [sl, #4]
   82f50:	f023 0303 	bic.w	r3, r3, #3
   82f54:	442b      	add	r3, r5
   82f56:	2800      	cmp	r0, #0
   82f58:	d062      	beq.n	83020 <_realloc_r+0x13c>
   82f5a:	4570      	cmp	r0, lr
   82f5c:	f000 80e9 	beq.w	83132 <_realloc_r+0x24e>
   82f60:	eb02 0e03 	add.w	lr, r2, r3
   82f64:	458e      	cmp	lr, r1
   82f66:	db5b      	blt.n	83020 <_realloc_r+0x13c>
   82f68:	68c3      	ldr	r3, [r0, #12]
   82f6a:	6882      	ldr	r2, [r0, #8]
   82f6c:	46d0      	mov	r8, sl
   82f6e:	60d3      	str	r3, [r2, #12]
   82f70:	609a      	str	r2, [r3, #8]
   82f72:	f858 1f08 	ldr.w	r1, [r8, #8]!
   82f76:	f8da 300c 	ldr.w	r3, [sl, #12]
   82f7a:	1f2a      	subs	r2, r5, #4
   82f7c:	2a24      	cmp	r2, #36	; 0x24
   82f7e:	60cb      	str	r3, [r1, #12]
   82f80:	6099      	str	r1, [r3, #8]
   82f82:	f200 8123 	bhi.w	831cc <_realloc_r+0x2e8>
   82f86:	2a13      	cmp	r2, #19
   82f88:	f240 80b0 	bls.w	830ec <_realloc_r+0x208>
   82f8c:	6823      	ldr	r3, [r4, #0]
   82f8e:	2a1b      	cmp	r2, #27
   82f90:	f8ca 3008 	str.w	r3, [sl, #8]
   82f94:	6863      	ldr	r3, [r4, #4]
   82f96:	f8ca 300c 	str.w	r3, [sl, #12]
   82f9a:	f200 812b 	bhi.w	831f4 <_realloc_r+0x310>
   82f9e:	3408      	adds	r4, #8
   82fa0:	f10a 0310 	add.w	r3, sl, #16
   82fa4:	e0a3      	b.n	830ee <_realloc_r+0x20a>
   82fa6:	f026 0607 	bic.w	r6, r6, #7
   82faa:	2e00      	cmp	r6, #0
   82fac:	4631      	mov	r1, r6
   82fae:	dab0      	bge.n	82f12 <_realloc_r+0x2e>
   82fb0:	230c      	movs	r3, #12
   82fb2:	2000      	movs	r0, #0
   82fb4:	f8c9 3000 	str.w	r3, [r9]
   82fb8:	b003      	add	sp, #12
   82fba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82fbe:	46a0      	mov	r8, r4
   82fc0:	1baa      	subs	r2, r5, r6
   82fc2:	2a0f      	cmp	r2, #15
   82fc4:	f003 0301 	and.w	r3, r3, #1
   82fc8:	d81a      	bhi.n	83000 <_realloc_r+0x11c>
   82fca:	432b      	orrs	r3, r5
   82fcc:	607b      	str	r3, [r7, #4]
   82fce:	443d      	add	r5, r7
   82fd0:	686b      	ldr	r3, [r5, #4]
   82fd2:	f043 0301 	orr.w	r3, r3, #1
   82fd6:	606b      	str	r3, [r5, #4]
   82fd8:	4648      	mov	r0, r9
   82fda:	f7ff ff81 	bl	82ee0 <__malloc_unlock>
   82fde:	4640      	mov	r0, r8
   82fe0:	b003      	add	sp, #12
   82fe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82fe6:	f022 0203 	bic.w	r2, r2, #3
   82fea:	eb02 0c05 	add.w	ip, r2, r5
   82fee:	458c      	cmp	ip, r1
   82ff0:	dba6      	blt.n	82f40 <_realloc_r+0x5c>
   82ff2:	68c2      	ldr	r2, [r0, #12]
   82ff4:	6881      	ldr	r1, [r0, #8]
   82ff6:	46a0      	mov	r8, r4
   82ff8:	60ca      	str	r2, [r1, #12]
   82ffa:	4665      	mov	r5, ip
   82ffc:	6091      	str	r1, [r2, #8]
   82ffe:	e7df      	b.n	82fc0 <_realloc_r+0xdc>
   83000:	19b9      	adds	r1, r7, r6
   83002:	4333      	orrs	r3, r6
   83004:	f042 0001 	orr.w	r0, r2, #1
   83008:	607b      	str	r3, [r7, #4]
   8300a:	440a      	add	r2, r1
   8300c:	6048      	str	r0, [r1, #4]
   8300e:	6853      	ldr	r3, [r2, #4]
   83010:	3108      	adds	r1, #8
   83012:	f043 0301 	orr.w	r3, r3, #1
   83016:	6053      	str	r3, [r2, #4]
   83018:	4648      	mov	r0, r9
   8301a:	f7ff f89f 	bl	8215c <_free_r>
   8301e:	e7db      	b.n	82fd8 <_realloc_r+0xf4>
   83020:	428b      	cmp	r3, r1
   83022:	da33      	bge.n	8308c <_realloc_r+0x1a8>
   83024:	4641      	mov	r1, r8
   83026:	4648      	mov	r0, r9
   83028:	f7ff fb96 	bl	82758 <_malloc_r>
   8302c:	4680      	mov	r8, r0
   8302e:	2800      	cmp	r0, #0
   83030:	d0d2      	beq.n	82fd8 <_realloc_r+0xf4>
   83032:	f854 3c04 	ldr.w	r3, [r4, #-4]
   83036:	f1a0 0108 	sub.w	r1, r0, #8
   8303a:	f023 0201 	bic.w	r2, r3, #1
   8303e:	443a      	add	r2, r7
   83040:	4291      	cmp	r1, r2
   83042:	f000 80bc 	beq.w	831be <_realloc_r+0x2da>
   83046:	1f2a      	subs	r2, r5, #4
   83048:	2a24      	cmp	r2, #36	; 0x24
   8304a:	d86e      	bhi.n	8312a <_realloc_r+0x246>
   8304c:	2a13      	cmp	r2, #19
   8304e:	d842      	bhi.n	830d6 <_realloc_r+0x1f2>
   83050:	4603      	mov	r3, r0
   83052:	4622      	mov	r2, r4
   83054:	6811      	ldr	r1, [r2, #0]
   83056:	6019      	str	r1, [r3, #0]
   83058:	6851      	ldr	r1, [r2, #4]
   8305a:	6059      	str	r1, [r3, #4]
   8305c:	6892      	ldr	r2, [r2, #8]
   8305e:	609a      	str	r2, [r3, #8]
   83060:	4621      	mov	r1, r4
   83062:	4648      	mov	r0, r9
   83064:	f7ff f87a 	bl	8215c <_free_r>
   83068:	e7b6      	b.n	82fd8 <_realloc_r+0xf4>
   8306a:	4611      	mov	r1, r2
   8306c:	b003      	add	sp, #12
   8306e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83072:	f7ff bb71 	b.w	82758 <_malloc_r>
   83076:	f8de 2004 	ldr.w	r2, [lr, #4]
   8307a:	f106 0c10 	add.w	ip, r6, #16
   8307e:	f022 0203 	bic.w	r2, r2, #3
   83082:	1950      	adds	r0, r2, r5
   83084:	4560      	cmp	r0, ip
   83086:	da3d      	bge.n	83104 <_realloc_r+0x220>
   83088:	4670      	mov	r0, lr
   8308a:	e759      	b.n	82f40 <_realloc_r+0x5c>
   8308c:	46d0      	mov	r8, sl
   8308e:	f858 0f08 	ldr.w	r0, [r8, #8]!
   83092:	f8da 100c 	ldr.w	r1, [sl, #12]
   83096:	1f2a      	subs	r2, r5, #4
   83098:	2a24      	cmp	r2, #36	; 0x24
   8309a:	60c1      	str	r1, [r0, #12]
   8309c:	6088      	str	r0, [r1, #8]
   8309e:	f200 80a0 	bhi.w	831e2 <_realloc_r+0x2fe>
   830a2:	2a13      	cmp	r2, #19
   830a4:	f240 809b 	bls.w	831de <_realloc_r+0x2fa>
   830a8:	6821      	ldr	r1, [r4, #0]
   830aa:	2a1b      	cmp	r2, #27
   830ac:	f8ca 1008 	str.w	r1, [sl, #8]
   830b0:	6861      	ldr	r1, [r4, #4]
   830b2:	f8ca 100c 	str.w	r1, [sl, #12]
   830b6:	f200 80b2 	bhi.w	8321e <_realloc_r+0x33a>
   830ba:	3408      	adds	r4, #8
   830bc:	f10a 0210 	add.w	r2, sl, #16
   830c0:	6821      	ldr	r1, [r4, #0]
   830c2:	461d      	mov	r5, r3
   830c4:	6011      	str	r1, [r2, #0]
   830c6:	6861      	ldr	r1, [r4, #4]
   830c8:	4657      	mov	r7, sl
   830ca:	6051      	str	r1, [r2, #4]
   830cc:	68a3      	ldr	r3, [r4, #8]
   830ce:	6093      	str	r3, [r2, #8]
   830d0:	f8da 3004 	ldr.w	r3, [sl, #4]
   830d4:	e774      	b.n	82fc0 <_realloc_r+0xdc>
   830d6:	6823      	ldr	r3, [r4, #0]
   830d8:	2a1b      	cmp	r2, #27
   830da:	6003      	str	r3, [r0, #0]
   830dc:	6863      	ldr	r3, [r4, #4]
   830de:	6043      	str	r3, [r0, #4]
   830e0:	d862      	bhi.n	831a8 <_realloc_r+0x2c4>
   830e2:	f100 0308 	add.w	r3, r0, #8
   830e6:	f104 0208 	add.w	r2, r4, #8
   830ea:	e7b3      	b.n	83054 <_realloc_r+0x170>
   830ec:	4643      	mov	r3, r8
   830ee:	6822      	ldr	r2, [r4, #0]
   830f0:	4675      	mov	r5, lr
   830f2:	601a      	str	r2, [r3, #0]
   830f4:	6862      	ldr	r2, [r4, #4]
   830f6:	4657      	mov	r7, sl
   830f8:	605a      	str	r2, [r3, #4]
   830fa:	68a2      	ldr	r2, [r4, #8]
   830fc:	609a      	str	r2, [r3, #8]
   830fe:	f8da 3004 	ldr.w	r3, [sl, #4]
   83102:	e75d      	b.n	82fc0 <_realloc_r+0xdc>
   83104:	1b83      	subs	r3, r0, r6
   83106:	4437      	add	r7, r6
   83108:	f043 0301 	orr.w	r3, r3, #1
   8310c:	f8cb 7008 	str.w	r7, [fp, #8]
   83110:	607b      	str	r3, [r7, #4]
   83112:	f854 3c04 	ldr.w	r3, [r4, #-4]
   83116:	4648      	mov	r0, r9
   83118:	f003 0301 	and.w	r3, r3, #1
   8311c:	431e      	orrs	r6, r3
   8311e:	f844 6c04 	str.w	r6, [r4, #-4]
   83122:	f7ff fedd 	bl	82ee0 <__malloc_unlock>
   83126:	4620      	mov	r0, r4
   83128:	e75a      	b.n	82fe0 <_realloc_r+0xfc>
   8312a:	4621      	mov	r1, r4
   8312c:	f7ff fe70 	bl	82e10 <memmove>
   83130:	e796      	b.n	83060 <_realloc_r+0x17c>
   83132:	eb02 0c03 	add.w	ip, r2, r3
   83136:	f106 0210 	add.w	r2, r6, #16
   8313a:	4594      	cmp	ip, r2
   8313c:	f6ff af70 	blt.w	83020 <_realloc_r+0x13c>
   83140:	4657      	mov	r7, sl
   83142:	f857 1f08 	ldr.w	r1, [r7, #8]!
   83146:	f8da 300c 	ldr.w	r3, [sl, #12]
   8314a:	1f2a      	subs	r2, r5, #4
   8314c:	2a24      	cmp	r2, #36	; 0x24
   8314e:	60cb      	str	r3, [r1, #12]
   83150:	6099      	str	r1, [r3, #8]
   83152:	f200 8086 	bhi.w	83262 <_realloc_r+0x37e>
   83156:	2a13      	cmp	r2, #19
   83158:	d977      	bls.n	8324a <_realloc_r+0x366>
   8315a:	6823      	ldr	r3, [r4, #0]
   8315c:	2a1b      	cmp	r2, #27
   8315e:	f8ca 3008 	str.w	r3, [sl, #8]
   83162:	6863      	ldr	r3, [r4, #4]
   83164:	f8ca 300c 	str.w	r3, [sl, #12]
   83168:	f200 8084 	bhi.w	83274 <_realloc_r+0x390>
   8316c:	3408      	adds	r4, #8
   8316e:	f10a 0310 	add.w	r3, sl, #16
   83172:	6822      	ldr	r2, [r4, #0]
   83174:	601a      	str	r2, [r3, #0]
   83176:	6862      	ldr	r2, [r4, #4]
   83178:	605a      	str	r2, [r3, #4]
   8317a:	68a2      	ldr	r2, [r4, #8]
   8317c:	609a      	str	r2, [r3, #8]
   8317e:	ebc6 020c 	rsb	r2, r6, ip
   83182:	eb0a 0306 	add.w	r3, sl, r6
   83186:	f042 0201 	orr.w	r2, r2, #1
   8318a:	f8cb 3008 	str.w	r3, [fp, #8]
   8318e:	605a      	str	r2, [r3, #4]
   83190:	f8da 3004 	ldr.w	r3, [sl, #4]
   83194:	4648      	mov	r0, r9
   83196:	f003 0301 	and.w	r3, r3, #1
   8319a:	431e      	orrs	r6, r3
   8319c:	f8ca 6004 	str.w	r6, [sl, #4]
   831a0:	f7ff fe9e 	bl	82ee0 <__malloc_unlock>
   831a4:	4638      	mov	r0, r7
   831a6:	e71b      	b.n	82fe0 <_realloc_r+0xfc>
   831a8:	68a3      	ldr	r3, [r4, #8]
   831aa:	2a24      	cmp	r2, #36	; 0x24
   831ac:	6083      	str	r3, [r0, #8]
   831ae:	68e3      	ldr	r3, [r4, #12]
   831b0:	60c3      	str	r3, [r0, #12]
   831b2:	d02b      	beq.n	8320c <_realloc_r+0x328>
   831b4:	f100 0310 	add.w	r3, r0, #16
   831b8:	f104 0210 	add.w	r2, r4, #16
   831bc:	e74a      	b.n	83054 <_realloc_r+0x170>
   831be:	f850 2c04 	ldr.w	r2, [r0, #-4]
   831c2:	46a0      	mov	r8, r4
   831c4:	f022 0203 	bic.w	r2, r2, #3
   831c8:	4415      	add	r5, r2
   831ca:	e6f9      	b.n	82fc0 <_realloc_r+0xdc>
   831cc:	4621      	mov	r1, r4
   831ce:	4640      	mov	r0, r8
   831d0:	4675      	mov	r5, lr
   831d2:	4657      	mov	r7, sl
   831d4:	f7ff fe1c 	bl	82e10 <memmove>
   831d8:	f8da 3004 	ldr.w	r3, [sl, #4]
   831dc:	e6f0      	b.n	82fc0 <_realloc_r+0xdc>
   831de:	4642      	mov	r2, r8
   831e0:	e76e      	b.n	830c0 <_realloc_r+0x1dc>
   831e2:	4621      	mov	r1, r4
   831e4:	4640      	mov	r0, r8
   831e6:	461d      	mov	r5, r3
   831e8:	4657      	mov	r7, sl
   831ea:	f7ff fe11 	bl	82e10 <memmove>
   831ee:	f8da 3004 	ldr.w	r3, [sl, #4]
   831f2:	e6e5      	b.n	82fc0 <_realloc_r+0xdc>
   831f4:	68a3      	ldr	r3, [r4, #8]
   831f6:	2a24      	cmp	r2, #36	; 0x24
   831f8:	f8ca 3010 	str.w	r3, [sl, #16]
   831fc:	68e3      	ldr	r3, [r4, #12]
   831fe:	f8ca 3014 	str.w	r3, [sl, #20]
   83202:	d018      	beq.n	83236 <_realloc_r+0x352>
   83204:	3410      	adds	r4, #16
   83206:	f10a 0318 	add.w	r3, sl, #24
   8320a:	e770      	b.n	830ee <_realloc_r+0x20a>
   8320c:	6922      	ldr	r2, [r4, #16]
   8320e:	f100 0318 	add.w	r3, r0, #24
   83212:	6102      	str	r2, [r0, #16]
   83214:	6961      	ldr	r1, [r4, #20]
   83216:	f104 0218 	add.w	r2, r4, #24
   8321a:	6141      	str	r1, [r0, #20]
   8321c:	e71a      	b.n	83054 <_realloc_r+0x170>
   8321e:	68a1      	ldr	r1, [r4, #8]
   83220:	2a24      	cmp	r2, #36	; 0x24
   83222:	f8ca 1010 	str.w	r1, [sl, #16]
   83226:	68e1      	ldr	r1, [r4, #12]
   83228:	f8ca 1014 	str.w	r1, [sl, #20]
   8322c:	d00f      	beq.n	8324e <_realloc_r+0x36a>
   8322e:	3410      	adds	r4, #16
   83230:	f10a 0218 	add.w	r2, sl, #24
   83234:	e744      	b.n	830c0 <_realloc_r+0x1dc>
   83236:	6922      	ldr	r2, [r4, #16]
   83238:	f10a 0320 	add.w	r3, sl, #32
   8323c:	f8ca 2018 	str.w	r2, [sl, #24]
   83240:	6962      	ldr	r2, [r4, #20]
   83242:	3418      	adds	r4, #24
   83244:	f8ca 201c 	str.w	r2, [sl, #28]
   83248:	e751      	b.n	830ee <_realloc_r+0x20a>
   8324a:	463b      	mov	r3, r7
   8324c:	e791      	b.n	83172 <_realloc_r+0x28e>
   8324e:	6921      	ldr	r1, [r4, #16]
   83250:	f10a 0220 	add.w	r2, sl, #32
   83254:	f8ca 1018 	str.w	r1, [sl, #24]
   83258:	6961      	ldr	r1, [r4, #20]
   8325a:	3418      	adds	r4, #24
   8325c:	f8ca 101c 	str.w	r1, [sl, #28]
   83260:	e72e      	b.n	830c0 <_realloc_r+0x1dc>
   83262:	4621      	mov	r1, r4
   83264:	4638      	mov	r0, r7
   83266:	f8cd c004 	str.w	ip, [sp, #4]
   8326a:	f7ff fdd1 	bl	82e10 <memmove>
   8326e:	f8dd c004 	ldr.w	ip, [sp, #4]
   83272:	e784      	b.n	8317e <_realloc_r+0x29a>
   83274:	68a3      	ldr	r3, [r4, #8]
   83276:	2a24      	cmp	r2, #36	; 0x24
   83278:	f8ca 3010 	str.w	r3, [sl, #16]
   8327c:	68e3      	ldr	r3, [r4, #12]
   8327e:	f8ca 3014 	str.w	r3, [sl, #20]
   83282:	d003      	beq.n	8328c <_realloc_r+0x3a8>
   83284:	3410      	adds	r4, #16
   83286:	f10a 0318 	add.w	r3, sl, #24
   8328a:	e772      	b.n	83172 <_realloc_r+0x28e>
   8328c:	6922      	ldr	r2, [r4, #16]
   8328e:	f10a 0320 	add.w	r3, sl, #32
   83292:	f8ca 2018 	str.w	r2, [sl, #24]
   83296:	6962      	ldr	r2, [r4, #20]
   83298:	3418      	adds	r4, #24
   8329a:	f8ca 201c 	str.w	r2, [sl, #28]
   8329e:	e768      	b.n	83172 <_realloc_r+0x28e>
   832a0:	20070588 	.word	0x20070588

000832a4 <_sbrk_r>:
   832a4:	b538      	push	{r3, r4, r5, lr}
   832a6:	4c07      	ldr	r4, [pc, #28]	; (832c4 <_sbrk_r+0x20>)
   832a8:	2300      	movs	r3, #0
   832aa:	4605      	mov	r5, r0
   832ac:	4608      	mov	r0, r1
   832ae:	6023      	str	r3, [r4, #0]
   832b0:	f7fd fbfe 	bl	80ab0 <_sbrk>
   832b4:	1c43      	adds	r3, r0, #1
   832b6:	d000      	beq.n	832ba <_sbrk_r+0x16>
   832b8:	bd38      	pop	{r3, r4, r5, pc}
   832ba:	6823      	ldr	r3, [r4, #0]
   832bc:	2b00      	cmp	r3, #0
   832be:	d0fb      	beq.n	832b8 <_sbrk_r+0x14>
   832c0:	602b      	str	r3, [r5, #0]
   832c2:	bd38      	pop	{r3, r4, r5, pc}
   832c4:	20070b10 	.word	0x20070b10

000832c8 <__sread>:
   832c8:	b510      	push	{r4, lr}
   832ca:	460c      	mov	r4, r1
   832cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   832d0:	f000 f9f2 	bl	836b8 <_read_r>
   832d4:	2800      	cmp	r0, #0
   832d6:	db03      	blt.n	832e0 <__sread+0x18>
   832d8:	6d23      	ldr	r3, [r4, #80]	; 0x50
   832da:	4403      	add	r3, r0
   832dc:	6523      	str	r3, [r4, #80]	; 0x50
   832de:	bd10      	pop	{r4, pc}
   832e0:	89a3      	ldrh	r3, [r4, #12]
   832e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   832e6:	81a3      	strh	r3, [r4, #12]
   832e8:	bd10      	pop	{r4, pc}
   832ea:	bf00      	nop

000832ec <__swrite>:
   832ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   832f0:	460c      	mov	r4, r1
   832f2:	8989      	ldrh	r1, [r1, #12]
   832f4:	461d      	mov	r5, r3
   832f6:	05cb      	lsls	r3, r1, #23
   832f8:	4616      	mov	r6, r2
   832fa:	4607      	mov	r7, r0
   832fc:	d506      	bpl.n	8330c <__swrite+0x20>
   832fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   83302:	2200      	movs	r2, #0
   83304:	2302      	movs	r3, #2
   83306:	f000 f9c3 	bl	83690 <_lseek_r>
   8330a:	89a1      	ldrh	r1, [r4, #12]
   8330c:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   83310:	81a1      	strh	r1, [r4, #12]
   83312:	4638      	mov	r0, r7
   83314:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   83318:	4632      	mov	r2, r6
   8331a:	462b      	mov	r3, r5
   8331c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   83320:	f000 b8ce 	b.w	834c0 <_write_r>

00083324 <__sseek>:
   83324:	b510      	push	{r4, lr}
   83326:	460c      	mov	r4, r1
   83328:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8332c:	f000 f9b0 	bl	83690 <_lseek_r>
   83330:	89a3      	ldrh	r3, [r4, #12]
   83332:	1c42      	adds	r2, r0, #1
   83334:	bf0e      	itee	eq
   83336:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   8333a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   8333e:	6520      	strne	r0, [r4, #80]	; 0x50
   83340:	81a3      	strh	r3, [r4, #12]
   83342:	bd10      	pop	{r4, pc}

00083344 <__sclose>:
   83344:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83348:	f000 b922 	b.w	83590 <_close_r>

0008334c <strlen>:
   8334c:	f020 0103 	bic.w	r1, r0, #3
   83350:	f010 0003 	ands.w	r0, r0, #3
   83354:	f1c0 0000 	rsb	r0, r0, #0
   83358:	f851 3b04 	ldr.w	r3, [r1], #4
   8335c:	f100 0c04 	add.w	ip, r0, #4
   83360:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   83364:	f06f 0200 	mvn.w	r2, #0
   83368:	bf1c      	itt	ne
   8336a:	fa22 f20c 	lsrne.w	r2, r2, ip
   8336e:	4313      	orrne	r3, r2
   83370:	f04f 0c01 	mov.w	ip, #1
   83374:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   83378:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   8337c:	eba3 020c 	sub.w	r2, r3, ip
   83380:	ea22 0203 	bic.w	r2, r2, r3
   83384:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   83388:	bf04      	itt	eq
   8338a:	f851 3b04 	ldreq.w	r3, [r1], #4
   8338e:	3004      	addeq	r0, #4
   83390:	d0f4      	beq.n	8337c <strlen+0x30>
   83392:	f013 0fff 	tst.w	r3, #255	; 0xff
   83396:	bf1f      	itttt	ne
   83398:	3001      	addne	r0, #1
   8339a:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
   8339e:	3001      	addne	r0, #1
   833a0:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
   833a4:	bf18      	it	ne
   833a6:	3001      	addne	r0, #1
   833a8:	4770      	bx	lr
   833aa:	bf00      	nop

000833ac <__swbuf_r>:
   833ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   833ae:	460d      	mov	r5, r1
   833b0:	4614      	mov	r4, r2
   833b2:	4607      	mov	r7, r0
   833b4:	b110      	cbz	r0, 833bc <__swbuf_r+0x10>
   833b6:	6b83      	ldr	r3, [r0, #56]	; 0x38
   833b8:	2b00      	cmp	r3, #0
   833ba:	d048      	beq.n	8344e <__swbuf_r+0xa2>
   833bc:	89a2      	ldrh	r2, [r4, #12]
   833be:	69a0      	ldr	r0, [r4, #24]
   833c0:	b293      	uxth	r3, r2
   833c2:	60a0      	str	r0, [r4, #8]
   833c4:	0718      	lsls	r0, r3, #28
   833c6:	d538      	bpl.n	8343a <__swbuf_r+0x8e>
   833c8:	6926      	ldr	r6, [r4, #16]
   833ca:	2e00      	cmp	r6, #0
   833cc:	d035      	beq.n	8343a <__swbuf_r+0x8e>
   833ce:	0499      	lsls	r1, r3, #18
   833d0:	b2ed      	uxtb	r5, r5
   833d2:	d515      	bpl.n	83400 <__swbuf_r+0x54>
   833d4:	6823      	ldr	r3, [r4, #0]
   833d6:	6962      	ldr	r2, [r4, #20]
   833d8:	1b9e      	subs	r6, r3, r6
   833da:	4296      	cmp	r6, r2
   833dc:	da1c      	bge.n	83418 <__swbuf_r+0x6c>
   833de:	3601      	adds	r6, #1
   833e0:	68a2      	ldr	r2, [r4, #8]
   833e2:	1c59      	adds	r1, r3, #1
   833e4:	3a01      	subs	r2, #1
   833e6:	60a2      	str	r2, [r4, #8]
   833e8:	6021      	str	r1, [r4, #0]
   833ea:	701d      	strb	r5, [r3, #0]
   833ec:	6963      	ldr	r3, [r4, #20]
   833ee:	42b3      	cmp	r3, r6
   833f0:	d01a      	beq.n	83428 <__swbuf_r+0x7c>
   833f2:	89a3      	ldrh	r3, [r4, #12]
   833f4:	07db      	lsls	r3, r3, #31
   833f6:	d501      	bpl.n	833fc <__swbuf_r+0x50>
   833f8:	2d0a      	cmp	r5, #10
   833fa:	d015      	beq.n	83428 <__swbuf_r+0x7c>
   833fc:	4628      	mov	r0, r5
   833fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83400:	6e63      	ldr	r3, [r4, #100]	; 0x64
   83402:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   83406:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   8340a:	6663      	str	r3, [r4, #100]	; 0x64
   8340c:	6823      	ldr	r3, [r4, #0]
   8340e:	81a2      	strh	r2, [r4, #12]
   83410:	6962      	ldr	r2, [r4, #20]
   83412:	1b9e      	subs	r6, r3, r6
   83414:	4296      	cmp	r6, r2
   83416:	dbe2      	blt.n	833de <__swbuf_r+0x32>
   83418:	4638      	mov	r0, r7
   8341a:	4621      	mov	r1, r4
   8341c:	f7fe fd3e 	bl	81e9c <_fflush_r>
   83420:	b940      	cbnz	r0, 83434 <__swbuf_r+0x88>
   83422:	6823      	ldr	r3, [r4, #0]
   83424:	2601      	movs	r6, #1
   83426:	e7db      	b.n	833e0 <__swbuf_r+0x34>
   83428:	4638      	mov	r0, r7
   8342a:	4621      	mov	r1, r4
   8342c:	f7fe fd36 	bl	81e9c <_fflush_r>
   83430:	2800      	cmp	r0, #0
   83432:	d0e3      	beq.n	833fc <__swbuf_r+0x50>
   83434:	f04f 30ff 	mov.w	r0, #4294967295
   83438:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8343a:	4638      	mov	r0, r7
   8343c:	4621      	mov	r1, r4
   8343e:	f7fe fc17 	bl	81c70 <__swsetup_r>
   83442:	2800      	cmp	r0, #0
   83444:	d1f6      	bne.n	83434 <__swbuf_r+0x88>
   83446:	89a2      	ldrh	r2, [r4, #12]
   83448:	6926      	ldr	r6, [r4, #16]
   8344a:	b293      	uxth	r3, r2
   8344c:	e7bf      	b.n	833ce <__swbuf_r+0x22>
   8344e:	f7fe fd41 	bl	81ed4 <__sinit>
   83452:	e7b3      	b.n	833bc <__swbuf_r+0x10>

00083454 <_wcrtomb_r>:
   83454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83458:	461e      	mov	r6, r3
   8345a:	b086      	sub	sp, #24
   8345c:	460c      	mov	r4, r1
   8345e:	4605      	mov	r5, r0
   83460:	4617      	mov	r7, r2
   83462:	4b0f      	ldr	r3, [pc, #60]	; (834a0 <_wcrtomb_r+0x4c>)
   83464:	b191      	cbz	r1, 8348c <_wcrtomb_r+0x38>
   83466:	f8d3 8000 	ldr.w	r8, [r3]
   8346a:	f7ff f8f3 	bl	82654 <__locale_charset>
   8346e:	9600      	str	r6, [sp, #0]
   83470:	4603      	mov	r3, r0
   83472:	4621      	mov	r1, r4
   83474:	463a      	mov	r2, r7
   83476:	4628      	mov	r0, r5
   83478:	47c0      	blx	r8
   8347a:	1c43      	adds	r3, r0, #1
   8347c:	d103      	bne.n	83486 <_wcrtomb_r+0x32>
   8347e:	2200      	movs	r2, #0
   83480:	238a      	movs	r3, #138	; 0x8a
   83482:	6032      	str	r2, [r6, #0]
   83484:	602b      	str	r3, [r5, #0]
   83486:	b006      	add	sp, #24
   83488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8348c:	681f      	ldr	r7, [r3, #0]
   8348e:	f7ff f8e1 	bl	82654 <__locale_charset>
   83492:	9600      	str	r6, [sp, #0]
   83494:	4603      	mov	r3, r0
   83496:	4622      	mov	r2, r4
   83498:	4628      	mov	r0, r5
   8349a:	a903      	add	r1, sp, #12
   8349c:	47b8      	blx	r7
   8349e:	e7ec      	b.n	8347a <_wcrtomb_r+0x26>
   834a0:	20070998 	.word	0x20070998

000834a4 <__ascii_wctomb>:
   834a4:	b121      	cbz	r1, 834b0 <__ascii_wctomb+0xc>
   834a6:	2aff      	cmp	r2, #255	; 0xff
   834a8:	d804      	bhi.n	834b4 <__ascii_wctomb+0x10>
   834aa:	700a      	strb	r2, [r1, #0]
   834ac:	2001      	movs	r0, #1
   834ae:	4770      	bx	lr
   834b0:	4608      	mov	r0, r1
   834b2:	4770      	bx	lr
   834b4:	238a      	movs	r3, #138	; 0x8a
   834b6:	6003      	str	r3, [r0, #0]
   834b8:	f04f 30ff 	mov.w	r0, #4294967295
   834bc:	4770      	bx	lr
   834be:	bf00      	nop

000834c0 <_write_r>:
   834c0:	b570      	push	{r4, r5, r6, lr}
   834c2:	4c08      	ldr	r4, [pc, #32]	; (834e4 <_write_r+0x24>)
   834c4:	4606      	mov	r6, r0
   834c6:	2500      	movs	r5, #0
   834c8:	4608      	mov	r0, r1
   834ca:	4611      	mov	r1, r2
   834cc:	461a      	mov	r2, r3
   834ce:	6025      	str	r5, [r4, #0]
   834d0:	f7fc fea0 	bl	80214 <_write>
   834d4:	1c43      	adds	r3, r0, #1
   834d6:	d000      	beq.n	834da <_write_r+0x1a>
   834d8:	bd70      	pop	{r4, r5, r6, pc}
   834da:	6823      	ldr	r3, [r4, #0]
   834dc:	2b00      	cmp	r3, #0
   834de:	d0fb      	beq.n	834d8 <_write_r+0x18>
   834e0:	6033      	str	r3, [r6, #0]
   834e2:	bd70      	pop	{r4, r5, r6, pc}
   834e4:	20070b10 	.word	0x20070b10

000834e8 <__register_exitproc>:
   834e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   834ea:	4c27      	ldr	r4, [pc, #156]	; (83588 <__register_exitproc+0xa0>)
   834ec:	b085      	sub	sp, #20
   834ee:	6826      	ldr	r6, [r4, #0]
   834f0:	4607      	mov	r7, r0
   834f2:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   834f6:	2c00      	cmp	r4, #0
   834f8:	d040      	beq.n	8357c <__register_exitproc+0x94>
   834fa:	6865      	ldr	r5, [r4, #4]
   834fc:	2d1f      	cmp	r5, #31
   834fe:	dd1e      	ble.n	8353e <__register_exitproc+0x56>
   83500:	4822      	ldr	r0, [pc, #136]	; (8358c <__register_exitproc+0xa4>)
   83502:	b918      	cbnz	r0, 8350c <__register_exitproc+0x24>
   83504:	f04f 30ff 	mov.w	r0, #4294967295
   83508:	b005      	add	sp, #20
   8350a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8350c:	f44f 70c8 	mov.w	r0, #400	; 0x190
   83510:	9103      	str	r1, [sp, #12]
   83512:	9202      	str	r2, [sp, #8]
   83514:	9301      	str	r3, [sp, #4]
   83516:	f7ff f917 	bl	82748 <malloc>
   8351a:	9903      	ldr	r1, [sp, #12]
   8351c:	4604      	mov	r4, r0
   8351e:	9a02      	ldr	r2, [sp, #8]
   83520:	9b01      	ldr	r3, [sp, #4]
   83522:	2800      	cmp	r0, #0
   83524:	d0ee      	beq.n	83504 <__register_exitproc+0x1c>
   83526:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
   8352a:	2000      	movs	r0, #0
   8352c:	6025      	str	r5, [r4, #0]
   8352e:	6060      	str	r0, [r4, #4]
   83530:	4605      	mov	r5, r0
   83532:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   83536:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   8353a:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   8353e:	b93f      	cbnz	r7, 83550 <__register_exitproc+0x68>
   83540:	1c6b      	adds	r3, r5, #1
   83542:	2000      	movs	r0, #0
   83544:	3502      	adds	r5, #2
   83546:	6063      	str	r3, [r4, #4]
   83548:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
   8354c:	b005      	add	sp, #20
   8354e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83550:	2601      	movs	r6, #1
   83552:	40ae      	lsls	r6, r5
   83554:	eb04 0085 	add.w	r0, r4, r5, lsl #2
   83558:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   8355c:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   83560:	2f02      	cmp	r7, #2
   83562:	ea42 0206 	orr.w	r2, r2, r6
   83566:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   8356a:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   8356e:	d1e7      	bne.n	83540 <__register_exitproc+0x58>
   83570:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   83574:	431e      	orrs	r6, r3
   83576:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
   8357a:	e7e1      	b.n	83540 <__register_exitproc+0x58>
   8357c:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   83580:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   83584:	e7b9      	b.n	834fa <__register_exitproc+0x12>
   83586:	bf00      	nop
   83588:	00083cd8 	.word	0x00083cd8
   8358c:	00082749 	.word	0x00082749

00083590 <_close_r>:
   83590:	b538      	push	{r3, r4, r5, lr}
   83592:	4c07      	ldr	r4, [pc, #28]	; (835b0 <_close_r+0x20>)
   83594:	2300      	movs	r3, #0
   83596:	4605      	mov	r5, r0
   83598:	4608      	mov	r0, r1
   8359a:	6023      	str	r3, [r4, #0]
   8359c:	f7fd faa2 	bl	80ae4 <_close>
   835a0:	1c43      	adds	r3, r0, #1
   835a2:	d000      	beq.n	835a6 <_close_r+0x16>
   835a4:	bd38      	pop	{r3, r4, r5, pc}
   835a6:	6823      	ldr	r3, [r4, #0]
   835a8:	2b00      	cmp	r3, #0
   835aa:	d0fb      	beq.n	835a4 <_close_r+0x14>
   835ac:	602b      	str	r3, [r5, #0]
   835ae:	bd38      	pop	{r3, r4, r5, pc}
   835b0:	20070b10 	.word	0x20070b10

000835b4 <_fclose_r>:
   835b4:	b570      	push	{r4, r5, r6, lr}
   835b6:	460c      	mov	r4, r1
   835b8:	4605      	mov	r5, r0
   835ba:	b131      	cbz	r1, 835ca <_fclose_r+0x16>
   835bc:	b110      	cbz	r0, 835c4 <_fclose_r+0x10>
   835be:	6b83      	ldr	r3, [r0, #56]	; 0x38
   835c0:	2b00      	cmp	r3, #0
   835c2:	d02f      	beq.n	83624 <_fclose_r+0x70>
   835c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   835c8:	b90b      	cbnz	r3, 835ce <_fclose_r+0x1a>
   835ca:	2000      	movs	r0, #0
   835cc:	bd70      	pop	{r4, r5, r6, pc}
   835ce:	4628      	mov	r0, r5
   835d0:	4621      	mov	r1, r4
   835d2:	f7fe fc63 	bl	81e9c <_fflush_r>
   835d6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   835d8:	4606      	mov	r6, r0
   835da:	b133      	cbz	r3, 835ea <_fclose_r+0x36>
   835dc:	4628      	mov	r0, r5
   835de:	69e1      	ldr	r1, [r4, #28]
   835e0:	4798      	blx	r3
   835e2:	2800      	cmp	r0, #0
   835e4:	bfb8      	it	lt
   835e6:	f04f 36ff 	movlt.w	r6, #4294967295
   835ea:	89a3      	ldrh	r3, [r4, #12]
   835ec:	061b      	lsls	r3, r3, #24
   835ee:	d41c      	bmi.n	8362a <_fclose_r+0x76>
   835f0:	6b21      	ldr	r1, [r4, #48]	; 0x30
   835f2:	b141      	cbz	r1, 83606 <_fclose_r+0x52>
   835f4:	f104 0340 	add.w	r3, r4, #64	; 0x40
   835f8:	4299      	cmp	r1, r3
   835fa:	d002      	beq.n	83602 <_fclose_r+0x4e>
   835fc:	4628      	mov	r0, r5
   835fe:	f7fe fdad 	bl	8215c <_free_r>
   83602:	2300      	movs	r3, #0
   83604:	6323      	str	r3, [r4, #48]	; 0x30
   83606:	6c61      	ldr	r1, [r4, #68]	; 0x44
   83608:	b121      	cbz	r1, 83614 <_fclose_r+0x60>
   8360a:	4628      	mov	r0, r5
   8360c:	f7fe fda6 	bl	8215c <_free_r>
   83610:	2300      	movs	r3, #0
   83612:	6463      	str	r3, [r4, #68]	; 0x44
   83614:	f7fe fcd8 	bl	81fc8 <__sfp_lock_acquire>
   83618:	2300      	movs	r3, #0
   8361a:	81a3      	strh	r3, [r4, #12]
   8361c:	f7fe fcd6 	bl	81fcc <__sfp_lock_release>
   83620:	4630      	mov	r0, r6
   83622:	bd70      	pop	{r4, r5, r6, pc}
   83624:	f7fe fc56 	bl	81ed4 <__sinit>
   83628:	e7cc      	b.n	835c4 <_fclose_r+0x10>
   8362a:	4628      	mov	r0, r5
   8362c:	6921      	ldr	r1, [r4, #16]
   8362e:	f7fe fd95 	bl	8215c <_free_r>
   83632:	e7dd      	b.n	835f0 <_fclose_r+0x3c>

00083634 <fclose>:
   83634:	4b02      	ldr	r3, [pc, #8]	; (83640 <fclose+0xc>)
   83636:	4601      	mov	r1, r0
   83638:	6818      	ldr	r0, [r3, #0]
   8363a:	f7ff bfbb 	b.w	835b4 <_fclose_r>
   8363e:	bf00      	nop
   83640:	20070560 	.word	0x20070560

00083644 <_fstat_r>:
   83644:	b538      	push	{r3, r4, r5, lr}
   83646:	4c08      	ldr	r4, [pc, #32]	; (83668 <_fstat_r+0x24>)
   83648:	2300      	movs	r3, #0
   8364a:	4605      	mov	r5, r0
   8364c:	4608      	mov	r0, r1
   8364e:	4611      	mov	r1, r2
   83650:	6023      	str	r3, [r4, #0]
   83652:	f7fd fa4b 	bl	80aec <_fstat>
   83656:	1c43      	adds	r3, r0, #1
   83658:	d000      	beq.n	8365c <_fstat_r+0x18>
   8365a:	bd38      	pop	{r3, r4, r5, pc}
   8365c:	6823      	ldr	r3, [r4, #0]
   8365e:	2b00      	cmp	r3, #0
   83660:	d0fb      	beq.n	8365a <_fstat_r+0x16>
   83662:	602b      	str	r3, [r5, #0]
   83664:	bd38      	pop	{r3, r4, r5, pc}
   83666:	bf00      	nop
   83668:	20070b10 	.word	0x20070b10

0008366c <_isatty_r>:
   8366c:	b538      	push	{r3, r4, r5, lr}
   8366e:	4c07      	ldr	r4, [pc, #28]	; (8368c <_isatty_r+0x20>)
   83670:	2300      	movs	r3, #0
   83672:	4605      	mov	r5, r0
   83674:	4608      	mov	r0, r1
   83676:	6023      	str	r3, [r4, #0]
   83678:	f7fd fa3e 	bl	80af8 <_isatty>
   8367c:	1c43      	adds	r3, r0, #1
   8367e:	d000      	beq.n	83682 <_isatty_r+0x16>
   83680:	bd38      	pop	{r3, r4, r5, pc}
   83682:	6823      	ldr	r3, [r4, #0]
   83684:	2b00      	cmp	r3, #0
   83686:	d0fb      	beq.n	83680 <_isatty_r+0x14>
   83688:	602b      	str	r3, [r5, #0]
   8368a:	bd38      	pop	{r3, r4, r5, pc}
   8368c:	20070b10 	.word	0x20070b10

00083690 <_lseek_r>:
   83690:	b570      	push	{r4, r5, r6, lr}
   83692:	4c08      	ldr	r4, [pc, #32]	; (836b4 <_lseek_r+0x24>)
   83694:	4606      	mov	r6, r0
   83696:	2500      	movs	r5, #0
   83698:	4608      	mov	r0, r1
   8369a:	4611      	mov	r1, r2
   8369c:	461a      	mov	r2, r3
   8369e:	6025      	str	r5, [r4, #0]
   836a0:	f7fd fa2c 	bl	80afc <_lseek>
   836a4:	1c43      	adds	r3, r0, #1
   836a6:	d000      	beq.n	836aa <_lseek_r+0x1a>
   836a8:	bd70      	pop	{r4, r5, r6, pc}
   836aa:	6823      	ldr	r3, [r4, #0]
   836ac:	2b00      	cmp	r3, #0
   836ae:	d0fb      	beq.n	836a8 <_lseek_r+0x18>
   836b0:	6033      	str	r3, [r6, #0]
   836b2:	bd70      	pop	{r4, r5, r6, pc}
   836b4:	20070b10 	.word	0x20070b10

000836b8 <_read_r>:
   836b8:	b570      	push	{r4, r5, r6, lr}
   836ba:	4c08      	ldr	r4, [pc, #32]	; (836dc <_read_r+0x24>)
   836bc:	4606      	mov	r6, r0
   836be:	2500      	movs	r5, #0
   836c0:	4608      	mov	r0, r1
   836c2:	4611      	mov	r1, r2
   836c4:	461a      	mov	r2, r3
   836c6:	6025      	str	r5, [r4, #0]
   836c8:	f7fc fd3e 	bl	80148 <_read>
   836cc:	1c43      	adds	r3, r0, #1
   836ce:	d000      	beq.n	836d2 <_read_r+0x1a>
   836d0:	bd70      	pop	{r4, r5, r6, pc}
   836d2:	6823      	ldr	r3, [r4, #0]
   836d4:	2b00      	cmp	r3, #0
   836d6:	d0fb      	beq.n	836d0 <_read_r+0x18>
   836d8:	6033      	str	r3, [r6, #0]
   836da:	bd70      	pop	{r4, r5, r6, pc}
   836dc:	20070b10 	.word	0x20070b10

000836e0 <__aeabi_uldivmod>:
   836e0:	b94b      	cbnz	r3, 836f6 <__aeabi_uldivmod+0x16>
   836e2:	b942      	cbnz	r2, 836f6 <__aeabi_uldivmod+0x16>
   836e4:	2900      	cmp	r1, #0
   836e6:	bf08      	it	eq
   836e8:	2800      	cmpeq	r0, #0
   836ea:	d002      	beq.n	836f2 <__aeabi_uldivmod+0x12>
   836ec:	f04f 31ff 	mov.w	r1, #4294967295
   836f0:	4608      	mov	r0, r1
   836f2:	f000 b83b 	b.w	8376c <__aeabi_idiv0>
   836f6:	b082      	sub	sp, #8
   836f8:	46ec      	mov	ip, sp
   836fa:	e92d 5000 	stmdb	sp!, {ip, lr}
   836fe:	f000 f81d 	bl	8373c <__gnu_uldivmod_helper>
   83702:	f8dd e004 	ldr.w	lr, [sp, #4]
   83706:	b002      	add	sp, #8
   83708:	bc0c      	pop	{r2, r3}
   8370a:	4770      	bx	lr

0008370c <__gnu_ldivmod_helper>:
   8370c:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   83710:	9e08      	ldr	r6, [sp, #32]
   83712:	4614      	mov	r4, r2
   83714:	461d      	mov	r5, r3
   83716:	4680      	mov	r8, r0
   83718:	4689      	mov	r9, r1
   8371a:	f000 f829 	bl	83770 <__divdi3>
   8371e:	fb04 f301 	mul.w	r3, r4, r1
   83722:	fba4 ab00 	umull	sl, fp, r4, r0
   83726:	fb00 3205 	mla	r2, r0, r5, r3
   8372a:	4493      	add	fp, r2
   8372c:	ebb8 080a 	subs.w	r8, r8, sl
   83730:	eb69 090b 	sbc.w	r9, r9, fp
   83734:	e9c6 8900 	strd	r8, r9, [r6]
   83738:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

0008373c <__gnu_uldivmod_helper>:
   8373c:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   83740:	9e08      	ldr	r6, [sp, #32]
   83742:	4614      	mov	r4, r2
   83744:	461d      	mov	r5, r3
   83746:	4680      	mov	r8, r0
   83748:	4689      	mov	r9, r1
   8374a:	f000 f961 	bl	83a10 <__udivdi3>
   8374e:	fb00 f505 	mul.w	r5, r0, r5
   83752:	fba0 ab04 	umull	sl, fp, r0, r4
   83756:	fb04 5401 	mla	r4, r4, r1, r5
   8375a:	44a3      	add	fp, r4
   8375c:	ebb8 080a 	subs.w	r8, r8, sl
   83760:	eb69 090b 	sbc.w	r9, r9, fp
   83764:	e9c6 8900 	strd	r8, r9, [r6]
   83768:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

0008376c <__aeabi_idiv0>:
   8376c:	4770      	bx	lr
   8376e:	bf00      	nop

00083770 <__divdi3>:
   83770:	2900      	cmp	r1, #0
   83772:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83776:	f2c0 80a1 	blt.w	838bc <__divdi3+0x14c>
   8377a:	2400      	movs	r4, #0
   8377c:	2b00      	cmp	r3, #0
   8377e:	f2c0 8098 	blt.w	838b2 <__divdi3+0x142>
   83782:	4615      	mov	r5, r2
   83784:	4606      	mov	r6, r0
   83786:	460f      	mov	r7, r1
   83788:	2b00      	cmp	r3, #0
   8378a:	d13f      	bne.n	8380c <__divdi3+0x9c>
   8378c:	428a      	cmp	r2, r1
   8378e:	d958      	bls.n	83842 <__divdi3+0xd2>
   83790:	fab2 f382 	clz	r3, r2
   83794:	b14b      	cbz	r3, 837aa <__divdi3+0x3a>
   83796:	f1c3 0220 	rsb	r2, r3, #32
   8379a:	fa01 f703 	lsl.w	r7, r1, r3
   8379e:	fa20 f202 	lsr.w	r2, r0, r2
   837a2:	409d      	lsls	r5, r3
   837a4:	fa00 f603 	lsl.w	r6, r0, r3
   837a8:	4317      	orrs	r7, r2
   837aa:	0c29      	lsrs	r1, r5, #16
   837ac:	fbb7 f2f1 	udiv	r2, r7, r1
   837b0:	fb01 7712 	mls	r7, r1, r2, r7
   837b4:	b2a8      	uxth	r0, r5
   837b6:	fb00 f302 	mul.w	r3, r0, r2
   837ba:	ea4f 4c16 	mov.w	ip, r6, lsr #16
   837be:	ea4c 4707 	orr.w	r7, ip, r7, lsl #16
   837c2:	42bb      	cmp	r3, r7
   837c4:	d909      	bls.n	837da <__divdi3+0x6a>
   837c6:	197f      	adds	r7, r7, r5
   837c8:	f102 3cff 	add.w	ip, r2, #4294967295
   837cc:	f080 8105 	bcs.w	839da <__divdi3+0x26a>
   837d0:	42bb      	cmp	r3, r7
   837d2:	f240 8102 	bls.w	839da <__divdi3+0x26a>
   837d6:	3a02      	subs	r2, #2
   837d8:	442f      	add	r7, r5
   837da:	1aff      	subs	r7, r7, r3
   837dc:	fbb7 f3f1 	udiv	r3, r7, r1
   837e0:	fb01 7113 	mls	r1, r1, r3, r7
   837e4:	fb00 f003 	mul.w	r0, r0, r3
   837e8:	b2b6      	uxth	r6, r6
   837ea:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
   837ee:	4288      	cmp	r0, r1
   837f0:	d908      	bls.n	83804 <__divdi3+0x94>
   837f2:	1949      	adds	r1, r1, r5
   837f4:	f103 37ff 	add.w	r7, r3, #4294967295
   837f8:	f080 80f1 	bcs.w	839de <__divdi3+0x26e>
   837fc:	4288      	cmp	r0, r1
   837fe:	f240 80ee 	bls.w	839de <__divdi3+0x26e>
   83802:	3b02      	subs	r3, #2
   83804:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   83808:	2300      	movs	r3, #0
   8380a:	e003      	b.n	83814 <__divdi3+0xa4>
   8380c:	428b      	cmp	r3, r1
   8380e:	d90a      	bls.n	83826 <__divdi3+0xb6>
   83810:	2300      	movs	r3, #0
   83812:	461a      	mov	r2, r3
   83814:	4610      	mov	r0, r2
   83816:	4619      	mov	r1, r3
   83818:	b114      	cbz	r4, 83820 <__divdi3+0xb0>
   8381a:	4240      	negs	r0, r0
   8381c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   83820:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83824:	4770      	bx	lr
   83826:	fab3 f883 	clz	r8, r3
   8382a:	f1b8 0f00 	cmp.w	r8, #0
   8382e:	f040 8088 	bne.w	83942 <__divdi3+0x1d2>
   83832:	428b      	cmp	r3, r1
   83834:	d302      	bcc.n	8383c <__divdi3+0xcc>
   83836:	4282      	cmp	r2, r0
   83838:	f200 80e2 	bhi.w	83a00 <__divdi3+0x290>
   8383c:	2300      	movs	r3, #0
   8383e:	2201      	movs	r2, #1
   83840:	e7e8      	b.n	83814 <__divdi3+0xa4>
   83842:	b912      	cbnz	r2, 8384a <__divdi3+0xda>
   83844:	2301      	movs	r3, #1
   83846:	fbb3 f5f2 	udiv	r5, r3, r2
   8384a:	fab5 f285 	clz	r2, r5
   8384e:	2a00      	cmp	r2, #0
   83850:	d13a      	bne.n	838c8 <__divdi3+0x158>
   83852:	1b7f      	subs	r7, r7, r5
   83854:	0c28      	lsrs	r0, r5, #16
   83856:	fa1f fc85 	uxth.w	ip, r5
   8385a:	2301      	movs	r3, #1
   8385c:	fbb7 f1f0 	udiv	r1, r7, r0
   83860:	fb00 7711 	mls	r7, r0, r1, r7
   83864:	fb0c f201 	mul.w	r2, ip, r1
   83868:	ea4f 4816 	mov.w	r8, r6, lsr #16
   8386c:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
   83870:	42ba      	cmp	r2, r7
   83872:	d907      	bls.n	83884 <__divdi3+0x114>
   83874:	197f      	adds	r7, r7, r5
   83876:	f101 38ff 	add.w	r8, r1, #4294967295
   8387a:	d202      	bcs.n	83882 <__divdi3+0x112>
   8387c:	42ba      	cmp	r2, r7
   8387e:	f200 80c4 	bhi.w	83a0a <__divdi3+0x29a>
   83882:	4641      	mov	r1, r8
   83884:	1abf      	subs	r7, r7, r2
   83886:	fbb7 f2f0 	udiv	r2, r7, r0
   8388a:	fb00 7012 	mls	r0, r0, r2, r7
   8388e:	fb0c fc02 	mul.w	ip, ip, r2
   83892:	b2b6      	uxth	r6, r6
   83894:	ea46 4000 	orr.w	r0, r6, r0, lsl #16
   83898:	4584      	cmp	ip, r0
   8389a:	d907      	bls.n	838ac <__divdi3+0x13c>
   8389c:	1940      	adds	r0, r0, r5
   8389e:	f102 37ff 	add.w	r7, r2, #4294967295
   838a2:	d202      	bcs.n	838aa <__divdi3+0x13a>
   838a4:	4584      	cmp	ip, r0
   838a6:	f200 80ae 	bhi.w	83a06 <__divdi3+0x296>
   838aa:	463a      	mov	r2, r7
   838ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   838b0:	e7b0      	b.n	83814 <__divdi3+0xa4>
   838b2:	43e4      	mvns	r4, r4
   838b4:	4252      	negs	r2, r2
   838b6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   838ba:	e762      	b.n	83782 <__divdi3+0x12>
   838bc:	4240      	negs	r0, r0
   838be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   838c2:	f04f 34ff 	mov.w	r4, #4294967295
   838c6:	e759      	b.n	8377c <__divdi3+0xc>
   838c8:	4095      	lsls	r5, r2
   838ca:	f1c2 0920 	rsb	r9, r2, #32
   838ce:	fa27 f109 	lsr.w	r1, r7, r9
   838d2:	fa26 f909 	lsr.w	r9, r6, r9
   838d6:	4097      	lsls	r7, r2
   838d8:	0c28      	lsrs	r0, r5, #16
   838da:	fbb1 f8f0 	udiv	r8, r1, r0
   838de:	fb00 1118 	mls	r1, r0, r8, r1
   838e2:	fa1f fc85 	uxth.w	ip, r5
   838e6:	fb0c f308 	mul.w	r3, ip, r8
   838ea:	ea49 0907 	orr.w	r9, r9, r7
   838ee:	ea4f 4719 	mov.w	r7, r9, lsr #16
   838f2:	ea47 4101 	orr.w	r1, r7, r1, lsl #16
   838f6:	428b      	cmp	r3, r1
   838f8:	fa06 f602 	lsl.w	r6, r6, r2
   838fc:	d908      	bls.n	83910 <__divdi3+0x1a0>
   838fe:	1949      	adds	r1, r1, r5
   83900:	f108 32ff 	add.w	r2, r8, #4294967295
   83904:	d27a      	bcs.n	839fc <__divdi3+0x28c>
   83906:	428b      	cmp	r3, r1
   83908:	d978      	bls.n	839fc <__divdi3+0x28c>
   8390a:	f1a8 0802 	sub.w	r8, r8, #2
   8390e:	4429      	add	r1, r5
   83910:	1ac9      	subs	r1, r1, r3
   83912:	fbb1 f3f0 	udiv	r3, r1, r0
   83916:	fb00 1713 	mls	r7, r0, r3, r1
   8391a:	fb0c f203 	mul.w	r2, ip, r3
   8391e:	fa1f f989 	uxth.w	r9, r9
   83922:	ea49 4707 	orr.w	r7, r9, r7, lsl #16
   83926:	42ba      	cmp	r2, r7
   83928:	d907      	bls.n	8393a <__divdi3+0x1ca>
   8392a:	197f      	adds	r7, r7, r5
   8392c:	f103 31ff 	add.w	r1, r3, #4294967295
   83930:	d260      	bcs.n	839f4 <__divdi3+0x284>
   83932:	42ba      	cmp	r2, r7
   83934:	d95e      	bls.n	839f4 <__divdi3+0x284>
   83936:	3b02      	subs	r3, #2
   83938:	442f      	add	r7, r5
   8393a:	1abf      	subs	r7, r7, r2
   8393c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   83940:	e78c      	b.n	8385c <__divdi3+0xec>
   83942:	f1c8 0220 	rsb	r2, r8, #32
   83946:	fa25 f102 	lsr.w	r1, r5, r2
   8394a:	fa03 fc08 	lsl.w	ip, r3, r8
   8394e:	fa27 f302 	lsr.w	r3, r7, r2
   83952:	fa20 f202 	lsr.w	r2, r0, r2
   83956:	fa07 f708 	lsl.w	r7, r7, r8
   8395a:	ea41 0c0c 	orr.w	ip, r1, ip
   8395e:	ea4f 491c 	mov.w	r9, ip, lsr #16
   83962:	fbb3 f1f9 	udiv	r1, r3, r9
   83966:	fb09 3311 	mls	r3, r9, r1, r3
   8396a:	fa1f fa8c 	uxth.w	sl, ip
   8396e:	fb0a fb01 	mul.w	fp, sl, r1
   83972:	4317      	orrs	r7, r2
   83974:	0c3a      	lsrs	r2, r7, #16
   83976:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   8397a:	459b      	cmp	fp, r3
   8397c:	fa05 f008 	lsl.w	r0, r5, r8
   83980:	d908      	bls.n	83994 <__divdi3+0x224>
   83982:	eb13 030c 	adds.w	r3, r3, ip
   83986:	f101 32ff 	add.w	r2, r1, #4294967295
   8398a:	d235      	bcs.n	839f8 <__divdi3+0x288>
   8398c:	459b      	cmp	fp, r3
   8398e:	d933      	bls.n	839f8 <__divdi3+0x288>
   83990:	3902      	subs	r1, #2
   83992:	4463      	add	r3, ip
   83994:	ebcb 0303 	rsb	r3, fp, r3
   83998:	fbb3 f2f9 	udiv	r2, r3, r9
   8399c:	fb09 3312 	mls	r3, r9, r2, r3
   839a0:	fb0a fa02 	mul.w	sl, sl, r2
   839a4:	b2bf      	uxth	r7, r7
   839a6:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
   839aa:	45ba      	cmp	sl, r7
   839ac:	d908      	bls.n	839c0 <__divdi3+0x250>
   839ae:	eb17 070c 	adds.w	r7, r7, ip
   839b2:	f102 33ff 	add.w	r3, r2, #4294967295
   839b6:	d21b      	bcs.n	839f0 <__divdi3+0x280>
   839b8:	45ba      	cmp	sl, r7
   839ba:	d919      	bls.n	839f0 <__divdi3+0x280>
   839bc:	3a02      	subs	r2, #2
   839be:	4467      	add	r7, ip
   839c0:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
   839c4:	fba5 0100 	umull	r0, r1, r5, r0
   839c8:	ebca 0707 	rsb	r7, sl, r7
   839cc:	428f      	cmp	r7, r1
   839ce:	f04f 0300 	mov.w	r3, #0
   839d2:	d30a      	bcc.n	839ea <__divdi3+0x27a>
   839d4:	d005      	beq.n	839e2 <__divdi3+0x272>
   839d6:	462a      	mov	r2, r5
   839d8:	e71c      	b.n	83814 <__divdi3+0xa4>
   839da:	4662      	mov	r2, ip
   839dc:	e6fd      	b.n	837da <__divdi3+0x6a>
   839de:	463b      	mov	r3, r7
   839e0:	e710      	b.n	83804 <__divdi3+0x94>
   839e2:	fa06 f608 	lsl.w	r6, r6, r8
   839e6:	4286      	cmp	r6, r0
   839e8:	d2f5      	bcs.n	839d6 <__divdi3+0x266>
   839ea:	1e6a      	subs	r2, r5, #1
   839ec:	2300      	movs	r3, #0
   839ee:	e711      	b.n	83814 <__divdi3+0xa4>
   839f0:	461a      	mov	r2, r3
   839f2:	e7e5      	b.n	839c0 <__divdi3+0x250>
   839f4:	460b      	mov	r3, r1
   839f6:	e7a0      	b.n	8393a <__divdi3+0x1ca>
   839f8:	4611      	mov	r1, r2
   839fa:	e7cb      	b.n	83994 <__divdi3+0x224>
   839fc:	4690      	mov	r8, r2
   839fe:	e787      	b.n	83910 <__divdi3+0x1a0>
   83a00:	4643      	mov	r3, r8
   83a02:	4642      	mov	r2, r8
   83a04:	e706      	b.n	83814 <__divdi3+0xa4>
   83a06:	3a02      	subs	r2, #2
   83a08:	e750      	b.n	838ac <__divdi3+0x13c>
   83a0a:	3902      	subs	r1, #2
   83a0c:	442f      	add	r7, r5
   83a0e:	e739      	b.n	83884 <__divdi3+0x114>

00083a10 <__udivdi3>:
   83a10:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83a14:	4614      	mov	r4, r2
   83a16:	4605      	mov	r5, r0
   83a18:	460e      	mov	r6, r1
   83a1a:	2b00      	cmp	r3, #0
   83a1c:	d143      	bne.n	83aa6 <__udivdi3+0x96>
   83a1e:	428a      	cmp	r2, r1
   83a20:	d953      	bls.n	83aca <__udivdi3+0xba>
   83a22:	fab2 f782 	clz	r7, r2
   83a26:	b157      	cbz	r7, 83a3e <__udivdi3+0x2e>
   83a28:	f1c7 0620 	rsb	r6, r7, #32
   83a2c:	fa20 f606 	lsr.w	r6, r0, r6
   83a30:	fa01 f307 	lsl.w	r3, r1, r7
   83a34:	fa02 f407 	lsl.w	r4, r2, r7
   83a38:	fa00 f507 	lsl.w	r5, r0, r7
   83a3c:	431e      	orrs	r6, r3
   83a3e:	0c21      	lsrs	r1, r4, #16
   83a40:	fbb6 f2f1 	udiv	r2, r6, r1
   83a44:	fb01 6612 	mls	r6, r1, r2, r6
   83a48:	b2a0      	uxth	r0, r4
   83a4a:	fb00 f302 	mul.w	r3, r0, r2
   83a4e:	0c2f      	lsrs	r7, r5, #16
   83a50:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   83a54:	42b3      	cmp	r3, r6
   83a56:	d909      	bls.n	83a6c <__udivdi3+0x5c>
   83a58:	1936      	adds	r6, r6, r4
   83a5a:	f102 37ff 	add.w	r7, r2, #4294967295
   83a5e:	f080 80fd 	bcs.w	83c5c <__udivdi3+0x24c>
   83a62:	42b3      	cmp	r3, r6
   83a64:	f240 80fa 	bls.w	83c5c <__udivdi3+0x24c>
   83a68:	3a02      	subs	r2, #2
   83a6a:	4426      	add	r6, r4
   83a6c:	1af6      	subs	r6, r6, r3
   83a6e:	fbb6 f3f1 	udiv	r3, r6, r1
   83a72:	fb01 6113 	mls	r1, r1, r3, r6
   83a76:	fb00 f003 	mul.w	r0, r0, r3
   83a7a:	b2ad      	uxth	r5, r5
   83a7c:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
   83a80:	4288      	cmp	r0, r1
   83a82:	d908      	bls.n	83a96 <__udivdi3+0x86>
   83a84:	1909      	adds	r1, r1, r4
   83a86:	f103 36ff 	add.w	r6, r3, #4294967295
   83a8a:	f080 80e9 	bcs.w	83c60 <__udivdi3+0x250>
   83a8e:	4288      	cmp	r0, r1
   83a90:	f240 80e6 	bls.w	83c60 <__udivdi3+0x250>
   83a94:	3b02      	subs	r3, #2
   83a96:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   83a9a:	2300      	movs	r3, #0
   83a9c:	4610      	mov	r0, r2
   83a9e:	4619      	mov	r1, r3
   83aa0:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83aa4:	4770      	bx	lr
   83aa6:	428b      	cmp	r3, r1
   83aa8:	d84c      	bhi.n	83b44 <__udivdi3+0x134>
   83aaa:	fab3 f683 	clz	r6, r3
   83aae:	2e00      	cmp	r6, #0
   83ab0:	d14f      	bne.n	83b52 <__udivdi3+0x142>
   83ab2:	428b      	cmp	r3, r1
   83ab4:	d302      	bcc.n	83abc <__udivdi3+0xac>
   83ab6:	4282      	cmp	r2, r0
   83ab8:	f200 80dd 	bhi.w	83c76 <__udivdi3+0x266>
   83abc:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83ac0:	2300      	movs	r3, #0
   83ac2:	2201      	movs	r2, #1
   83ac4:	4610      	mov	r0, r2
   83ac6:	4619      	mov	r1, r3
   83ac8:	4770      	bx	lr
   83aca:	b912      	cbnz	r2, 83ad2 <__udivdi3+0xc2>
   83acc:	2401      	movs	r4, #1
   83ace:	fbb4 f4f2 	udiv	r4, r4, r2
   83ad2:	fab4 f284 	clz	r2, r4
   83ad6:	2a00      	cmp	r2, #0
   83ad8:	f040 8082 	bne.w	83be0 <__udivdi3+0x1d0>
   83adc:	1b09      	subs	r1, r1, r4
   83ade:	0c26      	lsrs	r6, r4, #16
   83ae0:	b2a7      	uxth	r7, r4
   83ae2:	2301      	movs	r3, #1
   83ae4:	fbb1 f0f6 	udiv	r0, r1, r6
   83ae8:	fb06 1110 	mls	r1, r6, r0, r1
   83aec:	fb07 f200 	mul.w	r2, r7, r0
   83af0:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   83af4:	ea4c 4101 	orr.w	r1, ip, r1, lsl #16
   83af8:	428a      	cmp	r2, r1
   83afa:	d907      	bls.n	83b0c <__udivdi3+0xfc>
   83afc:	1909      	adds	r1, r1, r4
   83afe:	f100 3cff 	add.w	ip, r0, #4294967295
   83b02:	d202      	bcs.n	83b0a <__udivdi3+0xfa>
   83b04:	428a      	cmp	r2, r1
   83b06:	f200 80c8 	bhi.w	83c9a <__udivdi3+0x28a>
   83b0a:	4660      	mov	r0, ip
   83b0c:	1a89      	subs	r1, r1, r2
   83b0e:	fbb1 f2f6 	udiv	r2, r1, r6
   83b12:	fb06 1112 	mls	r1, r6, r2, r1
   83b16:	fb07 f702 	mul.w	r7, r7, r2
   83b1a:	b2ad      	uxth	r5, r5
   83b1c:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
   83b20:	42af      	cmp	r7, r5
   83b22:	d908      	bls.n	83b36 <__udivdi3+0x126>
   83b24:	192c      	adds	r4, r5, r4
   83b26:	f102 31ff 	add.w	r1, r2, #4294967295
   83b2a:	f080 809b 	bcs.w	83c64 <__udivdi3+0x254>
   83b2e:	42a7      	cmp	r7, r4
   83b30:	f240 8098 	bls.w	83c64 <__udivdi3+0x254>
   83b34:	3a02      	subs	r2, #2
   83b36:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
   83b3a:	4610      	mov	r0, r2
   83b3c:	4619      	mov	r1, r3
   83b3e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83b42:	4770      	bx	lr
   83b44:	2300      	movs	r3, #0
   83b46:	461a      	mov	r2, r3
   83b48:	4610      	mov	r0, r2
   83b4a:	4619      	mov	r1, r3
   83b4c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83b50:	4770      	bx	lr
   83b52:	f1c6 0520 	rsb	r5, r6, #32
   83b56:	fa22 f705 	lsr.w	r7, r2, r5
   83b5a:	fa03 f406 	lsl.w	r4, r3, r6
   83b5e:	fa21 f305 	lsr.w	r3, r1, r5
   83b62:	fa01 fb06 	lsl.w	fp, r1, r6
   83b66:	fa20 f505 	lsr.w	r5, r0, r5
   83b6a:	433c      	orrs	r4, r7
   83b6c:	ea4f 4814 	mov.w	r8, r4, lsr #16
   83b70:	fbb3 fcf8 	udiv	ip, r3, r8
   83b74:	fb08 331c 	mls	r3, r8, ip, r3
   83b78:	fa1f f984 	uxth.w	r9, r4
   83b7c:	fb09 fa0c 	mul.w	sl, r9, ip
   83b80:	ea45 0b0b 	orr.w	fp, r5, fp
   83b84:	ea4f 451b 	mov.w	r5, fp, lsr #16
   83b88:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
   83b8c:	459a      	cmp	sl, r3
   83b8e:	fa02 f206 	lsl.w	r2, r2, r6
   83b92:	d904      	bls.n	83b9e <__udivdi3+0x18e>
   83b94:	191b      	adds	r3, r3, r4
   83b96:	f10c 35ff 	add.w	r5, ip, #4294967295
   83b9a:	d36f      	bcc.n	83c7c <__udivdi3+0x26c>
   83b9c:	46ac      	mov	ip, r5
   83b9e:	ebca 0303 	rsb	r3, sl, r3
   83ba2:	fbb3 f5f8 	udiv	r5, r3, r8
   83ba6:	fb08 3315 	mls	r3, r8, r5, r3
   83baa:	fb09 f905 	mul.w	r9, r9, r5
   83bae:	fa1f fb8b 	uxth.w	fp, fp
   83bb2:	ea4b 4703 	orr.w	r7, fp, r3, lsl #16
   83bb6:	45b9      	cmp	r9, r7
   83bb8:	d904      	bls.n	83bc4 <__udivdi3+0x1b4>
   83bba:	193f      	adds	r7, r7, r4
   83bbc:	f105 33ff 	add.w	r3, r5, #4294967295
   83bc0:	d362      	bcc.n	83c88 <__udivdi3+0x278>
   83bc2:	461d      	mov	r5, r3
   83bc4:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
   83bc8:	fbac 2302 	umull	r2, r3, ip, r2
   83bcc:	ebc9 0707 	rsb	r7, r9, r7
   83bd0:	429f      	cmp	r7, r3
   83bd2:	f04f 0500 	mov.w	r5, #0
   83bd6:	d34a      	bcc.n	83c6e <__udivdi3+0x25e>
   83bd8:	d046      	beq.n	83c68 <__udivdi3+0x258>
   83bda:	4662      	mov	r2, ip
   83bdc:	462b      	mov	r3, r5
   83bde:	e75d      	b.n	83a9c <__udivdi3+0x8c>
   83be0:	4094      	lsls	r4, r2
   83be2:	f1c2 0920 	rsb	r9, r2, #32
   83be6:	fa21 fc09 	lsr.w	ip, r1, r9
   83bea:	4091      	lsls	r1, r2
   83bec:	fa20 f909 	lsr.w	r9, r0, r9
   83bf0:	0c26      	lsrs	r6, r4, #16
   83bf2:	fbbc f8f6 	udiv	r8, ip, r6
   83bf6:	fb06 cc18 	mls	ip, r6, r8, ip
   83bfa:	b2a7      	uxth	r7, r4
   83bfc:	fb07 f308 	mul.w	r3, r7, r8
   83c00:	ea49 0901 	orr.w	r9, r9, r1
   83c04:	ea4f 4119 	mov.w	r1, r9, lsr #16
   83c08:	ea41 4c0c 	orr.w	ip, r1, ip, lsl #16
   83c0c:	4563      	cmp	r3, ip
   83c0e:	fa00 f502 	lsl.w	r5, r0, r2
   83c12:	d909      	bls.n	83c28 <__udivdi3+0x218>
   83c14:	eb1c 0c04 	adds.w	ip, ip, r4
   83c18:	f108 32ff 	add.w	r2, r8, #4294967295
   83c1c:	d23b      	bcs.n	83c96 <__udivdi3+0x286>
   83c1e:	4563      	cmp	r3, ip
   83c20:	d939      	bls.n	83c96 <__udivdi3+0x286>
   83c22:	f1a8 0802 	sub.w	r8, r8, #2
   83c26:	44a4      	add	ip, r4
   83c28:	ebc3 0c0c 	rsb	ip, r3, ip
   83c2c:	fbbc f3f6 	udiv	r3, ip, r6
   83c30:	fb06 c113 	mls	r1, r6, r3, ip
   83c34:	fb07 f203 	mul.w	r2, r7, r3
   83c38:	fa1f f989 	uxth.w	r9, r9
   83c3c:	ea49 4101 	orr.w	r1, r9, r1, lsl #16
   83c40:	428a      	cmp	r2, r1
   83c42:	d907      	bls.n	83c54 <__udivdi3+0x244>
   83c44:	1909      	adds	r1, r1, r4
   83c46:	f103 30ff 	add.w	r0, r3, #4294967295
   83c4a:	d222      	bcs.n	83c92 <__udivdi3+0x282>
   83c4c:	428a      	cmp	r2, r1
   83c4e:	d920      	bls.n	83c92 <__udivdi3+0x282>
   83c50:	3b02      	subs	r3, #2
   83c52:	4421      	add	r1, r4
   83c54:	1a89      	subs	r1, r1, r2
   83c56:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   83c5a:	e743      	b.n	83ae4 <__udivdi3+0xd4>
   83c5c:	463a      	mov	r2, r7
   83c5e:	e705      	b.n	83a6c <__udivdi3+0x5c>
   83c60:	4633      	mov	r3, r6
   83c62:	e718      	b.n	83a96 <__udivdi3+0x86>
   83c64:	460a      	mov	r2, r1
   83c66:	e766      	b.n	83b36 <__udivdi3+0x126>
   83c68:	40b0      	lsls	r0, r6
   83c6a:	4290      	cmp	r0, r2
   83c6c:	d2b5      	bcs.n	83bda <__udivdi3+0x1ca>
   83c6e:	f10c 32ff 	add.w	r2, ip, #4294967295
   83c72:	2300      	movs	r3, #0
   83c74:	e712      	b.n	83a9c <__udivdi3+0x8c>
   83c76:	4633      	mov	r3, r6
   83c78:	4632      	mov	r2, r6
   83c7a:	e70f      	b.n	83a9c <__udivdi3+0x8c>
   83c7c:	459a      	cmp	sl, r3
   83c7e:	d98d      	bls.n	83b9c <__udivdi3+0x18c>
   83c80:	f1ac 0c02 	sub.w	ip, ip, #2
   83c84:	4423      	add	r3, r4
   83c86:	e78a      	b.n	83b9e <__udivdi3+0x18e>
   83c88:	45b9      	cmp	r9, r7
   83c8a:	d99a      	bls.n	83bc2 <__udivdi3+0x1b2>
   83c8c:	3d02      	subs	r5, #2
   83c8e:	4427      	add	r7, r4
   83c90:	e798      	b.n	83bc4 <__udivdi3+0x1b4>
   83c92:	4603      	mov	r3, r0
   83c94:	e7de      	b.n	83c54 <__udivdi3+0x244>
   83c96:	4690      	mov	r8, r2
   83c98:	e7c6      	b.n	83c28 <__udivdi3+0x218>
   83c9a:	3802      	subs	r0, #2
   83c9c:	4421      	add	r1, r4
   83c9e:	e735      	b.n	83b0c <__udivdi3+0xfc>
   83ca0:	736e6f43 	.word	0x736e6f43
   83ca4:	20656c6f 	.word	0x20656c6f
   83ca8:	64616572 	.word	0x64616572
   83cac:	00000a79 	.word	0x00000a79
   83cb0:	3d3d3d3d 	.word	0x3d3d3d3d
   83cb4:	3d3d3d3d 	.word	0x3d3d3d3d
   83cb8:	3d3d3d3d 	.word	0x3d3d3d3d
   83cbc:	00000a3d 	.word	0x00000a3d
   83cc0:	6e756f43 	.word	0x6e756f43
   83cc4:	20726574 	.word	0x20726574
   83cc8:	756c6176 	.word	0x756c6176
   83ccc:	25203a65 	.word	0x25203a65
   83cd0:	00000a75 	.word	0x00000a75
   83cd4:	00000043 	.word	0x00000043

00083cd8 <_global_impure_ptr>:
   83cd8:	20070138 33323130 37363534 42413938     8.. 0123456789AB
   83ce8:	46454443 00000000 33323130 37363534     CDEF....01234567
   83cf8:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   83d08:	0000296c                                l)..

00083d0c <zeroes.6721>:
   83d0c:	30303030 30303030 30303030 30303030     0000000000000000

00083d1c <blanks.6720>:
   83d1c:	20202020 20202020 20202020 20202020                     

00083d2c <_init>:
   83d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83d2e:	bf00      	nop
   83d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
   83d32:	bc08      	pop	{r3}
   83d34:	469e      	mov	lr, r3
   83d36:	4770      	bx	lr

00083d38 <__init_array_start>:
   83d38:	00081d35 	.word	0x00081d35

00083d3c <__frame_dummy_init_array_entry>:
   83d3c:	00080119                                ....

00083d40 <_fini>:
   83d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83d42:	bf00      	nop
   83d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
   83d46:	bc08      	pop	{r3}
   83d48:	469e      	mov	lr, r3
   83d4a:	4770      	bx	lr

00083d4c <__fini_array_start>:
   83d4c:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4a20      	ldr	r2, [pc, #128]	; (20070088 <SystemInit+0x88>)
20070006:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070008:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007000c:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	4b1f      	ldr	r3, [pc, #124]	; (2007008c <SystemInit+0x8c>)
20070010:	6a1b      	ldr	r3, [r3, #32]
20070012:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070016:	d107      	bne.n	20070028 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070018:	4a1d      	ldr	r2, [pc, #116]	; (20070090 <SystemInit+0x90>)
2007001a:	4b1c      	ldr	r3, [pc, #112]	; (2007008c <SystemInit+0x8c>)
2007001c:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007001e:	461a      	mov	r2, r3
20070020:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070022:	f013 0f01 	tst.w	r3, #1
20070026:	d0fb      	beq.n	20070020 <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070028:	4a1a      	ldr	r2, [pc, #104]	; (20070094 <SystemInit+0x94>)
2007002a:	4b18      	ldr	r3, [pc, #96]	; (2007008c <SystemInit+0x8c>)
2007002c:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007002e:	461a      	mov	r2, r3
20070030:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070032:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070036:	d0fb      	beq.n	20070030 <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070038:	4b14      	ldr	r3, [pc, #80]	; (2007008c <SystemInit+0x8c>)
2007003a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
2007003c:	f022 0203 	bic.w	r2, r2, #3
20070040:	f042 0201 	orr.w	r2, r2, #1
20070044:	631a      	str	r2, [r3, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070046:	461a      	mov	r2, r3
20070048:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007004a:	f013 0f08 	tst.w	r3, #8
2007004e:	d0fb      	beq.n	20070048 <SystemInit+0x48>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
20070050:	4a11      	ldr	r2, [pc, #68]	; (20070098 <SystemInit+0x98>)
20070052:	4b0e      	ldr	r3, [pc, #56]	; (2007008c <SystemInit+0x8c>)
20070054:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070056:	461a      	mov	r2, r3
20070058:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007005a:	f013 0f02 	tst.w	r3, #2
2007005e:	d0fb      	beq.n	20070058 <SystemInit+0x58>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
20070060:	2211      	movs	r2, #17
20070062:	4b0a      	ldr	r3, [pc, #40]	; (2007008c <SystemInit+0x8c>)
20070064:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070066:	461a      	mov	r2, r3
20070068:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007006a:	f013 0f08 	tst.w	r3, #8
2007006e:	d0fb      	beq.n	20070068 <SystemInit+0x68>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
20070070:	2212      	movs	r2, #18
20070072:	4b06      	ldr	r3, [pc, #24]	; (2007008c <SystemInit+0x8c>)
20070074:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070076:	461a      	mov	r2, r3
20070078:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007007a:	f013 0f08 	tst.w	r3, #8
2007007e:	d0fb      	beq.n	20070078 <SystemInit+0x78>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
20070080:	4a06      	ldr	r2, [pc, #24]	; (2007009c <SystemInit+0x9c>)
20070082:	4b07      	ldr	r3, [pc, #28]	; (200700a0 <SystemInit+0xa0>)
20070084:	601a      	str	r2, [r3, #0]
20070086:	4770      	bx	lr
20070088:	400e0a00 	.word	0x400e0a00
2007008c:	400e0600 	.word	0x400e0600
20070090:	00370809 	.word	0x00370809
20070094:	01370809 	.word	0x01370809
20070098:	200d3f01 	.word	0x200d3f01
2007009c:	0501bd00 	.word	0x0501bd00
200700a0:	20070130 	.word	0x20070130

200700a4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700a4:	4b1b      	ldr	r3, [pc, #108]	; (20070114 <system_init_flash+0x70>)
200700a6:	4298      	cmp	r0, r3
200700a8:	d806      	bhi.n	200700b8 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700aa:	2300      	movs	r3, #0
200700ac:	4a1a      	ldr	r2, [pc, #104]	; (20070118 <system_init_flash+0x74>)
200700ae:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700b0:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700b4:	6013      	str	r3, [r2, #0]
200700b6:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700b8:	4b18      	ldr	r3, [pc, #96]	; (2007011c <system_init_flash+0x78>)
200700ba:	4298      	cmp	r0, r3
200700bc:	d807      	bhi.n	200700ce <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700be:	f44f 7380 	mov.w	r3, #256	; 0x100
200700c2:	4a15      	ldr	r2, [pc, #84]	; (20070118 <system_init_flash+0x74>)
200700c4:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700c6:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ca:	6013      	str	r3, [r2, #0]
200700cc:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700ce:	4b14      	ldr	r3, [pc, #80]	; (20070120 <system_init_flash+0x7c>)
200700d0:	4298      	cmp	r0, r3
200700d2:	d807      	bhi.n	200700e4 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700d4:	f44f 7300 	mov.w	r3, #512	; 0x200
200700d8:	4a0f      	ldr	r2, [pc, #60]	; (20070118 <system_init_flash+0x74>)
200700da:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700e0:	6013      	str	r3, [r2, #0]
200700e2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700e4:	4b0f      	ldr	r3, [pc, #60]	; (20070124 <system_init_flash+0x80>)
200700e6:	4298      	cmp	r0, r3
200700e8:	d807      	bhi.n	200700fa <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700ea:	f44f 7340 	mov.w	r3, #768	; 0x300
200700ee:	4a0a      	ldr	r2, [pc, #40]	; (20070118 <system_init_flash+0x74>)
200700f0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700f2:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700f6:	6013      	str	r3, [r2, #0]
200700f8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700fa:	4b0b      	ldr	r3, [pc, #44]	; (20070128 <system_init_flash+0x84>)
200700fc:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700fe:	bf94      	ite	ls
20070100:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070104:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070108:	4a03      	ldr	r2, [pc, #12]	; (20070118 <system_init_flash+0x74>)
2007010a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
2007010c:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070110:	6013      	str	r3, [r2, #0]
20070112:	4770      	bx	lr
20070114:	0121eabf 	.word	0x0121eabf
20070118:	400e0a00 	.word	0x400e0a00
2007011c:	02faf07f 	.word	0x02faf07f
20070120:	03d08fff 	.word	0x03d08fff
20070124:	04c4b3ff 	.word	0x04c4b3ff
20070128:	055d4a7f 	.word	0x055d4a7f

2007012c <g_interrupt_enabled>:
2007012c:	00000001                                ....

20070130 <SystemCoreClock>:
20070130:	003d0900 00000000                       ..=.....

20070138 <impure_data>:
20070138:	00000000 20070424 2007048c 200704f4     ....$.. ... ... 
	...
2007016c:	00083cd4 00000000 00000000 00000000     .<..............
	...
200701e0:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200701f0:	0005deec 0000000b 00000000 00000000     ................
	...

20070560 <_impure_ptr>:
20070560:	20070138                                8.. 

20070564 <lc_ctype_charset>:
20070564:	49435341 00000049 00000000 00000000     ASCII...........
	...

20070584 <__mb_cur_max>:
20070584:	00000001                                ....

20070588 <__malloc_av_>:
	...
20070590:	20070588 20070588 20070590 20070590     ... ... ... ... 
200705a0:	20070598 20070598 200705a0 200705a0     ... ... ... ... 
200705b0:	200705a8 200705a8 200705b0 200705b0     ... ... ... ... 
200705c0:	200705b8 200705b8 200705c0 200705c0     ... ... ... ... 
200705d0:	200705c8 200705c8 200705d0 200705d0     ... ... ... ... 
200705e0:	200705d8 200705d8 200705e0 200705e0     ... ... ... ... 
200705f0:	200705e8 200705e8 200705f0 200705f0     ... ... ... ... 
20070600:	200705f8 200705f8 20070600 20070600     ... ... ... ... 
20070610:	20070608 20070608 20070610 20070610     ... ... ... ... 
20070620:	20070618 20070618 20070620 20070620     ... ...  ..  .. 
20070630:	20070628 20070628 20070630 20070630     (.. (.. 0.. 0.. 
20070640:	20070638 20070638 20070640 20070640     8.. 8.. @.. @.. 
20070650:	20070648 20070648 20070650 20070650     H.. H.. P.. P.. 
20070660:	20070658 20070658 20070660 20070660     X.. X.. `.. `.. 
20070670:	20070668 20070668 20070670 20070670     h.. h.. p.. p.. 
20070680:	20070678 20070678 20070680 20070680     x.. x.. ... ... 
20070690:	20070688 20070688 20070690 20070690     ... ... ... ... 
200706a0:	20070698 20070698 200706a0 200706a0     ... ... ... ... 
200706b0:	200706a8 200706a8 200706b0 200706b0     ... ... ... ... 
200706c0:	200706b8 200706b8 200706c0 200706c0     ... ... ... ... 
200706d0:	200706c8 200706c8 200706d0 200706d0     ... ... ... ... 
200706e0:	200706d8 200706d8 200706e0 200706e0     ... ... ... ... 
200706f0:	200706e8 200706e8 200706f0 200706f0     ... ... ... ... 
20070700:	200706f8 200706f8 20070700 20070700     ... ... ... ... 
20070710:	20070708 20070708 20070710 20070710     ... ... ... ... 
20070720:	20070718 20070718 20070720 20070720     ... ...  ..  .. 
20070730:	20070728 20070728 20070730 20070730     (.. (.. 0.. 0.. 
20070740:	20070738 20070738 20070740 20070740     8.. 8.. @.. @.. 
20070750:	20070748 20070748 20070750 20070750     H.. H.. P.. P.. 
20070760:	20070758 20070758 20070760 20070760     X.. X.. `.. `.. 
20070770:	20070768 20070768 20070770 20070770     h.. h.. p.. p.. 
20070780:	20070778 20070778 20070780 20070780     x.. x.. ... ... 
20070790:	20070788 20070788 20070790 20070790     ... ... ... ... 
200707a0:	20070798 20070798 200707a0 200707a0     ... ... ... ... 
200707b0:	200707a8 200707a8 200707b0 200707b0     ... ... ... ... 
200707c0:	200707b8 200707b8 200707c0 200707c0     ... ... ... ... 
200707d0:	200707c8 200707c8 200707d0 200707d0     ... ... ... ... 
200707e0:	200707d8 200707d8 200707e0 200707e0     ... ... ... ... 
200707f0:	200707e8 200707e8 200707f0 200707f0     ... ... ... ... 
20070800:	200707f8 200707f8 20070800 20070800     ... ... ... ... 
20070810:	20070808 20070808 20070810 20070810     ... ... ... ... 
20070820:	20070818 20070818 20070820 20070820     ... ...  ..  .. 
20070830:	20070828 20070828 20070830 20070830     (.. (.. 0.. 0.. 
20070840:	20070838 20070838 20070840 20070840     8.. 8.. @.. @.. 
20070850:	20070848 20070848 20070850 20070850     H.. H.. P.. P.. 
20070860:	20070858 20070858 20070860 20070860     X.. X.. `.. `.. 
20070870:	20070868 20070868 20070870 20070870     h.. h.. p.. p.. 
20070880:	20070878 20070878 20070880 20070880     x.. x.. ... ... 
20070890:	20070888 20070888 20070890 20070890     ... ... ... ... 
200708a0:	20070898 20070898 200708a0 200708a0     ... ... ... ... 
200708b0:	200708a8 200708a8 200708b0 200708b0     ... ... ... ... 
200708c0:	200708b8 200708b8 200708c0 200708c0     ... ... ... ... 
200708d0:	200708c8 200708c8 200708d0 200708d0     ... ... ... ... 
200708e0:	200708d8 200708d8 200708e0 200708e0     ... ... ... ... 
200708f0:	200708e8 200708e8 200708f0 200708f0     ... ... ... ... 
20070900:	200708f8 200708f8 20070900 20070900     ... ... ... ... 
20070910:	20070908 20070908 20070910 20070910     ... ... ... ... 
20070920:	20070918 20070918 20070920 20070920     ... ...  ..  .. 
20070930:	20070928 20070928 20070930 20070930     (.. (.. 0.. 0.. 
20070940:	20070938 20070938 20070940 20070940     8.. 8.. @.. @.. 
20070950:	20070948 20070948 20070950 20070950     H.. H.. P.. P.. 
20070960:	20070958 20070958 20070960 20070960     X.. X.. `.. `.. 
20070970:	20070968 20070968 20070970 20070970     h.. h.. p.. p.. 
20070980:	20070978 20070978 20070980 20070980     x.. x.. ... ... 

20070990 <__malloc_trim_threshold>:
20070990:	00020000                                ....

20070994 <__malloc_sbrk_base>:
20070994:	ffffffff                                ....

20070998 <__wctomb>:
20070998:	000834a5                                .4..
