
ProjectAdumbrate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005bdc  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00085bdc  00085bdc  0000dbdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009ec  20070000  00085be4  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000a2e4  200709f0  000865d8  000109f0  2**3
                  ALLOC
  4 .stack        00002004  2007acd4  000908bc  000109f0  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  000109ec  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  00010a15  2**0
                  CONTENTS, READONLY
  7 .debug_info   00014f6e  00000000  00000000  00010a70  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003b6e  00000000  00000000  000259de  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00009163  00000000  00000000  0002954c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000f68  00000000  00000000  000326af  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000e90  00000000  00000000  00033617  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00009e8c  00000000  00000000  000344a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00015553  00000000  00000000  0003e333  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0006bbfe  00000000  00000000  00053886  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002de0  00000000  00000000  000bf484  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	2007ccd8 	.word	0x2007ccd8
   80004:	000823c5 	.word	0x000823c5
   80008:	000823c1 	.word	0x000823c1
   8000c:	000823c1 	.word	0x000823c1
   80010:	000823c1 	.word	0x000823c1
   80014:	000823c1 	.word	0x000823c1
   80018:	000823c1 	.word	0x000823c1
	...
   8002c:	000804b1 	.word	0x000804b1
   80030:	000823c1 	.word	0x000823c1
   80034:	00000000 	.word	0x00000000
   80038:	0008052d 	.word	0x0008052d
   8003c:	00080569 	.word	0x00080569
   80040:	000823c1 	.word	0x000823c1
   80044:	000823c1 	.word	0x000823c1
   80048:	000823c1 	.word	0x000823c1
   8004c:	000823c1 	.word	0x000823c1
   80050:	000823c1 	.word	0x000823c1
   80054:	000823c1 	.word	0x000823c1
   80058:	000823c1 	.word	0x000823c1
   8005c:	000823c1 	.word	0x000823c1
   80060:	000823c1 	.word	0x000823c1
   80064:	000823c1 	.word	0x000823c1
   80068:	00000000 	.word	0x00000000
   8006c:	00082231 	.word	0x00082231
   80070:	00082245 	.word	0x00082245
   80074:	00082259 	.word	0x00082259
   80078:	0008226d 	.word	0x0008226d
	...
   80084:	000819bd 	.word	0x000819bd
   80088:	000823c1 	.word	0x000823c1
   8008c:	000823c1 	.word	0x000823c1
   80090:	000823c1 	.word	0x000823c1
   80094:	000823c1 	.word	0x000823c1
   80098:	000823c1 	.word	0x000823c1
   8009c:	000823c1 	.word	0x000823c1
   800a0:	000823c1 	.word	0x000823c1
   800a4:	00000000 	.word	0x00000000
   800a8:	000823c1 	.word	0x000823c1
   800ac:	00081e99 	.word	0x00081e99
   800b0:	00081e65 	.word	0x00081e65
   800b4:	000823c1 	.word	0x000823c1
   800b8:	000823c1 	.word	0x000823c1
   800bc:	000823c1 	.word	0x000823c1
   800c0:	000823c1 	.word	0x000823c1
   800c4:	000823c1 	.word	0x000823c1
   800c8:	000823c1 	.word	0x000823c1
   800cc:	000823c1 	.word	0x000823c1
   800d0:	000823c1 	.word	0x000823c1
   800d4:	000823c1 	.word	0x000823c1
   800d8:	000823c1 	.word	0x000823c1
   800dc:	000823c1 	.word	0x000823c1
   800e0:	000823c1 	.word	0x000823c1
   800e4:	000823c1 	.word	0x000823c1
   800e8:	000823c1 	.word	0x000823c1
   800ec:	000823c1 	.word	0x000823c1
   800f0:	000823c1 	.word	0x000823c1

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	200709f0 	.word	0x200709f0
   80110:	00000000 	.word	0x00000000
   80114:	00085be4 	.word	0x00085be4

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b06      	ldr	r3, [pc, #24]	; (80134 <frame_dummy+0x1c>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4806      	ldr	r0, [pc, #24]	; (80138 <frame_dummy+0x20>)
   80120:	4906      	ldr	r1, [pc, #24]	; (8013c <frame_dummy+0x24>)
   80122:	f3af 8000 	nop.w
   80126:	4806      	ldr	r0, [pc, #24]	; (80140 <frame_dummy+0x28>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b113      	cbz	r3, 80132 <frame_dummy+0x1a>
   8012c:	4b05      	ldr	r3, [pc, #20]	; (80144 <frame_dummy+0x2c>)
   8012e:	b103      	cbz	r3, 80132 <frame_dummy+0x1a>
   80130:	4798      	blx	r3
   80132:	bd08      	pop	{r3, pc}
   80134:	00000000 	.word	0x00000000
   80138:	00085be4 	.word	0x00085be4
   8013c:	200709f4 	.word	0x200709f4
   80140:	00085be4 	.word	0x00085be4
   80144:	00000000 	.word	0x00000000

00080148 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   80148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8014c:	460c      	mov	r4, r1
   8014e:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
   80150:	b960      	cbnz	r0, 8016c <_read+0x24>
		return -1;
	}

	for (; len > 0; --len) {
   80152:	2a00      	cmp	r2, #0
   80154:	dd0e      	ble.n	80174 <_read+0x2c>
   80156:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   80158:	4e09      	ldr	r6, [pc, #36]	; (80180 <_read+0x38>)
   8015a:	4d0a      	ldr	r5, [pc, #40]	; (80184 <_read+0x3c>)
   8015c:	6830      	ldr	r0, [r6, #0]
   8015e:	4621      	mov	r1, r4
   80160:	682b      	ldr	r3, [r5, #0]
   80162:	4798      	blx	r3
		ptr++;
   80164:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   80166:	42bc      	cmp	r4, r7
   80168:	d1f8      	bne.n	8015c <_read+0x14>
   8016a:	e006      	b.n	8017a <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
   8016c:	f04f 30ff 	mov.w	r0, #4294967295
   80170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len > 0; --len) {
   80174:	2000      	movs	r0, #0
   80176:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
   8017a:	4640      	mov	r0, r8
	}
	return nChars;
}
   8017c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80180:	2007aca4 	.word	0x2007aca4
   80184:	2007ac9c 	.word	0x2007ac9c

00080188 <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   80188:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
   8018c:	6a08      	ldr	r0, [r1, #32]
}
   8018e:	4770      	bx	lr

00080190 <twi_set_speed>:
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
   80190:	4b0f      	ldr	r3, [pc, #60]	; (801d0 <twi_set_speed+0x40>)
   80192:	4299      	cmp	r1, r3
   80194:	d819      	bhi.n	801ca <twi_set_speed+0x3a>
		return FAIL;
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   80196:	0049      	lsls	r1, r1, #1
   80198:	fbb2 f2f1 	udiv	r2, r2, r1
   8019c:	3a04      	subs	r2, #4

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   8019e:	2aff      	cmp	r2, #255	; 0xff
   801a0:	d907      	bls.n	801b2 <twi_set_speed+0x22>
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
   801a2:	2300      	movs	r3, #0
	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
		/* Increase clock divider */
		ckdiv++;
   801a4:	3301      	adds	r3, #1
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
   801a6:	0852      	lsrs	r2, r2, #1
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   801a8:	2aff      	cmp	r2, #255	; 0xff
   801aa:	d903      	bls.n	801b4 <twi_set_speed+0x24>
   801ac:	2b07      	cmp	r3, #7
   801ae:	d1f9      	bne.n	801a4 <twi_set_speed+0x14>
   801b0:	e000      	b.n	801b4 <twi_set_speed+0x24>
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
   801b2:	2300      	movs	r3, #0
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   801b4:	0211      	lsls	r1, r2, #8
   801b6:	b289      	uxth	r1, r1
			TWI_CWGR_CKDIV(ckdiv);
   801b8:	041b      	lsls	r3, r3, #16
   801ba:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   801be:	430b      	orrs	r3, r1
   801c0:	b2d2      	uxtb	r2, r2
   801c2:	431a      	orrs	r2, r3
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
   801c4:	6102      	str	r2, [r0, #16]
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
			TWI_CWGR_CKDIV(ckdiv);

	return PASS;
   801c6:	2000      	movs	r0, #0
   801c8:	4770      	bx	lr
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
		return FAIL;
   801ca:	2001      	movs	r0, #1
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
			TWI_CWGR_CKDIV(ckdiv);

	return PASS;
}
   801cc:	4770      	bx	lr
   801ce:	bf00      	nop
   801d0:	00061a80 	.word	0x00061a80

000801d4 <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
   801d4:	b538      	push	{r3, r4, r5, lr}
   801d6:	4604      	mov	r4, r0
   801d8:	460d      	mov	r5, r1
	uint32_t status = TWI_SUCCESS;

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
   801da:	f04f 33ff 	mov.w	r3, #4294967295
   801de:	6283      	str	r3, [r0, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
   801e0:	6a03      	ldr	r3, [r0, #32]
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
   801e2:	2380      	movs	r3, #128	; 0x80
   801e4:	6003      	str	r3, [r0, #0]
	p_twi->TWI_RHR;
   801e6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
   801e8:	2308      	movs	r3, #8
   801ea:	6003      	str	r3, [r0, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
   801ec:	2320      	movs	r3, #32
   801ee:	6003      	str	r3, [r0, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
   801f0:	2304      	movs	r3, #4
   801f2:	6003      	str	r3, [r0, #0]
	twi_reset(p_twi);

	twi_enable_master_mode(p_twi);

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
   801f4:	6849      	ldr	r1, [r1, #4]
   801f6:	682a      	ldr	r2, [r5, #0]
   801f8:	4b05      	ldr	r3, [pc, #20]	; (80210 <twi_master_init+0x3c>)
   801fa:	4798      	blx	r3
   801fc:	2801      	cmp	r0, #1
   801fe:	bf14      	ite	ne
   80200:	2000      	movne	r0, #0
   80202:	2001      	moveq	r0, #1
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
	}

	if (p_opt->smbus == 1) {
   80204:	7a6b      	ldrb	r3, [r5, #9]
   80206:	2b01      	cmp	r3, #1
		p_twi->TWI_CR = TWI_CR_QUICK;
   80208:	bf04      	itt	eq
   8020a:	2340      	moveq	r3, #64	; 0x40
   8020c:	6023      	streq	r3, [r4, #0]
	}

	return status;
}
   8020e:	bd38      	pop	{r3, r4, r5, pc}
   80210:	00080191 	.word	0x00080191

00080214 <twi_master_read>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twi_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
   80214:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
   80218:	4604      	mov	r4, r0
	uint32_t status;
	uint32_t cnt = p_packet->length;
   8021a:	68cb      	ldr	r3, [r1, #12]
	uint8_t *buffer = p_packet->buffer;
   8021c:	688e      	ldr	r6, [r1, #8]
	uint8_t stop_sent = 0;
	uint32_t timeout = TWI_TIMEOUT;;
	
	/* Check argument */
	if (cnt == 0) {
   8021e:	2b00      	cmp	r3, #0
   80220:	d049      	beq.n	802b6 <twi_master_read+0xa2>
		return TWI_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
   80222:	2200      	movs	r2, #0
   80224:	6042      	str	r2, [r0, #4]
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
   80226:	6848      	ldr	r0, [r1, #4]
   80228:	0200      	lsls	r0, r0, #8
   8022a:	f400 7040 	and.w	r0, r0, #768	; 0x300
		return TWI_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
   8022e:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
   80232:	7c0d      	ldrb	r5, [r1, #16]
   80234:	042d      	lsls	r5, r5, #16
   80236:	f405 05fe 	and.w	r5, r5, #8323072	; 0x7f0000
   8023a:	4328      	orrs	r0, r5
   8023c:	6060      	str	r0, [r4, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
   8023e:	60e2      	str	r2, [r4, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   80240:	684a      	ldr	r2, [r1, #4]
 */
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
   80242:	b15a      	cbz	r2, 8025c <twi_master_read+0x48>
		return 0;

	val = addr[0];
   80244:	7808      	ldrb	r0, [r1, #0]
	if (len > 1) {
   80246:	2a01      	cmp	r2, #1
		val <<= 8;
		val |= addr[1];
   80248:	bfc4      	itt	gt
   8024a:	784d      	ldrbgt	r5, [r1, #1]
   8024c:	ea45 2000 	orrgt.w	r0, r5, r0, lsl #8
	}
	if (len > 2) {
   80250:	2a02      	cmp	r2, #2
   80252:	dd04      	ble.n	8025e <twi_master_read+0x4a>
		val <<= 8;
		val |= addr[2];
   80254:	788a      	ldrb	r2, [r1, #2]
   80256:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
   8025a:	e000      	b.n	8025e <twi_master_read+0x4a>
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
		return 0;
   8025c:	2000      	movs	r0, #0
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   8025e:	60e0      	str	r0, [r4, #12]

	/* Send a START condition */
	if (cnt == 1) {
   80260:	2b01      	cmp	r3, #1
   80262:	d104      	bne.n	8026e <twi_master_read+0x5a>
		p_twi->TWI_CR = TWI_CR_START | TWI_CR_STOP;
   80264:	2203      	movs	r2, #3
   80266:	6022      	str	r2, [r4, #0]
		stop_sent = 1;
   80268:	f04f 0c01 	mov.w	ip, #1
   8026c:	e02b      	b.n	802c6 <twi_master_read+0xb2>
	} else {
		p_twi->TWI_CR = TWI_CR_START;
   8026e:	2201      	movs	r2, #1
   80270:	6022      	str	r2, [r4, #0]
		stop_sent = 0;
   80272:	f04f 0c00 	mov.w	ip, #0
   80276:	e026      	b.n	802c6 <twi_master_read+0xb2>
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
   80278:	6a21      	ldr	r1, [r4, #32]
		if (status & TWI_SR_NACK) {
   8027a:	f411 7f80 	tst.w	r1, #256	; 0x100
   8027e:	d11c      	bne.n	802ba <twi_master_read+0xa6>
			return TWI_RECEIVE_NACK;
		}

		if (!timeout--) {
   80280:	1e55      	subs	r5, r2, #1
   80282:	b1e2      	cbz	r2, 802be <twi_master_read+0xaa>
   80284:	462a      	mov	r2, r5
			return TWI_ERROR_TIMEOUT;
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
   80286:	2b01      	cmp	r3, #1
   80288:	d105      	bne.n	80296 <twi_master_read+0x82>
   8028a:	f1bc 0f00 	cmp.w	ip, #0
   8028e:	d102      	bne.n	80296 <twi_master_read+0x82>
			p_twi->TWI_CR = TWI_CR_STOP;
   80290:	f8c4 9000 	str.w	r9, [r4]
			stop_sent = 1;
   80294:	46c4      	mov	ip, r8
		}

		if (!(status & TWI_SR_RXRDY)) {
   80296:	f011 0f02 	tst.w	r1, #2
   8029a:	d004      	beq.n	802a6 <twi_master_read+0x92>
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;
   8029c:	6b22      	ldr	r2, [r4, #48]	; 0x30
   8029e:	7032      	strb	r2, [r6, #0]

		cnt--;
   802a0:	3b01      	subs	r3, #1
		}

		if (!(status & TWI_SR_RXRDY)) {
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;
   802a2:	3601      	adds	r6, #1

		cnt--;
		timeout = TWI_TIMEOUT;
   802a4:	463a      	mov	r2, r7
	} else {
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
   802a6:	2b00      	cmp	r3, #0
   802a8:	d1e6      	bne.n	80278 <twi_master_read+0x64>

		cnt--;
		timeout = TWI_TIMEOUT;
	}

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
   802aa:	6a23      	ldr	r3, [r4, #32]
   802ac:	f013 0f01 	tst.w	r3, #1
   802b0:	d0fb      	beq.n	802aa <twi_master_read+0x96>
	}

	p_twi->TWI_SR;
   802b2:	6a23      	ldr	r3, [r4, #32]

	return TWI_SUCCESS;
   802b4:	e014      	b.n	802e0 <twi_master_read+0xcc>
	uint8_t stop_sent = 0;
	uint32_t timeout = TWI_TIMEOUT;;
	
	/* Check argument */
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
   802b6:	2001      	movs	r0, #1
   802b8:	e012      	b.n	802e0 <twi_master_read+0xcc>
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
   802ba:	2005      	movs	r0, #5
   802bc:	e010      	b.n	802e0 <twi_master_read+0xcc>
		}

		if (!timeout--) {
			return TWI_ERROR_TIMEOUT;
   802be:	2009      	movs	r0, #9
   802c0:	e00e      	b.n	802e0 <twi_master_read+0xcc>
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
   802c2:	2005      	movs	r0, #5
   802c4:	e00c      	b.n	802e0 <twi_master_read+0xcc>
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
   802c6:	6a21      	ldr	r1, [r4, #32]
		if (status & TWI_SR_NACK) {
   802c8:	f411 7080 	ands.w	r0, r1, #256	; 0x100
   802cc:	d1f9      	bne.n	802c2 <twi_master_read+0xae>
			return TWI_RECEIVE_NACK;
		}

		if (!timeout--) {
   802ce:	f643 2297 	movw	r2, #14999	; 0x3a97
			return TWI_ERROR_TIMEOUT;
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
			p_twi->TWI_CR = TWI_CR_STOP;
   802d2:	f04f 0902 	mov.w	r9, #2
			stop_sent = 1;
   802d6:	f04f 0801 	mov.w	r8, #1
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;

		cnt--;
		timeout = TWI_TIMEOUT;
   802da:	f643 2798 	movw	r7, #15000	; 0x3a98
   802de:	e7d2      	b.n	80286 <twi_master_read+0x72>
	}

	p_twi->TWI_SR;

	return TWI_SUCCESS;
}
   802e0:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
   802e4:	4770      	bx	lr
   802e6:	bf00      	nop

000802e8 <twi_master_write>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
   802e8:	b470      	push	{r4, r5, r6}
   802ea:	4603      	mov	r3, r0
	uint32_t status;
	uint32_t cnt = p_packet->length;
   802ec:	68ca      	ldr	r2, [r1, #12]
	uint8_t *buffer = p_packet->buffer;
   802ee:	6888      	ldr	r0, [r1, #8]

	/* Check argument */
	if (cnt == 0) {
   802f0:	2a00      	cmp	r2, #0
   802f2:	d03f      	beq.n	80374 <twi_master_write+0x8c>
		return TWI_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
   802f4:	2400      	movs	r4, #0
   802f6:	605c      	str	r4, [r3, #4]
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
   802f8:	7c0e      	ldrb	r6, [r1, #16]
   802fa:	0436      	lsls	r6, r6, #16
   802fc:	f406 06fe 	and.w	r6, r6, #8323072	; 0x7f0000
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
   80300:	684d      	ldr	r5, [r1, #4]
   80302:	022d      	lsls	r5, r5, #8
   80304:	f405 7540 	and.w	r5, r5, #768	; 0x300
		return TWI_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
   80308:	4335      	orrs	r5, r6
   8030a:	605d      	str	r5, [r3, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
   8030c:	60dc      	str	r4, [r3, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   8030e:	684c      	ldr	r4, [r1, #4]
 */
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
   80310:	b15c      	cbz	r4, 8032a <twi_master_write+0x42>
		return 0;

	val = addr[0];
   80312:	780d      	ldrb	r5, [r1, #0]
	if (len > 1) {
   80314:	2c01      	cmp	r4, #1
		val <<= 8;
		val |= addr[1];
   80316:	bfc4      	itt	gt
   80318:	784e      	ldrbgt	r6, [r1, #1]
   8031a:	ea46 2505 	orrgt.w	r5, r6, r5, lsl #8
	}
	if (len > 2) {
   8031e:	2c02      	cmp	r4, #2
   80320:	dd04      	ble.n	8032c <twi_master_write+0x44>
		val <<= 8;
		val |= addr[2];
   80322:	7889      	ldrb	r1, [r1, #2]
   80324:	ea41 2505 	orr.w	r5, r1, r5, lsl #8
   80328:	e000      	b.n	8032c <twi_master_write+0x44>
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
		return 0;
   8032a:	2500      	movs	r5, #0
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   8032c:	60dd      	str	r5, [r3, #12]
   8032e:	e00b      	b.n	80348 <twi_master_write+0x60>

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
   80330:	6a19      	ldr	r1, [r3, #32]
		if (status & TWI_SR_NACK) {
   80332:	f411 7f80 	tst.w	r1, #256	; 0x100
   80336:	d11f      	bne.n	80378 <twi_master_write+0x90>
			return TWI_RECEIVE_NACK;
		}

		if (!(status & TWI_SR_TXRDY)) {
   80338:	f011 0f04 	tst.w	r1, #4
   8033c:	d0f8      	beq.n	80330 <twi_master_write+0x48>
			continue;
		}
		p_twi->TWI_THR = *buffer++;
   8033e:	f810 1b01 	ldrb.w	r1, [r0], #1
   80342:	6359      	str	r1, [r3, #52]	; 0x34
	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
   80344:	3a01      	subs	r2, #1
   80346:	d007      	beq.n	80358 <twi_master_write+0x70>
		status = p_twi->TWI_SR;
   80348:	6a19      	ldr	r1, [r3, #32]
		if (status & TWI_SR_NACK) {
   8034a:	f411 7f80 	tst.w	r1, #256	; 0x100
   8034e:	d115      	bne.n	8037c <twi_master_write+0x94>
			return TWI_RECEIVE_NACK;
		}

		if (!(status & TWI_SR_TXRDY)) {
   80350:	f011 0f04 	tst.w	r1, #4
   80354:	d1f3      	bne.n	8033e <twi_master_write+0x56>
   80356:	e7eb      	b.n	80330 <twi_master_write+0x48>

		cnt--;
	}

	while (1) {
		status = p_twi->TWI_SR;
   80358:	6a1a      	ldr	r2, [r3, #32]
		if (status & TWI_SR_NACK) {
   8035a:	f412 7080 	ands.w	r0, r2, #256	; 0x100
   8035e:	d10f      	bne.n	80380 <twi_master_write+0x98>
			return TWI_RECEIVE_NACK;
		}

		if (status & TWI_SR_TXRDY) {
   80360:	f012 0f04 	tst.w	r2, #4
   80364:	d0f8      	beq.n	80358 <twi_master_write+0x70>
			break;
		}
	}

	p_twi->TWI_CR = TWI_CR_STOP;
   80366:	2202      	movs	r2, #2
   80368:	601a      	str	r2, [r3, #0]

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
   8036a:	6a1a      	ldr	r2, [r3, #32]
   8036c:	f012 0f01 	tst.w	r2, #1
   80370:	d0fb      	beq.n	8036a <twi_master_write+0x82>
   80372:	e006      	b.n	80382 <twi_master_write+0x9a>
	uint32_t cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;

	/* Check argument */
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
   80374:	2001      	movs	r0, #1
   80376:	e004      	b.n	80382 <twi_master_write+0x9a>

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
   80378:	2005      	movs	r0, #5
   8037a:	e002      	b.n	80382 <twi_master_write+0x9a>
   8037c:	2005      	movs	r0, #5
   8037e:	e000      	b.n	80382 <twi_master_write+0x9a>
	}

	while (1) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
   80380:	2005      	movs	r0, #5

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
	}

	return TWI_SUCCESS;
}
   80382:	bc70      	pop	{r4, r5, r6}
   80384:	4770      	bx	lr
   80386:	bf00      	nop

00080388 <twi_probe>:
 * \param uc_slave_addr Address of the remote chip to search for.
 *
 * \return TWI_SUCCESS if a chip was found, error code otherwise.
 */
uint32_t twi_probe(Twi *p_twi, uint8_t uc_slave_addr)
{
   80388:	b500      	push	{lr}
   8038a:	b087      	sub	sp, #28
	twi_packet_t packet;
	uint8_t data = 0;
   8038c:	2300      	movs	r3, #0
   8038e:	aa06      	add	r2, sp, #24
   80390:	f802 3d15 	strb.w	r3, [r2, #-21]!

	/* Data to send */
	packet.buffer = &data;
   80394:	9203      	str	r2, [sp, #12]
	/* Data length */
	packet.length = 1;
   80396:	2201      	movs	r2, #1
   80398:	9204      	str	r2, [sp, #16]
	/* Slave chip address */
	packet.chip = (uint32_t) uc_slave_addr;
   8039a:	f88d 1014 	strb.w	r1, [sp, #20]
	/* Internal chip address */
	packet.addr[0] = 0;
   8039e:	f88d 3004 	strb.w	r3, [sp, #4]
	/* Address length */
	packet.addr_length = 0;
   803a2:	9302      	str	r3, [sp, #8]

	/* Perform a master write access */
	return (twi_master_write(p_twi, &packet));
   803a4:	a901      	add	r1, sp, #4
   803a6:	4b02      	ldr	r3, [pc, #8]	; (803b0 <twi_probe+0x28>)
   803a8:	4798      	blx	r3
}
   803aa:	b007      	add	sp, #28
   803ac:	f85d fb04 	ldr.w	pc, [sp], #4
   803b0:	000802e9 	.word	0x000802e9

000803b4 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   803b4:	6943      	ldr	r3, [r0, #20]
   803b6:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   803ba:	bf1d      	ittte	ne
   803bc:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   803c0:	61c1      	strne	r1, [r0, #28]
	return 0;
   803c2:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
   803c4:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
   803c6:	4770      	bx	lr

000803c8 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   803c8:	6943      	ldr	r3, [r0, #20]
   803ca:	f013 0f01 	tst.w	r3, #1
   803ce:	d005      	beq.n	803dc <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   803d0:	6983      	ldr	r3, [r0, #24]
   803d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
   803d6:	600b      	str	r3, [r1, #0]

	return 0;
   803d8:	2000      	movs	r0, #0
   803da:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   803dc:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   803de:	4770      	bx	lr

000803e0 <vListInitialise>:
void vListInitialise( xList *pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
   803e0:	f100 0308 	add.w	r3, r0, #8
   803e4:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   803e6:	f04f 32ff 	mov.w	r2, #4294967295
   803ea:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
   803ec:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
   803ee:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
   803f0:	2300      	movs	r3, #0
   803f2:	6003      	str	r3, [r0, #0]
   803f4:	4770      	bx	lr
   803f6:	bf00      	nop

000803f8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   803f8:	2300      	movs	r3, #0
   803fa:	6103      	str	r3, [r0, #16]
   803fc:	4770      	bx	lr
   803fe:	bf00      	nop

00080400 <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
   80400:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
   80402:	685a      	ldr	r2, [r3, #4]
   80404:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
   80406:	6842      	ldr	r2, [r0, #4]
   80408:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   8040a:	685a      	ldr	r2, [r3, #4]
   8040c:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
   8040e:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
   80410:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   80412:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   80414:	6803      	ldr	r3, [r0, #0]
   80416:	3301      	adds	r3, #1
   80418:	6003      	str	r3, [r0, #0]
   8041a:	4770      	bx	lr

0008041c <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
   8041c:	b410      	push	{r4}
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
   8041e:	680c      	ldr	r4, [r1, #0]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   80420:	f1b4 3fff 	cmp.w	r4, #4294967295
   80424:	d101      	bne.n	8042a <vListInsert+0xe>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   80426:	6903      	ldr	r3, [r0, #16]
   80428:	e00a      	b.n	80440 <vListInsert+0x24>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
   8042a:	f100 0308 	add.w	r3, r0, #8
   8042e:	68c2      	ldr	r2, [r0, #12]
   80430:	6812      	ldr	r2, [r2, #0]
   80432:	4294      	cmp	r4, r2
   80434:	d304      	bcc.n	80440 <vListInsert+0x24>
   80436:	685b      	ldr	r3, [r3, #4]
   80438:	685a      	ldr	r2, [r3, #4]
   8043a:	6812      	ldr	r2, [r2, #0]
   8043c:	4294      	cmp	r4, r2
   8043e:	d2fa      	bcs.n	80436 <vListInsert+0x1a>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   80440:	685a      	ldr	r2, [r3, #4]
   80442:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   80444:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
   80446:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
   80448:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   8044a:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   8044c:	6803      	ldr	r3, [r0, #0]
   8044e:	3301      	adds	r3, #1
   80450:	6003      	str	r3, [r0, #0]
}
   80452:	f85d 4b04 	ldr.w	r4, [sp], #4
   80456:	4770      	bx	lr

00080458 <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   80458:	6843      	ldr	r3, [r0, #4]
   8045a:	6882      	ldr	r2, [r0, #8]
   8045c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   8045e:	6883      	ldr	r3, [r0, #8]
   80460:	6842      	ldr	r2, [r0, #4]
   80462:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
   80464:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   80466:	685a      	ldr	r2, [r3, #4]
   80468:	4282      	cmp	r2, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   8046a:	bf04      	itt	eq
   8046c:	6882      	ldreq	r2, [r0, #8]
   8046e:	605a      	streq	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
   80470:	2200      	movs	r2, #0
   80472:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
   80474:	681a      	ldr	r2, [r3, #0]
   80476:	3a01      	subs	r2, #1
   80478:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   8047a:	6818      	ldr	r0, [r3, #0]
}
   8047c:	4770      	bx	lr
   8047e:	bf00      	nop

00080480 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
   80480:	4803      	ldr	r0, [pc, #12]	; (80490 <prvPortStartFirstTask+0x10>)
   80482:	6800      	ldr	r0, [r0, #0]
   80484:	6800      	ldr	r0, [r0, #0]
   80486:	f380 8808 	msr	MSP, r0
   8048a:	b662      	cpsie	i
   8048c:	df00      	svc	0
   8048e:	bf00      	nop
   80490:	e000ed08 	.word	0xe000ed08

00080494 <pxPortInitialiseStack>:
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   80494:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   80498:	f840 3c04 	str.w	r3, [r0, #-4]
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
   8049c:	f840 1c08 	str.w	r1, [r0, #-8]
	pxTopOfStack--;
	*pxTopOfStack = 0;	/* LR */
   804a0:	2300      	movs	r3, #0
   804a2:	f840 3c0c 	str.w	r3, [r0, #-12]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
   804a6:	f840 2c20 	str.w	r2, [r0, #-32]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
   804aa:	3840      	subs	r0, #64	; 0x40
   804ac:	4770      	bx	lr
   804ae:	bf00      	nop

000804b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

__attribute__ (( naked )) void SVC_Handler( void )
{
	__asm volatile (
   804b0:	4b06      	ldr	r3, [pc, #24]	; (804cc <pxCurrentTCBConst2>)
   804b2:	6819      	ldr	r1, [r3, #0]
   804b4:	6808      	ldr	r0, [r1, #0]
   804b6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   804ba:	f380 8809 	msr	PSP, r0
   804be:	f04f 0000 	mov.w	r0, #0
   804c2:	f380 8811 	msr	BASEPRI, r0
   804c6:	f04e 0e0d 	orr.w	lr, lr, #13
   804ca:	4770      	bx	lr

000804cc <pxCurrentTCBConst2>:
   804cc:	2007aad4 	.word	0x2007aad4

000804d0 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   804d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   804d4:	4b01      	ldr	r3, [pc, #4]	; (804dc <vPortYieldFromISR+0xc>)
   804d6:	601a      	str	r2, [r3, #0]
   804d8:	4770      	bx	lr
   804da:	bf00      	nop
   804dc:	e000ed04 	.word	0xe000ed04

000804e0 <ulPortSetInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
   804e0:	f3ef 8011 	mrs	r0, BASEPRI
   804e4:	f04f 01a0 	mov.w	r1, #160	; 0xa0
   804e8:	f381 8811 	msr	BASEPRI, r1
   804ec:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
}
   804ee:	2000      	movs	r0, #0

000804f0 <vPortEnterCritical>:
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   804f0:	b508      	push	{r3, lr}
	portDISABLE_INTERRUPTS();
   804f2:	4b03      	ldr	r3, [pc, #12]	; (80500 <vPortEnterCritical+0x10>)
   804f4:	4798      	blx	r3
	uxCriticalNesting++;
   804f6:	4b03      	ldr	r3, [pc, #12]	; (80504 <vPortEnterCritical+0x14>)
   804f8:	681a      	ldr	r2, [r3, #0]
   804fa:	3201      	adds	r2, #1
   804fc:	601a      	str	r2, [r3, #0]
   804fe:	bd08      	pop	{r3, pc}
   80500:	000804e1 	.word	0x000804e1
   80504:	2007012c 	.word	0x2007012c

00080508 <vPortClearInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
   80508:	f380 8811 	msr	BASEPRI, r0
   8050c:	4770      	bx	lr
   8050e:	bf00      	nop

00080510 <vPortExitCritical>:
	uxCriticalNesting++;
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   80510:	b508      	push	{r3, lr}
	uxCriticalNesting--;
   80512:	4a04      	ldr	r2, [pc, #16]	; (80524 <vPortExitCritical+0x14>)
   80514:	6813      	ldr	r3, [r2, #0]
   80516:	3b01      	subs	r3, #1
   80518:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
   8051a:	b913      	cbnz	r3, 80522 <vPortExitCritical+0x12>
	{
		portENABLE_INTERRUPTS();
   8051c:	2000      	movs	r0, #0
   8051e:	4b02      	ldr	r3, [pc, #8]	; (80528 <vPortExitCritical+0x18>)
   80520:	4798      	blx	r3
   80522:	bd08      	pop	{r3, pc}
   80524:	2007012c 	.word	0x2007012c
   80528:	00080509 	.word	0x00080509

0008052c <PendSV_Handler>:

__attribute__(( naked )) void PendSV_Handler( void )
{
	/* This is a naked function. */

	__asm volatile
   8052c:	f3ef 8009 	mrs	r0, PSP
   80530:	4b0c      	ldr	r3, [pc, #48]	; (80564 <pxCurrentTCBConst>)
   80532:	681a      	ldr	r2, [r3, #0]
   80534:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80538:	6010      	str	r0, [r2, #0]
   8053a:	e92d 4008 	stmdb	sp!, {r3, lr}
   8053e:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   80542:	f380 8811 	msr	BASEPRI, r0
   80546:	f000 fecf 	bl	812e8 <vTaskSwitchContext>
   8054a:	f04f 0000 	mov.w	r0, #0
   8054e:	f380 8811 	msr	BASEPRI, r0
   80552:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   80556:	6819      	ldr	r1, [r3, #0]
   80558:	6808      	ldr	r0, [r1, #0]
   8055a:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8055e:	f380 8809 	msr	PSP, r0
   80562:	4770      	bx	lr

00080564 <pxCurrentTCBConst>:
   80564:	2007aad4 	.word	0x2007aad4

00080568 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void SysTick_Handler( void )
{
   80568:	b508      	push	{r3, lr}
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   8056a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   8056e:	4b05      	ldr	r3, [pc, #20]	; (80584 <SysTick_Handler+0x1c>)
   80570:	601a      	str	r2, [r3, #0]
	to generate the tick interrupt. */
	#if configUSE_TICKLESS_IDLE == 1
		portNVIC_SYSTICK_LOAD_REG = ulTimerReloadValueForOneTick;
	#endif

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
   80572:	4b05      	ldr	r3, [pc, #20]	; (80588 <SysTick_Handler+0x20>)
   80574:	4798      	blx	r3
	{
		vTaskIncrementTick();
   80576:	4b05      	ldr	r3, [pc, #20]	; (8058c <SysTick_Handler+0x24>)
   80578:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
   8057a:	2000      	movs	r0, #0
   8057c:	4b04      	ldr	r3, [pc, #16]	; (80590 <SysTick_Handler+0x28>)
   8057e:	4798      	blx	r3
   80580:	bd08      	pop	{r3, pc}
   80582:	bf00      	nop
   80584:	e000ed04 	.word	0xe000ed04
   80588:	000804e1 	.word	0x000804e1
   8058c:	00080ff5 	.word	0x00080ff5
   80590:	00080509 	.word	0x00080509

00080594 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = 45UL / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;;
   80594:	4a03      	ldr	r2, [pc, #12]	; (805a4 <vPortSetupTimerInterrupt+0x10>)
   80596:	4b04      	ldr	r3, [pc, #16]	; (805a8 <vPortSetupTimerInterrupt+0x14>)
   80598:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
   8059a:	2207      	movs	r2, #7
   8059c:	3b04      	subs	r3, #4
   8059e:	601a      	str	r2, [r3, #0]
   805a0:	4770      	bx	lr
   805a2:	bf00      	nop
   805a4:	0001481f 	.word	0x0001481f
   805a8:	e000e014 	.word	0xe000e014

000805ac <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
   805ac:	b510      	push	{r4, lr}
	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
	See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
   805ae:	4b09      	ldr	r3, [pc, #36]	; (805d4 <xPortStartScheduler+0x28>)
   805b0:	681a      	ldr	r2, [r3, #0]
   805b2:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
   805b6:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
   805b8:	681a      	ldr	r2, [r3, #0]
   805ba:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
   805be:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
   805c0:	4b05      	ldr	r3, [pc, #20]	; (805d8 <xPortStartScheduler+0x2c>)
   805c2:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   805c4:	2400      	movs	r4, #0
   805c6:	4b05      	ldr	r3, [pc, #20]	; (805dc <xPortStartScheduler+0x30>)
   805c8:	601c      	str	r4, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
   805ca:	4b05      	ldr	r3, [pc, #20]	; (805e0 <xPortStartScheduler+0x34>)
   805cc:	4798      	blx	r3

	/* Should not get here! */
	return 0;
}
   805ce:	4620      	mov	r0, r4
   805d0:	bd10      	pop	{r4, pc}
   805d2:	bf00      	nop
   805d4:	e000ed20 	.word	0xe000ed20
   805d8:	00080595 	.word	0x00080595
   805dc:	2007012c 	.word	0x2007012c
   805e0:	00080481 	.word	0x00080481

000805e4 <prvInsertBlockIntoFreeList>:
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
   805e4:	b430      	push	{r4, r5}
xBlockLink *pxIterator;
unsigned char *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
   805e6:	4a13      	ldr	r2, [pc, #76]	; (80634 <prvInsertBlockIntoFreeList+0x50>)
   805e8:	6813      	ldr	r3, [r2, #0]
   805ea:	4283      	cmp	r3, r0
   805ec:	d201      	bcs.n	805f2 <prvInsertBlockIntoFreeList+0xe>
   805ee:	461a      	mov	r2, r3
   805f0:	e7fa      	b.n	805e8 <prvInsertBlockIntoFreeList+0x4>
   805f2:	4611      	mov	r1, r2
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */	
	puc = ( unsigned char * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
   805f4:	6854      	ldr	r4, [r2, #4]
   805f6:	1915      	adds	r5, r2, r4
   805f8:	4285      	cmp	r5, r0
   805fa:	d103      	bne.n	80604 <prvInsertBlockIntoFreeList+0x20>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
   805fc:	6868      	ldr	r0, [r5, #4]
   805fe:	4404      	add	r4, r0
   80600:	6054      	str	r4, [r2, #4]
   80602:	4610      	mov	r0, r2
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( unsigned char * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
   80604:	6842      	ldr	r2, [r0, #4]
   80606:	1884      	adds	r4, r0, r2
   80608:	42a3      	cmp	r3, r4
   8060a:	d10c      	bne.n	80626 <prvInsertBlockIntoFreeList+0x42>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
   8060c:	4c0a      	ldr	r4, [pc, #40]	; (80638 <prvInsertBlockIntoFreeList+0x54>)
   8060e:	6824      	ldr	r4, [r4, #0]
   80610:	429c      	cmp	r4, r3
   80612:	d006      	beq.n	80622 <prvInsertBlockIntoFreeList+0x3e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
   80614:	685b      	ldr	r3, [r3, #4]
   80616:	441a      	add	r2, r3
   80618:	6042      	str	r2, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
   8061a:	680b      	ldr	r3, [r1, #0]
   8061c:	681b      	ldr	r3, [r3, #0]
   8061e:	6003      	str	r3, [r0, #0]
   80620:	e002      	b.n	80628 <prvInsertBlockIntoFreeList+0x44>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
   80622:	6003      	str	r3, [r0, #0]
   80624:	e000      	b.n	80628 <prvInsertBlockIntoFreeList+0x44>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;		
   80626:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
   80628:	4281      	cmp	r1, r0
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
   8062a:	bf18      	it	ne
   8062c:	6008      	strne	r0, [r1, #0]
	}
}
   8062e:	bc30      	pop	{r4, r5}
   80630:	4770      	bx	lr
   80632:	bf00      	nop
   80634:	2007aa14 	.word	0x2007aa14
   80638:	2007aa10 	.word	0x2007aa10

0008063c <pvPortMalloc>:
/* STATIC FUNCTIONS ARE DEFINED AS MACROS TO MINIMIZE THE FUNCTION CALL DEPTH. */

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   8063c:	b538      	push	{r3, r4, r5, lr}
   8063e:	4604      	mov	r4, r0
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
   80640:	4b28      	ldr	r3, [pc, #160]	; (806e4 <pvPortMalloc+0xa8>)
   80642:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
   80644:	4b28      	ldr	r3, [pc, #160]	; (806e8 <pvPortMalloc+0xac>)
   80646:	681b      	ldr	r3, [r3, #0]
   80648:	b99b      	cbnz	r3, 80672 <pvPortMalloc+0x36>
	/* Ensure the start of the heap is aligned. */
	configASSERT( ( ( ( unsigned long ) xHeap.ucHeap ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;
   8064a:	4a28      	ldr	r2, [pc, #160]	; (806ec <pvPortMalloc+0xb0>)
   8064c:	4b28      	ldr	r3, [pc, #160]	; (806f0 <pvPortMalloc+0xb4>)
   8064e:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
   80650:	2100      	movs	r1, #0
   80652:	6051      	str	r1, [r2, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	pucHeapEnd = xHeap.ucHeap + xTotalHeapSize;
	pucHeapEnd -= heapSTRUCT_SIZE;
	pxEnd = ( void * ) pucHeapEnd;
   80654:	f649 72f0 	movw	r2, #40944	; 0x9ff0
   80658:	1898      	adds	r0, r3, r2
   8065a:	4d23      	ldr	r5, [pc, #140]	; (806e8 <pvPortMalloc+0xac>)
   8065c:	6028      	str	r0, [r5, #0]
	configASSERT( ( ( ( unsigned long ) pxEnd ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );
	pxEnd->xBlockSize = 0;
   8065e:	f649 75f4 	movw	r5, #40948	; 0x9ff4
   80662:	5159      	str	r1, [r3, r5]
	pxEnd->pxNextFreeBlock = NULL;
   80664:	5099      	str	r1, [r3, r2]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) xHeap.ucHeap;
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
   80666:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
   80668:	6018      	str	r0, [r3, #0]

	/* The heap now contains pxEnd. */
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
   8066a:	4b22      	ldr	r3, [pc, #136]	; (806f4 <pvPortMalloc+0xb8>)
   8066c:	681a      	ldr	r2, [r3, #0]
   8066e:	3a10      	subs	r2, #16
   80670:	601a      	str	r2, [r3, #0]
			prvHeapInit();
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
   80672:	2c00      	cmp	r4, #0
   80674:	d02d      	beq.n	806d2 <pvPortMalloc+0x96>
		{
			xWantedSize += heapSTRUCT_SIZE;
   80676:	f104 0210 	add.w	r2, r4, #16

			/* Ensure that blocks are always aligned to the required number of 
			bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   8067a:	f012 0f07 	tst.w	r2, #7
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   8067e:	bf1c      	itt	ne
   80680:	f022 0207 	bicne.w	r2, r2, #7
   80684:	3208      	addne	r2, #8
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < xTotalHeapSize ) )
   80686:	1e51      	subs	r1, r2, #1
   80688:	f649 73fe 	movw	r3, #40958	; 0x9ffe
   8068c:	4299      	cmp	r1, r3
   8068e:	d822      	bhi.n	806d6 <pvPortMalloc+0x9a>
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
   80690:	4916      	ldr	r1, [pc, #88]	; (806ec <pvPortMalloc+0xb0>)
   80692:	680c      	ldr	r4, [r1, #0]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   80694:	6863      	ldr	r3, [r4, #4]
   80696:	429a      	cmp	r2, r3
   80698:	d904      	bls.n	806a4 <pvPortMalloc+0x68>
   8069a:	6823      	ldr	r3, [r4, #0]
   8069c:	b113      	cbz	r3, 806a4 <pvPortMalloc+0x68>
   8069e:	4621      	mov	r1, r4
			{
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
   806a0:	461c      	mov	r4, r3
   806a2:	e7f7      	b.n	80694 <pvPortMalloc+0x58>
			}

			/* If the end marker was reached then a block of adequate size was
			not found. */
			if( pxBlock != pxEnd )
   806a4:	4b10      	ldr	r3, [pc, #64]	; (806e8 <pvPortMalloc+0xac>)
   806a6:	681b      	ldr	r3, [r3, #0]
   806a8:	429c      	cmp	r4, r3
   806aa:	d016      	beq.n	806da <pvPortMalloc+0x9e>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
   806ac:	680d      	ldr	r5, [r1, #0]
   806ae:	3510      	adds	r5, #16

				/* This block is being returned for use so must be taken out of
				the	list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
   806b0:	6823      	ldr	r3, [r4, #0]
   806b2:	600b      	str	r3, [r1, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
   806b4:	6863      	ldr	r3, [r4, #4]
   806b6:	1a9b      	subs	r3, r3, r2
   806b8:	2b20      	cmp	r3, #32
   806ba:	d904      	bls.n	806c6 <pvPortMalloc+0x8a>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
   806bc:	18a0      	adds	r0, r4, r2

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
   806be:	6043      	str	r3, [r0, #4]
					pxBlock->xBlockSize = xWantedSize;
   806c0:	6062      	str	r2, [r4, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
   806c2:	4b0d      	ldr	r3, [pc, #52]	; (806f8 <pvPortMalloc+0xbc>)
   806c4:	4798      	blx	r3
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
   806c6:	4b0b      	ldr	r3, [pc, #44]	; (806f4 <pvPortMalloc+0xb8>)
   806c8:	681a      	ldr	r2, [r3, #0]
   806ca:	6861      	ldr	r1, [r4, #4]
   806cc:	1a52      	subs	r2, r2, r1
   806ce:	601a      	str	r2, [r3, #0]
   806d0:	e004      	b.n	806dc <pvPortMalloc+0xa0>
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
   806d2:	2500      	movs	r5, #0
   806d4:	e002      	b.n	806dc <pvPortMalloc+0xa0>
   806d6:	2500      	movs	r5, #0
   806d8:	e000      	b.n	806dc <pvPortMalloc+0xa0>
   806da:	2500      	movs	r5, #0

				xFreeBytesRemaining -= pxBlock->xBlockSize;
			}
		}
	}
	xTaskResumeAll();
   806dc:	4b07      	ldr	r3, [pc, #28]	; (806fc <pvPortMalloc+0xc0>)
   806de:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
}
   806e0:	4628      	mov	r0, r5
   806e2:	bd38      	pop	{r3, r4, r5, pc}
   806e4:	00080fc5 	.word	0x00080fc5
   806e8:	2007aa10 	.word	0x2007aa10
   806ec:	2007aa14 	.word	0x2007aa14
   806f0:	20070a10 	.word	0x20070a10
   806f4:	20070130 	.word	0x20070130
   806f8:	000805e5 	.word	0x000805e5
   806fc:	00081115 	.word	0x00081115

00080700 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   80700:	b510      	push	{r4, lr}
unsigned char *puc = ( unsigned char * ) pv;
xBlockLink *pxLink;

	if( pv != NULL )
   80702:	4604      	mov	r4, r0
   80704:	b168      	cbz	r0, 80722 <vPortFree+0x22>
		puc -= heapSTRUCT_SIZE;

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		vTaskSuspendAll();
   80706:	4b07      	ldr	r3, [pc, #28]	; (80724 <vPortFree+0x24>)
   80708:	4798      	blx	r3
		{
			/* Add this block to the list of free blocks. */
			xFreeBytesRemaining += pxLink->xBlockSize;
   8070a:	4b07      	ldr	r3, [pc, #28]	; (80728 <vPortFree+0x28>)
   8070c:	6819      	ldr	r1, [r3, #0]
   8070e:	f854 2c0c 	ldr.w	r2, [r4, #-12]
   80712:	440a      	add	r2, r1
   80714:	601a      	str	r2, [r3, #0]
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );			
   80716:	f1a4 0010 	sub.w	r0, r4, #16
   8071a:	4b04      	ldr	r3, [pc, #16]	; (8072c <vPortFree+0x2c>)
   8071c:	4798      	blx	r3
		}
		xTaskResumeAll();
   8071e:	4b04      	ldr	r3, [pc, #16]	; (80730 <vPortFree+0x30>)
   80720:	4798      	blx	r3
   80722:	bd10      	pop	{r4, pc}
   80724:	00080fc5 	.word	0x00080fc5
   80728:	20070130 	.word	0x20070130
   8072c:	000805e5 	.word	0x000805e5
   80730:	00081115 	.word	0x00081115

00080734 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
   80734:	b510      	push	{r4, lr}
   80736:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
   80738:	6c03      	ldr	r3, [r0, #64]	; 0x40
   8073a:	b93b      	cbnz	r3, 8074c <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   8073c:	6803      	ldr	r3, [r0, #0]
   8073e:	bb1b      	cbnz	r3, 80788 <prvCopyDataToQueue+0x54>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   80740:	6840      	ldr	r0, [r0, #4]
   80742:	4b13      	ldr	r3, [pc, #76]	; (80790 <prvCopyDataToQueue+0x5c>)
   80744:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
   80746:	2300      	movs	r3, #0
   80748:	6063      	str	r3, [r4, #4]
   8074a:	e01d      	b.n	80788 <prvCopyDataToQueue+0x54>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
   8074c:	b96a      	cbnz	r2, 8076a <prvCopyDataToQueue+0x36>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   8074e:	6880      	ldr	r0, [r0, #8]
   80750:	461a      	mov	r2, r3
   80752:	4b10      	ldr	r3, [pc, #64]	; (80794 <prvCopyDataToQueue+0x60>)
   80754:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   80756:	68a2      	ldr	r2, [r4, #8]
   80758:	6c23      	ldr	r3, [r4, #64]	; 0x40
   8075a:	4413      	add	r3, r2
   8075c:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
   8075e:	6862      	ldr	r2, [r4, #4]
   80760:	4293      	cmp	r3, r2
   80762:	d311      	bcc.n	80788 <prvCopyDataToQueue+0x54>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   80764:	6823      	ldr	r3, [r4, #0]
   80766:	60a3      	str	r3, [r4, #8]
   80768:	e00e      	b.n	80788 <prvCopyDataToQueue+0x54>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   8076a:	68c0      	ldr	r0, [r0, #12]
   8076c:	461a      	mov	r2, r3
   8076e:	4b09      	ldr	r3, [pc, #36]	; (80794 <prvCopyDataToQueue+0x60>)
   80770:	4798      	blx	r3
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
   80772:	6c22      	ldr	r2, [r4, #64]	; 0x40
   80774:	4252      	negs	r2, r2
   80776:	68e3      	ldr	r3, [r4, #12]
   80778:	4413      	add	r3, r2
   8077a:	60e3      	str	r3, [r4, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
   8077c:	6821      	ldr	r1, [r4, #0]
   8077e:	428b      	cmp	r3, r1
   80780:	d202      	bcs.n	80788 <prvCopyDataToQueue+0x54>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   80782:	6863      	ldr	r3, [r4, #4]
   80784:	441a      	add	r2, r3
   80786:	60e2      	str	r2, [r4, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
   80788:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   8078a:	3301      	adds	r3, #1
   8078c:	63a3      	str	r3, [r4, #56]	; 0x38
   8078e:	bd10      	pop	{r4, pc}
   80790:	00081601 	.word	0x00081601
   80794:	00082a41 	.word	0x00082a41

00080798 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
   80798:	b538      	push	{r3, r4, r5, lr}
   8079a:	4603      	mov	r3, r0
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
   8079c:	6805      	ldr	r5, [r0, #0]
   8079e:	b15d      	cbz	r5, 807b8 <prvCopyDataFromQueue+0x20>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
   807a0:	6c02      	ldr	r2, [r0, #64]	; 0x40
   807a2:	68c4      	ldr	r4, [r0, #12]
   807a4:	4414      	add	r4, r2
   807a6:	60c4      	str	r4, [r0, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
   807a8:	6840      	ldr	r0, [r0, #4]
   807aa:	4284      	cmp	r4, r0
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
   807ac:	bf28      	it	cs
   807ae:	60dd      	strcs	r5, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
   807b0:	4608      	mov	r0, r1
   807b2:	68d9      	ldr	r1, [r3, #12]
   807b4:	4b01      	ldr	r3, [pc, #4]	; (807bc <prvCopyDataFromQueue+0x24>)
   807b6:	4798      	blx	r3
   807b8:	bd38      	pop	{r3, r4, r5, pc}
   807ba:	bf00      	nop
   807bc:	00082a41 	.word	0x00082a41

000807c0 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
   807c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   807c2:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   807c4:	4b1d      	ldr	r3, [pc, #116]	; (8083c <prvUnlockQueue+0x7c>)
   807c6:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   807c8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   807ca:	2b00      	cmp	r3, #0
   807cc:	dd12      	ble.n	807f4 <prvUnlockQueue+0x34>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   807ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
   807d0:	b183      	cbz	r3, 807f4 <prvUnlockQueue+0x34>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   807d2:	f104 0624 	add.w	r6, r4, #36	; 0x24
   807d6:	4d1a      	ldr	r5, [pc, #104]	; (80840 <prvUnlockQueue+0x80>)
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   807d8:	4f1a      	ldr	r7, [pc, #104]	; (80844 <prvUnlockQueue+0x84>)
   807da:	e001      	b.n	807e0 <prvUnlockQueue+0x20>
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   807dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   807de:	b14b      	cbz	r3, 807f4 <prvUnlockQueue+0x34>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   807e0:	4630      	mov	r0, r6
   807e2:	47a8      	blx	r5
   807e4:	b100      	cbz	r0, 807e8 <prvUnlockQueue+0x28>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   807e6:	47b8      	blx	r7
				}

				--( pxQueue->xTxLock );
   807e8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   807ea:	3b01      	subs	r3, #1
   807ec:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   807ee:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   807f0:	2b00      	cmp	r3, #0
   807f2:	dcf3      	bgt.n	807dc <prvUnlockQueue+0x1c>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
   807f4:	f04f 33ff 	mov.w	r3, #4294967295
   807f8:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
   807fa:	4b13      	ldr	r3, [pc, #76]	; (80848 <prvUnlockQueue+0x88>)
   807fc:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   807fe:	4b0f      	ldr	r3, [pc, #60]	; (8083c <prvUnlockQueue+0x7c>)
   80800:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   80802:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80804:	2b00      	cmp	r3, #0
   80806:	dd12      	ble.n	8082e <prvUnlockQueue+0x6e>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   80808:	6923      	ldr	r3, [r4, #16]
   8080a:	b183      	cbz	r3, 8082e <prvUnlockQueue+0x6e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   8080c:	f104 0610 	add.w	r6, r4, #16
   80810:	4d0b      	ldr	r5, [pc, #44]	; (80840 <prvUnlockQueue+0x80>)
				{
					vTaskMissedYield();
   80812:	4f0c      	ldr	r7, [pc, #48]	; (80844 <prvUnlockQueue+0x84>)
   80814:	e001      	b.n	8081a <prvUnlockQueue+0x5a>
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   80816:	6923      	ldr	r3, [r4, #16]
   80818:	b14b      	cbz	r3, 8082e <prvUnlockQueue+0x6e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   8081a:	4630      	mov	r0, r6
   8081c:	47a8      	blx	r5
   8081e:	b100      	cbz	r0, 80822 <prvUnlockQueue+0x62>
				{
					vTaskMissedYield();
   80820:	47b8      	blx	r7
				}

				--( pxQueue->xRxLock );
   80822:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80824:	3b01      	subs	r3, #1
   80826:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   80828:	6c63      	ldr	r3, [r4, #68]	; 0x44
   8082a:	2b00      	cmp	r3, #0
   8082c:	dcf3      	bgt.n	80816 <prvUnlockQueue+0x56>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
   8082e:	f04f 33ff 	mov.w	r3, #4294967295
   80832:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
   80834:	4b04      	ldr	r3, [pc, #16]	; (80848 <prvUnlockQueue+0x88>)
   80836:	4798      	blx	r3
   80838:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8083a:	bf00      	nop
   8083c:	000804f1 	.word	0x000804f1
   80840:	0008141d 	.word	0x0008141d
   80844:	0008154d 	.word	0x0008154d
   80848:	00080511 	.word	0x00080511

0008084c <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
   8084c:	b538      	push	{r3, r4, r5, lr}
   8084e:	460d      	mov	r5, r1
	configASSERT( pxQueue );
   80850:	4604      	mov	r4, r0
   80852:	b918      	cbnz	r0, 8085c <xQueueGenericReset+0x10>
   80854:	4b16      	ldr	r3, [pc, #88]	; (808b0 <xQueueGenericReset+0x64>)
   80856:	4798      	blx	r3
   80858:	bf00      	nop
   8085a:	e7fd      	b.n	80858 <xQueueGenericReset+0xc>

	taskENTER_CRITICAL();
   8085c:	4b15      	ldr	r3, [pc, #84]	; (808b4 <xQueueGenericReset+0x68>)
   8085e:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   80860:	6823      	ldr	r3, [r4, #0]
   80862:	6c22      	ldr	r2, [r4, #64]	; 0x40
   80864:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   80866:	fb00 f002 	mul.w	r0, r0, r2
   8086a:	1819      	adds	r1, r3, r0
   8086c:	6061      	str	r1, [r4, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
   8086e:	2100      	movs	r1, #0
   80870:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   80872:	60a3      	str	r3, [r4, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
   80874:	1a82      	subs	r2, r0, r2
   80876:	4413      	add	r3, r2
   80878:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
   8087a:	f04f 33ff 	mov.w	r3, #4294967295
   8087e:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
   80880:	64a3      	str	r3, [r4, #72]	; 0x48

		if( xNewQueue == pdFALSE )
   80882:	b955      	cbnz	r5, 8089a <xQueueGenericReset+0x4e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to	write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   80884:	6923      	ldr	r3, [r4, #16]
   80886:	b17b      	cbz	r3, 808a8 <xQueueGenericReset+0x5c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   80888:	f104 0010 	add.w	r0, r4, #16
   8088c:	4b0a      	ldr	r3, [pc, #40]	; (808b8 <xQueueGenericReset+0x6c>)
   8088e:	4798      	blx	r3
   80890:	2801      	cmp	r0, #1
   80892:	d109      	bne.n	808a8 <xQueueGenericReset+0x5c>
				{
					portYIELD_WITHIN_API();
   80894:	4b09      	ldr	r3, [pc, #36]	; (808bc <xQueueGenericReset+0x70>)
   80896:	4798      	blx	r3
   80898:	e006      	b.n	808a8 <xQueueGenericReset+0x5c>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   8089a:	f104 0010 	add.w	r0, r4, #16
   8089e:	4d08      	ldr	r5, [pc, #32]	; (808c0 <xQueueGenericReset+0x74>)
   808a0:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   808a2:	f104 0024 	add.w	r0, r4, #36	; 0x24
   808a6:	47a8      	blx	r5
		}
	}
	taskEXIT_CRITICAL();
   808a8:	4b06      	ldr	r3, [pc, #24]	; (808c4 <xQueueGenericReset+0x78>)
   808aa:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
   808ac:	2001      	movs	r0, #1
   808ae:	bd38      	pop	{r3, r4, r5, pc}
   808b0:	000804e1 	.word	0x000804e1
   808b4:	000804f1 	.word	0x000804f1
   808b8:	0008141d 	.word	0x0008141d
   808bc:	000804d1 	.word	0x000804d1
   808c0:	000803e1 	.word	0x000803e1
   808c4:	00080511 	.word	0x00080511

000808c8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
   808c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   808ca:	460d      	mov	r5, r1
   808cc:	4617      	mov	r7, r2
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
   808ce:	4606      	mov	r6, r0
   808d0:	b188      	cbz	r0, 808f6 <xQueueGenericCreate+0x2e>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
   808d2:	2050      	movs	r0, #80	; 0x50
   808d4:	4b0e      	ldr	r3, [pc, #56]	; (80910 <xQueueGenericCreate+0x48>)
   808d6:	4798      	blx	r3
		if( pxNewQueue != NULL )
   808d8:	4604      	mov	r4, r0
   808da:	b160      	cbz	r0, 808f6 <xQueueGenericCreate+0x2e>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
   808dc:	fb05 f006 	mul.w	r0, r5, r6

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
   808e0:	3001      	adds	r0, #1
   808e2:	4b0b      	ldr	r3, [pc, #44]	; (80910 <xQueueGenericCreate+0x48>)
   808e4:	4798      	blx	r3
   808e6:	6020      	str	r0, [r4, #0]
			if( pxNewQueue->pcHead != NULL )
   808e8:	b940      	cbnz	r0, 808fc <xQueueGenericCreate+0x34>
				xReturn = pxNewQueue;
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
   808ea:	4620      	mov	r0, r4
   808ec:	4b09      	ldr	r3, [pc, #36]	; (80914 <xQueueGenericCreate+0x4c>)
   808ee:	4798      	blx	r3
   808f0:	e001      	b.n	808f6 <xQueueGenericCreate+0x2e>
			}
		}
	}

	configASSERT( xReturn );
   808f2:	bf00      	nop
   808f4:	e7fd      	b.n	808f2 <xQueueGenericCreate+0x2a>
   808f6:	4b08      	ldr	r3, [pc, #32]	; (80918 <xQueueGenericCreate+0x50>)
   808f8:	4798      	blx	r3
   808fa:	e7fa      	b.n	808f2 <xQueueGenericCreate+0x2a>
			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
			if( pxNewQueue->pcHead != NULL )
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
   808fc:	63e6      	str	r6, [r4, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
   808fe:	6425      	str	r5, [r4, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
   80900:	4620      	mov	r0, r4
   80902:	2101      	movs	r1, #1
   80904:	4b05      	ldr	r3, [pc, #20]	; (8091c <xQueueGenericCreate+0x54>)
   80906:	4798      	blx	r3
				#if ( configUSE_TRACE_FACILITY == 1 )
				{
					pxNewQueue->ucQueueType = ucQueueType;
   80908:	f884 704d 	strb.w	r7, [r4, #77]	; 0x4d
	}

	configASSERT( xReturn );

	return xReturn;
}
   8090c:	4620      	mov	r0, r4
   8090e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80910:	0008063d 	.word	0x0008063d
   80914:	00080701 	.word	0x00080701
   80918:	000804e1 	.word	0x000804e1
   8091c:	0008084d 	.word	0x0008084d

00080920 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
   80920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80924:	b085      	sub	sp, #20
   80926:	468a      	mov	sl, r1
   80928:	9201      	str	r2, [sp, #4]
   8092a:	469b      	mov	fp, r3
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;

	configASSERT( pxQueue );
   8092c:	4604      	mov	r4, r0
   8092e:	b918      	cbnz	r0, 80938 <xQueueGenericSend+0x18>
   80930:	4b36      	ldr	r3, [pc, #216]	; (80a0c <xQueueGenericSend+0xec>)
   80932:	4798      	blx	r3
   80934:	bf00      	nop
   80936:	e7fd      	b.n	80934 <xQueueGenericSend+0x14>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   80938:	b909      	cbnz	r1, 8093e <xQueueGenericSend+0x1e>
   8093a:	6c03      	ldr	r3, [r0, #64]	; 0x40
   8093c:	b91b      	cbnz	r3, 80946 <xQueueGenericSend+0x26>

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
   8093e:	2700      	movs	r7, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   80940:	4e33      	ldr	r6, [pc, #204]	; (80a10 <xQueueGenericSend+0xf0>)
					vTaskSetTimeOutState( &xTimeOut );
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
   80942:	4d34      	ldr	r5, [pc, #208]	; (80a14 <xQueueGenericSend+0xf4>)
   80944:	e003      	b.n	8094e <xQueueGenericSend+0x2e>
{
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;

	configASSERT( pxQueue );
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   80946:	4b31      	ldr	r3, [pc, #196]	; (80a0c <xQueueGenericSend+0xec>)
   80948:	4798      	blx	r3
   8094a:	bf00      	nop
   8094c:	e7fd      	b.n	8094a <xQueueGenericSend+0x2a>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   8094e:	47b0      	blx	r6
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   80950:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   80952:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   80954:	429a      	cmp	r2, r3
   80956:	d212      	bcs.n	8097e <xQueueGenericSend+0x5e>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   80958:	4620      	mov	r0, r4
   8095a:	4651      	mov	r1, sl
   8095c:	465a      	mov	r2, fp
   8095e:	4b2e      	ldr	r3, [pc, #184]	; (80a18 <xQueueGenericSend+0xf8>)
   80960:	4798      	blx	r3

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80962:	6a63      	ldr	r3, [r4, #36]	; 0x24
   80964:	b13b      	cbz	r3, 80976 <xQueueGenericSend+0x56>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
   80966:	f104 0024 	add.w	r0, r4, #36	; 0x24
   8096a:	4b2c      	ldr	r3, [pc, #176]	; (80a1c <xQueueGenericSend+0xfc>)
   8096c:	4798      	blx	r3
   8096e:	2801      	cmp	r0, #1
   80970:	d101      	bne.n	80976 <xQueueGenericSend+0x56>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
   80972:	4b2b      	ldr	r3, [pc, #172]	; (80a20 <xQueueGenericSend+0x100>)
   80974:	4798      	blx	r3
					}
				}

				taskEXIT_CRITICAL();
   80976:	4b27      	ldr	r3, [pc, #156]	; (80a14 <xQueueGenericSend+0xf4>)
   80978:	4798      	blx	r3

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
   8097a:	2001      	movs	r0, #1
   8097c:	e043      	b.n	80a06 <xQueueGenericSend+0xe6>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   8097e:	9b01      	ldr	r3, [sp, #4]
   80980:	b91b      	cbnz	r3, 8098a <xQueueGenericSend+0x6a>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   80982:	4b24      	ldr	r3, [pc, #144]	; (80a14 <xQueueGenericSend+0xf4>)
   80984:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
   80986:	2000      	movs	r0, #0
   80988:	e03d      	b.n	80a06 <xQueueGenericSend+0xe6>
				}
				else if( xEntryTimeSet == pdFALSE )
   8098a:	b91f      	cbnz	r7, 80994 <xQueueGenericSend+0x74>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   8098c:	a802      	add	r0, sp, #8
   8098e:	4b25      	ldr	r3, [pc, #148]	; (80a24 <xQueueGenericSend+0x104>)
   80990:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   80992:	2701      	movs	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
   80994:	47a8      	blx	r5

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   80996:	4b24      	ldr	r3, [pc, #144]	; (80a28 <xQueueGenericSend+0x108>)
   80998:	4798      	blx	r3
		prvLockQueue( pxQueue );
   8099a:	47b0      	blx	r6
   8099c:	6c63      	ldr	r3, [r4, #68]	; 0x44
   8099e:	f1b3 3fff 	cmp.w	r3, #4294967295
   809a2:	bf04      	itt	eq
   809a4:	2300      	moveq	r3, #0
   809a6:	6463      	streq	r3, [r4, #68]	; 0x44
   809a8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   809aa:	f1b3 3fff 	cmp.w	r3, #4294967295
   809ae:	bf04      	itt	eq
   809b0:	2300      	moveq	r3, #0
   809b2:	64a3      	streq	r3, [r4, #72]	; 0x48
   809b4:	47a8      	blx	r5

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   809b6:	a802      	add	r0, sp, #8
   809b8:	a901      	add	r1, sp, #4
   809ba:	4b1c      	ldr	r3, [pc, #112]	; (80a2c <xQueueGenericSend+0x10c>)
   809bc:	4798      	blx	r3
   809be:	b9e0      	cbnz	r0, 809fa <xQueueGenericSend+0xda>

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   809c0:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
   809c2:	f8d4 9038 	ldr.w	r9, [r4, #56]	; 0x38
   809c6:	f8d4 803c 	ldr.w	r8, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
   809ca:	47a8      	blx	r5
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   809cc:	45c1      	cmp	r9, r8
   809ce:	d10e      	bne.n	809ee <xQueueGenericSend+0xce>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   809d0:	f104 0010 	add.w	r0, r4, #16
   809d4:	9901      	ldr	r1, [sp, #4]
   809d6:	4b16      	ldr	r3, [pc, #88]	; (80a30 <xQueueGenericSend+0x110>)
   809d8:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   809da:	4620      	mov	r0, r4
   809dc:	4b15      	ldr	r3, [pc, #84]	; (80a34 <xQueueGenericSend+0x114>)
   809de:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   809e0:	4b15      	ldr	r3, [pc, #84]	; (80a38 <xQueueGenericSend+0x118>)
   809e2:	4798      	blx	r3
   809e4:	2800      	cmp	r0, #0
   809e6:	d1b2      	bne.n	8094e <xQueueGenericSend+0x2e>
				{
					portYIELD_WITHIN_API();
   809e8:	4b0d      	ldr	r3, [pc, #52]	; (80a20 <xQueueGenericSend+0x100>)
   809ea:	4798      	blx	r3
   809ec:	e7af      	b.n	8094e <xQueueGenericSend+0x2e>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   809ee:	4620      	mov	r0, r4
   809f0:	4b10      	ldr	r3, [pc, #64]	; (80a34 <xQueueGenericSend+0x114>)
   809f2:	4798      	blx	r3
				( void ) xTaskResumeAll();
   809f4:	4b10      	ldr	r3, [pc, #64]	; (80a38 <xQueueGenericSend+0x118>)
   809f6:	4798      	blx	r3
   809f8:	e7a9      	b.n	8094e <xQueueGenericSend+0x2e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   809fa:	4620      	mov	r0, r4
   809fc:	4b0d      	ldr	r3, [pc, #52]	; (80a34 <xQueueGenericSend+0x114>)
   809fe:	4798      	blx	r3
			( void ) xTaskResumeAll();
   80a00:	4b0d      	ldr	r3, [pc, #52]	; (80a38 <xQueueGenericSend+0x118>)
   80a02:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
   80a04:	2000      	movs	r0, #0
		}
	}
}
   80a06:	b005      	add	sp, #20
   80a08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80a0c:	000804e1 	.word	0x000804e1
   80a10:	000804f1 	.word	0x000804f1
   80a14:	00080511 	.word	0x00080511
   80a18:	00080735 	.word	0x00080735
   80a1c:	0008141d 	.word	0x0008141d
   80a20:	000804d1 	.word	0x000804d1
   80a24:	000814a1 	.word	0x000814a1
   80a28:	00080fc5 	.word	0x00080fc5
   80a2c:	000814c9 	.word	0x000814c9
   80a30:	00081379 	.word	0x00081379
   80a34:	000807c1 	.word	0x000807c1
   80a38:	00081115 	.word	0x00081115

00080a3c <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
   80a3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80a40:	460e      	mov	r6, r1
   80a42:	4615      	mov	r5, r2
   80a44:	4698      	mov	r8, r3
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	configASSERT( pxQueue );
   80a46:	4604      	mov	r4, r0
   80a48:	b918      	cbnz	r0, 80a52 <xQueueGenericSendFromISR+0x16>
   80a4a:	4b1c      	ldr	r3, [pc, #112]	; (80abc <xQueueGenericSendFromISR+0x80>)
   80a4c:	4798      	blx	r3
   80a4e:	bf00      	nop
   80a50:	e7fd      	b.n	80a4e <xQueueGenericSendFromISR+0x12>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   80a52:	b929      	cbnz	r1, 80a60 <xQueueGenericSendFromISR+0x24>
   80a54:	6c03      	ldr	r3, [r0, #64]	; 0x40
   80a56:	b11b      	cbz	r3, 80a60 <xQueueGenericSendFromISR+0x24>
   80a58:	4b18      	ldr	r3, [pc, #96]	; (80abc <xQueueGenericSendFromISR+0x80>)
   80a5a:	4798      	blx	r3
   80a5c:	bf00      	nop
   80a5e:	e7fd      	b.n	80a5c <xQueueGenericSendFromISR+0x20>
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   80a60:	4b16      	ldr	r3, [pc, #88]	; (80abc <xQueueGenericSendFromISR+0x80>)
   80a62:	4798      	blx	r3
   80a64:	4607      	mov	r7, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   80a66:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   80a68:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   80a6a:	429a      	cmp	r2, r3
   80a6c:	d218      	bcs.n	80aa0 <xQueueGenericSendFromISR+0x64>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   80a6e:	4620      	mov	r0, r4
   80a70:	4631      	mov	r1, r6
   80a72:	4642      	mov	r2, r8
   80a74:	4b12      	ldr	r3, [pc, #72]	; (80ac0 <xQueueGenericSendFromISR+0x84>)
   80a76:	4798      	blx	r3

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
   80a78:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80a7a:	f1b3 3fff 	cmp.w	r3, #4294967295
   80a7e:	d10a      	bne.n	80a96 <xQueueGenericSendFromISR+0x5a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80a80:	6a63      	ldr	r3, [r4, #36]	; 0x24
   80a82:	b17b      	cbz	r3, 80aa4 <xQueueGenericSendFromISR+0x68>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   80a84:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80a88:	4b0e      	ldr	r3, [pc, #56]	; (80ac4 <xQueueGenericSendFromISR+0x88>)
   80a8a:	4798      	blx	r3
   80a8c:	b160      	cbz	r0, 80aa8 <xQueueGenericSendFromISR+0x6c>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						if( pxHigherPriorityTaskWoken != NULL )
   80a8e:	b16d      	cbz	r5, 80aac <xQueueGenericSendFromISR+0x70>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
   80a90:	2401      	movs	r4, #1
   80a92:	602c      	str	r4, [r5, #0]
   80a94:	e00b      	b.n	80aae <xQueueGenericSendFromISR+0x72>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
   80a96:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80a98:	3301      	adds	r3, #1
   80a9a:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
   80a9c:	2401      	movs	r4, #1
   80a9e:	e006      	b.n	80aae <xQueueGenericSendFromISR+0x72>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
   80aa0:	2400      	movs	r4, #0
   80aa2:	e004      	b.n	80aae <xQueueGenericSendFromISR+0x72>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
   80aa4:	2401      	movs	r4, #1
   80aa6:	e002      	b.n	80aae <xQueueGenericSendFromISR+0x72>
   80aa8:	2401      	movs	r4, #1
   80aaa:	e000      	b.n	80aae <xQueueGenericSendFromISR+0x72>
   80aac:	2401      	movs	r4, #1
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   80aae:	4638      	mov	r0, r7
   80ab0:	4b05      	ldr	r3, [pc, #20]	; (80ac8 <xQueueGenericSendFromISR+0x8c>)
   80ab2:	4798      	blx	r3

	return xReturn;
}
   80ab4:	4620      	mov	r0, r4
   80ab6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80aba:	bf00      	nop
   80abc:	000804e1 	.word	0x000804e1
   80ac0:	00080735 	.word	0x00080735
   80ac4:	0008141d 	.word	0x0008141d
   80ac8:	00080509 	.word	0x00080509

00080acc <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
   80acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80ad0:	b085      	sub	sp, #20
   80ad2:	4689      	mov	r9, r1
   80ad4:	9201      	str	r2, [sp, #4]
   80ad6:	469a      	mov	sl, r3
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;

	configASSERT( pxQueue );
   80ad8:	4604      	mov	r4, r0
   80ada:	b918      	cbnz	r0, 80ae4 <xQueueGenericReceive+0x18>
   80adc:	4b44      	ldr	r3, [pc, #272]	; (80bf0 <xQueueGenericReceive+0x124>)
   80ade:	4798      	blx	r3
   80ae0:	bf00      	nop
   80ae2:	e7fd      	b.n	80ae0 <xQueueGenericReceive+0x14>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   80ae4:	b909      	cbnz	r1, 80aea <xQueueGenericReceive+0x1e>
   80ae6:	6c03      	ldr	r3, [r0, #64]	; 0x40
   80ae8:	b92b      	cbnz	r3, 80af6 <xQueueGenericReceive+0x2a>
	return xReturn;
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
   80aea:	2700      	movs	r7, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   80aec:	4e41      	ldr	r6, [pc, #260]	; (80bf4 <xQueueGenericReceive+0x128>)
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   80aee:	f8df b134 	ldr.w	fp, [pc, #308]	; 80c24 <xQueueGenericReceive+0x158>
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
   80af2:	4d41      	ldr	r5, [pc, #260]	; (80bf8 <xQueueGenericReceive+0x12c>)
   80af4:	e003      	b.n	80afe <xQueueGenericReceive+0x32>
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;

	configASSERT( pxQueue );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   80af6:	4b3e      	ldr	r3, [pc, #248]	; (80bf0 <xQueueGenericReceive+0x124>)
   80af8:	4798      	blx	r3
   80afa:	bf00      	nop
   80afc:	e7fd      	b.n	80afa <xQueueGenericReceive+0x2e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   80afe:	47b0      	blx	r6
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
   80b00:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   80b02:	2b00      	cmp	r3, #0
   80b04:	d028      	beq.n	80b58 <xQueueGenericReceive+0x8c>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
   80b06:	68e5      	ldr	r5, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
   80b08:	4620      	mov	r0, r4
   80b0a:	4649      	mov	r1, r9
   80b0c:	4b3b      	ldr	r3, [pc, #236]	; (80bfc <xQueueGenericReceive+0x130>)
   80b0e:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
   80b10:	f1ba 0f00 	cmp.w	sl, #0
   80b14:	d112      	bne.n	80b3c <xQueueGenericReceive+0x70>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
   80b16:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   80b18:	3b01      	subs	r3, #1
   80b1a:	63a3      	str	r3, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   80b1c:	6823      	ldr	r3, [r4, #0]
   80b1e:	b913      	cbnz	r3, 80b26 <xQueueGenericReceive+0x5a>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
   80b20:	4b37      	ldr	r3, [pc, #220]	; (80c00 <xQueueGenericReceive+0x134>)
   80b22:	4798      	blx	r3
   80b24:	6060      	str	r0, [r4, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   80b26:	6923      	ldr	r3, [r4, #16]
   80b28:	b193      	cbz	r3, 80b50 <xQueueGenericReceive+0x84>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   80b2a:	f104 0010 	add.w	r0, r4, #16
   80b2e:	4b35      	ldr	r3, [pc, #212]	; (80c04 <xQueueGenericReceive+0x138>)
   80b30:	4798      	blx	r3
   80b32:	2801      	cmp	r0, #1
   80b34:	d10c      	bne.n	80b50 <xQueueGenericReceive+0x84>
						{
							portYIELD_WITHIN_API();
   80b36:	4b34      	ldr	r3, [pc, #208]	; (80c08 <xQueueGenericReceive+0x13c>)
   80b38:	4798      	blx	r3
   80b3a:	e009      	b.n	80b50 <xQueueGenericReceive+0x84>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
   80b3c:	60e5      	str	r5, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80b3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   80b40:	b133      	cbz	r3, 80b50 <xQueueGenericReceive+0x84>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   80b42:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80b46:	4b2f      	ldr	r3, [pc, #188]	; (80c04 <xQueueGenericReceive+0x138>)
   80b48:	4798      	blx	r3
   80b4a:	b108      	cbz	r0, 80b50 <xQueueGenericReceive+0x84>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
   80b4c:	4b2e      	ldr	r3, [pc, #184]	; (80c08 <xQueueGenericReceive+0x13c>)
   80b4e:	4798      	blx	r3
						}
					}
				}

				taskEXIT_CRITICAL();
   80b50:	4b29      	ldr	r3, [pc, #164]	; (80bf8 <xQueueGenericReceive+0x12c>)
   80b52:	4798      	blx	r3
				return pdPASS;
   80b54:	2001      	movs	r0, #1
   80b56:	e048      	b.n	80bea <xQueueGenericReceive+0x11e>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   80b58:	9b01      	ldr	r3, [sp, #4]
   80b5a:	b91b      	cbnz	r3, 80b64 <xQueueGenericReceive+0x98>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   80b5c:	4b26      	ldr	r3, [pc, #152]	; (80bf8 <xQueueGenericReceive+0x12c>)
   80b5e:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
   80b60:	2000      	movs	r0, #0
   80b62:	e042      	b.n	80bea <xQueueGenericReceive+0x11e>
				}
				else if( xEntryTimeSet == pdFALSE )
   80b64:	b917      	cbnz	r7, 80b6c <xQueueGenericReceive+0xa0>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   80b66:	a802      	add	r0, sp, #8
   80b68:	47d8      	blx	fp
					xEntryTimeSet = pdTRUE;
   80b6a:	2701      	movs	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
   80b6c:	47a8      	blx	r5

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   80b6e:	4b27      	ldr	r3, [pc, #156]	; (80c0c <xQueueGenericReceive+0x140>)
   80b70:	4798      	blx	r3
		prvLockQueue( pxQueue );
   80b72:	47b0      	blx	r6
   80b74:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80b76:	f1b3 3fff 	cmp.w	r3, #4294967295
   80b7a:	bf04      	itt	eq
   80b7c:	2300      	moveq	r3, #0
   80b7e:	6463      	streq	r3, [r4, #68]	; 0x44
   80b80:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80b82:	f1b3 3fff 	cmp.w	r3, #4294967295
   80b86:	bf04      	itt	eq
   80b88:	2300      	moveq	r3, #0
   80b8a:	64a3      	streq	r3, [r4, #72]	; 0x48
   80b8c:	47a8      	blx	r5

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   80b8e:	a802      	add	r0, sp, #8
   80b90:	a901      	add	r1, sp, #4
   80b92:	4b1f      	ldr	r3, [pc, #124]	; (80c10 <xQueueGenericReceive+0x144>)
   80b94:	4798      	blx	r3
   80b96:	bb10      	cbnz	r0, 80bde <xQueueGenericReceive+0x112>

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   80b98:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
   80b9a:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
   80b9e:	47a8      	blx	r5
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   80ba0:	f1b8 0f00 	cmp.w	r8, #0
   80ba4:	d115      	bne.n	80bd2 <xQueueGenericReceive+0x106>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   80ba6:	6823      	ldr	r3, [r4, #0]
   80ba8:	b923      	cbnz	r3, 80bb4 <xQueueGenericReceive+0xe8>
					{
						portENTER_CRITICAL();
   80baa:	47b0      	blx	r6
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   80bac:	6860      	ldr	r0, [r4, #4]
   80bae:	4b19      	ldr	r3, [pc, #100]	; (80c14 <xQueueGenericReceive+0x148>)
   80bb0:	4798      	blx	r3
						}
						portEXIT_CRITICAL();
   80bb2:	47a8      	blx	r5
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   80bb4:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80bb8:	9901      	ldr	r1, [sp, #4]
   80bba:	4b17      	ldr	r3, [pc, #92]	; (80c18 <xQueueGenericReceive+0x14c>)
   80bbc:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   80bbe:	4620      	mov	r0, r4
   80bc0:	4b16      	ldr	r3, [pc, #88]	; (80c1c <xQueueGenericReceive+0x150>)
   80bc2:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   80bc4:	4b16      	ldr	r3, [pc, #88]	; (80c20 <xQueueGenericReceive+0x154>)
   80bc6:	4798      	blx	r3
   80bc8:	2800      	cmp	r0, #0
   80bca:	d198      	bne.n	80afe <xQueueGenericReceive+0x32>
				{
					portYIELD_WITHIN_API();
   80bcc:	4b0e      	ldr	r3, [pc, #56]	; (80c08 <xQueueGenericReceive+0x13c>)
   80bce:	4798      	blx	r3
   80bd0:	e795      	b.n	80afe <xQueueGenericReceive+0x32>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   80bd2:	4620      	mov	r0, r4
   80bd4:	4b11      	ldr	r3, [pc, #68]	; (80c1c <xQueueGenericReceive+0x150>)
   80bd6:	4798      	blx	r3
				( void ) xTaskResumeAll();
   80bd8:	4b11      	ldr	r3, [pc, #68]	; (80c20 <xQueueGenericReceive+0x154>)
   80bda:	4798      	blx	r3
   80bdc:	e78f      	b.n	80afe <xQueueGenericReceive+0x32>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
   80bde:	4620      	mov	r0, r4
   80be0:	4b0e      	ldr	r3, [pc, #56]	; (80c1c <xQueueGenericReceive+0x150>)
   80be2:	4798      	blx	r3
			( void ) xTaskResumeAll();
   80be4:	4b0e      	ldr	r3, [pc, #56]	; (80c20 <xQueueGenericReceive+0x154>)
   80be6:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
   80be8:	2000      	movs	r0, #0
		}
	}
}
   80bea:	b005      	add	sp, #20
   80bec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80bf0:	000804e1 	.word	0x000804e1
   80bf4:	000804f1 	.word	0x000804f1
   80bf8:	00080511 	.word	0x00080511
   80bfc:	00080799 	.word	0x00080799
   80c00:	00081559 	.word	0x00081559
   80c04:	0008141d 	.word	0x0008141d
   80c08:	000804d1 	.word	0x000804d1
   80c0c:	00080fc5 	.word	0x00080fc5
   80c10:	000814c9 	.word	0x000814c9
   80c14:	00081585 	.word	0x00081585
   80c18:	00081379 	.word	0x00081379
   80c1c:	000807c1 	.word	0x000807c1
   80c20:	00081115 	.word	0x00081115
   80c24:	000814a1 	.word	0x000814a1

00080c28 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vQueueWaitForMessageRestricted( xQueueHandle pxQueue, portTickType xTicksToWait )
	{
   80c28:	b538      	push	{r3, r4, r5, lr}
   80c2a:	4604      	mov	r4, r0
   80c2c:	460d      	mov	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   80c2e:	4b0d      	ldr	r3, [pc, #52]	; (80c64 <vQueueWaitForMessageRestricted+0x3c>)
   80c30:	4798      	blx	r3
   80c32:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80c34:	f1b3 3fff 	cmp.w	r3, #4294967295
   80c38:	bf04      	itt	eq
   80c3a:	2300      	moveq	r3, #0
   80c3c:	6463      	streq	r3, [r4, #68]	; 0x44
   80c3e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80c40:	f1b3 3fff 	cmp.w	r3, #4294967295
   80c44:	bf04      	itt	eq
   80c46:	2300      	moveq	r3, #0
   80c48:	64a3      	streq	r3, [r4, #72]	; 0x48
   80c4a:	4b07      	ldr	r3, [pc, #28]	; (80c68 <vQueueWaitForMessageRestricted+0x40>)
   80c4c:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
   80c4e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   80c50:	b923      	cbnz	r3, 80c5c <vQueueWaitForMessageRestricted+0x34>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   80c52:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80c56:	4629      	mov	r1, r5
   80c58:	4b04      	ldr	r3, [pc, #16]	; (80c6c <vQueueWaitForMessageRestricted+0x44>)
   80c5a:	4798      	blx	r3
		}
		prvUnlockQueue( pxQueue );
   80c5c:	4620      	mov	r0, r4
   80c5e:	4b04      	ldr	r3, [pc, #16]	; (80c70 <vQueueWaitForMessageRestricted+0x48>)
   80c60:	4798      	blx	r3
   80c62:	bd38      	pop	{r3, r4, r5, pc}
   80c64:	000804f1 	.word	0x000804f1
   80c68:	00080511 	.word	0x00080511
   80c6c:	000813d9 	.word	0x000813d9
   80c70:	000807c1 	.word	0x000807c1

00080c74 <prvAddCurrentTaskToDelayedList>:
	#endif
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
   80c74:	b510      	push	{r4, lr}
   80c76:	4604      	mov	r4, r0
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
   80c78:	4b0e      	ldr	r3, [pc, #56]	; (80cb4 <prvAddCurrentTaskToDelayedList+0x40>)
   80c7a:	681b      	ldr	r3, [r3, #0]
   80c7c:	6058      	str	r0, [r3, #4]

	if( xTimeToWake < xTickCount )
   80c7e:	4b0e      	ldr	r3, [pc, #56]	; (80cb8 <prvAddCurrentTaskToDelayedList+0x44>)
   80c80:	681b      	ldr	r3, [r3, #0]
   80c82:	4298      	cmp	r0, r3
   80c84:	d207      	bcs.n	80c96 <prvAddCurrentTaskToDelayedList+0x22>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   80c86:	4b0d      	ldr	r3, [pc, #52]	; (80cbc <prvAddCurrentTaskToDelayedList+0x48>)
   80c88:	6818      	ldr	r0, [r3, #0]
   80c8a:	4b0a      	ldr	r3, [pc, #40]	; (80cb4 <prvAddCurrentTaskToDelayedList+0x40>)
   80c8c:	6819      	ldr	r1, [r3, #0]
   80c8e:	3104      	adds	r1, #4
   80c90:	4b0b      	ldr	r3, [pc, #44]	; (80cc0 <prvAddCurrentTaskToDelayedList+0x4c>)
   80c92:	4798      	blx	r3
   80c94:	bd10      	pop	{r4, pc}
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   80c96:	4b0b      	ldr	r3, [pc, #44]	; (80cc4 <prvAddCurrentTaskToDelayedList+0x50>)
   80c98:	6818      	ldr	r0, [r3, #0]
   80c9a:	4b06      	ldr	r3, [pc, #24]	; (80cb4 <prvAddCurrentTaskToDelayedList+0x40>)
   80c9c:	6819      	ldr	r1, [r3, #0]
   80c9e:	3104      	adds	r1, #4
   80ca0:	4b07      	ldr	r3, [pc, #28]	; (80cc0 <prvAddCurrentTaskToDelayedList+0x4c>)
   80ca2:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
   80ca4:	4b08      	ldr	r3, [pc, #32]	; (80cc8 <prvAddCurrentTaskToDelayedList+0x54>)
   80ca6:	681b      	ldr	r3, [r3, #0]
   80ca8:	429c      	cmp	r4, r3
		{
			xNextTaskUnblockTime = xTimeToWake;
   80caa:	bf3c      	itt	cc
   80cac:	4b06      	ldrcc	r3, [pc, #24]	; (80cc8 <prvAddCurrentTaskToDelayedList+0x54>)
   80cae:	601c      	strcc	r4, [r3, #0]
   80cb0:	bd10      	pop	{r4, pc}
   80cb2:	bf00      	nop
   80cb4:	2007aad4 	.word	0x2007aad4
   80cb8:	2007aaf0 	.word	0x2007aaf0
   80cbc:	2007aaf4 	.word	0x2007aaf4
   80cc0:	0008041d 	.word	0x0008041d
   80cc4:	2007aa34 	.word	0x2007aa34
   80cc8:	20070134 	.word	0x20070134

00080ccc <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
   80ccc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80cd0:	460e      	mov	r6, r1
   80cd2:	4617      	mov	r7, r2
   80cd4:	469a      	mov	sl, r3
   80cd6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   80cd8:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
   80cdc:	4681      	mov	r9, r0
   80cde:	b918      	cbnz	r0, 80ce8 <xTaskGenericCreate+0x1c>
   80ce0:	4b62      	ldr	r3, [pc, #392]	; (80e6c <xTaskGenericCreate+0x1a0>)
   80ce2:	4798      	blx	r3
   80ce4:	bf00      	nop
   80ce6:	e7fd      	b.n	80ce4 <xTaskGenericCreate+0x18>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
   80ce8:	2d04      	cmp	r5, #4
   80cea:	d903      	bls.n	80cf4 <xTaskGenericCreate+0x28>
   80cec:	4b5f      	ldr	r3, [pc, #380]	; (80e6c <xTaskGenericCreate+0x1a0>)
   80cee:	4798      	blx	r3
   80cf0:	bf00      	nop
   80cf2:	e7fd      	b.n	80cf0 <xTaskGenericCreate+0x24>
{
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
   80cf4:	204c      	movs	r0, #76	; 0x4c
   80cf6:	4b5e      	ldr	r3, [pc, #376]	; (80e70 <xTaskGenericCreate+0x1a4>)
   80cf8:	4798      	blx	r3

	if( pxNewTCB != NULL )
   80cfa:	4604      	mov	r4, r0
   80cfc:	2800      	cmp	r0, #0
   80cfe:	f000 80b1 	beq.w	80e64 <xTaskGenericCreate+0x198>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   80d02:	f1b8 0f00 	cmp.w	r8, #0
   80d06:	f040 80a9 	bne.w	80e5c <xTaskGenericCreate+0x190>
   80d0a:	00b8      	lsls	r0, r7, #2
   80d0c:	4b58      	ldr	r3, [pc, #352]	; (80e70 <xTaskGenericCreate+0x1a4>)
   80d0e:	4798      	blx	r3
   80d10:	6320      	str	r0, [r4, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
   80d12:	b918      	cbnz	r0, 80d1c <xTaskGenericCreate+0x50>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
   80d14:	4620      	mov	r0, r4
   80d16:	4b57      	ldr	r3, [pc, #348]	; (80e74 <xTaskGenericCreate+0x1a8>)
   80d18:	4798      	blx	r3
   80d1a:	e0a3      	b.n	80e64 <xTaskGenericCreate+0x198>
			pxNewTCB = NULL;
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
   80d1c:	21a5      	movs	r1, #165	; 0xa5
   80d1e:	00ba      	lsls	r2, r7, #2
   80d20:	4b55      	ldr	r3, [pc, #340]	; (80e78 <xTaskGenericCreate+0x1ac>)
   80d22:	4798      	blx	r3
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
   80d24:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
   80d28:	3f01      	subs	r7, #1
   80d2a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   80d2c:	eb03 0387 	add.w	r3, r3, r7, lsl #2
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
   80d30:	f023 0b07 	bic.w	fp, r3, #7
{
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
   80d34:	f104 0034 	add.w	r0, r4, #52	; 0x34
   80d38:	4631      	mov	r1, r6
   80d3a:	220a      	movs	r2, #10
   80d3c:	4b4f      	ldr	r3, [pc, #316]	; (80e7c <xTaskGenericCreate+0x1b0>)
   80d3e:	4798      	blx	r3
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
   80d40:	2300      	movs	r3, #0
   80d42:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
   80d46:	2d04      	cmp	r5, #4
   80d48:	bf34      	ite	cc
   80d4a:	462e      	movcc	r6, r5
   80d4c:	2604      	movcs	r6, #4
	if( uxPriority >= configMAX_PRIORITIES )
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
	}

	pxTCB->uxPriority = uxPriority;
   80d4e:	62e6      	str	r6, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
   80d50:	64a6      	str	r6, [r4, #72]	; 0x48
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
   80d52:	1d27      	adds	r7, r4, #4
   80d54:	4638      	mov	r0, r7
   80d56:	f8df 8170 	ldr.w	r8, [pc, #368]	; 80ec8 <xTaskGenericCreate+0x1fc>
   80d5a:	47c0      	blx	r8
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
   80d5c:	f104 0018 	add.w	r0, r4, #24
   80d60:	47c0      	blx	r8

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
   80d62:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
   80d64:	f1c6 0605 	rsb	r6, r6, #5
   80d68:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
   80d6a:	6264      	str	r4, [r4, #36]	; 0x24
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   80d6c:	4658      	mov	r0, fp
   80d6e:	4649      	mov	r1, r9
   80d70:	4652      	mov	r2, sl
   80d72:	4b43      	ldr	r3, [pc, #268]	; (80e80 <xTaskGenericCreate+0x1b4>)
   80d74:	4798      	blx	r3
   80d76:	6020      	str	r0, [r4, #0]
		}
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   80d78:	f010 0f07 	tst.w	r0, #7
   80d7c:	d003      	beq.n	80d86 <xTaskGenericCreate+0xba>
   80d7e:	4b3b      	ldr	r3, [pc, #236]	; (80e6c <xTaskGenericCreate+0x1a0>)
   80d80:	4798      	blx	r3
   80d82:	bf00      	nop
   80d84:	e7fd      	b.n	80d82 <xTaskGenericCreate+0xb6>

		if( ( void * ) pxCreatedTask != NULL )
   80d86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80d88:	b103      	cbz	r3, 80d8c <xTaskGenericCreate+0xc0>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
   80d8a:	601c      	str	r4, [r3, #0]
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
   80d8c:	4b3d      	ldr	r3, [pc, #244]	; (80e84 <xTaskGenericCreate+0x1b8>)
   80d8e:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
   80d90:	4b3d      	ldr	r3, [pc, #244]	; (80e88 <xTaskGenericCreate+0x1bc>)
   80d92:	681a      	ldr	r2, [r3, #0]
   80d94:	3201      	adds	r2, #1
   80d96:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
   80d98:	4b3c      	ldr	r3, [pc, #240]	; (80e8c <xTaskGenericCreate+0x1c0>)
   80d9a:	681b      	ldr	r3, [r3, #0]
   80d9c:	bb2b      	cbnz	r3, 80dea <xTaskGenericCreate+0x11e>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
   80d9e:	4b3b      	ldr	r3, [pc, #236]	; (80e8c <xTaskGenericCreate+0x1c0>)
   80da0:	601c      	str	r4, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
   80da2:	4b39      	ldr	r3, [pc, #228]	; (80e88 <xTaskGenericCreate+0x1bc>)
   80da4:	681b      	ldr	r3, [r3, #0]
   80da6:	2b01      	cmp	r3, #1
   80da8:	d129      	bne.n	80dfe <xTaskGenericCreate+0x132>
   80daa:	4e39      	ldr	r6, [pc, #228]	; (80e90 <xTaskGenericCreate+0x1c4>)
   80dac:	f106 0964 	add.w	r9, r6, #100	; 0x64
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
   80db0:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 80e94 <xTaskGenericCreate+0x1c8>
   80db4:	4630      	mov	r0, r6
   80db6:	47c0      	blx	r8
   80db8:	3614      	adds	r6, #20

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
   80dba:	454e      	cmp	r6, r9
   80dbc:	d1fa      	bne.n	80db4 <xTaskGenericCreate+0xe8>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
   80dbe:	f8df 910c 	ldr.w	r9, [pc, #268]	; 80ecc <xTaskGenericCreate+0x200>
   80dc2:	4648      	mov	r0, r9
   80dc4:	4e33      	ldr	r6, [pc, #204]	; (80e94 <xTaskGenericCreate+0x1c8>)
   80dc6:	47b0      	blx	r6
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
   80dc8:	f8df 8104 	ldr.w	r8, [pc, #260]	; 80ed0 <xTaskGenericCreate+0x204>
   80dcc:	4640      	mov	r0, r8
   80dce:	47b0      	blx	r6
	vListInitialise( ( xList * ) &xPendingReadyList );
   80dd0:	4831      	ldr	r0, [pc, #196]	; (80e98 <xTaskGenericCreate+0x1cc>)
   80dd2:	47b0      	blx	r6

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
   80dd4:	4831      	ldr	r0, [pc, #196]	; (80e9c <xTaskGenericCreate+0x1d0>)
   80dd6:	47b0      	blx	r6
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
   80dd8:	4831      	ldr	r0, [pc, #196]	; (80ea0 <xTaskGenericCreate+0x1d4>)
   80dda:	47b0      	blx	r6
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   80ddc:	4b31      	ldr	r3, [pc, #196]	; (80ea4 <xTaskGenericCreate+0x1d8>)
   80dde:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   80de2:	4b31      	ldr	r3, [pc, #196]	; (80ea8 <xTaskGenericCreate+0x1dc>)
   80de4:	f8c3 8000 	str.w	r8, [r3]
   80de8:	e009      	b.n	80dfe <xTaskGenericCreate+0x132>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
   80dea:	4b30      	ldr	r3, [pc, #192]	; (80eac <xTaskGenericCreate+0x1e0>)
   80dec:	681b      	ldr	r3, [r3, #0]
   80dee:	b933      	cbnz	r3, 80dfe <xTaskGenericCreate+0x132>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
   80df0:	4b26      	ldr	r3, [pc, #152]	; (80e8c <xTaskGenericCreate+0x1c0>)
   80df2:	681b      	ldr	r3, [r3, #0]
   80df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   80df6:	429d      	cmp	r5, r3
					{
						pxCurrentTCB = pxNewTCB;
   80df8:	bf24      	itt	cs
   80dfa:	4b24      	ldrcs	r3, [pc, #144]	; (80e8c <xTaskGenericCreate+0x1c0>)
   80dfc:	601c      	strcs	r4, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
   80dfe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   80e00:	4a2b      	ldr	r2, [pc, #172]	; (80eb0 <xTaskGenericCreate+0x1e4>)
   80e02:	6812      	ldr	r2, [r2, #0]
   80e04:	4293      	cmp	r3, r2
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
   80e06:	bf84      	itt	hi
   80e08:	4a29      	ldrhi	r2, [pc, #164]	; (80eb0 <xTaskGenericCreate+0x1e4>)
   80e0a:	6013      	strhi	r3, [r2, #0]
			}

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
   80e0c:	4a29      	ldr	r2, [pc, #164]	; (80eb4 <xTaskGenericCreate+0x1e8>)
   80e0e:	6811      	ldr	r1, [r2, #0]
   80e10:	6421      	str	r1, [r4, #64]	; 0x40
			}
			#endif
			uxTaskNumber++;
   80e12:	3101      	adds	r1, #1
   80e14:	6011      	str	r1, [r2, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
   80e16:	4a28      	ldr	r2, [pc, #160]	; (80eb8 <xTaskGenericCreate+0x1ec>)
   80e18:	6812      	ldr	r2, [r2, #0]
   80e1a:	4293      	cmp	r3, r2
   80e1c:	bf84      	itt	hi
   80e1e:	4a26      	ldrhi	r2, [pc, #152]	; (80eb8 <xTaskGenericCreate+0x1ec>)
   80e20:	6013      	strhi	r3, [r2, #0]
   80e22:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   80e26:	481a      	ldr	r0, [pc, #104]	; (80e90 <xTaskGenericCreate+0x1c4>)
   80e28:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   80e2c:	4639      	mov	r1, r7
   80e2e:	4b23      	ldr	r3, [pc, #140]	; (80ebc <xTaskGenericCreate+0x1f0>)
   80e30:	4798      	blx	r3

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
   80e32:	4b23      	ldr	r3, [pc, #140]	; (80ec0 <xTaskGenericCreate+0x1f4>)
   80e34:	4798      	blx	r3
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
   80e36:	4b1d      	ldr	r3, [pc, #116]	; (80eac <xTaskGenericCreate+0x1e0>)
   80e38:	681b      	ldr	r3, [r3, #0]
   80e3a:	b14b      	cbz	r3, 80e50 <xTaskGenericCreate+0x184>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
   80e3c:	4b13      	ldr	r3, [pc, #76]	; (80e8c <xTaskGenericCreate+0x1c0>)
   80e3e:	681b      	ldr	r3, [r3, #0]
   80e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   80e42:	429d      	cmp	r5, r3
   80e44:	d907      	bls.n	80e56 <xTaskGenericCreate+0x18a>
			{
				portYIELD_WITHIN_API();
   80e46:	4b1f      	ldr	r3, [pc, #124]	; (80ec4 <xTaskGenericCreate+0x1f8>)
   80e48:	4798      	blx	r3
			#endif
			uxTaskNumber++;

			prvAddTaskToReadyQueue( pxNewTCB );

			xReturn = pdPASS;
   80e4a:	2001      	movs	r0, #1
   80e4c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80e50:	2001      	movs	r0, #1
   80e52:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80e56:	2001      	movs	r0, #1
   80e58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if( pxNewTCB != NULL )
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   80e5c:	f8c0 8030 	str.w	r8, [r0, #48]	; 0x30
   80e60:	4640      	mov	r0, r8
   80e62:	e75b      	b.n	80d1c <xTaskGenericCreate+0x50>
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   80e64:	f04f 30ff 	mov.w	r0, #4294967295
			}
		}
	}

	return xReturn;
}
   80e68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80e6c:	000804e1 	.word	0x000804e1
   80e70:	0008063d 	.word	0x0008063d
   80e74:	00080701 	.word	0x00080701
   80e78:	00082b2d 	.word	0x00082b2d
   80e7c:	00082da1 	.word	0x00082da1
   80e80:	00080495 	.word	0x00080495
   80e84:	000804f1 	.word	0x000804f1
   80e88:	2007ab14 	.word	0x2007ab14
   80e8c:	2007aad4 	.word	0x2007aad4
   80e90:	2007aa6c 	.word	0x2007aa6c
   80e94:	000803e1 	.word	0x000803e1
   80e98:	2007aad8 	.word	0x2007aad8
   80e9c:	2007aa40 	.word	0x2007aa40
   80ea0:	2007aa20 	.word	0x2007aa20
   80ea4:	2007aa34 	.word	0x2007aa34
   80ea8:	2007aaf4 	.word	0x2007aaf4
   80eac:	2007aa38 	.word	0x2007aa38
   80eb0:	2007ab18 	.word	0x2007ab18
   80eb4:	2007aaf8 	.word	0x2007aaf8
   80eb8:	2007aa68 	.word	0x2007aa68
   80ebc:	00080401 	.word	0x00080401
   80ec0:	00080511 	.word	0x00080511
   80ec4:	000804d1 	.word	0x000804d1
   80ec8:	000803f9 	.word	0x000803f9
   80ecc:	2007aafc 	.word	0x2007aafc
   80ed0:	2007aa54 	.word	0x2007aa54

00080ed4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
   80ed4:	b570      	push	{r4, r5, r6, lr}
   80ed6:	4604      	mov	r4, r0
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
   80ed8:	4b16      	ldr	r3, [pc, #88]	; (80f34 <vTaskDelete+0x60>)
   80eda:	4798      	blx	r3
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
   80edc:	4b16      	ldr	r3, [pc, #88]	; (80f38 <vTaskDelete+0x64>)
   80ede:	681b      	ldr	r3, [r3, #0]
   80ee0:	429c      	cmp	r4, r3
   80ee2:	d003      	beq.n	80eec <vTaskDelete+0x18>
   80ee4:	4626      	mov	r6, r4
			{
				pxTaskToDelete = NULL;
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
   80ee6:	b92c      	cbnz	r4, 80ef4 <vTaskDelete+0x20>
   80ee8:	4626      	mov	r6, r4
   80eea:	e000      	b.n	80eee <vTaskDelete+0x1a>
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
			{
				pxTaskToDelete = NULL;
   80eec:	2600      	movs	r6, #0
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
   80eee:	4b12      	ldr	r3, [pc, #72]	; (80f38 <vTaskDelete+0x64>)
   80ef0:	681c      	ldr	r4, [r3, #0]
   80ef2:	e7ff      	b.n	80ef4 <vTaskDelete+0x20>

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   80ef4:	1d25      	adds	r5, r4, #4
   80ef6:	4628      	mov	r0, r5
   80ef8:	4b10      	ldr	r3, [pc, #64]	; (80f3c <vTaskDelete+0x68>)
   80efa:	4798      	blx	r3
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
			}

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
   80efc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   80efe:	b11b      	cbz	r3, 80f08 <vTaskDelete+0x34>
			{
				uxListRemove( &( pxTCB->xEventListItem ) );
   80f00:	f104 0018 	add.w	r0, r4, #24
   80f04:	4b0d      	ldr	r3, [pc, #52]	; (80f3c <vTaskDelete+0x68>)
   80f06:	4798      	blx	r3
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
   80f08:	480d      	ldr	r0, [pc, #52]	; (80f40 <vTaskDelete+0x6c>)
   80f0a:	4629      	mov	r1, r5
   80f0c:	4b0d      	ldr	r3, [pc, #52]	; (80f44 <vTaskDelete+0x70>)
   80f0e:	4798      	blx	r3

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
   80f10:	4b0d      	ldr	r3, [pc, #52]	; (80f48 <vTaskDelete+0x74>)
   80f12:	681a      	ldr	r2, [r3, #0]
   80f14:	3201      	adds	r2, #1
   80f16:	601a      	str	r2, [r3, #0]

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
   80f18:	4b0c      	ldr	r3, [pc, #48]	; (80f4c <vTaskDelete+0x78>)
   80f1a:	681a      	ldr	r2, [r3, #0]
   80f1c:	3201      	adds	r2, #1
   80f1e:	601a      	str	r2, [r3, #0]

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
   80f20:	4b0b      	ldr	r3, [pc, #44]	; (80f50 <vTaskDelete+0x7c>)
   80f22:	4798      	blx	r3

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
   80f24:	4b0b      	ldr	r3, [pc, #44]	; (80f54 <vTaskDelete+0x80>)
   80f26:	681b      	ldr	r3, [r3, #0]
   80f28:	b113      	cbz	r3, 80f30 <vTaskDelete+0x5c>
		{
			if( ( void * ) pxTaskToDelete == NULL )
   80f2a:	b90e      	cbnz	r6, 80f30 <vTaskDelete+0x5c>
			{
				portYIELD_WITHIN_API();
   80f2c:	4b0a      	ldr	r3, [pc, #40]	; (80f58 <vTaskDelete+0x84>)
   80f2e:	4798      	blx	r3
   80f30:	bd70      	pop	{r4, r5, r6, pc}
   80f32:	bf00      	nop
   80f34:	000804f1 	.word	0x000804f1
   80f38:	2007aad4 	.word	0x2007aad4
   80f3c:	00080459 	.word	0x00080459
   80f40:	2007aa40 	.word	0x2007aa40
   80f44:	00080401 	.word	0x00080401
   80f48:	2007aa3c 	.word	0x2007aa3c
   80f4c:	2007aaf8 	.word	0x2007aaf8
   80f50:	00080511 	.word	0x00080511
   80f54:	2007aa38 	.word	0x2007aa38
   80f58:	000804d1 	.word	0x000804d1

00080f5c <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
   80f5c:	b510      	push	{r4, lr}
   80f5e:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
   80f60:	2300      	movs	r3, #0
   80f62:	9300      	str	r3, [sp, #0]
   80f64:	9301      	str	r3, [sp, #4]
   80f66:	9302      	str	r3, [sp, #8]
   80f68:	9303      	str	r3, [sp, #12]
   80f6a:	480e      	ldr	r0, [pc, #56]	; (80fa4 <vTaskStartScheduler+0x48>)
   80f6c:	490e      	ldr	r1, [pc, #56]	; (80fa8 <vTaskStartScheduler+0x4c>)
   80f6e:	2282      	movs	r2, #130	; 0x82
   80f70:	4c0e      	ldr	r4, [pc, #56]	; (80fac <vTaskStartScheduler+0x50>)
   80f72:	47a0      	blx	r4
	}
	#endif

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   80f74:	2801      	cmp	r0, #1
   80f76:	d10e      	bne.n	80f96 <vTaskStartScheduler+0x3a>
		{
			xReturn = xTimerCreateTimerTask();
   80f78:	4b0d      	ldr	r3, [pc, #52]	; (80fb0 <vTaskStartScheduler+0x54>)
   80f7a:	4798      	blx	r3
		}
	}
	#endif

	if( xReturn == pdPASS )
   80f7c:	2801      	cmp	r0, #1
   80f7e:	d10a      	bne.n	80f96 <vTaskStartScheduler+0x3a>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
   80f80:	4b0c      	ldr	r3, [pc, #48]	; (80fb4 <vTaskStartScheduler+0x58>)
   80f82:	4798      	blx	r3

		xSchedulerRunning = pdTRUE;
   80f84:	2201      	movs	r2, #1
   80f86:	4b0c      	ldr	r3, [pc, #48]	; (80fb8 <vTaskStartScheduler+0x5c>)
   80f88:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
   80f8a:	2200      	movs	r2, #0
   80f8c:	4b0b      	ldr	r3, [pc, #44]	; (80fbc <vTaskStartScheduler+0x60>)
   80f8e:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   80f90:	4b0b      	ldr	r3, [pc, #44]	; (80fc0 <vTaskStartScheduler+0x64>)
   80f92:	4798      	blx	r3
   80f94:	e004      	b.n	80fa0 <vTaskStartScheduler+0x44>
			/* Should only reach here if a task calls xTaskEndScheduler(). */
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
   80f96:	b918      	cbnz	r0, 80fa0 <vTaskStartScheduler+0x44>
   80f98:	4b06      	ldr	r3, [pc, #24]	; (80fb4 <vTaskStartScheduler+0x58>)
   80f9a:	4798      	blx	r3
   80f9c:	bf00      	nop
   80f9e:	e7fd      	b.n	80f9c <vTaskStartScheduler+0x40>
}
   80fa0:	b004      	add	sp, #16
   80fa2:	bd10      	pop	{r4, pc}
   80fa4:	00081265 	.word	0x00081265
   80fa8:	00085a44 	.word	0x00085a44
   80fac:	00080ccd 	.word	0x00080ccd
   80fb0:	000816f9 	.word	0x000816f9
   80fb4:	000804e1 	.word	0x000804e1
   80fb8:	2007aa38 	.word	0x2007aa38
   80fbc:	2007aaf0 	.word	0x2007aaf0
   80fc0:	000805ad 	.word	0x000805ad

00080fc4 <vTaskSuspendAll>:

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
   80fc4:	4b02      	ldr	r3, [pc, #8]	; (80fd0 <vTaskSuspendAll+0xc>)
   80fc6:	681a      	ldr	r2, [r3, #0]
   80fc8:	3201      	adds	r2, #1
   80fca:	601a      	str	r2, [r3, #0]
   80fcc:	4770      	bx	lr
   80fce:	bf00      	nop
   80fd0:	2007aad0 	.word	0x2007aad0

00080fd4 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
   80fd4:	b510      	push	{r4, lr}
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
   80fd6:	4b04      	ldr	r3, [pc, #16]	; (80fe8 <xTaskGetTickCount+0x14>)
   80fd8:	4798      	blx	r3
	{
		xTicks = xTickCount;
   80fda:	4b04      	ldr	r3, [pc, #16]	; (80fec <xTaskGetTickCount+0x18>)
   80fdc:	681c      	ldr	r4, [r3, #0]
	}
	taskEXIT_CRITICAL();
   80fde:	4b04      	ldr	r3, [pc, #16]	; (80ff0 <xTaskGetTickCount+0x1c>)
   80fe0:	4798      	blx	r3

	return xTicks;
}
   80fe2:	4620      	mov	r0, r4
   80fe4:	bd10      	pop	{r4, pc}
   80fe6:	bf00      	nop
   80fe8:	000804f1 	.word	0x000804f1
   80fec:	2007aaf0 	.word	0x2007aaf0
   80ff0:	00080511 	.word	0x00080511

00080ff4 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
   80ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   80ff8:	4b3a      	ldr	r3, [pc, #232]	; (810e4 <vTaskIncrementTick+0xf0>)
   80ffa:	681b      	ldr	r3, [r3, #0]
   80ffc:	2b00      	cmp	r3, #0
   80ffe:	d16b      	bne.n	810d8 <vTaskIncrementTick+0xe4>
	{
		++xTickCount;
   81000:	4b39      	ldr	r3, [pc, #228]	; (810e8 <vTaskIncrementTick+0xf4>)
   81002:	681a      	ldr	r2, [r3, #0]
   81004:	3201      	adds	r2, #1
   81006:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
   81008:	681b      	ldr	r3, [r3, #0]
   8100a:	bb03      	cbnz	r3, 8104e <vTaskIncrementTick+0x5a>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
   8100c:	4b37      	ldr	r3, [pc, #220]	; (810ec <vTaskIncrementTick+0xf8>)
   8100e:	681b      	ldr	r3, [r3, #0]
   81010:	681b      	ldr	r3, [r3, #0]
   81012:	b11b      	cbz	r3, 8101c <vTaskIncrementTick+0x28>
   81014:	4b36      	ldr	r3, [pc, #216]	; (810f0 <vTaskIncrementTick+0xfc>)
   81016:	4798      	blx	r3
   81018:	bf00      	nop
   8101a:	e7fd      	b.n	81018 <vTaskIncrementTick+0x24>

			pxTemp = pxDelayedTaskList;
   8101c:	4b33      	ldr	r3, [pc, #204]	; (810ec <vTaskIncrementTick+0xf8>)
   8101e:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
   81020:	4a34      	ldr	r2, [pc, #208]	; (810f4 <vTaskIncrementTick+0x100>)
   81022:	6810      	ldr	r0, [r2, #0]
   81024:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
   81026:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
   81028:	4a33      	ldr	r2, [pc, #204]	; (810f8 <vTaskIncrementTick+0x104>)
   8102a:	6811      	ldr	r1, [r2, #0]
   8102c:	3101      	adds	r1, #1
   8102e:	6011      	str	r1, [r2, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   81030:	681b      	ldr	r3, [r3, #0]
   81032:	681b      	ldr	r3, [r3, #0]
   81034:	b923      	cbnz	r3, 81040 <vTaskIncrementTick+0x4c>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
   81036:	f04f 32ff 	mov.w	r2, #4294967295
   8103a:	4b30      	ldr	r3, [pc, #192]	; (810fc <vTaskIncrementTick+0x108>)
   8103c:	601a      	str	r2, [r3, #0]
   8103e:	e006      	b.n	8104e <vTaskIncrementTick+0x5a>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   81040:	4b2a      	ldr	r3, [pc, #168]	; (810ec <vTaskIncrementTick+0xf8>)
   81042:	681b      	ldr	r3, [r3, #0]
   81044:	68db      	ldr	r3, [r3, #12]
   81046:	68db      	ldr	r3, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   81048:	685a      	ldr	r2, [r3, #4]
   8104a:	4b2c      	ldr	r3, [pc, #176]	; (810fc <vTaskIncrementTick+0x108>)
   8104c:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
   8104e:	4b26      	ldr	r3, [pc, #152]	; (810e8 <vTaskIncrementTick+0xf4>)
   81050:	681a      	ldr	r2, [r3, #0]
   81052:	4b2a      	ldr	r3, [pc, #168]	; (810fc <vTaskIncrementTick+0x108>)
   81054:	681b      	ldr	r3, [r3, #0]
   81056:	429a      	cmp	r2, r3
   81058:	d342      	bcc.n	810e0 <vTaskIncrementTick+0xec>
   8105a:	4b24      	ldr	r3, [pc, #144]	; (810ec <vTaskIncrementTick+0xf8>)
   8105c:	681b      	ldr	r3, [r3, #0]
   8105e:	681b      	ldr	r3, [r3, #0]
   81060:	b14b      	cbz	r3, 81076 <vTaskIncrementTick+0x82>
   81062:	4b22      	ldr	r3, [pc, #136]	; (810ec <vTaskIncrementTick+0xf8>)
   81064:	681b      	ldr	r3, [r3, #0]
   81066:	68db      	ldr	r3, [r3, #12]
   81068:	68dc      	ldr	r4, [r3, #12]
   8106a:	6863      	ldr	r3, [r4, #4]
   8106c:	4a1e      	ldr	r2, [pc, #120]	; (810e8 <vTaskIncrementTick+0xf4>)
   8106e:	6812      	ldr	r2, [r2, #0]
   81070:	4293      	cmp	r3, r2
   81072:	d913      	bls.n	8109c <vTaskIncrementTick+0xa8>
   81074:	e00e      	b.n	81094 <vTaskIncrementTick+0xa0>
   81076:	f04f 32ff 	mov.w	r2, #4294967295
   8107a:	4b20      	ldr	r3, [pc, #128]	; (810fc <vTaskIncrementTick+0x108>)
   8107c:	601a      	str	r2, [r3, #0]
   8107e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81082:	4b1a      	ldr	r3, [pc, #104]	; (810ec <vTaskIncrementTick+0xf8>)
   81084:	681b      	ldr	r3, [r3, #0]
   81086:	68db      	ldr	r3, [r3, #12]
   81088:	68dc      	ldr	r4, [r3, #12]
   8108a:	6863      	ldr	r3, [r4, #4]
   8108c:	4a16      	ldr	r2, [pc, #88]	; (810e8 <vTaskIncrementTick+0xf4>)
   8108e:	6812      	ldr	r2, [r2, #0]
   81090:	4293      	cmp	r3, r2
   81092:	d907      	bls.n	810a4 <vTaskIncrementTick+0xb0>
   81094:	4a19      	ldr	r2, [pc, #100]	; (810fc <vTaskIncrementTick+0x108>)
   81096:	6013      	str	r3, [r2, #0]
   81098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8109c:	4e18      	ldr	r6, [pc, #96]	; (81100 <vTaskIncrementTick+0x10c>)
   8109e:	4f19      	ldr	r7, [pc, #100]	; (81104 <vTaskIncrementTick+0x110>)
   810a0:	f8df 806c 	ldr.w	r8, [pc, #108]	; 81110 <vTaskIncrementTick+0x11c>
   810a4:	1d25      	adds	r5, r4, #4
   810a6:	4628      	mov	r0, r5
   810a8:	47b0      	blx	r6
   810aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   810ac:	b113      	cbz	r3, 810b4 <vTaskIncrementTick+0xc0>
   810ae:	f104 0018 	add.w	r0, r4, #24
   810b2:	47b0      	blx	r6
   810b4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   810b6:	683a      	ldr	r2, [r7, #0]
   810b8:	4293      	cmp	r3, r2
   810ba:	bf88      	it	hi
   810bc:	603b      	strhi	r3, [r7, #0]
   810be:	eb03 0083 	add.w	r0, r3, r3, lsl #2
   810c2:	eb08 0080 	add.w	r0, r8, r0, lsl #2
   810c6:	4629      	mov	r1, r5
   810c8:	4b0f      	ldr	r3, [pc, #60]	; (81108 <vTaskIncrementTick+0x114>)
   810ca:	4798      	blx	r3
   810cc:	4b07      	ldr	r3, [pc, #28]	; (810ec <vTaskIncrementTick+0xf8>)
   810ce:	681b      	ldr	r3, [r3, #0]
   810d0:	681b      	ldr	r3, [r3, #0]
   810d2:	2b00      	cmp	r3, #0
   810d4:	d1d5      	bne.n	81082 <vTaskIncrementTick+0x8e>
   810d6:	e7ce      	b.n	81076 <vTaskIncrementTick+0x82>
	}
	else
	{
		++uxMissedTicks;
   810d8:	4b0c      	ldr	r3, [pc, #48]	; (8110c <vTaskIncrementTick+0x118>)
   810da:	681a      	ldr	r2, [r3, #0]
   810dc:	3201      	adds	r2, #1
   810de:	601a      	str	r2, [r3, #0]
   810e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   810e4:	2007aad0 	.word	0x2007aad0
   810e8:	2007aaf0 	.word	0x2007aaf0
   810ec:	2007aa34 	.word	0x2007aa34
   810f0:	000804e1 	.word	0x000804e1
   810f4:	2007aaf4 	.word	0x2007aaf4
   810f8:	2007aaec 	.word	0x2007aaec
   810fc:	20070134 	.word	0x20070134
   81100:	00080459 	.word	0x00080459
   81104:	2007aa68 	.word	0x2007aa68
   81108:	00080401 	.word	0x00080401
   8110c:	2007aa1c 	.word	0x2007aa1c
   81110:	2007aa6c 	.word	0x2007aa6c

00081114 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE != 0  */
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
   81114:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   81118:	4b31      	ldr	r3, [pc, #196]	; (811e0 <xTaskResumeAll+0xcc>)
   8111a:	681b      	ldr	r3, [r3, #0]
   8111c:	b91b      	cbnz	r3, 81126 <xTaskResumeAll+0x12>
   8111e:	4b31      	ldr	r3, [pc, #196]	; (811e4 <xTaskResumeAll+0xd0>)
   81120:	4798      	blx	r3
   81122:	bf00      	nop
   81124:	e7fd      	b.n	81122 <xTaskResumeAll+0xe>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   81126:	4b30      	ldr	r3, [pc, #192]	; (811e8 <xTaskResumeAll+0xd4>)
   81128:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
   8112a:	4b2d      	ldr	r3, [pc, #180]	; (811e0 <xTaskResumeAll+0xcc>)
   8112c:	681a      	ldr	r2, [r3, #0]
   8112e:	3a01      	subs	r2, #1
   81130:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   81132:	681b      	ldr	r3, [r3, #0]
   81134:	2b00      	cmp	r3, #0
   81136:	d148      	bne.n	811ca <xTaskResumeAll+0xb6>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
   81138:	4b2c      	ldr	r3, [pc, #176]	; (811ec <xTaskResumeAll+0xd8>)
   8113a:	681b      	ldr	r3, [r3, #0]
   8113c:	2b00      	cmp	r3, #0
   8113e:	d046      	beq.n	811ce <xTaskResumeAll+0xba>
   81140:	2500      	movs	r5, #0
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   81142:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 81218 <xTaskResumeAll+0x104>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
					uxListRemove( &( pxTCB->xEventListItem ) );
   81146:	4f2a      	ldr	r7, [pc, #168]	; (811f0 <xTaskResumeAll+0xdc>)
					uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyQueue( pxTCB );
   81148:	4e2a      	ldr	r6, [pc, #168]	; (811f4 <xTaskResumeAll+0xe0>)
   8114a:	e01d      	b.n	81188 <xTaskResumeAll+0x74>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
   8114c:	f8d8 300c 	ldr.w	r3, [r8, #12]
   81150:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xEventListItem ) );
   81152:	f104 0018 	add.w	r0, r4, #24
   81156:	47b8      	blx	r7
					uxListRemove( &( pxTCB->xGenericListItem ) );
   81158:	f104 0904 	add.w	r9, r4, #4
   8115c:	4648      	mov	r0, r9
   8115e:	47b8      	blx	r7
					prvAddTaskToReadyQueue( pxTCB );
   81160:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   81162:	6832      	ldr	r2, [r6, #0]
   81164:	4293      	cmp	r3, r2
   81166:	bf88      	it	hi
   81168:	6033      	strhi	r3, [r6, #0]
   8116a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   8116e:	4822      	ldr	r0, [pc, #136]	; (811f8 <xTaskResumeAll+0xe4>)
   81170:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   81174:	4649      	mov	r1, r9
   81176:	4b21      	ldr	r3, [pc, #132]	; (811fc <xTaskResumeAll+0xe8>)
   81178:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   8117a:	4b21      	ldr	r3, [pc, #132]	; (81200 <xTaskResumeAll+0xec>)
   8117c:	681b      	ldr	r3, [r3, #0]
   8117e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   81180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					{
						xYieldRequired = pdTRUE;
   81182:	429a      	cmp	r2, r3
   81184:	bf28      	it	cs
   81186:	2501      	movcs	r5, #1
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   81188:	f8d8 3000 	ldr.w	r3, [r8]
   8118c:	2b00      	cmp	r3, #0
   8118e:	d1dd      	bne.n	8114c <xTaskResumeAll+0x38>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   81190:	4b1c      	ldr	r3, [pc, #112]	; (81204 <xTaskResumeAll+0xf0>)
   81192:	681b      	ldr	r3, [r3, #0]
   81194:	b163      	cbz	r3, 811b0 <xTaskResumeAll+0x9c>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   81196:	4b1b      	ldr	r3, [pc, #108]	; (81204 <xTaskResumeAll+0xf0>)
   81198:	681b      	ldr	r3, [r3, #0]
   8119a:	b17b      	cbz	r3, 811bc <xTaskResumeAll+0xa8>
					{
						vTaskIncrementTick();
   8119c:	4d1a      	ldr	r5, [pc, #104]	; (81208 <xTaskResumeAll+0xf4>)
						--uxMissedTicks;
   8119e:	4c19      	ldr	r4, [pc, #100]	; (81204 <xTaskResumeAll+0xf0>)
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
					{
						vTaskIncrementTick();
   811a0:	47a8      	blx	r5
						--uxMissedTicks;
   811a2:	6823      	ldr	r3, [r4, #0]
   811a4:	3b01      	subs	r3, #1
   811a6:	6023      	str	r3, [r4, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   811a8:	6823      	ldr	r3, [r4, #0]
   811aa:	2b00      	cmp	r3, #0
   811ac:	d1f8      	bne.n	811a0 <xTaskResumeAll+0x8c>
   811ae:	e005      	b.n	811bc <xTaskResumeAll+0xa8>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
   811b0:	2d01      	cmp	r5, #1
   811b2:	d003      	beq.n	811bc <xTaskResumeAll+0xa8>
   811b4:	4b15      	ldr	r3, [pc, #84]	; (8120c <xTaskResumeAll+0xf8>)
   811b6:	681b      	ldr	r3, [r3, #0]
   811b8:	2b01      	cmp	r3, #1
   811ba:	d10a      	bne.n	811d2 <xTaskResumeAll+0xbe>
				{
					xAlreadyYielded = pdTRUE;
					xMissedYield = pdFALSE;
   811bc:	2200      	movs	r2, #0
   811be:	4b13      	ldr	r3, [pc, #76]	; (8120c <xTaskResumeAll+0xf8>)
   811c0:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
   811c2:	4b13      	ldr	r3, [pc, #76]	; (81210 <xTaskResumeAll+0xfc>)
   811c4:	4798      	blx	r3
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
				{
					xAlreadyYielded = pdTRUE;
   811c6:	2401      	movs	r4, #1
   811c8:	e004      	b.n	811d4 <xTaskResumeAll+0xc0>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   811ca:	2400      	movs	r4, #0
   811cc:	e002      	b.n	811d4 <xTaskResumeAll+0xc0>
   811ce:	2400      	movs	r4, #0
   811d0:	e000      	b.n	811d4 <xTaskResumeAll+0xc0>
   811d2:	2400      	movs	r4, #0
					portYIELD_WITHIN_API();
				}
			}
		}
	}
	taskEXIT_CRITICAL();
   811d4:	4b0f      	ldr	r3, [pc, #60]	; (81214 <xTaskResumeAll+0x100>)
   811d6:	4798      	blx	r3

	return xAlreadyYielded;
}
   811d8:	4620      	mov	r0, r4
   811da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   811de:	bf00      	nop
   811e0:	2007aad0 	.word	0x2007aad0
   811e4:	000804e1 	.word	0x000804e1
   811e8:	000804f1 	.word	0x000804f1
   811ec:	2007ab14 	.word	0x2007ab14
   811f0:	00080459 	.word	0x00080459
   811f4:	2007aa68 	.word	0x2007aa68
   811f8:	2007aa6c 	.word	0x2007aa6c
   811fc:	00080401 	.word	0x00080401
   81200:	2007aad4 	.word	0x2007aad4
   81204:	2007aa1c 	.word	0x2007aa1c
   81208:	00080ff5 	.word	0x00080ff5
   8120c:	2007ab10 	.word	0x2007ab10
   81210:	000804d1 	.word	0x000804d1
   81214:	00080511 	.word	0x00080511
   81218:	2007aad8 	.word	0x2007aad8

0008121c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
   8121c:	b510      	push	{r4, lr}
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
   8121e:	4604      	mov	r4, r0
   81220:	b178      	cbz	r0, 81242 <vTaskDelay+0x26>
		{
			vTaskSuspendAll();
   81222:	4b09      	ldr	r3, [pc, #36]	; (81248 <vTaskDelay+0x2c>)
   81224:	4798      	blx	r3
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
   81226:	4b09      	ldr	r3, [pc, #36]	; (8124c <vTaskDelay+0x30>)
   81228:	681b      	ldr	r3, [r3, #0]
   8122a:	441c      	add	r4, r3

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   8122c:	4b08      	ldr	r3, [pc, #32]	; (81250 <vTaskDelay+0x34>)
   8122e:	6818      	ldr	r0, [r3, #0]
   81230:	3004      	adds	r0, #4
   81232:	4b08      	ldr	r3, [pc, #32]	; (81254 <vTaskDelay+0x38>)
   81234:	4798      	blx	r3
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
   81236:	4620      	mov	r0, r4
   81238:	4b07      	ldr	r3, [pc, #28]	; (81258 <vTaskDelay+0x3c>)
   8123a:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
   8123c:	4b07      	ldr	r3, [pc, #28]	; (8125c <vTaskDelay+0x40>)
   8123e:	4798      	blx	r3
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   81240:	b908      	cbnz	r0, 81246 <vTaskDelay+0x2a>
		{
			portYIELD_WITHIN_API();
   81242:	4b07      	ldr	r3, [pc, #28]	; (81260 <vTaskDelay+0x44>)
   81244:	4798      	blx	r3
   81246:	bd10      	pop	{r4, pc}
   81248:	00080fc5 	.word	0x00080fc5
   8124c:	2007aaf0 	.word	0x2007aaf0
   81250:	2007aad4 	.word	0x2007aad4
   81254:	00080459 	.word	0x00080459
   81258:	00080c75 	.word	0x00080c75
   8125c:	00081115 	.word	0x00081115
   81260:	000804d1 	.word	0x000804d1

00081264 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   81264:	b580      	push	{r7, lr}
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   81266:	4d15      	ldr	r5, [pc, #84]	; (812bc <prvIdleTask+0x58>)

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
   81268:	4e15      	ldr	r6, [pc, #84]	; (812c0 <prvIdleTask+0x5c>)
			{
				taskYIELD();
   8126a:	f8df 8078 	ldr.w	r8, [pc, #120]	; 812e4 <prvIdleTask+0x80>
   8126e:	e01c      	b.n	812aa <prvIdleTask+0x46>

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
   81270:	4b14      	ldr	r3, [pc, #80]	; (812c4 <prvIdleTask+0x60>)
   81272:	4798      	blx	r3
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   81274:	4b14      	ldr	r3, [pc, #80]	; (812c8 <prvIdleTask+0x64>)
   81276:	681c      	ldr	r4, [r3, #0]
			xTaskResumeAll();
   81278:	4b14      	ldr	r3, [pc, #80]	; (812cc <prvIdleTask+0x68>)
   8127a:	4798      	blx	r3

			if( xListIsEmpty == pdFALSE )
   8127c:	b1ac      	cbz	r4, 812aa <prvIdleTask+0x46>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
   8127e:	4b14      	ldr	r3, [pc, #80]	; (812d0 <prvIdleTask+0x6c>)
   81280:	4798      	blx	r3
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
   81282:	4b11      	ldr	r3, [pc, #68]	; (812c8 <prvIdleTask+0x64>)
   81284:	68db      	ldr	r3, [r3, #12]
   81286:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xGenericListItem ) );
   81288:	1d20      	adds	r0, r4, #4
   8128a:	4b12      	ldr	r3, [pc, #72]	; (812d4 <prvIdleTask+0x70>)
   8128c:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
   8128e:	4b12      	ldr	r3, [pc, #72]	; (812d8 <prvIdleTask+0x74>)
   81290:	681a      	ldr	r2, [r3, #0]
   81292:	3a01      	subs	r2, #1
   81294:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
   81296:	682b      	ldr	r3, [r5, #0]
   81298:	3b01      	subs	r3, #1
   8129a:	602b      	str	r3, [r5, #0]
				}
				taskEXIT_CRITICAL();
   8129c:	4b0f      	ldr	r3, [pc, #60]	; (812dc <prvIdleTask+0x78>)
   8129e:	4798      	blx	r3
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
   812a0:	6b20      	ldr	r0, [r4, #48]	; 0x30
   812a2:	4f0f      	ldr	r7, [pc, #60]	; (812e0 <prvIdleTask+0x7c>)
   812a4:	47b8      	blx	r7
		vPortFree( pxTCB );
   812a6:	4620      	mov	r0, r4
   812a8:	47b8      	blx	r7
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   812aa:	682b      	ldr	r3, [r5, #0]
   812ac:	2b00      	cmp	r3, #0
   812ae:	d1df      	bne.n	81270 <prvIdleTask+0xc>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
   812b0:	6833      	ldr	r3, [r6, #0]
   812b2:	2b01      	cmp	r3, #1
   812b4:	d9f9      	bls.n	812aa <prvIdleTask+0x46>
			{
				taskYIELD();
   812b6:	47c0      	blx	r8
   812b8:	e7f7      	b.n	812aa <prvIdleTask+0x46>
   812ba:	bf00      	nop
   812bc:	2007aa3c 	.word	0x2007aa3c
   812c0:	2007aa6c 	.word	0x2007aa6c
   812c4:	00080fc5 	.word	0x00080fc5
   812c8:	2007aa40 	.word	0x2007aa40
   812cc:	00081115 	.word	0x00081115
   812d0:	000804f1 	.word	0x000804f1
   812d4:	00080459 	.word	0x00080459
   812d8:	2007ab14 	.word	0x2007ab14
   812dc:	00080511 	.word	0x00080511
   812e0:	00080701 	.word	0x00080701
   812e4:	000804d1 	.word	0x000804d1

000812e8 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   812e8:	b508      	push	{r3, lr}
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
   812ea:	4b1d      	ldr	r3, [pc, #116]	; (81360 <vTaskSwitchContext+0x78>)
   812ec:	681b      	ldr	r3, [r3, #0]
   812ee:	b95b      	cbnz	r3, 81308 <vTaskSwitchContext+0x20>
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   812f0:	4b1c      	ldr	r3, [pc, #112]	; (81364 <vTaskSwitchContext+0x7c>)
   812f2:	681b      	ldr	r3, [r3, #0]
   812f4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   812f8:	009b      	lsls	r3, r3, #2
   812fa:	4a1b      	ldr	r2, [pc, #108]	; (81368 <vTaskSwitchContext+0x80>)
   812fc:	58d3      	ldr	r3, [r2, r3]
   812fe:	b9cb      	cbnz	r3, 81334 <vTaskSwitchContext+0x4c>
   81300:	4b18      	ldr	r3, [pc, #96]	; (81364 <vTaskSwitchContext+0x7c>)
   81302:	681b      	ldr	r3, [r3, #0]
   81304:	b953      	cbnz	r3, 8131c <vTaskSwitchContext+0x34>
   81306:	e005      	b.n	81314 <vTaskSwitchContext+0x2c>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
   81308:	2201      	movs	r2, #1
   8130a:	4b18      	ldr	r3, [pc, #96]	; (8136c <vTaskSwitchContext+0x84>)
   8130c:	601a      	str	r2, [r3, #0]
   8130e:	bd08      	pop	{r3, pc}
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   81310:	681a      	ldr	r2, [r3, #0]
   81312:	b92a      	cbnz	r2, 81320 <vTaskSwitchContext+0x38>
   81314:	4b16      	ldr	r3, [pc, #88]	; (81370 <vTaskSwitchContext+0x88>)
   81316:	4798      	blx	r3
   81318:	bf00      	nop
   8131a:	e7fd      	b.n	81318 <vTaskSwitchContext+0x30>
   8131c:	4b11      	ldr	r3, [pc, #68]	; (81364 <vTaskSwitchContext+0x7c>)
   8131e:	4912      	ldr	r1, [pc, #72]	; (81368 <vTaskSwitchContext+0x80>)
   81320:	681a      	ldr	r2, [r3, #0]
   81322:	3a01      	subs	r2, #1
   81324:	601a      	str	r2, [r3, #0]
   81326:	681a      	ldr	r2, [r3, #0]
   81328:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   8132c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
   81330:	2a00      	cmp	r2, #0
   81332:	d0ed      	beq.n	81310 <vTaskSwitchContext+0x28>
   81334:	4b0b      	ldr	r3, [pc, #44]	; (81364 <vTaskSwitchContext+0x7c>)
   81336:	681b      	ldr	r3, [r3, #0]
   81338:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   8133c:	4a0a      	ldr	r2, [pc, #40]	; (81368 <vTaskSwitchContext+0x80>)
   8133e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   81342:	685a      	ldr	r2, [r3, #4]
   81344:	6852      	ldr	r2, [r2, #4]
   81346:	605a      	str	r2, [r3, #4]
   81348:	f103 0108 	add.w	r1, r3, #8
   8134c:	428a      	cmp	r2, r1
   8134e:	bf04      	itt	eq
   81350:	6852      	ldreq	r2, [r2, #4]
   81352:	605a      	streq	r2, [r3, #4]
   81354:	685b      	ldr	r3, [r3, #4]
   81356:	68da      	ldr	r2, [r3, #12]
   81358:	4b06      	ldr	r3, [pc, #24]	; (81374 <vTaskSwitchContext+0x8c>)
   8135a:	601a      	str	r2, [r3, #0]
   8135c:	bd08      	pop	{r3, pc}
   8135e:	bf00      	nop
   81360:	2007aad0 	.word	0x2007aad0
   81364:	2007aa68 	.word	0x2007aa68
   81368:	2007aa6c 	.word	0x2007aa6c
   8136c:	2007ab10 	.word	0x2007ab10
   81370:	000804e1 	.word	0x000804e1
   81374:	2007aad4 	.word	0x2007aad4

00081378 <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
   81378:	b538      	push	{r3, r4, r5, lr}
   8137a:	460c      	mov	r4, r1
portTickType xTimeToWake;

	configASSERT( pxEventList );
   8137c:	b918      	cbnz	r0, 81386 <vTaskPlaceOnEventList+0xe>
   8137e:	4b0e      	ldr	r3, [pc, #56]	; (813b8 <vTaskPlaceOnEventList+0x40>)
   81380:	4798      	blx	r3
   81382:	bf00      	nop
   81384:	e7fd      	b.n	81382 <vTaskPlaceOnEventList+0xa>
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   81386:	4d0d      	ldr	r5, [pc, #52]	; (813bc <vTaskPlaceOnEventList+0x44>)
   81388:	6829      	ldr	r1, [r5, #0]
   8138a:	3118      	adds	r1, #24
   8138c:	4b0c      	ldr	r3, [pc, #48]	; (813c0 <vTaskPlaceOnEventList+0x48>)
   8138e:	4798      	blx	r3

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   81390:	6828      	ldr	r0, [r5, #0]
   81392:	3004      	adds	r0, #4
   81394:	4b0b      	ldr	r3, [pc, #44]	; (813c4 <vTaskPlaceOnEventList+0x4c>)
   81396:	4798      	blx	r3
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
   81398:	f1b4 3fff 	cmp.w	r4, #4294967295
   8139c:	d105      	bne.n	813aa <vTaskPlaceOnEventList+0x32>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   8139e:	6829      	ldr	r1, [r5, #0]
   813a0:	4809      	ldr	r0, [pc, #36]	; (813c8 <vTaskPlaceOnEventList+0x50>)
   813a2:	3104      	adds	r1, #4
   813a4:	4b09      	ldr	r3, [pc, #36]	; (813cc <vTaskPlaceOnEventList+0x54>)
   813a6:	4798      	blx	r3
   813a8:	bd38      	pop	{r3, r4, r5, pc}
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
   813aa:	4b09      	ldr	r3, [pc, #36]	; (813d0 <vTaskPlaceOnEventList+0x58>)
   813ac:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
   813ae:	4420      	add	r0, r4
   813b0:	4b08      	ldr	r3, [pc, #32]	; (813d4 <vTaskPlaceOnEventList+0x5c>)
   813b2:	4798      	blx	r3
   813b4:	bd38      	pop	{r3, r4, r5, pc}
   813b6:	bf00      	nop
   813b8:	000804e1 	.word	0x000804e1
   813bc:	2007aad4 	.word	0x2007aad4
   813c0:	0008041d 	.word	0x0008041d
   813c4:	00080459 	.word	0x00080459
   813c8:	2007aa20 	.word	0x2007aa20
   813cc:	00080401 	.word	0x00080401
   813d0:	2007aaf0 	.word	0x2007aaf0
   813d4:	00080c75 	.word	0x00080c75

000813d8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait )
	{
   813d8:	b538      	push	{r3, r4, r5, lr}
   813da:	460d      	mov	r5, r1
	portTickType xTimeToWake;

		configASSERT( pxEventList );
   813dc:	b918      	cbnz	r0, 813e6 <vTaskPlaceOnEventListRestricted+0xe>
   813de:	4b09      	ldr	r3, [pc, #36]	; (81404 <vTaskPlaceOnEventListRestricted+0x2c>)
   813e0:	4798      	blx	r3
   813e2:	bf00      	nop
   813e4:	e7fd      	b.n	813e2 <vTaskPlaceOnEventListRestricted+0xa>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   813e6:	4c08      	ldr	r4, [pc, #32]	; (81408 <vTaskPlaceOnEventListRestricted+0x30>)
   813e8:	6821      	ldr	r1, [r4, #0]
   813ea:	3118      	adds	r1, #24
   813ec:	4b07      	ldr	r3, [pc, #28]	; (8140c <vTaskPlaceOnEventListRestricted+0x34>)
   813ee:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   813f0:	6820      	ldr	r0, [r4, #0]
   813f2:	3004      	adds	r0, #4
   813f4:	4b06      	ldr	r3, [pc, #24]	; (81410 <vTaskPlaceOnEventListRestricted+0x38>)
   813f6:	4798      	blx	r3
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
   813f8:	4b06      	ldr	r3, [pc, #24]	; (81414 <vTaskPlaceOnEventListRestricted+0x3c>)
   813fa:	6818      	ldr	r0, [r3, #0]
		
		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
   813fc:	4428      	add	r0, r5
   813fe:	4b06      	ldr	r3, [pc, #24]	; (81418 <vTaskPlaceOnEventListRestricted+0x40>)
   81400:	4798      	blx	r3
   81402:	bd38      	pop	{r3, r4, r5, pc}
   81404:	000804e1 	.word	0x000804e1
   81408:	2007aad4 	.word	0x2007aad4
   8140c:	00080401 	.word	0x00080401
   81410:	00080459 	.word	0x00080459
   81414:	2007aaf0 	.word	0x2007aaf0
   81418:	00080c75 	.word	0x00080c75

0008141c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
   8141c:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   8141e:	68c3      	ldr	r3, [r0, #12]
   81420:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
   81422:	b91c      	cbnz	r4, 8142c <xTaskRemoveFromEventList+0x10>
   81424:	4b16      	ldr	r3, [pc, #88]	; (81480 <xTaskRemoveFromEventList+0x64>)
   81426:	4798      	blx	r3
   81428:	bf00      	nop
   8142a:	e7fd      	b.n	81428 <xTaskRemoveFromEventList+0xc>
	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   8142c:	f104 0518 	add.w	r5, r4, #24
   81430:	4628      	mov	r0, r5
   81432:	4b14      	ldr	r3, [pc, #80]	; (81484 <xTaskRemoveFromEventList+0x68>)
   81434:	4798      	blx	r3

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   81436:	4b14      	ldr	r3, [pc, #80]	; (81488 <xTaskRemoveFromEventList+0x6c>)
   81438:	681b      	ldr	r3, [r3, #0]
   8143a:	b99b      	cbnz	r3, 81464 <xTaskRemoveFromEventList+0x48>
	{
		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
   8143c:	1d25      	adds	r5, r4, #4
   8143e:	4628      	mov	r0, r5
   81440:	4b10      	ldr	r3, [pc, #64]	; (81484 <xTaskRemoveFromEventList+0x68>)
   81442:	4798      	blx	r3
		prvAddTaskToReadyQueue( pxUnblockedTCB );
   81444:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   81446:	4a11      	ldr	r2, [pc, #68]	; (8148c <xTaskRemoveFromEventList+0x70>)
   81448:	6812      	ldr	r2, [r2, #0]
   8144a:	4293      	cmp	r3, r2
   8144c:	bf84      	itt	hi
   8144e:	4a0f      	ldrhi	r2, [pc, #60]	; (8148c <xTaskRemoveFromEventList+0x70>)
   81450:	6013      	strhi	r3, [r2, #0]
   81452:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81456:	480e      	ldr	r0, [pc, #56]	; (81490 <xTaskRemoveFromEventList+0x74>)
   81458:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   8145c:	4629      	mov	r1, r5
   8145e:	4b0d      	ldr	r3, [pc, #52]	; (81494 <xTaskRemoveFromEventList+0x78>)
   81460:	4798      	blx	r3
   81462:	e003      	b.n	8146c <xTaskRemoveFromEventList+0x50>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   81464:	480c      	ldr	r0, [pc, #48]	; (81498 <xTaskRemoveFromEventList+0x7c>)
   81466:	4629      	mov	r1, r5
   81468:	4b0a      	ldr	r3, [pc, #40]	; (81494 <xTaskRemoveFromEventList+0x78>)
   8146a:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
   8146c:	4b0b      	ldr	r3, [pc, #44]	; (8149c <xTaskRemoveFromEventList+0x80>)
   8146e:	681b      	ldr	r3, [r3, #0]
   81470:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   81472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
   81474:	4298      	cmp	r0, r3
   81476:	bf34      	ite	cc
   81478:	2000      	movcc	r0, #0
   8147a:	2001      	movcs	r0, #1
   8147c:	bd38      	pop	{r3, r4, r5, pc}
   8147e:	bf00      	nop
   81480:	000804e1 	.word	0x000804e1
   81484:	00080459 	.word	0x00080459
   81488:	2007aad0 	.word	0x2007aad0
   8148c:	2007aa68 	.word	0x2007aa68
   81490:	2007aa6c 	.word	0x2007aa6c
   81494:	00080401 	.word	0x00080401
   81498:	2007aad8 	.word	0x2007aad8
   8149c:	2007aad4 	.word	0x2007aad4

000814a0 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
   814a0:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
   814a2:	b918      	cbnz	r0, 814ac <vTaskSetTimeOutState+0xc>
   814a4:	4b05      	ldr	r3, [pc, #20]	; (814bc <vTaskSetTimeOutState+0x1c>)
   814a6:	4798      	blx	r3
   814a8:	bf00      	nop
   814aa:	e7fd      	b.n	814a8 <vTaskSetTimeOutState+0x8>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   814ac:	4a04      	ldr	r2, [pc, #16]	; (814c0 <vTaskSetTimeOutState+0x20>)
   814ae:	6812      	ldr	r2, [r2, #0]
   814b0:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   814b2:	4a04      	ldr	r2, [pc, #16]	; (814c4 <vTaskSetTimeOutState+0x24>)
   814b4:	6812      	ldr	r2, [r2, #0]
   814b6:	6042      	str	r2, [r0, #4]
   814b8:	bd08      	pop	{r3, pc}
   814ba:	bf00      	nop
   814bc:	000804e1 	.word	0x000804e1
   814c0:	2007aaec 	.word	0x2007aaec
   814c4:	2007aaf0 	.word	0x2007aaf0

000814c8 <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
   814c8:	b538      	push	{r3, r4, r5, lr}
   814ca:	460d      	mov	r5, r1
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
   814cc:	4604      	mov	r4, r0
   814ce:	b918      	cbnz	r0, 814d8 <xTaskCheckForTimeOut+0x10>
   814d0:	4b18      	ldr	r3, [pc, #96]	; (81534 <xTaskCheckForTimeOut+0x6c>)
   814d2:	4798      	blx	r3
   814d4:	bf00      	nop
   814d6:	e7fd      	b.n	814d4 <xTaskCheckForTimeOut+0xc>
	configASSERT( pxTicksToWait );
   814d8:	b919      	cbnz	r1, 814e2 <xTaskCheckForTimeOut+0x1a>
   814da:	4b16      	ldr	r3, [pc, #88]	; (81534 <xTaskCheckForTimeOut+0x6c>)
   814dc:	4798      	blx	r3
   814de:	bf00      	nop
   814e0:	e7fd      	b.n	814de <xTaskCheckForTimeOut+0x16>

	taskENTER_CRITICAL();
   814e2:	4b15      	ldr	r3, [pc, #84]	; (81538 <xTaskCheckForTimeOut+0x70>)
   814e4:	4798      	blx	r3
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
   814e6:	682b      	ldr	r3, [r5, #0]
   814e8:	f1b3 3fff 	cmp.w	r3, #4294967295
   814ec:	d019      	beq.n	81522 <xTaskCheckForTimeOut+0x5a>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
   814ee:	4a13      	ldr	r2, [pc, #76]	; (8153c <xTaskCheckForTimeOut+0x74>)
   814f0:	6811      	ldr	r1, [r2, #0]
   814f2:	6822      	ldr	r2, [r4, #0]
   814f4:	428a      	cmp	r2, r1
   814f6:	d004      	beq.n	81502 <xTaskCheckForTimeOut+0x3a>
   814f8:	4a11      	ldr	r2, [pc, #68]	; (81540 <xTaskCheckForTimeOut+0x78>)
   814fa:	6811      	ldr	r1, [r2, #0]
   814fc:	6862      	ldr	r2, [r4, #4]
   814fe:	428a      	cmp	r2, r1
   81500:	d911      	bls.n	81526 <xTaskCheckForTimeOut+0x5e>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
   81502:	4a0f      	ldr	r2, [pc, #60]	; (81540 <xTaskCheckForTimeOut+0x78>)
   81504:	6811      	ldr	r1, [r2, #0]
   81506:	6862      	ldr	r2, [r4, #4]
   81508:	1a89      	subs	r1, r1, r2
   8150a:	428b      	cmp	r3, r1
   8150c:	d90d      	bls.n	8152a <xTaskCheckForTimeOut+0x62>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
   8150e:	490c      	ldr	r1, [pc, #48]	; (81540 <xTaskCheckForTimeOut+0x78>)
   81510:	6809      	ldr	r1, [r1, #0]
   81512:	1a52      	subs	r2, r2, r1
   81514:	4413      	add	r3, r2
   81516:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
   81518:	4620      	mov	r0, r4
   8151a:	4b0a      	ldr	r3, [pc, #40]	; (81544 <xTaskCheckForTimeOut+0x7c>)
   8151c:	4798      	blx	r3
			xReturn = pdFALSE;
   8151e:	2400      	movs	r4, #0
   81520:	e004      	b.n	8152c <xTaskCheckForTimeOut+0x64>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
   81522:	2400      	movs	r4, #0
   81524:	e002      	b.n	8152c <xTaskCheckForTimeOut+0x64>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
   81526:	2401      	movs	r4, #1
   81528:	e000      	b.n	8152c <xTaskCheckForTimeOut+0x64>
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
   8152a:	2401      	movs	r4, #1
		}
	}
	taskEXIT_CRITICAL();
   8152c:	4b06      	ldr	r3, [pc, #24]	; (81548 <xTaskCheckForTimeOut+0x80>)
   8152e:	4798      	blx	r3

	return xReturn;
}
   81530:	4620      	mov	r0, r4
   81532:	bd38      	pop	{r3, r4, r5, pc}
   81534:	000804e1 	.word	0x000804e1
   81538:	000804f1 	.word	0x000804f1
   8153c:	2007aaec 	.word	0x2007aaec
   81540:	2007aaf0 	.word	0x2007aaf0
   81544:	000814a1 	.word	0x000814a1
   81548:	00080511 	.word	0x00080511

0008154c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xMissedYield = pdTRUE;
   8154c:	2201      	movs	r2, #1
   8154e:	4b01      	ldr	r3, [pc, #4]	; (81554 <vTaskMissedYield+0x8>)
   81550:	601a      	str	r2, [r3, #0]
   81552:	4770      	bx	lr
   81554:	2007ab10 	.word	0x2007ab10

00081558 <xTaskGetCurrentTaskHandle>:
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
   81558:	4b01      	ldr	r3, [pc, #4]	; (81560 <xTaskGetCurrentTaskHandle+0x8>)
   8155a:	6818      	ldr	r0, [r3, #0]

		return xReturn;
	}
   8155c:	4770      	bx	lr
   8155e:	bf00      	nop
   81560:	2007aad4 	.word	0x2007aad4

00081564 <xTaskGetSchedulerState>:

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
   81564:	4b05      	ldr	r3, [pc, #20]	; (8157c <xTaskGetSchedulerState+0x18>)
   81566:	681b      	ldr	r3, [r3, #0]
   81568:	b133      	cbz	r3, 81578 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   8156a:	4b05      	ldr	r3, [pc, #20]	; (81580 <xTaskGetSchedulerState+0x1c>)
   8156c:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
   8156e:	2b00      	cmp	r3, #0
   81570:	bf14      	ite	ne
   81572:	2002      	movne	r0, #2
   81574:	2001      	moveq	r0, #1
   81576:	4770      	bx	lr
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   81578:	2000      	movs	r0, #0
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
   8157a:	4770      	bx	lr
   8157c:	2007aa38 	.word	0x2007aa38
   81580:	2007aad0 	.word	0x2007aad0

00081584 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
   81584:	b538      	push	{r3, r4, r5, lr}
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
   81586:	4604      	mov	r4, r0
   81588:	2800      	cmp	r0, #0
   8158a:	d02e      	beq.n	815ea <vTaskPriorityInherit+0x66>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
   8158c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   8158e:	4a17      	ldr	r2, [pc, #92]	; (815ec <vTaskPriorityInherit+0x68>)
   81590:	6812      	ldr	r2, [r2, #0]
   81592:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
   81594:	4293      	cmp	r3, r2
   81596:	d228      	bcs.n	815ea <vTaskPriorityInherit+0x66>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
   81598:	4a14      	ldr	r2, [pc, #80]	; (815ec <vTaskPriorityInherit+0x68>)
   8159a:	6812      	ldr	r2, [r2, #0]
   8159c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
   8159e:	f1c2 0205 	rsb	r2, r2, #5
   815a2:	6182      	str	r2, [r0, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
   815a4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   815a8:	4a11      	ldr	r2, [pc, #68]	; (815f0 <vTaskPriorityInherit+0x6c>)
   815aa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   815ae:	6942      	ldr	r2, [r0, #20]
   815b0:	429a      	cmp	r2, r3
   815b2:	d116      	bne.n	815e2 <vTaskPriorityInherit+0x5e>
				{
					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   815b4:	1d05      	adds	r5, r0, #4
   815b6:	4628      	mov	r0, r5
   815b8:	4b0e      	ldr	r3, [pc, #56]	; (815f4 <vTaskPriorityInherit+0x70>)
   815ba:	4798      	blx	r3
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   815bc:	4b0b      	ldr	r3, [pc, #44]	; (815ec <vTaskPriorityInherit+0x68>)
   815be:	681b      	ldr	r3, [r3, #0]
   815c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   815c2:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyQueue( pxTCB );
   815c4:	4a0c      	ldr	r2, [pc, #48]	; (815f8 <vTaskPriorityInherit+0x74>)
   815c6:	6812      	ldr	r2, [r2, #0]
   815c8:	4293      	cmp	r3, r2
   815ca:	bf84      	itt	hi
   815cc:	4a0a      	ldrhi	r2, [pc, #40]	; (815f8 <vTaskPriorityInherit+0x74>)
   815ce:	6013      	strhi	r3, [r2, #0]
   815d0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   815d4:	4806      	ldr	r0, [pc, #24]	; (815f0 <vTaskPriorityInherit+0x6c>)
   815d6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   815da:	4629      	mov	r1, r5
   815dc:	4b07      	ldr	r3, [pc, #28]	; (815fc <vTaskPriorityInherit+0x78>)
   815de:	4798      	blx	r3
   815e0:	bd38      	pop	{r3, r4, r5, pc}
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   815e2:	4b02      	ldr	r3, [pc, #8]	; (815ec <vTaskPriorityInherit+0x68>)
   815e4:	681b      	ldr	r3, [r3, #0]
   815e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   815e8:	62c3      	str	r3, [r0, #44]	; 0x2c
   815ea:	bd38      	pop	{r3, r4, r5, pc}
   815ec:	2007aad4 	.word	0x2007aad4
   815f0:	2007aa6c 	.word	0x2007aa6c
   815f4:	00080459 	.word	0x00080459
   815f8:	2007aa68 	.word	0x2007aa68
   815fc:	00080401 	.word	0x00080401

00081600 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
   81600:	b538      	push	{r3, r4, r5, lr}
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
   81602:	4604      	mov	r4, r0
   81604:	b1d0      	cbz	r0, 8163c <vTaskPriorityDisinherit+0x3c>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   81606:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   81608:	6c83      	ldr	r3, [r0, #72]	; 0x48
   8160a:	429a      	cmp	r2, r3
   8160c:	d016      	beq.n	8163c <vTaskPriorityDisinherit+0x3c>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   8160e:	1d05      	adds	r5, r0, #4
   81610:	4628      	mov	r0, r5
   81612:	4b0b      	ldr	r3, [pc, #44]	; (81640 <vTaskPriorityDisinherit+0x40>)
   81614:	4798      	blx	r3
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
   81616:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   81618:	62e3      	str	r3, [r4, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
   8161a:	f1c3 0205 	rsb	r2, r3, #5
   8161e:	61a2      	str	r2, [r4, #24]
				prvAddTaskToReadyQueue( pxTCB );
   81620:	4a08      	ldr	r2, [pc, #32]	; (81644 <vTaskPriorityDisinherit+0x44>)
   81622:	6812      	ldr	r2, [r2, #0]
   81624:	4293      	cmp	r3, r2
   81626:	bf84      	itt	hi
   81628:	4a06      	ldrhi	r2, [pc, #24]	; (81644 <vTaskPriorityDisinherit+0x44>)
   8162a:	6013      	strhi	r3, [r2, #0]
   8162c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81630:	4805      	ldr	r0, [pc, #20]	; (81648 <vTaskPriorityDisinherit+0x48>)
   81632:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   81636:	4629      	mov	r1, r5
   81638:	4b04      	ldr	r3, [pc, #16]	; (8164c <vTaskPriorityDisinherit+0x4c>)
   8163a:	4798      	blx	r3
   8163c:	bd38      	pop	{r3, r4, r5, pc}
   8163e:	bf00      	nop
   81640:	00080459 	.word	0x00080459
   81644:	2007aa68 	.word	0x2007aa68
   81648:	2007aa6c 	.word	0x2007aa6c
   8164c:	00080401 	.word	0x00080401

00081650 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
   81650:	b510      	push	{r4, lr}
   81652:	4604      	mov	r4, r0
portBASE_TYPE xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   81654:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   81656:	6120      	str	r0, [r4, #16]

	if( xNextExpiryTime <= xTimeNow )
   81658:	4291      	cmp	r1, r2
   8165a:	d80a      	bhi.n	81672 <prvInsertTimerInActiveList+0x22>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
   8165c:	1ad2      	subs	r2, r2, r3
   8165e:	6981      	ldr	r1, [r0, #24]
   81660:	428a      	cmp	r2, r1
   81662:	d211      	bcs.n	81688 <prvInsertTimerInActiveList+0x38>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   81664:	4b0a      	ldr	r3, [pc, #40]	; (81690 <prvInsertTimerInActiveList+0x40>)
   81666:	6818      	ldr	r0, [r3, #0]
   81668:	1d21      	adds	r1, r4, #4
   8166a:	4b0a      	ldr	r3, [pc, #40]	; (81694 <prvInsertTimerInActiveList+0x44>)
   8166c:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
   8166e:	2000      	movs	r0, #0
   81670:	bd10      	pop	{r4, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   81672:	429a      	cmp	r2, r3
   81674:	d201      	bcs.n	8167a <prvInsertTimerInActiveList+0x2a>
   81676:	4299      	cmp	r1, r3
   81678:	d208      	bcs.n	8168c <prvInsertTimerInActiveList+0x3c>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   8167a:	4b07      	ldr	r3, [pc, #28]	; (81698 <prvInsertTimerInActiveList+0x48>)
   8167c:	6818      	ldr	r0, [r3, #0]
   8167e:	1d21      	adds	r1, r4, #4
   81680:	4b04      	ldr	r3, [pc, #16]	; (81694 <prvInsertTimerInActiveList+0x44>)
   81682:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
   81684:	2000      	movs	r0, #0
   81686:	bd10      	pop	{r4, pc}
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   81688:	2001      	movs	r0, #1
   8168a:	bd10      	pop	{r4, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   8168c:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
   8168e:	bd10      	pop	{r4, pc}
   81690:	2007ab50 	.word	0x2007ab50
   81694:	0008041d 	.word	0x0008041d
   81698:	2007ab1c 	.word	0x2007ab1c

0008169c <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   8169c:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   8169e:	4b0d      	ldr	r3, [pc, #52]	; (816d4 <prvCheckForValidListAndQueue+0x38>)
   816a0:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   816a2:	4b0d      	ldr	r3, [pc, #52]	; (816d8 <prvCheckForValidListAndQueue+0x3c>)
   816a4:	681b      	ldr	r3, [r3, #0]
   816a6:	b98b      	cbnz	r3, 816cc <prvCheckForValidListAndQueue+0x30>
		{
			vListInitialise( &xActiveTimerList1 );
   816a8:	4d0c      	ldr	r5, [pc, #48]	; (816dc <prvCheckForValidListAndQueue+0x40>)
   816aa:	4628      	mov	r0, r5
   816ac:	4e0c      	ldr	r6, [pc, #48]	; (816e0 <prvCheckForValidListAndQueue+0x44>)
   816ae:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
   816b0:	4c0c      	ldr	r4, [pc, #48]	; (816e4 <prvCheckForValidListAndQueue+0x48>)
   816b2:	4620      	mov	r0, r4
   816b4:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
   816b6:	4b0c      	ldr	r3, [pc, #48]	; (816e8 <prvCheckForValidListAndQueue+0x4c>)
   816b8:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   816ba:	4b0c      	ldr	r3, [pc, #48]	; (816ec <prvCheckForValidListAndQueue+0x50>)
   816bc:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
   816be:	2005      	movs	r0, #5
   816c0:	210c      	movs	r1, #12
   816c2:	2200      	movs	r2, #0
   816c4:	4b0a      	ldr	r3, [pc, #40]	; (816f0 <prvCheckForValidListAndQueue+0x54>)
   816c6:	4798      	blx	r3
   816c8:	4b03      	ldr	r3, [pc, #12]	; (816d8 <prvCheckForValidListAndQueue+0x3c>)
   816ca:	6018      	str	r0, [r3, #0]
		}
	}
	taskEXIT_CRITICAL();
   816cc:	4b09      	ldr	r3, [pc, #36]	; (816f4 <prvCheckForValidListAndQueue+0x58>)
   816ce:	4798      	blx	r3
   816d0:	bd70      	pop	{r4, r5, r6, pc}
   816d2:	bf00      	nop
   816d4:	000804f1 	.word	0x000804f1
   816d8:	2007ab4c 	.word	0x2007ab4c
   816dc:	2007ab20 	.word	0x2007ab20
   816e0:	000803e1 	.word	0x000803e1
   816e4:	2007ab34 	.word	0x2007ab34
   816e8:	2007ab1c 	.word	0x2007ab1c
   816ec:	2007ab50 	.word	0x2007ab50
   816f0:	000808c9 	.word	0x000808c9
   816f4:	00080511 	.word	0x00080511

000816f8 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
   816f8:	b510      	push	{r4, lr}
   816fa:	b084      	sub	sp, #16

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   816fc:	4b0b      	ldr	r3, [pc, #44]	; (8172c <xTimerCreateTimerTask+0x34>)
   816fe:	4798      	blx	r3

	if( xTimerQueue != NULL )
   81700:	4b0b      	ldr	r3, [pc, #44]	; (81730 <xTimerCreateTimerTask+0x38>)
   81702:	681b      	ldr	r3, [r3, #0]
   81704:	b163      	cbz	r3, 81720 <xTimerCreateTimerTask+0x28>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
   81706:	2304      	movs	r3, #4
   81708:	9300      	str	r3, [sp, #0]
   8170a:	2300      	movs	r3, #0
   8170c:	9301      	str	r3, [sp, #4]
   8170e:	9302      	str	r3, [sp, #8]
   81710:	9303      	str	r3, [sp, #12]
   81712:	4808      	ldr	r0, [pc, #32]	; (81734 <xTimerCreateTimerTask+0x3c>)
   81714:	4908      	ldr	r1, [pc, #32]	; (81738 <xTimerCreateTimerTask+0x40>)
   81716:	f44f 7282 	mov.w	r2, #260	; 0x104
   8171a:	4c08      	ldr	r4, [pc, #32]	; (8173c <xTimerCreateTimerTask+0x44>)
   8171c:	47a0      	blx	r4
		}
		#endif
	}

	configASSERT( xReturn );
   8171e:	b918      	cbnz	r0, 81728 <xTimerCreateTimerTask+0x30>
   81720:	4b07      	ldr	r3, [pc, #28]	; (81740 <xTimerCreateTimerTask+0x48>)
   81722:	4798      	blx	r3
   81724:	bf00      	nop
   81726:	e7fd      	b.n	81724 <xTimerCreateTimerTask+0x2c>
	return xReturn;
}
   81728:	b004      	add	sp, #16
   8172a:	bd10      	pop	{r4, pc}
   8172c:	0008169d 	.word	0x0008169d
   81730:	2007ab4c 	.word	0x2007ab4c
   81734:	0008184d 	.word	0x0008184d
   81738:	00085a50 	.word	0x00085a50
   8173c:	00080ccd 	.word	0x00080ccd
   81740:	000804e1 	.word	0x000804e1

00081744 <xTimerGenericCommand>:
	return ( xTimerHandle ) pxNewTimer;
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
   81744:	b510      	push	{r4, lr}
   81746:	b084      	sub	sp, #16
portBASE_TYPE xReturn = pdFAIL;
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   81748:	4c0f      	ldr	r4, [pc, #60]	; (81788 <xTimerGenericCommand+0x44>)
   8174a:	6824      	ldr	r4, [r4, #0]
   8174c:	b1c4      	cbz	r4, 81780 <xTimerGenericCommand+0x3c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   8174e:	9101      	str	r1, [sp, #4]
		xMessage.xMessageValue = xOptionalValue;
   81750:	9202      	str	r2, [sp, #8]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
   81752:	9003      	str	r0, [sp, #12]

		if( pxHigherPriorityTaskWoken == NULL )
   81754:	b96b      	cbnz	r3, 81772 <xTimerGenericCommand+0x2e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   81756:	4b0d      	ldr	r3, [pc, #52]	; (8178c <xTimerGenericCommand+0x48>)
   81758:	4798      	blx	r3
   8175a:	2801      	cmp	r0, #1
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
   8175c:	4b0a      	ldr	r3, [pc, #40]	; (81788 <xTimerGenericCommand+0x44>)
   8175e:	6818      	ldr	r0, [r3, #0]
   81760:	a901      	add	r1, sp, #4
   81762:	bf07      	ittee	eq
   81764:	9a06      	ldreq	r2, [sp, #24]
   81766:	2300      	moveq	r3, #0
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   81768:	2200      	movne	r2, #0
   8176a:	4613      	movne	r3, r2
   8176c:	4c08      	ldr	r4, [pc, #32]	; (81790 <xTimerGenericCommand+0x4c>)
   8176e:	47a0      	blx	r4
   81770:	e007      	b.n	81782 <xTimerGenericCommand+0x3e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   81772:	4620      	mov	r0, r4
   81774:	a901      	add	r1, sp, #4
   81776:	461a      	mov	r2, r3
   81778:	2300      	movs	r3, #0
   8177a:	4c06      	ldr	r4, [pc, #24]	; (81794 <xTimerGenericCommand+0x50>)
   8177c:	47a0      	blx	r4
   8177e:	e000      	b.n	81782 <xTimerGenericCommand+0x3e>
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
portBASE_TYPE xReturn = pdFAIL;
   81780:	2000      	movs	r0, #0

		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}

	return xReturn;
}
   81782:	b004      	add	sp, #16
   81784:	bd10      	pop	{r4, pc}
   81786:	bf00      	nop
   81788:	2007ab4c 	.word	0x2007ab4c
   8178c:	00081565 	.word	0x00081565
   81790:	00080921 	.word	0x00080921
   81794:	00080a3d 	.word	0x00080a3d

00081798 <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
   81798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8179c:	b082      	sub	sp, #8
   8179e:	4681      	mov	r9, r0
portTickType xTimeNow;
PRIVILEGED_DATA static portTickType xLastTime = ( portTickType ) 0U;

	xTimeNow = xTaskGetTickCount();
   817a0:	4b22      	ldr	r3, [pc, #136]	; (8182c <prvSampleTimeNow+0x94>)
   817a2:	4798      	blx	r3
   817a4:	4680      	mov	r8, r0

	if( xTimeNow < xLastTime )
   817a6:	4b22      	ldr	r3, [pc, #136]	; (81830 <prvSampleTimeNow+0x98>)
   817a8:	681b      	ldr	r3, [r3, #0]
   817aa:	4298      	cmp	r0, r3
   817ac:	d234      	bcs.n	81818 <prvSampleTimeNow+0x80>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   817ae:	4e21      	ldr	r6, [pc, #132]	; (81834 <prvSampleTimeNow+0x9c>)
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
		uxListRemove( &( pxTimer->xTimerListItem ) );
   817b0:	4f21      	ldr	r7, [pc, #132]	; (81838 <prvSampleTimeNow+0xa0>)
   817b2:	e024      	b.n	817fe <prvSampleTimeNow+0x66>
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   817b4:	68da      	ldr	r2, [r3, #12]
   817b6:	f8d2 a000 	ldr.w	sl, [r2]

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   817ba:	68db      	ldr	r3, [r3, #12]
   817bc:	68dc      	ldr	r4, [r3, #12]
		uxListRemove( &( pxTimer->xTimerListItem ) );
   817be:	1d25      	adds	r5, r4, #4
   817c0:	4628      	mov	r0, r5
   817c2:	47b8      	blx	r7

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   817c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   817c6:	4620      	mov	r0, r4
   817c8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   817ca:	69e3      	ldr	r3, [r4, #28]
   817cc:	2b01      	cmp	r3, #1
   817ce:	d116      	bne.n	817fe <prvSampleTimeNow+0x66>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   817d0:	69a3      	ldr	r3, [r4, #24]
   817d2:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
   817d4:	4553      	cmp	r3, sl
   817d6:	d906      	bls.n	817e6 <prvSampleTimeNow+0x4e>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   817d8:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   817da:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   817dc:	6830      	ldr	r0, [r6, #0]
   817de:	4629      	mov	r1, r5
   817e0:	4b16      	ldr	r3, [pc, #88]	; (8183c <prvSampleTimeNow+0xa4>)
   817e2:	4798      	blx	r3
   817e4:	e00b      	b.n	817fe <prvSampleTimeNow+0x66>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   817e6:	2300      	movs	r3, #0
   817e8:	9300      	str	r3, [sp, #0]
   817ea:	4620      	mov	r0, r4
   817ec:	4619      	mov	r1, r3
   817ee:	4652      	mov	r2, sl
   817f0:	4c13      	ldr	r4, [pc, #76]	; (81840 <prvSampleTimeNow+0xa8>)
   817f2:	47a0      	blx	r4
				configASSERT( xResult );
   817f4:	b918      	cbnz	r0, 817fe <prvSampleTimeNow+0x66>
   817f6:	4b13      	ldr	r3, [pc, #76]	; (81844 <prvSampleTimeNow+0xac>)
   817f8:	4798      	blx	r3
   817fa:	bf00      	nop
   817fc:	e7fd      	b.n	817fa <prvSampleTimeNow+0x62>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   817fe:	6833      	ldr	r3, [r6, #0]
   81800:	681a      	ldr	r2, [r3, #0]
   81802:	2a00      	cmp	r2, #0
   81804:	d1d6      	bne.n	817b4 <prvSampleTimeNow+0x1c>
			}
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
   81806:	4a10      	ldr	r2, [pc, #64]	; (81848 <prvSampleTimeNow+0xb0>)
   81808:	6811      	ldr	r1, [r2, #0]
   8180a:	480a      	ldr	r0, [pc, #40]	; (81834 <prvSampleTimeNow+0x9c>)
   8180c:	6001      	str	r1, [r0, #0]
	pxOverflowTimerList = pxTemp;
   8180e:	6013      	str	r3, [r2, #0]
	xTimeNow = xTaskGetTickCount();

	if( xTimeNow < xLastTime )
	{
		prvSwitchTimerLists( xLastTime );
		*pxTimerListsWereSwitched = pdTRUE;
   81810:	2301      	movs	r3, #1
   81812:	f8c9 3000 	str.w	r3, [r9]
   81816:	e002      	b.n	8181e <prvSampleTimeNow+0x86>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   81818:	2300      	movs	r3, #0
   8181a:	f8c9 3000 	str.w	r3, [r9]
	}

	xLastTime = xTimeNow;
   8181e:	4b04      	ldr	r3, [pc, #16]	; (81830 <prvSampleTimeNow+0x98>)
   81820:	f8c3 8000 	str.w	r8, [r3]

	return xTimeNow;
}
   81824:	4640      	mov	r0, r8
   81826:	b002      	add	sp, #8
   81828:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8182c:	00080fd5 	.word	0x00080fd5
   81830:	2007ab48 	.word	0x2007ab48
   81834:	2007ab1c 	.word	0x2007ab1c
   81838:	00080459 	.word	0x00080459
   8183c:	0008041d 	.word	0x0008041d
   81840:	00081745 	.word	0x00081745
   81844:	000804e1 	.word	0x000804e1
   81848:	2007ab50 	.word	0x2007ab50

0008184c <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   8184c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   81850:	b087      	sub	sp, #28
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
   81852:	4d4d      	ldr	r5, [pc, #308]	; (81988 <prvTimerTask+0x13c>)
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
	uxListRemove( &( pxTimer->xTimerListItem ) );
   81854:	f8df 8160 	ldr.w	r8, [pc, #352]	; 819b8 <prvTimerTask+0x16c>
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   81858:	4b4c      	ldr	r3, [pc, #304]	; (8198c <prvTimerTask+0x140>)
   8185a:	681b      	ldr	r3, [r3, #0]
   8185c:	681a      	ldr	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   8185e:	2a00      	cmp	r2, #0
   81860:	f000 8087 	beq.w	81972 <prvTimerTask+0x126>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   81864:	68db      	ldr	r3, [r3, #12]
   81866:	681e      	ldr	r6, [r3, #0]
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
   81868:	4b49      	ldr	r3, [pc, #292]	; (81990 <prvTimerTask+0x144>)
   8186a:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   8186c:	a803      	add	r0, sp, #12
   8186e:	4b49      	ldr	r3, [pc, #292]	; (81994 <prvTimerTask+0x148>)
   81870:	4798      	blx	r3
   81872:	4607      	mov	r7, r0
		if( xTimerListsWereSwitched == pdFALSE )
   81874:	9b03      	ldr	r3, [sp, #12]
   81876:	2b00      	cmp	r3, #0
   81878:	d130      	bne.n	818dc <prvTimerTask+0x90>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   8187a:	4286      	cmp	r6, r0
   8187c:	d824      	bhi.n	818c8 <prvTimerTask+0x7c>
			{
				xTaskResumeAll();
   8187e:	4b46      	ldr	r3, [pc, #280]	; (81998 <prvTimerTask+0x14c>)
   81880:	4798      	blx	r3
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   81882:	4b42      	ldr	r3, [pc, #264]	; (8198c <prvTimerTask+0x140>)
   81884:	681b      	ldr	r3, [r3, #0]
   81886:	68db      	ldr	r3, [r3, #12]
   81888:	68dc      	ldr	r4, [r3, #12]
	uxListRemove( &( pxTimer->xTimerListItem ) );
   8188a:	1d20      	adds	r0, r4, #4
   8188c:	47c0      	blx	r8
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   8188e:	69e3      	ldr	r3, [r4, #28]
   81890:	2b01      	cmp	r3, #1
   81892:	d114      	bne.n	818be <prvTimerTask+0x72>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
   81894:	69a1      	ldr	r1, [r4, #24]
   81896:	4620      	mov	r0, r4
   81898:	4431      	add	r1, r6
   8189a:	463a      	mov	r2, r7
   8189c:	4633      	mov	r3, r6
   8189e:	4f3f      	ldr	r7, [pc, #252]	; (8199c <prvTimerTask+0x150>)
   818a0:	47b8      	blx	r7
   818a2:	2801      	cmp	r0, #1
   818a4:	d10b      	bne.n	818be <prvTimerTask+0x72>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   818a6:	2300      	movs	r3, #0
   818a8:	9300      	str	r3, [sp, #0]
   818aa:	4620      	mov	r0, r4
   818ac:	4619      	mov	r1, r3
   818ae:	4632      	mov	r2, r6
   818b0:	4e3b      	ldr	r6, [pc, #236]	; (819a0 <prvTimerTask+0x154>)
   818b2:	47b0      	blx	r6
			configASSERT( xResult );
   818b4:	b918      	cbnz	r0, 818be <prvTimerTask+0x72>
   818b6:	4b3b      	ldr	r3, [pc, #236]	; (819a4 <prvTimerTask+0x158>)
   818b8:	4798      	blx	r3
   818ba:	bf00      	nop
   818bc:	e7fd      	b.n	818ba <prvTimerTask+0x6e>
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   818be:	6a63      	ldr	r3, [r4, #36]	; 0x24
   818c0:	4620      	mov	r0, r4
   818c2:	4798      	blx	r3
   818c4:	e00c      	b.n	818e0 <prvTimerTask+0x94>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
   818c6:	2600      	movs	r6, #0
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
   818c8:	6828      	ldr	r0, [r5, #0]
   818ca:	1bf1      	subs	r1, r6, r7
   818cc:	4b36      	ldr	r3, [pc, #216]	; (819a8 <prvTimerTask+0x15c>)
   818ce:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
   818d0:	4b31      	ldr	r3, [pc, #196]	; (81998 <prvTimerTask+0x14c>)
   818d2:	4798      	blx	r3
   818d4:	b920      	cbnz	r0, 818e0 <prvTimerTask+0x94>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
   818d6:	4b35      	ldr	r3, [pc, #212]	; (819ac <prvTimerTask+0x160>)
   818d8:	4798      	blx	r3
   818da:	e001      	b.n	818e0 <prvTimerTask+0x94>
				}
			}
		}
		else
		{
			xTaskResumeAll();
   818dc:	4b2e      	ldr	r3, [pc, #184]	; (81998 <prvTimerTask+0x14c>)
   818de:	4798      	blx	r3
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   818e0:	a802      	add	r0, sp, #8
   818e2:	4b2c      	ldr	r3, [pc, #176]	; (81994 <prvTimerTask+0x148>)
   818e4:	4798      	blx	r3
   818e6:	4607      	mov	r7, r0

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
   818e8:	4e31      	ldr	r6, [pc, #196]	; (819b0 <prvTimerTask+0x164>)
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   818ea:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8199c <prvTimerTask+0x150>
   818ee:	e038      	b.n	81962 <prvTimerTask+0x116>
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
	{
		pxTimer = xMessage.pxTimer;
   818f0:	9c05      	ldr	r4, [sp, #20]

		/* Is the timer already in a list of active timers?  When the command
		is trmCOMMAND_PROCESS_TIMER_OVERFLOW, the timer will be NULL as the
		command is to the task rather than to an individual timer. */
		if( pxTimer != NULL )
   818f2:	b11c      	cbz	r4, 818fc <prvTimerTask+0xb0>
		{
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
   818f4:	6961      	ldr	r1, [r4, #20]
   818f6:	b109      	cbz	r1, 818fc <prvTimerTask+0xb0>
			{
				/* The timer is in a list, remove it. */
				uxListRemove( &( pxTimer->xTimerListItem ) );
   818f8:	1d20      	adds	r0, r4, #4
   818fa:	47c0      	blx	r8
			}
		}

		traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.xMessageValue );

		switch( xMessage.xMessageID )
   818fc:	9903      	ldr	r1, [sp, #12]
   818fe:	2902      	cmp	r1, #2
   81900:	d01f      	beq.n	81942 <prvTimerTask+0xf6>
   81902:	2903      	cmp	r1, #3
   81904:	d02a      	beq.n	8195c <prvTimerTask+0x110>
   81906:	2900      	cmp	r1, #0
   81908:	d12b      	bne.n	81962 <prvTimerTask+0x116>
		{
			case tmrCOMMAND_START :
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
   8190a:	9b04      	ldr	r3, [sp, #16]
   8190c:	69a1      	ldr	r1, [r4, #24]
   8190e:	4620      	mov	r0, r4
   81910:	4419      	add	r1, r3
   81912:	463a      	mov	r2, r7
   81914:	47c8      	blx	r9
   81916:	2801      	cmp	r0, #1
   81918:	d123      	bne.n	81962 <prvTimerTask+0x116>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   8191a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   8191c:	4620      	mov	r0, r4
   8191e:	4798      	blx	r3

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   81920:	69e3      	ldr	r3, [r4, #28]
   81922:	2b01      	cmp	r3, #1
   81924:	d11d      	bne.n	81962 <prvTimerTask+0x116>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   81926:	69a2      	ldr	r2, [r4, #24]
   81928:	2300      	movs	r3, #0
   8192a:	9300      	str	r3, [sp, #0]
   8192c:	4620      	mov	r0, r4
   8192e:	4619      	mov	r1, r3
   81930:	9c04      	ldr	r4, [sp, #16]
   81932:	4422      	add	r2, r4
   81934:	4c1a      	ldr	r4, [pc, #104]	; (819a0 <prvTimerTask+0x154>)
   81936:	47a0      	blx	r4
						configASSERT( xResult );
   81938:	b998      	cbnz	r0, 81962 <prvTimerTask+0x116>
   8193a:	4b1a      	ldr	r3, [pc, #104]	; (819a4 <prvTimerTask+0x158>)
   8193c:	4798      	blx	r3
   8193e:	bf00      	nop
   81940:	e7fd      	b.n	8193e <prvTimerTask+0xf2>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
   81942:	9904      	ldr	r1, [sp, #16]
   81944:	61a1      	str	r1, [r4, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   81946:	b919      	cbnz	r1, 81950 <prvTimerTask+0x104>
   81948:	4b16      	ldr	r3, [pc, #88]	; (819a4 <prvTimerTask+0x158>)
   8194a:	4798      	blx	r3
   8194c:	bf00      	nop
   8194e:	e7fd      	b.n	8194c <prvTimerTask+0x100>
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   81950:	4620      	mov	r0, r4
   81952:	4439      	add	r1, r7
   81954:	463a      	mov	r2, r7
   81956:	463b      	mov	r3, r7
   81958:	47c8      	blx	r9
   8195a:	e002      	b.n	81962 <prvTimerTask+0x116>
				break;

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
   8195c:	4620      	mov	r0, r4
   8195e:	4b15      	ldr	r3, [pc, #84]	; (819b4 <prvTimerTask+0x168>)
   81960:	4798      	blx	r3

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
   81962:	6828      	ldr	r0, [r5, #0]
   81964:	a903      	add	r1, sp, #12
   81966:	2200      	movs	r2, #0
   81968:	4613      	mov	r3, r2
   8196a:	47b0      	blx	r6
   8196c:	2800      	cmp	r0, #0
   8196e:	d1bf      	bne.n	818f0 <prvTimerTask+0xa4>
   81970:	e772      	b.n	81858 <prvTimerTask+0xc>
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
   81972:	4b07      	ldr	r3, [pc, #28]	; (81990 <prvTimerTask+0x144>)
   81974:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   81976:	a803      	add	r0, sp, #12
   81978:	4b06      	ldr	r3, [pc, #24]	; (81994 <prvTimerTask+0x148>)
   8197a:	4798      	blx	r3
   8197c:	4607      	mov	r7, r0
		if( xTimerListsWereSwitched == pdFALSE )
   8197e:	9b03      	ldr	r3, [sp, #12]
   81980:	2b00      	cmp	r3, #0
   81982:	d0a0      	beq.n	818c6 <prvTimerTask+0x7a>
   81984:	e7aa      	b.n	818dc <prvTimerTask+0x90>
   81986:	bf00      	nop
   81988:	2007ab4c 	.word	0x2007ab4c
   8198c:	2007ab1c 	.word	0x2007ab1c
   81990:	00080fc5 	.word	0x00080fc5
   81994:	00081799 	.word	0x00081799
   81998:	00081115 	.word	0x00081115
   8199c:	00081651 	.word	0x00081651
   819a0:	00081745 	.word	0x00081745
   819a4:	000804e1 	.word	0x000804e1
   819a8:	00080c29 	.word	0x00080c29
   819ac:	000804d1 	.word	0x000804d1
   819b0:	00080acd 	.word	0x00080acd
   819b4:	00080701 	.word	0x00080701
   819b8:	00080459 	.word	0x00080459

000819bc <USART0_Handler>:
#if SAMD || SAMR21 || SAML21
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
   819bc:	b500      	push	{lr}
   819be:	b083      	sub	sp, #12
	uint8_t temp;
#if SAMD || SAMR21 || SAML21
	usart_serial_read_packet(&host_uart_module, &temp, 1);
#else
	usart_serial_read_packet(USART_HOST, &temp, 1);
   819c0:	4811      	ldr	r0, [pc, #68]	; (81a08 <USART0_Handler+0x4c>)
   819c2:	f10d 0107 	add.w	r1, sp, #7
   819c6:	2201      	movs	r2, #1
   819c8:	4b10      	ldr	r3, [pc, #64]	; (81a0c <USART0_Handler+0x50>)
   819ca:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   819cc:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   819ce:	f3bf 8f5f 	dmb	sy
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
   819d2:	2200      	movs	r2, #0
   819d4:	4b0e      	ldr	r3, [pc, #56]	; (81a10 <USART0_Handler+0x54>)
   819d6:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
   819d8:	4b0e      	ldr	r3, [pc, #56]	; (81a14 <USART0_Handler+0x58>)
   819da:	781b      	ldrb	r3, [r3, #0]
   819dc:	f89d 1007 	ldrb.w	r1, [sp, #7]
   819e0:	4a0d      	ldr	r2, [pc, #52]	; (81a18 <USART0_Handler+0x5c>)
   819e2:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
   819e4:	2b9b      	cmp	r3, #155	; 0x9b
   819e6:	d103      	bne.n	819f0 <USART0_Handler+0x34>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
   819e8:	2200      	movs	r2, #0
   819ea:	4b0a      	ldr	r3, [pc, #40]	; (81a14 <USART0_Handler+0x58>)
   819ec:	701a      	strb	r2, [r3, #0]
   819ee:	e002      	b.n	819f6 <USART0_Handler+0x3a>
	} else {
		serial_rx_buf_tail++;
   819f0:	3301      	adds	r3, #1
   819f2:	4a08      	ldr	r2, [pc, #32]	; (81a14 <USART0_Handler+0x58>)
   819f4:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
   819f6:	2201      	movs	r2, #1
   819f8:	4b05      	ldr	r3, [pc, #20]	; (81a10 <USART0_Handler+0x54>)
   819fa:	701a      	strb	r2, [r3, #0]
   819fc:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   81a00:	b662      	cpsie	i
}
   81a02:	b003      	add	sp, #12
   81a04:	f85d fb04 	ldr.w	pc, [sp], #4
   81a08:	40098000 	.word	0x40098000
   81a0c:	00081a71 	.word	0x00081a71
   81a10:	20070180 	.word	0x20070180
   81a14:	2007abf0 	.word	0x2007abf0
   81a18:	2007ab54 	.word	0x2007ab54

00081a1c <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   81a1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81a20:	460e      	mov	r6, r1
   81a22:	4615      	mov	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   81a24:	3801      	subs	r0, #1
   81a26:	2802      	cmp	r0, #2
   81a28:	d80f      	bhi.n	81a4a <_write+0x2e>
		return -1;
	}

	for (; len != 0; --len) {
   81a2a:	b192      	cbz	r2, 81a52 <_write+0x36>
   81a2c:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
   81a2e:	f8df 803c 	ldr.w	r8, [pc, #60]	; 81a6c <_write+0x50>
   81a32:	4f0d      	ldr	r7, [pc, #52]	; (81a68 <_write+0x4c>)
   81a34:	f8d8 0000 	ldr.w	r0, [r8]
   81a38:	5d31      	ldrb	r1, [r6, r4]
   81a3a:	683b      	ldr	r3, [r7, #0]
   81a3c:	4798      	blx	r3
   81a3e:	2800      	cmp	r0, #0
   81a40:	db0a      	blt.n	81a58 <_write+0x3c>
			return -1;
		}
		++nChars;
   81a42:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   81a44:	42a5      	cmp	r5, r4
   81a46:	d1f5      	bne.n	81a34 <_write+0x18>
   81a48:	e00a      	b.n	81a60 <_write+0x44>
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
   81a4a:	f04f 30ff 	mov.w	r0, #4294967295
   81a4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len != 0; --len) {
   81a52:	2000      	movs	r0, #0
   81a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
   81a58:	f04f 30ff 	mov.w	r0, #4294967295
   81a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		++nChars;
   81a60:	4620      	mov	r0, r4
	}
	return nChars;
}
   81a62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81a66:	bf00      	nop
   81a68:	2007aca0 	.word	0x2007aca0
   81a6c:	2007aca4 	.word	0x2007aca4

00081a70 <usart_serial_read_packet>:
 * \param len    Length of data
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
   81a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81a74:	b083      	sub	sp, #12
   81a76:	4605      	mov	r5, r0
	while (len) {
   81a78:	4690      	mov	r8, r2
   81a7a:	2a00      	cmp	r2, #0
   81a7c:	d047      	beq.n	81b0e <usart_serial_read_packet+0x9e>
   81a7e:	1c4e      	adds	r6, r1, #1
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   81a80:	4f25      	ldr	r7, [pc, #148]	; (81b18 <usart_serial_read_packet+0xa8>)
		while (usart_read(p_usart, &val));
   81a82:	4c26      	ldr	r4, [pc, #152]	; (81b1c <usart_serial_read_packet+0xac>)
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   81a84:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 81b30 <usart_serial_read_packet+0xc0>
	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
   81a88:	f8df b094 	ldr.w	fp, [pc, #148]	; 81b20 <usart_serial_read_packet+0xb0>
   81a8c:	f106 39ff 	add.w	r9, r6, #4294967295
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
	uint32_t val = 0;
   81a90:	2300      	movs	r3, #0
   81a92:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   81a94:	4b22      	ldr	r3, [pc, #136]	; (81b20 <usart_serial_read_packet+0xb0>)
   81a96:	429d      	cmp	r5, r3
   81a98:	d106      	bne.n	81aa8 <usart_serial_read_packet+0x38>
		while (uart_read((Uart*)p_usart, data));
   81a9a:	4658      	mov	r0, fp
   81a9c:	4649      	mov	r1, r9
   81a9e:	4b21      	ldr	r3, [pc, #132]	; (81b24 <usart_serial_read_packet+0xb4>)
   81aa0:	4798      	blx	r3
   81aa2:	2800      	cmp	r0, #0
   81aa4:	d1f9      	bne.n	81a9a <usart_serial_read_packet+0x2a>
   81aa6:	e019      	b.n	81adc <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   81aa8:	4b1f      	ldr	r3, [pc, #124]	; (81b28 <usart_serial_read_packet+0xb8>)
   81aaa:	429d      	cmp	r5, r3
   81aac:	d109      	bne.n	81ac2 <usart_serial_read_packet+0x52>
		while (usart_read(p_usart, &val));
   81aae:	4699      	mov	r9, r3
   81ab0:	4648      	mov	r0, r9
   81ab2:	a901      	add	r1, sp, #4
   81ab4:	47a0      	blx	r4
   81ab6:	2800      	cmp	r0, #0
   81ab8:	d1fa      	bne.n	81ab0 <usart_serial_read_packet+0x40>
		*data = (uint8_t)(val & 0xFF);
   81aba:	9b01      	ldr	r3, [sp, #4]
   81abc:	f806 3c01 	strb.w	r3, [r6, #-1]
   81ac0:	e017      	b.n	81af2 <usart_serial_read_packet+0x82>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   81ac2:	4b1a      	ldr	r3, [pc, #104]	; (81b2c <usart_serial_read_packet+0xbc>)
   81ac4:	429d      	cmp	r5, r3
   81ac6:	d109      	bne.n	81adc <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
   81ac8:	4699      	mov	r9, r3
   81aca:	4648      	mov	r0, r9
   81acc:	a901      	add	r1, sp, #4
   81ace:	47a0      	blx	r4
   81ad0:	2800      	cmp	r0, #0
   81ad2:	d1fa      	bne.n	81aca <usart_serial_read_packet+0x5a>
		*data = (uint8_t)(val & 0xFF);
   81ad4:	9b01      	ldr	r3, [sp, #4]
   81ad6:	f806 3c01 	strb.w	r3, [r6, #-1]
   81ada:	e014      	b.n	81b06 <usart_serial_read_packet+0x96>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   81adc:	4555      	cmp	r5, sl
   81ade:	d108      	bne.n	81af2 <usart_serial_read_packet+0x82>
		while (usart_read(p_usart, &val));
   81ae0:	4650      	mov	r0, sl
   81ae2:	a901      	add	r1, sp, #4
   81ae4:	47a0      	blx	r4
   81ae6:	2800      	cmp	r0, #0
   81ae8:	d1fa      	bne.n	81ae0 <usart_serial_read_packet+0x70>
		*data = (uint8_t)(val & 0xFF);
   81aea:	9b01      	ldr	r3, [sp, #4]
   81aec:	f806 3c01 	strb.w	r3, [r6, #-1]
   81af0:	e009      	b.n	81b06 <usart_serial_read_packet+0x96>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   81af2:	42bd      	cmp	r5, r7
   81af4:	d107      	bne.n	81b06 <usart_serial_read_packet+0x96>
		while (usart_read(p_usart, &val));
   81af6:	4638      	mov	r0, r7
   81af8:	a901      	add	r1, sp, #4
   81afa:	47a0      	blx	r4
   81afc:	2800      	cmp	r0, #0
   81afe:	d1fa      	bne.n	81af6 <usart_serial_read_packet+0x86>
		*data = (uint8_t)(val & 0xFF);
   81b00:	9b01      	ldr	r3, [sp, #4]
   81b02:	f806 3c01 	strb.w	r3, [r6, #-1]
   81b06:	3601      	adds	r6, #1
   81b08:	f1b8 0801 	subs.w	r8, r8, #1
   81b0c:	d1be      	bne.n	81a8c <usart_serial_read_packet+0x1c>
		usart_serial_getchar(usart, data);
		len--;
		data++;
	}
	return STATUS_OK;
}
   81b0e:	2000      	movs	r0, #0
   81b10:	b003      	add	sp, #12
   81b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81b16:	bf00      	nop
   81b18:	400a4000 	.word	0x400a4000
   81b1c:	000803c9 	.word	0x000803c9
   81b20:	400e0800 	.word	0x400e0800
   81b24:	00081b7d 	.word	0x00081b7d
   81b28:	40098000 	.word	0x40098000
   81b2c:	4009c000 	.word	0x4009c000
   81b30:	400a0000 	.word	0x400a0000

00081b34 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   81b34:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   81b36:	23ac      	movs	r3, #172	; 0xac
   81b38:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   81b3a:	680a      	ldr	r2, [r1, #0]
   81b3c:	684b      	ldr	r3, [r1, #4]
   81b3e:	fbb2 f3f3 	udiv	r3, r2, r3
   81b42:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   81b44:	1e5c      	subs	r4, r3, #1
   81b46:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   81b4a:	4294      	cmp	r4, r2
   81b4c:	d80a      	bhi.n	81b64 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
   81b4e:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   81b50:	688b      	ldr	r3, [r1, #8]
   81b52:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   81b54:	f240 2302 	movw	r3, #514	; 0x202
   81b58:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   81b5c:	2350      	movs	r3, #80	; 0x50
   81b5e:	6003      	str	r3, [r0, #0]

	return 0;
   81b60:	2000      	movs	r0, #0
   81b62:	e000      	b.n	81b66 <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
   81b64:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
   81b66:	f85d 4b04 	ldr.w	r4, [sp], #4
   81b6a:	4770      	bx	lr

00081b6c <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   81b6c:	6943      	ldr	r3, [r0, #20]
   81b6e:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   81b72:	bf1a      	itte	ne
   81b74:	61c1      	strne	r1, [r0, #28]
	return 0;
   81b76:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
   81b78:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
   81b7a:	4770      	bx	lr

00081b7c <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   81b7c:	6943      	ldr	r3, [r0, #20]
   81b7e:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   81b82:	bf1d      	ittte	ne
   81b84:	6983      	ldrne	r3, [r0, #24]
   81b86:	700b      	strbne	r3, [r1, #0]
	return 0;
   81b88:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
   81b8a:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
   81b8c:	4770      	bx	lr
   81b8e:	bf00      	nop

00081b90 <initTwi>:
#include <stdio.h>




void initTwi(void){
   81b90:	b500      	push	{lr}
   81b92:	b085      	sub	sp, #20
	// TWI master initialization options.
	twi_master_options_t opt;
	opt.speed = TWI_SPEED;
   81b94:	4b09      	ldr	r3, [pc, #36]	; (81bbc <initTwi+0x2c>)
   81b96:	9302      	str	r3, [sp, #8]
	opt.chip  = SLAVE_ADDR;
   81b98:	2302      	movs	r3, #2
   81b9a:	f88d 300c 	strb.w	r3, [sp, #12]
typedef twi_packet_t twi_package_t;

static inline uint32_t twi_master_setup(twi_master_t p_twi,
		twi_master_options_t *p_opt)
{
	p_opt->master_clk = sysclk_get_cpu_hz();
   81b9e:	4b08      	ldr	r3, [pc, #32]	; (81bc0 <initTwi+0x30>)
   81ba0:	9301      	str	r3, [sp, #4]
	p_opt->smbus      = 0;
   81ba2:	2300      	movs	r3, #0
   81ba4:	f88d 300d 	strb.w	r3, [sp, #13]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   81ba8:	2017      	movs	r0, #23
   81baa:	4b06      	ldr	r3, [pc, #24]	; (81bc4 <initTwi+0x34>)
   81bac:	4798      	blx	r3
	} else {
		// Do Nothing
	}
#endif

	return (twi_master_init(p_twi, p_opt));
   81bae:	4806      	ldr	r0, [pc, #24]	; (81bc8 <initTwi+0x38>)
   81bb0:	a901      	add	r1, sp, #4
   81bb2:	4b06      	ldr	r3, [pc, #24]	; (81bcc <initTwi+0x3c>)
   81bb4:	4798      	blx	r3

	// Initialize the TWI master driver.
	twi_master_setup(TWI1, &opt);
}
   81bb6:	b005      	add	sp, #20
   81bb8:	f85d fb04 	ldr.w	pc, [sp], #4
   81bbc:	000186a0 	.word	0x000186a0
   81bc0:	0501bd00 	.word	0x0501bd00
   81bc4:	00082369 	.word	0x00082369
   81bc8:	40090000 	.word	0x40090000
   81bcc:	000801d5 	.word	0x000801d5

00081bd0 <sendArm>:
}

//Send data to Arm with TWI
//data holds the data, dataLength is how many bytes the data is.
uint8_t sendArm(uint8_t* data,int dataLength)
{
   81bd0:	b530      	push	{r4, r5, lr}
   81bd2:	b087      	sub	sp, #28

	twi_package_t packet = {
   81bd4:	2300      	movs	r3, #0
   81bd6:	9301      	str	r3, [sp, #4]
   81bd8:	9302      	str	r3, [sp, #8]
   81bda:	9305      	str	r3, [sp, #20]
   81bdc:	9003      	str	r0, [sp, #12]
   81bde:	9104      	str	r1, [sp, #16]
   81be0:	2102      	movs	r1, #2
   81be2:	f88d 1014 	strb.w	r1, [sp, #20]
		.buffer       = data, // transfer data source buffer
		.length       = dataLength   // transfer data size (bytes)
	};


	if(twi_probe(TWI1,SLAVE_ADDR)==TWI_SUCCESS)
   81be6:	4808      	ldr	r0, [pc, #32]	; (81c08 <sendArm+0x38>)
   81be8:	4b08      	ldr	r3, [pc, #32]	; (81c0c <sendArm+0x3c>)
   81bea:	4798      	blx	r3
   81bec:	b938      	cbnz	r0, 81bfe <sendArm+0x2e>
	{
		//puts("Write to slave");
		while (twi_master_write(TWI1, &packet) != TWI_SUCCESS);
   81bee:	4d06      	ldr	r5, [pc, #24]	; (81c08 <sendArm+0x38>)
   81bf0:	4c07      	ldr	r4, [pc, #28]	; (81c10 <sendArm+0x40>)
   81bf2:	4628      	mov	r0, r5
   81bf4:	a901      	add	r1, sp, #4
   81bf6:	47a0      	blx	r4
   81bf8:	2800      	cmp	r0, #0
   81bfa:	d1fa      	bne.n	81bf2 <sendArm+0x22>
   81bfc:	e001      	b.n	81c02 <sendArm+0x32>
		//puts("Write to slave done");
		return 1;
	}
	else{
		//puts("error on write to slave");
		return 0;
   81bfe:	2000      	movs	r0, #0
   81c00:	e000      	b.n	81c04 <sendArm+0x34>
	{
		//puts("Write to slave");
		while (twi_master_write(TWI1, &packet) != TWI_SUCCESS);
		//delay_ms(100);
		//puts("Write to slave done");
		return 1;
   81c02:	2001      	movs	r0, #1
	}
	else{
		//puts("error on write to slave");
		return 0;
	}
}
   81c04:	b007      	add	sp, #28
   81c06:	bd30      	pop	{r4, r5, pc}
   81c08:	40090000 	.word	0x40090000
   81c0c:	00080389 	.word	0x00080389
   81c10:	000802e9 	.word	0x000802e9

00081c14 <reciveFromArm>:
//Recive data from ARM with TWI
//recives and prints the data out on Uart.
//packageSize how many bytes expected to recive
//returns the data recived as array.
uint8_t reciveFromArm(uint8_t* recv,uint8_t packageSize)
{
   81c14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81c18:	b086      	sub	sp, #24
   81c1a:	af00      	add	r7, sp, #0
   81c1c:	4606      	mov	r6, r0
	int xx=0;
	//setup reciving package
	//data recived
	uint8_t package[packageSize];//setup data package to recive
   81c1e:	1dcb      	adds	r3, r1, #7
   81c20:	f403 73fc 	and.w	r3, r3, #504	; 0x1f8
   81c24:	ebad 0d03 	sub.w	sp, sp, r3
   81c28:	46e8      	mov	r8, sp
	//	uint8_t recv[packageSize] = {0};
	//package recived
	twi_package_t pkt_rcv = {
   81c2a:	2300      	movs	r3, #0
   81c2c:	607b      	str	r3, [r7, #4]
   81c2e:	60bb      	str	r3, [r7, #8]
   81c30:	617b      	str	r3, [r7, #20]
   81c32:	f8c7 d00c 	str.w	sp, [r7, #12]
   81c36:	6139      	str	r1, [r7, #16]
   81c38:	2102      	movs	r1, #2
   81c3a:	7539      	strb	r1, [r7, #20]
		.chip         = SLAVE_ADDR,      // TWI slave bus address
		.buffer       = package, // transfer data source buffer
		.length       = packageSize   // transfer data size (bytes)
	};
	
	if(twi_probe(TWI1,SLAVE_ADDR)==TWI_SUCCESS)
   81c3c:	480d      	ldr	r0, [pc, #52]	; (81c74 <reciveFromArm+0x60>)
   81c3e:	4b0e      	ldr	r3, [pc, #56]	; (81c78 <reciveFromArm+0x64>)
   81c40:	4798      	blx	r3
   81c42:	b988      	cbnz	r0, 81c68 <reciveFromArm+0x54>
	{
		//puts("Read from slave");
		// Perform a multi-byte read access then check the result.
		while (twi_master_read(TWI1, &pkt_rcv) != TWI_SUCCESS);
   81c44:	4d0b      	ldr	r5, [pc, #44]	; (81c74 <reciveFromArm+0x60>)
   81c46:	4c0d      	ldr	r4, [pc, #52]	; (81c7c <reciveFromArm+0x68>)
   81c48:	4628      	mov	r0, r5
   81c4a:	1d39      	adds	r1, r7, #4
   81c4c:	47a0      	blx	r4
   81c4e:	2800      	cmp	r0, #0
   81c50:	d1fa      	bne.n	81c48 <reciveFromArm+0x34>
		*(recv)=package[0];
   81c52:	f898 3000 	ldrb.w	r3, [r8]
   81c56:	7033      	strb	r3, [r6, #0]
		*(recv+1)=package[1];
   81c58:	f898 3001 	ldrb.w	r3, [r8, #1]
   81c5c:	7073      	strb	r3, [r6, #1]
		*(recv+2)=package[2];
   81c5e:	f898 3002 	ldrb.w	r3, [r8, #2]
   81c62:	70b3      	strb	r3, [r6, #2]
		/*
		
		puts("");
		delay_ms(100);
		*/
		return 1;
   81c64:	2001      	movs	r0, #1
   81c66:	e000      	b.n	81c6a <reciveFromArm+0x56>
		
	}
	else{
		//puts("error on write to slave");
		return 0;
   81c68:	2000      	movs	r0, #0
	}
	
	//return package;
	
}
   81c6a:	3718      	adds	r7, #24
   81c6c:	46bd      	mov	sp, r7
   81c6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81c72:	bf00      	nop
   81c74:	40090000 	.word	0x40090000
   81c78:	00080389 	.word	0x00080389
   81c7c:	00080215 	.word	0x00080215

00081c80 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   81c80:	b5f0      	push	{r4, r5, r6, r7, lr}
   81c82:	b083      	sub	sp, #12
   81c84:	4604      	mov	r4, r0
   81c86:	460d      	mov	r5, r1
	uint32_t val = 0;
   81c88:	2300      	movs	r3, #0
   81c8a:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   81c8c:	4b1f      	ldr	r3, [pc, #124]	; (81d0c <usart_serial_getchar+0x8c>)
   81c8e:	4298      	cmp	r0, r3
   81c90:	d107      	bne.n	81ca2 <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
   81c92:	461f      	mov	r7, r3
   81c94:	4e1e      	ldr	r6, [pc, #120]	; (81d10 <usart_serial_getchar+0x90>)
   81c96:	4638      	mov	r0, r7
   81c98:	4629      	mov	r1, r5
   81c9a:	47b0      	blx	r6
   81c9c:	2800      	cmp	r0, #0
   81c9e:	d1fa      	bne.n	81c96 <usart_serial_getchar+0x16>
   81ca0:	e019      	b.n	81cd6 <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   81ca2:	4b1c      	ldr	r3, [pc, #112]	; (81d14 <usart_serial_getchar+0x94>)
   81ca4:	4298      	cmp	r0, r3
   81ca6:	d109      	bne.n	81cbc <usart_serial_getchar+0x3c>
		while (usart_read(p_usart, &val));
   81ca8:	461f      	mov	r7, r3
   81caa:	4e1b      	ldr	r6, [pc, #108]	; (81d18 <usart_serial_getchar+0x98>)
   81cac:	4638      	mov	r0, r7
   81cae:	a901      	add	r1, sp, #4
   81cb0:	47b0      	blx	r6
   81cb2:	2800      	cmp	r0, #0
   81cb4:	d1fa      	bne.n	81cac <usart_serial_getchar+0x2c>
		*data = (uint8_t)(val & 0xFF);
   81cb6:	9b01      	ldr	r3, [sp, #4]
   81cb8:	702b      	strb	r3, [r5, #0]
   81cba:	e019      	b.n	81cf0 <usart_serial_getchar+0x70>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   81cbc:	4b17      	ldr	r3, [pc, #92]	; (81d1c <usart_serial_getchar+0x9c>)
   81cbe:	4298      	cmp	r0, r3
   81cc0:	d109      	bne.n	81cd6 <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
   81cc2:	461e      	mov	r6, r3
   81cc4:	4c14      	ldr	r4, [pc, #80]	; (81d18 <usart_serial_getchar+0x98>)
   81cc6:	4630      	mov	r0, r6
   81cc8:	a901      	add	r1, sp, #4
   81cca:	47a0      	blx	r4
   81ccc:	2800      	cmp	r0, #0
   81cce:	d1fa      	bne.n	81cc6 <usart_serial_getchar+0x46>
		*data = (uint8_t)(val & 0xFF);
   81cd0:	9b01      	ldr	r3, [sp, #4]
   81cd2:	702b      	strb	r3, [r5, #0]
   81cd4:	e018      	b.n	81d08 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   81cd6:	4b12      	ldr	r3, [pc, #72]	; (81d20 <usart_serial_getchar+0xa0>)
   81cd8:	429c      	cmp	r4, r3
   81cda:	d109      	bne.n	81cf0 <usart_serial_getchar+0x70>
		while (usart_read(p_usart, &val));
   81cdc:	461e      	mov	r6, r3
   81cde:	4c0e      	ldr	r4, [pc, #56]	; (81d18 <usart_serial_getchar+0x98>)
   81ce0:	4630      	mov	r0, r6
   81ce2:	a901      	add	r1, sp, #4
   81ce4:	47a0      	blx	r4
   81ce6:	2800      	cmp	r0, #0
   81ce8:	d1fa      	bne.n	81ce0 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
   81cea:	9b01      	ldr	r3, [sp, #4]
   81cec:	702b      	strb	r3, [r5, #0]
   81cee:	e00b      	b.n	81d08 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   81cf0:	4b0c      	ldr	r3, [pc, #48]	; (81d24 <usart_serial_getchar+0xa4>)
   81cf2:	429c      	cmp	r4, r3
   81cf4:	d108      	bne.n	81d08 <usart_serial_getchar+0x88>
		while (usart_read(p_usart, &val));
   81cf6:	461e      	mov	r6, r3
   81cf8:	4c07      	ldr	r4, [pc, #28]	; (81d18 <usart_serial_getchar+0x98>)
   81cfa:	4630      	mov	r0, r6
   81cfc:	a901      	add	r1, sp, #4
   81cfe:	47a0      	blx	r4
   81d00:	2800      	cmp	r0, #0
   81d02:	d1fa      	bne.n	81cfa <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
   81d04:	9b01      	ldr	r3, [sp, #4]
   81d06:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   81d08:	b003      	add	sp, #12
   81d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   81d0c:	400e0800 	.word	0x400e0800
   81d10:	00081b7d 	.word	0x00081b7d
   81d14:	40098000 	.word	0x40098000
   81d18:	000803c9 	.word	0x000803c9
   81d1c:	4009c000 	.word	0x4009c000
   81d20:	400a0000 	.word	0x400a0000
   81d24:	400a4000 	.word	0x400a4000

00081d28 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   81d28:	b570      	push	{r4, r5, r6, lr}
   81d2a:	460c      	mov	r4, r1
#ifdef UART
	if (UART == (Uart*)p_usart) {
   81d2c:	4b21      	ldr	r3, [pc, #132]	; (81db4 <usart_serial_putchar+0x8c>)
   81d2e:	4298      	cmp	r0, r3
   81d30:	d107      	bne.n	81d42 <usart_serial_putchar+0x1a>
		while (uart_write((Uart*)p_usart, c)!=0);
   81d32:	461e      	mov	r6, r3
   81d34:	4d20      	ldr	r5, [pc, #128]	; (81db8 <usart_serial_putchar+0x90>)
   81d36:	4630      	mov	r0, r6
   81d38:	4621      	mov	r1, r4
   81d3a:	47a8      	blx	r5
   81d3c:	2800      	cmp	r0, #0
   81d3e:	d1fa      	bne.n	81d36 <usart_serial_putchar+0xe>
   81d40:	e02b      	b.n	81d9a <usart_serial_putchar+0x72>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   81d42:	4b1e      	ldr	r3, [pc, #120]	; (81dbc <usart_serial_putchar+0x94>)
   81d44:	4298      	cmp	r0, r3
   81d46:	d107      	bne.n	81d58 <usart_serial_putchar+0x30>
		while (usart_write(p_usart, c)!=0);
   81d48:	461e      	mov	r6, r3
   81d4a:	4d1d      	ldr	r5, [pc, #116]	; (81dc0 <usart_serial_putchar+0x98>)
   81d4c:	4630      	mov	r0, r6
   81d4e:	4621      	mov	r1, r4
   81d50:	47a8      	blx	r5
   81d52:	2800      	cmp	r0, #0
   81d54:	d1fa      	bne.n	81d4c <usart_serial_putchar+0x24>
   81d56:	e022      	b.n	81d9e <usart_serial_putchar+0x76>
		return 1;
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   81d58:	4b1a      	ldr	r3, [pc, #104]	; (81dc4 <usart_serial_putchar+0x9c>)
   81d5a:	4298      	cmp	r0, r3
   81d5c:	d107      	bne.n	81d6e <usart_serial_putchar+0x46>
		while (usart_write(p_usart, c)!=0);
   81d5e:	461e      	mov	r6, r3
   81d60:	4d17      	ldr	r5, [pc, #92]	; (81dc0 <usart_serial_putchar+0x98>)
   81d62:	4630      	mov	r0, r6
   81d64:	4621      	mov	r1, r4
   81d66:	47a8      	blx	r5
   81d68:	2800      	cmp	r0, #0
   81d6a:	d1fa      	bne.n	81d62 <usart_serial_putchar+0x3a>
   81d6c:	e019      	b.n	81da2 <usart_serial_putchar+0x7a>
		return 1;
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   81d6e:	4b16      	ldr	r3, [pc, #88]	; (81dc8 <usart_serial_putchar+0xa0>)
   81d70:	4298      	cmp	r0, r3
   81d72:	d107      	bne.n	81d84 <usart_serial_putchar+0x5c>
		while (usart_write(p_usart, c)!=0);
   81d74:	461e      	mov	r6, r3
   81d76:	4d12      	ldr	r5, [pc, #72]	; (81dc0 <usart_serial_putchar+0x98>)
   81d78:	4630      	mov	r0, r6
   81d7a:	4621      	mov	r1, r4
   81d7c:	47a8      	blx	r5
   81d7e:	2800      	cmp	r0, #0
   81d80:	d1fa      	bne.n	81d78 <usart_serial_putchar+0x50>
   81d82:	e010      	b.n	81da6 <usart_serial_putchar+0x7e>
		return 1;
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   81d84:	4b11      	ldr	r3, [pc, #68]	; (81dcc <usart_serial_putchar+0xa4>)
   81d86:	4298      	cmp	r0, r3
   81d88:	d10f      	bne.n	81daa <usart_serial_putchar+0x82>
		while (usart_write(p_usart, c)!=0);
   81d8a:	461e      	mov	r6, r3
   81d8c:	4d0c      	ldr	r5, [pc, #48]	; (81dc0 <usart_serial_putchar+0x98>)
   81d8e:	4630      	mov	r0, r6
   81d90:	4621      	mov	r1, r4
   81d92:	47a8      	blx	r5
   81d94:	2800      	cmp	r0, #0
   81d96:	d1fa      	bne.n	81d8e <usart_serial_putchar+0x66>
   81d98:	e009      	b.n	81dae <usart_serial_putchar+0x86>
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
   81d9a:	2001      	movs	r0, #1
   81d9c:	bd70      	pop	{r4, r5, r6, pc}
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   81d9e:	2001      	movs	r0, #1
   81da0:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   81da2:	2001      	movs	r0, #1
   81da4:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   81da6:	2001      	movs	r0, #1
   81da8:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   81daa:	2000      	movs	r0, #0
   81dac:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   81dae:	2001      	movs	r0, #1
	}
# endif
#endif /* ifdef USART */

	return 0;
}
   81db0:	bd70      	pop	{r4, r5, r6, pc}
   81db2:	bf00      	nop
   81db4:	400e0800 	.word	0x400e0800
   81db8:	00081b6d 	.word	0x00081b6d
   81dbc:	40098000 	.word	0x40098000
   81dc0:	000803b5 	.word	0x000803b5
   81dc4:	4009c000 	.word	0x4009c000
   81dc8:	400a0000 	.word	0x400a0000
   81dcc:	400a4000 	.word	0x400a4000

00081dd0 <configure_console>:
#include <asf.h>
#include "communication.h"

void configure_console(void)
/* Enables feedback through the USB-cable back to terminal within Atmel Studio */
{
   81dd0:	b530      	push	{r4, r5, lr}
   81dd2:	b085      	sub	sp, #20
   81dd4:	2008      	movs	r0, #8
   81dd6:	4d15      	ldr	r5, [pc, #84]	; (81e2c <configure_console+0x5c>)
   81dd8:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   81dda:	4c15      	ldr	r4, [pc, #84]	; (81e30 <configure_console+0x60>)
   81ddc:	4b15      	ldr	r3, [pc, #84]	; (81e34 <configure_console+0x64>)
   81dde:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   81de0:	4a15      	ldr	r2, [pc, #84]	; (81e38 <configure_console+0x68>)
   81de2:	4b16      	ldr	r3, [pc, #88]	; (81e3c <configure_console+0x6c>)
   81de4:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   81de6:	4a16      	ldr	r2, [pc, #88]	; (81e40 <configure_console+0x70>)
   81de8:	4b16      	ldr	r3, [pc, #88]	; (81e44 <configure_console+0x74>)
   81dea:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   81dec:	4b16      	ldr	r3, [pc, #88]	; (81e48 <configure_console+0x78>)
   81dee:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   81df0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   81df4:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   81df6:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81dfa:	9303      	str	r3, [sp, #12]
   81dfc:	2008      	movs	r0, #8
   81dfe:	47a8      	blx	r5
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   81e00:	4620      	mov	r0, r4
   81e02:	a901      	add	r1, sp, #4
   81e04:	4b11      	ldr	r3, [pc, #68]	; (81e4c <configure_console+0x7c>)
   81e06:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   81e08:	4d11      	ldr	r5, [pc, #68]	; (81e50 <configure_console+0x80>)
   81e0a:	682b      	ldr	r3, [r5, #0]
   81e0c:	6898      	ldr	r0, [r3, #8]
   81e0e:	2100      	movs	r1, #0
   81e10:	4c10      	ldr	r4, [pc, #64]	; (81e54 <configure_console+0x84>)
   81e12:	47a0      	blx	r4
	setbuf(stdin, NULL);
   81e14:	682b      	ldr	r3, [r5, #0]
   81e16:	6858      	ldr	r0, [r3, #4]
   81e18:	2100      	movs	r1, #0
   81e1a:	47a0      	blx	r4

	/* Configure console UART. */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
	
	printf("Console ready\n");
   81e1c:	480e      	ldr	r0, [pc, #56]	; (81e58 <configure_console+0x88>)
   81e1e:	4c0f      	ldr	r4, [pc, #60]	; (81e5c <configure_console+0x8c>)
   81e20:	47a0      	blx	r4
	printf("=============\n");
   81e22:	480f      	ldr	r0, [pc, #60]	; (81e60 <configure_console+0x90>)
   81e24:	47a0      	blx	r4
}
   81e26:	b005      	add	sp, #20
   81e28:	bd30      	pop	{r4, r5, pc}
   81e2a:	bf00      	nop
   81e2c:	00082369 	.word	0x00082369
   81e30:	400e0800 	.word	0x400e0800
   81e34:	2007aca4 	.word	0x2007aca4
   81e38:	00081d29 	.word	0x00081d29
   81e3c:	2007aca0 	.word	0x2007aca0
   81e40:	00081c81 	.word	0x00081c81
   81e44:	2007ac9c 	.word	0x2007ac9c
   81e48:	0501bd00 	.word	0x0501bd00
   81e4c:	00081b35 	.word	0x00081b35
   81e50:	200705b0 	.word	0x200705b0
   81e54:	00082c31 	.word	0x00082c31
   81e58:	00085a58 	.word	0x00085a58
   81e5c:	00082a19 	.word	0x00082a19
   81e60:	00085a68 	.word	0x00085a68

00081e64 <TC1_Handler>:
	// Calculate the duration in microseconds.
	uint32_t duration = (diff ) / (((CHIP_FREQ_CPU_MAX / pulse_timers[ch_n].divider)/1000)/1000);
	return duration;
}

void TC1_Handler(void) {
   81e64:	b510      	push	{r4, lr}
	tc_get_status(pulse_timers[TC1_Handler_pulse_timer_idx].tc, pulse_timers[TC1_Handler_pulse_timer_idx].tc_ch);
   81e66:	4c09      	ldr	r4, [pc, #36]	; (81e8c <TC1_Handler+0x28>)
   81e68:	6820      	ldr	r0, [r4, #0]
   81e6a:	6861      	ldr	r1, [r4, #4]
   81e6c:	4b08      	ldr	r3, [pc, #32]	; (81e90 <TC1_Handler+0x2c>)
   81e6e:	4798      	blx	r3
	NVIC_DisableIRQ(pulse_timers[TC1_Handler_pulse_timer_idx].IRQn);
   81e70:	7b23      	ldrb	r3, [r4, #12]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
   81e72:	b259      	sxtb	r1, r3
   81e74:	0949      	lsrs	r1, r1, #5
   81e76:	f003 031f 	and.w	r3, r3, #31
   81e7a:	2201      	movs	r2, #1
   81e7c:	fa02 f303 	lsl.w	r3, r2, r3
   81e80:	3120      	adds	r1, #32
   81e82:	4a04      	ldr	r2, [pc, #16]	; (81e94 <TC1_Handler+0x30>)
   81e84:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
   81e88:	bd10      	pop	{r4, pc}
   81e8a:	bf00      	nop
   81e8c:	20070138 	.word	0x20070138
   81e90:	00080189 	.word	0x00080189
   81e94:	e000e100 	.word	0xe000e100

00081e98 <TC0_Handler>:
}

void TC0_Handler(void) {
   81e98:	b510      	push	{r4, lr}
	tc_get_status(pulse_timers[TC2_Handler_pulse_timer_idx].tc, pulse_timers[TC2_Handler_pulse_timer_idx].tc_ch);
   81e9a:	4c09      	ldr	r4, [pc, #36]	; (81ec0 <TC0_Handler+0x28>)
   81e9c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   81e9e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   81ea0:	4b08      	ldr	r3, [pc, #32]	; (81ec4 <TC0_Handler+0x2c>)
   81ea2:	4798      	blx	r3
	NVIC_DisableIRQ(pulse_timers[TC2_Handler_pulse_timer_idx].IRQn);
   81ea4:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   81ea8:	b259      	sxtb	r1, r3
   81eaa:	0949      	lsrs	r1, r1, #5
   81eac:	f003 031f 	and.w	r3, r3, #31
   81eb0:	2201      	movs	r2, #1
   81eb2:	fa02 f303 	lsl.w	r3, r2, r3
   81eb6:	3120      	adds	r1, #32
   81eb8:	4a03      	ldr	r2, [pc, #12]	; (81ec8 <TC0_Handler+0x30>)
   81eba:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
   81ebe:	bd10      	pop	{r4, pc}
   81ec0:	20070138 	.word	0x20070138
   81ec4:	00080189 	.word	0x00080189
   81ec8:	e000e100 	.word	0xe000e100

00081ecc <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   81ecc:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   81ece:	480e      	ldr	r0, [pc, #56]	; (81f08 <sysclk_init+0x3c>)
   81ed0:	4b0e      	ldr	r3, [pc, #56]	; (81f0c <sysclk_init+0x40>)
   81ed2:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   81ed4:	2000      	movs	r0, #0
   81ed6:	213e      	movs	r1, #62	; 0x3e
   81ed8:	4b0d      	ldr	r3, [pc, #52]	; (81f10 <sysclk_init+0x44>)
   81eda:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   81edc:	4c0d      	ldr	r4, [pc, #52]	; (81f14 <sysclk_init+0x48>)
   81ede:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   81ee0:	2800      	cmp	r0, #0
   81ee2:	d0fc      	beq.n	81ede <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   81ee4:	4b0c      	ldr	r3, [pc, #48]	; (81f18 <sysclk_init+0x4c>)
   81ee6:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   81ee8:	4a0c      	ldr	r2, [pc, #48]	; (81f1c <sysclk_init+0x50>)
   81eea:	4b0d      	ldr	r3, [pc, #52]	; (81f20 <sysclk_init+0x54>)
   81eec:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   81eee:	4c0d      	ldr	r4, [pc, #52]	; (81f24 <sysclk_init+0x58>)
   81ef0:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   81ef2:	2800      	cmp	r0, #0
   81ef4:	d0fc      	beq.n	81ef0 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   81ef6:	2010      	movs	r0, #16
   81ef8:	4b0b      	ldr	r3, [pc, #44]	; (81f28 <sysclk_init+0x5c>)
   81efa:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   81efc:	4b0b      	ldr	r3, [pc, #44]	; (81f2c <sysclk_init+0x60>)
   81efe:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   81f00:	4801      	ldr	r0, [pc, #4]	; (81f08 <sysclk_init+0x3c>)
   81f02:	4b02      	ldr	r3, [pc, #8]	; (81f0c <sysclk_init+0x40>)
   81f04:	4798      	blx	r3
   81f06:	bd10      	pop	{r4, pc}
   81f08:	0501bd00 	.word	0x0501bd00
   81f0c:	200700a5 	.word	0x200700a5
   81f10:	000822e5 	.word	0x000822e5
   81f14:	00082339 	.word	0x00082339
   81f18:	00082349 	.word	0x00082349
   81f1c:	200d3f01 	.word	0x200d3f01
   81f20:	400e0600 	.word	0x400e0600
   81f24:	00082359 	.word	0x00082359
   81f28:	00082281 	.word	0x00082281
   81f2c:	00082475 	.word	0x00082475

00081f30 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   81f30:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   81f32:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   81f36:	4b1a      	ldr	r3, [pc, #104]	; (81fa0 <board_init+0x70>)
   81f38:	605a      	str	r2, [r3, #4]
   81f3a:	200b      	movs	r0, #11
   81f3c:	4c19      	ldr	r4, [pc, #100]	; (81fa4 <board_init+0x74>)
   81f3e:	47a0      	blx	r4
   81f40:	200c      	movs	r0, #12
   81f42:	47a0      	blx	r4
   81f44:	200d      	movs	r0, #13
   81f46:	47a0      	blx	r4
   81f48:	200e      	movs	r0, #14
   81f4a:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   81f4c:	203b      	movs	r0, #59	; 0x3b
   81f4e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81f52:	4c15      	ldr	r4, [pc, #84]	; (81fa8 <board_init+0x78>)
   81f54:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   81f56:	2055      	movs	r0, #85	; 0x55
   81f58:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81f5c:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   81f5e:	2056      	movs	r0, #86	; 0x56
   81f60:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81f64:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   81f66:	2068      	movs	r0, #104	; 0x68
   81f68:	4910      	ldr	r1, [pc, #64]	; (81fac <board_init+0x7c>)
   81f6a:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   81f6c:	205c      	movs	r0, #92	; 0x5c
   81f6e:	4910      	ldr	r1, [pc, #64]	; (81fb0 <board_init+0x80>)
   81f70:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   81f72:	4810      	ldr	r0, [pc, #64]	; (81fb4 <board_init+0x84>)
   81f74:	f44f 7140 	mov.w	r1, #768	; 0x300
   81f78:	4a0f      	ldr	r2, [pc, #60]	; (81fb8 <board_init+0x88>)
   81f7a:	4b10      	ldr	r3, [pc, #64]	; (81fbc <board_init+0x8c>)
   81f7c:	4798      	blx	r3
		gpio_configure_pin(SPI1_NPCS3_GPIO, SPI1_NPCS3_FLAGS);
#   endif
#endif

#ifdef CONF_BOARD_TWI0
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
   81f7e:	2011      	movs	r0, #17
   81f80:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81f84:	47a0      	blx	r4
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
   81f86:	2012      	movs	r0, #18
   81f88:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81f8c:	47a0      	blx	r4
#endif

#ifdef CONF_BOARD_TWI1
	gpio_configure_pin(TWI1_DATA_GPIO, TWI1_DATA_FLAGS);
   81f8e:	202c      	movs	r0, #44	; 0x2c
   81f90:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81f94:	47a0      	blx	r4
	gpio_configure_pin(TWI1_CLK_GPIO, TWI1_CLK_FLAGS);
   81f96:	202d      	movs	r0, #45	; 0x2d
   81f98:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81f9c:	47a0      	blx	r4
   81f9e:	bd10      	pop	{r4, pc}
   81fa0:	400e1a50 	.word	0x400e1a50
   81fa4:	00082369 	.word	0x00082369
   81fa8:	00082065 	.word	0x00082065
   81fac:	28000079 	.word	0x28000079
   81fb0:	28000001 	.word	0x28000001
   81fb4:	400e0e00 	.word	0x400e0e00
   81fb8:	08000001 	.word	0x08000001
   81fbc:	00082139 	.word	0x00082139

00081fc0 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   81fc0:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   81fc2:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   81fc6:	d016      	beq.n	81ff6 <pio_set_peripheral+0x36>
   81fc8:	d804      	bhi.n	81fd4 <pio_set_peripheral+0x14>
   81fca:	b1c1      	cbz	r1, 81ffe <pio_set_peripheral+0x3e>
   81fcc:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   81fd0:	d00a      	beq.n	81fe8 <pio_set_peripheral+0x28>
   81fd2:	e013      	b.n	81ffc <pio_set_peripheral+0x3c>
   81fd4:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   81fd8:	d011      	beq.n	81ffe <pio_set_peripheral+0x3e>
   81fda:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   81fde:	d00e      	beq.n	81ffe <pio_set_peripheral+0x3e>
   81fe0:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   81fe4:	d10a      	bne.n	81ffc <pio_set_peripheral+0x3c>
   81fe6:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   81fe8:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   81fea:	6f01      	ldr	r1, [r0, #112]	; 0x70
   81fec:	400b      	ands	r3, r1
   81fee:	ea23 0302 	bic.w	r3, r3, r2
   81ff2:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   81ff4:	e002      	b.n	81ffc <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   81ff6:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   81ff8:	4313      	orrs	r3, r2
   81ffa:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   81ffc:	6042      	str	r2, [r0, #4]
   81ffe:	4770      	bx	lr

00082000 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   82000:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   82002:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   82006:	bf14      	ite	ne
   82008:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8200a:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   8200c:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   82010:	bf14      	ite	ne
   82012:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   82014:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   82016:	f012 0f02 	tst.w	r2, #2
   8201a:	d002      	beq.n	82022 <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   8201c:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   82020:	e004      	b.n	8202c <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   82022:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   82026:	bf18      	it	ne
   82028:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   8202c:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   8202e:	6001      	str	r1, [r0, #0]
   82030:	4770      	bx	lr
   82032:	bf00      	nop

00082034 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   82034:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   82036:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   82038:	9c01      	ldr	r4, [sp, #4]
   8203a:	b10c      	cbz	r4, 82040 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   8203c:	6641      	str	r1, [r0, #100]	; 0x64
   8203e:	e000      	b.n	82042 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   82040:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   82042:	b10b      	cbz	r3, 82048 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   82044:	6501      	str	r1, [r0, #80]	; 0x50
   82046:	e000      	b.n	8204a <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   82048:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   8204a:	b10a      	cbz	r2, 82050 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   8204c:	6301      	str	r1, [r0, #48]	; 0x30
   8204e:	e000      	b.n	82052 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   82050:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   82052:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   82054:	6001      	str	r1, [r0, #0]
}
   82056:	f85d 4b04 	ldr.w	r4, [sp], #4
   8205a:	4770      	bx	lr

0008205c <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   8205c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   8205e:	4770      	bx	lr

00082060 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   82060:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   82062:	4770      	bx	lr

00082064 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   82064:	b570      	push	{r4, r5, r6, lr}
   82066:	b082      	sub	sp, #8
   82068:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   8206a:	0944      	lsrs	r4, r0, #5
   8206c:	f504 1400 	add.w	r4, r4, #2097152	; 0x200000
   82070:	f204 7407 	addw	r4, r4, #1799	; 0x707
   82074:	0266      	lsls	r6, r4, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   82076:	f001 44f0 	and.w	r4, r1, #2013265920	; 0x78000000
   8207a:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   8207e:	d030      	beq.n	820e2 <pio_configure_pin+0x7e>
   82080:	d806      	bhi.n	82090 <pio_configure_pin+0x2c>
   82082:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   82086:	d00a      	beq.n	8209e <pio_configure_pin+0x3a>
   82088:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   8208c:	d018      	beq.n	820c0 <pio_configure_pin+0x5c>
   8208e:	e049      	b.n	82124 <pio_configure_pin+0xc0>
   82090:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   82094:	d030      	beq.n	820f8 <pio_configure_pin+0x94>
   82096:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   8209a:	d02d      	beq.n	820f8 <pio_configure_pin+0x94>
   8209c:	e042      	b.n	82124 <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   8209e:	f000 001f 	and.w	r0, r0, #31
   820a2:	2401      	movs	r4, #1
   820a4:	4084      	lsls	r4, r0
   820a6:	4630      	mov	r0, r6
   820a8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   820ac:	4622      	mov	r2, r4
   820ae:	4b1f      	ldr	r3, [pc, #124]	; (8212c <pio_configure_pin+0xc8>)
   820b0:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   820b2:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   820b6:	bf14      	ite	ne
   820b8:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   820ba:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   820bc:	2001      	movs	r0, #1
   820be:	e032      	b.n	82126 <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   820c0:	f000 001f 	and.w	r0, r0, #31
   820c4:	2401      	movs	r4, #1
   820c6:	4084      	lsls	r4, r0
   820c8:	4630      	mov	r0, r6
   820ca:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   820ce:	4622      	mov	r2, r4
   820d0:	4b16      	ldr	r3, [pc, #88]	; (8212c <pio_configure_pin+0xc8>)
   820d2:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   820d4:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   820d8:	bf14      	ite	ne
   820da:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   820dc:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   820de:	2001      	movs	r0, #1
   820e0:	e021      	b.n	82126 <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   820e2:	f000 011f 	and.w	r1, r0, #31
   820e6:	2401      	movs	r4, #1
   820e8:	4630      	mov	r0, r6
   820ea:	fa04 f101 	lsl.w	r1, r4, r1
   820ee:	462a      	mov	r2, r5
   820f0:	4b0f      	ldr	r3, [pc, #60]	; (82130 <pio_configure_pin+0xcc>)
   820f2:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   820f4:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   820f6:	e016      	b.n	82126 <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   820f8:	f000 011f 	and.w	r1, r0, #31
   820fc:	2401      	movs	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   820fe:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   82102:	ea05 0304 	and.w	r3, r5, r4
   82106:	9300      	str	r3, [sp, #0]
   82108:	4630      	mov	r0, r6
   8210a:	fa04 f101 	lsl.w	r1, r4, r1
   8210e:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   82112:	bf14      	ite	ne
   82114:	2200      	movne	r2, #0
   82116:	2201      	moveq	r2, #1
   82118:	f3c5 0380 	ubfx	r3, r5, #2, #1
   8211c:	4d05      	ldr	r5, [pc, #20]	; (82134 <pio_configure_pin+0xd0>)
   8211e:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
   82120:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   82122:	e000      	b.n	82126 <pio_configure_pin+0xc2>

	default:
		return 0;
   82124:	2000      	movs	r0, #0
	}

	return 1;
}
   82126:	b002      	add	sp, #8
   82128:	bd70      	pop	{r4, r5, r6, pc}
   8212a:	bf00      	nop
   8212c:	00081fc1 	.word	0x00081fc1
   82130:	00082001 	.word	0x00082001
   82134:	00082035 	.word	0x00082035

00082138 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   82138:	b5f0      	push	{r4, r5, r6, r7, lr}
   8213a:	b083      	sub	sp, #12
   8213c:	4607      	mov	r7, r0
   8213e:	460e      	mov	r6, r1
   82140:	4615      	mov	r5, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   82142:	f002 44f0 	and.w	r4, r2, #2013265920	; 0x78000000
   82146:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   8214a:	d026      	beq.n	8219a <pio_configure_pin_group+0x62>
   8214c:	d806      	bhi.n	8215c <pio_configure_pin_group+0x24>
   8214e:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   82152:	d00a      	beq.n	8216a <pio_configure_pin_group+0x32>
   82154:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   82158:	d013      	beq.n	82182 <pio_configure_pin_group+0x4a>
   8215a:	e034      	b.n	821c6 <pio_configure_pin_group+0x8e>
   8215c:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   82160:	d01f      	beq.n	821a2 <pio_configure_pin_group+0x6a>
   82162:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   82166:	d01c      	beq.n	821a2 <pio_configure_pin_group+0x6a>
   82168:	e02d      	b.n	821c6 <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   8216a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8216e:	4632      	mov	r2, r6
   82170:	4b16      	ldr	r3, [pc, #88]	; (821cc <pio_configure_pin_group+0x94>)
   82172:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   82174:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   82178:	bf14      	ite	ne
   8217a:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8217c:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   8217e:	2001      	movs	r0, #1
   82180:	e022      	b.n	821c8 <pio_configure_pin_group+0x90>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   82182:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   82186:	4632      	mov	r2, r6
   82188:	4b10      	ldr	r3, [pc, #64]	; (821cc <pio_configure_pin_group+0x94>)
   8218a:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8218c:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   82190:	bf14      	ite	ne
   82192:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   82194:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   82196:	2001      	movs	r0, #1
   82198:	e016      	b.n	821c8 <pio_configure_pin_group+0x90>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   8219a:	4b0d      	ldr	r3, [pc, #52]	; (821d0 <pio_configure_pin_group+0x98>)
   8219c:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   8219e:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   821a0:	e012      	b.n	821c8 <pio_configure_pin_group+0x90>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   821a2:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   821a6:	f005 0301 	and.w	r3, r5, #1
   821aa:	9300      	str	r3, [sp, #0]
   821ac:	4638      	mov	r0, r7
   821ae:	4631      	mov	r1, r6
   821b0:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   821b4:	bf14      	ite	ne
   821b6:	2200      	movne	r2, #0
   821b8:	2201      	moveq	r2, #1
   821ba:	f3c5 0380 	ubfx	r3, r5, #2, #1
   821be:	4c05      	ldr	r4, [pc, #20]	; (821d4 <pio_configure_pin_group+0x9c>)
   821c0:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   821c2:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   821c4:	e000      	b.n	821c8 <pio_configure_pin_group+0x90>

	default:
		return 0;
   821c6:	2000      	movs	r0, #0
	}

	return 1;
}
   821c8:	b003      	add	sp, #12
   821ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   821cc:	00081fc1 	.word	0x00081fc1
   821d0:	00082001 	.word	0x00082001
   821d4:	00082035 	.word	0x00082035

000821d8 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   821d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   821dc:	4604      	mov	r4, r0
   821de:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   821e0:	4b10      	ldr	r3, [pc, #64]	; (82224 <pio_handler_process+0x4c>)
   821e2:	4798      	blx	r3
   821e4:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   821e6:	4620      	mov	r0, r4
   821e8:	4b0f      	ldr	r3, [pc, #60]	; (82228 <pio_handler_process+0x50>)
   821ea:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   821ec:	4005      	ands	r5, r0
   821ee:	d017      	beq.n	82220 <pio_handler_process+0x48>
   821f0:	4f0e      	ldr	r7, [pc, #56]	; (8222c <pio_handler_process+0x54>)
   821f2:	f107 040c 	add.w	r4, r7, #12
   821f6:	376c      	adds	r7, #108	; 0x6c
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   821f8:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   821fc:	42b3      	cmp	r3, r6
   821fe:	d10a      	bne.n	82216 <pio_handler_process+0x3e>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   82200:	f854 1c08 	ldr.w	r1, [r4, #-8]
   82204:	4229      	tst	r1, r5
   82206:	d006      	beq.n	82216 <pio_handler_process+0x3e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   82208:	6823      	ldr	r3, [r4, #0]
   8220a:	4630      	mov	r0, r6
   8220c:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   8220e:	f854 3c08 	ldr.w	r3, [r4, #-8]
   82212:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   82216:	42bc      	cmp	r4, r7
   82218:	d002      	beq.n	82220 <pio_handler_process+0x48>
   8221a:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   8221c:	2d00      	cmp	r5, #0
   8221e:	d1eb      	bne.n	821f8 <pio_handler_process+0x20>
   82220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82224:	0008205d 	.word	0x0008205d
   82228:	00082061 	.word	0x00082061
   8222c:	2007abf4 	.word	0x2007abf4

00082230 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   82230:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   82232:	4802      	ldr	r0, [pc, #8]	; (8223c <PIOA_Handler+0xc>)
   82234:	210b      	movs	r1, #11
   82236:	4b02      	ldr	r3, [pc, #8]	; (82240 <PIOA_Handler+0x10>)
   82238:	4798      	blx	r3
   8223a:	bd08      	pop	{r3, pc}
   8223c:	400e0e00 	.word	0x400e0e00
   82240:	000821d9 	.word	0x000821d9

00082244 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   82244:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   82246:	4802      	ldr	r0, [pc, #8]	; (82250 <PIOB_Handler+0xc>)
   82248:	210c      	movs	r1, #12
   8224a:	4b02      	ldr	r3, [pc, #8]	; (82254 <PIOB_Handler+0x10>)
   8224c:	4798      	blx	r3
   8224e:	bd08      	pop	{r3, pc}
   82250:	400e1000 	.word	0x400e1000
   82254:	000821d9 	.word	0x000821d9

00082258 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   82258:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   8225a:	4802      	ldr	r0, [pc, #8]	; (82264 <PIOC_Handler+0xc>)
   8225c:	210d      	movs	r1, #13
   8225e:	4b02      	ldr	r3, [pc, #8]	; (82268 <PIOC_Handler+0x10>)
   82260:	4798      	blx	r3
   82262:	bd08      	pop	{r3, pc}
   82264:	400e1200 	.word	0x400e1200
   82268:	000821d9 	.word	0x000821d9

0008226c <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   8226c:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   8226e:	4802      	ldr	r0, [pc, #8]	; (82278 <PIOD_Handler+0xc>)
   82270:	210e      	movs	r1, #14
   82272:	4b02      	ldr	r3, [pc, #8]	; (8227c <PIOD_Handler+0x10>)
   82274:	4798      	blx	r3
   82276:	bd08      	pop	{r3, pc}
   82278:	400e1400 	.word	0x400e1400
   8227c:	000821d9 	.word	0x000821d9

00082280 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   82280:	4b17      	ldr	r3, [pc, #92]	; (822e0 <pmc_switch_mck_to_pllack+0x60>)
   82282:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   82284:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   82288:	4310      	orrs	r0, r2
   8228a:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8228c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8228e:	f013 0f08 	tst.w	r3, #8
   82292:	d109      	bne.n	822a8 <pmc_switch_mck_to_pllack+0x28>
   82294:	f44f 6300 	mov.w	r3, #2048	; 0x800
   82298:	4911      	ldr	r1, [pc, #68]	; (822e0 <pmc_switch_mck_to_pllack+0x60>)
   8229a:	e001      	b.n	822a0 <pmc_switch_mck_to_pllack+0x20>
			--ul_timeout) {
		if (ul_timeout == 0) {
   8229c:	3b01      	subs	r3, #1
   8229e:	d019      	beq.n	822d4 <pmc_switch_mck_to_pllack+0x54>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   822a0:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   822a2:	f012 0f08 	tst.w	r2, #8
   822a6:	d0f9      	beq.n	8229c <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   822a8:	4b0d      	ldr	r3, [pc, #52]	; (822e0 <pmc_switch_mck_to_pllack+0x60>)
   822aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   822ac:	f022 0203 	bic.w	r2, r2, #3
   822b0:	f042 0202 	orr.w	r2, r2, #2
   822b4:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   822b6:	6e98      	ldr	r0, [r3, #104]	; 0x68
   822b8:	f010 0008 	ands.w	r0, r0, #8
   822bc:	d10c      	bne.n	822d8 <pmc_switch_mck_to_pllack+0x58>
   822be:	f44f 6300 	mov.w	r3, #2048	; 0x800
   822c2:	4907      	ldr	r1, [pc, #28]	; (822e0 <pmc_switch_mck_to_pllack+0x60>)
   822c4:	e001      	b.n	822ca <pmc_switch_mck_to_pllack+0x4a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   822c6:	3b01      	subs	r3, #1
   822c8:	d008      	beq.n	822dc <pmc_switch_mck_to_pllack+0x5c>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   822ca:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   822cc:	f012 0f08 	tst.w	r2, #8
   822d0:	d0f9      	beq.n	822c6 <pmc_switch_mck_to_pllack+0x46>
   822d2:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   822d4:	2001      	movs	r0, #1
   822d6:	4770      	bx	lr
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   822d8:	2000      	movs	r0, #0
   822da:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   822dc:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   822de:	4770      	bx	lr
   822e0:	400e0600 	.word	0x400e0600

000822e4 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   822e4:	b138      	cbz	r0, 822f6 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   822e6:	4911      	ldr	r1, [pc, #68]	; (8232c <pmc_switch_mainck_to_xtal+0x48>)
   822e8:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   822ea:	4a11      	ldr	r2, [pc, #68]	; (82330 <pmc_switch_mainck_to_xtal+0x4c>)
   822ec:	401a      	ands	r2, r3
   822ee:	4b11      	ldr	r3, [pc, #68]	; (82334 <pmc_switch_mainck_to_xtal+0x50>)
   822f0:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   822f2:	620b      	str	r3, [r1, #32]
   822f4:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   822f6:	4a0d      	ldr	r2, [pc, #52]	; (8232c <pmc_switch_mainck_to_xtal+0x48>)
   822f8:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   822fa:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   822fe:	f023 0303 	bic.w	r3, r3, #3
   82302:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   82306:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   8230a:	0209      	lsls	r1, r1, #8
   8230c:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   8230e:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   82310:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   82312:	6e93      	ldr	r3, [r2, #104]	; 0x68
   82314:	f013 0f01 	tst.w	r3, #1
   82318:	d0fb      	beq.n	82312 <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   8231a:	4a04      	ldr	r2, [pc, #16]	; (8232c <pmc_switch_mainck_to_xtal+0x48>)
   8231c:	6a13      	ldr	r3, [r2, #32]
   8231e:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   82322:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   82326:	6213      	str	r3, [r2, #32]
   82328:	4770      	bx	lr
   8232a:	bf00      	nop
   8232c:	400e0600 	.word	0x400e0600
   82330:	fec8fffc 	.word	0xfec8fffc
   82334:	01370002 	.word	0x01370002

00082338 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   82338:	4b02      	ldr	r3, [pc, #8]	; (82344 <pmc_osc_is_ready_mainck+0xc>)
   8233a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   8233c:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   82340:	4770      	bx	lr
   82342:	bf00      	nop
   82344:	400e0600 	.word	0x400e0600

00082348 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   82348:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   8234c:	4b01      	ldr	r3, [pc, #4]	; (82354 <pmc_disable_pllack+0xc>)
   8234e:	629a      	str	r2, [r3, #40]	; 0x28
   82350:	4770      	bx	lr
   82352:	bf00      	nop
   82354:	400e0600 	.word	0x400e0600

00082358 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   82358:	4b02      	ldr	r3, [pc, #8]	; (82364 <pmc_is_locked_pllack+0xc>)
   8235a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   8235c:	f000 0002 	and.w	r0, r0, #2
   82360:	4770      	bx	lr
   82362:	bf00      	nop
   82364:	400e0600 	.word	0x400e0600

00082368 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   82368:	282c      	cmp	r0, #44	; 0x2c
   8236a:	d820      	bhi.n	823ae <pmc_enable_periph_clk+0x46>
		return 1;
	}

	if (ul_id < 32) {
   8236c:	281f      	cmp	r0, #31
   8236e:	d80d      	bhi.n	8238c <pmc_enable_periph_clk+0x24>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   82370:	4b12      	ldr	r3, [pc, #72]	; (823bc <pmc_enable_periph_clk+0x54>)
   82372:	699a      	ldr	r2, [r3, #24]
   82374:	2301      	movs	r3, #1
   82376:	4083      	lsls	r3, r0
   82378:	401a      	ands	r2, r3
   8237a:	4293      	cmp	r3, r2
   8237c:	d019      	beq.n	823b2 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER0 = 1 << ul_id;
   8237e:	2301      	movs	r3, #1
   82380:	fa03 f000 	lsl.w	r0, r3, r0
   82384:	4b0d      	ldr	r3, [pc, #52]	; (823bc <pmc_enable_periph_clk+0x54>)
   82386:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   82388:	2000      	movs	r0, #0
   8238a:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   8238c:	4b0b      	ldr	r3, [pc, #44]	; (823bc <pmc_enable_periph_clk+0x54>)
   8238e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
   82392:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   82394:	2301      	movs	r3, #1
   82396:	4083      	lsls	r3, r0
   82398:	401a      	ands	r2, r3
   8239a:	4293      	cmp	r3, r2
   8239c:	d00b      	beq.n	823b6 <pmc_enable_periph_clk+0x4e>
			PMC->PMC_PCER1 = 1 << ul_id;
   8239e:	2301      	movs	r3, #1
   823a0:	fa03 f000 	lsl.w	r0, r3, r0
   823a4:	4b05      	ldr	r3, [pc, #20]	; (823bc <pmc_enable_periph_clk+0x54>)
   823a6:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   823aa:	2000      	movs	r0, #0
   823ac:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   823ae:	2001      	movs	r0, #1
   823b0:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   823b2:	2000      	movs	r0, #0
   823b4:	4770      	bx	lr
   823b6:	2000      	movs	r0, #0
}
   823b8:	4770      	bx	lr
   823ba:	bf00      	nop
   823bc:	400e0600 	.word	0x400e0600

000823c0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   823c0:	e7fe      	b.n	823c0 <Dummy_Handler>
   823c2:	bf00      	nop

000823c4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   823c4:	b510      	push	{r4, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   823c6:	4b1e      	ldr	r3, [pc, #120]	; (82440 <Reset_Handler+0x7c>)
   823c8:	4a1e      	ldr	r2, [pc, #120]	; (82444 <Reset_Handler+0x80>)
   823ca:	429a      	cmp	r2, r3
   823cc:	d003      	beq.n	823d6 <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   823ce:	4b1e      	ldr	r3, [pc, #120]	; (82448 <Reset_Handler+0x84>)
   823d0:	4a1b      	ldr	r2, [pc, #108]	; (82440 <Reset_Handler+0x7c>)
   823d2:	429a      	cmp	r2, r3
   823d4:	d304      	bcc.n	823e0 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   823d6:	4b1d      	ldr	r3, [pc, #116]	; (8244c <Reset_Handler+0x88>)
   823d8:	4a1d      	ldr	r2, [pc, #116]	; (82450 <Reset_Handler+0x8c>)
   823da:	429a      	cmp	r2, r3
   823dc:	d30f      	bcc.n	823fe <Reset_Handler+0x3a>
   823de:	e01a      	b.n	82416 <Reset_Handler+0x52>
   823e0:	4b1c      	ldr	r3, [pc, #112]	; (82454 <Reset_Handler+0x90>)
   823e2:	4c1d      	ldr	r4, [pc, #116]	; (82458 <Reset_Handler+0x94>)
   823e4:	1ae4      	subs	r4, r4, r3
   823e6:	f024 0403 	bic.w	r4, r4, #3
   823ea:	3404      	adds	r4, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   823ec:	2300      	movs	r3, #0
			*pDest++ = *pSrc++;
   823ee:	4814      	ldr	r0, [pc, #80]	; (82440 <Reset_Handler+0x7c>)
   823f0:	4914      	ldr	r1, [pc, #80]	; (82444 <Reset_Handler+0x80>)
   823f2:	585a      	ldr	r2, [r3, r1]
   823f4:	501a      	str	r2, [r3, r0]
   823f6:	3304      	adds	r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   823f8:	42a3      	cmp	r3, r4
   823fa:	d1fa      	bne.n	823f2 <Reset_Handler+0x2e>
   823fc:	e7eb      	b.n	823d6 <Reset_Handler+0x12>
   823fe:	4b17      	ldr	r3, [pc, #92]	; (8245c <Reset_Handler+0x98>)
   82400:	4917      	ldr	r1, [pc, #92]	; (82460 <Reset_Handler+0x9c>)
   82402:	1ac9      	subs	r1, r1, r3
   82404:	f021 0103 	bic.w	r1, r1, #3
   82408:	1d1a      	adds	r2, r3, #4
   8240a:	4411      	add	r1, r2
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   8240c:	2200      	movs	r2, #0
   8240e:	f843 2f04 	str.w	r2, [r3, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   82412:	428b      	cmp	r3, r1
   82414:	d1fb      	bne.n	8240e <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   82416:	4a13      	ldr	r2, [pc, #76]	; (82464 <Reset_Handler+0xa0>)
   82418:	f022 4360 	bic.w	r3, r2, #3758096384	; 0xe0000000
   8241c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   82420:	4911      	ldr	r1, [pc, #68]	; (82468 <Reset_Handler+0xa4>)
   82422:	608b      	str	r3, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   82424:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
   82428:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
   8242c:	d203      	bcs.n	82436 <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   8242e:	688a      	ldr	r2, [r1, #8]
   82430:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   82434:	608a      	str	r2, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   82436:	4b0d      	ldr	r3, [pc, #52]	; (8246c <Reset_Handler+0xa8>)
   82438:	4798      	blx	r3

	/* Branch to main function */
	main();
   8243a:	4b0d      	ldr	r3, [pc, #52]	; (82470 <Reset_Handler+0xac>)
   8243c:	4798      	blx	r3
   8243e:	e7fe      	b.n	8243e <Reset_Handler+0x7a>
   82440:	20070000 	.word	0x20070000
   82444:	00085be4 	.word	0x00085be4
   82448:	200709ec 	.word	0x200709ec
   8244c:	2007acd4 	.word	0x2007acd4
   82450:	200709f0 	.word	0x200709f0
   82454:	20070004 	.word	0x20070004
   82458:	200709ef 	.word	0x200709ef
   8245c:	200709ec 	.word	0x200709ec
   82460:	2007accf 	.word	0x2007accf
   82464:	00080000 	.word	0x00080000
   82468:	e000ed00 	.word	0xe000ed00
   8246c:	000829c9 	.word	0x000829c9
   82470:	000828f9 	.word	0x000828f9

00082474 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   82474:	4b3e      	ldr	r3, [pc, #248]	; (82570 <SystemCoreClockUpdate+0xfc>)
   82476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82478:	f003 0303 	and.w	r3, r3, #3
   8247c:	2b03      	cmp	r3, #3
   8247e:	d85f      	bhi.n	82540 <SystemCoreClockUpdate+0xcc>
   82480:	e8df f003 	tbb	[pc, r3]
   82484:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   82488:	4b3a      	ldr	r3, [pc, #232]	; (82574 <SystemCoreClockUpdate+0x100>)
   8248a:	695b      	ldr	r3, [r3, #20]
   8248c:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   82490:	bf14      	ite	ne
   82492:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   82496:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   8249a:	4b37      	ldr	r3, [pc, #220]	; (82578 <SystemCoreClockUpdate+0x104>)
   8249c:	601a      	str	r2, [r3, #0]
   8249e:	e04f      	b.n	82540 <SystemCoreClockUpdate+0xcc>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   824a0:	4b33      	ldr	r3, [pc, #204]	; (82570 <SystemCoreClockUpdate+0xfc>)
   824a2:	6a1b      	ldr	r3, [r3, #32]
   824a4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   824a8:	d003      	beq.n	824b2 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   824aa:	4a34      	ldr	r2, [pc, #208]	; (8257c <SystemCoreClockUpdate+0x108>)
   824ac:	4b32      	ldr	r3, [pc, #200]	; (82578 <SystemCoreClockUpdate+0x104>)
   824ae:	601a      	str	r2, [r3, #0]
   824b0:	e046      	b.n	82540 <SystemCoreClockUpdate+0xcc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   824b2:	4a33      	ldr	r2, [pc, #204]	; (82580 <SystemCoreClockUpdate+0x10c>)
   824b4:	4b30      	ldr	r3, [pc, #192]	; (82578 <SystemCoreClockUpdate+0x104>)
   824b6:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   824b8:	4b2d      	ldr	r3, [pc, #180]	; (82570 <SystemCoreClockUpdate+0xfc>)
   824ba:	6a1b      	ldr	r3, [r3, #32]
   824bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
   824c0:	2b10      	cmp	r3, #16
   824c2:	d002      	beq.n	824ca <SystemCoreClockUpdate+0x56>
   824c4:	2b20      	cmp	r3, #32
   824c6:	d004      	beq.n	824d2 <SystemCoreClockUpdate+0x5e>
   824c8:	e03a      	b.n	82540 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   824ca:	4a2e      	ldr	r2, [pc, #184]	; (82584 <SystemCoreClockUpdate+0x110>)
   824cc:	4b2a      	ldr	r3, [pc, #168]	; (82578 <SystemCoreClockUpdate+0x104>)
   824ce:	601a      	str	r2, [r3, #0]
				break;
   824d0:	e036      	b.n	82540 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   824d2:	4a2a      	ldr	r2, [pc, #168]	; (8257c <SystemCoreClockUpdate+0x108>)
   824d4:	4b28      	ldr	r3, [pc, #160]	; (82578 <SystemCoreClockUpdate+0x104>)
   824d6:	601a      	str	r2, [r3, #0]
				break;
   824d8:	e032      	b.n	82540 <SystemCoreClockUpdate+0xcc>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   824da:	4b25      	ldr	r3, [pc, #148]	; (82570 <SystemCoreClockUpdate+0xfc>)
   824dc:	6a1b      	ldr	r3, [r3, #32]
   824de:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   824e2:	d003      	beq.n	824ec <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   824e4:	4a25      	ldr	r2, [pc, #148]	; (8257c <SystemCoreClockUpdate+0x108>)
   824e6:	4b24      	ldr	r3, [pc, #144]	; (82578 <SystemCoreClockUpdate+0x104>)
   824e8:	601a      	str	r2, [r3, #0]
   824ea:	e012      	b.n	82512 <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   824ec:	4a24      	ldr	r2, [pc, #144]	; (82580 <SystemCoreClockUpdate+0x10c>)
   824ee:	4b22      	ldr	r3, [pc, #136]	; (82578 <SystemCoreClockUpdate+0x104>)
   824f0:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   824f2:	4b1f      	ldr	r3, [pc, #124]	; (82570 <SystemCoreClockUpdate+0xfc>)
   824f4:	6a1b      	ldr	r3, [r3, #32]
   824f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
   824fa:	2b10      	cmp	r3, #16
   824fc:	d002      	beq.n	82504 <SystemCoreClockUpdate+0x90>
   824fe:	2b20      	cmp	r3, #32
   82500:	d004      	beq.n	8250c <SystemCoreClockUpdate+0x98>
   82502:	e006      	b.n	82512 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   82504:	4a1f      	ldr	r2, [pc, #124]	; (82584 <SystemCoreClockUpdate+0x110>)
   82506:	4b1c      	ldr	r3, [pc, #112]	; (82578 <SystemCoreClockUpdate+0x104>)
   82508:	601a      	str	r2, [r3, #0]
				break;
   8250a:	e002      	b.n	82512 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   8250c:	4a1b      	ldr	r2, [pc, #108]	; (8257c <SystemCoreClockUpdate+0x108>)
   8250e:	4b1a      	ldr	r3, [pc, #104]	; (82578 <SystemCoreClockUpdate+0x104>)
   82510:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   82512:	4b17      	ldr	r3, [pc, #92]	; (82570 <SystemCoreClockUpdate+0xfc>)
   82514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82516:	f003 0303 	and.w	r3, r3, #3
   8251a:	2b02      	cmp	r3, #2
   8251c:	d10d      	bne.n	8253a <SystemCoreClockUpdate+0xc6>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   8251e:	4b14      	ldr	r3, [pc, #80]	; (82570 <SystemCoreClockUpdate+0xfc>)
   82520:	6a98      	ldr	r0, [r3, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   82522:	6a99      	ldr	r1, [r3, #40]	; 0x28
   82524:	4b14      	ldr	r3, [pc, #80]	; (82578 <SystemCoreClockUpdate+0x104>)
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   82526:	f3c0 400a 	ubfx	r0, r0, #16, #11
   8252a:	681a      	ldr	r2, [r3, #0]
   8252c:	fb00 2202 	mla	r2, r0, r2, r2
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   82530:	b2c9      	uxtb	r1, r1
   82532:	fbb2 f2f1 	udiv	r2, r2, r1
   82536:	601a      	str	r2, [r3, #0]
   82538:	e002      	b.n	82540 <SystemCoreClockUpdate+0xcc>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   8253a:	4a13      	ldr	r2, [pc, #76]	; (82588 <SystemCoreClockUpdate+0x114>)
   8253c:	4b0e      	ldr	r3, [pc, #56]	; (82578 <SystemCoreClockUpdate+0x104>)
   8253e:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   82540:	4b0b      	ldr	r3, [pc, #44]	; (82570 <SystemCoreClockUpdate+0xfc>)
   82542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82544:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82548:	2b70      	cmp	r3, #112	; 0x70
   8254a:	d107      	bne.n	8255c <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
   8254c:	4b0a      	ldr	r3, [pc, #40]	; (82578 <SystemCoreClockUpdate+0x104>)
   8254e:	681a      	ldr	r2, [r3, #0]
   82550:	490e      	ldr	r1, [pc, #56]	; (8258c <SystemCoreClockUpdate+0x118>)
   82552:	fba1 0202 	umull	r0, r2, r1, r2
   82556:	0852      	lsrs	r2, r2, #1
   82558:	601a      	str	r2, [r3, #0]
   8255a:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   8255c:	4b04      	ldr	r3, [pc, #16]	; (82570 <SystemCoreClockUpdate+0xfc>)
   8255e:	6b19      	ldr	r1, [r3, #48]	; 0x30
   82560:	4b05      	ldr	r3, [pc, #20]	; (82578 <SystemCoreClockUpdate+0x104>)
   82562:	f3c1 1102 	ubfx	r1, r1, #4, #3
   82566:	681a      	ldr	r2, [r3, #0]
   82568:	40ca      	lsrs	r2, r1
   8256a:	601a      	str	r2, [r3, #0]
   8256c:	4770      	bx	lr
   8256e:	bf00      	nop
   82570:	400e0600 	.word	0x400e0600
   82574:	400e1a10 	.word	0x400e1a10
   82578:	20070184 	.word	0x20070184
   8257c:	00b71b00 	.word	0x00b71b00
   82580:	003d0900 	.word	0x003d0900
   82584:	007a1200 	.word	0x007a1200
   82588:	0e4e1c00 	.word	0x0e4e1c00
   8258c:	aaaaaaab 	.word	0xaaaaaaab

00082590 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   82590:	4b09      	ldr	r3, [pc, #36]	; (825b8 <_sbrk+0x28>)
   82592:	681b      	ldr	r3, [r3, #0]
   82594:	b913      	cbnz	r3, 8259c <_sbrk+0xc>
		heap = (unsigned char *)&_end;
   82596:	4a09      	ldr	r2, [pc, #36]	; (825bc <_sbrk+0x2c>)
   82598:	4b07      	ldr	r3, [pc, #28]	; (825b8 <_sbrk+0x28>)
   8259a:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   8259c:	4b06      	ldr	r3, [pc, #24]	; (825b8 <_sbrk+0x28>)
   8259e:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   825a0:	181a      	adds	r2, r3, r0
   825a2:	4907      	ldr	r1, [pc, #28]	; (825c0 <_sbrk+0x30>)
   825a4:	4291      	cmp	r1, r2
   825a6:	db04      	blt.n	825b2 <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
   825a8:	4610      	mov	r0, r2
   825aa:	4a03      	ldr	r2, [pc, #12]	; (825b8 <_sbrk+0x28>)
   825ac:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   825ae:	4618      	mov	r0, r3
   825b0:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
   825b2:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
   825b6:	4770      	bx	lr
   825b8:	2007ac64 	.word	0x2007ac64
   825bc:	2007ccd8 	.word	0x2007ccd8
   825c0:	20087ffc 	.word	0x20087ffc

000825c4 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   825c4:	f04f 30ff 	mov.w	r0, #4294967295
   825c8:	4770      	bx	lr
   825ca:	bf00      	nop

000825cc <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   825cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   825d0:	604b      	str	r3, [r1, #4]

	return 0;
}
   825d2:	2000      	movs	r0, #0
   825d4:	4770      	bx	lr
   825d6:	bf00      	nop

000825d8 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   825d8:	2001      	movs	r0, #1
   825da:	4770      	bx	lr

000825dc <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   825dc:	2000      	movs	r0, #0
   825de:	4770      	bx	lr

000825e0 <vGotoTask>:
typedef enum state state_t;
state_t current_state;
state_t next_state;


void vGotoTask( void *pvParam) {
   825e0:	b510      	push	{r4, lr}
   825e2:	b082      	sub	sp, #8
	uint32_t receivedValue;
	if(xQueueReceive(xObjectQueue, &receivedValue, 0) == pdPASS){
   825e4:	4b0f      	ldr	r3, [pc, #60]	; (82624 <vGotoTask+0x44>)
   825e6:	6818      	ldr	r0, [r3, #0]
   825e8:	a901      	add	r1, sp, #4
   825ea:	2200      	movs	r2, #0
   825ec:	4613      	mov	r3, r2
   825ee:	4c0e      	ldr	r4, [pc, #56]	; (82628 <vGotoTask+0x48>)
   825f0:	47a0      	blx	r4
   825f2:	2801      	cmp	r0, #1
   825f4:	d106      	bne.n	82604 <vGotoTask+0x24>
		printf("\nSuccessfully received value: %u", receivedValue);
   825f6:	480d      	ldr	r0, [pc, #52]	; (8262c <vGotoTask+0x4c>)
   825f8:	9901      	ldr	r1, [sp, #4]
   825fa:	4b0d      	ldr	r3, [pc, #52]	; (82630 <vGotoTask+0x50>)
   825fc:	4798      	blx	r3
		vTaskDelay(pdMSTOTICKS(100));
   825fe:	2064      	movs	r0, #100	; 0x64
   82600:	4b0c      	ldr	r3, [pc, #48]	; (82634 <vGotoTask+0x54>)
   82602:	4798      	blx	r3
	}
	
	printf("\nGiving semaphore");
   82604:	480c      	ldr	r0, [pc, #48]	; (82638 <vGotoTask+0x58>)
   82606:	4b0a      	ldr	r3, [pc, #40]	; (82630 <vGotoTask+0x50>)
   82608:	4798      	blx	r3
	xSemaphoreGive(xCheckSemaphore);
   8260a:	4b0c      	ldr	r3, [pc, #48]	; (8263c <vGotoTask+0x5c>)
   8260c:	6818      	ldr	r0, [r3, #0]
   8260e:	2100      	movs	r1, #0
   82610:	460a      	mov	r2, r1
   82612:	460b      	mov	r3, r1
   82614:	4c0a      	ldr	r4, [pc, #40]	; (82640 <vGotoTask+0x60>)
   82616:	47a0      	blx	r4
	todo_task->done = 1;
	xSemaphoreGive(*(todo_task->pxSemaphore));
	vTaskDelete(NULL);

	*/
	vTaskDelete(NULL);
   82618:	2000      	movs	r0, #0
   8261a:	4b0a      	ldr	r3, [pc, #40]	; (82644 <vGotoTask+0x64>)
   8261c:	4798      	blx	r3
}
   8261e:	b002      	add	sp, #8
   82620:	bd10      	pop	{r4, pc}
   82622:	bf00      	nop
   82624:	2007acb8 	.word	0x2007acb8
   82628:	00080acd 	.word	0x00080acd
   8262c:	00085a88 	.word	0x00085a88
   82630:	00082a19 	.word	0x00082a19
   82634:	0008121d 	.word	0x0008121d
   82638:	00085aac 	.word	0x00085aac
   8263c:	2007acc0 	.word	0x2007acc0
   82640:	00080921 	.word	0x00080921
   82644:	00080ed5 	.word	0x00080ed5

00082648 <vTwiTask>:
	xSemaphoreGive(*(todo_task->pxSemaphore));
	printf("\nDUMPING!!!!!");
	vTaskDelete(NULL);
}

void vTwiTask(void *pvParameter){
   82648:	b510      	push	{r4, lr}
   8264a:	b082      	sub	sp, #8
	uint8_t dum[3];
	dum[0] = TWI_CMD_FROM_ARM_ID;
   8264c:	2310      	movs	r3, #16
   8264e:	f88d 3004 	strb.w	r3, [sp, #4]
	dum[1] = 0;
   82652:	2400      	movs	r4, #0
   82654:	f88d 4005 	strb.w	r4, [sp, #5]
	dum[2] = 0;
   82658:	f88d 4006 	strb.w	r4, [sp, #6]
	uint8_t result = sendArm(dum, 3);
   8265c:	a801      	add	r0, sp, #4
   8265e:	2103      	movs	r1, #3
   82660:	4b13      	ldr	r3, [pc, #76]	; (826b0 <vTwiTask+0x68>)
   82662:	4798      	blx	r3
	{
		//puts("Send successful");
	}else{
		//puts("Fail");
	}
	vTaskDelay(pdMSTOTICKS(40));
   82664:	2028      	movs	r0, #40	; 0x28
   82666:	4b13      	ldr	r3, [pc, #76]	; (826b4 <vTwiTask+0x6c>)
   82668:	4798      	blx	r3
	uint8_t rec[3] = {0};
   8266a:	f8ad 4000 	strh.w	r4, [sp]
   8266e:	f88d 4002 	strb.w	r4, [sp, #2]
	result = reciveFromArm(rec,3);
   82672:	4668      	mov	r0, sp
   82674:	2103      	movs	r1, #3
   82676:	4b10      	ldr	r3, [pc, #64]	; (826b8 <vTwiTask+0x70>)
   82678:	4798      	blx	r3
	if (result)
   8267a:	b148      	cbz	r0, 82690 <vTwiTask+0x48>
	{
		printf("Receive successful: %u, %u, %u\n", rec[0], rec[1], rec[2]);
   8267c:	480f      	ldr	r0, [pc, #60]	; (826bc <vTwiTask+0x74>)
   8267e:	f89d 1000 	ldrb.w	r1, [sp]
   82682:	f89d 2001 	ldrb.w	r2, [sp, #1]
   82686:	f89d 3002 	ldrb.w	r3, [sp, #2]
   8268a:	4c0d      	ldr	r4, [pc, #52]	; (826c0 <vTwiTask+0x78>)
   8268c:	47a0      	blx	r4
   8268e:	e002      	b.n	82696 <vTwiTask+0x4e>
		//vTaskDelay(pdMSTOTICKS(10));
	}else{
		puts("Receive failed");
   82690:	480c      	ldr	r0, [pc, #48]	; (826c4 <vTwiTask+0x7c>)
   82692:	4b0d      	ldr	r3, [pc, #52]	; (826c8 <vTwiTask+0x80>)
   82694:	4798      	blx	r3
		//vTaskDelay(pdMSTOTICKS(10));
	}
	xSemaphoreGive(xSemaphoreTWI);
   82696:	4b0d      	ldr	r3, [pc, #52]	; (826cc <vTwiTask+0x84>)
   82698:	6818      	ldr	r0, [r3, #0]
   8269a:	2100      	movs	r1, #0
   8269c:	460a      	mov	r2, r1
   8269e:	460b      	mov	r3, r1
   826a0:	4c0b      	ldr	r4, [pc, #44]	; (826d0 <vTwiTask+0x88>)
   826a2:	47a0      	blx	r4
	vTaskDelete(NULL);
   826a4:	2000      	movs	r0, #0
   826a6:	4b0b      	ldr	r3, [pc, #44]	; (826d4 <vTwiTask+0x8c>)
   826a8:	4798      	blx	r3
}
   826aa:	b002      	add	sp, #8
   826ac:	bd10      	pop	{r4, pc}
   826ae:	bf00      	nop
   826b0:	00081bd1 	.word	0x00081bd1
   826b4:	0008121d 	.word	0x0008121d
   826b8:	00081c15 	.word	0x00081c15
   826bc:	00085ac0 	.word	0x00085ac0
   826c0:	00082a19 	.word	0x00082a19
   826c4:	00085ae0 	.word	0x00085ae0
   826c8:	00082c21 	.word	0x00082c21
   826cc:	2007aca8 	.word	0x2007aca8
   826d0:	00080921 	.word	0x00080921
   826d4:	00080ed5 	.word	0x00080ed5

000826d8 <vController>:

void vController(void *pvParam) {
   826d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   826dc:	b088      	sub	sp, #32
	uint32_t objectID[] = {0, 1, 2, 3};	
   826de:	4b73      	ldr	r3, [pc, #460]	; (828ac <vController+0x1d4>)
   826e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   826e2:	ac08      	add	r4, sp, #32
   826e4:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
	printf("\n");
	printf("\nDRIVING AND TWI FINISHED");
	*/
	while (1)
	{
		switch (current_state)
   826e8:	4d71      	ldr	r5, [pc, #452]	; (828b0 <vController+0x1d8>)
				{
					printf("\nSemaphore has been received");
				}
				next_state = DROP_OFF;
			case DROP_OFF:
		        vTaskDelete(NULL);     
   826ea:	4e72      	ldr	r6, [pc, #456]	; (828b4 <vController+0x1dc>)
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   826ec:	4f72      	ldr	r7, [pc, #456]	; (828b8 <vController+0x1e0>)
	printf("\n");
	printf("\nDRIVING AND TWI FINISHED");
	*/
	while (1)
	{
		switch (current_state)
   826ee:	782b      	ldrb	r3, [r5, #0]
   826f0:	2b07      	cmp	r3, #7
   826f2:	f200 80d7 	bhi.w	828a4 <vController+0x1cc>
   826f6:	e8df f013 	tbh	[pc, r3, lsl #1]
   826fa:	0008      	.short	0x0008
   826fc:	0058002e 	.word	0x0058002e
   82700:	00aa0081 	.word	0x00aa0081
   82704:	00d500d5 	.word	0x00d500d5
   82708:	00d3      	.short	0x00d3
   8270a:	f44f 0800 	mov.w	r8, #8388608	; 0x800000
   8270e:	f8c7 8030 	str.w	r8, [r7, #48]	; 0x30
		{
			case INITIALIZE_ARM:
			     //get arm info
			     //get object pos info 1-4 (with goal box)
				 ioport_set_pin_level(D7, 1);
			     xTaskCreate(vTwiTask, "TWI", 1000, NULL, 1, pxTaskTwi);
   82712:	2301      	movs	r3, #1
   82714:	9300      	str	r3, [sp, #0]
   82716:	4b69      	ldr	r3, [pc, #420]	; (828bc <vController+0x1e4>)
   82718:	681b      	ldr	r3, [r3, #0]
   8271a:	9301      	str	r3, [sp, #4]
   8271c:	2400      	movs	r4, #0
   8271e:	9402      	str	r4, [sp, #8]
   82720:	9403      	str	r4, [sp, #12]
   82722:	4867      	ldr	r0, [pc, #412]	; (828c0 <vController+0x1e8>)
   82724:	4967      	ldr	r1, [pc, #412]	; (828c4 <vController+0x1ec>)
   82726:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   8272a:	4623      	mov	r3, r4
   8272c:	f8df c1c0 	ldr.w	ip, [pc, #448]	; 828f0 <vController+0x218>
   82730:	47e0      	blx	ip
			     vTaskDelay(pdMSTOTICKS(300));
   82732:	f44f 7096 	mov.w	r0, #300	; 0x12c
   82736:	4b64      	ldr	r3, [pc, #400]	; (828c8 <vController+0x1f0>)
   82738:	4798      	blx	r3
			     if(xSemaphoreTake(xSemaphoreTWI, pdMSTOTICKS(10000)) == pdTRUE){
   8273a:	4b64      	ldr	r3, [pc, #400]	; (828cc <vController+0x1f4>)
   8273c:	6818      	ldr	r0, [r3, #0]
   8273e:	4621      	mov	r1, r4
   82740:	f242 7210 	movw	r2, #10000	; 0x2710
   82744:	4623      	mov	r3, r4
   82746:	f8df c19c 	ldr.w	ip, [pc, #412]	; 828e4 <vController+0x20c>
   8274a:	47e0      	blx	ip
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   8274c:	f8c7 8034 	str.w	r8, [r7, #52]	; 0x34
			     }
				 ioport_set_pin_level(D7, 0);
			     next_state = INITIALIZE_ARM;
   82750:	4b5f      	ldr	r3, [pc, #380]	; (828d0 <vController+0x1f8>)
   82752:	701c      	strb	r4, [r3, #0]
			break;
   82754:	e0a6      	b.n	828a4 <vController+0x1cc>
			case POSITION_ONE:
			     xTaskCreate(vGotoTask, "GotoObject", 1000, NULL, 1, NULL);
   82756:	2301      	movs	r3, #1
   82758:	9300      	str	r3, [sp, #0]
   8275a:	2400      	movs	r4, #0
   8275c:	9401      	str	r4, [sp, #4]
   8275e:	9402      	str	r4, [sp, #8]
   82760:	9403      	str	r4, [sp, #12]
   82762:	485c      	ldr	r0, [pc, #368]	; (828d4 <vController+0x1fc>)
   82764:	495c      	ldr	r1, [pc, #368]	; (828d8 <vController+0x200>)
   82766:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   8276a:	4623      	mov	r3, r4
   8276c:	f8df c180 	ldr.w	ip, [pc, #384]	; 828f0 <vController+0x218>
   82770:	47e0      	blx	ip
			     xQueueSendToBack(xObjectQueue, (void *) &objectID[1], 0);
   82772:	4b5a      	ldr	r3, [pc, #360]	; (828dc <vController+0x204>)
   82774:	6818      	ldr	r0, [r3, #0]
   82776:	a905      	add	r1, sp, #20
   82778:	4622      	mov	r2, r4
   8277a:	4623      	mov	r3, r4
   8277c:	f8df c174 	ldr.w	ip, [pc, #372]	; 828f4 <vController+0x21c>
   82780:	47e0      	blx	ip
			     vTaskDelay(pdMSTOTICKS(100));
   82782:	2064      	movs	r0, #100	; 0x64
   82784:	4b50      	ldr	r3, [pc, #320]	; (828c8 <vController+0x1f0>)
   82786:	4798      	blx	r3
			     if (xSemaphoreTake(xCheckSemaphore, pdMSTOTICKS(10000)) == pdTRUE) //wait in Blocked state for semaphore max 10 s
   82788:	4b55      	ldr	r3, [pc, #340]	; (828e0 <vController+0x208>)
   8278a:	6818      	ldr	r0, [r3, #0]
   8278c:	4621      	mov	r1, r4
   8278e:	f242 7210 	movw	r2, #10000	; 0x2710
   82792:	4623      	mov	r3, r4
   82794:	4c53      	ldr	r4, [pc, #332]	; (828e4 <vController+0x20c>)
   82796:	47a0      	blx	r4
   82798:	2801      	cmp	r0, #1
   8279a:	d102      	bne.n	827a2 <vController+0xca>
			     {
				     printf("\nSemaphore has been received");
   8279c:	4852      	ldr	r0, [pc, #328]	; (828e8 <vController+0x210>)
   8279e:	4b53      	ldr	r3, [pc, #332]	; (828ec <vController+0x214>)
   827a0:	4798      	blx	r3
			     }
				 next_state = POSITION_TWO;
   827a2:	2202      	movs	r2, #2
   827a4:	4b4a      	ldr	r3, [pc, #296]	; (828d0 <vController+0x1f8>)
   827a6:	701a      	strb	r2, [r3, #0]
			break;
   827a8:	e07c      	b.n	828a4 <vController+0x1cc>
			case POSITION_TWO:
				xTaskCreate(vGotoTask, "GotoObject", 1000, NULL, 1, NULL);
   827aa:	2301      	movs	r3, #1
   827ac:	9300      	str	r3, [sp, #0]
   827ae:	2400      	movs	r4, #0
   827b0:	9401      	str	r4, [sp, #4]
   827b2:	9402      	str	r4, [sp, #8]
   827b4:	9403      	str	r4, [sp, #12]
   827b6:	4847      	ldr	r0, [pc, #284]	; (828d4 <vController+0x1fc>)
   827b8:	4947      	ldr	r1, [pc, #284]	; (828d8 <vController+0x200>)
   827ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   827be:	4623      	mov	r3, r4
   827c0:	f8df c12c 	ldr.w	ip, [pc, #300]	; 828f0 <vController+0x218>
   827c4:	47e0      	blx	ip
				xQueueSendToBack(xObjectQueue, (void *) &objectID[2], 0);
   827c6:	4b45      	ldr	r3, [pc, #276]	; (828dc <vController+0x204>)
   827c8:	6818      	ldr	r0, [r3, #0]
   827ca:	a906      	add	r1, sp, #24
   827cc:	4622      	mov	r2, r4
   827ce:	4623      	mov	r3, r4
   827d0:	f8df c120 	ldr.w	ip, [pc, #288]	; 828f4 <vController+0x21c>
   827d4:	47e0      	blx	ip
				vTaskDelay(pdMSTOTICKS(100));
   827d6:	2064      	movs	r0, #100	; 0x64
   827d8:	4b3b      	ldr	r3, [pc, #236]	; (828c8 <vController+0x1f0>)
   827da:	4798      	blx	r3
				if (xSemaphoreTake(xCheckSemaphore, pdMSTOTICKS(10000)) == pdTRUE) //wait in Blocked state for semaphore max 10 s
   827dc:	4b40      	ldr	r3, [pc, #256]	; (828e0 <vController+0x208>)
   827de:	6818      	ldr	r0, [r3, #0]
   827e0:	4621      	mov	r1, r4
   827e2:	f242 7210 	movw	r2, #10000	; 0x2710
   827e6:	4623      	mov	r3, r4
   827e8:	4c3e      	ldr	r4, [pc, #248]	; (828e4 <vController+0x20c>)
   827ea:	47a0      	blx	r4
   827ec:	2801      	cmp	r0, #1
   827ee:	d102      	bne.n	827f6 <vController+0x11e>
				{
					printf("\nSemaphore has been received");
   827f0:	483d      	ldr	r0, [pc, #244]	; (828e8 <vController+0x210>)
   827f2:	4b3e      	ldr	r3, [pc, #248]	; (828ec <vController+0x214>)
   827f4:	4798      	blx	r3
				}
				next_state = POSITION_THREE;
   827f6:	2203      	movs	r2, #3
   827f8:	4b35      	ldr	r3, [pc, #212]	; (828d0 <vController+0x1f8>)
   827fa:	701a      	strb	r2, [r3, #0]
			case POSITION_THREE:
				xTaskCreate(vGotoTask, "GotoObject", 1000, NULL, 1, NULL);
   827fc:	2301      	movs	r3, #1
   827fe:	9300      	str	r3, [sp, #0]
   82800:	2400      	movs	r4, #0
   82802:	9401      	str	r4, [sp, #4]
   82804:	9402      	str	r4, [sp, #8]
   82806:	9403      	str	r4, [sp, #12]
   82808:	4832      	ldr	r0, [pc, #200]	; (828d4 <vController+0x1fc>)
   8280a:	4933      	ldr	r1, [pc, #204]	; (828d8 <vController+0x200>)
   8280c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   82810:	4623      	mov	r3, r4
   82812:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 828f0 <vController+0x218>
   82816:	47e0      	blx	ip
				xQueueSendToBack(xObjectQueue, (void *) &objectID[3], 0);
   82818:	4b30      	ldr	r3, [pc, #192]	; (828dc <vController+0x204>)
   8281a:	6818      	ldr	r0, [r3, #0]
   8281c:	a907      	add	r1, sp, #28
   8281e:	4622      	mov	r2, r4
   82820:	4623      	mov	r3, r4
   82822:	f8df c0d0 	ldr.w	ip, [pc, #208]	; 828f4 <vController+0x21c>
   82826:	47e0      	blx	ip
				vTaskDelay(pdMSTOTICKS(100));
   82828:	2064      	movs	r0, #100	; 0x64
   8282a:	4b27      	ldr	r3, [pc, #156]	; (828c8 <vController+0x1f0>)
   8282c:	4798      	blx	r3
				if (xSemaphoreTake(xCheckSemaphore, pdMSTOTICKS(10000)) == pdTRUE) //wait in Blocked state for semaphore max 10 s
   8282e:	4b2c      	ldr	r3, [pc, #176]	; (828e0 <vController+0x208>)
   82830:	6818      	ldr	r0, [r3, #0]
   82832:	4621      	mov	r1, r4
   82834:	f242 7210 	movw	r2, #10000	; 0x2710
   82838:	4623      	mov	r3, r4
   8283a:	4c2a      	ldr	r4, [pc, #168]	; (828e4 <vController+0x20c>)
   8283c:	47a0      	blx	r4
   8283e:	2801      	cmp	r0, #1
   82840:	d102      	bne.n	82848 <vController+0x170>
				{
					printf("\nSemaphore has been received");
   82842:	4829      	ldr	r0, [pc, #164]	; (828e8 <vController+0x210>)
   82844:	4b29      	ldr	r3, [pc, #164]	; (828ec <vController+0x214>)
   82846:	4798      	blx	r3
				}
				next_state = POSITION_FOUR;
   82848:	2204      	movs	r2, #4
   8284a:	4b21      	ldr	r3, [pc, #132]	; (828d0 <vController+0x1f8>)
   8284c:	701a      	strb	r2, [r3, #0]
			case POSITION_FOUR:
				xTaskCreate(vGotoTask, "GotoObject", 1000, NULL, 1, NULL);
   8284e:	2301      	movs	r3, #1
   82850:	9300      	str	r3, [sp, #0]
   82852:	2400      	movs	r4, #0
   82854:	9401      	str	r4, [sp, #4]
   82856:	9402      	str	r4, [sp, #8]
   82858:	9403      	str	r4, [sp, #12]
   8285a:	481e      	ldr	r0, [pc, #120]	; (828d4 <vController+0x1fc>)
   8285c:	491e      	ldr	r1, [pc, #120]	; (828d8 <vController+0x200>)
   8285e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   82862:	4623      	mov	r3, r4
   82864:	f8df c088 	ldr.w	ip, [pc, #136]	; 828f0 <vController+0x218>
   82868:	47e0      	blx	ip
				xQueueSendToBack(xObjectQueue, (void *) &objectID[0], 0);
   8286a:	4b1c      	ldr	r3, [pc, #112]	; (828dc <vController+0x204>)
   8286c:	6818      	ldr	r0, [r3, #0]
   8286e:	a904      	add	r1, sp, #16
   82870:	4622      	mov	r2, r4
   82872:	4623      	mov	r3, r4
   82874:	f8df c07c 	ldr.w	ip, [pc, #124]	; 828f4 <vController+0x21c>
   82878:	47e0      	blx	ip
				vTaskDelay(pdMSTOTICKS(100));
   8287a:	2064      	movs	r0, #100	; 0x64
   8287c:	4b12      	ldr	r3, [pc, #72]	; (828c8 <vController+0x1f0>)
   8287e:	4798      	blx	r3
				if (xSemaphoreTake(xCheckSemaphore, pdMSTOTICKS(10000)) == pdTRUE) //wait in Blocked state for semaphore max 10 s
   82880:	4b17      	ldr	r3, [pc, #92]	; (828e0 <vController+0x208>)
   82882:	6818      	ldr	r0, [r3, #0]
   82884:	4621      	mov	r1, r4
   82886:	f242 7210 	movw	r2, #10000	; 0x2710
   8288a:	4623      	mov	r3, r4
   8288c:	4c15      	ldr	r4, [pc, #84]	; (828e4 <vController+0x20c>)
   8288e:	47a0      	blx	r4
   82890:	2801      	cmp	r0, #1
   82892:	d102      	bne.n	8289a <vController+0x1c2>
				{
					printf("\nSemaphore has been received");
   82894:	4814      	ldr	r0, [pc, #80]	; (828e8 <vController+0x210>)
   82896:	4b15      	ldr	r3, [pc, #84]	; (828ec <vController+0x214>)
   82898:	4798      	blx	r3
				}
				next_state = DROP_OFF;
   8289a:	2207      	movs	r2, #7
   8289c:	4b0c      	ldr	r3, [pc, #48]	; (828d0 <vController+0x1f8>)
   8289e:	701a      	strb	r2, [r3, #0]
			case DROP_OFF:
		        vTaskDelete(NULL);     
   828a0:	2000      	movs	r0, #0
   828a2:	47b0      	blx	r6
		}
		current_state = next_state; 
   828a4:	4b0a      	ldr	r3, [pc, #40]	; (828d0 <vController+0x1f8>)
   828a6:	781b      	ldrb	r3, [r3, #0]
   828a8:	702b      	strb	r3, [r5, #0]
	}
   828aa:	e720      	b.n	826ee <vController+0x16>
   828ac:	00085a78 	.word	0x00085a78
   828b0:	2007acb0 	.word	0x2007acb0
   828b4:	00080ed5 	.word	0x00080ed5
   828b8:	400e1200 	.word	0x400e1200
   828bc:	2007acac 	.word	0x2007acac
   828c0:	00082649 	.word	0x00082649
   828c4:	00085af0 	.word	0x00085af0
   828c8:	0008121d 	.word	0x0008121d
   828cc:	2007aca8 	.word	0x2007aca8
   828d0:	2007acb1 	.word	0x2007acb1
   828d4:	000825e1 	.word	0x000825e1
   828d8:	00085af4 	.word	0x00085af4
   828dc:	2007acb8 	.word	0x2007acb8
   828e0:	2007acc0 	.word	0x2007acc0
   828e4:	00080acd 	.word	0x00080acd
   828e8:	00085b00 	.word	0x00085b00
   828ec:	00082a19 	.word	0x00082a19
   828f0:	00080ccd 	.word	0x00080ccd
   828f4:	00080921 	.word	0x00080921

000828f8 <main>:
	vTaskDelete(NULL);
}


int main (void)
{
   828f8:	b570      	push	{r4, r5, r6, lr}
   828fa:	b084      	sub	sp, #16
	
	sysclk_init();
   828fc:	4b21      	ldr	r3, [pc, #132]	; (82984 <main+0x8c>)
   828fe:	4798      	blx	r3
	board_init();
   82900:	4b21      	ldr	r3, [pc, #132]	; (82988 <main+0x90>)
   82902:	4798      	blx	r3
	configure_console();
   82904:	4b21      	ldr	r3, [pc, #132]	; (8298c <main+0x94>)
   82906:	4798      	blx	r3
	initTwi();
   82908:	4b21      	ldr	r3, [pc, #132]	; (82990 <main+0x98>)
   8290a:	4798      	blx	r3
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   8290c:	4b21      	ldr	r3, [pc, #132]	; (82994 <main+0x9c>)
   8290e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   82912:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   82914:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	ioport_set_pin_dir(D7, IOPORT_DIR_OUTPUT);
	current_state = INITIALIZE_ARM;
   82918:	2400      	movs	r4, #0
   8291a:	4b1f      	ldr	r3, [pc, #124]	; (82998 <main+0xa0>)
   8291c:	701c      	strb	r4, [r3, #0]
	next_state = INITIALIZE_ARM;
   8291e:	4b1f      	ldr	r3, [pc, #124]	; (8299c <main+0xa4>)
   82920:	701c      	strb	r4, [r3, #0]
	xObjectQueue = xQueueCreate(4, sizeof(uint32_t));
   82922:	2004      	movs	r0, #4
   82924:	4601      	mov	r1, r0
   82926:	4622      	mov	r2, r4
   82928:	4d1d      	ldr	r5, [pc, #116]	; (829a0 <main+0xa8>)
   8292a:	47a8      	blx	r5
   8292c:	4b1d      	ldr	r3, [pc, #116]	; (829a4 <main+0xac>)
   8292e:	6018      	str	r0, [r3, #0]
	xTaskCreate(vController, "Controller", 1000, NULL, 2, pxTaskController);
   82930:	2302      	movs	r3, #2
   82932:	9300      	str	r3, [sp, #0]
   82934:	4b1c      	ldr	r3, [pc, #112]	; (829a8 <main+0xb0>)
   82936:	681b      	ldr	r3, [r3, #0]
   82938:	9301      	str	r3, [sp, #4]
   8293a:	9402      	str	r4, [sp, #8]
   8293c:	9403      	str	r4, [sp, #12]
   8293e:	481b      	ldr	r0, [pc, #108]	; (829ac <main+0xb4>)
   82940:	491b      	ldr	r1, [pc, #108]	; (829b0 <main+0xb8>)
   82942:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   82946:	4623      	mov	r3, r4
   82948:	4e1a      	ldr	r6, [pc, #104]	; (829b4 <main+0xbc>)
   8294a:	47b0      	blx	r6
	vSemaphoreCreateBinary(xCheckSemaphore);
   8294c:	2001      	movs	r0, #1
   8294e:	4621      	mov	r1, r4
   82950:	2203      	movs	r2, #3
   82952:	47a8      	blx	r5
   82954:	4b18      	ldr	r3, [pc, #96]	; (829b8 <main+0xc0>)
   82956:	6018      	str	r0, [r3, #0]
   82958:	b120      	cbz	r0, 82964 <main+0x6c>
   8295a:	4621      	mov	r1, r4
   8295c:	4622      	mov	r2, r4
   8295e:	4623      	mov	r3, r4
   82960:	4c16      	ldr	r4, [pc, #88]	; (829bc <main+0xc4>)
   82962:	47a0      	blx	r4
	vSemaphoreCreateBinary(xSemaphoreTWI);
   82964:	2001      	movs	r0, #1
   82966:	2100      	movs	r1, #0
   82968:	2203      	movs	r2, #3
   8296a:	4b0d      	ldr	r3, [pc, #52]	; (829a0 <main+0xa8>)
   8296c:	4798      	blx	r3
   8296e:	4b14      	ldr	r3, [pc, #80]	; (829c0 <main+0xc8>)
   82970:	6018      	str	r0, [r3, #0]
   82972:	b120      	cbz	r0, 8297e <main+0x86>
   82974:	2100      	movs	r1, #0
   82976:	460a      	mov	r2, r1
   82978:	460b      	mov	r3, r1
   8297a:	4c10      	ldr	r4, [pc, #64]	; (829bc <main+0xc4>)
   8297c:	47a0      	blx	r4
	xTaskCreate(vWheelRegulating, "WheelRegulating", 1000, NULL, 1, pxWheelRegulatingHandle);
	xTaskCreate(vTask2, "Task 2", 1000, NULL, 1, pxTask2Handle);
	xTaskCreate(vControllerTask, "Controller task", 1000, NULL, 2, pxControllerHandle);
	*/
	
	vTaskStartScheduler();
   8297e:	4b11      	ldr	r3, [pc, #68]	; (829c4 <main+0xcc>)
   82980:	4798      	blx	r3
   82982:	e7fe      	b.n	82982 <main+0x8a>
   82984:	00081ecd 	.word	0x00081ecd
   82988:	00081f31 	.word	0x00081f31
   8298c:	00081dd1 	.word	0x00081dd1
   82990:	00081b91 	.word	0x00081b91
   82994:	400e1200 	.word	0x400e1200
   82998:	2007acb0 	.word	0x2007acb0
   8299c:	2007acb1 	.word	0x2007acb1
   829a0:	000808c9 	.word	0x000808c9
   829a4:	2007acb8 	.word	0x2007acb8
   829a8:	2007acc8 	.word	0x2007acc8
   829ac:	000826d9 	.word	0x000826d9
   829b0:	00085b54 	.word	0x00085b54
   829b4:	00080ccd 	.word	0x00080ccd
   829b8:	2007acc0 	.word	0x2007acc0
   829bc:	00080921 	.word	0x00080921
   829c0:	2007aca8 	.word	0x2007aca8
   829c4:	00080f5d 	.word	0x00080f5d

000829c8 <__libc_init_array>:
   829c8:	b570      	push	{r4, r5, r6, lr}
   829ca:	4e0f      	ldr	r6, [pc, #60]	; (82a08 <__libc_init_array+0x40>)
   829cc:	4d0f      	ldr	r5, [pc, #60]	; (82a0c <__libc_init_array+0x44>)
   829ce:	1b76      	subs	r6, r6, r5
   829d0:	10b6      	asrs	r6, r6, #2
   829d2:	d007      	beq.n	829e4 <__libc_init_array+0x1c>
   829d4:	3d04      	subs	r5, #4
   829d6:	2400      	movs	r4, #0
   829d8:	3401      	adds	r4, #1
   829da:	f855 3f04 	ldr.w	r3, [r5, #4]!
   829de:	4798      	blx	r3
   829e0:	42a6      	cmp	r6, r4
   829e2:	d1f9      	bne.n	829d8 <__libc_init_array+0x10>
   829e4:	4e0a      	ldr	r6, [pc, #40]	; (82a10 <__libc_init_array+0x48>)
   829e6:	4d0b      	ldr	r5, [pc, #44]	; (82a14 <__libc_init_array+0x4c>)
   829e8:	f003 f8e6 	bl	85bb8 <_init>
   829ec:	1b76      	subs	r6, r6, r5
   829ee:	10b6      	asrs	r6, r6, #2
   829f0:	d008      	beq.n	82a04 <__libc_init_array+0x3c>
   829f2:	3d04      	subs	r5, #4
   829f4:	2400      	movs	r4, #0
   829f6:	3401      	adds	r4, #1
   829f8:	f855 3f04 	ldr.w	r3, [r5, #4]!
   829fc:	4798      	blx	r3
   829fe:	42a6      	cmp	r6, r4
   82a00:	d1f9      	bne.n	829f6 <__libc_init_array+0x2e>
   82a02:	bd70      	pop	{r4, r5, r6, pc}
   82a04:	bd70      	pop	{r4, r5, r6, pc}
   82a06:	bf00      	nop
   82a08:	00085bc4 	.word	0x00085bc4
   82a0c:	00085bc4 	.word	0x00085bc4
   82a10:	00085bcc 	.word	0x00085bcc
   82a14:	00085bc4 	.word	0x00085bc4

00082a18 <iprintf>:
   82a18:	b40f      	push	{r0, r1, r2, r3}
   82a1a:	b510      	push	{r4, lr}
   82a1c:	4b07      	ldr	r3, [pc, #28]	; (82a3c <iprintf+0x24>)
   82a1e:	b082      	sub	sp, #8
   82a20:	ac04      	add	r4, sp, #16
   82a22:	f854 2b04 	ldr.w	r2, [r4], #4
   82a26:	6818      	ldr	r0, [r3, #0]
   82a28:	4623      	mov	r3, r4
   82a2a:	6881      	ldr	r1, [r0, #8]
   82a2c:	9401      	str	r4, [sp, #4]
   82a2e:	f000 fa25 	bl	82e7c <_vfiprintf_r>
   82a32:	b002      	add	sp, #8
   82a34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   82a38:	b004      	add	sp, #16
   82a3a:	4770      	bx	lr
   82a3c:	200705b0 	.word	0x200705b0

00082a40 <memcpy>:
   82a40:	4684      	mov	ip, r0
   82a42:	ea41 0300 	orr.w	r3, r1, r0
   82a46:	f013 0303 	ands.w	r3, r3, #3
   82a4a:	d149      	bne.n	82ae0 <memcpy+0xa0>
   82a4c:	3a40      	subs	r2, #64	; 0x40
   82a4e:	d323      	bcc.n	82a98 <memcpy+0x58>
   82a50:	680b      	ldr	r3, [r1, #0]
   82a52:	6003      	str	r3, [r0, #0]
   82a54:	684b      	ldr	r3, [r1, #4]
   82a56:	6043      	str	r3, [r0, #4]
   82a58:	688b      	ldr	r3, [r1, #8]
   82a5a:	6083      	str	r3, [r0, #8]
   82a5c:	68cb      	ldr	r3, [r1, #12]
   82a5e:	60c3      	str	r3, [r0, #12]
   82a60:	690b      	ldr	r3, [r1, #16]
   82a62:	6103      	str	r3, [r0, #16]
   82a64:	694b      	ldr	r3, [r1, #20]
   82a66:	6143      	str	r3, [r0, #20]
   82a68:	698b      	ldr	r3, [r1, #24]
   82a6a:	6183      	str	r3, [r0, #24]
   82a6c:	69cb      	ldr	r3, [r1, #28]
   82a6e:	61c3      	str	r3, [r0, #28]
   82a70:	6a0b      	ldr	r3, [r1, #32]
   82a72:	6203      	str	r3, [r0, #32]
   82a74:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   82a76:	6243      	str	r3, [r0, #36]	; 0x24
   82a78:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   82a7a:	6283      	str	r3, [r0, #40]	; 0x28
   82a7c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   82a7e:	62c3      	str	r3, [r0, #44]	; 0x2c
   82a80:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   82a82:	6303      	str	r3, [r0, #48]	; 0x30
   82a84:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   82a86:	6343      	str	r3, [r0, #52]	; 0x34
   82a88:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   82a8a:	6383      	str	r3, [r0, #56]	; 0x38
   82a8c:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   82a8e:	63c3      	str	r3, [r0, #60]	; 0x3c
   82a90:	3040      	adds	r0, #64	; 0x40
   82a92:	3140      	adds	r1, #64	; 0x40
   82a94:	3a40      	subs	r2, #64	; 0x40
   82a96:	d2db      	bcs.n	82a50 <memcpy+0x10>
   82a98:	3230      	adds	r2, #48	; 0x30
   82a9a:	d30b      	bcc.n	82ab4 <memcpy+0x74>
   82a9c:	680b      	ldr	r3, [r1, #0]
   82a9e:	6003      	str	r3, [r0, #0]
   82aa0:	684b      	ldr	r3, [r1, #4]
   82aa2:	6043      	str	r3, [r0, #4]
   82aa4:	688b      	ldr	r3, [r1, #8]
   82aa6:	6083      	str	r3, [r0, #8]
   82aa8:	68cb      	ldr	r3, [r1, #12]
   82aaa:	60c3      	str	r3, [r0, #12]
   82aac:	3010      	adds	r0, #16
   82aae:	3110      	adds	r1, #16
   82ab0:	3a10      	subs	r2, #16
   82ab2:	d2f3      	bcs.n	82a9c <memcpy+0x5c>
   82ab4:	320c      	adds	r2, #12
   82ab6:	d305      	bcc.n	82ac4 <memcpy+0x84>
   82ab8:	f851 3b04 	ldr.w	r3, [r1], #4
   82abc:	f840 3b04 	str.w	r3, [r0], #4
   82ac0:	3a04      	subs	r2, #4
   82ac2:	d2f9      	bcs.n	82ab8 <memcpy+0x78>
   82ac4:	3204      	adds	r2, #4
   82ac6:	d008      	beq.n	82ada <memcpy+0x9a>
   82ac8:	07d2      	lsls	r2, r2, #31
   82aca:	bf1c      	itt	ne
   82acc:	f811 3b01 	ldrbne.w	r3, [r1], #1
   82ad0:	f800 3b01 	strbne.w	r3, [r0], #1
   82ad4:	d301      	bcc.n	82ada <memcpy+0x9a>
   82ad6:	880b      	ldrh	r3, [r1, #0]
   82ad8:	8003      	strh	r3, [r0, #0]
   82ada:	4660      	mov	r0, ip
   82adc:	4770      	bx	lr
   82ade:	bf00      	nop
   82ae0:	2a08      	cmp	r2, #8
   82ae2:	d313      	bcc.n	82b0c <memcpy+0xcc>
   82ae4:	078b      	lsls	r3, r1, #30
   82ae6:	d0b1      	beq.n	82a4c <memcpy+0xc>
   82ae8:	f010 0303 	ands.w	r3, r0, #3
   82aec:	d0ae      	beq.n	82a4c <memcpy+0xc>
   82aee:	f1c3 0304 	rsb	r3, r3, #4
   82af2:	1ad2      	subs	r2, r2, r3
   82af4:	07db      	lsls	r3, r3, #31
   82af6:	bf1c      	itt	ne
   82af8:	f811 3b01 	ldrbne.w	r3, [r1], #1
   82afc:	f800 3b01 	strbne.w	r3, [r0], #1
   82b00:	d3a4      	bcc.n	82a4c <memcpy+0xc>
   82b02:	f831 3b02 	ldrh.w	r3, [r1], #2
   82b06:	f820 3b02 	strh.w	r3, [r0], #2
   82b0a:	e79f      	b.n	82a4c <memcpy+0xc>
   82b0c:	3a04      	subs	r2, #4
   82b0e:	d3d9      	bcc.n	82ac4 <memcpy+0x84>
   82b10:	3a01      	subs	r2, #1
   82b12:	f811 3b01 	ldrb.w	r3, [r1], #1
   82b16:	f800 3b01 	strb.w	r3, [r0], #1
   82b1a:	d2f9      	bcs.n	82b10 <memcpy+0xd0>
   82b1c:	780b      	ldrb	r3, [r1, #0]
   82b1e:	7003      	strb	r3, [r0, #0]
   82b20:	784b      	ldrb	r3, [r1, #1]
   82b22:	7043      	strb	r3, [r0, #1]
   82b24:	788b      	ldrb	r3, [r1, #2]
   82b26:	7083      	strb	r3, [r0, #2]
   82b28:	4660      	mov	r0, ip
   82b2a:	4770      	bx	lr

00082b2c <memset>:
   82b2c:	b4f0      	push	{r4, r5, r6, r7}
   82b2e:	0784      	lsls	r4, r0, #30
   82b30:	d043      	beq.n	82bba <memset+0x8e>
   82b32:	1e54      	subs	r4, r2, #1
   82b34:	2a00      	cmp	r2, #0
   82b36:	d03e      	beq.n	82bb6 <memset+0x8a>
   82b38:	b2cd      	uxtb	r5, r1
   82b3a:	4603      	mov	r3, r0
   82b3c:	e003      	b.n	82b46 <memset+0x1a>
   82b3e:	1e62      	subs	r2, r4, #1
   82b40:	2c00      	cmp	r4, #0
   82b42:	d038      	beq.n	82bb6 <memset+0x8a>
   82b44:	4614      	mov	r4, r2
   82b46:	f803 5b01 	strb.w	r5, [r3], #1
   82b4a:	079a      	lsls	r2, r3, #30
   82b4c:	d1f7      	bne.n	82b3e <memset+0x12>
   82b4e:	2c03      	cmp	r4, #3
   82b50:	d92a      	bls.n	82ba8 <memset+0x7c>
   82b52:	b2cd      	uxtb	r5, r1
   82b54:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   82b58:	2c0f      	cmp	r4, #15
   82b5a:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   82b5e:	d915      	bls.n	82b8c <memset+0x60>
   82b60:	f1a4 0710 	sub.w	r7, r4, #16
   82b64:	093f      	lsrs	r7, r7, #4
   82b66:	f103 0610 	add.w	r6, r3, #16
   82b6a:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   82b6e:	461a      	mov	r2, r3
   82b70:	6015      	str	r5, [r2, #0]
   82b72:	6055      	str	r5, [r2, #4]
   82b74:	6095      	str	r5, [r2, #8]
   82b76:	60d5      	str	r5, [r2, #12]
   82b78:	3210      	adds	r2, #16
   82b7a:	42b2      	cmp	r2, r6
   82b7c:	d1f8      	bne.n	82b70 <memset+0x44>
   82b7e:	f004 040f 	and.w	r4, r4, #15
   82b82:	3701      	adds	r7, #1
   82b84:	2c03      	cmp	r4, #3
   82b86:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   82b8a:	d90d      	bls.n	82ba8 <memset+0x7c>
   82b8c:	461e      	mov	r6, r3
   82b8e:	4622      	mov	r2, r4
   82b90:	3a04      	subs	r2, #4
   82b92:	2a03      	cmp	r2, #3
   82b94:	f846 5b04 	str.w	r5, [r6], #4
   82b98:	d8fa      	bhi.n	82b90 <memset+0x64>
   82b9a:	1f22      	subs	r2, r4, #4
   82b9c:	f022 0203 	bic.w	r2, r2, #3
   82ba0:	3204      	adds	r2, #4
   82ba2:	4413      	add	r3, r2
   82ba4:	f004 0403 	and.w	r4, r4, #3
   82ba8:	b12c      	cbz	r4, 82bb6 <memset+0x8a>
   82baa:	b2c9      	uxtb	r1, r1
   82bac:	441c      	add	r4, r3
   82bae:	f803 1b01 	strb.w	r1, [r3], #1
   82bb2:	42a3      	cmp	r3, r4
   82bb4:	d1fb      	bne.n	82bae <memset+0x82>
   82bb6:	bcf0      	pop	{r4, r5, r6, r7}
   82bb8:	4770      	bx	lr
   82bba:	4614      	mov	r4, r2
   82bbc:	4603      	mov	r3, r0
   82bbe:	e7c6      	b.n	82b4e <memset+0x22>

00082bc0 <_puts_r>:
   82bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
   82bc2:	4604      	mov	r4, r0
   82bc4:	b089      	sub	sp, #36	; 0x24
   82bc6:	4608      	mov	r0, r1
   82bc8:	460d      	mov	r5, r1
   82bca:	f000 f8b9 	bl	82d40 <strlen>
   82bce:	68a3      	ldr	r3, [r4, #8]
   82bd0:	2102      	movs	r1, #2
   82bd2:	899a      	ldrh	r2, [r3, #12]
   82bd4:	f8df e044 	ldr.w	lr, [pc, #68]	; 82c1c <_puts_r+0x5c>
   82bd8:	f100 0c01 	add.w	ip, r0, #1
   82bdc:	2701      	movs	r7, #1
   82bde:	ae04      	add	r6, sp, #16
   82be0:	9102      	str	r1, [sp, #8]
   82be2:	0491      	lsls	r1, r2, #18
   82be4:	9504      	str	r5, [sp, #16]
   82be6:	9005      	str	r0, [sp, #20]
   82be8:	f8cd c00c 	str.w	ip, [sp, #12]
   82bec:	f8cd e018 	str.w	lr, [sp, #24]
   82bf0:	9707      	str	r7, [sp, #28]
   82bf2:	9601      	str	r6, [sp, #4]
   82bf4:	d406      	bmi.n	82c04 <_puts_r+0x44>
   82bf6:	6e59      	ldr	r1, [r3, #100]	; 0x64
   82bf8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   82bfc:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   82c00:	819a      	strh	r2, [r3, #12]
   82c02:	6659      	str	r1, [r3, #100]	; 0x64
   82c04:	4620      	mov	r0, r4
   82c06:	4619      	mov	r1, r3
   82c08:	aa01      	add	r2, sp, #4
   82c0a:	f001 fae1 	bl	841d0 <__sfvwrite_r>
   82c0e:	2800      	cmp	r0, #0
   82c10:	bf0c      	ite	eq
   82c12:	200a      	moveq	r0, #10
   82c14:	f04f 30ff 	movne.w	r0, #4294967295
   82c18:	b009      	add	sp, #36	; 0x24
   82c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82c1c:	00085a40 	.word	0x00085a40

00082c20 <puts>:
   82c20:	4b02      	ldr	r3, [pc, #8]	; (82c2c <puts+0xc>)
   82c22:	4601      	mov	r1, r0
   82c24:	6818      	ldr	r0, [r3, #0]
   82c26:	f7ff bfcb 	b.w	82bc0 <_puts_r>
   82c2a:	bf00      	nop
   82c2c:	200705b0 	.word	0x200705b0

00082c30 <setbuf>:
   82c30:	2900      	cmp	r1, #0
   82c32:	bf0c      	ite	eq
   82c34:	2202      	moveq	r2, #2
   82c36:	2200      	movne	r2, #0
   82c38:	f44f 6380 	mov.w	r3, #1024	; 0x400
   82c3c:	f000 b800 	b.w	82c40 <setvbuf>

00082c40 <setvbuf>:
   82c40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82c44:	4d3c      	ldr	r5, [pc, #240]	; (82d38 <setvbuf+0xf8>)
   82c46:	4604      	mov	r4, r0
   82c48:	682d      	ldr	r5, [r5, #0]
   82c4a:	4688      	mov	r8, r1
   82c4c:	4616      	mov	r6, r2
   82c4e:	461f      	mov	r7, r3
   82c50:	b115      	cbz	r5, 82c58 <setvbuf+0x18>
   82c52:	6bab      	ldr	r3, [r5, #56]	; 0x38
   82c54:	2b00      	cmp	r3, #0
   82c56:	d04f      	beq.n	82cf8 <setvbuf+0xb8>
   82c58:	2e02      	cmp	r6, #2
   82c5a:	d830      	bhi.n	82cbe <setvbuf+0x7e>
   82c5c:	2f00      	cmp	r7, #0
   82c5e:	db2e      	blt.n	82cbe <setvbuf+0x7e>
   82c60:	4628      	mov	r0, r5
   82c62:	4621      	mov	r1, r4
   82c64:	f001 f888 	bl	83d78 <_fflush_r>
   82c68:	89a3      	ldrh	r3, [r4, #12]
   82c6a:	2200      	movs	r2, #0
   82c6c:	6062      	str	r2, [r4, #4]
   82c6e:	61a2      	str	r2, [r4, #24]
   82c70:	061a      	lsls	r2, r3, #24
   82c72:	d428      	bmi.n	82cc6 <setvbuf+0x86>
   82c74:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   82c78:	b29b      	uxth	r3, r3
   82c7a:	2e02      	cmp	r6, #2
   82c7c:	81a3      	strh	r3, [r4, #12]
   82c7e:	d02d      	beq.n	82cdc <setvbuf+0x9c>
   82c80:	f1b8 0f00 	cmp.w	r8, #0
   82c84:	d03c      	beq.n	82d00 <setvbuf+0xc0>
   82c86:	2e01      	cmp	r6, #1
   82c88:	d013      	beq.n	82cb2 <setvbuf+0x72>
   82c8a:	b29b      	uxth	r3, r3
   82c8c:	f003 0008 	and.w	r0, r3, #8
   82c90:	4a2a      	ldr	r2, [pc, #168]	; (82d3c <setvbuf+0xfc>)
   82c92:	b280      	uxth	r0, r0
   82c94:	63ea      	str	r2, [r5, #60]	; 0x3c
   82c96:	f8c4 8000 	str.w	r8, [r4]
   82c9a:	f8c4 8010 	str.w	r8, [r4, #16]
   82c9e:	6167      	str	r7, [r4, #20]
   82ca0:	b178      	cbz	r0, 82cc2 <setvbuf+0x82>
   82ca2:	f013 0f03 	tst.w	r3, #3
   82ca6:	bf18      	it	ne
   82ca8:	2700      	movne	r7, #0
   82caa:	60a7      	str	r7, [r4, #8]
   82cac:	2000      	movs	r0, #0
   82cae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82cb2:	f043 0301 	orr.w	r3, r3, #1
   82cb6:	427a      	negs	r2, r7
   82cb8:	81a3      	strh	r3, [r4, #12]
   82cba:	61a2      	str	r2, [r4, #24]
   82cbc:	e7e5      	b.n	82c8a <setvbuf+0x4a>
   82cbe:	f04f 30ff 	mov.w	r0, #4294967295
   82cc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82cc6:	4628      	mov	r0, r5
   82cc8:	6921      	ldr	r1, [r4, #16]
   82cca:	f001 f9b5 	bl	84038 <_free_r>
   82cce:	89a3      	ldrh	r3, [r4, #12]
   82cd0:	2e02      	cmp	r6, #2
   82cd2:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   82cd6:	b29b      	uxth	r3, r3
   82cd8:	81a3      	strh	r3, [r4, #12]
   82cda:	d1d1      	bne.n	82c80 <setvbuf+0x40>
   82cdc:	2000      	movs	r0, #0
   82cde:	f104 0243 	add.w	r2, r4, #67	; 0x43
   82ce2:	f043 0302 	orr.w	r3, r3, #2
   82ce6:	2500      	movs	r5, #0
   82ce8:	2101      	movs	r1, #1
   82cea:	81a3      	strh	r3, [r4, #12]
   82cec:	60a5      	str	r5, [r4, #8]
   82cee:	6022      	str	r2, [r4, #0]
   82cf0:	6122      	str	r2, [r4, #16]
   82cf2:	6161      	str	r1, [r4, #20]
   82cf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82cf8:	4628      	mov	r0, r5
   82cfa:	f001 f859 	bl	83db0 <__sinit>
   82cfe:	e7ab      	b.n	82c58 <setvbuf+0x18>
   82d00:	2f00      	cmp	r7, #0
   82d02:	bf08      	it	eq
   82d04:	f44f 6780 	moveq.w	r7, #1024	; 0x400
   82d08:	4638      	mov	r0, r7
   82d0a:	f001 fc8b 	bl	84624 <malloc>
   82d0e:	4680      	mov	r8, r0
   82d10:	b128      	cbz	r0, 82d1e <setvbuf+0xde>
   82d12:	89a3      	ldrh	r3, [r4, #12]
   82d14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   82d18:	b29b      	uxth	r3, r3
   82d1a:	81a3      	strh	r3, [r4, #12]
   82d1c:	e7b3      	b.n	82c86 <setvbuf+0x46>
   82d1e:	f44f 6080 	mov.w	r0, #1024	; 0x400
   82d22:	f001 fc7f 	bl	84624 <malloc>
   82d26:	4680      	mov	r8, r0
   82d28:	b918      	cbnz	r0, 82d32 <setvbuf+0xf2>
   82d2a:	89a3      	ldrh	r3, [r4, #12]
   82d2c:	f04f 30ff 	mov.w	r0, #4294967295
   82d30:	e7d5      	b.n	82cde <setvbuf+0x9e>
   82d32:	f44f 6780 	mov.w	r7, #1024	; 0x400
   82d36:	e7ec      	b.n	82d12 <setvbuf+0xd2>
   82d38:	200705b0 	.word	0x200705b0
   82d3c:	00083da5 	.word	0x00083da5

00082d40 <strlen>:
   82d40:	f020 0103 	bic.w	r1, r0, #3
   82d44:	f010 0003 	ands.w	r0, r0, #3
   82d48:	f1c0 0000 	rsb	r0, r0, #0
   82d4c:	f851 3b04 	ldr.w	r3, [r1], #4
   82d50:	f100 0c04 	add.w	ip, r0, #4
   82d54:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   82d58:	f06f 0200 	mvn.w	r2, #0
   82d5c:	bf1c      	itt	ne
   82d5e:	fa22 f20c 	lsrne.w	r2, r2, ip
   82d62:	4313      	orrne	r3, r2
   82d64:	f04f 0c01 	mov.w	ip, #1
   82d68:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   82d6c:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   82d70:	eba3 020c 	sub.w	r2, r3, ip
   82d74:	ea22 0203 	bic.w	r2, r2, r3
   82d78:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   82d7c:	bf04      	itt	eq
   82d7e:	f851 3b04 	ldreq.w	r3, [r1], #4
   82d82:	3004      	addeq	r0, #4
   82d84:	d0f4      	beq.n	82d70 <strlen+0x30>
   82d86:	f013 0fff 	tst.w	r3, #255	; 0xff
   82d8a:	bf1f      	itttt	ne
   82d8c:	3001      	addne	r0, #1
   82d8e:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
   82d92:	3001      	addne	r0, #1
   82d94:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
   82d98:	bf18      	it	ne
   82d9a:	3001      	addne	r0, #1
   82d9c:	4770      	bx	lr
   82d9e:	bf00      	nop

00082da0 <strncpy>:
   82da0:	ea40 0301 	orr.w	r3, r0, r1
   82da4:	079b      	lsls	r3, r3, #30
   82da6:	b470      	push	{r4, r5, r6}
   82da8:	d12a      	bne.n	82e00 <strncpy+0x60>
   82daa:	2a03      	cmp	r2, #3
   82dac:	d928      	bls.n	82e00 <strncpy+0x60>
   82dae:	460c      	mov	r4, r1
   82db0:	4603      	mov	r3, r0
   82db2:	4621      	mov	r1, r4
   82db4:	f854 5b04 	ldr.w	r5, [r4], #4
   82db8:	f1a5 3601 	sub.w	r6, r5, #16843009	; 0x1010101
   82dbc:	ea26 0605 	bic.w	r6, r6, r5
   82dc0:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
   82dc4:	d105      	bne.n	82dd2 <strncpy+0x32>
   82dc6:	3a04      	subs	r2, #4
   82dc8:	2a03      	cmp	r2, #3
   82dca:	f843 5b04 	str.w	r5, [r3], #4
   82dce:	4621      	mov	r1, r4
   82dd0:	d8ef      	bhi.n	82db2 <strncpy+0x12>
   82dd2:	b19a      	cbz	r2, 82dfc <strncpy+0x5c>
   82dd4:	780c      	ldrb	r4, [r1, #0]
   82dd6:	3a01      	subs	r2, #1
   82dd8:	701c      	strb	r4, [r3, #0]
   82dda:	3301      	adds	r3, #1
   82ddc:	b13c      	cbz	r4, 82dee <strncpy+0x4e>
   82dde:	b16a      	cbz	r2, 82dfc <strncpy+0x5c>
   82de0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   82de4:	3a01      	subs	r2, #1
   82de6:	f803 4b01 	strb.w	r4, [r3], #1
   82dea:	2c00      	cmp	r4, #0
   82dec:	d1f7      	bne.n	82dde <strncpy+0x3e>
   82dee:	b12a      	cbz	r2, 82dfc <strncpy+0x5c>
   82df0:	441a      	add	r2, r3
   82df2:	2100      	movs	r1, #0
   82df4:	f803 1b01 	strb.w	r1, [r3], #1
   82df8:	4293      	cmp	r3, r2
   82dfa:	d1fb      	bne.n	82df4 <strncpy+0x54>
   82dfc:	bc70      	pop	{r4, r5, r6}
   82dfe:	4770      	bx	lr
   82e00:	4603      	mov	r3, r0
   82e02:	e7e6      	b.n	82dd2 <strncpy+0x32>

00082e04 <__sprint_r.part.0>:
   82e04:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   82e06:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   82e0a:	049c      	lsls	r4, r3, #18
   82e0c:	460e      	mov	r6, r1
   82e0e:	4680      	mov	r8, r0
   82e10:	4691      	mov	r9, r2
   82e12:	d52a      	bpl.n	82e6a <__sprint_r.part.0+0x66>
   82e14:	6893      	ldr	r3, [r2, #8]
   82e16:	6812      	ldr	r2, [r2, #0]
   82e18:	f102 0a08 	add.w	sl, r2, #8
   82e1c:	b31b      	cbz	r3, 82e66 <__sprint_r.part.0+0x62>
   82e1e:	e91a 00a0 	ldmdb	sl, {r5, r7}
   82e22:	08bf      	lsrs	r7, r7, #2
   82e24:	d017      	beq.n	82e56 <__sprint_r.part.0+0x52>
   82e26:	3d04      	subs	r5, #4
   82e28:	2400      	movs	r4, #0
   82e2a:	e001      	b.n	82e30 <__sprint_r.part.0+0x2c>
   82e2c:	42a7      	cmp	r7, r4
   82e2e:	d010      	beq.n	82e52 <__sprint_r.part.0+0x4e>
   82e30:	4640      	mov	r0, r8
   82e32:	f855 1f04 	ldr.w	r1, [r5, #4]!
   82e36:	4632      	mov	r2, r6
   82e38:	f001 f850 	bl	83edc <_fputwc_r>
   82e3c:	1c43      	adds	r3, r0, #1
   82e3e:	f104 0401 	add.w	r4, r4, #1
   82e42:	d1f3      	bne.n	82e2c <__sprint_r.part.0+0x28>
   82e44:	2300      	movs	r3, #0
   82e46:	f8c9 3008 	str.w	r3, [r9, #8]
   82e4a:	f8c9 3004 	str.w	r3, [r9, #4]
   82e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   82e52:	f8d9 3008 	ldr.w	r3, [r9, #8]
   82e56:	eba3 0387 	sub.w	r3, r3, r7, lsl #2
   82e5a:	f8c9 3008 	str.w	r3, [r9, #8]
   82e5e:	f10a 0a08 	add.w	sl, sl, #8
   82e62:	2b00      	cmp	r3, #0
   82e64:	d1db      	bne.n	82e1e <__sprint_r.part.0+0x1a>
   82e66:	2000      	movs	r0, #0
   82e68:	e7ec      	b.n	82e44 <__sprint_r.part.0+0x40>
   82e6a:	f001 f9b1 	bl	841d0 <__sfvwrite_r>
   82e6e:	2300      	movs	r3, #0
   82e70:	f8c9 3008 	str.w	r3, [r9, #8]
   82e74:	f8c9 3004 	str.w	r3, [r9, #4]
   82e78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00082e7c <_vfiprintf_r>:
   82e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82e80:	b0b1      	sub	sp, #196	; 0xc4
   82e82:	461c      	mov	r4, r3
   82e84:	9102      	str	r1, [sp, #8]
   82e86:	4690      	mov	r8, r2
   82e88:	9308      	str	r3, [sp, #32]
   82e8a:	9006      	str	r0, [sp, #24]
   82e8c:	b118      	cbz	r0, 82e96 <_vfiprintf_r+0x1a>
   82e8e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   82e90:	2b00      	cmp	r3, #0
   82e92:	f000 80e8 	beq.w	83066 <_vfiprintf_r+0x1ea>
   82e96:	9d02      	ldr	r5, [sp, #8]
   82e98:	89ab      	ldrh	r3, [r5, #12]
   82e9a:	b29a      	uxth	r2, r3
   82e9c:	0490      	lsls	r0, r2, #18
   82e9e:	d407      	bmi.n	82eb0 <_vfiprintf_r+0x34>
   82ea0:	6e6a      	ldr	r2, [r5, #100]	; 0x64
   82ea2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   82ea6:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
   82eaa:	81ab      	strh	r3, [r5, #12]
   82eac:	b29a      	uxth	r2, r3
   82eae:	6669      	str	r1, [r5, #100]	; 0x64
   82eb0:	0711      	lsls	r1, r2, #28
   82eb2:	f140 80b7 	bpl.w	83024 <_vfiprintf_r+0x1a8>
   82eb6:	f8dd b008 	ldr.w	fp, [sp, #8]
   82eba:	f8db 3010 	ldr.w	r3, [fp, #16]
   82ebe:	2b00      	cmp	r3, #0
   82ec0:	f000 80b0 	beq.w	83024 <_vfiprintf_r+0x1a8>
   82ec4:	f002 021a 	and.w	r2, r2, #26
   82ec8:	2a0a      	cmp	r2, #10
   82eca:	f000 80b7 	beq.w	8303c <_vfiprintf_r+0x1c0>
   82ece:	2300      	movs	r3, #0
   82ed0:	f10d 0980 	add.w	r9, sp, #128	; 0x80
   82ed4:	930a      	str	r3, [sp, #40]	; 0x28
   82ed6:	9315      	str	r3, [sp, #84]	; 0x54
   82ed8:	9314      	str	r3, [sp, #80]	; 0x50
   82eda:	9309      	str	r3, [sp, #36]	; 0x24
   82edc:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
   82ee0:	464e      	mov	r6, r9
   82ee2:	f898 3000 	ldrb.w	r3, [r8]
   82ee6:	2b00      	cmp	r3, #0
   82ee8:	f000 84c8 	beq.w	8387c <_vfiprintf_r+0xa00>
   82eec:	2b25      	cmp	r3, #37	; 0x25
   82eee:	f000 84c5 	beq.w	8387c <_vfiprintf_r+0xa00>
   82ef2:	f108 0201 	add.w	r2, r8, #1
   82ef6:	e001      	b.n	82efc <_vfiprintf_r+0x80>
   82ef8:	2b25      	cmp	r3, #37	; 0x25
   82efa:	d004      	beq.n	82f06 <_vfiprintf_r+0x8a>
   82efc:	7813      	ldrb	r3, [r2, #0]
   82efe:	4614      	mov	r4, r2
   82f00:	3201      	adds	r2, #1
   82f02:	2b00      	cmp	r3, #0
   82f04:	d1f8      	bne.n	82ef8 <_vfiprintf_r+0x7c>
   82f06:	ebc8 0504 	rsb	r5, r8, r4
   82f0a:	b195      	cbz	r5, 82f32 <_vfiprintf_r+0xb6>
   82f0c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   82f0e:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82f10:	3301      	adds	r3, #1
   82f12:	442a      	add	r2, r5
   82f14:	2b07      	cmp	r3, #7
   82f16:	f8c6 8000 	str.w	r8, [r6]
   82f1a:	6075      	str	r5, [r6, #4]
   82f1c:	9215      	str	r2, [sp, #84]	; 0x54
   82f1e:	9314      	str	r3, [sp, #80]	; 0x50
   82f20:	dd7b      	ble.n	8301a <_vfiprintf_r+0x19e>
   82f22:	2a00      	cmp	r2, #0
   82f24:	f040 84d5 	bne.w	838d2 <_vfiprintf_r+0xa56>
   82f28:	9809      	ldr	r0, [sp, #36]	; 0x24
   82f2a:	9214      	str	r2, [sp, #80]	; 0x50
   82f2c:	4428      	add	r0, r5
   82f2e:	464e      	mov	r6, r9
   82f30:	9009      	str	r0, [sp, #36]	; 0x24
   82f32:	7823      	ldrb	r3, [r4, #0]
   82f34:	2b00      	cmp	r3, #0
   82f36:	f000 83ed 	beq.w	83714 <_vfiprintf_r+0x898>
   82f3a:	2100      	movs	r1, #0
   82f3c:	f04f 0200 	mov.w	r2, #0
   82f40:	f04f 3cff 	mov.w	ip, #4294967295
   82f44:	7863      	ldrb	r3, [r4, #1]
   82f46:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
   82f4a:	9104      	str	r1, [sp, #16]
   82f4c:	468a      	mov	sl, r1
   82f4e:	f104 0801 	add.w	r8, r4, #1
   82f52:	4608      	mov	r0, r1
   82f54:	4665      	mov	r5, ip
   82f56:	f108 0801 	add.w	r8, r8, #1
   82f5a:	f1a3 0220 	sub.w	r2, r3, #32
   82f5e:	2a58      	cmp	r2, #88	; 0x58
   82f60:	f200 82d9 	bhi.w	83516 <_vfiprintf_r+0x69a>
   82f64:	e8df f012 	tbh	[pc, r2, lsl #1]
   82f68:	02d702cb 	.word	0x02d702cb
   82f6c:	02d202d7 	.word	0x02d202d7
   82f70:	02d702d7 	.word	0x02d702d7
   82f74:	02d702d7 	.word	0x02d702d7
   82f78:	02d702d7 	.word	0x02d702d7
   82f7c:	028f0282 	.word	0x028f0282
   82f80:	008402d7 	.word	0x008402d7
   82f84:	02d70293 	.word	0x02d70293
   82f88:	0196012b 	.word	0x0196012b
   82f8c:	01960196 	.word	0x01960196
   82f90:	01960196 	.word	0x01960196
   82f94:	01960196 	.word	0x01960196
   82f98:	01960196 	.word	0x01960196
   82f9c:	02d702d7 	.word	0x02d702d7
   82fa0:	02d702d7 	.word	0x02d702d7
   82fa4:	02d702d7 	.word	0x02d702d7
   82fa8:	02d702d7 	.word	0x02d702d7
   82fac:	02d702d7 	.word	0x02d702d7
   82fb0:	02d70130 	.word	0x02d70130
   82fb4:	02d702d7 	.word	0x02d702d7
   82fb8:	02d702d7 	.word	0x02d702d7
   82fbc:	02d702d7 	.word	0x02d702d7
   82fc0:	02d702d7 	.word	0x02d702d7
   82fc4:	017b02d7 	.word	0x017b02d7
   82fc8:	02d702d7 	.word	0x02d702d7
   82fcc:	02d702d7 	.word	0x02d702d7
   82fd0:	01a402d7 	.word	0x01a402d7
   82fd4:	02d702d7 	.word	0x02d702d7
   82fd8:	02d701bf 	.word	0x02d701bf
   82fdc:	02d702d7 	.word	0x02d702d7
   82fe0:	02d702d7 	.word	0x02d702d7
   82fe4:	02d702d7 	.word	0x02d702d7
   82fe8:	02d702d7 	.word	0x02d702d7
   82fec:	01e402d7 	.word	0x01e402d7
   82ff0:	02d701fa 	.word	0x02d701fa
   82ff4:	02d702d7 	.word	0x02d702d7
   82ff8:	01fa0216 	.word	0x01fa0216
   82ffc:	02d702d7 	.word	0x02d702d7
   83000:	02d7021b 	.word	0x02d7021b
   83004:	00890228 	.word	0x00890228
   83008:	027d0266 	.word	0x027d0266
   8300c:	023a02d7 	.word	0x023a02d7
   83010:	011902d7 	.word	0x011902d7
   83014:	02d702d7 	.word	0x02d702d7
   83018:	02af      	.short	0x02af
   8301a:	3608      	adds	r6, #8
   8301c:	9809      	ldr	r0, [sp, #36]	; 0x24
   8301e:	4428      	add	r0, r5
   83020:	9009      	str	r0, [sp, #36]	; 0x24
   83022:	e786      	b.n	82f32 <_vfiprintf_r+0xb6>
   83024:	9806      	ldr	r0, [sp, #24]
   83026:	9902      	ldr	r1, [sp, #8]
   83028:	f000 fd90 	bl	83b4c <__swsetup_r>
   8302c:	b9b0      	cbnz	r0, 8305c <_vfiprintf_r+0x1e0>
   8302e:	9d02      	ldr	r5, [sp, #8]
   83030:	89aa      	ldrh	r2, [r5, #12]
   83032:	f002 021a 	and.w	r2, r2, #26
   83036:	2a0a      	cmp	r2, #10
   83038:	f47f af49 	bne.w	82ece <_vfiprintf_r+0x52>
   8303c:	f8dd b008 	ldr.w	fp, [sp, #8]
   83040:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
   83044:	2b00      	cmp	r3, #0
   83046:	f6ff af42 	blt.w	82ece <_vfiprintf_r+0x52>
   8304a:	9806      	ldr	r0, [sp, #24]
   8304c:	4659      	mov	r1, fp
   8304e:	4642      	mov	r2, r8
   83050:	4623      	mov	r3, r4
   83052:	f000 fd3d 	bl	83ad0 <__sbprintf>
   83056:	b031      	add	sp, #196	; 0xc4
   83058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8305c:	f04f 30ff 	mov.w	r0, #4294967295
   83060:	b031      	add	sp, #196	; 0xc4
   83062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83066:	f000 fea3 	bl	83db0 <__sinit>
   8306a:	e714      	b.n	82e96 <_vfiprintf_r+0x1a>
   8306c:	4240      	negs	r0, r0
   8306e:	9308      	str	r3, [sp, #32]
   83070:	f04a 0a04 	orr.w	sl, sl, #4
   83074:	f898 3000 	ldrb.w	r3, [r8]
   83078:	e76d      	b.n	82f56 <_vfiprintf_r+0xda>
   8307a:	f01a 0320 	ands.w	r3, sl, #32
   8307e:	9004      	str	r0, [sp, #16]
   83080:	46ac      	mov	ip, r5
   83082:	f000 80f4 	beq.w	8326e <_vfiprintf_r+0x3f2>
   83086:	f8dd b020 	ldr.w	fp, [sp, #32]
   8308a:	f10b 0307 	add.w	r3, fp, #7
   8308e:	f023 0307 	bic.w	r3, r3, #7
   83092:	f103 0408 	add.w	r4, r3, #8
   83096:	9408      	str	r4, [sp, #32]
   83098:	e9d3 4500 	ldrd	r4, r5, [r3]
   8309c:	2300      	movs	r3, #0
   8309e:	f04f 0000 	mov.w	r0, #0
   830a2:	2100      	movs	r1, #0
   830a4:	f88d 0047 	strb.w	r0, [sp, #71]	; 0x47
   830a8:	f8cd c014 	str.w	ip, [sp, #20]
   830ac:	9107      	str	r1, [sp, #28]
   830ae:	f1bc 0f00 	cmp.w	ip, #0
   830b2:	bfa8      	it	ge
   830b4:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
   830b8:	ea54 0205 	orrs.w	r2, r4, r5
   830bc:	f040 80ad 	bne.w	8321a <_vfiprintf_r+0x39e>
   830c0:	f1bc 0f00 	cmp.w	ip, #0
   830c4:	f040 80a9 	bne.w	8321a <_vfiprintf_r+0x39e>
   830c8:	2b00      	cmp	r3, #0
   830ca:	f040 83c0 	bne.w	8384e <_vfiprintf_r+0x9d2>
   830ce:	f01a 0f01 	tst.w	sl, #1
   830d2:	f000 83bc 	beq.w	8384e <_vfiprintf_r+0x9d2>
   830d6:	2330      	movs	r3, #48	; 0x30
   830d8:	af30      	add	r7, sp, #192	; 0xc0
   830da:	f807 3d41 	strb.w	r3, [r7, #-65]!
   830de:	ebc7 0409 	rsb	r4, r7, r9
   830e2:	9405      	str	r4, [sp, #20]
   830e4:	f8dd b014 	ldr.w	fp, [sp, #20]
   830e8:	9c07      	ldr	r4, [sp, #28]
   830ea:	45e3      	cmp	fp, ip
   830ec:	bfb8      	it	lt
   830ee:	46e3      	movlt	fp, ip
   830f0:	f8cd b00c 	str.w	fp, [sp, #12]
   830f4:	b11c      	cbz	r4, 830fe <_vfiprintf_r+0x282>
   830f6:	f10b 0b01 	add.w	fp, fp, #1
   830fa:	f8cd b00c 	str.w	fp, [sp, #12]
   830fe:	f01a 0502 	ands.w	r5, sl, #2
   83102:	9507      	str	r5, [sp, #28]
   83104:	d005      	beq.n	83112 <_vfiprintf_r+0x296>
   83106:	f8dd b00c 	ldr.w	fp, [sp, #12]
   8310a:	f10b 0b02 	add.w	fp, fp, #2
   8310e:	f8cd b00c 	str.w	fp, [sp, #12]
   83112:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
   83116:	930b      	str	r3, [sp, #44]	; 0x2c
   83118:	f040 821b 	bne.w	83552 <_vfiprintf_r+0x6d6>
   8311c:	9d04      	ldr	r5, [sp, #16]
   8311e:	f8dd b00c 	ldr.w	fp, [sp, #12]
   83122:	ebcb 0405 	rsb	r4, fp, r5
   83126:	2c00      	cmp	r4, #0
   83128:	f340 8213 	ble.w	83552 <_vfiprintf_r+0x6d6>
   8312c:	2c10      	cmp	r4, #16
   8312e:	f340 8489 	ble.w	83a44 <_vfiprintf_r+0xbc8>
   83132:	4dbe      	ldr	r5, [pc, #760]	; (8342c <_vfiprintf_r+0x5b0>)
   83134:	9a15      	ldr	r2, [sp, #84]	; 0x54
   83136:	462b      	mov	r3, r5
   83138:	9814      	ldr	r0, [sp, #80]	; 0x50
   8313a:	4625      	mov	r5, r4
   8313c:	f04f 0b10 	mov.w	fp, #16
   83140:	4664      	mov	r4, ip
   83142:	46b4      	mov	ip, r6
   83144:	461e      	mov	r6, r3
   83146:	e006      	b.n	83156 <_vfiprintf_r+0x2da>
   83148:	1c83      	adds	r3, r0, #2
   8314a:	f10c 0c08 	add.w	ip, ip, #8
   8314e:	4608      	mov	r0, r1
   83150:	3d10      	subs	r5, #16
   83152:	2d10      	cmp	r5, #16
   83154:	dd11      	ble.n	8317a <_vfiprintf_r+0x2fe>
   83156:	1c41      	adds	r1, r0, #1
   83158:	3210      	adds	r2, #16
   8315a:	2907      	cmp	r1, #7
   8315c:	9215      	str	r2, [sp, #84]	; 0x54
   8315e:	e88c 0840 	stmia.w	ip, {r6, fp}
   83162:	9114      	str	r1, [sp, #80]	; 0x50
   83164:	ddf0      	ble.n	83148 <_vfiprintf_r+0x2cc>
   83166:	2a00      	cmp	r2, #0
   83168:	f040 81e6 	bne.w	83538 <_vfiprintf_r+0x6bc>
   8316c:	3d10      	subs	r5, #16
   8316e:	2d10      	cmp	r5, #16
   83170:	f04f 0301 	mov.w	r3, #1
   83174:	4610      	mov	r0, r2
   83176:	46cc      	mov	ip, r9
   83178:	dced      	bgt.n	83156 <_vfiprintf_r+0x2da>
   8317a:	4631      	mov	r1, r6
   8317c:	4666      	mov	r6, ip
   8317e:	46a4      	mov	ip, r4
   83180:	462c      	mov	r4, r5
   83182:	460d      	mov	r5, r1
   83184:	4422      	add	r2, r4
   83186:	2b07      	cmp	r3, #7
   83188:	9215      	str	r2, [sp, #84]	; 0x54
   8318a:	6035      	str	r5, [r6, #0]
   8318c:	6074      	str	r4, [r6, #4]
   8318e:	9314      	str	r3, [sp, #80]	; 0x50
   83190:	f300 836d 	bgt.w	8386e <_vfiprintf_r+0x9f2>
   83194:	3608      	adds	r6, #8
   83196:	1c59      	adds	r1, r3, #1
   83198:	e1de      	b.n	83558 <_vfiprintf_r+0x6dc>
   8319a:	f01a 0f20 	tst.w	sl, #32
   8319e:	9004      	str	r0, [sp, #16]
   831a0:	46ac      	mov	ip, r5
   831a2:	f000 808d 	beq.w	832c0 <_vfiprintf_r+0x444>
   831a6:	9d08      	ldr	r5, [sp, #32]
   831a8:	1deb      	adds	r3, r5, #7
   831aa:	f023 0307 	bic.w	r3, r3, #7
   831ae:	f103 0b08 	add.w	fp, r3, #8
   831b2:	e9d3 4500 	ldrd	r4, r5, [r3]
   831b6:	f8cd b020 	str.w	fp, [sp, #32]
   831ba:	2301      	movs	r3, #1
   831bc:	e76f      	b.n	8309e <_vfiprintf_r+0x222>
   831be:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
   831c2:	f898 3000 	ldrb.w	r3, [r8]
   831c6:	e6c6      	b.n	82f56 <_vfiprintf_r+0xda>
   831c8:	f04a 0a10 	orr.w	sl, sl, #16
   831cc:	f01a 0f20 	tst.w	sl, #32
   831d0:	9004      	str	r0, [sp, #16]
   831d2:	46ac      	mov	ip, r5
   831d4:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   831d8:	f000 80c8 	beq.w	8336c <_vfiprintf_r+0x4f0>
   831dc:	9c08      	ldr	r4, [sp, #32]
   831de:	1de1      	adds	r1, r4, #7
   831e0:	f021 0107 	bic.w	r1, r1, #7
   831e4:	e9d1 2300 	ldrd	r2, r3, [r1]
   831e8:	3108      	adds	r1, #8
   831ea:	9108      	str	r1, [sp, #32]
   831ec:	4614      	mov	r4, r2
   831ee:	461d      	mov	r5, r3
   831f0:	2a00      	cmp	r2, #0
   831f2:	f173 0b00 	sbcs.w	fp, r3, #0
   831f6:	f2c0 83ce 	blt.w	83996 <_vfiprintf_r+0xb1a>
   831fa:	f1bc 0f00 	cmp.w	ip, #0
   831fe:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
   83202:	bfa8      	it	ge
   83204:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
   83208:	ea54 0205 	orrs.w	r2, r4, r5
   8320c:	9007      	str	r0, [sp, #28]
   8320e:	f8cd c014 	str.w	ip, [sp, #20]
   83212:	f04f 0301 	mov.w	r3, #1
   83216:	f43f af53 	beq.w	830c0 <_vfiprintf_r+0x244>
   8321a:	2b01      	cmp	r3, #1
   8321c:	f000 8319 	beq.w	83852 <_vfiprintf_r+0x9d6>
   83220:	2b02      	cmp	r3, #2
   83222:	f10d 037f 	add.w	r3, sp, #127	; 0x7f
   83226:	f040 824c 	bne.w	836c2 <_vfiprintf_r+0x846>
   8322a:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   8322e:	4619      	mov	r1, r3
   83230:	f004 000f 	and.w	r0, r4, #15
   83234:	0922      	lsrs	r2, r4, #4
   83236:	f81b 0000 	ldrb.w	r0, [fp, r0]
   8323a:	ea42 7205 	orr.w	r2, r2, r5, lsl #28
   8323e:	092b      	lsrs	r3, r5, #4
   83240:	7008      	strb	r0, [r1, #0]
   83242:	ea52 0003 	orrs.w	r0, r2, r3
   83246:	460f      	mov	r7, r1
   83248:	4614      	mov	r4, r2
   8324a:	461d      	mov	r5, r3
   8324c:	f101 31ff 	add.w	r1, r1, #4294967295
   83250:	d1ee      	bne.n	83230 <_vfiprintf_r+0x3b4>
   83252:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   83256:	ebc7 0309 	rsb	r3, r7, r9
   8325a:	9305      	str	r3, [sp, #20]
   8325c:	e742      	b.n	830e4 <_vfiprintf_r+0x268>
   8325e:	f04a 0a10 	orr.w	sl, sl, #16
   83262:	f01a 0320 	ands.w	r3, sl, #32
   83266:	9004      	str	r0, [sp, #16]
   83268:	46ac      	mov	ip, r5
   8326a:	f47f af0c 	bne.w	83086 <_vfiprintf_r+0x20a>
   8326e:	f01a 0210 	ands.w	r2, sl, #16
   83272:	f040 8311 	bne.w	83898 <_vfiprintf_r+0xa1c>
   83276:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
   8327a:	f000 830d 	beq.w	83898 <_vfiprintf_r+0xa1c>
   8327e:	f8dd b020 	ldr.w	fp, [sp, #32]
   83282:	4613      	mov	r3, r2
   83284:	f8bb 4000 	ldrh.w	r4, [fp]
   83288:	f10b 0b04 	add.w	fp, fp, #4
   8328c:	2500      	movs	r5, #0
   8328e:	f8cd b020 	str.w	fp, [sp, #32]
   83292:	e704      	b.n	8309e <_vfiprintf_r+0x222>
   83294:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   83298:	2000      	movs	r0, #0
   8329a:	f818 3b01 	ldrb.w	r3, [r8], #1
   8329e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   832a2:	eb02 0040 	add.w	r0, r2, r0, lsl #1
   832a6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   832aa:	2a09      	cmp	r2, #9
   832ac:	d9f5      	bls.n	8329a <_vfiprintf_r+0x41e>
   832ae:	e654      	b.n	82f5a <_vfiprintf_r+0xde>
   832b0:	f04a 0a10 	orr.w	sl, sl, #16
   832b4:	f01a 0f20 	tst.w	sl, #32
   832b8:	9004      	str	r0, [sp, #16]
   832ba:	46ac      	mov	ip, r5
   832bc:	f47f af73 	bne.w	831a6 <_vfiprintf_r+0x32a>
   832c0:	f01a 0f10 	tst.w	sl, #16
   832c4:	f040 82ef 	bne.w	838a6 <_vfiprintf_r+0xa2a>
   832c8:	f01a 0f40 	tst.w	sl, #64	; 0x40
   832cc:	f000 82eb 	beq.w	838a6 <_vfiprintf_r+0xa2a>
   832d0:	f8dd b020 	ldr.w	fp, [sp, #32]
   832d4:	2500      	movs	r5, #0
   832d6:	f8bb 4000 	ldrh.w	r4, [fp]
   832da:	f10b 0b04 	add.w	fp, fp, #4
   832de:	2301      	movs	r3, #1
   832e0:	f8cd b020 	str.w	fp, [sp, #32]
   832e4:	e6db      	b.n	8309e <_vfiprintf_r+0x222>
   832e6:	46ac      	mov	ip, r5
   832e8:	4d51      	ldr	r5, [pc, #324]	; (83430 <_vfiprintf_r+0x5b4>)
   832ea:	f01a 0f20 	tst.w	sl, #32
   832ee:	9004      	str	r0, [sp, #16]
   832f0:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   832f4:	950a      	str	r5, [sp, #40]	; 0x28
   832f6:	f000 80f0 	beq.w	834da <_vfiprintf_r+0x65e>
   832fa:	9d08      	ldr	r5, [sp, #32]
   832fc:	1dea      	adds	r2, r5, #7
   832fe:	f022 0207 	bic.w	r2, r2, #7
   83302:	f102 0b08 	add.w	fp, r2, #8
   83306:	f8cd b020 	str.w	fp, [sp, #32]
   8330a:	e9d2 4500 	ldrd	r4, r5, [r2]
   8330e:	f01a 0f01 	tst.w	sl, #1
   83312:	f000 82aa 	beq.w	8386a <_vfiprintf_r+0x9ee>
   83316:	ea54 0b05 	orrs.w	fp, r4, r5
   8331a:	f000 82a6 	beq.w	8386a <_vfiprintf_r+0x9ee>
   8331e:	2230      	movs	r2, #48	; 0x30
   83320:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
   83324:	f04a 0a02 	orr.w	sl, sl, #2
   83328:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   8332c:	2302      	movs	r3, #2
   8332e:	e6b6      	b.n	8309e <_vfiprintf_r+0x222>
   83330:	9b08      	ldr	r3, [sp, #32]
   83332:	f8dd b020 	ldr.w	fp, [sp, #32]
   83336:	681b      	ldr	r3, [r3, #0]
   83338:	2401      	movs	r4, #1
   8333a:	f04f 0500 	mov.w	r5, #0
   8333e:	f10b 0b04 	add.w	fp, fp, #4
   83342:	9004      	str	r0, [sp, #16]
   83344:	9403      	str	r4, [sp, #12]
   83346:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
   8334a:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   8334e:	f8cd b020 	str.w	fp, [sp, #32]
   83352:	9405      	str	r4, [sp, #20]
   83354:	af16      	add	r7, sp, #88	; 0x58
   83356:	f04f 0c00 	mov.w	ip, #0
   8335a:	e6d0      	b.n	830fe <_vfiprintf_r+0x282>
   8335c:	f01a 0f20 	tst.w	sl, #32
   83360:	9004      	str	r0, [sp, #16]
   83362:	46ac      	mov	ip, r5
   83364:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   83368:	f47f af38 	bne.w	831dc <_vfiprintf_r+0x360>
   8336c:	f01a 0f10 	tst.w	sl, #16
   83370:	f040 82a7 	bne.w	838c2 <_vfiprintf_r+0xa46>
   83374:	f01a 0f40 	tst.w	sl, #64	; 0x40
   83378:	f000 82a3 	beq.w	838c2 <_vfiprintf_r+0xa46>
   8337c:	f8dd b020 	ldr.w	fp, [sp, #32]
   83380:	f9bb 4000 	ldrsh.w	r4, [fp]
   83384:	f10b 0b04 	add.w	fp, fp, #4
   83388:	17e5      	asrs	r5, r4, #31
   8338a:	4622      	mov	r2, r4
   8338c:	462b      	mov	r3, r5
   8338e:	f8cd b020 	str.w	fp, [sp, #32]
   83392:	e72d      	b.n	831f0 <_vfiprintf_r+0x374>
   83394:	f04a 0a40 	orr.w	sl, sl, #64	; 0x40
   83398:	f898 3000 	ldrb.w	r3, [r8]
   8339c:	e5db      	b.n	82f56 <_vfiprintf_r+0xda>
   8339e:	f898 3000 	ldrb.w	r3, [r8]
   833a2:	4642      	mov	r2, r8
   833a4:	2b6c      	cmp	r3, #108	; 0x6c
   833a6:	bf03      	ittte	eq
   833a8:	f108 0801 	addeq.w	r8, r8, #1
   833ac:	f04a 0a20 	orreq.w	sl, sl, #32
   833b0:	7853      	ldrbeq	r3, [r2, #1]
   833b2:	f04a 0a10 	orrne.w	sl, sl, #16
   833b6:	e5ce      	b.n	82f56 <_vfiprintf_r+0xda>
   833b8:	f01a 0f20 	tst.w	sl, #32
   833bc:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   833c0:	f000 82f7 	beq.w	839b2 <_vfiprintf_r+0xb36>
   833c4:	9c08      	ldr	r4, [sp, #32]
   833c6:	6821      	ldr	r1, [r4, #0]
   833c8:	9c09      	ldr	r4, [sp, #36]	; 0x24
   833ca:	17e5      	asrs	r5, r4, #31
   833cc:	462b      	mov	r3, r5
   833ce:	9d08      	ldr	r5, [sp, #32]
   833d0:	4622      	mov	r2, r4
   833d2:	3504      	adds	r5, #4
   833d4:	9508      	str	r5, [sp, #32]
   833d6:	e9c1 2300 	strd	r2, r3, [r1]
   833da:	e582      	b.n	82ee2 <_vfiprintf_r+0x66>
   833dc:	9c08      	ldr	r4, [sp, #32]
   833de:	46ac      	mov	ip, r5
   833e0:	6827      	ldr	r7, [r4, #0]
   833e2:	f04f 0500 	mov.w	r5, #0
   833e6:	9004      	str	r0, [sp, #16]
   833e8:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
   833ec:	3404      	adds	r4, #4
   833ee:	2f00      	cmp	r7, #0
   833f0:	f000 8332 	beq.w	83a58 <_vfiprintf_r+0xbdc>
   833f4:	f1bc 0f00 	cmp.w	ip, #0
   833f8:	4638      	mov	r0, r7
   833fa:	f2c0 8307 	blt.w	83a0c <_vfiprintf_r+0xb90>
   833fe:	4662      	mov	r2, ip
   83400:	2100      	movs	r1, #0
   83402:	f8cd c004 	str.w	ip, [sp, #4]
   83406:	f001 fbb1 	bl	84b6c <memchr>
   8340a:	f8dd c004 	ldr.w	ip, [sp, #4]
   8340e:	2800      	cmp	r0, #0
   83410:	f000 833a 	beq.w	83a88 <_vfiprintf_r+0xc0c>
   83414:	1bc0      	subs	r0, r0, r7
   83416:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
   8341a:	4560      	cmp	r0, ip
   8341c:	bfa8      	it	ge
   8341e:	4660      	movge	r0, ip
   83420:	9005      	str	r0, [sp, #20]
   83422:	9408      	str	r4, [sp, #32]
   83424:	9507      	str	r5, [sp, #28]
   83426:	f04f 0c00 	mov.w	ip, #0
   8342a:	e65b      	b.n	830e4 <_vfiprintf_r+0x268>
   8342c:	00085ba8 	.word	0x00085ba8
   83430:	00085b68 	.word	0x00085b68
   83434:	9b08      	ldr	r3, [sp, #32]
   83436:	f8dd b020 	ldr.w	fp, [sp, #32]
   8343a:	9004      	str	r0, [sp, #16]
   8343c:	48b2      	ldr	r0, [pc, #712]	; (83708 <_vfiprintf_r+0x88c>)
   8343e:	681c      	ldr	r4, [r3, #0]
   83440:	2230      	movs	r2, #48	; 0x30
   83442:	2378      	movs	r3, #120	; 0x78
   83444:	f10b 0b04 	add.w	fp, fp, #4
   83448:	46ac      	mov	ip, r5
   8344a:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
   8344e:	f04a 0a02 	orr.w	sl, sl, #2
   83452:	f8cd b020 	str.w	fp, [sp, #32]
   83456:	2500      	movs	r5, #0
   83458:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   8345c:	900a      	str	r0, [sp, #40]	; 0x28
   8345e:	2302      	movs	r3, #2
   83460:	e61d      	b.n	8309e <_vfiprintf_r+0x222>
   83462:	f04a 0a20 	orr.w	sl, sl, #32
   83466:	f898 3000 	ldrb.w	r3, [r8]
   8346a:	e574      	b.n	82f56 <_vfiprintf_r+0xda>
   8346c:	f8dd b020 	ldr.w	fp, [sp, #32]
   83470:	f8db 0000 	ldr.w	r0, [fp]
   83474:	f10b 0304 	add.w	r3, fp, #4
   83478:	2800      	cmp	r0, #0
   8347a:	f6ff adf7 	blt.w	8306c <_vfiprintf_r+0x1f0>
   8347e:	9308      	str	r3, [sp, #32]
   83480:	f898 3000 	ldrb.w	r3, [r8]
   83484:	e567      	b.n	82f56 <_vfiprintf_r+0xda>
   83486:	f898 3000 	ldrb.w	r3, [r8]
   8348a:	212b      	movs	r1, #43	; 0x2b
   8348c:	e563      	b.n	82f56 <_vfiprintf_r+0xda>
   8348e:	f898 3000 	ldrb.w	r3, [r8]
   83492:	f108 0401 	add.w	r4, r8, #1
   83496:	2b2a      	cmp	r3, #42	; 0x2a
   83498:	f000 8305 	beq.w	83aa6 <_vfiprintf_r+0xc2a>
   8349c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   834a0:	2a09      	cmp	r2, #9
   834a2:	bf98      	it	ls
   834a4:	2500      	movls	r5, #0
   834a6:	f200 82fa 	bhi.w	83a9e <_vfiprintf_r+0xc22>
   834aa:	f814 3b01 	ldrb.w	r3, [r4], #1
   834ae:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   834b2:	eb02 0545 	add.w	r5, r2, r5, lsl #1
   834b6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   834ba:	2a09      	cmp	r2, #9
   834bc:	d9f5      	bls.n	834aa <_vfiprintf_r+0x62e>
   834be:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
   834c2:	46a0      	mov	r8, r4
   834c4:	e549      	b.n	82f5a <_vfiprintf_r+0xde>
   834c6:	4c90      	ldr	r4, [pc, #576]	; (83708 <_vfiprintf_r+0x88c>)
   834c8:	f01a 0f20 	tst.w	sl, #32
   834cc:	9004      	str	r0, [sp, #16]
   834ce:	46ac      	mov	ip, r5
   834d0:	940a      	str	r4, [sp, #40]	; 0x28
   834d2:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   834d6:	f47f af10 	bne.w	832fa <_vfiprintf_r+0x47e>
   834da:	f01a 0f10 	tst.w	sl, #16
   834de:	f040 81ea 	bne.w	838b6 <_vfiprintf_r+0xa3a>
   834e2:	f01a 0f40 	tst.w	sl, #64	; 0x40
   834e6:	f000 81e6 	beq.w	838b6 <_vfiprintf_r+0xa3a>
   834ea:	f8dd b020 	ldr.w	fp, [sp, #32]
   834ee:	2500      	movs	r5, #0
   834f0:	f8bb 4000 	ldrh.w	r4, [fp]
   834f4:	f10b 0b04 	add.w	fp, fp, #4
   834f8:	f8cd b020 	str.w	fp, [sp, #32]
   834fc:	e707      	b.n	8330e <_vfiprintf_r+0x492>
   834fe:	f898 3000 	ldrb.w	r3, [r8]
   83502:	2900      	cmp	r1, #0
   83504:	f47f ad27 	bne.w	82f56 <_vfiprintf_r+0xda>
   83508:	2120      	movs	r1, #32
   8350a:	e524      	b.n	82f56 <_vfiprintf_r+0xda>
   8350c:	f04a 0a01 	orr.w	sl, sl, #1
   83510:	f898 3000 	ldrb.w	r3, [r8]
   83514:	e51f      	b.n	82f56 <_vfiprintf_r+0xda>
   83516:	9004      	str	r0, [sp, #16]
   83518:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   8351c:	2b00      	cmp	r3, #0
   8351e:	f000 80f9 	beq.w	83714 <_vfiprintf_r+0x898>
   83522:	2501      	movs	r5, #1
   83524:	f04f 0b00 	mov.w	fp, #0
   83528:	9503      	str	r5, [sp, #12]
   8352a:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   8352e:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
   83532:	9505      	str	r5, [sp, #20]
   83534:	af16      	add	r7, sp, #88	; 0x58
   83536:	e70e      	b.n	83356 <_vfiprintf_r+0x4da>
   83538:	9806      	ldr	r0, [sp, #24]
   8353a:	9902      	ldr	r1, [sp, #8]
   8353c:	aa13      	add	r2, sp, #76	; 0x4c
   8353e:	f7ff fc61 	bl	82e04 <__sprint_r.part.0>
   83542:	2800      	cmp	r0, #0
   83544:	f040 80ed 	bne.w	83722 <_vfiprintf_r+0x8a6>
   83548:	9814      	ldr	r0, [sp, #80]	; 0x50
   8354a:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8354c:	1c43      	adds	r3, r0, #1
   8354e:	46cc      	mov	ip, r9
   83550:	e5fe      	b.n	83150 <_vfiprintf_r+0x2d4>
   83552:	9b14      	ldr	r3, [sp, #80]	; 0x50
   83554:	9a15      	ldr	r2, [sp, #84]	; 0x54
   83556:	1c59      	adds	r1, r3, #1
   83558:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
   8355c:	b168      	cbz	r0, 8357a <_vfiprintf_r+0x6fe>
   8355e:	3201      	adds	r2, #1
   83560:	f10d 0047 	add.w	r0, sp, #71	; 0x47
   83564:	2301      	movs	r3, #1
   83566:	2907      	cmp	r1, #7
   83568:	9215      	str	r2, [sp, #84]	; 0x54
   8356a:	9114      	str	r1, [sp, #80]	; 0x50
   8356c:	e886 0009 	stmia.w	r6, {r0, r3}
   83570:	f300 8160 	bgt.w	83834 <_vfiprintf_r+0x9b8>
   83574:	460b      	mov	r3, r1
   83576:	3608      	adds	r6, #8
   83578:	3101      	adds	r1, #1
   8357a:	9c07      	ldr	r4, [sp, #28]
   8357c:	b164      	cbz	r4, 83598 <_vfiprintf_r+0x71c>
   8357e:	3202      	adds	r2, #2
   83580:	a812      	add	r0, sp, #72	; 0x48
   83582:	2302      	movs	r3, #2
   83584:	2907      	cmp	r1, #7
   83586:	9215      	str	r2, [sp, #84]	; 0x54
   83588:	9114      	str	r1, [sp, #80]	; 0x50
   8358a:	e886 0009 	stmia.w	r6, {r0, r3}
   8358e:	f300 8157 	bgt.w	83840 <_vfiprintf_r+0x9c4>
   83592:	460b      	mov	r3, r1
   83594:	3608      	adds	r6, #8
   83596:	3101      	adds	r1, #1
   83598:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   8359a:	2d80      	cmp	r5, #128	; 0x80
   8359c:	f000 8101 	beq.w	837a2 <_vfiprintf_r+0x926>
   835a0:	9d05      	ldr	r5, [sp, #20]
   835a2:	ebc5 040c 	rsb	r4, r5, ip
   835a6:	2c00      	cmp	r4, #0
   835a8:	dd2f      	ble.n	8360a <_vfiprintf_r+0x78e>
   835aa:	2c10      	cmp	r4, #16
   835ac:	4d57      	ldr	r5, [pc, #348]	; (8370c <_vfiprintf_r+0x890>)
   835ae:	dd22      	ble.n	835f6 <_vfiprintf_r+0x77a>
   835b0:	4630      	mov	r0, r6
   835b2:	f04f 0b10 	mov.w	fp, #16
   835b6:	462e      	mov	r6, r5
   835b8:	4625      	mov	r5, r4
   835ba:	9c06      	ldr	r4, [sp, #24]
   835bc:	e006      	b.n	835cc <_vfiprintf_r+0x750>
   835be:	f103 0c02 	add.w	ip, r3, #2
   835c2:	3008      	adds	r0, #8
   835c4:	460b      	mov	r3, r1
   835c6:	3d10      	subs	r5, #16
   835c8:	2d10      	cmp	r5, #16
   835ca:	dd10      	ble.n	835ee <_vfiprintf_r+0x772>
   835cc:	1c59      	adds	r1, r3, #1
   835ce:	3210      	adds	r2, #16
   835d0:	2907      	cmp	r1, #7
   835d2:	9215      	str	r2, [sp, #84]	; 0x54
   835d4:	e880 0840 	stmia.w	r0, {r6, fp}
   835d8:	9114      	str	r1, [sp, #80]	; 0x50
   835da:	ddf0      	ble.n	835be <_vfiprintf_r+0x742>
   835dc:	2a00      	cmp	r2, #0
   835de:	d163      	bne.n	836a8 <_vfiprintf_r+0x82c>
   835e0:	3d10      	subs	r5, #16
   835e2:	2d10      	cmp	r5, #16
   835e4:	f04f 0c01 	mov.w	ip, #1
   835e8:	4613      	mov	r3, r2
   835ea:	4648      	mov	r0, r9
   835ec:	dcee      	bgt.n	835cc <_vfiprintf_r+0x750>
   835ee:	462c      	mov	r4, r5
   835f0:	4661      	mov	r1, ip
   835f2:	4635      	mov	r5, r6
   835f4:	4606      	mov	r6, r0
   835f6:	4422      	add	r2, r4
   835f8:	2907      	cmp	r1, #7
   835fa:	9215      	str	r2, [sp, #84]	; 0x54
   835fc:	6035      	str	r5, [r6, #0]
   835fe:	6074      	str	r4, [r6, #4]
   83600:	9114      	str	r1, [sp, #80]	; 0x50
   83602:	f300 80c1 	bgt.w	83788 <_vfiprintf_r+0x90c>
   83606:	3608      	adds	r6, #8
   83608:	3101      	adds	r1, #1
   8360a:	9d05      	ldr	r5, [sp, #20]
   8360c:	2907      	cmp	r1, #7
   8360e:	442a      	add	r2, r5
   83610:	9215      	str	r2, [sp, #84]	; 0x54
   83612:	6037      	str	r7, [r6, #0]
   83614:	6075      	str	r5, [r6, #4]
   83616:	9114      	str	r1, [sp, #80]	; 0x50
   83618:	f340 80c1 	ble.w	8379e <_vfiprintf_r+0x922>
   8361c:	2a00      	cmp	r2, #0
   8361e:	f040 8130 	bne.w	83882 <_vfiprintf_r+0xa06>
   83622:	9214      	str	r2, [sp, #80]	; 0x50
   83624:	464e      	mov	r6, r9
   83626:	f01a 0f04 	tst.w	sl, #4
   8362a:	f000 808b 	beq.w	83744 <_vfiprintf_r+0x8c8>
   8362e:	9d04      	ldr	r5, [sp, #16]
   83630:	f8dd b00c 	ldr.w	fp, [sp, #12]
   83634:	ebcb 0405 	rsb	r4, fp, r5
   83638:	2c00      	cmp	r4, #0
   8363a:	f340 8083 	ble.w	83744 <_vfiprintf_r+0x8c8>
   8363e:	2c10      	cmp	r4, #16
   83640:	f340 821e 	ble.w	83a80 <_vfiprintf_r+0xc04>
   83644:	9914      	ldr	r1, [sp, #80]	; 0x50
   83646:	4d32      	ldr	r5, [pc, #200]	; (83710 <_vfiprintf_r+0x894>)
   83648:	2710      	movs	r7, #16
   8364a:	f8dd a018 	ldr.w	sl, [sp, #24]
   8364e:	f8dd b008 	ldr.w	fp, [sp, #8]
   83652:	e005      	b.n	83660 <_vfiprintf_r+0x7e4>
   83654:	1c88      	adds	r0, r1, #2
   83656:	3608      	adds	r6, #8
   83658:	4619      	mov	r1, r3
   8365a:	3c10      	subs	r4, #16
   8365c:	2c10      	cmp	r4, #16
   8365e:	dd10      	ble.n	83682 <_vfiprintf_r+0x806>
   83660:	1c4b      	adds	r3, r1, #1
   83662:	3210      	adds	r2, #16
   83664:	2b07      	cmp	r3, #7
   83666:	9215      	str	r2, [sp, #84]	; 0x54
   83668:	e886 00a0 	stmia.w	r6, {r5, r7}
   8366c:	9314      	str	r3, [sp, #80]	; 0x50
   8366e:	ddf1      	ble.n	83654 <_vfiprintf_r+0x7d8>
   83670:	2a00      	cmp	r2, #0
   83672:	d17d      	bne.n	83770 <_vfiprintf_r+0x8f4>
   83674:	3c10      	subs	r4, #16
   83676:	2c10      	cmp	r4, #16
   83678:	f04f 0001 	mov.w	r0, #1
   8367c:	4611      	mov	r1, r2
   8367e:	464e      	mov	r6, r9
   83680:	dcee      	bgt.n	83660 <_vfiprintf_r+0x7e4>
   83682:	4422      	add	r2, r4
   83684:	2807      	cmp	r0, #7
   83686:	9215      	str	r2, [sp, #84]	; 0x54
   83688:	6035      	str	r5, [r6, #0]
   8368a:	6074      	str	r4, [r6, #4]
   8368c:	9014      	str	r0, [sp, #80]	; 0x50
   8368e:	dd59      	ble.n	83744 <_vfiprintf_r+0x8c8>
   83690:	2a00      	cmp	r2, #0
   83692:	d14f      	bne.n	83734 <_vfiprintf_r+0x8b8>
   83694:	9c09      	ldr	r4, [sp, #36]	; 0x24
   83696:	f8dd b00c 	ldr.w	fp, [sp, #12]
   8369a:	9d04      	ldr	r5, [sp, #16]
   8369c:	45ab      	cmp	fp, r5
   8369e:	bfac      	ite	ge
   836a0:	445c      	addge	r4, fp
   836a2:	1964      	addlt	r4, r4, r5
   836a4:	9409      	str	r4, [sp, #36]	; 0x24
   836a6:	e05e      	b.n	83766 <_vfiprintf_r+0x8ea>
   836a8:	4620      	mov	r0, r4
   836aa:	9902      	ldr	r1, [sp, #8]
   836ac:	aa13      	add	r2, sp, #76	; 0x4c
   836ae:	f7ff fba9 	bl	82e04 <__sprint_r.part.0>
   836b2:	2800      	cmp	r0, #0
   836b4:	d135      	bne.n	83722 <_vfiprintf_r+0x8a6>
   836b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
   836b8:	9a15      	ldr	r2, [sp, #84]	; 0x54
   836ba:	f103 0c01 	add.w	ip, r3, #1
   836be:	4648      	mov	r0, r9
   836c0:	e781      	b.n	835c6 <_vfiprintf_r+0x74a>
   836c2:	08e0      	lsrs	r0, r4, #3
   836c4:	ea40 7045 	orr.w	r0, r0, r5, lsl #29
   836c8:	f004 0207 	and.w	r2, r4, #7
   836cc:	08e9      	lsrs	r1, r5, #3
   836ce:	3230      	adds	r2, #48	; 0x30
   836d0:	ea50 0b01 	orrs.w	fp, r0, r1
   836d4:	461f      	mov	r7, r3
   836d6:	701a      	strb	r2, [r3, #0]
   836d8:	4604      	mov	r4, r0
   836da:	460d      	mov	r5, r1
   836dc:	f103 33ff 	add.w	r3, r3, #4294967295
   836e0:	d1ef      	bne.n	836c2 <_vfiprintf_r+0x846>
   836e2:	f01a 0f01 	tst.w	sl, #1
   836e6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   836ea:	4639      	mov	r1, r7
   836ec:	f000 80b9 	beq.w	83862 <_vfiprintf_r+0x9e6>
   836f0:	2a30      	cmp	r2, #48	; 0x30
   836f2:	f43f acf4 	beq.w	830de <_vfiprintf_r+0x262>
   836f6:	461f      	mov	r7, r3
   836f8:	ebc7 0509 	rsb	r5, r7, r9
   836fc:	2330      	movs	r3, #48	; 0x30
   836fe:	9505      	str	r5, [sp, #20]
   83700:	f801 3c01 	strb.w	r3, [r1, #-1]
   83704:	e4ee      	b.n	830e4 <_vfiprintf_r+0x268>
   83706:	bf00      	nop
   83708:	00085b7c 	.word	0x00085b7c
   8370c:	00085b98 	.word	0x00085b98
   83710:	00085ba8 	.word	0x00085ba8
   83714:	9b15      	ldr	r3, [sp, #84]	; 0x54
   83716:	b123      	cbz	r3, 83722 <_vfiprintf_r+0x8a6>
   83718:	9806      	ldr	r0, [sp, #24]
   8371a:	9902      	ldr	r1, [sp, #8]
   8371c:	aa13      	add	r2, sp, #76	; 0x4c
   8371e:	f7ff fb71 	bl	82e04 <__sprint_r.part.0>
   83722:	9c02      	ldr	r4, [sp, #8]
   83724:	89a3      	ldrh	r3, [r4, #12]
   83726:	065b      	lsls	r3, r3, #25
   83728:	f53f ac98 	bmi.w	8305c <_vfiprintf_r+0x1e0>
   8372c:	9809      	ldr	r0, [sp, #36]	; 0x24
   8372e:	b031      	add	sp, #196	; 0xc4
   83730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83734:	9806      	ldr	r0, [sp, #24]
   83736:	9902      	ldr	r1, [sp, #8]
   83738:	aa13      	add	r2, sp, #76	; 0x4c
   8373a:	f7ff fb63 	bl	82e04 <__sprint_r.part.0>
   8373e:	2800      	cmp	r0, #0
   83740:	d1ef      	bne.n	83722 <_vfiprintf_r+0x8a6>
   83742:	9a15      	ldr	r2, [sp, #84]	; 0x54
   83744:	9c09      	ldr	r4, [sp, #36]	; 0x24
   83746:	f8dd b00c 	ldr.w	fp, [sp, #12]
   8374a:	9d04      	ldr	r5, [sp, #16]
   8374c:	45ab      	cmp	fp, r5
   8374e:	bfac      	ite	ge
   83750:	445c      	addge	r4, fp
   83752:	1964      	addlt	r4, r4, r5
   83754:	9409      	str	r4, [sp, #36]	; 0x24
   83756:	b132      	cbz	r2, 83766 <_vfiprintf_r+0x8ea>
   83758:	9806      	ldr	r0, [sp, #24]
   8375a:	9902      	ldr	r1, [sp, #8]
   8375c:	aa13      	add	r2, sp, #76	; 0x4c
   8375e:	f7ff fb51 	bl	82e04 <__sprint_r.part.0>
   83762:	2800      	cmp	r0, #0
   83764:	d1dd      	bne.n	83722 <_vfiprintf_r+0x8a6>
   83766:	2000      	movs	r0, #0
   83768:	9014      	str	r0, [sp, #80]	; 0x50
   8376a:	464e      	mov	r6, r9
   8376c:	f7ff bbb9 	b.w	82ee2 <_vfiprintf_r+0x66>
   83770:	4650      	mov	r0, sl
   83772:	4659      	mov	r1, fp
   83774:	aa13      	add	r2, sp, #76	; 0x4c
   83776:	f7ff fb45 	bl	82e04 <__sprint_r.part.0>
   8377a:	2800      	cmp	r0, #0
   8377c:	d1d1      	bne.n	83722 <_vfiprintf_r+0x8a6>
   8377e:	9914      	ldr	r1, [sp, #80]	; 0x50
   83780:	9a15      	ldr	r2, [sp, #84]	; 0x54
   83782:	1c48      	adds	r0, r1, #1
   83784:	464e      	mov	r6, r9
   83786:	e768      	b.n	8365a <_vfiprintf_r+0x7de>
   83788:	2a00      	cmp	r2, #0
   8378a:	f040 80f7 	bne.w	8397c <_vfiprintf_r+0xb00>
   8378e:	9c05      	ldr	r4, [sp, #20]
   83790:	2301      	movs	r3, #1
   83792:	9720      	str	r7, [sp, #128]	; 0x80
   83794:	9421      	str	r4, [sp, #132]	; 0x84
   83796:	9415      	str	r4, [sp, #84]	; 0x54
   83798:	4622      	mov	r2, r4
   8379a:	9314      	str	r3, [sp, #80]	; 0x50
   8379c:	464e      	mov	r6, r9
   8379e:	3608      	adds	r6, #8
   837a0:	e741      	b.n	83626 <_vfiprintf_r+0x7aa>
   837a2:	9d04      	ldr	r5, [sp, #16]
   837a4:	f8dd b00c 	ldr.w	fp, [sp, #12]
   837a8:	ebcb 0405 	rsb	r4, fp, r5
   837ac:	2c00      	cmp	r4, #0
   837ae:	f77f aef7 	ble.w	835a0 <_vfiprintf_r+0x724>
   837b2:	2c10      	cmp	r4, #16
   837b4:	4da6      	ldr	r5, [pc, #664]	; (83a50 <_vfiprintf_r+0xbd4>)
   837b6:	f340 8170 	ble.w	83a9a <_vfiprintf_r+0xc1e>
   837ba:	4629      	mov	r1, r5
   837bc:	f04f 0b10 	mov.w	fp, #16
   837c0:	4625      	mov	r5, r4
   837c2:	4664      	mov	r4, ip
   837c4:	46b4      	mov	ip, r6
   837c6:	460e      	mov	r6, r1
   837c8:	e006      	b.n	837d8 <_vfiprintf_r+0x95c>
   837ca:	1c98      	adds	r0, r3, #2
   837cc:	f10c 0c08 	add.w	ip, ip, #8
   837d0:	460b      	mov	r3, r1
   837d2:	3d10      	subs	r5, #16
   837d4:	2d10      	cmp	r5, #16
   837d6:	dd0f      	ble.n	837f8 <_vfiprintf_r+0x97c>
   837d8:	1c59      	adds	r1, r3, #1
   837da:	3210      	adds	r2, #16
   837dc:	2907      	cmp	r1, #7
   837de:	9215      	str	r2, [sp, #84]	; 0x54
   837e0:	e88c 0840 	stmia.w	ip, {r6, fp}
   837e4:	9114      	str	r1, [sp, #80]	; 0x50
   837e6:	ddf0      	ble.n	837ca <_vfiprintf_r+0x94e>
   837e8:	b9ba      	cbnz	r2, 8381a <_vfiprintf_r+0x99e>
   837ea:	3d10      	subs	r5, #16
   837ec:	2d10      	cmp	r5, #16
   837ee:	f04f 0001 	mov.w	r0, #1
   837f2:	4613      	mov	r3, r2
   837f4:	46cc      	mov	ip, r9
   837f6:	dcef      	bgt.n	837d8 <_vfiprintf_r+0x95c>
   837f8:	4633      	mov	r3, r6
   837fa:	4666      	mov	r6, ip
   837fc:	46a4      	mov	ip, r4
   837fe:	462c      	mov	r4, r5
   83800:	461d      	mov	r5, r3
   83802:	4422      	add	r2, r4
   83804:	2807      	cmp	r0, #7
   83806:	9215      	str	r2, [sp, #84]	; 0x54
   83808:	6035      	str	r5, [r6, #0]
   8380a:	6074      	str	r4, [r6, #4]
   8380c:	9014      	str	r0, [sp, #80]	; 0x50
   8380e:	f300 80af 	bgt.w	83970 <_vfiprintf_r+0xaf4>
   83812:	3608      	adds	r6, #8
   83814:	1c41      	adds	r1, r0, #1
   83816:	4603      	mov	r3, r0
   83818:	e6c2      	b.n	835a0 <_vfiprintf_r+0x724>
   8381a:	9806      	ldr	r0, [sp, #24]
   8381c:	9902      	ldr	r1, [sp, #8]
   8381e:	aa13      	add	r2, sp, #76	; 0x4c
   83820:	f7ff faf0 	bl	82e04 <__sprint_r.part.0>
   83824:	2800      	cmp	r0, #0
   83826:	f47f af7c 	bne.w	83722 <_vfiprintf_r+0x8a6>
   8382a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   8382c:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8382e:	1c58      	adds	r0, r3, #1
   83830:	46cc      	mov	ip, r9
   83832:	e7ce      	b.n	837d2 <_vfiprintf_r+0x956>
   83834:	2a00      	cmp	r2, #0
   83836:	d179      	bne.n	8392c <_vfiprintf_r+0xab0>
   83838:	4619      	mov	r1, r3
   8383a:	464e      	mov	r6, r9
   8383c:	4613      	mov	r3, r2
   8383e:	e69c      	b.n	8357a <_vfiprintf_r+0x6fe>
   83840:	2a00      	cmp	r2, #0
   83842:	f040 8084 	bne.w	8394e <_vfiprintf_r+0xad2>
   83846:	2101      	movs	r1, #1
   83848:	4613      	mov	r3, r2
   8384a:	464e      	mov	r6, r9
   8384c:	e6a4      	b.n	83598 <_vfiprintf_r+0x71c>
   8384e:	464f      	mov	r7, r9
   83850:	e448      	b.n	830e4 <_vfiprintf_r+0x268>
   83852:	2d00      	cmp	r5, #0
   83854:	bf08      	it	eq
   83856:	2c0a      	cmpeq	r4, #10
   83858:	d246      	bcs.n	838e8 <_vfiprintf_r+0xa6c>
   8385a:	3430      	adds	r4, #48	; 0x30
   8385c:	af30      	add	r7, sp, #192	; 0xc0
   8385e:	f807 4d41 	strb.w	r4, [r7, #-65]!
   83862:	ebc7 0309 	rsb	r3, r7, r9
   83866:	9305      	str	r3, [sp, #20]
   83868:	e43c      	b.n	830e4 <_vfiprintf_r+0x268>
   8386a:	2302      	movs	r3, #2
   8386c:	e417      	b.n	8309e <_vfiprintf_r+0x222>
   8386e:	2a00      	cmp	r2, #0
   83870:	f040 80af 	bne.w	839d2 <_vfiprintf_r+0xb56>
   83874:	4613      	mov	r3, r2
   83876:	2101      	movs	r1, #1
   83878:	464e      	mov	r6, r9
   8387a:	e66d      	b.n	83558 <_vfiprintf_r+0x6dc>
   8387c:	4644      	mov	r4, r8
   8387e:	f7ff bb58 	b.w	82f32 <_vfiprintf_r+0xb6>
   83882:	9806      	ldr	r0, [sp, #24]
   83884:	9902      	ldr	r1, [sp, #8]
   83886:	aa13      	add	r2, sp, #76	; 0x4c
   83888:	f7ff fabc 	bl	82e04 <__sprint_r.part.0>
   8388c:	2800      	cmp	r0, #0
   8388e:	f47f af48 	bne.w	83722 <_vfiprintf_r+0x8a6>
   83892:	9a15      	ldr	r2, [sp, #84]	; 0x54
   83894:	464e      	mov	r6, r9
   83896:	e6c6      	b.n	83626 <_vfiprintf_r+0x7aa>
   83898:	9d08      	ldr	r5, [sp, #32]
   8389a:	682c      	ldr	r4, [r5, #0]
   8389c:	3504      	adds	r5, #4
   8389e:	9508      	str	r5, [sp, #32]
   838a0:	2500      	movs	r5, #0
   838a2:	f7ff bbfc 	b.w	8309e <_vfiprintf_r+0x222>
   838a6:	9d08      	ldr	r5, [sp, #32]
   838a8:	2301      	movs	r3, #1
   838aa:	682c      	ldr	r4, [r5, #0]
   838ac:	3504      	adds	r5, #4
   838ae:	9508      	str	r5, [sp, #32]
   838b0:	2500      	movs	r5, #0
   838b2:	f7ff bbf4 	b.w	8309e <_vfiprintf_r+0x222>
   838b6:	9d08      	ldr	r5, [sp, #32]
   838b8:	682c      	ldr	r4, [r5, #0]
   838ba:	3504      	adds	r5, #4
   838bc:	9508      	str	r5, [sp, #32]
   838be:	2500      	movs	r5, #0
   838c0:	e525      	b.n	8330e <_vfiprintf_r+0x492>
   838c2:	9d08      	ldr	r5, [sp, #32]
   838c4:	682c      	ldr	r4, [r5, #0]
   838c6:	3504      	adds	r5, #4
   838c8:	9508      	str	r5, [sp, #32]
   838ca:	17e5      	asrs	r5, r4, #31
   838cc:	4622      	mov	r2, r4
   838ce:	462b      	mov	r3, r5
   838d0:	e48e      	b.n	831f0 <_vfiprintf_r+0x374>
   838d2:	9806      	ldr	r0, [sp, #24]
   838d4:	9902      	ldr	r1, [sp, #8]
   838d6:	aa13      	add	r2, sp, #76	; 0x4c
   838d8:	f7ff fa94 	bl	82e04 <__sprint_r.part.0>
   838dc:	2800      	cmp	r0, #0
   838de:	f47f af20 	bne.w	83722 <_vfiprintf_r+0x8a6>
   838e2:	464e      	mov	r6, r9
   838e4:	f7ff bb9a 	b.w	8301c <_vfiprintf_r+0x1a0>
   838e8:	f10d 0b7f 	add.w	fp, sp, #127	; 0x7f
   838ec:	9603      	str	r6, [sp, #12]
   838ee:	465e      	mov	r6, fp
   838f0:	46e3      	mov	fp, ip
   838f2:	4620      	mov	r0, r4
   838f4:	4629      	mov	r1, r5
   838f6:	220a      	movs	r2, #10
   838f8:	2300      	movs	r3, #0
   838fa:	f001 fdb9 	bl	85470 <__aeabi_uldivmod>
   838fe:	3230      	adds	r2, #48	; 0x30
   83900:	7032      	strb	r2, [r6, #0]
   83902:	4620      	mov	r0, r4
   83904:	4629      	mov	r1, r5
   83906:	220a      	movs	r2, #10
   83908:	2300      	movs	r3, #0
   8390a:	f001 fdb1 	bl	85470 <__aeabi_uldivmod>
   8390e:	4604      	mov	r4, r0
   83910:	460d      	mov	r5, r1
   83912:	ea54 0005 	orrs.w	r0, r4, r5
   83916:	4637      	mov	r7, r6
   83918:	f106 36ff 	add.w	r6, r6, #4294967295
   8391c:	d1e9      	bne.n	838f2 <_vfiprintf_r+0xa76>
   8391e:	ebc7 0309 	rsb	r3, r7, r9
   83922:	46dc      	mov	ip, fp
   83924:	9e03      	ldr	r6, [sp, #12]
   83926:	9305      	str	r3, [sp, #20]
   83928:	f7ff bbdc 	b.w	830e4 <_vfiprintf_r+0x268>
   8392c:	9806      	ldr	r0, [sp, #24]
   8392e:	9902      	ldr	r1, [sp, #8]
   83930:	aa13      	add	r2, sp, #76	; 0x4c
   83932:	f8cd c004 	str.w	ip, [sp, #4]
   83936:	f7ff fa65 	bl	82e04 <__sprint_r.part.0>
   8393a:	f8dd c004 	ldr.w	ip, [sp, #4]
   8393e:	2800      	cmp	r0, #0
   83940:	f47f aeef 	bne.w	83722 <_vfiprintf_r+0x8a6>
   83944:	9b14      	ldr	r3, [sp, #80]	; 0x50
   83946:	9a15      	ldr	r2, [sp, #84]	; 0x54
   83948:	1c59      	adds	r1, r3, #1
   8394a:	464e      	mov	r6, r9
   8394c:	e615      	b.n	8357a <_vfiprintf_r+0x6fe>
   8394e:	9806      	ldr	r0, [sp, #24]
   83950:	9902      	ldr	r1, [sp, #8]
   83952:	aa13      	add	r2, sp, #76	; 0x4c
   83954:	f8cd c004 	str.w	ip, [sp, #4]
   83958:	f7ff fa54 	bl	82e04 <__sprint_r.part.0>
   8395c:	f8dd c004 	ldr.w	ip, [sp, #4]
   83960:	2800      	cmp	r0, #0
   83962:	f47f aede 	bne.w	83722 <_vfiprintf_r+0x8a6>
   83966:	9b14      	ldr	r3, [sp, #80]	; 0x50
   83968:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8396a:	1c59      	adds	r1, r3, #1
   8396c:	464e      	mov	r6, r9
   8396e:	e613      	b.n	83598 <_vfiprintf_r+0x71c>
   83970:	2a00      	cmp	r2, #0
   83972:	d156      	bne.n	83a22 <_vfiprintf_r+0xba6>
   83974:	2101      	movs	r1, #1
   83976:	4613      	mov	r3, r2
   83978:	464e      	mov	r6, r9
   8397a:	e611      	b.n	835a0 <_vfiprintf_r+0x724>
   8397c:	9806      	ldr	r0, [sp, #24]
   8397e:	9902      	ldr	r1, [sp, #8]
   83980:	aa13      	add	r2, sp, #76	; 0x4c
   83982:	f7ff fa3f 	bl	82e04 <__sprint_r.part.0>
   83986:	2800      	cmp	r0, #0
   83988:	f47f aecb 	bne.w	83722 <_vfiprintf_r+0x8a6>
   8398c:	9914      	ldr	r1, [sp, #80]	; 0x50
   8398e:	9a15      	ldr	r2, [sp, #84]	; 0x54
   83990:	3101      	adds	r1, #1
   83992:	464e      	mov	r6, r9
   83994:	e639      	b.n	8360a <_vfiprintf_r+0x78e>
   83996:	f04f 0b2d 	mov.w	fp, #45	; 0x2d
   8399a:	4264      	negs	r4, r4
   8399c:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   839a0:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
   839a4:	f8cd b01c 	str.w	fp, [sp, #28]
   839a8:	f8cd c014 	str.w	ip, [sp, #20]
   839ac:	2301      	movs	r3, #1
   839ae:	f7ff bb7e 	b.w	830ae <_vfiprintf_r+0x232>
   839b2:	f01a 0f10 	tst.w	sl, #16
   839b6:	d11d      	bne.n	839f4 <_vfiprintf_r+0xb78>
   839b8:	f01a 0f40 	tst.w	sl, #64	; 0x40
   839bc:	d058      	beq.n	83a70 <_vfiprintf_r+0xbf4>
   839be:	9d08      	ldr	r5, [sp, #32]
   839c0:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
   839c4:	682b      	ldr	r3, [r5, #0]
   839c6:	3504      	adds	r5, #4
   839c8:	9508      	str	r5, [sp, #32]
   839ca:	f8a3 b000 	strh.w	fp, [r3]
   839ce:	f7ff ba88 	b.w	82ee2 <_vfiprintf_r+0x66>
   839d2:	9806      	ldr	r0, [sp, #24]
   839d4:	9902      	ldr	r1, [sp, #8]
   839d6:	aa13      	add	r2, sp, #76	; 0x4c
   839d8:	f8cd c004 	str.w	ip, [sp, #4]
   839dc:	f7ff fa12 	bl	82e04 <__sprint_r.part.0>
   839e0:	f8dd c004 	ldr.w	ip, [sp, #4]
   839e4:	2800      	cmp	r0, #0
   839e6:	f47f ae9c 	bne.w	83722 <_vfiprintf_r+0x8a6>
   839ea:	9b14      	ldr	r3, [sp, #80]	; 0x50
   839ec:	9a15      	ldr	r2, [sp, #84]	; 0x54
   839ee:	1c59      	adds	r1, r3, #1
   839f0:	464e      	mov	r6, r9
   839f2:	e5b1      	b.n	83558 <_vfiprintf_r+0x6dc>
   839f4:	f8dd b020 	ldr.w	fp, [sp, #32]
   839f8:	9c09      	ldr	r4, [sp, #36]	; 0x24
   839fa:	f8db 3000 	ldr.w	r3, [fp]
   839fe:	f10b 0b04 	add.w	fp, fp, #4
   83a02:	f8cd b020 	str.w	fp, [sp, #32]
   83a06:	601c      	str	r4, [r3, #0]
   83a08:	f7ff ba6b 	b.w	82ee2 <_vfiprintf_r+0x66>
   83a0c:	9408      	str	r4, [sp, #32]
   83a0e:	f7ff f997 	bl	82d40 <strlen>
   83a12:	f89d 4047 	ldrb.w	r4, [sp, #71]	; 0x47
   83a16:	9005      	str	r0, [sp, #20]
   83a18:	9407      	str	r4, [sp, #28]
   83a1a:	f04f 0c00 	mov.w	ip, #0
   83a1e:	f7ff bb61 	b.w	830e4 <_vfiprintf_r+0x268>
   83a22:	9806      	ldr	r0, [sp, #24]
   83a24:	9902      	ldr	r1, [sp, #8]
   83a26:	aa13      	add	r2, sp, #76	; 0x4c
   83a28:	f8cd c004 	str.w	ip, [sp, #4]
   83a2c:	f7ff f9ea 	bl	82e04 <__sprint_r.part.0>
   83a30:	f8dd c004 	ldr.w	ip, [sp, #4]
   83a34:	2800      	cmp	r0, #0
   83a36:	f47f ae74 	bne.w	83722 <_vfiprintf_r+0x8a6>
   83a3a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   83a3c:	9a15      	ldr	r2, [sp, #84]	; 0x54
   83a3e:	1c59      	adds	r1, r3, #1
   83a40:	464e      	mov	r6, r9
   83a42:	e5ad      	b.n	835a0 <_vfiprintf_r+0x724>
   83a44:	9b14      	ldr	r3, [sp, #80]	; 0x50
   83a46:	9a15      	ldr	r2, [sp, #84]	; 0x54
   83a48:	3301      	adds	r3, #1
   83a4a:	4d02      	ldr	r5, [pc, #8]	; (83a54 <_vfiprintf_r+0xbd8>)
   83a4c:	f7ff bb9a 	b.w	83184 <_vfiprintf_r+0x308>
   83a50:	00085b98 	.word	0x00085b98
   83a54:	00085ba8 	.word	0x00085ba8
   83a58:	f1bc 0f06 	cmp.w	ip, #6
   83a5c:	bf34      	ite	cc
   83a5e:	4663      	movcc	r3, ip
   83a60:	2306      	movcs	r3, #6
   83a62:	9408      	str	r4, [sp, #32]
   83a64:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
   83a68:	9305      	str	r3, [sp, #20]
   83a6a:	9403      	str	r4, [sp, #12]
   83a6c:	4f16      	ldr	r7, [pc, #88]	; (83ac8 <_vfiprintf_r+0xc4c>)
   83a6e:	e472      	b.n	83356 <_vfiprintf_r+0x4da>
   83a70:	9c08      	ldr	r4, [sp, #32]
   83a72:	9d09      	ldr	r5, [sp, #36]	; 0x24
   83a74:	6823      	ldr	r3, [r4, #0]
   83a76:	3404      	adds	r4, #4
   83a78:	9408      	str	r4, [sp, #32]
   83a7a:	601d      	str	r5, [r3, #0]
   83a7c:	f7ff ba31 	b.w	82ee2 <_vfiprintf_r+0x66>
   83a80:	9814      	ldr	r0, [sp, #80]	; 0x50
   83a82:	4d12      	ldr	r5, [pc, #72]	; (83acc <_vfiprintf_r+0xc50>)
   83a84:	3001      	adds	r0, #1
   83a86:	e5fc      	b.n	83682 <_vfiprintf_r+0x806>
   83a88:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
   83a8c:	f8cd c014 	str.w	ip, [sp, #20]
   83a90:	9507      	str	r5, [sp, #28]
   83a92:	9408      	str	r4, [sp, #32]
   83a94:	4684      	mov	ip, r0
   83a96:	f7ff bb25 	b.w	830e4 <_vfiprintf_r+0x268>
   83a9a:	4608      	mov	r0, r1
   83a9c:	e6b1      	b.n	83802 <_vfiprintf_r+0x986>
   83a9e:	46a0      	mov	r8, r4
   83aa0:	2500      	movs	r5, #0
   83aa2:	f7ff ba5a 	b.w	82f5a <_vfiprintf_r+0xde>
   83aa6:	f8dd b020 	ldr.w	fp, [sp, #32]
   83aaa:	f898 3001 	ldrb.w	r3, [r8, #1]
   83aae:	f8db 5000 	ldr.w	r5, [fp]
   83ab2:	f10b 0204 	add.w	r2, fp, #4
   83ab6:	2d00      	cmp	r5, #0
   83ab8:	9208      	str	r2, [sp, #32]
   83aba:	46a0      	mov	r8, r4
   83abc:	f6bf aa4b 	bge.w	82f56 <_vfiprintf_r+0xda>
   83ac0:	f04f 35ff 	mov.w	r5, #4294967295
   83ac4:	f7ff ba47 	b.w	82f56 <_vfiprintf_r+0xda>
   83ac8:	00085b90 	.word	0x00085b90
   83acc:	00085ba8 	.word	0x00085ba8

00083ad0 <__sbprintf>:
   83ad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   83ad4:	6e4f      	ldr	r7, [r1, #100]	; 0x64
   83ad6:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   83ada:	4688      	mov	r8, r1
   83adc:	9719      	str	r7, [sp, #100]	; 0x64
   83ade:	f8d8 701c 	ldr.w	r7, [r8, #28]
   83ae2:	f8b1 a00c 	ldrh.w	sl, [r1, #12]
   83ae6:	f8b1 900e 	ldrh.w	r9, [r1, #14]
   83aea:	9707      	str	r7, [sp, #28]
   83aec:	f8d8 7024 	ldr.w	r7, [r8, #36]	; 0x24
   83af0:	ac1a      	add	r4, sp, #104	; 0x68
   83af2:	f44f 6580 	mov.w	r5, #1024	; 0x400
   83af6:	f02a 0a02 	bic.w	sl, sl, #2
   83afa:	2600      	movs	r6, #0
   83afc:	4669      	mov	r1, sp
   83afe:	9400      	str	r4, [sp, #0]
   83b00:	9404      	str	r4, [sp, #16]
   83b02:	9502      	str	r5, [sp, #8]
   83b04:	9505      	str	r5, [sp, #20]
   83b06:	f8ad a00c 	strh.w	sl, [sp, #12]
   83b0a:	f8ad 900e 	strh.w	r9, [sp, #14]
   83b0e:	9709      	str	r7, [sp, #36]	; 0x24
   83b10:	9606      	str	r6, [sp, #24]
   83b12:	4605      	mov	r5, r0
   83b14:	f7ff f9b2 	bl	82e7c <_vfiprintf_r>
   83b18:	1e04      	subs	r4, r0, #0
   83b1a:	db07      	blt.n	83b2c <__sbprintf+0x5c>
   83b1c:	4628      	mov	r0, r5
   83b1e:	4669      	mov	r1, sp
   83b20:	f000 f92a 	bl	83d78 <_fflush_r>
   83b24:	42b0      	cmp	r0, r6
   83b26:	bf18      	it	ne
   83b28:	f04f 34ff 	movne.w	r4, #4294967295
   83b2c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   83b30:	065b      	lsls	r3, r3, #25
   83b32:	d505      	bpl.n	83b40 <__sbprintf+0x70>
   83b34:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   83b38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   83b3c:	f8a8 300c 	strh.w	r3, [r8, #12]
   83b40:	4620      	mov	r0, r4
   83b42:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   83b46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   83b4a:	bf00      	nop

00083b4c <__swsetup_r>:
   83b4c:	4b2f      	ldr	r3, [pc, #188]	; (83c0c <__swsetup_r+0xc0>)
   83b4e:	b570      	push	{r4, r5, r6, lr}
   83b50:	4606      	mov	r6, r0
   83b52:	6818      	ldr	r0, [r3, #0]
   83b54:	460c      	mov	r4, r1
   83b56:	b110      	cbz	r0, 83b5e <__swsetup_r+0x12>
   83b58:	6b82      	ldr	r2, [r0, #56]	; 0x38
   83b5a:	2a00      	cmp	r2, #0
   83b5c:	d036      	beq.n	83bcc <__swsetup_r+0x80>
   83b5e:	89a5      	ldrh	r5, [r4, #12]
   83b60:	b2ab      	uxth	r3, r5
   83b62:	0719      	lsls	r1, r3, #28
   83b64:	d50c      	bpl.n	83b80 <__swsetup_r+0x34>
   83b66:	6922      	ldr	r2, [r4, #16]
   83b68:	b1aa      	cbz	r2, 83b96 <__swsetup_r+0x4a>
   83b6a:	f013 0101 	ands.w	r1, r3, #1
   83b6e:	d01e      	beq.n	83bae <__swsetup_r+0x62>
   83b70:	6963      	ldr	r3, [r4, #20]
   83b72:	2100      	movs	r1, #0
   83b74:	425b      	negs	r3, r3
   83b76:	61a3      	str	r3, [r4, #24]
   83b78:	60a1      	str	r1, [r4, #8]
   83b7a:	b1f2      	cbz	r2, 83bba <__swsetup_r+0x6e>
   83b7c:	2000      	movs	r0, #0
   83b7e:	bd70      	pop	{r4, r5, r6, pc}
   83b80:	06da      	lsls	r2, r3, #27
   83b82:	d53a      	bpl.n	83bfa <__swsetup_r+0xae>
   83b84:	075b      	lsls	r3, r3, #29
   83b86:	d424      	bmi.n	83bd2 <__swsetup_r+0x86>
   83b88:	6922      	ldr	r2, [r4, #16]
   83b8a:	f045 0308 	orr.w	r3, r5, #8
   83b8e:	81a3      	strh	r3, [r4, #12]
   83b90:	b29b      	uxth	r3, r3
   83b92:	2a00      	cmp	r2, #0
   83b94:	d1e9      	bne.n	83b6a <__swsetup_r+0x1e>
   83b96:	f403 7120 	and.w	r1, r3, #640	; 0x280
   83b9a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   83b9e:	d0e4      	beq.n	83b6a <__swsetup_r+0x1e>
   83ba0:	4630      	mov	r0, r6
   83ba2:	4621      	mov	r1, r4
   83ba4:	f000 fcce 	bl	84544 <__smakebuf_r>
   83ba8:	89a3      	ldrh	r3, [r4, #12]
   83baa:	6922      	ldr	r2, [r4, #16]
   83bac:	e7dd      	b.n	83b6a <__swsetup_r+0x1e>
   83bae:	0798      	lsls	r0, r3, #30
   83bb0:	bf58      	it	pl
   83bb2:	6961      	ldrpl	r1, [r4, #20]
   83bb4:	60a1      	str	r1, [r4, #8]
   83bb6:	2a00      	cmp	r2, #0
   83bb8:	d1e0      	bne.n	83b7c <__swsetup_r+0x30>
   83bba:	89a3      	ldrh	r3, [r4, #12]
   83bbc:	061a      	lsls	r2, r3, #24
   83bbe:	d5dd      	bpl.n	83b7c <__swsetup_r+0x30>
   83bc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   83bc4:	81a3      	strh	r3, [r4, #12]
   83bc6:	f04f 30ff 	mov.w	r0, #4294967295
   83bca:	bd70      	pop	{r4, r5, r6, pc}
   83bcc:	f000 f8f0 	bl	83db0 <__sinit>
   83bd0:	e7c5      	b.n	83b5e <__swsetup_r+0x12>
   83bd2:	6b21      	ldr	r1, [r4, #48]	; 0x30
   83bd4:	b149      	cbz	r1, 83bea <__swsetup_r+0x9e>
   83bd6:	f104 0340 	add.w	r3, r4, #64	; 0x40
   83bda:	4299      	cmp	r1, r3
   83bdc:	d003      	beq.n	83be6 <__swsetup_r+0x9a>
   83bde:	4630      	mov	r0, r6
   83be0:	f000 fa2a 	bl	84038 <_free_r>
   83be4:	89a5      	ldrh	r5, [r4, #12]
   83be6:	2300      	movs	r3, #0
   83be8:	6323      	str	r3, [r4, #48]	; 0x30
   83bea:	6922      	ldr	r2, [r4, #16]
   83bec:	f025 0524 	bic.w	r5, r5, #36	; 0x24
   83bf0:	2100      	movs	r1, #0
   83bf2:	b2ad      	uxth	r5, r5
   83bf4:	6022      	str	r2, [r4, #0]
   83bf6:	6061      	str	r1, [r4, #4]
   83bf8:	e7c7      	b.n	83b8a <__swsetup_r+0x3e>
   83bfa:	f045 0540 	orr.w	r5, r5, #64	; 0x40
   83bfe:	2309      	movs	r3, #9
   83c00:	6033      	str	r3, [r6, #0]
   83c02:	f04f 30ff 	mov.w	r0, #4294967295
   83c06:	81a5      	strh	r5, [r4, #12]
   83c08:	bd70      	pop	{r4, r5, r6, pc}
   83c0a:	bf00      	nop
   83c0c:	200705b0 	.word	0x200705b0

00083c10 <register_fini>:
   83c10:	4b02      	ldr	r3, [pc, #8]	; (83c1c <register_fini+0xc>)
   83c12:	b113      	cbz	r3, 83c1a <register_fini+0xa>
   83c14:	4802      	ldr	r0, [pc, #8]	; (83c20 <register_fini+0x10>)
   83c16:	f000 b805 	b.w	83c24 <atexit>
   83c1a:	4770      	bx	lr
   83c1c:	00000000 	.word	0x00000000
   83c20:	00083ead 	.word	0x00083ead

00083c24 <atexit>:
   83c24:	4601      	mov	r1, r0
   83c26:	2000      	movs	r0, #0
   83c28:	4602      	mov	r2, r0
   83c2a:	4603      	mov	r3, r0
   83c2c:	f001 bb24 	b.w	85278 <__register_exitproc>

00083c30 <__sflush_r>:
   83c30:	898b      	ldrh	r3, [r1, #12]
   83c32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83c36:	b29a      	uxth	r2, r3
   83c38:	460d      	mov	r5, r1
   83c3a:	0711      	lsls	r1, r2, #28
   83c3c:	4680      	mov	r8, r0
   83c3e:	d43c      	bmi.n	83cba <__sflush_r+0x8a>
   83c40:	686a      	ldr	r2, [r5, #4]
   83c42:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   83c46:	2a00      	cmp	r2, #0
   83c48:	81ab      	strh	r3, [r5, #12]
   83c4a:	dd59      	ble.n	83d00 <__sflush_r+0xd0>
   83c4c:	6aac      	ldr	r4, [r5, #40]	; 0x28
   83c4e:	2c00      	cmp	r4, #0
   83c50:	d04b      	beq.n	83cea <__sflush_r+0xba>
   83c52:	b29b      	uxth	r3, r3
   83c54:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   83c58:	2100      	movs	r1, #0
   83c5a:	b292      	uxth	r2, r2
   83c5c:	f8d8 6000 	ldr.w	r6, [r8]
   83c60:	f8c8 1000 	str.w	r1, [r8]
   83c64:	2a00      	cmp	r2, #0
   83c66:	d04f      	beq.n	83d08 <__sflush_r+0xd8>
   83c68:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   83c6a:	075f      	lsls	r7, r3, #29
   83c6c:	d505      	bpl.n	83c7a <__sflush_r+0x4a>
   83c6e:	6869      	ldr	r1, [r5, #4]
   83c70:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   83c72:	1a52      	subs	r2, r2, r1
   83c74:	b10b      	cbz	r3, 83c7a <__sflush_r+0x4a>
   83c76:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   83c78:	1ad2      	subs	r2, r2, r3
   83c7a:	4640      	mov	r0, r8
   83c7c:	69e9      	ldr	r1, [r5, #28]
   83c7e:	2300      	movs	r3, #0
   83c80:	47a0      	blx	r4
   83c82:	1c44      	adds	r4, r0, #1
   83c84:	d04a      	beq.n	83d1c <__sflush_r+0xec>
   83c86:	89ab      	ldrh	r3, [r5, #12]
   83c88:	692a      	ldr	r2, [r5, #16]
   83c8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   83c8e:	b29b      	uxth	r3, r3
   83c90:	2100      	movs	r1, #0
   83c92:	602a      	str	r2, [r5, #0]
   83c94:	04da      	lsls	r2, r3, #19
   83c96:	81ab      	strh	r3, [r5, #12]
   83c98:	6069      	str	r1, [r5, #4]
   83c9a:	d44c      	bmi.n	83d36 <__sflush_r+0x106>
   83c9c:	6b29      	ldr	r1, [r5, #48]	; 0x30
   83c9e:	f8c8 6000 	str.w	r6, [r8]
   83ca2:	b311      	cbz	r1, 83cea <__sflush_r+0xba>
   83ca4:	f105 0340 	add.w	r3, r5, #64	; 0x40
   83ca8:	4299      	cmp	r1, r3
   83caa:	d002      	beq.n	83cb2 <__sflush_r+0x82>
   83cac:	4640      	mov	r0, r8
   83cae:	f000 f9c3 	bl	84038 <_free_r>
   83cb2:	2000      	movs	r0, #0
   83cb4:	6328      	str	r0, [r5, #48]	; 0x30
   83cb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83cba:	692e      	ldr	r6, [r5, #16]
   83cbc:	b1ae      	cbz	r6, 83cea <__sflush_r+0xba>
   83cbe:	0791      	lsls	r1, r2, #30
   83cc0:	682c      	ldr	r4, [r5, #0]
   83cc2:	bf0c      	ite	eq
   83cc4:	696b      	ldreq	r3, [r5, #20]
   83cc6:	2300      	movne	r3, #0
   83cc8:	602e      	str	r6, [r5, #0]
   83cca:	1ba4      	subs	r4, r4, r6
   83ccc:	60ab      	str	r3, [r5, #8]
   83cce:	e00a      	b.n	83ce6 <__sflush_r+0xb6>
   83cd0:	4632      	mov	r2, r6
   83cd2:	4623      	mov	r3, r4
   83cd4:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   83cd6:	4640      	mov	r0, r8
   83cd8:	69e9      	ldr	r1, [r5, #28]
   83cda:	47b8      	blx	r7
   83cdc:	2800      	cmp	r0, #0
   83cde:	ebc0 0404 	rsb	r4, r0, r4
   83ce2:	4406      	add	r6, r0
   83ce4:	dd04      	ble.n	83cf0 <__sflush_r+0xc0>
   83ce6:	2c00      	cmp	r4, #0
   83ce8:	dcf2      	bgt.n	83cd0 <__sflush_r+0xa0>
   83cea:	2000      	movs	r0, #0
   83cec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83cf0:	89ab      	ldrh	r3, [r5, #12]
   83cf2:	f04f 30ff 	mov.w	r0, #4294967295
   83cf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   83cfa:	81ab      	strh	r3, [r5, #12]
   83cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83d00:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   83d02:	2a00      	cmp	r2, #0
   83d04:	dca2      	bgt.n	83c4c <__sflush_r+0x1c>
   83d06:	e7f0      	b.n	83cea <__sflush_r+0xba>
   83d08:	2301      	movs	r3, #1
   83d0a:	4640      	mov	r0, r8
   83d0c:	69e9      	ldr	r1, [r5, #28]
   83d0e:	47a0      	blx	r4
   83d10:	1c43      	adds	r3, r0, #1
   83d12:	4602      	mov	r2, r0
   83d14:	d01e      	beq.n	83d54 <__sflush_r+0x124>
   83d16:	89ab      	ldrh	r3, [r5, #12]
   83d18:	6aac      	ldr	r4, [r5, #40]	; 0x28
   83d1a:	e7a6      	b.n	83c6a <__sflush_r+0x3a>
   83d1c:	f8d8 3000 	ldr.w	r3, [r8]
   83d20:	b95b      	cbnz	r3, 83d3a <__sflush_r+0x10a>
   83d22:	89aa      	ldrh	r2, [r5, #12]
   83d24:	6929      	ldr	r1, [r5, #16]
   83d26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   83d2a:	b292      	uxth	r2, r2
   83d2c:	606b      	str	r3, [r5, #4]
   83d2e:	04d3      	lsls	r3, r2, #19
   83d30:	81aa      	strh	r2, [r5, #12]
   83d32:	6029      	str	r1, [r5, #0]
   83d34:	d5b2      	bpl.n	83c9c <__sflush_r+0x6c>
   83d36:	6528      	str	r0, [r5, #80]	; 0x50
   83d38:	e7b0      	b.n	83c9c <__sflush_r+0x6c>
   83d3a:	2b1d      	cmp	r3, #29
   83d3c:	d001      	beq.n	83d42 <__sflush_r+0x112>
   83d3e:	2b16      	cmp	r3, #22
   83d40:	d113      	bne.n	83d6a <__sflush_r+0x13a>
   83d42:	89a9      	ldrh	r1, [r5, #12]
   83d44:	692b      	ldr	r3, [r5, #16]
   83d46:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
   83d4a:	2200      	movs	r2, #0
   83d4c:	81a9      	strh	r1, [r5, #12]
   83d4e:	602b      	str	r3, [r5, #0]
   83d50:	606a      	str	r2, [r5, #4]
   83d52:	e7a3      	b.n	83c9c <__sflush_r+0x6c>
   83d54:	f8d8 3000 	ldr.w	r3, [r8]
   83d58:	2b00      	cmp	r3, #0
   83d5a:	d0dc      	beq.n	83d16 <__sflush_r+0xe6>
   83d5c:	2b1d      	cmp	r3, #29
   83d5e:	d001      	beq.n	83d64 <__sflush_r+0x134>
   83d60:	2b16      	cmp	r3, #22
   83d62:	d1c5      	bne.n	83cf0 <__sflush_r+0xc0>
   83d64:	f8c8 6000 	str.w	r6, [r8]
   83d68:	e7bf      	b.n	83cea <__sflush_r+0xba>
   83d6a:	89ab      	ldrh	r3, [r5, #12]
   83d6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   83d70:	81ab      	strh	r3, [r5, #12]
   83d72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83d76:	bf00      	nop

00083d78 <_fflush_r>:
   83d78:	b510      	push	{r4, lr}
   83d7a:	4604      	mov	r4, r0
   83d7c:	b082      	sub	sp, #8
   83d7e:	b108      	cbz	r0, 83d84 <_fflush_r+0xc>
   83d80:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83d82:	b153      	cbz	r3, 83d9a <_fflush_r+0x22>
   83d84:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   83d88:	b908      	cbnz	r0, 83d8e <_fflush_r+0x16>
   83d8a:	b002      	add	sp, #8
   83d8c:	bd10      	pop	{r4, pc}
   83d8e:	4620      	mov	r0, r4
   83d90:	b002      	add	sp, #8
   83d92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   83d96:	f7ff bf4b 	b.w	83c30 <__sflush_r>
   83d9a:	9101      	str	r1, [sp, #4]
   83d9c:	f000 f808 	bl	83db0 <__sinit>
   83da0:	9901      	ldr	r1, [sp, #4]
   83da2:	e7ef      	b.n	83d84 <_fflush_r+0xc>

00083da4 <_cleanup_r>:
   83da4:	4901      	ldr	r1, [pc, #4]	; (83dac <_cleanup_r+0x8>)
   83da6:	f000 bb9f 	b.w	844e8 <_fwalk>
   83daa:	bf00      	nop
   83dac:	000853c5 	.word	0x000853c5

00083db0 <__sinit>:
   83db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83db4:	6b84      	ldr	r4, [r0, #56]	; 0x38
   83db6:	b083      	sub	sp, #12
   83db8:	4607      	mov	r7, r0
   83dba:	2c00      	cmp	r4, #0
   83dbc:	d165      	bne.n	83e8a <__sinit+0xda>
   83dbe:	687d      	ldr	r5, [r7, #4]
   83dc0:	4833      	ldr	r0, [pc, #204]	; (83e90 <__sinit+0xe0>)
   83dc2:	2304      	movs	r3, #4
   83dc4:	2103      	movs	r1, #3
   83dc6:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   83dca:	63f8      	str	r0, [r7, #60]	; 0x3c
   83dcc:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   83dd0:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   83dd4:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   83dd8:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   83ddc:	81ab      	strh	r3, [r5, #12]
   83dde:	602c      	str	r4, [r5, #0]
   83de0:	606c      	str	r4, [r5, #4]
   83de2:	60ac      	str	r4, [r5, #8]
   83de4:	666c      	str	r4, [r5, #100]	; 0x64
   83de6:	81ec      	strh	r4, [r5, #14]
   83de8:	612c      	str	r4, [r5, #16]
   83dea:	616c      	str	r4, [r5, #20]
   83dec:	61ac      	str	r4, [r5, #24]
   83dee:	4621      	mov	r1, r4
   83df0:	2208      	movs	r2, #8
   83df2:	f7fe fe9b 	bl	82b2c <memset>
   83df6:	f8df b09c 	ldr.w	fp, [pc, #156]	; 83e94 <__sinit+0xe4>
   83dfa:	68be      	ldr	r6, [r7, #8]
   83dfc:	f8df a098 	ldr.w	sl, [pc, #152]	; 83e98 <__sinit+0xe8>
   83e00:	f8df 9098 	ldr.w	r9, [pc, #152]	; 83e9c <__sinit+0xec>
   83e04:	f8df 8098 	ldr.w	r8, [pc, #152]	; 83ea0 <__sinit+0xf0>
   83e08:	2301      	movs	r3, #1
   83e0a:	2209      	movs	r2, #9
   83e0c:	61ed      	str	r5, [r5, #28]
   83e0e:	f8c5 b020 	str.w	fp, [r5, #32]
   83e12:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   83e16:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   83e1a:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   83e1e:	4621      	mov	r1, r4
   83e20:	81f3      	strh	r3, [r6, #14]
   83e22:	81b2      	strh	r2, [r6, #12]
   83e24:	6034      	str	r4, [r6, #0]
   83e26:	6074      	str	r4, [r6, #4]
   83e28:	60b4      	str	r4, [r6, #8]
   83e2a:	6674      	str	r4, [r6, #100]	; 0x64
   83e2c:	6134      	str	r4, [r6, #16]
   83e2e:	6174      	str	r4, [r6, #20]
   83e30:	61b4      	str	r4, [r6, #24]
   83e32:	2208      	movs	r2, #8
   83e34:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   83e38:	9301      	str	r3, [sp, #4]
   83e3a:	f7fe fe77 	bl	82b2c <memset>
   83e3e:	68fd      	ldr	r5, [r7, #12]
   83e40:	2012      	movs	r0, #18
   83e42:	2202      	movs	r2, #2
   83e44:	61f6      	str	r6, [r6, #28]
   83e46:	f8c6 b020 	str.w	fp, [r6, #32]
   83e4a:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   83e4e:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   83e52:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   83e56:	4621      	mov	r1, r4
   83e58:	81a8      	strh	r0, [r5, #12]
   83e5a:	81ea      	strh	r2, [r5, #14]
   83e5c:	602c      	str	r4, [r5, #0]
   83e5e:	606c      	str	r4, [r5, #4]
   83e60:	60ac      	str	r4, [r5, #8]
   83e62:	666c      	str	r4, [r5, #100]	; 0x64
   83e64:	612c      	str	r4, [r5, #16]
   83e66:	616c      	str	r4, [r5, #20]
   83e68:	61ac      	str	r4, [r5, #24]
   83e6a:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   83e6e:	2208      	movs	r2, #8
   83e70:	f7fe fe5c 	bl	82b2c <memset>
   83e74:	9b01      	ldr	r3, [sp, #4]
   83e76:	61ed      	str	r5, [r5, #28]
   83e78:	f8c5 b020 	str.w	fp, [r5, #32]
   83e7c:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   83e80:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   83e84:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   83e88:	63bb      	str	r3, [r7, #56]	; 0x38
   83e8a:	b003      	add	sp, #12
   83e8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83e90:	00083da5 	.word	0x00083da5
   83e94:	000850b9 	.word	0x000850b9
   83e98:	000850dd 	.word	0x000850dd
   83e9c:	00085115 	.word	0x00085115
   83ea0:	00085135 	.word	0x00085135

00083ea4 <__sfp_lock_acquire>:
   83ea4:	4770      	bx	lr
   83ea6:	bf00      	nop

00083ea8 <__sfp_lock_release>:
   83ea8:	4770      	bx	lr
   83eaa:	bf00      	nop

00083eac <__libc_fini_array>:
   83eac:	b538      	push	{r3, r4, r5, lr}
   83eae:	4d09      	ldr	r5, [pc, #36]	; (83ed4 <__libc_fini_array+0x28>)
   83eb0:	4c09      	ldr	r4, [pc, #36]	; (83ed8 <__libc_fini_array+0x2c>)
   83eb2:	1b64      	subs	r4, r4, r5
   83eb4:	10a4      	asrs	r4, r4, #2
   83eb6:	bf18      	it	ne
   83eb8:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
   83ebc:	d005      	beq.n	83eca <__libc_fini_array+0x1e>
   83ebe:	3c01      	subs	r4, #1
   83ec0:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   83ec4:	4798      	blx	r3
   83ec6:	2c00      	cmp	r4, #0
   83ec8:	d1f9      	bne.n	83ebe <__libc_fini_array+0x12>
   83eca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   83ece:	f001 be7d 	b.w	85bcc <_fini>
   83ed2:	bf00      	nop
   83ed4:	00085bd8 	.word	0x00085bd8
   83ed8:	00085bdc 	.word	0x00085bdc

00083edc <_fputwc_r>:
   83edc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83ee0:	8993      	ldrh	r3, [r2, #12]
   83ee2:	460f      	mov	r7, r1
   83ee4:	0499      	lsls	r1, r3, #18
   83ee6:	b082      	sub	sp, #8
   83ee8:	4614      	mov	r4, r2
   83eea:	4680      	mov	r8, r0
   83eec:	d406      	bmi.n	83efc <_fputwc_r+0x20>
   83eee:	6e52      	ldr	r2, [r2, #100]	; 0x64
   83ef0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   83ef4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   83ef8:	81a3      	strh	r3, [r4, #12]
   83efa:	6662      	str	r2, [r4, #100]	; 0x64
   83efc:	f000 fb1c 	bl	84538 <__locale_mb_cur_max>
   83f00:	2801      	cmp	r0, #1
   83f02:	d03e      	beq.n	83f82 <_fputwc_r+0xa6>
   83f04:	463a      	mov	r2, r7
   83f06:	4640      	mov	r0, r8
   83f08:	a901      	add	r1, sp, #4
   83f0a:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   83f0e:	f001 f969 	bl	851e4 <_wcrtomb_r>
   83f12:	1c42      	adds	r2, r0, #1
   83f14:	4606      	mov	r6, r0
   83f16:	d02d      	beq.n	83f74 <_fputwc_r+0x98>
   83f18:	2800      	cmp	r0, #0
   83f1a:	d03a      	beq.n	83f92 <_fputwc_r+0xb6>
   83f1c:	f89d 1004 	ldrb.w	r1, [sp, #4]
   83f20:	2500      	movs	r5, #0
   83f22:	e009      	b.n	83f38 <_fputwc_r+0x5c>
   83f24:	6823      	ldr	r3, [r4, #0]
   83f26:	7019      	strb	r1, [r3, #0]
   83f28:	6823      	ldr	r3, [r4, #0]
   83f2a:	3301      	adds	r3, #1
   83f2c:	6023      	str	r3, [r4, #0]
   83f2e:	3501      	adds	r5, #1
   83f30:	42b5      	cmp	r5, r6
   83f32:	d22e      	bcs.n	83f92 <_fputwc_r+0xb6>
   83f34:	ab01      	add	r3, sp, #4
   83f36:	5ce9      	ldrb	r1, [r5, r3]
   83f38:	68a3      	ldr	r3, [r4, #8]
   83f3a:	3b01      	subs	r3, #1
   83f3c:	2b00      	cmp	r3, #0
   83f3e:	60a3      	str	r3, [r4, #8]
   83f40:	daf0      	bge.n	83f24 <_fputwc_r+0x48>
   83f42:	69a2      	ldr	r2, [r4, #24]
   83f44:	4293      	cmp	r3, r2
   83f46:	db06      	blt.n	83f56 <_fputwc_r+0x7a>
   83f48:	6823      	ldr	r3, [r4, #0]
   83f4a:	7019      	strb	r1, [r3, #0]
   83f4c:	6823      	ldr	r3, [r4, #0]
   83f4e:	7819      	ldrb	r1, [r3, #0]
   83f50:	3301      	adds	r3, #1
   83f52:	290a      	cmp	r1, #10
   83f54:	d1ea      	bne.n	83f2c <_fputwc_r+0x50>
   83f56:	4640      	mov	r0, r8
   83f58:	4622      	mov	r2, r4
   83f5a:	f001 f8ef 	bl	8513c <__swbuf_r>
   83f5e:	f1b0 33ff 	subs.w	r3, r0, #4294967295
   83f62:	4258      	negs	r0, r3
   83f64:	4158      	adcs	r0, r3
   83f66:	2800      	cmp	r0, #0
   83f68:	d0e1      	beq.n	83f2e <_fputwc_r+0x52>
   83f6a:	f04f 30ff 	mov.w	r0, #4294967295
   83f6e:	b002      	add	sp, #8
   83f70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83f74:	89a3      	ldrh	r3, [r4, #12]
   83f76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   83f7a:	81a3      	strh	r3, [r4, #12]
   83f7c:	b002      	add	sp, #8
   83f7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83f82:	1e7b      	subs	r3, r7, #1
   83f84:	2bfe      	cmp	r3, #254	; 0xfe
   83f86:	d8bd      	bhi.n	83f04 <_fputwc_r+0x28>
   83f88:	b2f9      	uxtb	r1, r7
   83f8a:	4606      	mov	r6, r0
   83f8c:	f88d 1004 	strb.w	r1, [sp, #4]
   83f90:	e7c6      	b.n	83f20 <_fputwc_r+0x44>
   83f92:	4638      	mov	r0, r7
   83f94:	b002      	add	sp, #8
   83f96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83f9a:	bf00      	nop

00083f9c <_malloc_trim_r>:
   83f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83f9e:	4d23      	ldr	r5, [pc, #140]	; (8402c <_malloc_trim_r+0x90>)
   83fa0:	460f      	mov	r7, r1
   83fa2:	4604      	mov	r4, r0
   83fa4:	f000 fe92 	bl	84ccc <__malloc_lock>
   83fa8:	68ab      	ldr	r3, [r5, #8]
   83faa:	685e      	ldr	r6, [r3, #4]
   83fac:	f026 0603 	bic.w	r6, r6, #3
   83fb0:	1bf1      	subs	r1, r6, r7
   83fb2:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   83fb6:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   83fba:	f021 010f 	bic.w	r1, r1, #15
   83fbe:	f5a1 5780 	sub.w	r7, r1, #4096	; 0x1000
   83fc2:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
   83fc6:	db07      	blt.n	83fd8 <_malloc_trim_r+0x3c>
   83fc8:	4620      	mov	r0, r4
   83fca:	2100      	movs	r1, #0
   83fcc:	f001 f862 	bl	85094 <_sbrk_r>
   83fd0:	68ab      	ldr	r3, [r5, #8]
   83fd2:	4433      	add	r3, r6
   83fd4:	4298      	cmp	r0, r3
   83fd6:	d004      	beq.n	83fe2 <_malloc_trim_r+0x46>
   83fd8:	4620      	mov	r0, r4
   83fda:	f000 fe79 	bl	84cd0 <__malloc_unlock>
   83fde:	2000      	movs	r0, #0
   83fe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83fe2:	4620      	mov	r0, r4
   83fe4:	4279      	negs	r1, r7
   83fe6:	f001 f855 	bl	85094 <_sbrk_r>
   83fea:	3001      	adds	r0, #1
   83fec:	d00d      	beq.n	8400a <_malloc_trim_r+0x6e>
   83fee:	4b10      	ldr	r3, [pc, #64]	; (84030 <_malloc_trim_r+0x94>)
   83ff0:	68aa      	ldr	r2, [r5, #8]
   83ff2:	6819      	ldr	r1, [r3, #0]
   83ff4:	1bf6      	subs	r6, r6, r7
   83ff6:	f046 0601 	orr.w	r6, r6, #1
   83ffa:	4620      	mov	r0, r4
   83ffc:	1bc9      	subs	r1, r1, r7
   83ffe:	6056      	str	r6, [r2, #4]
   84000:	6019      	str	r1, [r3, #0]
   84002:	f000 fe65 	bl	84cd0 <__malloc_unlock>
   84006:	2001      	movs	r0, #1
   84008:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8400a:	4620      	mov	r0, r4
   8400c:	2100      	movs	r1, #0
   8400e:	f001 f841 	bl	85094 <_sbrk_r>
   84012:	68ab      	ldr	r3, [r5, #8]
   84014:	1ac2      	subs	r2, r0, r3
   84016:	2a0f      	cmp	r2, #15
   84018:	ddde      	ble.n	83fd8 <_malloc_trim_r+0x3c>
   8401a:	4d06      	ldr	r5, [pc, #24]	; (84034 <_malloc_trim_r+0x98>)
   8401c:	4904      	ldr	r1, [pc, #16]	; (84030 <_malloc_trim_r+0x94>)
   8401e:	682d      	ldr	r5, [r5, #0]
   84020:	f042 0201 	orr.w	r2, r2, #1
   84024:	1b40      	subs	r0, r0, r5
   84026:	605a      	str	r2, [r3, #4]
   84028:	6008      	str	r0, [r1, #0]
   8402a:	e7d5      	b.n	83fd8 <_malloc_trim_r+0x3c>
   8402c:	200705d8 	.word	0x200705d8
   84030:	2007ac74 	.word	0x2007ac74
   84034:	200709e4 	.word	0x200709e4

00084038 <_free_r>:
   84038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8403c:	460d      	mov	r5, r1
   8403e:	4606      	mov	r6, r0
   84040:	2900      	cmp	r1, #0
   84042:	d055      	beq.n	840f0 <_free_r+0xb8>
   84044:	f000 fe42 	bl	84ccc <__malloc_lock>
   84048:	f855 1c04 	ldr.w	r1, [r5, #-4]
   8404c:	f8df c170 	ldr.w	ip, [pc, #368]	; 841c0 <_free_r+0x188>
   84050:	f1a5 0408 	sub.w	r4, r5, #8
   84054:	f021 0301 	bic.w	r3, r1, #1
   84058:	18e2      	adds	r2, r4, r3
   8405a:	f8dc 0008 	ldr.w	r0, [ip, #8]
   8405e:	6857      	ldr	r7, [r2, #4]
   84060:	4290      	cmp	r0, r2
   84062:	f027 0703 	bic.w	r7, r7, #3
   84066:	d068      	beq.n	8413a <_free_r+0x102>
   84068:	f011 0101 	ands.w	r1, r1, #1
   8406c:	6057      	str	r7, [r2, #4]
   8406e:	d032      	beq.n	840d6 <_free_r+0x9e>
   84070:	2100      	movs	r1, #0
   84072:	19d0      	adds	r0, r2, r7
   84074:	6840      	ldr	r0, [r0, #4]
   84076:	07c0      	lsls	r0, r0, #31
   84078:	d406      	bmi.n	84088 <_free_r+0x50>
   8407a:	443b      	add	r3, r7
   8407c:	6890      	ldr	r0, [r2, #8]
   8407e:	2900      	cmp	r1, #0
   84080:	d04d      	beq.n	8411e <_free_r+0xe6>
   84082:	68d2      	ldr	r2, [r2, #12]
   84084:	60c2      	str	r2, [r0, #12]
   84086:	6090      	str	r0, [r2, #8]
   84088:	f043 0201 	orr.w	r2, r3, #1
   8408c:	6062      	str	r2, [r4, #4]
   8408e:	50e3      	str	r3, [r4, r3]
   84090:	b9e1      	cbnz	r1, 840cc <_free_r+0x94>
   84092:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   84096:	d32d      	bcc.n	840f4 <_free_r+0xbc>
   84098:	0a5a      	lsrs	r2, r3, #9
   8409a:	2a04      	cmp	r2, #4
   8409c:	d869      	bhi.n	84172 <_free_r+0x13a>
   8409e:	0998      	lsrs	r0, r3, #6
   840a0:	3038      	adds	r0, #56	; 0x38
   840a2:	0041      	lsls	r1, r0, #1
   840a4:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
   840a8:	f8dc 2008 	ldr.w	r2, [ip, #8]
   840ac:	4944      	ldr	r1, [pc, #272]	; (841c0 <_free_r+0x188>)
   840ae:	4562      	cmp	r2, ip
   840b0:	d065      	beq.n	8417e <_free_r+0x146>
   840b2:	6851      	ldr	r1, [r2, #4]
   840b4:	f021 0103 	bic.w	r1, r1, #3
   840b8:	428b      	cmp	r3, r1
   840ba:	d202      	bcs.n	840c2 <_free_r+0x8a>
   840bc:	6892      	ldr	r2, [r2, #8]
   840be:	4594      	cmp	ip, r2
   840c0:	d1f7      	bne.n	840b2 <_free_r+0x7a>
   840c2:	68d3      	ldr	r3, [r2, #12]
   840c4:	60e3      	str	r3, [r4, #12]
   840c6:	60a2      	str	r2, [r4, #8]
   840c8:	609c      	str	r4, [r3, #8]
   840ca:	60d4      	str	r4, [r2, #12]
   840cc:	4630      	mov	r0, r6
   840ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   840d2:	f000 bdfd 	b.w	84cd0 <__malloc_unlock>
   840d6:	f855 5c08 	ldr.w	r5, [r5, #-8]
   840da:	f10c 0808 	add.w	r8, ip, #8
   840de:	1b64      	subs	r4, r4, r5
   840e0:	68a0      	ldr	r0, [r4, #8]
   840e2:	442b      	add	r3, r5
   840e4:	4540      	cmp	r0, r8
   840e6:	d042      	beq.n	8416e <_free_r+0x136>
   840e8:	68e5      	ldr	r5, [r4, #12]
   840ea:	60c5      	str	r5, [r0, #12]
   840ec:	60a8      	str	r0, [r5, #8]
   840ee:	e7c0      	b.n	84072 <_free_r+0x3a>
   840f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   840f4:	08db      	lsrs	r3, r3, #3
   840f6:	109a      	asrs	r2, r3, #2
   840f8:	2001      	movs	r0, #1
   840fa:	4090      	lsls	r0, r2
   840fc:	f8dc 1004 	ldr.w	r1, [ip, #4]
   84100:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
   84104:	689a      	ldr	r2, [r3, #8]
   84106:	4301      	orrs	r1, r0
   84108:	60a2      	str	r2, [r4, #8]
   8410a:	60e3      	str	r3, [r4, #12]
   8410c:	f8cc 1004 	str.w	r1, [ip, #4]
   84110:	4630      	mov	r0, r6
   84112:	609c      	str	r4, [r3, #8]
   84114:	60d4      	str	r4, [r2, #12]
   84116:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8411a:	f000 bdd9 	b.w	84cd0 <__malloc_unlock>
   8411e:	4d29      	ldr	r5, [pc, #164]	; (841c4 <_free_r+0x18c>)
   84120:	42a8      	cmp	r0, r5
   84122:	d1ae      	bne.n	84082 <_free_r+0x4a>
   84124:	f043 0201 	orr.w	r2, r3, #1
   84128:	f8cc 4014 	str.w	r4, [ip, #20]
   8412c:	f8cc 4010 	str.w	r4, [ip, #16]
   84130:	60e0      	str	r0, [r4, #12]
   84132:	60a0      	str	r0, [r4, #8]
   84134:	6062      	str	r2, [r4, #4]
   84136:	50e3      	str	r3, [r4, r3]
   84138:	e7c8      	b.n	840cc <_free_r+0x94>
   8413a:	441f      	add	r7, r3
   8413c:	07cb      	lsls	r3, r1, #31
   8413e:	d407      	bmi.n	84150 <_free_r+0x118>
   84140:	f855 1c08 	ldr.w	r1, [r5, #-8]
   84144:	1a64      	subs	r4, r4, r1
   84146:	68e3      	ldr	r3, [r4, #12]
   84148:	68a2      	ldr	r2, [r4, #8]
   8414a:	440f      	add	r7, r1
   8414c:	60d3      	str	r3, [r2, #12]
   8414e:	609a      	str	r2, [r3, #8]
   84150:	4b1d      	ldr	r3, [pc, #116]	; (841c8 <_free_r+0x190>)
   84152:	f047 0201 	orr.w	r2, r7, #1
   84156:	681b      	ldr	r3, [r3, #0]
   84158:	6062      	str	r2, [r4, #4]
   8415a:	429f      	cmp	r7, r3
   8415c:	f8cc 4008 	str.w	r4, [ip, #8]
   84160:	d3b4      	bcc.n	840cc <_free_r+0x94>
   84162:	4b1a      	ldr	r3, [pc, #104]	; (841cc <_free_r+0x194>)
   84164:	4630      	mov	r0, r6
   84166:	6819      	ldr	r1, [r3, #0]
   84168:	f7ff ff18 	bl	83f9c <_malloc_trim_r>
   8416c:	e7ae      	b.n	840cc <_free_r+0x94>
   8416e:	2101      	movs	r1, #1
   84170:	e77f      	b.n	84072 <_free_r+0x3a>
   84172:	2a14      	cmp	r2, #20
   84174:	d80b      	bhi.n	8418e <_free_r+0x156>
   84176:	f102 005b 	add.w	r0, r2, #91	; 0x5b
   8417a:	0041      	lsls	r1, r0, #1
   8417c:	e792      	b.n	840a4 <_free_r+0x6c>
   8417e:	1080      	asrs	r0, r0, #2
   84180:	2501      	movs	r5, #1
   84182:	4085      	lsls	r5, r0
   84184:	6848      	ldr	r0, [r1, #4]
   84186:	4613      	mov	r3, r2
   84188:	4328      	orrs	r0, r5
   8418a:	6048      	str	r0, [r1, #4]
   8418c:	e79a      	b.n	840c4 <_free_r+0x8c>
   8418e:	2a54      	cmp	r2, #84	; 0x54
   84190:	d803      	bhi.n	8419a <_free_r+0x162>
   84192:	0b18      	lsrs	r0, r3, #12
   84194:	306e      	adds	r0, #110	; 0x6e
   84196:	0041      	lsls	r1, r0, #1
   84198:	e784      	b.n	840a4 <_free_r+0x6c>
   8419a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   8419e:	d803      	bhi.n	841a8 <_free_r+0x170>
   841a0:	0bd8      	lsrs	r0, r3, #15
   841a2:	3077      	adds	r0, #119	; 0x77
   841a4:	0041      	lsls	r1, r0, #1
   841a6:	e77d      	b.n	840a4 <_free_r+0x6c>
   841a8:	f240 5154 	movw	r1, #1364	; 0x554
   841ac:	428a      	cmp	r2, r1
   841ae:	d803      	bhi.n	841b8 <_free_r+0x180>
   841b0:	0c98      	lsrs	r0, r3, #18
   841b2:	307c      	adds	r0, #124	; 0x7c
   841b4:	0041      	lsls	r1, r0, #1
   841b6:	e775      	b.n	840a4 <_free_r+0x6c>
   841b8:	21fc      	movs	r1, #252	; 0xfc
   841ba:	207e      	movs	r0, #126	; 0x7e
   841bc:	e772      	b.n	840a4 <_free_r+0x6c>
   841be:	bf00      	nop
   841c0:	200705d8 	.word	0x200705d8
   841c4:	200705e0 	.word	0x200705e0
   841c8:	200709e0 	.word	0x200709e0
   841cc:	2007ac70 	.word	0x2007ac70

000841d0 <__sfvwrite_r>:
   841d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   841d4:	6893      	ldr	r3, [r2, #8]
   841d6:	b083      	sub	sp, #12
   841d8:	4616      	mov	r6, r2
   841da:	4681      	mov	r9, r0
   841dc:	460c      	mov	r4, r1
   841de:	b32b      	cbz	r3, 8422c <__sfvwrite_r+0x5c>
   841e0:	898b      	ldrh	r3, [r1, #12]
   841e2:	0719      	lsls	r1, r3, #28
   841e4:	d526      	bpl.n	84234 <__sfvwrite_r+0x64>
   841e6:	6922      	ldr	r2, [r4, #16]
   841e8:	b322      	cbz	r2, 84234 <__sfvwrite_r+0x64>
   841ea:	f003 0202 	and.w	r2, r3, #2
   841ee:	b292      	uxth	r2, r2
   841f0:	6835      	ldr	r5, [r6, #0]
   841f2:	2a00      	cmp	r2, #0
   841f4:	d02c      	beq.n	84250 <__sfvwrite_r+0x80>
   841f6:	f04f 0a00 	mov.w	sl, #0
   841fa:	f8df b2e8 	ldr.w	fp, [pc, #744]	; 844e4 <__sfvwrite_r+0x314>
   841fe:	46d0      	mov	r8, sl
   84200:	45d8      	cmp	r8, fp
   84202:	bf34      	ite	cc
   84204:	4643      	movcc	r3, r8
   84206:	465b      	movcs	r3, fp
   84208:	4652      	mov	r2, sl
   8420a:	4648      	mov	r0, r9
   8420c:	f1b8 0f00 	cmp.w	r8, #0
   84210:	d04f      	beq.n	842b2 <__sfvwrite_r+0xe2>
   84212:	69e1      	ldr	r1, [r4, #28]
   84214:	6a67      	ldr	r7, [r4, #36]	; 0x24
   84216:	47b8      	blx	r7
   84218:	2800      	cmp	r0, #0
   8421a:	dd56      	ble.n	842ca <__sfvwrite_r+0xfa>
   8421c:	68b3      	ldr	r3, [r6, #8]
   8421e:	4482      	add	sl, r0
   84220:	1a1b      	subs	r3, r3, r0
   84222:	ebc0 0808 	rsb	r8, r0, r8
   84226:	60b3      	str	r3, [r6, #8]
   84228:	2b00      	cmp	r3, #0
   8422a:	d1e9      	bne.n	84200 <__sfvwrite_r+0x30>
   8422c:	2000      	movs	r0, #0
   8422e:	b003      	add	sp, #12
   84230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84234:	4648      	mov	r0, r9
   84236:	4621      	mov	r1, r4
   84238:	f7ff fc88 	bl	83b4c <__swsetup_r>
   8423c:	2800      	cmp	r0, #0
   8423e:	f040 8148 	bne.w	844d2 <__sfvwrite_r+0x302>
   84242:	89a3      	ldrh	r3, [r4, #12]
   84244:	6835      	ldr	r5, [r6, #0]
   84246:	f003 0202 	and.w	r2, r3, #2
   8424a:	b292      	uxth	r2, r2
   8424c:	2a00      	cmp	r2, #0
   8424e:	d1d2      	bne.n	841f6 <__sfvwrite_r+0x26>
   84250:	f013 0a01 	ands.w	sl, r3, #1
   84254:	d142      	bne.n	842dc <__sfvwrite_r+0x10c>
   84256:	46d0      	mov	r8, sl
   84258:	f1b8 0f00 	cmp.w	r8, #0
   8425c:	d023      	beq.n	842a6 <__sfvwrite_r+0xd6>
   8425e:	059a      	lsls	r2, r3, #22
   84260:	68a7      	ldr	r7, [r4, #8]
   84262:	d576      	bpl.n	84352 <__sfvwrite_r+0x182>
   84264:	45b8      	cmp	r8, r7
   84266:	f0c0 80a4 	bcc.w	843b2 <__sfvwrite_r+0x1e2>
   8426a:	f413 6f90 	tst.w	r3, #1152	; 0x480
   8426e:	f040 80b2 	bne.w	843d6 <__sfvwrite_r+0x206>
   84272:	6820      	ldr	r0, [r4, #0]
   84274:	46bb      	mov	fp, r7
   84276:	4651      	mov	r1, sl
   84278:	465a      	mov	r2, fp
   8427a:	f000 fcc1 	bl	84c00 <memmove>
   8427e:	68a2      	ldr	r2, [r4, #8]
   84280:	6821      	ldr	r1, [r4, #0]
   84282:	1bd2      	subs	r2, r2, r7
   84284:	eb01 030b 	add.w	r3, r1, fp
   84288:	60a2      	str	r2, [r4, #8]
   8428a:	6023      	str	r3, [r4, #0]
   8428c:	4642      	mov	r2, r8
   8428e:	68b3      	ldr	r3, [r6, #8]
   84290:	4492      	add	sl, r2
   84292:	1a9b      	subs	r3, r3, r2
   84294:	ebc2 0808 	rsb	r8, r2, r8
   84298:	60b3      	str	r3, [r6, #8]
   8429a:	2b00      	cmp	r3, #0
   8429c:	d0c6      	beq.n	8422c <__sfvwrite_r+0x5c>
   8429e:	89a3      	ldrh	r3, [r4, #12]
   842a0:	f1b8 0f00 	cmp.w	r8, #0
   842a4:	d1db      	bne.n	8425e <__sfvwrite_r+0x8e>
   842a6:	f8d5 a000 	ldr.w	sl, [r5]
   842aa:	f8d5 8004 	ldr.w	r8, [r5, #4]
   842ae:	3508      	adds	r5, #8
   842b0:	e7d2      	b.n	84258 <__sfvwrite_r+0x88>
   842b2:	f8d5 a000 	ldr.w	sl, [r5]
   842b6:	f8d5 8004 	ldr.w	r8, [r5, #4]
   842ba:	3508      	adds	r5, #8
   842bc:	e7a0      	b.n	84200 <__sfvwrite_r+0x30>
   842be:	4648      	mov	r0, r9
   842c0:	4621      	mov	r1, r4
   842c2:	f7ff fd59 	bl	83d78 <_fflush_r>
   842c6:	2800      	cmp	r0, #0
   842c8:	d059      	beq.n	8437e <__sfvwrite_r+0x1ae>
   842ca:	89a3      	ldrh	r3, [r4, #12]
   842cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   842d0:	f04f 30ff 	mov.w	r0, #4294967295
   842d4:	81a3      	strh	r3, [r4, #12]
   842d6:	b003      	add	sp, #12
   842d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   842dc:	4692      	mov	sl, r2
   842de:	9201      	str	r2, [sp, #4]
   842e0:	4693      	mov	fp, r2
   842e2:	4690      	mov	r8, r2
   842e4:	f1b8 0f00 	cmp.w	r8, #0
   842e8:	d02b      	beq.n	84342 <__sfvwrite_r+0x172>
   842ea:	9f01      	ldr	r7, [sp, #4]
   842ec:	2f00      	cmp	r7, #0
   842ee:	d064      	beq.n	843ba <__sfvwrite_r+0x1ea>
   842f0:	6820      	ldr	r0, [r4, #0]
   842f2:	6921      	ldr	r1, [r4, #16]
   842f4:	45c2      	cmp	sl, r8
   842f6:	bf34      	ite	cc
   842f8:	4653      	movcc	r3, sl
   842fa:	4643      	movcs	r3, r8
   842fc:	4288      	cmp	r0, r1
   842fe:	461f      	mov	r7, r3
   84300:	f8d4 c008 	ldr.w	ip, [r4, #8]
   84304:	6962      	ldr	r2, [r4, #20]
   84306:	d903      	bls.n	84310 <__sfvwrite_r+0x140>
   84308:	4494      	add	ip, r2
   8430a:	4563      	cmp	r3, ip
   8430c:	f300 80ae 	bgt.w	8446c <__sfvwrite_r+0x29c>
   84310:	4293      	cmp	r3, r2
   84312:	db36      	blt.n	84382 <__sfvwrite_r+0x1b2>
   84314:	4613      	mov	r3, r2
   84316:	6a67      	ldr	r7, [r4, #36]	; 0x24
   84318:	4648      	mov	r0, r9
   8431a:	69e1      	ldr	r1, [r4, #28]
   8431c:	465a      	mov	r2, fp
   8431e:	47b8      	blx	r7
   84320:	1e07      	subs	r7, r0, #0
   84322:	ddd2      	ble.n	842ca <__sfvwrite_r+0xfa>
   84324:	ebba 0a07 	subs.w	sl, sl, r7
   84328:	d03a      	beq.n	843a0 <__sfvwrite_r+0x1d0>
   8432a:	68b3      	ldr	r3, [r6, #8]
   8432c:	44bb      	add	fp, r7
   8432e:	1bdb      	subs	r3, r3, r7
   84330:	ebc7 0808 	rsb	r8, r7, r8
   84334:	60b3      	str	r3, [r6, #8]
   84336:	2b00      	cmp	r3, #0
   84338:	f43f af78 	beq.w	8422c <__sfvwrite_r+0x5c>
   8433c:	f1b8 0f00 	cmp.w	r8, #0
   84340:	d1d3      	bne.n	842ea <__sfvwrite_r+0x11a>
   84342:	2700      	movs	r7, #0
   84344:	f8d5 b000 	ldr.w	fp, [r5]
   84348:	f8d5 8004 	ldr.w	r8, [r5, #4]
   8434c:	9701      	str	r7, [sp, #4]
   8434e:	3508      	adds	r5, #8
   84350:	e7c8      	b.n	842e4 <__sfvwrite_r+0x114>
   84352:	6820      	ldr	r0, [r4, #0]
   84354:	6923      	ldr	r3, [r4, #16]
   84356:	4298      	cmp	r0, r3
   84358:	d802      	bhi.n	84360 <__sfvwrite_r+0x190>
   8435a:	6963      	ldr	r3, [r4, #20]
   8435c:	4598      	cmp	r8, r3
   8435e:	d272      	bcs.n	84446 <__sfvwrite_r+0x276>
   84360:	45b8      	cmp	r8, r7
   84362:	bf38      	it	cc
   84364:	4647      	movcc	r7, r8
   84366:	463a      	mov	r2, r7
   84368:	4651      	mov	r1, sl
   8436a:	f000 fc49 	bl	84c00 <memmove>
   8436e:	68a3      	ldr	r3, [r4, #8]
   84370:	6822      	ldr	r2, [r4, #0]
   84372:	1bdb      	subs	r3, r3, r7
   84374:	443a      	add	r2, r7
   84376:	60a3      	str	r3, [r4, #8]
   84378:	6022      	str	r2, [r4, #0]
   8437a:	2b00      	cmp	r3, #0
   8437c:	d09f      	beq.n	842be <__sfvwrite_r+0xee>
   8437e:	463a      	mov	r2, r7
   84380:	e785      	b.n	8428e <__sfvwrite_r+0xbe>
   84382:	461a      	mov	r2, r3
   84384:	4659      	mov	r1, fp
   84386:	9300      	str	r3, [sp, #0]
   84388:	f000 fc3a 	bl	84c00 <memmove>
   8438c:	9b00      	ldr	r3, [sp, #0]
   8438e:	68a1      	ldr	r1, [r4, #8]
   84390:	6822      	ldr	r2, [r4, #0]
   84392:	1ac9      	subs	r1, r1, r3
   84394:	ebba 0a07 	subs.w	sl, sl, r7
   84398:	4413      	add	r3, r2
   8439a:	60a1      	str	r1, [r4, #8]
   8439c:	6023      	str	r3, [r4, #0]
   8439e:	d1c4      	bne.n	8432a <__sfvwrite_r+0x15a>
   843a0:	4648      	mov	r0, r9
   843a2:	4621      	mov	r1, r4
   843a4:	f7ff fce8 	bl	83d78 <_fflush_r>
   843a8:	2800      	cmp	r0, #0
   843aa:	d18e      	bne.n	842ca <__sfvwrite_r+0xfa>
   843ac:	f8cd a004 	str.w	sl, [sp, #4]
   843b0:	e7bb      	b.n	8432a <__sfvwrite_r+0x15a>
   843b2:	6820      	ldr	r0, [r4, #0]
   843b4:	4647      	mov	r7, r8
   843b6:	46c3      	mov	fp, r8
   843b8:	e75d      	b.n	84276 <__sfvwrite_r+0xa6>
   843ba:	4658      	mov	r0, fp
   843bc:	210a      	movs	r1, #10
   843be:	4642      	mov	r2, r8
   843c0:	f000 fbd4 	bl	84b6c <memchr>
   843c4:	2800      	cmp	r0, #0
   843c6:	d07f      	beq.n	844c8 <__sfvwrite_r+0x2f8>
   843c8:	f100 0a01 	add.w	sl, r0, #1
   843cc:	2701      	movs	r7, #1
   843ce:	ebcb 0a0a 	rsb	sl, fp, sl
   843d2:	9701      	str	r7, [sp, #4]
   843d4:	e78c      	b.n	842f0 <__sfvwrite_r+0x120>
   843d6:	6822      	ldr	r2, [r4, #0]
   843d8:	6921      	ldr	r1, [r4, #16]
   843da:	6967      	ldr	r7, [r4, #20]
   843dc:	ebc1 0c02 	rsb	ip, r1, r2
   843e0:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   843e4:	f10c 0201 	add.w	r2, ip, #1
   843e8:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   843ec:	4442      	add	r2, r8
   843ee:	107f      	asrs	r7, r7, #1
   843f0:	4297      	cmp	r7, r2
   843f2:	bf34      	ite	cc
   843f4:	4617      	movcc	r7, r2
   843f6:	463a      	movcs	r2, r7
   843f8:	055b      	lsls	r3, r3, #21
   843fa:	d54f      	bpl.n	8449c <__sfvwrite_r+0x2cc>
   843fc:	4611      	mov	r1, r2
   843fe:	4648      	mov	r0, r9
   84400:	f8cd c000 	str.w	ip, [sp]
   84404:	f000 f916 	bl	84634 <_malloc_r>
   84408:	f8dd c000 	ldr.w	ip, [sp]
   8440c:	4683      	mov	fp, r0
   8440e:	2800      	cmp	r0, #0
   84410:	d062      	beq.n	844d8 <__sfvwrite_r+0x308>
   84412:	4662      	mov	r2, ip
   84414:	6921      	ldr	r1, [r4, #16]
   84416:	f8cd c000 	str.w	ip, [sp]
   8441a:	f7fe fb11 	bl	82a40 <memcpy>
   8441e:	89a2      	ldrh	r2, [r4, #12]
   84420:	f8dd c000 	ldr.w	ip, [sp]
   84424:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   84428:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   8442c:	81a2      	strh	r2, [r4, #12]
   8442e:	eb0b 000c 	add.w	r0, fp, ip
   84432:	ebcc 0207 	rsb	r2, ip, r7
   84436:	f8c4 b010 	str.w	fp, [r4, #16]
   8443a:	6167      	str	r7, [r4, #20]
   8443c:	6020      	str	r0, [r4, #0]
   8443e:	60a2      	str	r2, [r4, #8]
   84440:	4647      	mov	r7, r8
   84442:	46c3      	mov	fp, r8
   84444:	e717      	b.n	84276 <__sfvwrite_r+0xa6>
   84446:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   8444a:	4590      	cmp	r8, r2
   8444c:	bf38      	it	cc
   8444e:	4642      	movcc	r2, r8
   84450:	fb92 f2f3 	sdiv	r2, r2, r3
   84454:	fb02 f303 	mul.w	r3, r2, r3
   84458:	6a67      	ldr	r7, [r4, #36]	; 0x24
   8445a:	4648      	mov	r0, r9
   8445c:	69e1      	ldr	r1, [r4, #28]
   8445e:	4652      	mov	r2, sl
   84460:	47b8      	blx	r7
   84462:	2800      	cmp	r0, #0
   84464:	f77f af31 	ble.w	842ca <__sfvwrite_r+0xfa>
   84468:	4602      	mov	r2, r0
   8446a:	e710      	b.n	8428e <__sfvwrite_r+0xbe>
   8446c:	4662      	mov	r2, ip
   8446e:	4659      	mov	r1, fp
   84470:	f8cd c000 	str.w	ip, [sp]
   84474:	f000 fbc4 	bl	84c00 <memmove>
   84478:	f8dd c000 	ldr.w	ip, [sp]
   8447c:	6823      	ldr	r3, [r4, #0]
   8447e:	4648      	mov	r0, r9
   84480:	4463      	add	r3, ip
   84482:	6023      	str	r3, [r4, #0]
   84484:	4621      	mov	r1, r4
   84486:	f8cd c000 	str.w	ip, [sp]
   8448a:	f7ff fc75 	bl	83d78 <_fflush_r>
   8448e:	f8dd c000 	ldr.w	ip, [sp]
   84492:	2800      	cmp	r0, #0
   84494:	f47f af19 	bne.w	842ca <__sfvwrite_r+0xfa>
   84498:	4667      	mov	r7, ip
   8449a:	e743      	b.n	84324 <__sfvwrite_r+0x154>
   8449c:	4648      	mov	r0, r9
   8449e:	f8cd c000 	str.w	ip, [sp]
   844a2:	f000 fc17 	bl	84cd4 <_realloc_r>
   844a6:	f8dd c000 	ldr.w	ip, [sp]
   844aa:	4683      	mov	fp, r0
   844ac:	2800      	cmp	r0, #0
   844ae:	d1be      	bne.n	8442e <__sfvwrite_r+0x25e>
   844b0:	4648      	mov	r0, r9
   844b2:	6921      	ldr	r1, [r4, #16]
   844b4:	f7ff fdc0 	bl	84038 <_free_r>
   844b8:	89a3      	ldrh	r3, [r4, #12]
   844ba:	220c      	movs	r2, #12
   844bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   844c0:	b29b      	uxth	r3, r3
   844c2:	f8c9 2000 	str.w	r2, [r9]
   844c6:	e701      	b.n	842cc <__sfvwrite_r+0xfc>
   844c8:	2701      	movs	r7, #1
   844ca:	f108 0a01 	add.w	sl, r8, #1
   844ce:	9701      	str	r7, [sp, #4]
   844d0:	e70e      	b.n	842f0 <__sfvwrite_r+0x120>
   844d2:	f04f 30ff 	mov.w	r0, #4294967295
   844d6:	e6aa      	b.n	8422e <__sfvwrite_r+0x5e>
   844d8:	230c      	movs	r3, #12
   844da:	f8c9 3000 	str.w	r3, [r9]
   844de:	89a3      	ldrh	r3, [r4, #12]
   844e0:	e6f4      	b.n	842cc <__sfvwrite_r+0xfc>
   844e2:	bf00      	nop
   844e4:	7ffffc00 	.word	0x7ffffc00

000844e8 <_fwalk>:
   844e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   844ec:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
   844f0:	4688      	mov	r8, r1
   844f2:	d019      	beq.n	84528 <_fwalk+0x40>
   844f4:	2600      	movs	r6, #0
   844f6:	687d      	ldr	r5, [r7, #4]
   844f8:	68bc      	ldr	r4, [r7, #8]
   844fa:	3d01      	subs	r5, #1
   844fc:	d40e      	bmi.n	8451c <_fwalk+0x34>
   844fe:	89a3      	ldrh	r3, [r4, #12]
   84500:	3d01      	subs	r5, #1
   84502:	2b01      	cmp	r3, #1
   84504:	d906      	bls.n	84514 <_fwalk+0x2c>
   84506:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   8450a:	4620      	mov	r0, r4
   8450c:	3301      	adds	r3, #1
   8450e:	d001      	beq.n	84514 <_fwalk+0x2c>
   84510:	47c0      	blx	r8
   84512:	4306      	orrs	r6, r0
   84514:	1c6b      	adds	r3, r5, #1
   84516:	f104 0468 	add.w	r4, r4, #104	; 0x68
   8451a:	d1f0      	bne.n	844fe <_fwalk+0x16>
   8451c:	683f      	ldr	r7, [r7, #0]
   8451e:	2f00      	cmp	r7, #0
   84520:	d1e9      	bne.n	844f6 <_fwalk+0xe>
   84522:	4630      	mov	r0, r6
   84524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84528:	463e      	mov	r6, r7
   8452a:	4630      	mov	r0, r6
   8452c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00084530 <__locale_charset>:
   84530:	4800      	ldr	r0, [pc, #0]	; (84534 <__locale_charset+0x4>)
   84532:	4770      	bx	lr
   84534:	200705b4 	.word	0x200705b4

00084538 <__locale_mb_cur_max>:
   84538:	4b01      	ldr	r3, [pc, #4]	; (84540 <__locale_mb_cur_max+0x8>)
   8453a:	6818      	ldr	r0, [r3, #0]
   8453c:	4770      	bx	lr
   8453e:	bf00      	nop
   84540:	200705d4 	.word	0x200705d4

00084544 <__smakebuf_r>:
   84544:	b5f0      	push	{r4, r5, r6, r7, lr}
   84546:	898b      	ldrh	r3, [r1, #12]
   84548:	b091      	sub	sp, #68	; 0x44
   8454a:	b29a      	uxth	r2, r3
   8454c:	0796      	lsls	r6, r2, #30
   8454e:	460c      	mov	r4, r1
   84550:	4605      	mov	r5, r0
   84552:	d437      	bmi.n	845c4 <__smakebuf_r+0x80>
   84554:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   84558:	2900      	cmp	r1, #0
   8455a:	db17      	blt.n	8458c <__smakebuf_r+0x48>
   8455c:	aa01      	add	r2, sp, #4
   8455e:	f000 ff39 	bl	853d4 <_fstat_r>
   84562:	2800      	cmp	r0, #0
   84564:	db10      	blt.n	84588 <__smakebuf_r+0x44>
   84566:	9b02      	ldr	r3, [sp, #8]
   84568:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
   8456c:	f5b3 5100 	subs.w	r1, r3, #8192	; 0x2000
   84570:	424f      	negs	r7, r1
   84572:	414f      	adcs	r7, r1
   84574:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   84578:	d02c      	beq.n	845d4 <__smakebuf_r+0x90>
   8457a:	89a3      	ldrh	r3, [r4, #12]
   8457c:	f44f 6680 	mov.w	r6, #1024	; 0x400
   84580:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   84584:	81a3      	strh	r3, [r4, #12]
   84586:	e00b      	b.n	845a0 <__smakebuf_r+0x5c>
   84588:	89a3      	ldrh	r3, [r4, #12]
   8458a:	b29a      	uxth	r2, r3
   8458c:	f012 0f80 	tst.w	r2, #128	; 0x80
   84590:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   84594:	81a3      	strh	r3, [r4, #12]
   84596:	bf14      	ite	ne
   84598:	2640      	movne	r6, #64	; 0x40
   8459a:	f44f 6680 	moveq.w	r6, #1024	; 0x400
   8459e:	2700      	movs	r7, #0
   845a0:	4628      	mov	r0, r5
   845a2:	4631      	mov	r1, r6
   845a4:	f000 f846 	bl	84634 <_malloc_r>
   845a8:	89a3      	ldrh	r3, [r4, #12]
   845aa:	2800      	cmp	r0, #0
   845ac:	d029      	beq.n	84602 <__smakebuf_r+0xbe>
   845ae:	4a1b      	ldr	r2, [pc, #108]	; (8461c <__smakebuf_r+0xd8>)
   845b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   845b4:	63ea      	str	r2, [r5, #60]	; 0x3c
   845b6:	81a3      	strh	r3, [r4, #12]
   845b8:	6020      	str	r0, [r4, #0]
   845ba:	6120      	str	r0, [r4, #16]
   845bc:	6166      	str	r6, [r4, #20]
   845be:	b9a7      	cbnz	r7, 845ea <__smakebuf_r+0xa6>
   845c0:	b011      	add	sp, #68	; 0x44
   845c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   845c4:	f101 0343 	add.w	r3, r1, #67	; 0x43
   845c8:	2201      	movs	r2, #1
   845ca:	600b      	str	r3, [r1, #0]
   845cc:	610b      	str	r3, [r1, #16]
   845ce:	614a      	str	r2, [r1, #20]
   845d0:	b011      	add	sp, #68	; 0x44
   845d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   845d4:	4a12      	ldr	r2, [pc, #72]	; (84620 <__smakebuf_r+0xdc>)
   845d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   845d8:	4293      	cmp	r3, r2
   845da:	d1ce      	bne.n	8457a <__smakebuf_r+0x36>
   845dc:	89a3      	ldrh	r3, [r4, #12]
   845de:	f44f 6680 	mov.w	r6, #1024	; 0x400
   845e2:	4333      	orrs	r3, r6
   845e4:	81a3      	strh	r3, [r4, #12]
   845e6:	64e6      	str	r6, [r4, #76]	; 0x4c
   845e8:	e7da      	b.n	845a0 <__smakebuf_r+0x5c>
   845ea:	4628      	mov	r0, r5
   845ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   845f0:	f000 ff04 	bl	853fc <_isatty_r>
   845f4:	2800      	cmp	r0, #0
   845f6:	d0e3      	beq.n	845c0 <__smakebuf_r+0x7c>
   845f8:	89a3      	ldrh	r3, [r4, #12]
   845fa:	f043 0301 	orr.w	r3, r3, #1
   845fe:	81a3      	strh	r3, [r4, #12]
   84600:	e7de      	b.n	845c0 <__smakebuf_r+0x7c>
   84602:	059a      	lsls	r2, r3, #22
   84604:	d4dc      	bmi.n	845c0 <__smakebuf_r+0x7c>
   84606:	f104 0243 	add.w	r2, r4, #67	; 0x43
   8460a:	f043 0302 	orr.w	r3, r3, #2
   8460e:	2101      	movs	r1, #1
   84610:	81a3      	strh	r3, [r4, #12]
   84612:	6022      	str	r2, [r4, #0]
   84614:	6122      	str	r2, [r4, #16]
   84616:	6161      	str	r1, [r4, #20]
   84618:	e7d2      	b.n	845c0 <__smakebuf_r+0x7c>
   8461a:	bf00      	nop
   8461c:	00083da5 	.word	0x00083da5
   84620:	00085115 	.word	0x00085115

00084624 <malloc>:
   84624:	4b02      	ldr	r3, [pc, #8]	; (84630 <malloc+0xc>)
   84626:	4601      	mov	r1, r0
   84628:	6818      	ldr	r0, [r3, #0]
   8462a:	f000 b803 	b.w	84634 <_malloc_r>
   8462e:	bf00      	nop
   84630:	200705b0 	.word	0x200705b0

00084634 <_malloc_r>:
   84634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84638:	f101 050b 	add.w	r5, r1, #11
   8463c:	2d16      	cmp	r5, #22
   8463e:	b083      	sub	sp, #12
   84640:	4606      	mov	r6, r0
   84642:	d927      	bls.n	84694 <_malloc_r+0x60>
   84644:	f035 0507 	bics.w	r5, r5, #7
   84648:	d427      	bmi.n	8469a <_malloc_r+0x66>
   8464a:	42a9      	cmp	r1, r5
   8464c:	d825      	bhi.n	8469a <_malloc_r+0x66>
   8464e:	4630      	mov	r0, r6
   84650:	f000 fb3c 	bl	84ccc <__malloc_lock>
   84654:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   84658:	d226      	bcs.n	846a8 <_malloc_r+0x74>
   8465a:	4fc1      	ldr	r7, [pc, #772]	; (84960 <_malloc_r+0x32c>)
   8465c:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
   84660:	eb07 03cc 	add.w	r3, r7, ip, lsl #3
   84664:	68dc      	ldr	r4, [r3, #12]
   84666:	429c      	cmp	r4, r3
   84668:	f000 81d2 	beq.w	84a10 <_malloc_r+0x3dc>
   8466c:	6863      	ldr	r3, [r4, #4]
   8466e:	68e2      	ldr	r2, [r4, #12]
   84670:	f023 0303 	bic.w	r3, r3, #3
   84674:	4423      	add	r3, r4
   84676:	6858      	ldr	r0, [r3, #4]
   84678:	68a1      	ldr	r1, [r4, #8]
   8467a:	f040 0501 	orr.w	r5, r0, #1
   8467e:	60ca      	str	r2, [r1, #12]
   84680:	4630      	mov	r0, r6
   84682:	6091      	str	r1, [r2, #8]
   84684:	605d      	str	r5, [r3, #4]
   84686:	f000 fb23 	bl	84cd0 <__malloc_unlock>
   8468a:	3408      	adds	r4, #8
   8468c:	4620      	mov	r0, r4
   8468e:	b003      	add	sp, #12
   84690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84694:	2510      	movs	r5, #16
   84696:	42a9      	cmp	r1, r5
   84698:	d9d9      	bls.n	8464e <_malloc_r+0x1a>
   8469a:	2400      	movs	r4, #0
   8469c:	230c      	movs	r3, #12
   8469e:	4620      	mov	r0, r4
   846a0:	6033      	str	r3, [r6, #0]
   846a2:	b003      	add	sp, #12
   846a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   846a8:	ea5f 2c55 	movs.w	ip, r5, lsr #9
   846ac:	f000 8089 	beq.w	847c2 <_malloc_r+0x18e>
   846b0:	f1bc 0f04 	cmp.w	ip, #4
   846b4:	f200 8160 	bhi.w	84978 <_malloc_r+0x344>
   846b8:	ea4f 1c95 	mov.w	ip, r5, lsr #6
   846bc:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
   846c0:	ea4f 014c 	mov.w	r1, ip, lsl #1
   846c4:	4fa6      	ldr	r7, [pc, #664]	; (84960 <_malloc_r+0x32c>)
   846c6:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   846ca:	68cc      	ldr	r4, [r1, #12]
   846cc:	42a1      	cmp	r1, r4
   846ce:	d105      	bne.n	846dc <_malloc_r+0xa8>
   846d0:	e00c      	b.n	846ec <_malloc_r+0xb8>
   846d2:	2b00      	cmp	r3, #0
   846d4:	da79      	bge.n	847ca <_malloc_r+0x196>
   846d6:	68e4      	ldr	r4, [r4, #12]
   846d8:	42a1      	cmp	r1, r4
   846da:	d007      	beq.n	846ec <_malloc_r+0xb8>
   846dc:	6862      	ldr	r2, [r4, #4]
   846de:	f022 0203 	bic.w	r2, r2, #3
   846e2:	1b53      	subs	r3, r2, r5
   846e4:	2b0f      	cmp	r3, #15
   846e6:	ddf4      	ble.n	846d2 <_malloc_r+0x9e>
   846e8:	f10c 3cff 	add.w	ip, ip, #4294967295
   846ec:	f10c 0c01 	add.w	ip, ip, #1
   846f0:	4b9b      	ldr	r3, [pc, #620]	; (84960 <_malloc_r+0x32c>)
   846f2:	693c      	ldr	r4, [r7, #16]
   846f4:	f103 0e08 	add.w	lr, r3, #8
   846f8:	4574      	cmp	r4, lr
   846fa:	f000 817e 	beq.w	849fa <_malloc_r+0x3c6>
   846fe:	6861      	ldr	r1, [r4, #4]
   84700:	f021 0103 	bic.w	r1, r1, #3
   84704:	1b4a      	subs	r2, r1, r5
   84706:	2a0f      	cmp	r2, #15
   84708:	f300 8164 	bgt.w	849d4 <_malloc_r+0x3a0>
   8470c:	2a00      	cmp	r2, #0
   8470e:	f8c3 e014 	str.w	lr, [r3, #20]
   84712:	f8c3 e010 	str.w	lr, [r3, #16]
   84716:	da69      	bge.n	847ec <_malloc_r+0x1b8>
   84718:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   8471c:	f080 813a 	bcs.w	84994 <_malloc_r+0x360>
   84720:	08c9      	lsrs	r1, r1, #3
   84722:	108a      	asrs	r2, r1, #2
   84724:	f04f 0801 	mov.w	r8, #1
   84728:	fa08 f802 	lsl.w	r8, r8, r2
   8472c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   84730:	685a      	ldr	r2, [r3, #4]
   84732:	6888      	ldr	r0, [r1, #8]
   84734:	ea48 0202 	orr.w	r2, r8, r2
   84738:	60a0      	str	r0, [r4, #8]
   8473a:	60e1      	str	r1, [r4, #12]
   8473c:	605a      	str	r2, [r3, #4]
   8473e:	608c      	str	r4, [r1, #8]
   84740:	60c4      	str	r4, [r0, #12]
   84742:	ea4f 03ac 	mov.w	r3, ip, asr #2
   84746:	2001      	movs	r0, #1
   84748:	4098      	lsls	r0, r3
   8474a:	4290      	cmp	r0, r2
   8474c:	d85b      	bhi.n	84806 <_malloc_r+0x1d2>
   8474e:	4202      	tst	r2, r0
   84750:	d106      	bne.n	84760 <_malloc_r+0x12c>
   84752:	f02c 0c03 	bic.w	ip, ip, #3
   84756:	0040      	lsls	r0, r0, #1
   84758:	4202      	tst	r2, r0
   8475a:	f10c 0c04 	add.w	ip, ip, #4
   8475e:	d0fa      	beq.n	84756 <_malloc_r+0x122>
   84760:	eb07 08cc 	add.w	r8, r7, ip, lsl #3
   84764:	4644      	mov	r4, r8
   84766:	46e1      	mov	r9, ip
   84768:	68e3      	ldr	r3, [r4, #12]
   8476a:	429c      	cmp	r4, r3
   8476c:	d107      	bne.n	8477e <_malloc_r+0x14a>
   8476e:	e146      	b.n	849fe <_malloc_r+0x3ca>
   84770:	2a00      	cmp	r2, #0
   84772:	f280 8157 	bge.w	84a24 <_malloc_r+0x3f0>
   84776:	68db      	ldr	r3, [r3, #12]
   84778:	429c      	cmp	r4, r3
   8477a:	f000 8140 	beq.w	849fe <_malloc_r+0x3ca>
   8477e:	6859      	ldr	r1, [r3, #4]
   84780:	f021 0103 	bic.w	r1, r1, #3
   84784:	1b4a      	subs	r2, r1, r5
   84786:	2a0f      	cmp	r2, #15
   84788:	ddf2      	ble.n	84770 <_malloc_r+0x13c>
   8478a:	461c      	mov	r4, r3
   8478c:	f854 cf08 	ldr.w	ip, [r4, #8]!
   84790:	68d9      	ldr	r1, [r3, #12]
   84792:	f045 0901 	orr.w	r9, r5, #1
   84796:	f042 0801 	orr.w	r8, r2, #1
   8479a:	441d      	add	r5, r3
   8479c:	f8c3 9004 	str.w	r9, [r3, #4]
   847a0:	4630      	mov	r0, r6
   847a2:	f8cc 100c 	str.w	r1, [ip, #12]
   847a6:	f8c1 c008 	str.w	ip, [r1, #8]
   847aa:	617d      	str	r5, [r7, #20]
   847ac:	613d      	str	r5, [r7, #16]
   847ae:	f8c5 e00c 	str.w	lr, [r5, #12]
   847b2:	f8c5 e008 	str.w	lr, [r5, #8]
   847b6:	f8c5 8004 	str.w	r8, [r5, #4]
   847ba:	50aa      	str	r2, [r5, r2]
   847bc:	f000 fa88 	bl	84cd0 <__malloc_unlock>
   847c0:	e764      	b.n	8468c <_malloc_r+0x58>
   847c2:	217e      	movs	r1, #126	; 0x7e
   847c4:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
   847c8:	e77c      	b.n	846c4 <_malloc_r+0x90>
   847ca:	4422      	add	r2, r4
   847cc:	6850      	ldr	r0, [r2, #4]
   847ce:	68e3      	ldr	r3, [r4, #12]
   847d0:	68a1      	ldr	r1, [r4, #8]
   847d2:	f040 0501 	orr.w	r5, r0, #1
   847d6:	60cb      	str	r3, [r1, #12]
   847d8:	4630      	mov	r0, r6
   847da:	6099      	str	r1, [r3, #8]
   847dc:	6055      	str	r5, [r2, #4]
   847de:	f000 fa77 	bl	84cd0 <__malloc_unlock>
   847e2:	3408      	adds	r4, #8
   847e4:	4620      	mov	r0, r4
   847e6:	b003      	add	sp, #12
   847e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   847ec:	4421      	add	r1, r4
   847ee:	684b      	ldr	r3, [r1, #4]
   847f0:	4630      	mov	r0, r6
   847f2:	f043 0301 	orr.w	r3, r3, #1
   847f6:	604b      	str	r3, [r1, #4]
   847f8:	f000 fa6a 	bl	84cd0 <__malloc_unlock>
   847fc:	3408      	adds	r4, #8
   847fe:	4620      	mov	r0, r4
   84800:	b003      	add	sp, #12
   84802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84806:	68bc      	ldr	r4, [r7, #8]
   84808:	6863      	ldr	r3, [r4, #4]
   8480a:	f023 0903 	bic.w	r9, r3, #3
   8480e:	45a9      	cmp	r9, r5
   84810:	d304      	bcc.n	8481c <_malloc_r+0x1e8>
   84812:	ebc5 0309 	rsb	r3, r5, r9
   84816:	2b0f      	cmp	r3, #15
   84818:	f300 8091 	bgt.w	8493e <_malloc_r+0x30a>
   8481c:	4b51      	ldr	r3, [pc, #324]	; (84964 <_malloc_r+0x330>)
   8481e:	4a52      	ldr	r2, [pc, #328]	; (84968 <_malloc_r+0x334>)
   84820:	6819      	ldr	r1, [r3, #0]
   84822:	6813      	ldr	r3, [r2, #0]
   84824:	eb05 0a01 	add.w	sl, r5, r1
   84828:	3301      	adds	r3, #1
   8482a:	eb04 0b09 	add.w	fp, r4, r9
   8482e:	f000 8161 	beq.w	84af4 <_malloc_r+0x4c0>
   84832:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
   84836:	f10a 0a0f 	add.w	sl, sl, #15
   8483a:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
   8483e:	f02a 0a0f 	bic.w	sl, sl, #15
   84842:	4630      	mov	r0, r6
   84844:	4651      	mov	r1, sl
   84846:	9201      	str	r2, [sp, #4]
   84848:	f000 fc24 	bl	85094 <_sbrk_r>
   8484c:	f1b0 3fff 	cmp.w	r0, #4294967295
   84850:	4680      	mov	r8, r0
   84852:	9a01      	ldr	r2, [sp, #4]
   84854:	f000 8101 	beq.w	84a5a <_malloc_r+0x426>
   84858:	4583      	cmp	fp, r0
   8485a:	f200 80fb 	bhi.w	84a54 <_malloc_r+0x420>
   8485e:	f8df c114 	ldr.w	ip, [pc, #276]	; 84974 <_malloc_r+0x340>
   84862:	45c3      	cmp	fp, r8
   84864:	f8dc 3000 	ldr.w	r3, [ip]
   84868:	4453      	add	r3, sl
   8486a:	f8cc 3000 	str.w	r3, [ip]
   8486e:	f000 814a 	beq.w	84b06 <_malloc_r+0x4d2>
   84872:	6812      	ldr	r2, [r2, #0]
   84874:	493c      	ldr	r1, [pc, #240]	; (84968 <_malloc_r+0x334>)
   84876:	3201      	adds	r2, #1
   84878:	bf1b      	ittet	ne
   8487a:	ebcb 0b08 	rsbne	fp, fp, r8
   8487e:	445b      	addne	r3, fp
   84880:	f8c1 8000 	streq.w	r8, [r1]
   84884:	f8cc 3000 	strne.w	r3, [ip]
   84888:	f018 0307 	ands.w	r3, r8, #7
   8488c:	f000 8114 	beq.w	84ab8 <_malloc_r+0x484>
   84890:	f1c3 0208 	rsb	r2, r3, #8
   84894:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
   84898:	4490      	add	r8, r2
   8489a:	3308      	adds	r3, #8
   8489c:	44c2      	add	sl, r8
   8489e:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
   848a2:	ebca 0a03 	rsb	sl, sl, r3
   848a6:	4651      	mov	r1, sl
   848a8:	4630      	mov	r0, r6
   848aa:	f8cd c004 	str.w	ip, [sp, #4]
   848ae:	f000 fbf1 	bl	85094 <_sbrk_r>
   848b2:	1c43      	adds	r3, r0, #1
   848b4:	f8dd c004 	ldr.w	ip, [sp, #4]
   848b8:	f000 8135 	beq.w	84b26 <_malloc_r+0x4f2>
   848bc:	ebc8 0200 	rsb	r2, r8, r0
   848c0:	4452      	add	r2, sl
   848c2:	f042 0201 	orr.w	r2, r2, #1
   848c6:	f8dc 3000 	ldr.w	r3, [ip]
   848ca:	42bc      	cmp	r4, r7
   848cc:	4453      	add	r3, sl
   848ce:	f8c7 8008 	str.w	r8, [r7, #8]
   848d2:	f8cc 3000 	str.w	r3, [ip]
   848d6:	f8c8 2004 	str.w	r2, [r8, #4]
   848da:	f8df a098 	ldr.w	sl, [pc, #152]	; 84974 <_malloc_r+0x340>
   848de:	d015      	beq.n	8490c <_malloc_r+0x2d8>
   848e0:	f1b9 0f0f 	cmp.w	r9, #15
   848e4:	f240 80eb 	bls.w	84abe <_malloc_r+0x48a>
   848e8:	6861      	ldr	r1, [r4, #4]
   848ea:	f1a9 020c 	sub.w	r2, r9, #12
   848ee:	f022 0207 	bic.w	r2, r2, #7
   848f2:	f001 0101 	and.w	r1, r1, #1
   848f6:	ea42 0e01 	orr.w	lr, r2, r1
   848fa:	2005      	movs	r0, #5
   848fc:	18a1      	adds	r1, r4, r2
   848fe:	2a0f      	cmp	r2, #15
   84900:	f8c4 e004 	str.w	lr, [r4, #4]
   84904:	6048      	str	r0, [r1, #4]
   84906:	6088      	str	r0, [r1, #8]
   84908:	f200 8111 	bhi.w	84b2e <_malloc_r+0x4fa>
   8490c:	4a17      	ldr	r2, [pc, #92]	; (8496c <_malloc_r+0x338>)
   8490e:	68bc      	ldr	r4, [r7, #8]
   84910:	6811      	ldr	r1, [r2, #0]
   84912:	428b      	cmp	r3, r1
   84914:	bf88      	it	hi
   84916:	6013      	strhi	r3, [r2, #0]
   84918:	4a15      	ldr	r2, [pc, #84]	; (84970 <_malloc_r+0x33c>)
   8491a:	6811      	ldr	r1, [r2, #0]
   8491c:	428b      	cmp	r3, r1
   8491e:	bf88      	it	hi
   84920:	6013      	strhi	r3, [r2, #0]
   84922:	6862      	ldr	r2, [r4, #4]
   84924:	f022 0203 	bic.w	r2, r2, #3
   84928:	4295      	cmp	r5, r2
   8492a:	ebc5 0302 	rsb	r3, r5, r2
   8492e:	d801      	bhi.n	84934 <_malloc_r+0x300>
   84930:	2b0f      	cmp	r3, #15
   84932:	dc04      	bgt.n	8493e <_malloc_r+0x30a>
   84934:	4630      	mov	r0, r6
   84936:	f000 f9cb 	bl	84cd0 <__malloc_unlock>
   8493a:	2400      	movs	r4, #0
   8493c:	e6a6      	b.n	8468c <_malloc_r+0x58>
   8493e:	f045 0201 	orr.w	r2, r5, #1
   84942:	f043 0301 	orr.w	r3, r3, #1
   84946:	4425      	add	r5, r4
   84948:	6062      	str	r2, [r4, #4]
   8494a:	4630      	mov	r0, r6
   8494c:	60bd      	str	r5, [r7, #8]
   8494e:	606b      	str	r3, [r5, #4]
   84950:	f000 f9be 	bl	84cd0 <__malloc_unlock>
   84954:	3408      	adds	r4, #8
   84956:	4620      	mov	r0, r4
   84958:	b003      	add	sp, #12
   8495a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8495e:	bf00      	nop
   84960:	200705d8 	.word	0x200705d8
   84964:	2007ac70 	.word	0x2007ac70
   84968:	200709e4 	.word	0x200709e4
   8496c:	2007ac6c 	.word	0x2007ac6c
   84970:	2007ac68 	.word	0x2007ac68
   84974:	2007ac74 	.word	0x2007ac74
   84978:	f1bc 0f14 	cmp.w	ip, #20
   8497c:	d961      	bls.n	84a42 <_malloc_r+0x40e>
   8497e:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
   84982:	f200 808f 	bhi.w	84aa4 <_malloc_r+0x470>
   84986:	ea4f 3c15 	mov.w	ip, r5, lsr #12
   8498a:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
   8498e:	ea4f 014c 	mov.w	r1, ip, lsl #1
   84992:	e697      	b.n	846c4 <_malloc_r+0x90>
   84994:	0a4b      	lsrs	r3, r1, #9
   84996:	2b04      	cmp	r3, #4
   84998:	d958      	bls.n	84a4c <_malloc_r+0x418>
   8499a:	2b14      	cmp	r3, #20
   8499c:	f200 80ad 	bhi.w	84afa <_malloc_r+0x4c6>
   849a0:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   849a4:	0050      	lsls	r0, r2, #1
   849a6:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   849aa:	6883      	ldr	r3, [r0, #8]
   849ac:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 84b68 <_malloc_r+0x534>
   849b0:	4283      	cmp	r3, r0
   849b2:	f000 808a 	beq.w	84aca <_malloc_r+0x496>
   849b6:	685a      	ldr	r2, [r3, #4]
   849b8:	f022 0203 	bic.w	r2, r2, #3
   849bc:	4291      	cmp	r1, r2
   849be:	d202      	bcs.n	849c6 <_malloc_r+0x392>
   849c0:	689b      	ldr	r3, [r3, #8]
   849c2:	4298      	cmp	r0, r3
   849c4:	d1f7      	bne.n	849b6 <_malloc_r+0x382>
   849c6:	68d9      	ldr	r1, [r3, #12]
   849c8:	687a      	ldr	r2, [r7, #4]
   849ca:	60e1      	str	r1, [r4, #12]
   849cc:	60a3      	str	r3, [r4, #8]
   849ce:	608c      	str	r4, [r1, #8]
   849d0:	60dc      	str	r4, [r3, #12]
   849d2:	e6b6      	b.n	84742 <_malloc_r+0x10e>
   849d4:	f045 0701 	orr.w	r7, r5, #1
   849d8:	f042 0101 	orr.w	r1, r2, #1
   849dc:	4425      	add	r5, r4
   849de:	6067      	str	r7, [r4, #4]
   849e0:	4630      	mov	r0, r6
   849e2:	615d      	str	r5, [r3, #20]
   849e4:	611d      	str	r5, [r3, #16]
   849e6:	f8c5 e00c 	str.w	lr, [r5, #12]
   849ea:	f8c5 e008 	str.w	lr, [r5, #8]
   849ee:	6069      	str	r1, [r5, #4]
   849f0:	50aa      	str	r2, [r5, r2]
   849f2:	3408      	adds	r4, #8
   849f4:	f000 f96c 	bl	84cd0 <__malloc_unlock>
   849f8:	e648      	b.n	8468c <_malloc_r+0x58>
   849fa:	685a      	ldr	r2, [r3, #4]
   849fc:	e6a1      	b.n	84742 <_malloc_r+0x10e>
   849fe:	f109 0901 	add.w	r9, r9, #1
   84a02:	f019 0f03 	tst.w	r9, #3
   84a06:	f104 0408 	add.w	r4, r4, #8
   84a0a:	f47f aead 	bne.w	84768 <_malloc_r+0x134>
   84a0e:	e02d      	b.n	84a6c <_malloc_r+0x438>
   84a10:	f104 0308 	add.w	r3, r4, #8
   84a14:	6964      	ldr	r4, [r4, #20]
   84a16:	42a3      	cmp	r3, r4
   84a18:	bf08      	it	eq
   84a1a:	f10c 0c02 	addeq.w	ip, ip, #2
   84a1e:	f43f ae67 	beq.w	846f0 <_malloc_r+0xbc>
   84a22:	e623      	b.n	8466c <_malloc_r+0x38>
   84a24:	4419      	add	r1, r3
   84a26:	6848      	ldr	r0, [r1, #4]
   84a28:	461c      	mov	r4, r3
   84a2a:	f854 2f08 	ldr.w	r2, [r4, #8]!
   84a2e:	68db      	ldr	r3, [r3, #12]
   84a30:	f040 0501 	orr.w	r5, r0, #1
   84a34:	604d      	str	r5, [r1, #4]
   84a36:	4630      	mov	r0, r6
   84a38:	60d3      	str	r3, [r2, #12]
   84a3a:	609a      	str	r2, [r3, #8]
   84a3c:	f000 f948 	bl	84cd0 <__malloc_unlock>
   84a40:	e624      	b.n	8468c <_malloc_r+0x58>
   84a42:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
   84a46:	ea4f 014c 	mov.w	r1, ip, lsl #1
   84a4a:	e63b      	b.n	846c4 <_malloc_r+0x90>
   84a4c:	098a      	lsrs	r2, r1, #6
   84a4e:	3238      	adds	r2, #56	; 0x38
   84a50:	0050      	lsls	r0, r2, #1
   84a52:	e7a8      	b.n	849a6 <_malloc_r+0x372>
   84a54:	42bc      	cmp	r4, r7
   84a56:	f43f af02 	beq.w	8485e <_malloc_r+0x22a>
   84a5a:	68bc      	ldr	r4, [r7, #8]
   84a5c:	6862      	ldr	r2, [r4, #4]
   84a5e:	f022 0203 	bic.w	r2, r2, #3
   84a62:	e761      	b.n	84928 <_malloc_r+0x2f4>
   84a64:	f8d8 8000 	ldr.w	r8, [r8]
   84a68:	4598      	cmp	r8, r3
   84a6a:	d17a      	bne.n	84b62 <_malloc_r+0x52e>
   84a6c:	f01c 0f03 	tst.w	ip, #3
   84a70:	f1a8 0308 	sub.w	r3, r8, #8
   84a74:	f10c 3cff 	add.w	ip, ip, #4294967295
   84a78:	d1f4      	bne.n	84a64 <_malloc_r+0x430>
   84a7a:	687b      	ldr	r3, [r7, #4]
   84a7c:	ea23 0300 	bic.w	r3, r3, r0
   84a80:	607b      	str	r3, [r7, #4]
   84a82:	0040      	lsls	r0, r0, #1
   84a84:	4298      	cmp	r0, r3
   84a86:	f63f aebe 	bhi.w	84806 <_malloc_r+0x1d2>
   84a8a:	2800      	cmp	r0, #0
   84a8c:	f43f aebb 	beq.w	84806 <_malloc_r+0x1d2>
   84a90:	4203      	tst	r3, r0
   84a92:	46cc      	mov	ip, r9
   84a94:	f47f ae64 	bne.w	84760 <_malloc_r+0x12c>
   84a98:	0040      	lsls	r0, r0, #1
   84a9a:	4203      	tst	r3, r0
   84a9c:	f10c 0c04 	add.w	ip, ip, #4
   84aa0:	d0fa      	beq.n	84a98 <_malloc_r+0x464>
   84aa2:	e65d      	b.n	84760 <_malloc_r+0x12c>
   84aa4:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
   84aa8:	d819      	bhi.n	84ade <_malloc_r+0x4aa>
   84aaa:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
   84aae:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
   84ab2:	ea4f 014c 	mov.w	r1, ip, lsl #1
   84ab6:	e605      	b.n	846c4 <_malloc_r+0x90>
   84ab8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   84abc:	e6ee      	b.n	8489c <_malloc_r+0x268>
   84abe:	2301      	movs	r3, #1
   84ac0:	f8c8 3004 	str.w	r3, [r8, #4]
   84ac4:	4644      	mov	r4, r8
   84ac6:	2200      	movs	r2, #0
   84ac8:	e72e      	b.n	84928 <_malloc_r+0x2f4>
   84aca:	1092      	asrs	r2, r2, #2
   84acc:	2001      	movs	r0, #1
   84ace:	4090      	lsls	r0, r2
   84ad0:	f8d8 2004 	ldr.w	r2, [r8, #4]
   84ad4:	4619      	mov	r1, r3
   84ad6:	4302      	orrs	r2, r0
   84ad8:	f8c8 2004 	str.w	r2, [r8, #4]
   84adc:	e775      	b.n	849ca <_malloc_r+0x396>
   84ade:	f240 5354 	movw	r3, #1364	; 0x554
   84ae2:	459c      	cmp	ip, r3
   84ae4:	d81b      	bhi.n	84b1e <_malloc_r+0x4ea>
   84ae6:	ea4f 4c95 	mov.w	ip, r5, lsr #18
   84aea:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
   84aee:	ea4f 014c 	mov.w	r1, ip, lsl #1
   84af2:	e5e7      	b.n	846c4 <_malloc_r+0x90>
   84af4:	f10a 0a10 	add.w	sl, sl, #16
   84af8:	e6a3      	b.n	84842 <_malloc_r+0x20e>
   84afa:	2b54      	cmp	r3, #84	; 0x54
   84afc:	d81f      	bhi.n	84b3e <_malloc_r+0x50a>
   84afe:	0b0a      	lsrs	r2, r1, #12
   84b00:	326e      	adds	r2, #110	; 0x6e
   84b02:	0050      	lsls	r0, r2, #1
   84b04:	e74f      	b.n	849a6 <_malloc_r+0x372>
   84b06:	f3cb 010b 	ubfx	r1, fp, #0, #12
   84b0a:	2900      	cmp	r1, #0
   84b0c:	f47f aeb1 	bne.w	84872 <_malloc_r+0x23e>
   84b10:	eb0a 0109 	add.w	r1, sl, r9
   84b14:	68ba      	ldr	r2, [r7, #8]
   84b16:	f041 0101 	orr.w	r1, r1, #1
   84b1a:	6051      	str	r1, [r2, #4]
   84b1c:	e6f6      	b.n	8490c <_malloc_r+0x2d8>
   84b1e:	21fc      	movs	r1, #252	; 0xfc
   84b20:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
   84b24:	e5ce      	b.n	846c4 <_malloc_r+0x90>
   84b26:	2201      	movs	r2, #1
   84b28:	f04f 0a00 	mov.w	sl, #0
   84b2c:	e6cb      	b.n	848c6 <_malloc_r+0x292>
   84b2e:	f104 0108 	add.w	r1, r4, #8
   84b32:	4630      	mov	r0, r6
   84b34:	f7ff fa80 	bl	84038 <_free_r>
   84b38:	f8da 3000 	ldr.w	r3, [sl]
   84b3c:	e6e6      	b.n	8490c <_malloc_r+0x2d8>
   84b3e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   84b42:	d803      	bhi.n	84b4c <_malloc_r+0x518>
   84b44:	0bca      	lsrs	r2, r1, #15
   84b46:	3277      	adds	r2, #119	; 0x77
   84b48:	0050      	lsls	r0, r2, #1
   84b4a:	e72c      	b.n	849a6 <_malloc_r+0x372>
   84b4c:	f240 5254 	movw	r2, #1364	; 0x554
   84b50:	4293      	cmp	r3, r2
   84b52:	d803      	bhi.n	84b5c <_malloc_r+0x528>
   84b54:	0c8a      	lsrs	r2, r1, #18
   84b56:	327c      	adds	r2, #124	; 0x7c
   84b58:	0050      	lsls	r0, r2, #1
   84b5a:	e724      	b.n	849a6 <_malloc_r+0x372>
   84b5c:	20fc      	movs	r0, #252	; 0xfc
   84b5e:	227e      	movs	r2, #126	; 0x7e
   84b60:	e721      	b.n	849a6 <_malloc_r+0x372>
   84b62:	687b      	ldr	r3, [r7, #4]
   84b64:	e78d      	b.n	84a82 <_malloc_r+0x44e>
   84b66:	bf00      	nop
   84b68:	200705d8 	.word	0x200705d8

00084b6c <memchr>:
   84b6c:	0783      	lsls	r3, r0, #30
   84b6e:	b470      	push	{r4, r5, r6}
   84b70:	b2c9      	uxtb	r1, r1
   84b72:	d040      	beq.n	84bf6 <memchr+0x8a>
   84b74:	1e54      	subs	r4, r2, #1
   84b76:	b32a      	cbz	r2, 84bc4 <memchr+0x58>
   84b78:	7803      	ldrb	r3, [r0, #0]
   84b7a:	428b      	cmp	r3, r1
   84b7c:	d023      	beq.n	84bc6 <memchr+0x5a>
   84b7e:	1c43      	adds	r3, r0, #1
   84b80:	e004      	b.n	84b8c <memchr+0x20>
   84b82:	b1fc      	cbz	r4, 84bc4 <memchr+0x58>
   84b84:	7805      	ldrb	r5, [r0, #0]
   84b86:	4614      	mov	r4, r2
   84b88:	428d      	cmp	r5, r1
   84b8a:	d01c      	beq.n	84bc6 <memchr+0x5a>
   84b8c:	f013 0f03 	tst.w	r3, #3
   84b90:	4618      	mov	r0, r3
   84b92:	f104 32ff 	add.w	r2, r4, #4294967295
   84b96:	f103 0301 	add.w	r3, r3, #1
   84b9a:	d1f2      	bne.n	84b82 <memchr+0x16>
   84b9c:	2c03      	cmp	r4, #3
   84b9e:	d814      	bhi.n	84bca <memchr+0x5e>
   84ba0:	1e65      	subs	r5, r4, #1
   84ba2:	b354      	cbz	r4, 84bfa <memchr+0x8e>
   84ba4:	7803      	ldrb	r3, [r0, #0]
   84ba6:	428b      	cmp	r3, r1
   84ba8:	d00d      	beq.n	84bc6 <memchr+0x5a>
   84baa:	1c42      	adds	r2, r0, #1
   84bac:	2300      	movs	r3, #0
   84bae:	e002      	b.n	84bb6 <memchr+0x4a>
   84bb0:	7804      	ldrb	r4, [r0, #0]
   84bb2:	428c      	cmp	r4, r1
   84bb4:	d007      	beq.n	84bc6 <memchr+0x5a>
   84bb6:	42ab      	cmp	r3, r5
   84bb8:	4610      	mov	r0, r2
   84bba:	f103 0301 	add.w	r3, r3, #1
   84bbe:	f102 0201 	add.w	r2, r2, #1
   84bc2:	d1f5      	bne.n	84bb0 <memchr+0x44>
   84bc4:	2000      	movs	r0, #0
   84bc6:	bc70      	pop	{r4, r5, r6}
   84bc8:	4770      	bx	lr
   84bca:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
   84bce:	4603      	mov	r3, r0
   84bd0:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   84bd4:	681a      	ldr	r2, [r3, #0]
   84bd6:	4618      	mov	r0, r3
   84bd8:	4072      	eors	r2, r6
   84bda:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
   84bde:	ea25 0202 	bic.w	r2, r5, r2
   84be2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   84be6:	f103 0304 	add.w	r3, r3, #4
   84bea:	d1d9      	bne.n	84ba0 <memchr+0x34>
   84bec:	3c04      	subs	r4, #4
   84bee:	2c03      	cmp	r4, #3
   84bf0:	4618      	mov	r0, r3
   84bf2:	d8ef      	bhi.n	84bd4 <memchr+0x68>
   84bf4:	e7d4      	b.n	84ba0 <memchr+0x34>
   84bf6:	4614      	mov	r4, r2
   84bf8:	e7d0      	b.n	84b9c <memchr+0x30>
   84bfa:	4620      	mov	r0, r4
   84bfc:	e7e3      	b.n	84bc6 <memchr+0x5a>
   84bfe:	bf00      	nop

00084c00 <memmove>:
   84c00:	4288      	cmp	r0, r1
   84c02:	b4f0      	push	{r4, r5, r6, r7}
   84c04:	d910      	bls.n	84c28 <memmove+0x28>
   84c06:	188c      	adds	r4, r1, r2
   84c08:	42a0      	cmp	r0, r4
   84c0a:	d20d      	bcs.n	84c28 <memmove+0x28>
   84c0c:	1885      	adds	r5, r0, r2
   84c0e:	1e53      	subs	r3, r2, #1
   84c10:	b142      	cbz	r2, 84c24 <memmove+0x24>
   84c12:	4621      	mov	r1, r4
   84c14:	462a      	mov	r2, r5
   84c16:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
   84c1a:	3b01      	subs	r3, #1
   84c1c:	f802 4d01 	strb.w	r4, [r2, #-1]!
   84c20:	1c5c      	adds	r4, r3, #1
   84c22:	d1f8      	bne.n	84c16 <memmove+0x16>
   84c24:	bcf0      	pop	{r4, r5, r6, r7}
   84c26:	4770      	bx	lr
   84c28:	2a0f      	cmp	r2, #15
   84c2a:	d944      	bls.n	84cb6 <memmove+0xb6>
   84c2c:	ea40 0301 	orr.w	r3, r0, r1
   84c30:	079b      	lsls	r3, r3, #30
   84c32:	d144      	bne.n	84cbe <memmove+0xbe>
   84c34:	f1a2 0710 	sub.w	r7, r2, #16
   84c38:	093f      	lsrs	r7, r7, #4
   84c3a:	eb00 1607 	add.w	r6, r0, r7, lsl #4
   84c3e:	3610      	adds	r6, #16
   84c40:	460c      	mov	r4, r1
   84c42:	4603      	mov	r3, r0
   84c44:	6825      	ldr	r5, [r4, #0]
   84c46:	3310      	adds	r3, #16
   84c48:	f843 5c10 	str.w	r5, [r3, #-16]
   84c4c:	6865      	ldr	r5, [r4, #4]
   84c4e:	3410      	adds	r4, #16
   84c50:	f843 5c0c 	str.w	r5, [r3, #-12]
   84c54:	f854 5c08 	ldr.w	r5, [r4, #-8]
   84c58:	f843 5c08 	str.w	r5, [r3, #-8]
   84c5c:	f854 5c04 	ldr.w	r5, [r4, #-4]
   84c60:	f843 5c04 	str.w	r5, [r3, #-4]
   84c64:	42b3      	cmp	r3, r6
   84c66:	d1ed      	bne.n	84c44 <memmove+0x44>
   84c68:	1c7b      	adds	r3, r7, #1
   84c6a:	f002 0c0f 	and.w	ip, r2, #15
   84c6e:	011b      	lsls	r3, r3, #4
   84c70:	f1bc 0f03 	cmp.w	ip, #3
   84c74:	4419      	add	r1, r3
   84c76:	4403      	add	r3, r0
   84c78:	d923      	bls.n	84cc2 <memmove+0xc2>
   84c7a:	460e      	mov	r6, r1
   84c7c:	461d      	mov	r5, r3
   84c7e:	4664      	mov	r4, ip
   84c80:	f856 7b04 	ldr.w	r7, [r6], #4
   84c84:	3c04      	subs	r4, #4
   84c86:	2c03      	cmp	r4, #3
   84c88:	f845 7b04 	str.w	r7, [r5], #4
   84c8c:	d8f8      	bhi.n	84c80 <memmove+0x80>
   84c8e:	f1ac 0404 	sub.w	r4, ip, #4
   84c92:	f024 0403 	bic.w	r4, r4, #3
   84c96:	3404      	adds	r4, #4
   84c98:	f002 0203 	and.w	r2, r2, #3
   84c9c:	4423      	add	r3, r4
   84c9e:	4421      	add	r1, r4
   84ca0:	2a00      	cmp	r2, #0
   84ca2:	d0bf      	beq.n	84c24 <memmove+0x24>
   84ca4:	441a      	add	r2, r3
   84ca6:	f811 4b01 	ldrb.w	r4, [r1], #1
   84caa:	f803 4b01 	strb.w	r4, [r3], #1
   84cae:	4293      	cmp	r3, r2
   84cb0:	d1f9      	bne.n	84ca6 <memmove+0xa6>
   84cb2:	bcf0      	pop	{r4, r5, r6, r7}
   84cb4:	4770      	bx	lr
   84cb6:	4603      	mov	r3, r0
   84cb8:	2a00      	cmp	r2, #0
   84cba:	d1f3      	bne.n	84ca4 <memmove+0xa4>
   84cbc:	e7b2      	b.n	84c24 <memmove+0x24>
   84cbe:	4603      	mov	r3, r0
   84cc0:	e7f0      	b.n	84ca4 <memmove+0xa4>
   84cc2:	4662      	mov	r2, ip
   84cc4:	2a00      	cmp	r2, #0
   84cc6:	d1ed      	bne.n	84ca4 <memmove+0xa4>
   84cc8:	e7ac      	b.n	84c24 <memmove+0x24>
   84cca:	bf00      	nop

00084ccc <__malloc_lock>:
   84ccc:	4770      	bx	lr
   84cce:	bf00      	nop

00084cd0 <__malloc_unlock>:
   84cd0:	4770      	bx	lr
   84cd2:	bf00      	nop

00084cd4 <_realloc_r>:
   84cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84cd8:	460c      	mov	r4, r1
   84cda:	b083      	sub	sp, #12
   84cdc:	4690      	mov	r8, r2
   84cde:	4681      	mov	r9, r0
   84ce0:	2900      	cmp	r1, #0
   84ce2:	f000 80ba 	beq.w	84e5a <_realloc_r+0x186>
   84ce6:	f7ff fff1 	bl	84ccc <__malloc_lock>
   84cea:	f108 060b 	add.w	r6, r8, #11
   84cee:	f854 3c04 	ldr.w	r3, [r4, #-4]
   84cf2:	2e16      	cmp	r6, #22
   84cf4:	f023 0503 	bic.w	r5, r3, #3
   84cf8:	f1a4 0708 	sub.w	r7, r4, #8
   84cfc:	d84b      	bhi.n	84d96 <_realloc_r+0xc2>
   84cfe:	2110      	movs	r1, #16
   84d00:	460e      	mov	r6, r1
   84d02:	45b0      	cmp	r8, r6
   84d04:	d84c      	bhi.n	84da0 <_realloc_r+0xcc>
   84d06:	428d      	cmp	r5, r1
   84d08:	da51      	bge.n	84dae <_realloc_r+0xda>
   84d0a:	f8df b384 	ldr.w	fp, [pc, #900]	; 85090 <_realloc_r+0x3bc>
   84d0e:	1978      	adds	r0, r7, r5
   84d10:	f8db e008 	ldr.w	lr, [fp, #8]
   84d14:	4586      	cmp	lr, r0
   84d16:	f000 80a6 	beq.w	84e66 <_realloc_r+0x192>
   84d1a:	6842      	ldr	r2, [r0, #4]
   84d1c:	f022 0c01 	bic.w	ip, r2, #1
   84d20:	4484      	add	ip, r0
   84d22:	f8dc c004 	ldr.w	ip, [ip, #4]
   84d26:	f01c 0f01 	tst.w	ip, #1
   84d2a:	d054      	beq.n	84dd6 <_realloc_r+0x102>
   84d2c:	2200      	movs	r2, #0
   84d2e:	4610      	mov	r0, r2
   84d30:	07db      	lsls	r3, r3, #31
   84d32:	d46f      	bmi.n	84e14 <_realloc_r+0x140>
   84d34:	f854 3c08 	ldr.w	r3, [r4, #-8]
   84d38:	ebc3 0a07 	rsb	sl, r3, r7
   84d3c:	f8da 3004 	ldr.w	r3, [sl, #4]
   84d40:	f023 0303 	bic.w	r3, r3, #3
   84d44:	442b      	add	r3, r5
   84d46:	2800      	cmp	r0, #0
   84d48:	d062      	beq.n	84e10 <_realloc_r+0x13c>
   84d4a:	4570      	cmp	r0, lr
   84d4c:	f000 80e9 	beq.w	84f22 <_realloc_r+0x24e>
   84d50:	eb02 0e03 	add.w	lr, r2, r3
   84d54:	458e      	cmp	lr, r1
   84d56:	db5b      	blt.n	84e10 <_realloc_r+0x13c>
   84d58:	68c3      	ldr	r3, [r0, #12]
   84d5a:	6882      	ldr	r2, [r0, #8]
   84d5c:	46d0      	mov	r8, sl
   84d5e:	60d3      	str	r3, [r2, #12]
   84d60:	609a      	str	r2, [r3, #8]
   84d62:	f858 1f08 	ldr.w	r1, [r8, #8]!
   84d66:	f8da 300c 	ldr.w	r3, [sl, #12]
   84d6a:	1f2a      	subs	r2, r5, #4
   84d6c:	2a24      	cmp	r2, #36	; 0x24
   84d6e:	60cb      	str	r3, [r1, #12]
   84d70:	6099      	str	r1, [r3, #8]
   84d72:	f200 8123 	bhi.w	84fbc <_realloc_r+0x2e8>
   84d76:	2a13      	cmp	r2, #19
   84d78:	f240 80b0 	bls.w	84edc <_realloc_r+0x208>
   84d7c:	6823      	ldr	r3, [r4, #0]
   84d7e:	2a1b      	cmp	r2, #27
   84d80:	f8ca 3008 	str.w	r3, [sl, #8]
   84d84:	6863      	ldr	r3, [r4, #4]
   84d86:	f8ca 300c 	str.w	r3, [sl, #12]
   84d8a:	f200 812b 	bhi.w	84fe4 <_realloc_r+0x310>
   84d8e:	3408      	adds	r4, #8
   84d90:	f10a 0310 	add.w	r3, sl, #16
   84d94:	e0a3      	b.n	84ede <_realloc_r+0x20a>
   84d96:	f026 0607 	bic.w	r6, r6, #7
   84d9a:	2e00      	cmp	r6, #0
   84d9c:	4631      	mov	r1, r6
   84d9e:	dab0      	bge.n	84d02 <_realloc_r+0x2e>
   84da0:	230c      	movs	r3, #12
   84da2:	2000      	movs	r0, #0
   84da4:	f8c9 3000 	str.w	r3, [r9]
   84da8:	b003      	add	sp, #12
   84daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84dae:	46a0      	mov	r8, r4
   84db0:	1baa      	subs	r2, r5, r6
   84db2:	2a0f      	cmp	r2, #15
   84db4:	f003 0301 	and.w	r3, r3, #1
   84db8:	d81a      	bhi.n	84df0 <_realloc_r+0x11c>
   84dba:	432b      	orrs	r3, r5
   84dbc:	607b      	str	r3, [r7, #4]
   84dbe:	443d      	add	r5, r7
   84dc0:	686b      	ldr	r3, [r5, #4]
   84dc2:	f043 0301 	orr.w	r3, r3, #1
   84dc6:	606b      	str	r3, [r5, #4]
   84dc8:	4648      	mov	r0, r9
   84dca:	f7ff ff81 	bl	84cd0 <__malloc_unlock>
   84dce:	4640      	mov	r0, r8
   84dd0:	b003      	add	sp, #12
   84dd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84dd6:	f022 0203 	bic.w	r2, r2, #3
   84dda:	eb02 0c05 	add.w	ip, r2, r5
   84dde:	458c      	cmp	ip, r1
   84de0:	dba6      	blt.n	84d30 <_realloc_r+0x5c>
   84de2:	68c2      	ldr	r2, [r0, #12]
   84de4:	6881      	ldr	r1, [r0, #8]
   84de6:	46a0      	mov	r8, r4
   84de8:	60ca      	str	r2, [r1, #12]
   84dea:	4665      	mov	r5, ip
   84dec:	6091      	str	r1, [r2, #8]
   84dee:	e7df      	b.n	84db0 <_realloc_r+0xdc>
   84df0:	19b9      	adds	r1, r7, r6
   84df2:	4333      	orrs	r3, r6
   84df4:	f042 0001 	orr.w	r0, r2, #1
   84df8:	607b      	str	r3, [r7, #4]
   84dfa:	440a      	add	r2, r1
   84dfc:	6048      	str	r0, [r1, #4]
   84dfe:	6853      	ldr	r3, [r2, #4]
   84e00:	3108      	adds	r1, #8
   84e02:	f043 0301 	orr.w	r3, r3, #1
   84e06:	6053      	str	r3, [r2, #4]
   84e08:	4648      	mov	r0, r9
   84e0a:	f7ff f915 	bl	84038 <_free_r>
   84e0e:	e7db      	b.n	84dc8 <_realloc_r+0xf4>
   84e10:	428b      	cmp	r3, r1
   84e12:	da33      	bge.n	84e7c <_realloc_r+0x1a8>
   84e14:	4641      	mov	r1, r8
   84e16:	4648      	mov	r0, r9
   84e18:	f7ff fc0c 	bl	84634 <_malloc_r>
   84e1c:	4680      	mov	r8, r0
   84e1e:	2800      	cmp	r0, #0
   84e20:	d0d2      	beq.n	84dc8 <_realloc_r+0xf4>
   84e22:	f854 3c04 	ldr.w	r3, [r4, #-4]
   84e26:	f1a0 0108 	sub.w	r1, r0, #8
   84e2a:	f023 0201 	bic.w	r2, r3, #1
   84e2e:	443a      	add	r2, r7
   84e30:	4291      	cmp	r1, r2
   84e32:	f000 80bc 	beq.w	84fae <_realloc_r+0x2da>
   84e36:	1f2a      	subs	r2, r5, #4
   84e38:	2a24      	cmp	r2, #36	; 0x24
   84e3a:	d86e      	bhi.n	84f1a <_realloc_r+0x246>
   84e3c:	2a13      	cmp	r2, #19
   84e3e:	d842      	bhi.n	84ec6 <_realloc_r+0x1f2>
   84e40:	4603      	mov	r3, r0
   84e42:	4622      	mov	r2, r4
   84e44:	6811      	ldr	r1, [r2, #0]
   84e46:	6019      	str	r1, [r3, #0]
   84e48:	6851      	ldr	r1, [r2, #4]
   84e4a:	6059      	str	r1, [r3, #4]
   84e4c:	6892      	ldr	r2, [r2, #8]
   84e4e:	609a      	str	r2, [r3, #8]
   84e50:	4621      	mov	r1, r4
   84e52:	4648      	mov	r0, r9
   84e54:	f7ff f8f0 	bl	84038 <_free_r>
   84e58:	e7b6      	b.n	84dc8 <_realloc_r+0xf4>
   84e5a:	4611      	mov	r1, r2
   84e5c:	b003      	add	sp, #12
   84e5e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84e62:	f7ff bbe7 	b.w	84634 <_malloc_r>
   84e66:	f8de 2004 	ldr.w	r2, [lr, #4]
   84e6a:	f106 0c10 	add.w	ip, r6, #16
   84e6e:	f022 0203 	bic.w	r2, r2, #3
   84e72:	1950      	adds	r0, r2, r5
   84e74:	4560      	cmp	r0, ip
   84e76:	da3d      	bge.n	84ef4 <_realloc_r+0x220>
   84e78:	4670      	mov	r0, lr
   84e7a:	e759      	b.n	84d30 <_realloc_r+0x5c>
   84e7c:	46d0      	mov	r8, sl
   84e7e:	f858 0f08 	ldr.w	r0, [r8, #8]!
   84e82:	f8da 100c 	ldr.w	r1, [sl, #12]
   84e86:	1f2a      	subs	r2, r5, #4
   84e88:	2a24      	cmp	r2, #36	; 0x24
   84e8a:	60c1      	str	r1, [r0, #12]
   84e8c:	6088      	str	r0, [r1, #8]
   84e8e:	f200 80a0 	bhi.w	84fd2 <_realloc_r+0x2fe>
   84e92:	2a13      	cmp	r2, #19
   84e94:	f240 809b 	bls.w	84fce <_realloc_r+0x2fa>
   84e98:	6821      	ldr	r1, [r4, #0]
   84e9a:	2a1b      	cmp	r2, #27
   84e9c:	f8ca 1008 	str.w	r1, [sl, #8]
   84ea0:	6861      	ldr	r1, [r4, #4]
   84ea2:	f8ca 100c 	str.w	r1, [sl, #12]
   84ea6:	f200 80b2 	bhi.w	8500e <_realloc_r+0x33a>
   84eaa:	3408      	adds	r4, #8
   84eac:	f10a 0210 	add.w	r2, sl, #16
   84eb0:	6821      	ldr	r1, [r4, #0]
   84eb2:	461d      	mov	r5, r3
   84eb4:	6011      	str	r1, [r2, #0]
   84eb6:	6861      	ldr	r1, [r4, #4]
   84eb8:	4657      	mov	r7, sl
   84eba:	6051      	str	r1, [r2, #4]
   84ebc:	68a3      	ldr	r3, [r4, #8]
   84ebe:	6093      	str	r3, [r2, #8]
   84ec0:	f8da 3004 	ldr.w	r3, [sl, #4]
   84ec4:	e774      	b.n	84db0 <_realloc_r+0xdc>
   84ec6:	6823      	ldr	r3, [r4, #0]
   84ec8:	2a1b      	cmp	r2, #27
   84eca:	6003      	str	r3, [r0, #0]
   84ecc:	6863      	ldr	r3, [r4, #4]
   84ece:	6043      	str	r3, [r0, #4]
   84ed0:	d862      	bhi.n	84f98 <_realloc_r+0x2c4>
   84ed2:	f100 0308 	add.w	r3, r0, #8
   84ed6:	f104 0208 	add.w	r2, r4, #8
   84eda:	e7b3      	b.n	84e44 <_realloc_r+0x170>
   84edc:	4643      	mov	r3, r8
   84ede:	6822      	ldr	r2, [r4, #0]
   84ee0:	4675      	mov	r5, lr
   84ee2:	601a      	str	r2, [r3, #0]
   84ee4:	6862      	ldr	r2, [r4, #4]
   84ee6:	4657      	mov	r7, sl
   84ee8:	605a      	str	r2, [r3, #4]
   84eea:	68a2      	ldr	r2, [r4, #8]
   84eec:	609a      	str	r2, [r3, #8]
   84eee:	f8da 3004 	ldr.w	r3, [sl, #4]
   84ef2:	e75d      	b.n	84db0 <_realloc_r+0xdc>
   84ef4:	1b83      	subs	r3, r0, r6
   84ef6:	4437      	add	r7, r6
   84ef8:	f043 0301 	orr.w	r3, r3, #1
   84efc:	f8cb 7008 	str.w	r7, [fp, #8]
   84f00:	607b      	str	r3, [r7, #4]
   84f02:	f854 3c04 	ldr.w	r3, [r4, #-4]
   84f06:	4648      	mov	r0, r9
   84f08:	f003 0301 	and.w	r3, r3, #1
   84f0c:	431e      	orrs	r6, r3
   84f0e:	f844 6c04 	str.w	r6, [r4, #-4]
   84f12:	f7ff fedd 	bl	84cd0 <__malloc_unlock>
   84f16:	4620      	mov	r0, r4
   84f18:	e75a      	b.n	84dd0 <_realloc_r+0xfc>
   84f1a:	4621      	mov	r1, r4
   84f1c:	f7ff fe70 	bl	84c00 <memmove>
   84f20:	e796      	b.n	84e50 <_realloc_r+0x17c>
   84f22:	eb02 0c03 	add.w	ip, r2, r3
   84f26:	f106 0210 	add.w	r2, r6, #16
   84f2a:	4594      	cmp	ip, r2
   84f2c:	f6ff af70 	blt.w	84e10 <_realloc_r+0x13c>
   84f30:	4657      	mov	r7, sl
   84f32:	f857 1f08 	ldr.w	r1, [r7, #8]!
   84f36:	f8da 300c 	ldr.w	r3, [sl, #12]
   84f3a:	1f2a      	subs	r2, r5, #4
   84f3c:	2a24      	cmp	r2, #36	; 0x24
   84f3e:	60cb      	str	r3, [r1, #12]
   84f40:	6099      	str	r1, [r3, #8]
   84f42:	f200 8086 	bhi.w	85052 <_realloc_r+0x37e>
   84f46:	2a13      	cmp	r2, #19
   84f48:	d977      	bls.n	8503a <_realloc_r+0x366>
   84f4a:	6823      	ldr	r3, [r4, #0]
   84f4c:	2a1b      	cmp	r2, #27
   84f4e:	f8ca 3008 	str.w	r3, [sl, #8]
   84f52:	6863      	ldr	r3, [r4, #4]
   84f54:	f8ca 300c 	str.w	r3, [sl, #12]
   84f58:	f200 8084 	bhi.w	85064 <_realloc_r+0x390>
   84f5c:	3408      	adds	r4, #8
   84f5e:	f10a 0310 	add.w	r3, sl, #16
   84f62:	6822      	ldr	r2, [r4, #0]
   84f64:	601a      	str	r2, [r3, #0]
   84f66:	6862      	ldr	r2, [r4, #4]
   84f68:	605a      	str	r2, [r3, #4]
   84f6a:	68a2      	ldr	r2, [r4, #8]
   84f6c:	609a      	str	r2, [r3, #8]
   84f6e:	ebc6 020c 	rsb	r2, r6, ip
   84f72:	eb0a 0306 	add.w	r3, sl, r6
   84f76:	f042 0201 	orr.w	r2, r2, #1
   84f7a:	f8cb 3008 	str.w	r3, [fp, #8]
   84f7e:	605a      	str	r2, [r3, #4]
   84f80:	f8da 3004 	ldr.w	r3, [sl, #4]
   84f84:	4648      	mov	r0, r9
   84f86:	f003 0301 	and.w	r3, r3, #1
   84f8a:	431e      	orrs	r6, r3
   84f8c:	f8ca 6004 	str.w	r6, [sl, #4]
   84f90:	f7ff fe9e 	bl	84cd0 <__malloc_unlock>
   84f94:	4638      	mov	r0, r7
   84f96:	e71b      	b.n	84dd0 <_realloc_r+0xfc>
   84f98:	68a3      	ldr	r3, [r4, #8]
   84f9a:	2a24      	cmp	r2, #36	; 0x24
   84f9c:	6083      	str	r3, [r0, #8]
   84f9e:	68e3      	ldr	r3, [r4, #12]
   84fa0:	60c3      	str	r3, [r0, #12]
   84fa2:	d02b      	beq.n	84ffc <_realloc_r+0x328>
   84fa4:	f100 0310 	add.w	r3, r0, #16
   84fa8:	f104 0210 	add.w	r2, r4, #16
   84fac:	e74a      	b.n	84e44 <_realloc_r+0x170>
   84fae:	f850 2c04 	ldr.w	r2, [r0, #-4]
   84fb2:	46a0      	mov	r8, r4
   84fb4:	f022 0203 	bic.w	r2, r2, #3
   84fb8:	4415      	add	r5, r2
   84fba:	e6f9      	b.n	84db0 <_realloc_r+0xdc>
   84fbc:	4621      	mov	r1, r4
   84fbe:	4640      	mov	r0, r8
   84fc0:	4675      	mov	r5, lr
   84fc2:	4657      	mov	r7, sl
   84fc4:	f7ff fe1c 	bl	84c00 <memmove>
   84fc8:	f8da 3004 	ldr.w	r3, [sl, #4]
   84fcc:	e6f0      	b.n	84db0 <_realloc_r+0xdc>
   84fce:	4642      	mov	r2, r8
   84fd0:	e76e      	b.n	84eb0 <_realloc_r+0x1dc>
   84fd2:	4621      	mov	r1, r4
   84fd4:	4640      	mov	r0, r8
   84fd6:	461d      	mov	r5, r3
   84fd8:	4657      	mov	r7, sl
   84fda:	f7ff fe11 	bl	84c00 <memmove>
   84fde:	f8da 3004 	ldr.w	r3, [sl, #4]
   84fe2:	e6e5      	b.n	84db0 <_realloc_r+0xdc>
   84fe4:	68a3      	ldr	r3, [r4, #8]
   84fe6:	2a24      	cmp	r2, #36	; 0x24
   84fe8:	f8ca 3010 	str.w	r3, [sl, #16]
   84fec:	68e3      	ldr	r3, [r4, #12]
   84fee:	f8ca 3014 	str.w	r3, [sl, #20]
   84ff2:	d018      	beq.n	85026 <_realloc_r+0x352>
   84ff4:	3410      	adds	r4, #16
   84ff6:	f10a 0318 	add.w	r3, sl, #24
   84ffa:	e770      	b.n	84ede <_realloc_r+0x20a>
   84ffc:	6922      	ldr	r2, [r4, #16]
   84ffe:	f100 0318 	add.w	r3, r0, #24
   85002:	6102      	str	r2, [r0, #16]
   85004:	6961      	ldr	r1, [r4, #20]
   85006:	f104 0218 	add.w	r2, r4, #24
   8500a:	6141      	str	r1, [r0, #20]
   8500c:	e71a      	b.n	84e44 <_realloc_r+0x170>
   8500e:	68a1      	ldr	r1, [r4, #8]
   85010:	2a24      	cmp	r2, #36	; 0x24
   85012:	f8ca 1010 	str.w	r1, [sl, #16]
   85016:	68e1      	ldr	r1, [r4, #12]
   85018:	f8ca 1014 	str.w	r1, [sl, #20]
   8501c:	d00f      	beq.n	8503e <_realloc_r+0x36a>
   8501e:	3410      	adds	r4, #16
   85020:	f10a 0218 	add.w	r2, sl, #24
   85024:	e744      	b.n	84eb0 <_realloc_r+0x1dc>
   85026:	6922      	ldr	r2, [r4, #16]
   85028:	f10a 0320 	add.w	r3, sl, #32
   8502c:	f8ca 2018 	str.w	r2, [sl, #24]
   85030:	6962      	ldr	r2, [r4, #20]
   85032:	3418      	adds	r4, #24
   85034:	f8ca 201c 	str.w	r2, [sl, #28]
   85038:	e751      	b.n	84ede <_realloc_r+0x20a>
   8503a:	463b      	mov	r3, r7
   8503c:	e791      	b.n	84f62 <_realloc_r+0x28e>
   8503e:	6921      	ldr	r1, [r4, #16]
   85040:	f10a 0220 	add.w	r2, sl, #32
   85044:	f8ca 1018 	str.w	r1, [sl, #24]
   85048:	6961      	ldr	r1, [r4, #20]
   8504a:	3418      	adds	r4, #24
   8504c:	f8ca 101c 	str.w	r1, [sl, #28]
   85050:	e72e      	b.n	84eb0 <_realloc_r+0x1dc>
   85052:	4621      	mov	r1, r4
   85054:	4638      	mov	r0, r7
   85056:	f8cd c004 	str.w	ip, [sp, #4]
   8505a:	f7ff fdd1 	bl	84c00 <memmove>
   8505e:	f8dd c004 	ldr.w	ip, [sp, #4]
   85062:	e784      	b.n	84f6e <_realloc_r+0x29a>
   85064:	68a3      	ldr	r3, [r4, #8]
   85066:	2a24      	cmp	r2, #36	; 0x24
   85068:	f8ca 3010 	str.w	r3, [sl, #16]
   8506c:	68e3      	ldr	r3, [r4, #12]
   8506e:	f8ca 3014 	str.w	r3, [sl, #20]
   85072:	d003      	beq.n	8507c <_realloc_r+0x3a8>
   85074:	3410      	adds	r4, #16
   85076:	f10a 0318 	add.w	r3, sl, #24
   8507a:	e772      	b.n	84f62 <_realloc_r+0x28e>
   8507c:	6922      	ldr	r2, [r4, #16]
   8507e:	f10a 0320 	add.w	r3, sl, #32
   85082:	f8ca 2018 	str.w	r2, [sl, #24]
   85086:	6962      	ldr	r2, [r4, #20]
   85088:	3418      	adds	r4, #24
   8508a:	f8ca 201c 	str.w	r2, [sl, #28]
   8508e:	e768      	b.n	84f62 <_realloc_r+0x28e>
   85090:	200705d8 	.word	0x200705d8

00085094 <_sbrk_r>:
   85094:	b538      	push	{r3, r4, r5, lr}
   85096:	4c07      	ldr	r4, [pc, #28]	; (850b4 <_sbrk_r+0x20>)
   85098:	2300      	movs	r3, #0
   8509a:	4605      	mov	r5, r0
   8509c:	4608      	mov	r0, r1
   8509e:	6023      	str	r3, [r4, #0]
   850a0:	f7fd fa76 	bl	82590 <_sbrk>
   850a4:	1c43      	adds	r3, r0, #1
   850a6:	d000      	beq.n	850aa <_sbrk_r+0x16>
   850a8:	bd38      	pop	{r3, r4, r5, pc}
   850aa:	6823      	ldr	r3, [r4, #0]
   850ac:	2b00      	cmp	r3, #0
   850ae:	d0fb      	beq.n	850a8 <_sbrk_r+0x14>
   850b0:	602b      	str	r3, [r5, #0]
   850b2:	bd38      	pop	{r3, r4, r5, pc}
   850b4:	2007acd0 	.word	0x2007acd0

000850b8 <__sread>:
   850b8:	b510      	push	{r4, lr}
   850ba:	460c      	mov	r4, r1
   850bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   850c0:	f000 f9c2 	bl	85448 <_read_r>
   850c4:	2800      	cmp	r0, #0
   850c6:	db03      	blt.n	850d0 <__sread+0x18>
   850c8:	6d23      	ldr	r3, [r4, #80]	; 0x50
   850ca:	4403      	add	r3, r0
   850cc:	6523      	str	r3, [r4, #80]	; 0x50
   850ce:	bd10      	pop	{r4, pc}
   850d0:	89a3      	ldrh	r3, [r4, #12]
   850d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   850d6:	81a3      	strh	r3, [r4, #12]
   850d8:	bd10      	pop	{r4, pc}
   850da:	bf00      	nop

000850dc <__swrite>:
   850dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   850e0:	460c      	mov	r4, r1
   850e2:	8989      	ldrh	r1, [r1, #12]
   850e4:	461d      	mov	r5, r3
   850e6:	05cb      	lsls	r3, r1, #23
   850e8:	4616      	mov	r6, r2
   850ea:	4607      	mov	r7, r0
   850ec:	d506      	bpl.n	850fc <__swrite+0x20>
   850ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   850f2:	2200      	movs	r2, #0
   850f4:	2302      	movs	r3, #2
   850f6:	f000 f993 	bl	85420 <_lseek_r>
   850fa:	89a1      	ldrh	r1, [r4, #12]
   850fc:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   85100:	81a1      	strh	r1, [r4, #12]
   85102:	4638      	mov	r0, r7
   85104:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   85108:	4632      	mov	r2, r6
   8510a:	462b      	mov	r3, r5
   8510c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   85110:	f000 b89e 	b.w	85250 <_write_r>

00085114 <__sseek>:
   85114:	b510      	push	{r4, lr}
   85116:	460c      	mov	r4, r1
   85118:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8511c:	f000 f980 	bl	85420 <_lseek_r>
   85120:	89a3      	ldrh	r3, [r4, #12]
   85122:	1c42      	adds	r2, r0, #1
   85124:	bf0e      	itee	eq
   85126:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   8512a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   8512e:	6520      	strne	r0, [r4, #80]	; 0x50
   85130:	81a3      	strh	r3, [r4, #12]
   85132:	bd10      	pop	{r4, pc}

00085134 <__sclose>:
   85134:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   85138:	f000 b8f2 	b.w	85320 <_close_r>

0008513c <__swbuf_r>:
   8513c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8513e:	460d      	mov	r5, r1
   85140:	4614      	mov	r4, r2
   85142:	4607      	mov	r7, r0
   85144:	b110      	cbz	r0, 8514c <__swbuf_r+0x10>
   85146:	6b83      	ldr	r3, [r0, #56]	; 0x38
   85148:	2b00      	cmp	r3, #0
   8514a:	d048      	beq.n	851de <__swbuf_r+0xa2>
   8514c:	89a2      	ldrh	r2, [r4, #12]
   8514e:	69a0      	ldr	r0, [r4, #24]
   85150:	b293      	uxth	r3, r2
   85152:	60a0      	str	r0, [r4, #8]
   85154:	0718      	lsls	r0, r3, #28
   85156:	d538      	bpl.n	851ca <__swbuf_r+0x8e>
   85158:	6926      	ldr	r6, [r4, #16]
   8515a:	2e00      	cmp	r6, #0
   8515c:	d035      	beq.n	851ca <__swbuf_r+0x8e>
   8515e:	0499      	lsls	r1, r3, #18
   85160:	b2ed      	uxtb	r5, r5
   85162:	d515      	bpl.n	85190 <__swbuf_r+0x54>
   85164:	6823      	ldr	r3, [r4, #0]
   85166:	6962      	ldr	r2, [r4, #20]
   85168:	1b9e      	subs	r6, r3, r6
   8516a:	4296      	cmp	r6, r2
   8516c:	da1c      	bge.n	851a8 <__swbuf_r+0x6c>
   8516e:	3601      	adds	r6, #1
   85170:	68a2      	ldr	r2, [r4, #8]
   85172:	1c59      	adds	r1, r3, #1
   85174:	3a01      	subs	r2, #1
   85176:	60a2      	str	r2, [r4, #8]
   85178:	6021      	str	r1, [r4, #0]
   8517a:	701d      	strb	r5, [r3, #0]
   8517c:	6963      	ldr	r3, [r4, #20]
   8517e:	42b3      	cmp	r3, r6
   85180:	d01a      	beq.n	851b8 <__swbuf_r+0x7c>
   85182:	89a3      	ldrh	r3, [r4, #12]
   85184:	07db      	lsls	r3, r3, #31
   85186:	d501      	bpl.n	8518c <__swbuf_r+0x50>
   85188:	2d0a      	cmp	r5, #10
   8518a:	d015      	beq.n	851b8 <__swbuf_r+0x7c>
   8518c:	4628      	mov	r0, r5
   8518e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   85190:	6e63      	ldr	r3, [r4, #100]	; 0x64
   85192:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   85196:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   8519a:	6663      	str	r3, [r4, #100]	; 0x64
   8519c:	6823      	ldr	r3, [r4, #0]
   8519e:	81a2      	strh	r2, [r4, #12]
   851a0:	6962      	ldr	r2, [r4, #20]
   851a2:	1b9e      	subs	r6, r3, r6
   851a4:	4296      	cmp	r6, r2
   851a6:	dbe2      	blt.n	8516e <__swbuf_r+0x32>
   851a8:	4638      	mov	r0, r7
   851aa:	4621      	mov	r1, r4
   851ac:	f7fe fde4 	bl	83d78 <_fflush_r>
   851b0:	b940      	cbnz	r0, 851c4 <__swbuf_r+0x88>
   851b2:	6823      	ldr	r3, [r4, #0]
   851b4:	2601      	movs	r6, #1
   851b6:	e7db      	b.n	85170 <__swbuf_r+0x34>
   851b8:	4638      	mov	r0, r7
   851ba:	4621      	mov	r1, r4
   851bc:	f7fe fddc 	bl	83d78 <_fflush_r>
   851c0:	2800      	cmp	r0, #0
   851c2:	d0e3      	beq.n	8518c <__swbuf_r+0x50>
   851c4:	f04f 30ff 	mov.w	r0, #4294967295
   851c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   851ca:	4638      	mov	r0, r7
   851cc:	4621      	mov	r1, r4
   851ce:	f7fe fcbd 	bl	83b4c <__swsetup_r>
   851d2:	2800      	cmp	r0, #0
   851d4:	d1f6      	bne.n	851c4 <__swbuf_r+0x88>
   851d6:	89a2      	ldrh	r2, [r4, #12]
   851d8:	6926      	ldr	r6, [r4, #16]
   851da:	b293      	uxth	r3, r2
   851dc:	e7bf      	b.n	8515e <__swbuf_r+0x22>
   851de:	f7fe fde7 	bl	83db0 <__sinit>
   851e2:	e7b3      	b.n	8514c <__swbuf_r+0x10>

000851e4 <_wcrtomb_r>:
   851e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   851e8:	461e      	mov	r6, r3
   851ea:	b086      	sub	sp, #24
   851ec:	460c      	mov	r4, r1
   851ee:	4605      	mov	r5, r0
   851f0:	4617      	mov	r7, r2
   851f2:	4b0f      	ldr	r3, [pc, #60]	; (85230 <_wcrtomb_r+0x4c>)
   851f4:	b191      	cbz	r1, 8521c <_wcrtomb_r+0x38>
   851f6:	f8d3 8000 	ldr.w	r8, [r3]
   851fa:	f7ff f999 	bl	84530 <__locale_charset>
   851fe:	9600      	str	r6, [sp, #0]
   85200:	4603      	mov	r3, r0
   85202:	4621      	mov	r1, r4
   85204:	463a      	mov	r2, r7
   85206:	4628      	mov	r0, r5
   85208:	47c0      	blx	r8
   8520a:	1c43      	adds	r3, r0, #1
   8520c:	d103      	bne.n	85216 <_wcrtomb_r+0x32>
   8520e:	2200      	movs	r2, #0
   85210:	238a      	movs	r3, #138	; 0x8a
   85212:	6032      	str	r2, [r6, #0]
   85214:	602b      	str	r3, [r5, #0]
   85216:	b006      	add	sp, #24
   85218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8521c:	681f      	ldr	r7, [r3, #0]
   8521e:	f7ff f987 	bl	84530 <__locale_charset>
   85222:	9600      	str	r6, [sp, #0]
   85224:	4603      	mov	r3, r0
   85226:	4622      	mov	r2, r4
   85228:	4628      	mov	r0, r5
   8522a:	a903      	add	r1, sp, #12
   8522c:	47b8      	blx	r7
   8522e:	e7ec      	b.n	8520a <_wcrtomb_r+0x26>
   85230:	200709e8 	.word	0x200709e8

00085234 <__ascii_wctomb>:
   85234:	b121      	cbz	r1, 85240 <__ascii_wctomb+0xc>
   85236:	2aff      	cmp	r2, #255	; 0xff
   85238:	d804      	bhi.n	85244 <__ascii_wctomb+0x10>
   8523a:	700a      	strb	r2, [r1, #0]
   8523c:	2001      	movs	r0, #1
   8523e:	4770      	bx	lr
   85240:	4608      	mov	r0, r1
   85242:	4770      	bx	lr
   85244:	238a      	movs	r3, #138	; 0x8a
   85246:	6003      	str	r3, [r0, #0]
   85248:	f04f 30ff 	mov.w	r0, #4294967295
   8524c:	4770      	bx	lr
   8524e:	bf00      	nop

00085250 <_write_r>:
   85250:	b570      	push	{r4, r5, r6, lr}
   85252:	4c08      	ldr	r4, [pc, #32]	; (85274 <_write_r+0x24>)
   85254:	4606      	mov	r6, r0
   85256:	2500      	movs	r5, #0
   85258:	4608      	mov	r0, r1
   8525a:	4611      	mov	r1, r2
   8525c:	461a      	mov	r2, r3
   8525e:	6025      	str	r5, [r4, #0]
   85260:	f7fc fbdc 	bl	81a1c <_write>
   85264:	1c43      	adds	r3, r0, #1
   85266:	d000      	beq.n	8526a <_write_r+0x1a>
   85268:	bd70      	pop	{r4, r5, r6, pc}
   8526a:	6823      	ldr	r3, [r4, #0]
   8526c:	2b00      	cmp	r3, #0
   8526e:	d0fb      	beq.n	85268 <_write_r+0x18>
   85270:	6033      	str	r3, [r6, #0]
   85272:	bd70      	pop	{r4, r5, r6, pc}
   85274:	2007acd0 	.word	0x2007acd0

00085278 <__register_exitproc>:
   85278:	b5f0      	push	{r4, r5, r6, r7, lr}
   8527a:	4c27      	ldr	r4, [pc, #156]	; (85318 <__register_exitproc+0xa0>)
   8527c:	b085      	sub	sp, #20
   8527e:	6826      	ldr	r6, [r4, #0]
   85280:	4607      	mov	r7, r0
   85282:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   85286:	2c00      	cmp	r4, #0
   85288:	d040      	beq.n	8530c <__register_exitproc+0x94>
   8528a:	6865      	ldr	r5, [r4, #4]
   8528c:	2d1f      	cmp	r5, #31
   8528e:	dd1e      	ble.n	852ce <__register_exitproc+0x56>
   85290:	4822      	ldr	r0, [pc, #136]	; (8531c <__register_exitproc+0xa4>)
   85292:	b918      	cbnz	r0, 8529c <__register_exitproc+0x24>
   85294:	f04f 30ff 	mov.w	r0, #4294967295
   85298:	b005      	add	sp, #20
   8529a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8529c:	f44f 70c8 	mov.w	r0, #400	; 0x190
   852a0:	9103      	str	r1, [sp, #12]
   852a2:	9202      	str	r2, [sp, #8]
   852a4:	9301      	str	r3, [sp, #4]
   852a6:	f7ff f9bd 	bl	84624 <malloc>
   852aa:	9903      	ldr	r1, [sp, #12]
   852ac:	4604      	mov	r4, r0
   852ae:	9a02      	ldr	r2, [sp, #8]
   852b0:	9b01      	ldr	r3, [sp, #4]
   852b2:	2800      	cmp	r0, #0
   852b4:	d0ee      	beq.n	85294 <__register_exitproc+0x1c>
   852b6:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
   852ba:	2000      	movs	r0, #0
   852bc:	6025      	str	r5, [r4, #0]
   852be:	6060      	str	r0, [r4, #4]
   852c0:	4605      	mov	r5, r0
   852c2:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   852c6:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   852ca:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   852ce:	b93f      	cbnz	r7, 852e0 <__register_exitproc+0x68>
   852d0:	1c6b      	adds	r3, r5, #1
   852d2:	2000      	movs	r0, #0
   852d4:	3502      	adds	r5, #2
   852d6:	6063      	str	r3, [r4, #4]
   852d8:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
   852dc:	b005      	add	sp, #20
   852de:	bdf0      	pop	{r4, r5, r6, r7, pc}
   852e0:	2601      	movs	r6, #1
   852e2:	40ae      	lsls	r6, r5
   852e4:	eb04 0085 	add.w	r0, r4, r5, lsl #2
   852e8:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   852ec:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   852f0:	2f02      	cmp	r7, #2
   852f2:	ea42 0206 	orr.w	r2, r2, r6
   852f6:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   852fa:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   852fe:	d1e7      	bne.n	852d0 <__register_exitproc+0x58>
   85300:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   85304:	431e      	orrs	r6, r3
   85306:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
   8530a:	e7e1      	b.n	852d0 <__register_exitproc+0x58>
   8530c:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   85310:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   85314:	e7b9      	b.n	8528a <__register_exitproc+0x12>
   85316:	bf00      	nop
   85318:	00085b64 	.word	0x00085b64
   8531c:	00084625 	.word	0x00084625

00085320 <_close_r>:
   85320:	b538      	push	{r3, r4, r5, lr}
   85322:	4c07      	ldr	r4, [pc, #28]	; (85340 <_close_r+0x20>)
   85324:	2300      	movs	r3, #0
   85326:	4605      	mov	r5, r0
   85328:	4608      	mov	r0, r1
   8532a:	6023      	str	r3, [r4, #0]
   8532c:	f7fd f94a 	bl	825c4 <_close>
   85330:	1c43      	adds	r3, r0, #1
   85332:	d000      	beq.n	85336 <_close_r+0x16>
   85334:	bd38      	pop	{r3, r4, r5, pc}
   85336:	6823      	ldr	r3, [r4, #0]
   85338:	2b00      	cmp	r3, #0
   8533a:	d0fb      	beq.n	85334 <_close_r+0x14>
   8533c:	602b      	str	r3, [r5, #0]
   8533e:	bd38      	pop	{r3, r4, r5, pc}
   85340:	2007acd0 	.word	0x2007acd0

00085344 <_fclose_r>:
   85344:	b570      	push	{r4, r5, r6, lr}
   85346:	460c      	mov	r4, r1
   85348:	4605      	mov	r5, r0
   8534a:	b131      	cbz	r1, 8535a <_fclose_r+0x16>
   8534c:	b110      	cbz	r0, 85354 <_fclose_r+0x10>
   8534e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   85350:	2b00      	cmp	r3, #0
   85352:	d02f      	beq.n	853b4 <_fclose_r+0x70>
   85354:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   85358:	b90b      	cbnz	r3, 8535e <_fclose_r+0x1a>
   8535a:	2000      	movs	r0, #0
   8535c:	bd70      	pop	{r4, r5, r6, pc}
   8535e:	4628      	mov	r0, r5
   85360:	4621      	mov	r1, r4
   85362:	f7fe fd09 	bl	83d78 <_fflush_r>
   85366:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   85368:	4606      	mov	r6, r0
   8536a:	b133      	cbz	r3, 8537a <_fclose_r+0x36>
   8536c:	4628      	mov	r0, r5
   8536e:	69e1      	ldr	r1, [r4, #28]
   85370:	4798      	blx	r3
   85372:	2800      	cmp	r0, #0
   85374:	bfb8      	it	lt
   85376:	f04f 36ff 	movlt.w	r6, #4294967295
   8537a:	89a3      	ldrh	r3, [r4, #12]
   8537c:	061b      	lsls	r3, r3, #24
   8537e:	d41c      	bmi.n	853ba <_fclose_r+0x76>
   85380:	6b21      	ldr	r1, [r4, #48]	; 0x30
   85382:	b141      	cbz	r1, 85396 <_fclose_r+0x52>
   85384:	f104 0340 	add.w	r3, r4, #64	; 0x40
   85388:	4299      	cmp	r1, r3
   8538a:	d002      	beq.n	85392 <_fclose_r+0x4e>
   8538c:	4628      	mov	r0, r5
   8538e:	f7fe fe53 	bl	84038 <_free_r>
   85392:	2300      	movs	r3, #0
   85394:	6323      	str	r3, [r4, #48]	; 0x30
   85396:	6c61      	ldr	r1, [r4, #68]	; 0x44
   85398:	b121      	cbz	r1, 853a4 <_fclose_r+0x60>
   8539a:	4628      	mov	r0, r5
   8539c:	f7fe fe4c 	bl	84038 <_free_r>
   853a0:	2300      	movs	r3, #0
   853a2:	6463      	str	r3, [r4, #68]	; 0x44
   853a4:	f7fe fd7e 	bl	83ea4 <__sfp_lock_acquire>
   853a8:	2300      	movs	r3, #0
   853aa:	81a3      	strh	r3, [r4, #12]
   853ac:	f7fe fd7c 	bl	83ea8 <__sfp_lock_release>
   853b0:	4630      	mov	r0, r6
   853b2:	bd70      	pop	{r4, r5, r6, pc}
   853b4:	f7fe fcfc 	bl	83db0 <__sinit>
   853b8:	e7cc      	b.n	85354 <_fclose_r+0x10>
   853ba:	4628      	mov	r0, r5
   853bc:	6921      	ldr	r1, [r4, #16]
   853be:	f7fe fe3b 	bl	84038 <_free_r>
   853c2:	e7dd      	b.n	85380 <_fclose_r+0x3c>

000853c4 <fclose>:
   853c4:	4b02      	ldr	r3, [pc, #8]	; (853d0 <fclose+0xc>)
   853c6:	4601      	mov	r1, r0
   853c8:	6818      	ldr	r0, [r3, #0]
   853ca:	f7ff bfbb 	b.w	85344 <_fclose_r>
   853ce:	bf00      	nop
   853d0:	200705b0 	.word	0x200705b0

000853d4 <_fstat_r>:
   853d4:	b538      	push	{r3, r4, r5, lr}
   853d6:	4c08      	ldr	r4, [pc, #32]	; (853f8 <_fstat_r+0x24>)
   853d8:	2300      	movs	r3, #0
   853da:	4605      	mov	r5, r0
   853dc:	4608      	mov	r0, r1
   853de:	4611      	mov	r1, r2
   853e0:	6023      	str	r3, [r4, #0]
   853e2:	f7fd f8f3 	bl	825cc <_fstat>
   853e6:	1c43      	adds	r3, r0, #1
   853e8:	d000      	beq.n	853ec <_fstat_r+0x18>
   853ea:	bd38      	pop	{r3, r4, r5, pc}
   853ec:	6823      	ldr	r3, [r4, #0]
   853ee:	2b00      	cmp	r3, #0
   853f0:	d0fb      	beq.n	853ea <_fstat_r+0x16>
   853f2:	602b      	str	r3, [r5, #0]
   853f4:	bd38      	pop	{r3, r4, r5, pc}
   853f6:	bf00      	nop
   853f8:	2007acd0 	.word	0x2007acd0

000853fc <_isatty_r>:
   853fc:	b538      	push	{r3, r4, r5, lr}
   853fe:	4c07      	ldr	r4, [pc, #28]	; (8541c <_isatty_r+0x20>)
   85400:	2300      	movs	r3, #0
   85402:	4605      	mov	r5, r0
   85404:	4608      	mov	r0, r1
   85406:	6023      	str	r3, [r4, #0]
   85408:	f7fd f8e6 	bl	825d8 <_isatty>
   8540c:	1c43      	adds	r3, r0, #1
   8540e:	d000      	beq.n	85412 <_isatty_r+0x16>
   85410:	bd38      	pop	{r3, r4, r5, pc}
   85412:	6823      	ldr	r3, [r4, #0]
   85414:	2b00      	cmp	r3, #0
   85416:	d0fb      	beq.n	85410 <_isatty_r+0x14>
   85418:	602b      	str	r3, [r5, #0]
   8541a:	bd38      	pop	{r3, r4, r5, pc}
   8541c:	2007acd0 	.word	0x2007acd0

00085420 <_lseek_r>:
   85420:	b570      	push	{r4, r5, r6, lr}
   85422:	4c08      	ldr	r4, [pc, #32]	; (85444 <_lseek_r+0x24>)
   85424:	4606      	mov	r6, r0
   85426:	2500      	movs	r5, #0
   85428:	4608      	mov	r0, r1
   8542a:	4611      	mov	r1, r2
   8542c:	461a      	mov	r2, r3
   8542e:	6025      	str	r5, [r4, #0]
   85430:	f7fd f8d4 	bl	825dc <_lseek>
   85434:	1c43      	adds	r3, r0, #1
   85436:	d000      	beq.n	8543a <_lseek_r+0x1a>
   85438:	bd70      	pop	{r4, r5, r6, pc}
   8543a:	6823      	ldr	r3, [r4, #0]
   8543c:	2b00      	cmp	r3, #0
   8543e:	d0fb      	beq.n	85438 <_lseek_r+0x18>
   85440:	6033      	str	r3, [r6, #0]
   85442:	bd70      	pop	{r4, r5, r6, pc}
   85444:	2007acd0 	.word	0x2007acd0

00085448 <_read_r>:
   85448:	b570      	push	{r4, r5, r6, lr}
   8544a:	4c08      	ldr	r4, [pc, #32]	; (8546c <_read_r+0x24>)
   8544c:	4606      	mov	r6, r0
   8544e:	2500      	movs	r5, #0
   85450:	4608      	mov	r0, r1
   85452:	4611      	mov	r1, r2
   85454:	461a      	mov	r2, r3
   85456:	6025      	str	r5, [r4, #0]
   85458:	f7fa fe76 	bl	80148 <_read>
   8545c:	1c43      	adds	r3, r0, #1
   8545e:	d000      	beq.n	85462 <_read_r+0x1a>
   85460:	bd70      	pop	{r4, r5, r6, pc}
   85462:	6823      	ldr	r3, [r4, #0]
   85464:	2b00      	cmp	r3, #0
   85466:	d0fb      	beq.n	85460 <_read_r+0x18>
   85468:	6033      	str	r3, [r6, #0]
   8546a:	bd70      	pop	{r4, r5, r6, pc}
   8546c:	2007acd0 	.word	0x2007acd0

00085470 <__aeabi_uldivmod>:
   85470:	b94b      	cbnz	r3, 85486 <__aeabi_uldivmod+0x16>
   85472:	b942      	cbnz	r2, 85486 <__aeabi_uldivmod+0x16>
   85474:	2900      	cmp	r1, #0
   85476:	bf08      	it	eq
   85478:	2800      	cmpeq	r0, #0
   8547a:	d002      	beq.n	85482 <__aeabi_uldivmod+0x12>
   8547c:	f04f 31ff 	mov.w	r1, #4294967295
   85480:	4608      	mov	r0, r1
   85482:	f000 b83b 	b.w	854fc <__aeabi_idiv0>
   85486:	b082      	sub	sp, #8
   85488:	46ec      	mov	ip, sp
   8548a:	e92d 5000 	stmdb	sp!, {ip, lr}
   8548e:	f000 f81d 	bl	854cc <__gnu_uldivmod_helper>
   85492:	f8dd e004 	ldr.w	lr, [sp, #4]
   85496:	b002      	add	sp, #8
   85498:	bc0c      	pop	{r2, r3}
   8549a:	4770      	bx	lr

0008549c <__gnu_ldivmod_helper>:
   8549c:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   854a0:	9e08      	ldr	r6, [sp, #32]
   854a2:	4614      	mov	r4, r2
   854a4:	461d      	mov	r5, r3
   854a6:	4680      	mov	r8, r0
   854a8:	4689      	mov	r9, r1
   854aa:	f000 f829 	bl	85500 <__divdi3>
   854ae:	fb04 f301 	mul.w	r3, r4, r1
   854b2:	fba4 ab00 	umull	sl, fp, r4, r0
   854b6:	fb00 3205 	mla	r2, r0, r5, r3
   854ba:	4493      	add	fp, r2
   854bc:	ebb8 080a 	subs.w	r8, r8, sl
   854c0:	eb69 090b 	sbc.w	r9, r9, fp
   854c4:	e9c6 8900 	strd	r8, r9, [r6]
   854c8:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

000854cc <__gnu_uldivmod_helper>:
   854cc:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   854d0:	9e08      	ldr	r6, [sp, #32]
   854d2:	4614      	mov	r4, r2
   854d4:	461d      	mov	r5, r3
   854d6:	4680      	mov	r8, r0
   854d8:	4689      	mov	r9, r1
   854da:	f000 f961 	bl	857a0 <__udivdi3>
   854de:	fb00 f505 	mul.w	r5, r0, r5
   854e2:	fba0 ab04 	umull	sl, fp, r0, r4
   854e6:	fb04 5401 	mla	r4, r4, r1, r5
   854ea:	44a3      	add	fp, r4
   854ec:	ebb8 080a 	subs.w	r8, r8, sl
   854f0:	eb69 090b 	sbc.w	r9, r9, fp
   854f4:	e9c6 8900 	strd	r8, r9, [r6]
   854f8:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

000854fc <__aeabi_idiv0>:
   854fc:	4770      	bx	lr
   854fe:	bf00      	nop

00085500 <__divdi3>:
   85500:	2900      	cmp	r1, #0
   85502:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   85506:	f2c0 80a1 	blt.w	8564c <__divdi3+0x14c>
   8550a:	2400      	movs	r4, #0
   8550c:	2b00      	cmp	r3, #0
   8550e:	f2c0 8098 	blt.w	85642 <__divdi3+0x142>
   85512:	4615      	mov	r5, r2
   85514:	4606      	mov	r6, r0
   85516:	460f      	mov	r7, r1
   85518:	2b00      	cmp	r3, #0
   8551a:	d13f      	bne.n	8559c <__divdi3+0x9c>
   8551c:	428a      	cmp	r2, r1
   8551e:	d958      	bls.n	855d2 <__divdi3+0xd2>
   85520:	fab2 f382 	clz	r3, r2
   85524:	b14b      	cbz	r3, 8553a <__divdi3+0x3a>
   85526:	f1c3 0220 	rsb	r2, r3, #32
   8552a:	fa01 f703 	lsl.w	r7, r1, r3
   8552e:	fa20 f202 	lsr.w	r2, r0, r2
   85532:	409d      	lsls	r5, r3
   85534:	fa00 f603 	lsl.w	r6, r0, r3
   85538:	4317      	orrs	r7, r2
   8553a:	0c29      	lsrs	r1, r5, #16
   8553c:	fbb7 f2f1 	udiv	r2, r7, r1
   85540:	fb01 7712 	mls	r7, r1, r2, r7
   85544:	b2a8      	uxth	r0, r5
   85546:	fb00 f302 	mul.w	r3, r0, r2
   8554a:	ea4f 4c16 	mov.w	ip, r6, lsr #16
   8554e:	ea4c 4707 	orr.w	r7, ip, r7, lsl #16
   85552:	42bb      	cmp	r3, r7
   85554:	d909      	bls.n	8556a <__divdi3+0x6a>
   85556:	197f      	adds	r7, r7, r5
   85558:	f102 3cff 	add.w	ip, r2, #4294967295
   8555c:	f080 8105 	bcs.w	8576a <__divdi3+0x26a>
   85560:	42bb      	cmp	r3, r7
   85562:	f240 8102 	bls.w	8576a <__divdi3+0x26a>
   85566:	3a02      	subs	r2, #2
   85568:	442f      	add	r7, r5
   8556a:	1aff      	subs	r7, r7, r3
   8556c:	fbb7 f3f1 	udiv	r3, r7, r1
   85570:	fb01 7113 	mls	r1, r1, r3, r7
   85574:	fb00 f003 	mul.w	r0, r0, r3
   85578:	b2b6      	uxth	r6, r6
   8557a:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
   8557e:	4288      	cmp	r0, r1
   85580:	d908      	bls.n	85594 <__divdi3+0x94>
   85582:	1949      	adds	r1, r1, r5
   85584:	f103 37ff 	add.w	r7, r3, #4294967295
   85588:	f080 80f1 	bcs.w	8576e <__divdi3+0x26e>
   8558c:	4288      	cmp	r0, r1
   8558e:	f240 80ee 	bls.w	8576e <__divdi3+0x26e>
   85592:	3b02      	subs	r3, #2
   85594:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   85598:	2300      	movs	r3, #0
   8559a:	e003      	b.n	855a4 <__divdi3+0xa4>
   8559c:	428b      	cmp	r3, r1
   8559e:	d90a      	bls.n	855b6 <__divdi3+0xb6>
   855a0:	2300      	movs	r3, #0
   855a2:	461a      	mov	r2, r3
   855a4:	4610      	mov	r0, r2
   855a6:	4619      	mov	r1, r3
   855a8:	b114      	cbz	r4, 855b0 <__divdi3+0xb0>
   855aa:	4240      	negs	r0, r0
   855ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   855b0:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   855b4:	4770      	bx	lr
   855b6:	fab3 f883 	clz	r8, r3
   855ba:	f1b8 0f00 	cmp.w	r8, #0
   855be:	f040 8088 	bne.w	856d2 <__divdi3+0x1d2>
   855c2:	428b      	cmp	r3, r1
   855c4:	d302      	bcc.n	855cc <__divdi3+0xcc>
   855c6:	4282      	cmp	r2, r0
   855c8:	f200 80e2 	bhi.w	85790 <__divdi3+0x290>
   855cc:	2300      	movs	r3, #0
   855ce:	2201      	movs	r2, #1
   855d0:	e7e8      	b.n	855a4 <__divdi3+0xa4>
   855d2:	b912      	cbnz	r2, 855da <__divdi3+0xda>
   855d4:	2301      	movs	r3, #1
   855d6:	fbb3 f5f2 	udiv	r5, r3, r2
   855da:	fab5 f285 	clz	r2, r5
   855de:	2a00      	cmp	r2, #0
   855e0:	d13a      	bne.n	85658 <__divdi3+0x158>
   855e2:	1b7f      	subs	r7, r7, r5
   855e4:	0c28      	lsrs	r0, r5, #16
   855e6:	fa1f fc85 	uxth.w	ip, r5
   855ea:	2301      	movs	r3, #1
   855ec:	fbb7 f1f0 	udiv	r1, r7, r0
   855f0:	fb00 7711 	mls	r7, r0, r1, r7
   855f4:	fb0c f201 	mul.w	r2, ip, r1
   855f8:	ea4f 4816 	mov.w	r8, r6, lsr #16
   855fc:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
   85600:	42ba      	cmp	r2, r7
   85602:	d907      	bls.n	85614 <__divdi3+0x114>
   85604:	197f      	adds	r7, r7, r5
   85606:	f101 38ff 	add.w	r8, r1, #4294967295
   8560a:	d202      	bcs.n	85612 <__divdi3+0x112>
   8560c:	42ba      	cmp	r2, r7
   8560e:	f200 80c4 	bhi.w	8579a <__divdi3+0x29a>
   85612:	4641      	mov	r1, r8
   85614:	1abf      	subs	r7, r7, r2
   85616:	fbb7 f2f0 	udiv	r2, r7, r0
   8561a:	fb00 7012 	mls	r0, r0, r2, r7
   8561e:	fb0c fc02 	mul.w	ip, ip, r2
   85622:	b2b6      	uxth	r6, r6
   85624:	ea46 4000 	orr.w	r0, r6, r0, lsl #16
   85628:	4584      	cmp	ip, r0
   8562a:	d907      	bls.n	8563c <__divdi3+0x13c>
   8562c:	1940      	adds	r0, r0, r5
   8562e:	f102 37ff 	add.w	r7, r2, #4294967295
   85632:	d202      	bcs.n	8563a <__divdi3+0x13a>
   85634:	4584      	cmp	ip, r0
   85636:	f200 80ae 	bhi.w	85796 <__divdi3+0x296>
   8563a:	463a      	mov	r2, r7
   8563c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   85640:	e7b0      	b.n	855a4 <__divdi3+0xa4>
   85642:	43e4      	mvns	r4, r4
   85644:	4252      	negs	r2, r2
   85646:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   8564a:	e762      	b.n	85512 <__divdi3+0x12>
   8564c:	4240      	negs	r0, r0
   8564e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   85652:	f04f 34ff 	mov.w	r4, #4294967295
   85656:	e759      	b.n	8550c <__divdi3+0xc>
   85658:	4095      	lsls	r5, r2
   8565a:	f1c2 0920 	rsb	r9, r2, #32
   8565e:	fa27 f109 	lsr.w	r1, r7, r9
   85662:	fa26 f909 	lsr.w	r9, r6, r9
   85666:	4097      	lsls	r7, r2
   85668:	0c28      	lsrs	r0, r5, #16
   8566a:	fbb1 f8f0 	udiv	r8, r1, r0
   8566e:	fb00 1118 	mls	r1, r0, r8, r1
   85672:	fa1f fc85 	uxth.w	ip, r5
   85676:	fb0c f308 	mul.w	r3, ip, r8
   8567a:	ea49 0907 	orr.w	r9, r9, r7
   8567e:	ea4f 4719 	mov.w	r7, r9, lsr #16
   85682:	ea47 4101 	orr.w	r1, r7, r1, lsl #16
   85686:	428b      	cmp	r3, r1
   85688:	fa06 f602 	lsl.w	r6, r6, r2
   8568c:	d908      	bls.n	856a0 <__divdi3+0x1a0>
   8568e:	1949      	adds	r1, r1, r5
   85690:	f108 32ff 	add.w	r2, r8, #4294967295
   85694:	d27a      	bcs.n	8578c <__divdi3+0x28c>
   85696:	428b      	cmp	r3, r1
   85698:	d978      	bls.n	8578c <__divdi3+0x28c>
   8569a:	f1a8 0802 	sub.w	r8, r8, #2
   8569e:	4429      	add	r1, r5
   856a0:	1ac9      	subs	r1, r1, r3
   856a2:	fbb1 f3f0 	udiv	r3, r1, r0
   856a6:	fb00 1713 	mls	r7, r0, r3, r1
   856aa:	fb0c f203 	mul.w	r2, ip, r3
   856ae:	fa1f f989 	uxth.w	r9, r9
   856b2:	ea49 4707 	orr.w	r7, r9, r7, lsl #16
   856b6:	42ba      	cmp	r2, r7
   856b8:	d907      	bls.n	856ca <__divdi3+0x1ca>
   856ba:	197f      	adds	r7, r7, r5
   856bc:	f103 31ff 	add.w	r1, r3, #4294967295
   856c0:	d260      	bcs.n	85784 <__divdi3+0x284>
   856c2:	42ba      	cmp	r2, r7
   856c4:	d95e      	bls.n	85784 <__divdi3+0x284>
   856c6:	3b02      	subs	r3, #2
   856c8:	442f      	add	r7, r5
   856ca:	1abf      	subs	r7, r7, r2
   856cc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   856d0:	e78c      	b.n	855ec <__divdi3+0xec>
   856d2:	f1c8 0220 	rsb	r2, r8, #32
   856d6:	fa25 f102 	lsr.w	r1, r5, r2
   856da:	fa03 fc08 	lsl.w	ip, r3, r8
   856de:	fa27 f302 	lsr.w	r3, r7, r2
   856e2:	fa20 f202 	lsr.w	r2, r0, r2
   856e6:	fa07 f708 	lsl.w	r7, r7, r8
   856ea:	ea41 0c0c 	orr.w	ip, r1, ip
   856ee:	ea4f 491c 	mov.w	r9, ip, lsr #16
   856f2:	fbb3 f1f9 	udiv	r1, r3, r9
   856f6:	fb09 3311 	mls	r3, r9, r1, r3
   856fa:	fa1f fa8c 	uxth.w	sl, ip
   856fe:	fb0a fb01 	mul.w	fp, sl, r1
   85702:	4317      	orrs	r7, r2
   85704:	0c3a      	lsrs	r2, r7, #16
   85706:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   8570a:	459b      	cmp	fp, r3
   8570c:	fa05 f008 	lsl.w	r0, r5, r8
   85710:	d908      	bls.n	85724 <__divdi3+0x224>
   85712:	eb13 030c 	adds.w	r3, r3, ip
   85716:	f101 32ff 	add.w	r2, r1, #4294967295
   8571a:	d235      	bcs.n	85788 <__divdi3+0x288>
   8571c:	459b      	cmp	fp, r3
   8571e:	d933      	bls.n	85788 <__divdi3+0x288>
   85720:	3902      	subs	r1, #2
   85722:	4463      	add	r3, ip
   85724:	ebcb 0303 	rsb	r3, fp, r3
   85728:	fbb3 f2f9 	udiv	r2, r3, r9
   8572c:	fb09 3312 	mls	r3, r9, r2, r3
   85730:	fb0a fa02 	mul.w	sl, sl, r2
   85734:	b2bf      	uxth	r7, r7
   85736:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
   8573a:	45ba      	cmp	sl, r7
   8573c:	d908      	bls.n	85750 <__divdi3+0x250>
   8573e:	eb17 070c 	adds.w	r7, r7, ip
   85742:	f102 33ff 	add.w	r3, r2, #4294967295
   85746:	d21b      	bcs.n	85780 <__divdi3+0x280>
   85748:	45ba      	cmp	sl, r7
   8574a:	d919      	bls.n	85780 <__divdi3+0x280>
   8574c:	3a02      	subs	r2, #2
   8574e:	4467      	add	r7, ip
   85750:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
   85754:	fba5 0100 	umull	r0, r1, r5, r0
   85758:	ebca 0707 	rsb	r7, sl, r7
   8575c:	428f      	cmp	r7, r1
   8575e:	f04f 0300 	mov.w	r3, #0
   85762:	d30a      	bcc.n	8577a <__divdi3+0x27a>
   85764:	d005      	beq.n	85772 <__divdi3+0x272>
   85766:	462a      	mov	r2, r5
   85768:	e71c      	b.n	855a4 <__divdi3+0xa4>
   8576a:	4662      	mov	r2, ip
   8576c:	e6fd      	b.n	8556a <__divdi3+0x6a>
   8576e:	463b      	mov	r3, r7
   85770:	e710      	b.n	85594 <__divdi3+0x94>
   85772:	fa06 f608 	lsl.w	r6, r6, r8
   85776:	4286      	cmp	r6, r0
   85778:	d2f5      	bcs.n	85766 <__divdi3+0x266>
   8577a:	1e6a      	subs	r2, r5, #1
   8577c:	2300      	movs	r3, #0
   8577e:	e711      	b.n	855a4 <__divdi3+0xa4>
   85780:	461a      	mov	r2, r3
   85782:	e7e5      	b.n	85750 <__divdi3+0x250>
   85784:	460b      	mov	r3, r1
   85786:	e7a0      	b.n	856ca <__divdi3+0x1ca>
   85788:	4611      	mov	r1, r2
   8578a:	e7cb      	b.n	85724 <__divdi3+0x224>
   8578c:	4690      	mov	r8, r2
   8578e:	e787      	b.n	856a0 <__divdi3+0x1a0>
   85790:	4643      	mov	r3, r8
   85792:	4642      	mov	r2, r8
   85794:	e706      	b.n	855a4 <__divdi3+0xa4>
   85796:	3a02      	subs	r2, #2
   85798:	e750      	b.n	8563c <__divdi3+0x13c>
   8579a:	3902      	subs	r1, #2
   8579c:	442f      	add	r7, r5
   8579e:	e739      	b.n	85614 <__divdi3+0x114>

000857a0 <__udivdi3>:
   857a0:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   857a4:	4614      	mov	r4, r2
   857a6:	4605      	mov	r5, r0
   857a8:	460e      	mov	r6, r1
   857aa:	2b00      	cmp	r3, #0
   857ac:	d143      	bne.n	85836 <__udivdi3+0x96>
   857ae:	428a      	cmp	r2, r1
   857b0:	d953      	bls.n	8585a <__udivdi3+0xba>
   857b2:	fab2 f782 	clz	r7, r2
   857b6:	b157      	cbz	r7, 857ce <__udivdi3+0x2e>
   857b8:	f1c7 0620 	rsb	r6, r7, #32
   857bc:	fa20 f606 	lsr.w	r6, r0, r6
   857c0:	fa01 f307 	lsl.w	r3, r1, r7
   857c4:	fa02 f407 	lsl.w	r4, r2, r7
   857c8:	fa00 f507 	lsl.w	r5, r0, r7
   857cc:	431e      	orrs	r6, r3
   857ce:	0c21      	lsrs	r1, r4, #16
   857d0:	fbb6 f2f1 	udiv	r2, r6, r1
   857d4:	fb01 6612 	mls	r6, r1, r2, r6
   857d8:	b2a0      	uxth	r0, r4
   857da:	fb00 f302 	mul.w	r3, r0, r2
   857de:	0c2f      	lsrs	r7, r5, #16
   857e0:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   857e4:	42b3      	cmp	r3, r6
   857e6:	d909      	bls.n	857fc <__udivdi3+0x5c>
   857e8:	1936      	adds	r6, r6, r4
   857ea:	f102 37ff 	add.w	r7, r2, #4294967295
   857ee:	f080 80fd 	bcs.w	859ec <__udivdi3+0x24c>
   857f2:	42b3      	cmp	r3, r6
   857f4:	f240 80fa 	bls.w	859ec <__udivdi3+0x24c>
   857f8:	3a02      	subs	r2, #2
   857fa:	4426      	add	r6, r4
   857fc:	1af6      	subs	r6, r6, r3
   857fe:	fbb6 f3f1 	udiv	r3, r6, r1
   85802:	fb01 6113 	mls	r1, r1, r3, r6
   85806:	fb00 f003 	mul.w	r0, r0, r3
   8580a:	b2ad      	uxth	r5, r5
   8580c:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
   85810:	4288      	cmp	r0, r1
   85812:	d908      	bls.n	85826 <__udivdi3+0x86>
   85814:	1909      	adds	r1, r1, r4
   85816:	f103 36ff 	add.w	r6, r3, #4294967295
   8581a:	f080 80e9 	bcs.w	859f0 <__udivdi3+0x250>
   8581e:	4288      	cmp	r0, r1
   85820:	f240 80e6 	bls.w	859f0 <__udivdi3+0x250>
   85824:	3b02      	subs	r3, #2
   85826:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   8582a:	2300      	movs	r3, #0
   8582c:	4610      	mov	r0, r2
   8582e:	4619      	mov	r1, r3
   85830:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   85834:	4770      	bx	lr
   85836:	428b      	cmp	r3, r1
   85838:	d84c      	bhi.n	858d4 <__udivdi3+0x134>
   8583a:	fab3 f683 	clz	r6, r3
   8583e:	2e00      	cmp	r6, #0
   85840:	d14f      	bne.n	858e2 <__udivdi3+0x142>
   85842:	428b      	cmp	r3, r1
   85844:	d302      	bcc.n	8584c <__udivdi3+0xac>
   85846:	4282      	cmp	r2, r0
   85848:	f200 80dd 	bhi.w	85a06 <__udivdi3+0x266>
   8584c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   85850:	2300      	movs	r3, #0
   85852:	2201      	movs	r2, #1
   85854:	4610      	mov	r0, r2
   85856:	4619      	mov	r1, r3
   85858:	4770      	bx	lr
   8585a:	b912      	cbnz	r2, 85862 <__udivdi3+0xc2>
   8585c:	2401      	movs	r4, #1
   8585e:	fbb4 f4f2 	udiv	r4, r4, r2
   85862:	fab4 f284 	clz	r2, r4
   85866:	2a00      	cmp	r2, #0
   85868:	f040 8082 	bne.w	85970 <__udivdi3+0x1d0>
   8586c:	1b09      	subs	r1, r1, r4
   8586e:	0c26      	lsrs	r6, r4, #16
   85870:	b2a7      	uxth	r7, r4
   85872:	2301      	movs	r3, #1
   85874:	fbb1 f0f6 	udiv	r0, r1, r6
   85878:	fb06 1110 	mls	r1, r6, r0, r1
   8587c:	fb07 f200 	mul.w	r2, r7, r0
   85880:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   85884:	ea4c 4101 	orr.w	r1, ip, r1, lsl #16
   85888:	428a      	cmp	r2, r1
   8588a:	d907      	bls.n	8589c <__udivdi3+0xfc>
   8588c:	1909      	adds	r1, r1, r4
   8588e:	f100 3cff 	add.w	ip, r0, #4294967295
   85892:	d202      	bcs.n	8589a <__udivdi3+0xfa>
   85894:	428a      	cmp	r2, r1
   85896:	f200 80c8 	bhi.w	85a2a <__udivdi3+0x28a>
   8589a:	4660      	mov	r0, ip
   8589c:	1a89      	subs	r1, r1, r2
   8589e:	fbb1 f2f6 	udiv	r2, r1, r6
   858a2:	fb06 1112 	mls	r1, r6, r2, r1
   858a6:	fb07 f702 	mul.w	r7, r7, r2
   858aa:	b2ad      	uxth	r5, r5
   858ac:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
   858b0:	42af      	cmp	r7, r5
   858b2:	d908      	bls.n	858c6 <__udivdi3+0x126>
   858b4:	192c      	adds	r4, r5, r4
   858b6:	f102 31ff 	add.w	r1, r2, #4294967295
   858ba:	f080 809b 	bcs.w	859f4 <__udivdi3+0x254>
   858be:	42a7      	cmp	r7, r4
   858c0:	f240 8098 	bls.w	859f4 <__udivdi3+0x254>
   858c4:	3a02      	subs	r2, #2
   858c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
   858ca:	4610      	mov	r0, r2
   858cc:	4619      	mov	r1, r3
   858ce:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   858d2:	4770      	bx	lr
   858d4:	2300      	movs	r3, #0
   858d6:	461a      	mov	r2, r3
   858d8:	4610      	mov	r0, r2
   858da:	4619      	mov	r1, r3
   858dc:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   858e0:	4770      	bx	lr
   858e2:	f1c6 0520 	rsb	r5, r6, #32
   858e6:	fa22 f705 	lsr.w	r7, r2, r5
   858ea:	fa03 f406 	lsl.w	r4, r3, r6
   858ee:	fa21 f305 	lsr.w	r3, r1, r5
   858f2:	fa01 fb06 	lsl.w	fp, r1, r6
   858f6:	fa20 f505 	lsr.w	r5, r0, r5
   858fa:	433c      	orrs	r4, r7
   858fc:	ea4f 4814 	mov.w	r8, r4, lsr #16
   85900:	fbb3 fcf8 	udiv	ip, r3, r8
   85904:	fb08 331c 	mls	r3, r8, ip, r3
   85908:	fa1f f984 	uxth.w	r9, r4
   8590c:	fb09 fa0c 	mul.w	sl, r9, ip
   85910:	ea45 0b0b 	orr.w	fp, r5, fp
   85914:	ea4f 451b 	mov.w	r5, fp, lsr #16
   85918:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
   8591c:	459a      	cmp	sl, r3
   8591e:	fa02 f206 	lsl.w	r2, r2, r6
   85922:	d904      	bls.n	8592e <__udivdi3+0x18e>
   85924:	191b      	adds	r3, r3, r4
   85926:	f10c 35ff 	add.w	r5, ip, #4294967295
   8592a:	d36f      	bcc.n	85a0c <__udivdi3+0x26c>
   8592c:	46ac      	mov	ip, r5
   8592e:	ebca 0303 	rsb	r3, sl, r3
   85932:	fbb3 f5f8 	udiv	r5, r3, r8
   85936:	fb08 3315 	mls	r3, r8, r5, r3
   8593a:	fb09 f905 	mul.w	r9, r9, r5
   8593e:	fa1f fb8b 	uxth.w	fp, fp
   85942:	ea4b 4703 	orr.w	r7, fp, r3, lsl #16
   85946:	45b9      	cmp	r9, r7
   85948:	d904      	bls.n	85954 <__udivdi3+0x1b4>
   8594a:	193f      	adds	r7, r7, r4
   8594c:	f105 33ff 	add.w	r3, r5, #4294967295
   85950:	d362      	bcc.n	85a18 <__udivdi3+0x278>
   85952:	461d      	mov	r5, r3
   85954:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
   85958:	fbac 2302 	umull	r2, r3, ip, r2
   8595c:	ebc9 0707 	rsb	r7, r9, r7
   85960:	429f      	cmp	r7, r3
   85962:	f04f 0500 	mov.w	r5, #0
   85966:	d34a      	bcc.n	859fe <__udivdi3+0x25e>
   85968:	d046      	beq.n	859f8 <__udivdi3+0x258>
   8596a:	4662      	mov	r2, ip
   8596c:	462b      	mov	r3, r5
   8596e:	e75d      	b.n	8582c <__udivdi3+0x8c>
   85970:	4094      	lsls	r4, r2
   85972:	f1c2 0920 	rsb	r9, r2, #32
   85976:	fa21 fc09 	lsr.w	ip, r1, r9
   8597a:	4091      	lsls	r1, r2
   8597c:	fa20 f909 	lsr.w	r9, r0, r9
   85980:	0c26      	lsrs	r6, r4, #16
   85982:	fbbc f8f6 	udiv	r8, ip, r6
   85986:	fb06 cc18 	mls	ip, r6, r8, ip
   8598a:	b2a7      	uxth	r7, r4
   8598c:	fb07 f308 	mul.w	r3, r7, r8
   85990:	ea49 0901 	orr.w	r9, r9, r1
   85994:	ea4f 4119 	mov.w	r1, r9, lsr #16
   85998:	ea41 4c0c 	orr.w	ip, r1, ip, lsl #16
   8599c:	4563      	cmp	r3, ip
   8599e:	fa00 f502 	lsl.w	r5, r0, r2
   859a2:	d909      	bls.n	859b8 <__udivdi3+0x218>
   859a4:	eb1c 0c04 	adds.w	ip, ip, r4
   859a8:	f108 32ff 	add.w	r2, r8, #4294967295
   859ac:	d23b      	bcs.n	85a26 <__udivdi3+0x286>
   859ae:	4563      	cmp	r3, ip
   859b0:	d939      	bls.n	85a26 <__udivdi3+0x286>
   859b2:	f1a8 0802 	sub.w	r8, r8, #2
   859b6:	44a4      	add	ip, r4
   859b8:	ebc3 0c0c 	rsb	ip, r3, ip
   859bc:	fbbc f3f6 	udiv	r3, ip, r6
   859c0:	fb06 c113 	mls	r1, r6, r3, ip
   859c4:	fb07 f203 	mul.w	r2, r7, r3
   859c8:	fa1f f989 	uxth.w	r9, r9
   859cc:	ea49 4101 	orr.w	r1, r9, r1, lsl #16
   859d0:	428a      	cmp	r2, r1
   859d2:	d907      	bls.n	859e4 <__udivdi3+0x244>
   859d4:	1909      	adds	r1, r1, r4
   859d6:	f103 30ff 	add.w	r0, r3, #4294967295
   859da:	d222      	bcs.n	85a22 <__udivdi3+0x282>
   859dc:	428a      	cmp	r2, r1
   859de:	d920      	bls.n	85a22 <__udivdi3+0x282>
   859e0:	3b02      	subs	r3, #2
   859e2:	4421      	add	r1, r4
   859e4:	1a89      	subs	r1, r1, r2
   859e6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   859ea:	e743      	b.n	85874 <__udivdi3+0xd4>
   859ec:	463a      	mov	r2, r7
   859ee:	e705      	b.n	857fc <__udivdi3+0x5c>
   859f0:	4633      	mov	r3, r6
   859f2:	e718      	b.n	85826 <__udivdi3+0x86>
   859f4:	460a      	mov	r2, r1
   859f6:	e766      	b.n	858c6 <__udivdi3+0x126>
   859f8:	40b0      	lsls	r0, r6
   859fa:	4290      	cmp	r0, r2
   859fc:	d2b5      	bcs.n	8596a <__udivdi3+0x1ca>
   859fe:	f10c 32ff 	add.w	r2, ip, #4294967295
   85a02:	2300      	movs	r3, #0
   85a04:	e712      	b.n	8582c <__udivdi3+0x8c>
   85a06:	4633      	mov	r3, r6
   85a08:	4632      	mov	r2, r6
   85a0a:	e70f      	b.n	8582c <__udivdi3+0x8c>
   85a0c:	459a      	cmp	sl, r3
   85a0e:	d98d      	bls.n	8592c <__udivdi3+0x18c>
   85a10:	f1ac 0c02 	sub.w	ip, ip, #2
   85a14:	4423      	add	r3, r4
   85a16:	e78a      	b.n	8592e <__udivdi3+0x18e>
   85a18:	45b9      	cmp	r9, r7
   85a1a:	d99a      	bls.n	85952 <__udivdi3+0x1b2>
   85a1c:	3d02      	subs	r5, #2
   85a1e:	4427      	add	r7, r4
   85a20:	e798      	b.n	85954 <__udivdi3+0x1b4>
   85a22:	4603      	mov	r3, r0
   85a24:	e7de      	b.n	859e4 <__udivdi3+0x244>
   85a26:	4690      	mov	r8, r2
   85a28:	e7c6      	b.n	859b8 <__udivdi3+0x218>
   85a2a:	3802      	subs	r0, #2
   85a2c:	4421      	add	r1, r4
   85a2e:	e735      	b.n	8589c <__udivdi3+0xfc>
   85a30:	09097325 	.word	0x09097325
   85a34:	25096325 	.word	0x25096325
   85a38:	75250975 	.word	0x75250975
   85a3c:	0d752509 	.word	0x0d752509
   85a40:	0000000a 	.word	0x0000000a
   85a44:	454c4449 	.word	0x454c4449
   85a48:	00000000 	.word	0x00000000
   85a4c:	00000a0d 	.word	0x00000a0d
   85a50:	20726d54 	.word	0x20726d54
   85a54:	00637653 	.word	0x00637653
   85a58:	736e6f43 	.word	0x736e6f43
   85a5c:	20656c6f 	.word	0x20656c6f
   85a60:	64616572 	.word	0x64616572
   85a64:	00000a79 	.word	0x00000a79
   85a68:	3d3d3d3d 	.word	0x3d3d3d3d
   85a6c:	3d3d3d3d 	.word	0x3d3d3d3d
   85a70:	3d3d3d3d 	.word	0x3d3d3d3d
   85a74:	00000a3d 	.word	0x00000a3d
   85a78:	00000000 	.word	0x00000000
   85a7c:	00000001 	.word	0x00000001
   85a80:	00000002 	.word	0x00000002
   85a84:	00000003 	.word	0x00000003
   85a88:	6375530a 	.word	0x6375530a
   85a8c:	73736563 	.word	0x73736563
   85a90:	6c6c7566 	.word	0x6c6c7566
   85a94:	65722079 	.word	0x65722079
   85a98:	76696563 	.word	0x76696563
   85a9c:	76206465 	.word	0x76206465
   85aa0:	65756c61 	.word	0x65756c61
   85aa4:	7525203a 	.word	0x7525203a
   85aa8:	00000000 	.word	0x00000000
   85aac:	7669470a 	.word	0x7669470a
   85ab0:	20676e69 	.word	0x20676e69
   85ab4:	616d6573 	.word	0x616d6573
   85ab8:	726f6870 	.word	0x726f6870
   85abc:	00000065 	.word	0x00000065
   85ac0:	65636552 	.word	0x65636552
   85ac4:	20657669 	.word	0x20657669
   85ac8:	63637573 	.word	0x63637573
   85acc:	66737365 	.word	0x66737365
   85ad0:	203a6c75 	.word	0x203a6c75
   85ad4:	202c7525 	.word	0x202c7525
   85ad8:	202c7525 	.word	0x202c7525
   85adc:	000a7525 	.word	0x000a7525
   85ae0:	65636552 	.word	0x65636552
   85ae4:	20657669 	.word	0x20657669
   85ae8:	6c696166 	.word	0x6c696166
   85aec:	00006465 	.word	0x00006465
   85af0:	00495754 	.word	0x00495754
   85af4:	6f746f47 	.word	0x6f746f47
   85af8:	656a624f 	.word	0x656a624f
   85afc:	00007463 	.word	0x00007463
   85b00:	6d65530a 	.word	0x6d65530a
   85b04:	6f687061 	.word	0x6f687061
   85b08:	68206572 	.word	0x68206572
   85b0c:	62207361 	.word	0x62207361
   85b10:	206e6565 	.word	0x206e6565
   85b14:	65636572 	.word	0x65636572
   85b18:	64657669 	.word	0x64657669
   85b1c:	00000000 	.word	0x00000000
   85b20:	636f4c0a 	.word	0x636f4c0a
   85b24:	6e697461 	.word	0x6e697461
   85b28:	21212167 	.word	0x21212167
   85b2c:	00002121 	.word	0x00002121
   85b30:	4349500a 	.word	0x4349500a
   85b34:	474e494b 	.word	0x474e494b
   85b38:	21505520 	.word	0x21505520
   85b3c:	21212121 	.word	0x21212121
   85b40:	00000000 	.word	0x00000000
   85b44:	4d55440a 	.word	0x4d55440a
   85b48:	474e4950 	.word	0x474e4950
   85b4c:	21212121 	.word	0x21212121
   85b50:	00000021 	.word	0x00000021
   85b54:	746e6f43 	.word	0x746e6f43
   85b58:	6c6c6f72 	.word	0x6c6c6f72
   85b5c:	00007265 	.word	0x00007265
   85b60:	00000043 	.word	0x00000043

00085b64 <_global_impure_ptr>:
   85b64:	20070188 33323130 37363534 42413938     ... 0123456789AB
   85b74:	46454443 00000000 33323130 37363534     CDEF....01234567
   85b84:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   85b94:	0000296c                                l)..

00085b98 <zeroes.6721>:
   85b98:	30303030 30303030 30303030 30303030     0000000000000000

00085ba8 <blanks.6720>:
   85ba8:	20202020 20202020 20202020 20202020                     

00085bb8 <_init>:
   85bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   85bba:	bf00      	nop
   85bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
   85bbe:	bc08      	pop	{r3}
   85bc0:	469e      	mov	lr, r3
   85bc2:	4770      	bx	lr

00085bc4 <__init_array_start>:
   85bc4:	00083c11 	.word	0x00083c11

00085bc8 <__frame_dummy_init_array_entry>:
   85bc8:	00080119                                ....

00085bcc <_fini>:
   85bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   85bce:	bf00      	nop
   85bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   85bd2:	bc08      	pop	{r3}
   85bd4:	469e      	mov	lr, r3
   85bd6:	4770      	bx	lr

00085bd8 <__fini_array_start>:
   85bd8:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4a20      	ldr	r2, [pc, #128]	; (20070088 <SystemInit+0x88>)
20070006:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070008:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007000c:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	4b1f      	ldr	r3, [pc, #124]	; (2007008c <SystemInit+0x8c>)
20070010:	6a1b      	ldr	r3, [r3, #32]
20070012:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070016:	d107      	bne.n	20070028 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070018:	4a1d      	ldr	r2, [pc, #116]	; (20070090 <SystemInit+0x90>)
2007001a:	4b1c      	ldr	r3, [pc, #112]	; (2007008c <SystemInit+0x8c>)
2007001c:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007001e:	461a      	mov	r2, r3
20070020:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070022:	f013 0f01 	tst.w	r3, #1
20070026:	d0fb      	beq.n	20070020 <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070028:	4a1a      	ldr	r2, [pc, #104]	; (20070094 <SystemInit+0x94>)
2007002a:	4b18      	ldr	r3, [pc, #96]	; (2007008c <SystemInit+0x8c>)
2007002c:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007002e:	461a      	mov	r2, r3
20070030:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070032:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070036:	d0fb      	beq.n	20070030 <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070038:	4b14      	ldr	r3, [pc, #80]	; (2007008c <SystemInit+0x8c>)
2007003a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
2007003c:	f022 0203 	bic.w	r2, r2, #3
20070040:	f042 0201 	orr.w	r2, r2, #1
20070044:	631a      	str	r2, [r3, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070046:	461a      	mov	r2, r3
20070048:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007004a:	f013 0f08 	tst.w	r3, #8
2007004e:	d0fb      	beq.n	20070048 <SystemInit+0x48>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
20070050:	4a11      	ldr	r2, [pc, #68]	; (20070098 <SystemInit+0x98>)
20070052:	4b0e      	ldr	r3, [pc, #56]	; (2007008c <SystemInit+0x8c>)
20070054:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070056:	461a      	mov	r2, r3
20070058:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007005a:	f013 0f02 	tst.w	r3, #2
2007005e:	d0fb      	beq.n	20070058 <SystemInit+0x58>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
20070060:	2211      	movs	r2, #17
20070062:	4b0a      	ldr	r3, [pc, #40]	; (2007008c <SystemInit+0x8c>)
20070064:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070066:	461a      	mov	r2, r3
20070068:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007006a:	f013 0f08 	tst.w	r3, #8
2007006e:	d0fb      	beq.n	20070068 <SystemInit+0x68>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
20070070:	2212      	movs	r2, #18
20070072:	4b06      	ldr	r3, [pc, #24]	; (2007008c <SystemInit+0x8c>)
20070074:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070076:	461a      	mov	r2, r3
20070078:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007007a:	f013 0f08 	tst.w	r3, #8
2007007e:	d0fb      	beq.n	20070078 <SystemInit+0x78>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
20070080:	4a06      	ldr	r2, [pc, #24]	; (2007009c <SystemInit+0x9c>)
20070082:	4b07      	ldr	r3, [pc, #28]	; (200700a0 <SystemInit+0xa0>)
20070084:	601a      	str	r2, [r3, #0]
20070086:	4770      	bx	lr
20070088:	400e0a00 	.word	0x400e0a00
2007008c:	400e0600 	.word	0x400e0600
20070090:	00370809 	.word	0x00370809
20070094:	01370809 	.word	0x01370809
20070098:	200d3f01 	.word	0x200d3f01
2007009c:	0501bd00 	.word	0x0501bd00
200700a0:	20070184 	.word	0x20070184

200700a4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700a4:	4b1b      	ldr	r3, [pc, #108]	; (20070114 <system_init_flash+0x70>)
200700a6:	4298      	cmp	r0, r3
200700a8:	d806      	bhi.n	200700b8 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700aa:	2300      	movs	r3, #0
200700ac:	4a1a      	ldr	r2, [pc, #104]	; (20070118 <system_init_flash+0x74>)
200700ae:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700b0:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700b4:	6013      	str	r3, [r2, #0]
200700b6:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700b8:	4b18      	ldr	r3, [pc, #96]	; (2007011c <system_init_flash+0x78>)
200700ba:	4298      	cmp	r0, r3
200700bc:	d807      	bhi.n	200700ce <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700be:	f44f 7380 	mov.w	r3, #256	; 0x100
200700c2:	4a15      	ldr	r2, [pc, #84]	; (20070118 <system_init_flash+0x74>)
200700c4:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700c6:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ca:	6013      	str	r3, [r2, #0]
200700cc:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700ce:	4b14      	ldr	r3, [pc, #80]	; (20070120 <system_init_flash+0x7c>)
200700d0:	4298      	cmp	r0, r3
200700d2:	d807      	bhi.n	200700e4 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700d4:	f44f 7300 	mov.w	r3, #512	; 0x200
200700d8:	4a0f      	ldr	r2, [pc, #60]	; (20070118 <system_init_flash+0x74>)
200700da:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700e0:	6013      	str	r3, [r2, #0]
200700e2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700e4:	4b0f      	ldr	r3, [pc, #60]	; (20070124 <system_init_flash+0x80>)
200700e6:	4298      	cmp	r0, r3
200700e8:	d807      	bhi.n	200700fa <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700ea:	f44f 7340 	mov.w	r3, #768	; 0x300
200700ee:	4a0a      	ldr	r2, [pc, #40]	; (20070118 <system_init_flash+0x74>)
200700f0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700f2:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700f6:	6013      	str	r3, [r2, #0]
200700f8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700fa:	4b0b      	ldr	r3, [pc, #44]	; (20070128 <system_init_flash+0x84>)
200700fc:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700fe:	bf94      	ite	ls
20070100:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070104:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070108:	4a03      	ldr	r2, [pc, #12]	; (20070118 <system_init_flash+0x74>)
2007010a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
2007010c:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070110:	6013      	str	r3, [r2, #0]
20070112:	4770      	bx	lr
20070114:	0121eabf 	.word	0x0121eabf
20070118:	400e0a00 	.word	0x400e0a00
2007011c:	02faf07f 	.word	0x02faf07f
20070120:	03d08fff 	.word	0x03d08fff
20070124:	04c4b3ff 	.word	0x04c4b3ff
20070128:	055d4a7f 	.word	0x055d4a7f

2007012c <uxCriticalNesting>:
2007012c:	aaaaaaaa                                ....

20070130 <xFreeBytesRemaining>:
20070130:	0000a000                                ....

20070134 <xNextTaskUnblockTime>:
20070134:	ffffffff                                ....

20070138 <pulse_timers>:
20070138:	40080000 00000001 0000001c 0000001c     ...@............
20070148:	00090600 00000002 00000000 00000008     ................
20070158:	00000002 40080000 00000000 0000001b     .......@........
20070168:	0000001b 00090600 00000039 00000001     ........9.......
20070178:	00000008 00000002                       ........

20070180 <g_interrupt_enabled>:
20070180:	00000001                                ....

20070184 <SystemCoreClock>:
20070184:	003d0900                                ..=.

20070188 <impure_data>:
20070188:	00000000 20070474 200704dc 20070544     ....t.. ... D.. 
	...
200701bc:	00085b60 00000000 00000000 00000000     `[..............
	...
20070230:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20070240:	0005deec 0000000b 00000000 00000000     ................
	...

200705b0 <_impure_ptr>:
200705b0:	20070188                                ... 

200705b4 <lc_ctype_charset>:
200705b4:	49435341 00000049 00000000 00000000     ASCII...........
	...

200705d4 <__mb_cur_max>:
200705d4:	00000001                                ....

200705d8 <__malloc_av_>:
	...
200705e0:	200705d8 200705d8 200705e0 200705e0     ... ... ... ... 
200705f0:	200705e8 200705e8 200705f0 200705f0     ... ... ... ... 
20070600:	200705f8 200705f8 20070600 20070600     ... ... ... ... 
20070610:	20070608 20070608 20070610 20070610     ... ... ... ... 
20070620:	20070618 20070618 20070620 20070620     ... ...  ..  .. 
20070630:	20070628 20070628 20070630 20070630     (.. (.. 0.. 0.. 
20070640:	20070638 20070638 20070640 20070640     8.. 8.. @.. @.. 
20070650:	20070648 20070648 20070650 20070650     H.. H.. P.. P.. 
20070660:	20070658 20070658 20070660 20070660     X.. X.. `.. `.. 
20070670:	20070668 20070668 20070670 20070670     h.. h.. p.. p.. 
20070680:	20070678 20070678 20070680 20070680     x.. x.. ... ... 
20070690:	20070688 20070688 20070690 20070690     ... ... ... ... 
200706a0:	20070698 20070698 200706a0 200706a0     ... ... ... ... 
200706b0:	200706a8 200706a8 200706b0 200706b0     ... ... ... ... 
200706c0:	200706b8 200706b8 200706c0 200706c0     ... ... ... ... 
200706d0:	200706c8 200706c8 200706d0 200706d0     ... ... ... ... 
200706e0:	200706d8 200706d8 200706e0 200706e0     ... ... ... ... 
200706f0:	200706e8 200706e8 200706f0 200706f0     ... ... ... ... 
20070700:	200706f8 200706f8 20070700 20070700     ... ... ... ... 
20070710:	20070708 20070708 20070710 20070710     ... ... ... ... 
20070720:	20070718 20070718 20070720 20070720     ... ...  ..  .. 
20070730:	20070728 20070728 20070730 20070730     (.. (.. 0.. 0.. 
20070740:	20070738 20070738 20070740 20070740     8.. 8.. @.. @.. 
20070750:	20070748 20070748 20070750 20070750     H.. H.. P.. P.. 
20070760:	20070758 20070758 20070760 20070760     X.. X.. `.. `.. 
20070770:	20070768 20070768 20070770 20070770     h.. h.. p.. p.. 
20070780:	20070778 20070778 20070780 20070780     x.. x.. ... ... 
20070790:	20070788 20070788 20070790 20070790     ... ... ... ... 
200707a0:	20070798 20070798 200707a0 200707a0     ... ... ... ... 
200707b0:	200707a8 200707a8 200707b0 200707b0     ... ... ... ... 
200707c0:	200707b8 200707b8 200707c0 200707c0     ... ... ... ... 
200707d0:	200707c8 200707c8 200707d0 200707d0     ... ... ... ... 
200707e0:	200707d8 200707d8 200707e0 200707e0     ... ... ... ... 
200707f0:	200707e8 200707e8 200707f0 200707f0     ... ... ... ... 
20070800:	200707f8 200707f8 20070800 20070800     ... ... ... ... 
20070810:	20070808 20070808 20070810 20070810     ... ... ... ... 
20070820:	20070818 20070818 20070820 20070820     ... ...  ..  .. 
20070830:	20070828 20070828 20070830 20070830     (.. (.. 0.. 0.. 
20070840:	20070838 20070838 20070840 20070840     8.. 8.. @.. @.. 
20070850:	20070848 20070848 20070850 20070850     H.. H.. P.. P.. 
20070860:	20070858 20070858 20070860 20070860     X.. X.. `.. `.. 
20070870:	20070868 20070868 20070870 20070870     h.. h.. p.. p.. 
20070880:	20070878 20070878 20070880 20070880     x.. x.. ... ... 
20070890:	20070888 20070888 20070890 20070890     ... ... ... ... 
200708a0:	20070898 20070898 200708a0 200708a0     ... ... ... ... 
200708b0:	200708a8 200708a8 200708b0 200708b0     ... ... ... ... 
200708c0:	200708b8 200708b8 200708c0 200708c0     ... ... ... ... 
200708d0:	200708c8 200708c8 200708d0 200708d0     ... ... ... ... 
200708e0:	200708d8 200708d8 200708e0 200708e0     ... ... ... ... 
200708f0:	200708e8 200708e8 200708f0 200708f0     ... ... ... ... 
20070900:	200708f8 200708f8 20070900 20070900     ... ... ... ... 
20070910:	20070908 20070908 20070910 20070910     ... ... ... ... 
20070920:	20070918 20070918 20070920 20070920     ... ...  ..  .. 
20070930:	20070928 20070928 20070930 20070930     (.. (.. 0.. 0.. 
20070940:	20070938 20070938 20070940 20070940     8.. 8.. @.. @.. 
20070950:	20070948 20070948 20070950 20070950     H.. H.. P.. P.. 
20070960:	20070958 20070958 20070960 20070960     X.. X.. `.. `.. 
20070970:	20070968 20070968 20070970 20070970     h.. h.. p.. p.. 
20070980:	20070978 20070978 20070980 20070980     x.. x.. ... ... 
20070990:	20070988 20070988 20070990 20070990     ... ... ... ... 
200709a0:	20070998 20070998 200709a0 200709a0     ... ... ... ... 
200709b0:	200709a8 200709a8 200709b0 200709b0     ... ... ... ... 
200709c0:	200709b8 200709b8 200709c0 200709c0     ... ... ... ... 
200709d0:	200709c8 200709c8 200709d0 200709d0     ... ... ... ... 

200709e0 <__malloc_trim_threshold>:
200709e0:	00020000                                ....

200709e4 <__malloc_sbrk_base>:
200709e4:	ffffffff                                ....

200709e8 <__wctomb>:
200709e8:	00085235                                5R..
