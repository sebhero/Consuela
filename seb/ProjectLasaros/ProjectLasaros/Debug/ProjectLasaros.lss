
ProjectLasaros.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000655c  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0008655c  0008655c  0000e55c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009fc  20070000  00086564  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000a2fc  20070a00  00086f68  00010a00  2**3
                  ALLOC
  4 .stack        00002004  2007acfc  00091264  00010a00  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  000109fc  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  00010a25  2**0
                  CONTENTS, READONLY
  7 .debug_info   00017ac3  00000000  00000000  00010a80  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00004377  00000000  00000000  00028543  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00009750  00000000  00000000  0002c8ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001088  00000000  00000000  0003600a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000fb8  00000000  00000000  00037092  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001cb20  00000000  00000000  0003804a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000181e4  00000000  00000000  00054b6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0006c1d9  00000000  00000000  0006cd4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00003084  00000000  00000000  000d8f28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	2007cd00 	.word	0x2007cd00
   80004:	00082615 	.word	0x00082615
   80008:	00082611 	.word	0x00082611
   8000c:	00082611 	.word	0x00082611
   80010:	00082611 	.word	0x00082611
   80014:	00082611 	.word	0x00082611
   80018:	00082611 	.word	0x00082611
	...
   8002c:	00080cb9 	.word	0x00080cb9
   80030:	00082611 	.word	0x00082611
   80034:	00000000 	.word	0x00000000
   80038:	00080d35 	.word	0x00080d35
   8003c:	00080d71 	.word	0x00080d71
   80040:	00082611 	.word	0x00082611
   80044:	00082611 	.word	0x00082611
   80048:	00082611 	.word	0x00082611
   8004c:	00082611 	.word	0x00082611
   80050:	00082611 	.word	0x00082611
   80054:	00082611 	.word	0x00082611
   80058:	00082611 	.word	0x00082611
   8005c:	00082611 	.word	0x00082611
   80060:	00082611 	.word	0x00082611
   80064:	00082611 	.word	0x00082611
   80068:	00000000 	.word	0x00000000
   8006c:	00082481 	.word	0x00082481
   80070:	00082495 	.word	0x00082495
   80074:	000824a9 	.word	0x000824a9
   80078:	000824bd 	.word	0x000824bd
	...
   80084:	00080a0d 	.word	0x00080a0d
   80088:	00082611 	.word	0x00082611
   8008c:	00082611 	.word	0x00082611
   80090:	00082611 	.word	0x00082611
   80094:	00082611 	.word	0x00082611
   80098:	00082611 	.word	0x00082611
   8009c:	00082611 	.word	0x00082611
   800a0:	00082611 	.word	0x00082611
   800a4:	00000000 	.word	0x00000000
   800a8:	00082611 	.word	0x00082611
   800ac:	0008090d 	.word	0x0008090d
   800b0:	000808d9 	.word	0x000808d9
   800b4:	00082611 	.word	0x00082611
   800b8:	00082611 	.word	0x00082611
   800bc:	00082611 	.word	0x00082611
   800c0:	00082611 	.word	0x00082611
   800c4:	00082611 	.word	0x00082611
   800c8:	00082611 	.word	0x00082611
   800cc:	00082611 	.word	0x00082611
   800d0:	00082611 	.word	0x00082611
   800d4:	00082611 	.word	0x00082611
   800d8:	00082611 	.word	0x00082611
   800dc:	00082611 	.word	0x00082611
   800e0:	00082611 	.word	0x00082611
   800e4:	00082611 	.word	0x00082611
   800e8:	00082611 	.word	0x00082611
   800ec:	00082611 	.word	0x00082611
   800f0:	00082611 	.word	0x00082611

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070a00 	.word	0x20070a00
   80110:	00000000 	.word	0x00000000
   80114:	00086564 	.word	0x00086564

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b06      	ldr	r3, [pc, #24]	; (80134 <frame_dummy+0x1c>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4806      	ldr	r0, [pc, #24]	; (80138 <frame_dummy+0x20>)
   80120:	4906      	ldr	r1, [pc, #24]	; (8013c <frame_dummy+0x24>)
   80122:	f3af 8000 	nop.w
   80126:	4806      	ldr	r0, [pc, #24]	; (80140 <frame_dummy+0x28>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b113      	cbz	r3, 80132 <frame_dummy+0x1a>
   8012c:	4b05      	ldr	r3, [pc, #20]	; (80144 <frame_dummy+0x2c>)
   8012e:	b103      	cbz	r3, 80132 <frame_dummy+0x1a>
   80130:	4798      	blx	r3
   80132:	bd08      	pop	{r3, pc}
   80134:	00000000 	.word	0x00000000
   80138:	00086564 	.word	0x00086564
   8013c:	20070a04 	.word	0x20070a04
   80140:	00086564 	.word	0x00086564
   80144:	00000000 	.word	0x00000000

00080148 <twi_set_speed>:
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
   80148:	4b0f      	ldr	r3, [pc, #60]	; (80188 <twi_set_speed+0x40>)
   8014a:	4299      	cmp	r1, r3
   8014c:	d819      	bhi.n	80182 <twi_set_speed+0x3a>
		return FAIL;
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   8014e:	0049      	lsls	r1, r1, #1
   80150:	fbb2 f2f1 	udiv	r2, r2, r1
   80154:	3a04      	subs	r2, #4

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   80156:	2aff      	cmp	r2, #255	; 0xff
   80158:	d907      	bls.n	8016a <twi_set_speed+0x22>
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
   8015a:	2300      	movs	r3, #0
	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
		/* Increase clock divider */
		ckdiv++;
   8015c:	3301      	adds	r3, #1
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
   8015e:	0852      	lsrs	r2, r2, #1
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   80160:	2aff      	cmp	r2, #255	; 0xff
   80162:	d903      	bls.n	8016c <twi_set_speed+0x24>
   80164:	2b07      	cmp	r3, #7
   80166:	d1f9      	bne.n	8015c <twi_set_speed+0x14>
   80168:	e000      	b.n	8016c <twi_set_speed+0x24>
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
   8016a:	2300      	movs	r3, #0
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   8016c:	0211      	lsls	r1, r2, #8
   8016e:	b289      	uxth	r1, r1
			TWI_CWGR_CKDIV(ckdiv);
   80170:	041b      	lsls	r3, r3, #16
   80172:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   80176:	430b      	orrs	r3, r1
   80178:	b2d2      	uxtb	r2, r2
   8017a:	431a      	orrs	r2, r3
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
   8017c:	6102      	str	r2, [r0, #16]
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
			TWI_CWGR_CKDIV(ckdiv);

	return PASS;
   8017e:	2000      	movs	r0, #0
   80180:	4770      	bx	lr
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
		return FAIL;
   80182:	2001      	movs	r0, #1
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
			TWI_CWGR_CKDIV(ckdiv);

	return PASS;
}
   80184:	4770      	bx	lr
   80186:	bf00      	nop
   80188:	00061a80 	.word	0x00061a80

0008018c <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
   8018c:	b538      	push	{r3, r4, r5, lr}
   8018e:	4604      	mov	r4, r0
   80190:	460d      	mov	r5, r1
	uint32_t status = TWI_SUCCESS;

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
   80192:	f04f 33ff 	mov.w	r3, #4294967295
   80196:	6283      	str	r3, [r0, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
   80198:	6a03      	ldr	r3, [r0, #32]
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
   8019a:	2380      	movs	r3, #128	; 0x80
   8019c:	6003      	str	r3, [r0, #0]
	p_twi->TWI_RHR;
   8019e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
   801a0:	2308      	movs	r3, #8
   801a2:	6003      	str	r3, [r0, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
   801a4:	2320      	movs	r3, #32
   801a6:	6003      	str	r3, [r0, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
   801a8:	2304      	movs	r3, #4
   801aa:	6003      	str	r3, [r0, #0]
	twi_reset(p_twi);

	twi_enable_master_mode(p_twi);

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
   801ac:	6849      	ldr	r1, [r1, #4]
   801ae:	682a      	ldr	r2, [r5, #0]
   801b0:	4b05      	ldr	r3, [pc, #20]	; (801c8 <twi_master_init+0x3c>)
   801b2:	4798      	blx	r3
   801b4:	2801      	cmp	r0, #1
   801b6:	bf14      	ite	ne
   801b8:	2000      	movne	r0, #0
   801ba:	2001      	moveq	r0, #1
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
	}

	if (p_opt->smbus == 1) {
   801bc:	7a6b      	ldrb	r3, [r5, #9]
   801be:	2b01      	cmp	r3, #1
		p_twi->TWI_CR = TWI_CR_QUICK;
   801c0:	bf04      	itt	eq
   801c2:	2340      	moveq	r3, #64	; 0x40
   801c4:	6023      	streq	r3, [r4, #0]
	}

	return status;
}
   801c6:	bd38      	pop	{r3, r4, r5, pc}
   801c8:	00080149 	.word	0x00080149

000801cc <twi_master_read>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twi_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
   801cc:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
   801d0:	4604      	mov	r4, r0
	uint32_t status;
	uint32_t cnt = p_packet->length;
   801d2:	68cb      	ldr	r3, [r1, #12]
	uint8_t *buffer = p_packet->buffer;
   801d4:	688e      	ldr	r6, [r1, #8]
	uint8_t stop_sent = 0;
	uint32_t timeout = TWI_TIMEOUT;;
	
	/* Check argument */
	if (cnt == 0) {
   801d6:	2b00      	cmp	r3, #0
   801d8:	d049      	beq.n	8026e <twi_master_read+0xa2>
		return TWI_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
   801da:	2200      	movs	r2, #0
   801dc:	6042      	str	r2, [r0, #4]
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
   801de:	6848      	ldr	r0, [r1, #4]
   801e0:	0200      	lsls	r0, r0, #8
   801e2:	f400 7040 	and.w	r0, r0, #768	; 0x300
		return TWI_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
   801e6:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
   801ea:	7c0d      	ldrb	r5, [r1, #16]
   801ec:	042d      	lsls	r5, r5, #16
   801ee:	f405 05fe 	and.w	r5, r5, #8323072	; 0x7f0000
   801f2:	4328      	orrs	r0, r5
   801f4:	6060      	str	r0, [r4, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
   801f6:	60e2      	str	r2, [r4, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   801f8:	684a      	ldr	r2, [r1, #4]
 */
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
   801fa:	b15a      	cbz	r2, 80214 <twi_master_read+0x48>
		return 0;

	val = addr[0];
   801fc:	7808      	ldrb	r0, [r1, #0]
	if (len > 1) {
   801fe:	2a01      	cmp	r2, #1
		val <<= 8;
		val |= addr[1];
   80200:	bfc4      	itt	gt
   80202:	784d      	ldrbgt	r5, [r1, #1]
   80204:	ea45 2000 	orrgt.w	r0, r5, r0, lsl #8
	}
	if (len > 2) {
   80208:	2a02      	cmp	r2, #2
   8020a:	dd04      	ble.n	80216 <twi_master_read+0x4a>
		val <<= 8;
		val |= addr[2];
   8020c:	788a      	ldrb	r2, [r1, #2]
   8020e:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
   80212:	e000      	b.n	80216 <twi_master_read+0x4a>
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
		return 0;
   80214:	2000      	movs	r0, #0
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   80216:	60e0      	str	r0, [r4, #12]

	/* Send a START condition */
	if (cnt == 1) {
   80218:	2b01      	cmp	r3, #1
   8021a:	d104      	bne.n	80226 <twi_master_read+0x5a>
		p_twi->TWI_CR = TWI_CR_START | TWI_CR_STOP;
   8021c:	2203      	movs	r2, #3
   8021e:	6022      	str	r2, [r4, #0]
		stop_sent = 1;
   80220:	f04f 0c01 	mov.w	ip, #1
   80224:	e02b      	b.n	8027e <twi_master_read+0xb2>
	} else {
		p_twi->TWI_CR = TWI_CR_START;
   80226:	2201      	movs	r2, #1
   80228:	6022      	str	r2, [r4, #0]
		stop_sent = 0;
   8022a:	f04f 0c00 	mov.w	ip, #0
   8022e:	e026      	b.n	8027e <twi_master_read+0xb2>
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
   80230:	6a21      	ldr	r1, [r4, #32]
		if (status & TWI_SR_NACK) {
   80232:	f411 7f80 	tst.w	r1, #256	; 0x100
   80236:	d11c      	bne.n	80272 <twi_master_read+0xa6>
			return TWI_RECEIVE_NACK;
		}

		if (!timeout--) {
   80238:	1e55      	subs	r5, r2, #1
   8023a:	b1e2      	cbz	r2, 80276 <twi_master_read+0xaa>
   8023c:	462a      	mov	r2, r5
			return TWI_ERROR_TIMEOUT;
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
   8023e:	2b01      	cmp	r3, #1
   80240:	d105      	bne.n	8024e <twi_master_read+0x82>
   80242:	f1bc 0f00 	cmp.w	ip, #0
   80246:	d102      	bne.n	8024e <twi_master_read+0x82>
			p_twi->TWI_CR = TWI_CR_STOP;
   80248:	f8c4 9000 	str.w	r9, [r4]
			stop_sent = 1;
   8024c:	46c4      	mov	ip, r8
		}

		if (!(status & TWI_SR_RXRDY)) {
   8024e:	f011 0f02 	tst.w	r1, #2
   80252:	d004      	beq.n	8025e <twi_master_read+0x92>
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;
   80254:	6b22      	ldr	r2, [r4, #48]	; 0x30
   80256:	7032      	strb	r2, [r6, #0]

		cnt--;
   80258:	3b01      	subs	r3, #1
		}

		if (!(status & TWI_SR_RXRDY)) {
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;
   8025a:	3601      	adds	r6, #1

		cnt--;
		timeout = TWI_TIMEOUT;
   8025c:	463a      	mov	r2, r7
	} else {
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
   8025e:	2b00      	cmp	r3, #0
   80260:	d1e6      	bne.n	80230 <twi_master_read+0x64>

		cnt--;
		timeout = TWI_TIMEOUT;
	}

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
   80262:	6a23      	ldr	r3, [r4, #32]
   80264:	f013 0f01 	tst.w	r3, #1
   80268:	d0fb      	beq.n	80262 <twi_master_read+0x96>
	}

	p_twi->TWI_SR;
   8026a:	6a23      	ldr	r3, [r4, #32]

	return TWI_SUCCESS;
   8026c:	e014      	b.n	80298 <twi_master_read+0xcc>
	uint8_t stop_sent = 0;
	uint32_t timeout = TWI_TIMEOUT;;
	
	/* Check argument */
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
   8026e:	2001      	movs	r0, #1
   80270:	e012      	b.n	80298 <twi_master_read+0xcc>
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
   80272:	2005      	movs	r0, #5
   80274:	e010      	b.n	80298 <twi_master_read+0xcc>
		}

		if (!timeout--) {
			return TWI_ERROR_TIMEOUT;
   80276:	2009      	movs	r0, #9
   80278:	e00e      	b.n	80298 <twi_master_read+0xcc>
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
   8027a:	2005      	movs	r0, #5
   8027c:	e00c      	b.n	80298 <twi_master_read+0xcc>
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
   8027e:	6a21      	ldr	r1, [r4, #32]
		if (status & TWI_SR_NACK) {
   80280:	f411 7080 	ands.w	r0, r1, #256	; 0x100
   80284:	d1f9      	bne.n	8027a <twi_master_read+0xae>
			return TWI_RECEIVE_NACK;
		}

		if (!timeout--) {
   80286:	f643 2297 	movw	r2, #14999	; 0x3a97
			return TWI_ERROR_TIMEOUT;
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
			p_twi->TWI_CR = TWI_CR_STOP;
   8028a:	f04f 0902 	mov.w	r9, #2
			stop_sent = 1;
   8028e:	f04f 0801 	mov.w	r8, #1
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;

		cnt--;
		timeout = TWI_TIMEOUT;
   80292:	f643 2798 	movw	r7, #15000	; 0x3a98
   80296:	e7d2      	b.n	8023e <twi_master_read+0x72>
	}

	p_twi->TWI_SR;

	return TWI_SUCCESS;
}
   80298:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
   8029c:	4770      	bx	lr
   8029e:	bf00      	nop

000802a0 <twi_master_write>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
   802a0:	b470      	push	{r4, r5, r6}
   802a2:	4603      	mov	r3, r0
	uint32_t status;
	uint32_t cnt = p_packet->length;
   802a4:	68ca      	ldr	r2, [r1, #12]
	uint8_t *buffer = p_packet->buffer;
   802a6:	6888      	ldr	r0, [r1, #8]

	/* Check argument */
	if (cnt == 0) {
   802a8:	2a00      	cmp	r2, #0
   802aa:	d03f      	beq.n	8032c <twi_master_write+0x8c>
		return TWI_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
   802ac:	2400      	movs	r4, #0
   802ae:	605c      	str	r4, [r3, #4]
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
   802b0:	7c0e      	ldrb	r6, [r1, #16]
   802b2:	0436      	lsls	r6, r6, #16
   802b4:	f406 06fe 	and.w	r6, r6, #8323072	; 0x7f0000
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
   802b8:	684d      	ldr	r5, [r1, #4]
   802ba:	022d      	lsls	r5, r5, #8
   802bc:	f405 7540 	and.w	r5, r5, #768	; 0x300
		return TWI_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
   802c0:	4335      	orrs	r5, r6
   802c2:	605d      	str	r5, [r3, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
   802c4:	60dc      	str	r4, [r3, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   802c6:	684c      	ldr	r4, [r1, #4]
 */
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
   802c8:	b15c      	cbz	r4, 802e2 <twi_master_write+0x42>
		return 0;

	val = addr[0];
   802ca:	780d      	ldrb	r5, [r1, #0]
	if (len > 1) {
   802cc:	2c01      	cmp	r4, #1
		val <<= 8;
		val |= addr[1];
   802ce:	bfc4      	itt	gt
   802d0:	784e      	ldrbgt	r6, [r1, #1]
   802d2:	ea46 2505 	orrgt.w	r5, r6, r5, lsl #8
	}
	if (len > 2) {
   802d6:	2c02      	cmp	r4, #2
   802d8:	dd04      	ble.n	802e4 <twi_master_write+0x44>
		val <<= 8;
		val |= addr[2];
   802da:	7889      	ldrb	r1, [r1, #2]
   802dc:	ea41 2505 	orr.w	r5, r1, r5, lsl #8
   802e0:	e000      	b.n	802e4 <twi_master_write+0x44>
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
		return 0;
   802e2:	2500      	movs	r5, #0
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   802e4:	60dd      	str	r5, [r3, #12]
   802e6:	e00b      	b.n	80300 <twi_master_write+0x60>

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
   802e8:	6a19      	ldr	r1, [r3, #32]
		if (status & TWI_SR_NACK) {
   802ea:	f411 7f80 	tst.w	r1, #256	; 0x100
   802ee:	d11f      	bne.n	80330 <twi_master_write+0x90>
			return TWI_RECEIVE_NACK;
		}

		if (!(status & TWI_SR_TXRDY)) {
   802f0:	f011 0f04 	tst.w	r1, #4
   802f4:	d0f8      	beq.n	802e8 <twi_master_write+0x48>
			continue;
		}
		p_twi->TWI_THR = *buffer++;
   802f6:	f810 1b01 	ldrb.w	r1, [r0], #1
   802fa:	6359      	str	r1, [r3, #52]	; 0x34
	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
   802fc:	3a01      	subs	r2, #1
   802fe:	d007      	beq.n	80310 <twi_master_write+0x70>
		status = p_twi->TWI_SR;
   80300:	6a19      	ldr	r1, [r3, #32]
		if (status & TWI_SR_NACK) {
   80302:	f411 7f80 	tst.w	r1, #256	; 0x100
   80306:	d115      	bne.n	80334 <twi_master_write+0x94>
			return TWI_RECEIVE_NACK;
		}

		if (!(status & TWI_SR_TXRDY)) {
   80308:	f011 0f04 	tst.w	r1, #4
   8030c:	d1f3      	bne.n	802f6 <twi_master_write+0x56>
   8030e:	e7eb      	b.n	802e8 <twi_master_write+0x48>

		cnt--;
	}

	while (1) {
		status = p_twi->TWI_SR;
   80310:	6a1a      	ldr	r2, [r3, #32]
		if (status & TWI_SR_NACK) {
   80312:	f412 7080 	ands.w	r0, r2, #256	; 0x100
   80316:	d10f      	bne.n	80338 <twi_master_write+0x98>
			return TWI_RECEIVE_NACK;
		}

		if (status & TWI_SR_TXRDY) {
   80318:	f012 0f04 	tst.w	r2, #4
   8031c:	d0f8      	beq.n	80310 <twi_master_write+0x70>
			break;
		}
	}

	p_twi->TWI_CR = TWI_CR_STOP;
   8031e:	2202      	movs	r2, #2
   80320:	601a      	str	r2, [r3, #0]

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
   80322:	6a1a      	ldr	r2, [r3, #32]
   80324:	f012 0f01 	tst.w	r2, #1
   80328:	d0fb      	beq.n	80322 <twi_master_write+0x82>
   8032a:	e006      	b.n	8033a <twi_master_write+0x9a>
	uint32_t cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;

	/* Check argument */
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
   8032c:	2001      	movs	r0, #1
   8032e:	e004      	b.n	8033a <twi_master_write+0x9a>

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
   80330:	2005      	movs	r0, #5
   80332:	e002      	b.n	8033a <twi_master_write+0x9a>
   80334:	2005      	movs	r0, #5
   80336:	e000      	b.n	8033a <twi_master_write+0x9a>
	}

	while (1) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
   80338:	2005      	movs	r0, #5

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
	}

	return TWI_SUCCESS;
}
   8033a:	bc70      	pop	{r4, r5, r6}
   8033c:	4770      	bx	lr
   8033e:	bf00      	nop

00080340 <twi_probe>:
 * \param uc_slave_addr Address of the remote chip to search for.
 *
 * \return TWI_SUCCESS if a chip was found, error code otherwise.
 */
uint32_t twi_probe(Twi *p_twi, uint8_t uc_slave_addr)
{
   80340:	b500      	push	{lr}
   80342:	b087      	sub	sp, #28
	twi_packet_t packet;
	uint8_t data = 0;
   80344:	2300      	movs	r3, #0
   80346:	aa06      	add	r2, sp, #24
   80348:	f802 3d15 	strb.w	r3, [r2, #-21]!

	/* Data to send */
	packet.buffer = &data;
   8034c:	9203      	str	r2, [sp, #12]
	/* Data length */
	packet.length = 1;
   8034e:	2201      	movs	r2, #1
   80350:	9204      	str	r2, [sp, #16]
	/* Slave chip address */
	packet.chip = (uint32_t) uc_slave_addr;
   80352:	f88d 1014 	strb.w	r1, [sp, #20]
	/* Internal chip address */
	packet.addr[0] = 0;
   80356:	f88d 3004 	strb.w	r3, [sp, #4]
	/* Address length */
	packet.addr_length = 0;
   8035a:	9302      	str	r3, [sp, #8]

	/* Perform a master write access */
	return (twi_master_write(p_twi, &packet));
   8035c:	a901      	add	r1, sp, #4
   8035e:	4b02      	ldr	r3, [pc, #8]	; (80368 <twi_probe+0x28>)
   80360:	4798      	blx	r3
}
   80362:	b007      	add	sp, #28
   80364:	f85d fb04 	ldr.w	pc, [sp], #4
   80368:	000802a1 	.word	0x000802a1

0008036c <twi_comInit>:

void buildObject(uint8_t data[5], objectinfo_t *ptr_object);

void buildXY(uint8_t data[5], int16_t *pInt, int16_t *ypos_1);

void twi_comInit(void) {
   8036c:	b500      	push	{lr}
   8036e:	b085      	sub	sp, #20
	// TWI master initialization options.
	//set that there is no data;
	theArm.hasData = 0;
   80370:	2300      	movs	r3, #0
   80372:	4a0b      	ldr	r2, [pc, #44]	; (803a0 <twi_comInit+0x34>)
   80374:	7153      	strb	r3, [r2, #5]
	SLAVE_ADDR = SLAVE_ADDR_ARM;//twi slave address for arm
   80376:	2202      	movs	r2, #2
   80378:	490a      	ldr	r1, [pc, #40]	; (803a4 <twi_comInit+0x38>)
   8037a:	600a      	str	r2, [r1, #0]

	twi_master_options_t opt;
	opt.speed = TWI_SPEED;
   8037c:	490a      	ldr	r1, [pc, #40]	; (803a8 <twi_comInit+0x3c>)
   8037e:	9102      	str	r1, [sp, #8]
	opt.chip = (uint8_t) SLAVE_ADDR;
   80380:	f88d 200c 	strb.w	r2, [sp, #12]
typedef twi_packet_t twi_package_t;

static inline uint32_t twi_master_setup(twi_master_t p_twi,
		twi_master_options_t *p_opt)
{
	p_opt->master_clk = sysclk_get_cpu_hz();
   80384:	4a09      	ldr	r2, [pc, #36]	; (803ac <twi_comInit+0x40>)
   80386:	9201      	str	r2, [sp, #4]
	p_opt->smbus      = 0;
   80388:	f88d 300d 	strb.w	r3, [sp, #13]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   8038c:	2017      	movs	r0, #23
   8038e:	4b08      	ldr	r3, [pc, #32]	; (803b0 <twi_comInit+0x44>)
   80390:	4798      	blx	r3
	} else {
		// Do Nothing
	}
#endif

	return (twi_master_init(p_twi, p_opt));
   80392:	4808      	ldr	r0, [pc, #32]	; (803b4 <twi_comInit+0x48>)
   80394:	a901      	add	r1, sp, #4
   80396:	4b08      	ldr	r3, [pc, #32]	; (803b8 <twi_comInit+0x4c>)
   80398:	4798      	blx	r3

	// Initialize the TWI master driver.
	twi_master_setup(TWI_PORT, &opt);
}
   8039a:	b005      	add	sp, #20
   8039c:	f85d fb04 	ldr.w	pc, [sp], #4
   803a0:	2007accc 	.word	0x2007accc
   803a4:	2007acc8 	.word	0x2007acc8
   803a8:	000186a0 	.word	0x000186a0
   803ac:	0501bd00 	.word	0x0501bd00
   803b0:	000825b9 	.word	0x000825b9
   803b4:	40090000 	.word	0x40090000
   803b8:	0008018d 	.word	0x0008018d

000803bc <twiSendData>:
	}
}

//Send data to Arm with TWI
//data holds the data, dataLength is how many bytes the data is.
uint8_t twiSendData(uint8_t *data, uint32_t dataLength) {
   803bc:	b530      	push	{r4, r5, lr}
   803be:	b087      	sub	sp, #28

	twi_package_t packet = {
   803c0:	2300      	movs	r3, #0
   803c2:	9301      	str	r3, [sp, #4]
   803c4:	9302      	str	r3, [sp, #8]
   803c6:	9305      	str	r3, [sp, #20]
   803c8:	9003      	str	r0, [sp, #12]
   803ca:	9104      	str	r1, [sp, #16]

			.addr[0]      = 0, // TWI slave memory address data MSB
			.addr[1]      = 0,// TWI slave memory address data LSB
			.addr_length  = 0, //sizeof (uint16_t),    // TWI slave memory address data size
			.chip         = (uint8_t) SLAVE_ADDR,      // TWI slave bus address
   803cc:	4b0a      	ldr	r3, [pc, #40]	; (803f8 <twiSendData+0x3c>)
   803ce:	7819      	ldrb	r1, [r3, #0]

//Send data to Arm with TWI
//data holds the data, dataLength is how many bytes the data is.
uint8_t twiSendData(uint8_t *data, uint32_t dataLength) {

	twi_package_t packet = {
   803d0:	f88d 1014 	strb.w	r1, [sp, #20]
			.buffer       = data, // transfer data source buffer
			.length       = dataLength   // transfer data size (bytes)
	};


	if (twi_probe(TWI_PORT, (uint8_t) SLAVE_ADDR) == TWI_SUCCESS) {
   803d4:	4809      	ldr	r0, [pc, #36]	; (803fc <twiSendData+0x40>)
   803d6:	4b0a      	ldr	r3, [pc, #40]	; (80400 <twiSendData+0x44>)
   803d8:	4798      	blx	r3
   803da:	b938      	cbnz	r0, 803ec <twiSendData+0x30>
		while (twi_master_write(TWI_PORT, &packet) != TWI_SUCCESS);
   803dc:	4d07      	ldr	r5, [pc, #28]	; (803fc <twiSendData+0x40>)
   803de:	4c09      	ldr	r4, [pc, #36]	; (80404 <twiSendData+0x48>)
   803e0:	4628      	mov	r0, r5
   803e2:	a901      	add	r1, sp, #4
   803e4:	47a0      	blx	r4
   803e6:	2800      	cmp	r0, #0
   803e8:	d1fa      	bne.n	803e0 <twiSendData+0x24>
   803ea:	e001      	b.n	803f0 <twiSendData+0x34>
		return 1;
	} else {
		return 0;
   803ec:	2000      	movs	r0, #0
   803ee:	e000      	b.n	803f2 <twiSendData+0x36>
	};


	if (twi_probe(TWI_PORT, (uint8_t) SLAVE_ADDR) == TWI_SUCCESS) {
		while (twi_master_write(TWI_PORT, &packet) != TWI_SUCCESS);
		return 1;
   803f0:	2001      	movs	r0, #1
	} else {
		return 0;
	}
}
   803f2:	b007      	add	sp, #28
   803f4:	bd30      	pop	{r4, r5, pc}
   803f6:	bf00      	nop
   803f8:	2007acc8 	.word	0x2007acc8
   803fc:	40090000 	.word	0x40090000
   80400:	00080341 	.word	0x00080341
   80404:	000802a1 	.word	0x000802a1

00080408 <twiReciveData>:

//Recive data from ARM with TWI
//recives and prints the data out on Uart.
//packageSize how many bytes expected to recive
//returns the data recived as array.
uint8_t twiReciveData(uint8_t *recv, uint8_t packageSize) {
   80408:	b530      	push	{r4, r5, lr}
   8040a:	b087      	sub	sp, #28
	//package recived
	twi_package_t pkt_rcv = {
   8040c:	2300      	movs	r3, #0
   8040e:	9301      	str	r3, [sp, #4]
   80410:	9302      	str	r3, [sp, #8]
   80412:	9305      	str	r3, [sp, #20]
   80414:	9003      	str	r0, [sp, #12]
   80416:	9104      	str	r1, [sp, #16]

			.addr[0]      = 0,//EEPROM_MEM_ADDR, // TWI slave memory address data MSB
			.addr[1]      = 0,//EEPROM_MEM_ADDR,      // TWI slave memory address data LSB
			.addr_length  = 0, //sizeof (uint16_t),    // TWI slave memory address data size
			.chip         = (uint8_t) SLAVE_ADDR,      // TWI slave bus address
   80418:	4b06      	ldr	r3, [pc, #24]	; (80434 <twiReciveData+0x2c>)
   8041a:	681b      	ldr	r3, [r3, #0]
   8041c:	f88d 3014 	strb.w	r3, [sp, #20]
			.length       = packageSize   // transfer data size (bytes)
	};

// 	if(twi_probe(TWI_PORT,SLAVE_ADDR)==TWI_SUCCESS)
// 	{
	while (twi_master_read(TWI_PORT, &pkt_rcv) != TWI_SUCCESS);
   80420:	4d05      	ldr	r5, [pc, #20]	; (80438 <twiReciveData+0x30>)
   80422:	4c06      	ldr	r4, [pc, #24]	; (8043c <twiReciveData+0x34>)
   80424:	4628      	mov	r0, r5
   80426:	a901      	add	r1, sp, #4
   80428:	47a0      	blx	r4
   8042a:	2800      	cmp	r0, #0
   8042c:	d1fa      	bne.n	80424 <twiReciveData+0x1c>
// 	}
// 	else{
// 		return 0;
// 	}

}
   8042e:	2001      	movs	r0, #1
   80430:	b007      	add	sp, #28
   80432:	bd30      	pop	{r4, r5, pc}
   80434:	2007acc8 	.word	0x2007acc8
   80438:	40090000 	.word	0x40090000
   8043c:	000801cd 	.word	0x000801cd

00080440 <handleCmd>:


void handleCmd(uint8_t cmd) {
   80440:	b508      	push	{r3, lr}

	switch (cmd) {
   80442:	3802      	subs	r0, #2
   80444:	2823      	cmp	r0, #35	; 0x23
   80446:	d837      	bhi.n	804b8 <handleCmd+0x78>
   80448:	e8df f000 	tbb	[pc, r0]
   8044c:	361e1a16 	.word	0x361e1a16
   80450:	36363636 	.word	0x36363636
   80454:	36363636 	.word	0x36363636
   80458:	36363636 	.word	0x36363636
   8045c:	36363636 	.word	0x36363636
   80460:	36363636 	.word	0x36363636
   80464:	36363636 	.word	0x36363636
   80468:	2a123636 	.word	0x2a123636
   8046c:	32262e22 	.word	0x32262e22
		case TWI_CMD_ARM_INIT:
			printf("TWI_CMD_ARM_INIT\n");
   80470:	4813      	ldr	r0, [pc, #76]	; (804c0 <handleCmd+0x80>)
   80472:	4b14      	ldr	r3, [pc, #80]	; (804c4 <handleCmd+0x84>)
   80474:	4798      	blx	r3
			break;
   80476:	bd08      	pop	{r3, pc}
		case TWI_CMD_ARM_REQ_BOX_INFO:
			printf("TWI_CMD_ARM_REQ_BOX_INFO\n");
   80478:	4813      	ldr	r0, [pc, #76]	; (804c8 <handleCmd+0x88>)
   8047a:	4b12      	ldr	r3, [pc, #72]	; (804c4 <handleCmd+0x84>)
   8047c:	4798      	blx	r3
			break;
   8047e:	bd08      	pop	{r3, pc}
		case TWI_CMD_ARM_REQ_OBJ_INFO:
			printf("TWI_CMD_ARM_REQ_OBJ_INFO\n");
   80480:	4812      	ldr	r0, [pc, #72]	; (804cc <handleCmd+0x8c>)
   80482:	4b10      	ldr	r3, [pc, #64]	; (804c4 <handleCmd+0x84>)
   80484:	4798      	blx	r3
			break;
   80486:	bd08      	pop	{r3, pc}
		case TWI_CMD_ARM_REQ_COLLECT_INFO:
			printf("TWI_CMD_ARM_REQ_COLLECT_INFO\n");
   80488:	4811      	ldr	r0, [pc, #68]	; (804d0 <handleCmd+0x90>)
   8048a:	4b0e      	ldr	r3, [pc, #56]	; (804c4 <handleCmd+0x84>)
   8048c:	4798      	blx	r3
			break;
   8048e:	bd08      	pop	{r3, pc}
		case TWI_CMD_PICKUP_START:
			printf("TWI_CMD_PICKUP_START\n");
   80490:	4810      	ldr	r0, [pc, #64]	; (804d4 <handleCmd+0x94>)
   80492:	4b0c      	ldr	r3, [pc, #48]	; (804c4 <handleCmd+0x84>)
   80494:	4798      	blx	r3
			break;
   80496:	bd08      	pop	{r3, pc}
		case TWI_CMD_PICKUP_STATUS:
			printf("TWI_CMD_PICKUP_STATUS\n");
   80498:	480f      	ldr	r0, [pc, #60]	; (804d8 <handleCmd+0x98>)
   8049a:	4b0a      	ldr	r3, [pc, #40]	; (804c4 <handleCmd+0x84>)
   8049c:	4798      	blx	r3
			break;
   8049e:	bd08      	pop	{r3, pc}
		case TWI_CMD_DROPOFF_START:
			printf("TWI_CMD_DROPOFF_START\n");
   804a0:	480e      	ldr	r0, [pc, #56]	; (804dc <handleCmd+0x9c>)
   804a2:	4b08      	ldr	r3, [pc, #32]	; (804c4 <handleCmd+0x84>)
   804a4:	4798      	blx	r3
			break;
   804a6:	bd08      	pop	{r3, pc}
		case TWI_CMD_DROPOFF_STATUS:
			printf("TWI_CMD_DROPOFF_STATUS\n");
   804a8:	480d      	ldr	r0, [pc, #52]	; (804e0 <handleCmd+0xa0>)
   804aa:	4b06      	ldr	r3, [pc, #24]	; (804c4 <handleCmd+0x84>)
   804ac:	4798      	blx	r3
			break;
   804ae:	bd08      	pop	{r3, pc}
		case TWI_CMD_ERROR:
			printf("TWI_CMD_ERROR\n");
   804b0:	480c      	ldr	r0, [pc, #48]	; (804e4 <handleCmd+0xa4>)
   804b2:	4b04      	ldr	r3, [pc, #16]	; (804c4 <handleCmd+0x84>)
   804b4:	4798      	blx	r3
			break;
   804b6:	bd08      	pop	{r3, pc}
		default:
			printf("error\n");
   804b8:	480b      	ldr	r0, [pc, #44]	; (804e8 <handleCmd+0xa8>)
   804ba:	4b02      	ldr	r3, [pc, #8]	; (804c4 <handleCmd+0x84>)
   804bc:	4798      	blx	r3
   804be:	bd08      	pop	{r3, pc}
   804c0:	00085f84 	.word	0x00085f84
   804c4:	00083529 	.word	0x00083529
   804c8:	00085f98 	.word	0x00085f98
   804cc:	00085fb4 	.word	0x00085fb4
   804d0:	00085fd0 	.word	0x00085fd0
   804d4:	00085ff0 	.word	0x00085ff0
   804d8:	00086008 	.word	0x00086008
   804dc:	00086020 	.word	0x00086020
   804e0:	00086038 	.word	0x00086038
   804e4:	00086050 	.word	0x00086050
   804e8:	00086060 	.word	0x00086060

000804ec <twi_getArmInfo>:
	}
}

arminfo_t twi_getArmInfo() {
   804ec:	b510      	push	{r4, lr}
   804ee:	b082      	sub	sp, #8
   804f0:	4604      	mov	r4, r0
// 	if(theArm.hasData)
// 	{
// 		return theArm;
// 	}

	uint8_t data[3] = {0};
   804f2:	2300      	movs	r3, #0
   804f4:	f88d 3006 	strb.w	r3, [sp, #6]
	uint8_t recv[3] = {0};
   804f8:	f8ad 3000 	strh.w	r3, [sp]
   804fc:	f88d 3002 	strb.w	r3, [sp, #2]
	uint8_t result;


	data[0] = TWI_CMD_ARM_INIT;
   80500:	2320      	movs	r3, #32
   80502:	f88d 3004 	strb.w	r3, [sp, #4]
	data[1] = TWI_CMD_ARM_REQ_BOX_INFO;
   80506:	2302      	movs	r3, #2
   80508:	f88d 3005 	strb.w	r3, [sp, #5]

	//TWI_CMD_ARM_REQ_COLLECT_INFO;
	//TWI_CMD_ARM_REQ_OBJ_INFO

	result = twiSendData(data, 3);
   8050c:	a801      	add	r0, sp, #4
   8050e:	2103      	movs	r1, #3
   80510:	4b38      	ldr	r3, [pc, #224]	; (805f4 <twi_getArmInfo+0x108>)
   80512:	4798      	blx	r3
	if (result) {
   80514:	b1f0      	cbz	r0, 80554 <twi_getArmInfo+0x68>

//		vTaskDelay(pdMSTOTICKS(20));
		twiReciveData(recv, 3);
   80516:	4668      	mov	r0, sp
   80518:	2103      	movs	r1, #3
   8051a:	4b37      	ldr	r3, [pc, #220]	; (805f8 <twi_getArmInfo+0x10c>)
   8051c:	4798      	blx	r3
		//printf("111 Receive successful: %u, %u, %u\n", recv[0], recv[1], recv[2]);
		//vTaskDelay(pdMSTOTICKS(10));
		theArm.boxDistance = recv[1];
   8051e:	4b37      	ldr	r3, [pc, #220]	; (805fc <twi_getArmInfo+0x110>)
   80520:	f89d 2001 	ldrb.w	r2, [sp, #1]
   80524:	701a      	strb	r2, [r3, #0]
		theArm.boxAngle = recv[2];
   80526:	f89d 2002 	ldrb.w	r2, [sp, #2]
   8052a:	705a      	strb	r2, [r3, #1]

		//todo remove
		theArm.hasData = 1;
   8052c:	2201      	movs	r2, #1
   8052e:	715a      	strb	r2, [r3, #5]
	}

	//vTaskDelay(pdMSTOTICKS(60));

	//setup for next send
	data[0] = TWI_CMD_ARM_INIT;
   80530:	2320      	movs	r3, #32
   80532:	f88d 3004 	strb.w	r3, [sp, #4]
	data[1] = TWI_CMD_ARM_REQ_OBJ_INFO;
   80536:	2103      	movs	r1, #3
   80538:	f88d 1005 	strb.w	r1, [sp, #5]
	recv[0] = 0;
   8053c:	2300      	movs	r3, #0
   8053e:	f88d 3000 	strb.w	r3, [sp]
	recv[1] = 0;
   80542:	f88d 3001 	strb.w	r3, [sp, #1]
	recv[2] = 0;
   80546:	f88d 3002 	strb.w	r3, [sp, #2]

	result = twiSendData(data, 3);
   8054a:	a801      	add	r0, sp, #4
   8054c:	4b29      	ldr	r3, [pc, #164]	; (805f4 <twi_getArmInfo+0x108>)
   8054e:	4798      	blx	r3
	if (result) {
   80550:	b958      	cbnz	r0, 8056a <twi_getArmInfo+0x7e>
   80552:	e027      	b.n	805a4 <twi_getArmInfo+0xb8>
		theArm.boxAngle = recv[2];

		//todo remove
		theArm.hasData = 1;
	} else {
		puts("Fail 111");
   80554:	482a      	ldr	r0, [pc, #168]	; (80600 <twi_getArmInfo+0x114>)
   80556:	4b2b      	ldr	r3, [pc, #172]	; (80604 <twi_getArmInfo+0x118>)
   80558:	4798      	blx	r3
		//vTaskDelay(pdMSTOTICKS(10));
		theArm.hasData = 0;
   8055a:	4b28      	ldr	r3, [pc, #160]	; (805fc <twi_getArmInfo+0x110>)
   8055c:	2200      	movs	r2, #0
   8055e:	715a      	strb	r2, [r3, #5]
		return theArm;
   80560:	6818      	ldr	r0, [r3, #0]
   80562:	6020      	str	r0, [r4, #0]
   80564:	889b      	ldrh	r3, [r3, #4]
   80566:	80a3      	strh	r3, [r4, #4]
   80568:	e040      	b.n	805ec <twi_getArmInfo+0x100>
	recv[2] = 0;

	result = twiSendData(data, 3);
	if (result) {
		//vTaskDelay(pdMSTOTICKS(20));
		twiReciveData(recv, 3);
   8056a:	4668      	mov	r0, sp
   8056c:	2103      	movs	r1, #3
   8056e:	4b22      	ldr	r3, [pc, #136]	; (805f8 <twi_getArmInfo+0x10c>)
   80570:	4798      	blx	r3
// 			//printf("222 Receive successful: %u, %u, %u\n", recv[0], recv[1], recv[2]);
// 			//vTaskDelay(pdMSTOTICKS(10));
		theArm.objectDistance = recv[1];
   80572:	4b22      	ldr	r3, [pc, #136]	; (805fc <twi_getArmInfo+0x110>)
   80574:	f89d 2001 	ldrb.w	r2, [sp, #1]
   80578:	709a      	strb	r2, [r3, #2]
		theArm.objectAngle = recv[2];
   8057a:	f89d 2002 	ldrb.w	r2, [sp, #2]
   8057e:	70da      	strb	r2, [r3, #3]
		theArm.hasData = 1;
   80580:	2201      	movs	r2, #1
   80582:	715a      	strb	r2, [r3, #5]
		return theArm;
	}


	//data[0] = TWI_CMD_ARM_INIT;
	data[1] = TWI_CMD_ARM_REQ_COLLECT_INFO;
   80584:	2304      	movs	r3, #4
   80586:	f88d 3005 	strb.w	r3, [sp, #5]
	recv[0] = 0;
   8058a:	2300      	movs	r3, #0
   8058c:	f88d 3000 	strb.w	r3, [sp]
	recv[1] = 0;
   80590:	f88d 3001 	strb.w	r3, [sp, #1]
	recv[2] = 0;
   80594:	f88d 3002 	strb.w	r3, [sp, #2]


	result = twiSendData(data, 3);
   80598:	a801      	add	r0, sp, #4
   8059a:	2103      	movs	r1, #3
   8059c:	4b15      	ldr	r3, [pc, #84]	; (805f4 <twi_getArmInfo+0x108>)
   8059e:	4798      	blx	r3
	if (result) {
   805a0:	b1d0      	cbz	r0, 805d8 <twi_getArmInfo+0xec>
   805a2:	e00a      	b.n	805ba <twi_getArmInfo+0xce>
// 			//vTaskDelay(pdMSTOTICKS(10));
		theArm.objectDistance = recv[1];
		theArm.objectAngle = recv[2];
		theArm.hasData = 1;
	} else {
		puts("Fail 222");
   805a4:	4818      	ldr	r0, [pc, #96]	; (80608 <twi_getArmInfo+0x11c>)
   805a6:	4b17      	ldr	r3, [pc, #92]	; (80604 <twi_getArmInfo+0x118>)
   805a8:	4798      	blx	r3
		//vTaskDelay(pdMSTOTICKS(10));
		theArm.hasData = 0;
   805aa:	4b14      	ldr	r3, [pc, #80]	; (805fc <twi_getArmInfo+0x110>)
   805ac:	2200      	movs	r2, #0
   805ae:	715a      	strb	r2, [r3, #5]
		return theArm;
   805b0:	6818      	ldr	r0, [r3, #0]
   805b2:	6020      	str	r0, [r4, #0]
   805b4:	889b      	ldrh	r3, [r3, #4]
   805b6:	80a3      	strh	r3, [r4, #4]
   805b8:	e018      	b.n	805ec <twi_getArmInfo+0x100>
	result = twiSendData(data, 3);
	if (result) {

		//delay_ms(20);

		twiReciveData(recv, 3);
   805ba:	4668      	mov	r0, sp
   805bc:	2103      	movs	r1, #3
   805be:	4b0e      	ldr	r3, [pc, #56]	; (805f8 <twi_getArmInfo+0x10c>)
   805c0:	4798      	blx	r3
		//printf("333 Receive successful: %u, %u, %u\n", recv[0], recv[1], recv[2]);
		//vTaskDelay(pdMSTOTICKS(10));
		theArm.collectAll = recv[1];
   805c2:	4b0e      	ldr	r3, [pc, #56]	; (805fc <twi_getArmInfo+0x110>)
   805c4:	f89d 2001 	ldrb.w	r2, [sp, #1]
   805c8:	711a      	strb	r2, [r3, #4]
		theArm.hasData = 1;
   805ca:	2201      	movs	r2, #1
   805cc:	715a      	strb	r2, [r3, #5]
		theArm.hasData = 0;
		return theArm;
	}

	//return the armInfo
	return theArm;
   805ce:	6818      	ldr	r0, [r3, #0]
   805d0:	6020      	str	r0, [r4, #0]
   805d2:	889b      	ldrh	r3, [r3, #4]
   805d4:	80a3      	strh	r3, [r4, #4]
   805d6:	e009      	b.n	805ec <twi_getArmInfo+0x100>
		//printf("333 Receive successful: %u, %u, %u\n", recv[0], recv[1], recv[2]);
		//vTaskDelay(pdMSTOTICKS(10));
		theArm.collectAll = recv[1];
		theArm.hasData = 1;
	} else {
		puts("Fail 333");
   805d8:	480c      	ldr	r0, [pc, #48]	; (8060c <twi_getArmInfo+0x120>)
   805da:	4b0a      	ldr	r3, [pc, #40]	; (80604 <twi_getArmInfo+0x118>)
   805dc:	4798      	blx	r3
		//vTaskDelay(pdMSTOTICKS(10));
		theArm.hasData = 0;
   805de:	4b07      	ldr	r3, [pc, #28]	; (805fc <twi_getArmInfo+0x110>)
   805e0:	2200      	movs	r2, #0
   805e2:	715a      	strb	r2, [r3, #5]
		return theArm;
   805e4:	6818      	ldr	r0, [r3, #0]
   805e6:	6020      	str	r0, [r4, #0]
   805e8:	889b      	ldrh	r3, [r3, #4]
   805ea:	80a3      	strh	r3, [r4, #4]
	}

	//return the armInfo
	return theArm;
}
   805ec:	4620      	mov	r0, r4
   805ee:	b002      	add	sp, #8
   805f0:	bd10      	pop	{r4, pc}
   805f2:	bf00      	nop
   805f4:	000803bd 	.word	0x000803bd
   805f8:	00080409 	.word	0x00080409
   805fc:	2007accc 	.word	0x2007accc
   80600:	00086068 	.word	0x00086068
   80604:	00083731 	.word	0x00083731
   80608:	00086074 	.word	0x00086074
   8060c:	00086080 	.word	0x00086080

00080610 <twi_pickupStart>:
	twi_set_slave_addr(TWI_PORT, SLAVE_ADDR);

}

//send command for arm to start pickup
uint8_t twi_pickupStart() {
   80610:	b500      	push	{lr}
   80612:	b083      	sub	sp, #12

	uint8_t data[3] = {TWI_CMD_PICKUP_START, 0, 0};
   80614:	2322      	movs	r3, #34	; 0x22
   80616:	f88d 3004 	strb.w	r3, [sp, #4]
   8061a:	2300      	movs	r3, #0
   8061c:	f88d 3005 	strb.w	r3, [sp, #5]
   80620:	f88d 3006 	strb.w	r3, [sp, #6]
	//send pickup start cmd
	return twiSendData(data, 3);
   80624:	a801      	add	r0, sp, #4
   80626:	2103      	movs	r1, #3
   80628:	4b02      	ldr	r3, [pc, #8]	; (80634 <twi_pickupStart+0x24>)
   8062a:	4798      	blx	r3
}
   8062c:	b003      	add	sp, #12
   8062e:	f85d fb04 	ldr.w	pc, [sp], #4
   80632:	bf00      	nop
   80634:	000803bd 	.word	0x000803bd

00080638 <twi_pickupGetStatus>:
void twi_pickupSetCm(uint8_t cm) {
	twi_move_cm = cm;
}

//set arm in send pickup status
PickupStatus twi_pickupGetStatus() {
   80638:	b500      	push	{lr}
   8063a:	b083      	sub	sp, #12
	uint8_t data[3] = {TWI_CMD_PICKUP_STATUS, 0, 0};
   8063c:	2324      	movs	r3, #36	; 0x24
   8063e:	f88d 3004 	strb.w	r3, [sp, #4]
   80642:	2300      	movs	r3, #0
   80644:	f88d 3005 	strb.w	r3, [sp, #5]
   80648:	f88d 3006 	strb.w	r3, [sp, #6]
	uint8_t recv[3] = {0};
   8064c:	f8ad 3000 	strh.w	r3, [sp]
   80650:	f88d 3002 	strb.w	r3, [sp, #2]
	//send pickup start cmd
	if (twiSendData(data, 3)) {
   80654:	a801      	add	r0, sp, #4
   80656:	2103      	movs	r1, #3
   80658:	4b16      	ldr	r3, [pc, #88]	; (806b4 <twi_pickupGetStatus+0x7c>)
   8065a:	4798      	blx	r3
   8065c:	b318      	cbz	r0, 806a6 <twi_pickupGetStatus+0x6e>
		//get status
		twiReciveData(recv, 3);
   8065e:	4668      	mov	r0, sp
   80660:	2103      	movs	r1, #3
   80662:	4b15      	ldr	r3, [pc, #84]	; (806b8 <twi_pickupGetStatus+0x80>)
   80664:	4798      	blx	r3
		if (recv[0] == TWI_CMD_PICKUP_STATUS) {
   80666:	f89d 3000 	ldrb.w	r3, [sp]
   8066a:	2b24      	cmp	r3, #36	; 0x24
   8066c:	d10c      	bne.n	80688 <twi_pickupGetStatus+0x50>
			//printf("pickupstatus %x %u",recv[0],recv[1]);
			//vTaskDelay(pdMSTOTICKS(10));

			//when slave want to move
			if (recv[1] == PICKUP_FORWARD || recv[1] == PICKUP_BACKWARD) {
   8066e:	f89d 0001 	ldrb.w	r0, [sp, #1]
   80672:	1ec3      	subs	r3, r0, #3
   80674:	b2db      	uxtb	r3, r3
   80676:	2b01      	cmp	r3, #1
   80678:	d819      	bhi.n	806ae <twi_pickupGetStatus+0x76>
	return DROPOFF_FAILED;
}

//set pickup status. when done driving
void twi_pickupSetMasterStatus(PickupStatus newStatus) {
	twi_masterPickupStatus = newStatus;
   8067a:	4b10      	ldr	r3, [pc, #64]	; (806bc <twi_pickupGetStatus+0x84>)
   8067c:	7018      	strb	r0, [r3, #0]
	return twiSendData(data, 3);
}


void twi_pickupSetCm(uint8_t cm) {
	twi_move_cm = cm;
   8067e:	f89d 2002 	ldrb.w	r2, [sp, #2]
   80682:	4b0f      	ldr	r3, [pc, #60]	; (806c0 <twi_pickupGetStatus+0x88>)
   80684:	701a      	strb	r2, [r3, #0]
			//when slave want to move
			if (recv[1] == PICKUP_FORWARD || recv[1] == PICKUP_BACKWARD) {
				twi_pickupSetMasterStatus((PickupStatus) recv[1]);
				twi_pickupSetCm(recv[2]);
			}
			return (PickupStatus) recv[1];
   80686:	e012      	b.n	806ae <twi_pickupGetStatus+0x76>
		} else {
			puts("ERROR pickup status");
   80688:	480e      	ldr	r0, [pc, #56]	; (806c4 <twi_pickupGetStatus+0x8c>)
   8068a:	4b0f      	ldr	r3, [pc, #60]	; (806c8 <twi_pickupGetStatus+0x90>)
   8068c:	4798      	blx	r3
			printf("got: %x %u\n", recv[0], recv[0]);
   8068e:	f89d 2000 	ldrb.w	r2, [sp]
   80692:	480e      	ldr	r0, [pc, #56]	; (806cc <twi_pickupGetStatus+0x94>)
   80694:	4611      	mov	r1, r2
   80696:	4b0e      	ldr	r3, [pc, #56]	; (806d0 <twi_pickupGetStatus+0x98>)
   80698:	4798      	blx	r3
			//vTaskDelay(pdMSTOTICKS(10));
			handleCmd(recv[0]);
   8069a:	f89d 0000 	ldrb.w	r0, [sp]
   8069e:	4b0d      	ldr	r3, [pc, #52]	; (806d4 <twi_pickupGetStatus+0x9c>)
   806a0:	4798      	blx	r3
		}

	} else {
		puts("Error on send status pickup");
	}
	return PICKUP_FAILED;
   806a2:	2006      	movs	r0, #6
   806a4:	e003      	b.n	806ae <twi_pickupGetStatus+0x76>
			handleCmd(recv[0]);
			//vTaskDelay(pdMSTOTICKS(10));
		}

	} else {
		puts("Error on send status pickup");
   806a6:	480c      	ldr	r0, [pc, #48]	; (806d8 <twi_pickupGetStatus+0xa0>)
   806a8:	4b07      	ldr	r3, [pc, #28]	; (806c8 <twi_pickupGetStatus+0x90>)
   806aa:	4798      	blx	r3
	}
	return PICKUP_FAILED;
   806ac:	2006      	movs	r0, #6

}
   806ae:	b003      	add	sp, #12
   806b0:	f85d fb04 	ldr.w	pc, [sp], #4
   806b4:	000803bd 	.word	0x000803bd
   806b8:	00080409 	.word	0x00080409
   806bc:	20070138 	.word	0x20070138
   806c0:	20070a1c 	.word	0x20070a1c
   806c4:	0008608c 	.word	0x0008608c
   806c8:	00083731 	.word	0x00083731
   806cc:	000860a0 	.word	0x000860a0
   806d0:	00083529 	.word	0x00083529
   806d4:	00080441 	.word	0x00080441
   806d8:	000860ac 	.word	0x000860ac

000806dc <twi_pickupSendMovementDone>:

//send done driving
uint8_t twi_pickupSendMovementDone() {
   806dc:	b500      	push	{lr}
   806de:	b083      	sub	sp, #12
	uint8_t data[3] = {TWI_CMD_PICKUP_STATUS, PICKUP_DONE_DRIVE, 0};
   806e0:	4b0a      	ldr	r3, [pc, #40]	; (8070c <twi_pickupSendMovementDone+0x30>)
   806e2:	881a      	ldrh	r2, [r3, #0]
   806e4:	789b      	ldrb	r3, [r3, #2]
   806e6:	f8ad 2004 	strh.w	r2, [sp, #4]
   806ea:	f88d 3006 	strb.w	r3, [sp, #6]
	//send pickup start cmd
	if (twiSendData(data, 3)) {
   806ee:	a801      	add	r0, sp, #4
   806f0:	2103      	movs	r1, #3
   806f2:	4b07      	ldr	r3, [pc, #28]	; (80710 <twi_pickupSendMovementDone+0x34>)
   806f4:	4798      	blx	r3
   806f6:	4603      	mov	r3, r0
   806f8:	b118      	cbz	r0, 80702 <twi_pickupSendMovementDone+0x26>
		twi_masterPickupStatus = PICKUP_RUNNING;
   806fa:	2205      	movs	r2, #5
   806fc:	4b05      	ldr	r3, [pc, #20]	; (80714 <twi_pickupSendMovementDone+0x38>)
   806fe:	701a      	strb	r2, [r3, #0]
		//success
		return 1;
   80700:	2301      	movs	r3, #1
	} else {
		//failed
		return 0;
	}

}
   80702:	4618      	mov	r0, r3
   80704:	b003      	add	sp, #12
   80706:	f85d fb04 	ldr.w	pc, [sp], #4
   8070a:	bf00      	nop
   8070c:	00085f80 	.word	0x00085f80
   80710:	000803bd 	.word	0x000803bd
   80714:	20070138 	.word	0x20070138

00080718 <twi_dropoffStart>:

//start dropoff
uint8_t twi_dropoffStart(void) {
   80718:	b500      	push	{lr}
   8071a:	b083      	sub	sp, #12

	uint8_t data[3] = {TWI_CMD_DROPOFF_START, 0, 0};
   8071c:	2321      	movs	r3, #33	; 0x21
   8071e:	f88d 3004 	strb.w	r3, [sp, #4]
   80722:	2300      	movs	r3, #0
   80724:	f88d 3005 	strb.w	r3, [sp, #5]
   80728:	f88d 3006 	strb.w	r3, [sp, #6]
	//send pickup start cmd
	return twiSendData(data, 3);
   8072c:	a801      	add	r0, sp, #4
   8072e:	2103      	movs	r1, #3
   80730:	4b02      	ldr	r3, [pc, #8]	; (8073c <twi_dropoffStart+0x24>)
   80732:	4798      	blx	r3
}
   80734:	b003      	add	sp, #12
   80736:	f85d fb04 	ldr.w	pc, [sp], #4
   8073a:	bf00      	nop
   8073c:	000803bd 	.word	0x000803bd

00080740 <twi_dropoffGetStatus>:

//get the dropoff status
DropoffStatus twi_dropoffGetStatus(void) {
   80740:	b500      	push	{lr}
   80742:	b083      	sub	sp, #12
	uint8_t data[3] = {TWI_CMD_DROPOFF_STATUS, 0, 0};
   80744:	2323      	movs	r3, #35	; 0x23
   80746:	f88d 3004 	strb.w	r3, [sp, #4]
   8074a:	2300      	movs	r3, #0
   8074c:	f88d 3005 	strb.w	r3, [sp, #5]
   80750:	f88d 3006 	strb.w	r3, [sp, #6]
	uint8_t recv[3] = {0};
   80754:	f8ad 3000 	strh.w	r3, [sp]
   80758:	f88d 3002 	strb.w	r3, [sp, #2]
	//send pickup start cmd
	if (twiSendData(data, 3)) {
   8075c:	a801      	add	r0, sp, #4
   8075e:	2103      	movs	r1, #3
   80760:	4b11      	ldr	r3, [pc, #68]	; (807a8 <twi_dropoffGetStatus+0x68>)
   80762:	4798      	blx	r3
   80764:	b1c8      	cbz	r0, 8079a <twi_dropoffGetStatus+0x5a>
		//get status
		twiReciveData(recv, 3);
   80766:	4668      	mov	r0, sp
   80768:	2103      	movs	r1, #3
   8076a:	4b10      	ldr	r3, [pc, #64]	; (807ac <twi_dropoffGetStatus+0x6c>)
   8076c:	4798      	blx	r3
		if (recv[0] == TWI_CMD_DROPOFF_STATUS) {
   8076e:	f89d 3000 	ldrb.w	r3, [sp]
   80772:	2b23      	cmp	r3, #35	; 0x23
   80774:	d102      	bne.n	8077c <twi_dropoffGetStatus+0x3c>
			//printf("pickupstatus %x %u",recv[0],recv[1]);
			//vTaskDelay(pdMSTOTICKS(10));
			//wait here for arm to finish..

			return (DropoffStatus) recv[1];
   80776:	f89d 0001 	ldrb.w	r0, [sp, #1]
   8077a:	e012      	b.n	807a2 <twi_dropoffGetStatus+0x62>
		} else {
			puts("ERROR pickup status");
   8077c:	480c      	ldr	r0, [pc, #48]	; (807b0 <twi_dropoffGetStatus+0x70>)
   8077e:	4b0d      	ldr	r3, [pc, #52]	; (807b4 <twi_dropoffGetStatus+0x74>)
   80780:	4798      	blx	r3
			printf("got: %x %u\n", recv[0], recv[0]);
   80782:	f89d 2000 	ldrb.w	r2, [sp]
   80786:	480c      	ldr	r0, [pc, #48]	; (807b8 <twi_dropoffGetStatus+0x78>)
   80788:	4611      	mov	r1, r2
   8078a:	4b0c      	ldr	r3, [pc, #48]	; (807bc <twi_dropoffGetStatus+0x7c>)
   8078c:	4798      	blx	r3
			//vTaskDelay(pdMSTOTICKS(10));
			handleCmd(recv[0]);
   8078e:	f89d 0000 	ldrb.w	r0, [sp]
   80792:	4b0b      	ldr	r3, [pc, #44]	; (807c0 <twi_dropoffGetStatus+0x80>)
   80794:	4798      	blx	r3

	} else {
		puts("Error on send status pickup");
	}
	//error
	return DROPOFF_FAILED;
   80796:	2004      	movs	r0, #4
   80798:	e003      	b.n	807a2 <twi_dropoffGetStatus+0x62>
			handleCmd(recv[0]);
			//vTaskDelay(pdMSTOTICKS(10));
		}

	} else {
		puts("Error on send status pickup");
   8079a:	480a      	ldr	r0, [pc, #40]	; (807c4 <twi_dropoffGetStatus+0x84>)
   8079c:	4b05      	ldr	r3, [pc, #20]	; (807b4 <twi_dropoffGetStatus+0x74>)
   8079e:	4798      	blx	r3
	}
	//error
	return DROPOFF_FAILED;
   807a0:	2004      	movs	r0, #4
}
   807a2:	b003      	add	sp, #12
   807a4:	f85d fb04 	ldr.w	pc, [sp], #4
   807a8:	000803bd 	.word	0x000803bd
   807ac:	00080409 	.word	0x00080409
   807b0:	0008608c 	.word	0x0008608c
   807b4:	00083731 	.word	0x00083731
   807b8:	000860a0 	.word	0x000860a0
   807bc:	00083529 	.word	0x00083529
   807c0:	00080441 	.word	0x00080441
   807c4:	000860ac 	.word	0x000860ac

000807c8 <goToNext>:
		return 1;
	}
	return 0;
}

uint8_t goToNext(void){
   807c8:	b538      	push	{r3, r4, r5, lr}
	//decied were to go
	if(_isDonePickup)
   807ca:	4b22      	ldr	r3, [pc, #136]	; (80854 <goToNext+0x8c>)
   807cc:	781b      	ldrb	r3, [r3, #0]
   807ce:	b313      	cbz	r3, 80816 <goToNext+0x4e>
	{
		puts("_isDonePickup");
   807d0:	4821      	ldr	r0, [pc, #132]	; (80858 <goToNext+0x90>)
   807d2:	4b22      	ldr	r3, [pc, #136]	; (8085c <goToNext+0x94>)
   807d4:	4798      	blx	r3

		if(_getall)
   807d6:	4b22      	ldr	r3, [pc, #136]	; (80860 <goToNext+0x98>)
   807d8:	681b      	ldr	r3, [r3, #0]
   807da:	b163      	cbz	r3, 807f6 <goToNext+0x2e>
		{
			//go to next
			currentObj++;
   807dc:	4a21      	ldr	r2, [pc, #132]	; (80864 <goToNext+0x9c>)
   807de:	6813      	ldr	r3, [r2, #0]
   807e0:	3301      	adds	r3, #1
   807e2:	6013      	str	r3, [r2, #0]
			nextPos=currentObj;
   807e4:	4a20      	ldr	r2, [pc, #128]	; (80868 <goToNext+0xa0>)
   807e6:	6013      	str	r3, [r2, #0]
			//if at dropoff
			if(nextPos >=3)
   807e8:	2b02      	cmp	r3, #2
   807ea:	dd07      	ble.n	807fc <goToNext+0x34>
			{
				currentObj=3;
   807ec:	2203      	movs	r2, #3
   807ee:	4b1d      	ldr	r3, [pc, #116]	; (80864 <goToNext+0x9c>)
   807f0:	601a      	str	r2, [r3, #0]
				return 2;
   807f2:	2002      	movs	r0, #2
   807f4:	bd38      	pop	{r3, r4, r5, pc}
			}
			
		}
		else{
			//go to drop off
			nextPos=3;
   807f6:	2203      	movs	r2, #3
   807f8:	4b1b      	ldr	r3, [pc, #108]	; (80868 <goToNext+0xa0>)
   807fa:	601a      	str	r2, [r3, #0]
		}
		_isDonePickup=0;
   807fc:	2200      	movs	r2, #0
   807fe:	4b15      	ldr	r3, [pc, #84]	; (80854 <goToNext+0x8c>)
   80800:	701a      	strb	r2, [r3, #0]
		
		//do driving loop
		printf("Driving to %d\n",nextPos);
   80802:	4d19      	ldr	r5, [pc, #100]	; (80868 <goToNext+0xa0>)
   80804:	4819      	ldr	r0, [pc, #100]	; (8086c <goToNext+0xa4>)
   80806:	6829      	ldr	r1, [r5, #0]
   80808:	4c19      	ldr	r4, [pc, #100]	; (80870 <goToNext+0xa8>)
   8080a:	47a0      	blx	r4
		//returns 0;
		//delay...vTaskDelay
		printf("Arrived AT %d\n",nextPos);
   8080c:	4819      	ldr	r0, [pc, #100]	; (80874 <goToNext+0xac>)
   8080e:	6829      	ldr	r1, [r5, #0]
   80810:	47a0      	blx	r4
		//when done
		return 1;
   80812:	2001      	movs	r0, #1
   80814:	bd38      	pop	{r3, r4, r5, pc}
		
	}
	if(_isDoneDropoff)
   80816:	4b18      	ldr	r3, [pc, #96]	; (80878 <goToNext+0xb0>)
   80818:	781b      	ldrb	r3, [r3, #0]
   8081a:	b1c3      	cbz	r3, 8084e <goToNext+0x86>
	{
		puts("_isDoneDropoff");
   8081c:	4817      	ldr	r0, [pc, #92]	; (8087c <goToNext+0xb4>)
   8081e:	4b0f      	ldr	r3, [pc, #60]	; (8085c <goToNext+0x94>)
   80820:	4798      	blx	r3
		if(_getall == 0)
   80822:	4b0f      	ldr	r3, [pc, #60]	; (80860 <goToNext+0x98>)
   80824:	681b      	ldr	r3, [r3, #0]
   80826:	b92b      	cbnz	r3, 80834 <goToNext+0x6c>
		{
			//goto next
			currentObj++;
   80828:	4a0e      	ldr	r2, [pc, #56]	; (80864 <goToNext+0x9c>)
   8082a:	6813      	ldr	r3, [r2, #0]
   8082c:	3301      	adds	r3, #1
   8082e:	6013      	str	r3, [r2, #0]
			nextPos=currentObj;
   80830:	4a0d      	ldr	r2, [pc, #52]	; (80868 <goToNext+0xa0>)
   80832:	6013      	str	r3, [r2, #0]
		}
		else{
			//FINISHED!
		}
		_isDoneDropoff=0;
   80834:	2200      	movs	r2, #0
   80836:	4b10      	ldr	r3, [pc, #64]	; (80878 <goToNext+0xb0>)
   80838:	701a      	strb	r2, [r3, #0]
		
		//do driving loop
		printf("Driving to %d\n",nextPos);
   8083a:	4d0b      	ldr	r5, [pc, #44]	; (80868 <goToNext+0xa0>)
   8083c:	480b      	ldr	r0, [pc, #44]	; (8086c <goToNext+0xa4>)
   8083e:	6829      	ldr	r1, [r5, #0]
   80840:	4c0b      	ldr	r4, [pc, #44]	; (80870 <goToNext+0xa8>)
   80842:	47a0      	blx	r4
		//returns 0;
		//delay...vTaskDelay
		printf("Arrived AT %d\n",nextPos);
   80844:	480b      	ldr	r0, [pc, #44]	; (80874 <goToNext+0xac>)
   80846:	6829      	ldr	r1, [r5, #0]
   80848:	47a0      	blx	r4
		//when done
		return 2;
   8084a:	2002      	movs	r0, #2
   8084c:	bd38      	pop	{r3, r4, r5, pc}
	}
	return 1;
   8084e:	2001      	movs	r0, #1
}
   80850:	bd38      	pop	{r3, r4, r5, pc}
   80852:	bf00      	nop
   80854:	20070a24 	.word	0x20070a24
   80858:	00086108 	.word	0x00086108
   8085c:	00083731 	.word	0x00083731
   80860:	20070a28 	.word	0x20070a28
   80864:	20070a2c 	.word	0x20070a2c
   80868:	20070a20 	.word	0x20070a20
   8086c:	00086118 	.word	0x00086118
   80870:	00083529 	.word	0x00083529
   80874:	00086128 	.word	0x00086128
   80878:	20070a1d 	.word	0x20070a1d
   8087c:	00086138 	.word	0x00086138

00080880 <setGetAll>:
		break;
	}
}

setGetAll(uint8_t getall)
{
   80880:	b510      	push	{r4, lr}
   80882:	4604      	mov	r4, r0
	printf("collectAll= %d",getall);
   80884:	4803      	ldr	r0, [pc, #12]	; (80894 <setGetAll+0x14>)
   80886:	4621      	mov	r1, r4
   80888:	4b03      	ldr	r3, [pc, #12]	; (80898 <setGetAll+0x18>)
   8088a:	4798      	blx	r3
	_getall=getall;
   8088c:	4b03      	ldr	r3, [pc, #12]	; (8089c <setGetAll+0x1c>)
   8088e:	601c      	str	r4, [r3, #0]
   80890:	bd10      	pop	{r4, pc}
   80892:	bf00      	nop
   80894:	00086148 	.word	0x00086148
   80898:	00083529 	.word	0x00083529
   8089c:	20070a28 	.word	0x20070a28

000808a0 <setDonePickup>:
}

void setDonePickup(void)
{
   808a0:	b508      	push	{r3, lr}
	puts("setDonePickup\n");
   808a2:	4803      	ldr	r0, [pc, #12]	; (808b0 <setDonePickup+0x10>)
   808a4:	4b03      	ldr	r3, [pc, #12]	; (808b4 <setDonePickup+0x14>)
   808a6:	4798      	blx	r3
	_isDonePickup=1;
   808a8:	2201      	movs	r2, #1
   808aa:	4b03      	ldr	r3, [pc, #12]	; (808b8 <setDonePickup+0x18>)
   808ac:	701a      	strb	r2, [r3, #0]
   808ae:	bd08      	pop	{r3, pc}
   808b0:	00086158 	.word	0x00086158
   808b4:	00083731 	.word	0x00083731
   808b8:	20070a24 	.word	0x20070a24

000808bc <setDoneDropoff>:
}

void setDoneDropoff(void)
{
   808bc:	b508      	push	{r3, lr}
	puts("setDoneDropoff\n");
   808be:	4803      	ldr	r0, [pc, #12]	; (808cc <setDoneDropoff+0x10>)
   808c0:	4b03      	ldr	r3, [pc, #12]	; (808d0 <setDoneDropoff+0x14>)
   808c2:	4798      	blx	r3
	_isDoneDropoff=1;
   808c4:	2201      	movs	r2, #1
   808c6:	4b03      	ldr	r3, [pc, #12]	; (808d4 <setDoneDropoff+0x18>)
   808c8:	701a      	strb	r2, [r3, #0]
   808ca:	bd08      	pop	{r3, pc}
   808cc:	00086168 	.word	0x00086168
   808d0:	00083731 	.word	0x00083731
   808d4:	20070a1d 	.word	0x20070a1d

000808d8 <TC1_Handler>:
	// Calculate the duration in microseconds.
	uint32_t duration = (diff ) / (((CHIP_FREQ_CPU_MAX / pulse_timers[ch_n].divider)/1000)/1000);
	return duration;
}

void TC1_Handler(void) {
   808d8:	b510      	push	{r4, lr}
	tc_get_status(pulse_timers[TC1_Handler_pulse_timer_idx].tc, pulse_timers[TC1_Handler_pulse_timer_idx].tc_ch);
   808da:	4c09      	ldr	r4, [pc, #36]	; (80900 <TC1_Handler+0x28>)
   808dc:	6820      	ldr	r0, [r4, #0]
   808de:	6861      	ldr	r1, [r4, #4]
   808e0:	4b08      	ldr	r3, [pc, #32]	; (80904 <TC1_Handler+0x2c>)
   808e2:	4798      	blx	r3
	NVIC_DisableIRQ(pulse_timers[TC1_Handler_pulse_timer_idx].IRQn);
   808e4:	7b23      	ldrb	r3, [r4, #12]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
   808e6:	b259      	sxtb	r1, r3
   808e8:	0949      	lsrs	r1, r1, #5
   808ea:	f003 031f 	and.w	r3, r3, #31
   808ee:	2201      	movs	r2, #1
   808f0:	fa02 f303 	lsl.w	r3, r2, r3
   808f4:	3120      	adds	r1, #32
   808f6:	4a04      	ldr	r2, [pc, #16]	; (80908 <TC1_Handler+0x30>)
   808f8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
   808fc:	bd10      	pop	{r4, pc}
   808fe:	bf00      	nop
   80900:	2007013c 	.word	0x2007013c
   80904:	00080b85 	.word	0x00080b85
   80908:	e000e100 	.word	0xe000e100

0008090c <TC0_Handler>:
}

void TC0_Handler(void) {
   8090c:	b510      	push	{r4, lr}
	tc_get_status(pulse_timers[TC2_Handler_pulse_timer_idx].tc, pulse_timers[TC2_Handler_pulse_timer_idx].tc_ch);
   8090e:	4c09      	ldr	r4, [pc, #36]	; (80934 <TC0_Handler+0x28>)
   80910:	6a60      	ldr	r0, [r4, #36]	; 0x24
   80912:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   80914:	4b08      	ldr	r3, [pc, #32]	; (80938 <TC0_Handler+0x2c>)
   80916:	4798      	blx	r3
	NVIC_DisableIRQ(pulse_timers[TC2_Handler_pulse_timer_idx].IRQn);
   80918:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   8091c:	b259      	sxtb	r1, r3
   8091e:	0949      	lsrs	r1, r1, #5
   80920:	f003 031f 	and.w	r3, r3, #31
   80924:	2201      	movs	r2, #1
   80926:	fa02 f303 	lsl.w	r3, r2, r3
   8092a:	3120      	adds	r1, #32
   8092c:	4a03      	ldr	r2, [pc, #12]	; (8093c <TC0_Handler+0x30>)
   8092e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
   80932:	bd10      	pop	{r4, pc}
   80934:	2007013c 	.word	0x2007013c
   80938:	00080b85 	.word	0x00080b85
   8093c:	e000e100 	.word	0xe000e100

00080940 <TC0_init>:
static uint32_t disable_write_protect(uint32_t key){
	if(key == WPKEY_WPMR_PMC)
	{
		*p_PMC_WPMR &= 0;               // clear entire register just to be safe
		*p_PMC_WPMR |= WPKEY_WPMR_PMC;  // first write WPKEY = 0x504D43 to register
		*p_PMC_WPMR &= 0x11111100;      // then clear WPEN bit, mask upper bytes
   80940:	4b11      	ldr	r3, [pc, #68]	; (80988 <TC0_init+0x48>)
   80942:	4a12      	ldr	r2, [pc, #72]	; (8098c <TC0_init+0x4c>)
   80944:	6013      	str	r3, [r2, #0]
	}
}

static void enable_clock_TC0CH0(void){
	*p_TC_CCR &= ~(1 << CLKDIS); // clear disable bit
	*p_TC_CCR |= (1 << CLKEN);   // set enable bit
   80946:	4a12      	ldr	r2, [pc, #72]	; (80990 <TC0_init+0x50>)
		}
	}
}

static void enable_clock_TC0CH0(void){
	*p_TC_CCR &= ~(1 << CLKDIS); // clear disable bit
   80948:	6811      	ldr	r1, [r2, #0]
   8094a:	f021 0102 	bic.w	r1, r1, #2
	*p_TC_CCR |= (1 << CLKEN);   // set enable bit
   8094e:	f041 0101 	orr.w	r1, r1, #1
   80952:	6011      	str	r1, [r2, #0]
	else if (key == WPKEY_WPMR_TC)
	{
		enable_clock_TC0CH0();    /* in order to access TC_WPMR, the Timer Counter clock of the first channel must be enabled */	
		*p_TC_WPMR &= 0;
		*p_TC_WPMR |= WPKEY_WPMR_TC;
		*p_TC_WPMR &= 0x11111100; // disable Write Protect by clearing WPEN bit, mask upper bytes
   80954:	32e4      	adds	r2, #228	; 0xe4
   80956:	6013      	str	r3, [r2, #0]

static void enable_periph_clk(uint32_t periph_id){
	//disable_write_protect(WPKEY_WPMR_PMC);
	if(periph_id == PERIPH_ID_TCC0)
	{
		if((*p_PMC_PCSR0 & (1<<PERIPH_ID_TCC0)) != (1<<PERIPH_ID_TCC0)){  /* check status of peripheral clock corresponding to Timer Counter Channel 0 (if enabled) */
   80958:	4b0e      	ldr	r3, [pc, #56]	; (80994 <TC0_init+0x54>)
   8095a:	681b      	ldr	r3, [r3, #0]
   8095c:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
   80960:	d103      	bne.n	8096a <TC0_init+0x2a>
			*p_PMC_PCER0 = (1 << PERIPH_ID_TCC0);                         /* enable peripheral clock corresponding to Timer Counter Channel 0 */
   80962:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   80966:	4b0c      	ldr	r3, [pc, #48]	; (80998 <TC0_init+0x58>)
   80968:	601a      	str	r2, [r3, #0]
	*p_TC_CMR0 &= ~(1 << WAVE);
}

/* Set TCCLKS bits in TC_CMR (clock selected MCK/2 clock signal (from PMC)) */
static void select_clock(void){
	*p_TC_CMR0 &= 0x11111110;
   8096a:	4a0c      	ldr	r2, [pc, #48]	; (8099c <TC0_init+0x5c>)
   8096c:	6813      	ldr	r3, [r2, #0]
   8096e:	f003 3311 	and.w	r3, r3, #286331153	; 0x11111111
   80972:	f023 0301 	bic.w	r3, r3, #1
   80976:	6013      	str	r3, [r2, #0]
/* The start and stop commands are effective only if the clock is enabled */
/* A trigger resets the counter and starts the counter clock */
/* Each channel has a software trigger, available by setting SWTRG in TC_CCR */
/* A software trigger is performed: the counter is reset and the clock is started */
static void start_clock(void){
	*p_TC_CCR |= (1 << SWTRG); 
   80978:	4b05      	ldr	r3, [pc, #20]	; (80990 <TC0_init+0x50>)
		}
	}
}

static void enable_clock_TC0CH0(void){
	*p_TC_CCR &= ~(1 << CLKDIS); // clear disable bit
   8097a:	681a      	ldr	r2, [r3, #0]
   8097c:	f022 0202 	bic.w	r2, r2, #2
/* The start and stop commands are effective only if the clock is enabled */
/* A trigger resets the counter and starts the counter clock */
/* Each channel has a software trigger, available by setting SWTRG in TC_CCR */
/* A software trigger is performed: the counter is reset and the clock is started */
static void start_clock(void){
	*p_TC_CCR |= (1 << SWTRG); 
   80980:	f042 0205 	orr.w	r2, r2, #5
   80984:	601a      	str	r2, [r3, #0]
   80986:	4770      	bx	lr
   80988:	00100100 	.word	0x00100100
   8098c:	400e06e4 	.word	0x400e06e4
   80990:	40080000 	.word	0x40080000
   80994:	400e0618 	.word	0x400e0618
   80998:	400e0610 	.word	0x400e0610
   8099c:	40080004 	.word	0x40080004

000809a0 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   809a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   809a4:	460c      	mov	r4, r1
   809a6:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
   809a8:	b960      	cbnz	r0, 809c4 <_read+0x24>
		return -1;
	}

	for (; len > 0; --len) {
   809aa:	2a00      	cmp	r2, #0
   809ac:	dd0e      	ble.n	809cc <_read+0x2c>
   809ae:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   809b0:	4e09      	ldr	r6, [pc, #36]	; (809d8 <_read+0x38>)
   809b2:	4d0a      	ldr	r5, [pc, #40]	; (809dc <_read+0x3c>)
   809b4:	6830      	ldr	r0, [r6, #0]
   809b6:	4621      	mov	r1, r4
   809b8:	682b      	ldr	r3, [r5, #0]
   809ba:	4798      	blx	r3
		ptr++;
   809bc:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   809be:	42bc      	cmp	r4, r7
   809c0:	d1f8      	bne.n	809b4 <_read+0x14>
   809c2:	e006      	b.n	809d2 <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
   809c4:	f04f 30ff 	mov.w	r0, #4294967295
   809c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len > 0; --len) {
   809cc:	2000      	movs	r0, #0
   809ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
   809d2:	4640      	mov	r0, r8
	}
	return nChars;
}
   809d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   809d8:	2007acdc 	.word	0x2007acdc
   809dc:	2007acd4 	.word	0x2007acd4

000809e0 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   809e0:	6943      	ldr	r3, [r0, #20]
   809e2:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   809e6:	bf1d      	ittte	ne
   809e8:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   809ec:	61c1      	strne	r1, [r0, #28]
	return 0;
   809ee:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
   809f0:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
   809f2:	4770      	bx	lr

000809f4 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   809f4:	6943      	ldr	r3, [r0, #20]
   809f6:	f013 0f01 	tst.w	r3, #1
   809fa:	d005      	beq.n	80a08 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   809fc:	6983      	ldr	r3, [r0, #24]
   809fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
   80a02:	600b      	str	r3, [r1, #0]

	return 0;
   80a04:	2000      	movs	r0, #0
   80a06:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   80a08:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   80a0a:	4770      	bx	lr

00080a0c <USART0_Handler>:
#if SAMD || SAMR21 || SAML21
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
   80a0c:	b500      	push	{lr}
   80a0e:	b083      	sub	sp, #12
	uint8_t temp;
#if SAMD || SAMR21 || SAML21
	usart_serial_read_packet(&host_uart_module, &temp, 1);
#else
	usart_serial_read_packet(USART_HOST, &temp, 1);
   80a10:	4811      	ldr	r0, [pc, #68]	; (80a58 <USART0_Handler+0x4c>)
   80a12:	f10d 0107 	add.w	r1, sp, #7
   80a16:	2201      	movs	r2, #1
   80a18:	4b10      	ldr	r3, [pc, #64]	; (80a5c <USART0_Handler+0x50>)
   80a1a:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   80a1c:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   80a1e:	f3bf 8f5f 	dmb	sy
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
   80a22:	2200      	movs	r2, #0
   80a24:	4b0e      	ldr	r3, [pc, #56]	; (80a60 <USART0_Handler+0x54>)
   80a26:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
   80a28:	4b0e      	ldr	r3, [pc, #56]	; (80a64 <USART0_Handler+0x58>)
   80a2a:	781b      	ldrb	r3, [r3, #0]
   80a2c:	f89d 1007 	ldrb.w	r1, [sp, #7]
   80a30:	4a0d      	ldr	r2, [pc, #52]	; (80a68 <USART0_Handler+0x5c>)
   80a32:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
   80a34:	2b9b      	cmp	r3, #155	; 0x9b
   80a36:	d103      	bne.n	80a40 <USART0_Handler+0x34>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
   80a38:	2200      	movs	r2, #0
   80a3a:	4b0a      	ldr	r3, [pc, #40]	; (80a64 <USART0_Handler+0x58>)
   80a3c:	701a      	strb	r2, [r3, #0]
   80a3e:	e002      	b.n	80a46 <USART0_Handler+0x3a>
	} else {
		serial_rx_buf_tail++;
   80a40:	3301      	adds	r3, #1
   80a42:	4a08      	ldr	r2, [pc, #32]	; (80a64 <USART0_Handler+0x58>)
   80a44:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
   80a46:	2201      	movs	r2, #1
   80a48:	4b05      	ldr	r3, [pc, #20]	; (80a60 <USART0_Handler+0x54>)
   80a4a:	701a      	strb	r2, [r3, #0]
   80a4c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   80a50:	b662      	cpsie	i
}
   80a52:	b003      	add	sp, #12
   80a54:	f85d fb04 	ldr.w	pc, [sp], #4
   80a58:	40098000 	.word	0x40098000
   80a5c:	00080ac1 	.word	0x00080ac1
   80a60:	20070190 	.word	0x20070190
   80a64:	20070ad4 	.word	0x20070ad4
   80a68:	20070a38 	.word	0x20070a38

00080a6c <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   80a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80a70:	460e      	mov	r6, r1
   80a72:	4615      	mov	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   80a74:	3801      	subs	r0, #1
   80a76:	2802      	cmp	r0, #2
   80a78:	d80f      	bhi.n	80a9a <_write+0x2e>
		return -1;
	}

	for (; len != 0; --len) {
   80a7a:	b192      	cbz	r2, 80aa2 <_write+0x36>
   80a7c:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
   80a7e:	f8df 803c 	ldr.w	r8, [pc, #60]	; 80abc <_write+0x50>
   80a82:	4f0d      	ldr	r7, [pc, #52]	; (80ab8 <_write+0x4c>)
   80a84:	f8d8 0000 	ldr.w	r0, [r8]
   80a88:	5d31      	ldrb	r1, [r6, r4]
   80a8a:	683b      	ldr	r3, [r7, #0]
   80a8c:	4798      	blx	r3
   80a8e:	2800      	cmp	r0, #0
   80a90:	db0a      	blt.n	80aa8 <_write+0x3c>
			return -1;
		}
		++nChars;
   80a92:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   80a94:	42a5      	cmp	r5, r4
   80a96:	d1f5      	bne.n	80a84 <_write+0x18>
   80a98:	e00a      	b.n	80ab0 <_write+0x44>
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
   80a9a:	f04f 30ff 	mov.w	r0, #4294967295
   80a9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len != 0; --len) {
   80aa2:	2000      	movs	r0, #0
   80aa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
   80aa8:	f04f 30ff 	mov.w	r0, #4294967295
   80aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		++nChars;
   80ab0:	4620      	mov	r0, r4
	}
	return nChars;
}
   80ab2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80ab6:	bf00      	nop
   80ab8:	2007acd8 	.word	0x2007acd8
   80abc:	2007acdc 	.word	0x2007acdc

00080ac0 <usart_serial_read_packet>:
 * \param len    Length of data
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
   80ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80ac4:	b083      	sub	sp, #12
   80ac6:	4605      	mov	r5, r0
	while (len) {
   80ac8:	4690      	mov	r8, r2
   80aca:	2a00      	cmp	r2, #0
   80acc:	d047      	beq.n	80b5e <usart_serial_read_packet+0x9e>
   80ace:	1c4e      	adds	r6, r1, #1
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80ad0:	4f25      	ldr	r7, [pc, #148]	; (80b68 <usart_serial_read_packet+0xa8>)
		while (usart_read(p_usart, &val));
   80ad2:	4c26      	ldr	r4, [pc, #152]	; (80b6c <usart_serial_read_packet+0xac>)
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80ad4:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 80b80 <usart_serial_read_packet+0xc0>
	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
   80ad8:	f8df b094 	ldr.w	fp, [pc, #148]	; 80b70 <usart_serial_read_packet+0xb0>
   80adc:	f106 39ff 	add.w	r9, r6, #4294967295
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
	uint32_t val = 0;
   80ae0:	2300      	movs	r3, #0
   80ae2:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   80ae4:	4b22      	ldr	r3, [pc, #136]	; (80b70 <usart_serial_read_packet+0xb0>)
   80ae6:	429d      	cmp	r5, r3
   80ae8:	d106      	bne.n	80af8 <usart_serial_read_packet+0x38>
		while (uart_read((Uart*)p_usart, data));
   80aea:	4658      	mov	r0, fp
   80aec:	4649      	mov	r1, r9
   80aee:	4b21      	ldr	r3, [pc, #132]	; (80b74 <usart_serial_read_packet+0xb4>)
   80af0:	4798      	blx	r3
   80af2:	2800      	cmp	r0, #0
   80af4:	d1f9      	bne.n	80aea <usart_serial_read_packet+0x2a>
   80af6:	e019      	b.n	80b2c <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80af8:	4b1f      	ldr	r3, [pc, #124]	; (80b78 <usart_serial_read_packet+0xb8>)
   80afa:	429d      	cmp	r5, r3
   80afc:	d109      	bne.n	80b12 <usart_serial_read_packet+0x52>
		while (usart_read(p_usart, &val));
   80afe:	4699      	mov	r9, r3
   80b00:	4648      	mov	r0, r9
   80b02:	a901      	add	r1, sp, #4
   80b04:	47a0      	blx	r4
   80b06:	2800      	cmp	r0, #0
   80b08:	d1fa      	bne.n	80b00 <usart_serial_read_packet+0x40>
		*data = (uint8_t)(val & 0xFF);
   80b0a:	9b01      	ldr	r3, [sp, #4]
   80b0c:	f806 3c01 	strb.w	r3, [r6, #-1]
   80b10:	e017      	b.n	80b42 <usart_serial_read_packet+0x82>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80b12:	4b1a      	ldr	r3, [pc, #104]	; (80b7c <usart_serial_read_packet+0xbc>)
   80b14:	429d      	cmp	r5, r3
   80b16:	d109      	bne.n	80b2c <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
   80b18:	4699      	mov	r9, r3
   80b1a:	4648      	mov	r0, r9
   80b1c:	a901      	add	r1, sp, #4
   80b1e:	47a0      	blx	r4
   80b20:	2800      	cmp	r0, #0
   80b22:	d1fa      	bne.n	80b1a <usart_serial_read_packet+0x5a>
		*data = (uint8_t)(val & 0xFF);
   80b24:	9b01      	ldr	r3, [sp, #4]
   80b26:	f806 3c01 	strb.w	r3, [r6, #-1]
   80b2a:	e014      	b.n	80b56 <usart_serial_read_packet+0x96>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80b2c:	4555      	cmp	r5, sl
   80b2e:	d108      	bne.n	80b42 <usart_serial_read_packet+0x82>
		while (usart_read(p_usart, &val));
   80b30:	4650      	mov	r0, sl
   80b32:	a901      	add	r1, sp, #4
   80b34:	47a0      	blx	r4
   80b36:	2800      	cmp	r0, #0
   80b38:	d1fa      	bne.n	80b30 <usart_serial_read_packet+0x70>
		*data = (uint8_t)(val & 0xFF);
   80b3a:	9b01      	ldr	r3, [sp, #4]
   80b3c:	f806 3c01 	strb.w	r3, [r6, #-1]
   80b40:	e009      	b.n	80b56 <usart_serial_read_packet+0x96>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80b42:	42bd      	cmp	r5, r7
   80b44:	d107      	bne.n	80b56 <usart_serial_read_packet+0x96>
		while (usart_read(p_usart, &val));
   80b46:	4638      	mov	r0, r7
   80b48:	a901      	add	r1, sp, #4
   80b4a:	47a0      	blx	r4
   80b4c:	2800      	cmp	r0, #0
   80b4e:	d1fa      	bne.n	80b46 <usart_serial_read_packet+0x86>
		*data = (uint8_t)(val & 0xFF);
   80b50:	9b01      	ldr	r3, [sp, #4]
   80b52:	f806 3c01 	strb.w	r3, [r6, #-1]
   80b56:	3601      	adds	r6, #1
   80b58:	f1b8 0801 	subs.w	r8, r8, #1
   80b5c:	d1be      	bne.n	80adc <usart_serial_read_packet+0x1c>
		usart_serial_getchar(usart, data);
		len--;
		data++;
	}
	return STATUS_OK;
}
   80b5e:	2000      	movs	r0, #0
   80b60:	b003      	add	sp, #12
   80b62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80b66:	bf00      	nop
   80b68:	400a4000 	.word	0x400a4000
   80b6c:	000809f5 	.word	0x000809f5
   80b70:	400e0800 	.word	0x400e0800
   80b74:	00080bd5 	.word	0x00080bd5
   80b78:	40098000 	.word	0x40098000
   80b7c:	4009c000 	.word	0x4009c000
   80b80:	400a0000 	.word	0x400a0000

00080b84 <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   80b84:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
   80b88:	6a08      	ldr	r0, [r1, #32]
}
   80b8a:	4770      	bx	lr

00080b8c <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   80b8c:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   80b8e:	23ac      	movs	r3, #172	; 0xac
   80b90:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   80b92:	680a      	ldr	r2, [r1, #0]
   80b94:	684b      	ldr	r3, [r1, #4]
   80b96:	fbb2 f3f3 	udiv	r3, r2, r3
   80b9a:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   80b9c:	1e5c      	subs	r4, r3, #1
   80b9e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   80ba2:	4294      	cmp	r4, r2
   80ba4:	d80a      	bhi.n	80bbc <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
   80ba6:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   80ba8:	688b      	ldr	r3, [r1, #8]
   80baa:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   80bac:	f240 2302 	movw	r3, #514	; 0x202
   80bb0:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80bb4:	2350      	movs	r3, #80	; 0x50
   80bb6:	6003      	str	r3, [r0, #0]

	return 0;
   80bb8:	2000      	movs	r0, #0
   80bba:	e000      	b.n	80bbe <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
   80bbc:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
   80bbe:	f85d 4b04 	ldr.w	r4, [sp], #4
   80bc2:	4770      	bx	lr

00080bc4 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   80bc4:	6943      	ldr	r3, [r0, #20]
   80bc6:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   80bca:	bf1a      	itte	ne
   80bcc:	61c1      	strne	r1, [r0, #28]
	return 0;
   80bce:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
   80bd0:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
   80bd2:	4770      	bx	lr

00080bd4 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   80bd4:	6943      	ldr	r3, [r0, #20]
   80bd6:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   80bda:	bf1d      	ittte	ne
   80bdc:	6983      	ldrne	r3, [r0, #24]
   80bde:	700b      	strbne	r3, [r1, #0]
	return 0;
   80be0:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
   80be2:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
   80be4:	4770      	bx	lr
   80be6:	bf00      	nop

00080be8 <vListInitialise>:
void vListInitialise( xList *pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
   80be8:	f100 0308 	add.w	r3, r0, #8
   80bec:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   80bee:	f04f 32ff 	mov.w	r2, #4294967295
   80bf2:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
   80bf4:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
   80bf6:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
   80bf8:	2300      	movs	r3, #0
   80bfa:	6003      	str	r3, [r0, #0]
   80bfc:	4770      	bx	lr
   80bfe:	bf00      	nop

00080c00 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   80c00:	2300      	movs	r3, #0
   80c02:	6103      	str	r3, [r0, #16]
   80c04:	4770      	bx	lr
   80c06:	bf00      	nop

00080c08 <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
   80c08:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
   80c0a:	685a      	ldr	r2, [r3, #4]
   80c0c:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
   80c0e:	6842      	ldr	r2, [r0, #4]
   80c10:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   80c12:	685a      	ldr	r2, [r3, #4]
   80c14:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
   80c16:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
   80c18:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   80c1a:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   80c1c:	6803      	ldr	r3, [r0, #0]
   80c1e:	3301      	adds	r3, #1
   80c20:	6003      	str	r3, [r0, #0]
   80c22:	4770      	bx	lr

00080c24 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
   80c24:	b410      	push	{r4}
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
   80c26:	680c      	ldr	r4, [r1, #0]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   80c28:	f1b4 3fff 	cmp.w	r4, #4294967295
   80c2c:	d101      	bne.n	80c32 <vListInsert+0xe>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   80c2e:	6903      	ldr	r3, [r0, #16]
   80c30:	e00a      	b.n	80c48 <vListInsert+0x24>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
   80c32:	f100 0308 	add.w	r3, r0, #8
   80c36:	68c2      	ldr	r2, [r0, #12]
   80c38:	6812      	ldr	r2, [r2, #0]
   80c3a:	4294      	cmp	r4, r2
   80c3c:	d304      	bcc.n	80c48 <vListInsert+0x24>
   80c3e:	685b      	ldr	r3, [r3, #4]
   80c40:	685a      	ldr	r2, [r3, #4]
   80c42:	6812      	ldr	r2, [r2, #0]
   80c44:	4294      	cmp	r4, r2
   80c46:	d2fa      	bcs.n	80c3e <vListInsert+0x1a>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   80c48:	685a      	ldr	r2, [r3, #4]
   80c4a:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   80c4c:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
   80c4e:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
   80c50:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   80c52:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   80c54:	6803      	ldr	r3, [r0, #0]
   80c56:	3301      	adds	r3, #1
   80c58:	6003      	str	r3, [r0, #0]
}
   80c5a:	f85d 4b04 	ldr.w	r4, [sp], #4
   80c5e:	4770      	bx	lr

00080c60 <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   80c60:	6843      	ldr	r3, [r0, #4]
   80c62:	6882      	ldr	r2, [r0, #8]
   80c64:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   80c66:	6883      	ldr	r3, [r0, #8]
   80c68:	6842      	ldr	r2, [r0, #4]
   80c6a:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
   80c6c:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   80c6e:	685a      	ldr	r2, [r3, #4]
   80c70:	4282      	cmp	r2, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   80c72:	bf04      	itt	eq
   80c74:	6882      	ldreq	r2, [r0, #8]
   80c76:	605a      	streq	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
   80c78:	2200      	movs	r2, #0
   80c7a:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
   80c7c:	681a      	ldr	r2, [r3, #0]
   80c7e:	3a01      	subs	r2, #1
   80c80:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   80c82:	6818      	ldr	r0, [r3, #0]
}
   80c84:	4770      	bx	lr
   80c86:	bf00      	nop

00080c88 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
   80c88:	4803      	ldr	r0, [pc, #12]	; (80c98 <prvPortStartFirstTask+0x10>)
   80c8a:	6800      	ldr	r0, [r0, #0]
   80c8c:	6800      	ldr	r0, [r0, #0]
   80c8e:	f380 8808 	msr	MSP, r0
   80c92:	b662      	cpsie	i
   80c94:	df00      	svc	0
   80c96:	bf00      	nop
   80c98:	e000ed08 	.word	0xe000ed08

00080c9c <pxPortInitialiseStack>:
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   80c9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   80ca0:	f840 3c04 	str.w	r3, [r0, #-4]
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
   80ca4:	f840 1c08 	str.w	r1, [r0, #-8]
	pxTopOfStack--;
	*pxTopOfStack = 0;	/* LR */
   80ca8:	2300      	movs	r3, #0
   80caa:	f840 3c0c 	str.w	r3, [r0, #-12]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
   80cae:	f840 2c20 	str.w	r2, [r0, #-32]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
   80cb2:	3840      	subs	r0, #64	; 0x40
   80cb4:	4770      	bx	lr
   80cb6:	bf00      	nop

00080cb8 <SVC_Handler>:
/*-----------------------------------------------------------*/

__attribute__ (( naked )) void SVC_Handler( void )
{
	__asm volatile (
   80cb8:	4b06      	ldr	r3, [pc, #24]	; (80cd4 <pxCurrentTCBConst2>)
   80cba:	6819      	ldr	r1, [r3, #0]
   80cbc:	6808      	ldr	r0, [r1, #0]
   80cbe:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80cc2:	f380 8809 	msr	PSP, r0
   80cc6:	f04f 0000 	mov.w	r0, #0
   80cca:	f380 8811 	msr	BASEPRI, r0
   80cce:	f04e 0e0d 	orr.w	lr, lr, #13
   80cd2:	4770      	bx	lr

00080cd4 <pxCurrentTCBConst2>:
   80cd4:	2007ab9c 	.word	0x2007ab9c

00080cd8 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   80cd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80cdc:	4b01      	ldr	r3, [pc, #4]	; (80ce4 <vPortYieldFromISR+0xc>)
   80cde:	601a      	str	r2, [r3, #0]
   80ce0:	4770      	bx	lr
   80ce2:	bf00      	nop
   80ce4:	e000ed04 	.word	0xe000ed04

00080ce8 <ulPortSetInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
   80ce8:	f3ef 8011 	mrs	r0, BASEPRI
   80cec:	f04f 01a0 	mov.w	r1, #160	; 0xa0
   80cf0:	f381 8811 	msr	BASEPRI, r1
   80cf4:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
}
   80cf6:	2000      	movs	r0, #0

00080cf8 <vPortEnterCritical>:
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   80cf8:	b508      	push	{r3, lr}
	portDISABLE_INTERRUPTS();
   80cfa:	4b03      	ldr	r3, [pc, #12]	; (80d08 <vPortEnterCritical+0x10>)
   80cfc:	4798      	blx	r3
	uxCriticalNesting++;
   80cfe:	4b03      	ldr	r3, [pc, #12]	; (80d0c <vPortEnterCritical+0x14>)
   80d00:	681a      	ldr	r2, [r3, #0]
   80d02:	3201      	adds	r2, #1
   80d04:	601a      	str	r2, [r3, #0]
   80d06:	bd08      	pop	{r3, pc}
   80d08:	00080ce9 	.word	0x00080ce9
   80d0c:	20070184 	.word	0x20070184

00080d10 <vPortClearInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
   80d10:	f380 8811 	msr	BASEPRI, r0
   80d14:	4770      	bx	lr
   80d16:	bf00      	nop

00080d18 <vPortExitCritical>:
	uxCriticalNesting++;
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   80d18:	b508      	push	{r3, lr}
	uxCriticalNesting--;
   80d1a:	4a04      	ldr	r2, [pc, #16]	; (80d2c <vPortExitCritical+0x14>)
   80d1c:	6813      	ldr	r3, [r2, #0]
   80d1e:	3b01      	subs	r3, #1
   80d20:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
   80d22:	b913      	cbnz	r3, 80d2a <vPortExitCritical+0x12>
	{
		portENABLE_INTERRUPTS();
   80d24:	2000      	movs	r0, #0
   80d26:	4b02      	ldr	r3, [pc, #8]	; (80d30 <vPortExitCritical+0x18>)
   80d28:	4798      	blx	r3
   80d2a:	bd08      	pop	{r3, pc}
   80d2c:	20070184 	.word	0x20070184
   80d30:	00080d11 	.word	0x00080d11

00080d34 <PendSV_Handler>:

__attribute__(( naked )) void PendSV_Handler( void )
{
	/* This is a naked function. */

	__asm volatile
   80d34:	f3ef 8009 	mrs	r0, PSP
   80d38:	4b0c      	ldr	r3, [pc, #48]	; (80d6c <pxCurrentTCBConst>)
   80d3a:	681a      	ldr	r2, [r3, #0]
   80d3c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80d40:	6010      	str	r0, [r2, #0]
   80d42:	e92d 4008 	stmdb	sp!, {r3, lr}
   80d46:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   80d4a:	f380 8811 	msr	BASEPRI, r0
   80d4e:	f000 fe8b 	bl	81a68 <vTaskSwitchContext>
   80d52:	f04f 0000 	mov.w	r0, #0
   80d56:	f380 8811 	msr	BASEPRI, r0
   80d5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   80d5e:	6819      	ldr	r1, [r3, #0]
   80d60:	6808      	ldr	r0, [r1, #0]
   80d62:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80d66:	f380 8809 	msr	PSP, r0
   80d6a:	4770      	bx	lr

00080d6c <pxCurrentTCBConst>:
   80d6c:	2007ab9c 	.word	0x2007ab9c

00080d70 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void SysTick_Handler( void )
{
   80d70:	b508      	push	{r3, lr}
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   80d72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80d76:	4b05      	ldr	r3, [pc, #20]	; (80d8c <SysTick_Handler+0x1c>)
   80d78:	601a      	str	r2, [r3, #0]
	to generate the tick interrupt. */
	#if configUSE_TICKLESS_IDLE == 1
		portNVIC_SYSTICK_LOAD_REG = ulTimerReloadValueForOneTick;
	#endif

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
   80d7a:	4b05      	ldr	r3, [pc, #20]	; (80d90 <SysTick_Handler+0x20>)
   80d7c:	4798      	blx	r3
	{
		vTaskIncrementTick();
   80d7e:	4b05      	ldr	r3, [pc, #20]	; (80d94 <SysTick_Handler+0x24>)
   80d80:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
   80d82:	2000      	movs	r0, #0
   80d84:	4b04      	ldr	r3, [pc, #16]	; (80d98 <SysTick_Handler+0x28>)
   80d86:	4798      	blx	r3
   80d88:	bd08      	pop	{r3, pc}
   80d8a:	bf00      	nop
   80d8c:	e000ed04 	.word	0xe000ed04
   80d90:	00080ce9 	.word	0x00080ce9
   80d94:	00081775 	.word	0x00081775
   80d98:	00080d11 	.word	0x00080d11

00080d9c <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = 45UL / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;;
   80d9c:	4a03      	ldr	r2, [pc, #12]	; (80dac <vPortSetupTimerInterrupt+0x10>)
   80d9e:	4b04      	ldr	r3, [pc, #16]	; (80db0 <vPortSetupTimerInterrupt+0x14>)
   80da0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
   80da2:	2207      	movs	r2, #7
   80da4:	3b04      	subs	r3, #4
   80da6:	601a      	str	r2, [r3, #0]
   80da8:	4770      	bx	lr
   80daa:	bf00      	nop
   80dac:	0001481f 	.word	0x0001481f
   80db0:	e000e014 	.word	0xe000e014

00080db4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
   80db4:	b510      	push	{r4, lr}
	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
	See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
   80db6:	4b09      	ldr	r3, [pc, #36]	; (80ddc <xPortStartScheduler+0x28>)
   80db8:	681a      	ldr	r2, [r3, #0]
   80dba:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
   80dbe:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
   80dc0:	681a      	ldr	r2, [r3, #0]
   80dc2:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
   80dc6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
   80dc8:	4b05      	ldr	r3, [pc, #20]	; (80de0 <xPortStartScheduler+0x2c>)
   80dca:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   80dcc:	2400      	movs	r4, #0
   80dce:	4b05      	ldr	r3, [pc, #20]	; (80de4 <xPortStartScheduler+0x30>)
   80dd0:	601c      	str	r4, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
   80dd2:	4b05      	ldr	r3, [pc, #20]	; (80de8 <xPortStartScheduler+0x34>)
   80dd4:	4798      	blx	r3

	/* Should not get here! */
	return 0;
}
   80dd6:	4620      	mov	r0, r4
   80dd8:	bd10      	pop	{r4, pc}
   80dda:	bf00      	nop
   80ddc:	e000ed20 	.word	0xe000ed20
   80de0:	00080d9d 	.word	0x00080d9d
   80de4:	20070184 	.word	0x20070184
   80de8:	00080c89 	.word	0x00080c89

00080dec <prvInsertBlockIntoFreeList>:
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
   80dec:	b430      	push	{r4, r5}
xBlockLink *pxIterator;
unsigned char *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
   80dee:	4a13      	ldr	r2, [pc, #76]	; (80e3c <prvInsertBlockIntoFreeList+0x50>)
   80df0:	6813      	ldr	r3, [r2, #0]
   80df2:	4283      	cmp	r3, r0
   80df4:	d201      	bcs.n	80dfa <prvInsertBlockIntoFreeList+0xe>
   80df6:	461a      	mov	r2, r3
   80df8:	e7fa      	b.n	80df0 <prvInsertBlockIntoFreeList+0x4>
   80dfa:	4611      	mov	r1, r2
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */	
	puc = ( unsigned char * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
   80dfc:	6854      	ldr	r4, [r2, #4]
   80dfe:	1915      	adds	r5, r2, r4
   80e00:	4285      	cmp	r5, r0
   80e02:	d103      	bne.n	80e0c <prvInsertBlockIntoFreeList+0x20>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
   80e04:	6868      	ldr	r0, [r5, #4]
   80e06:	4404      	add	r4, r0
   80e08:	6054      	str	r4, [r2, #4]
   80e0a:	4610      	mov	r0, r2
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( unsigned char * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
   80e0c:	6842      	ldr	r2, [r0, #4]
   80e0e:	1884      	adds	r4, r0, r2
   80e10:	42a3      	cmp	r3, r4
   80e12:	d10c      	bne.n	80e2e <prvInsertBlockIntoFreeList+0x42>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
   80e14:	4c0a      	ldr	r4, [pc, #40]	; (80e40 <prvInsertBlockIntoFreeList+0x54>)
   80e16:	6824      	ldr	r4, [r4, #0]
   80e18:	429c      	cmp	r4, r3
   80e1a:	d006      	beq.n	80e2a <prvInsertBlockIntoFreeList+0x3e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
   80e1c:	685b      	ldr	r3, [r3, #4]
   80e1e:	441a      	add	r2, r3
   80e20:	6042      	str	r2, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
   80e22:	680b      	ldr	r3, [r1, #0]
   80e24:	681b      	ldr	r3, [r3, #0]
   80e26:	6003      	str	r3, [r0, #0]
   80e28:	e002      	b.n	80e30 <prvInsertBlockIntoFreeList+0x44>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
   80e2a:	6003      	str	r3, [r0, #0]
   80e2c:	e000      	b.n	80e30 <prvInsertBlockIntoFreeList+0x44>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;		
   80e2e:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
   80e30:	4281      	cmp	r1, r0
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
   80e32:	bf18      	it	ne
   80e34:	6008      	strne	r0, [r1, #0]
	}
}
   80e36:	bc30      	pop	{r4, r5}
   80e38:	4770      	bx	lr
   80e3a:	bf00      	nop
   80e3c:	2007aadc 	.word	0x2007aadc
   80e40:	2007aad8 	.word	0x2007aad8

00080e44 <pvPortMalloc>:
/* STATIC FUNCTIONS ARE DEFINED AS MACROS TO MINIMIZE THE FUNCTION CALL DEPTH. */

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   80e44:	b538      	push	{r3, r4, r5, lr}
   80e46:	4604      	mov	r4, r0
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
   80e48:	4b28      	ldr	r3, [pc, #160]	; (80eec <pvPortMalloc+0xa8>)
   80e4a:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
   80e4c:	4b28      	ldr	r3, [pc, #160]	; (80ef0 <pvPortMalloc+0xac>)
   80e4e:	681b      	ldr	r3, [r3, #0]
   80e50:	b99b      	cbnz	r3, 80e7a <pvPortMalloc+0x36>
	/* Ensure the start of the heap is aligned. */
	configASSERT( ( ( ( unsigned long ) xHeap.ucHeap ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;
   80e52:	4a28      	ldr	r2, [pc, #160]	; (80ef4 <pvPortMalloc+0xb0>)
   80e54:	4b28      	ldr	r3, [pc, #160]	; (80ef8 <pvPortMalloc+0xb4>)
   80e56:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
   80e58:	2100      	movs	r1, #0
   80e5a:	6051      	str	r1, [r2, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	pucHeapEnd = xHeap.ucHeap + xTotalHeapSize;
	pucHeapEnd -= heapSTRUCT_SIZE;
	pxEnd = ( void * ) pucHeapEnd;
   80e5c:	f649 72f0 	movw	r2, #40944	; 0x9ff0
   80e60:	1898      	adds	r0, r3, r2
   80e62:	4d23      	ldr	r5, [pc, #140]	; (80ef0 <pvPortMalloc+0xac>)
   80e64:	6028      	str	r0, [r5, #0]
	configASSERT( ( ( ( unsigned long ) pxEnd ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );
	pxEnd->xBlockSize = 0;
   80e66:	f649 75f4 	movw	r5, #40948	; 0x9ff4
   80e6a:	5159      	str	r1, [r3, r5]
	pxEnd->pxNextFreeBlock = NULL;
   80e6c:	5099      	str	r1, [r3, r2]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) xHeap.ucHeap;
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
   80e6e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
   80e70:	6018      	str	r0, [r3, #0]

	/* The heap now contains pxEnd. */
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
   80e72:	4b22      	ldr	r3, [pc, #136]	; (80efc <pvPortMalloc+0xb8>)
   80e74:	681a      	ldr	r2, [r3, #0]
   80e76:	3a10      	subs	r2, #16
   80e78:	601a      	str	r2, [r3, #0]
			prvHeapInit();
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
   80e7a:	2c00      	cmp	r4, #0
   80e7c:	d02d      	beq.n	80eda <pvPortMalloc+0x96>
		{
			xWantedSize += heapSTRUCT_SIZE;
   80e7e:	f104 0210 	add.w	r2, r4, #16

			/* Ensure that blocks are always aligned to the required number of 
			bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   80e82:	f012 0f07 	tst.w	r2, #7
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   80e86:	bf1c      	itt	ne
   80e88:	f022 0207 	bicne.w	r2, r2, #7
   80e8c:	3208      	addne	r2, #8
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < xTotalHeapSize ) )
   80e8e:	1e51      	subs	r1, r2, #1
   80e90:	f649 73fe 	movw	r3, #40958	; 0x9ffe
   80e94:	4299      	cmp	r1, r3
   80e96:	d822      	bhi.n	80ede <pvPortMalloc+0x9a>
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
   80e98:	4916      	ldr	r1, [pc, #88]	; (80ef4 <pvPortMalloc+0xb0>)
   80e9a:	680c      	ldr	r4, [r1, #0]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   80e9c:	6863      	ldr	r3, [r4, #4]
   80e9e:	429a      	cmp	r2, r3
   80ea0:	d904      	bls.n	80eac <pvPortMalloc+0x68>
   80ea2:	6823      	ldr	r3, [r4, #0]
   80ea4:	b113      	cbz	r3, 80eac <pvPortMalloc+0x68>
   80ea6:	4621      	mov	r1, r4
			{
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
   80ea8:	461c      	mov	r4, r3
   80eaa:	e7f7      	b.n	80e9c <pvPortMalloc+0x58>
			}

			/* If the end marker was reached then a block of adequate size was
			not found. */
			if( pxBlock != pxEnd )
   80eac:	4b10      	ldr	r3, [pc, #64]	; (80ef0 <pvPortMalloc+0xac>)
   80eae:	681b      	ldr	r3, [r3, #0]
   80eb0:	429c      	cmp	r4, r3
   80eb2:	d016      	beq.n	80ee2 <pvPortMalloc+0x9e>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
   80eb4:	680d      	ldr	r5, [r1, #0]
   80eb6:	3510      	adds	r5, #16

				/* This block is being returned for use so must be taken out of
				the	list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
   80eb8:	6823      	ldr	r3, [r4, #0]
   80eba:	600b      	str	r3, [r1, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
   80ebc:	6863      	ldr	r3, [r4, #4]
   80ebe:	1a9b      	subs	r3, r3, r2
   80ec0:	2b20      	cmp	r3, #32
   80ec2:	d904      	bls.n	80ece <pvPortMalloc+0x8a>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
   80ec4:	18a0      	adds	r0, r4, r2

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
   80ec6:	6043      	str	r3, [r0, #4]
					pxBlock->xBlockSize = xWantedSize;
   80ec8:	6062      	str	r2, [r4, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
   80eca:	4b0d      	ldr	r3, [pc, #52]	; (80f00 <pvPortMalloc+0xbc>)
   80ecc:	4798      	blx	r3
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
   80ece:	4b0b      	ldr	r3, [pc, #44]	; (80efc <pvPortMalloc+0xb8>)
   80ed0:	681a      	ldr	r2, [r3, #0]
   80ed2:	6861      	ldr	r1, [r4, #4]
   80ed4:	1a52      	subs	r2, r2, r1
   80ed6:	601a      	str	r2, [r3, #0]
   80ed8:	e004      	b.n	80ee4 <pvPortMalloc+0xa0>
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
   80eda:	2500      	movs	r5, #0
   80edc:	e002      	b.n	80ee4 <pvPortMalloc+0xa0>
   80ede:	2500      	movs	r5, #0
   80ee0:	e000      	b.n	80ee4 <pvPortMalloc+0xa0>
   80ee2:	2500      	movs	r5, #0

				xFreeBytesRemaining -= pxBlock->xBlockSize;
			}
		}
	}
	xTaskResumeAll();
   80ee4:	4b07      	ldr	r3, [pc, #28]	; (80f04 <pvPortMalloc+0xc0>)
   80ee6:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
}
   80ee8:	4628      	mov	r0, r5
   80eea:	bd38      	pop	{r3, r4, r5, pc}
   80eec:	00081745 	.word	0x00081745
   80ef0:	2007aad8 	.word	0x2007aad8
   80ef4:	2007aadc 	.word	0x2007aadc
   80ef8:	20070ad8 	.word	0x20070ad8
   80efc:	20070188 	.word	0x20070188
   80f00:	00080ded 	.word	0x00080ded
   80f04:	00081895 	.word	0x00081895

00080f08 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   80f08:	b510      	push	{r4, lr}
unsigned char *puc = ( unsigned char * ) pv;
xBlockLink *pxLink;

	if( pv != NULL )
   80f0a:	4604      	mov	r4, r0
   80f0c:	b168      	cbz	r0, 80f2a <vPortFree+0x22>
		puc -= heapSTRUCT_SIZE;

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		vTaskSuspendAll();
   80f0e:	4b07      	ldr	r3, [pc, #28]	; (80f2c <vPortFree+0x24>)
   80f10:	4798      	blx	r3
		{
			/* Add this block to the list of free blocks. */
			xFreeBytesRemaining += pxLink->xBlockSize;
   80f12:	4b07      	ldr	r3, [pc, #28]	; (80f30 <vPortFree+0x28>)
   80f14:	6819      	ldr	r1, [r3, #0]
   80f16:	f854 2c0c 	ldr.w	r2, [r4, #-12]
   80f1a:	440a      	add	r2, r1
   80f1c:	601a      	str	r2, [r3, #0]
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );			
   80f1e:	f1a4 0010 	sub.w	r0, r4, #16
   80f22:	4b04      	ldr	r3, [pc, #16]	; (80f34 <vPortFree+0x2c>)
   80f24:	4798      	blx	r3
		}
		xTaskResumeAll();
   80f26:	4b04      	ldr	r3, [pc, #16]	; (80f38 <vPortFree+0x30>)
   80f28:	4798      	blx	r3
   80f2a:	bd10      	pop	{r4, pc}
   80f2c:	00081745 	.word	0x00081745
   80f30:	20070188 	.word	0x20070188
   80f34:	00080ded 	.word	0x00080ded
   80f38:	00081895 	.word	0x00081895

00080f3c <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
   80f3c:	b510      	push	{r4, lr}
   80f3e:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
   80f40:	6c03      	ldr	r3, [r0, #64]	; 0x40
   80f42:	b93b      	cbnz	r3, 80f54 <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   80f44:	6803      	ldr	r3, [r0, #0]
   80f46:	bb1b      	cbnz	r3, 80f90 <prvCopyDataToQueue+0x54>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   80f48:	6840      	ldr	r0, [r0, #4]
   80f4a:	4b13      	ldr	r3, [pc, #76]	; (80f98 <prvCopyDataToQueue+0x5c>)
   80f4c:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
   80f4e:	2300      	movs	r3, #0
   80f50:	6063      	str	r3, [r4, #4]
   80f52:	e01d      	b.n	80f90 <prvCopyDataToQueue+0x54>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
   80f54:	b96a      	cbnz	r2, 80f72 <prvCopyDataToQueue+0x36>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   80f56:	6880      	ldr	r0, [r0, #8]
   80f58:	461a      	mov	r2, r3
   80f5a:	4b10      	ldr	r3, [pc, #64]	; (80f9c <prvCopyDataToQueue+0x60>)
   80f5c:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   80f5e:	68a2      	ldr	r2, [r4, #8]
   80f60:	6c23      	ldr	r3, [r4, #64]	; 0x40
   80f62:	4413      	add	r3, r2
   80f64:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
   80f66:	6862      	ldr	r2, [r4, #4]
   80f68:	4293      	cmp	r3, r2
   80f6a:	d311      	bcc.n	80f90 <prvCopyDataToQueue+0x54>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   80f6c:	6823      	ldr	r3, [r4, #0]
   80f6e:	60a3      	str	r3, [r4, #8]
   80f70:	e00e      	b.n	80f90 <prvCopyDataToQueue+0x54>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   80f72:	68c0      	ldr	r0, [r0, #12]
   80f74:	461a      	mov	r2, r3
   80f76:	4b09      	ldr	r3, [pc, #36]	; (80f9c <prvCopyDataToQueue+0x60>)
   80f78:	4798      	blx	r3
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
   80f7a:	6c22      	ldr	r2, [r4, #64]	; 0x40
   80f7c:	4252      	negs	r2, r2
   80f7e:	68e3      	ldr	r3, [r4, #12]
   80f80:	4413      	add	r3, r2
   80f82:	60e3      	str	r3, [r4, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
   80f84:	6821      	ldr	r1, [r4, #0]
   80f86:	428b      	cmp	r3, r1
   80f88:	d202      	bcs.n	80f90 <prvCopyDataToQueue+0x54>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   80f8a:	6863      	ldr	r3, [r4, #4]
   80f8c:	441a      	add	r2, r3
   80f8e:	60e2      	str	r2, [r4, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
   80f90:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   80f92:	3301      	adds	r3, #1
   80f94:	63a3      	str	r3, [r4, #56]	; 0x38
   80f96:	bd10      	pop	{r4, pc}
   80f98:	00081d81 	.word	0x00081d81
   80f9c:	00083551 	.word	0x00083551

00080fa0 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
   80fa0:	b538      	push	{r3, r4, r5, lr}
   80fa2:	4603      	mov	r3, r0
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
   80fa4:	6805      	ldr	r5, [r0, #0]
   80fa6:	b15d      	cbz	r5, 80fc0 <prvCopyDataFromQueue+0x20>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
   80fa8:	6c02      	ldr	r2, [r0, #64]	; 0x40
   80faa:	68c4      	ldr	r4, [r0, #12]
   80fac:	4414      	add	r4, r2
   80fae:	60c4      	str	r4, [r0, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
   80fb0:	6840      	ldr	r0, [r0, #4]
   80fb2:	4284      	cmp	r4, r0
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
   80fb4:	bf28      	it	cs
   80fb6:	60dd      	strcs	r5, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
   80fb8:	4608      	mov	r0, r1
   80fba:	68d9      	ldr	r1, [r3, #12]
   80fbc:	4b01      	ldr	r3, [pc, #4]	; (80fc4 <prvCopyDataFromQueue+0x24>)
   80fbe:	4798      	blx	r3
   80fc0:	bd38      	pop	{r3, r4, r5, pc}
   80fc2:	bf00      	nop
   80fc4:	00083551 	.word	0x00083551

00080fc8 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
   80fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80fca:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   80fcc:	4b1d      	ldr	r3, [pc, #116]	; (81044 <prvUnlockQueue+0x7c>)
   80fce:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   80fd0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80fd2:	2b00      	cmp	r3, #0
   80fd4:	dd12      	ble.n	80ffc <prvUnlockQueue+0x34>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80fd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   80fd8:	b183      	cbz	r3, 80ffc <prvUnlockQueue+0x34>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   80fda:	f104 0624 	add.w	r6, r4, #36	; 0x24
   80fde:	4d1a      	ldr	r5, [pc, #104]	; (81048 <prvUnlockQueue+0x80>)
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   80fe0:	4f1a      	ldr	r7, [pc, #104]	; (8104c <prvUnlockQueue+0x84>)
   80fe2:	e001      	b.n	80fe8 <prvUnlockQueue+0x20>
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80fe4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   80fe6:	b14b      	cbz	r3, 80ffc <prvUnlockQueue+0x34>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   80fe8:	4630      	mov	r0, r6
   80fea:	47a8      	blx	r5
   80fec:	b100      	cbz	r0, 80ff0 <prvUnlockQueue+0x28>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   80fee:	47b8      	blx	r7
				}

				--( pxQueue->xTxLock );
   80ff0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80ff2:	3b01      	subs	r3, #1
   80ff4:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   80ff6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80ff8:	2b00      	cmp	r3, #0
   80ffa:	dcf3      	bgt.n	80fe4 <prvUnlockQueue+0x1c>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
   80ffc:	f04f 33ff 	mov.w	r3, #4294967295
   81000:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
   81002:	4b13      	ldr	r3, [pc, #76]	; (81050 <prvUnlockQueue+0x88>)
   81004:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   81006:	4b0f      	ldr	r3, [pc, #60]	; (81044 <prvUnlockQueue+0x7c>)
   81008:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   8100a:	6c63      	ldr	r3, [r4, #68]	; 0x44
   8100c:	2b00      	cmp	r3, #0
   8100e:	dd12      	ble.n	81036 <prvUnlockQueue+0x6e>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   81010:	6923      	ldr	r3, [r4, #16]
   81012:	b183      	cbz	r3, 81036 <prvUnlockQueue+0x6e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   81014:	f104 0610 	add.w	r6, r4, #16
   81018:	4d0b      	ldr	r5, [pc, #44]	; (81048 <prvUnlockQueue+0x80>)
				{
					vTaskMissedYield();
   8101a:	4f0c      	ldr	r7, [pc, #48]	; (8104c <prvUnlockQueue+0x84>)
   8101c:	e001      	b.n	81022 <prvUnlockQueue+0x5a>
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   8101e:	6923      	ldr	r3, [r4, #16]
   81020:	b14b      	cbz	r3, 81036 <prvUnlockQueue+0x6e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   81022:	4630      	mov	r0, r6
   81024:	47a8      	blx	r5
   81026:	b100      	cbz	r0, 8102a <prvUnlockQueue+0x62>
				{
					vTaskMissedYield();
   81028:	47b8      	blx	r7
				}

				--( pxQueue->xRxLock );
   8102a:	6c63      	ldr	r3, [r4, #68]	; 0x44
   8102c:	3b01      	subs	r3, #1
   8102e:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   81030:	6c63      	ldr	r3, [r4, #68]	; 0x44
   81032:	2b00      	cmp	r3, #0
   81034:	dcf3      	bgt.n	8101e <prvUnlockQueue+0x56>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
   81036:	f04f 33ff 	mov.w	r3, #4294967295
   8103a:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
   8103c:	4b04      	ldr	r3, [pc, #16]	; (81050 <prvUnlockQueue+0x88>)
   8103e:	4798      	blx	r3
   81040:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81042:	bf00      	nop
   81044:	00080cf9 	.word	0x00080cf9
   81048:	00081b9d 	.word	0x00081b9d
   8104c:	00081ccd 	.word	0x00081ccd
   81050:	00080d19 	.word	0x00080d19

00081054 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
   81054:	b538      	push	{r3, r4, r5, lr}
   81056:	460d      	mov	r5, r1
	configASSERT( pxQueue );
   81058:	4604      	mov	r4, r0
   8105a:	b918      	cbnz	r0, 81064 <xQueueGenericReset+0x10>
   8105c:	4b16      	ldr	r3, [pc, #88]	; (810b8 <xQueueGenericReset+0x64>)
   8105e:	4798      	blx	r3
   81060:	bf00      	nop
   81062:	e7fd      	b.n	81060 <xQueueGenericReset+0xc>

	taskENTER_CRITICAL();
   81064:	4b15      	ldr	r3, [pc, #84]	; (810bc <xQueueGenericReset+0x68>)
   81066:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   81068:	6823      	ldr	r3, [r4, #0]
   8106a:	6c22      	ldr	r2, [r4, #64]	; 0x40
   8106c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   8106e:	fb00 f002 	mul.w	r0, r0, r2
   81072:	1819      	adds	r1, r3, r0
   81074:	6061      	str	r1, [r4, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
   81076:	2100      	movs	r1, #0
   81078:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   8107a:	60a3      	str	r3, [r4, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
   8107c:	1a82      	subs	r2, r0, r2
   8107e:	4413      	add	r3, r2
   81080:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
   81082:	f04f 33ff 	mov.w	r3, #4294967295
   81086:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
   81088:	64a3      	str	r3, [r4, #72]	; 0x48

		if( xNewQueue == pdFALSE )
   8108a:	b955      	cbnz	r5, 810a2 <xQueueGenericReset+0x4e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to	write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   8108c:	6923      	ldr	r3, [r4, #16]
   8108e:	b17b      	cbz	r3, 810b0 <xQueueGenericReset+0x5c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   81090:	f104 0010 	add.w	r0, r4, #16
   81094:	4b0a      	ldr	r3, [pc, #40]	; (810c0 <xQueueGenericReset+0x6c>)
   81096:	4798      	blx	r3
   81098:	2801      	cmp	r0, #1
   8109a:	d109      	bne.n	810b0 <xQueueGenericReset+0x5c>
				{
					portYIELD_WITHIN_API();
   8109c:	4b09      	ldr	r3, [pc, #36]	; (810c4 <xQueueGenericReset+0x70>)
   8109e:	4798      	blx	r3
   810a0:	e006      	b.n	810b0 <xQueueGenericReset+0x5c>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   810a2:	f104 0010 	add.w	r0, r4, #16
   810a6:	4d08      	ldr	r5, [pc, #32]	; (810c8 <xQueueGenericReset+0x74>)
   810a8:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   810aa:	f104 0024 	add.w	r0, r4, #36	; 0x24
   810ae:	47a8      	blx	r5
		}
	}
	taskEXIT_CRITICAL();
   810b0:	4b06      	ldr	r3, [pc, #24]	; (810cc <xQueueGenericReset+0x78>)
   810b2:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
   810b4:	2001      	movs	r0, #1
   810b6:	bd38      	pop	{r3, r4, r5, pc}
   810b8:	00080ce9 	.word	0x00080ce9
   810bc:	00080cf9 	.word	0x00080cf9
   810c0:	00081b9d 	.word	0x00081b9d
   810c4:	00080cd9 	.word	0x00080cd9
   810c8:	00080be9 	.word	0x00080be9
   810cc:	00080d19 	.word	0x00080d19

000810d0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
   810d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   810d2:	460d      	mov	r5, r1
   810d4:	4617      	mov	r7, r2
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
   810d6:	4606      	mov	r6, r0
   810d8:	b188      	cbz	r0, 810fe <xQueueGenericCreate+0x2e>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
   810da:	2050      	movs	r0, #80	; 0x50
   810dc:	4b0e      	ldr	r3, [pc, #56]	; (81118 <xQueueGenericCreate+0x48>)
   810de:	4798      	blx	r3
		if( pxNewQueue != NULL )
   810e0:	4604      	mov	r4, r0
   810e2:	b160      	cbz	r0, 810fe <xQueueGenericCreate+0x2e>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
   810e4:	fb05 f006 	mul.w	r0, r5, r6

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
   810e8:	3001      	adds	r0, #1
   810ea:	4b0b      	ldr	r3, [pc, #44]	; (81118 <xQueueGenericCreate+0x48>)
   810ec:	4798      	blx	r3
   810ee:	6020      	str	r0, [r4, #0]
			if( pxNewQueue->pcHead != NULL )
   810f0:	b940      	cbnz	r0, 81104 <xQueueGenericCreate+0x34>
				xReturn = pxNewQueue;
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
   810f2:	4620      	mov	r0, r4
   810f4:	4b09      	ldr	r3, [pc, #36]	; (8111c <xQueueGenericCreate+0x4c>)
   810f6:	4798      	blx	r3
   810f8:	e001      	b.n	810fe <xQueueGenericCreate+0x2e>
			}
		}
	}

	configASSERT( xReturn );
   810fa:	bf00      	nop
   810fc:	e7fd      	b.n	810fa <xQueueGenericCreate+0x2a>
   810fe:	4b08      	ldr	r3, [pc, #32]	; (81120 <xQueueGenericCreate+0x50>)
   81100:	4798      	blx	r3
   81102:	e7fa      	b.n	810fa <xQueueGenericCreate+0x2a>
			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
			if( pxNewQueue->pcHead != NULL )
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
   81104:	63e6      	str	r6, [r4, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
   81106:	6425      	str	r5, [r4, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
   81108:	4620      	mov	r0, r4
   8110a:	2101      	movs	r1, #1
   8110c:	4b05      	ldr	r3, [pc, #20]	; (81124 <xQueueGenericCreate+0x54>)
   8110e:	4798      	blx	r3
				#if ( configUSE_TRACE_FACILITY == 1 )
				{
					pxNewQueue->ucQueueType = ucQueueType;
   81110:	f884 704d 	strb.w	r7, [r4, #77]	; 0x4d
	}

	configASSERT( xReturn );

	return xReturn;
}
   81114:	4620      	mov	r0, r4
   81116:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81118:	00080e45 	.word	0x00080e45
   8111c:	00080f09 	.word	0x00080f09
   81120:	00080ce9 	.word	0x00080ce9
   81124:	00081055 	.word	0x00081055

00081128 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
   81128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8112c:	b085      	sub	sp, #20
   8112e:	468a      	mov	sl, r1
   81130:	9201      	str	r2, [sp, #4]
   81132:	469b      	mov	fp, r3
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;

	configASSERT( pxQueue );
   81134:	4604      	mov	r4, r0
   81136:	b918      	cbnz	r0, 81140 <xQueueGenericSend+0x18>
   81138:	4b36      	ldr	r3, [pc, #216]	; (81214 <xQueueGenericSend+0xec>)
   8113a:	4798      	blx	r3
   8113c:	bf00      	nop
   8113e:	e7fd      	b.n	8113c <xQueueGenericSend+0x14>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   81140:	b909      	cbnz	r1, 81146 <xQueueGenericSend+0x1e>
   81142:	6c03      	ldr	r3, [r0, #64]	; 0x40
   81144:	b91b      	cbnz	r3, 8114e <xQueueGenericSend+0x26>

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
   81146:	2700      	movs	r7, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   81148:	4e33      	ldr	r6, [pc, #204]	; (81218 <xQueueGenericSend+0xf0>)
					vTaskSetTimeOutState( &xTimeOut );
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
   8114a:	4d34      	ldr	r5, [pc, #208]	; (8121c <xQueueGenericSend+0xf4>)
   8114c:	e003      	b.n	81156 <xQueueGenericSend+0x2e>
{
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;

	configASSERT( pxQueue );
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   8114e:	4b31      	ldr	r3, [pc, #196]	; (81214 <xQueueGenericSend+0xec>)
   81150:	4798      	blx	r3
   81152:	bf00      	nop
   81154:	e7fd      	b.n	81152 <xQueueGenericSend+0x2a>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   81156:	47b0      	blx	r6
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   81158:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   8115a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   8115c:	429a      	cmp	r2, r3
   8115e:	d212      	bcs.n	81186 <xQueueGenericSend+0x5e>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   81160:	4620      	mov	r0, r4
   81162:	4651      	mov	r1, sl
   81164:	465a      	mov	r2, fp
   81166:	4b2e      	ldr	r3, [pc, #184]	; (81220 <xQueueGenericSend+0xf8>)
   81168:	4798      	blx	r3

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   8116a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   8116c:	b13b      	cbz	r3, 8117e <xQueueGenericSend+0x56>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
   8116e:	f104 0024 	add.w	r0, r4, #36	; 0x24
   81172:	4b2c      	ldr	r3, [pc, #176]	; (81224 <xQueueGenericSend+0xfc>)
   81174:	4798      	blx	r3
   81176:	2801      	cmp	r0, #1
   81178:	d101      	bne.n	8117e <xQueueGenericSend+0x56>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
   8117a:	4b2b      	ldr	r3, [pc, #172]	; (81228 <xQueueGenericSend+0x100>)
   8117c:	4798      	blx	r3
					}
				}

				taskEXIT_CRITICAL();
   8117e:	4b27      	ldr	r3, [pc, #156]	; (8121c <xQueueGenericSend+0xf4>)
   81180:	4798      	blx	r3

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
   81182:	2001      	movs	r0, #1
   81184:	e043      	b.n	8120e <xQueueGenericSend+0xe6>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   81186:	9b01      	ldr	r3, [sp, #4]
   81188:	b91b      	cbnz	r3, 81192 <xQueueGenericSend+0x6a>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   8118a:	4b24      	ldr	r3, [pc, #144]	; (8121c <xQueueGenericSend+0xf4>)
   8118c:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
   8118e:	2000      	movs	r0, #0
   81190:	e03d      	b.n	8120e <xQueueGenericSend+0xe6>
				}
				else if( xEntryTimeSet == pdFALSE )
   81192:	b91f      	cbnz	r7, 8119c <xQueueGenericSend+0x74>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   81194:	a802      	add	r0, sp, #8
   81196:	4b25      	ldr	r3, [pc, #148]	; (8122c <xQueueGenericSend+0x104>)
   81198:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   8119a:	2701      	movs	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
   8119c:	47a8      	blx	r5

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   8119e:	4b24      	ldr	r3, [pc, #144]	; (81230 <xQueueGenericSend+0x108>)
   811a0:	4798      	blx	r3
		prvLockQueue( pxQueue );
   811a2:	47b0      	blx	r6
   811a4:	6c63      	ldr	r3, [r4, #68]	; 0x44
   811a6:	f1b3 3fff 	cmp.w	r3, #4294967295
   811aa:	bf04      	itt	eq
   811ac:	2300      	moveq	r3, #0
   811ae:	6463      	streq	r3, [r4, #68]	; 0x44
   811b0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   811b2:	f1b3 3fff 	cmp.w	r3, #4294967295
   811b6:	bf04      	itt	eq
   811b8:	2300      	moveq	r3, #0
   811ba:	64a3      	streq	r3, [r4, #72]	; 0x48
   811bc:	47a8      	blx	r5

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   811be:	a802      	add	r0, sp, #8
   811c0:	a901      	add	r1, sp, #4
   811c2:	4b1c      	ldr	r3, [pc, #112]	; (81234 <xQueueGenericSend+0x10c>)
   811c4:	4798      	blx	r3
   811c6:	b9e0      	cbnz	r0, 81202 <xQueueGenericSend+0xda>

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   811c8:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
   811ca:	f8d4 9038 	ldr.w	r9, [r4, #56]	; 0x38
   811ce:	f8d4 803c 	ldr.w	r8, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
   811d2:	47a8      	blx	r5
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   811d4:	45c1      	cmp	r9, r8
   811d6:	d10e      	bne.n	811f6 <xQueueGenericSend+0xce>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   811d8:	f104 0010 	add.w	r0, r4, #16
   811dc:	9901      	ldr	r1, [sp, #4]
   811de:	4b16      	ldr	r3, [pc, #88]	; (81238 <xQueueGenericSend+0x110>)
   811e0:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   811e2:	4620      	mov	r0, r4
   811e4:	4b15      	ldr	r3, [pc, #84]	; (8123c <xQueueGenericSend+0x114>)
   811e6:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   811e8:	4b15      	ldr	r3, [pc, #84]	; (81240 <xQueueGenericSend+0x118>)
   811ea:	4798      	blx	r3
   811ec:	2800      	cmp	r0, #0
   811ee:	d1b2      	bne.n	81156 <xQueueGenericSend+0x2e>
				{
					portYIELD_WITHIN_API();
   811f0:	4b0d      	ldr	r3, [pc, #52]	; (81228 <xQueueGenericSend+0x100>)
   811f2:	4798      	blx	r3
   811f4:	e7af      	b.n	81156 <xQueueGenericSend+0x2e>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   811f6:	4620      	mov	r0, r4
   811f8:	4b10      	ldr	r3, [pc, #64]	; (8123c <xQueueGenericSend+0x114>)
   811fa:	4798      	blx	r3
				( void ) xTaskResumeAll();
   811fc:	4b10      	ldr	r3, [pc, #64]	; (81240 <xQueueGenericSend+0x118>)
   811fe:	4798      	blx	r3
   81200:	e7a9      	b.n	81156 <xQueueGenericSend+0x2e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   81202:	4620      	mov	r0, r4
   81204:	4b0d      	ldr	r3, [pc, #52]	; (8123c <xQueueGenericSend+0x114>)
   81206:	4798      	blx	r3
			( void ) xTaskResumeAll();
   81208:	4b0d      	ldr	r3, [pc, #52]	; (81240 <xQueueGenericSend+0x118>)
   8120a:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
   8120c:	2000      	movs	r0, #0
		}
	}
}
   8120e:	b005      	add	sp, #20
   81210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81214:	00080ce9 	.word	0x00080ce9
   81218:	00080cf9 	.word	0x00080cf9
   8121c:	00080d19 	.word	0x00080d19
   81220:	00080f3d 	.word	0x00080f3d
   81224:	00081b9d 	.word	0x00081b9d
   81228:	00080cd9 	.word	0x00080cd9
   8122c:	00081c21 	.word	0x00081c21
   81230:	00081745 	.word	0x00081745
   81234:	00081c49 	.word	0x00081c49
   81238:	00081af9 	.word	0x00081af9
   8123c:	00080fc9 	.word	0x00080fc9
   81240:	00081895 	.word	0x00081895

00081244 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
   81244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81248:	460e      	mov	r6, r1
   8124a:	4615      	mov	r5, r2
   8124c:	4698      	mov	r8, r3
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	configASSERT( pxQueue );
   8124e:	4604      	mov	r4, r0
   81250:	b918      	cbnz	r0, 8125a <xQueueGenericSendFromISR+0x16>
   81252:	4b1c      	ldr	r3, [pc, #112]	; (812c4 <xQueueGenericSendFromISR+0x80>)
   81254:	4798      	blx	r3
   81256:	bf00      	nop
   81258:	e7fd      	b.n	81256 <xQueueGenericSendFromISR+0x12>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   8125a:	b929      	cbnz	r1, 81268 <xQueueGenericSendFromISR+0x24>
   8125c:	6c03      	ldr	r3, [r0, #64]	; 0x40
   8125e:	b11b      	cbz	r3, 81268 <xQueueGenericSendFromISR+0x24>
   81260:	4b18      	ldr	r3, [pc, #96]	; (812c4 <xQueueGenericSendFromISR+0x80>)
   81262:	4798      	blx	r3
   81264:	bf00      	nop
   81266:	e7fd      	b.n	81264 <xQueueGenericSendFromISR+0x20>
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   81268:	4b16      	ldr	r3, [pc, #88]	; (812c4 <xQueueGenericSendFromISR+0x80>)
   8126a:	4798      	blx	r3
   8126c:	4607      	mov	r7, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   8126e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   81270:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   81272:	429a      	cmp	r2, r3
   81274:	d218      	bcs.n	812a8 <xQueueGenericSendFromISR+0x64>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   81276:	4620      	mov	r0, r4
   81278:	4631      	mov	r1, r6
   8127a:	4642      	mov	r2, r8
   8127c:	4b12      	ldr	r3, [pc, #72]	; (812c8 <xQueueGenericSendFromISR+0x84>)
   8127e:	4798      	blx	r3

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
   81280:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   81282:	f1b3 3fff 	cmp.w	r3, #4294967295
   81286:	d10a      	bne.n	8129e <xQueueGenericSendFromISR+0x5a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   81288:	6a63      	ldr	r3, [r4, #36]	; 0x24
   8128a:	b17b      	cbz	r3, 812ac <xQueueGenericSendFromISR+0x68>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   8128c:	f104 0024 	add.w	r0, r4, #36	; 0x24
   81290:	4b0e      	ldr	r3, [pc, #56]	; (812cc <xQueueGenericSendFromISR+0x88>)
   81292:	4798      	blx	r3
   81294:	b160      	cbz	r0, 812b0 <xQueueGenericSendFromISR+0x6c>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						if( pxHigherPriorityTaskWoken != NULL )
   81296:	b16d      	cbz	r5, 812b4 <xQueueGenericSendFromISR+0x70>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
   81298:	2401      	movs	r4, #1
   8129a:	602c      	str	r4, [r5, #0]
   8129c:	e00b      	b.n	812b6 <xQueueGenericSendFromISR+0x72>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
   8129e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   812a0:	3301      	adds	r3, #1
   812a2:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
   812a4:	2401      	movs	r4, #1
   812a6:	e006      	b.n	812b6 <xQueueGenericSendFromISR+0x72>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
   812a8:	2400      	movs	r4, #0
   812aa:	e004      	b.n	812b6 <xQueueGenericSendFromISR+0x72>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
   812ac:	2401      	movs	r4, #1
   812ae:	e002      	b.n	812b6 <xQueueGenericSendFromISR+0x72>
   812b0:	2401      	movs	r4, #1
   812b2:	e000      	b.n	812b6 <xQueueGenericSendFromISR+0x72>
   812b4:	2401      	movs	r4, #1
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   812b6:	4638      	mov	r0, r7
   812b8:	4b05      	ldr	r3, [pc, #20]	; (812d0 <xQueueGenericSendFromISR+0x8c>)
   812ba:	4798      	blx	r3

	return xReturn;
}
   812bc:	4620      	mov	r0, r4
   812be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   812c2:	bf00      	nop
   812c4:	00080ce9 	.word	0x00080ce9
   812c8:	00080f3d 	.word	0x00080f3d
   812cc:	00081b9d 	.word	0x00081b9d
   812d0:	00080d11 	.word	0x00080d11

000812d4 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
   812d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   812d8:	b085      	sub	sp, #20
   812da:	4689      	mov	r9, r1
   812dc:	9201      	str	r2, [sp, #4]
   812de:	469a      	mov	sl, r3
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;

	configASSERT( pxQueue );
   812e0:	4604      	mov	r4, r0
   812e2:	b918      	cbnz	r0, 812ec <xQueueGenericReceive+0x18>
   812e4:	4b44      	ldr	r3, [pc, #272]	; (813f8 <xQueueGenericReceive+0x124>)
   812e6:	4798      	blx	r3
   812e8:	bf00      	nop
   812ea:	e7fd      	b.n	812e8 <xQueueGenericReceive+0x14>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   812ec:	b909      	cbnz	r1, 812f2 <xQueueGenericReceive+0x1e>
   812ee:	6c03      	ldr	r3, [r0, #64]	; 0x40
   812f0:	b92b      	cbnz	r3, 812fe <xQueueGenericReceive+0x2a>
	return xReturn;
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
   812f2:	2700      	movs	r7, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   812f4:	4e41      	ldr	r6, [pc, #260]	; (813fc <xQueueGenericReceive+0x128>)
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   812f6:	f8df b134 	ldr.w	fp, [pc, #308]	; 8142c <xQueueGenericReceive+0x158>
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
   812fa:	4d41      	ldr	r5, [pc, #260]	; (81400 <xQueueGenericReceive+0x12c>)
   812fc:	e003      	b.n	81306 <xQueueGenericReceive+0x32>
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;

	configASSERT( pxQueue );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   812fe:	4b3e      	ldr	r3, [pc, #248]	; (813f8 <xQueueGenericReceive+0x124>)
   81300:	4798      	blx	r3
   81302:	bf00      	nop
   81304:	e7fd      	b.n	81302 <xQueueGenericReceive+0x2e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   81306:	47b0      	blx	r6
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
   81308:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   8130a:	2b00      	cmp	r3, #0
   8130c:	d028      	beq.n	81360 <xQueueGenericReceive+0x8c>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
   8130e:	68e5      	ldr	r5, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
   81310:	4620      	mov	r0, r4
   81312:	4649      	mov	r1, r9
   81314:	4b3b      	ldr	r3, [pc, #236]	; (81404 <xQueueGenericReceive+0x130>)
   81316:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
   81318:	f1ba 0f00 	cmp.w	sl, #0
   8131c:	d112      	bne.n	81344 <xQueueGenericReceive+0x70>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
   8131e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   81320:	3b01      	subs	r3, #1
   81322:	63a3      	str	r3, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   81324:	6823      	ldr	r3, [r4, #0]
   81326:	b913      	cbnz	r3, 8132e <xQueueGenericReceive+0x5a>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
   81328:	4b37      	ldr	r3, [pc, #220]	; (81408 <xQueueGenericReceive+0x134>)
   8132a:	4798      	blx	r3
   8132c:	6060      	str	r0, [r4, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   8132e:	6923      	ldr	r3, [r4, #16]
   81330:	b193      	cbz	r3, 81358 <xQueueGenericReceive+0x84>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   81332:	f104 0010 	add.w	r0, r4, #16
   81336:	4b35      	ldr	r3, [pc, #212]	; (8140c <xQueueGenericReceive+0x138>)
   81338:	4798      	blx	r3
   8133a:	2801      	cmp	r0, #1
   8133c:	d10c      	bne.n	81358 <xQueueGenericReceive+0x84>
						{
							portYIELD_WITHIN_API();
   8133e:	4b34      	ldr	r3, [pc, #208]	; (81410 <xQueueGenericReceive+0x13c>)
   81340:	4798      	blx	r3
   81342:	e009      	b.n	81358 <xQueueGenericReceive+0x84>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
   81344:	60e5      	str	r5, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   81346:	6a63      	ldr	r3, [r4, #36]	; 0x24
   81348:	b133      	cbz	r3, 81358 <xQueueGenericReceive+0x84>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   8134a:	f104 0024 	add.w	r0, r4, #36	; 0x24
   8134e:	4b2f      	ldr	r3, [pc, #188]	; (8140c <xQueueGenericReceive+0x138>)
   81350:	4798      	blx	r3
   81352:	b108      	cbz	r0, 81358 <xQueueGenericReceive+0x84>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
   81354:	4b2e      	ldr	r3, [pc, #184]	; (81410 <xQueueGenericReceive+0x13c>)
   81356:	4798      	blx	r3
						}
					}
				}

				taskEXIT_CRITICAL();
   81358:	4b29      	ldr	r3, [pc, #164]	; (81400 <xQueueGenericReceive+0x12c>)
   8135a:	4798      	blx	r3
				return pdPASS;
   8135c:	2001      	movs	r0, #1
   8135e:	e048      	b.n	813f2 <xQueueGenericReceive+0x11e>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   81360:	9b01      	ldr	r3, [sp, #4]
   81362:	b91b      	cbnz	r3, 8136c <xQueueGenericReceive+0x98>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   81364:	4b26      	ldr	r3, [pc, #152]	; (81400 <xQueueGenericReceive+0x12c>)
   81366:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
   81368:	2000      	movs	r0, #0
   8136a:	e042      	b.n	813f2 <xQueueGenericReceive+0x11e>
				}
				else if( xEntryTimeSet == pdFALSE )
   8136c:	b917      	cbnz	r7, 81374 <xQueueGenericReceive+0xa0>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   8136e:	a802      	add	r0, sp, #8
   81370:	47d8      	blx	fp
					xEntryTimeSet = pdTRUE;
   81372:	2701      	movs	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
   81374:	47a8      	blx	r5

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   81376:	4b27      	ldr	r3, [pc, #156]	; (81414 <xQueueGenericReceive+0x140>)
   81378:	4798      	blx	r3
		prvLockQueue( pxQueue );
   8137a:	47b0      	blx	r6
   8137c:	6c63      	ldr	r3, [r4, #68]	; 0x44
   8137e:	f1b3 3fff 	cmp.w	r3, #4294967295
   81382:	bf04      	itt	eq
   81384:	2300      	moveq	r3, #0
   81386:	6463      	streq	r3, [r4, #68]	; 0x44
   81388:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   8138a:	f1b3 3fff 	cmp.w	r3, #4294967295
   8138e:	bf04      	itt	eq
   81390:	2300      	moveq	r3, #0
   81392:	64a3      	streq	r3, [r4, #72]	; 0x48
   81394:	47a8      	blx	r5

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   81396:	a802      	add	r0, sp, #8
   81398:	a901      	add	r1, sp, #4
   8139a:	4b1f      	ldr	r3, [pc, #124]	; (81418 <xQueueGenericReceive+0x144>)
   8139c:	4798      	blx	r3
   8139e:	bb10      	cbnz	r0, 813e6 <xQueueGenericReceive+0x112>

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   813a0:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
   813a2:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
   813a6:	47a8      	blx	r5
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   813a8:	f1b8 0f00 	cmp.w	r8, #0
   813ac:	d115      	bne.n	813da <xQueueGenericReceive+0x106>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   813ae:	6823      	ldr	r3, [r4, #0]
   813b0:	b923      	cbnz	r3, 813bc <xQueueGenericReceive+0xe8>
					{
						portENTER_CRITICAL();
   813b2:	47b0      	blx	r6
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   813b4:	6860      	ldr	r0, [r4, #4]
   813b6:	4b19      	ldr	r3, [pc, #100]	; (8141c <xQueueGenericReceive+0x148>)
   813b8:	4798      	blx	r3
						}
						portEXIT_CRITICAL();
   813ba:	47a8      	blx	r5
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   813bc:	f104 0024 	add.w	r0, r4, #36	; 0x24
   813c0:	9901      	ldr	r1, [sp, #4]
   813c2:	4b17      	ldr	r3, [pc, #92]	; (81420 <xQueueGenericReceive+0x14c>)
   813c4:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   813c6:	4620      	mov	r0, r4
   813c8:	4b16      	ldr	r3, [pc, #88]	; (81424 <xQueueGenericReceive+0x150>)
   813ca:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   813cc:	4b16      	ldr	r3, [pc, #88]	; (81428 <xQueueGenericReceive+0x154>)
   813ce:	4798      	blx	r3
   813d0:	2800      	cmp	r0, #0
   813d2:	d198      	bne.n	81306 <xQueueGenericReceive+0x32>
				{
					portYIELD_WITHIN_API();
   813d4:	4b0e      	ldr	r3, [pc, #56]	; (81410 <xQueueGenericReceive+0x13c>)
   813d6:	4798      	blx	r3
   813d8:	e795      	b.n	81306 <xQueueGenericReceive+0x32>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   813da:	4620      	mov	r0, r4
   813dc:	4b11      	ldr	r3, [pc, #68]	; (81424 <xQueueGenericReceive+0x150>)
   813de:	4798      	blx	r3
				( void ) xTaskResumeAll();
   813e0:	4b11      	ldr	r3, [pc, #68]	; (81428 <xQueueGenericReceive+0x154>)
   813e2:	4798      	blx	r3
   813e4:	e78f      	b.n	81306 <xQueueGenericReceive+0x32>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
   813e6:	4620      	mov	r0, r4
   813e8:	4b0e      	ldr	r3, [pc, #56]	; (81424 <xQueueGenericReceive+0x150>)
   813ea:	4798      	blx	r3
			( void ) xTaskResumeAll();
   813ec:	4b0e      	ldr	r3, [pc, #56]	; (81428 <xQueueGenericReceive+0x154>)
   813ee:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
   813f0:	2000      	movs	r0, #0
		}
	}
}
   813f2:	b005      	add	sp, #20
   813f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   813f8:	00080ce9 	.word	0x00080ce9
   813fc:	00080cf9 	.word	0x00080cf9
   81400:	00080d19 	.word	0x00080d19
   81404:	00080fa1 	.word	0x00080fa1
   81408:	00081cd9 	.word	0x00081cd9
   8140c:	00081b9d 	.word	0x00081b9d
   81410:	00080cd9 	.word	0x00080cd9
   81414:	00081745 	.word	0x00081745
   81418:	00081c49 	.word	0x00081c49
   8141c:	00081d05 	.word	0x00081d05
   81420:	00081af9 	.word	0x00081af9
   81424:	00080fc9 	.word	0x00080fc9
   81428:	00081895 	.word	0x00081895
   8142c:	00081c21 	.word	0x00081c21

00081430 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vQueueWaitForMessageRestricted( xQueueHandle pxQueue, portTickType xTicksToWait )
	{
   81430:	b538      	push	{r3, r4, r5, lr}
   81432:	4604      	mov	r4, r0
   81434:	460d      	mov	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   81436:	4b0d      	ldr	r3, [pc, #52]	; (8146c <vQueueWaitForMessageRestricted+0x3c>)
   81438:	4798      	blx	r3
   8143a:	6c63      	ldr	r3, [r4, #68]	; 0x44
   8143c:	f1b3 3fff 	cmp.w	r3, #4294967295
   81440:	bf04      	itt	eq
   81442:	2300      	moveq	r3, #0
   81444:	6463      	streq	r3, [r4, #68]	; 0x44
   81446:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   81448:	f1b3 3fff 	cmp.w	r3, #4294967295
   8144c:	bf04      	itt	eq
   8144e:	2300      	moveq	r3, #0
   81450:	64a3      	streq	r3, [r4, #72]	; 0x48
   81452:	4b07      	ldr	r3, [pc, #28]	; (81470 <vQueueWaitForMessageRestricted+0x40>)
   81454:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
   81456:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   81458:	b923      	cbnz	r3, 81464 <vQueueWaitForMessageRestricted+0x34>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   8145a:	f104 0024 	add.w	r0, r4, #36	; 0x24
   8145e:	4629      	mov	r1, r5
   81460:	4b04      	ldr	r3, [pc, #16]	; (81474 <vQueueWaitForMessageRestricted+0x44>)
   81462:	4798      	blx	r3
		}
		prvUnlockQueue( pxQueue );
   81464:	4620      	mov	r0, r4
   81466:	4b04      	ldr	r3, [pc, #16]	; (81478 <vQueueWaitForMessageRestricted+0x48>)
   81468:	4798      	blx	r3
   8146a:	bd38      	pop	{r3, r4, r5, pc}
   8146c:	00080cf9 	.word	0x00080cf9
   81470:	00080d19 	.word	0x00080d19
   81474:	00081b59 	.word	0x00081b59
   81478:	00080fc9 	.word	0x00080fc9

0008147c <prvAddCurrentTaskToDelayedList>:
	#endif
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
   8147c:	b510      	push	{r4, lr}
   8147e:	4604      	mov	r4, r0
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
   81480:	4b0e      	ldr	r3, [pc, #56]	; (814bc <prvAddCurrentTaskToDelayedList+0x40>)
   81482:	681b      	ldr	r3, [r3, #0]
   81484:	6058      	str	r0, [r3, #4]

	if( xTimeToWake < xTickCount )
   81486:	4b0e      	ldr	r3, [pc, #56]	; (814c0 <prvAddCurrentTaskToDelayedList+0x44>)
   81488:	681b      	ldr	r3, [r3, #0]
   8148a:	4298      	cmp	r0, r3
   8148c:	d207      	bcs.n	8149e <prvAddCurrentTaskToDelayedList+0x22>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   8148e:	4b0d      	ldr	r3, [pc, #52]	; (814c4 <prvAddCurrentTaskToDelayedList+0x48>)
   81490:	6818      	ldr	r0, [r3, #0]
   81492:	4b0a      	ldr	r3, [pc, #40]	; (814bc <prvAddCurrentTaskToDelayedList+0x40>)
   81494:	6819      	ldr	r1, [r3, #0]
   81496:	3104      	adds	r1, #4
   81498:	4b0b      	ldr	r3, [pc, #44]	; (814c8 <prvAddCurrentTaskToDelayedList+0x4c>)
   8149a:	4798      	blx	r3
   8149c:	bd10      	pop	{r4, pc}
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   8149e:	4b0b      	ldr	r3, [pc, #44]	; (814cc <prvAddCurrentTaskToDelayedList+0x50>)
   814a0:	6818      	ldr	r0, [r3, #0]
   814a2:	4b06      	ldr	r3, [pc, #24]	; (814bc <prvAddCurrentTaskToDelayedList+0x40>)
   814a4:	6819      	ldr	r1, [r3, #0]
   814a6:	3104      	adds	r1, #4
   814a8:	4b07      	ldr	r3, [pc, #28]	; (814c8 <prvAddCurrentTaskToDelayedList+0x4c>)
   814aa:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
   814ac:	4b08      	ldr	r3, [pc, #32]	; (814d0 <prvAddCurrentTaskToDelayedList+0x54>)
   814ae:	681b      	ldr	r3, [r3, #0]
   814b0:	429c      	cmp	r4, r3
		{
			xNextTaskUnblockTime = xTimeToWake;
   814b2:	bf3c      	itt	cc
   814b4:	4b06      	ldrcc	r3, [pc, #24]	; (814d0 <prvAddCurrentTaskToDelayedList+0x54>)
   814b6:	601c      	strcc	r4, [r3, #0]
   814b8:	bd10      	pop	{r4, pc}
   814ba:	bf00      	nop
   814bc:	2007ab9c 	.word	0x2007ab9c
   814c0:	2007abb8 	.word	0x2007abb8
   814c4:	2007abbc 	.word	0x2007abbc
   814c8:	00080c25 	.word	0x00080c25
   814cc:	2007aafc 	.word	0x2007aafc
   814d0:	2007018c 	.word	0x2007018c

000814d4 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
   814d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   814d8:	460e      	mov	r6, r1
   814da:	4617      	mov	r7, r2
   814dc:	469a      	mov	sl, r3
   814de:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   814e0:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
   814e4:	4681      	mov	r9, r0
   814e6:	b918      	cbnz	r0, 814f0 <xTaskGenericCreate+0x1c>
   814e8:	4b62      	ldr	r3, [pc, #392]	; (81674 <xTaskGenericCreate+0x1a0>)
   814ea:	4798      	blx	r3
   814ec:	bf00      	nop
   814ee:	e7fd      	b.n	814ec <xTaskGenericCreate+0x18>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
   814f0:	2d04      	cmp	r5, #4
   814f2:	d903      	bls.n	814fc <xTaskGenericCreate+0x28>
   814f4:	4b5f      	ldr	r3, [pc, #380]	; (81674 <xTaskGenericCreate+0x1a0>)
   814f6:	4798      	blx	r3
   814f8:	bf00      	nop
   814fa:	e7fd      	b.n	814f8 <xTaskGenericCreate+0x24>
{
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
   814fc:	204c      	movs	r0, #76	; 0x4c
   814fe:	4b5e      	ldr	r3, [pc, #376]	; (81678 <xTaskGenericCreate+0x1a4>)
   81500:	4798      	blx	r3

	if( pxNewTCB != NULL )
   81502:	4604      	mov	r4, r0
   81504:	2800      	cmp	r0, #0
   81506:	f000 80b1 	beq.w	8166c <xTaskGenericCreate+0x198>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   8150a:	f1b8 0f00 	cmp.w	r8, #0
   8150e:	f040 80a9 	bne.w	81664 <xTaskGenericCreate+0x190>
   81512:	00b8      	lsls	r0, r7, #2
   81514:	4b58      	ldr	r3, [pc, #352]	; (81678 <xTaskGenericCreate+0x1a4>)
   81516:	4798      	blx	r3
   81518:	6320      	str	r0, [r4, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
   8151a:	b918      	cbnz	r0, 81524 <xTaskGenericCreate+0x50>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
   8151c:	4620      	mov	r0, r4
   8151e:	4b57      	ldr	r3, [pc, #348]	; (8167c <xTaskGenericCreate+0x1a8>)
   81520:	4798      	blx	r3
   81522:	e0a3      	b.n	8166c <xTaskGenericCreate+0x198>
			pxNewTCB = NULL;
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
   81524:	21a5      	movs	r1, #165	; 0xa5
   81526:	00ba      	lsls	r2, r7, #2
   81528:	4b55      	ldr	r3, [pc, #340]	; (81680 <xTaskGenericCreate+0x1ac>)
   8152a:	4798      	blx	r3
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
   8152c:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
   81530:	3f01      	subs	r7, #1
   81532:	6b23      	ldr	r3, [r4, #48]	; 0x30
   81534:	eb03 0387 	add.w	r3, r3, r7, lsl #2
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
   81538:	f023 0b07 	bic.w	fp, r3, #7
{
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
   8153c:	f104 0034 	add.w	r0, r4, #52	; 0x34
   81540:	4631      	mov	r1, r6
   81542:	220a      	movs	r2, #10
   81544:	4b4f      	ldr	r3, [pc, #316]	; (81684 <xTaskGenericCreate+0x1b0>)
   81546:	4798      	blx	r3
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
   81548:	2300      	movs	r3, #0
   8154a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
   8154e:	2d04      	cmp	r5, #4
   81550:	bf34      	ite	cc
   81552:	462e      	movcc	r6, r5
   81554:	2604      	movcs	r6, #4
	if( uxPriority >= configMAX_PRIORITIES )
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
	}

	pxTCB->uxPriority = uxPriority;
   81556:	62e6      	str	r6, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
   81558:	64a6      	str	r6, [r4, #72]	; 0x48
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
   8155a:	1d27      	adds	r7, r4, #4
   8155c:	4638      	mov	r0, r7
   8155e:	f8df 8170 	ldr.w	r8, [pc, #368]	; 816d0 <xTaskGenericCreate+0x1fc>
   81562:	47c0      	blx	r8
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
   81564:	f104 0018 	add.w	r0, r4, #24
   81568:	47c0      	blx	r8

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
   8156a:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
   8156c:	f1c6 0605 	rsb	r6, r6, #5
   81570:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
   81572:	6264      	str	r4, [r4, #36]	; 0x24
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   81574:	4658      	mov	r0, fp
   81576:	4649      	mov	r1, r9
   81578:	4652      	mov	r2, sl
   8157a:	4b43      	ldr	r3, [pc, #268]	; (81688 <xTaskGenericCreate+0x1b4>)
   8157c:	4798      	blx	r3
   8157e:	6020      	str	r0, [r4, #0]
		}
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   81580:	f010 0f07 	tst.w	r0, #7
   81584:	d003      	beq.n	8158e <xTaskGenericCreate+0xba>
   81586:	4b3b      	ldr	r3, [pc, #236]	; (81674 <xTaskGenericCreate+0x1a0>)
   81588:	4798      	blx	r3
   8158a:	bf00      	nop
   8158c:	e7fd      	b.n	8158a <xTaskGenericCreate+0xb6>

		if( ( void * ) pxCreatedTask != NULL )
   8158e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   81590:	b103      	cbz	r3, 81594 <xTaskGenericCreate+0xc0>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
   81592:	601c      	str	r4, [r3, #0]
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
   81594:	4b3d      	ldr	r3, [pc, #244]	; (8168c <xTaskGenericCreate+0x1b8>)
   81596:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
   81598:	4b3d      	ldr	r3, [pc, #244]	; (81690 <xTaskGenericCreate+0x1bc>)
   8159a:	681a      	ldr	r2, [r3, #0]
   8159c:	3201      	adds	r2, #1
   8159e:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
   815a0:	4b3c      	ldr	r3, [pc, #240]	; (81694 <xTaskGenericCreate+0x1c0>)
   815a2:	681b      	ldr	r3, [r3, #0]
   815a4:	bb2b      	cbnz	r3, 815f2 <xTaskGenericCreate+0x11e>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
   815a6:	4b3b      	ldr	r3, [pc, #236]	; (81694 <xTaskGenericCreate+0x1c0>)
   815a8:	601c      	str	r4, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
   815aa:	4b39      	ldr	r3, [pc, #228]	; (81690 <xTaskGenericCreate+0x1bc>)
   815ac:	681b      	ldr	r3, [r3, #0]
   815ae:	2b01      	cmp	r3, #1
   815b0:	d129      	bne.n	81606 <xTaskGenericCreate+0x132>
   815b2:	4e39      	ldr	r6, [pc, #228]	; (81698 <xTaskGenericCreate+0x1c4>)
   815b4:	f106 0964 	add.w	r9, r6, #100	; 0x64
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
   815b8:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 8169c <xTaskGenericCreate+0x1c8>
   815bc:	4630      	mov	r0, r6
   815be:	47c0      	blx	r8
   815c0:	3614      	adds	r6, #20

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
   815c2:	454e      	cmp	r6, r9
   815c4:	d1fa      	bne.n	815bc <xTaskGenericCreate+0xe8>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
   815c6:	f8df 910c 	ldr.w	r9, [pc, #268]	; 816d4 <xTaskGenericCreate+0x200>
   815ca:	4648      	mov	r0, r9
   815cc:	4e33      	ldr	r6, [pc, #204]	; (8169c <xTaskGenericCreate+0x1c8>)
   815ce:	47b0      	blx	r6
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
   815d0:	f8df 8104 	ldr.w	r8, [pc, #260]	; 816d8 <xTaskGenericCreate+0x204>
   815d4:	4640      	mov	r0, r8
   815d6:	47b0      	blx	r6
	vListInitialise( ( xList * ) &xPendingReadyList );
   815d8:	4831      	ldr	r0, [pc, #196]	; (816a0 <xTaskGenericCreate+0x1cc>)
   815da:	47b0      	blx	r6

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
   815dc:	4831      	ldr	r0, [pc, #196]	; (816a4 <xTaskGenericCreate+0x1d0>)
   815de:	47b0      	blx	r6
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
   815e0:	4831      	ldr	r0, [pc, #196]	; (816a8 <xTaskGenericCreate+0x1d4>)
   815e2:	47b0      	blx	r6
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   815e4:	4b31      	ldr	r3, [pc, #196]	; (816ac <xTaskGenericCreate+0x1d8>)
   815e6:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   815ea:	4b31      	ldr	r3, [pc, #196]	; (816b0 <xTaskGenericCreate+0x1dc>)
   815ec:	f8c3 8000 	str.w	r8, [r3]
   815f0:	e009      	b.n	81606 <xTaskGenericCreate+0x132>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
   815f2:	4b30      	ldr	r3, [pc, #192]	; (816b4 <xTaskGenericCreate+0x1e0>)
   815f4:	681b      	ldr	r3, [r3, #0]
   815f6:	b933      	cbnz	r3, 81606 <xTaskGenericCreate+0x132>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
   815f8:	4b26      	ldr	r3, [pc, #152]	; (81694 <xTaskGenericCreate+0x1c0>)
   815fa:	681b      	ldr	r3, [r3, #0]
   815fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   815fe:	429d      	cmp	r5, r3
					{
						pxCurrentTCB = pxNewTCB;
   81600:	bf24      	itt	cs
   81602:	4b24      	ldrcs	r3, [pc, #144]	; (81694 <xTaskGenericCreate+0x1c0>)
   81604:	601c      	strcs	r4, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
   81606:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   81608:	4a2b      	ldr	r2, [pc, #172]	; (816b8 <xTaskGenericCreate+0x1e4>)
   8160a:	6812      	ldr	r2, [r2, #0]
   8160c:	4293      	cmp	r3, r2
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
   8160e:	bf84      	itt	hi
   81610:	4a29      	ldrhi	r2, [pc, #164]	; (816b8 <xTaskGenericCreate+0x1e4>)
   81612:	6013      	strhi	r3, [r2, #0]
			}

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
   81614:	4a29      	ldr	r2, [pc, #164]	; (816bc <xTaskGenericCreate+0x1e8>)
   81616:	6811      	ldr	r1, [r2, #0]
   81618:	6421      	str	r1, [r4, #64]	; 0x40
			}
			#endif
			uxTaskNumber++;
   8161a:	3101      	adds	r1, #1
   8161c:	6011      	str	r1, [r2, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
   8161e:	4a28      	ldr	r2, [pc, #160]	; (816c0 <xTaskGenericCreate+0x1ec>)
   81620:	6812      	ldr	r2, [r2, #0]
   81622:	4293      	cmp	r3, r2
   81624:	bf84      	itt	hi
   81626:	4a26      	ldrhi	r2, [pc, #152]	; (816c0 <xTaskGenericCreate+0x1ec>)
   81628:	6013      	strhi	r3, [r2, #0]
   8162a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   8162e:	481a      	ldr	r0, [pc, #104]	; (81698 <xTaskGenericCreate+0x1c4>)
   81630:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   81634:	4639      	mov	r1, r7
   81636:	4b23      	ldr	r3, [pc, #140]	; (816c4 <xTaskGenericCreate+0x1f0>)
   81638:	4798      	blx	r3

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
   8163a:	4b23      	ldr	r3, [pc, #140]	; (816c8 <xTaskGenericCreate+0x1f4>)
   8163c:	4798      	blx	r3
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
   8163e:	4b1d      	ldr	r3, [pc, #116]	; (816b4 <xTaskGenericCreate+0x1e0>)
   81640:	681b      	ldr	r3, [r3, #0]
   81642:	b14b      	cbz	r3, 81658 <xTaskGenericCreate+0x184>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
   81644:	4b13      	ldr	r3, [pc, #76]	; (81694 <xTaskGenericCreate+0x1c0>)
   81646:	681b      	ldr	r3, [r3, #0]
   81648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   8164a:	429d      	cmp	r5, r3
   8164c:	d907      	bls.n	8165e <xTaskGenericCreate+0x18a>
			{
				portYIELD_WITHIN_API();
   8164e:	4b1f      	ldr	r3, [pc, #124]	; (816cc <xTaskGenericCreate+0x1f8>)
   81650:	4798      	blx	r3
			#endif
			uxTaskNumber++;

			prvAddTaskToReadyQueue( pxNewTCB );

			xReturn = pdPASS;
   81652:	2001      	movs	r0, #1
   81654:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81658:	2001      	movs	r0, #1
   8165a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8165e:	2001      	movs	r0, #1
   81660:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if( pxNewTCB != NULL )
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   81664:	f8c0 8030 	str.w	r8, [r0, #48]	; 0x30
   81668:	4640      	mov	r0, r8
   8166a:	e75b      	b.n	81524 <xTaskGenericCreate+0x50>
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   8166c:	f04f 30ff 	mov.w	r0, #4294967295
			}
		}
	}

	return xReturn;
}
   81670:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81674:	00080ce9 	.word	0x00080ce9
   81678:	00080e45 	.word	0x00080e45
   8167c:	00080f09 	.word	0x00080f09
   81680:	0008363d 	.word	0x0008363d
   81684:	000838b1 	.word	0x000838b1
   81688:	00080c9d 	.word	0x00080c9d
   8168c:	00080cf9 	.word	0x00080cf9
   81690:	2007abdc 	.word	0x2007abdc
   81694:	2007ab9c 	.word	0x2007ab9c
   81698:	2007ab34 	.word	0x2007ab34
   8169c:	00080be9 	.word	0x00080be9
   816a0:	2007aba0 	.word	0x2007aba0
   816a4:	2007ab08 	.word	0x2007ab08
   816a8:	2007aae8 	.word	0x2007aae8
   816ac:	2007aafc 	.word	0x2007aafc
   816b0:	2007abbc 	.word	0x2007abbc
   816b4:	2007ab00 	.word	0x2007ab00
   816b8:	2007abe0 	.word	0x2007abe0
   816bc:	2007abc0 	.word	0x2007abc0
   816c0:	2007ab30 	.word	0x2007ab30
   816c4:	00080c09 	.word	0x00080c09
   816c8:	00080d19 	.word	0x00080d19
   816cc:	00080cd9 	.word	0x00080cd9
   816d0:	00080c01 	.word	0x00080c01
   816d4:	2007abc4 	.word	0x2007abc4
   816d8:	2007ab1c 	.word	0x2007ab1c

000816dc <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
   816dc:	b510      	push	{r4, lr}
   816de:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
   816e0:	2300      	movs	r3, #0
   816e2:	9300      	str	r3, [sp, #0]
   816e4:	9301      	str	r3, [sp, #4]
   816e6:	9302      	str	r3, [sp, #8]
   816e8:	9303      	str	r3, [sp, #12]
   816ea:	480e      	ldr	r0, [pc, #56]	; (81724 <vTaskStartScheduler+0x48>)
   816ec:	490e      	ldr	r1, [pc, #56]	; (81728 <vTaskStartScheduler+0x4c>)
   816ee:	2282      	movs	r2, #130	; 0x82
   816f0:	4c0e      	ldr	r4, [pc, #56]	; (8172c <vTaskStartScheduler+0x50>)
   816f2:	47a0      	blx	r4
	}
	#endif

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   816f4:	2801      	cmp	r0, #1
   816f6:	d10e      	bne.n	81716 <vTaskStartScheduler+0x3a>
		{
			xReturn = xTimerCreateTimerTask();
   816f8:	4b0d      	ldr	r3, [pc, #52]	; (81730 <vTaskStartScheduler+0x54>)
   816fa:	4798      	blx	r3
		}
	}
	#endif

	if( xReturn == pdPASS )
   816fc:	2801      	cmp	r0, #1
   816fe:	d10a      	bne.n	81716 <vTaskStartScheduler+0x3a>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
   81700:	4b0c      	ldr	r3, [pc, #48]	; (81734 <vTaskStartScheduler+0x58>)
   81702:	4798      	blx	r3

		xSchedulerRunning = pdTRUE;
   81704:	2201      	movs	r2, #1
   81706:	4b0c      	ldr	r3, [pc, #48]	; (81738 <vTaskStartScheduler+0x5c>)
   81708:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
   8170a:	2200      	movs	r2, #0
   8170c:	4b0b      	ldr	r3, [pc, #44]	; (8173c <vTaskStartScheduler+0x60>)
   8170e:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   81710:	4b0b      	ldr	r3, [pc, #44]	; (81740 <vTaskStartScheduler+0x64>)
   81712:	4798      	blx	r3
   81714:	e004      	b.n	81720 <vTaskStartScheduler+0x44>
			/* Should only reach here if a task calls xTaskEndScheduler(). */
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
   81716:	b918      	cbnz	r0, 81720 <vTaskStartScheduler+0x44>
   81718:	4b06      	ldr	r3, [pc, #24]	; (81734 <vTaskStartScheduler+0x58>)
   8171a:	4798      	blx	r3
   8171c:	bf00      	nop
   8171e:	e7fd      	b.n	8171c <vTaskStartScheduler+0x40>
}
   81720:	b004      	add	sp, #16
   81722:	bd10      	pop	{r4, pc}
   81724:	000819e5 	.word	0x000819e5
   81728:	000861b0 	.word	0x000861b0
   8172c:	000814d5 	.word	0x000814d5
   81730:	00081e79 	.word	0x00081e79
   81734:	00080ce9 	.word	0x00080ce9
   81738:	2007ab00 	.word	0x2007ab00
   8173c:	2007abb8 	.word	0x2007abb8
   81740:	00080db5 	.word	0x00080db5

00081744 <vTaskSuspendAll>:

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
   81744:	4b02      	ldr	r3, [pc, #8]	; (81750 <vTaskSuspendAll+0xc>)
   81746:	681a      	ldr	r2, [r3, #0]
   81748:	3201      	adds	r2, #1
   8174a:	601a      	str	r2, [r3, #0]
   8174c:	4770      	bx	lr
   8174e:	bf00      	nop
   81750:	2007ab98 	.word	0x2007ab98

00081754 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
   81754:	b510      	push	{r4, lr}
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
   81756:	4b04      	ldr	r3, [pc, #16]	; (81768 <xTaskGetTickCount+0x14>)
   81758:	4798      	blx	r3
	{
		xTicks = xTickCount;
   8175a:	4b04      	ldr	r3, [pc, #16]	; (8176c <xTaskGetTickCount+0x18>)
   8175c:	681c      	ldr	r4, [r3, #0]
	}
	taskEXIT_CRITICAL();
   8175e:	4b04      	ldr	r3, [pc, #16]	; (81770 <xTaskGetTickCount+0x1c>)
   81760:	4798      	blx	r3

	return xTicks;
}
   81762:	4620      	mov	r0, r4
   81764:	bd10      	pop	{r4, pc}
   81766:	bf00      	nop
   81768:	00080cf9 	.word	0x00080cf9
   8176c:	2007abb8 	.word	0x2007abb8
   81770:	00080d19 	.word	0x00080d19

00081774 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
   81774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   81778:	4b3a      	ldr	r3, [pc, #232]	; (81864 <vTaskIncrementTick+0xf0>)
   8177a:	681b      	ldr	r3, [r3, #0]
   8177c:	2b00      	cmp	r3, #0
   8177e:	d16b      	bne.n	81858 <vTaskIncrementTick+0xe4>
	{
		++xTickCount;
   81780:	4b39      	ldr	r3, [pc, #228]	; (81868 <vTaskIncrementTick+0xf4>)
   81782:	681a      	ldr	r2, [r3, #0]
   81784:	3201      	adds	r2, #1
   81786:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
   81788:	681b      	ldr	r3, [r3, #0]
   8178a:	bb03      	cbnz	r3, 817ce <vTaskIncrementTick+0x5a>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
   8178c:	4b37      	ldr	r3, [pc, #220]	; (8186c <vTaskIncrementTick+0xf8>)
   8178e:	681b      	ldr	r3, [r3, #0]
   81790:	681b      	ldr	r3, [r3, #0]
   81792:	b11b      	cbz	r3, 8179c <vTaskIncrementTick+0x28>
   81794:	4b36      	ldr	r3, [pc, #216]	; (81870 <vTaskIncrementTick+0xfc>)
   81796:	4798      	blx	r3
   81798:	bf00      	nop
   8179a:	e7fd      	b.n	81798 <vTaskIncrementTick+0x24>

			pxTemp = pxDelayedTaskList;
   8179c:	4b33      	ldr	r3, [pc, #204]	; (8186c <vTaskIncrementTick+0xf8>)
   8179e:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
   817a0:	4a34      	ldr	r2, [pc, #208]	; (81874 <vTaskIncrementTick+0x100>)
   817a2:	6810      	ldr	r0, [r2, #0]
   817a4:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
   817a6:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
   817a8:	4a33      	ldr	r2, [pc, #204]	; (81878 <vTaskIncrementTick+0x104>)
   817aa:	6811      	ldr	r1, [r2, #0]
   817ac:	3101      	adds	r1, #1
   817ae:	6011      	str	r1, [r2, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   817b0:	681b      	ldr	r3, [r3, #0]
   817b2:	681b      	ldr	r3, [r3, #0]
   817b4:	b923      	cbnz	r3, 817c0 <vTaskIncrementTick+0x4c>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
   817b6:	f04f 32ff 	mov.w	r2, #4294967295
   817ba:	4b30      	ldr	r3, [pc, #192]	; (8187c <vTaskIncrementTick+0x108>)
   817bc:	601a      	str	r2, [r3, #0]
   817be:	e006      	b.n	817ce <vTaskIncrementTick+0x5a>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   817c0:	4b2a      	ldr	r3, [pc, #168]	; (8186c <vTaskIncrementTick+0xf8>)
   817c2:	681b      	ldr	r3, [r3, #0]
   817c4:	68db      	ldr	r3, [r3, #12]
   817c6:	68db      	ldr	r3, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   817c8:	685a      	ldr	r2, [r3, #4]
   817ca:	4b2c      	ldr	r3, [pc, #176]	; (8187c <vTaskIncrementTick+0x108>)
   817cc:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
   817ce:	4b26      	ldr	r3, [pc, #152]	; (81868 <vTaskIncrementTick+0xf4>)
   817d0:	681a      	ldr	r2, [r3, #0]
   817d2:	4b2a      	ldr	r3, [pc, #168]	; (8187c <vTaskIncrementTick+0x108>)
   817d4:	681b      	ldr	r3, [r3, #0]
   817d6:	429a      	cmp	r2, r3
   817d8:	d342      	bcc.n	81860 <vTaskIncrementTick+0xec>
   817da:	4b24      	ldr	r3, [pc, #144]	; (8186c <vTaskIncrementTick+0xf8>)
   817dc:	681b      	ldr	r3, [r3, #0]
   817de:	681b      	ldr	r3, [r3, #0]
   817e0:	b14b      	cbz	r3, 817f6 <vTaskIncrementTick+0x82>
   817e2:	4b22      	ldr	r3, [pc, #136]	; (8186c <vTaskIncrementTick+0xf8>)
   817e4:	681b      	ldr	r3, [r3, #0]
   817e6:	68db      	ldr	r3, [r3, #12]
   817e8:	68dc      	ldr	r4, [r3, #12]
   817ea:	6863      	ldr	r3, [r4, #4]
   817ec:	4a1e      	ldr	r2, [pc, #120]	; (81868 <vTaskIncrementTick+0xf4>)
   817ee:	6812      	ldr	r2, [r2, #0]
   817f0:	4293      	cmp	r3, r2
   817f2:	d913      	bls.n	8181c <vTaskIncrementTick+0xa8>
   817f4:	e00e      	b.n	81814 <vTaskIncrementTick+0xa0>
   817f6:	f04f 32ff 	mov.w	r2, #4294967295
   817fa:	4b20      	ldr	r3, [pc, #128]	; (8187c <vTaskIncrementTick+0x108>)
   817fc:	601a      	str	r2, [r3, #0]
   817fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81802:	4b1a      	ldr	r3, [pc, #104]	; (8186c <vTaskIncrementTick+0xf8>)
   81804:	681b      	ldr	r3, [r3, #0]
   81806:	68db      	ldr	r3, [r3, #12]
   81808:	68dc      	ldr	r4, [r3, #12]
   8180a:	6863      	ldr	r3, [r4, #4]
   8180c:	4a16      	ldr	r2, [pc, #88]	; (81868 <vTaskIncrementTick+0xf4>)
   8180e:	6812      	ldr	r2, [r2, #0]
   81810:	4293      	cmp	r3, r2
   81812:	d907      	bls.n	81824 <vTaskIncrementTick+0xb0>
   81814:	4a19      	ldr	r2, [pc, #100]	; (8187c <vTaskIncrementTick+0x108>)
   81816:	6013      	str	r3, [r2, #0]
   81818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8181c:	4e18      	ldr	r6, [pc, #96]	; (81880 <vTaskIncrementTick+0x10c>)
   8181e:	4f19      	ldr	r7, [pc, #100]	; (81884 <vTaskIncrementTick+0x110>)
   81820:	f8df 806c 	ldr.w	r8, [pc, #108]	; 81890 <vTaskIncrementTick+0x11c>
   81824:	1d25      	adds	r5, r4, #4
   81826:	4628      	mov	r0, r5
   81828:	47b0      	blx	r6
   8182a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   8182c:	b113      	cbz	r3, 81834 <vTaskIncrementTick+0xc0>
   8182e:	f104 0018 	add.w	r0, r4, #24
   81832:	47b0      	blx	r6
   81834:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   81836:	683a      	ldr	r2, [r7, #0]
   81838:	4293      	cmp	r3, r2
   8183a:	bf88      	it	hi
   8183c:	603b      	strhi	r3, [r7, #0]
   8183e:	eb03 0083 	add.w	r0, r3, r3, lsl #2
   81842:	eb08 0080 	add.w	r0, r8, r0, lsl #2
   81846:	4629      	mov	r1, r5
   81848:	4b0f      	ldr	r3, [pc, #60]	; (81888 <vTaskIncrementTick+0x114>)
   8184a:	4798      	blx	r3
   8184c:	4b07      	ldr	r3, [pc, #28]	; (8186c <vTaskIncrementTick+0xf8>)
   8184e:	681b      	ldr	r3, [r3, #0]
   81850:	681b      	ldr	r3, [r3, #0]
   81852:	2b00      	cmp	r3, #0
   81854:	d1d5      	bne.n	81802 <vTaskIncrementTick+0x8e>
   81856:	e7ce      	b.n	817f6 <vTaskIncrementTick+0x82>
	}
	else
	{
		++uxMissedTicks;
   81858:	4b0c      	ldr	r3, [pc, #48]	; (8188c <vTaskIncrementTick+0x118>)
   8185a:	681a      	ldr	r2, [r3, #0]
   8185c:	3201      	adds	r2, #1
   8185e:	601a      	str	r2, [r3, #0]
   81860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81864:	2007ab98 	.word	0x2007ab98
   81868:	2007abb8 	.word	0x2007abb8
   8186c:	2007aafc 	.word	0x2007aafc
   81870:	00080ce9 	.word	0x00080ce9
   81874:	2007abbc 	.word	0x2007abbc
   81878:	2007abb4 	.word	0x2007abb4
   8187c:	2007018c 	.word	0x2007018c
   81880:	00080c61 	.word	0x00080c61
   81884:	2007ab30 	.word	0x2007ab30
   81888:	00080c09 	.word	0x00080c09
   8188c:	2007aae4 	.word	0x2007aae4
   81890:	2007ab34 	.word	0x2007ab34

00081894 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE != 0  */
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
   81894:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   81898:	4b31      	ldr	r3, [pc, #196]	; (81960 <xTaskResumeAll+0xcc>)
   8189a:	681b      	ldr	r3, [r3, #0]
   8189c:	b91b      	cbnz	r3, 818a6 <xTaskResumeAll+0x12>
   8189e:	4b31      	ldr	r3, [pc, #196]	; (81964 <xTaskResumeAll+0xd0>)
   818a0:	4798      	blx	r3
   818a2:	bf00      	nop
   818a4:	e7fd      	b.n	818a2 <xTaskResumeAll+0xe>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   818a6:	4b30      	ldr	r3, [pc, #192]	; (81968 <xTaskResumeAll+0xd4>)
   818a8:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
   818aa:	4b2d      	ldr	r3, [pc, #180]	; (81960 <xTaskResumeAll+0xcc>)
   818ac:	681a      	ldr	r2, [r3, #0]
   818ae:	3a01      	subs	r2, #1
   818b0:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   818b2:	681b      	ldr	r3, [r3, #0]
   818b4:	2b00      	cmp	r3, #0
   818b6:	d148      	bne.n	8194a <xTaskResumeAll+0xb6>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
   818b8:	4b2c      	ldr	r3, [pc, #176]	; (8196c <xTaskResumeAll+0xd8>)
   818ba:	681b      	ldr	r3, [r3, #0]
   818bc:	2b00      	cmp	r3, #0
   818be:	d046      	beq.n	8194e <xTaskResumeAll+0xba>
   818c0:	2500      	movs	r5, #0
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   818c2:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 81998 <xTaskResumeAll+0x104>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
					uxListRemove( &( pxTCB->xEventListItem ) );
   818c6:	4f2a      	ldr	r7, [pc, #168]	; (81970 <xTaskResumeAll+0xdc>)
					uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyQueue( pxTCB );
   818c8:	4e2a      	ldr	r6, [pc, #168]	; (81974 <xTaskResumeAll+0xe0>)
   818ca:	e01d      	b.n	81908 <xTaskResumeAll+0x74>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
   818cc:	f8d8 300c 	ldr.w	r3, [r8, #12]
   818d0:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xEventListItem ) );
   818d2:	f104 0018 	add.w	r0, r4, #24
   818d6:	47b8      	blx	r7
					uxListRemove( &( pxTCB->xGenericListItem ) );
   818d8:	f104 0904 	add.w	r9, r4, #4
   818dc:	4648      	mov	r0, r9
   818de:	47b8      	blx	r7
					prvAddTaskToReadyQueue( pxTCB );
   818e0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   818e2:	6832      	ldr	r2, [r6, #0]
   818e4:	4293      	cmp	r3, r2
   818e6:	bf88      	it	hi
   818e8:	6033      	strhi	r3, [r6, #0]
   818ea:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   818ee:	4822      	ldr	r0, [pc, #136]	; (81978 <xTaskResumeAll+0xe4>)
   818f0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   818f4:	4649      	mov	r1, r9
   818f6:	4b21      	ldr	r3, [pc, #132]	; (8197c <xTaskResumeAll+0xe8>)
   818f8:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   818fa:	4b21      	ldr	r3, [pc, #132]	; (81980 <xTaskResumeAll+0xec>)
   818fc:	681b      	ldr	r3, [r3, #0]
   818fe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   81900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					{
						xYieldRequired = pdTRUE;
   81902:	429a      	cmp	r2, r3
   81904:	bf28      	it	cs
   81906:	2501      	movcs	r5, #1
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   81908:	f8d8 3000 	ldr.w	r3, [r8]
   8190c:	2b00      	cmp	r3, #0
   8190e:	d1dd      	bne.n	818cc <xTaskResumeAll+0x38>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   81910:	4b1c      	ldr	r3, [pc, #112]	; (81984 <xTaskResumeAll+0xf0>)
   81912:	681b      	ldr	r3, [r3, #0]
   81914:	b163      	cbz	r3, 81930 <xTaskResumeAll+0x9c>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   81916:	4b1b      	ldr	r3, [pc, #108]	; (81984 <xTaskResumeAll+0xf0>)
   81918:	681b      	ldr	r3, [r3, #0]
   8191a:	b17b      	cbz	r3, 8193c <xTaskResumeAll+0xa8>
					{
						vTaskIncrementTick();
   8191c:	4d1a      	ldr	r5, [pc, #104]	; (81988 <xTaskResumeAll+0xf4>)
						--uxMissedTicks;
   8191e:	4c19      	ldr	r4, [pc, #100]	; (81984 <xTaskResumeAll+0xf0>)
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
					{
						vTaskIncrementTick();
   81920:	47a8      	blx	r5
						--uxMissedTicks;
   81922:	6823      	ldr	r3, [r4, #0]
   81924:	3b01      	subs	r3, #1
   81926:	6023      	str	r3, [r4, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   81928:	6823      	ldr	r3, [r4, #0]
   8192a:	2b00      	cmp	r3, #0
   8192c:	d1f8      	bne.n	81920 <xTaskResumeAll+0x8c>
   8192e:	e005      	b.n	8193c <xTaskResumeAll+0xa8>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
   81930:	2d01      	cmp	r5, #1
   81932:	d003      	beq.n	8193c <xTaskResumeAll+0xa8>
   81934:	4b15      	ldr	r3, [pc, #84]	; (8198c <xTaskResumeAll+0xf8>)
   81936:	681b      	ldr	r3, [r3, #0]
   81938:	2b01      	cmp	r3, #1
   8193a:	d10a      	bne.n	81952 <xTaskResumeAll+0xbe>
				{
					xAlreadyYielded = pdTRUE;
					xMissedYield = pdFALSE;
   8193c:	2200      	movs	r2, #0
   8193e:	4b13      	ldr	r3, [pc, #76]	; (8198c <xTaskResumeAll+0xf8>)
   81940:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
   81942:	4b13      	ldr	r3, [pc, #76]	; (81990 <xTaskResumeAll+0xfc>)
   81944:	4798      	blx	r3
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
				{
					xAlreadyYielded = pdTRUE;
   81946:	2401      	movs	r4, #1
   81948:	e004      	b.n	81954 <xTaskResumeAll+0xc0>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   8194a:	2400      	movs	r4, #0
   8194c:	e002      	b.n	81954 <xTaskResumeAll+0xc0>
   8194e:	2400      	movs	r4, #0
   81950:	e000      	b.n	81954 <xTaskResumeAll+0xc0>
   81952:	2400      	movs	r4, #0
					portYIELD_WITHIN_API();
				}
			}
		}
	}
	taskEXIT_CRITICAL();
   81954:	4b0f      	ldr	r3, [pc, #60]	; (81994 <xTaskResumeAll+0x100>)
   81956:	4798      	blx	r3

	return xAlreadyYielded;
}
   81958:	4620      	mov	r0, r4
   8195a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8195e:	bf00      	nop
   81960:	2007ab98 	.word	0x2007ab98
   81964:	00080ce9 	.word	0x00080ce9
   81968:	00080cf9 	.word	0x00080cf9
   8196c:	2007abdc 	.word	0x2007abdc
   81970:	00080c61 	.word	0x00080c61
   81974:	2007ab30 	.word	0x2007ab30
   81978:	2007ab34 	.word	0x2007ab34
   8197c:	00080c09 	.word	0x00080c09
   81980:	2007ab9c 	.word	0x2007ab9c
   81984:	2007aae4 	.word	0x2007aae4
   81988:	00081775 	.word	0x00081775
   8198c:	2007abd8 	.word	0x2007abd8
   81990:	00080cd9 	.word	0x00080cd9
   81994:	00080d19 	.word	0x00080d19
   81998:	2007aba0 	.word	0x2007aba0

0008199c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
   8199c:	b510      	push	{r4, lr}
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
   8199e:	4604      	mov	r4, r0
   819a0:	b178      	cbz	r0, 819c2 <vTaskDelay+0x26>
		{
			vTaskSuspendAll();
   819a2:	4b09      	ldr	r3, [pc, #36]	; (819c8 <vTaskDelay+0x2c>)
   819a4:	4798      	blx	r3
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
   819a6:	4b09      	ldr	r3, [pc, #36]	; (819cc <vTaskDelay+0x30>)
   819a8:	681b      	ldr	r3, [r3, #0]
   819aa:	441c      	add	r4, r3

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   819ac:	4b08      	ldr	r3, [pc, #32]	; (819d0 <vTaskDelay+0x34>)
   819ae:	6818      	ldr	r0, [r3, #0]
   819b0:	3004      	adds	r0, #4
   819b2:	4b08      	ldr	r3, [pc, #32]	; (819d4 <vTaskDelay+0x38>)
   819b4:	4798      	blx	r3
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
   819b6:	4620      	mov	r0, r4
   819b8:	4b07      	ldr	r3, [pc, #28]	; (819d8 <vTaskDelay+0x3c>)
   819ba:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
   819bc:	4b07      	ldr	r3, [pc, #28]	; (819dc <vTaskDelay+0x40>)
   819be:	4798      	blx	r3
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   819c0:	b908      	cbnz	r0, 819c6 <vTaskDelay+0x2a>
		{
			portYIELD_WITHIN_API();
   819c2:	4b07      	ldr	r3, [pc, #28]	; (819e0 <vTaskDelay+0x44>)
   819c4:	4798      	blx	r3
   819c6:	bd10      	pop	{r4, pc}
   819c8:	00081745 	.word	0x00081745
   819cc:	2007abb8 	.word	0x2007abb8
   819d0:	2007ab9c 	.word	0x2007ab9c
   819d4:	00080c61 	.word	0x00080c61
   819d8:	0008147d 	.word	0x0008147d
   819dc:	00081895 	.word	0x00081895
   819e0:	00080cd9 	.word	0x00080cd9

000819e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   819e4:	b580      	push	{r7, lr}
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   819e6:	4d15      	ldr	r5, [pc, #84]	; (81a3c <prvIdleTask+0x58>)

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
   819e8:	4e15      	ldr	r6, [pc, #84]	; (81a40 <prvIdleTask+0x5c>)
			{
				taskYIELD();
   819ea:	f8df 8078 	ldr.w	r8, [pc, #120]	; 81a64 <prvIdleTask+0x80>
   819ee:	e01c      	b.n	81a2a <prvIdleTask+0x46>

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
   819f0:	4b14      	ldr	r3, [pc, #80]	; (81a44 <prvIdleTask+0x60>)
   819f2:	4798      	blx	r3
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   819f4:	4b14      	ldr	r3, [pc, #80]	; (81a48 <prvIdleTask+0x64>)
   819f6:	681c      	ldr	r4, [r3, #0]
			xTaskResumeAll();
   819f8:	4b14      	ldr	r3, [pc, #80]	; (81a4c <prvIdleTask+0x68>)
   819fa:	4798      	blx	r3

			if( xListIsEmpty == pdFALSE )
   819fc:	b1ac      	cbz	r4, 81a2a <prvIdleTask+0x46>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
   819fe:	4b14      	ldr	r3, [pc, #80]	; (81a50 <prvIdleTask+0x6c>)
   81a00:	4798      	blx	r3
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
   81a02:	4b11      	ldr	r3, [pc, #68]	; (81a48 <prvIdleTask+0x64>)
   81a04:	68db      	ldr	r3, [r3, #12]
   81a06:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xGenericListItem ) );
   81a08:	1d20      	adds	r0, r4, #4
   81a0a:	4b12      	ldr	r3, [pc, #72]	; (81a54 <prvIdleTask+0x70>)
   81a0c:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
   81a0e:	4b12      	ldr	r3, [pc, #72]	; (81a58 <prvIdleTask+0x74>)
   81a10:	681a      	ldr	r2, [r3, #0]
   81a12:	3a01      	subs	r2, #1
   81a14:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
   81a16:	682b      	ldr	r3, [r5, #0]
   81a18:	3b01      	subs	r3, #1
   81a1a:	602b      	str	r3, [r5, #0]
				}
				taskEXIT_CRITICAL();
   81a1c:	4b0f      	ldr	r3, [pc, #60]	; (81a5c <prvIdleTask+0x78>)
   81a1e:	4798      	blx	r3
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
   81a20:	6b20      	ldr	r0, [r4, #48]	; 0x30
   81a22:	4f0f      	ldr	r7, [pc, #60]	; (81a60 <prvIdleTask+0x7c>)
   81a24:	47b8      	blx	r7
		vPortFree( pxTCB );
   81a26:	4620      	mov	r0, r4
   81a28:	47b8      	blx	r7
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   81a2a:	682b      	ldr	r3, [r5, #0]
   81a2c:	2b00      	cmp	r3, #0
   81a2e:	d1df      	bne.n	819f0 <prvIdleTask+0xc>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
   81a30:	6833      	ldr	r3, [r6, #0]
   81a32:	2b01      	cmp	r3, #1
   81a34:	d9f9      	bls.n	81a2a <prvIdleTask+0x46>
			{
				taskYIELD();
   81a36:	47c0      	blx	r8
   81a38:	e7f7      	b.n	81a2a <prvIdleTask+0x46>
   81a3a:	bf00      	nop
   81a3c:	2007ab04 	.word	0x2007ab04
   81a40:	2007ab34 	.word	0x2007ab34
   81a44:	00081745 	.word	0x00081745
   81a48:	2007ab08 	.word	0x2007ab08
   81a4c:	00081895 	.word	0x00081895
   81a50:	00080cf9 	.word	0x00080cf9
   81a54:	00080c61 	.word	0x00080c61
   81a58:	2007abdc 	.word	0x2007abdc
   81a5c:	00080d19 	.word	0x00080d19
   81a60:	00080f09 	.word	0x00080f09
   81a64:	00080cd9 	.word	0x00080cd9

00081a68 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   81a68:	b508      	push	{r3, lr}
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
   81a6a:	4b1d      	ldr	r3, [pc, #116]	; (81ae0 <vTaskSwitchContext+0x78>)
   81a6c:	681b      	ldr	r3, [r3, #0]
   81a6e:	b95b      	cbnz	r3, 81a88 <vTaskSwitchContext+0x20>
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   81a70:	4b1c      	ldr	r3, [pc, #112]	; (81ae4 <vTaskSwitchContext+0x7c>)
   81a72:	681b      	ldr	r3, [r3, #0]
   81a74:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81a78:	009b      	lsls	r3, r3, #2
   81a7a:	4a1b      	ldr	r2, [pc, #108]	; (81ae8 <vTaskSwitchContext+0x80>)
   81a7c:	58d3      	ldr	r3, [r2, r3]
   81a7e:	b9cb      	cbnz	r3, 81ab4 <vTaskSwitchContext+0x4c>
   81a80:	4b18      	ldr	r3, [pc, #96]	; (81ae4 <vTaskSwitchContext+0x7c>)
   81a82:	681b      	ldr	r3, [r3, #0]
   81a84:	b953      	cbnz	r3, 81a9c <vTaskSwitchContext+0x34>
   81a86:	e005      	b.n	81a94 <vTaskSwitchContext+0x2c>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
   81a88:	2201      	movs	r2, #1
   81a8a:	4b18      	ldr	r3, [pc, #96]	; (81aec <vTaskSwitchContext+0x84>)
   81a8c:	601a      	str	r2, [r3, #0]
   81a8e:	bd08      	pop	{r3, pc}
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   81a90:	681a      	ldr	r2, [r3, #0]
   81a92:	b92a      	cbnz	r2, 81aa0 <vTaskSwitchContext+0x38>
   81a94:	4b16      	ldr	r3, [pc, #88]	; (81af0 <vTaskSwitchContext+0x88>)
   81a96:	4798      	blx	r3
   81a98:	bf00      	nop
   81a9a:	e7fd      	b.n	81a98 <vTaskSwitchContext+0x30>
   81a9c:	4b11      	ldr	r3, [pc, #68]	; (81ae4 <vTaskSwitchContext+0x7c>)
   81a9e:	4912      	ldr	r1, [pc, #72]	; (81ae8 <vTaskSwitchContext+0x80>)
   81aa0:	681a      	ldr	r2, [r3, #0]
   81aa2:	3a01      	subs	r2, #1
   81aa4:	601a      	str	r2, [r3, #0]
   81aa6:	681a      	ldr	r2, [r3, #0]
   81aa8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   81aac:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
   81ab0:	2a00      	cmp	r2, #0
   81ab2:	d0ed      	beq.n	81a90 <vTaskSwitchContext+0x28>
   81ab4:	4b0b      	ldr	r3, [pc, #44]	; (81ae4 <vTaskSwitchContext+0x7c>)
   81ab6:	681b      	ldr	r3, [r3, #0]
   81ab8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81abc:	4a0a      	ldr	r2, [pc, #40]	; (81ae8 <vTaskSwitchContext+0x80>)
   81abe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   81ac2:	685a      	ldr	r2, [r3, #4]
   81ac4:	6852      	ldr	r2, [r2, #4]
   81ac6:	605a      	str	r2, [r3, #4]
   81ac8:	f103 0108 	add.w	r1, r3, #8
   81acc:	428a      	cmp	r2, r1
   81ace:	bf04      	itt	eq
   81ad0:	6852      	ldreq	r2, [r2, #4]
   81ad2:	605a      	streq	r2, [r3, #4]
   81ad4:	685b      	ldr	r3, [r3, #4]
   81ad6:	68da      	ldr	r2, [r3, #12]
   81ad8:	4b06      	ldr	r3, [pc, #24]	; (81af4 <vTaskSwitchContext+0x8c>)
   81ada:	601a      	str	r2, [r3, #0]
   81adc:	bd08      	pop	{r3, pc}
   81ade:	bf00      	nop
   81ae0:	2007ab98 	.word	0x2007ab98
   81ae4:	2007ab30 	.word	0x2007ab30
   81ae8:	2007ab34 	.word	0x2007ab34
   81aec:	2007abd8 	.word	0x2007abd8
   81af0:	00080ce9 	.word	0x00080ce9
   81af4:	2007ab9c 	.word	0x2007ab9c

00081af8 <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
   81af8:	b538      	push	{r3, r4, r5, lr}
   81afa:	460c      	mov	r4, r1
portTickType xTimeToWake;

	configASSERT( pxEventList );
   81afc:	b918      	cbnz	r0, 81b06 <vTaskPlaceOnEventList+0xe>
   81afe:	4b0e      	ldr	r3, [pc, #56]	; (81b38 <vTaskPlaceOnEventList+0x40>)
   81b00:	4798      	blx	r3
   81b02:	bf00      	nop
   81b04:	e7fd      	b.n	81b02 <vTaskPlaceOnEventList+0xa>
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   81b06:	4d0d      	ldr	r5, [pc, #52]	; (81b3c <vTaskPlaceOnEventList+0x44>)
   81b08:	6829      	ldr	r1, [r5, #0]
   81b0a:	3118      	adds	r1, #24
   81b0c:	4b0c      	ldr	r3, [pc, #48]	; (81b40 <vTaskPlaceOnEventList+0x48>)
   81b0e:	4798      	blx	r3

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   81b10:	6828      	ldr	r0, [r5, #0]
   81b12:	3004      	adds	r0, #4
   81b14:	4b0b      	ldr	r3, [pc, #44]	; (81b44 <vTaskPlaceOnEventList+0x4c>)
   81b16:	4798      	blx	r3
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
   81b18:	f1b4 3fff 	cmp.w	r4, #4294967295
   81b1c:	d105      	bne.n	81b2a <vTaskPlaceOnEventList+0x32>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   81b1e:	6829      	ldr	r1, [r5, #0]
   81b20:	4809      	ldr	r0, [pc, #36]	; (81b48 <vTaskPlaceOnEventList+0x50>)
   81b22:	3104      	adds	r1, #4
   81b24:	4b09      	ldr	r3, [pc, #36]	; (81b4c <vTaskPlaceOnEventList+0x54>)
   81b26:	4798      	blx	r3
   81b28:	bd38      	pop	{r3, r4, r5, pc}
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
   81b2a:	4b09      	ldr	r3, [pc, #36]	; (81b50 <vTaskPlaceOnEventList+0x58>)
   81b2c:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
   81b2e:	4420      	add	r0, r4
   81b30:	4b08      	ldr	r3, [pc, #32]	; (81b54 <vTaskPlaceOnEventList+0x5c>)
   81b32:	4798      	blx	r3
   81b34:	bd38      	pop	{r3, r4, r5, pc}
   81b36:	bf00      	nop
   81b38:	00080ce9 	.word	0x00080ce9
   81b3c:	2007ab9c 	.word	0x2007ab9c
   81b40:	00080c25 	.word	0x00080c25
   81b44:	00080c61 	.word	0x00080c61
   81b48:	2007aae8 	.word	0x2007aae8
   81b4c:	00080c09 	.word	0x00080c09
   81b50:	2007abb8 	.word	0x2007abb8
   81b54:	0008147d 	.word	0x0008147d

00081b58 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait )
	{
   81b58:	b538      	push	{r3, r4, r5, lr}
   81b5a:	460d      	mov	r5, r1
	portTickType xTimeToWake;

		configASSERT( pxEventList );
   81b5c:	b918      	cbnz	r0, 81b66 <vTaskPlaceOnEventListRestricted+0xe>
   81b5e:	4b09      	ldr	r3, [pc, #36]	; (81b84 <vTaskPlaceOnEventListRestricted+0x2c>)
   81b60:	4798      	blx	r3
   81b62:	bf00      	nop
   81b64:	e7fd      	b.n	81b62 <vTaskPlaceOnEventListRestricted+0xa>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   81b66:	4c08      	ldr	r4, [pc, #32]	; (81b88 <vTaskPlaceOnEventListRestricted+0x30>)
   81b68:	6821      	ldr	r1, [r4, #0]
   81b6a:	3118      	adds	r1, #24
   81b6c:	4b07      	ldr	r3, [pc, #28]	; (81b8c <vTaskPlaceOnEventListRestricted+0x34>)
   81b6e:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   81b70:	6820      	ldr	r0, [r4, #0]
   81b72:	3004      	adds	r0, #4
   81b74:	4b06      	ldr	r3, [pc, #24]	; (81b90 <vTaskPlaceOnEventListRestricted+0x38>)
   81b76:	4798      	blx	r3
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
   81b78:	4b06      	ldr	r3, [pc, #24]	; (81b94 <vTaskPlaceOnEventListRestricted+0x3c>)
   81b7a:	6818      	ldr	r0, [r3, #0]
		
		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
   81b7c:	4428      	add	r0, r5
   81b7e:	4b06      	ldr	r3, [pc, #24]	; (81b98 <vTaskPlaceOnEventListRestricted+0x40>)
   81b80:	4798      	blx	r3
   81b82:	bd38      	pop	{r3, r4, r5, pc}
   81b84:	00080ce9 	.word	0x00080ce9
   81b88:	2007ab9c 	.word	0x2007ab9c
   81b8c:	00080c09 	.word	0x00080c09
   81b90:	00080c61 	.word	0x00080c61
   81b94:	2007abb8 	.word	0x2007abb8
   81b98:	0008147d 	.word	0x0008147d

00081b9c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
   81b9c:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   81b9e:	68c3      	ldr	r3, [r0, #12]
   81ba0:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
   81ba2:	b91c      	cbnz	r4, 81bac <xTaskRemoveFromEventList+0x10>
   81ba4:	4b16      	ldr	r3, [pc, #88]	; (81c00 <xTaskRemoveFromEventList+0x64>)
   81ba6:	4798      	blx	r3
   81ba8:	bf00      	nop
   81baa:	e7fd      	b.n	81ba8 <xTaskRemoveFromEventList+0xc>
	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   81bac:	f104 0518 	add.w	r5, r4, #24
   81bb0:	4628      	mov	r0, r5
   81bb2:	4b14      	ldr	r3, [pc, #80]	; (81c04 <xTaskRemoveFromEventList+0x68>)
   81bb4:	4798      	blx	r3

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   81bb6:	4b14      	ldr	r3, [pc, #80]	; (81c08 <xTaskRemoveFromEventList+0x6c>)
   81bb8:	681b      	ldr	r3, [r3, #0]
   81bba:	b99b      	cbnz	r3, 81be4 <xTaskRemoveFromEventList+0x48>
	{
		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
   81bbc:	1d25      	adds	r5, r4, #4
   81bbe:	4628      	mov	r0, r5
   81bc0:	4b10      	ldr	r3, [pc, #64]	; (81c04 <xTaskRemoveFromEventList+0x68>)
   81bc2:	4798      	blx	r3
		prvAddTaskToReadyQueue( pxUnblockedTCB );
   81bc4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   81bc6:	4a11      	ldr	r2, [pc, #68]	; (81c0c <xTaskRemoveFromEventList+0x70>)
   81bc8:	6812      	ldr	r2, [r2, #0]
   81bca:	4293      	cmp	r3, r2
   81bcc:	bf84      	itt	hi
   81bce:	4a0f      	ldrhi	r2, [pc, #60]	; (81c0c <xTaskRemoveFromEventList+0x70>)
   81bd0:	6013      	strhi	r3, [r2, #0]
   81bd2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81bd6:	480e      	ldr	r0, [pc, #56]	; (81c10 <xTaskRemoveFromEventList+0x74>)
   81bd8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   81bdc:	4629      	mov	r1, r5
   81bde:	4b0d      	ldr	r3, [pc, #52]	; (81c14 <xTaskRemoveFromEventList+0x78>)
   81be0:	4798      	blx	r3
   81be2:	e003      	b.n	81bec <xTaskRemoveFromEventList+0x50>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   81be4:	480c      	ldr	r0, [pc, #48]	; (81c18 <xTaskRemoveFromEventList+0x7c>)
   81be6:	4629      	mov	r1, r5
   81be8:	4b0a      	ldr	r3, [pc, #40]	; (81c14 <xTaskRemoveFromEventList+0x78>)
   81bea:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
   81bec:	4b0b      	ldr	r3, [pc, #44]	; (81c1c <xTaskRemoveFromEventList+0x80>)
   81bee:	681b      	ldr	r3, [r3, #0]
   81bf0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   81bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
   81bf4:	4298      	cmp	r0, r3
   81bf6:	bf34      	ite	cc
   81bf8:	2000      	movcc	r0, #0
   81bfa:	2001      	movcs	r0, #1
   81bfc:	bd38      	pop	{r3, r4, r5, pc}
   81bfe:	bf00      	nop
   81c00:	00080ce9 	.word	0x00080ce9
   81c04:	00080c61 	.word	0x00080c61
   81c08:	2007ab98 	.word	0x2007ab98
   81c0c:	2007ab30 	.word	0x2007ab30
   81c10:	2007ab34 	.word	0x2007ab34
   81c14:	00080c09 	.word	0x00080c09
   81c18:	2007aba0 	.word	0x2007aba0
   81c1c:	2007ab9c 	.word	0x2007ab9c

00081c20 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
   81c20:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
   81c22:	b918      	cbnz	r0, 81c2c <vTaskSetTimeOutState+0xc>
   81c24:	4b05      	ldr	r3, [pc, #20]	; (81c3c <vTaskSetTimeOutState+0x1c>)
   81c26:	4798      	blx	r3
   81c28:	bf00      	nop
   81c2a:	e7fd      	b.n	81c28 <vTaskSetTimeOutState+0x8>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   81c2c:	4a04      	ldr	r2, [pc, #16]	; (81c40 <vTaskSetTimeOutState+0x20>)
   81c2e:	6812      	ldr	r2, [r2, #0]
   81c30:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   81c32:	4a04      	ldr	r2, [pc, #16]	; (81c44 <vTaskSetTimeOutState+0x24>)
   81c34:	6812      	ldr	r2, [r2, #0]
   81c36:	6042      	str	r2, [r0, #4]
   81c38:	bd08      	pop	{r3, pc}
   81c3a:	bf00      	nop
   81c3c:	00080ce9 	.word	0x00080ce9
   81c40:	2007abb4 	.word	0x2007abb4
   81c44:	2007abb8 	.word	0x2007abb8

00081c48 <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
   81c48:	b538      	push	{r3, r4, r5, lr}
   81c4a:	460d      	mov	r5, r1
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
   81c4c:	4604      	mov	r4, r0
   81c4e:	b918      	cbnz	r0, 81c58 <xTaskCheckForTimeOut+0x10>
   81c50:	4b18      	ldr	r3, [pc, #96]	; (81cb4 <xTaskCheckForTimeOut+0x6c>)
   81c52:	4798      	blx	r3
   81c54:	bf00      	nop
   81c56:	e7fd      	b.n	81c54 <xTaskCheckForTimeOut+0xc>
	configASSERT( pxTicksToWait );
   81c58:	b919      	cbnz	r1, 81c62 <xTaskCheckForTimeOut+0x1a>
   81c5a:	4b16      	ldr	r3, [pc, #88]	; (81cb4 <xTaskCheckForTimeOut+0x6c>)
   81c5c:	4798      	blx	r3
   81c5e:	bf00      	nop
   81c60:	e7fd      	b.n	81c5e <xTaskCheckForTimeOut+0x16>

	taskENTER_CRITICAL();
   81c62:	4b15      	ldr	r3, [pc, #84]	; (81cb8 <xTaskCheckForTimeOut+0x70>)
   81c64:	4798      	blx	r3
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
   81c66:	682b      	ldr	r3, [r5, #0]
   81c68:	f1b3 3fff 	cmp.w	r3, #4294967295
   81c6c:	d019      	beq.n	81ca2 <xTaskCheckForTimeOut+0x5a>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
   81c6e:	4a13      	ldr	r2, [pc, #76]	; (81cbc <xTaskCheckForTimeOut+0x74>)
   81c70:	6811      	ldr	r1, [r2, #0]
   81c72:	6822      	ldr	r2, [r4, #0]
   81c74:	428a      	cmp	r2, r1
   81c76:	d004      	beq.n	81c82 <xTaskCheckForTimeOut+0x3a>
   81c78:	4a11      	ldr	r2, [pc, #68]	; (81cc0 <xTaskCheckForTimeOut+0x78>)
   81c7a:	6811      	ldr	r1, [r2, #0]
   81c7c:	6862      	ldr	r2, [r4, #4]
   81c7e:	428a      	cmp	r2, r1
   81c80:	d911      	bls.n	81ca6 <xTaskCheckForTimeOut+0x5e>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
   81c82:	4a0f      	ldr	r2, [pc, #60]	; (81cc0 <xTaskCheckForTimeOut+0x78>)
   81c84:	6811      	ldr	r1, [r2, #0]
   81c86:	6862      	ldr	r2, [r4, #4]
   81c88:	1a89      	subs	r1, r1, r2
   81c8a:	428b      	cmp	r3, r1
   81c8c:	d90d      	bls.n	81caa <xTaskCheckForTimeOut+0x62>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
   81c8e:	490c      	ldr	r1, [pc, #48]	; (81cc0 <xTaskCheckForTimeOut+0x78>)
   81c90:	6809      	ldr	r1, [r1, #0]
   81c92:	1a52      	subs	r2, r2, r1
   81c94:	4413      	add	r3, r2
   81c96:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
   81c98:	4620      	mov	r0, r4
   81c9a:	4b0a      	ldr	r3, [pc, #40]	; (81cc4 <xTaskCheckForTimeOut+0x7c>)
   81c9c:	4798      	blx	r3
			xReturn = pdFALSE;
   81c9e:	2400      	movs	r4, #0
   81ca0:	e004      	b.n	81cac <xTaskCheckForTimeOut+0x64>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
   81ca2:	2400      	movs	r4, #0
   81ca4:	e002      	b.n	81cac <xTaskCheckForTimeOut+0x64>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
   81ca6:	2401      	movs	r4, #1
   81ca8:	e000      	b.n	81cac <xTaskCheckForTimeOut+0x64>
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
   81caa:	2401      	movs	r4, #1
		}
	}
	taskEXIT_CRITICAL();
   81cac:	4b06      	ldr	r3, [pc, #24]	; (81cc8 <xTaskCheckForTimeOut+0x80>)
   81cae:	4798      	blx	r3

	return xReturn;
}
   81cb0:	4620      	mov	r0, r4
   81cb2:	bd38      	pop	{r3, r4, r5, pc}
   81cb4:	00080ce9 	.word	0x00080ce9
   81cb8:	00080cf9 	.word	0x00080cf9
   81cbc:	2007abb4 	.word	0x2007abb4
   81cc0:	2007abb8 	.word	0x2007abb8
   81cc4:	00081c21 	.word	0x00081c21
   81cc8:	00080d19 	.word	0x00080d19

00081ccc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xMissedYield = pdTRUE;
   81ccc:	2201      	movs	r2, #1
   81cce:	4b01      	ldr	r3, [pc, #4]	; (81cd4 <vTaskMissedYield+0x8>)
   81cd0:	601a      	str	r2, [r3, #0]
   81cd2:	4770      	bx	lr
   81cd4:	2007abd8 	.word	0x2007abd8

00081cd8 <xTaskGetCurrentTaskHandle>:
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
   81cd8:	4b01      	ldr	r3, [pc, #4]	; (81ce0 <xTaskGetCurrentTaskHandle+0x8>)
   81cda:	6818      	ldr	r0, [r3, #0]

		return xReturn;
	}
   81cdc:	4770      	bx	lr
   81cde:	bf00      	nop
   81ce0:	2007ab9c 	.word	0x2007ab9c

00081ce4 <xTaskGetSchedulerState>:

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
   81ce4:	4b05      	ldr	r3, [pc, #20]	; (81cfc <xTaskGetSchedulerState+0x18>)
   81ce6:	681b      	ldr	r3, [r3, #0]
   81ce8:	b133      	cbz	r3, 81cf8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   81cea:	4b05      	ldr	r3, [pc, #20]	; (81d00 <xTaskGetSchedulerState+0x1c>)
   81cec:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
   81cee:	2b00      	cmp	r3, #0
   81cf0:	bf14      	ite	ne
   81cf2:	2002      	movne	r0, #2
   81cf4:	2001      	moveq	r0, #1
   81cf6:	4770      	bx	lr
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   81cf8:	2000      	movs	r0, #0
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
   81cfa:	4770      	bx	lr
   81cfc:	2007ab00 	.word	0x2007ab00
   81d00:	2007ab98 	.word	0x2007ab98

00081d04 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
   81d04:	b538      	push	{r3, r4, r5, lr}
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
   81d06:	4604      	mov	r4, r0
   81d08:	2800      	cmp	r0, #0
   81d0a:	d02e      	beq.n	81d6a <vTaskPriorityInherit+0x66>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
   81d0c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   81d0e:	4a17      	ldr	r2, [pc, #92]	; (81d6c <vTaskPriorityInherit+0x68>)
   81d10:	6812      	ldr	r2, [r2, #0]
   81d12:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
   81d14:	4293      	cmp	r3, r2
   81d16:	d228      	bcs.n	81d6a <vTaskPriorityInherit+0x66>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
   81d18:	4a14      	ldr	r2, [pc, #80]	; (81d6c <vTaskPriorityInherit+0x68>)
   81d1a:	6812      	ldr	r2, [r2, #0]
   81d1c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
   81d1e:	f1c2 0205 	rsb	r2, r2, #5
   81d22:	6182      	str	r2, [r0, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
   81d24:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81d28:	4a11      	ldr	r2, [pc, #68]	; (81d70 <vTaskPriorityInherit+0x6c>)
   81d2a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   81d2e:	6942      	ldr	r2, [r0, #20]
   81d30:	429a      	cmp	r2, r3
   81d32:	d116      	bne.n	81d62 <vTaskPriorityInherit+0x5e>
				{
					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   81d34:	1d05      	adds	r5, r0, #4
   81d36:	4628      	mov	r0, r5
   81d38:	4b0e      	ldr	r3, [pc, #56]	; (81d74 <vTaskPriorityInherit+0x70>)
   81d3a:	4798      	blx	r3
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   81d3c:	4b0b      	ldr	r3, [pc, #44]	; (81d6c <vTaskPriorityInherit+0x68>)
   81d3e:	681b      	ldr	r3, [r3, #0]
   81d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   81d42:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyQueue( pxTCB );
   81d44:	4a0c      	ldr	r2, [pc, #48]	; (81d78 <vTaskPriorityInherit+0x74>)
   81d46:	6812      	ldr	r2, [r2, #0]
   81d48:	4293      	cmp	r3, r2
   81d4a:	bf84      	itt	hi
   81d4c:	4a0a      	ldrhi	r2, [pc, #40]	; (81d78 <vTaskPriorityInherit+0x74>)
   81d4e:	6013      	strhi	r3, [r2, #0]
   81d50:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81d54:	4806      	ldr	r0, [pc, #24]	; (81d70 <vTaskPriorityInherit+0x6c>)
   81d56:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   81d5a:	4629      	mov	r1, r5
   81d5c:	4b07      	ldr	r3, [pc, #28]	; (81d7c <vTaskPriorityInherit+0x78>)
   81d5e:	4798      	blx	r3
   81d60:	bd38      	pop	{r3, r4, r5, pc}
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   81d62:	4b02      	ldr	r3, [pc, #8]	; (81d6c <vTaskPriorityInherit+0x68>)
   81d64:	681b      	ldr	r3, [r3, #0]
   81d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   81d68:	62c3      	str	r3, [r0, #44]	; 0x2c
   81d6a:	bd38      	pop	{r3, r4, r5, pc}
   81d6c:	2007ab9c 	.word	0x2007ab9c
   81d70:	2007ab34 	.word	0x2007ab34
   81d74:	00080c61 	.word	0x00080c61
   81d78:	2007ab30 	.word	0x2007ab30
   81d7c:	00080c09 	.word	0x00080c09

00081d80 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
   81d80:	b538      	push	{r3, r4, r5, lr}
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
   81d82:	4604      	mov	r4, r0
   81d84:	b1d0      	cbz	r0, 81dbc <vTaskPriorityDisinherit+0x3c>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   81d86:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   81d88:	6c83      	ldr	r3, [r0, #72]	; 0x48
   81d8a:	429a      	cmp	r2, r3
   81d8c:	d016      	beq.n	81dbc <vTaskPriorityDisinherit+0x3c>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   81d8e:	1d05      	adds	r5, r0, #4
   81d90:	4628      	mov	r0, r5
   81d92:	4b0b      	ldr	r3, [pc, #44]	; (81dc0 <vTaskPriorityDisinherit+0x40>)
   81d94:	4798      	blx	r3
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
   81d96:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   81d98:	62e3      	str	r3, [r4, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
   81d9a:	f1c3 0205 	rsb	r2, r3, #5
   81d9e:	61a2      	str	r2, [r4, #24]
				prvAddTaskToReadyQueue( pxTCB );
   81da0:	4a08      	ldr	r2, [pc, #32]	; (81dc4 <vTaskPriorityDisinherit+0x44>)
   81da2:	6812      	ldr	r2, [r2, #0]
   81da4:	4293      	cmp	r3, r2
   81da6:	bf84      	itt	hi
   81da8:	4a06      	ldrhi	r2, [pc, #24]	; (81dc4 <vTaskPriorityDisinherit+0x44>)
   81daa:	6013      	strhi	r3, [r2, #0]
   81dac:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81db0:	4805      	ldr	r0, [pc, #20]	; (81dc8 <vTaskPriorityDisinherit+0x48>)
   81db2:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   81db6:	4629      	mov	r1, r5
   81db8:	4b04      	ldr	r3, [pc, #16]	; (81dcc <vTaskPriorityDisinherit+0x4c>)
   81dba:	4798      	blx	r3
   81dbc:	bd38      	pop	{r3, r4, r5, pc}
   81dbe:	bf00      	nop
   81dc0:	00080c61 	.word	0x00080c61
   81dc4:	2007ab30 	.word	0x2007ab30
   81dc8:	2007ab34 	.word	0x2007ab34
   81dcc:	00080c09 	.word	0x00080c09

00081dd0 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
   81dd0:	b510      	push	{r4, lr}
   81dd2:	4604      	mov	r4, r0
portBASE_TYPE xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   81dd4:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   81dd6:	6120      	str	r0, [r4, #16]

	if( xNextExpiryTime <= xTimeNow )
   81dd8:	4291      	cmp	r1, r2
   81dda:	d80a      	bhi.n	81df2 <prvInsertTimerInActiveList+0x22>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
   81ddc:	1ad2      	subs	r2, r2, r3
   81dde:	6981      	ldr	r1, [r0, #24]
   81de0:	428a      	cmp	r2, r1
   81de2:	d211      	bcs.n	81e08 <prvInsertTimerInActiveList+0x38>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   81de4:	4b0a      	ldr	r3, [pc, #40]	; (81e10 <prvInsertTimerInActiveList+0x40>)
   81de6:	6818      	ldr	r0, [r3, #0]
   81de8:	1d21      	adds	r1, r4, #4
   81dea:	4b0a      	ldr	r3, [pc, #40]	; (81e14 <prvInsertTimerInActiveList+0x44>)
   81dec:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
   81dee:	2000      	movs	r0, #0
   81df0:	bd10      	pop	{r4, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   81df2:	429a      	cmp	r2, r3
   81df4:	d201      	bcs.n	81dfa <prvInsertTimerInActiveList+0x2a>
   81df6:	4299      	cmp	r1, r3
   81df8:	d208      	bcs.n	81e0c <prvInsertTimerInActiveList+0x3c>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   81dfa:	4b07      	ldr	r3, [pc, #28]	; (81e18 <prvInsertTimerInActiveList+0x48>)
   81dfc:	6818      	ldr	r0, [r3, #0]
   81dfe:	1d21      	adds	r1, r4, #4
   81e00:	4b04      	ldr	r3, [pc, #16]	; (81e14 <prvInsertTimerInActiveList+0x44>)
   81e02:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
   81e04:	2000      	movs	r0, #0
   81e06:	bd10      	pop	{r4, pc}
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   81e08:	2001      	movs	r0, #1
   81e0a:	bd10      	pop	{r4, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   81e0c:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
   81e0e:	bd10      	pop	{r4, pc}
   81e10:	2007ac18 	.word	0x2007ac18
   81e14:	00080c25 	.word	0x00080c25
   81e18:	2007abe4 	.word	0x2007abe4

00081e1c <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   81e1c:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   81e1e:	4b0d      	ldr	r3, [pc, #52]	; (81e54 <prvCheckForValidListAndQueue+0x38>)
   81e20:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   81e22:	4b0d      	ldr	r3, [pc, #52]	; (81e58 <prvCheckForValidListAndQueue+0x3c>)
   81e24:	681b      	ldr	r3, [r3, #0]
   81e26:	b98b      	cbnz	r3, 81e4c <prvCheckForValidListAndQueue+0x30>
		{
			vListInitialise( &xActiveTimerList1 );
   81e28:	4d0c      	ldr	r5, [pc, #48]	; (81e5c <prvCheckForValidListAndQueue+0x40>)
   81e2a:	4628      	mov	r0, r5
   81e2c:	4e0c      	ldr	r6, [pc, #48]	; (81e60 <prvCheckForValidListAndQueue+0x44>)
   81e2e:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
   81e30:	4c0c      	ldr	r4, [pc, #48]	; (81e64 <prvCheckForValidListAndQueue+0x48>)
   81e32:	4620      	mov	r0, r4
   81e34:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
   81e36:	4b0c      	ldr	r3, [pc, #48]	; (81e68 <prvCheckForValidListAndQueue+0x4c>)
   81e38:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   81e3a:	4b0c      	ldr	r3, [pc, #48]	; (81e6c <prvCheckForValidListAndQueue+0x50>)
   81e3c:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
   81e3e:	2005      	movs	r0, #5
   81e40:	210c      	movs	r1, #12
   81e42:	2200      	movs	r2, #0
   81e44:	4b0a      	ldr	r3, [pc, #40]	; (81e70 <prvCheckForValidListAndQueue+0x54>)
   81e46:	4798      	blx	r3
   81e48:	4b03      	ldr	r3, [pc, #12]	; (81e58 <prvCheckForValidListAndQueue+0x3c>)
   81e4a:	6018      	str	r0, [r3, #0]
		}
	}
	taskEXIT_CRITICAL();
   81e4c:	4b09      	ldr	r3, [pc, #36]	; (81e74 <prvCheckForValidListAndQueue+0x58>)
   81e4e:	4798      	blx	r3
   81e50:	bd70      	pop	{r4, r5, r6, pc}
   81e52:	bf00      	nop
   81e54:	00080cf9 	.word	0x00080cf9
   81e58:	2007ac14 	.word	0x2007ac14
   81e5c:	2007abe8 	.word	0x2007abe8
   81e60:	00080be9 	.word	0x00080be9
   81e64:	2007abfc 	.word	0x2007abfc
   81e68:	2007abe4 	.word	0x2007abe4
   81e6c:	2007ac18 	.word	0x2007ac18
   81e70:	000810d1 	.word	0x000810d1
   81e74:	00080d19 	.word	0x00080d19

00081e78 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
   81e78:	b510      	push	{r4, lr}
   81e7a:	b084      	sub	sp, #16

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   81e7c:	4b0b      	ldr	r3, [pc, #44]	; (81eac <xTimerCreateTimerTask+0x34>)
   81e7e:	4798      	blx	r3

	if( xTimerQueue != NULL )
   81e80:	4b0b      	ldr	r3, [pc, #44]	; (81eb0 <xTimerCreateTimerTask+0x38>)
   81e82:	681b      	ldr	r3, [r3, #0]
   81e84:	b163      	cbz	r3, 81ea0 <xTimerCreateTimerTask+0x28>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
   81e86:	2304      	movs	r3, #4
   81e88:	9300      	str	r3, [sp, #0]
   81e8a:	2300      	movs	r3, #0
   81e8c:	9301      	str	r3, [sp, #4]
   81e8e:	9302      	str	r3, [sp, #8]
   81e90:	9303      	str	r3, [sp, #12]
   81e92:	4808      	ldr	r0, [pc, #32]	; (81eb4 <xTimerCreateTimerTask+0x3c>)
   81e94:	4908      	ldr	r1, [pc, #32]	; (81eb8 <xTimerCreateTimerTask+0x40>)
   81e96:	f44f 7282 	mov.w	r2, #260	; 0x104
   81e9a:	4c08      	ldr	r4, [pc, #32]	; (81ebc <xTimerCreateTimerTask+0x44>)
   81e9c:	47a0      	blx	r4
		}
		#endif
	}

	configASSERT( xReturn );
   81e9e:	b918      	cbnz	r0, 81ea8 <xTimerCreateTimerTask+0x30>
   81ea0:	4b07      	ldr	r3, [pc, #28]	; (81ec0 <xTimerCreateTimerTask+0x48>)
   81ea2:	4798      	blx	r3
   81ea4:	bf00      	nop
   81ea6:	e7fd      	b.n	81ea4 <xTimerCreateTimerTask+0x2c>
	return xReturn;
}
   81ea8:	b004      	add	sp, #16
   81eaa:	bd10      	pop	{r4, pc}
   81eac:	00081e1d 	.word	0x00081e1d
   81eb0:	2007ac14 	.word	0x2007ac14
   81eb4:	00081fcd 	.word	0x00081fcd
   81eb8:	000861bc 	.word	0x000861bc
   81ebc:	000814d5 	.word	0x000814d5
   81ec0:	00080ce9 	.word	0x00080ce9

00081ec4 <xTimerGenericCommand>:
	return ( xTimerHandle ) pxNewTimer;
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
   81ec4:	b510      	push	{r4, lr}
   81ec6:	b084      	sub	sp, #16
portBASE_TYPE xReturn = pdFAIL;
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   81ec8:	4c0f      	ldr	r4, [pc, #60]	; (81f08 <xTimerGenericCommand+0x44>)
   81eca:	6824      	ldr	r4, [r4, #0]
   81ecc:	b1c4      	cbz	r4, 81f00 <xTimerGenericCommand+0x3c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   81ece:	9101      	str	r1, [sp, #4]
		xMessage.xMessageValue = xOptionalValue;
   81ed0:	9202      	str	r2, [sp, #8]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
   81ed2:	9003      	str	r0, [sp, #12]

		if( pxHigherPriorityTaskWoken == NULL )
   81ed4:	b96b      	cbnz	r3, 81ef2 <xTimerGenericCommand+0x2e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   81ed6:	4b0d      	ldr	r3, [pc, #52]	; (81f0c <xTimerGenericCommand+0x48>)
   81ed8:	4798      	blx	r3
   81eda:	2801      	cmp	r0, #1
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
   81edc:	4b0a      	ldr	r3, [pc, #40]	; (81f08 <xTimerGenericCommand+0x44>)
   81ede:	6818      	ldr	r0, [r3, #0]
   81ee0:	a901      	add	r1, sp, #4
   81ee2:	bf07      	ittee	eq
   81ee4:	9a06      	ldreq	r2, [sp, #24]
   81ee6:	2300      	moveq	r3, #0
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   81ee8:	2200      	movne	r2, #0
   81eea:	4613      	movne	r3, r2
   81eec:	4c08      	ldr	r4, [pc, #32]	; (81f10 <xTimerGenericCommand+0x4c>)
   81eee:	47a0      	blx	r4
   81ef0:	e007      	b.n	81f02 <xTimerGenericCommand+0x3e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   81ef2:	4620      	mov	r0, r4
   81ef4:	a901      	add	r1, sp, #4
   81ef6:	461a      	mov	r2, r3
   81ef8:	2300      	movs	r3, #0
   81efa:	4c06      	ldr	r4, [pc, #24]	; (81f14 <xTimerGenericCommand+0x50>)
   81efc:	47a0      	blx	r4
   81efe:	e000      	b.n	81f02 <xTimerGenericCommand+0x3e>
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
portBASE_TYPE xReturn = pdFAIL;
   81f00:	2000      	movs	r0, #0

		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}

	return xReturn;
}
   81f02:	b004      	add	sp, #16
   81f04:	bd10      	pop	{r4, pc}
   81f06:	bf00      	nop
   81f08:	2007ac14 	.word	0x2007ac14
   81f0c:	00081ce5 	.word	0x00081ce5
   81f10:	00081129 	.word	0x00081129
   81f14:	00081245 	.word	0x00081245

00081f18 <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
   81f18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   81f1c:	b082      	sub	sp, #8
   81f1e:	4681      	mov	r9, r0
portTickType xTimeNow;
PRIVILEGED_DATA static portTickType xLastTime = ( portTickType ) 0U;

	xTimeNow = xTaskGetTickCount();
   81f20:	4b22      	ldr	r3, [pc, #136]	; (81fac <prvSampleTimeNow+0x94>)
   81f22:	4798      	blx	r3
   81f24:	4680      	mov	r8, r0

	if( xTimeNow < xLastTime )
   81f26:	4b22      	ldr	r3, [pc, #136]	; (81fb0 <prvSampleTimeNow+0x98>)
   81f28:	681b      	ldr	r3, [r3, #0]
   81f2a:	4298      	cmp	r0, r3
   81f2c:	d234      	bcs.n	81f98 <prvSampleTimeNow+0x80>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   81f2e:	4e21      	ldr	r6, [pc, #132]	; (81fb4 <prvSampleTimeNow+0x9c>)
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
		uxListRemove( &( pxTimer->xTimerListItem ) );
   81f30:	4f21      	ldr	r7, [pc, #132]	; (81fb8 <prvSampleTimeNow+0xa0>)
   81f32:	e024      	b.n	81f7e <prvSampleTimeNow+0x66>
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   81f34:	68da      	ldr	r2, [r3, #12]
   81f36:	f8d2 a000 	ldr.w	sl, [r2]

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   81f3a:	68db      	ldr	r3, [r3, #12]
   81f3c:	68dc      	ldr	r4, [r3, #12]
		uxListRemove( &( pxTimer->xTimerListItem ) );
   81f3e:	1d25      	adds	r5, r4, #4
   81f40:	4628      	mov	r0, r5
   81f42:	47b8      	blx	r7

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   81f44:	6a63      	ldr	r3, [r4, #36]	; 0x24
   81f46:	4620      	mov	r0, r4
   81f48:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   81f4a:	69e3      	ldr	r3, [r4, #28]
   81f4c:	2b01      	cmp	r3, #1
   81f4e:	d116      	bne.n	81f7e <prvSampleTimeNow+0x66>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   81f50:	69a3      	ldr	r3, [r4, #24]
   81f52:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
   81f54:	4553      	cmp	r3, sl
   81f56:	d906      	bls.n	81f66 <prvSampleTimeNow+0x4e>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   81f58:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   81f5a:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   81f5c:	6830      	ldr	r0, [r6, #0]
   81f5e:	4629      	mov	r1, r5
   81f60:	4b16      	ldr	r3, [pc, #88]	; (81fbc <prvSampleTimeNow+0xa4>)
   81f62:	4798      	blx	r3
   81f64:	e00b      	b.n	81f7e <prvSampleTimeNow+0x66>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   81f66:	2300      	movs	r3, #0
   81f68:	9300      	str	r3, [sp, #0]
   81f6a:	4620      	mov	r0, r4
   81f6c:	4619      	mov	r1, r3
   81f6e:	4652      	mov	r2, sl
   81f70:	4c13      	ldr	r4, [pc, #76]	; (81fc0 <prvSampleTimeNow+0xa8>)
   81f72:	47a0      	blx	r4
				configASSERT( xResult );
   81f74:	b918      	cbnz	r0, 81f7e <prvSampleTimeNow+0x66>
   81f76:	4b13      	ldr	r3, [pc, #76]	; (81fc4 <prvSampleTimeNow+0xac>)
   81f78:	4798      	blx	r3
   81f7a:	bf00      	nop
   81f7c:	e7fd      	b.n	81f7a <prvSampleTimeNow+0x62>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   81f7e:	6833      	ldr	r3, [r6, #0]
   81f80:	681a      	ldr	r2, [r3, #0]
   81f82:	2a00      	cmp	r2, #0
   81f84:	d1d6      	bne.n	81f34 <prvSampleTimeNow+0x1c>
			}
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
   81f86:	4a10      	ldr	r2, [pc, #64]	; (81fc8 <prvSampleTimeNow+0xb0>)
   81f88:	6811      	ldr	r1, [r2, #0]
   81f8a:	480a      	ldr	r0, [pc, #40]	; (81fb4 <prvSampleTimeNow+0x9c>)
   81f8c:	6001      	str	r1, [r0, #0]
	pxOverflowTimerList = pxTemp;
   81f8e:	6013      	str	r3, [r2, #0]
	xTimeNow = xTaskGetTickCount();

	if( xTimeNow < xLastTime )
	{
		prvSwitchTimerLists( xLastTime );
		*pxTimerListsWereSwitched = pdTRUE;
   81f90:	2301      	movs	r3, #1
   81f92:	f8c9 3000 	str.w	r3, [r9]
   81f96:	e002      	b.n	81f9e <prvSampleTimeNow+0x86>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   81f98:	2300      	movs	r3, #0
   81f9a:	f8c9 3000 	str.w	r3, [r9]
	}

	xLastTime = xTimeNow;
   81f9e:	4b04      	ldr	r3, [pc, #16]	; (81fb0 <prvSampleTimeNow+0x98>)
   81fa0:	f8c3 8000 	str.w	r8, [r3]

	return xTimeNow;
}
   81fa4:	4640      	mov	r0, r8
   81fa6:	b002      	add	sp, #8
   81fa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   81fac:	00081755 	.word	0x00081755
   81fb0:	2007ac10 	.word	0x2007ac10
   81fb4:	2007abe4 	.word	0x2007abe4
   81fb8:	00080c61 	.word	0x00080c61
   81fbc:	00080c25 	.word	0x00080c25
   81fc0:	00081ec5 	.word	0x00081ec5
   81fc4:	00080ce9 	.word	0x00080ce9
   81fc8:	2007ac18 	.word	0x2007ac18

00081fcc <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   81fcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   81fd0:	b087      	sub	sp, #28
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
   81fd2:	4d4d      	ldr	r5, [pc, #308]	; (82108 <prvTimerTask+0x13c>)
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
	uxListRemove( &( pxTimer->xTimerListItem ) );
   81fd4:	f8df 8160 	ldr.w	r8, [pc, #352]	; 82138 <prvTimerTask+0x16c>
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   81fd8:	4b4c      	ldr	r3, [pc, #304]	; (8210c <prvTimerTask+0x140>)
   81fda:	681b      	ldr	r3, [r3, #0]
   81fdc:	681a      	ldr	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   81fde:	2a00      	cmp	r2, #0
   81fe0:	f000 8087 	beq.w	820f2 <prvTimerTask+0x126>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   81fe4:	68db      	ldr	r3, [r3, #12]
   81fe6:	681e      	ldr	r6, [r3, #0]
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
   81fe8:	4b49      	ldr	r3, [pc, #292]	; (82110 <prvTimerTask+0x144>)
   81fea:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   81fec:	a803      	add	r0, sp, #12
   81fee:	4b49      	ldr	r3, [pc, #292]	; (82114 <prvTimerTask+0x148>)
   81ff0:	4798      	blx	r3
   81ff2:	4607      	mov	r7, r0
		if( xTimerListsWereSwitched == pdFALSE )
   81ff4:	9b03      	ldr	r3, [sp, #12]
   81ff6:	2b00      	cmp	r3, #0
   81ff8:	d130      	bne.n	8205c <prvTimerTask+0x90>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   81ffa:	4286      	cmp	r6, r0
   81ffc:	d824      	bhi.n	82048 <prvTimerTask+0x7c>
			{
				xTaskResumeAll();
   81ffe:	4b46      	ldr	r3, [pc, #280]	; (82118 <prvTimerTask+0x14c>)
   82000:	4798      	blx	r3
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   82002:	4b42      	ldr	r3, [pc, #264]	; (8210c <prvTimerTask+0x140>)
   82004:	681b      	ldr	r3, [r3, #0]
   82006:	68db      	ldr	r3, [r3, #12]
   82008:	68dc      	ldr	r4, [r3, #12]
	uxListRemove( &( pxTimer->xTimerListItem ) );
   8200a:	1d20      	adds	r0, r4, #4
   8200c:	47c0      	blx	r8
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   8200e:	69e3      	ldr	r3, [r4, #28]
   82010:	2b01      	cmp	r3, #1
   82012:	d114      	bne.n	8203e <prvTimerTask+0x72>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
   82014:	69a1      	ldr	r1, [r4, #24]
   82016:	4620      	mov	r0, r4
   82018:	4431      	add	r1, r6
   8201a:	463a      	mov	r2, r7
   8201c:	4633      	mov	r3, r6
   8201e:	4f3f      	ldr	r7, [pc, #252]	; (8211c <prvTimerTask+0x150>)
   82020:	47b8      	blx	r7
   82022:	2801      	cmp	r0, #1
   82024:	d10b      	bne.n	8203e <prvTimerTask+0x72>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   82026:	2300      	movs	r3, #0
   82028:	9300      	str	r3, [sp, #0]
   8202a:	4620      	mov	r0, r4
   8202c:	4619      	mov	r1, r3
   8202e:	4632      	mov	r2, r6
   82030:	4e3b      	ldr	r6, [pc, #236]	; (82120 <prvTimerTask+0x154>)
   82032:	47b0      	blx	r6
			configASSERT( xResult );
   82034:	b918      	cbnz	r0, 8203e <prvTimerTask+0x72>
   82036:	4b3b      	ldr	r3, [pc, #236]	; (82124 <prvTimerTask+0x158>)
   82038:	4798      	blx	r3
   8203a:	bf00      	nop
   8203c:	e7fd      	b.n	8203a <prvTimerTask+0x6e>
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   8203e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   82040:	4620      	mov	r0, r4
   82042:	4798      	blx	r3
   82044:	e00c      	b.n	82060 <prvTimerTask+0x94>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
   82046:	2600      	movs	r6, #0
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
   82048:	6828      	ldr	r0, [r5, #0]
   8204a:	1bf1      	subs	r1, r6, r7
   8204c:	4b36      	ldr	r3, [pc, #216]	; (82128 <prvTimerTask+0x15c>)
   8204e:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
   82050:	4b31      	ldr	r3, [pc, #196]	; (82118 <prvTimerTask+0x14c>)
   82052:	4798      	blx	r3
   82054:	b920      	cbnz	r0, 82060 <prvTimerTask+0x94>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
   82056:	4b35      	ldr	r3, [pc, #212]	; (8212c <prvTimerTask+0x160>)
   82058:	4798      	blx	r3
   8205a:	e001      	b.n	82060 <prvTimerTask+0x94>
				}
			}
		}
		else
		{
			xTaskResumeAll();
   8205c:	4b2e      	ldr	r3, [pc, #184]	; (82118 <prvTimerTask+0x14c>)
   8205e:	4798      	blx	r3
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   82060:	a802      	add	r0, sp, #8
   82062:	4b2c      	ldr	r3, [pc, #176]	; (82114 <prvTimerTask+0x148>)
   82064:	4798      	blx	r3
   82066:	4607      	mov	r7, r0

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
   82068:	4e31      	ldr	r6, [pc, #196]	; (82130 <prvTimerTask+0x164>)
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   8206a:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8211c <prvTimerTask+0x150>
   8206e:	e038      	b.n	820e2 <prvTimerTask+0x116>
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
	{
		pxTimer = xMessage.pxTimer;
   82070:	9c05      	ldr	r4, [sp, #20]

		/* Is the timer already in a list of active timers?  When the command
		is trmCOMMAND_PROCESS_TIMER_OVERFLOW, the timer will be NULL as the
		command is to the task rather than to an individual timer. */
		if( pxTimer != NULL )
   82072:	b11c      	cbz	r4, 8207c <prvTimerTask+0xb0>
		{
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
   82074:	6961      	ldr	r1, [r4, #20]
   82076:	b109      	cbz	r1, 8207c <prvTimerTask+0xb0>
			{
				/* The timer is in a list, remove it. */
				uxListRemove( &( pxTimer->xTimerListItem ) );
   82078:	1d20      	adds	r0, r4, #4
   8207a:	47c0      	blx	r8
			}
		}

		traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.xMessageValue );

		switch( xMessage.xMessageID )
   8207c:	9903      	ldr	r1, [sp, #12]
   8207e:	2902      	cmp	r1, #2
   82080:	d01f      	beq.n	820c2 <prvTimerTask+0xf6>
   82082:	2903      	cmp	r1, #3
   82084:	d02a      	beq.n	820dc <prvTimerTask+0x110>
   82086:	2900      	cmp	r1, #0
   82088:	d12b      	bne.n	820e2 <prvTimerTask+0x116>
		{
			case tmrCOMMAND_START :
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
   8208a:	9b04      	ldr	r3, [sp, #16]
   8208c:	69a1      	ldr	r1, [r4, #24]
   8208e:	4620      	mov	r0, r4
   82090:	4419      	add	r1, r3
   82092:	463a      	mov	r2, r7
   82094:	47c8      	blx	r9
   82096:	2801      	cmp	r0, #1
   82098:	d123      	bne.n	820e2 <prvTimerTask+0x116>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   8209a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   8209c:	4620      	mov	r0, r4
   8209e:	4798      	blx	r3

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   820a0:	69e3      	ldr	r3, [r4, #28]
   820a2:	2b01      	cmp	r3, #1
   820a4:	d11d      	bne.n	820e2 <prvTimerTask+0x116>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   820a6:	69a2      	ldr	r2, [r4, #24]
   820a8:	2300      	movs	r3, #0
   820aa:	9300      	str	r3, [sp, #0]
   820ac:	4620      	mov	r0, r4
   820ae:	4619      	mov	r1, r3
   820b0:	9c04      	ldr	r4, [sp, #16]
   820b2:	4422      	add	r2, r4
   820b4:	4c1a      	ldr	r4, [pc, #104]	; (82120 <prvTimerTask+0x154>)
   820b6:	47a0      	blx	r4
						configASSERT( xResult );
   820b8:	b998      	cbnz	r0, 820e2 <prvTimerTask+0x116>
   820ba:	4b1a      	ldr	r3, [pc, #104]	; (82124 <prvTimerTask+0x158>)
   820bc:	4798      	blx	r3
   820be:	bf00      	nop
   820c0:	e7fd      	b.n	820be <prvTimerTask+0xf2>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
   820c2:	9904      	ldr	r1, [sp, #16]
   820c4:	61a1      	str	r1, [r4, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   820c6:	b919      	cbnz	r1, 820d0 <prvTimerTask+0x104>
   820c8:	4b16      	ldr	r3, [pc, #88]	; (82124 <prvTimerTask+0x158>)
   820ca:	4798      	blx	r3
   820cc:	bf00      	nop
   820ce:	e7fd      	b.n	820cc <prvTimerTask+0x100>
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   820d0:	4620      	mov	r0, r4
   820d2:	4439      	add	r1, r7
   820d4:	463a      	mov	r2, r7
   820d6:	463b      	mov	r3, r7
   820d8:	47c8      	blx	r9
   820da:	e002      	b.n	820e2 <prvTimerTask+0x116>
				break;

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
   820dc:	4620      	mov	r0, r4
   820de:	4b15      	ldr	r3, [pc, #84]	; (82134 <prvTimerTask+0x168>)
   820e0:	4798      	blx	r3

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
   820e2:	6828      	ldr	r0, [r5, #0]
   820e4:	a903      	add	r1, sp, #12
   820e6:	2200      	movs	r2, #0
   820e8:	4613      	mov	r3, r2
   820ea:	47b0      	blx	r6
   820ec:	2800      	cmp	r0, #0
   820ee:	d1bf      	bne.n	82070 <prvTimerTask+0xa4>
   820f0:	e772      	b.n	81fd8 <prvTimerTask+0xc>
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
   820f2:	4b07      	ldr	r3, [pc, #28]	; (82110 <prvTimerTask+0x144>)
   820f4:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   820f6:	a803      	add	r0, sp, #12
   820f8:	4b06      	ldr	r3, [pc, #24]	; (82114 <prvTimerTask+0x148>)
   820fa:	4798      	blx	r3
   820fc:	4607      	mov	r7, r0
		if( xTimerListsWereSwitched == pdFALSE )
   820fe:	9b03      	ldr	r3, [sp, #12]
   82100:	2b00      	cmp	r3, #0
   82102:	d0a0      	beq.n	82046 <prvTimerTask+0x7a>
   82104:	e7aa      	b.n	8205c <prvTimerTask+0x90>
   82106:	bf00      	nop
   82108:	2007ac14 	.word	0x2007ac14
   8210c:	2007abe4 	.word	0x2007abe4
   82110:	00081745 	.word	0x00081745
   82114:	00081f19 	.word	0x00081f19
   82118:	00081895 	.word	0x00081895
   8211c:	00081dd1 	.word	0x00081dd1
   82120:	00081ec5 	.word	0x00081ec5
   82124:	00080ce9 	.word	0x00080ce9
   82128:	00081431 	.word	0x00081431
   8212c:	00080cd9 	.word	0x00080cd9
   82130:	000812d5 	.word	0x000812d5
   82134:	00080f09 	.word	0x00080f09
   82138:	00080c61 	.word	0x00080c61

0008213c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   8213c:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   8213e:	480e      	ldr	r0, [pc, #56]	; (82178 <sysclk_init+0x3c>)
   82140:	4b0e      	ldr	r3, [pc, #56]	; (8217c <sysclk_init+0x40>)
   82142:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   82144:	2000      	movs	r0, #0
   82146:	213e      	movs	r1, #62	; 0x3e
   82148:	4b0d      	ldr	r3, [pc, #52]	; (82180 <sysclk_init+0x44>)
   8214a:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   8214c:	4c0d      	ldr	r4, [pc, #52]	; (82184 <sysclk_init+0x48>)
   8214e:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   82150:	2800      	cmp	r0, #0
   82152:	d0fc      	beq.n	8214e <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   82154:	4b0c      	ldr	r3, [pc, #48]	; (82188 <sysclk_init+0x4c>)
   82156:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   82158:	4a0c      	ldr	r2, [pc, #48]	; (8218c <sysclk_init+0x50>)
   8215a:	4b0d      	ldr	r3, [pc, #52]	; (82190 <sysclk_init+0x54>)
   8215c:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   8215e:	4c0d      	ldr	r4, [pc, #52]	; (82194 <sysclk_init+0x58>)
   82160:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   82162:	2800      	cmp	r0, #0
   82164:	d0fc      	beq.n	82160 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   82166:	2010      	movs	r0, #16
   82168:	4b0b      	ldr	r3, [pc, #44]	; (82198 <sysclk_init+0x5c>)
   8216a:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   8216c:	4b0b      	ldr	r3, [pc, #44]	; (8219c <sysclk_init+0x60>)
   8216e:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   82170:	4801      	ldr	r0, [pc, #4]	; (82178 <sysclk_init+0x3c>)
   82172:	4b02      	ldr	r3, [pc, #8]	; (8217c <sysclk_init+0x40>)
   82174:	4798      	blx	r3
   82176:	bd10      	pop	{r4, pc}
   82178:	0501bd00 	.word	0x0501bd00
   8217c:	200700b1 	.word	0x200700b1
   82180:	00082535 	.word	0x00082535
   82184:	00082589 	.word	0x00082589
   82188:	00082599 	.word	0x00082599
   8218c:	200d3f01 	.word	0x200d3f01
   82190:	400e0600 	.word	0x400e0600
   82194:	000825a9 	.word	0x000825a9
   82198:	000824d1 	.word	0x000824d1
   8219c:	000826c5 	.word	0x000826c5

000821a0 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   821a0:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   821a2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   821a6:	4b12      	ldr	r3, [pc, #72]	; (821f0 <board_init+0x50>)
   821a8:	605a      	str	r2, [r3, #4]
   821aa:	200b      	movs	r0, #11
   821ac:	4c11      	ldr	r4, [pc, #68]	; (821f4 <board_init+0x54>)
   821ae:	47a0      	blx	r4
   821b0:	200c      	movs	r0, #12
   821b2:	47a0      	blx	r4
   821b4:	200d      	movs	r0, #13
   821b6:	47a0      	blx	r4
   821b8:	200e      	movs	r0, #14
   821ba:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   821bc:	203b      	movs	r0, #59	; 0x3b
   821be:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   821c2:	4c0d      	ldr	r4, [pc, #52]	; (821f8 <board_init+0x58>)
   821c4:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   821c6:	2055      	movs	r0, #85	; 0x55
   821c8:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   821cc:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   821ce:	2056      	movs	r0, #86	; 0x56
   821d0:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   821d4:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   821d6:	2068      	movs	r0, #104	; 0x68
   821d8:	4908      	ldr	r1, [pc, #32]	; (821fc <board_init+0x5c>)
   821da:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   821dc:	205c      	movs	r0, #92	; 0x5c
   821de:	4908      	ldr	r1, [pc, #32]	; (82200 <board_init+0x60>)
   821e0:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   821e2:	4808      	ldr	r0, [pc, #32]	; (82204 <board_init+0x64>)
   821e4:	f44f 7140 	mov.w	r1, #768	; 0x300
   821e8:	4a07      	ldr	r2, [pc, #28]	; (82208 <board_init+0x68>)
   821ea:	4b08      	ldr	r3, [pc, #32]	; (8220c <board_init+0x6c>)
   821ec:	4798      	blx	r3
   821ee:	bd10      	pop	{r4, pc}
   821f0:	400e1a50 	.word	0x400e1a50
   821f4:	000825b9 	.word	0x000825b9
   821f8:	000822b5 	.word	0x000822b5
   821fc:	28000079 	.word	0x28000079
   82200:	28000001 	.word	0x28000001
   82204:	400e0e00 	.word	0x400e0e00
   82208:	08000001 	.word	0x08000001
   8220c:	00082389 	.word	0x00082389

00082210 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   82210:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   82212:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   82216:	d016      	beq.n	82246 <pio_set_peripheral+0x36>
   82218:	d804      	bhi.n	82224 <pio_set_peripheral+0x14>
   8221a:	b1c1      	cbz	r1, 8224e <pio_set_peripheral+0x3e>
   8221c:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   82220:	d00a      	beq.n	82238 <pio_set_peripheral+0x28>
   82222:	e013      	b.n	8224c <pio_set_peripheral+0x3c>
   82224:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   82228:	d011      	beq.n	8224e <pio_set_peripheral+0x3e>
   8222a:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   8222e:	d00e      	beq.n	8224e <pio_set_peripheral+0x3e>
   82230:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   82234:	d10a      	bne.n	8224c <pio_set_peripheral+0x3c>
   82236:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   82238:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   8223a:	6f01      	ldr	r1, [r0, #112]	; 0x70
   8223c:	400b      	ands	r3, r1
   8223e:	ea23 0302 	bic.w	r3, r3, r2
   82242:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   82244:	e002      	b.n	8224c <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   82246:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   82248:	4313      	orrs	r3, r2
   8224a:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   8224c:	6042      	str	r2, [r0, #4]
   8224e:	4770      	bx	lr

00082250 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   82250:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   82252:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   82256:	bf14      	ite	ne
   82258:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8225a:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   8225c:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   82260:	bf14      	ite	ne
   82262:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   82264:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   82266:	f012 0f02 	tst.w	r2, #2
   8226a:	d002      	beq.n	82272 <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   8226c:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   82270:	e004      	b.n	8227c <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   82272:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   82276:	bf18      	it	ne
   82278:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   8227c:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   8227e:	6001      	str	r1, [r0, #0]
   82280:	4770      	bx	lr
   82282:	bf00      	nop

00082284 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   82284:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   82286:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   82288:	9c01      	ldr	r4, [sp, #4]
   8228a:	b10c      	cbz	r4, 82290 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   8228c:	6641      	str	r1, [r0, #100]	; 0x64
   8228e:	e000      	b.n	82292 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   82290:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   82292:	b10b      	cbz	r3, 82298 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   82294:	6501      	str	r1, [r0, #80]	; 0x50
   82296:	e000      	b.n	8229a <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   82298:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   8229a:	b10a      	cbz	r2, 822a0 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   8229c:	6301      	str	r1, [r0, #48]	; 0x30
   8229e:	e000      	b.n	822a2 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   822a0:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   822a2:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   822a4:	6001      	str	r1, [r0, #0]
}
   822a6:	f85d 4b04 	ldr.w	r4, [sp], #4
   822aa:	4770      	bx	lr

000822ac <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   822ac:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   822ae:	4770      	bx	lr

000822b0 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   822b0:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   822b2:	4770      	bx	lr

000822b4 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   822b4:	b570      	push	{r4, r5, r6, lr}
   822b6:	b082      	sub	sp, #8
   822b8:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   822ba:	0944      	lsrs	r4, r0, #5
   822bc:	f504 1400 	add.w	r4, r4, #2097152	; 0x200000
   822c0:	f204 7407 	addw	r4, r4, #1799	; 0x707
   822c4:	0266      	lsls	r6, r4, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   822c6:	f001 44f0 	and.w	r4, r1, #2013265920	; 0x78000000
   822ca:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   822ce:	d030      	beq.n	82332 <pio_configure_pin+0x7e>
   822d0:	d806      	bhi.n	822e0 <pio_configure_pin+0x2c>
   822d2:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   822d6:	d00a      	beq.n	822ee <pio_configure_pin+0x3a>
   822d8:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   822dc:	d018      	beq.n	82310 <pio_configure_pin+0x5c>
   822de:	e049      	b.n	82374 <pio_configure_pin+0xc0>
   822e0:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   822e4:	d030      	beq.n	82348 <pio_configure_pin+0x94>
   822e6:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   822ea:	d02d      	beq.n	82348 <pio_configure_pin+0x94>
   822ec:	e042      	b.n	82374 <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   822ee:	f000 001f 	and.w	r0, r0, #31
   822f2:	2401      	movs	r4, #1
   822f4:	4084      	lsls	r4, r0
   822f6:	4630      	mov	r0, r6
   822f8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   822fc:	4622      	mov	r2, r4
   822fe:	4b1f      	ldr	r3, [pc, #124]	; (8237c <pio_configure_pin+0xc8>)
   82300:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   82302:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   82306:	bf14      	ite	ne
   82308:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8230a:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   8230c:	2001      	movs	r0, #1
   8230e:	e032      	b.n	82376 <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   82310:	f000 001f 	and.w	r0, r0, #31
   82314:	2401      	movs	r4, #1
   82316:	4084      	lsls	r4, r0
   82318:	4630      	mov	r0, r6
   8231a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8231e:	4622      	mov	r2, r4
   82320:	4b16      	ldr	r3, [pc, #88]	; (8237c <pio_configure_pin+0xc8>)
   82322:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   82324:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   82328:	bf14      	ite	ne
   8232a:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8232c:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   8232e:	2001      	movs	r0, #1
   82330:	e021      	b.n	82376 <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   82332:	f000 011f 	and.w	r1, r0, #31
   82336:	2401      	movs	r4, #1
   82338:	4630      	mov	r0, r6
   8233a:	fa04 f101 	lsl.w	r1, r4, r1
   8233e:	462a      	mov	r2, r5
   82340:	4b0f      	ldr	r3, [pc, #60]	; (82380 <pio_configure_pin+0xcc>)
   82342:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   82344:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   82346:	e016      	b.n	82376 <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   82348:	f000 011f 	and.w	r1, r0, #31
   8234c:	2401      	movs	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   8234e:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   82352:	ea05 0304 	and.w	r3, r5, r4
   82356:	9300      	str	r3, [sp, #0]
   82358:	4630      	mov	r0, r6
   8235a:	fa04 f101 	lsl.w	r1, r4, r1
   8235e:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   82362:	bf14      	ite	ne
   82364:	2200      	movne	r2, #0
   82366:	2201      	moveq	r2, #1
   82368:	f3c5 0380 	ubfx	r3, r5, #2, #1
   8236c:	4d05      	ldr	r5, [pc, #20]	; (82384 <pio_configure_pin+0xd0>)
   8236e:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
   82370:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   82372:	e000      	b.n	82376 <pio_configure_pin+0xc2>

	default:
		return 0;
   82374:	2000      	movs	r0, #0
	}

	return 1;
}
   82376:	b002      	add	sp, #8
   82378:	bd70      	pop	{r4, r5, r6, pc}
   8237a:	bf00      	nop
   8237c:	00082211 	.word	0x00082211
   82380:	00082251 	.word	0x00082251
   82384:	00082285 	.word	0x00082285

00082388 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   82388:	b5f0      	push	{r4, r5, r6, r7, lr}
   8238a:	b083      	sub	sp, #12
   8238c:	4607      	mov	r7, r0
   8238e:	460e      	mov	r6, r1
   82390:	4615      	mov	r5, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   82392:	f002 44f0 	and.w	r4, r2, #2013265920	; 0x78000000
   82396:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   8239a:	d026      	beq.n	823ea <pio_configure_pin_group+0x62>
   8239c:	d806      	bhi.n	823ac <pio_configure_pin_group+0x24>
   8239e:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   823a2:	d00a      	beq.n	823ba <pio_configure_pin_group+0x32>
   823a4:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   823a8:	d013      	beq.n	823d2 <pio_configure_pin_group+0x4a>
   823aa:	e034      	b.n	82416 <pio_configure_pin_group+0x8e>
   823ac:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   823b0:	d01f      	beq.n	823f2 <pio_configure_pin_group+0x6a>
   823b2:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   823b6:	d01c      	beq.n	823f2 <pio_configure_pin_group+0x6a>
   823b8:	e02d      	b.n	82416 <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   823ba:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   823be:	4632      	mov	r2, r6
   823c0:	4b16      	ldr	r3, [pc, #88]	; (8241c <pio_configure_pin_group+0x94>)
   823c2:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   823c4:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   823c8:	bf14      	ite	ne
   823ca:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   823cc:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   823ce:	2001      	movs	r0, #1
   823d0:	e022      	b.n	82418 <pio_configure_pin_group+0x90>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   823d2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   823d6:	4632      	mov	r2, r6
   823d8:	4b10      	ldr	r3, [pc, #64]	; (8241c <pio_configure_pin_group+0x94>)
   823da:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   823dc:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   823e0:	bf14      	ite	ne
   823e2:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   823e4:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   823e6:	2001      	movs	r0, #1
   823e8:	e016      	b.n	82418 <pio_configure_pin_group+0x90>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   823ea:	4b0d      	ldr	r3, [pc, #52]	; (82420 <pio_configure_pin_group+0x98>)
   823ec:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   823ee:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   823f0:	e012      	b.n	82418 <pio_configure_pin_group+0x90>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   823f2:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   823f6:	f005 0301 	and.w	r3, r5, #1
   823fa:	9300      	str	r3, [sp, #0]
   823fc:	4638      	mov	r0, r7
   823fe:	4631      	mov	r1, r6
   82400:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   82404:	bf14      	ite	ne
   82406:	2200      	movne	r2, #0
   82408:	2201      	moveq	r2, #1
   8240a:	f3c5 0380 	ubfx	r3, r5, #2, #1
   8240e:	4c05      	ldr	r4, [pc, #20]	; (82424 <pio_configure_pin_group+0x9c>)
   82410:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   82412:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   82414:	e000      	b.n	82418 <pio_configure_pin_group+0x90>

	default:
		return 0;
   82416:	2000      	movs	r0, #0
	}

	return 1;
}
   82418:	b003      	add	sp, #12
   8241a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8241c:	00082211 	.word	0x00082211
   82420:	00082251 	.word	0x00082251
   82424:	00082285 	.word	0x00082285

00082428 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   82428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8242c:	4604      	mov	r4, r0
   8242e:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   82430:	4b10      	ldr	r3, [pc, #64]	; (82474 <pio_handler_process+0x4c>)
   82432:	4798      	blx	r3
   82434:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   82436:	4620      	mov	r0, r4
   82438:	4b0f      	ldr	r3, [pc, #60]	; (82478 <pio_handler_process+0x50>)
   8243a:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   8243c:	4005      	ands	r5, r0
   8243e:	d017      	beq.n	82470 <pio_handler_process+0x48>
   82440:	4f0e      	ldr	r7, [pc, #56]	; (8247c <pio_handler_process+0x54>)
   82442:	f107 040c 	add.w	r4, r7, #12
   82446:	376c      	adds	r7, #108	; 0x6c
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   82448:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   8244c:	42b3      	cmp	r3, r6
   8244e:	d10a      	bne.n	82466 <pio_handler_process+0x3e>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   82450:	f854 1c08 	ldr.w	r1, [r4, #-8]
   82454:	4229      	tst	r1, r5
   82456:	d006      	beq.n	82466 <pio_handler_process+0x3e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   82458:	6823      	ldr	r3, [r4, #0]
   8245a:	4630      	mov	r0, r6
   8245c:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   8245e:	f854 3c08 	ldr.w	r3, [r4, #-8]
   82462:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   82466:	42bc      	cmp	r4, r7
   82468:	d002      	beq.n	82470 <pio_handler_process+0x48>
   8246a:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   8246c:	2d00      	cmp	r5, #0
   8246e:	d1eb      	bne.n	82448 <pio_handler_process+0x20>
   82470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82474:	000822ad 	.word	0x000822ad
   82478:	000822b1 	.word	0x000822b1
   8247c:	2007ac1c 	.word	0x2007ac1c

00082480 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   82480:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   82482:	4802      	ldr	r0, [pc, #8]	; (8248c <PIOA_Handler+0xc>)
   82484:	210b      	movs	r1, #11
   82486:	4b02      	ldr	r3, [pc, #8]	; (82490 <PIOA_Handler+0x10>)
   82488:	4798      	blx	r3
   8248a:	bd08      	pop	{r3, pc}
   8248c:	400e0e00 	.word	0x400e0e00
   82490:	00082429 	.word	0x00082429

00082494 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   82494:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   82496:	4802      	ldr	r0, [pc, #8]	; (824a0 <PIOB_Handler+0xc>)
   82498:	210c      	movs	r1, #12
   8249a:	4b02      	ldr	r3, [pc, #8]	; (824a4 <PIOB_Handler+0x10>)
   8249c:	4798      	blx	r3
   8249e:	bd08      	pop	{r3, pc}
   824a0:	400e1000 	.word	0x400e1000
   824a4:	00082429 	.word	0x00082429

000824a8 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   824a8:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   824aa:	4802      	ldr	r0, [pc, #8]	; (824b4 <PIOC_Handler+0xc>)
   824ac:	210d      	movs	r1, #13
   824ae:	4b02      	ldr	r3, [pc, #8]	; (824b8 <PIOC_Handler+0x10>)
   824b0:	4798      	blx	r3
   824b2:	bd08      	pop	{r3, pc}
   824b4:	400e1200 	.word	0x400e1200
   824b8:	00082429 	.word	0x00082429

000824bc <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   824bc:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   824be:	4802      	ldr	r0, [pc, #8]	; (824c8 <PIOD_Handler+0xc>)
   824c0:	210e      	movs	r1, #14
   824c2:	4b02      	ldr	r3, [pc, #8]	; (824cc <PIOD_Handler+0x10>)
   824c4:	4798      	blx	r3
   824c6:	bd08      	pop	{r3, pc}
   824c8:	400e1400 	.word	0x400e1400
   824cc:	00082429 	.word	0x00082429

000824d0 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   824d0:	4b17      	ldr	r3, [pc, #92]	; (82530 <pmc_switch_mck_to_pllack+0x60>)
   824d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   824d4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   824d8:	4310      	orrs	r0, r2
   824da:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   824dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   824de:	f013 0f08 	tst.w	r3, #8
   824e2:	d109      	bne.n	824f8 <pmc_switch_mck_to_pllack+0x28>
   824e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
   824e8:	4911      	ldr	r1, [pc, #68]	; (82530 <pmc_switch_mck_to_pllack+0x60>)
   824ea:	e001      	b.n	824f0 <pmc_switch_mck_to_pllack+0x20>
			--ul_timeout) {
		if (ul_timeout == 0) {
   824ec:	3b01      	subs	r3, #1
   824ee:	d019      	beq.n	82524 <pmc_switch_mck_to_pllack+0x54>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   824f0:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   824f2:	f012 0f08 	tst.w	r2, #8
   824f6:	d0f9      	beq.n	824ec <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   824f8:	4b0d      	ldr	r3, [pc, #52]	; (82530 <pmc_switch_mck_to_pllack+0x60>)
   824fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   824fc:	f022 0203 	bic.w	r2, r2, #3
   82500:	f042 0202 	orr.w	r2, r2, #2
   82504:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82506:	6e98      	ldr	r0, [r3, #104]	; 0x68
   82508:	f010 0008 	ands.w	r0, r0, #8
   8250c:	d10c      	bne.n	82528 <pmc_switch_mck_to_pllack+0x58>
   8250e:	f44f 6300 	mov.w	r3, #2048	; 0x800
   82512:	4907      	ldr	r1, [pc, #28]	; (82530 <pmc_switch_mck_to_pllack+0x60>)
   82514:	e001      	b.n	8251a <pmc_switch_mck_to_pllack+0x4a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   82516:	3b01      	subs	r3, #1
   82518:	d008      	beq.n	8252c <pmc_switch_mck_to_pllack+0x5c>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8251a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   8251c:	f012 0f08 	tst.w	r2, #8
   82520:	d0f9      	beq.n	82516 <pmc_switch_mck_to_pllack+0x46>
   82522:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   82524:	2001      	movs	r0, #1
   82526:	4770      	bx	lr
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   82528:	2000      	movs	r0, #0
   8252a:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   8252c:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   8252e:	4770      	bx	lr
   82530:	400e0600 	.word	0x400e0600

00082534 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   82534:	b138      	cbz	r0, 82546 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   82536:	4911      	ldr	r1, [pc, #68]	; (8257c <pmc_switch_mainck_to_xtal+0x48>)
   82538:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   8253a:	4a11      	ldr	r2, [pc, #68]	; (82580 <pmc_switch_mainck_to_xtal+0x4c>)
   8253c:	401a      	ands	r2, r3
   8253e:	4b11      	ldr	r3, [pc, #68]	; (82584 <pmc_switch_mainck_to_xtal+0x50>)
   82540:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   82542:	620b      	str	r3, [r1, #32]
   82544:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   82546:	4a0d      	ldr	r2, [pc, #52]	; (8257c <pmc_switch_mainck_to_xtal+0x48>)
   82548:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   8254a:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   8254e:	f023 0303 	bic.w	r3, r3, #3
   82552:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   82556:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   8255a:	0209      	lsls	r1, r1, #8
   8255c:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   8255e:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   82560:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   82562:	6e93      	ldr	r3, [r2, #104]	; 0x68
   82564:	f013 0f01 	tst.w	r3, #1
   82568:	d0fb      	beq.n	82562 <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   8256a:	4a04      	ldr	r2, [pc, #16]	; (8257c <pmc_switch_mainck_to_xtal+0x48>)
   8256c:	6a13      	ldr	r3, [r2, #32]
   8256e:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   82572:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   82576:	6213      	str	r3, [r2, #32]
   82578:	4770      	bx	lr
   8257a:	bf00      	nop
   8257c:	400e0600 	.word	0x400e0600
   82580:	fec8fffc 	.word	0xfec8fffc
   82584:	01370002 	.word	0x01370002

00082588 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   82588:	4b02      	ldr	r3, [pc, #8]	; (82594 <pmc_osc_is_ready_mainck+0xc>)
   8258a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   8258c:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   82590:	4770      	bx	lr
   82592:	bf00      	nop
   82594:	400e0600 	.word	0x400e0600

00082598 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   82598:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   8259c:	4b01      	ldr	r3, [pc, #4]	; (825a4 <pmc_disable_pllack+0xc>)
   8259e:	629a      	str	r2, [r3, #40]	; 0x28
   825a0:	4770      	bx	lr
   825a2:	bf00      	nop
   825a4:	400e0600 	.word	0x400e0600

000825a8 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   825a8:	4b02      	ldr	r3, [pc, #8]	; (825b4 <pmc_is_locked_pllack+0xc>)
   825aa:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   825ac:	f000 0002 	and.w	r0, r0, #2
   825b0:	4770      	bx	lr
   825b2:	bf00      	nop
   825b4:	400e0600 	.word	0x400e0600

000825b8 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   825b8:	282c      	cmp	r0, #44	; 0x2c
   825ba:	d820      	bhi.n	825fe <pmc_enable_periph_clk+0x46>
		return 1;
	}

	if (ul_id < 32) {
   825bc:	281f      	cmp	r0, #31
   825be:	d80d      	bhi.n	825dc <pmc_enable_periph_clk+0x24>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   825c0:	4b12      	ldr	r3, [pc, #72]	; (8260c <pmc_enable_periph_clk+0x54>)
   825c2:	699a      	ldr	r2, [r3, #24]
   825c4:	2301      	movs	r3, #1
   825c6:	4083      	lsls	r3, r0
   825c8:	401a      	ands	r2, r3
   825ca:	4293      	cmp	r3, r2
   825cc:	d019      	beq.n	82602 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER0 = 1 << ul_id;
   825ce:	2301      	movs	r3, #1
   825d0:	fa03 f000 	lsl.w	r0, r3, r0
   825d4:	4b0d      	ldr	r3, [pc, #52]	; (8260c <pmc_enable_periph_clk+0x54>)
   825d6:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   825d8:	2000      	movs	r0, #0
   825da:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   825dc:	4b0b      	ldr	r3, [pc, #44]	; (8260c <pmc_enable_periph_clk+0x54>)
   825de:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
   825e2:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   825e4:	2301      	movs	r3, #1
   825e6:	4083      	lsls	r3, r0
   825e8:	401a      	ands	r2, r3
   825ea:	4293      	cmp	r3, r2
   825ec:	d00b      	beq.n	82606 <pmc_enable_periph_clk+0x4e>
			PMC->PMC_PCER1 = 1 << ul_id;
   825ee:	2301      	movs	r3, #1
   825f0:	fa03 f000 	lsl.w	r0, r3, r0
   825f4:	4b05      	ldr	r3, [pc, #20]	; (8260c <pmc_enable_periph_clk+0x54>)
   825f6:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   825fa:	2000      	movs	r0, #0
   825fc:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   825fe:	2001      	movs	r0, #1
   82600:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   82602:	2000      	movs	r0, #0
   82604:	4770      	bx	lr
   82606:	2000      	movs	r0, #0
}
   82608:	4770      	bx	lr
   8260a:	bf00      	nop
   8260c:	400e0600 	.word	0x400e0600

00082610 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   82610:	e7fe      	b.n	82610 <Dummy_Handler>
   82612:	bf00      	nop

00082614 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   82614:	b510      	push	{r4, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   82616:	4b1e      	ldr	r3, [pc, #120]	; (82690 <Reset_Handler+0x7c>)
   82618:	4a1e      	ldr	r2, [pc, #120]	; (82694 <Reset_Handler+0x80>)
   8261a:	429a      	cmp	r2, r3
   8261c:	d003      	beq.n	82626 <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   8261e:	4b1e      	ldr	r3, [pc, #120]	; (82698 <Reset_Handler+0x84>)
   82620:	4a1b      	ldr	r2, [pc, #108]	; (82690 <Reset_Handler+0x7c>)
   82622:	429a      	cmp	r2, r3
   82624:	d304      	bcc.n	82630 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   82626:	4b1d      	ldr	r3, [pc, #116]	; (8269c <Reset_Handler+0x88>)
   82628:	4a1d      	ldr	r2, [pc, #116]	; (826a0 <Reset_Handler+0x8c>)
   8262a:	429a      	cmp	r2, r3
   8262c:	d30f      	bcc.n	8264e <Reset_Handler+0x3a>
   8262e:	e01a      	b.n	82666 <Reset_Handler+0x52>
   82630:	4b1c      	ldr	r3, [pc, #112]	; (826a4 <Reset_Handler+0x90>)
   82632:	4c1d      	ldr	r4, [pc, #116]	; (826a8 <Reset_Handler+0x94>)
   82634:	1ae4      	subs	r4, r4, r3
   82636:	f024 0403 	bic.w	r4, r4, #3
   8263a:	3404      	adds	r4, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   8263c:	2300      	movs	r3, #0
			*pDest++ = *pSrc++;
   8263e:	4814      	ldr	r0, [pc, #80]	; (82690 <Reset_Handler+0x7c>)
   82640:	4914      	ldr	r1, [pc, #80]	; (82694 <Reset_Handler+0x80>)
   82642:	585a      	ldr	r2, [r3, r1]
   82644:	501a      	str	r2, [r3, r0]
   82646:	3304      	adds	r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   82648:	42a3      	cmp	r3, r4
   8264a:	d1fa      	bne.n	82642 <Reset_Handler+0x2e>
   8264c:	e7eb      	b.n	82626 <Reset_Handler+0x12>
   8264e:	4b17      	ldr	r3, [pc, #92]	; (826ac <Reset_Handler+0x98>)
   82650:	4917      	ldr	r1, [pc, #92]	; (826b0 <Reset_Handler+0x9c>)
   82652:	1ac9      	subs	r1, r1, r3
   82654:	f021 0103 	bic.w	r1, r1, #3
   82658:	1d1a      	adds	r2, r3, #4
   8265a:	4411      	add	r1, r2
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   8265c:	2200      	movs	r2, #0
   8265e:	f843 2f04 	str.w	r2, [r3, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   82662:	428b      	cmp	r3, r1
   82664:	d1fb      	bne.n	8265e <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   82666:	4a13      	ldr	r2, [pc, #76]	; (826b4 <Reset_Handler+0xa0>)
   82668:	f022 4360 	bic.w	r3, r2, #3758096384	; 0xe0000000
   8266c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   82670:	4911      	ldr	r1, [pc, #68]	; (826b8 <Reset_Handler+0xa4>)
   82672:	608b      	str	r3, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   82674:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
   82678:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
   8267c:	d203      	bcs.n	82686 <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   8267e:	688a      	ldr	r2, [r1, #8]
   82680:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   82684:	608a      	str	r2, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   82686:	4b0d      	ldr	r3, [pc, #52]	; (826bc <Reset_Handler+0xa8>)
   82688:	4798      	blx	r3

	/* Branch to main function */
	main();
   8268a:	4b0d      	ldr	r3, [pc, #52]	; (826c0 <Reset_Handler+0xac>)
   8268c:	4798      	blx	r3
   8268e:	e7fe      	b.n	8268e <Reset_Handler+0x7a>
   82690:	20070000 	.word	0x20070000
   82694:	00086564 	.word	0x00086564
   82698:	200709fc 	.word	0x200709fc
   8269c:	2007acfc 	.word	0x2007acfc
   826a0:	20070a00 	.word	0x20070a00
   826a4:	20070004 	.word	0x20070004
   826a8:	200709ff 	.word	0x200709ff
   826ac:	200709fc 	.word	0x200709fc
   826b0:	2007acf7 	.word	0x2007acf7
   826b4:	00080000 	.word	0x00080000
   826b8:	e000ed00 	.word	0xe000ed00
   826bc:	000834d9 	.word	0x000834d9
   826c0:	00082d4d 	.word	0x00082d4d

000826c4 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   826c4:	4b3e      	ldr	r3, [pc, #248]	; (827c0 <SystemCoreClockUpdate+0xfc>)
   826c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   826c8:	f003 0303 	and.w	r3, r3, #3
   826cc:	2b03      	cmp	r3, #3
   826ce:	d85f      	bhi.n	82790 <SystemCoreClockUpdate+0xcc>
   826d0:	e8df f003 	tbb	[pc, r3]
   826d4:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   826d8:	4b3a      	ldr	r3, [pc, #232]	; (827c4 <SystemCoreClockUpdate+0x100>)
   826da:	695b      	ldr	r3, [r3, #20]
   826dc:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   826e0:	bf14      	ite	ne
   826e2:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   826e6:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   826ea:	4b37      	ldr	r3, [pc, #220]	; (827c8 <SystemCoreClockUpdate+0x104>)
   826ec:	601a      	str	r2, [r3, #0]
   826ee:	e04f      	b.n	82790 <SystemCoreClockUpdate+0xcc>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   826f0:	4b33      	ldr	r3, [pc, #204]	; (827c0 <SystemCoreClockUpdate+0xfc>)
   826f2:	6a1b      	ldr	r3, [r3, #32]
   826f4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   826f8:	d003      	beq.n	82702 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   826fa:	4a34      	ldr	r2, [pc, #208]	; (827cc <SystemCoreClockUpdate+0x108>)
   826fc:	4b32      	ldr	r3, [pc, #200]	; (827c8 <SystemCoreClockUpdate+0x104>)
   826fe:	601a      	str	r2, [r3, #0]
   82700:	e046      	b.n	82790 <SystemCoreClockUpdate+0xcc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   82702:	4a33      	ldr	r2, [pc, #204]	; (827d0 <SystemCoreClockUpdate+0x10c>)
   82704:	4b30      	ldr	r3, [pc, #192]	; (827c8 <SystemCoreClockUpdate+0x104>)
   82706:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   82708:	4b2d      	ldr	r3, [pc, #180]	; (827c0 <SystemCoreClockUpdate+0xfc>)
   8270a:	6a1b      	ldr	r3, [r3, #32]
   8270c:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82710:	2b10      	cmp	r3, #16
   82712:	d002      	beq.n	8271a <SystemCoreClockUpdate+0x56>
   82714:	2b20      	cmp	r3, #32
   82716:	d004      	beq.n	82722 <SystemCoreClockUpdate+0x5e>
   82718:	e03a      	b.n	82790 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   8271a:	4a2e      	ldr	r2, [pc, #184]	; (827d4 <SystemCoreClockUpdate+0x110>)
   8271c:	4b2a      	ldr	r3, [pc, #168]	; (827c8 <SystemCoreClockUpdate+0x104>)
   8271e:	601a      	str	r2, [r3, #0]
				break;
   82720:	e036      	b.n	82790 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   82722:	4a2a      	ldr	r2, [pc, #168]	; (827cc <SystemCoreClockUpdate+0x108>)
   82724:	4b28      	ldr	r3, [pc, #160]	; (827c8 <SystemCoreClockUpdate+0x104>)
   82726:	601a      	str	r2, [r3, #0]
				break;
   82728:	e032      	b.n	82790 <SystemCoreClockUpdate+0xcc>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   8272a:	4b25      	ldr	r3, [pc, #148]	; (827c0 <SystemCoreClockUpdate+0xfc>)
   8272c:	6a1b      	ldr	r3, [r3, #32]
   8272e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   82732:	d003      	beq.n	8273c <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   82734:	4a25      	ldr	r2, [pc, #148]	; (827cc <SystemCoreClockUpdate+0x108>)
   82736:	4b24      	ldr	r3, [pc, #144]	; (827c8 <SystemCoreClockUpdate+0x104>)
   82738:	601a      	str	r2, [r3, #0]
   8273a:	e012      	b.n	82762 <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   8273c:	4a24      	ldr	r2, [pc, #144]	; (827d0 <SystemCoreClockUpdate+0x10c>)
   8273e:	4b22      	ldr	r3, [pc, #136]	; (827c8 <SystemCoreClockUpdate+0x104>)
   82740:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   82742:	4b1f      	ldr	r3, [pc, #124]	; (827c0 <SystemCoreClockUpdate+0xfc>)
   82744:	6a1b      	ldr	r3, [r3, #32]
   82746:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8274a:	2b10      	cmp	r3, #16
   8274c:	d002      	beq.n	82754 <SystemCoreClockUpdate+0x90>
   8274e:	2b20      	cmp	r3, #32
   82750:	d004      	beq.n	8275c <SystemCoreClockUpdate+0x98>
   82752:	e006      	b.n	82762 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   82754:	4a1f      	ldr	r2, [pc, #124]	; (827d4 <SystemCoreClockUpdate+0x110>)
   82756:	4b1c      	ldr	r3, [pc, #112]	; (827c8 <SystemCoreClockUpdate+0x104>)
   82758:	601a      	str	r2, [r3, #0]
				break;
   8275a:	e002      	b.n	82762 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   8275c:	4a1b      	ldr	r2, [pc, #108]	; (827cc <SystemCoreClockUpdate+0x108>)
   8275e:	4b1a      	ldr	r3, [pc, #104]	; (827c8 <SystemCoreClockUpdate+0x104>)
   82760:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   82762:	4b17      	ldr	r3, [pc, #92]	; (827c0 <SystemCoreClockUpdate+0xfc>)
   82764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82766:	f003 0303 	and.w	r3, r3, #3
   8276a:	2b02      	cmp	r3, #2
   8276c:	d10d      	bne.n	8278a <SystemCoreClockUpdate+0xc6>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   8276e:	4b14      	ldr	r3, [pc, #80]	; (827c0 <SystemCoreClockUpdate+0xfc>)
   82770:	6a98      	ldr	r0, [r3, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   82772:	6a99      	ldr	r1, [r3, #40]	; 0x28
   82774:	4b14      	ldr	r3, [pc, #80]	; (827c8 <SystemCoreClockUpdate+0x104>)
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   82776:	f3c0 400a 	ubfx	r0, r0, #16, #11
   8277a:	681a      	ldr	r2, [r3, #0]
   8277c:	fb00 2202 	mla	r2, r0, r2, r2
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   82780:	b2c9      	uxtb	r1, r1
   82782:	fbb2 f2f1 	udiv	r2, r2, r1
   82786:	601a      	str	r2, [r3, #0]
   82788:	e002      	b.n	82790 <SystemCoreClockUpdate+0xcc>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   8278a:	4a13      	ldr	r2, [pc, #76]	; (827d8 <SystemCoreClockUpdate+0x114>)
   8278c:	4b0e      	ldr	r3, [pc, #56]	; (827c8 <SystemCoreClockUpdate+0x104>)
   8278e:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   82790:	4b0b      	ldr	r3, [pc, #44]	; (827c0 <SystemCoreClockUpdate+0xfc>)
   82792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82794:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82798:	2b70      	cmp	r3, #112	; 0x70
   8279a:	d107      	bne.n	827ac <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
   8279c:	4b0a      	ldr	r3, [pc, #40]	; (827c8 <SystemCoreClockUpdate+0x104>)
   8279e:	681a      	ldr	r2, [r3, #0]
   827a0:	490e      	ldr	r1, [pc, #56]	; (827dc <SystemCoreClockUpdate+0x118>)
   827a2:	fba1 0202 	umull	r0, r2, r1, r2
   827a6:	0852      	lsrs	r2, r2, #1
   827a8:	601a      	str	r2, [r3, #0]
   827aa:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   827ac:	4b04      	ldr	r3, [pc, #16]	; (827c0 <SystemCoreClockUpdate+0xfc>)
   827ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
   827b0:	4b05      	ldr	r3, [pc, #20]	; (827c8 <SystemCoreClockUpdate+0x104>)
   827b2:	f3c1 1102 	ubfx	r1, r1, #4, #3
   827b6:	681a      	ldr	r2, [r3, #0]
   827b8:	40ca      	lsrs	r2, r1
   827ba:	601a      	str	r2, [r3, #0]
   827bc:	4770      	bx	lr
   827be:	bf00      	nop
   827c0:	400e0600 	.word	0x400e0600
   827c4:	400e1a10 	.word	0x400e1a10
   827c8:	20070194 	.word	0x20070194
   827cc:	00b71b00 	.word	0x00b71b00
   827d0:	003d0900 	.word	0x003d0900
   827d4:	007a1200 	.word	0x007a1200
   827d8:	0e4e1c00 	.word	0x0e4e1c00
   827dc:	aaaaaaab 	.word	0xaaaaaaab

000827e0 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   827e0:	4b09      	ldr	r3, [pc, #36]	; (82808 <_sbrk+0x28>)
   827e2:	681b      	ldr	r3, [r3, #0]
   827e4:	b913      	cbnz	r3, 827ec <_sbrk+0xc>
		heap = (unsigned char *)&_end;
   827e6:	4a09      	ldr	r2, [pc, #36]	; (8280c <_sbrk+0x2c>)
   827e8:	4b07      	ldr	r3, [pc, #28]	; (82808 <_sbrk+0x28>)
   827ea:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   827ec:	4b06      	ldr	r3, [pc, #24]	; (82808 <_sbrk+0x28>)
   827ee:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   827f0:	181a      	adds	r2, r3, r0
   827f2:	4907      	ldr	r1, [pc, #28]	; (82810 <_sbrk+0x30>)
   827f4:	4291      	cmp	r1, r2
   827f6:	db04      	blt.n	82802 <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
   827f8:	4610      	mov	r0, r2
   827fa:	4a03      	ldr	r2, [pc, #12]	; (82808 <_sbrk+0x28>)
   827fc:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   827fe:	4618      	mov	r0, r3
   82800:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
   82802:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
   82806:	4770      	bx	lr
   82808:	2007ac8c 	.word	0x2007ac8c
   8280c:	2007cd00 	.word	0x2007cd00
   82810:	20087ffc 	.word	0x20087ffc

00082814 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   82814:	f04f 30ff 	mov.w	r0, #4294967295
   82818:	4770      	bx	lr
   8281a:	bf00      	nop

0008281c <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   8281c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   82820:	604b      	str	r3, [r1, #4]

	return 0;
}
   82822:	2000      	movs	r0, #0
   82824:	4770      	bx	lr
   82826:	bf00      	nop

00082828 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   82828:	2001      	movs	r0, #1
   8282a:	4770      	bx	lr

0008282c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   8282c:	2000      	movs	r0, #0
   8282e:	4770      	bx	lr

00082830 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   82830:	b5f0      	push	{r4, r5, r6, r7, lr}
   82832:	b083      	sub	sp, #12
   82834:	4604      	mov	r4, r0
   82836:	460d      	mov	r5, r1
	uint32_t val = 0;
   82838:	2300      	movs	r3, #0
   8283a:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   8283c:	4b1f      	ldr	r3, [pc, #124]	; (828bc <usart_serial_getchar+0x8c>)
   8283e:	4298      	cmp	r0, r3
   82840:	d107      	bne.n	82852 <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
   82842:	461f      	mov	r7, r3
   82844:	4e1e      	ldr	r6, [pc, #120]	; (828c0 <usart_serial_getchar+0x90>)
   82846:	4638      	mov	r0, r7
   82848:	4629      	mov	r1, r5
   8284a:	47b0      	blx	r6
   8284c:	2800      	cmp	r0, #0
   8284e:	d1fa      	bne.n	82846 <usart_serial_getchar+0x16>
   82850:	e019      	b.n	82886 <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   82852:	4b1c      	ldr	r3, [pc, #112]	; (828c4 <usart_serial_getchar+0x94>)
   82854:	4298      	cmp	r0, r3
   82856:	d109      	bne.n	8286c <usart_serial_getchar+0x3c>
		while (usart_read(p_usart, &val));
   82858:	461f      	mov	r7, r3
   8285a:	4e1b      	ldr	r6, [pc, #108]	; (828c8 <usart_serial_getchar+0x98>)
   8285c:	4638      	mov	r0, r7
   8285e:	a901      	add	r1, sp, #4
   82860:	47b0      	blx	r6
   82862:	2800      	cmp	r0, #0
   82864:	d1fa      	bne.n	8285c <usart_serial_getchar+0x2c>
		*data = (uint8_t)(val & 0xFF);
   82866:	9b01      	ldr	r3, [sp, #4]
   82868:	702b      	strb	r3, [r5, #0]
   8286a:	e019      	b.n	828a0 <usart_serial_getchar+0x70>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   8286c:	4b17      	ldr	r3, [pc, #92]	; (828cc <usart_serial_getchar+0x9c>)
   8286e:	4298      	cmp	r0, r3
   82870:	d109      	bne.n	82886 <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
   82872:	461e      	mov	r6, r3
   82874:	4c14      	ldr	r4, [pc, #80]	; (828c8 <usart_serial_getchar+0x98>)
   82876:	4630      	mov	r0, r6
   82878:	a901      	add	r1, sp, #4
   8287a:	47a0      	blx	r4
   8287c:	2800      	cmp	r0, #0
   8287e:	d1fa      	bne.n	82876 <usart_serial_getchar+0x46>
		*data = (uint8_t)(val & 0xFF);
   82880:	9b01      	ldr	r3, [sp, #4]
   82882:	702b      	strb	r3, [r5, #0]
   82884:	e018      	b.n	828b8 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   82886:	4b12      	ldr	r3, [pc, #72]	; (828d0 <usart_serial_getchar+0xa0>)
   82888:	429c      	cmp	r4, r3
   8288a:	d109      	bne.n	828a0 <usart_serial_getchar+0x70>
		while (usart_read(p_usart, &val));
   8288c:	461e      	mov	r6, r3
   8288e:	4c0e      	ldr	r4, [pc, #56]	; (828c8 <usart_serial_getchar+0x98>)
   82890:	4630      	mov	r0, r6
   82892:	a901      	add	r1, sp, #4
   82894:	47a0      	blx	r4
   82896:	2800      	cmp	r0, #0
   82898:	d1fa      	bne.n	82890 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
   8289a:	9b01      	ldr	r3, [sp, #4]
   8289c:	702b      	strb	r3, [r5, #0]
   8289e:	e00b      	b.n	828b8 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   828a0:	4b0c      	ldr	r3, [pc, #48]	; (828d4 <usart_serial_getchar+0xa4>)
   828a2:	429c      	cmp	r4, r3
   828a4:	d108      	bne.n	828b8 <usart_serial_getchar+0x88>
		while (usart_read(p_usart, &val));
   828a6:	461e      	mov	r6, r3
   828a8:	4c07      	ldr	r4, [pc, #28]	; (828c8 <usart_serial_getchar+0x98>)
   828aa:	4630      	mov	r0, r6
   828ac:	a901      	add	r1, sp, #4
   828ae:	47a0      	blx	r4
   828b0:	2800      	cmp	r0, #0
   828b2:	d1fa      	bne.n	828aa <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
   828b4:	9b01      	ldr	r3, [sp, #4]
   828b6:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   828b8:	b003      	add	sp, #12
   828ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   828bc:	400e0800 	.word	0x400e0800
   828c0:	00080bd5 	.word	0x00080bd5
   828c4:	40098000 	.word	0x40098000
   828c8:	000809f5 	.word	0x000809f5
   828cc:	4009c000 	.word	0x4009c000
   828d0:	400a0000 	.word	0x400a0000
   828d4:	400a4000 	.word	0x400a4000

000828d8 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   828d8:	b570      	push	{r4, r5, r6, lr}
   828da:	460c      	mov	r4, r1
#ifdef UART
	if (UART == (Uart*)p_usart) {
   828dc:	4b21      	ldr	r3, [pc, #132]	; (82964 <usart_serial_putchar+0x8c>)
   828de:	4298      	cmp	r0, r3
   828e0:	d107      	bne.n	828f2 <usart_serial_putchar+0x1a>
		while (uart_write((Uart*)p_usart, c)!=0);
   828e2:	461e      	mov	r6, r3
   828e4:	4d20      	ldr	r5, [pc, #128]	; (82968 <usart_serial_putchar+0x90>)
   828e6:	4630      	mov	r0, r6
   828e8:	4621      	mov	r1, r4
   828ea:	47a8      	blx	r5
   828ec:	2800      	cmp	r0, #0
   828ee:	d1fa      	bne.n	828e6 <usart_serial_putchar+0xe>
   828f0:	e02b      	b.n	8294a <usart_serial_putchar+0x72>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   828f2:	4b1e      	ldr	r3, [pc, #120]	; (8296c <usart_serial_putchar+0x94>)
   828f4:	4298      	cmp	r0, r3
   828f6:	d107      	bne.n	82908 <usart_serial_putchar+0x30>
		while (usart_write(p_usart, c)!=0);
   828f8:	461e      	mov	r6, r3
   828fa:	4d1d      	ldr	r5, [pc, #116]	; (82970 <usart_serial_putchar+0x98>)
   828fc:	4630      	mov	r0, r6
   828fe:	4621      	mov	r1, r4
   82900:	47a8      	blx	r5
   82902:	2800      	cmp	r0, #0
   82904:	d1fa      	bne.n	828fc <usart_serial_putchar+0x24>
   82906:	e022      	b.n	8294e <usart_serial_putchar+0x76>
		return 1;
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   82908:	4b1a      	ldr	r3, [pc, #104]	; (82974 <usart_serial_putchar+0x9c>)
   8290a:	4298      	cmp	r0, r3
   8290c:	d107      	bne.n	8291e <usart_serial_putchar+0x46>
		while (usart_write(p_usart, c)!=0);
   8290e:	461e      	mov	r6, r3
   82910:	4d17      	ldr	r5, [pc, #92]	; (82970 <usart_serial_putchar+0x98>)
   82912:	4630      	mov	r0, r6
   82914:	4621      	mov	r1, r4
   82916:	47a8      	blx	r5
   82918:	2800      	cmp	r0, #0
   8291a:	d1fa      	bne.n	82912 <usart_serial_putchar+0x3a>
   8291c:	e019      	b.n	82952 <usart_serial_putchar+0x7a>
		return 1;
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   8291e:	4b16      	ldr	r3, [pc, #88]	; (82978 <usart_serial_putchar+0xa0>)
   82920:	4298      	cmp	r0, r3
   82922:	d107      	bne.n	82934 <usart_serial_putchar+0x5c>
		while (usart_write(p_usart, c)!=0);
   82924:	461e      	mov	r6, r3
   82926:	4d12      	ldr	r5, [pc, #72]	; (82970 <usart_serial_putchar+0x98>)
   82928:	4630      	mov	r0, r6
   8292a:	4621      	mov	r1, r4
   8292c:	47a8      	blx	r5
   8292e:	2800      	cmp	r0, #0
   82930:	d1fa      	bne.n	82928 <usart_serial_putchar+0x50>
   82932:	e010      	b.n	82956 <usart_serial_putchar+0x7e>
		return 1;
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   82934:	4b11      	ldr	r3, [pc, #68]	; (8297c <usart_serial_putchar+0xa4>)
   82936:	4298      	cmp	r0, r3
   82938:	d10f      	bne.n	8295a <usart_serial_putchar+0x82>
		while (usart_write(p_usart, c)!=0);
   8293a:	461e      	mov	r6, r3
   8293c:	4d0c      	ldr	r5, [pc, #48]	; (82970 <usart_serial_putchar+0x98>)
   8293e:	4630      	mov	r0, r6
   82940:	4621      	mov	r1, r4
   82942:	47a8      	blx	r5
   82944:	2800      	cmp	r0, #0
   82946:	d1fa      	bne.n	8293e <usart_serial_putchar+0x66>
   82948:	e009      	b.n	8295e <usart_serial_putchar+0x86>
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
   8294a:	2001      	movs	r0, #1
   8294c:	bd70      	pop	{r4, r5, r6, pc}
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   8294e:	2001      	movs	r0, #1
   82950:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   82952:	2001      	movs	r0, #1
   82954:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   82956:	2001      	movs	r0, #1
   82958:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   8295a:	2000      	movs	r0, #0
   8295c:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   8295e:	2001      	movs	r0, #1
	}
# endif
#endif /* ifdef USART */

	return 0;
}
   82960:	bd70      	pop	{r4, r5, r6, pc}
   82962:	bf00      	nop
   82964:	400e0800 	.word	0x400e0800
   82968:	00080bc5 	.word	0x00080bc5
   8296c:	40098000 	.word	0x40098000
   82970:	000809e1 	.word	0x000809e1
   82974:	4009c000 	.word	0x4009c000
   82978:	400a0000 	.word	0x400a0000
   8297c:	400a4000 	.word	0x400a4000

00082980 <vUltraSensorTask>:
	}
	vTaskDelete(NULL);
}

//When driving is done do Locate object
void vUltraSensorTask(void *pvParam) {
   82980:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	while (1) {
		if (booleanUltraSensor == 1 && booleanCommunication == 0 && booleanDriving == 0) {
   82984:	4c15      	ldr	r4, [pc, #84]	; (829dc <vUltraSensorTask+0x5c>)
				//start pickup. goto communication
				booleanCommunication = 1;

			}
		} else {
			vTaskDelay(pdMSTOTICKS(100));
   82986:	4d16      	ldr	r5, [pc, #88]	; (829e0 <vUltraSensorTask+0x60>)

//When driving is done do Locate object
void vUltraSensorTask(void *pvParam) {

	while (1) {
		if (booleanUltraSensor == 1 && booleanCommunication == 0 && booleanDriving == 0) {
   82988:	4e16      	ldr	r6, [pc, #88]	; (829e4 <vUltraSensorTask+0x64>)
   8298a:	7823      	ldrb	r3, [r4, #0]
   8298c:	2b01      	cmp	r3, #1
   8298e:	d121      	bne.n	829d4 <vUltraSensorTask+0x54>
   82990:	7833      	ldrb	r3, [r6, #0]
   82992:	b9fb      	cbnz	r3, 829d4 <vUltraSensorTask+0x54>
   82994:	4b14      	ldr	r3, [pc, #80]	; (829e8 <vUltraSensorTask+0x68>)
   82996:	781b      	ldrb	r3, [r3, #0]
   82998:	b9e3      	cbnz	r3, 829d4 <vUltraSensorTask+0x54>

			//todo del
			puts("Ultrasound found object distance\n");
   8299a:	4814      	ldr	r0, [pc, #80]	; (829ec <vUltraSensorTask+0x6c>)
   8299c:	4b14      	ldr	r3, [pc, #80]	; (829f0 <vUltraSensorTask+0x70>)
   8299e:	4798      	blx	r3
			printf("Distance to object: %lu\n", distanceUltraSensor);
   829a0:	4814      	ldr	r0, [pc, #80]	; (829f4 <vUltraSensorTask+0x74>)
   829a2:	4b15      	ldr	r3, [pc, #84]	; (829f8 <vUltraSensorTask+0x78>)
   829a4:	6819      	ldr	r1, [r3, #0]
   829a6:	4f15      	ldr	r7, [pc, #84]	; (829fc <vUltraSensorTask+0x7c>)
   829a8:	47b8      	blx	r7
			printf("Angle to object: %lu\n", angleUltraSensor);
   829aa:	4815      	ldr	r0, [pc, #84]	; (82a00 <vUltraSensorTask+0x80>)
   829ac:	4b15      	ldr	r3, [pc, #84]	; (82a04 <vUltraSensorTask+0x84>)
   829ae:	7819      	ldrb	r1, [r3, #0]
   829b0:	47b8      	blx	r7

			//When still locating
			//booleanUltraSensor == 1 && booleanCommunication == 0 && booleanDriving == 0

			//when located
			booleanModifyPosition = 1;
   829b2:	f8df 9058 	ldr.w	r9, [pc, #88]	; 82a0c <vUltraSensorTask+0x8c>
   829b6:	f04f 0801 	mov.w	r8, #1
   829ba:	f889 8000 	strb.w	r8, [r9]
			if (booleanModifyPosition == 1) {
				//TODO: rotate, drive backwards/forwards
				//activate twi communication
				//todo del
				printf("Modifying driving\n");
   829be:	4812      	ldr	r0, [pc, #72]	; (82a08 <vUltraSensorTask+0x88>)
   829c0:	47b8      	blx	r7

				booleanDriving = 0;
   829c2:	2300      	movs	r3, #0
   829c4:	4a08      	ldr	r2, [pc, #32]	; (829e8 <vUltraSensorTask+0x68>)
   829c6:	7013      	strb	r3, [r2, #0]
				booleanUltraSensor = 0;
   829c8:	7023      	strb	r3, [r4, #0]
				booleanModifyPosition = 0;
   829ca:	f889 3000 	strb.w	r3, [r9]
				//start pickup. goto communication
				booleanCommunication = 1;
   829ce:	f886 8000 	strb.w	r8, [r6]
   829d2:	e7da      	b.n	8298a <vUltraSensorTask+0xa>

			}
		} else {
			vTaskDelay(pdMSTOTICKS(100));
   829d4:	2064      	movs	r0, #100	; 0x64
   829d6:	47a8      	blx	r5
   829d8:	e7d7      	b.n	8298a <vUltraSensorTask+0xa>
   829da:	bf00      	nop
   829dc:	2007ac92 	.word	0x2007ac92
   829e0:	0008199d 	.word	0x0008199d
   829e4:	2007ac91 	.word	0x2007ac91
   829e8:	2007ac90 	.word	0x2007ac90
   829ec:	000861c4 	.word	0x000861c4
   829f0:	00083731 	.word	0x00083731
   829f4:	000861e8 	.word	0x000861e8
   829f8:	20070a34 	.word	0x20070a34
   829fc:	00083529 	.word	0x00083529
   82a00:	00086204 	.word	0x00086204
   82a04:	20070a30 	.word	0x20070a30
   82a08:	0008621c 	.word	0x0008621c
   82a0c:	2007ac93 	.word	0x2007ac93

00082a10 <vCommunicationTask>:
static void adjustPositionDuringPickup() {
	printf("\nAdjusting position during pickup!!!");
}

//TWI communication
void vCommunicationTask(void *pvParam) {
   82a10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82a14:	b084      	sub	sp, #16

	while (1) {
		if (booleanCommunication == 1 && booleanUltraSensor == 0 && booleanDriving == 0 && booleanModifyPosition == 0) {
   82a16:	4c72      	ldr	r4, [pc, #456]	; (82be0 <vCommunicationTask+0x1d0>)
					//todo del maybe..
					printf("failed twi switch %d\n", current_twi_state);
			}
			//end of current_twi_state
		} else {
			vTaskDelay(pdMSTOTICKS(100));
   82a18:	4d72      	ldr	r5, [pc, #456]	; (82be4 <vCommunicationTask+0x1d4>)

//TWI communication
void vCommunicationTask(void *pvParam) {

	while (1) {
		if (booleanCommunication == 1 && booleanUltraSensor == 0 && booleanDriving == 0 && booleanModifyPosition == 0) {
   82a1a:	4e73      	ldr	r6, [pc, #460]	; (82be8 <vCommunicationTask+0x1d8>)
   82a1c:	7823      	ldrb	r3, [r4, #0]
   82a1e:	2b01      	cmp	r3, #1
   82a20:	f040 80da 	bne.w	82bd8 <vCommunicationTask+0x1c8>
   82a24:	7833      	ldrb	r3, [r6, #0]
   82a26:	2b00      	cmp	r3, #0
   82a28:	f040 80d6 	bne.w	82bd8 <vCommunicationTask+0x1c8>
   82a2c:	4b6f      	ldr	r3, [pc, #444]	; (82bec <vCommunicationTask+0x1dc>)
   82a2e:	781b      	ldrb	r3, [r3, #0]
   82a30:	2b00      	cmp	r3, #0
   82a32:	f040 80d1 	bne.w	82bd8 <vCommunicationTask+0x1c8>
   82a36:	4b6e      	ldr	r3, [pc, #440]	; (82bf0 <vCommunicationTask+0x1e0>)
   82a38:	781b      	ldrb	r3, [r3, #0]
   82a3a:	2b00      	cmp	r3, #0
   82a3c:	f040 80cc 	bne.w	82bd8 <vCommunicationTask+0x1c8>
			//check state for communication
			switch (current_twi_state) {
   82a40:	4b6c      	ldr	r3, [pc, #432]	; (82bf4 <vCommunicationTask+0x1e4>)
   82a42:	7819      	ldrb	r1, [r3, #0]
   82a44:	2905      	cmp	r1, #5
   82a46:	f200 80c3 	bhi.w	82bd0 <vCommunicationTask+0x1c0>
   82a4a:	e8df f011 	tbh	[pc, r1, lsl #1]
   82a4e:	0006      	.short	0x0006
   82a50:	0040002e 	.word	0x0040002e
   82a54:	009a008b 	.word	0x009a008b
   82a58:	00bd      	.short	0x00bd
				case INIT_ARM:
					//todo del
					puts("INIT_ARM");
   82a5a:	4867      	ldr	r0, [pc, #412]	; (82bf8 <vCommunicationTask+0x1e8>)
   82a5c:	4b67      	ldr	r3, [pc, #412]	; (82bfc <vCommunicationTask+0x1ec>)
   82a5e:	4798      	blx	r3
					//get the info about the arm

					armInfo = twi_getArmInfo();
   82a60:	4f67      	ldr	r7, [pc, #412]	; (82c00 <vCommunicationTask+0x1f0>)
   82a62:	a802      	add	r0, sp, #8
   82a64:	4b67      	ldr	r3, [pc, #412]	; (82c04 <vCommunicationTask+0x1f4>)
   82a66:	4798      	blx	r3
   82a68:	9802      	ldr	r0, [sp, #8]
   82a6a:	6038      	str	r0, [r7, #0]
   82a6c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   82a70:	80bb      	strh	r3, [r7, #4]
					if (armInfo.hasData) {
   82a72:	797b      	ldrb	r3, [r7, #5]
   82a74:	b1ab      	cbz	r3, 82aa2 <vCommunicationTask+0x92>
						setGetAll(armInfo.collectAll);
   82a76:	7938      	ldrb	r0, [r7, #4]
   82a78:	4b63      	ldr	r3, [pc, #396]	; (82c08 <vCommunicationTask+0x1f8>)
   82a7a:	4798      	blx	r3
						booleanCommunication = 0;
   82a7c:	2300      	movs	r3, #0
   82a7e:	7023      	strb	r3, [r4, #0]
						booleanDriving = 1;
   82a80:	2201      	movs	r2, #1
   82a82:	4b5a      	ldr	r3, [pc, #360]	; (82bec <vCommunicationTask+0x1dc>)
   82a84:	701a      	strb	r2, [r3, #0]

						//todo remove
						printf("init arm done\n");
   82a86:	4861      	ldr	r0, [pc, #388]	; (82c0c <vCommunicationTask+0x1fc>)
   82a88:	f8df 819c 	ldr.w	r8, [pc, #412]	; 82c28 <vCommunicationTask+0x218>
   82a8c:	47c0      	blx	r8
						printf("arminfo: %u %u %u %u all: %u", armInfo.boxAngle, armInfo.boxDistance,
   82a8e:	7879      	ldrb	r1, [r7, #1]
   82a90:	783a      	ldrb	r2, [r7, #0]
   82a92:	78fb      	ldrb	r3, [r7, #3]
   82a94:	78b8      	ldrb	r0, [r7, #2]
   82a96:	9000      	str	r0, [sp, #0]
   82a98:	7938      	ldrb	r0, [r7, #4]
   82a9a:	9001      	str	r0, [sp, #4]
   82a9c:	485c      	ldr	r0, [pc, #368]	; (82c10 <vCommunicationTask+0x200>)
   82a9e:	47c0      	blx	r8
   82aa0:	e7bc      	b.n	82a1c <vCommunicationTask+0xc>
							   armInfo.objectAngle, armInfo.objectDistance, armInfo.collectAll);


					} else {
						//todo remove
						puts("INIT ARM NO DATA");
   82aa2:	485c      	ldr	r0, [pc, #368]	; (82c14 <vCommunicationTask+0x204>)
   82aa4:	4b55      	ldr	r3, [pc, #340]	; (82bfc <vCommunicationTask+0x1ec>)
   82aa6:	4798      	blx	r3
   82aa8:	e7b8      	b.n	82a1c <vCommunicationTask+0xc>

					break;
				case START_PICKUP:

					//start pickup after modify position
					if (twi_pickupStart() == 1) {
   82aaa:	4b5b      	ldr	r3, [pc, #364]	; (82c18 <vCommunicationTask+0x208>)
   82aac:	4798      	blx	r3
   82aae:	2801      	cmp	r0, #1
   82ab0:	d106      	bne.n	82ac0 <vCommunicationTask+0xb0>
						//todo del
						puts("STARTED PICKUP");
   82ab2:	485a      	ldr	r0, [pc, #360]	; (82c1c <vCommunicationTask+0x20c>)
   82ab4:	4b51      	ldr	r3, [pc, #324]	; (82bfc <vCommunicationTask+0x1ec>)
   82ab6:	4798      	blx	r3
						//Could start pickup
						current_twi_state = GET_STATUS_PICKUP;
   82ab8:	2202      	movs	r2, #2
   82aba:	4b4e      	ldr	r3, [pc, #312]	; (82bf4 <vCommunicationTask+0x1e4>)
   82abc:	701a      	strb	r2, [r3, #0]
   82abe:	e7ad      	b.n	82a1c <vCommunicationTask+0xc>

					} else {

						//todo del
						puts("FAILED TO START_PICKUP");
   82ac0:	4857      	ldr	r0, [pc, #348]	; (82c20 <vCommunicationTask+0x210>)
   82ac2:	4b4e      	ldr	r3, [pc, #312]	; (82bfc <vCommunicationTask+0x1ec>)
   82ac4:	4798      	blx	r3

						//failed to start pickup!! try again!
						current_twi_state = START_PICKUP;
   82ac6:	2201      	movs	r2, #1
   82ac8:	4b4a      	ldr	r3, [pc, #296]	; (82bf4 <vCommunicationTask+0x1e4>)
   82aca:	701a      	strb	r2, [r3, #0]
   82acc:	e7a6      	b.n	82a1c <vCommunicationTask+0xc>
					}
					break;
					//pick up is started, getting currentStatus
				case GET_STATUS_PICKUP:
					//todo del
					printf("");
   82ace:	4855      	ldr	r0, [pc, #340]	; (82c24 <vCommunicationTask+0x214>)
   82ad0:	4b55      	ldr	r3, [pc, #340]	; (82c28 <vCommunicationTask+0x218>)
   82ad2:	4798      	blx	r3

					//get current arm currentStatus about pickup
					PickupStatus currentStatus = twi_pickupGetStatus();
   82ad4:	4b55      	ldr	r3, [pc, #340]	; (82c2c <vCommunicationTask+0x21c>)
   82ad6:	4798      	blx	r3
   82ad8:	4607      	mov	r7, r0

					switch (currentStatus) {
   82ada:	1e83      	subs	r3, r0, #2
   82adc:	2b06      	cmp	r3, #6
   82ade:	d89d      	bhi.n	82a1c <vCommunicationTask+0xc>
   82ae0:	e8df f003 	tbb	[pc, r3]
   82ae4:	162b2b1a 	.word	0x162b2b1a
   82ae8:	0b04      	.short	0x0b04
   82aea:	12          	.byte	0x12
   82aeb:	00          	.byte	0x00
						case PICKUP_FAILED:
							//todo del
							puts("PICKUP_FAILED");
   82aec:	4850      	ldr	r0, [pc, #320]	; (82c30 <vCommunicationTask+0x220>)
   82aee:	4b43      	ldr	r3, [pc, #268]	; (82bfc <vCommunicationTask+0x1ec>)
   82af0:	4798      	blx	r3
							prevTwiPickupStatus=currentStatus;
   82af2:	2206      	movs	r2, #6
   82af4:	4b4f      	ldr	r3, [pc, #316]	; (82c34 <vCommunicationTask+0x224>)
   82af6:	701a      	strb	r2, [r3, #0]
							break;
   82af8:	e790      	b.n	82a1c <vCommunicationTask+0xc>
						case PICKUP_DONE_DRIVE:
							//todo del
							puts("PICKUP_DONE_DRIVE");
   82afa:	484f      	ldr	r0, [pc, #316]	; (82c38 <vCommunicationTask+0x228>)
   82afc:	4b3f      	ldr	r3, [pc, #252]	; (82bfc <vCommunicationTask+0x1ec>)
   82afe:	4798      	blx	r3
							prevTwiPickupStatus=currentStatus;
   82b00:	2207      	movs	r2, #7
   82b02:	4b4c      	ldr	r3, [pc, #304]	; (82c34 <vCommunicationTask+0x224>)
   82b04:	701a      	strb	r2, [r3, #0]
							break;
   82b06:	e789      	b.n	82a1c <vCommunicationTask+0xc>
						case PICKUP_IDLE:
							//arm is doing notting
							prevTwiPickupStatus=currentStatus;
   82b08:	2208      	movs	r2, #8
   82b0a:	4b4a      	ldr	r3, [pc, #296]	; (82c34 <vCommunicationTask+0x224>)
   82b0c:	701a      	strb	r2, [r3, #0]
							break;
   82b0e:	e785      	b.n	82a1c <vCommunicationTask+0xc>
						case PICKUP_RUNNING:
							//puts("pickup RUNNING");
							prevTwiPickupStatus=currentStatus;
   82b10:	2205      	movs	r2, #5
   82b12:	4b48      	ldr	r3, [pc, #288]	; (82c34 <vCommunicationTask+0x224>)
   82b14:	701a      	strb	r2, [r3, #0]
							break;
   82b16:	e781      	b.n	82a1c <vCommunicationTask+0xc>
							//done with pickup, continue to drive
							//stop communicating

							//current_twi_state = IDLE;

							puts("PICKUP_DONE");
   82b18:	4848      	ldr	r0, [pc, #288]	; (82c3c <vCommunicationTask+0x22c>)
   82b1a:	4b38      	ldr	r3, [pc, #224]	; (82bfc <vCommunicationTask+0x1ec>)
   82b1c:	4798      	blx	r3
							//tell (set) movement that pickup is done
							setDonePickup();
   82b1e:	4b48      	ldr	r3, [pc, #288]	; (82c40 <vCommunicationTask+0x230>)
   82b20:	4798      	blx	r3

							//TODO UNCOMMENT

							booleanUltraSensor = 0;
   82b22:	2300      	movs	r3, #0
   82b24:	7033      	strb	r3, [r6, #0]
							booleanModifyPosition = 0;
   82b26:	4a32      	ldr	r2, [pc, #200]	; (82bf0 <vCommunicationTask+0x1e0>)
   82b28:	7013      	strb	r3, [r2, #0]
							booleanCommunication = 0;
   82b2a:	7023      	strb	r3, [r4, #0]
							booleanDriving = 1;
   82b2c:	2201      	movs	r2, #1
   82b2e:	4b2f      	ldr	r3, [pc, #188]	; (82bec <vCommunicationTask+0x1dc>)
   82b30:	701a      	strb	r2, [r3, #0]
							//reset twi pickup status
							prevTwiPickupStatus=PICKUP_IDLE;
   82b32:	2208      	movs	r2, #8
   82b34:	4b3f      	ldr	r3, [pc, #252]	; (82c34 <vCommunicationTask+0x224>)
   82b36:	701a      	strb	r2, [r3, #0]

							break;
   82b38:	e770      	b.n	82a1c <vCommunicationTask+0xc>
						case PICKUP_FORWARD:
						case PICKUP_BACKWARD:
							//todo del
							puts("go forward or back");
   82b3a:	4842      	ldr	r0, [pc, #264]	; (82c44 <vCommunicationTask+0x234>)
   82b3c:	4b2f      	ldr	r3, [pc, #188]	; (82bfc <vCommunicationTask+0x1ec>)
   82b3e:	4798      	blx	r3
							//TODO: call function that drives forward/backwards based on cm
							//todo del
							printf("Driving forward/backward");
   82b40:	4841      	ldr	r0, [pc, #260]	; (82c48 <vCommunicationTask+0x238>)
   82b42:	4b39      	ldr	r3, [pc, #228]	; (82c28 <vCommunicationTask+0x218>)
   82b44:	4798      	blx	r3
							if (prevTwiPickupStatus == PICKUP_DONE_DRIVE) {
   82b46:	4b3b      	ldr	r3, [pc, #236]	; (82c34 <vCommunicationTask+0x224>)
   82b48:	781b      	ldrb	r3, [r3, #0]
   82b4a:	2b07      	cmp	r3, #7
   82b4c:	d102      	bne.n	82b54 <vCommunicationTask+0x144>
								puts("HAVE Already DROVEN!!");
   82b4e:	483f      	ldr	r0, [pc, #252]	; (82c4c <vCommunicationTask+0x23c>)
   82b50:	4b2a      	ldr	r3, [pc, #168]	; (82bfc <vCommunicationTask+0x1ec>)
   82b52:	4798      	blx	r3
	vTaskDelete(NULL);
}


static void adjustPositionDuringPickup() {
	printf("\nAdjusting position during pickup!!!");
   82b54:	483e      	ldr	r0, [pc, #248]	; (82c50 <vCommunicationTask+0x240>)
   82b56:	4b34      	ldr	r3, [pc, #208]	; (82c28 <vCommunicationTask+0x218>)
   82b58:	4798      	blx	r3
								puts("HAVE Already DROVEN!!");
							}
														
							//if we needed to drive during pickup, check if driving is done
							adjustPositionDuringPickup();
							twi_pickupSendMovementDone();
   82b5a:	4b3e      	ldr	r3, [pc, #248]	; (82c54 <vCommunicationTask+0x244>)
   82b5c:	4798      	blx	r3
							//save previouse state
							prevTwiPickupStatus=currentStatus;
   82b5e:	4b35      	ldr	r3, [pc, #212]	; (82c34 <vCommunicationTask+0x224>)
   82b60:	701f      	strb	r7, [r3, #0]

							//prevTwiPickupStatus = PICKUP_DONE_DRIVE;

							break;
   82b62:	e75b      	b.n	82a1c <vCommunicationTask+0xc>
					//end of get currentStatus pickup
					break;


				case START_DROP_OFF:
					if (twi_dropoffStart() == 1) {
   82b64:	4b3c      	ldr	r3, [pc, #240]	; (82c58 <vCommunicationTask+0x248>)
   82b66:	4798      	blx	r3
   82b68:	2801      	cmp	r0, #1
   82b6a:	d103      	bne.n	82b74 <vCommunicationTask+0x164>
						//done starting pickup
						current_twi_state = GET_STATUS_DROP_OFF;
   82b6c:	2204      	movs	r2, #4
   82b6e:	4b21      	ldr	r3, [pc, #132]	; (82bf4 <vCommunicationTask+0x1e4>)
   82b70:	701a      	strb	r2, [r3, #0]
   82b72:	e753      	b.n	82a1c <vCommunicationTask+0xc>
					} else {
						//todo del
						puts("FAILD TO START DROPOFF");
   82b74:	4839      	ldr	r0, [pc, #228]	; (82c5c <vCommunicationTask+0x24c>)
   82b76:	4b21      	ldr	r3, [pc, #132]	; (82bfc <vCommunicationTask+0x1ec>)
   82b78:	4798      	blx	r3

						//failed to start DROPOFF
						current_twi_state = START_DROP_OFF;
   82b7a:	2203      	movs	r2, #3
   82b7c:	4b1d      	ldr	r3, [pc, #116]	; (82bf4 <vCommunicationTask+0x1e4>)
   82b7e:	701a      	strb	r2, [r3, #0]
   82b80:	e74c      	b.n	82a1c <vCommunicationTask+0xc>
					}
					break;

				case GET_STATUS_DROP_OFF:
					//puts("STATUS DROP OFF");
					switch (twi_dropoffGetStatus()) {
   82b82:	4b37      	ldr	r3, [pc, #220]	; (82c60 <vCommunicationTask+0x250>)
   82b84:	4798      	blx	r3
   82b86:	3802      	subs	r0, #2
   82b88:	2803      	cmp	r0, #3
   82b8a:	f63f af47 	bhi.w	82a1c <vCommunicationTask+0xc>
   82b8e:	e8df f000 	tbb	[pc, r0]
   82b92:	0f02      	.short	0x0f02
   82b94:	1713      	.short	0x1713
						case DROPOFF_DONE:
							//tell (set)drive that pickup is done.
							setDoneDropoff();
   82b96:	4b33      	ldr	r3, [pc, #204]	; (82c64 <vCommunicationTask+0x254>)
   82b98:	4798      	blx	r3
							//todo del
							printf("DROPOFF_DONE\n");
   82b9a:	4833      	ldr	r0, [pc, #204]	; (82c68 <vCommunicationTask+0x258>)
   82b9c:	4b22      	ldr	r3, [pc, #136]	; (82c28 <vCommunicationTask+0x218>)
   82b9e:	4798      	blx	r3

							booleanUltraSensor = 0;
   82ba0:	2300      	movs	r3, #0
   82ba2:	7033      	strb	r3, [r6, #0]
							booleanModifyPosition = 0;
   82ba4:	4a12      	ldr	r2, [pc, #72]	; (82bf0 <vCommunicationTask+0x1e0>)
   82ba6:	7013      	strb	r3, [r2, #0]
							booleanCommunication = 0;
   82ba8:	7023      	strb	r3, [r4, #0]
							booleanDriving = 0;
   82baa:	4a10      	ldr	r2, [pc, #64]	; (82bec <vCommunicationTask+0x1dc>)
   82bac:	7013      	strb	r3, [r2, #0]
							break;
   82bae:	e735      	b.n	82a1c <vCommunicationTask+0xc>
						case DROPOFF_RUNNING:
							//todo del
							printf("DROPOFF_RUNNING\n");
   82bb0:	482e      	ldr	r0, [pc, #184]	; (82c6c <vCommunicationTask+0x25c>)
   82bb2:	4b1d      	ldr	r3, [pc, #116]	; (82c28 <vCommunicationTask+0x218>)
   82bb4:	4798      	blx	r3

							break;
   82bb6:	e731      	b.n	82a1c <vCommunicationTask+0xc>
						case DROPOFF_FAILED:
							//todo del
							printf("DROPOFF_FAILED\n");
   82bb8:	482d      	ldr	r0, [pc, #180]	; (82c70 <vCommunicationTask+0x260>)
   82bba:	4b1b      	ldr	r3, [pc, #108]	; (82c28 <vCommunicationTask+0x218>)
   82bbc:	4798      	blx	r3

							break;
   82bbe:	e72d      	b.n	82a1c <vCommunicationTask+0xc>
						case DROPOFF_IDLE:
							//todo del
							printf("DROPOFF_IDLE\n");
   82bc0:	482c      	ldr	r0, [pc, #176]	; (82c74 <vCommunicationTask+0x264>)
   82bc2:	4b19      	ldr	r3, [pc, #100]	; (82c28 <vCommunicationTask+0x218>)
   82bc4:	4798      	blx	r3

							break;
   82bc6:	e729      	b.n	82a1c <vCommunicationTask+0xc>
					}
					break;
				case IDLE:
					//todo del
					puts("IDLE");
   82bc8:	482b      	ldr	r0, [pc, #172]	; (82c78 <vCommunicationTask+0x268>)
   82bca:	4b0c      	ldr	r3, [pc, #48]	; (82bfc <vCommunicationTask+0x1ec>)
   82bcc:	4798      	blx	r3

					break;
   82bce:	e725      	b.n	82a1c <vCommunicationTask+0xc>
				default:
					//todo del maybe..
					printf("failed twi switch %d\n", current_twi_state);
   82bd0:	482a      	ldr	r0, [pc, #168]	; (82c7c <vCommunicationTask+0x26c>)
   82bd2:	4b15      	ldr	r3, [pc, #84]	; (82c28 <vCommunicationTask+0x218>)
   82bd4:	4798      	blx	r3
   82bd6:	e721      	b.n	82a1c <vCommunicationTask+0xc>
			}
			//end of current_twi_state
		} else {
			vTaskDelay(pdMSTOTICKS(100));
   82bd8:	2064      	movs	r0, #100	; 0x64
   82bda:	47a8      	blx	r5
   82bdc:	e71e      	b.n	82a1c <vCommunicationTask+0xc>
   82bde:	bf00      	nop
   82be0:	2007ac91 	.word	0x2007ac91
   82be4:	0008199d 	.word	0x0008199d
   82be8:	2007ac92 	.word	0x2007ac92
   82bec:	2007ac90 	.word	0x2007ac90
   82bf0:	2007ac93 	.word	0x2007ac93
   82bf4:	2007acf6 	.word	0x2007acf6
   82bf8:	00086230 	.word	0x00086230
   82bfc:	00083731 	.word	0x00083731
   82c00:	2007ace8 	.word	0x2007ace8
   82c04:	000804ed 	.word	0x000804ed
   82c08:	00080881 	.word	0x00080881
   82c0c:	0008623c 	.word	0x0008623c
   82c10:	0008624c 	.word	0x0008624c
   82c14:	0008626c 	.word	0x0008626c
   82c18:	00080611 	.word	0x00080611
   82c1c:	00086280 	.word	0x00086280
   82c20:	00086290 	.word	0x00086290
   82c24:	00086380 	.word	0x00086380
   82c28:	00083529 	.word	0x00083529
   82c2c:	00080639 	.word	0x00080639
   82c30:	000862a8 	.word	0x000862a8
   82c34:	2007acf5 	.word	0x2007acf5
   82c38:	000862b8 	.word	0x000862b8
   82c3c:	000862cc 	.word	0x000862cc
   82c40:	000808a1 	.word	0x000808a1
   82c44:	000862d8 	.word	0x000862d8
   82c48:	000862ec 	.word	0x000862ec
   82c4c:	00086308 	.word	0x00086308
   82c50:	00086320 	.word	0x00086320
   82c54:	000806dd 	.word	0x000806dd
   82c58:	00080719 	.word	0x00080719
   82c5c:	00086348 	.word	0x00086348
   82c60:	00080741 	.word	0x00080741
   82c64:	000808bd 	.word	0x000808bd
   82c68:	00086360 	.word	0x00086360
   82c6c:	00086370 	.word	0x00086370
   82c70:	00086384 	.word	0x00086384
   82c74:	00086394 	.word	0x00086394
   82c78:	000861b0 	.word	0x000861b0
   82c7c:	000863a4 	.word	0x000863a4

00082c80 <vDriveToObjectTask>:
}


//handles driving the robot to next object/goalbox
void vDriveToObjectTask(void *pvParam)
{
   82c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	while (1) {
		if (booleanDriving == 1 && booleanUltraSensor == 0 && booleanCommunication == 0) {
   82c82:	4c22      	ldr	r4, [pc, #136]	; (82d0c <vDriveToObjectTask+0x8c>)
			//todo del
			printf("\nGotoVal = %u", gotoVal);
			delay_ms(1000);

		} else {
			vTaskDelay(pdMSTOTICKS(200));
   82c84:	4d22      	ldr	r5, [pc, #136]	; (82d10 <vDriveToObjectTask+0x90>)
//handles driving the robot to next object/goalbox
void vDriveToObjectTask(void *pvParam)
{

	while (1) {
		if (booleanDriving == 1 && booleanUltraSensor == 0 && booleanCommunication == 0) {
   82c86:	4e23      	ldr	r6, [pc, #140]	; (82d14 <vDriveToObjectTask+0x94>)
   82c88:	7823      	ldrb	r3, [r4, #0]
   82c8a:	2b01      	cmp	r3, #1
   82c8c:	d13a      	bne.n	82d04 <vDriveToObjectTask+0x84>
   82c8e:	7833      	ldrb	r3, [r6, #0]
   82c90:	2b00      	cmp	r3, #0
   82c92:	d137      	bne.n	82d04 <vDriveToObjectTask+0x84>
   82c94:	4b20      	ldr	r3, [pc, #128]	; (82d18 <vDriveToObjectTask+0x98>)
   82c96:	781b      	ldrb	r3, [r3, #0]
   82c98:	2b00      	cmp	r3, #0
   82c9a:	d133      	bne.n	82d04 <vDriveToObjectTask+0x84>
			//todo del
			printf("\n>>>>>>>>>>>>DRIVING TO OBJECT<<<<<<<<<<<<\n");
   82c9c:	481f      	ldr	r0, [pc, #124]	; (82d1c <vDriveToObjectTask+0x9c>)
   82c9e:	4b20      	ldr	r3, [pc, #128]	; (82d20 <vDriveToObjectTask+0xa0>)
   82ca0:	4798      	blx	r3
			//Get the cords from navigation
			//twi_navGetXY(XY1,&x1_pos,&y1_pos);
			//twi_navGetXY(XY2,&x2_pos,&y2_pos);

			//do moving
			uint8_t gotoVal = goToNext();
   82ca2:	4b20      	ldr	r3, [pc, #128]	; (82d24 <vDriveToObjectTask+0xa4>)
   82ca4:	4798      	blx	r3
   82ca6:	4607      	mov	r7, r0
			if (gotoVal == 1) {
   82ca8:	2801      	cmp	r0, #1
   82caa:	d110      	bne.n	82cce <vDriveToObjectTask+0x4e>

				booleanDriving = 0;
   82cac:	2300      	movs	r3, #0
   82cae:	7023      	strb	r3, [r4, #0]
				booleanCommunication = 0;
   82cb0:	4a19      	ldr	r2, [pc, #100]	; (82d18 <vDriveToObjectTask+0x98>)
   82cb2:	7013      	strb	r3, [r2, #0]
				booleanUltraSensor = 1;
   82cb4:	2201      	movs	r2, #1
   82cb6:	7032      	strb	r2, [r6, #0]
				booleanModifyPosition = 0;
   82cb8:	491b      	ldr	r1, [pc, #108]	; (82d28 <vDriveToObjectTask+0xa8>)
   82cba:	700b      	strb	r3, [r1, #0]
				current_twi_state = START_PICKUP;
   82cbc:	4b1b      	ldr	r3, [pc, #108]	; (82d2c <vDriveToObjectTask+0xac>)
   82cbe:	701a      	strb	r2, [r3, #0]
				//todo del
				puts("GOTO PICKUP FROM DRIVE");
   82cc0:	481b      	ldr	r0, [pc, #108]	; (82d30 <vDriveToObjectTask+0xb0>)
   82cc2:	4b1c      	ldr	r3, [pc, #112]	; (82d34 <vDriveToObjectTask+0xb4>)
   82cc4:	4798      	blx	r3
				delay_ms(2000);
   82cc6:	481c      	ldr	r0, [pc, #112]	; (82d38 <vDriveToObjectTask+0xb8>)
   82cc8:	4b1c      	ldr	r3, [pc, #112]	; (82d3c <vDriveToObjectTask+0xbc>)
   82cca:	4798      	blx	r3
   82ccc:	e012      	b.n	82cf4 <vDriveToObjectTask+0x74>

			} else if (gotoVal == 2) {
   82cce:	2802      	cmp	r0, #2
   82cd0:	d110      	bne.n	82cf4 <vDriveToObjectTask+0x74>


				booleanDriving = 0;
   82cd2:	2300      	movs	r3, #0
   82cd4:	7023      	strb	r3, [r4, #0]
				booleanCommunication = 0;
   82cd6:	4a10      	ldr	r2, [pc, #64]	; (82d18 <vDriveToObjectTask+0x98>)
   82cd8:	7013      	strb	r3, [r2, #0]
				booleanUltraSensor = 1;
   82cda:	2201      	movs	r2, #1
   82cdc:	7032      	strb	r2, [r6, #0]
				booleanModifyPosition = 0;
   82cde:	4a12      	ldr	r2, [pc, #72]	; (82d28 <vDriveToObjectTask+0xa8>)
   82ce0:	7013      	strb	r3, [r2, #0]
				current_twi_state = START_DROP_OFF;
   82ce2:	2203      	movs	r2, #3
   82ce4:	4b11      	ldr	r3, [pc, #68]	; (82d2c <vDriveToObjectTask+0xac>)
   82ce6:	701a      	strb	r2, [r3, #0]
				//todo del
				puts("GOTO DROPOFF FROM DRIVE");
   82ce8:	4815      	ldr	r0, [pc, #84]	; (82d40 <vDriveToObjectTask+0xc0>)
   82cea:	4b12      	ldr	r3, [pc, #72]	; (82d34 <vDriveToObjectTask+0xb4>)
   82cec:	4798      	blx	r3
				delay_ms(2000);
   82cee:	4812      	ldr	r0, [pc, #72]	; (82d38 <vDriveToObjectTask+0xb8>)
   82cf0:	4b12      	ldr	r3, [pc, #72]	; (82d3c <vDriveToObjectTask+0xbc>)
   82cf2:	4798      	blx	r3

			}
			//todo del
			printf("\nGotoVal = %u", gotoVal);
   82cf4:	4813      	ldr	r0, [pc, #76]	; (82d44 <vDriveToObjectTask+0xc4>)
   82cf6:	4639      	mov	r1, r7
   82cf8:	4b09      	ldr	r3, [pc, #36]	; (82d20 <vDriveToObjectTask+0xa0>)
   82cfa:	4798      	blx	r3
			delay_ms(1000);
   82cfc:	4812      	ldr	r0, [pc, #72]	; (82d48 <vDriveToObjectTask+0xc8>)
   82cfe:	4b0f      	ldr	r3, [pc, #60]	; (82d3c <vDriveToObjectTask+0xbc>)
   82d00:	4798      	blx	r3
//handles driving the robot to next object/goalbox
void vDriveToObjectTask(void *pvParam)
{

	while (1) {
		if (booleanDriving == 1 && booleanUltraSensor == 0 && booleanCommunication == 0) {
   82d02:	e7c1      	b.n	82c88 <vDriveToObjectTask+0x8>
			//todo del
			printf("\nGotoVal = %u", gotoVal);
			delay_ms(1000);

		} else {
			vTaskDelay(pdMSTOTICKS(200));
   82d04:	20c8      	movs	r0, #200	; 0xc8
   82d06:	47a8      	blx	r5
   82d08:	e7be      	b.n	82c88 <vDriveToObjectTask+0x8>
   82d0a:	bf00      	nop
   82d0c:	2007ac90 	.word	0x2007ac90
   82d10:	0008199d 	.word	0x0008199d
   82d14:	2007ac92 	.word	0x2007ac92
   82d18:	2007ac91 	.word	0x2007ac91
   82d1c:	000863bc 	.word	0x000863bc
   82d20:	00083529 	.word	0x00083529
   82d24:	000807c9 	.word	0x000807c9
   82d28:	2007ac93 	.word	0x2007ac93
   82d2c:	2007acf6 	.word	0x2007acf6
   82d30:	000863e8 	.word	0x000863e8
   82d34:	00083731 	.word	0x00083731
   82d38:	00b71b00 	.word	0x00b71b00
   82d3c:	20070001 	.word	0x20070001
   82d40:	00086400 	.word	0x00086400
   82d44:	00086418 	.word	0x00086418
   82d48:	005b8d80 	.word	0x005b8d80

00082d4c <main>:
void vCommunicationTask(void *pvParam);

static void configure_console(void);


int main(void) {
   82d4c:	b570      	push	{r4, r5, r6, lr}
   82d4e:	b088      	sub	sp, #32
	/* Insert system clock initialization code here (sysclk_init()). */
	sysclk_init();
   82d50:	4b4b      	ldr	r3, [pc, #300]	; (82e80 <main+0x134>)
   82d52:	4798      	blx	r3
	board_init();
   82d54:	4b4b      	ldr	r3, [pc, #300]	; (82e84 <main+0x138>)
   82d56:	4798      	blx	r3
   82d58:	2008      	movs	r0, #8
   82d5a:	4c4b      	ldr	r4, [pc, #300]	; (82e88 <main+0x13c>)
   82d5c:	47a0      	blx	r4
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   82d5e:	4d4b      	ldr	r5, [pc, #300]	; (82e8c <main+0x140>)
   82d60:	4b4b      	ldr	r3, [pc, #300]	; (82e90 <main+0x144>)
   82d62:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   82d64:	4a4b      	ldr	r2, [pc, #300]	; (82e94 <main+0x148>)
   82d66:	4b4c      	ldr	r3, [pc, #304]	; (82e98 <main+0x14c>)
   82d68:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   82d6a:	4a4c      	ldr	r2, [pc, #304]	; (82e9c <main+0x150>)
   82d6c:	4b4c      	ldr	r3, [pc, #304]	; (82ea0 <main+0x154>)
   82d6e:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   82d70:	4b4c      	ldr	r3, [pc, #304]	; (82ea4 <main+0x158>)
   82d72:	9305      	str	r3, [sp, #20]
	uart_settings.ul_baudrate = opt->baudrate;
   82d74:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   82d78:	9306      	str	r3, [sp, #24]
	uart_settings.ul_mode = opt->paritytype;
   82d7a:	f44f 6300 	mov.w	r3, #2048	; 0x800
   82d7e:	9307      	str	r3, [sp, #28]
   82d80:	2008      	movs	r0, #8
   82d82:	47a0      	blx	r4
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   82d84:	4628      	mov	r0, r5
   82d86:	a905      	add	r1, sp, #20
   82d88:	4b47      	ldr	r3, [pc, #284]	; (82ea8 <main+0x15c>)
   82d8a:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   82d8c:	4e47      	ldr	r6, [pc, #284]	; (82eac <main+0x160>)
   82d8e:	6833      	ldr	r3, [r6, #0]
   82d90:	6898      	ldr	r0, [r3, #8]
   82d92:	2100      	movs	r1, #0
   82d94:	4d46      	ldr	r5, [pc, #280]	; (82eb0 <main+0x164>)
   82d96:	47a8      	blx	r5
	setbuf(stdin, NULL);
   82d98:	6833      	ldr	r3, [r6, #0]
   82d9a:	6858      	ldr	r0, [r3, #4]
   82d9c:	2100      	movs	r1, #0
   82d9e:	47a8      	blx	r5
	/* Configure console UART. */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);

	//todo del
	printf("Console ready\n");
   82da0:	4844      	ldr	r0, [pc, #272]	; (82eb4 <main+0x168>)
   82da2:	4d45      	ldr	r5, [pc, #276]	; (82eb8 <main+0x16c>)
   82da4:	47a8      	blx	r5
	printf("=============\n");
   82da6:	4845      	ldr	r0, [pc, #276]	; (82ebc <main+0x170>)
   82da8:	47a8      	blx	r5
int main(void) {
	/* Insert system clock initialization code here (sysclk_init()). */
	sysclk_init();
	board_init();
	configure_console();
	TC0_init();
   82daa:	4b45      	ldr	r3, [pc, #276]	; (82ec0 <main+0x174>)
   82dac:	4798      	blx	r3
	//init twi communication
	twi_comInit();
   82dae:	4b45      	ldr	r3, [pc, #276]	; (82ec4 <main+0x178>)
   82db0:	4798      	blx	r3

	//armInfo = twi_getArmInfo();

	uint32_t value = 0;

	current_twi_state = INIT_ARM;
   82db2:	2500      	movs	r5, #0
   82db4:	4b44      	ldr	r3, [pc, #272]	; (82ec8 <main+0x17c>)
   82db6:	701d      	strb	r5, [r3, #0]
   82db8:	200b      	movs	r0, #11
   82dba:	47a0      	blx	r4
   82dbc:	200c      	movs	r0, #12
   82dbe:	47a0      	blx	r4
   82dc0:	200d      	movs	r0, #13
   82dc2:	47a0      	blx	r4
   82dc4:	200e      	movs	r0, #14
   82dc6:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   82dc8:	4a40      	ldr	r2, [pc, #256]	; (82ecc <main+0x180>)
   82dca:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   82dce:	6113      	str	r3, [r2, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   82dd0:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   82dd4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   82dd8:	6113      	str	r3, [r2, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   82dda:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   82dde:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
   82de2:	6153      	str	r3, [r2, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   82de4:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   82de8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   82dec:	6113      	str	r3, [r2, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   82dee:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   82df2:	6353      	str	r3, [r2, #52]	; 0x34
	ioport_set_pin_dir(trig, IOPORT_DIR_OUTPUT);
	ioport_set_pin_dir(echo, IOPORT_DIR_INPUT);
	ioport_set_pin_dir(servo, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(servo, LOW);

	if (xTaskCreate(vDriveToObjectTask, (const signed char*)"DriveToObject", 1000, NULL, 1, pxTaskDriveToObject) != pdPASS) {
   82df4:	2301      	movs	r3, #1
   82df6:	9300      	str	r3, [sp, #0]
   82df8:	4b35      	ldr	r3, [pc, #212]	; (82ed0 <main+0x184>)
   82dfa:	681b      	ldr	r3, [r3, #0]
   82dfc:	9301      	str	r3, [sp, #4]
   82dfe:	9502      	str	r5, [sp, #8]
   82e00:	9503      	str	r5, [sp, #12]
   82e02:	4834      	ldr	r0, [pc, #208]	; (82ed4 <main+0x188>)
   82e04:	4934      	ldr	r1, [pc, #208]	; (82ed8 <main+0x18c>)
   82e06:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   82e0a:	462b      	mov	r3, r5
   82e0c:	4c33      	ldr	r4, [pc, #204]	; (82edc <main+0x190>)
   82e0e:	47a0      	blx	r4
   82e10:	2801      	cmp	r0, #1
   82e12:	d002      	beq.n	82e1a <main+0xce>
		//todo del
		printf("Failed to create DriveToObject-task");
   82e14:	4832      	ldr	r0, [pc, #200]	; (82ee0 <main+0x194>)
   82e16:	4b28      	ldr	r3, [pc, #160]	; (82eb8 <main+0x16c>)
   82e18:	4798      	blx	r3
	}

	if (xTaskCreate(vUltraSensorTask, (const signed char*)"UltraSensor", 1000, NULL, 1, pxTaskUltraSensor) != pdPASS) {
   82e1a:	2301      	movs	r3, #1
   82e1c:	9300      	str	r3, [sp, #0]
   82e1e:	4b31      	ldr	r3, [pc, #196]	; (82ee4 <main+0x198>)
   82e20:	681b      	ldr	r3, [r3, #0]
   82e22:	9301      	str	r3, [sp, #4]
   82e24:	2300      	movs	r3, #0
   82e26:	9302      	str	r3, [sp, #8]
   82e28:	9303      	str	r3, [sp, #12]
   82e2a:	482f      	ldr	r0, [pc, #188]	; (82ee8 <main+0x19c>)
   82e2c:	492f      	ldr	r1, [pc, #188]	; (82eec <main+0x1a0>)
   82e2e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   82e32:	4c2a      	ldr	r4, [pc, #168]	; (82edc <main+0x190>)
   82e34:	47a0      	blx	r4
   82e36:	2801      	cmp	r0, #1
   82e38:	d002      	beq.n	82e40 <main+0xf4>
		//todo del
		printf("Failed to create UltraSensor-task");
   82e3a:	482d      	ldr	r0, [pc, #180]	; (82ef0 <main+0x1a4>)
   82e3c:	4b1e      	ldr	r3, [pc, #120]	; (82eb8 <main+0x16c>)
   82e3e:	4798      	blx	r3
	}

	if (xTaskCreate(vCommunicationTask,(const signed char*) "Communication", 1000, NULL, 1, pxTaskCommunication) != pdPASS) {
   82e40:	2301      	movs	r3, #1
   82e42:	9300      	str	r3, [sp, #0]
   82e44:	4b2b      	ldr	r3, [pc, #172]	; (82ef4 <main+0x1a8>)
   82e46:	681b      	ldr	r3, [r3, #0]
   82e48:	9301      	str	r3, [sp, #4]
   82e4a:	2300      	movs	r3, #0
   82e4c:	9302      	str	r3, [sp, #8]
   82e4e:	9303      	str	r3, [sp, #12]
   82e50:	4829      	ldr	r0, [pc, #164]	; (82ef8 <main+0x1ac>)
   82e52:	492a      	ldr	r1, [pc, #168]	; (82efc <main+0x1b0>)
   82e54:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   82e58:	4c20      	ldr	r4, [pc, #128]	; (82edc <main+0x190>)
   82e5a:	47a0      	blx	r4
   82e5c:	2801      	cmp	r0, #1
   82e5e:	d002      	beq.n	82e66 <main+0x11a>
		//todo del
		printf("Failed to create Communication-task");
   82e60:	4827      	ldr	r0, [pc, #156]	; (82f00 <main+0x1b4>)
   82e62:	4b15      	ldr	r3, [pc, #84]	; (82eb8 <main+0x16c>)
   82e64:	4798      	blx	r3
	}


	booleanDriving = 0;
   82e66:	2300      	movs	r3, #0
   82e68:	4a26      	ldr	r2, [pc, #152]	; (82f04 <main+0x1b8>)
   82e6a:	7013      	strb	r3, [r2, #0]
	booleanUltraSensor = 0;
   82e6c:	4a26      	ldr	r2, [pc, #152]	; (82f08 <main+0x1bc>)
   82e6e:	7013      	strb	r3, [r2, #0]
	booleanModifyPosition = 0;
   82e70:	4a26      	ldr	r2, [pc, #152]	; (82f0c <main+0x1c0>)
   82e72:	7013      	strb	r3, [r2, #0]
	booleanCommunication = 1;
   82e74:	2201      	movs	r2, #1
   82e76:	4b26      	ldr	r3, [pc, #152]	; (82f10 <main+0x1c4>)
   82e78:	701a      	strb	r2, [r3, #0]

	vTaskStartScheduler();
   82e7a:	4b26      	ldr	r3, [pc, #152]	; (82f14 <main+0x1c8>)
   82e7c:	4798      	blx	r3
   82e7e:	e7fe      	b.n	82e7e <main+0x132>
   82e80:	0008213d 	.word	0x0008213d
   82e84:	000821a1 	.word	0x000821a1
   82e88:	000825b9 	.word	0x000825b9
   82e8c:	400e0800 	.word	0x400e0800
   82e90:	2007acdc 	.word	0x2007acdc
   82e94:	000828d9 	.word	0x000828d9
   82e98:	2007acd8 	.word	0x2007acd8
   82e9c:	00082831 	.word	0x00082831
   82ea0:	2007acd4 	.word	0x2007acd4
   82ea4:	0501bd00 	.word	0x0501bd00
   82ea8:	00080b8d 	.word	0x00080b8d
   82eac:	200705c0 	.word	0x200705c0
   82eb0:	00083741 	.word	0x00083741
   82eb4:	00086428 	.word	0x00086428
   82eb8:	00083529 	.word	0x00083529
   82ebc:	00086438 	.word	0x00086438
   82ec0:	00080941 	.word	0x00080941
   82ec4:	0008036d 	.word	0x0008036d
   82ec8:	2007acf6 	.word	0x2007acf6
   82ecc:	400e1200 	.word	0x400e1200
   82ed0:	2007ace4 	.word	0x2007ace4
   82ed4:	00082c81 	.word	0x00082c81
   82ed8:	00086448 	.word	0x00086448
   82edc:	000814d5 	.word	0x000814d5
   82ee0:	00086458 	.word	0x00086458
   82ee4:	2007ace0 	.word	0x2007ace0
   82ee8:	00082981 	.word	0x00082981
   82eec:	0008647c 	.word	0x0008647c
   82ef0:	00086488 	.word	0x00086488
   82ef4:	2007acf0 	.word	0x2007acf0
   82ef8:	00082a11 	.word	0x00082a11
   82efc:	000864ac 	.word	0x000864ac
   82f00:	000864bc 	.word	0x000864bc
   82f04:	2007ac90 	.word	0x2007ac90
   82f08:	2007ac92 	.word	0x2007ac92
   82f0c:	2007ac93 	.word	0x2007ac93
   82f10:	2007ac91 	.word	0x2007ac91
   82f14:	000816dd 	.word	0x000816dd

00082f18 <__aeabi_uldivmod>:
   82f18:	b94b      	cbnz	r3, 82f2e <__aeabi_uldivmod+0x16>
   82f1a:	b942      	cbnz	r2, 82f2e <__aeabi_uldivmod+0x16>
   82f1c:	2900      	cmp	r1, #0
   82f1e:	bf08      	it	eq
   82f20:	2800      	cmpeq	r0, #0
   82f22:	d002      	beq.n	82f2a <__aeabi_uldivmod+0x12>
   82f24:	f04f 31ff 	mov.w	r1, #4294967295
   82f28:	4608      	mov	r0, r1
   82f2a:	f000 b83b 	b.w	82fa4 <__aeabi_idiv0>
   82f2e:	b082      	sub	sp, #8
   82f30:	46ec      	mov	ip, sp
   82f32:	e92d 5000 	stmdb	sp!, {ip, lr}
   82f36:	f000 f81d 	bl	82f74 <__gnu_uldivmod_helper>
   82f3a:	f8dd e004 	ldr.w	lr, [sp, #4]
   82f3e:	b002      	add	sp, #8
   82f40:	bc0c      	pop	{r2, r3}
   82f42:	4770      	bx	lr

00082f44 <__gnu_ldivmod_helper>:
   82f44:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   82f48:	9e08      	ldr	r6, [sp, #32]
   82f4a:	4614      	mov	r4, r2
   82f4c:	461d      	mov	r5, r3
   82f4e:	4680      	mov	r8, r0
   82f50:	4689      	mov	r9, r1
   82f52:	f000 f829 	bl	82fa8 <__divdi3>
   82f56:	fb04 f301 	mul.w	r3, r4, r1
   82f5a:	fba4 ab00 	umull	sl, fp, r4, r0
   82f5e:	fb00 3205 	mla	r2, r0, r5, r3
   82f62:	4493      	add	fp, r2
   82f64:	ebb8 080a 	subs.w	r8, r8, sl
   82f68:	eb69 090b 	sbc.w	r9, r9, fp
   82f6c:	e9c6 8900 	strd	r8, r9, [r6]
   82f70:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

00082f74 <__gnu_uldivmod_helper>:
   82f74:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   82f78:	9e08      	ldr	r6, [sp, #32]
   82f7a:	4614      	mov	r4, r2
   82f7c:	461d      	mov	r5, r3
   82f7e:	4680      	mov	r8, r0
   82f80:	4689      	mov	r9, r1
   82f82:	f000 f961 	bl	83248 <__udivdi3>
   82f86:	fb00 f505 	mul.w	r5, r0, r5
   82f8a:	fba0 ab04 	umull	sl, fp, r0, r4
   82f8e:	fb04 5401 	mla	r4, r4, r1, r5
   82f92:	44a3      	add	fp, r4
   82f94:	ebb8 080a 	subs.w	r8, r8, sl
   82f98:	eb69 090b 	sbc.w	r9, r9, fp
   82f9c:	e9c6 8900 	strd	r8, r9, [r6]
   82fa0:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

00082fa4 <__aeabi_idiv0>:
   82fa4:	4770      	bx	lr
   82fa6:	bf00      	nop

00082fa8 <__divdi3>:
   82fa8:	2900      	cmp	r1, #0
   82faa:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   82fae:	f2c0 80a1 	blt.w	830f4 <__divdi3+0x14c>
   82fb2:	2400      	movs	r4, #0
   82fb4:	2b00      	cmp	r3, #0
   82fb6:	f2c0 8098 	blt.w	830ea <__divdi3+0x142>
   82fba:	4615      	mov	r5, r2
   82fbc:	4606      	mov	r6, r0
   82fbe:	460f      	mov	r7, r1
   82fc0:	2b00      	cmp	r3, #0
   82fc2:	d13f      	bne.n	83044 <__divdi3+0x9c>
   82fc4:	428a      	cmp	r2, r1
   82fc6:	d958      	bls.n	8307a <__divdi3+0xd2>
   82fc8:	fab2 f382 	clz	r3, r2
   82fcc:	b14b      	cbz	r3, 82fe2 <__divdi3+0x3a>
   82fce:	f1c3 0220 	rsb	r2, r3, #32
   82fd2:	fa01 f703 	lsl.w	r7, r1, r3
   82fd6:	fa20 f202 	lsr.w	r2, r0, r2
   82fda:	409d      	lsls	r5, r3
   82fdc:	fa00 f603 	lsl.w	r6, r0, r3
   82fe0:	4317      	orrs	r7, r2
   82fe2:	0c29      	lsrs	r1, r5, #16
   82fe4:	fbb7 f2f1 	udiv	r2, r7, r1
   82fe8:	fb01 7712 	mls	r7, r1, r2, r7
   82fec:	b2a8      	uxth	r0, r5
   82fee:	fb00 f302 	mul.w	r3, r0, r2
   82ff2:	ea4f 4c16 	mov.w	ip, r6, lsr #16
   82ff6:	ea4c 4707 	orr.w	r7, ip, r7, lsl #16
   82ffa:	42bb      	cmp	r3, r7
   82ffc:	d909      	bls.n	83012 <__divdi3+0x6a>
   82ffe:	197f      	adds	r7, r7, r5
   83000:	f102 3cff 	add.w	ip, r2, #4294967295
   83004:	f080 8105 	bcs.w	83212 <__divdi3+0x26a>
   83008:	42bb      	cmp	r3, r7
   8300a:	f240 8102 	bls.w	83212 <__divdi3+0x26a>
   8300e:	3a02      	subs	r2, #2
   83010:	442f      	add	r7, r5
   83012:	1aff      	subs	r7, r7, r3
   83014:	fbb7 f3f1 	udiv	r3, r7, r1
   83018:	fb01 7113 	mls	r1, r1, r3, r7
   8301c:	fb00 f003 	mul.w	r0, r0, r3
   83020:	b2b6      	uxth	r6, r6
   83022:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
   83026:	4288      	cmp	r0, r1
   83028:	d908      	bls.n	8303c <__divdi3+0x94>
   8302a:	1949      	adds	r1, r1, r5
   8302c:	f103 37ff 	add.w	r7, r3, #4294967295
   83030:	f080 80f1 	bcs.w	83216 <__divdi3+0x26e>
   83034:	4288      	cmp	r0, r1
   83036:	f240 80ee 	bls.w	83216 <__divdi3+0x26e>
   8303a:	3b02      	subs	r3, #2
   8303c:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   83040:	2300      	movs	r3, #0
   83042:	e003      	b.n	8304c <__divdi3+0xa4>
   83044:	428b      	cmp	r3, r1
   83046:	d90a      	bls.n	8305e <__divdi3+0xb6>
   83048:	2300      	movs	r3, #0
   8304a:	461a      	mov	r2, r3
   8304c:	4610      	mov	r0, r2
   8304e:	4619      	mov	r1, r3
   83050:	b114      	cbz	r4, 83058 <__divdi3+0xb0>
   83052:	4240      	negs	r0, r0
   83054:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   83058:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8305c:	4770      	bx	lr
   8305e:	fab3 f883 	clz	r8, r3
   83062:	f1b8 0f00 	cmp.w	r8, #0
   83066:	f040 8088 	bne.w	8317a <__divdi3+0x1d2>
   8306a:	428b      	cmp	r3, r1
   8306c:	d302      	bcc.n	83074 <__divdi3+0xcc>
   8306e:	4282      	cmp	r2, r0
   83070:	f200 80e2 	bhi.w	83238 <__divdi3+0x290>
   83074:	2300      	movs	r3, #0
   83076:	2201      	movs	r2, #1
   83078:	e7e8      	b.n	8304c <__divdi3+0xa4>
   8307a:	b912      	cbnz	r2, 83082 <__divdi3+0xda>
   8307c:	2301      	movs	r3, #1
   8307e:	fbb3 f5f2 	udiv	r5, r3, r2
   83082:	fab5 f285 	clz	r2, r5
   83086:	2a00      	cmp	r2, #0
   83088:	d13a      	bne.n	83100 <__divdi3+0x158>
   8308a:	1b7f      	subs	r7, r7, r5
   8308c:	0c28      	lsrs	r0, r5, #16
   8308e:	fa1f fc85 	uxth.w	ip, r5
   83092:	2301      	movs	r3, #1
   83094:	fbb7 f1f0 	udiv	r1, r7, r0
   83098:	fb00 7711 	mls	r7, r0, r1, r7
   8309c:	fb0c f201 	mul.w	r2, ip, r1
   830a0:	ea4f 4816 	mov.w	r8, r6, lsr #16
   830a4:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
   830a8:	42ba      	cmp	r2, r7
   830aa:	d907      	bls.n	830bc <__divdi3+0x114>
   830ac:	197f      	adds	r7, r7, r5
   830ae:	f101 38ff 	add.w	r8, r1, #4294967295
   830b2:	d202      	bcs.n	830ba <__divdi3+0x112>
   830b4:	42ba      	cmp	r2, r7
   830b6:	f200 80c4 	bhi.w	83242 <__divdi3+0x29a>
   830ba:	4641      	mov	r1, r8
   830bc:	1abf      	subs	r7, r7, r2
   830be:	fbb7 f2f0 	udiv	r2, r7, r0
   830c2:	fb00 7012 	mls	r0, r0, r2, r7
   830c6:	fb0c fc02 	mul.w	ip, ip, r2
   830ca:	b2b6      	uxth	r6, r6
   830cc:	ea46 4000 	orr.w	r0, r6, r0, lsl #16
   830d0:	4584      	cmp	ip, r0
   830d2:	d907      	bls.n	830e4 <__divdi3+0x13c>
   830d4:	1940      	adds	r0, r0, r5
   830d6:	f102 37ff 	add.w	r7, r2, #4294967295
   830da:	d202      	bcs.n	830e2 <__divdi3+0x13a>
   830dc:	4584      	cmp	ip, r0
   830de:	f200 80ae 	bhi.w	8323e <__divdi3+0x296>
   830e2:	463a      	mov	r2, r7
   830e4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   830e8:	e7b0      	b.n	8304c <__divdi3+0xa4>
   830ea:	43e4      	mvns	r4, r4
   830ec:	4252      	negs	r2, r2
   830ee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   830f2:	e762      	b.n	82fba <__divdi3+0x12>
   830f4:	4240      	negs	r0, r0
   830f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   830fa:	f04f 34ff 	mov.w	r4, #4294967295
   830fe:	e759      	b.n	82fb4 <__divdi3+0xc>
   83100:	4095      	lsls	r5, r2
   83102:	f1c2 0920 	rsb	r9, r2, #32
   83106:	fa27 f109 	lsr.w	r1, r7, r9
   8310a:	fa26 f909 	lsr.w	r9, r6, r9
   8310e:	4097      	lsls	r7, r2
   83110:	0c28      	lsrs	r0, r5, #16
   83112:	fbb1 f8f0 	udiv	r8, r1, r0
   83116:	fb00 1118 	mls	r1, r0, r8, r1
   8311a:	fa1f fc85 	uxth.w	ip, r5
   8311e:	fb0c f308 	mul.w	r3, ip, r8
   83122:	ea49 0907 	orr.w	r9, r9, r7
   83126:	ea4f 4719 	mov.w	r7, r9, lsr #16
   8312a:	ea47 4101 	orr.w	r1, r7, r1, lsl #16
   8312e:	428b      	cmp	r3, r1
   83130:	fa06 f602 	lsl.w	r6, r6, r2
   83134:	d908      	bls.n	83148 <__divdi3+0x1a0>
   83136:	1949      	adds	r1, r1, r5
   83138:	f108 32ff 	add.w	r2, r8, #4294967295
   8313c:	d27a      	bcs.n	83234 <__divdi3+0x28c>
   8313e:	428b      	cmp	r3, r1
   83140:	d978      	bls.n	83234 <__divdi3+0x28c>
   83142:	f1a8 0802 	sub.w	r8, r8, #2
   83146:	4429      	add	r1, r5
   83148:	1ac9      	subs	r1, r1, r3
   8314a:	fbb1 f3f0 	udiv	r3, r1, r0
   8314e:	fb00 1713 	mls	r7, r0, r3, r1
   83152:	fb0c f203 	mul.w	r2, ip, r3
   83156:	fa1f f989 	uxth.w	r9, r9
   8315a:	ea49 4707 	orr.w	r7, r9, r7, lsl #16
   8315e:	42ba      	cmp	r2, r7
   83160:	d907      	bls.n	83172 <__divdi3+0x1ca>
   83162:	197f      	adds	r7, r7, r5
   83164:	f103 31ff 	add.w	r1, r3, #4294967295
   83168:	d260      	bcs.n	8322c <__divdi3+0x284>
   8316a:	42ba      	cmp	r2, r7
   8316c:	d95e      	bls.n	8322c <__divdi3+0x284>
   8316e:	3b02      	subs	r3, #2
   83170:	442f      	add	r7, r5
   83172:	1abf      	subs	r7, r7, r2
   83174:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   83178:	e78c      	b.n	83094 <__divdi3+0xec>
   8317a:	f1c8 0220 	rsb	r2, r8, #32
   8317e:	fa25 f102 	lsr.w	r1, r5, r2
   83182:	fa03 fc08 	lsl.w	ip, r3, r8
   83186:	fa27 f302 	lsr.w	r3, r7, r2
   8318a:	fa20 f202 	lsr.w	r2, r0, r2
   8318e:	fa07 f708 	lsl.w	r7, r7, r8
   83192:	ea41 0c0c 	orr.w	ip, r1, ip
   83196:	ea4f 491c 	mov.w	r9, ip, lsr #16
   8319a:	fbb3 f1f9 	udiv	r1, r3, r9
   8319e:	fb09 3311 	mls	r3, r9, r1, r3
   831a2:	fa1f fa8c 	uxth.w	sl, ip
   831a6:	fb0a fb01 	mul.w	fp, sl, r1
   831aa:	4317      	orrs	r7, r2
   831ac:	0c3a      	lsrs	r2, r7, #16
   831ae:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   831b2:	459b      	cmp	fp, r3
   831b4:	fa05 f008 	lsl.w	r0, r5, r8
   831b8:	d908      	bls.n	831cc <__divdi3+0x224>
   831ba:	eb13 030c 	adds.w	r3, r3, ip
   831be:	f101 32ff 	add.w	r2, r1, #4294967295
   831c2:	d235      	bcs.n	83230 <__divdi3+0x288>
   831c4:	459b      	cmp	fp, r3
   831c6:	d933      	bls.n	83230 <__divdi3+0x288>
   831c8:	3902      	subs	r1, #2
   831ca:	4463      	add	r3, ip
   831cc:	ebcb 0303 	rsb	r3, fp, r3
   831d0:	fbb3 f2f9 	udiv	r2, r3, r9
   831d4:	fb09 3312 	mls	r3, r9, r2, r3
   831d8:	fb0a fa02 	mul.w	sl, sl, r2
   831dc:	b2bf      	uxth	r7, r7
   831de:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
   831e2:	45ba      	cmp	sl, r7
   831e4:	d908      	bls.n	831f8 <__divdi3+0x250>
   831e6:	eb17 070c 	adds.w	r7, r7, ip
   831ea:	f102 33ff 	add.w	r3, r2, #4294967295
   831ee:	d21b      	bcs.n	83228 <__divdi3+0x280>
   831f0:	45ba      	cmp	sl, r7
   831f2:	d919      	bls.n	83228 <__divdi3+0x280>
   831f4:	3a02      	subs	r2, #2
   831f6:	4467      	add	r7, ip
   831f8:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
   831fc:	fba5 0100 	umull	r0, r1, r5, r0
   83200:	ebca 0707 	rsb	r7, sl, r7
   83204:	428f      	cmp	r7, r1
   83206:	f04f 0300 	mov.w	r3, #0
   8320a:	d30a      	bcc.n	83222 <__divdi3+0x27a>
   8320c:	d005      	beq.n	8321a <__divdi3+0x272>
   8320e:	462a      	mov	r2, r5
   83210:	e71c      	b.n	8304c <__divdi3+0xa4>
   83212:	4662      	mov	r2, ip
   83214:	e6fd      	b.n	83012 <__divdi3+0x6a>
   83216:	463b      	mov	r3, r7
   83218:	e710      	b.n	8303c <__divdi3+0x94>
   8321a:	fa06 f608 	lsl.w	r6, r6, r8
   8321e:	4286      	cmp	r6, r0
   83220:	d2f5      	bcs.n	8320e <__divdi3+0x266>
   83222:	1e6a      	subs	r2, r5, #1
   83224:	2300      	movs	r3, #0
   83226:	e711      	b.n	8304c <__divdi3+0xa4>
   83228:	461a      	mov	r2, r3
   8322a:	e7e5      	b.n	831f8 <__divdi3+0x250>
   8322c:	460b      	mov	r3, r1
   8322e:	e7a0      	b.n	83172 <__divdi3+0x1ca>
   83230:	4611      	mov	r1, r2
   83232:	e7cb      	b.n	831cc <__divdi3+0x224>
   83234:	4690      	mov	r8, r2
   83236:	e787      	b.n	83148 <__divdi3+0x1a0>
   83238:	4643      	mov	r3, r8
   8323a:	4642      	mov	r2, r8
   8323c:	e706      	b.n	8304c <__divdi3+0xa4>
   8323e:	3a02      	subs	r2, #2
   83240:	e750      	b.n	830e4 <__divdi3+0x13c>
   83242:	3902      	subs	r1, #2
   83244:	442f      	add	r7, r5
   83246:	e739      	b.n	830bc <__divdi3+0x114>

00083248 <__udivdi3>:
   83248:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8324c:	4614      	mov	r4, r2
   8324e:	4605      	mov	r5, r0
   83250:	460e      	mov	r6, r1
   83252:	2b00      	cmp	r3, #0
   83254:	d143      	bne.n	832de <__udivdi3+0x96>
   83256:	428a      	cmp	r2, r1
   83258:	d953      	bls.n	83302 <__udivdi3+0xba>
   8325a:	fab2 f782 	clz	r7, r2
   8325e:	b157      	cbz	r7, 83276 <__udivdi3+0x2e>
   83260:	f1c7 0620 	rsb	r6, r7, #32
   83264:	fa20 f606 	lsr.w	r6, r0, r6
   83268:	fa01 f307 	lsl.w	r3, r1, r7
   8326c:	fa02 f407 	lsl.w	r4, r2, r7
   83270:	fa00 f507 	lsl.w	r5, r0, r7
   83274:	431e      	orrs	r6, r3
   83276:	0c21      	lsrs	r1, r4, #16
   83278:	fbb6 f2f1 	udiv	r2, r6, r1
   8327c:	fb01 6612 	mls	r6, r1, r2, r6
   83280:	b2a0      	uxth	r0, r4
   83282:	fb00 f302 	mul.w	r3, r0, r2
   83286:	0c2f      	lsrs	r7, r5, #16
   83288:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   8328c:	42b3      	cmp	r3, r6
   8328e:	d909      	bls.n	832a4 <__udivdi3+0x5c>
   83290:	1936      	adds	r6, r6, r4
   83292:	f102 37ff 	add.w	r7, r2, #4294967295
   83296:	f080 80fd 	bcs.w	83494 <__udivdi3+0x24c>
   8329a:	42b3      	cmp	r3, r6
   8329c:	f240 80fa 	bls.w	83494 <__udivdi3+0x24c>
   832a0:	3a02      	subs	r2, #2
   832a2:	4426      	add	r6, r4
   832a4:	1af6      	subs	r6, r6, r3
   832a6:	fbb6 f3f1 	udiv	r3, r6, r1
   832aa:	fb01 6113 	mls	r1, r1, r3, r6
   832ae:	fb00 f003 	mul.w	r0, r0, r3
   832b2:	b2ad      	uxth	r5, r5
   832b4:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
   832b8:	4288      	cmp	r0, r1
   832ba:	d908      	bls.n	832ce <__udivdi3+0x86>
   832bc:	1909      	adds	r1, r1, r4
   832be:	f103 36ff 	add.w	r6, r3, #4294967295
   832c2:	f080 80e9 	bcs.w	83498 <__udivdi3+0x250>
   832c6:	4288      	cmp	r0, r1
   832c8:	f240 80e6 	bls.w	83498 <__udivdi3+0x250>
   832cc:	3b02      	subs	r3, #2
   832ce:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   832d2:	2300      	movs	r3, #0
   832d4:	4610      	mov	r0, r2
   832d6:	4619      	mov	r1, r3
   832d8:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   832dc:	4770      	bx	lr
   832de:	428b      	cmp	r3, r1
   832e0:	d84c      	bhi.n	8337c <__udivdi3+0x134>
   832e2:	fab3 f683 	clz	r6, r3
   832e6:	2e00      	cmp	r6, #0
   832e8:	d14f      	bne.n	8338a <__udivdi3+0x142>
   832ea:	428b      	cmp	r3, r1
   832ec:	d302      	bcc.n	832f4 <__udivdi3+0xac>
   832ee:	4282      	cmp	r2, r0
   832f0:	f200 80dd 	bhi.w	834ae <__udivdi3+0x266>
   832f4:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   832f8:	2300      	movs	r3, #0
   832fa:	2201      	movs	r2, #1
   832fc:	4610      	mov	r0, r2
   832fe:	4619      	mov	r1, r3
   83300:	4770      	bx	lr
   83302:	b912      	cbnz	r2, 8330a <__udivdi3+0xc2>
   83304:	2401      	movs	r4, #1
   83306:	fbb4 f4f2 	udiv	r4, r4, r2
   8330a:	fab4 f284 	clz	r2, r4
   8330e:	2a00      	cmp	r2, #0
   83310:	f040 8082 	bne.w	83418 <__udivdi3+0x1d0>
   83314:	1b09      	subs	r1, r1, r4
   83316:	0c26      	lsrs	r6, r4, #16
   83318:	b2a7      	uxth	r7, r4
   8331a:	2301      	movs	r3, #1
   8331c:	fbb1 f0f6 	udiv	r0, r1, r6
   83320:	fb06 1110 	mls	r1, r6, r0, r1
   83324:	fb07 f200 	mul.w	r2, r7, r0
   83328:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   8332c:	ea4c 4101 	orr.w	r1, ip, r1, lsl #16
   83330:	428a      	cmp	r2, r1
   83332:	d907      	bls.n	83344 <__udivdi3+0xfc>
   83334:	1909      	adds	r1, r1, r4
   83336:	f100 3cff 	add.w	ip, r0, #4294967295
   8333a:	d202      	bcs.n	83342 <__udivdi3+0xfa>
   8333c:	428a      	cmp	r2, r1
   8333e:	f200 80c8 	bhi.w	834d2 <__udivdi3+0x28a>
   83342:	4660      	mov	r0, ip
   83344:	1a89      	subs	r1, r1, r2
   83346:	fbb1 f2f6 	udiv	r2, r1, r6
   8334a:	fb06 1112 	mls	r1, r6, r2, r1
   8334e:	fb07 f702 	mul.w	r7, r7, r2
   83352:	b2ad      	uxth	r5, r5
   83354:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
   83358:	42af      	cmp	r7, r5
   8335a:	d908      	bls.n	8336e <__udivdi3+0x126>
   8335c:	192c      	adds	r4, r5, r4
   8335e:	f102 31ff 	add.w	r1, r2, #4294967295
   83362:	f080 809b 	bcs.w	8349c <__udivdi3+0x254>
   83366:	42a7      	cmp	r7, r4
   83368:	f240 8098 	bls.w	8349c <__udivdi3+0x254>
   8336c:	3a02      	subs	r2, #2
   8336e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
   83372:	4610      	mov	r0, r2
   83374:	4619      	mov	r1, r3
   83376:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8337a:	4770      	bx	lr
   8337c:	2300      	movs	r3, #0
   8337e:	461a      	mov	r2, r3
   83380:	4610      	mov	r0, r2
   83382:	4619      	mov	r1, r3
   83384:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83388:	4770      	bx	lr
   8338a:	f1c6 0520 	rsb	r5, r6, #32
   8338e:	fa22 f705 	lsr.w	r7, r2, r5
   83392:	fa03 f406 	lsl.w	r4, r3, r6
   83396:	fa21 f305 	lsr.w	r3, r1, r5
   8339a:	fa01 fb06 	lsl.w	fp, r1, r6
   8339e:	fa20 f505 	lsr.w	r5, r0, r5
   833a2:	433c      	orrs	r4, r7
   833a4:	ea4f 4814 	mov.w	r8, r4, lsr #16
   833a8:	fbb3 fcf8 	udiv	ip, r3, r8
   833ac:	fb08 331c 	mls	r3, r8, ip, r3
   833b0:	fa1f f984 	uxth.w	r9, r4
   833b4:	fb09 fa0c 	mul.w	sl, r9, ip
   833b8:	ea45 0b0b 	orr.w	fp, r5, fp
   833bc:	ea4f 451b 	mov.w	r5, fp, lsr #16
   833c0:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
   833c4:	459a      	cmp	sl, r3
   833c6:	fa02 f206 	lsl.w	r2, r2, r6
   833ca:	d904      	bls.n	833d6 <__udivdi3+0x18e>
   833cc:	191b      	adds	r3, r3, r4
   833ce:	f10c 35ff 	add.w	r5, ip, #4294967295
   833d2:	d36f      	bcc.n	834b4 <__udivdi3+0x26c>
   833d4:	46ac      	mov	ip, r5
   833d6:	ebca 0303 	rsb	r3, sl, r3
   833da:	fbb3 f5f8 	udiv	r5, r3, r8
   833de:	fb08 3315 	mls	r3, r8, r5, r3
   833e2:	fb09 f905 	mul.w	r9, r9, r5
   833e6:	fa1f fb8b 	uxth.w	fp, fp
   833ea:	ea4b 4703 	orr.w	r7, fp, r3, lsl #16
   833ee:	45b9      	cmp	r9, r7
   833f0:	d904      	bls.n	833fc <__udivdi3+0x1b4>
   833f2:	193f      	adds	r7, r7, r4
   833f4:	f105 33ff 	add.w	r3, r5, #4294967295
   833f8:	d362      	bcc.n	834c0 <__udivdi3+0x278>
   833fa:	461d      	mov	r5, r3
   833fc:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
   83400:	fbac 2302 	umull	r2, r3, ip, r2
   83404:	ebc9 0707 	rsb	r7, r9, r7
   83408:	429f      	cmp	r7, r3
   8340a:	f04f 0500 	mov.w	r5, #0
   8340e:	d34a      	bcc.n	834a6 <__udivdi3+0x25e>
   83410:	d046      	beq.n	834a0 <__udivdi3+0x258>
   83412:	4662      	mov	r2, ip
   83414:	462b      	mov	r3, r5
   83416:	e75d      	b.n	832d4 <__udivdi3+0x8c>
   83418:	4094      	lsls	r4, r2
   8341a:	f1c2 0920 	rsb	r9, r2, #32
   8341e:	fa21 fc09 	lsr.w	ip, r1, r9
   83422:	4091      	lsls	r1, r2
   83424:	fa20 f909 	lsr.w	r9, r0, r9
   83428:	0c26      	lsrs	r6, r4, #16
   8342a:	fbbc f8f6 	udiv	r8, ip, r6
   8342e:	fb06 cc18 	mls	ip, r6, r8, ip
   83432:	b2a7      	uxth	r7, r4
   83434:	fb07 f308 	mul.w	r3, r7, r8
   83438:	ea49 0901 	orr.w	r9, r9, r1
   8343c:	ea4f 4119 	mov.w	r1, r9, lsr #16
   83440:	ea41 4c0c 	orr.w	ip, r1, ip, lsl #16
   83444:	4563      	cmp	r3, ip
   83446:	fa00 f502 	lsl.w	r5, r0, r2
   8344a:	d909      	bls.n	83460 <__udivdi3+0x218>
   8344c:	eb1c 0c04 	adds.w	ip, ip, r4
   83450:	f108 32ff 	add.w	r2, r8, #4294967295
   83454:	d23b      	bcs.n	834ce <__udivdi3+0x286>
   83456:	4563      	cmp	r3, ip
   83458:	d939      	bls.n	834ce <__udivdi3+0x286>
   8345a:	f1a8 0802 	sub.w	r8, r8, #2
   8345e:	44a4      	add	ip, r4
   83460:	ebc3 0c0c 	rsb	ip, r3, ip
   83464:	fbbc f3f6 	udiv	r3, ip, r6
   83468:	fb06 c113 	mls	r1, r6, r3, ip
   8346c:	fb07 f203 	mul.w	r2, r7, r3
   83470:	fa1f f989 	uxth.w	r9, r9
   83474:	ea49 4101 	orr.w	r1, r9, r1, lsl #16
   83478:	428a      	cmp	r2, r1
   8347a:	d907      	bls.n	8348c <__udivdi3+0x244>
   8347c:	1909      	adds	r1, r1, r4
   8347e:	f103 30ff 	add.w	r0, r3, #4294967295
   83482:	d222      	bcs.n	834ca <__udivdi3+0x282>
   83484:	428a      	cmp	r2, r1
   83486:	d920      	bls.n	834ca <__udivdi3+0x282>
   83488:	3b02      	subs	r3, #2
   8348a:	4421      	add	r1, r4
   8348c:	1a89      	subs	r1, r1, r2
   8348e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   83492:	e743      	b.n	8331c <__udivdi3+0xd4>
   83494:	463a      	mov	r2, r7
   83496:	e705      	b.n	832a4 <__udivdi3+0x5c>
   83498:	4633      	mov	r3, r6
   8349a:	e718      	b.n	832ce <__udivdi3+0x86>
   8349c:	460a      	mov	r2, r1
   8349e:	e766      	b.n	8336e <__udivdi3+0x126>
   834a0:	40b0      	lsls	r0, r6
   834a2:	4290      	cmp	r0, r2
   834a4:	d2b5      	bcs.n	83412 <__udivdi3+0x1ca>
   834a6:	f10c 32ff 	add.w	r2, ip, #4294967295
   834aa:	2300      	movs	r3, #0
   834ac:	e712      	b.n	832d4 <__udivdi3+0x8c>
   834ae:	4633      	mov	r3, r6
   834b0:	4632      	mov	r2, r6
   834b2:	e70f      	b.n	832d4 <__udivdi3+0x8c>
   834b4:	459a      	cmp	sl, r3
   834b6:	d98d      	bls.n	833d4 <__udivdi3+0x18c>
   834b8:	f1ac 0c02 	sub.w	ip, ip, #2
   834bc:	4423      	add	r3, r4
   834be:	e78a      	b.n	833d6 <__udivdi3+0x18e>
   834c0:	45b9      	cmp	r9, r7
   834c2:	d99a      	bls.n	833fa <__udivdi3+0x1b2>
   834c4:	3d02      	subs	r5, #2
   834c6:	4427      	add	r7, r4
   834c8:	e798      	b.n	833fc <__udivdi3+0x1b4>
   834ca:	4603      	mov	r3, r0
   834cc:	e7de      	b.n	8348c <__udivdi3+0x244>
   834ce:	4690      	mov	r8, r2
   834d0:	e7c6      	b.n	83460 <__udivdi3+0x218>
   834d2:	3802      	subs	r0, #2
   834d4:	4421      	add	r1, r4
   834d6:	e735      	b.n	83344 <__udivdi3+0xfc>

000834d8 <__libc_init_array>:
   834d8:	b570      	push	{r4, r5, r6, lr}
   834da:	4e0f      	ldr	r6, [pc, #60]	; (83518 <__libc_init_array+0x40>)
   834dc:	4d0f      	ldr	r5, [pc, #60]	; (8351c <__libc_init_array+0x44>)
   834de:	1b76      	subs	r6, r6, r5
   834e0:	10b6      	asrs	r6, r6, #2
   834e2:	d007      	beq.n	834f4 <__libc_init_array+0x1c>
   834e4:	3d04      	subs	r5, #4
   834e6:	2400      	movs	r4, #0
   834e8:	3401      	adds	r4, #1
   834ea:	f855 3f04 	ldr.w	r3, [r5, #4]!
   834ee:	4798      	blx	r3
   834f0:	42a6      	cmp	r6, r4
   834f2:	d1f9      	bne.n	834e8 <__libc_init_array+0x10>
   834f4:	4e0a      	ldr	r6, [pc, #40]	; (83520 <__libc_init_array+0x48>)
   834f6:	4d0b      	ldr	r5, [pc, #44]	; (83524 <__libc_init_array+0x4c>)
   834f8:	f003 f81e 	bl	86538 <_init>
   834fc:	1b76      	subs	r6, r6, r5
   834fe:	10b6      	asrs	r6, r6, #2
   83500:	d008      	beq.n	83514 <__libc_init_array+0x3c>
   83502:	3d04      	subs	r5, #4
   83504:	2400      	movs	r4, #0
   83506:	3401      	adds	r4, #1
   83508:	f855 3f04 	ldr.w	r3, [r5, #4]!
   8350c:	4798      	blx	r3
   8350e:	42a6      	cmp	r6, r4
   83510:	d1f9      	bne.n	83506 <__libc_init_array+0x2e>
   83512:	bd70      	pop	{r4, r5, r6, pc}
   83514:	bd70      	pop	{r4, r5, r6, pc}
   83516:	bf00      	nop
   83518:	00086544 	.word	0x00086544
   8351c:	00086544 	.word	0x00086544
   83520:	0008654c 	.word	0x0008654c
   83524:	00086544 	.word	0x00086544

00083528 <iprintf>:
   83528:	b40f      	push	{r0, r1, r2, r3}
   8352a:	b510      	push	{r4, lr}
   8352c:	4b07      	ldr	r3, [pc, #28]	; (8354c <iprintf+0x24>)
   8352e:	b082      	sub	sp, #8
   83530:	ac04      	add	r4, sp, #16
   83532:	f854 2b04 	ldr.w	r2, [r4], #4
   83536:	6818      	ldr	r0, [r3, #0]
   83538:	4623      	mov	r3, r4
   8353a:	6881      	ldr	r1, [r0, #8]
   8353c:	9401      	str	r4, [sp, #4]
   8353e:	f000 fa25 	bl	8398c <_vfiprintf_r>
   83542:	b002      	add	sp, #8
   83544:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   83548:	b004      	add	sp, #16
   8354a:	4770      	bx	lr
   8354c:	200705c0 	.word	0x200705c0

00083550 <memcpy>:
   83550:	4684      	mov	ip, r0
   83552:	ea41 0300 	orr.w	r3, r1, r0
   83556:	f013 0303 	ands.w	r3, r3, #3
   8355a:	d149      	bne.n	835f0 <memcpy+0xa0>
   8355c:	3a40      	subs	r2, #64	; 0x40
   8355e:	d323      	bcc.n	835a8 <memcpy+0x58>
   83560:	680b      	ldr	r3, [r1, #0]
   83562:	6003      	str	r3, [r0, #0]
   83564:	684b      	ldr	r3, [r1, #4]
   83566:	6043      	str	r3, [r0, #4]
   83568:	688b      	ldr	r3, [r1, #8]
   8356a:	6083      	str	r3, [r0, #8]
   8356c:	68cb      	ldr	r3, [r1, #12]
   8356e:	60c3      	str	r3, [r0, #12]
   83570:	690b      	ldr	r3, [r1, #16]
   83572:	6103      	str	r3, [r0, #16]
   83574:	694b      	ldr	r3, [r1, #20]
   83576:	6143      	str	r3, [r0, #20]
   83578:	698b      	ldr	r3, [r1, #24]
   8357a:	6183      	str	r3, [r0, #24]
   8357c:	69cb      	ldr	r3, [r1, #28]
   8357e:	61c3      	str	r3, [r0, #28]
   83580:	6a0b      	ldr	r3, [r1, #32]
   83582:	6203      	str	r3, [r0, #32]
   83584:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   83586:	6243      	str	r3, [r0, #36]	; 0x24
   83588:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   8358a:	6283      	str	r3, [r0, #40]	; 0x28
   8358c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   8358e:	62c3      	str	r3, [r0, #44]	; 0x2c
   83590:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   83592:	6303      	str	r3, [r0, #48]	; 0x30
   83594:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   83596:	6343      	str	r3, [r0, #52]	; 0x34
   83598:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   8359a:	6383      	str	r3, [r0, #56]	; 0x38
   8359c:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   8359e:	63c3      	str	r3, [r0, #60]	; 0x3c
   835a0:	3040      	adds	r0, #64	; 0x40
   835a2:	3140      	adds	r1, #64	; 0x40
   835a4:	3a40      	subs	r2, #64	; 0x40
   835a6:	d2db      	bcs.n	83560 <memcpy+0x10>
   835a8:	3230      	adds	r2, #48	; 0x30
   835aa:	d30b      	bcc.n	835c4 <memcpy+0x74>
   835ac:	680b      	ldr	r3, [r1, #0]
   835ae:	6003      	str	r3, [r0, #0]
   835b0:	684b      	ldr	r3, [r1, #4]
   835b2:	6043      	str	r3, [r0, #4]
   835b4:	688b      	ldr	r3, [r1, #8]
   835b6:	6083      	str	r3, [r0, #8]
   835b8:	68cb      	ldr	r3, [r1, #12]
   835ba:	60c3      	str	r3, [r0, #12]
   835bc:	3010      	adds	r0, #16
   835be:	3110      	adds	r1, #16
   835c0:	3a10      	subs	r2, #16
   835c2:	d2f3      	bcs.n	835ac <memcpy+0x5c>
   835c4:	320c      	adds	r2, #12
   835c6:	d305      	bcc.n	835d4 <memcpy+0x84>
   835c8:	f851 3b04 	ldr.w	r3, [r1], #4
   835cc:	f840 3b04 	str.w	r3, [r0], #4
   835d0:	3a04      	subs	r2, #4
   835d2:	d2f9      	bcs.n	835c8 <memcpy+0x78>
   835d4:	3204      	adds	r2, #4
   835d6:	d008      	beq.n	835ea <memcpy+0x9a>
   835d8:	07d2      	lsls	r2, r2, #31
   835da:	bf1c      	itt	ne
   835dc:	f811 3b01 	ldrbne.w	r3, [r1], #1
   835e0:	f800 3b01 	strbne.w	r3, [r0], #1
   835e4:	d301      	bcc.n	835ea <memcpy+0x9a>
   835e6:	880b      	ldrh	r3, [r1, #0]
   835e8:	8003      	strh	r3, [r0, #0]
   835ea:	4660      	mov	r0, ip
   835ec:	4770      	bx	lr
   835ee:	bf00      	nop
   835f0:	2a08      	cmp	r2, #8
   835f2:	d313      	bcc.n	8361c <memcpy+0xcc>
   835f4:	078b      	lsls	r3, r1, #30
   835f6:	d0b1      	beq.n	8355c <memcpy+0xc>
   835f8:	f010 0303 	ands.w	r3, r0, #3
   835fc:	d0ae      	beq.n	8355c <memcpy+0xc>
   835fe:	f1c3 0304 	rsb	r3, r3, #4
   83602:	1ad2      	subs	r2, r2, r3
   83604:	07db      	lsls	r3, r3, #31
   83606:	bf1c      	itt	ne
   83608:	f811 3b01 	ldrbne.w	r3, [r1], #1
   8360c:	f800 3b01 	strbne.w	r3, [r0], #1
   83610:	d3a4      	bcc.n	8355c <memcpy+0xc>
   83612:	f831 3b02 	ldrh.w	r3, [r1], #2
   83616:	f820 3b02 	strh.w	r3, [r0], #2
   8361a:	e79f      	b.n	8355c <memcpy+0xc>
   8361c:	3a04      	subs	r2, #4
   8361e:	d3d9      	bcc.n	835d4 <memcpy+0x84>
   83620:	3a01      	subs	r2, #1
   83622:	f811 3b01 	ldrb.w	r3, [r1], #1
   83626:	f800 3b01 	strb.w	r3, [r0], #1
   8362a:	d2f9      	bcs.n	83620 <memcpy+0xd0>
   8362c:	780b      	ldrb	r3, [r1, #0]
   8362e:	7003      	strb	r3, [r0, #0]
   83630:	784b      	ldrb	r3, [r1, #1]
   83632:	7043      	strb	r3, [r0, #1]
   83634:	788b      	ldrb	r3, [r1, #2]
   83636:	7083      	strb	r3, [r0, #2]
   83638:	4660      	mov	r0, ip
   8363a:	4770      	bx	lr

0008363c <memset>:
   8363c:	b4f0      	push	{r4, r5, r6, r7}
   8363e:	0784      	lsls	r4, r0, #30
   83640:	d043      	beq.n	836ca <memset+0x8e>
   83642:	1e54      	subs	r4, r2, #1
   83644:	2a00      	cmp	r2, #0
   83646:	d03e      	beq.n	836c6 <memset+0x8a>
   83648:	b2cd      	uxtb	r5, r1
   8364a:	4603      	mov	r3, r0
   8364c:	e003      	b.n	83656 <memset+0x1a>
   8364e:	1e62      	subs	r2, r4, #1
   83650:	2c00      	cmp	r4, #0
   83652:	d038      	beq.n	836c6 <memset+0x8a>
   83654:	4614      	mov	r4, r2
   83656:	f803 5b01 	strb.w	r5, [r3], #1
   8365a:	079a      	lsls	r2, r3, #30
   8365c:	d1f7      	bne.n	8364e <memset+0x12>
   8365e:	2c03      	cmp	r4, #3
   83660:	d92a      	bls.n	836b8 <memset+0x7c>
   83662:	b2cd      	uxtb	r5, r1
   83664:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   83668:	2c0f      	cmp	r4, #15
   8366a:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   8366e:	d915      	bls.n	8369c <memset+0x60>
   83670:	f1a4 0710 	sub.w	r7, r4, #16
   83674:	093f      	lsrs	r7, r7, #4
   83676:	f103 0610 	add.w	r6, r3, #16
   8367a:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   8367e:	461a      	mov	r2, r3
   83680:	6015      	str	r5, [r2, #0]
   83682:	6055      	str	r5, [r2, #4]
   83684:	6095      	str	r5, [r2, #8]
   83686:	60d5      	str	r5, [r2, #12]
   83688:	3210      	adds	r2, #16
   8368a:	42b2      	cmp	r2, r6
   8368c:	d1f8      	bne.n	83680 <memset+0x44>
   8368e:	f004 040f 	and.w	r4, r4, #15
   83692:	3701      	adds	r7, #1
   83694:	2c03      	cmp	r4, #3
   83696:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   8369a:	d90d      	bls.n	836b8 <memset+0x7c>
   8369c:	461e      	mov	r6, r3
   8369e:	4622      	mov	r2, r4
   836a0:	3a04      	subs	r2, #4
   836a2:	2a03      	cmp	r2, #3
   836a4:	f846 5b04 	str.w	r5, [r6], #4
   836a8:	d8fa      	bhi.n	836a0 <memset+0x64>
   836aa:	1f22      	subs	r2, r4, #4
   836ac:	f022 0203 	bic.w	r2, r2, #3
   836b0:	3204      	adds	r2, #4
   836b2:	4413      	add	r3, r2
   836b4:	f004 0403 	and.w	r4, r4, #3
   836b8:	b12c      	cbz	r4, 836c6 <memset+0x8a>
   836ba:	b2c9      	uxtb	r1, r1
   836bc:	441c      	add	r4, r3
   836be:	f803 1b01 	strb.w	r1, [r3], #1
   836c2:	42a3      	cmp	r3, r4
   836c4:	d1fb      	bne.n	836be <memset+0x82>
   836c6:	bcf0      	pop	{r4, r5, r6, r7}
   836c8:	4770      	bx	lr
   836ca:	4614      	mov	r4, r2
   836cc:	4603      	mov	r3, r0
   836ce:	e7c6      	b.n	8365e <memset+0x22>

000836d0 <_puts_r>:
   836d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   836d2:	4604      	mov	r4, r0
   836d4:	b089      	sub	sp, #36	; 0x24
   836d6:	4608      	mov	r0, r1
   836d8:	460d      	mov	r5, r1
   836da:	f000 f8b9 	bl	83850 <strlen>
   836de:	68a3      	ldr	r3, [r4, #8]
   836e0:	2102      	movs	r1, #2
   836e2:	899a      	ldrh	r2, [r3, #12]
   836e4:	f8df e044 	ldr.w	lr, [pc, #68]	; 8372c <_puts_r+0x5c>
   836e8:	f100 0c01 	add.w	ip, r0, #1
   836ec:	2701      	movs	r7, #1
   836ee:	ae04      	add	r6, sp, #16
   836f0:	9102      	str	r1, [sp, #8]
   836f2:	0491      	lsls	r1, r2, #18
   836f4:	9504      	str	r5, [sp, #16]
   836f6:	9005      	str	r0, [sp, #20]
   836f8:	f8cd c00c 	str.w	ip, [sp, #12]
   836fc:	f8cd e018 	str.w	lr, [sp, #24]
   83700:	9707      	str	r7, [sp, #28]
   83702:	9601      	str	r6, [sp, #4]
   83704:	d406      	bmi.n	83714 <_puts_r+0x44>
   83706:	6e59      	ldr	r1, [r3, #100]	; 0x64
   83708:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   8370c:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   83710:	819a      	strh	r2, [r3, #12]
   83712:	6659      	str	r1, [r3, #100]	; 0x64
   83714:	4620      	mov	r0, r4
   83716:	4619      	mov	r1, r3
   83718:	aa01      	add	r2, sp, #4
   8371a:	f001 fae1 	bl	84ce0 <__sfvwrite_r>
   8371e:	2800      	cmp	r0, #0
   83720:	bf0c      	ite	eq
   83722:	200a      	moveq	r0, #10
   83724:	f04f 30ff 	movne.w	r0, #4294967295
   83728:	b009      	add	sp, #36	; 0x24
   8372a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8372c:	000861ac 	.word	0x000861ac

00083730 <puts>:
   83730:	4b02      	ldr	r3, [pc, #8]	; (8373c <puts+0xc>)
   83732:	4601      	mov	r1, r0
   83734:	6818      	ldr	r0, [r3, #0]
   83736:	f7ff bfcb 	b.w	836d0 <_puts_r>
   8373a:	bf00      	nop
   8373c:	200705c0 	.word	0x200705c0

00083740 <setbuf>:
   83740:	2900      	cmp	r1, #0
   83742:	bf0c      	ite	eq
   83744:	2202      	moveq	r2, #2
   83746:	2200      	movne	r2, #0
   83748:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8374c:	f000 b800 	b.w	83750 <setvbuf>

00083750 <setvbuf>:
   83750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83754:	4d3c      	ldr	r5, [pc, #240]	; (83848 <setvbuf+0xf8>)
   83756:	4604      	mov	r4, r0
   83758:	682d      	ldr	r5, [r5, #0]
   8375a:	4688      	mov	r8, r1
   8375c:	4616      	mov	r6, r2
   8375e:	461f      	mov	r7, r3
   83760:	b115      	cbz	r5, 83768 <setvbuf+0x18>
   83762:	6bab      	ldr	r3, [r5, #56]	; 0x38
   83764:	2b00      	cmp	r3, #0
   83766:	d04f      	beq.n	83808 <setvbuf+0xb8>
   83768:	2e02      	cmp	r6, #2
   8376a:	d830      	bhi.n	837ce <setvbuf+0x7e>
   8376c:	2f00      	cmp	r7, #0
   8376e:	db2e      	blt.n	837ce <setvbuf+0x7e>
   83770:	4628      	mov	r0, r5
   83772:	4621      	mov	r1, r4
   83774:	f001 f888 	bl	84888 <_fflush_r>
   83778:	89a3      	ldrh	r3, [r4, #12]
   8377a:	2200      	movs	r2, #0
   8377c:	6062      	str	r2, [r4, #4]
   8377e:	61a2      	str	r2, [r4, #24]
   83780:	061a      	lsls	r2, r3, #24
   83782:	d428      	bmi.n	837d6 <setvbuf+0x86>
   83784:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   83788:	b29b      	uxth	r3, r3
   8378a:	2e02      	cmp	r6, #2
   8378c:	81a3      	strh	r3, [r4, #12]
   8378e:	d02d      	beq.n	837ec <setvbuf+0x9c>
   83790:	f1b8 0f00 	cmp.w	r8, #0
   83794:	d03c      	beq.n	83810 <setvbuf+0xc0>
   83796:	2e01      	cmp	r6, #1
   83798:	d013      	beq.n	837c2 <setvbuf+0x72>
   8379a:	b29b      	uxth	r3, r3
   8379c:	f003 0008 	and.w	r0, r3, #8
   837a0:	4a2a      	ldr	r2, [pc, #168]	; (8384c <setvbuf+0xfc>)
   837a2:	b280      	uxth	r0, r0
   837a4:	63ea      	str	r2, [r5, #60]	; 0x3c
   837a6:	f8c4 8000 	str.w	r8, [r4]
   837aa:	f8c4 8010 	str.w	r8, [r4, #16]
   837ae:	6167      	str	r7, [r4, #20]
   837b0:	b178      	cbz	r0, 837d2 <setvbuf+0x82>
   837b2:	f013 0f03 	tst.w	r3, #3
   837b6:	bf18      	it	ne
   837b8:	2700      	movne	r7, #0
   837ba:	60a7      	str	r7, [r4, #8]
   837bc:	2000      	movs	r0, #0
   837be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   837c2:	f043 0301 	orr.w	r3, r3, #1
   837c6:	427a      	negs	r2, r7
   837c8:	81a3      	strh	r3, [r4, #12]
   837ca:	61a2      	str	r2, [r4, #24]
   837cc:	e7e5      	b.n	8379a <setvbuf+0x4a>
   837ce:	f04f 30ff 	mov.w	r0, #4294967295
   837d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   837d6:	4628      	mov	r0, r5
   837d8:	6921      	ldr	r1, [r4, #16]
   837da:	f001 f9b5 	bl	84b48 <_free_r>
   837de:	89a3      	ldrh	r3, [r4, #12]
   837e0:	2e02      	cmp	r6, #2
   837e2:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   837e6:	b29b      	uxth	r3, r3
   837e8:	81a3      	strh	r3, [r4, #12]
   837ea:	d1d1      	bne.n	83790 <setvbuf+0x40>
   837ec:	2000      	movs	r0, #0
   837ee:	f104 0243 	add.w	r2, r4, #67	; 0x43
   837f2:	f043 0302 	orr.w	r3, r3, #2
   837f6:	2500      	movs	r5, #0
   837f8:	2101      	movs	r1, #1
   837fa:	81a3      	strh	r3, [r4, #12]
   837fc:	60a5      	str	r5, [r4, #8]
   837fe:	6022      	str	r2, [r4, #0]
   83800:	6122      	str	r2, [r4, #16]
   83802:	6161      	str	r1, [r4, #20]
   83804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83808:	4628      	mov	r0, r5
   8380a:	f001 f859 	bl	848c0 <__sinit>
   8380e:	e7ab      	b.n	83768 <setvbuf+0x18>
   83810:	2f00      	cmp	r7, #0
   83812:	bf08      	it	eq
   83814:	f44f 6780 	moveq.w	r7, #1024	; 0x400
   83818:	4638      	mov	r0, r7
   8381a:	f001 fc8b 	bl	85134 <malloc>
   8381e:	4680      	mov	r8, r0
   83820:	b128      	cbz	r0, 8382e <setvbuf+0xde>
   83822:	89a3      	ldrh	r3, [r4, #12]
   83824:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   83828:	b29b      	uxth	r3, r3
   8382a:	81a3      	strh	r3, [r4, #12]
   8382c:	e7b3      	b.n	83796 <setvbuf+0x46>
   8382e:	f44f 6080 	mov.w	r0, #1024	; 0x400
   83832:	f001 fc7f 	bl	85134 <malloc>
   83836:	4680      	mov	r8, r0
   83838:	b918      	cbnz	r0, 83842 <setvbuf+0xf2>
   8383a:	89a3      	ldrh	r3, [r4, #12]
   8383c:	f04f 30ff 	mov.w	r0, #4294967295
   83840:	e7d5      	b.n	837ee <setvbuf+0x9e>
   83842:	f44f 6780 	mov.w	r7, #1024	; 0x400
   83846:	e7ec      	b.n	83822 <setvbuf+0xd2>
   83848:	200705c0 	.word	0x200705c0
   8384c:	000848b5 	.word	0x000848b5

00083850 <strlen>:
   83850:	f020 0103 	bic.w	r1, r0, #3
   83854:	f010 0003 	ands.w	r0, r0, #3
   83858:	f1c0 0000 	rsb	r0, r0, #0
   8385c:	f851 3b04 	ldr.w	r3, [r1], #4
   83860:	f100 0c04 	add.w	ip, r0, #4
   83864:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   83868:	f06f 0200 	mvn.w	r2, #0
   8386c:	bf1c      	itt	ne
   8386e:	fa22 f20c 	lsrne.w	r2, r2, ip
   83872:	4313      	orrne	r3, r2
   83874:	f04f 0c01 	mov.w	ip, #1
   83878:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   8387c:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   83880:	eba3 020c 	sub.w	r2, r3, ip
   83884:	ea22 0203 	bic.w	r2, r2, r3
   83888:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   8388c:	bf04      	itt	eq
   8388e:	f851 3b04 	ldreq.w	r3, [r1], #4
   83892:	3004      	addeq	r0, #4
   83894:	d0f4      	beq.n	83880 <strlen+0x30>
   83896:	f013 0fff 	tst.w	r3, #255	; 0xff
   8389a:	bf1f      	itttt	ne
   8389c:	3001      	addne	r0, #1
   8389e:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
   838a2:	3001      	addne	r0, #1
   838a4:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
   838a8:	bf18      	it	ne
   838aa:	3001      	addne	r0, #1
   838ac:	4770      	bx	lr
   838ae:	bf00      	nop

000838b0 <strncpy>:
   838b0:	ea40 0301 	orr.w	r3, r0, r1
   838b4:	079b      	lsls	r3, r3, #30
   838b6:	b470      	push	{r4, r5, r6}
   838b8:	d12a      	bne.n	83910 <strncpy+0x60>
   838ba:	2a03      	cmp	r2, #3
   838bc:	d928      	bls.n	83910 <strncpy+0x60>
   838be:	460c      	mov	r4, r1
   838c0:	4603      	mov	r3, r0
   838c2:	4621      	mov	r1, r4
   838c4:	f854 5b04 	ldr.w	r5, [r4], #4
   838c8:	f1a5 3601 	sub.w	r6, r5, #16843009	; 0x1010101
   838cc:	ea26 0605 	bic.w	r6, r6, r5
   838d0:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
   838d4:	d105      	bne.n	838e2 <strncpy+0x32>
   838d6:	3a04      	subs	r2, #4
   838d8:	2a03      	cmp	r2, #3
   838da:	f843 5b04 	str.w	r5, [r3], #4
   838de:	4621      	mov	r1, r4
   838e0:	d8ef      	bhi.n	838c2 <strncpy+0x12>
   838e2:	b19a      	cbz	r2, 8390c <strncpy+0x5c>
   838e4:	780c      	ldrb	r4, [r1, #0]
   838e6:	3a01      	subs	r2, #1
   838e8:	701c      	strb	r4, [r3, #0]
   838ea:	3301      	adds	r3, #1
   838ec:	b13c      	cbz	r4, 838fe <strncpy+0x4e>
   838ee:	b16a      	cbz	r2, 8390c <strncpy+0x5c>
   838f0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   838f4:	3a01      	subs	r2, #1
   838f6:	f803 4b01 	strb.w	r4, [r3], #1
   838fa:	2c00      	cmp	r4, #0
   838fc:	d1f7      	bne.n	838ee <strncpy+0x3e>
   838fe:	b12a      	cbz	r2, 8390c <strncpy+0x5c>
   83900:	441a      	add	r2, r3
   83902:	2100      	movs	r1, #0
   83904:	f803 1b01 	strb.w	r1, [r3], #1
   83908:	4293      	cmp	r3, r2
   8390a:	d1fb      	bne.n	83904 <strncpy+0x54>
   8390c:	bc70      	pop	{r4, r5, r6}
   8390e:	4770      	bx	lr
   83910:	4603      	mov	r3, r0
   83912:	e7e6      	b.n	838e2 <strncpy+0x32>

00083914 <__sprint_r.part.0>:
   83914:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   83916:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8391a:	049c      	lsls	r4, r3, #18
   8391c:	460e      	mov	r6, r1
   8391e:	4680      	mov	r8, r0
   83920:	4691      	mov	r9, r2
   83922:	d52a      	bpl.n	8397a <__sprint_r.part.0+0x66>
   83924:	6893      	ldr	r3, [r2, #8]
   83926:	6812      	ldr	r2, [r2, #0]
   83928:	f102 0a08 	add.w	sl, r2, #8
   8392c:	b31b      	cbz	r3, 83976 <__sprint_r.part.0+0x62>
   8392e:	e91a 00a0 	ldmdb	sl, {r5, r7}
   83932:	08bf      	lsrs	r7, r7, #2
   83934:	d017      	beq.n	83966 <__sprint_r.part.0+0x52>
   83936:	3d04      	subs	r5, #4
   83938:	2400      	movs	r4, #0
   8393a:	e001      	b.n	83940 <__sprint_r.part.0+0x2c>
   8393c:	42a7      	cmp	r7, r4
   8393e:	d010      	beq.n	83962 <__sprint_r.part.0+0x4e>
   83940:	4640      	mov	r0, r8
   83942:	f855 1f04 	ldr.w	r1, [r5, #4]!
   83946:	4632      	mov	r2, r6
   83948:	f001 f850 	bl	849ec <_fputwc_r>
   8394c:	1c43      	adds	r3, r0, #1
   8394e:	f104 0401 	add.w	r4, r4, #1
   83952:	d1f3      	bne.n	8393c <__sprint_r.part.0+0x28>
   83954:	2300      	movs	r3, #0
   83956:	f8c9 3008 	str.w	r3, [r9, #8]
   8395a:	f8c9 3004 	str.w	r3, [r9, #4]
   8395e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   83962:	f8d9 3008 	ldr.w	r3, [r9, #8]
   83966:	eba3 0387 	sub.w	r3, r3, r7, lsl #2
   8396a:	f8c9 3008 	str.w	r3, [r9, #8]
   8396e:	f10a 0a08 	add.w	sl, sl, #8
   83972:	2b00      	cmp	r3, #0
   83974:	d1db      	bne.n	8392e <__sprint_r.part.0+0x1a>
   83976:	2000      	movs	r0, #0
   83978:	e7ec      	b.n	83954 <__sprint_r.part.0+0x40>
   8397a:	f001 f9b1 	bl	84ce0 <__sfvwrite_r>
   8397e:	2300      	movs	r3, #0
   83980:	f8c9 3008 	str.w	r3, [r9, #8]
   83984:	f8c9 3004 	str.w	r3, [r9, #4]
   83988:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0008398c <_vfiprintf_r>:
   8398c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83990:	b0b1      	sub	sp, #196	; 0xc4
   83992:	461c      	mov	r4, r3
   83994:	9102      	str	r1, [sp, #8]
   83996:	4690      	mov	r8, r2
   83998:	9308      	str	r3, [sp, #32]
   8399a:	9006      	str	r0, [sp, #24]
   8399c:	b118      	cbz	r0, 839a6 <_vfiprintf_r+0x1a>
   8399e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   839a0:	2b00      	cmp	r3, #0
   839a2:	f000 80e8 	beq.w	83b76 <_vfiprintf_r+0x1ea>
   839a6:	9d02      	ldr	r5, [sp, #8]
   839a8:	89ab      	ldrh	r3, [r5, #12]
   839aa:	b29a      	uxth	r2, r3
   839ac:	0490      	lsls	r0, r2, #18
   839ae:	d407      	bmi.n	839c0 <_vfiprintf_r+0x34>
   839b0:	6e6a      	ldr	r2, [r5, #100]	; 0x64
   839b2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   839b6:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
   839ba:	81ab      	strh	r3, [r5, #12]
   839bc:	b29a      	uxth	r2, r3
   839be:	6669      	str	r1, [r5, #100]	; 0x64
   839c0:	0711      	lsls	r1, r2, #28
   839c2:	f140 80b7 	bpl.w	83b34 <_vfiprintf_r+0x1a8>
   839c6:	f8dd b008 	ldr.w	fp, [sp, #8]
   839ca:	f8db 3010 	ldr.w	r3, [fp, #16]
   839ce:	2b00      	cmp	r3, #0
   839d0:	f000 80b0 	beq.w	83b34 <_vfiprintf_r+0x1a8>
   839d4:	f002 021a 	and.w	r2, r2, #26
   839d8:	2a0a      	cmp	r2, #10
   839da:	f000 80b7 	beq.w	83b4c <_vfiprintf_r+0x1c0>
   839de:	2300      	movs	r3, #0
   839e0:	f10d 0980 	add.w	r9, sp, #128	; 0x80
   839e4:	930a      	str	r3, [sp, #40]	; 0x28
   839e6:	9315      	str	r3, [sp, #84]	; 0x54
   839e8:	9314      	str	r3, [sp, #80]	; 0x50
   839ea:	9309      	str	r3, [sp, #36]	; 0x24
   839ec:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
   839f0:	464e      	mov	r6, r9
   839f2:	f898 3000 	ldrb.w	r3, [r8]
   839f6:	2b00      	cmp	r3, #0
   839f8:	f000 84c8 	beq.w	8438c <_vfiprintf_r+0xa00>
   839fc:	2b25      	cmp	r3, #37	; 0x25
   839fe:	f000 84c5 	beq.w	8438c <_vfiprintf_r+0xa00>
   83a02:	f108 0201 	add.w	r2, r8, #1
   83a06:	e001      	b.n	83a0c <_vfiprintf_r+0x80>
   83a08:	2b25      	cmp	r3, #37	; 0x25
   83a0a:	d004      	beq.n	83a16 <_vfiprintf_r+0x8a>
   83a0c:	7813      	ldrb	r3, [r2, #0]
   83a0e:	4614      	mov	r4, r2
   83a10:	3201      	adds	r2, #1
   83a12:	2b00      	cmp	r3, #0
   83a14:	d1f8      	bne.n	83a08 <_vfiprintf_r+0x7c>
   83a16:	ebc8 0504 	rsb	r5, r8, r4
   83a1a:	b195      	cbz	r5, 83a42 <_vfiprintf_r+0xb6>
   83a1c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   83a1e:	9a15      	ldr	r2, [sp, #84]	; 0x54
   83a20:	3301      	adds	r3, #1
   83a22:	442a      	add	r2, r5
   83a24:	2b07      	cmp	r3, #7
   83a26:	f8c6 8000 	str.w	r8, [r6]
   83a2a:	6075      	str	r5, [r6, #4]
   83a2c:	9215      	str	r2, [sp, #84]	; 0x54
   83a2e:	9314      	str	r3, [sp, #80]	; 0x50
   83a30:	dd7b      	ble.n	83b2a <_vfiprintf_r+0x19e>
   83a32:	2a00      	cmp	r2, #0
   83a34:	f040 84d5 	bne.w	843e2 <_vfiprintf_r+0xa56>
   83a38:	9809      	ldr	r0, [sp, #36]	; 0x24
   83a3a:	9214      	str	r2, [sp, #80]	; 0x50
   83a3c:	4428      	add	r0, r5
   83a3e:	464e      	mov	r6, r9
   83a40:	9009      	str	r0, [sp, #36]	; 0x24
   83a42:	7823      	ldrb	r3, [r4, #0]
   83a44:	2b00      	cmp	r3, #0
   83a46:	f000 83ed 	beq.w	84224 <_vfiprintf_r+0x898>
   83a4a:	2100      	movs	r1, #0
   83a4c:	f04f 0200 	mov.w	r2, #0
   83a50:	f04f 3cff 	mov.w	ip, #4294967295
   83a54:	7863      	ldrb	r3, [r4, #1]
   83a56:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
   83a5a:	9104      	str	r1, [sp, #16]
   83a5c:	468a      	mov	sl, r1
   83a5e:	f104 0801 	add.w	r8, r4, #1
   83a62:	4608      	mov	r0, r1
   83a64:	4665      	mov	r5, ip
   83a66:	f108 0801 	add.w	r8, r8, #1
   83a6a:	f1a3 0220 	sub.w	r2, r3, #32
   83a6e:	2a58      	cmp	r2, #88	; 0x58
   83a70:	f200 82d9 	bhi.w	84026 <_vfiprintf_r+0x69a>
   83a74:	e8df f012 	tbh	[pc, r2, lsl #1]
   83a78:	02d702cb 	.word	0x02d702cb
   83a7c:	02d202d7 	.word	0x02d202d7
   83a80:	02d702d7 	.word	0x02d702d7
   83a84:	02d702d7 	.word	0x02d702d7
   83a88:	02d702d7 	.word	0x02d702d7
   83a8c:	028f0282 	.word	0x028f0282
   83a90:	008402d7 	.word	0x008402d7
   83a94:	02d70293 	.word	0x02d70293
   83a98:	0196012b 	.word	0x0196012b
   83a9c:	01960196 	.word	0x01960196
   83aa0:	01960196 	.word	0x01960196
   83aa4:	01960196 	.word	0x01960196
   83aa8:	01960196 	.word	0x01960196
   83aac:	02d702d7 	.word	0x02d702d7
   83ab0:	02d702d7 	.word	0x02d702d7
   83ab4:	02d702d7 	.word	0x02d702d7
   83ab8:	02d702d7 	.word	0x02d702d7
   83abc:	02d702d7 	.word	0x02d702d7
   83ac0:	02d70130 	.word	0x02d70130
   83ac4:	02d702d7 	.word	0x02d702d7
   83ac8:	02d702d7 	.word	0x02d702d7
   83acc:	02d702d7 	.word	0x02d702d7
   83ad0:	02d702d7 	.word	0x02d702d7
   83ad4:	017b02d7 	.word	0x017b02d7
   83ad8:	02d702d7 	.word	0x02d702d7
   83adc:	02d702d7 	.word	0x02d702d7
   83ae0:	01a402d7 	.word	0x01a402d7
   83ae4:	02d702d7 	.word	0x02d702d7
   83ae8:	02d701bf 	.word	0x02d701bf
   83aec:	02d702d7 	.word	0x02d702d7
   83af0:	02d702d7 	.word	0x02d702d7
   83af4:	02d702d7 	.word	0x02d702d7
   83af8:	02d702d7 	.word	0x02d702d7
   83afc:	01e402d7 	.word	0x01e402d7
   83b00:	02d701fa 	.word	0x02d701fa
   83b04:	02d702d7 	.word	0x02d702d7
   83b08:	01fa0216 	.word	0x01fa0216
   83b0c:	02d702d7 	.word	0x02d702d7
   83b10:	02d7021b 	.word	0x02d7021b
   83b14:	00890228 	.word	0x00890228
   83b18:	027d0266 	.word	0x027d0266
   83b1c:	023a02d7 	.word	0x023a02d7
   83b20:	011902d7 	.word	0x011902d7
   83b24:	02d702d7 	.word	0x02d702d7
   83b28:	02af      	.short	0x02af
   83b2a:	3608      	adds	r6, #8
   83b2c:	9809      	ldr	r0, [sp, #36]	; 0x24
   83b2e:	4428      	add	r0, r5
   83b30:	9009      	str	r0, [sp, #36]	; 0x24
   83b32:	e786      	b.n	83a42 <_vfiprintf_r+0xb6>
   83b34:	9806      	ldr	r0, [sp, #24]
   83b36:	9902      	ldr	r1, [sp, #8]
   83b38:	f000 fd90 	bl	8465c <__swsetup_r>
   83b3c:	b9b0      	cbnz	r0, 83b6c <_vfiprintf_r+0x1e0>
   83b3e:	9d02      	ldr	r5, [sp, #8]
   83b40:	89aa      	ldrh	r2, [r5, #12]
   83b42:	f002 021a 	and.w	r2, r2, #26
   83b46:	2a0a      	cmp	r2, #10
   83b48:	f47f af49 	bne.w	839de <_vfiprintf_r+0x52>
   83b4c:	f8dd b008 	ldr.w	fp, [sp, #8]
   83b50:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
   83b54:	2b00      	cmp	r3, #0
   83b56:	f6ff af42 	blt.w	839de <_vfiprintf_r+0x52>
   83b5a:	9806      	ldr	r0, [sp, #24]
   83b5c:	4659      	mov	r1, fp
   83b5e:	4642      	mov	r2, r8
   83b60:	4623      	mov	r3, r4
   83b62:	f000 fd3d 	bl	845e0 <__sbprintf>
   83b66:	b031      	add	sp, #196	; 0xc4
   83b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83b6c:	f04f 30ff 	mov.w	r0, #4294967295
   83b70:	b031      	add	sp, #196	; 0xc4
   83b72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83b76:	f000 fea3 	bl	848c0 <__sinit>
   83b7a:	e714      	b.n	839a6 <_vfiprintf_r+0x1a>
   83b7c:	4240      	negs	r0, r0
   83b7e:	9308      	str	r3, [sp, #32]
   83b80:	f04a 0a04 	orr.w	sl, sl, #4
   83b84:	f898 3000 	ldrb.w	r3, [r8]
   83b88:	e76d      	b.n	83a66 <_vfiprintf_r+0xda>
   83b8a:	f01a 0320 	ands.w	r3, sl, #32
   83b8e:	9004      	str	r0, [sp, #16]
   83b90:	46ac      	mov	ip, r5
   83b92:	f000 80f4 	beq.w	83d7e <_vfiprintf_r+0x3f2>
   83b96:	f8dd b020 	ldr.w	fp, [sp, #32]
   83b9a:	f10b 0307 	add.w	r3, fp, #7
   83b9e:	f023 0307 	bic.w	r3, r3, #7
   83ba2:	f103 0408 	add.w	r4, r3, #8
   83ba6:	9408      	str	r4, [sp, #32]
   83ba8:	e9d3 4500 	ldrd	r4, r5, [r3]
   83bac:	2300      	movs	r3, #0
   83bae:	f04f 0000 	mov.w	r0, #0
   83bb2:	2100      	movs	r1, #0
   83bb4:	f88d 0047 	strb.w	r0, [sp, #71]	; 0x47
   83bb8:	f8cd c014 	str.w	ip, [sp, #20]
   83bbc:	9107      	str	r1, [sp, #28]
   83bbe:	f1bc 0f00 	cmp.w	ip, #0
   83bc2:	bfa8      	it	ge
   83bc4:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
   83bc8:	ea54 0205 	orrs.w	r2, r4, r5
   83bcc:	f040 80ad 	bne.w	83d2a <_vfiprintf_r+0x39e>
   83bd0:	f1bc 0f00 	cmp.w	ip, #0
   83bd4:	f040 80a9 	bne.w	83d2a <_vfiprintf_r+0x39e>
   83bd8:	2b00      	cmp	r3, #0
   83bda:	f040 83c0 	bne.w	8435e <_vfiprintf_r+0x9d2>
   83bde:	f01a 0f01 	tst.w	sl, #1
   83be2:	f000 83bc 	beq.w	8435e <_vfiprintf_r+0x9d2>
   83be6:	2330      	movs	r3, #48	; 0x30
   83be8:	af30      	add	r7, sp, #192	; 0xc0
   83bea:	f807 3d41 	strb.w	r3, [r7, #-65]!
   83bee:	ebc7 0409 	rsb	r4, r7, r9
   83bf2:	9405      	str	r4, [sp, #20]
   83bf4:	f8dd b014 	ldr.w	fp, [sp, #20]
   83bf8:	9c07      	ldr	r4, [sp, #28]
   83bfa:	45e3      	cmp	fp, ip
   83bfc:	bfb8      	it	lt
   83bfe:	46e3      	movlt	fp, ip
   83c00:	f8cd b00c 	str.w	fp, [sp, #12]
   83c04:	b11c      	cbz	r4, 83c0e <_vfiprintf_r+0x282>
   83c06:	f10b 0b01 	add.w	fp, fp, #1
   83c0a:	f8cd b00c 	str.w	fp, [sp, #12]
   83c0e:	f01a 0502 	ands.w	r5, sl, #2
   83c12:	9507      	str	r5, [sp, #28]
   83c14:	d005      	beq.n	83c22 <_vfiprintf_r+0x296>
   83c16:	f8dd b00c 	ldr.w	fp, [sp, #12]
   83c1a:	f10b 0b02 	add.w	fp, fp, #2
   83c1e:	f8cd b00c 	str.w	fp, [sp, #12]
   83c22:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
   83c26:	930b      	str	r3, [sp, #44]	; 0x2c
   83c28:	f040 821b 	bne.w	84062 <_vfiprintf_r+0x6d6>
   83c2c:	9d04      	ldr	r5, [sp, #16]
   83c2e:	f8dd b00c 	ldr.w	fp, [sp, #12]
   83c32:	ebcb 0405 	rsb	r4, fp, r5
   83c36:	2c00      	cmp	r4, #0
   83c38:	f340 8213 	ble.w	84062 <_vfiprintf_r+0x6d6>
   83c3c:	2c10      	cmp	r4, #16
   83c3e:	f340 8489 	ble.w	84554 <_vfiprintf_r+0xbc8>
   83c42:	4dbe      	ldr	r5, [pc, #760]	; (83f3c <_vfiprintf_r+0x5b0>)
   83c44:	9a15      	ldr	r2, [sp, #84]	; 0x54
   83c46:	462b      	mov	r3, r5
   83c48:	9814      	ldr	r0, [sp, #80]	; 0x50
   83c4a:	4625      	mov	r5, r4
   83c4c:	f04f 0b10 	mov.w	fp, #16
   83c50:	4664      	mov	r4, ip
   83c52:	46b4      	mov	ip, r6
   83c54:	461e      	mov	r6, r3
   83c56:	e006      	b.n	83c66 <_vfiprintf_r+0x2da>
   83c58:	1c83      	adds	r3, r0, #2
   83c5a:	f10c 0c08 	add.w	ip, ip, #8
   83c5e:	4608      	mov	r0, r1
   83c60:	3d10      	subs	r5, #16
   83c62:	2d10      	cmp	r5, #16
   83c64:	dd11      	ble.n	83c8a <_vfiprintf_r+0x2fe>
   83c66:	1c41      	adds	r1, r0, #1
   83c68:	3210      	adds	r2, #16
   83c6a:	2907      	cmp	r1, #7
   83c6c:	9215      	str	r2, [sp, #84]	; 0x54
   83c6e:	e88c 0840 	stmia.w	ip, {r6, fp}
   83c72:	9114      	str	r1, [sp, #80]	; 0x50
   83c74:	ddf0      	ble.n	83c58 <_vfiprintf_r+0x2cc>
   83c76:	2a00      	cmp	r2, #0
   83c78:	f040 81e6 	bne.w	84048 <_vfiprintf_r+0x6bc>
   83c7c:	3d10      	subs	r5, #16
   83c7e:	2d10      	cmp	r5, #16
   83c80:	f04f 0301 	mov.w	r3, #1
   83c84:	4610      	mov	r0, r2
   83c86:	46cc      	mov	ip, r9
   83c88:	dced      	bgt.n	83c66 <_vfiprintf_r+0x2da>
   83c8a:	4631      	mov	r1, r6
   83c8c:	4666      	mov	r6, ip
   83c8e:	46a4      	mov	ip, r4
   83c90:	462c      	mov	r4, r5
   83c92:	460d      	mov	r5, r1
   83c94:	4422      	add	r2, r4
   83c96:	2b07      	cmp	r3, #7
   83c98:	9215      	str	r2, [sp, #84]	; 0x54
   83c9a:	6035      	str	r5, [r6, #0]
   83c9c:	6074      	str	r4, [r6, #4]
   83c9e:	9314      	str	r3, [sp, #80]	; 0x50
   83ca0:	f300 836d 	bgt.w	8437e <_vfiprintf_r+0x9f2>
   83ca4:	3608      	adds	r6, #8
   83ca6:	1c59      	adds	r1, r3, #1
   83ca8:	e1de      	b.n	84068 <_vfiprintf_r+0x6dc>
   83caa:	f01a 0f20 	tst.w	sl, #32
   83cae:	9004      	str	r0, [sp, #16]
   83cb0:	46ac      	mov	ip, r5
   83cb2:	f000 808d 	beq.w	83dd0 <_vfiprintf_r+0x444>
   83cb6:	9d08      	ldr	r5, [sp, #32]
   83cb8:	1deb      	adds	r3, r5, #7
   83cba:	f023 0307 	bic.w	r3, r3, #7
   83cbe:	f103 0b08 	add.w	fp, r3, #8
   83cc2:	e9d3 4500 	ldrd	r4, r5, [r3]
   83cc6:	f8cd b020 	str.w	fp, [sp, #32]
   83cca:	2301      	movs	r3, #1
   83ccc:	e76f      	b.n	83bae <_vfiprintf_r+0x222>
   83cce:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
   83cd2:	f898 3000 	ldrb.w	r3, [r8]
   83cd6:	e6c6      	b.n	83a66 <_vfiprintf_r+0xda>
   83cd8:	f04a 0a10 	orr.w	sl, sl, #16
   83cdc:	f01a 0f20 	tst.w	sl, #32
   83ce0:	9004      	str	r0, [sp, #16]
   83ce2:	46ac      	mov	ip, r5
   83ce4:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   83ce8:	f000 80c8 	beq.w	83e7c <_vfiprintf_r+0x4f0>
   83cec:	9c08      	ldr	r4, [sp, #32]
   83cee:	1de1      	adds	r1, r4, #7
   83cf0:	f021 0107 	bic.w	r1, r1, #7
   83cf4:	e9d1 2300 	ldrd	r2, r3, [r1]
   83cf8:	3108      	adds	r1, #8
   83cfa:	9108      	str	r1, [sp, #32]
   83cfc:	4614      	mov	r4, r2
   83cfe:	461d      	mov	r5, r3
   83d00:	2a00      	cmp	r2, #0
   83d02:	f173 0b00 	sbcs.w	fp, r3, #0
   83d06:	f2c0 83ce 	blt.w	844a6 <_vfiprintf_r+0xb1a>
   83d0a:	f1bc 0f00 	cmp.w	ip, #0
   83d0e:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
   83d12:	bfa8      	it	ge
   83d14:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
   83d18:	ea54 0205 	orrs.w	r2, r4, r5
   83d1c:	9007      	str	r0, [sp, #28]
   83d1e:	f8cd c014 	str.w	ip, [sp, #20]
   83d22:	f04f 0301 	mov.w	r3, #1
   83d26:	f43f af53 	beq.w	83bd0 <_vfiprintf_r+0x244>
   83d2a:	2b01      	cmp	r3, #1
   83d2c:	f000 8319 	beq.w	84362 <_vfiprintf_r+0x9d6>
   83d30:	2b02      	cmp	r3, #2
   83d32:	f10d 037f 	add.w	r3, sp, #127	; 0x7f
   83d36:	f040 824c 	bne.w	841d2 <_vfiprintf_r+0x846>
   83d3a:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   83d3e:	4619      	mov	r1, r3
   83d40:	f004 000f 	and.w	r0, r4, #15
   83d44:	0922      	lsrs	r2, r4, #4
   83d46:	f81b 0000 	ldrb.w	r0, [fp, r0]
   83d4a:	ea42 7205 	orr.w	r2, r2, r5, lsl #28
   83d4e:	092b      	lsrs	r3, r5, #4
   83d50:	7008      	strb	r0, [r1, #0]
   83d52:	ea52 0003 	orrs.w	r0, r2, r3
   83d56:	460f      	mov	r7, r1
   83d58:	4614      	mov	r4, r2
   83d5a:	461d      	mov	r5, r3
   83d5c:	f101 31ff 	add.w	r1, r1, #4294967295
   83d60:	d1ee      	bne.n	83d40 <_vfiprintf_r+0x3b4>
   83d62:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   83d66:	ebc7 0309 	rsb	r3, r7, r9
   83d6a:	9305      	str	r3, [sp, #20]
   83d6c:	e742      	b.n	83bf4 <_vfiprintf_r+0x268>
   83d6e:	f04a 0a10 	orr.w	sl, sl, #16
   83d72:	f01a 0320 	ands.w	r3, sl, #32
   83d76:	9004      	str	r0, [sp, #16]
   83d78:	46ac      	mov	ip, r5
   83d7a:	f47f af0c 	bne.w	83b96 <_vfiprintf_r+0x20a>
   83d7e:	f01a 0210 	ands.w	r2, sl, #16
   83d82:	f040 8311 	bne.w	843a8 <_vfiprintf_r+0xa1c>
   83d86:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
   83d8a:	f000 830d 	beq.w	843a8 <_vfiprintf_r+0xa1c>
   83d8e:	f8dd b020 	ldr.w	fp, [sp, #32]
   83d92:	4613      	mov	r3, r2
   83d94:	f8bb 4000 	ldrh.w	r4, [fp]
   83d98:	f10b 0b04 	add.w	fp, fp, #4
   83d9c:	2500      	movs	r5, #0
   83d9e:	f8cd b020 	str.w	fp, [sp, #32]
   83da2:	e704      	b.n	83bae <_vfiprintf_r+0x222>
   83da4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   83da8:	2000      	movs	r0, #0
   83daa:	f818 3b01 	ldrb.w	r3, [r8], #1
   83dae:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   83db2:	eb02 0040 	add.w	r0, r2, r0, lsl #1
   83db6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   83dba:	2a09      	cmp	r2, #9
   83dbc:	d9f5      	bls.n	83daa <_vfiprintf_r+0x41e>
   83dbe:	e654      	b.n	83a6a <_vfiprintf_r+0xde>
   83dc0:	f04a 0a10 	orr.w	sl, sl, #16
   83dc4:	f01a 0f20 	tst.w	sl, #32
   83dc8:	9004      	str	r0, [sp, #16]
   83dca:	46ac      	mov	ip, r5
   83dcc:	f47f af73 	bne.w	83cb6 <_vfiprintf_r+0x32a>
   83dd0:	f01a 0f10 	tst.w	sl, #16
   83dd4:	f040 82ef 	bne.w	843b6 <_vfiprintf_r+0xa2a>
   83dd8:	f01a 0f40 	tst.w	sl, #64	; 0x40
   83ddc:	f000 82eb 	beq.w	843b6 <_vfiprintf_r+0xa2a>
   83de0:	f8dd b020 	ldr.w	fp, [sp, #32]
   83de4:	2500      	movs	r5, #0
   83de6:	f8bb 4000 	ldrh.w	r4, [fp]
   83dea:	f10b 0b04 	add.w	fp, fp, #4
   83dee:	2301      	movs	r3, #1
   83df0:	f8cd b020 	str.w	fp, [sp, #32]
   83df4:	e6db      	b.n	83bae <_vfiprintf_r+0x222>
   83df6:	46ac      	mov	ip, r5
   83df8:	4d51      	ldr	r5, [pc, #324]	; (83f40 <_vfiprintf_r+0x5b4>)
   83dfa:	f01a 0f20 	tst.w	sl, #32
   83dfe:	9004      	str	r0, [sp, #16]
   83e00:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   83e04:	950a      	str	r5, [sp, #40]	; 0x28
   83e06:	f000 80f0 	beq.w	83fea <_vfiprintf_r+0x65e>
   83e0a:	9d08      	ldr	r5, [sp, #32]
   83e0c:	1dea      	adds	r2, r5, #7
   83e0e:	f022 0207 	bic.w	r2, r2, #7
   83e12:	f102 0b08 	add.w	fp, r2, #8
   83e16:	f8cd b020 	str.w	fp, [sp, #32]
   83e1a:	e9d2 4500 	ldrd	r4, r5, [r2]
   83e1e:	f01a 0f01 	tst.w	sl, #1
   83e22:	f000 82aa 	beq.w	8437a <_vfiprintf_r+0x9ee>
   83e26:	ea54 0b05 	orrs.w	fp, r4, r5
   83e2a:	f000 82a6 	beq.w	8437a <_vfiprintf_r+0x9ee>
   83e2e:	2230      	movs	r2, #48	; 0x30
   83e30:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
   83e34:	f04a 0a02 	orr.w	sl, sl, #2
   83e38:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   83e3c:	2302      	movs	r3, #2
   83e3e:	e6b6      	b.n	83bae <_vfiprintf_r+0x222>
   83e40:	9b08      	ldr	r3, [sp, #32]
   83e42:	f8dd b020 	ldr.w	fp, [sp, #32]
   83e46:	681b      	ldr	r3, [r3, #0]
   83e48:	2401      	movs	r4, #1
   83e4a:	f04f 0500 	mov.w	r5, #0
   83e4e:	f10b 0b04 	add.w	fp, fp, #4
   83e52:	9004      	str	r0, [sp, #16]
   83e54:	9403      	str	r4, [sp, #12]
   83e56:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
   83e5a:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   83e5e:	f8cd b020 	str.w	fp, [sp, #32]
   83e62:	9405      	str	r4, [sp, #20]
   83e64:	af16      	add	r7, sp, #88	; 0x58
   83e66:	f04f 0c00 	mov.w	ip, #0
   83e6a:	e6d0      	b.n	83c0e <_vfiprintf_r+0x282>
   83e6c:	f01a 0f20 	tst.w	sl, #32
   83e70:	9004      	str	r0, [sp, #16]
   83e72:	46ac      	mov	ip, r5
   83e74:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   83e78:	f47f af38 	bne.w	83cec <_vfiprintf_r+0x360>
   83e7c:	f01a 0f10 	tst.w	sl, #16
   83e80:	f040 82a7 	bne.w	843d2 <_vfiprintf_r+0xa46>
   83e84:	f01a 0f40 	tst.w	sl, #64	; 0x40
   83e88:	f000 82a3 	beq.w	843d2 <_vfiprintf_r+0xa46>
   83e8c:	f8dd b020 	ldr.w	fp, [sp, #32]
   83e90:	f9bb 4000 	ldrsh.w	r4, [fp]
   83e94:	f10b 0b04 	add.w	fp, fp, #4
   83e98:	17e5      	asrs	r5, r4, #31
   83e9a:	4622      	mov	r2, r4
   83e9c:	462b      	mov	r3, r5
   83e9e:	f8cd b020 	str.w	fp, [sp, #32]
   83ea2:	e72d      	b.n	83d00 <_vfiprintf_r+0x374>
   83ea4:	f04a 0a40 	orr.w	sl, sl, #64	; 0x40
   83ea8:	f898 3000 	ldrb.w	r3, [r8]
   83eac:	e5db      	b.n	83a66 <_vfiprintf_r+0xda>
   83eae:	f898 3000 	ldrb.w	r3, [r8]
   83eb2:	4642      	mov	r2, r8
   83eb4:	2b6c      	cmp	r3, #108	; 0x6c
   83eb6:	bf03      	ittte	eq
   83eb8:	f108 0801 	addeq.w	r8, r8, #1
   83ebc:	f04a 0a20 	orreq.w	sl, sl, #32
   83ec0:	7853      	ldrbeq	r3, [r2, #1]
   83ec2:	f04a 0a10 	orrne.w	sl, sl, #16
   83ec6:	e5ce      	b.n	83a66 <_vfiprintf_r+0xda>
   83ec8:	f01a 0f20 	tst.w	sl, #32
   83ecc:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   83ed0:	f000 82f7 	beq.w	844c2 <_vfiprintf_r+0xb36>
   83ed4:	9c08      	ldr	r4, [sp, #32]
   83ed6:	6821      	ldr	r1, [r4, #0]
   83ed8:	9c09      	ldr	r4, [sp, #36]	; 0x24
   83eda:	17e5      	asrs	r5, r4, #31
   83edc:	462b      	mov	r3, r5
   83ede:	9d08      	ldr	r5, [sp, #32]
   83ee0:	4622      	mov	r2, r4
   83ee2:	3504      	adds	r5, #4
   83ee4:	9508      	str	r5, [sp, #32]
   83ee6:	e9c1 2300 	strd	r2, r3, [r1]
   83eea:	e582      	b.n	839f2 <_vfiprintf_r+0x66>
   83eec:	9c08      	ldr	r4, [sp, #32]
   83eee:	46ac      	mov	ip, r5
   83ef0:	6827      	ldr	r7, [r4, #0]
   83ef2:	f04f 0500 	mov.w	r5, #0
   83ef6:	9004      	str	r0, [sp, #16]
   83ef8:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
   83efc:	3404      	adds	r4, #4
   83efe:	2f00      	cmp	r7, #0
   83f00:	f000 8332 	beq.w	84568 <_vfiprintf_r+0xbdc>
   83f04:	f1bc 0f00 	cmp.w	ip, #0
   83f08:	4638      	mov	r0, r7
   83f0a:	f2c0 8307 	blt.w	8451c <_vfiprintf_r+0xb90>
   83f0e:	4662      	mov	r2, ip
   83f10:	2100      	movs	r1, #0
   83f12:	f8cd c004 	str.w	ip, [sp, #4]
   83f16:	f001 fbb1 	bl	8567c <memchr>
   83f1a:	f8dd c004 	ldr.w	ip, [sp, #4]
   83f1e:	2800      	cmp	r0, #0
   83f20:	f000 833a 	beq.w	84598 <_vfiprintf_r+0xc0c>
   83f24:	1bc0      	subs	r0, r0, r7
   83f26:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
   83f2a:	4560      	cmp	r0, ip
   83f2c:	bfa8      	it	ge
   83f2e:	4660      	movge	r0, ip
   83f30:	9005      	str	r0, [sp, #20]
   83f32:	9408      	str	r4, [sp, #32]
   83f34:	9507      	str	r5, [sp, #28]
   83f36:	f04f 0c00 	mov.w	ip, #0
   83f3a:	e65b      	b.n	83bf4 <_vfiprintf_r+0x268>
   83f3c:	00086528 	.word	0x00086528
   83f40:	000864e8 	.word	0x000864e8
   83f44:	9b08      	ldr	r3, [sp, #32]
   83f46:	f8dd b020 	ldr.w	fp, [sp, #32]
   83f4a:	9004      	str	r0, [sp, #16]
   83f4c:	48b2      	ldr	r0, [pc, #712]	; (84218 <_vfiprintf_r+0x88c>)
   83f4e:	681c      	ldr	r4, [r3, #0]
   83f50:	2230      	movs	r2, #48	; 0x30
   83f52:	2378      	movs	r3, #120	; 0x78
   83f54:	f10b 0b04 	add.w	fp, fp, #4
   83f58:	46ac      	mov	ip, r5
   83f5a:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
   83f5e:	f04a 0a02 	orr.w	sl, sl, #2
   83f62:	f8cd b020 	str.w	fp, [sp, #32]
   83f66:	2500      	movs	r5, #0
   83f68:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   83f6c:	900a      	str	r0, [sp, #40]	; 0x28
   83f6e:	2302      	movs	r3, #2
   83f70:	e61d      	b.n	83bae <_vfiprintf_r+0x222>
   83f72:	f04a 0a20 	orr.w	sl, sl, #32
   83f76:	f898 3000 	ldrb.w	r3, [r8]
   83f7a:	e574      	b.n	83a66 <_vfiprintf_r+0xda>
   83f7c:	f8dd b020 	ldr.w	fp, [sp, #32]
   83f80:	f8db 0000 	ldr.w	r0, [fp]
   83f84:	f10b 0304 	add.w	r3, fp, #4
   83f88:	2800      	cmp	r0, #0
   83f8a:	f6ff adf7 	blt.w	83b7c <_vfiprintf_r+0x1f0>
   83f8e:	9308      	str	r3, [sp, #32]
   83f90:	f898 3000 	ldrb.w	r3, [r8]
   83f94:	e567      	b.n	83a66 <_vfiprintf_r+0xda>
   83f96:	f898 3000 	ldrb.w	r3, [r8]
   83f9a:	212b      	movs	r1, #43	; 0x2b
   83f9c:	e563      	b.n	83a66 <_vfiprintf_r+0xda>
   83f9e:	f898 3000 	ldrb.w	r3, [r8]
   83fa2:	f108 0401 	add.w	r4, r8, #1
   83fa6:	2b2a      	cmp	r3, #42	; 0x2a
   83fa8:	f000 8305 	beq.w	845b6 <_vfiprintf_r+0xc2a>
   83fac:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   83fb0:	2a09      	cmp	r2, #9
   83fb2:	bf98      	it	ls
   83fb4:	2500      	movls	r5, #0
   83fb6:	f200 82fa 	bhi.w	845ae <_vfiprintf_r+0xc22>
   83fba:	f814 3b01 	ldrb.w	r3, [r4], #1
   83fbe:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   83fc2:	eb02 0545 	add.w	r5, r2, r5, lsl #1
   83fc6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   83fca:	2a09      	cmp	r2, #9
   83fcc:	d9f5      	bls.n	83fba <_vfiprintf_r+0x62e>
   83fce:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
   83fd2:	46a0      	mov	r8, r4
   83fd4:	e549      	b.n	83a6a <_vfiprintf_r+0xde>
   83fd6:	4c90      	ldr	r4, [pc, #576]	; (84218 <_vfiprintf_r+0x88c>)
   83fd8:	f01a 0f20 	tst.w	sl, #32
   83fdc:	9004      	str	r0, [sp, #16]
   83fde:	46ac      	mov	ip, r5
   83fe0:	940a      	str	r4, [sp, #40]	; 0x28
   83fe2:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   83fe6:	f47f af10 	bne.w	83e0a <_vfiprintf_r+0x47e>
   83fea:	f01a 0f10 	tst.w	sl, #16
   83fee:	f040 81ea 	bne.w	843c6 <_vfiprintf_r+0xa3a>
   83ff2:	f01a 0f40 	tst.w	sl, #64	; 0x40
   83ff6:	f000 81e6 	beq.w	843c6 <_vfiprintf_r+0xa3a>
   83ffa:	f8dd b020 	ldr.w	fp, [sp, #32]
   83ffe:	2500      	movs	r5, #0
   84000:	f8bb 4000 	ldrh.w	r4, [fp]
   84004:	f10b 0b04 	add.w	fp, fp, #4
   84008:	f8cd b020 	str.w	fp, [sp, #32]
   8400c:	e707      	b.n	83e1e <_vfiprintf_r+0x492>
   8400e:	f898 3000 	ldrb.w	r3, [r8]
   84012:	2900      	cmp	r1, #0
   84014:	f47f ad27 	bne.w	83a66 <_vfiprintf_r+0xda>
   84018:	2120      	movs	r1, #32
   8401a:	e524      	b.n	83a66 <_vfiprintf_r+0xda>
   8401c:	f04a 0a01 	orr.w	sl, sl, #1
   84020:	f898 3000 	ldrb.w	r3, [r8]
   84024:	e51f      	b.n	83a66 <_vfiprintf_r+0xda>
   84026:	9004      	str	r0, [sp, #16]
   84028:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   8402c:	2b00      	cmp	r3, #0
   8402e:	f000 80f9 	beq.w	84224 <_vfiprintf_r+0x898>
   84032:	2501      	movs	r5, #1
   84034:	f04f 0b00 	mov.w	fp, #0
   84038:	9503      	str	r5, [sp, #12]
   8403a:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   8403e:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
   84042:	9505      	str	r5, [sp, #20]
   84044:	af16      	add	r7, sp, #88	; 0x58
   84046:	e70e      	b.n	83e66 <_vfiprintf_r+0x4da>
   84048:	9806      	ldr	r0, [sp, #24]
   8404a:	9902      	ldr	r1, [sp, #8]
   8404c:	aa13      	add	r2, sp, #76	; 0x4c
   8404e:	f7ff fc61 	bl	83914 <__sprint_r.part.0>
   84052:	2800      	cmp	r0, #0
   84054:	f040 80ed 	bne.w	84232 <_vfiprintf_r+0x8a6>
   84058:	9814      	ldr	r0, [sp, #80]	; 0x50
   8405a:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8405c:	1c43      	adds	r3, r0, #1
   8405e:	46cc      	mov	ip, r9
   84060:	e5fe      	b.n	83c60 <_vfiprintf_r+0x2d4>
   84062:	9b14      	ldr	r3, [sp, #80]	; 0x50
   84064:	9a15      	ldr	r2, [sp, #84]	; 0x54
   84066:	1c59      	adds	r1, r3, #1
   84068:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
   8406c:	b168      	cbz	r0, 8408a <_vfiprintf_r+0x6fe>
   8406e:	3201      	adds	r2, #1
   84070:	f10d 0047 	add.w	r0, sp, #71	; 0x47
   84074:	2301      	movs	r3, #1
   84076:	2907      	cmp	r1, #7
   84078:	9215      	str	r2, [sp, #84]	; 0x54
   8407a:	9114      	str	r1, [sp, #80]	; 0x50
   8407c:	e886 0009 	stmia.w	r6, {r0, r3}
   84080:	f300 8160 	bgt.w	84344 <_vfiprintf_r+0x9b8>
   84084:	460b      	mov	r3, r1
   84086:	3608      	adds	r6, #8
   84088:	3101      	adds	r1, #1
   8408a:	9c07      	ldr	r4, [sp, #28]
   8408c:	b164      	cbz	r4, 840a8 <_vfiprintf_r+0x71c>
   8408e:	3202      	adds	r2, #2
   84090:	a812      	add	r0, sp, #72	; 0x48
   84092:	2302      	movs	r3, #2
   84094:	2907      	cmp	r1, #7
   84096:	9215      	str	r2, [sp, #84]	; 0x54
   84098:	9114      	str	r1, [sp, #80]	; 0x50
   8409a:	e886 0009 	stmia.w	r6, {r0, r3}
   8409e:	f300 8157 	bgt.w	84350 <_vfiprintf_r+0x9c4>
   840a2:	460b      	mov	r3, r1
   840a4:	3608      	adds	r6, #8
   840a6:	3101      	adds	r1, #1
   840a8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   840aa:	2d80      	cmp	r5, #128	; 0x80
   840ac:	f000 8101 	beq.w	842b2 <_vfiprintf_r+0x926>
   840b0:	9d05      	ldr	r5, [sp, #20]
   840b2:	ebc5 040c 	rsb	r4, r5, ip
   840b6:	2c00      	cmp	r4, #0
   840b8:	dd2f      	ble.n	8411a <_vfiprintf_r+0x78e>
   840ba:	2c10      	cmp	r4, #16
   840bc:	4d57      	ldr	r5, [pc, #348]	; (8421c <_vfiprintf_r+0x890>)
   840be:	dd22      	ble.n	84106 <_vfiprintf_r+0x77a>
   840c0:	4630      	mov	r0, r6
   840c2:	f04f 0b10 	mov.w	fp, #16
   840c6:	462e      	mov	r6, r5
   840c8:	4625      	mov	r5, r4
   840ca:	9c06      	ldr	r4, [sp, #24]
   840cc:	e006      	b.n	840dc <_vfiprintf_r+0x750>
   840ce:	f103 0c02 	add.w	ip, r3, #2
   840d2:	3008      	adds	r0, #8
   840d4:	460b      	mov	r3, r1
   840d6:	3d10      	subs	r5, #16
   840d8:	2d10      	cmp	r5, #16
   840da:	dd10      	ble.n	840fe <_vfiprintf_r+0x772>
   840dc:	1c59      	adds	r1, r3, #1
   840de:	3210      	adds	r2, #16
   840e0:	2907      	cmp	r1, #7
   840e2:	9215      	str	r2, [sp, #84]	; 0x54
   840e4:	e880 0840 	stmia.w	r0, {r6, fp}
   840e8:	9114      	str	r1, [sp, #80]	; 0x50
   840ea:	ddf0      	ble.n	840ce <_vfiprintf_r+0x742>
   840ec:	2a00      	cmp	r2, #0
   840ee:	d163      	bne.n	841b8 <_vfiprintf_r+0x82c>
   840f0:	3d10      	subs	r5, #16
   840f2:	2d10      	cmp	r5, #16
   840f4:	f04f 0c01 	mov.w	ip, #1
   840f8:	4613      	mov	r3, r2
   840fa:	4648      	mov	r0, r9
   840fc:	dcee      	bgt.n	840dc <_vfiprintf_r+0x750>
   840fe:	462c      	mov	r4, r5
   84100:	4661      	mov	r1, ip
   84102:	4635      	mov	r5, r6
   84104:	4606      	mov	r6, r0
   84106:	4422      	add	r2, r4
   84108:	2907      	cmp	r1, #7
   8410a:	9215      	str	r2, [sp, #84]	; 0x54
   8410c:	6035      	str	r5, [r6, #0]
   8410e:	6074      	str	r4, [r6, #4]
   84110:	9114      	str	r1, [sp, #80]	; 0x50
   84112:	f300 80c1 	bgt.w	84298 <_vfiprintf_r+0x90c>
   84116:	3608      	adds	r6, #8
   84118:	3101      	adds	r1, #1
   8411a:	9d05      	ldr	r5, [sp, #20]
   8411c:	2907      	cmp	r1, #7
   8411e:	442a      	add	r2, r5
   84120:	9215      	str	r2, [sp, #84]	; 0x54
   84122:	6037      	str	r7, [r6, #0]
   84124:	6075      	str	r5, [r6, #4]
   84126:	9114      	str	r1, [sp, #80]	; 0x50
   84128:	f340 80c1 	ble.w	842ae <_vfiprintf_r+0x922>
   8412c:	2a00      	cmp	r2, #0
   8412e:	f040 8130 	bne.w	84392 <_vfiprintf_r+0xa06>
   84132:	9214      	str	r2, [sp, #80]	; 0x50
   84134:	464e      	mov	r6, r9
   84136:	f01a 0f04 	tst.w	sl, #4
   8413a:	f000 808b 	beq.w	84254 <_vfiprintf_r+0x8c8>
   8413e:	9d04      	ldr	r5, [sp, #16]
   84140:	f8dd b00c 	ldr.w	fp, [sp, #12]
   84144:	ebcb 0405 	rsb	r4, fp, r5
   84148:	2c00      	cmp	r4, #0
   8414a:	f340 8083 	ble.w	84254 <_vfiprintf_r+0x8c8>
   8414e:	2c10      	cmp	r4, #16
   84150:	f340 821e 	ble.w	84590 <_vfiprintf_r+0xc04>
   84154:	9914      	ldr	r1, [sp, #80]	; 0x50
   84156:	4d32      	ldr	r5, [pc, #200]	; (84220 <_vfiprintf_r+0x894>)
   84158:	2710      	movs	r7, #16
   8415a:	f8dd a018 	ldr.w	sl, [sp, #24]
   8415e:	f8dd b008 	ldr.w	fp, [sp, #8]
   84162:	e005      	b.n	84170 <_vfiprintf_r+0x7e4>
   84164:	1c88      	adds	r0, r1, #2
   84166:	3608      	adds	r6, #8
   84168:	4619      	mov	r1, r3
   8416a:	3c10      	subs	r4, #16
   8416c:	2c10      	cmp	r4, #16
   8416e:	dd10      	ble.n	84192 <_vfiprintf_r+0x806>
   84170:	1c4b      	adds	r3, r1, #1
   84172:	3210      	adds	r2, #16
   84174:	2b07      	cmp	r3, #7
   84176:	9215      	str	r2, [sp, #84]	; 0x54
   84178:	e886 00a0 	stmia.w	r6, {r5, r7}
   8417c:	9314      	str	r3, [sp, #80]	; 0x50
   8417e:	ddf1      	ble.n	84164 <_vfiprintf_r+0x7d8>
   84180:	2a00      	cmp	r2, #0
   84182:	d17d      	bne.n	84280 <_vfiprintf_r+0x8f4>
   84184:	3c10      	subs	r4, #16
   84186:	2c10      	cmp	r4, #16
   84188:	f04f 0001 	mov.w	r0, #1
   8418c:	4611      	mov	r1, r2
   8418e:	464e      	mov	r6, r9
   84190:	dcee      	bgt.n	84170 <_vfiprintf_r+0x7e4>
   84192:	4422      	add	r2, r4
   84194:	2807      	cmp	r0, #7
   84196:	9215      	str	r2, [sp, #84]	; 0x54
   84198:	6035      	str	r5, [r6, #0]
   8419a:	6074      	str	r4, [r6, #4]
   8419c:	9014      	str	r0, [sp, #80]	; 0x50
   8419e:	dd59      	ble.n	84254 <_vfiprintf_r+0x8c8>
   841a0:	2a00      	cmp	r2, #0
   841a2:	d14f      	bne.n	84244 <_vfiprintf_r+0x8b8>
   841a4:	9c09      	ldr	r4, [sp, #36]	; 0x24
   841a6:	f8dd b00c 	ldr.w	fp, [sp, #12]
   841aa:	9d04      	ldr	r5, [sp, #16]
   841ac:	45ab      	cmp	fp, r5
   841ae:	bfac      	ite	ge
   841b0:	445c      	addge	r4, fp
   841b2:	1964      	addlt	r4, r4, r5
   841b4:	9409      	str	r4, [sp, #36]	; 0x24
   841b6:	e05e      	b.n	84276 <_vfiprintf_r+0x8ea>
   841b8:	4620      	mov	r0, r4
   841ba:	9902      	ldr	r1, [sp, #8]
   841bc:	aa13      	add	r2, sp, #76	; 0x4c
   841be:	f7ff fba9 	bl	83914 <__sprint_r.part.0>
   841c2:	2800      	cmp	r0, #0
   841c4:	d135      	bne.n	84232 <_vfiprintf_r+0x8a6>
   841c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
   841c8:	9a15      	ldr	r2, [sp, #84]	; 0x54
   841ca:	f103 0c01 	add.w	ip, r3, #1
   841ce:	4648      	mov	r0, r9
   841d0:	e781      	b.n	840d6 <_vfiprintf_r+0x74a>
   841d2:	08e0      	lsrs	r0, r4, #3
   841d4:	ea40 7045 	orr.w	r0, r0, r5, lsl #29
   841d8:	f004 0207 	and.w	r2, r4, #7
   841dc:	08e9      	lsrs	r1, r5, #3
   841de:	3230      	adds	r2, #48	; 0x30
   841e0:	ea50 0b01 	orrs.w	fp, r0, r1
   841e4:	461f      	mov	r7, r3
   841e6:	701a      	strb	r2, [r3, #0]
   841e8:	4604      	mov	r4, r0
   841ea:	460d      	mov	r5, r1
   841ec:	f103 33ff 	add.w	r3, r3, #4294967295
   841f0:	d1ef      	bne.n	841d2 <_vfiprintf_r+0x846>
   841f2:	f01a 0f01 	tst.w	sl, #1
   841f6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   841fa:	4639      	mov	r1, r7
   841fc:	f000 80b9 	beq.w	84372 <_vfiprintf_r+0x9e6>
   84200:	2a30      	cmp	r2, #48	; 0x30
   84202:	f43f acf4 	beq.w	83bee <_vfiprintf_r+0x262>
   84206:	461f      	mov	r7, r3
   84208:	ebc7 0509 	rsb	r5, r7, r9
   8420c:	2330      	movs	r3, #48	; 0x30
   8420e:	9505      	str	r5, [sp, #20]
   84210:	f801 3c01 	strb.w	r3, [r1, #-1]
   84214:	e4ee      	b.n	83bf4 <_vfiprintf_r+0x268>
   84216:	bf00      	nop
   84218:	000864fc 	.word	0x000864fc
   8421c:	00086518 	.word	0x00086518
   84220:	00086528 	.word	0x00086528
   84224:	9b15      	ldr	r3, [sp, #84]	; 0x54
   84226:	b123      	cbz	r3, 84232 <_vfiprintf_r+0x8a6>
   84228:	9806      	ldr	r0, [sp, #24]
   8422a:	9902      	ldr	r1, [sp, #8]
   8422c:	aa13      	add	r2, sp, #76	; 0x4c
   8422e:	f7ff fb71 	bl	83914 <__sprint_r.part.0>
   84232:	9c02      	ldr	r4, [sp, #8]
   84234:	89a3      	ldrh	r3, [r4, #12]
   84236:	065b      	lsls	r3, r3, #25
   84238:	f53f ac98 	bmi.w	83b6c <_vfiprintf_r+0x1e0>
   8423c:	9809      	ldr	r0, [sp, #36]	; 0x24
   8423e:	b031      	add	sp, #196	; 0xc4
   84240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84244:	9806      	ldr	r0, [sp, #24]
   84246:	9902      	ldr	r1, [sp, #8]
   84248:	aa13      	add	r2, sp, #76	; 0x4c
   8424a:	f7ff fb63 	bl	83914 <__sprint_r.part.0>
   8424e:	2800      	cmp	r0, #0
   84250:	d1ef      	bne.n	84232 <_vfiprintf_r+0x8a6>
   84252:	9a15      	ldr	r2, [sp, #84]	; 0x54
   84254:	9c09      	ldr	r4, [sp, #36]	; 0x24
   84256:	f8dd b00c 	ldr.w	fp, [sp, #12]
   8425a:	9d04      	ldr	r5, [sp, #16]
   8425c:	45ab      	cmp	fp, r5
   8425e:	bfac      	ite	ge
   84260:	445c      	addge	r4, fp
   84262:	1964      	addlt	r4, r4, r5
   84264:	9409      	str	r4, [sp, #36]	; 0x24
   84266:	b132      	cbz	r2, 84276 <_vfiprintf_r+0x8ea>
   84268:	9806      	ldr	r0, [sp, #24]
   8426a:	9902      	ldr	r1, [sp, #8]
   8426c:	aa13      	add	r2, sp, #76	; 0x4c
   8426e:	f7ff fb51 	bl	83914 <__sprint_r.part.0>
   84272:	2800      	cmp	r0, #0
   84274:	d1dd      	bne.n	84232 <_vfiprintf_r+0x8a6>
   84276:	2000      	movs	r0, #0
   84278:	9014      	str	r0, [sp, #80]	; 0x50
   8427a:	464e      	mov	r6, r9
   8427c:	f7ff bbb9 	b.w	839f2 <_vfiprintf_r+0x66>
   84280:	4650      	mov	r0, sl
   84282:	4659      	mov	r1, fp
   84284:	aa13      	add	r2, sp, #76	; 0x4c
   84286:	f7ff fb45 	bl	83914 <__sprint_r.part.0>
   8428a:	2800      	cmp	r0, #0
   8428c:	d1d1      	bne.n	84232 <_vfiprintf_r+0x8a6>
   8428e:	9914      	ldr	r1, [sp, #80]	; 0x50
   84290:	9a15      	ldr	r2, [sp, #84]	; 0x54
   84292:	1c48      	adds	r0, r1, #1
   84294:	464e      	mov	r6, r9
   84296:	e768      	b.n	8416a <_vfiprintf_r+0x7de>
   84298:	2a00      	cmp	r2, #0
   8429a:	f040 80f7 	bne.w	8448c <_vfiprintf_r+0xb00>
   8429e:	9c05      	ldr	r4, [sp, #20]
   842a0:	2301      	movs	r3, #1
   842a2:	9720      	str	r7, [sp, #128]	; 0x80
   842a4:	9421      	str	r4, [sp, #132]	; 0x84
   842a6:	9415      	str	r4, [sp, #84]	; 0x54
   842a8:	4622      	mov	r2, r4
   842aa:	9314      	str	r3, [sp, #80]	; 0x50
   842ac:	464e      	mov	r6, r9
   842ae:	3608      	adds	r6, #8
   842b0:	e741      	b.n	84136 <_vfiprintf_r+0x7aa>
   842b2:	9d04      	ldr	r5, [sp, #16]
   842b4:	f8dd b00c 	ldr.w	fp, [sp, #12]
   842b8:	ebcb 0405 	rsb	r4, fp, r5
   842bc:	2c00      	cmp	r4, #0
   842be:	f77f aef7 	ble.w	840b0 <_vfiprintf_r+0x724>
   842c2:	2c10      	cmp	r4, #16
   842c4:	4da6      	ldr	r5, [pc, #664]	; (84560 <_vfiprintf_r+0xbd4>)
   842c6:	f340 8170 	ble.w	845aa <_vfiprintf_r+0xc1e>
   842ca:	4629      	mov	r1, r5
   842cc:	f04f 0b10 	mov.w	fp, #16
   842d0:	4625      	mov	r5, r4
   842d2:	4664      	mov	r4, ip
   842d4:	46b4      	mov	ip, r6
   842d6:	460e      	mov	r6, r1
   842d8:	e006      	b.n	842e8 <_vfiprintf_r+0x95c>
   842da:	1c98      	adds	r0, r3, #2
   842dc:	f10c 0c08 	add.w	ip, ip, #8
   842e0:	460b      	mov	r3, r1
   842e2:	3d10      	subs	r5, #16
   842e4:	2d10      	cmp	r5, #16
   842e6:	dd0f      	ble.n	84308 <_vfiprintf_r+0x97c>
   842e8:	1c59      	adds	r1, r3, #1
   842ea:	3210      	adds	r2, #16
   842ec:	2907      	cmp	r1, #7
   842ee:	9215      	str	r2, [sp, #84]	; 0x54
   842f0:	e88c 0840 	stmia.w	ip, {r6, fp}
   842f4:	9114      	str	r1, [sp, #80]	; 0x50
   842f6:	ddf0      	ble.n	842da <_vfiprintf_r+0x94e>
   842f8:	b9ba      	cbnz	r2, 8432a <_vfiprintf_r+0x99e>
   842fa:	3d10      	subs	r5, #16
   842fc:	2d10      	cmp	r5, #16
   842fe:	f04f 0001 	mov.w	r0, #1
   84302:	4613      	mov	r3, r2
   84304:	46cc      	mov	ip, r9
   84306:	dcef      	bgt.n	842e8 <_vfiprintf_r+0x95c>
   84308:	4633      	mov	r3, r6
   8430a:	4666      	mov	r6, ip
   8430c:	46a4      	mov	ip, r4
   8430e:	462c      	mov	r4, r5
   84310:	461d      	mov	r5, r3
   84312:	4422      	add	r2, r4
   84314:	2807      	cmp	r0, #7
   84316:	9215      	str	r2, [sp, #84]	; 0x54
   84318:	6035      	str	r5, [r6, #0]
   8431a:	6074      	str	r4, [r6, #4]
   8431c:	9014      	str	r0, [sp, #80]	; 0x50
   8431e:	f300 80af 	bgt.w	84480 <_vfiprintf_r+0xaf4>
   84322:	3608      	adds	r6, #8
   84324:	1c41      	adds	r1, r0, #1
   84326:	4603      	mov	r3, r0
   84328:	e6c2      	b.n	840b0 <_vfiprintf_r+0x724>
   8432a:	9806      	ldr	r0, [sp, #24]
   8432c:	9902      	ldr	r1, [sp, #8]
   8432e:	aa13      	add	r2, sp, #76	; 0x4c
   84330:	f7ff faf0 	bl	83914 <__sprint_r.part.0>
   84334:	2800      	cmp	r0, #0
   84336:	f47f af7c 	bne.w	84232 <_vfiprintf_r+0x8a6>
   8433a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   8433c:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8433e:	1c58      	adds	r0, r3, #1
   84340:	46cc      	mov	ip, r9
   84342:	e7ce      	b.n	842e2 <_vfiprintf_r+0x956>
   84344:	2a00      	cmp	r2, #0
   84346:	d179      	bne.n	8443c <_vfiprintf_r+0xab0>
   84348:	4619      	mov	r1, r3
   8434a:	464e      	mov	r6, r9
   8434c:	4613      	mov	r3, r2
   8434e:	e69c      	b.n	8408a <_vfiprintf_r+0x6fe>
   84350:	2a00      	cmp	r2, #0
   84352:	f040 8084 	bne.w	8445e <_vfiprintf_r+0xad2>
   84356:	2101      	movs	r1, #1
   84358:	4613      	mov	r3, r2
   8435a:	464e      	mov	r6, r9
   8435c:	e6a4      	b.n	840a8 <_vfiprintf_r+0x71c>
   8435e:	464f      	mov	r7, r9
   84360:	e448      	b.n	83bf4 <_vfiprintf_r+0x268>
   84362:	2d00      	cmp	r5, #0
   84364:	bf08      	it	eq
   84366:	2c0a      	cmpeq	r4, #10
   84368:	d246      	bcs.n	843f8 <_vfiprintf_r+0xa6c>
   8436a:	3430      	adds	r4, #48	; 0x30
   8436c:	af30      	add	r7, sp, #192	; 0xc0
   8436e:	f807 4d41 	strb.w	r4, [r7, #-65]!
   84372:	ebc7 0309 	rsb	r3, r7, r9
   84376:	9305      	str	r3, [sp, #20]
   84378:	e43c      	b.n	83bf4 <_vfiprintf_r+0x268>
   8437a:	2302      	movs	r3, #2
   8437c:	e417      	b.n	83bae <_vfiprintf_r+0x222>
   8437e:	2a00      	cmp	r2, #0
   84380:	f040 80af 	bne.w	844e2 <_vfiprintf_r+0xb56>
   84384:	4613      	mov	r3, r2
   84386:	2101      	movs	r1, #1
   84388:	464e      	mov	r6, r9
   8438a:	e66d      	b.n	84068 <_vfiprintf_r+0x6dc>
   8438c:	4644      	mov	r4, r8
   8438e:	f7ff bb58 	b.w	83a42 <_vfiprintf_r+0xb6>
   84392:	9806      	ldr	r0, [sp, #24]
   84394:	9902      	ldr	r1, [sp, #8]
   84396:	aa13      	add	r2, sp, #76	; 0x4c
   84398:	f7ff fabc 	bl	83914 <__sprint_r.part.0>
   8439c:	2800      	cmp	r0, #0
   8439e:	f47f af48 	bne.w	84232 <_vfiprintf_r+0x8a6>
   843a2:	9a15      	ldr	r2, [sp, #84]	; 0x54
   843a4:	464e      	mov	r6, r9
   843a6:	e6c6      	b.n	84136 <_vfiprintf_r+0x7aa>
   843a8:	9d08      	ldr	r5, [sp, #32]
   843aa:	682c      	ldr	r4, [r5, #0]
   843ac:	3504      	adds	r5, #4
   843ae:	9508      	str	r5, [sp, #32]
   843b0:	2500      	movs	r5, #0
   843b2:	f7ff bbfc 	b.w	83bae <_vfiprintf_r+0x222>
   843b6:	9d08      	ldr	r5, [sp, #32]
   843b8:	2301      	movs	r3, #1
   843ba:	682c      	ldr	r4, [r5, #0]
   843bc:	3504      	adds	r5, #4
   843be:	9508      	str	r5, [sp, #32]
   843c0:	2500      	movs	r5, #0
   843c2:	f7ff bbf4 	b.w	83bae <_vfiprintf_r+0x222>
   843c6:	9d08      	ldr	r5, [sp, #32]
   843c8:	682c      	ldr	r4, [r5, #0]
   843ca:	3504      	adds	r5, #4
   843cc:	9508      	str	r5, [sp, #32]
   843ce:	2500      	movs	r5, #0
   843d0:	e525      	b.n	83e1e <_vfiprintf_r+0x492>
   843d2:	9d08      	ldr	r5, [sp, #32]
   843d4:	682c      	ldr	r4, [r5, #0]
   843d6:	3504      	adds	r5, #4
   843d8:	9508      	str	r5, [sp, #32]
   843da:	17e5      	asrs	r5, r4, #31
   843dc:	4622      	mov	r2, r4
   843de:	462b      	mov	r3, r5
   843e0:	e48e      	b.n	83d00 <_vfiprintf_r+0x374>
   843e2:	9806      	ldr	r0, [sp, #24]
   843e4:	9902      	ldr	r1, [sp, #8]
   843e6:	aa13      	add	r2, sp, #76	; 0x4c
   843e8:	f7ff fa94 	bl	83914 <__sprint_r.part.0>
   843ec:	2800      	cmp	r0, #0
   843ee:	f47f af20 	bne.w	84232 <_vfiprintf_r+0x8a6>
   843f2:	464e      	mov	r6, r9
   843f4:	f7ff bb9a 	b.w	83b2c <_vfiprintf_r+0x1a0>
   843f8:	f10d 0b7f 	add.w	fp, sp, #127	; 0x7f
   843fc:	9603      	str	r6, [sp, #12]
   843fe:	465e      	mov	r6, fp
   84400:	46e3      	mov	fp, ip
   84402:	4620      	mov	r0, r4
   84404:	4629      	mov	r1, r5
   84406:	220a      	movs	r2, #10
   84408:	2300      	movs	r3, #0
   8440a:	f7fe fd85 	bl	82f18 <__aeabi_uldivmod>
   8440e:	3230      	adds	r2, #48	; 0x30
   84410:	7032      	strb	r2, [r6, #0]
   84412:	4620      	mov	r0, r4
   84414:	4629      	mov	r1, r5
   84416:	220a      	movs	r2, #10
   84418:	2300      	movs	r3, #0
   8441a:	f7fe fd7d 	bl	82f18 <__aeabi_uldivmod>
   8441e:	4604      	mov	r4, r0
   84420:	460d      	mov	r5, r1
   84422:	ea54 0005 	orrs.w	r0, r4, r5
   84426:	4637      	mov	r7, r6
   84428:	f106 36ff 	add.w	r6, r6, #4294967295
   8442c:	d1e9      	bne.n	84402 <_vfiprintf_r+0xa76>
   8442e:	ebc7 0309 	rsb	r3, r7, r9
   84432:	46dc      	mov	ip, fp
   84434:	9e03      	ldr	r6, [sp, #12]
   84436:	9305      	str	r3, [sp, #20]
   84438:	f7ff bbdc 	b.w	83bf4 <_vfiprintf_r+0x268>
   8443c:	9806      	ldr	r0, [sp, #24]
   8443e:	9902      	ldr	r1, [sp, #8]
   84440:	aa13      	add	r2, sp, #76	; 0x4c
   84442:	f8cd c004 	str.w	ip, [sp, #4]
   84446:	f7ff fa65 	bl	83914 <__sprint_r.part.0>
   8444a:	f8dd c004 	ldr.w	ip, [sp, #4]
   8444e:	2800      	cmp	r0, #0
   84450:	f47f aeef 	bne.w	84232 <_vfiprintf_r+0x8a6>
   84454:	9b14      	ldr	r3, [sp, #80]	; 0x50
   84456:	9a15      	ldr	r2, [sp, #84]	; 0x54
   84458:	1c59      	adds	r1, r3, #1
   8445a:	464e      	mov	r6, r9
   8445c:	e615      	b.n	8408a <_vfiprintf_r+0x6fe>
   8445e:	9806      	ldr	r0, [sp, #24]
   84460:	9902      	ldr	r1, [sp, #8]
   84462:	aa13      	add	r2, sp, #76	; 0x4c
   84464:	f8cd c004 	str.w	ip, [sp, #4]
   84468:	f7ff fa54 	bl	83914 <__sprint_r.part.0>
   8446c:	f8dd c004 	ldr.w	ip, [sp, #4]
   84470:	2800      	cmp	r0, #0
   84472:	f47f aede 	bne.w	84232 <_vfiprintf_r+0x8a6>
   84476:	9b14      	ldr	r3, [sp, #80]	; 0x50
   84478:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8447a:	1c59      	adds	r1, r3, #1
   8447c:	464e      	mov	r6, r9
   8447e:	e613      	b.n	840a8 <_vfiprintf_r+0x71c>
   84480:	2a00      	cmp	r2, #0
   84482:	d156      	bne.n	84532 <_vfiprintf_r+0xba6>
   84484:	2101      	movs	r1, #1
   84486:	4613      	mov	r3, r2
   84488:	464e      	mov	r6, r9
   8448a:	e611      	b.n	840b0 <_vfiprintf_r+0x724>
   8448c:	9806      	ldr	r0, [sp, #24]
   8448e:	9902      	ldr	r1, [sp, #8]
   84490:	aa13      	add	r2, sp, #76	; 0x4c
   84492:	f7ff fa3f 	bl	83914 <__sprint_r.part.0>
   84496:	2800      	cmp	r0, #0
   84498:	f47f aecb 	bne.w	84232 <_vfiprintf_r+0x8a6>
   8449c:	9914      	ldr	r1, [sp, #80]	; 0x50
   8449e:	9a15      	ldr	r2, [sp, #84]	; 0x54
   844a0:	3101      	adds	r1, #1
   844a2:	464e      	mov	r6, r9
   844a4:	e639      	b.n	8411a <_vfiprintf_r+0x78e>
   844a6:	f04f 0b2d 	mov.w	fp, #45	; 0x2d
   844aa:	4264      	negs	r4, r4
   844ac:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   844b0:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
   844b4:	f8cd b01c 	str.w	fp, [sp, #28]
   844b8:	f8cd c014 	str.w	ip, [sp, #20]
   844bc:	2301      	movs	r3, #1
   844be:	f7ff bb7e 	b.w	83bbe <_vfiprintf_r+0x232>
   844c2:	f01a 0f10 	tst.w	sl, #16
   844c6:	d11d      	bne.n	84504 <_vfiprintf_r+0xb78>
   844c8:	f01a 0f40 	tst.w	sl, #64	; 0x40
   844cc:	d058      	beq.n	84580 <_vfiprintf_r+0xbf4>
   844ce:	9d08      	ldr	r5, [sp, #32]
   844d0:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
   844d4:	682b      	ldr	r3, [r5, #0]
   844d6:	3504      	adds	r5, #4
   844d8:	9508      	str	r5, [sp, #32]
   844da:	f8a3 b000 	strh.w	fp, [r3]
   844de:	f7ff ba88 	b.w	839f2 <_vfiprintf_r+0x66>
   844e2:	9806      	ldr	r0, [sp, #24]
   844e4:	9902      	ldr	r1, [sp, #8]
   844e6:	aa13      	add	r2, sp, #76	; 0x4c
   844e8:	f8cd c004 	str.w	ip, [sp, #4]
   844ec:	f7ff fa12 	bl	83914 <__sprint_r.part.0>
   844f0:	f8dd c004 	ldr.w	ip, [sp, #4]
   844f4:	2800      	cmp	r0, #0
   844f6:	f47f ae9c 	bne.w	84232 <_vfiprintf_r+0x8a6>
   844fa:	9b14      	ldr	r3, [sp, #80]	; 0x50
   844fc:	9a15      	ldr	r2, [sp, #84]	; 0x54
   844fe:	1c59      	adds	r1, r3, #1
   84500:	464e      	mov	r6, r9
   84502:	e5b1      	b.n	84068 <_vfiprintf_r+0x6dc>
   84504:	f8dd b020 	ldr.w	fp, [sp, #32]
   84508:	9c09      	ldr	r4, [sp, #36]	; 0x24
   8450a:	f8db 3000 	ldr.w	r3, [fp]
   8450e:	f10b 0b04 	add.w	fp, fp, #4
   84512:	f8cd b020 	str.w	fp, [sp, #32]
   84516:	601c      	str	r4, [r3, #0]
   84518:	f7ff ba6b 	b.w	839f2 <_vfiprintf_r+0x66>
   8451c:	9408      	str	r4, [sp, #32]
   8451e:	f7ff f997 	bl	83850 <strlen>
   84522:	f89d 4047 	ldrb.w	r4, [sp, #71]	; 0x47
   84526:	9005      	str	r0, [sp, #20]
   84528:	9407      	str	r4, [sp, #28]
   8452a:	f04f 0c00 	mov.w	ip, #0
   8452e:	f7ff bb61 	b.w	83bf4 <_vfiprintf_r+0x268>
   84532:	9806      	ldr	r0, [sp, #24]
   84534:	9902      	ldr	r1, [sp, #8]
   84536:	aa13      	add	r2, sp, #76	; 0x4c
   84538:	f8cd c004 	str.w	ip, [sp, #4]
   8453c:	f7ff f9ea 	bl	83914 <__sprint_r.part.0>
   84540:	f8dd c004 	ldr.w	ip, [sp, #4]
   84544:	2800      	cmp	r0, #0
   84546:	f47f ae74 	bne.w	84232 <_vfiprintf_r+0x8a6>
   8454a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   8454c:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8454e:	1c59      	adds	r1, r3, #1
   84550:	464e      	mov	r6, r9
   84552:	e5ad      	b.n	840b0 <_vfiprintf_r+0x724>
   84554:	9b14      	ldr	r3, [sp, #80]	; 0x50
   84556:	9a15      	ldr	r2, [sp, #84]	; 0x54
   84558:	3301      	adds	r3, #1
   8455a:	4d02      	ldr	r5, [pc, #8]	; (84564 <_vfiprintf_r+0xbd8>)
   8455c:	f7ff bb9a 	b.w	83c94 <_vfiprintf_r+0x308>
   84560:	00086518 	.word	0x00086518
   84564:	00086528 	.word	0x00086528
   84568:	f1bc 0f06 	cmp.w	ip, #6
   8456c:	bf34      	ite	cc
   8456e:	4663      	movcc	r3, ip
   84570:	2306      	movcs	r3, #6
   84572:	9408      	str	r4, [sp, #32]
   84574:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
   84578:	9305      	str	r3, [sp, #20]
   8457a:	9403      	str	r4, [sp, #12]
   8457c:	4f16      	ldr	r7, [pc, #88]	; (845d8 <_vfiprintf_r+0xc4c>)
   8457e:	e472      	b.n	83e66 <_vfiprintf_r+0x4da>
   84580:	9c08      	ldr	r4, [sp, #32]
   84582:	9d09      	ldr	r5, [sp, #36]	; 0x24
   84584:	6823      	ldr	r3, [r4, #0]
   84586:	3404      	adds	r4, #4
   84588:	9408      	str	r4, [sp, #32]
   8458a:	601d      	str	r5, [r3, #0]
   8458c:	f7ff ba31 	b.w	839f2 <_vfiprintf_r+0x66>
   84590:	9814      	ldr	r0, [sp, #80]	; 0x50
   84592:	4d12      	ldr	r5, [pc, #72]	; (845dc <_vfiprintf_r+0xc50>)
   84594:	3001      	adds	r0, #1
   84596:	e5fc      	b.n	84192 <_vfiprintf_r+0x806>
   84598:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
   8459c:	f8cd c014 	str.w	ip, [sp, #20]
   845a0:	9507      	str	r5, [sp, #28]
   845a2:	9408      	str	r4, [sp, #32]
   845a4:	4684      	mov	ip, r0
   845a6:	f7ff bb25 	b.w	83bf4 <_vfiprintf_r+0x268>
   845aa:	4608      	mov	r0, r1
   845ac:	e6b1      	b.n	84312 <_vfiprintf_r+0x986>
   845ae:	46a0      	mov	r8, r4
   845b0:	2500      	movs	r5, #0
   845b2:	f7ff ba5a 	b.w	83a6a <_vfiprintf_r+0xde>
   845b6:	f8dd b020 	ldr.w	fp, [sp, #32]
   845ba:	f898 3001 	ldrb.w	r3, [r8, #1]
   845be:	f8db 5000 	ldr.w	r5, [fp]
   845c2:	f10b 0204 	add.w	r2, fp, #4
   845c6:	2d00      	cmp	r5, #0
   845c8:	9208      	str	r2, [sp, #32]
   845ca:	46a0      	mov	r8, r4
   845cc:	f6bf aa4b 	bge.w	83a66 <_vfiprintf_r+0xda>
   845d0:	f04f 35ff 	mov.w	r5, #4294967295
   845d4:	f7ff ba47 	b.w	83a66 <_vfiprintf_r+0xda>
   845d8:	00086510 	.word	0x00086510
   845dc:	00086528 	.word	0x00086528

000845e0 <__sbprintf>:
   845e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   845e4:	6e4f      	ldr	r7, [r1, #100]	; 0x64
   845e6:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   845ea:	4688      	mov	r8, r1
   845ec:	9719      	str	r7, [sp, #100]	; 0x64
   845ee:	f8d8 701c 	ldr.w	r7, [r8, #28]
   845f2:	f8b1 a00c 	ldrh.w	sl, [r1, #12]
   845f6:	f8b1 900e 	ldrh.w	r9, [r1, #14]
   845fa:	9707      	str	r7, [sp, #28]
   845fc:	f8d8 7024 	ldr.w	r7, [r8, #36]	; 0x24
   84600:	ac1a      	add	r4, sp, #104	; 0x68
   84602:	f44f 6580 	mov.w	r5, #1024	; 0x400
   84606:	f02a 0a02 	bic.w	sl, sl, #2
   8460a:	2600      	movs	r6, #0
   8460c:	4669      	mov	r1, sp
   8460e:	9400      	str	r4, [sp, #0]
   84610:	9404      	str	r4, [sp, #16]
   84612:	9502      	str	r5, [sp, #8]
   84614:	9505      	str	r5, [sp, #20]
   84616:	f8ad a00c 	strh.w	sl, [sp, #12]
   8461a:	f8ad 900e 	strh.w	r9, [sp, #14]
   8461e:	9709      	str	r7, [sp, #36]	; 0x24
   84620:	9606      	str	r6, [sp, #24]
   84622:	4605      	mov	r5, r0
   84624:	f7ff f9b2 	bl	8398c <_vfiprintf_r>
   84628:	1e04      	subs	r4, r0, #0
   8462a:	db07      	blt.n	8463c <__sbprintf+0x5c>
   8462c:	4628      	mov	r0, r5
   8462e:	4669      	mov	r1, sp
   84630:	f000 f92a 	bl	84888 <_fflush_r>
   84634:	42b0      	cmp	r0, r6
   84636:	bf18      	it	ne
   84638:	f04f 34ff 	movne.w	r4, #4294967295
   8463c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   84640:	065b      	lsls	r3, r3, #25
   84642:	d505      	bpl.n	84650 <__sbprintf+0x70>
   84644:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   84648:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8464c:	f8a8 300c 	strh.w	r3, [r8, #12]
   84650:	4620      	mov	r0, r4
   84652:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   84656:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8465a:	bf00      	nop

0008465c <__swsetup_r>:
   8465c:	4b2f      	ldr	r3, [pc, #188]	; (8471c <__swsetup_r+0xc0>)
   8465e:	b570      	push	{r4, r5, r6, lr}
   84660:	4606      	mov	r6, r0
   84662:	6818      	ldr	r0, [r3, #0]
   84664:	460c      	mov	r4, r1
   84666:	b110      	cbz	r0, 8466e <__swsetup_r+0x12>
   84668:	6b82      	ldr	r2, [r0, #56]	; 0x38
   8466a:	2a00      	cmp	r2, #0
   8466c:	d036      	beq.n	846dc <__swsetup_r+0x80>
   8466e:	89a5      	ldrh	r5, [r4, #12]
   84670:	b2ab      	uxth	r3, r5
   84672:	0719      	lsls	r1, r3, #28
   84674:	d50c      	bpl.n	84690 <__swsetup_r+0x34>
   84676:	6922      	ldr	r2, [r4, #16]
   84678:	b1aa      	cbz	r2, 846a6 <__swsetup_r+0x4a>
   8467a:	f013 0101 	ands.w	r1, r3, #1
   8467e:	d01e      	beq.n	846be <__swsetup_r+0x62>
   84680:	6963      	ldr	r3, [r4, #20]
   84682:	2100      	movs	r1, #0
   84684:	425b      	negs	r3, r3
   84686:	61a3      	str	r3, [r4, #24]
   84688:	60a1      	str	r1, [r4, #8]
   8468a:	b1f2      	cbz	r2, 846ca <__swsetup_r+0x6e>
   8468c:	2000      	movs	r0, #0
   8468e:	bd70      	pop	{r4, r5, r6, pc}
   84690:	06da      	lsls	r2, r3, #27
   84692:	d53a      	bpl.n	8470a <__swsetup_r+0xae>
   84694:	075b      	lsls	r3, r3, #29
   84696:	d424      	bmi.n	846e2 <__swsetup_r+0x86>
   84698:	6922      	ldr	r2, [r4, #16]
   8469a:	f045 0308 	orr.w	r3, r5, #8
   8469e:	81a3      	strh	r3, [r4, #12]
   846a0:	b29b      	uxth	r3, r3
   846a2:	2a00      	cmp	r2, #0
   846a4:	d1e9      	bne.n	8467a <__swsetup_r+0x1e>
   846a6:	f403 7120 	and.w	r1, r3, #640	; 0x280
   846aa:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   846ae:	d0e4      	beq.n	8467a <__swsetup_r+0x1e>
   846b0:	4630      	mov	r0, r6
   846b2:	4621      	mov	r1, r4
   846b4:	f000 fcce 	bl	85054 <__smakebuf_r>
   846b8:	89a3      	ldrh	r3, [r4, #12]
   846ba:	6922      	ldr	r2, [r4, #16]
   846bc:	e7dd      	b.n	8467a <__swsetup_r+0x1e>
   846be:	0798      	lsls	r0, r3, #30
   846c0:	bf58      	it	pl
   846c2:	6961      	ldrpl	r1, [r4, #20]
   846c4:	60a1      	str	r1, [r4, #8]
   846c6:	2a00      	cmp	r2, #0
   846c8:	d1e0      	bne.n	8468c <__swsetup_r+0x30>
   846ca:	89a3      	ldrh	r3, [r4, #12]
   846cc:	061a      	lsls	r2, r3, #24
   846ce:	d5dd      	bpl.n	8468c <__swsetup_r+0x30>
   846d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   846d4:	81a3      	strh	r3, [r4, #12]
   846d6:	f04f 30ff 	mov.w	r0, #4294967295
   846da:	bd70      	pop	{r4, r5, r6, pc}
   846dc:	f000 f8f0 	bl	848c0 <__sinit>
   846e0:	e7c5      	b.n	8466e <__swsetup_r+0x12>
   846e2:	6b21      	ldr	r1, [r4, #48]	; 0x30
   846e4:	b149      	cbz	r1, 846fa <__swsetup_r+0x9e>
   846e6:	f104 0340 	add.w	r3, r4, #64	; 0x40
   846ea:	4299      	cmp	r1, r3
   846ec:	d003      	beq.n	846f6 <__swsetup_r+0x9a>
   846ee:	4630      	mov	r0, r6
   846f0:	f000 fa2a 	bl	84b48 <_free_r>
   846f4:	89a5      	ldrh	r5, [r4, #12]
   846f6:	2300      	movs	r3, #0
   846f8:	6323      	str	r3, [r4, #48]	; 0x30
   846fa:	6922      	ldr	r2, [r4, #16]
   846fc:	f025 0524 	bic.w	r5, r5, #36	; 0x24
   84700:	2100      	movs	r1, #0
   84702:	b2ad      	uxth	r5, r5
   84704:	6022      	str	r2, [r4, #0]
   84706:	6061      	str	r1, [r4, #4]
   84708:	e7c7      	b.n	8469a <__swsetup_r+0x3e>
   8470a:	f045 0540 	orr.w	r5, r5, #64	; 0x40
   8470e:	2309      	movs	r3, #9
   84710:	6033      	str	r3, [r6, #0]
   84712:	f04f 30ff 	mov.w	r0, #4294967295
   84716:	81a5      	strh	r5, [r4, #12]
   84718:	bd70      	pop	{r4, r5, r6, pc}
   8471a:	bf00      	nop
   8471c:	200705c0 	.word	0x200705c0

00084720 <register_fini>:
   84720:	4b02      	ldr	r3, [pc, #8]	; (8472c <register_fini+0xc>)
   84722:	b113      	cbz	r3, 8472a <register_fini+0xa>
   84724:	4802      	ldr	r0, [pc, #8]	; (84730 <register_fini+0x10>)
   84726:	f000 b805 	b.w	84734 <atexit>
   8472a:	4770      	bx	lr
   8472c:	00000000 	.word	0x00000000
   84730:	000849bd 	.word	0x000849bd

00084734 <atexit>:
   84734:	4601      	mov	r1, r0
   84736:	2000      	movs	r0, #0
   84738:	4602      	mov	r2, r0
   8473a:	4603      	mov	r3, r0
   8473c:	f001 bb24 	b.w	85d88 <__register_exitproc>

00084740 <__sflush_r>:
   84740:	898b      	ldrh	r3, [r1, #12]
   84742:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84746:	b29a      	uxth	r2, r3
   84748:	460d      	mov	r5, r1
   8474a:	0711      	lsls	r1, r2, #28
   8474c:	4680      	mov	r8, r0
   8474e:	d43c      	bmi.n	847ca <__sflush_r+0x8a>
   84750:	686a      	ldr	r2, [r5, #4]
   84752:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   84756:	2a00      	cmp	r2, #0
   84758:	81ab      	strh	r3, [r5, #12]
   8475a:	dd59      	ble.n	84810 <__sflush_r+0xd0>
   8475c:	6aac      	ldr	r4, [r5, #40]	; 0x28
   8475e:	2c00      	cmp	r4, #0
   84760:	d04b      	beq.n	847fa <__sflush_r+0xba>
   84762:	b29b      	uxth	r3, r3
   84764:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   84768:	2100      	movs	r1, #0
   8476a:	b292      	uxth	r2, r2
   8476c:	f8d8 6000 	ldr.w	r6, [r8]
   84770:	f8c8 1000 	str.w	r1, [r8]
   84774:	2a00      	cmp	r2, #0
   84776:	d04f      	beq.n	84818 <__sflush_r+0xd8>
   84778:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   8477a:	075f      	lsls	r7, r3, #29
   8477c:	d505      	bpl.n	8478a <__sflush_r+0x4a>
   8477e:	6869      	ldr	r1, [r5, #4]
   84780:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   84782:	1a52      	subs	r2, r2, r1
   84784:	b10b      	cbz	r3, 8478a <__sflush_r+0x4a>
   84786:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   84788:	1ad2      	subs	r2, r2, r3
   8478a:	4640      	mov	r0, r8
   8478c:	69e9      	ldr	r1, [r5, #28]
   8478e:	2300      	movs	r3, #0
   84790:	47a0      	blx	r4
   84792:	1c44      	adds	r4, r0, #1
   84794:	d04a      	beq.n	8482c <__sflush_r+0xec>
   84796:	89ab      	ldrh	r3, [r5, #12]
   84798:	692a      	ldr	r2, [r5, #16]
   8479a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   8479e:	b29b      	uxth	r3, r3
   847a0:	2100      	movs	r1, #0
   847a2:	602a      	str	r2, [r5, #0]
   847a4:	04da      	lsls	r2, r3, #19
   847a6:	81ab      	strh	r3, [r5, #12]
   847a8:	6069      	str	r1, [r5, #4]
   847aa:	d44c      	bmi.n	84846 <__sflush_r+0x106>
   847ac:	6b29      	ldr	r1, [r5, #48]	; 0x30
   847ae:	f8c8 6000 	str.w	r6, [r8]
   847b2:	b311      	cbz	r1, 847fa <__sflush_r+0xba>
   847b4:	f105 0340 	add.w	r3, r5, #64	; 0x40
   847b8:	4299      	cmp	r1, r3
   847ba:	d002      	beq.n	847c2 <__sflush_r+0x82>
   847bc:	4640      	mov	r0, r8
   847be:	f000 f9c3 	bl	84b48 <_free_r>
   847c2:	2000      	movs	r0, #0
   847c4:	6328      	str	r0, [r5, #48]	; 0x30
   847c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   847ca:	692e      	ldr	r6, [r5, #16]
   847cc:	b1ae      	cbz	r6, 847fa <__sflush_r+0xba>
   847ce:	0791      	lsls	r1, r2, #30
   847d0:	682c      	ldr	r4, [r5, #0]
   847d2:	bf0c      	ite	eq
   847d4:	696b      	ldreq	r3, [r5, #20]
   847d6:	2300      	movne	r3, #0
   847d8:	602e      	str	r6, [r5, #0]
   847da:	1ba4      	subs	r4, r4, r6
   847dc:	60ab      	str	r3, [r5, #8]
   847de:	e00a      	b.n	847f6 <__sflush_r+0xb6>
   847e0:	4632      	mov	r2, r6
   847e2:	4623      	mov	r3, r4
   847e4:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   847e6:	4640      	mov	r0, r8
   847e8:	69e9      	ldr	r1, [r5, #28]
   847ea:	47b8      	blx	r7
   847ec:	2800      	cmp	r0, #0
   847ee:	ebc0 0404 	rsb	r4, r0, r4
   847f2:	4406      	add	r6, r0
   847f4:	dd04      	ble.n	84800 <__sflush_r+0xc0>
   847f6:	2c00      	cmp	r4, #0
   847f8:	dcf2      	bgt.n	847e0 <__sflush_r+0xa0>
   847fa:	2000      	movs	r0, #0
   847fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84800:	89ab      	ldrh	r3, [r5, #12]
   84802:	f04f 30ff 	mov.w	r0, #4294967295
   84806:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8480a:	81ab      	strh	r3, [r5, #12]
   8480c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84810:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   84812:	2a00      	cmp	r2, #0
   84814:	dca2      	bgt.n	8475c <__sflush_r+0x1c>
   84816:	e7f0      	b.n	847fa <__sflush_r+0xba>
   84818:	2301      	movs	r3, #1
   8481a:	4640      	mov	r0, r8
   8481c:	69e9      	ldr	r1, [r5, #28]
   8481e:	47a0      	blx	r4
   84820:	1c43      	adds	r3, r0, #1
   84822:	4602      	mov	r2, r0
   84824:	d01e      	beq.n	84864 <__sflush_r+0x124>
   84826:	89ab      	ldrh	r3, [r5, #12]
   84828:	6aac      	ldr	r4, [r5, #40]	; 0x28
   8482a:	e7a6      	b.n	8477a <__sflush_r+0x3a>
   8482c:	f8d8 3000 	ldr.w	r3, [r8]
   84830:	b95b      	cbnz	r3, 8484a <__sflush_r+0x10a>
   84832:	89aa      	ldrh	r2, [r5, #12]
   84834:	6929      	ldr	r1, [r5, #16]
   84836:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   8483a:	b292      	uxth	r2, r2
   8483c:	606b      	str	r3, [r5, #4]
   8483e:	04d3      	lsls	r3, r2, #19
   84840:	81aa      	strh	r2, [r5, #12]
   84842:	6029      	str	r1, [r5, #0]
   84844:	d5b2      	bpl.n	847ac <__sflush_r+0x6c>
   84846:	6528      	str	r0, [r5, #80]	; 0x50
   84848:	e7b0      	b.n	847ac <__sflush_r+0x6c>
   8484a:	2b1d      	cmp	r3, #29
   8484c:	d001      	beq.n	84852 <__sflush_r+0x112>
   8484e:	2b16      	cmp	r3, #22
   84850:	d113      	bne.n	8487a <__sflush_r+0x13a>
   84852:	89a9      	ldrh	r1, [r5, #12]
   84854:	692b      	ldr	r3, [r5, #16]
   84856:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
   8485a:	2200      	movs	r2, #0
   8485c:	81a9      	strh	r1, [r5, #12]
   8485e:	602b      	str	r3, [r5, #0]
   84860:	606a      	str	r2, [r5, #4]
   84862:	e7a3      	b.n	847ac <__sflush_r+0x6c>
   84864:	f8d8 3000 	ldr.w	r3, [r8]
   84868:	2b00      	cmp	r3, #0
   8486a:	d0dc      	beq.n	84826 <__sflush_r+0xe6>
   8486c:	2b1d      	cmp	r3, #29
   8486e:	d001      	beq.n	84874 <__sflush_r+0x134>
   84870:	2b16      	cmp	r3, #22
   84872:	d1c5      	bne.n	84800 <__sflush_r+0xc0>
   84874:	f8c8 6000 	str.w	r6, [r8]
   84878:	e7bf      	b.n	847fa <__sflush_r+0xba>
   8487a:	89ab      	ldrh	r3, [r5, #12]
   8487c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   84880:	81ab      	strh	r3, [r5, #12]
   84882:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84886:	bf00      	nop

00084888 <_fflush_r>:
   84888:	b510      	push	{r4, lr}
   8488a:	4604      	mov	r4, r0
   8488c:	b082      	sub	sp, #8
   8488e:	b108      	cbz	r0, 84894 <_fflush_r+0xc>
   84890:	6b83      	ldr	r3, [r0, #56]	; 0x38
   84892:	b153      	cbz	r3, 848aa <_fflush_r+0x22>
   84894:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   84898:	b908      	cbnz	r0, 8489e <_fflush_r+0x16>
   8489a:	b002      	add	sp, #8
   8489c:	bd10      	pop	{r4, pc}
   8489e:	4620      	mov	r0, r4
   848a0:	b002      	add	sp, #8
   848a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   848a6:	f7ff bf4b 	b.w	84740 <__sflush_r>
   848aa:	9101      	str	r1, [sp, #4]
   848ac:	f000 f808 	bl	848c0 <__sinit>
   848b0:	9901      	ldr	r1, [sp, #4]
   848b2:	e7ef      	b.n	84894 <_fflush_r+0xc>

000848b4 <_cleanup_r>:
   848b4:	4901      	ldr	r1, [pc, #4]	; (848bc <_cleanup_r+0x8>)
   848b6:	f000 bb9f 	b.w	84ff8 <_fwalk>
   848ba:	bf00      	nop
   848bc:	00085ed5 	.word	0x00085ed5

000848c0 <__sinit>:
   848c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   848c4:	6b84      	ldr	r4, [r0, #56]	; 0x38
   848c6:	b083      	sub	sp, #12
   848c8:	4607      	mov	r7, r0
   848ca:	2c00      	cmp	r4, #0
   848cc:	d165      	bne.n	8499a <__sinit+0xda>
   848ce:	687d      	ldr	r5, [r7, #4]
   848d0:	4833      	ldr	r0, [pc, #204]	; (849a0 <__sinit+0xe0>)
   848d2:	2304      	movs	r3, #4
   848d4:	2103      	movs	r1, #3
   848d6:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   848da:	63f8      	str	r0, [r7, #60]	; 0x3c
   848dc:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   848e0:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   848e4:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   848e8:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   848ec:	81ab      	strh	r3, [r5, #12]
   848ee:	602c      	str	r4, [r5, #0]
   848f0:	606c      	str	r4, [r5, #4]
   848f2:	60ac      	str	r4, [r5, #8]
   848f4:	666c      	str	r4, [r5, #100]	; 0x64
   848f6:	81ec      	strh	r4, [r5, #14]
   848f8:	612c      	str	r4, [r5, #16]
   848fa:	616c      	str	r4, [r5, #20]
   848fc:	61ac      	str	r4, [r5, #24]
   848fe:	4621      	mov	r1, r4
   84900:	2208      	movs	r2, #8
   84902:	f7fe fe9b 	bl	8363c <memset>
   84906:	f8df b09c 	ldr.w	fp, [pc, #156]	; 849a4 <__sinit+0xe4>
   8490a:	68be      	ldr	r6, [r7, #8]
   8490c:	f8df a098 	ldr.w	sl, [pc, #152]	; 849a8 <__sinit+0xe8>
   84910:	f8df 9098 	ldr.w	r9, [pc, #152]	; 849ac <__sinit+0xec>
   84914:	f8df 8098 	ldr.w	r8, [pc, #152]	; 849b0 <__sinit+0xf0>
   84918:	2301      	movs	r3, #1
   8491a:	2209      	movs	r2, #9
   8491c:	61ed      	str	r5, [r5, #28]
   8491e:	f8c5 b020 	str.w	fp, [r5, #32]
   84922:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   84926:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   8492a:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   8492e:	4621      	mov	r1, r4
   84930:	81f3      	strh	r3, [r6, #14]
   84932:	81b2      	strh	r2, [r6, #12]
   84934:	6034      	str	r4, [r6, #0]
   84936:	6074      	str	r4, [r6, #4]
   84938:	60b4      	str	r4, [r6, #8]
   8493a:	6674      	str	r4, [r6, #100]	; 0x64
   8493c:	6134      	str	r4, [r6, #16]
   8493e:	6174      	str	r4, [r6, #20]
   84940:	61b4      	str	r4, [r6, #24]
   84942:	2208      	movs	r2, #8
   84944:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   84948:	9301      	str	r3, [sp, #4]
   8494a:	f7fe fe77 	bl	8363c <memset>
   8494e:	68fd      	ldr	r5, [r7, #12]
   84950:	2012      	movs	r0, #18
   84952:	2202      	movs	r2, #2
   84954:	61f6      	str	r6, [r6, #28]
   84956:	f8c6 b020 	str.w	fp, [r6, #32]
   8495a:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   8495e:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   84962:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   84966:	4621      	mov	r1, r4
   84968:	81a8      	strh	r0, [r5, #12]
   8496a:	81ea      	strh	r2, [r5, #14]
   8496c:	602c      	str	r4, [r5, #0]
   8496e:	606c      	str	r4, [r5, #4]
   84970:	60ac      	str	r4, [r5, #8]
   84972:	666c      	str	r4, [r5, #100]	; 0x64
   84974:	612c      	str	r4, [r5, #16]
   84976:	616c      	str	r4, [r5, #20]
   84978:	61ac      	str	r4, [r5, #24]
   8497a:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   8497e:	2208      	movs	r2, #8
   84980:	f7fe fe5c 	bl	8363c <memset>
   84984:	9b01      	ldr	r3, [sp, #4]
   84986:	61ed      	str	r5, [r5, #28]
   84988:	f8c5 b020 	str.w	fp, [r5, #32]
   8498c:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   84990:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   84994:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   84998:	63bb      	str	r3, [r7, #56]	; 0x38
   8499a:	b003      	add	sp, #12
   8499c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   849a0:	000848b5 	.word	0x000848b5
   849a4:	00085bc9 	.word	0x00085bc9
   849a8:	00085bed 	.word	0x00085bed
   849ac:	00085c25 	.word	0x00085c25
   849b0:	00085c45 	.word	0x00085c45

000849b4 <__sfp_lock_acquire>:
   849b4:	4770      	bx	lr
   849b6:	bf00      	nop

000849b8 <__sfp_lock_release>:
   849b8:	4770      	bx	lr
   849ba:	bf00      	nop

000849bc <__libc_fini_array>:
   849bc:	b538      	push	{r3, r4, r5, lr}
   849be:	4d09      	ldr	r5, [pc, #36]	; (849e4 <__libc_fini_array+0x28>)
   849c0:	4c09      	ldr	r4, [pc, #36]	; (849e8 <__libc_fini_array+0x2c>)
   849c2:	1b64      	subs	r4, r4, r5
   849c4:	10a4      	asrs	r4, r4, #2
   849c6:	bf18      	it	ne
   849c8:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
   849cc:	d005      	beq.n	849da <__libc_fini_array+0x1e>
   849ce:	3c01      	subs	r4, #1
   849d0:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   849d4:	4798      	blx	r3
   849d6:	2c00      	cmp	r4, #0
   849d8:	d1f9      	bne.n	849ce <__libc_fini_array+0x12>
   849da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   849de:	f001 bdb5 	b.w	8654c <_fini>
   849e2:	bf00      	nop
   849e4:	00086558 	.word	0x00086558
   849e8:	0008655c 	.word	0x0008655c

000849ec <_fputwc_r>:
   849ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   849f0:	8993      	ldrh	r3, [r2, #12]
   849f2:	460f      	mov	r7, r1
   849f4:	0499      	lsls	r1, r3, #18
   849f6:	b082      	sub	sp, #8
   849f8:	4614      	mov	r4, r2
   849fa:	4680      	mov	r8, r0
   849fc:	d406      	bmi.n	84a0c <_fputwc_r+0x20>
   849fe:	6e52      	ldr	r2, [r2, #100]	; 0x64
   84a00:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   84a04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   84a08:	81a3      	strh	r3, [r4, #12]
   84a0a:	6662      	str	r2, [r4, #100]	; 0x64
   84a0c:	f000 fb1c 	bl	85048 <__locale_mb_cur_max>
   84a10:	2801      	cmp	r0, #1
   84a12:	d03e      	beq.n	84a92 <_fputwc_r+0xa6>
   84a14:	463a      	mov	r2, r7
   84a16:	4640      	mov	r0, r8
   84a18:	a901      	add	r1, sp, #4
   84a1a:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   84a1e:	f001 f969 	bl	85cf4 <_wcrtomb_r>
   84a22:	1c42      	adds	r2, r0, #1
   84a24:	4606      	mov	r6, r0
   84a26:	d02d      	beq.n	84a84 <_fputwc_r+0x98>
   84a28:	2800      	cmp	r0, #0
   84a2a:	d03a      	beq.n	84aa2 <_fputwc_r+0xb6>
   84a2c:	f89d 1004 	ldrb.w	r1, [sp, #4]
   84a30:	2500      	movs	r5, #0
   84a32:	e009      	b.n	84a48 <_fputwc_r+0x5c>
   84a34:	6823      	ldr	r3, [r4, #0]
   84a36:	7019      	strb	r1, [r3, #0]
   84a38:	6823      	ldr	r3, [r4, #0]
   84a3a:	3301      	adds	r3, #1
   84a3c:	6023      	str	r3, [r4, #0]
   84a3e:	3501      	adds	r5, #1
   84a40:	42b5      	cmp	r5, r6
   84a42:	d22e      	bcs.n	84aa2 <_fputwc_r+0xb6>
   84a44:	ab01      	add	r3, sp, #4
   84a46:	5ce9      	ldrb	r1, [r5, r3]
   84a48:	68a3      	ldr	r3, [r4, #8]
   84a4a:	3b01      	subs	r3, #1
   84a4c:	2b00      	cmp	r3, #0
   84a4e:	60a3      	str	r3, [r4, #8]
   84a50:	daf0      	bge.n	84a34 <_fputwc_r+0x48>
   84a52:	69a2      	ldr	r2, [r4, #24]
   84a54:	4293      	cmp	r3, r2
   84a56:	db06      	blt.n	84a66 <_fputwc_r+0x7a>
   84a58:	6823      	ldr	r3, [r4, #0]
   84a5a:	7019      	strb	r1, [r3, #0]
   84a5c:	6823      	ldr	r3, [r4, #0]
   84a5e:	7819      	ldrb	r1, [r3, #0]
   84a60:	3301      	adds	r3, #1
   84a62:	290a      	cmp	r1, #10
   84a64:	d1ea      	bne.n	84a3c <_fputwc_r+0x50>
   84a66:	4640      	mov	r0, r8
   84a68:	4622      	mov	r2, r4
   84a6a:	f001 f8ef 	bl	85c4c <__swbuf_r>
   84a6e:	f1b0 33ff 	subs.w	r3, r0, #4294967295
   84a72:	4258      	negs	r0, r3
   84a74:	4158      	adcs	r0, r3
   84a76:	2800      	cmp	r0, #0
   84a78:	d0e1      	beq.n	84a3e <_fputwc_r+0x52>
   84a7a:	f04f 30ff 	mov.w	r0, #4294967295
   84a7e:	b002      	add	sp, #8
   84a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84a84:	89a3      	ldrh	r3, [r4, #12]
   84a86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   84a8a:	81a3      	strh	r3, [r4, #12]
   84a8c:	b002      	add	sp, #8
   84a8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84a92:	1e7b      	subs	r3, r7, #1
   84a94:	2bfe      	cmp	r3, #254	; 0xfe
   84a96:	d8bd      	bhi.n	84a14 <_fputwc_r+0x28>
   84a98:	b2f9      	uxtb	r1, r7
   84a9a:	4606      	mov	r6, r0
   84a9c:	f88d 1004 	strb.w	r1, [sp, #4]
   84aa0:	e7c6      	b.n	84a30 <_fputwc_r+0x44>
   84aa2:	4638      	mov	r0, r7
   84aa4:	b002      	add	sp, #8
   84aa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84aaa:	bf00      	nop

00084aac <_malloc_trim_r>:
   84aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84aae:	4d23      	ldr	r5, [pc, #140]	; (84b3c <_malloc_trim_r+0x90>)
   84ab0:	460f      	mov	r7, r1
   84ab2:	4604      	mov	r4, r0
   84ab4:	f000 fe92 	bl	857dc <__malloc_lock>
   84ab8:	68ab      	ldr	r3, [r5, #8]
   84aba:	685e      	ldr	r6, [r3, #4]
   84abc:	f026 0603 	bic.w	r6, r6, #3
   84ac0:	1bf1      	subs	r1, r6, r7
   84ac2:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   84ac6:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   84aca:	f021 010f 	bic.w	r1, r1, #15
   84ace:	f5a1 5780 	sub.w	r7, r1, #4096	; 0x1000
   84ad2:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
   84ad6:	db07      	blt.n	84ae8 <_malloc_trim_r+0x3c>
   84ad8:	4620      	mov	r0, r4
   84ada:	2100      	movs	r1, #0
   84adc:	f001 f862 	bl	85ba4 <_sbrk_r>
   84ae0:	68ab      	ldr	r3, [r5, #8]
   84ae2:	4433      	add	r3, r6
   84ae4:	4298      	cmp	r0, r3
   84ae6:	d004      	beq.n	84af2 <_malloc_trim_r+0x46>
   84ae8:	4620      	mov	r0, r4
   84aea:	f000 fe79 	bl	857e0 <__malloc_unlock>
   84aee:	2000      	movs	r0, #0
   84af0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84af2:	4620      	mov	r0, r4
   84af4:	4279      	negs	r1, r7
   84af6:	f001 f855 	bl	85ba4 <_sbrk_r>
   84afa:	3001      	adds	r0, #1
   84afc:	d00d      	beq.n	84b1a <_malloc_trim_r+0x6e>
   84afe:	4b10      	ldr	r3, [pc, #64]	; (84b40 <_malloc_trim_r+0x94>)
   84b00:	68aa      	ldr	r2, [r5, #8]
   84b02:	6819      	ldr	r1, [r3, #0]
   84b04:	1bf6      	subs	r6, r6, r7
   84b06:	f046 0601 	orr.w	r6, r6, #1
   84b0a:	4620      	mov	r0, r4
   84b0c:	1bc9      	subs	r1, r1, r7
   84b0e:	6056      	str	r6, [r2, #4]
   84b10:	6019      	str	r1, [r3, #0]
   84b12:	f000 fe65 	bl	857e0 <__malloc_unlock>
   84b16:	2001      	movs	r0, #1
   84b18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84b1a:	4620      	mov	r0, r4
   84b1c:	2100      	movs	r1, #0
   84b1e:	f001 f841 	bl	85ba4 <_sbrk_r>
   84b22:	68ab      	ldr	r3, [r5, #8]
   84b24:	1ac2      	subs	r2, r0, r3
   84b26:	2a0f      	cmp	r2, #15
   84b28:	ddde      	ble.n	84ae8 <_malloc_trim_r+0x3c>
   84b2a:	4d06      	ldr	r5, [pc, #24]	; (84b44 <_malloc_trim_r+0x98>)
   84b2c:	4904      	ldr	r1, [pc, #16]	; (84b40 <_malloc_trim_r+0x94>)
   84b2e:	682d      	ldr	r5, [r5, #0]
   84b30:	f042 0201 	orr.w	r2, r2, #1
   84b34:	1b40      	subs	r0, r0, r5
   84b36:	605a      	str	r2, [r3, #4]
   84b38:	6008      	str	r0, [r1, #0]
   84b3a:	e7d5      	b.n	84ae8 <_malloc_trim_r+0x3c>
   84b3c:	200705e8 	.word	0x200705e8
   84b40:	2007aca0 	.word	0x2007aca0
   84b44:	200709f4 	.word	0x200709f4

00084b48 <_free_r>:
   84b48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84b4c:	460d      	mov	r5, r1
   84b4e:	4606      	mov	r6, r0
   84b50:	2900      	cmp	r1, #0
   84b52:	d055      	beq.n	84c00 <_free_r+0xb8>
   84b54:	f000 fe42 	bl	857dc <__malloc_lock>
   84b58:	f855 1c04 	ldr.w	r1, [r5, #-4]
   84b5c:	f8df c170 	ldr.w	ip, [pc, #368]	; 84cd0 <_free_r+0x188>
   84b60:	f1a5 0408 	sub.w	r4, r5, #8
   84b64:	f021 0301 	bic.w	r3, r1, #1
   84b68:	18e2      	adds	r2, r4, r3
   84b6a:	f8dc 0008 	ldr.w	r0, [ip, #8]
   84b6e:	6857      	ldr	r7, [r2, #4]
   84b70:	4290      	cmp	r0, r2
   84b72:	f027 0703 	bic.w	r7, r7, #3
   84b76:	d068      	beq.n	84c4a <_free_r+0x102>
   84b78:	f011 0101 	ands.w	r1, r1, #1
   84b7c:	6057      	str	r7, [r2, #4]
   84b7e:	d032      	beq.n	84be6 <_free_r+0x9e>
   84b80:	2100      	movs	r1, #0
   84b82:	19d0      	adds	r0, r2, r7
   84b84:	6840      	ldr	r0, [r0, #4]
   84b86:	07c0      	lsls	r0, r0, #31
   84b88:	d406      	bmi.n	84b98 <_free_r+0x50>
   84b8a:	443b      	add	r3, r7
   84b8c:	6890      	ldr	r0, [r2, #8]
   84b8e:	2900      	cmp	r1, #0
   84b90:	d04d      	beq.n	84c2e <_free_r+0xe6>
   84b92:	68d2      	ldr	r2, [r2, #12]
   84b94:	60c2      	str	r2, [r0, #12]
   84b96:	6090      	str	r0, [r2, #8]
   84b98:	f043 0201 	orr.w	r2, r3, #1
   84b9c:	6062      	str	r2, [r4, #4]
   84b9e:	50e3      	str	r3, [r4, r3]
   84ba0:	b9e1      	cbnz	r1, 84bdc <_free_r+0x94>
   84ba2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   84ba6:	d32d      	bcc.n	84c04 <_free_r+0xbc>
   84ba8:	0a5a      	lsrs	r2, r3, #9
   84baa:	2a04      	cmp	r2, #4
   84bac:	d869      	bhi.n	84c82 <_free_r+0x13a>
   84bae:	0998      	lsrs	r0, r3, #6
   84bb0:	3038      	adds	r0, #56	; 0x38
   84bb2:	0041      	lsls	r1, r0, #1
   84bb4:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
   84bb8:	f8dc 2008 	ldr.w	r2, [ip, #8]
   84bbc:	4944      	ldr	r1, [pc, #272]	; (84cd0 <_free_r+0x188>)
   84bbe:	4562      	cmp	r2, ip
   84bc0:	d065      	beq.n	84c8e <_free_r+0x146>
   84bc2:	6851      	ldr	r1, [r2, #4]
   84bc4:	f021 0103 	bic.w	r1, r1, #3
   84bc8:	428b      	cmp	r3, r1
   84bca:	d202      	bcs.n	84bd2 <_free_r+0x8a>
   84bcc:	6892      	ldr	r2, [r2, #8]
   84bce:	4594      	cmp	ip, r2
   84bd0:	d1f7      	bne.n	84bc2 <_free_r+0x7a>
   84bd2:	68d3      	ldr	r3, [r2, #12]
   84bd4:	60e3      	str	r3, [r4, #12]
   84bd6:	60a2      	str	r2, [r4, #8]
   84bd8:	609c      	str	r4, [r3, #8]
   84bda:	60d4      	str	r4, [r2, #12]
   84bdc:	4630      	mov	r0, r6
   84bde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   84be2:	f000 bdfd 	b.w	857e0 <__malloc_unlock>
   84be6:	f855 5c08 	ldr.w	r5, [r5, #-8]
   84bea:	f10c 0808 	add.w	r8, ip, #8
   84bee:	1b64      	subs	r4, r4, r5
   84bf0:	68a0      	ldr	r0, [r4, #8]
   84bf2:	442b      	add	r3, r5
   84bf4:	4540      	cmp	r0, r8
   84bf6:	d042      	beq.n	84c7e <_free_r+0x136>
   84bf8:	68e5      	ldr	r5, [r4, #12]
   84bfa:	60c5      	str	r5, [r0, #12]
   84bfc:	60a8      	str	r0, [r5, #8]
   84bfe:	e7c0      	b.n	84b82 <_free_r+0x3a>
   84c00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84c04:	08db      	lsrs	r3, r3, #3
   84c06:	109a      	asrs	r2, r3, #2
   84c08:	2001      	movs	r0, #1
   84c0a:	4090      	lsls	r0, r2
   84c0c:	f8dc 1004 	ldr.w	r1, [ip, #4]
   84c10:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
   84c14:	689a      	ldr	r2, [r3, #8]
   84c16:	4301      	orrs	r1, r0
   84c18:	60a2      	str	r2, [r4, #8]
   84c1a:	60e3      	str	r3, [r4, #12]
   84c1c:	f8cc 1004 	str.w	r1, [ip, #4]
   84c20:	4630      	mov	r0, r6
   84c22:	609c      	str	r4, [r3, #8]
   84c24:	60d4      	str	r4, [r2, #12]
   84c26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   84c2a:	f000 bdd9 	b.w	857e0 <__malloc_unlock>
   84c2e:	4d29      	ldr	r5, [pc, #164]	; (84cd4 <_free_r+0x18c>)
   84c30:	42a8      	cmp	r0, r5
   84c32:	d1ae      	bne.n	84b92 <_free_r+0x4a>
   84c34:	f043 0201 	orr.w	r2, r3, #1
   84c38:	f8cc 4014 	str.w	r4, [ip, #20]
   84c3c:	f8cc 4010 	str.w	r4, [ip, #16]
   84c40:	60e0      	str	r0, [r4, #12]
   84c42:	60a0      	str	r0, [r4, #8]
   84c44:	6062      	str	r2, [r4, #4]
   84c46:	50e3      	str	r3, [r4, r3]
   84c48:	e7c8      	b.n	84bdc <_free_r+0x94>
   84c4a:	441f      	add	r7, r3
   84c4c:	07cb      	lsls	r3, r1, #31
   84c4e:	d407      	bmi.n	84c60 <_free_r+0x118>
   84c50:	f855 1c08 	ldr.w	r1, [r5, #-8]
   84c54:	1a64      	subs	r4, r4, r1
   84c56:	68e3      	ldr	r3, [r4, #12]
   84c58:	68a2      	ldr	r2, [r4, #8]
   84c5a:	440f      	add	r7, r1
   84c5c:	60d3      	str	r3, [r2, #12]
   84c5e:	609a      	str	r2, [r3, #8]
   84c60:	4b1d      	ldr	r3, [pc, #116]	; (84cd8 <_free_r+0x190>)
   84c62:	f047 0201 	orr.w	r2, r7, #1
   84c66:	681b      	ldr	r3, [r3, #0]
   84c68:	6062      	str	r2, [r4, #4]
   84c6a:	429f      	cmp	r7, r3
   84c6c:	f8cc 4008 	str.w	r4, [ip, #8]
   84c70:	d3b4      	bcc.n	84bdc <_free_r+0x94>
   84c72:	4b1a      	ldr	r3, [pc, #104]	; (84cdc <_free_r+0x194>)
   84c74:	4630      	mov	r0, r6
   84c76:	6819      	ldr	r1, [r3, #0]
   84c78:	f7ff ff18 	bl	84aac <_malloc_trim_r>
   84c7c:	e7ae      	b.n	84bdc <_free_r+0x94>
   84c7e:	2101      	movs	r1, #1
   84c80:	e77f      	b.n	84b82 <_free_r+0x3a>
   84c82:	2a14      	cmp	r2, #20
   84c84:	d80b      	bhi.n	84c9e <_free_r+0x156>
   84c86:	f102 005b 	add.w	r0, r2, #91	; 0x5b
   84c8a:	0041      	lsls	r1, r0, #1
   84c8c:	e792      	b.n	84bb4 <_free_r+0x6c>
   84c8e:	1080      	asrs	r0, r0, #2
   84c90:	2501      	movs	r5, #1
   84c92:	4085      	lsls	r5, r0
   84c94:	6848      	ldr	r0, [r1, #4]
   84c96:	4613      	mov	r3, r2
   84c98:	4328      	orrs	r0, r5
   84c9a:	6048      	str	r0, [r1, #4]
   84c9c:	e79a      	b.n	84bd4 <_free_r+0x8c>
   84c9e:	2a54      	cmp	r2, #84	; 0x54
   84ca0:	d803      	bhi.n	84caa <_free_r+0x162>
   84ca2:	0b18      	lsrs	r0, r3, #12
   84ca4:	306e      	adds	r0, #110	; 0x6e
   84ca6:	0041      	lsls	r1, r0, #1
   84ca8:	e784      	b.n	84bb4 <_free_r+0x6c>
   84caa:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   84cae:	d803      	bhi.n	84cb8 <_free_r+0x170>
   84cb0:	0bd8      	lsrs	r0, r3, #15
   84cb2:	3077      	adds	r0, #119	; 0x77
   84cb4:	0041      	lsls	r1, r0, #1
   84cb6:	e77d      	b.n	84bb4 <_free_r+0x6c>
   84cb8:	f240 5154 	movw	r1, #1364	; 0x554
   84cbc:	428a      	cmp	r2, r1
   84cbe:	d803      	bhi.n	84cc8 <_free_r+0x180>
   84cc0:	0c98      	lsrs	r0, r3, #18
   84cc2:	307c      	adds	r0, #124	; 0x7c
   84cc4:	0041      	lsls	r1, r0, #1
   84cc6:	e775      	b.n	84bb4 <_free_r+0x6c>
   84cc8:	21fc      	movs	r1, #252	; 0xfc
   84cca:	207e      	movs	r0, #126	; 0x7e
   84ccc:	e772      	b.n	84bb4 <_free_r+0x6c>
   84cce:	bf00      	nop
   84cd0:	200705e8 	.word	0x200705e8
   84cd4:	200705f0 	.word	0x200705f0
   84cd8:	200709f0 	.word	0x200709f0
   84cdc:	2007ac9c 	.word	0x2007ac9c

00084ce0 <__sfvwrite_r>:
   84ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84ce4:	6893      	ldr	r3, [r2, #8]
   84ce6:	b083      	sub	sp, #12
   84ce8:	4616      	mov	r6, r2
   84cea:	4681      	mov	r9, r0
   84cec:	460c      	mov	r4, r1
   84cee:	b32b      	cbz	r3, 84d3c <__sfvwrite_r+0x5c>
   84cf0:	898b      	ldrh	r3, [r1, #12]
   84cf2:	0719      	lsls	r1, r3, #28
   84cf4:	d526      	bpl.n	84d44 <__sfvwrite_r+0x64>
   84cf6:	6922      	ldr	r2, [r4, #16]
   84cf8:	b322      	cbz	r2, 84d44 <__sfvwrite_r+0x64>
   84cfa:	f003 0202 	and.w	r2, r3, #2
   84cfe:	b292      	uxth	r2, r2
   84d00:	6835      	ldr	r5, [r6, #0]
   84d02:	2a00      	cmp	r2, #0
   84d04:	d02c      	beq.n	84d60 <__sfvwrite_r+0x80>
   84d06:	f04f 0a00 	mov.w	sl, #0
   84d0a:	f8df b2e8 	ldr.w	fp, [pc, #744]	; 84ff4 <__sfvwrite_r+0x314>
   84d0e:	46d0      	mov	r8, sl
   84d10:	45d8      	cmp	r8, fp
   84d12:	bf34      	ite	cc
   84d14:	4643      	movcc	r3, r8
   84d16:	465b      	movcs	r3, fp
   84d18:	4652      	mov	r2, sl
   84d1a:	4648      	mov	r0, r9
   84d1c:	f1b8 0f00 	cmp.w	r8, #0
   84d20:	d04f      	beq.n	84dc2 <__sfvwrite_r+0xe2>
   84d22:	69e1      	ldr	r1, [r4, #28]
   84d24:	6a67      	ldr	r7, [r4, #36]	; 0x24
   84d26:	47b8      	blx	r7
   84d28:	2800      	cmp	r0, #0
   84d2a:	dd56      	ble.n	84dda <__sfvwrite_r+0xfa>
   84d2c:	68b3      	ldr	r3, [r6, #8]
   84d2e:	4482      	add	sl, r0
   84d30:	1a1b      	subs	r3, r3, r0
   84d32:	ebc0 0808 	rsb	r8, r0, r8
   84d36:	60b3      	str	r3, [r6, #8]
   84d38:	2b00      	cmp	r3, #0
   84d3a:	d1e9      	bne.n	84d10 <__sfvwrite_r+0x30>
   84d3c:	2000      	movs	r0, #0
   84d3e:	b003      	add	sp, #12
   84d40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84d44:	4648      	mov	r0, r9
   84d46:	4621      	mov	r1, r4
   84d48:	f7ff fc88 	bl	8465c <__swsetup_r>
   84d4c:	2800      	cmp	r0, #0
   84d4e:	f040 8148 	bne.w	84fe2 <__sfvwrite_r+0x302>
   84d52:	89a3      	ldrh	r3, [r4, #12]
   84d54:	6835      	ldr	r5, [r6, #0]
   84d56:	f003 0202 	and.w	r2, r3, #2
   84d5a:	b292      	uxth	r2, r2
   84d5c:	2a00      	cmp	r2, #0
   84d5e:	d1d2      	bne.n	84d06 <__sfvwrite_r+0x26>
   84d60:	f013 0a01 	ands.w	sl, r3, #1
   84d64:	d142      	bne.n	84dec <__sfvwrite_r+0x10c>
   84d66:	46d0      	mov	r8, sl
   84d68:	f1b8 0f00 	cmp.w	r8, #0
   84d6c:	d023      	beq.n	84db6 <__sfvwrite_r+0xd6>
   84d6e:	059a      	lsls	r2, r3, #22
   84d70:	68a7      	ldr	r7, [r4, #8]
   84d72:	d576      	bpl.n	84e62 <__sfvwrite_r+0x182>
   84d74:	45b8      	cmp	r8, r7
   84d76:	f0c0 80a4 	bcc.w	84ec2 <__sfvwrite_r+0x1e2>
   84d7a:	f413 6f90 	tst.w	r3, #1152	; 0x480
   84d7e:	f040 80b2 	bne.w	84ee6 <__sfvwrite_r+0x206>
   84d82:	6820      	ldr	r0, [r4, #0]
   84d84:	46bb      	mov	fp, r7
   84d86:	4651      	mov	r1, sl
   84d88:	465a      	mov	r2, fp
   84d8a:	f000 fcc1 	bl	85710 <memmove>
   84d8e:	68a2      	ldr	r2, [r4, #8]
   84d90:	6821      	ldr	r1, [r4, #0]
   84d92:	1bd2      	subs	r2, r2, r7
   84d94:	eb01 030b 	add.w	r3, r1, fp
   84d98:	60a2      	str	r2, [r4, #8]
   84d9a:	6023      	str	r3, [r4, #0]
   84d9c:	4642      	mov	r2, r8
   84d9e:	68b3      	ldr	r3, [r6, #8]
   84da0:	4492      	add	sl, r2
   84da2:	1a9b      	subs	r3, r3, r2
   84da4:	ebc2 0808 	rsb	r8, r2, r8
   84da8:	60b3      	str	r3, [r6, #8]
   84daa:	2b00      	cmp	r3, #0
   84dac:	d0c6      	beq.n	84d3c <__sfvwrite_r+0x5c>
   84dae:	89a3      	ldrh	r3, [r4, #12]
   84db0:	f1b8 0f00 	cmp.w	r8, #0
   84db4:	d1db      	bne.n	84d6e <__sfvwrite_r+0x8e>
   84db6:	f8d5 a000 	ldr.w	sl, [r5]
   84dba:	f8d5 8004 	ldr.w	r8, [r5, #4]
   84dbe:	3508      	adds	r5, #8
   84dc0:	e7d2      	b.n	84d68 <__sfvwrite_r+0x88>
   84dc2:	f8d5 a000 	ldr.w	sl, [r5]
   84dc6:	f8d5 8004 	ldr.w	r8, [r5, #4]
   84dca:	3508      	adds	r5, #8
   84dcc:	e7a0      	b.n	84d10 <__sfvwrite_r+0x30>
   84dce:	4648      	mov	r0, r9
   84dd0:	4621      	mov	r1, r4
   84dd2:	f7ff fd59 	bl	84888 <_fflush_r>
   84dd6:	2800      	cmp	r0, #0
   84dd8:	d059      	beq.n	84e8e <__sfvwrite_r+0x1ae>
   84dda:	89a3      	ldrh	r3, [r4, #12]
   84ddc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   84de0:	f04f 30ff 	mov.w	r0, #4294967295
   84de4:	81a3      	strh	r3, [r4, #12]
   84de6:	b003      	add	sp, #12
   84de8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84dec:	4692      	mov	sl, r2
   84dee:	9201      	str	r2, [sp, #4]
   84df0:	4693      	mov	fp, r2
   84df2:	4690      	mov	r8, r2
   84df4:	f1b8 0f00 	cmp.w	r8, #0
   84df8:	d02b      	beq.n	84e52 <__sfvwrite_r+0x172>
   84dfa:	9f01      	ldr	r7, [sp, #4]
   84dfc:	2f00      	cmp	r7, #0
   84dfe:	d064      	beq.n	84eca <__sfvwrite_r+0x1ea>
   84e00:	6820      	ldr	r0, [r4, #0]
   84e02:	6921      	ldr	r1, [r4, #16]
   84e04:	45c2      	cmp	sl, r8
   84e06:	bf34      	ite	cc
   84e08:	4653      	movcc	r3, sl
   84e0a:	4643      	movcs	r3, r8
   84e0c:	4288      	cmp	r0, r1
   84e0e:	461f      	mov	r7, r3
   84e10:	f8d4 c008 	ldr.w	ip, [r4, #8]
   84e14:	6962      	ldr	r2, [r4, #20]
   84e16:	d903      	bls.n	84e20 <__sfvwrite_r+0x140>
   84e18:	4494      	add	ip, r2
   84e1a:	4563      	cmp	r3, ip
   84e1c:	f300 80ae 	bgt.w	84f7c <__sfvwrite_r+0x29c>
   84e20:	4293      	cmp	r3, r2
   84e22:	db36      	blt.n	84e92 <__sfvwrite_r+0x1b2>
   84e24:	4613      	mov	r3, r2
   84e26:	6a67      	ldr	r7, [r4, #36]	; 0x24
   84e28:	4648      	mov	r0, r9
   84e2a:	69e1      	ldr	r1, [r4, #28]
   84e2c:	465a      	mov	r2, fp
   84e2e:	47b8      	blx	r7
   84e30:	1e07      	subs	r7, r0, #0
   84e32:	ddd2      	ble.n	84dda <__sfvwrite_r+0xfa>
   84e34:	ebba 0a07 	subs.w	sl, sl, r7
   84e38:	d03a      	beq.n	84eb0 <__sfvwrite_r+0x1d0>
   84e3a:	68b3      	ldr	r3, [r6, #8]
   84e3c:	44bb      	add	fp, r7
   84e3e:	1bdb      	subs	r3, r3, r7
   84e40:	ebc7 0808 	rsb	r8, r7, r8
   84e44:	60b3      	str	r3, [r6, #8]
   84e46:	2b00      	cmp	r3, #0
   84e48:	f43f af78 	beq.w	84d3c <__sfvwrite_r+0x5c>
   84e4c:	f1b8 0f00 	cmp.w	r8, #0
   84e50:	d1d3      	bne.n	84dfa <__sfvwrite_r+0x11a>
   84e52:	2700      	movs	r7, #0
   84e54:	f8d5 b000 	ldr.w	fp, [r5]
   84e58:	f8d5 8004 	ldr.w	r8, [r5, #4]
   84e5c:	9701      	str	r7, [sp, #4]
   84e5e:	3508      	adds	r5, #8
   84e60:	e7c8      	b.n	84df4 <__sfvwrite_r+0x114>
   84e62:	6820      	ldr	r0, [r4, #0]
   84e64:	6923      	ldr	r3, [r4, #16]
   84e66:	4298      	cmp	r0, r3
   84e68:	d802      	bhi.n	84e70 <__sfvwrite_r+0x190>
   84e6a:	6963      	ldr	r3, [r4, #20]
   84e6c:	4598      	cmp	r8, r3
   84e6e:	d272      	bcs.n	84f56 <__sfvwrite_r+0x276>
   84e70:	45b8      	cmp	r8, r7
   84e72:	bf38      	it	cc
   84e74:	4647      	movcc	r7, r8
   84e76:	463a      	mov	r2, r7
   84e78:	4651      	mov	r1, sl
   84e7a:	f000 fc49 	bl	85710 <memmove>
   84e7e:	68a3      	ldr	r3, [r4, #8]
   84e80:	6822      	ldr	r2, [r4, #0]
   84e82:	1bdb      	subs	r3, r3, r7
   84e84:	443a      	add	r2, r7
   84e86:	60a3      	str	r3, [r4, #8]
   84e88:	6022      	str	r2, [r4, #0]
   84e8a:	2b00      	cmp	r3, #0
   84e8c:	d09f      	beq.n	84dce <__sfvwrite_r+0xee>
   84e8e:	463a      	mov	r2, r7
   84e90:	e785      	b.n	84d9e <__sfvwrite_r+0xbe>
   84e92:	461a      	mov	r2, r3
   84e94:	4659      	mov	r1, fp
   84e96:	9300      	str	r3, [sp, #0]
   84e98:	f000 fc3a 	bl	85710 <memmove>
   84e9c:	9b00      	ldr	r3, [sp, #0]
   84e9e:	68a1      	ldr	r1, [r4, #8]
   84ea0:	6822      	ldr	r2, [r4, #0]
   84ea2:	1ac9      	subs	r1, r1, r3
   84ea4:	ebba 0a07 	subs.w	sl, sl, r7
   84ea8:	4413      	add	r3, r2
   84eaa:	60a1      	str	r1, [r4, #8]
   84eac:	6023      	str	r3, [r4, #0]
   84eae:	d1c4      	bne.n	84e3a <__sfvwrite_r+0x15a>
   84eb0:	4648      	mov	r0, r9
   84eb2:	4621      	mov	r1, r4
   84eb4:	f7ff fce8 	bl	84888 <_fflush_r>
   84eb8:	2800      	cmp	r0, #0
   84eba:	d18e      	bne.n	84dda <__sfvwrite_r+0xfa>
   84ebc:	f8cd a004 	str.w	sl, [sp, #4]
   84ec0:	e7bb      	b.n	84e3a <__sfvwrite_r+0x15a>
   84ec2:	6820      	ldr	r0, [r4, #0]
   84ec4:	4647      	mov	r7, r8
   84ec6:	46c3      	mov	fp, r8
   84ec8:	e75d      	b.n	84d86 <__sfvwrite_r+0xa6>
   84eca:	4658      	mov	r0, fp
   84ecc:	210a      	movs	r1, #10
   84ece:	4642      	mov	r2, r8
   84ed0:	f000 fbd4 	bl	8567c <memchr>
   84ed4:	2800      	cmp	r0, #0
   84ed6:	d07f      	beq.n	84fd8 <__sfvwrite_r+0x2f8>
   84ed8:	f100 0a01 	add.w	sl, r0, #1
   84edc:	2701      	movs	r7, #1
   84ede:	ebcb 0a0a 	rsb	sl, fp, sl
   84ee2:	9701      	str	r7, [sp, #4]
   84ee4:	e78c      	b.n	84e00 <__sfvwrite_r+0x120>
   84ee6:	6822      	ldr	r2, [r4, #0]
   84ee8:	6921      	ldr	r1, [r4, #16]
   84eea:	6967      	ldr	r7, [r4, #20]
   84eec:	ebc1 0c02 	rsb	ip, r1, r2
   84ef0:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   84ef4:	f10c 0201 	add.w	r2, ip, #1
   84ef8:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   84efc:	4442      	add	r2, r8
   84efe:	107f      	asrs	r7, r7, #1
   84f00:	4297      	cmp	r7, r2
   84f02:	bf34      	ite	cc
   84f04:	4617      	movcc	r7, r2
   84f06:	463a      	movcs	r2, r7
   84f08:	055b      	lsls	r3, r3, #21
   84f0a:	d54f      	bpl.n	84fac <__sfvwrite_r+0x2cc>
   84f0c:	4611      	mov	r1, r2
   84f0e:	4648      	mov	r0, r9
   84f10:	f8cd c000 	str.w	ip, [sp]
   84f14:	f000 f916 	bl	85144 <_malloc_r>
   84f18:	f8dd c000 	ldr.w	ip, [sp]
   84f1c:	4683      	mov	fp, r0
   84f1e:	2800      	cmp	r0, #0
   84f20:	d062      	beq.n	84fe8 <__sfvwrite_r+0x308>
   84f22:	4662      	mov	r2, ip
   84f24:	6921      	ldr	r1, [r4, #16]
   84f26:	f8cd c000 	str.w	ip, [sp]
   84f2a:	f7fe fb11 	bl	83550 <memcpy>
   84f2e:	89a2      	ldrh	r2, [r4, #12]
   84f30:	f8dd c000 	ldr.w	ip, [sp]
   84f34:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   84f38:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   84f3c:	81a2      	strh	r2, [r4, #12]
   84f3e:	eb0b 000c 	add.w	r0, fp, ip
   84f42:	ebcc 0207 	rsb	r2, ip, r7
   84f46:	f8c4 b010 	str.w	fp, [r4, #16]
   84f4a:	6167      	str	r7, [r4, #20]
   84f4c:	6020      	str	r0, [r4, #0]
   84f4e:	60a2      	str	r2, [r4, #8]
   84f50:	4647      	mov	r7, r8
   84f52:	46c3      	mov	fp, r8
   84f54:	e717      	b.n	84d86 <__sfvwrite_r+0xa6>
   84f56:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   84f5a:	4590      	cmp	r8, r2
   84f5c:	bf38      	it	cc
   84f5e:	4642      	movcc	r2, r8
   84f60:	fb92 f2f3 	sdiv	r2, r2, r3
   84f64:	fb02 f303 	mul.w	r3, r2, r3
   84f68:	6a67      	ldr	r7, [r4, #36]	; 0x24
   84f6a:	4648      	mov	r0, r9
   84f6c:	69e1      	ldr	r1, [r4, #28]
   84f6e:	4652      	mov	r2, sl
   84f70:	47b8      	blx	r7
   84f72:	2800      	cmp	r0, #0
   84f74:	f77f af31 	ble.w	84dda <__sfvwrite_r+0xfa>
   84f78:	4602      	mov	r2, r0
   84f7a:	e710      	b.n	84d9e <__sfvwrite_r+0xbe>
   84f7c:	4662      	mov	r2, ip
   84f7e:	4659      	mov	r1, fp
   84f80:	f8cd c000 	str.w	ip, [sp]
   84f84:	f000 fbc4 	bl	85710 <memmove>
   84f88:	f8dd c000 	ldr.w	ip, [sp]
   84f8c:	6823      	ldr	r3, [r4, #0]
   84f8e:	4648      	mov	r0, r9
   84f90:	4463      	add	r3, ip
   84f92:	6023      	str	r3, [r4, #0]
   84f94:	4621      	mov	r1, r4
   84f96:	f8cd c000 	str.w	ip, [sp]
   84f9a:	f7ff fc75 	bl	84888 <_fflush_r>
   84f9e:	f8dd c000 	ldr.w	ip, [sp]
   84fa2:	2800      	cmp	r0, #0
   84fa4:	f47f af19 	bne.w	84dda <__sfvwrite_r+0xfa>
   84fa8:	4667      	mov	r7, ip
   84faa:	e743      	b.n	84e34 <__sfvwrite_r+0x154>
   84fac:	4648      	mov	r0, r9
   84fae:	f8cd c000 	str.w	ip, [sp]
   84fb2:	f000 fc17 	bl	857e4 <_realloc_r>
   84fb6:	f8dd c000 	ldr.w	ip, [sp]
   84fba:	4683      	mov	fp, r0
   84fbc:	2800      	cmp	r0, #0
   84fbe:	d1be      	bne.n	84f3e <__sfvwrite_r+0x25e>
   84fc0:	4648      	mov	r0, r9
   84fc2:	6921      	ldr	r1, [r4, #16]
   84fc4:	f7ff fdc0 	bl	84b48 <_free_r>
   84fc8:	89a3      	ldrh	r3, [r4, #12]
   84fca:	220c      	movs	r2, #12
   84fcc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   84fd0:	b29b      	uxth	r3, r3
   84fd2:	f8c9 2000 	str.w	r2, [r9]
   84fd6:	e701      	b.n	84ddc <__sfvwrite_r+0xfc>
   84fd8:	2701      	movs	r7, #1
   84fda:	f108 0a01 	add.w	sl, r8, #1
   84fde:	9701      	str	r7, [sp, #4]
   84fe0:	e70e      	b.n	84e00 <__sfvwrite_r+0x120>
   84fe2:	f04f 30ff 	mov.w	r0, #4294967295
   84fe6:	e6aa      	b.n	84d3e <__sfvwrite_r+0x5e>
   84fe8:	230c      	movs	r3, #12
   84fea:	f8c9 3000 	str.w	r3, [r9]
   84fee:	89a3      	ldrh	r3, [r4, #12]
   84ff0:	e6f4      	b.n	84ddc <__sfvwrite_r+0xfc>
   84ff2:	bf00      	nop
   84ff4:	7ffffc00 	.word	0x7ffffc00

00084ff8 <_fwalk>:
   84ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84ffc:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
   85000:	4688      	mov	r8, r1
   85002:	d019      	beq.n	85038 <_fwalk+0x40>
   85004:	2600      	movs	r6, #0
   85006:	687d      	ldr	r5, [r7, #4]
   85008:	68bc      	ldr	r4, [r7, #8]
   8500a:	3d01      	subs	r5, #1
   8500c:	d40e      	bmi.n	8502c <_fwalk+0x34>
   8500e:	89a3      	ldrh	r3, [r4, #12]
   85010:	3d01      	subs	r5, #1
   85012:	2b01      	cmp	r3, #1
   85014:	d906      	bls.n	85024 <_fwalk+0x2c>
   85016:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   8501a:	4620      	mov	r0, r4
   8501c:	3301      	adds	r3, #1
   8501e:	d001      	beq.n	85024 <_fwalk+0x2c>
   85020:	47c0      	blx	r8
   85022:	4306      	orrs	r6, r0
   85024:	1c6b      	adds	r3, r5, #1
   85026:	f104 0468 	add.w	r4, r4, #104	; 0x68
   8502a:	d1f0      	bne.n	8500e <_fwalk+0x16>
   8502c:	683f      	ldr	r7, [r7, #0]
   8502e:	2f00      	cmp	r7, #0
   85030:	d1e9      	bne.n	85006 <_fwalk+0xe>
   85032:	4630      	mov	r0, r6
   85034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85038:	463e      	mov	r6, r7
   8503a:	4630      	mov	r0, r6
   8503c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00085040 <__locale_charset>:
   85040:	4800      	ldr	r0, [pc, #0]	; (85044 <__locale_charset+0x4>)
   85042:	4770      	bx	lr
   85044:	200705c4 	.word	0x200705c4

00085048 <__locale_mb_cur_max>:
   85048:	4b01      	ldr	r3, [pc, #4]	; (85050 <__locale_mb_cur_max+0x8>)
   8504a:	6818      	ldr	r0, [r3, #0]
   8504c:	4770      	bx	lr
   8504e:	bf00      	nop
   85050:	200705e4 	.word	0x200705e4

00085054 <__smakebuf_r>:
   85054:	b5f0      	push	{r4, r5, r6, r7, lr}
   85056:	898b      	ldrh	r3, [r1, #12]
   85058:	b091      	sub	sp, #68	; 0x44
   8505a:	b29a      	uxth	r2, r3
   8505c:	0796      	lsls	r6, r2, #30
   8505e:	460c      	mov	r4, r1
   85060:	4605      	mov	r5, r0
   85062:	d437      	bmi.n	850d4 <__smakebuf_r+0x80>
   85064:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   85068:	2900      	cmp	r1, #0
   8506a:	db17      	blt.n	8509c <__smakebuf_r+0x48>
   8506c:	aa01      	add	r2, sp, #4
   8506e:	f000 ff39 	bl	85ee4 <_fstat_r>
   85072:	2800      	cmp	r0, #0
   85074:	db10      	blt.n	85098 <__smakebuf_r+0x44>
   85076:	9b02      	ldr	r3, [sp, #8]
   85078:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
   8507c:	f5b3 5100 	subs.w	r1, r3, #8192	; 0x2000
   85080:	424f      	negs	r7, r1
   85082:	414f      	adcs	r7, r1
   85084:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   85088:	d02c      	beq.n	850e4 <__smakebuf_r+0x90>
   8508a:	89a3      	ldrh	r3, [r4, #12]
   8508c:	f44f 6680 	mov.w	r6, #1024	; 0x400
   85090:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   85094:	81a3      	strh	r3, [r4, #12]
   85096:	e00b      	b.n	850b0 <__smakebuf_r+0x5c>
   85098:	89a3      	ldrh	r3, [r4, #12]
   8509a:	b29a      	uxth	r2, r3
   8509c:	f012 0f80 	tst.w	r2, #128	; 0x80
   850a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   850a4:	81a3      	strh	r3, [r4, #12]
   850a6:	bf14      	ite	ne
   850a8:	2640      	movne	r6, #64	; 0x40
   850aa:	f44f 6680 	moveq.w	r6, #1024	; 0x400
   850ae:	2700      	movs	r7, #0
   850b0:	4628      	mov	r0, r5
   850b2:	4631      	mov	r1, r6
   850b4:	f000 f846 	bl	85144 <_malloc_r>
   850b8:	89a3      	ldrh	r3, [r4, #12]
   850ba:	2800      	cmp	r0, #0
   850bc:	d029      	beq.n	85112 <__smakebuf_r+0xbe>
   850be:	4a1b      	ldr	r2, [pc, #108]	; (8512c <__smakebuf_r+0xd8>)
   850c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   850c4:	63ea      	str	r2, [r5, #60]	; 0x3c
   850c6:	81a3      	strh	r3, [r4, #12]
   850c8:	6020      	str	r0, [r4, #0]
   850ca:	6120      	str	r0, [r4, #16]
   850cc:	6166      	str	r6, [r4, #20]
   850ce:	b9a7      	cbnz	r7, 850fa <__smakebuf_r+0xa6>
   850d0:	b011      	add	sp, #68	; 0x44
   850d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   850d4:	f101 0343 	add.w	r3, r1, #67	; 0x43
   850d8:	2201      	movs	r2, #1
   850da:	600b      	str	r3, [r1, #0]
   850dc:	610b      	str	r3, [r1, #16]
   850de:	614a      	str	r2, [r1, #20]
   850e0:	b011      	add	sp, #68	; 0x44
   850e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   850e4:	4a12      	ldr	r2, [pc, #72]	; (85130 <__smakebuf_r+0xdc>)
   850e6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   850e8:	4293      	cmp	r3, r2
   850ea:	d1ce      	bne.n	8508a <__smakebuf_r+0x36>
   850ec:	89a3      	ldrh	r3, [r4, #12]
   850ee:	f44f 6680 	mov.w	r6, #1024	; 0x400
   850f2:	4333      	orrs	r3, r6
   850f4:	81a3      	strh	r3, [r4, #12]
   850f6:	64e6      	str	r6, [r4, #76]	; 0x4c
   850f8:	e7da      	b.n	850b0 <__smakebuf_r+0x5c>
   850fa:	4628      	mov	r0, r5
   850fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   85100:	f000 ff04 	bl	85f0c <_isatty_r>
   85104:	2800      	cmp	r0, #0
   85106:	d0e3      	beq.n	850d0 <__smakebuf_r+0x7c>
   85108:	89a3      	ldrh	r3, [r4, #12]
   8510a:	f043 0301 	orr.w	r3, r3, #1
   8510e:	81a3      	strh	r3, [r4, #12]
   85110:	e7de      	b.n	850d0 <__smakebuf_r+0x7c>
   85112:	059a      	lsls	r2, r3, #22
   85114:	d4dc      	bmi.n	850d0 <__smakebuf_r+0x7c>
   85116:	f104 0243 	add.w	r2, r4, #67	; 0x43
   8511a:	f043 0302 	orr.w	r3, r3, #2
   8511e:	2101      	movs	r1, #1
   85120:	81a3      	strh	r3, [r4, #12]
   85122:	6022      	str	r2, [r4, #0]
   85124:	6122      	str	r2, [r4, #16]
   85126:	6161      	str	r1, [r4, #20]
   85128:	e7d2      	b.n	850d0 <__smakebuf_r+0x7c>
   8512a:	bf00      	nop
   8512c:	000848b5 	.word	0x000848b5
   85130:	00085c25 	.word	0x00085c25

00085134 <malloc>:
   85134:	4b02      	ldr	r3, [pc, #8]	; (85140 <malloc+0xc>)
   85136:	4601      	mov	r1, r0
   85138:	6818      	ldr	r0, [r3, #0]
   8513a:	f000 b803 	b.w	85144 <_malloc_r>
   8513e:	bf00      	nop
   85140:	200705c0 	.word	0x200705c0

00085144 <_malloc_r>:
   85144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85148:	f101 050b 	add.w	r5, r1, #11
   8514c:	2d16      	cmp	r5, #22
   8514e:	b083      	sub	sp, #12
   85150:	4606      	mov	r6, r0
   85152:	d927      	bls.n	851a4 <_malloc_r+0x60>
   85154:	f035 0507 	bics.w	r5, r5, #7
   85158:	d427      	bmi.n	851aa <_malloc_r+0x66>
   8515a:	42a9      	cmp	r1, r5
   8515c:	d825      	bhi.n	851aa <_malloc_r+0x66>
   8515e:	4630      	mov	r0, r6
   85160:	f000 fb3c 	bl	857dc <__malloc_lock>
   85164:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   85168:	d226      	bcs.n	851b8 <_malloc_r+0x74>
   8516a:	4fc1      	ldr	r7, [pc, #772]	; (85470 <_malloc_r+0x32c>)
   8516c:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
   85170:	eb07 03cc 	add.w	r3, r7, ip, lsl #3
   85174:	68dc      	ldr	r4, [r3, #12]
   85176:	429c      	cmp	r4, r3
   85178:	f000 81d2 	beq.w	85520 <_malloc_r+0x3dc>
   8517c:	6863      	ldr	r3, [r4, #4]
   8517e:	68e2      	ldr	r2, [r4, #12]
   85180:	f023 0303 	bic.w	r3, r3, #3
   85184:	4423      	add	r3, r4
   85186:	6858      	ldr	r0, [r3, #4]
   85188:	68a1      	ldr	r1, [r4, #8]
   8518a:	f040 0501 	orr.w	r5, r0, #1
   8518e:	60ca      	str	r2, [r1, #12]
   85190:	4630      	mov	r0, r6
   85192:	6091      	str	r1, [r2, #8]
   85194:	605d      	str	r5, [r3, #4]
   85196:	f000 fb23 	bl	857e0 <__malloc_unlock>
   8519a:	3408      	adds	r4, #8
   8519c:	4620      	mov	r0, r4
   8519e:	b003      	add	sp, #12
   851a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   851a4:	2510      	movs	r5, #16
   851a6:	42a9      	cmp	r1, r5
   851a8:	d9d9      	bls.n	8515e <_malloc_r+0x1a>
   851aa:	2400      	movs	r4, #0
   851ac:	230c      	movs	r3, #12
   851ae:	4620      	mov	r0, r4
   851b0:	6033      	str	r3, [r6, #0]
   851b2:	b003      	add	sp, #12
   851b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   851b8:	ea5f 2c55 	movs.w	ip, r5, lsr #9
   851bc:	f000 8089 	beq.w	852d2 <_malloc_r+0x18e>
   851c0:	f1bc 0f04 	cmp.w	ip, #4
   851c4:	f200 8160 	bhi.w	85488 <_malloc_r+0x344>
   851c8:	ea4f 1c95 	mov.w	ip, r5, lsr #6
   851cc:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
   851d0:	ea4f 014c 	mov.w	r1, ip, lsl #1
   851d4:	4fa6      	ldr	r7, [pc, #664]	; (85470 <_malloc_r+0x32c>)
   851d6:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   851da:	68cc      	ldr	r4, [r1, #12]
   851dc:	42a1      	cmp	r1, r4
   851de:	d105      	bne.n	851ec <_malloc_r+0xa8>
   851e0:	e00c      	b.n	851fc <_malloc_r+0xb8>
   851e2:	2b00      	cmp	r3, #0
   851e4:	da79      	bge.n	852da <_malloc_r+0x196>
   851e6:	68e4      	ldr	r4, [r4, #12]
   851e8:	42a1      	cmp	r1, r4
   851ea:	d007      	beq.n	851fc <_malloc_r+0xb8>
   851ec:	6862      	ldr	r2, [r4, #4]
   851ee:	f022 0203 	bic.w	r2, r2, #3
   851f2:	1b53      	subs	r3, r2, r5
   851f4:	2b0f      	cmp	r3, #15
   851f6:	ddf4      	ble.n	851e2 <_malloc_r+0x9e>
   851f8:	f10c 3cff 	add.w	ip, ip, #4294967295
   851fc:	f10c 0c01 	add.w	ip, ip, #1
   85200:	4b9b      	ldr	r3, [pc, #620]	; (85470 <_malloc_r+0x32c>)
   85202:	693c      	ldr	r4, [r7, #16]
   85204:	f103 0e08 	add.w	lr, r3, #8
   85208:	4574      	cmp	r4, lr
   8520a:	f000 817e 	beq.w	8550a <_malloc_r+0x3c6>
   8520e:	6861      	ldr	r1, [r4, #4]
   85210:	f021 0103 	bic.w	r1, r1, #3
   85214:	1b4a      	subs	r2, r1, r5
   85216:	2a0f      	cmp	r2, #15
   85218:	f300 8164 	bgt.w	854e4 <_malloc_r+0x3a0>
   8521c:	2a00      	cmp	r2, #0
   8521e:	f8c3 e014 	str.w	lr, [r3, #20]
   85222:	f8c3 e010 	str.w	lr, [r3, #16]
   85226:	da69      	bge.n	852fc <_malloc_r+0x1b8>
   85228:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   8522c:	f080 813a 	bcs.w	854a4 <_malloc_r+0x360>
   85230:	08c9      	lsrs	r1, r1, #3
   85232:	108a      	asrs	r2, r1, #2
   85234:	f04f 0801 	mov.w	r8, #1
   85238:	fa08 f802 	lsl.w	r8, r8, r2
   8523c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   85240:	685a      	ldr	r2, [r3, #4]
   85242:	6888      	ldr	r0, [r1, #8]
   85244:	ea48 0202 	orr.w	r2, r8, r2
   85248:	60a0      	str	r0, [r4, #8]
   8524a:	60e1      	str	r1, [r4, #12]
   8524c:	605a      	str	r2, [r3, #4]
   8524e:	608c      	str	r4, [r1, #8]
   85250:	60c4      	str	r4, [r0, #12]
   85252:	ea4f 03ac 	mov.w	r3, ip, asr #2
   85256:	2001      	movs	r0, #1
   85258:	4098      	lsls	r0, r3
   8525a:	4290      	cmp	r0, r2
   8525c:	d85b      	bhi.n	85316 <_malloc_r+0x1d2>
   8525e:	4202      	tst	r2, r0
   85260:	d106      	bne.n	85270 <_malloc_r+0x12c>
   85262:	f02c 0c03 	bic.w	ip, ip, #3
   85266:	0040      	lsls	r0, r0, #1
   85268:	4202      	tst	r2, r0
   8526a:	f10c 0c04 	add.w	ip, ip, #4
   8526e:	d0fa      	beq.n	85266 <_malloc_r+0x122>
   85270:	eb07 08cc 	add.w	r8, r7, ip, lsl #3
   85274:	4644      	mov	r4, r8
   85276:	46e1      	mov	r9, ip
   85278:	68e3      	ldr	r3, [r4, #12]
   8527a:	429c      	cmp	r4, r3
   8527c:	d107      	bne.n	8528e <_malloc_r+0x14a>
   8527e:	e146      	b.n	8550e <_malloc_r+0x3ca>
   85280:	2a00      	cmp	r2, #0
   85282:	f280 8157 	bge.w	85534 <_malloc_r+0x3f0>
   85286:	68db      	ldr	r3, [r3, #12]
   85288:	429c      	cmp	r4, r3
   8528a:	f000 8140 	beq.w	8550e <_malloc_r+0x3ca>
   8528e:	6859      	ldr	r1, [r3, #4]
   85290:	f021 0103 	bic.w	r1, r1, #3
   85294:	1b4a      	subs	r2, r1, r5
   85296:	2a0f      	cmp	r2, #15
   85298:	ddf2      	ble.n	85280 <_malloc_r+0x13c>
   8529a:	461c      	mov	r4, r3
   8529c:	f854 cf08 	ldr.w	ip, [r4, #8]!
   852a0:	68d9      	ldr	r1, [r3, #12]
   852a2:	f045 0901 	orr.w	r9, r5, #1
   852a6:	f042 0801 	orr.w	r8, r2, #1
   852aa:	441d      	add	r5, r3
   852ac:	f8c3 9004 	str.w	r9, [r3, #4]
   852b0:	4630      	mov	r0, r6
   852b2:	f8cc 100c 	str.w	r1, [ip, #12]
   852b6:	f8c1 c008 	str.w	ip, [r1, #8]
   852ba:	617d      	str	r5, [r7, #20]
   852bc:	613d      	str	r5, [r7, #16]
   852be:	f8c5 e00c 	str.w	lr, [r5, #12]
   852c2:	f8c5 e008 	str.w	lr, [r5, #8]
   852c6:	f8c5 8004 	str.w	r8, [r5, #4]
   852ca:	50aa      	str	r2, [r5, r2]
   852cc:	f000 fa88 	bl	857e0 <__malloc_unlock>
   852d0:	e764      	b.n	8519c <_malloc_r+0x58>
   852d2:	217e      	movs	r1, #126	; 0x7e
   852d4:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
   852d8:	e77c      	b.n	851d4 <_malloc_r+0x90>
   852da:	4422      	add	r2, r4
   852dc:	6850      	ldr	r0, [r2, #4]
   852de:	68e3      	ldr	r3, [r4, #12]
   852e0:	68a1      	ldr	r1, [r4, #8]
   852e2:	f040 0501 	orr.w	r5, r0, #1
   852e6:	60cb      	str	r3, [r1, #12]
   852e8:	4630      	mov	r0, r6
   852ea:	6099      	str	r1, [r3, #8]
   852ec:	6055      	str	r5, [r2, #4]
   852ee:	f000 fa77 	bl	857e0 <__malloc_unlock>
   852f2:	3408      	adds	r4, #8
   852f4:	4620      	mov	r0, r4
   852f6:	b003      	add	sp, #12
   852f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   852fc:	4421      	add	r1, r4
   852fe:	684b      	ldr	r3, [r1, #4]
   85300:	4630      	mov	r0, r6
   85302:	f043 0301 	orr.w	r3, r3, #1
   85306:	604b      	str	r3, [r1, #4]
   85308:	f000 fa6a 	bl	857e0 <__malloc_unlock>
   8530c:	3408      	adds	r4, #8
   8530e:	4620      	mov	r0, r4
   85310:	b003      	add	sp, #12
   85312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85316:	68bc      	ldr	r4, [r7, #8]
   85318:	6863      	ldr	r3, [r4, #4]
   8531a:	f023 0903 	bic.w	r9, r3, #3
   8531e:	45a9      	cmp	r9, r5
   85320:	d304      	bcc.n	8532c <_malloc_r+0x1e8>
   85322:	ebc5 0309 	rsb	r3, r5, r9
   85326:	2b0f      	cmp	r3, #15
   85328:	f300 8091 	bgt.w	8544e <_malloc_r+0x30a>
   8532c:	4b51      	ldr	r3, [pc, #324]	; (85474 <_malloc_r+0x330>)
   8532e:	4a52      	ldr	r2, [pc, #328]	; (85478 <_malloc_r+0x334>)
   85330:	6819      	ldr	r1, [r3, #0]
   85332:	6813      	ldr	r3, [r2, #0]
   85334:	eb05 0a01 	add.w	sl, r5, r1
   85338:	3301      	adds	r3, #1
   8533a:	eb04 0b09 	add.w	fp, r4, r9
   8533e:	f000 8161 	beq.w	85604 <_malloc_r+0x4c0>
   85342:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
   85346:	f10a 0a0f 	add.w	sl, sl, #15
   8534a:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
   8534e:	f02a 0a0f 	bic.w	sl, sl, #15
   85352:	4630      	mov	r0, r6
   85354:	4651      	mov	r1, sl
   85356:	9201      	str	r2, [sp, #4]
   85358:	f000 fc24 	bl	85ba4 <_sbrk_r>
   8535c:	f1b0 3fff 	cmp.w	r0, #4294967295
   85360:	4680      	mov	r8, r0
   85362:	9a01      	ldr	r2, [sp, #4]
   85364:	f000 8101 	beq.w	8556a <_malloc_r+0x426>
   85368:	4583      	cmp	fp, r0
   8536a:	f200 80fb 	bhi.w	85564 <_malloc_r+0x420>
   8536e:	f8df c114 	ldr.w	ip, [pc, #276]	; 85484 <_malloc_r+0x340>
   85372:	45c3      	cmp	fp, r8
   85374:	f8dc 3000 	ldr.w	r3, [ip]
   85378:	4453      	add	r3, sl
   8537a:	f8cc 3000 	str.w	r3, [ip]
   8537e:	f000 814a 	beq.w	85616 <_malloc_r+0x4d2>
   85382:	6812      	ldr	r2, [r2, #0]
   85384:	493c      	ldr	r1, [pc, #240]	; (85478 <_malloc_r+0x334>)
   85386:	3201      	adds	r2, #1
   85388:	bf1b      	ittet	ne
   8538a:	ebcb 0b08 	rsbne	fp, fp, r8
   8538e:	445b      	addne	r3, fp
   85390:	f8c1 8000 	streq.w	r8, [r1]
   85394:	f8cc 3000 	strne.w	r3, [ip]
   85398:	f018 0307 	ands.w	r3, r8, #7
   8539c:	f000 8114 	beq.w	855c8 <_malloc_r+0x484>
   853a0:	f1c3 0208 	rsb	r2, r3, #8
   853a4:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
   853a8:	4490      	add	r8, r2
   853aa:	3308      	adds	r3, #8
   853ac:	44c2      	add	sl, r8
   853ae:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
   853b2:	ebca 0a03 	rsb	sl, sl, r3
   853b6:	4651      	mov	r1, sl
   853b8:	4630      	mov	r0, r6
   853ba:	f8cd c004 	str.w	ip, [sp, #4]
   853be:	f000 fbf1 	bl	85ba4 <_sbrk_r>
   853c2:	1c43      	adds	r3, r0, #1
   853c4:	f8dd c004 	ldr.w	ip, [sp, #4]
   853c8:	f000 8135 	beq.w	85636 <_malloc_r+0x4f2>
   853cc:	ebc8 0200 	rsb	r2, r8, r0
   853d0:	4452      	add	r2, sl
   853d2:	f042 0201 	orr.w	r2, r2, #1
   853d6:	f8dc 3000 	ldr.w	r3, [ip]
   853da:	42bc      	cmp	r4, r7
   853dc:	4453      	add	r3, sl
   853de:	f8c7 8008 	str.w	r8, [r7, #8]
   853e2:	f8cc 3000 	str.w	r3, [ip]
   853e6:	f8c8 2004 	str.w	r2, [r8, #4]
   853ea:	f8df a098 	ldr.w	sl, [pc, #152]	; 85484 <_malloc_r+0x340>
   853ee:	d015      	beq.n	8541c <_malloc_r+0x2d8>
   853f0:	f1b9 0f0f 	cmp.w	r9, #15
   853f4:	f240 80eb 	bls.w	855ce <_malloc_r+0x48a>
   853f8:	6861      	ldr	r1, [r4, #4]
   853fa:	f1a9 020c 	sub.w	r2, r9, #12
   853fe:	f022 0207 	bic.w	r2, r2, #7
   85402:	f001 0101 	and.w	r1, r1, #1
   85406:	ea42 0e01 	orr.w	lr, r2, r1
   8540a:	2005      	movs	r0, #5
   8540c:	18a1      	adds	r1, r4, r2
   8540e:	2a0f      	cmp	r2, #15
   85410:	f8c4 e004 	str.w	lr, [r4, #4]
   85414:	6048      	str	r0, [r1, #4]
   85416:	6088      	str	r0, [r1, #8]
   85418:	f200 8111 	bhi.w	8563e <_malloc_r+0x4fa>
   8541c:	4a17      	ldr	r2, [pc, #92]	; (8547c <_malloc_r+0x338>)
   8541e:	68bc      	ldr	r4, [r7, #8]
   85420:	6811      	ldr	r1, [r2, #0]
   85422:	428b      	cmp	r3, r1
   85424:	bf88      	it	hi
   85426:	6013      	strhi	r3, [r2, #0]
   85428:	4a15      	ldr	r2, [pc, #84]	; (85480 <_malloc_r+0x33c>)
   8542a:	6811      	ldr	r1, [r2, #0]
   8542c:	428b      	cmp	r3, r1
   8542e:	bf88      	it	hi
   85430:	6013      	strhi	r3, [r2, #0]
   85432:	6862      	ldr	r2, [r4, #4]
   85434:	f022 0203 	bic.w	r2, r2, #3
   85438:	4295      	cmp	r5, r2
   8543a:	ebc5 0302 	rsb	r3, r5, r2
   8543e:	d801      	bhi.n	85444 <_malloc_r+0x300>
   85440:	2b0f      	cmp	r3, #15
   85442:	dc04      	bgt.n	8544e <_malloc_r+0x30a>
   85444:	4630      	mov	r0, r6
   85446:	f000 f9cb 	bl	857e0 <__malloc_unlock>
   8544a:	2400      	movs	r4, #0
   8544c:	e6a6      	b.n	8519c <_malloc_r+0x58>
   8544e:	f045 0201 	orr.w	r2, r5, #1
   85452:	f043 0301 	orr.w	r3, r3, #1
   85456:	4425      	add	r5, r4
   85458:	6062      	str	r2, [r4, #4]
   8545a:	4630      	mov	r0, r6
   8545c:	60bd      	str	r5, [r7, #8]
   8545e:	606b      	str	r3, [r5, #4]
   85460:	f000 f9be 	bl	857e0 <__malloc_unlock>
   85464:	3408      	adds	r4, #8
   85466:	4620      	mov	r0, r4
   85468:	b003      	add	sp, #12
   8546a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8546e:	bf00      	nop
   85470:	200705e8 	.word	0x200705e8
   85474:	2007ac9c 	.word	0x2007ac9c
   85478:	200709f4 	.word	0x200709f4
   8547c:	2007ac98 	.word	0x2007ac98
   85480:	2007ac94 	.word	0x2007ac94
   85484:	2007aca0 	.word	0x2007aca0
   85488:	f1bc 0f14 	cmp.w	ip, #20
   8548c:	d961      	bls.n	85552 <_malloc_r+0x40e>
   8548e:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
   85492:	f200 808f 	bhi.w	855b4 <_malloc_r+0x470>
   85496:	ea4f 3c15 	mov.w	ip, r5, lsr #12
   8549a:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
   8549e:	ea4f 014c 	mov.w	r1, ip, lsl #1
   854a2:	e697      	b.n	851d4 <_malloc_r+0x90>
   854a4:	0a4b      	lsrs	r3, r1, #9
   854a6:	2b04      	cmp	r3, #4
   854a8:	d958      	bls.n	8555c <_malloc_r+0x418>
   854aa:	2b14      	cmp	r3, #20
   854ac:	f200 80ad 	bhi.w	8560a <_malloc_r+0x4c6>
   854b0:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   854b4:	0050      	lsls	r0, r2, #1
   854b6:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   854ba:	6883      	ldr	r3, [r0, #8]
   854bc:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 85678 <_malloc_r+0x534>
   854c0:	4283      	cmp	r3, r0
   854c2:	f000 808a 	beq.w	855da <_malloc_r+0x496>
   854c6:	685a      	ldr	r2, [r3, #4]
   854c8:	f022 0203 	bic.w	r2, r2, #3
   854cc:	4291      	cmp	r1, r2
   854ce:	d202      	bcs.n	854d6 <_malloc_r+0x392>
   854d0:	689b      	ldr	r3, [r3, #8]
   854d2:	4298      	cmp	r0, r3
   854d4:	d1f7      	bne.n	854c6 <_malloc_r+0x382>
   854d6:	68d9      	ldr	r1, [r3, #12]
   854d8:	687a      	ldr	r2, [r7, #4]
   854da:	60e1      	str	r1, [r4, #12]
   854dc:	60a3      	str	r3, [r4, #8]
   854de:	608c      	str	r4, [r1, #8]
   854e0:	60dc      	str	r4, [r3, #12]
   854e2:	e6b6      	b.n	85252 <_malloc_r+0x10e>
   854e4:	f045 0701 	orr.w	r7, r5, #1
   854e8:	f042 0101 	orr.w	r1, r2, #1
   854ec:	4425      	add	r5, r4
   854ee:	6067      	str	r7, [r4, #4]
   854f0:	4630      	mov	r0, r6
   854f2:	615d      	str	r5, [r3, #20]
   854f4:	611d      	str	r5, [r3, #16]
   854f6:	f8c5 e00c 	str.w	lr, [r5, #12]
   854fa:	f8c5 e008 	str.w	lr, [r5, #8]
   854fe:	6069      	str	r1, [r5, #4]
   85500:	50aa      	str	r2, [r5, r2]
   85502:	3408      	adds	r4, #8
   85504:	f000 f96c 	bl	857e0 <__malloc_unlock>
   85508:	e648      	b.n	8519c <_malloc_r+0x58>
   8550a:	685a      	ldr	r2, [r3, #4]
   8550c:	e6a1      	b.n	85252 <_malloc_r+0x10e>
   8550e:	f109 0901 	add.w	r9, r9, #1
   85512:	f019 0f03 	tst.w	r9, #3
   85516:	f104 0408 	add.w	r4, r4, #8
   8551a:	f47f aead 	bne.w	85278 <_malloc_r+0x134>
   8551e:	e02d      	b.n	8557c <_malloc_r+0x438>
   85520:	f104 0308 	add.w	r3, r4, #8
   85524:	6964      	ldr	r4, [r4, #20]
   85526:	42a3      	cmp	r3, r4
   85528:	bf08      	it	eq
   8552a:	f10c 0c02 	addeq.w	ip, ip, #2
   8552e:	f43f ae67 	beq.w	85200 <_malloc_r+0xbc>
   85532:	e623      	b.n	8517c <_malloc_r+0x38>
   85534:	4419      	add	r1, r3
   85536:	6848      	ldr	r0, [r1, #4]
   85538:	461c      	mov	r4, r3
   8553a:	f854 2f08 	ldr.w	r2, [r4, #8]!
   8553e:	68db      	ldr	r3, [r3, #12]
   85540:	f040 0501 	orr.w	r5, r0, #1
   85544:	604d      	str	r5, [r1, #4]
   85546:	4630      	mov	r0, r6
   85548:	60d3      	str	r3, [r2, #12]
   8554a:	609a      	str	r2, [r3, #8]
   8554c:	f000 f948 	bl	857e0 <__malloc_unlock>
   85550:	e624      	b.n	8519c <_malloc_r+0x58>
   85552:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
   85556:	ea4f 014c 	mov.w	r1, ip, lsl #1
   8555a:	e63b      	b.n	851d4 <_malloc_r+0x90>
   8555c:	098a      	lsrs	r2, r1, #6
   8555e:	3238      	adds	r2, #56	; 0x38
   85560:	0050      	lsls	r0, r2, #1
   85562:	e7a8      	b.n	854b6 <_malloc_r+0x372>
   85564:	42bc      	cmp	r4, r7
   85566:	f43f af02 	beq.w	8536e <_malloc_r+0x22a>
   8556a:	68bc      	ldr	r4, [r7, #8]
   8556c:	6862      	ldr	r2, [r4, #4]
   8556e:	f022 0203 	bic.w	r2, r2, #3
   85572:	e761      	b.n	85438 <_malloc_r+0x2f4>
   85574:	f8d8 8000 	ldr.w	r8, [r8]
   85578:	4598      	cmp	r8, r3
   8557a:	d17a      	bne.n	85672 <_malloc_r+0x52e>
   8557c:	f01c 0f03 	tst.w	ip, #3
   85580:	f1a8 0308 	sub.w	r3, r8, #8
   85584:	f10c 3cff 	add.w	ip, ip, #4294967295
   85588:	d1f4      	bne.n	85574 <_malloc_r+0x430>
   8558a:	687b      	ldr	r3, [r7, #4]
   8558c:	ea23 0300 	bic.w	r3, r3, r0
   85590:	607b      	str	r3, [r7, #4]
   85592:	0040      	lsls	r0, r0, #1
   85594:	4298      	cmp	r0, r3
   85596:	f63f aebe 	bhi.w	85316 <_malloc_r+0x1d2>
   8559a:	2800      	cmp	r0, #0
   8559c:	f43f aebb 	beq.w	85316 <_malloc_r+0x1d2>
   855a0:	4203      	tst	r3, r0
   855a2:	46cc      	mov	ip, r9
   855a4:	f47f ae64 	bne.w	85270 <_malloc_r+0x12c>
   855a8:	0040      	lsls	r0, r0, #1
   855aa:	4203      	tst	r3, r0
   855ac:	f10c 0c04 	add.w	ip, ip, #4
   855b0:	d0fa      	beq.n	855a8 <_malloc_r+0x464>
   855b2:	e65d      	b.n	85270 <_malloc_r+0x12c>
   855b4:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
   855b8:	d819      	bhi.n	855ee <_malloc_r+0x4aa>
   855ba:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
   855be:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
   855c2:	ea4f 014c 	mov.w	r1, ip, lsl #1
   855c6:	e605      	b.n	851d4 <_malloc_r+0x90>
   855c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   855cc:	e6ee      	b.n	853ac <_malloc_r+0x268>
   855ce:	2301      	movs	r3, #1
   855d0:	f8c8 3004 	str.w	r3, [r8, #4]
   855d4:	4644      	mov	r4, r8
   855d6:	2200      	movs	r2, #0
   855d8:	e72e      	b.n	85438 <_malloc_r+0x2f4>
   855da:	1092      	asrs	r2, r2, #2
   855dc:	2001      	movs	r0, #1
   855de:	4090      	lsls	r0, r2
   855e0:	f8d8 2004 	ldr.w	r2, [r8, #4]
   855e4:	4619      	mov	r1, r3
   855e6:	4302      	orrs	r2, r0
   855e8:	f8c8 2004 	str.w	r2, [r8, #4]
   855ec:	e775      	b.n	854da <_malloc_r+0x396>
   855ee:	f240 5354 	movw	r3, #1364	; 0x554
   855f2:	459c      	cmp	ip, r3
   855f4:	d81b      	bhi.n	8562e <_malloc_r+0x4ea>
   855f6:	ea4f 4c95 	mov.w	ip, r5, lsr #18
   855fa:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
   855fe:	ea4f 014c 	mov.w	r1, ip, lsl #1
   85602:	e5e7      	b.n	851d4 <_malloc_r+0x90>
   85604:	f10a 0a10 	add.w	sl, sl, #16
   85608:	e6a3      	b.n	85352 <_malloc_r+0x20e>
   8560a:	2b54      	cmp	r3, #84	; 0x54
   8560c:	d81f      	bhi.n	8564e <_malloc_r+0x50a>
   8560e:	0b0a      	lsrs	r2, r1, #12
   85610:	326e      	adds	r2, #110	; 0x6e
   85612:	0050      	lsls	r0, r2, #1
   85614:	e74f      	b.n	854b6 <_malloc_r+0x372>
   85616:	f3cb 010b 	ubfx	r1, fp, #0, #12
   8561a:	2900      	cmp	r1, #0
   8561c:	f47f aeb1 	bne.w	85382 <_malloc_r+0x23e>
   85620:	eb0a 0109 	add.w	r1, sl, r9
   85624:	68ba      	ldr	r2, [r7, #8]
   85626:	f041 0101 	orr.w	r1, r1, #1
   8562a:	6051      	str	r1, [r2, #4]
   8562c:	e6f6      	b.n	8541c <_malloc_r+0x2d8>
   8562e:	21fc      	movs	r1, #252	; 0xfc
   85630:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
   85634:	e5ce      	b.n	851d4 <_malloc_r+0x90>
   85636:	2201      	movs	r2, #1
   85638:	f04f 0a00 	mov.w	sl, #0
   8563c:	e6cb      	b.n	853d6 <_malloc_r+0x292>
   8563e:	f104 0108 	add.w	r1, r4, #8
   85642:	4630      	mov	r0, r6
   85644:	f7ff fa80 	bl	84b48 <_free_r>
   85648:	f8da 3000 	ldr.w	r3, [sl]
   8564c:	e6e6      	b.n	8541c <_malloc_r+0x2d8>
   8564e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   85652:	d803      	bhi.n	8565c <_malloc_r+0x518>
   85654:	0bca      	lsrs	r2, r1, #15
   85656:	3277      	adds	r2, #119	; 0x77
   85658:	0050      	lsls	r0, r2, #1
   8565a:	e72c      	b.n	854b6 <_malloc_r+0x372>
   8565c:	f240 5254 	movw	r2, #1364	; 0x554
   85660:	4293      	cmp	r3, r2
   85662:	d803      	bhi.n	8566c <_malloc_r+0x528>
   85664:	0c8a      	lsrs	r2, r1, #18
   85666:	327c      	adds	r2, #124	; 0x7c
   85668:	0050      	lsls	r0, r2, #1
   8566a:	e724      	b.n	854b6 <_malloc_r+0x372>
   8566c:	20fc      	movs	r0, #252	; 0xfc
   8566e:	227e      	movs	r2, #126	; 0x7e
   85670:	e721      	b.n	854b6 <_malloc_r+0x372>
   85672:	687b      	ldr	r3, [r7, #4]
   85674:	e78d      	b.n	85592 <_malloc_r+0x44e>
   85676:	bf00      	nop
   85678:	200705e8 	.word	0x200705e8

0008567c <memchr>:
   8567c:	0783      	lsls	r3, r0, #30
   8567e:	b470      	push	{r4, r5, r6}
   85680:	b2c9      	uxtb	r1, r1
   85682:	d040      	beq.n	85706 <memchr+0x8a>
   85684:	1e54      	subs	r4, r2, #1
   85686:	b32a      	cbz	r2, 856d4 <memchr+0x58>
   85688:	7803      	ldrb	r3, [r0, #0]
   8568a:	428b      	cmp	r3, r1
   8568c:	d023      	beq.n	856d6 <memchr+0x5a>
   8568e:	1c43      	adds	r3, r0, #1
   85690:	e004      	b.n	8569c <memchr+0x20>
   85692:	b1fc      	cbz	r4, 856d4 <memchr+0x58>
   85694:	7805      	ldrb	r5, [r0, #0]
   85696:	4614      	mov	r4, r2
   85698:	428d      	cmp	r5, r1
   8569a:	d01c      	beq.n	856d6 <memchr+0x5a>
   8569c:	f013 0f03 	tst.w	r3, #3
   856a0:	4618      	mov	r0, r3
   856a2:	f104 32ff 	add.w	r2, r4, #4294967295
   856a6:	f103 0301 	add.w	r3, r3, #1
   856aa:	d1f2      	bne.n	85692 <memchr+0x16>
   856ac:	2c03      	cmp	r4, #3
   856ae:	d814      	bhi.n	856da <memchr+0x5e>
   856b0:	1e65      	subs	r5, r4, #1
   856b2:	b354      	cbz	r4, 8570a <memchr+0x8e>
   856b4:	7803      	ldrb	r3, [r0, #0]
   856b6:	428b      	cmp	r3, r1
   856b8:	d00d      	beq.n	856d6 <memchr+0x5a>
   856ba:	1c42      	adds	r2, r0, #1
   856bc:	2300      	movs	r3, #0
   856be:	e002      	b.n	856c6 <memchr+0x4a>
   856c0:	7804      	ldrb	r4, [r0, #0]
   856c2:	428c      	cmp	r4, r1
   856c4:	d007      	beq.n	856d6 <memchr+0x5a>
   856c6:	42ab      	cmp	r3, r5
   856c8:	4610      	mov	r0, r2
   856ca:	f103 0301 	add.w	r3, r3, #1
   856ce:	f102 0201 	add.w	r2, r2, #1
   856d2:	d1f5      	bne.n	856c0 <memchr+0x44>
   856d4:	2000      	movs	r0, #0
   856d6:	bc70      	pop	{r4, r5, r6}
   856d8:	4770      	bx	lr
   856da:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
   856de:	4603      	mov	r3, r0
   856e0:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   856e4:	681a      	ldr	r2, [r3, #0]
   856e6:	4618      	mov	r0, r3
   856e8:	4072      	eors	r2, r6
   856ea:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
   856ee:	ea25 0202 	bic.w	r2, r5, r2
   856f2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   856f6:	f103 0304 	add.w	r3, r3, #4
   856fa:	d1d9      	bne.n	856b0 <memchr+0x34>
   856fc:	3c04      	subs	r4, #4
   856fe:	2c03      	cmp	r4, #3
   85700:	4618      	mov	r0, r3
   85702:	d8ef      	bhi.n	856e4 <memchr+0x68>
   85704:	e7d4      	b.n	856b0 <memchr+0x34>
   85706:	4614      	mov	r4, r2
   85708:	e7d0      	b.n	856ac <memchr+0x30>
   8570a:	4620      	mov	r0, r4
   8570c:	e7e3      	b.n	856d6 <memchr+0x5a>
   8570e:	bf00      	nop

00085710 <memmove>:
   85710:	4288      	cmp	r0, r1
   85712:	b4f0      	push	{r4, r5, r6, r7}
   85714:	d910      	bls.n	85738 <memmove+0x28>
   85716:	188c      	adds	r4, r1, r2
   85718:	42a0      	cmp	r0, r4
   8571a:	d20d      	bcs.n	85738 <memmove+0x28>
   8571c:	1885      	adds	r5, r0, r2
   8571e:	1e53      	subs	r3, r2, #1
   85720:	b142      	cbz	r2, 85734 <memmove+0x24>
   85722:	4621      	mov	r1, r4
   85724:	462a      	mov	r2, r5
   85726:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
   8572a:	3b01      	subs	r3, #1
   8572c:	f802 4d01 	strb.w	r4, [r2, #-1]!
   85730:	1c5c      	adds	r4, r3, #1
   85732:	d1f8      	bne.n	85726 <memmove+0x16>
   85734:	bcf0      	pop	{r4, r5, r6, r7}
   85736:	4770      	bx	lr
   85738:	2a0f      	cmp	r2, #15
   8573a:	d944      	bls.n	857c6 <memmove+0xb6>
   8573c:	ea40 0301 	orr.w	r3, r0, r1
   85740:	079b      	lsls	r3, r3, #30
   85742:	d144      	bne.n	857ce <memmove+0xbe>
   85744:	f1a2 0710 	sub.w	r7, r2, #16
   85748:	093f      	lsrs	r7, r7, #4
   8574a:	eb00 1607 	add.w	r6, r0, r7, lsl #4
   8574e:	3610      	adds	r6, #16
   85750:	460c      	mov	r4, r1
   85752:	4603      	mov	r3, r0
   85754:	6825      	ldr	r5, [r4, #0]
   85756:	3310      	adds	r3, #16
   85758:	f843 5c10 	str.w	r5, [r3, #-16]
   8575c:	6865      	ldr	r5, [r4, #4]
   8575e:	3410      	adds	r4, #16
   85760:	f843 5c0c 	str.w	r5, [r3, #-12]
   85764:	f854 5c08 	ldr.w	r5, [r4, #-8]
   85768:	f843 5c08 	str.w	r5, [r3, #-8]
   8576c:	f854 5c04 	ldr.w	r5, [r4, #-4]
   85770:	f843 5c04 	str.w	r5, [r3, #-4]
   85774:	42b3      	cmp	r3, r6
   85776:	d1ed      	bne.n	85754 <memmove+0x44>
   85778:	1c7b      	adds	r3, r7, #1
   8577a:	f002 0c0f 	and.w	ip, r2, #15
   8577e:	011b      	lsls	r3, r3, #4
   85780:	f1bc 0f03 	cmp.w	ip, #3
   85784:	4419      	add	r1, r3
   85786:	4403      	add	r3, r0
   85788:	d923      	bls.n	857d2 <memmove+0xc2>
   8578a:	460e      	mov	r6, r1
   8578c:	461d      	mov	r5, r3
   8578e:	4664      	mov	r4, ip
   85790:	f856 7b04 	ldr.w	r7, [r6], #4
   85794:	3c04      	subs	r4, #4
   85796:	2c03      	cmp	r4, #3
   85798:	f845 7b04 	str.w	r7, [r5], #4
   8579c:	d8f8      	bhi.n	85790 <memmove+0x80>
   8579e:	f1ac 0404 	sub.w	r4, ip, #4
   857a2:	f024 0403 	bic.w	r4, r4, #3
   857a6:	3404      	adds	r4, #4
   857a8:	f002 0203 	and.w	r2, r2, #3
   857ac:	4423      	add	r3, r4
   857ae:	4421      	add	r1, r4
   857b0:	2a00      	cmp	r2, #0
   857b2:	d0bf      	beq.n	85734 <memmove+0x24>
   857b4:	441a      	add	r2, r3
   857b6:	f811 4b01 	ldrb.w	r4, [r1], #1
   857ba:	f803 4b01 	strb.w	r4, [r3], #1
   857be:	4293      	cmp	r3, r2
   857c0:	d1f9      	bne.n	857b6 <memmove+0xa6>
   857c2:	bcf0      	pop	{r4, r5, r6, r7}
   857c4:	4770      	bx	lr
   857c6:	4603      	mov	r3, r0
   857c8:	2a00      	cmp	r2, #0
   857ca:	d1f3      	bne.n	857b4 <memmove+0xa4>
   857cc:	e7b2      	b.n	85734 <memmove+0x24>
   857ce:	4603      	mov	r3, r0
   857d0:	e7f0      	b.n	857b4 <memmove+0xa4>
   857d2:	4662      	mov	r2, ip
   857d4:	2a00      	cmp	r2, #0
   857d6:	d1ed      	bne.n	857b4 <memmove+0xa4>
   857d8:	e7ac      	b.n	85734 <memmove+0x24>
   857da:	bf00      	nop

000857dc <__malloc_lock>:
   857dc:	4770      	bx	lr
   857de:	bf00      	nop

000857e0 <__malloc_unlock>:
   857e0:	4770      	bx	lr
   857e2:	bf00      	nop

000857e4 <_realloc_r>:
   857e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   857e8:	460c      	mov	r4, r1
   857ea:	b083      	sub	sp, #12
   857ec:	4690      	mov	r8, r2
   857ee:	4681      	mov	r9, r0
   857f0:	2900      	cmp	r1, #0
   857f2:	f000 80ba 	beq.w	8596a <_realloc_r+0x186>
   857f6:	f7ff fff1 	bl	857dc <__malloc_lock>
   857fa:	f108 060b 	add.w	r6, r8, #11
   857fe:	f854 3c04 	ldr.w	r3, [r4, #-4]
   85802:	2e16      	cmp	r6, #22
   85804:	f023 0503 	bic.w	r5, r3, #3
   85808:	f1a4 0708 	sub.w	r7, r4, #8
   8580c:	d84b      	bhi.n	858a6 <_realloc_r+0xc2>
   8580e:	2110      	movs	r1, #16
   85810:	460e      	mov	r6, r1
   85812:	45b0      	cmp	r8, r6
   85814:	d84c      	bhi.n	858b0 <_realloc_r+0xcc>
   85816:	428d      	cmp	r5, r1
   85818:	da51      	bge.n	858be <_realloc_r+0xda>
   8581a:	f8df b384 	ldr.w	fp, [pc, #900]	; 85ba0 <_realloc_r+0x3bc>
   8581e:	1978      	adds	r0, r7, r5
   85820:	f8db e008 	ldr.w	lr, [fp, #8]
   85824:	4586      	cmp	lr, r0
   85826:	f000 80a6 	beq.w	85976 <_realloc_r+0x192>
   8582a:	6842      	ldr	r2, [r0, #4]
   8582c:	f022 0c01 	bic.w	ip, r2, #1
   85830:	4484      	add	ip, r0
   85832:	f8dc c004 	ldr.w	ip, [ip, #4]
   85836:	f01c 0f01 	tst.w	ip, #1
   8583a:	d054      	beq.n	858e6 <_realloc_r+0x102>
   8583c:	2200      	movs	r2, #0
   8583e:	4610      	mov	r0, r2
   85840:	07db      	lsls	r3, r3, #31
   85842:	d46f      	bmi.n	85924 <_realloc_r+0x140>
   85844:	f854 3c08 	ldr.w	r3, [r4, #-8]
   85848:	ebc3 0a07 	rsb	sl, r3, r7
   8584c:	f8da 3004 	ldr.w	r3, [sl, #4]
   85850:	f023 0303 	bic.w	r3, r3, #3
   85854:	442b      	add	r3, r5
   85856:	2800      	cmp	r0, #0
   85858:	d062      	beq.n	85920 <_realloc_r+0x13c>
   8585a:	4570      	cmp	r0, lr
   8585c:	f000 80e9 	beq.w	85a32 <_realloc_r+0x24e>
   85860:	eb02 0e03 	add.w	lr, r2, r3
   85864:	458e      	cmp	lr, r1
   85866:	db5b      	blt.n	85920 <_realloc_r+0x13c>
   85868:	68c3      	ldr	r3, [r0, #12]
   8586a:	6882      	ldr	r2, [r0, #8]
   8586c:	46d0      	mov	r8, sl
   8586e:	60d3      	str	r3, [r2, #12]
   85870:	609a      	str	r2, [r3, #8]
   85872:	f858 1f08 	ldr.w	r1, [r8, #8]!
   85876:	f8da 300c 	ldr.w	r3, [sl, #12]
   8587a:	1f2a      	subs	r2, r5, #4
   8587c:	2a24      	cmp	r2, #36	; 0x24
   8587e:	60cb      	str	r3, [r1, #12]
   85880:	6099      	str	r1, [r3, #8]
   85882:	f200 8123 	bhi.w	85acc <_realloc_r+0x2e8>
   85886:	2a13      	cmp	r2, #19
   85888:	f240 80b0 	bls.w	859ec <_realloc_r+0x208>
   8588c:	6823      	ldr	r3, [r4, #0]
   8588e:	2a1b      	cmp	r2, #27
   85890:	f8ca 3008 	str.w	r3, [sl, #8]
   85894:	6863      	ldr	r3, [r4, #4]
   85896:	f8ca 300c 	str.w	r3, [sl, #12]
   8589a:	f200 812b 	bhi.w	85af4 <_realloc_r+0x310>
   8589e:	3408      	adds	r4, #8
   858a0:	f10a 0310 	add.w	r3, sl, #16
   858a4:	e0a3      	b.n	859ee <_realloc_r+0x20a>
   858a6:	f026 0607 	bic.w	r6, r6, #7
   858aa:	2e00      	cmp	r6, #0
   858ac:	4631      	mov	r1, r6
   858ae:	dab0      	bge.n	85812 <_realloc_r+0x2e>
   858b0:	230c      	movs	r3, #12
   858b2:	2000      	movs	r0, #0
   858b4:	f8c9 3000 	str.w	r3, [r9]
   858b8:	b003      	add	sp, #12
   858ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   858be:	46a0      	mov	r8, r4
   858c0:	1baa      	subs	r2, r5, r6
   858c2:	2a0f      	cmp	r2, #15
   858c4:	f003 0301 	and.w	r3, r3, #1
   858c8:	d81a      	bhi.n	85900 <_realloc_r+0x11c>
   858ca:	432b      	orrs	r3, r5
   858cc:	607b      	str	r3, [r7, #4]
   858ce:	443d      	add	r5, r7
   858d0:	686b      	ldr	r3, [r5, #4]
   858d2:	f043 0301 	orr.w	r3, r3, #1
   858d6:	606b      	str	r3, [r5, #4]
   858d8:	4648      	mov	r0, r9
   858da:	f7ff ff81 	bl	857e0 <__malloc_unlock>
   858de:	4640      	mov	r0, r8
   858e0:	b003      	add	sp, #12
   858e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   858e6:	f022 0203 	bic.w	r2, r2, #3
   858ea:	eb02 0c05 	add.w	ip, r2, r5
   858ee:	458c      	cmp	ip, r1
   858f0:	dba6      	blt.n	85840 <_realloc_r+0x5c>
   858f2:	68c2      	ldr	r2, [r0, #12]
   858f4:	6881      	ldr	r1, [r0, #8]
   858f6:	46a0      	mov	r8, r4
   858f8:	60ca      	str	r2, [r1, #12]
   858fa:	4665      	mov	r5, ip
   858fc:	6091      	str	r1, [r2, #8]
   858fe:	e7df      	b.n	858c0 <_realloc_r+0xdc>
   85900:	19b9      	adds	r1, r7, r6
   85902:	4333      	orrs	r3, r6
   85904:	f042 0001 	orr.w	r0, r2, #1
   85908:	607b      	str	r3, [r7, #4]
   8590a:	440a      	add	r2, r1
   8590c:	6048      	str	r0, [r1, #4]
   8590e:	6853      	ldr	r3, [r2, #4]
   85910:	3108      	adds	r1, #8
   85912:	f043 0301 	orr.w	r3, r3, #1
   85916:	6053      	str	r3, [r2, #4]
   85918:	4648      	mov	r0, r9
   8591a:	f7ff f915 	bl	84b48 <_free_r>
   8591e:	e7db      	b.n	858d8 <_realloc_r+0xf4>
   85920:	428b      	cmp	r3, r1
   85922:	da33      	bge.n	8598c <_realloc_r+0x1a8>
   85924:	4641      	mov	r1, r8
   85926:	4648      	mov	r0, r9
   85928:	f7ff fc0c 	bl	85144 <_malloc_r>
   8592c:	4680      	mov	r8, r0
   8592e:	2800      	cmp	r0, #0
   85930:	d0d2      	beq.n	858d8 <_realloc_r+0xf4>
   85932:	f854 3c04 	ldr.w	r3, [r4, #-4]
   85936:	f1a0 0108 	sub.w	r1, r0, #8
   8593a:	f023 0201 	bic.w	r2, r3, #1
   8593e:	443a      	add	r2, r7
   85940:	4291      	cmp	r1, r2
   85942:	f000 80bc 	beq.w	85abe <_realloc_r+0x2da>
   85946:	1f2a      	subs	r2, r5, #4
   85948:	2a24      	cmp	r2, #36	; 0x24
   8594a:	d86e      	bhi.n	85a2a <_realloc_r+0x246>
   8594c:	2a13      	cmp	r2, #19
   8594e:	d842      	bhi.n	859d6 <_realloc_r+0x1f2>
   85950:	4603      	mov	r3, r0
   85952:	4622      	mov	r2, r4
   85954:	6811      	ldr	r1, [r2, #0]
   85956:	6019      	str	r1, [r3, #0]
   85958:	6851      	ldr	r1, [r2, #4]
   8595a:	6059      	str	r1, [r3, #4]
   8595c:	6892      	ldr	r2, [r2, #8]
   8595e:	609a      	str	r2, [r3, #8]
   85960:	4621      	mov	r1, r4
   85962:	4648      	mov	r0, r9
   85964:	f7ff f8f0 	bl	84b48 <_free_r>
   85968:	e7b6      	b.n	858d8 <_realloc_r+0xf4>
   8596a:	4611      	mov	r1, r2
   8596c:	b003      	add	sp, #12
   8596e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85972:	f7ff bbe7 	b.w	85144 <_malloc_r>
   85976:	f8de 2004 	ldr.w	r2, [lr, #4]
   8597a:	f106 0c10 	add.w	ip, r6, #16
   8597e:	f022 0203 	bic.w	r2, r2, #3
   85982:	1950      	adds	r0, r2, r5
   85984:	4560      	cmp	r0, ip
   85986:	da3d      	bge.n	85a04 <_realloc_r+0x220>
   85988:	4670      	mov	r0, lr
   8598a:	e759      	b.n	85840 <_realloc_r+0x5c>
   8598c:	46d0      	mov	r8, sl
   8598e:	f858 0f08 	ldr.w	r0, [r8, #8]!
   85992:	f8da 100c 	ldr.w	r1, [sl, #12]
   85996:	1f2a      	subs	r2, r5, #4
   85998:	2a24      	cmp	r2, #36	; 0x24
   8599a:	60c1      	str	r1, [r0, #12]
   8599c:	6088      	str	r0, [r1, #8]
   8599e:	f200 80a0 	bhi.w	85ae2 <_realloc_r+0x2fe>
   859a2:	2a13      	cmp	r2, #19
   859a4:	f240 809b 	bls.w	85ade <_realloc_r+0x2fa>
   859a8:	6821      	ldr	r1, [r4, #0]
   859aa:	2a1b      	cmp	r2, #27
   859ac:	f8ca 1008 	str.w	r1, [sl, #8]
   859b0:	6861      	ldr	r1, [r4, #4]
   859b2:	f8ca 100c 	str.w	r1, [sl, #12]
   859b6:	f200 80b2 	bhi.w	85b1e <_realloc_r+0x33a>
   859ba:	3408      	adds	r4, #8
   859bc:	f10a 0210 	add.w	r2, sl, #16
   859c0:	6821      	ldr	r1, [r4, #0]
   859c2:	461d      	mov	r5, r3
   859c4:	6011      	str	r1, [r2, #0]
   859c6:	6861      	ldr	r1, [r4, #4]
   859c8:	4657      	mov	r7, sl
   859ca:	6051      	str	r1, [r2, #4]
   859cc:	68a3      	ldr	r3, [r4, #8]
   859ce:	6093      	str	r3, [r2, #8]
   859d0:	f8da 3004 	ldr.w	r3, [sl, #4]
   859d4:	e774      	b.n	858c0 <_realloc_r+0xdc>
   859d6:	6823      	ldr	r3, [r4, #0]
   859d8:	2a1b      	cmp	r2, #27
   859da:	6003      	str	r3, [r0, #0]
   859dc:	6863      	ldr	r3, [r4, #4]
   859de:	6043      	str	r3, [r0, #4]
   859e0:	d862      	bhi.n	85aa8 <_realloc_r+0x2c4>
   859e2:	f100 0308 	add.w	r3, r0, #8
   859e6:	f104 0208 	add.w	r2, r4, #8
   859ea:	e7b3      	b.n	85954 <_realloc_r+0x170>
   859ec:	4643      	mov	r3, r8
   859ee:	6822      	ldr	r2, [r4, #0]
   859f0:	4675      	mov	r5, lr
   859f2:	601a      	str	r2, [r3, #0]
   859f4:	6862      	ldr	r2, [r4, #4]
   859f6:	4657      	mov	r7, sl
   859f8:	605a      	str	r2, [r3, #4]
   859fa:	68a2      	ldr	r2, [r4, #8]
   859fc:	609a      	str	r2, [r3, #8]
   859fe:	f8da 3004 	ldr.w	r3, [sl, #4]
   85a02:	e75d      	b.n	858c0 <_realloc_r+0xdc>
   85a04:	1b83      	subs	r3, r0, r6
   85a06:	4437      	add	r7, r6
   85a08:	f043 0301 	orr.w	r3, r3, #1
   85a0c:	f8cb 7008 	str.w	r7, [fp, #8]
   85a10:	607b      	str	r3, [r7, #4]
   85a12:	f854 3c04 	ldr.w	r3, [r4, #-4]
   85a16:	4648      	mov	r0, r9
   85a18:	f003 0301 	and.w	r3, r3, #1
   85a1c:	431e      	orrs	r6, r3
   85a1e:	f844 6c04 	str.w	r6, [r4, #-4]
   85a22:	f7ff fedd 	bl	857e0 <__malloc_unlock>
   85a26:	4620      	mov	r0, r4
   85a28:	e75a      	b.n	858e0 <_realloc_r+0xfc>
   85a2a:	4621      	mov	r1, r4
   85a2c:	f7ff fe70 	bl	85710 <memmove>
   85a30:	e796      	b.n	85960 <_realloc_r+0x17c>
   85a32:	eb02 0c03 	add.w	ip, r2, r3
   85a36:	f106 0210 	add.w	r2, r6, #16
   85a3a:	4594      	cmp	ip, r2
   85a3c:	f6ff af70 	blt.w	85920 <_realloc_r+0x13c>
   85a40:	4657      	mov	r7, sl
   85a42:	f857 1f08 	ldr.w	r1, [r7, #8]!
   85a46:	f8da 300c 	ldr.w	r3, [sl, #12]
   85a4a:	1f2a      	subs	r2, r5, #4
   85a4c:	2a24      	cmp	r2, #36	; 0x24
   85a4e:	60cb      	str	r3, [r1, #12]
   85a50:	6099      	str	r1, [r3, #8]
   85a52:	f200 8086 	bhi.w	85b62 <_realloc_r+0x37e>
   85a56:	2a13      	cmp	r2, #19
   85a58:	d977      	bls.n	85b4a <_realloc_r+0x366>
   85a5a:	6823      	ldr	r3, [r4, #0]
   85a5c:	2a1b      	cmp	r2, #27
   85a5e:	f8ca 3008 	str.w	r3, [sl, #8]
   85a62:	6863      	ldr	r3, [r4, #4]
   85a64:	f8ca 300c 	str.w	r3, [sl, #12]
   85a68:	f200 8084 	bhi.w	85b74 <_realloc_r+0x390>
   85a6c:	3408      	adds	r4, #8
   85a6e:	f10a 0310 	add.w	r3, sl, #16
   85a72:	6822      	ldr	r2, [r4, #0]
   85a74:	601a      	str	r2, [r3, #0]
   85a76:	6862      	ldr	r2, [r4, #4]
   85a78:	605a      	str	r2, [r3, #4]
   85a7a:	68a2      	ldr	r2, [r4, #8]
   85a7c:	609a      	str	r2, [r3, #8]
   85a7e:	ebc6 020c 	rsb	r2, r6, ip
   85a82:	eb0a 0306 	add.w	r3, sl, r6
   85a86:	f042 0201 	orr.w	r2, r2, #1
   85a8a:	f8cb 3008 	str.w	r3, [fp, #8]
   85a8e:	605a      	str	r2, [r3, #4]
   85a90:	f8da 3004 	ldr.w	r3, [sl, #4]
   85a94:	4648      	mov	r0, r9
   85a96:	f003 0301 	and.w	r3, r3, #1
   85a9a:	431e      	orrs	r6, r3
   85a9c:	f8ca 6004 	str.w	r6, [sl, #4]
   85aa0:	f7ff fe9e 	bl	857e0 <__malloc_unlock>
   85aa4:	4638      	mov	r0, r7
   85aa6:	e71b      	b.n	858e0 <_realloc_r+0xfc>
   85aa8:	68a3      	ldr	r3, [r4, #8]
   85aaa:	2a24      	cmp	r2, #36	; 0x24
   85aac:	6083      	str	r3, [r0, #8]
   85aae:	68e3      	ldr	r3, [r4, #12]
   85ab0:	60c3      	str	r3, [r0, #12]
   85ab2:	d02b      	beq.n	85b0c <_realloc_r+0x328>
   85ab4:	f100 0310 	add.w	r3, r0, #16
   85ab8:	f104 0210 	add.w	r2, r4, #16
   85abc:	e74a      	b.n	85954 <_realloc_r+0x170>
   85abe:	f850 2c04 	ldr.w	r2, [r0, #-4]
   85ac2:	46a0      	mov	r8, r4
   85ac4:	f022 0203 	bic.w	r2, r2, #3
   85ac8:	4415      	add	r5, r2
   85aca:	e6f9      	b.n	858c0 <_realloc_r+0xdc>
   85acc:	4621      	mov	r1, r4
   85ace:	4640      	mov	r0, r8
   85ad0:	4675      	mov	r5, lr
   85ad2:	4657      	mov	r7, sl
   85ad4:	f7ff fe1c 	bl	85710 <memmove>
   85ad8:	f8da 3004 	ldr.w	r3, [sl, #4]
   85adc:	e6f0      	b.n	858c0 <_realloc_r+0xdc>
   85ade:	4642      	mov	r2, r8
   85ae0:	e76e      	b.n	859c0 <_realloc_r+0x1dc>
   85ae2:	4621      	mov	r1, r4
   85ae4:	4640      	mov	r0, r8
   85ae6:	461d      	mov	r5, r3
   85ae8:	4657      	mov	r7, sl
   85aea:	f7ff fe11 	bl	85710 <memmove>
   85aee:	f8da 3004 	ldr.w	r3, [sl, #4]
   85af2:	e6e5      	b.n	858c0 <_realloc_r+0xdc>
   85af4:	68a3      	ldr	r3, [r4, #8]
   85af6:	2a24      	cmp	r2, #36	; 0x24
   85af8:	f8ca 3010 	str.w	r3, [sl, #16]
   85afc:	68e3      	ldr	r3, [r4, #12]
   85afe:	f8ca 3014 	str.w	r3, [sl, #20]
   85b02:	d018      	beq.n	85b36 <_realloc_r+0x352>
   85b04:	3410      	adds	r4, #16
   85b06:	f10a 0318 	add.w	r3, sl, #24
   85b0a:	e770      	b.n	859ee <_realloc_r+0x20a>
   85b0c:	6922      	ldr	r2, [r4, #16]
   85b0e:	f100 0318 	add.w	r3, r0, #24
   85b12:	6102      	str	r2, [r0, #16]
   85b14:	6961      	ldr	r1, [r4, #20]
   85b16:	f104 0218 	add.w	r2, r4, #24
   85b1a:	6141      	str	r1, [r0, #20]
   85b1c:	e71a      	b.n	85954 <_realloc_r+0x170>
   85b1e:	68a1      	ldr	r1, [r4, #8]
   85b20:	2a24      	cmp	r2, #36	; 0x24
   85b22:	f8ca 1010 	str.w	r1, [sl, #16]
   85b26:	68e1      	ldr	r1, [r4, #12]
   85b28:	f8ca 1014 	str.w	r1, [sl, #20]
   85b2c:	d00f      	beq.n	85b4e <_realloc_r+0x36a>
   85b2e:	3410      	adds	r4, #16
   85b30:	f10a 0218 	add.w	r2, sl, #24
   85b34:	e744      	b.n	859c0 <_realloc_r+0x1dc>
   85b36:	6922      	ldr	r2, [r4, #16]
   85b38:	f10a 0320 	add.w	r3, sl, #32
   85b3c:	f8ca 2018 	str.w	r2, [sl, #24]
   85b40:	6962      	ldr	r2, [r4, #20]
   85b42:	3418      	adds	r4, #24
   85b44:	f8ca 201c 	str.w	r2, [sl, #28]
   85b48:	e751      	b.n	859ee <_realloc_r+0x20a>
   85b4a:	463b      	mov	r3, r7
   85b4c:	e791      	b.n	85a72 <_realloc_r+0x28e>
   85b4e:	6921      	ldr	r1, [r4, #16]
   85b50:	f10a 0220 	add.w	r2, sl, #32
   85b54:	f8ca 1018 	str.w	r1, [sl, #24]
   85b58:	6961      	ldr	r1, [r4, #20]
   85b5a:	3418      	adds	r4, #24
   85b5c:	f8ca 101c 	str.w	r1, [sl, #28]
   85b60:	e72e      	b.n	859c0 <_realloc_r+0x1dc>
   85b62:	4621      	mov	r1, r4
   85b64:	4638      	mov	r0, r7
   85b66:	f8cd c004 	str.w	ip, [sp, #4]
   85b6a:	f7ff fdd1 	bl	85710 <memmove>
   85b6e:	f8dd c004 	ldr.w	ip, [sp, #4]
   85b72:	e784      	b.n	85a7e <_realloc_r+0x29a>
   85b74:	68a3      	ldr	r3, [r4, #8]
   85b76:	2a24      	cmp	r2, #36	; 0x24
   85b78:	f8ca 3010 	str.w	r3, [sl, #16]
   85b7c:	68e3      	ldr	r3, [r4, #12]
   85b7e:	f8ca 3014 	str.w	r3, [sl, #20]
   85b82:	d003      	beq.n	85b8c <_realloc_r+0x3a8>
   85b84:	3410      	adds	r4, #16
   85b86:	f10a 0318 	add.w	r3, sl, #24
   85b8a:	e772      	b.n	85a72 <_realloc_r+0x28e>
   85b8c:	6922      	ldr	r2, [r4, #16]
   85b8e:	f10a 0320 	add.w	r3, sl, #32
   85b92:	f8ca 2018 	str.w	r2, [sl, #24]
   85b96:	6962      	ldr	r2, [r4, #20]
   85b98:	3418      	adds	r4, #24
   85b9a:	f8ca 201c 	str.w	r2, [sl, #28]
   85b9e:	e768      	b.n	85a72 <_realloc_r+0x28e>
   85ba0:	200705e8 	.word	0x200705e8

00085ba4 <_sbrk_r>:
   85ba4:	b538      	push	{r3, r4, r5, lr}
   85ba6:	4c07      	ldr	r4, [pc, #28]	; (85bc4 <_sbrk_r+0x20>)
   85ba8:	2300      	movs	r3, #0
   85baa:	4605      	mov	r5, r0
   85bac:	4608      	mov	r0, r1
   85bae:	6023      	str	r3, [r4, #0]
   85bb0:	f7fc fe16 	bl	827e0 <_sbrk>
   85bb4:	1c43      	adds	r3, r0, #1
   85bb6:	d000      	beq.n	85bba <_sbrk_r+0x16>
   85bb8:	bd38      	pop	{r3, r4, r5, pc}
   85bba:	6823      	ldr	r3, [r4, #0]
   85bbc:	2b00      	cmp	r3, #0
   85bbe:	d0fb      	beq.n	85bb8 <_sbrk_r+0x14>
   85bc0:	602b      	str	r3, [r5, #0]
   85bc2:	bd38      	pop	{r3, r4, r5, pc}
   85bc4:	2007acf8 	.word	0x2007acf8

00085bc8 <__sread>:
   85bc8:	b510      	push	{r4, lr}
   85bca:	460c      	mov	r4, r1
   85bcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   85bd0:	f000 f9c2 	bl	85f58 <_read_r>
   85bd4:	2800      	cmp	r0, #0
   85bd6:	db03      	blt.n	85be0 <__sread+0x18>
   85bd8:	6d23      	ldr	r3, [r4, #80]	; 0x50
   85bda:	4403      	add	r3, r0
   85bdc:	6523      	str	r3, [r4, #80]	; 0x50
   85bde:	bd10      	pop	{r4, pc}
   85be0:	89a3      	ldrh	r3, [r4, #12]
   85be2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   85be6:	81a3      	strh	r3, [r4, #12]
   85be8:	bd10      	pop	{r4, pc}
   85bea:	bf00      	nop

00085bec <__swrite>:
   85bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   85bf0:	460c      	mov	r4, r1
   85bf2:	8989      	ldrh	r1, [r1, #12]
   85bf4:	461d      	mov	r5, r3
   85bf6:	05cb      	lsls	r3, r1, #23
   85bf8:	4616      	mov	r6, r2
   85bfa:	4607      	mov	r7, r0
   85bfc:	d506      	bpl.n	85c0c <__swrite+0x20>
   85bfe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   85c02:	2200      	movs	r2, #0
   85c04:	2302      	movs	r3, #2
   85c06:	f000 f993 	bl	85f30 <_lseek_r>
   85c0a:	89a1      	ldrh	r1, [r4, #12]
   85c0c:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   85c10:	81a1      	strh	r1, [r4, #12]
   85c12:	4638      	mov	r0, r7
   85c14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   85c18:	4632      	mov	r2, r6
   85c1a:	462b      	mov	r3, r5
   85c1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   85c20:	f000 b89e 	b.w	85d60 <_write_r>

00085c24 <__sseek>:
   85c24:	b510      	push	{r4, lr}
   85c26:	460c      	mov	r4, r1
   85c28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   85c2c:	f000 f980 	bl	85f30 <_lseek_r>
   85c30:	89a3      	ldrh	r3, [r4, #12]
   85c32:	1c42      	adds	r2, r0, #1
   85c34:	bf0e      	itee	eq
   85c36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   85c3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   85c3e:	6520      	strne	r0, [r4, #80]	; 0x50
   85c40:	81a3      	strh	r3, [r4, #12]
   85c42:	bd10      	pop	{r4, pc}

00085c44 <__sclose>:
   85c44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   85c48:	f000 b8f2 	b.w	85e30 <_close_r>

00085c4c <__swbuf_r>:
   85c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   85c4e:	460d      	mov	r5, r1
   85c50:	4614      	mov	r4, r2
   85c52:	4607      	mov	r7, r0
   85c54:	b110      	cbz	r0, 85c5c <__swbuf_r+0x10>
   85c56:	6b83      	ldr	r3, [r0, #56]	; 0x38
   85c58:	2b00      	cmp	r3, #0
   85c5a:	d048      	beq.n	85cee <__swbuf_r+0xa2>
   85c5c:	89a2      	ldrh	r2, [r4, #12]
   85c5e:	69a0      	ldr	r0, [r4, #24]
   85c60:	b293      	uxth	r3, r2
   85c62:	60a0      	str	r0, [r4, #8]
   85c64:	0718      	lsls	r0, r3, #28
   85c66:	d538      	bpl.n	85cda <__swbuf_r+0x8e>
   85c68:	6926      	ldr	r6, [r4, #16]
   85c6a:	2e00      	cmp	r6, #0
   85c6c:	d035      	beq.n	85cda <__swbuf_r+0x8e>
   85c6e:	0499      	lsls	r1, r3, #18
   85c70:	b2ed      	uxtb	r5, r5
   85c72:	d515      	bpl.n	85ca0 <__swbuf_r+0x54>
   85c74:	6823      	ldr	r3, [r4, #0]
   85c76:	6962      	ldr	r2, [r4, #20]
   85c78:	1b9e      	subs	r6, r3, r6
   85c7a:	4296      	cmp	r6, r2
   85c7c:	da1c      	bge.n	85cb8 <__swbuf_r+0x6c>
   85c7e:	3601      	adds	r6, #1
   85c80:	68a2      	ldr	r2, [r4, #8]
   85c82:	1c59      	adds	r1, r3, #1
   85c84:	3a01      	subs	r2, #1
   85c86:	60a2      	str	r2, [r4, #8]
   85c88:	6021      	str	r1, [r4, #0]
   85c8a:	701d      	strb	r5, [r3, #0]
   85c8c:	6963      	ldr	r3, [r4, #20]
   85c8e:	42b3      	cmp	r3, r6
   85c90:	d01a      	beq.n	85cc8 <__swbuf_r+0x7c>
   85c92:	89a3      	ldrh	r3, [r4, #12]
   85c94:	07db      	lsls	r3, r3, #31
   85c96:	d501      	bpl.n	85c9c <__swbuf_r+0x50>
   85c98:	2d0a      	cmp	r5, #10
   85c9a:	d015      	beq.n	85cc8 <__swbuf_r+0x7c>
   85c9c:	4628      	mov	r0, r5
   85c9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   85ca0:	6e63      	ldr	r3, [r4, #100]	; 0x64
   85ca2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   85ca6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   85caa:	6663      	str	r3, [r4, #100]	; 0x64
   85cac:	6823      	ldr	r3, [r4, #0]
   85cae:	81a2      	strh	r2, [r4, #12]
   85cb0:	6962      	ldr	r2, [r4, #20]
   85cb2:	1b9e      	subs	r6, r3, r6
   85cb4:	4296      	cmp	r6, r2
   85cb6:	dbe2      	blt.n	85c7e <__swbuf_r+0x32>
   85cb8:	4638      	mov	r0, r7
   85cba:	4621      	mov	r1, r4
   85cbc:	f7fe fde4 	bl	84888 <_fflush_r>
   85cc0:	b940      	cbnz	r0, 85cd4 <__swbuf_r+0x88>
   85cc2:	6823      	ldr	r3, [r4, #0]
   85cc4:	2601      	movs	r6, #1
   85cc6:	e7db      	b.n	85c80 <__swbuf_r+0x34>
   85cc8:	4638      	mov	r0, r7
   85cca:	4621      	mov	r1, r4
   85ccc:	f7fe fddc 	bl	84888 <_fflush_r>
   85cd0:	2800      	cmp	r0, #0
   85cd2:	d0e3      	beq.n	85c9c <__swbuf_r+0x50>
   85cd4:	f04f 30ff 	mov.w	r0, #4294967295
   85cd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   85cda:	4638      	mov	r0, r7
   85cdc:	4621      	mov	r1, r4
   85cde:	f7fe fcbd 	bl	8465c <__swsetup_r>
   85ce2:	2800      	cmp	r0, #0
   85ce4:	d1f6      	bne.n	85cd4 <__swbuf_r+0x88>
   85ce6:	89a2      	ldrh	r2, [r4, #12]
   85ce8:	6926      	ldr	r6, [r4, #16]
   85cea:	b293      	uxth	r3, r2
   85cec:	e7bf      	b.n	85c6e <__swbuf_r+0x22>
   85cee:	f7fe fde7 	bl	848c0 <__sinit>
   85cf2:	e7b3      	b.n	85c5c <__swbuf_r+0x10>

00085cf4 <_wcrtomb_r>:
   85cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   85cf8:	461e      	mov	r6, r3
   85cfa:	b086      	sub	sp, #24
   85cfc:	460c      	mov	r4, r1
   85cfe:	4605      	mov	r5, r0
   85d00:	4617      	mov	r7, r2
   85d02:	4b0f      	ldr	r3, [pc, #60]	; (85d40 <_wcrtomb_r+0x4c>)
   85d04:	b191      	cbz	r1, 85d2c <_wcrtomb_r+0x38>
   85d06:	f8d3 8000 	ldr.w	r8, [r3]
   85d0a:	f7ff f999 	bl	85040 <__locale_charset>
   85d0e:	9600      	str	r6, [sp, #0]
   85d10:	4603      	mov	r3, r0
   85d12:	4621      	mov	r1, r4
   85d14:	463a      	mov	r2, r7
   85d16:	4628      	mov	r0, r5
   85d18:	47c0      	blx	r8
   85d1a:	1c43      	adds	r3, r0, #1
   85d1c:	d103      	bne.n	85d26 <_wcrtomb_r+0x32>
   85d1e:	2200      	movs	r2, #0
   85d20:	238a      	movs	r3, #138	; 0x8a
   85d22:	6032      	str	r2, [r6, #0]
   85d24:	602b      	str	r3, [r5, #0]
   85d26:	b006      	add	sp, #24
   85d28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85d2c:	681f      	ldr	r7, [r3, #0]
   85d2e:	f7ff f987 	bl	85040 <__locale_charset>
   85d32:	9600      	str	r6, [sp, #0]
   85d34:	4603      	mov	r3, r0
   85d36:	4622      	mov	r2, r4
   85d38:	4628      	mov	r0, r5
   85d3a:	a903      	add	r1, sp, #12
   85d3c:	47b8      	blx	r7
   85d3e:	e7ec      	b.n	85d1a <_wcrtomb_r+0x26>
   85d40:	200709f8 	.word	0x200709f8

00085d44 <__ascii_wctomb>:
   85d44:	b121      	cbz	r1, 85d50 <__ascii_wctomb+0xc>
   85d46:	2aff      	cmp	r2, #255	; 0xff
   85d48:	d804      	bhi.n	85d54 <__ascii_wctomb+0x10>
   85d4a:	700a      	strb	r2, [r1, #0]
   85d4c:	2001      	movs	r0, #1
   85d4e:	4770      	bx	lr
   85d50:	4608      	mov	r0, r1
   85d52:	4770      	bx	lr
   85d54:	238a      	movs	r3, #138	; 0x8a
   85d56:	6003      	str	r3, [r0, #0]
   85d58:	f04f 30ff 	mov.w	r0, #4294967295
   85d5c:	4770      	bx	lr
   85d5e:	bf00      	nop

00085d60 <_write_r>:
   85d60:	b570      	push	{r4, r5, r6, lr}
   85d62:	4c08      	ldr	r4, [pc, #32]	; (85d84 <_write_r+0x24>)
   85d64:	4606      	mov	r6, r0
   85d66:	2500      	movs	r5, #0
   85d68:	4608      	mov	r0, r1
   85d6a:	4611      	mov	r1, r2
   85d6c:	461a      	mov	r2, r3
   85d6e:	6025      	str	r5, [r4, #0]
   85d70:	f7fa fe7c 	bl	80a6c <_write>
   85d74:	1c43      	adds	r3, r0, #1
   85d76:	d000      	beq.n	85d7a <_write_r+0x1a>
   85d78:	bd70      	pop	{r4, r5, r6, pc}
   85d7a:	6823      	ldr	r3, [r4, #0]
   85d7c:	2b00      	cmp	r3, #0
   85d7e:	d0fb      	beq.n	85d78 <_write_r+0x18>
   85d80:	6033      	str	r3, [r6, #0]
   85d82:	bd70      	pop	{r4, r5, r6, pc}
   85d84:	2007acf8 	.word	0x2007acf8

00085d88 <__register_exitproc>:
   85d88:	b5f0      	push	{r4, r5, r6, r7, lr}
   85d8a:	4c27      	ldr	r4, [pc, #156]	; (85e28 <__register_exitproc+0xa0>)
   85d8c:	b085      	sub	sp, #20
   85d8e:	6826      	ldr	r6, [r4, #0]
   85d90:	4607      	mov	r7, r0
   85d92:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   85d96:	2c00      	cmp	r4, #0
   85d98:	d040      	beq.n	85e1c <__register_exitproc+0x94>
   85d9a:	6865      	ldr	r5, [r4, #4]
   85d9c:	2d1f      	cmp	r5, #31
   85d9e:	dd1e      	ble.n	85dde <__register_exitproc+0x56>
   85da0:	4822      	ldr	r0, [pc, #136]	; (85e2c <__register_exitproc+0xa4>)
   85da2:	b918      	cbnz	r0, 85dac <__register_exitproc+0x24>
   85da4:	f04f 30ff 	mov.w	r0, #4294967295
   85da8:	b005      	add	sp, #20
   85daa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   85dac:	f44f 70c8 	mov.w	r0, #400	; 0x190
   85db0:	9103      	str	r1, [sp, #12]
   85db2:	9202      	str	r2, [sp, #8]
   85db4:	9301      	str	r3, [sp, #4]
   85db6:	f7ff f9bd 	bl	85134 <malloc>
   85dba:	9903      	ldr	r1, [sp, #12]
   85dbc:	4604      	mov	r4, r0
   85dbe:	9a02      	ldr	r2, [sp, #8]
   85dc0:	9b01      	ldr	r3, [sp, #4]
   85dc2:	2800      	cmp	r0, #0
   85dc4:	d0ee      	beq.n	85da4 <__register_exitproc+0x1c>
   85dc6:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
   85dca:	2000      	movs	r0, #0
   85dcc:	6025      	str	r5, [r4, #0]
   85dce:	6060      	str	r0, [r4, #4]
   85dd0:	4605      	mov	r5, r0
   85dd2:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   85dd6:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   85dda:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   85dde:	b93f      	cbnz	r7, 85df0 <__register_exitproc+0x68>
   85de0:	1c6b      	adds	r3, r5, #1
   85de2:	2000      	movs	r0, #0
   85de4:	3502      	adds	r5, #2
   85de6:	6063      	str	r3, [r4, #4]
   85de8:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
   85dec:	b005      	add	sp, #20
   85dee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   85df0:	2601      	movs	r6, #1
   85df2:	40ae      	lsls	r6, r5
   85df4:	eb04 0085 	add.w	r0, r4, r5, lsl #2
   85df8:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   85dfc:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   85e00:	2f02      	cmp	r7, #2
   85e02:	ea42 0206 	orr.w	r2, r2, r6
   85e06:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   85e0a:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   85e0e:	d1e7      	bne.n	85de0 <__register_exitproc+0x58>
   85e10:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   85e14:	431e      	orrs	r6, r3
   85e16:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
   85e1a:	e7e1      	b.n	85de0 <__register_exitproc+0x58>
   85e1c:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   85e20:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   85e24:	e7b9      	b.n	85d9a <__register_exitproc+0x12>
   85e26:	bf00      	nop
   85e28:	000864e4 	.word	0x000864e4
   85e2c:	00085135 	.word	0x00085135

00085e30 <_close_r>:
   85e30:	b538      	push	{r3, r4, r5, lr}
   85e32:	4c07      	ldr	r4, [pc, #28]	; (85e50 <_close_r+0x20>)
   85e34:	2300      	movs	r3, #0
   85e36:	4605      	mov	r5, r0
   85e38:	4608      	mov	r0, r1
   85e3a:	6023      	str	r3, [r4, #0]
   85e3c:	f7fc fcea 	bl	82814 <_close>
   85e40:	1c43      	adds	r3, r0, #1
   85e42:	d000      	beq.n	85e46 <_close_r+0x16>
   85e44:	bd38      	pop	{r3, r4, r5, pc}
   85e46:	6823      	ldr	r3, [r4, #0]
   85e48:	2b00      	cmp	r3, #0
   85e4a:	d0fb      	beq.n	85e44 <_close_r+0x14>
   85e4c:	602b      	str	r3, [r5, #0]
   85e4e:	bd38      	pop	{r3, r4, r5, pc}
   85e50:	2007acf8 	.word	0x2007acf8

00085e54 <_fclose_r>:
   85e54:	b570      	push	{r4, r5, r6, lr}
   85e56:	460c      	mov	r4, r1
   85e58:	4605      	mov	r5, r0
   85e5a:	b131      	cbz	r1, 85e6a <_fclose_r+0x16>
   85e5c:	b110      	cbz	r0, 85e64 <_fclose_r+0x10>
   85e5e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   85e60:	2b00      	cmp	r3, #0
   85e62:	d02f      	beq.n	85ec4 <_fclose_r+0x70>
   85e64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   85e68:	b90b      	cbnz	r3, 85e6e <_fclose_r+0x1a>
   85e6a:	2000      	movs	r0, #0
   85e6c:	bd70      	pop	{r4, r5, r6, pc}
   85e6e:	4628      	mov	r0, r5
   85e70:	4621      	mov	r1, r4
   85e72:	f7fe fd09 	bl	84888 <_fflush_r>
   85e76:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   85e78:	4606      	mov	r6, r0
   85e7a:	b133      	cbz	r3, 85e8a <_fclose_r+0x36>
   85e7c:	4628      	mov	r0, r5
   85e7e:	69e1      	ldr	r1, [r4, #28]
   85e80:	4798      	blx	r3
   85e82:	2800      	cmp	r0, #0
   85e84:	bfb8      	it	lt
   85e86:	f04f 36ff 	movlt.w	r6, #4294967295
   85e8a:	89a3      	ldrh	r3, [r4, #12]
   85e8c:	061b      	lsls	r3, r3, #24
   85e8e:	d41c      	bmi.n	85eca <_fclose_r+0x76>
   85e90:	6b21      	ldr	r1, [r4, #48]	; 0x30
   85e92:	b141      	cbz	r1, 85ea6 <_fclose_r+0x52>
   85e94:	f104 0340 	add.w	r3, r4, #64	; 0x40
   85e98:	4299      	cmp	r1, r3
   85e9a:	d002      	beq.n	85ea2 <_fclose_r+0x4e>
   85e9c:	4628      	mov	r0, r5
   85e9e:	f7fe fe53 	bl	84b48 <_free_r>
   85ea2:	2300      	movs	r3, #0
   85ea4:	6323      	str	r3, [r4, #48]	; 0x30
   85ea6:	6c61      	ldr	r1, [r4, #68]	; 0x44
   85ea8:	b121      	cbz	r1, 85eb4 <_fclose_r+0x60>
   85eaa:	4628      	mov	r0, r5
   85eac:	f7fe fe4c 	bl	84b48 <_free_r>
   85eb0:	2300      	movs	r3, #0
   85eb2:	6463      	str	r3, [r4, #68]	; 0x44
   85eb4:	f7fe fd7e 	bl	849b4 <__sfp_lock_acquire>
   85eb8:	2300      	movs	r3, #0
   85eba:	81a3      	strh	r3, [r4, #12]
   85ebc:	f7fe fd7c 	bl	849b8 <__sfp_lock_release>
   85ec0:	4630      	mov	r0, r6
   85ec2:	bd70      	pop	{r4, r5, r6, pc}
   85ec4:	f7fe fcfc 	bl	848c0 <__sinit>
   85ec8:	e7cc      	b.n	85e64 <_fclose_r+0x10>
   85eca:	4628      	mov	r0, r5
   85ecc:	6921      	ldr	r1, [r4, #16]
   85ece:	f7fe fe3b 	bl	84b48 <_free_r>
   85ed2:	e7dd      	b.n	85e90 <_fclose_r+0x3c>

00085ed4 <fclose>:
   85ed4:	4b02      	ldr	r3, [pc, #8]	; (85ee0 <fclose+0xc>)
   85ed6:	4601      	mov	r1, r0
   85ed8:	6818      	ldr	r0, [r3, #0]
   85eda:	f7ff bfbb 	b.w	85e54 <_fclose_r>
   85ede:	bf00      	nop
   85ee0:	200705c0 	.word	0x200705c0

00085ee4 <_fstat_r>:
   85ee4:	b538      	push	{r3, r4, r5, lr}
   85ee6:	4c08      	ldr	r4, [pc, #32]	; (85f08 <_fstat_r+0x24>)
   85ee8:	2300      	movs	r3, #0
   85eea:	4605      	mov	r5, r0
   85eec:	4608      	mov	r0, r1
   85eee:	4611      	mov	r1, r2
   85ef0:	6023      	str	r3, [r4, #0]
   85ef2:	f7fc fc93 	bl	8281c <_fstat>
   85ef6:	1c43      	adds	r3, r0, #1
   85ef8:	d000      	beq.n	85efc <_fstat_r+0x18>
   85efa:	bd38      	pop	{r3, r4, r5, pc}
   85efc:	6823      	ldr	r3, [r4, #0]
   85efe:	2b00      	cmp	r3, #0
   85f00:	d0fb      	beq.n	85efa <_fstat_r+0x16>
   85f02:	602b      	str	r3, [r5, #0]
   85f04:	bd38      	pop	{r3, r4, r5, pc}
   85f06:	bf00      	nop
   85f08:	2007acf8 	.word	0x2007acf8

00085f0c <_isatty_r>:
   85f0c:	b538      	push	{r3, r4, r5, lr}
   85f0e:	4c07      	ldr	r4, [pc, #28]	; (85f2c <_isatty_r+0x20>)
   85f10:	2300      	movs	r3, #0
   85f12:	4605      	mov	r5, r0
   85f14:	4608      	mov	r0, r1
   85f16:	6023      	str	r3, [r4, #0]
   85f18:	f7fc fc86 	bl	82828 <_isatty>
   85f1c:	1c43      	adds	r3, r0, #1
   85f1e:	d000      	beq.n	85f22 <_isatty_r+0x16>
   85f20:	bd38      	pop	{r3, r4, r5, pc}
   85f22:	6823      	ldr	r3, [r4, #0]
   85f24:	2b00      	cmp	r3, #0
   85f26:	d0fb      	beq.n	85f20 <_isatty_r+0x14>
   85f28:	602b      	str	r3, [r5, #0]
   85f2a:	bd38      	pop	{r3, r4, r5, pc}
   85f2c:	2007acf8 	.word	0x2007acf8

00085f30 <_lseek_r>:
   85f30:	b570      	push	{r4, r5, r6, lr}
   85f32:	4c08      	ldr	r4, [pc, #32]	; (85f54 <_lseek_r+0x24>)
   85f34:	4606      	mov	r6, r0
   85f36:	2500      	movs	r5, #0
   85f38:	4608      	mov	r0, r1
   85f3a:	4611      	mov	r1, r2
   85f3c:	461a      	mov	r2, r3
   85f3e:	6025      	str	r5, [r4, #0]
   85f40:	f7fc fc74 	bl	8282c <_lseek>
   85f44:	1c43      	adds	r3, r0, #1
   85f46:	d000      	beq.n	85f4a <_lseek_r+0x1a>
   85f48:	bd70      	pop	{r4, r5, r6, pc}
   85f4a:	6823      	ldr	r3, [r4, #0]
   85f4c:	2b00      	cmp	r3, #0
   85f4e:	d0fb      	beq.n	85f48 <_lseek_r+0x18>
   85f50:	6033      	str	r3, [r6, #0]
   85f52:	bd70      	pop	{r4, r5, r6, pc}
   85f54:	2007acf8 	.word	0x2007acf8

00085f58 <_read_r>:
   85f58:	b570      	push	{r4, r5, r6, lr}
   85f5a:	4c08      	ldr	r4, [pc, #32]	; (85f7c <_read_r+0x24>)
   85f5c:	4606      	mov	r6, r0
   85f5e:	2500      	movs	r5, #0
   85f60:	4608      	mov	r0, r1
   85f62:	4611      	mov	r1, r2
   85f64:	461a      	mov	r2, r3
   85f66:	6025      	str	r5, [r4, #0]
   85f68:	f7fa fd1a 	bl	809a0 <_read>
   85f6c:	1c43      	adds	r3, r0, #1
   85f6e:	d000      	beq.n	85f72 <_read_r+0x1a>
   85f70:	bd70      	pop	{r4, r5, r6, pc}
   85f72:	6823      	ldr	r3, [r4, #0]
   85f74:	2b00      	cmp	r3, #0
   85f76:	d0fb      	beq.n	85f70 <_read_r+0x18>
   85f78:	6033      	str	r3, [r6, #0]
   85f7a:	bd70      	pop	{r4, r5, r6, pc}
   85f7c:	2007acf8 	.word	0x2007acf8
   85f80:	00000724 	.word	0x00000724
   85f84:	5f495754 	.word	0x5f495754
   85f88:	5f444d43 	.word	0x5f444d43
   85f8c:	5f4d5241 	.word	0x5f4d5241
   85f90:	54494e49 	.word	0x54494e49
   85f94:	0000000a 	.word	0x0000000a
   85f98:	5f495754 	.word	0x5f495754
   85f9c:	5f444d43 	.word	0x5f444d43
   85fa0:	5f4d5241 	.word	0x5f4d5241
   85fa4:	5f514552 	.word	0x5f514552
   85fa8:	5f584f42 	.word	0x5f584f42
   85fac:	4f464e49 	.word	0x4f464e49
   85fb0:	0000000a 	.word	0x0000000a
   85fb4:	5f495754 	.word	0x5f495754
   85fb8:	5f444d43 	.word	0x5f444d43
   85fbc:	5f4d5241 	.word	0x5f4d5241
   85fc0:	5f514552 	.word	0x5f514552
   85fc4:	5f4a424f 	.word	0x5f4a424f
   85fc8:	4f464e49 	.word	0x4f464e49
   85fcc:	0000000a 	.word	0x0000000a
   85fd0:	5f495754 	.word	0x5f495754
   85fd4:	5f444d43 	.word	0x5f444d43
   85fd8:	5f4d5241 	.word	0x5f4d5241
   85fdc:	5f514552 	.word	0x5f514552
   85fe0:	4c4c4f43 	.word	0x4c4c4f43
   85fe4:	5f544345 	.word	0x5f544345
   85fe8:	4f464e49 	.word	0x4f464e49
   85fec:	0000000a 	.word	0x0000000a
   85ff0:	5f495754 	.word	0x5f495754
   85ff4:	5f444d43 	.word	0x5f444d43
   85ff8:	4b434950 	.word	0x4b434950
   85ffc:	535f5055 	.word	0x535f5055
   86000:	54524154 	.word	0x54524154
   86004:	0000000a 	.word	0x0000000a
   86008:	5f495754 	.word	0x5f495754
   8600c:	5f444d43 	.word	0x5f444d43
   86010:	4b434950 	.word	0x4b434950
   86014:	535f5055 	.word	0x535f5055
   86018:	55544154 	.word	0x55544154
   8601c:	00000a53 	.word	0x00000a53
   86020:	5f495754 	.word	0x5f495754
   86024:	5f444d43 	.word	0x5f444d43
   86028:	504f5244 	.word	0x504f5244
   8602c:	5f46464f 	.word	0x5f46464f
   86030:	52415453 	.word	0x52415453
   86034:	00000a54 	.word	0x00000a54
   86038:	5f495754 	.word	0x5f495754
   8603c:	5f444d43 	.word	0x5f444d43
   86040:	504f5244 	.word	0x504f5244
   86044:	5f46464f 	.word	0x5f46464f
   86048:	54415453 	.word	0x54415453
   8604c:	000a5355 	.word	0x000a5355
   86050:	5f495754 	.word	0x5f495754
   86054:	5f444d43 	.word	0x5f444d43
   86058:	4f525245 	.word	0x4f525245
   8605c:	00000a52 	.word	0x00000a52
   86060:	6f727265 	.word	0x6f727265
   86064:	00000a72 	.word	0x00000a72
   86068:	6c696146 	.word	0x6c696146
   8606c:	31313120 	.word	0x31313120
   86070:	00000000 	.word	0x00000000
   86074:	6c696146 	.word	0x6c696146
   86078:	32323220 	.word	0x32323220
   8607c:	00000000 	.word	0x00000000
   86080:	6c696146 	.word	0x6c696146
   86084:	33333320 	.word	0x33333320
   86088:	00000000 	.word	0x00000000
   8608c:	4f525245 	.word	0x4f525245
   86090:	69702052 	.word	0x69702052
   86094:	70756b63 	.word	0x70756b63
   86098:	61747320 	.word	0x61747320
   8609c:	00737574 	.word	0x00737574
   860a0:	3a746f67 	.word	0x3a746f67
   860a4:	20782520 	.word	0x20782520
   860a8:	000a7525 	.word	0x000a7525
   860ac:	6f727245 	.word	0x6f727245
   860b0:	6e6f2072 	.word	0x6e6f2072
   860b4:	6e657320 	.word	0x6e657320
   860b8:	74732064 	.word	0x74732064
   860bc:	73757461 	.word	0x73757461
   860c0:	63697020 	.word	0x63697020
   860c4:	0070756b 	.word	0x0070756b
   860c8:	444e4553 	.word	0x444e4553
   860cc:	434f5320 	.word	0x434f5320
   860d0:	5854454b 	.word	0x5854454b
   860d4:	00000059 	.word	0x00000059
   860d8:	444e4553 	.word	0x444e4553
   860dc:	55515320 	.word	0x55515320
   860e0:	58455241 	.word	0x58455241
   860e4:	00000059 	.word	0x00000059
   860e8:	444e4553 	.word	0x444e4553
   860ec:	414c4720 	.word	0x414c4720
   860f0:	59585353 	.word	0x59585353
   860f4:	00000000 	.word	0x00000000
   860f8:	444e4553 	.word	0x444e4553
   860fc:	786f4220 	.word	0x786f4220
   86100:	6c616f47 	.word	0x6c616f47
   86104:	00007978 	.word	0x00007978
   86108:	4473695f 	.word	0x4473695f
   8610c:	50656e6f 	.word	0x50656e6f
   86110:	756b6369 	.word	0x756b6369
   86114:	00000070 	.word	0x00000070
   86118:	76697244 	.word	0x76697244
   8611c:	20676e69 	.word	0x20676e69
   86120:	25206f74 	.word	0x25206f74
   86124:	00000a64 	.word	0x00000a64
   86128:	69727241 	.word	0x69727241
   8612c:	20646576 	.word	0x20646576
   86130:	25205441 	.word	0x25205441
   86134:	00000a64 	.word	0x00000a64
   86138:	4473695f 	.word	0x4473695f
   8613c:	44656e6f 	.word	0x44656e6f
   86140:	6f706f72 	.word	0x6f706f72
   86144:	00006666 	.word	0x00006666
   86148:	6c6c6f63 	.word	0x6c6c6f63
   8614c:	41746365 	.word	0x41746365
   86150:	203d6c6c 	.word	0x203d6c6c
   86154:	00006425 	.word	0x00006425
   86158:	44746573 	.word	0x44746573
   8615c:	50656e6f 	.word	0x50656e6f
   86160:	756b6369 	.word	0x756b6369
   86164:	00000a70 	.word	0x00000a70
   86168:	44746573 	.word	0x44746573
   8616c:	44656e6f 	.word	0x44656e6f
   86170:	6f706f72 	.word	0x6f706f72
   86174:	000a6666 	.word	0x000a6666
   86178:	6b636f53 	.word	0x6b636f53
   8617c:	00000000 	.word	0x00000000
   86180:	73616c47 	.word	0x73616c47
   86184:	00000073 	.word	0x00000073
   86188:	65627543 	.word	0x65627543
   8618c:	00000000 	.word	0x00000000
   86190:	706f7244 	.word	0x706f7244
   86194:	66666f20 	.word	0x66666f20
   86198:	00000000 	.word	0x00000000
   8619c:	09097325 	.word	0x09097325
   861a0:	25096325 	.word	0x25096325
   861a4:	75250975 	.word	0x75250975
   861a8:	0d752509 	.word	0x0d752509
   861ac:	0000000a 	.word	0x0000000a
   861b0:	454c4449 	.word	0x454c4449
   861b4:	00000000 	.word	0x00000000
   861b8:	00000a0d 	.word	0x00000a0d
   861bc:	20726d54 	.word	0x20726d54
   861c0:	00637653 	.word	0x00637653
   861c4:	72746c55 	.word	0x72746c55
   861c8:	756f7361 	.word	0x756f7361
   861cc:	6620646e 	.word	0x6620646e
   861d0:	646e756f 	.word	0x646e756f
   861d4:	6a626f20 	.word	0x6a626f20
   861d8:	20746365 	.word	0x20746365
   861dc:	74736964 	.word	0x74736964
   861e0:	65636e61 	.word	0x65636e61
   861e4:	0000000a 	.word	0x0000000a
   861e8:	74736944 	.word	0x74736944
   861ec:	65636e61 	.word	0x65636e61
   861f0:	206f7420 	.word	0x206f7420
   861f4:	656a626f 	.word	0x656a626f
   861f8:	203a7463 	.word	0x203a7463
   861fc:	0a756c25 	.word	0x0a756c25
   86200:	00000000 	.word	0x00000000
   86204:	6c676e41 	.word	0x6c676e41
   86208:	6f742065 	.word	0x6f742065
   8620c:	6a626f20 	.word	0x6a626f20
   86210:	3a746365 	.word	0x3a746365
   86214:	756c2520 	.word	0x756c2520
   86218:	0000000a 	.word	0x0000000a
   8621c:	69646f4d 	.word	0x69646f4d
   86220:	6e697966 	.word	0x6e697966
   86224:	72642067 	.word	0x72642067
   86228:	6e697669 	.word	0x6e697669
   8622c:	00000a67 	.word	0x00000a67
   86230:	54494e49 	.word	0x54494e49
   86234:	4d52415f 	.word	0x4d52415f
   86238:	00000000 	.word	0x00000000
   8623c:	74696e69 	.word	0x74696e69
   86240:	6d726120 	.word	0x6d726120
   86244:	6e6f6420 	.word	0x6e6f6420
   86248:	00000a65 	.word	0x00000a65
   8624c:	696d7261 	.word	0x696d7261
   86250:	3a6f666e 	.word	0x3a6f666e
   86254:	20752520 	.word	0x20752520
   86258:	25207525 	.word	0x25207525
   8625c:	75252075 	.word	0x75252075
   86260:	6c6c6120 	.word	0x6c6c6120
   86264:	7525203a 	.word	0x7525203a
   86268:	00000000 	.word	0x00000000
   8626c:	54494e49 	.word	0x54494e49
   86270:	4d524120 	.word	0x4d524120
   86274:	204f4e20 	.word	0x204f4e20
   86278:	41544144 	.word	0x41544144
   8627c:	00000000 	.word	0x00000000
   86280:	52415453 	.word	0x52415453
   86284:	20444554 	.word	0x20444554
   86288:	4b434950 	.word	0x4b434950
   8628c:	00005055 	.word	0x00005055
   86290:	4c494146 	.word	0x4c494146
   86294:	54204445 	.word	0x54204445
   86298:	5453204f 	.word	0x5453204f
   8629c:	5f545241 	.word	0x5f545241
   862a0:	4b434950 	.word	0x4b434950
   862a4:	00005055 	.word	0x00005055
   862a8:	4b434950 	.word	0x4b434950
   862ac:	465f5055 	.word	0x465f5055
   862b0:	454c4941 	.word	0x454c4941
   862b4:	00000044 	.word	0x00000044
   862b8:	4b434950 	.word	0x4b434950
   862bc:	445f5055 	.word	0x445f5055
   862c0:	5f454e4f 	.word	0x5f454e4f
   862c4:	56495244 	.word	0x56495244
   862c8:	00000045 	.word	0x00000045
   862cc:	4b434950 	.word	0x4b434950
   862d0:	445f5055 	.word	0x445f5055
   862d4:	00454e4f 	.word	0x00454e4f
   862d8:	66206f67 	.word	0x66206f67
   862dc:	6177726f 	.word	0x6177726f
   862e0:	6f206472 	.word	0x6f206472
   862e4:	61622072 	.word	0x61622072
   862e8:	00006b63 	.word	0x00006b63
   862ec:	76697244 	.word	0x76697244
   862f0:	20676e69 	.word	0x20676e69
   862f4:	77726f66 	.word	0x77726f66
   862f8:	2f647261 	.word	0x2f647261
   862fc:	6b636162 	.word	0x6b636162
   86300:	64726177 	.word	0x64726177
   86304:	00000000 	.word	0x00000000
   86308:	45564148 	.word	0x45564148
   8630c:	726c4120 	.word	0x726c4120
   86310:	79646165 	.word	0x79646165
   86314:	4f524420 	.word	0x4f524420
   86318:	214e4556 	.word	0x214e4556
   8631c:	00000021 	.word	0x00000021
   86320:	6a64410a 	.word	0x6a64410a
   86324:	69747375 	.word	0x69747375
   86328:	7020676e 	.word	0x7020676e
   8632c:	7469736f 	.word	0x7469736f
   86330:	206e6f69 	.word	0x206e6f69
   86334:	69727564 	.word	0x69727564
   86338:	7020676e 	.word	0x7020676e
   8633c:	756b6369 	.word	0x756b6369
   86340:	21212170 	.word	0x21212170
   86344:	00000000 	.word	0x00000000
   86348:	4c494146 	.word	0x4c494146
   8634c:	4f542044 	.word	0x4f542044
   86350:	41545320 	.word	0x41545320
   86354:	44205452 	.word	0x44205452
   86358:	4f504f52 	.word	0x4f504f52
   8635c:	00004646 	.word	0x00004646
   86360:	504f5244 	.word	0x504f5244
   86364:	5f46464f 	.word	0x5f46464f
   86368:	454e4f44 	.word	0x454e4f44
   8636c:	0000000a 	.word	0x0000000a
   86370:	504f5244 	.word	0x504f5244
   86374:	5f46464f 	.word	0x5f46464f
   86378:	4e4e5552 	.word	0x4e4e5552
   8637c:	0a474e49 	.word	0x0a474e49
   86380:	00000000 	.word	0x00000000
   86384:	504f5244 	.word	0x504f5244
   86388:	5f46464f 	.word	0x5f46464f
   8638c:	4c494146 	.word	0x4c494146
   86390:	000a4445 	.word	0x000a4445
   86394:	504f5244 	.word	0x504f5244
   86398:	5f46464f 	.word	0x5f46464f
   8639c:	454c4449 	.word	0x454c4449
   863a0:	0000000a 	.word	0x0000000a
   863a4:	6c696166 	.word	0x6c696166
   863a8:	74206465 	.word	0x74206465
   863ac:	73206977 	.word	0x73206977
   863b0:	63746977 	.word	0x63746977
   863b4:	64252068 	.word	0x64252068
   863b8:	0000000a 	.word	0x0000000a
   863bc:	3e3e3e0a 	.word	0x3e3e3e0a
   863c0:	3e3e3e3e 	.word	0x3e3e3e3e
   863c4:	3e3e3e3e 	.word	0x3e3e3e3e
   863c8:	4952443e 	.word	0x4952443e
   863cc:	474e4956 	.word	0x474e4956
   863d0:	204f5420 	.word	0x204f5420
   863d4:	454a424f 	.word	0x454a424f
   863d8:	3c3c5443 	.word	0x3c3c5443
   863dc:	3c3c3c3c 	.word	0x3c3c3c3c
   863e0:	3c3c3c3c 	.word	0x3c3c3c3c
   863e4:	000a3c3c 	.word	0x000a3c3c
   863e8:	4f544f47 	.word	0x4f544f47
   863ec:	43495020 	.word	0x43495020
   863f0:	2050554b 	.word	0x2050554b
   863f4:	4d4f5246 	.word	0x4d4f5246
   863f8:	49524420 	.word	0x49524420
   863fc:	00004556 	.word	0x00004556
   86400:	4f544f47 	.word	0x4f544f47
   86404:	4f524420 	.word	0x4f524420
   86408:	46464f50 	.word	0x46464f50
   8640c:	4f524620 	.word	0x4f524620
   86410:	5244204d 	.word	0x5244204d
   86414:	00455649 	.word	0x00455649
   86418:	746f470a 	.word	0x746f470a
   8641c:	6c61566f 	.word	0x6c61566f
   86420:	25203d20 	.word	0x25203d20
   86424:	00000075 	.word	0x00000075
   86428:	736e6f43 	.word	0x736e6f43
   8642c:	20656c6f 	.word	0x20656c6f
   86430:	64616572 	.word	0x64616572
   86434:	00000a79 	.word	0x00000a79
   86438:	3d3d3d3d 	.word	0x3d3d3d3d
   8643c:	3d3d3d3d 	.word	0x3d3d3d3d
   86440:	3d3d3d3d 	.word	0x3d3d3d3d
   86444:	00000a3d 	.word	0x00000a3d
   86448:	76697244 	.word	0x76697244
   8644c:	4f6f5465 	.word	0x4f6f5465
   86450:	63656a62 	.word	0x63656a62
   86454:	00000074 	.word	0x00000074
   86458:	6c696146 	.word	0x6c696146
   8645c:	74206465 	.word	0x74206465
   86460:	7263206f 	.word	0x7263206f
   86464:	65746165 	.word	0x65746165
   86468:	69724420 	.word	0x69724420
   8646c:	6f546576 	.word	0x6f546576
   86470:	656a624f 	.word	0x656a624f
   86474:	742d7463 	.word	0x742d7463
   86478:	006b7361 	.word	0x006b7361
   8647c:	72746c55 	.word	0x72746c55
   86480:	6e655361 	.word	0x6e655361
   86484:	00726f73 	.word	0x00726f73
   86488:	6c696146 	.word	0x6c696146
   8648c:	74206465 	.word	0x74206465
   86490:	7263206f 	.word	0x7263206f
   86494:	65746165 	.word	0x65746165
   86498:	746c5520 	.word	0x746c5520
   8649c:	65536172 	.word	0x65536172
   864a0:	726f736e 	.word	0x726f736e
   864a4:	7361742d 	.word	0x7361742d
   864a8:	0000006b 	.word	0x0000006b
   864ac:	6d6d6f43 	.word	0x6d6d6f43
   864b0:	63696e75 	.word	0x63696e75
   864b4:	6f697461 	.word	0x6f697461
   864b8:	0000006e 	.word	0x0000006e
   864bc:	6c696146 	.word	0x6c696146
   864c0:	74206465 	.word	0x74206465
   864c4:	7263206f 	.word	0x7263206f
   864c8:	65746165 	.word	0x65746165
   864cc:	6d6f4320 	.word	0x6d6f4320
   864d0:	696e756d 	.word	0x696e756d
   864d4:	69746163 	.word	0x69746163
   864d8:	742d6e6f 	.word	0x742d6e6f
   864dc:	006b7361 	.word	0x006b7361
   864e0:	00000043 	.word	0x00000043

000864e4 <_global_impure_ptr>:
   864e4:	20070198 33323130 37363534 42413938     ... 0123456789AB
   864f4:	46454443 00000000 33323130 37363534     CDEF....01234567
   86504:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   86514:	0000296c                                l)..

00086518 <zeroes.6721>:
   86518:	30303030 30303030 30303030 30303030     0000000000000000

00086528 <blanks.6720>:
   86528:	20202020 20202020 20202020 20202020                     

00086538 <_init>:
   86538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8653a:	bf00      	nop
   8653c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8653e:	bc08      	pop	{r3}
   86540:	469e      	mov	lr, r3
   86542:	4770      	bx	lr

00086544 <__init_array_start>:
   86544:	00084721 	.word	0x00084721

00086548 <__frame_dummy_init_array_entry>:
   86548:	00080119                                ....

0008654c <_fini>:
   8654c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8654e:	bf00      	nop
   86550:	bcf8      	pop	{r3, r4, r5, r6, r7}
   86552:	bc08      	pop	{r3}
   86554:	469e      	mov	lr, r3
   86556:	4770      	bx	lr

00086558 <__fini_array_start>:
   86558:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20070000:	f3bf 8f5f 	dmb	sy
20070004:	3801      	subs	r0, #1
20070006:	d1fb      	bne.n	20070000 <portable_delay_cycles>
20070008:	4770      	bx	lr
2007000a:	bf00      	nop

2007000c <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007000c:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070010:	4a20      	ldr	r2, [pc, #128]	; (20070094 <SystemInit+0x88>)
20070012:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070014:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070018:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007001a:	4b1f      	ldr	r3, [pc, #124]	; (20070098 <SystemInit+0x8c>)
2007001c:	6a1b      	ldr	r3, [r3, #32]
2007001e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070022:	d107      	bne.n	20070034 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070024:	4a1d      	ldr	r2, [pc, #116]	; (2007009c <SystemInit+0x90>)
20070026:	4b1c      	ldr	r3, [pc, #112]	; (20070098 <SystemInit+0x8c>)
20070028:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007002a:	461a      	mov	r2, r3
2007002c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007002e:	f013 0f01 	tst.w	r3, #1
20070032:	d0fb      	beq.n	2007002c <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070034:	4a1a      	ldr	r2, [pc, #104]	; (200700a0 <SystemInit+0x94>)
20070036:	4b18      	ldr	r3, [pc, #96]	; (20070098 <SystemInit+0x8c>)
20070038:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007003a:	461a      	mov	r2, r3
2007003c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007003e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070042:	d0fb      	beq.n	2007003c <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070044:	4b14      	ldr	r3, [pc, #80]	; (20070098 <SystemInit+0x8c>)
20070046:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20070048:	f022 0203 	bic.w	r2, r2, #3
2007004c:	f042 0201 	orr.w	r2, r2, #1
20070050:	631a      	str	r2, [r3, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070052:	461a      	mov	r2, r3
20070054:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070056:	f013 0f08 	tst.w	r3, #8
2007005a:	d0fb      	beq.n	20070054 <SystemInit+0x48>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007005c:	4a11      	ldr	r2, [pc, #68]	; (200700a4 <SystemInit+0x98>)
2007005e:	4b0e      	ldr	r3, [pc, #56]	; (20070098 <SystemInit+0x8c>)
20070060:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070062:	461a      	mov	r2, r3
20070064:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070066:	f013 0f02 	tst.w	r3, #2
2007006a:	d0fb      	beq.n	20070064 <SystemInit+0x58>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007006c:	2211      	movs	r2, #17
2007006e:	4b0a      	ldr	r3, [pc, #40]	; (20070098 <SystemInit+0x8c>)
20070070:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070072:	461a      	mov	r2, r3
20070074:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070076:	f013 0f08 	tst.w	r3, #8
2007007a:	d0fb      	beq.n	20070074 <SystemInit+0x68>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007007c:	2212      	movs	r2, #18
2007007e:	4b06      	ldr	r3, [pc, #24]	; (20070098 <SystemInit+0x8c>)
20070080:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070082:	461a      	mov	r2, r3
20070084:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070086:	f013 0f08 	tst.w	r3, #8
2007008a:	d0fb      	beq.n	20070084 <SystemInit+0x78>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007008c:	4a06      	ldr	r2, [pc, #24]	; (200700a8 <SystemInit+0x9c>)
2007008e:	4b07      	ldr	r3, [pc, #28]	; (200700ac <SystemInit+0xa0>)
20070090:	601a      	str	r2, [r3, #0]
20070092:	4770      	bx	lr
20070094:	400e0a00 	.word	0x400e0a00
20070098:	400e0600 	.word	0x400e0600
2007009c:	00370809 	.word	0x00370809
200700a0:	01370809 	.word	0x01370809
200700a4:	200d3f01 	.word	0x200d3f01
200700a8:	0501bd00 	.word	0x0501bd00
200700ac:	20070194 	.word	0x20070194

200700b0 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700b0:	4b1b      	ldr	r3, [pc, #108]	; (20070120 <system_init_flash+0x70>)
200700b2:	4298      	cmp	r0, r3
200700b4:	d806      	bhi.n	200700c4 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700b6:	2300      	movs	r3, #0
200700b8:	4a1a      	ldr	r2, [pc, #104]	; (20070124 <system_init_flash+0x74>)
200700ba:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700bc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700c0:	6013      	str	r3, [r2, #0]
200700c2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700c4:	4b18      	ldr	r3, [pc, #96]	; (20070128 <system_init_flash+0x78>)
200700c6:	4298      	cmp	r0, r3
200700c8:	d807      	bhi.n	200700da <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700ca:	f44f 7380 	mov.w	r3, #256	; 0x100
200700ce:	4a15      	ldr	r2, [pc, #84]	; (20070124 <system_init_flash+0x74>)
200700d0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700d2:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700d6:	6013      	str	r3, [r2, #0]
200700d8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700da:	4b14      	ldr	r3, [pc, #80]	; (2007012c <system_init_flash+0x7c>)
200700dc:	4298      	cmp	r0, r3
200700de:	d807      	bhi.n	200700f0 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700e0:	f44f 7300 	mov.w	r3, #512	; 0x200
200700e4:	4a0f      	ldr	r2, [pc, #60]	; (20070124 <system_init_flash+0x74>)
200700e6:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700e8:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ec:	6013      	str	r3, [r2, #0]
200700ee:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700f0:	4b0f      	ldr	r3, [pc, #60]	; (20070130 <system_init_flash+0x80>)
200700f2:	4298      	cmp	r0, r3
200700f4:	d807      	bhi.n	20070106 <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700f6:	f44f 7340 	mov.w	r3, #768	; 0x300
200700fa:	4a0a      	ldr	r2, [pc, #40]	; (20070124 <system_init_flash+0x74>)
200700fc:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700fe:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070102:	6013      	str	r3, [r2, #0]
20070104:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
20070106:	4b0b      	ldr	r3, [pc, #44]	; (20070134 <system_init_flash+0x84>)
20070108:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007010a:	bf94      	ite	ls
2007010c:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070110:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070114:	4a03      	ldr	r2, [pc, #12]	; (20070124 <system_init_flash+0x74>)
20070116:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
20070118:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007011c:	6013      	str	r3, [r2, #0]
2007011e:	4770      	bx	lr
20070120:	0121eabf 	.word	0x0121eabf
20070124:	400e0a00 	.word	0x400e0a00
20070128:	02faf07f 	.word	0x02faf07f
2007012c:	03d08fff 	.word	0x03d08fff
20070130:	04c4b3ff 	.word	0x04c4b3ff
20070134:	055d4a7f 	.word	0x055d4a7f

20070138 <twi_masterPickupStatus>:
20070138:	00000005                                ....

2007013c <pulse_timers>:
2007013c:	40080000 00000001 0000001c 0000001c     ...@............
2007014c:	00090600 00000002 00000000 00000008     ................
2007015c:	00000002 40080000 00000000 0000001b     .......@........
2007016c:	0000001b 00090600 00000039 00000001     ........9.......
2007017c:	00000008 00000002                       ........

20070184 <uxCriticalNesting>:
20070184:	aaaaaaaa                                ....

20070188 <xFreeBytesRemaining>:
20070188:	0000a000                                ....

2007018c <xNextTaskUnblockTime>:
2007018c:	ffffffff                                ....

20070190 <g_interrupt_enabled>:
20070190:	00000001                                ....

20070194 <SystemCoreClock>:
20070194:	003d0900                                ..=.

20070198 <impure_data>:
20070198:	00000000 20070484 200704ec 20070554     ....... ... T.. 
	...
200701cc:	000864e0 00000000 00000000 00000000     .d..............
	...
20070240:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20070250:	0005deec 0000000b 00000000 00000000     ................
	...

200705c0 <_impure_ptr>:
200705c0:	20070198                                ... 

200705c4 <lc_ctype_charset>:
200705c4:	49435341 00000049 00000000 00000000     ASCII...........
	...

200705e4 <__mb_cur_max>:
200705e4:	00000001                                ....

200705e8 <__malloc_av_>:
	...
200705f0:	200705e8 200705e8 200705f0 200705f0     ... ... ... ... 
20070600:	200705f8 200705f8 20070600 20070600     ... ... ... ... 
20070610:	20070608 20070608 20070610 20070610     ... ... ... ... 
20070620:	20070618 20070618 20070620 20070620     ... ...  ..  .. 
20070630:	20070628 20070628 20070630 20070630     (.. (.. 0.. 0.. 
20070640:	20070638 20070638 20070640 20070640     8.. 8.. @.. @.. 
20070650:	20070648 20070648 20070650 20070650     H.. H.. P.. P.. 
20070660:	20070658 20070658 20070660 20070660     X.. X.. `.. `.. 
20070670:	20070668 20070668 20070670 20070670     h.. h.. p.. p.. 
20070680:	20070678 20070678 20070680 20070680     x.. x.. ... ... 
20070690:	20070688 20070688 20070690 20070690     ... ... ... ... 
200706a0:	20070698 20070698 200706a0 200706a0     ... ... ... ... 
200706b0:	200706a8 200706a8 200706b0 200706b0     ... ... ... ... 
200706c0:	200706b8 200706b8 200706c0 200706c0     ... ... ... ... 
200706d0:	200706c8 200706c8 200706d0 200706d0     ... ... ... ... 
200706e0:	200706d8 200706d8 200706e0 200706e0     ... ... ... ... 
200706f0:	200706e8 200706e8 200706f0 200706f0     ... ... ... ... 
20070700:	200706f8 200706f8 20070700 20070700     ... ... ... ... 
20070710:	20070708 20070708 20070710 20070710     ... ... ... ... 
20070720:	20070718 20070718 20070720 20070720     ... ...  ..  .. 
20070730:	20070728 20070728 20070730 20070730     (.. (.. 0.. 0.. 
20070740:	20070738 20070738 20070740 20070740     8.. 8.. @.. @.. 
20070750:	20070748 20070748 20070750 20070750     H.. H.. P.. P.. 
20070760:	20070758 20070758 20070760 20070760     X.. X.. `.. `.. 
20070770:	20070768 20070768 20070770 20070770     h.. h.. p.. p.. 
20070780:	20070778 20070778 20070780 20070780     x.. x.. ... ... 
20070790:	20070788 20070788 20070790 20070790     ... ... ... ... 
200707a0:	20070798 20070798 200707a0 200707a0     ... ... ... ... 
200707b0:	200707a8 200707a8 200707b0 200707b0     ... ... ... ... 
200707c0:	200707b8 200707b8 200707c0 200707c0     ... ... ... ... 
200707d0:	200707c8 200707c8 200707d0 200707d0     ... ... ... ... 
200707e0:	200707d8 200707d8 200707e0 200707e0     ... ... ... ... 
200707f0:	200707e8 200707e8 200707f0 200707f0     ... ... ... ... 
20070800:	200707f8 200707f8 20070800 20070800     ... ... ... ... 
20070810:	20070808 20070808 20070810 20070810     ... ... ... ... 
20070820:	20070818 20070818 20070820 20070820     ... ...  ..  .. 
20070830:	20070828 20070828 20070830 20070830     (.. (.. 0.. 0.. 
20070840:	20070838 20070838 20070840 20070840     8.. 8.. @.. @.. 
20070850:	20070848 20070848 20070850 20070850     H.. H.. P.. P.. 
20070860:	20070858 20070858 20070860 20070860     X.. X.. `.. `.. 
20070870:	20070868 20070868 20070870 20070870     h.. h.. p.. p.. 
20070880:	20070878 20070878 20070880 20070880     x.. x.. ... ... 
20070890:	20070888 20070888 20070890 20070890     ... ... ... ... 
200708a0:	20070898 20070898 200708a0 200708a0     ... ... ... ... 
200708b0:	200708a8 200708a8 200708b0 200708b0     ... ... ... ... 
200708c0:	200708b8 200708b8 200708c0 200708c0     ... ... ... ... 
200708d0:	200708c8 200708c8 200708d0 200708d0     ... ... ... ... 
200708e0:	200708d8 200708d8 200708e0 200708e0     ... ... ... ... 
200708f0:	200708e8 200708e8 200708f0 200708f0     ... ... ... ... 
20070900:	200708f8 200708f8 20070900 20070900     ... ... ... ... 
20070910:	20070908 20070908 20070910 20070910     ... ... ... ... 
20070920:	20070918 20070918 20070920 20070920     ... ...  ..  .. 
20070930:	20070928 20070928 20070930 20070930     (.. (.. 0.. 0.. 
20070940:	20070938 20070938 20070940 20070940     8.. 8.. @.. @.. 
20070950:	20070948 20070948 20070950 20070950     H.. H.. P.. P.. 
20070960:	20070958 20070958 20070960 20070960     X.. X.. `.. `.. 
20070970:	20070968 20070968 20070970 20070970     h.. h.. p.. p.. 
20070980:	20070978 20070978 20070980 20070980     x.. x.. ... ... 
20070990:	20070988 20070988 20070990 20070990     ... ... ... ... 
200709a0:	20070998 20070998 200709a0 200709a0     ... ... ... ... 
200709b0:	200709a8 200709a8 200709b0 200709b0     ... ... ... ... 
200709c0:	200709b8 200709b8 200709c0 200709c0     ... ... ... ... 
200709d0:	200709c8 200709c8 200709d0 200709d0     ... ... ... ... 
200709e0:	200709d8 200709d8 200709e0 200709e0     ... ... ... ... 

200709f0 <__malloc_trim_threshold>:
200709f0:	00020000                                ....

200709f4 <__malloc_sbrk_base>:
200709f4:	ffffffff                                ....

200709f8 <__wctomb>:
200709f8:	00085d45                                E]..
