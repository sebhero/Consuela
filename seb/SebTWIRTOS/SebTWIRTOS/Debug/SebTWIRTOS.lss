
SebTWIRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000048a4  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  000848a4  000848a4  0000c8a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009ac  20070000  000848ac  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000001fc  200709ac  00085258  000109ac  2**2
                  ALLOC
  4 .stack        00002000  20070ba8  00085454  000109ac  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  000109ac  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  000109d5  2**0
                  CONTENTS, READONLY
  7 .debug_info   0000edab  00000000  00000000  00010a30  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002cc1  00000000  00000000  0001f7db  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000635d  00000000  00000000  0002249c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000c98  00000000  00000000  000287f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000b88  00000000  00000000  00029491  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000199cc  00000000  00000000  0002a019  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00011cef  00000000  00000000  000439e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00068959  00000000  00000000  000556d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002664  00000000  00000000  000be030  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20072ba8 	.word	0x20072ba8
   80004:	00080ef5 	.word	0x00080ef5
   80008:	00080ef1 	.word	0x00080ef1
   8000c:	00080ef1 	.word	0x00080ef1
   80010:	00080ef1 	.word	0x00080ef1
   80014:	00080ef1 	.word	0x00080ef1
   80018:	00080ef1 	.word	0x00080ef1
	...
   8002c:	00080619 	.word	0x00080619
   80030:	00080ef1 	.word	0x00080ef1
   80034:	00000000 	.word	0x00000000
   80038:	00080651 	.word	0x00080651
   8003c:	0008068d 	.word	0x0008068d
   80040:	00080ef1 	.word	0x00080ef1
   80044:	00080ef1 	.word	0x00080ef1
   80048:	00080ef1 	.word	0x00080ef1
   8004c:	00080ef1 	.word	0x00080ef1
   80050:	00080ef1 	.word	0x00080ef1
   80054:	00080ef1 	.word	0x00080ef1
   80058:	00080ef1 	.word	0x00080ef1
   8005c:	00080ef1 	.word	0x00080ef1
   80060:	00080ef1 	.word	0x00080ef1
   80064:	00080ef1 	.word	0x00080ef1
   80068:	00000000 	.word	0x00000000
   8006c:	00080d61 	.word	0x00080d61
   80070:	00080d75 	.word	0x00080d75
   80074:	00080d89 	.word	0x00080d89
   80078:	00080d9d 	.word	0x00080d9d
	...
   80084:	000803d9 	.word	0x000803d9
   80088:	00080ef1 	.word	0x00080ef1
   8008c:	00080ef1 	.word	0x00080ef1
   80090:	00080ef1 	.word	0x00080ef1
   80094:	00080ef1 	.word	0x00080ef1
   80098:	00080ef1 	.word	0x00080ef1
   8009c:	00080ef1 	.word	0x00080ef1
   800a0:	00080ef1 	.word	0x00080ef1
   800a4:	00000000 	.word	0x00000000
   800a8:	00080ef1 	.word	0x00080ef1
   800ac:	00080ef1 	.word	0x00080ef1
   800b0:	00080ef1 	.word	0x00080ef1
   800b4:	00080ef1 	.word	0x00080ef1
   800b8:	00080ef1 	.word	0x00080ef1
   800bc:	00080ef1 	.word	0x00080ef1
   800c0:	00080ef1 	.word	0x00080ef1
   800c4:	00080ef1 	.word	0x00080ef1
   800c8:	00080ef1 	.word	0x00080ef1
   800cc:	00080ef1 	.word	0x00080ef1
   800d0:	00080ef1 	.word	0x00080ef1
   800d4:	00080ef1 	.word	0x00080ef1
   800d8:	00080ef1 	.word	0x00080ef1
   800dc:	00080ef1 	.word	0x00080ef1
   800e0:	00080ef1 	.word	0x00080ef1
   800e4:	00080ef1 	.word	0x00080ef1
   800e8:	00080ef1 	.word	0x00080ef1
   800ec:	00080ef1 	.word	0x00080ef1
   800f0:	00080ef1 	.word	0x00080ef1

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	200709ac 	.word	0x200709ac
   80110:	00000000 	.word	0x00000000
   80114:	000848ac 	.word	0x000848ac

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b06      	ldr	r3, [pc, #24]	; (80134 <frame_dummy+0x1c>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4806      	ldr	r0, [pc, #24]	; (80138 <frame_dummy+0x20>)
   80120:	4906      	ldr	r1, [pc, #24]	; (8013c <frame_dummy+0x24>)
   80122:	f3af 8000 	nop.w
   80126:	4806      	ldr	r0, [pc, #24]	; (80140 <frame_dummy+0x28>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b113      	cbz	r3, 80132 <frame_dummy+0x1a>
   8012c:	4b05      	ldr	r3, [pc, #20]	; (80144 <frame_dummy+0x2c>)
   8012e:	b103      	cbz	r3, 80132 <frame_dummy+0x1a>
   80130:	4798      	blx	r3
   80132:	bd08      	pop	{r3, pc}
   80134:	00000000 	.word	0x00000000
   80138:	000848ac 	.word	0x000848ac
   8013c:	200709b0 	.word	0x200709b0
   80140:	000848ac 	.word	0x000848ac
   80144:	00000000 	.word	0x00000000

00080148 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   80148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8014c:	460c      	mov	r4, r1
   8014e:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
   80150:	b960      	cbnz	r0, 8016c <_read+0x24>
		return -1;
	}

	for (; len > 0; --len) {
   80152:	2a00      	cmp	r2, #0
   80154:	dd0e      	ble.n	80174 <_read+0x2c>
   80156:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   80158:	4e09      	ldr	r6, [pc, #36]	; (80180 <_read+0x38>)
   8015a:	4d0a      	ldr	r5, [pc, #40]	; (80184 <_read+0x3c>)
   8015c:	6830      	ldr	r0, [r6, #0]
   8015e:	4621      	mov	r1, r4
   80160:	682b      	ldr	r3, [r5, #0]
   80162:	4798      	blx	r3
		ptr++;
   80164:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   80166:	42bc      	cmp	r4, r7
   80168:	d1f8      	bne.n	8015c <_read+0x14>
   8016a:	e006      	b.n	8017a <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
   8016c:	f04f 30ff 	mov.w	r0, #4294967295
   80170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len > 0; --len) {
   80174:	2000      	movs	r0, #0
   80176:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
   8017a:	4640      	mov	r0, r8
	}
	return nChars;
}
   8017c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80180:	20070ba0 	.word	0x20070ba0
   80184:	20070b98 	.word	0x20070b98

00080188 <twi_set_speed>:
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
   80188:	4b0f      	ldr	r3, [pc, #60]	; (801c8 <twi_set_speed+0x40>)
   8018a:	4299      	cmp	r1, r3
   8018c:	d819      	bhi.n	801c2 <twi_set_speed+0x3a>
		return FAIL;
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   8018e:	0049      	lsls	r1, r1, #1
   80190:	fbb2 f2f1 	udiv	r2, r2, r1
   80194:	3a04      	subs	r2, #4

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   80196:	2aff      	cmp	r2, #255	; 0xff
   80198:	d907      	bls.n	801aa <twi_set_speed+0x22>
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
   8019a:	2300      	movs	r3, #0
	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
		/* Increase clock divider */
		ckdiv++;
   8019c:	3301      	adds	r3, #1
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
   8019e:	0852      	lsrs	r2, r2, #1
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   801a0:	2aff      	cmp	r2, #255	; 0xff
   801a2:	d903      	bls.n	801ac <twi_set_speed+0x24>
   801a4:	2b07      	cmp	r3, #7
   801a6:	d1f9      	bne.n	8019c <twi_set_speed+0x14>
   801a8:	e000      	b.n	801ac <twi_set_speed+0x24>
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
   801aa:	2300      	movs	r3, #0
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   801ac:	0211      	lsls	r1, r2, #8
   801ae:	b289      	uxth	r1, r1
			TWI_CWGR_CKDIV(ckdiv);
   801b0:	041b      	lsls	r3, r3, #16
   801b2:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   801b6:	430b      	orrs	r3, r1
   801b8:	b2d2      	uxtb	r2, r2
   801ba:	431a      	orrs	r2, r3
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
   801bc:	6102      	str	r2, [r0, #16]
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
			TWI_CWGR_CKDIV(ckdiv);

	return PASS;
   801be:	2000      	movs	r0, #0
   801c0:	4770      	bx	lr
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
		return FAIL;
   801c2:	2001      	movs	r0, #1
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
			TWI_CWGR_CKDIV(ckdiv);

	return PASS;
}
   801c4:	4770      	bx	lr
   801c6:	bf00      	nop
   801c8:	00061a80 	.word	0x00061a80

000801cc <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
   801cc:	b538      	push	{r3, r4, r5, lr}
   801ce:	4604      	mov	r4, r0
   801d0:	460d      	mov	r5, r1
	uint32_t status = TWI_SUCCESS;

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
   801d2:	f04f 33ff 	mov.w	r3, #4294967295
   801d6:	6283      	str	r3, [r0, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
   801d8:	6a03      	ldr	r3, [r0, #32]
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
   801da:	2380      	movs	r3, #128	; 0x80
   801dc:	6003      	str	r3, [r0, #0]
	p_twi->TWI_RHR;
   801de:	6b03      	ldr	r3, [r0, #48]	; 0x30
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
   801e0:	2308      	movs	r3, #8
   801e2:	6003      	str	r3, [r0, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
   801e4:	2320      	movs	r3, #32
   801e6:	6003      	str	r3, [r0, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
   801e8:	2304      	movs	r3, #4
   801ea:	6003      	str	r3, [r0, #0]
	twi_reset(p_twi);

	twi_enable_master_mode(p_twi);

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
   801ec:	6849      	ldr	r1, [r1, #4]
   801ee:	682a      	ldr	r2, [r5, #0]
   801f0:	4b05      	ldr	r3, [pc, #20]	; (80208 <twi_master_init+0x3c>)
   801f2:	4798      	blx	r3
   801f4:	2801      	cmp	r0, #1
   801f6:	bf14      	ite	ne
   801f8:	2000      	movne	r0, #0
   801fa:	2001      	moveq	r0, #1
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
	}

	if (p_opt->smbus == 1) {
   801fc:	7a6b      	ldrb	r3, [r5, #9]
   801fe:	2b01      	cmp	r3, #1
		p_twi->TWI_CR = TWI_CR_QUICK;
   80200:	bf04      	itt	eq
   80202:	2340      	moveq	r3, #64	; 0x40
   80204:	6023      	streq	r3, [r4, #0]
	}

	return status;
}
   80206:	bd38      	pop	{r3, r4, r5, pc}
   80208:	00080189 	.word	0x00080189

0008020c <twi_master_read>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twi_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
   8020c:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
   80210:	4604      	mov	r4, r0
	uint32_t status;
	uint32_t cnt = p_packet->length;
   80212:	68cb      	ldr	r3, [r1, #12]
	uint8_t *buffer = p_packet->buffer;
   80214:	688e      	ldr	r6, [r1, #8]
	uint8_t stop_sent = 0;
	uint32_t timeout = TWI_TIMEOUT;;
	
	/* Check argument */
	if (cnt == 0) {
   80216:	2b00      	cmp	r3, #0
   80218:	d049      	beq.n	802ae <twi_master_read+0xa2>
		return TWI_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
   8021a:	2200      	movs	r2, #0
   8021c:	6042      	str	r2, [r0, #4]
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
   8021e:	6848      	ldr	r0, [r1, #4]
   80220:	0200      	lsls	r0, r0, #8
   80222:	f400 7040 	and.w	r0, r0, #768	; 0x300
		return TWI_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
   80226:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
   8022a:	7c0d      	ldrb	r5, [r1, #16]
   8022c:	042d      	lsls	r5, r5, #16
   8022e:	f405 05fe 	and.w	r5, r5, #8323072	; 0x7f0000
   80232:	4328      	orrs	r0, r5
   80234:	6060      	str	r0, [r4, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
   80236:	60e2      	str	r2, [r4, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   80238:	684a      	ldr	r2, [r1, #4]
 */
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
   8023a:	b15a      	cbz	r2, 80254 <twi_master_read+0x48>
		return 0;

	val = addr[0];
   8023c:	7808      	ldrb	r0, [r1, #0]
	if (len > 1) {
   8023e:	2a01      	cmp	r2, #1
		val <<= 8;
		val |= addr[1];
   80240:	bfc4      	itt	gt
   80242:	784d      	ldrbgt	r5, [r1, #1]
   80244:	ea45 2000 	orrgt.w	r0, r5, r0, lsl #8
	}
	if (len > 2) {
   80248:	2a02      	cmp	r2, #2
   8024a:	dd04      	ble.n	80256 <twi_master_read+0x4a>
		val <<= 8;
		val |= addr[2];
   8024c:	788a      	ldrb	r2, [r1, #2]
   8024e:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
   80252:	e000      	b.n	80256 <twi_master_read+0x4a>
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
		return 0;
   80254:	2000      	movs	r0, #0
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   80256:	60e0      	str	r0, [r4, #12]

	/* Send a START condition */
	if (cnt == 1) {
   80258:	2b01      	cmp	r3, #1
   8025a:	d104      	bne.n	80266 <twi_master_read+0x5a>
		p_twi->TWI_CR = TWI_CR_START | TWI_CR_STOP;
   8025c:	2203      	movs	r2, #3
   8025e:	6022      	str	r2, [r4, #0]
		stop_sent = 1;
   80260:	f04f 0c01 	mov.w	ip, #1
   80264:	e02b      	b.n	802be <twi_master_read+0xb2>
	} else {
		p_twi->TWI_CR = TWI_CR_START;
   80266:	2201      	movs	r2, #1
   80268:	6022      	str	r2, [r4, #0]
		stop_sent = 0;
   8026a:	f04f 0c00 	mov.w	ip, #0
   8026e:	e026      	b.n	802be <twi_master_read+0xb2>
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
   80270:	6a21      	ldr	r1, [r4, #32]
		if (status & TWI_SR_NACK) {
   80272:	f411 7f80 	tst.w	r1, #256	; 0x100
   80276:	d11c      	bne.n	802b2 <twi_master_read+0xa6>
			return TWI_RECEIVE_NACK;
		}

		if (!timeout--) {
   80278:	1e55      	subs	r5, r2, #1
   8027a:	b1e2      	cbz	r2, 802b6 <twi_master_read+0xaa>
   8027c:	462a      	mov	r2, r5
			return TWI_ERROR_TIMEOUT;
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
   8027e:	2b01      	cmp	r3, #1
   80280:	d105      	bne.n	8028e <twi_master_read+0x82>
   80282:	f1bc 0f00 	cmp.w	ip, #0
   80286:	d102      	bne.n	8028e <twi_master_read+0x82>
			p_twi->TWI_CR = TWI_CR_STOP;
   80288:	f8c4 9000 	str.w	r9, [r4]
			stop_sent = 1;
   8028c:	46c4      	mov	ip, r8
		}

		if (!(status & TWI_SR_RXRDY)) {
   8028e:	f011 0f02 	tst.w	r1, #2
   80292:	d004      	beq.n	8029e <twi_master_read+0x92>
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;
   80294:	6b22      	ldr	r2, [r4, #48]	; 0x30
   80296:	7032      	strb	r2, [r6, #0]

		cnt--;
   80298:	3b01      	subs	r3, #1
		}

		if (!(status & TWI_SR_RXRDY)) {
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;
   8029a:	3601      	adds	r6, #1

		cnt--;
		timeout = TWI_TIMEOUT;
   8029c:	463a      	mov	r2, r7
	} else {
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
   8029e:	2b00      	cmp	r3, #0
   802a0:	d1e6      	bne.n	80270 <twi_master_read+0x64>

		cnt--;
		timeout = TWI_TIMEOUT;
	}

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
   802a2:	6a23      	ldr	r3, [r4, #32]
   802a4:	f013 0f01 	tst.w	r3, #1
   802a8:	d0fb      	beq.n	802a2 <twi_master_read+0x96>
	}

	p_twi->TWI_SR;
   802aa:	6a23      	ldr	r3, [r4, #32]

	return TWI_SUCCESS;
   802ac:	e014      	b.n	802d8 <twi_master_read+0xcc>
	uint8_t stop_sent = 0;
	uint32_t timeout = TWI_TIMEOUT;;
	
	/* Check argument */
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
   802ae:	2001      	movs	r0, #1
   802b0:	e012      	b.n	802d8 <twi_master_read+0xcc>
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
   802b2:	2005      	movs	r0, #5
   802b4:	e010      	b.n	802d8 <twi_master_read+0xcc>
		}

		if (!timeout--) {
			return TWI_ERROR_TIMEOUT;
   802b6:	2009      	movs	r0, #9
   802b8:	e00e      	b.n	802d8 <twi_master_read+0xcc>
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
   802ba:	2005      	movs	r0, #5
   802bc:	e00c      	b.n	802d8 <twi_master_read+0xcc>
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
   802be:	6a21      	ldr	r1, [r4, #32]
		if (status & TWI_SR_NACK) {
   802c0:	f411 7080 	ands.w	r0, r1, #256	; 0x100
   802c4:	d1f9      	bne.n	802ba <twi_master_read+0xae>
			return TWI_RECEIVE_NACK;
		}

		if (!timeout--) {
   802c6:	f643 2297 	movw	r2, #14999	; 0x3a97
			return TWI_ERROR_TIMEOUT;
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
			p_twi->TWI_CR = TWI_CR_STOP;
   802ca:	f04f 0902 	mov.w	r9, #2
			stop_sent = 1;
   802ce:	f04f 0801 	mov.w	r8, #1
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;

		cnt--;
		timeout = TWI_TIMEOUT;
   802d2:	f643 2798 	movw	r7, #15000	; 0x3a98
   802d6:	e7d2      	b.n	8027e <twi_master_read+0x72>
	}

	p_twi->TWI_SR;

	return TWI_SUCCESS;
}
   802d8:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
   802dc:	4770      	bx	lr
   802de:	bf00      	nop

000802e0 <twi_master_write>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
   802e0:	b470      	push	{r4, r5, r6}
   802e2:	4603      	mov	r3, r0
	uint32_t status;
	uint32_t cnt = p_packet->length;
   802e4:	68ca      	ldr	r2, [r1, #12]
	uint8_t *buffer = p_packet->buffer;
   802e6:	6888      	ldr	r0, [r1, #8]

	/* Check argument */
	if (cnt == 0) {
   802e8:	2a00      	cmp	r2, #0
   802ea:	d03f      	beq.n	8036c <twi_master_write+0x8c>
		return TWI_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
   802ec:	2400      	movs	r4, #0
   802ee:	605c      	str	r4, [r3, #4]
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
   802f0:	7c0e      	ldrb	r6, [r1, #16]
   802f2:	0436      	lsls	r6, r6, #16
   802f4:	f406 06fe 	and.w	r6, r6, #8323072	; 0x7f0000
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
   802f8:	684d      	ldr	r5, [r1, #4]
   802fa:	022d      	lsls	r5, r5, #8
   802fc:	f405 7540 	and.w	r5, r5, #768	; 0x300
		return TWI_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
   80300:	4335      	orrs	r5, r6
   80302:	605d      	str	r5, [r3, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
   80304:	60dc      	str	r4, [r3, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   80306:	684c      	ldr	r4, [r1, #4]
 */
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
   80308:	b15c      	cbz	r4, 80322 <twi_master_write+0x42>
		return 0;

	val = addr[0];
   8030a:	780d      	ldrb	r5, [r1, #0]
	if (len > 1) {
   8030c:	2c01      	cmp	r4, #1
		val <<= 8;
		val |= addr[1];
   8030e:	bfc4      	itt	gt
   80310:	784e      	ldrbgt	r6, [r1, #1]
   80312:	ea46 2505 	orrgt.w	r5, r6, r5, lsl #8
	}
	if (len > 2) {
   80316:	2c02      	cmp	r4, #2
   80318:	dd04      	ble.n	80324 <twi_master_write+0x44>
		val <<= 8;
		val |= addr[2];
   8031a:	7889      	ldrb	r1, [r1, #2]
   8031c:	ea41 2505 	orr.w	r5, r1, r5, lsl #8
   80320:	e000      	b.n	80324 <twi_master_write+0x44>
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
		return 0;
   80322:	2500      	movs	r5, #0
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   80324:	60dd      	str	r5, [r3, #12]
   80326:	e00b      	b.n	80340 <twi_master_write+0x60>

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
   80328:	6a19      	ldr	r1, [r3, #32]
		if (status & TWI_SR_NACK) {
   8032a:	f411 7f80 	tst.w	r1, #256	; 0x100
   8032e:	d11f      	bne.n	80370 <twi_master_write+0x90>
			return TWI_RECEIVE_NACK;
		}

		if (!(status & TWI_SR_TXRDY)) {
   80330:	f011 0f04 	tst.w	r1, #4
   80334:	d0f8      	beq.n	80328 <twi_master_write+0x48>
			continue;
		}
		p_twi->TWI_THR = *buffer++;
   80336:	f810 1b01 	ldrb.w	r1, [r0], #1
   8033a:	6359      	str	r1, [r3, #52]	; 0x34
	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
   8033c:	3a01      	subs	r2, #1
   8033e:	d007      	beq.n	80350 <twi_master_write+0x70>
		status = p_twi->TWI_SR;
   80340:	6a19      	ldr	r1, [r3, #32]
		if (status & TWI_SR_NACK) {
   80342:	f411 7f80 	tst.w	r1, #256	; 0x100
   80346:	d115      	bne.n	80374 <twi_master_write+0x94>
			return TWI_RECEIVE_NACK;
		}

		if (!(status & TWI_SR_TXRDY)) {
   80348:	f011 0f04 	tst.w	r1, #4
   8034c:	d1f3      	bne.n	80336 <twi_master_write+0x56>
   8034e:	e7eb      	b.n	80328 <twi_master_write+0x48>

		cnt--;
	}

	while (1) {
		status = p_twi->TWI_SR;
   80350:	6a1a      	ldr	r2, [r3, #32]
		if (status & TWI_SR_NACK) {
   80352:	f412 7080 	ands.w	r0, r2, #256	; 0x100
   80356:	d10f      	bne.n	80378 <twi_master_write+0x98>
			return TWI_RECEIVE_NACK;
		}

		if (status & TWI_SR_TXRDY) {
   80358:	f012 0f04 	tst.w	r2, #4
   8035c:	d0f8      	beq.n	80350 <twi_master_write+0x70>
			break;
		}
	}

	p_twi->TWI_CR = TWI_CR_STOP;
   8035e:	2202      	movs	r2, #2
   80360:	601a      	str	r2, [r3, #0]

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
   80362:	6a1a      	ldr	r2, [r3, #32]
   80364:	f012 0f01 	tst.w	r2, #1
   80368:	d0fb      	beq.n	80362 <twi_master_write+0x82>
   8036a:	e006      	b.n	8037a <twi_master_write+0x9a>
	uint32_t cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;

	/* Check argument */
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
   8036c:	2001      	movs	r0, #1
   8036e:	e004      	b.n	8037a <twi_master_write+0x9a>

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
   80370:	2005      	movs	r0, #5
   80372:	e002      	b.n	8037a <twi_master_write+0x9a>
   80374:	2005      	movs	r0, #5
   80376:	e000      	b.n	8037a <twi_master_write+0x9a>
	}

	while (1) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
   80378:	2005      	movs	r0, #5

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
	}

	return TWI_SUCCESS;
}
   8037a:	bc70      	pop	{r4, r5, r6}
   8037c:	4770      	bx	lr
   8037e:	bf00      	nop

00080380 <twi_probe>:
 * \param uc_slave_addr Address of the remote chip to search for.
 *
 * \return TWI_SUCCESS if a chip was found, error code otherwise.
 */
uint32_t twi_probe(Twi *p_twi, uint8_t uc_slave_addr)
{
   80380:	b500      	push	{lr}
   80382:	b087      	sub	sp, #28
	twi_packet_t packet;
	uint8_t data = 0;
   80384:	2300      	movs	r3, #0
   80386:	aa06      	add	r2, sp, #24
   80388:	f802 3d15 	strb.w	r3, [r2, #-21]!

	/* Data to send */
	packet.buffer = &data;
   8038c:	9203      	str	r2, [sp, #12]
	/* Data length */
	packet.length = 1;
   8038e:	2201      	movs	r2, #1
   80390:	9204      	str	r2, [sp, #16]
	/* Slave chip address */
	packet.chip = (uint32_t) uc_slave_addr;
   80392:	f88d 1014 	strb.w	r1, [sp, #20]
	/* Internal chip address */
	packet.addr[0] = 0;
   80396:	f88d 3004 	strb.w	r3, [sp, #4]
	/* Address length */
	packet.addr_length = 0;
   8039a:	9302      	str	r3, [sp, #8]

	/* Perform a master write access */
	return (twi_master_write(p_twi, &packet));
   8039c:	a901      	add	r1, sp, #4
   8039e:	4b02      	ldr	r3, [pc, #8]	; (803a8 <twi_probe+0x28>)
   803a0:	4798      	blx	r3
}
   803a2:	b007      	add	sp, #28
   803a4:	f85d fb04 	ldr.w	pc, [sp], #4
   803a8:	000802e1 	.word	0x000802e1

000803ac <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   803ac:	6943      	ldr	r3, [r0, #20]
   803ae:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   803b2:	bf1d      	ittte	ne
   803b4:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   803b8:	61c1      	strne	r1, [r0, #28]
	return 0;
   803ba:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
   803bc:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
   803be:	4770      	bx	lr

000803c0 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   803c0:	6943      	ldr	r3, [r0, #20]
   803c2:	f013 0f01 	tst.w	r3, #1
   803c6:	d005      	beq.n	803d4 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   803c8:	6983      	ldr	r3, [r0, #24]
   803ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
   803ce:	600b      	str	r3, [r1, #0]

	return 0;
   803d0:	2000      	movs	r0, #0
   803d2:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   803d4:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   803d6:	4770      	bx	lr

000803d8 <USART0_Handler>:
#if SAMD || SAMR21 || SAML21
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
   803d8:	b500      	push	{lr}
   803da:	b083      	sub	sp, #12
	uint8_t temp;
#if SAMD || SAMR21 || SAML21
	usart_serial_read_packet(&host_uart_module, &temp, 1);
#else
	usart_serial_read_packet(USART_HOST, &temp, 1);
   803dc:	4811      	ldr	r0, [pc, #68]	; (80424 <USART0_Handler+0x4c>)
   803de:	f10d 0107 	add.w	r1, sp, #7
   803e2:	2201      	movs	r2, #1
   803e4:	4b10      	ldr	r3, [pc, #64]	; (80428 <USART0_Handler+0x50>)
   803e6:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   803e8:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   803ea:	f3bf 8f5f 	dmb	sy
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
   803ee:	2200      	movs	r2, #0
   803f0:	4b0e      	ldr	r3, [pc, #56]	; (8042c <USART0_Handler+0x54>)
   803f2:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
   803f4:	4b0e      	ldr	r3, [pc, #56]	; (80430 <USART0_Handler+0x58>)
   803f6:	781b      	ldrb	r3, [r3, #0]
   803f8:	f89d 1007 	ldrb.w	r1, [sp, #7]
   803fc:	4a0d      	ldr	r2, [pc, #52]	; (80434 <USART0_Handler+0x5c>)
   803fe:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
   80400:	2b9b      	cmp	r3, #155	; 0x9b
   80402:	d103      	bne.n	8040c <USART0_Handler+0x34>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
   80404:	2200      	movs	r2, #0
   80406:	4b0a      	ldr	r3, [pc, #40]	; (80430 <USART0_Handler+0x58>)
   80408:	701a      	strb	r2, [r3, #0]
   8040a:	e002      	b.n	80412 <USART0_Handler+0x3a>
	} else {
		serial_rx_buf_tail++;
   8040c:	3301      	adds	r3, #1
   8040e:	4a08      	ldr	r2, [pc, #32]	; (80430 <USART0_Handler+0x58>)
   80410:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
   80412:	2201      	movs	r2, #1
   80414:	4b05      	ldr	r3, [pc, #20]	; (8042c <USART0_Handler+0x54>)
   80416:	701a      	strb	r2, [r3, #0]
   80418:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   8041c:	b662      	cpsie	i
}
   8041e:	b003      	add	sp, #12
   80420:	f85d fb04 	ldr.w	pc, [sp], #4
   80424:	40098000 	.word	0x40098000
   80428:	000808bd 	.word	0x000808bd
   8042c:	2007013c 	.word	0x2007013c
   80430:	20070a64 	.word	0x20070a64
   80434:	200709c8 	.word	0x200709c8

00080438 <initTwi>:
#include <stdio.h>




void initTwi(void){
   80438:	b500      	push	{lr}
   8043a:	b085      	sub	sp, #20
	// TWI master initialization options.
	twi_master_options_t opt;
	opt.speed = TWI_SPEED;
   8043c:	4b09      	ldr	r3, [pc, #36]	; (80464 <initTwi+0x2c>)
   8043e:	9302      	str	r3, [sp, #8]
	opt.chip  = SLAVE_ADDR;
   80440:	2302      	movs	r3, #2
   80442:	f88d 300c 	strb.w	r3, [sp, #12]
typedef twi_packet_t twi_package_t;

static inline uint32_t twi_master_setup(twi_master_t p_twi,
		twi_master_options_t *p_opt)
{
	p_opt->master_clk = sysclk_get_cpu_hz();
   80446:	4b08      	ldr	r3, [pc, #32]	; (80468 <initTwi+0x30>)
   80448:	9301      	str	r3, [sp, #4]
	p_opt->smbus      = 0;
   8044a:	2300      	movs	r3, #0
   8044c:	f88d 300d 	strb.w	r3, [sp, #13]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   80450:	2017      	movs	r0, #23
   80452:	4b06      	ldr	r3, [pc, #24]	; (8046c <initTwi+0x34>)
   80454:	4798      	blx	r3
	} else {
		// Do Nothing
	}
#endif

	return (twi_master_init(p_twi, p_opt));
   80456:	4806      	ldr	r0, [pc, #24]	; (80470 <initTwi+0x38>)
   80458:	a901      	add	r1, sp, #4
   8045a:	4b06      	ldr	r3, [pc, #24]	; (80474 <initTwi+0x3c>)
   8045c:	4798      	blx	r3

	// Initialize the TWI master driver.
	twi_master_setup(TWI1, &opt);
}
   8045e:	b005      	add	sp, #20
   80460:	f85d fb04 	ldr.w	pc, [sp], #4
   80464:	000186a0 	.word	0x000186a0
   80468:	0501bd00 	.word	0x0501bd00
   8046c:	00080e99 	.word	0x00080e99
   80470:	40090000 	.word	0x40090000
   80474:	000801cd 	.word	0x000801cd

00080478 <sendArm>:
}

//Send data to Arm with TWI
//data holds the data, dataLength is how many bytes the data is.
void sendArm(uint8_t* data,int dataLength)
{
   80478:	b530      	push	{r4, r5, lr}
   8047a:	b087      	sub	sp, #28

	twi_package_t packet = {
   8047c:	2300      	movs	r3, #0
   8047e:	9301      	str	r3, [sp, #4]
   80480:	9302      	str	r3, [sp, #8]
   80482:	9305      	str	r3, [sp, #20]
   80484:	9003      	str	r0, [sp, #12]
   80486:	9104      	str	r1, [sp, #16]
   80488:	2102      	movs	r1, #2
   8048a:	f88d 1014 	strb.w	r1, [sp, #20]
		.buffer       = data, // transfer data source buffer
		.length       = dataLength   // transfer data size (bytes)
	};


	if(twi_probe(TWI1,SLAVE_ADDR)==TWI_SUCCESS)
   8048e:	480d      	ldr	r0, [pc, #52]	; (804c4 <sendArm+0x4c>)
   80490:	4b0d      	ldr	r3, [pc, #52]	; (804c8 <sendArm+0x50>)
   80492:	4798      	blx	r3
   80494:	b980      	cbnz	r0, 804b8 <sendArm+0x40>
	{
		puts("Write to slave");
   80496:	480d      	ldr	r0, [pc, #52]	; (804cc <sendArm+0x54>)
   80498:	4b0d      	ldr	r3, [pc, #52]	; (804d0 <sendArm+0x58>)
   8049a:	4798      	blx	r3
		while (twi_master_write(TWI1, &packet) != TWI_SUCCESS);
   8049c:	4d09      	ldr	r5, [pc, #36]	; (804c4 <sendArm+0x4c>)
   8049e:	4c0d      	ldr	r4, [pc, #52]	; (804d4 <sendArm+0x5c>)
   804a0:	4628      	mov	r0, r5
   804a2:	a901      	add	r1, sp, #4
   804a4:	47a0      	blx	r4
   804a6:	2800      	cmp	r0, #0
   804a8:	d1fa      	bne.n	804a0 <sendArm+0x28>
		delay_ms(100);
   804aa:	480b      	ldr	r0, [pc, #44]	; (804d8 <sendArm+0x60>)
   804ac:	4b0b      	ldr	r3, [pc, #44]	; (804dc <sendArm+0x64>)
   804ae:	4798      	blx	r3
		puts("Write to slave done");
   804b0:	480b      	ldr	r0, [pc, #44]	; (804e0 <sendArm+0x68>)
   804b2:	4b07      	ldr	r3, [pc, #28]	; (804d0 <sendArm+0x58>)
   804b4:	4798      	blx	r3
   804b6:	e002      	b.n	804be <sendArm+0x46>
	}
	else{
		puts("error on write to slave");
   804b8:	480a      	ldr	r0, [pc, #40]	; (804e4 <sendArm+0x6c>)
   804ba:	4b05      	ldr	r3, [pc, #20]	; (804d0 <sendArm+0x58>)
   804bc:	4798      	blx	r3
	}
}
   804be:	b007      	add	sp, #28
   804c0:	bd30      	pop	{r4, r5, pc}
   804c2:	bf00      	nop
   804c4:	40090000 	.word	0x40090000
   804c8:	00080381 	.word	0x00080381
   804cc:	0008433c 	.word	0x0008433c
   804d0:	00081591 	.word	0x00081591
   804d4:	000802e1 	.word	0x000802e1
   804d8:	000927c0 	.word	0x000927c0
   804dc:	20070001 	.word	0x20070001
   804e0:	0008434c 	.word	0x0008434c
   804e4:	00084360 	.word	0x00084360

000804e8 <reciveFromArm>:
//Recive data from ARM with TWI
//recives and prints the data out on Uart.
//packageSize how many bytes expected to recive
//returns the data recived as array.
uint8_t* reciveFromArm(uint8_t packageSize)
{
   804e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   804ec:	b087      	sub	sp, #28
   804ee:	af00      	add	r7, sp, #0
   804f0:	4606      	mov	r6, r0
	int xx=0;
	//setup reciving package
	//data recived
	uint8_t package[packageSize];//setup data package to recive
   804f2:	1dc3      	adds	r3, r0, #7
   804f4:	f403 73fc 	and.w	r3, r3, #504	; 0x1f8
   804f8:	ebad 0d03 	sub.w	sp, sp, r3
   804fc:	46eb      	mov	fp, sp
	//	uint8_t recv[packageSize] = {0};
	//package recived
	twi_package_t pkt_rcv = {
   804fe:	2300      	movs	r3, #0
   80500:	607b      	str	r3, [r7, #4]
   80502:	60bb      	str	r3, [r7, #8]
   80504:	617b      	str	r3, [r7, #20]
   80506:	f8c7 d00c 	str.w	sp, [r7, #12]
   8050a:	6138      	str	r0, [r7, #16]
   8050c:	2102      	movs	r1, #2
   8050e:	7539      	strb	r1, [r7, #20]
		.chip         = SLAVE_ADDR,      // TWI slave bus address
		.buffer       = package, // transfer data source buffer
		.length       = packageSize   // transfer data size (bytes)
	};
	
	if(twi_probe(TWI1,SLAVE_ADDR)==TWI_SUCCESS)
   80510:	4821      	ldr	r0, [pc, #132]	; (80598 <reciveFromArm+0xb0>)
   80512:	4b22      	ldr	r3, [pc, #136]	; (8059c <reciveFromArm+0xb4>)
   80514:	4798      	blx	r3
   80516:	2800      	cmp	r0, #0
   80518:	d135      	bne.n	80586 <reciveFromArm+0x9e>
	{
		puts("Read from slave");
   8051a:	4821      	ldr	r0, [pc, #132]	; (805a0 <reciveFromArm+0xb8>)
   8051c:	4b21      	ldr	r3, [pc, #132]	; (805a4 <reciveFromArm+0xbc>)
   8051e:	4798      	blx	r3
		// Perform a multi-byte read access then check the result.
		while (twi_master_read(TWI1, &pkt_rcv) != TWI_SUCCESS);
   80520:	4d1d      	ldr	r5, [pc, #116]	; (80598 <reciveFromArm+0xb0>)
   80522:	4c21      	ldr	r4, [pc, #132]	; (805a8 <reciveFromArm+0xc0>)
   80524:	4628      	mov	r0, r5
   80526:	1d39      	adds	r1, r7, #4
   80528:	47a0      	blx	r4
   8052a:	2800      	cmp	r0, #0
   8052c:	d1fa      	bne.n	80524 <reciveFromArm+0x3c>
		delay_ms(10);
   8052e:	f64e 2060 	movw	r0, #60000	; 0xea60
   80532:	4b1e      	ldr	r3, [pc, #120]	; (805ac <reciveFromArm+0xc4>)
   80534:	4798      	blx	r3
		puts("Done reading");
   80536:	481e      	ldr	r0, [pc, #120]	; (805b0 <reciveFromArm+0xc8>)
   80538:	4b1a      	ldr	r3, [pc, #104]	; (805a4 <reciveFromArm+0xbc>)
   8053a:	4798      	blx	r3
		//printf("got: %s\n",*packet_received.buffer);
		//int theSize = sizeof(data_received)/sizeof(data_received[0]);//figure out size
		for (xx;xx<packageSize;xx++)
   8053c:	46b0      	mov	r8, r6
   8053e:	b1de      	cbz	r6, 80578 <reciveFromArm+0x90>
   80540:	465c      	mov	r4, fp
//recives and prints the data out on Uart.
//packageSize how many bytes expected to recive
//returns the data recived as array.
uint8_t* reciveFromArm(uint8_t packageSize)
{
	int xx=0;
   80542:	2600      	movs	r6, #0
		puts("Done reading");
		//printf("got: %s\n",*packet_received.buffer);
		//int theSize = sizeof(data_received)/sizeof(data_received[0]);//figure out size
		for (xx;xx<packageSize;xx++)
		{
			printf("got DATA:%x\n",package[xx]);
   80544:	f8df a084 	ldr.w	sl, [pc, #132]	; 805cc <reciveFromArm+0xe4>
   80548:	4d1a      	ldr	r5, [pc, #104]	; (805b4 <reciveFromArm+0xcc>)
			printf("got int:%d\n",package[xx]);
   8054a:	f8df 9084 	ldr.w	r9, [pc, #132]	; 805d0 <reciveFromArm+0xe8>
		puts("Done reading");
		//printf("got: %s\n",*packet_received.buffer);
		//int theSize = sizeof(data_received)/sizeof(data_received[0]);//figure out size
		for (xx;xx<packageSize;xx++)
		{
			printf("got DATA:%x\n",package[xx]);
   8054e:	4650      	mov	r0, sl
   80550:	7821      	ldrb	r1, [r4, #0]
   80552:	47a8      	blx	r5
			printf("got int:%d\n",package[xx]);
   80554:	4648      	mov	r0, r9
   80556:	f814 1b01 	ldrb.w	r1, [r4], #1
   8055a:	47a8      	blx	r5
			printf("got char:%c\n",package[xx]);
   8055c:	4816      	ldr	r0, [pc, #88]	; (805b8 <reciveFromArm+0xd0>)
   8055e:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   80562:	47a8      	blx	r5
			if(package[xx]==120)
   80564:	f814 3c01 	ldrb.w	r3, [r4, #-1]
   80568:	2b78      	cmp	r3, #120	; 0x78
   8056a:	d102      	bne.n	80572 <reciveFromArm+0x8a>
			{
				puts("got x from arduino NO DATA");
   8056c:	4813      	ldr	r0, [pc, #76]	; (805bc <reciveFromArm+0xd4>)
   8056e:	4b0d      	ldr	r3, [pc, #52]	; (805a4 <reciveFromArm+0xbc>)
   80570:	4798      	blx	r3
		while (twi_master_read(TWI1, &pkt_rcv) != TWI_SUCCESS);
		delay_ms(10);
		puts("Done reading");
		//printf("got: %s\n",*packet_received.buffer);
		//int theSize = sizeof(data_received)/sizeof(data_received[0]);//figure out size
		for (xx;xx<packageSize;xx++)
   80572:	3601      	adds	r6, #1
   80574:	4546      	cmp	r6, r8
   80576:	dbea      	blt.n	8054e <reciveFromArm+0x66>
			if(package[xx]==120)
			{
				puts("got x from arduino NO DATA");
			}
		}
		puts("");
   80578:	4811      	ldr	r0, [pc, #68]	; (805c0 <reciveFromArm+0xd8>)
   8057a:	4b0a      	ldr	r3, [pc, #40]	; (805a4 <reciveFromArm+0xbc>)
   8057c:	4798      	blx	r3
		delay_ms(100);
   8057e:	4811      	ldr	r0, [pc, #68]	; (805c4 <reciveFromArm+0xdc>)
   80580:	4b0a      	ldr	r3, [pc, #40]	; (805ac <reciveFromArm+0xc4>)
   80582:	4798      	blx	r3
   80584:	e002      	b.n	8058c <reciveFromArm+0xa4>
		
	}
	else{
		puts("error on write to slave");
   80586:	4810      	ldr	r0, [pc, #64]	; (805c8 <reciveFromArm+0xe0>)
   80588:	4b06      	ldr	r3, [pc, #24]	; (805a4 <reciveFromArm+0xbc>)
   8058a:	4798      	blx	r3
	}
	
	return package;
	
}
   8058c:	4658      	mov	r0, fp
   8058e:	371c      	adds	r7, #28
   80590:	46bd      	mov	sp, r7
   80592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80596:	bf00      	nop
   80598:	40090000 	.word	0x40090000
   8059c:	00080381 	.word	0x00080381
   805a0:	00084378 	.word	0x00084378
   805a4:	00081591 	.word	0x00081591
   805a8:	0008020d 	.word	0x0008020d
   805ac:	20070001 	.word	0x20070001
   805b0:	00084388 	.word	0x00084388
   805b4:	00081389 	.word	0x00081389
   805b8:	000843b4 	.word	0x000843b4
   805bc:	000843c4 	.word	0x000843c4
   805c0:	00084420 	.word	0x00084420
   805c4:	000927c0 	.word	0x000927c0
   805c8:	00084360 	.word	0x00084360
   805cc:	00084398 	.word	0x00084398
   805d0:	000843a8 	.word	0x000843a8

000805d4 <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
   805d4:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
   805d6:	685a      	ldr	r2, [r3, #4]
   805d8:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
   805da:	6842      	ldr	r2, [r0, #4]
   805dc:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   805de:	685a      	ldr	r2, [r3, #4]
   805e0:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
   805e2:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
   805e4:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   805e6:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   805e8:	6803      	ldr	r3, [r0, #0]
   805ea:	3301      	adds	r3, #1
   805ec:	6003      	str	r3, [r0, #0]
   805ee:	4770      	bx	lr

000805f0 <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   805f0:	6843      	ldr	r3, [r0, #4]
   805f2:	6882      	ldr	r2, [r0, #8]
   805f4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   805f6:	6883      	ldr	r3, [r0, #8]
   805f8:	6842      	ldr	r2, [r0, #4]
   805fa:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
   805fc:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   805fe:	685a      	ldr	r2, [r3, #4]
   80600:	4282      	cmp	r2, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   80602:	bf04      	itt	eq
   80604:	6882      	ldreq	r2, [r0, #8]
   80606:	605a      	streq	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
   80608:	2200      	movs	r2, #0
   8060a:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
   8060c:	681a      	ldr	r2, [r3, #0]
   8060e:	3a01      	subs	r2, #1
   80610:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   80612:	6818      	ldr	r0, [r3, #0]
}
   80614:	4770      	bx	lr
   80616:	bf00      	nop

00080618 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

__attribute__ (( naked )) void SVC_Handler( void )
{
	__asm volatile (
   80618:	4b06      	ldr	r3, [pc, #24]	; (80634 <pxCurrentTCBConst2>)
   8061a:	6819      	ldr	r1, [r3, #0]
   8061c:	6808      	ldr	r0, [r1, #0]
   8061e:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80622:	f380 8809 	msr	PSP, r0
   80626:	f04f 0000 	mov.w	r0, #0
   8062a:	f380 8811 	msr	BASEPRI, r0
   8062e:	f04e 0e0d 	orr.w	lr, lr, #13
   80632:	4770      	bx	lr

00080634 <pxCurrentTCBConst2>:
   80634:	20070adc 	.word	0x20070adc

00080638 <ulPortSetInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
   80638:	f3ef 8011 	mrs	r0, BASEPRI
   8063c:	f04f 01a0 	mov.w	r1, #160	; 0xa0
   80640:	f381 8811 	msr	BASEPRI, r1
   80644:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
}
   80646:	2000      	movs	r0, #0

00080648 <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
   80648:	f380 8811 	msr	BASEPRI, r0
   8064c:	4770      	bx	lr
   8064e:	bf00      	nop

00080650 <PendSV_Handler>:

__attribute__(( naked )) void PendSV_Handler( void )
{
	/* This is a naked function. */

	__asm volatile
   80650:	f3ef 8009 	mrs	r0, PSP
   80654:	4b0c      	ldr	r3, [pc, #48]	; (80688 <pxCurrentTCBConst>)
   80656:	681a      	ldr	r2, [r3, #0]
   80658:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8065c:	6010      	str	r0, [r2, #0]
   8065e:	e92d 4008 	stmdb	sp!, {r3, lr}
   80662:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   80666:	f380 8811 	msr	BASEPRI, r0
   8066a:	f000 f8b5 	bl	807d8 <vTaskSwitchContext>
   8066e:	f04f 0000 	mov.w	r0, #0
   80672:	f380 8811 	msr	BASEPRI, r0
   80676:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   8067a:	6819      	ldr	r1, [r3, #0]
   8067c:	6808      	ldr	r0, [r1, #0]
   8067e:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80682:	f380 8809 	msr	PSP, r0
   80686:	4770      	bx	lr

00080688 <pxCurrentTCBConst>:
   80688:	20070adc 	.word	0x20070adc

0008068c <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void SysTick_Handler( void )
{
   8068c:	b508      	push	{r3, lr}
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   8068e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80692:	4b05      	ldr	r3, [pc, #20]	; (806a8 <SysTick_Handler+0x1c>)
   80694:	601a      	str	r2, [r3, #0]
	to generate the tick interrupt. */
	#if configUSE_TICKLESS_IDLE == 1
		portNVIC_SYSTICK_LOAD_REG = ulTimerReloadValueForOneTick;
	#endif

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
   80696:	4b05      	ldr	r3, [pc, #20]	; (806ac <SysTick_Handler+0x20>)
   80698:	4798      	blx	r3
	{
		vTaskIncrementTick();
   8069a:	4b05      	ldr	r3, [pc, #20]	; (806b0 <SysTick_Handler+0x24>)
   8069c:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
   8069e:	2000      	movs	r0, #0
   806a0:	4b04      	ldr	r3, [pc, #16]	; (806b4 <SysTick_Handler+0x28>)
   806a2:	4798      	blx	r3
   806a4:	bd08      	pop	{r3, pc}
   806a6:	bf00      	nop
   806a8:	e000ed04 	.word	0xe000ed04
   806ac:	00080639 	.word	0x00080639
   806b0:	000806b9 	.word	0x000806b9
   806b4:	00080649 	.word	0x00080649

000806b8 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
   806b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   806bc:	4b3a      	ldr	r3, [pc, #232]	; (807a8 <vTaskIncrementTick+0xf0>)
   806be:	681b      	ldr	r3, [r3, #0]
   806c0:	2b00      	cmp	r3, #0
   806c2:	d16b      	bne.n	8079c <vTaskIncrementTick+0xe4>
	{
		++xTickCount;
   806c4:	4b39      	ldr	r3, [pc, #228]	; (807ac <vTaskIncrementTick+0xf4>)
   806c6:	681a      	ldr	r2, [r3, #0]
   806c8:	3201      	adds	r2, #1
   806ca:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
   806cc:	681b      	ldr	r3, [r3, #0]
   806ce:	bb03      	cbnz	r3, 80712 <vTaskIncrementTick+0x5a>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
   806d0:	4b37      	ldr	r3, [pc, #220]	; (807b0 <vTaskIncrementTick+0xf8>)
   806d2:	681b      	ldr	r3, [r3, #0]
   806d4:	681b      	ldr	r3, [r3, #0]
   806d6:	b11b      	cbz	r3, 806e0 <vTaskIncrementTick+0x28>
   806d8:	4b36      	ldr	r3, [pc, #216]	; (807b4 <vTaskIncrementTick+0xfc>)
   806da:	4798      	blx	r3
   806dc:	bf00      	nop
   806de:	e7fd      	b.n	806dc <vTaskIncrementTick+0x24>

			pxTemp = pxDelayedTaskList;
   806e0:	4b33      	ldr	r3, [pc, #204]	; (807b0 <vTaskIncrementTick+0xf8>)
   806e2:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
   806e4:	4a34      	ldr	r2, [pc, #208]	; (807b8 <vTaskIncrementTick+0x100>)
   806e6:	6810      	ldr	r0, [r2, #0]
   806e8:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
   806ea:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
   806ec:	4a33      	ldr	r2, [pc, #204]	; (807bc <vTaskIncrementTick+0x104>)
   806ee:	6811      	ldr	r1, [r2, #0]
   806f0:	3101      	adds	r1, #1
   806f2:	6011      	str	r1, [r2, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   806f4:	681b      	ldr	r3, [r3, #0]
   806f6:	681b      	ldr	r3, [r3, #0]
   806f8:	b923      	cbnz	r3, 80704 <vTaskIncrementTick+0x4c>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
   806fa:	f04f 32ff 	mov.w	r2, #4294967295
   806fe:	4b30      	ldr	r3, [pc, #192]	; (807c0 <vTaskIncrementTick+0x108>)
   80700:	601a      	str	r2, [r3, #0]
   80702:	e006      	b.n	80712 <vTaskIncrementTick+0x5a>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   80704:	4b2a      	ldr	r3, [pc, #168]	; (807b0 <vTaskIncrementTick+0xf8>)
   80706:	681b      	ldr	r3, [r3, #0]
   80708:	68db      	ldr	r3, [r3, #12]
   8070a:	68db      	ldr	r3, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   8070c:	685a      	ldr	r2, [r3, #4]
   8070e:	4b2c      	ldr	r3, [pc, #176]	; (807c0 <vTaskIncrementTick+0x108>)
   80710:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
   80712:	4b26      	ldr	r3, [pc, #152]	; (807ac <vTaskIncrementTick+0xf4>)
   80714:	681a      	ldr	r2, [r3, #0]
   80716:	4b2a      	ldr	r3, [pc, #168]	; (807c0 <vTaskIncrementTick+0x108>)
   80718:	681b      	ldr	r3, [r3, #0]
   8071a:	429a      	cmp	r2, r3
   8071c:	d342      	bcc.n	807a4 <vTaskIncrementTick+0xec>
   8071e:	4b24      	ldr	r3, [pc, #144]	; (807b0 <vTaskIncrementTick+0xf8>)
   80720:	681b      	ldr	r3, [r3, #0]
   80722:	681b      	ldr	r3, [r3, #0]
   80724:	b14b      	cbz	r3, 8073a <vTaskIncrementTick+0x82>
   80726:	4b22      	ldr	r3, [pc, #136]	; (807b0 <vTaskIncrementTick+0xf8>)
   80728:	681b      	ldr	r3, [r3, #0]
   8072a:	68db      	ldr	r3, [r3, #12]
   8072c:	68dc      	ldr	r4, [r3, #12]
   8072e:	6863      	ldr	r3, [r4, #4]
   80730:	4a1e      	ldr	r2, [pc, #120]	; (807ac <vTaskIncrementTick+0xf4>)
   80732:	6812      	ldr	r2, [r2, #0]
   80734:	4293      	cmp	r3, r2
   80736:	d913      	bls.n	80760 <vTaskIncrementTick+0xa8>
   80738:	e00e      	b.n	80758 <vTaskIncrementTick+0xa0>
   8073a:	f04f 32ff 	mov.w	r2, #4294967295
   8073e:	4b20      	ldr	r3, [pc, #128]	; (807c0 <vTaskIncrementTick+0x108>)
   80740:	601a      	str	r2, [r3, #0]
   80742:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80746:	4b1a      	ldr	r3, [pc, #104]	; (807b0 <vTaskIncrementTick+0xf8>)
   80748:	681b      	ldr	r3, [r3, #0]
   8074a:	68db      	ldr	r3, [r3, #12]
   8074c:	68dc      	ldr	r4, [r3, #12]
   8074e:	6863      	ldr	r3, [r4, #4]
   80750:	4a16      	ldr	r2, [pc, #88]	; (807ac <vTaskIncrementTick+0xf4>)
   80752:	6812      	ldr	r2, [r2, #0]
   80754:	4293      	cmp	r3, r2
   80756:	d907      	bls.n	80768 <vTaskIncrementTick+0xb0>
   80758:	4a19      	ldr	r2, [pc, #100]	; (807c0 <vTaskIncrementTick+0x108>)
   8075a:	6013      	str	r3, [r2, #0]
   8075c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80760:	4e18      	ldr	r6, [pc, #96]	; (807c4 <vTaskIncrementTick+0x10c>)
   80762:	4f19      	ldr	r7, [pc, #100]	; (807c8 <vTaskIncrementTick+0x110>)
   80764:	f8df 806c 	ldr.w	r8, [pc, #108]	; 807d4 <vTaskIncrementTick+0x11c>
   80768:	1d25      	adds	r5, r4, #4
   8076a:	4628      	mov	r0, r5
   8076c:	47b0      	blx	r6
   8076e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   80770:	b113      	cbz	r3, 80778 <vTaskIncrementTick+0xc0>
   80772:	f104 0018 	add.w	r0, r4, #24
   80776:	47b0      	blx	r6
   80778:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   8077a:	683a      	ldr	r2, [r7, #0]
   8077c:	4293      	cmp	r3, r2
   8077e:	bf88      	it	hi
   80780:	603b      	strhi	r3, [r7, #0]
   80782:	eb03 0083 	add.w	r0, r3, r3, lsl #2
   80786:	eb08 0080 	add.w	r0, r8, r0, lsl #2
   8078a:	4629      	mov	r1, r5
   8078c:	4b0f      	ldr	r3, [pc, #60]	; (807cc <vTaskIncrementTick+0x114>)
   8078e:	4798      	blx	r3
   80790:	4b07      	ldr	r3, [pc, #28]	; (807b0 <vTaskIncrementTick+0xf8>)
   80792:	681b      	ldr	r3, [r3, #0]
   80794:	681b      	ldr	r3, [r3, #0]
   80796:	2b00      	cmp	r3, #0
   80798:	d1d5      	bne.n	80746 <vTaskIncrementTick+0x8e>
   8079a:	e7ce      	b.n	8073a <vTaskIncrementTick+0x82>
	}
	else
	{
		++uxMissedTicks;
   8079c:	4b0c      	ldr	r3, [pc, #48]	; (807d0 <vTaskIncrementTick+0x118>)
   8079e:	681a      	ldr	r2, [r3, #0]
   807a0:	3201      	adds	r2, #1
   807a2:	601a      	str	r2, [r3, #0]
   807a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   807a8:	20070ad8 	.word	0x20070ad8
   807ac:	20070ae4 	.word	0x20070ae4
   807b0:	20070a6c 	.word	0x20070a6c
   807b4:	00080639 	.word	0x00080639
   807b8:	20070ae8 	.word	0x20070ae8
   807bc:	20070ae0 	.word	0x20070ae0
   807c0:	20070138 	.word	0x20070138
   807c4:	000805f1 	.word	0x000805f1
   807c8:	20070a70 	.word	0x20070a70
   807cc:	000805d5 	.word	0x000805d5
   807d0:	20070a68 	.word	0x20070a68
   807d4:	20070a74 	.word	0x20070a74

000807d8 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   807d8:	b508      	push	{r3, lr}
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
   807da:	4b1d      	ldr	r3, [pc, #116]	; (80850 <vTaskSwitchContext+0x78>)
   807dc:	681b      	ldr	r3, [r3, #0]
   807de:	b95b      	cbnz	r3, 807f8 <vTaskSwitchContext+0x20>
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   807e0:	4b1c      	ldr	r3, [pc, #112]	; (80854 <vTaskSwitchContext+0x7c>)
   807e2:	681b      	ldr	r3, [r3, #0]
   807e4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   807e8:	009b      	lsls	r3, r3, #2
   807ea:	4a1b      	ldr	r2, [pc, #108]	; (80858 <vTaskSwitchContext+0x80>)
   807ec:	58d3      	ldr	r3, [r2, r3]
   807ee:	b9cb      	cbnz	r3, 80824 <vTaskSwitchContext+0x4c>
   807f0:	4b18      	ldr	r3, [pc, #96]	; (80854 <vTaskSwitchContext+0x7c>)
   807f2:	681b      	ldr	r3, [r3, #0]
   807f4:	b953      	cbnz	r3, 8080c <vTaskSwitchContext+0x34>
   807f6:	e005      	b.n	80804 <vTaskSwitchContext+0x2c>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
   807f8:	2201      	movs	r2, #1
   807fa:	4b18      	ldr	r3, [pc, #96]	; (8085c <vTaskSwitchContext+0x84>)
   807fc:	601a      	str	r2, [r3, #0]
   807fe:	bd08      	pop	{r3, pc}
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   80800:	681a      	ldr	r2, [r3, #0]
   80802:	b92a      	cbnz	r2, 80810 <vTaskSwitchContext+0x38>
   80804:	4b16      	ldr	r3, [pc, #88]	; (80860 <vTaskSwitchContext+0x88>)
   80806:	4798      	blx	r3
   80808:	bf00      	nop
   8080a:	e7fd      	b.n	80808 <vTaskSwitchContext+0x30>
   8080c:	4b11      	ldr	r3, [pc, #68]	; (80854 <vTaskSwitchContext+0x7c>)
   8080e:	4912      	ldr	r1, [pc, #72]	; (80858 <vTaskSwitchContext+0x80>)
   80810:	681a      	ldr	r2, [r3, #0]
   80812:	3a01      	subs	r2, #1
   80814:	601a      	str	r2, [r3, #0]
   80816:	681a      	ldr	r2, [r3, #0]
   80818:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   8081c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
   80820:	2a00      	cmp	r2, #0
   80822:	d0ed      	beq.n	80800 <vTaskSwitchContext+0x28>
   80824:	4b0b      	ldr	r3, [pc, #44]	; (80854 <vTaskSwitchContext+0x7c>)
   80826:	681b      	ldr	r3, [r3, #0]
   80828:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   8082c:	4a0a      	ldr	r2, [pc, #40]	; (80858 <vTaskSwitchContext+0x80>)
   8082e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   80832:	685a      	ldr	r2, [r3, #4]
   80834:	6852      	ldr	r2, [r2, #4]
   80836:	605a      	str	r2, [r3, #4]
   80838:	f103 0108 	add.w	r1, r3, #8
   8083c:	428a      	cmp	r2, r1
   8083e:	bf04      	itt	eq
   80840:	6852      	ldreq	r2, [r2, #4]
   80842:	605a      	streq	r2, [r3, #4]
   80844:	685b      	ldr	r3, [r3, #4]
   80846:	68da      	ldr	r2, [r3, #12]
   80848:	4b06      	ldr	r3, [pc, #24]	; (80864 <vTaskSwitchContext+0x8c>)
   8084a:	601a      	str	r2, [r3, #0]
   8084c:	bd08      	pop	{r3, pc}
   8084e:	bf00      	nop
   80850:	20070ad8 	.word	0x20070ad8
   80854:	20070a70 	.word	0x20070a70
   80858:	20070a74 	.word	0x20070a74
   8085c:	20070aec 	.word	0x20070aec
   80860:	00080639 	.word	0x00080639
   80864:	20070adc 	.word	0x20070adc

00080868 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   80868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8086c:	460e      	mov	r6, r1
   8086e:	4615      	mov	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   80870:	3801      	subs	r0, #1
   80872:	2802      	cmp	r0, #2
   80874:	d80f      	bhi.n	80896 <_write+0x2e>
		return -1;
	}

	for (; len != 0; --len) {
   80876:	b192      	cbz	r2, 8089e <_write+0x36>
   80878:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
   8087a:	f8df 803c 	ldr.w	r8, [pc, #60]	; 808b8 <_write+0x50>
   8087e:	4f0d      	ldr	r7, [pc, #52]	; (808b4 <_write+0x4c>)
   80880:	f8d8 0000 	ldr.w	r0, [r8]
   80884:	5d31      	ldrb	r1, [r6, r4]
   80886:	683b      	ldr	r3, [r7, #0]
   80888:	4798      	blx	r3
   8088a:	2800      	cmp	r0, #0
   8088c:	db0a      	blt.n	808a4 <_write+0x3c>
			return -1;
		}
		++nChars;
   8088e:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   80890:	42a5      	cmp	r5, r4
   80892:	d1f5      	bne.n	80880 <_write+0x18>
   80894:	e00a      	b.n	808ac <_write+0x44>
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
   80896:	f04f 30ff 	mov.w	r0, #4294967295
   8089a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len != 0; --len) {
   8089e:	2000      	movs	r0, #0
   808a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
   808a4:	f04f 30ff 	mov.w	r0, #4294967295
   808a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		++nChars;
   808ac:	4620      	mov	r0, r4
	}
	return nChars;
}
   808ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   808b2:	bf00      	nop
   808b4:	20070b9c 	.word	0x20070b9c
   808b8:	20070ba0 	.word	0x20070ba0

000808bc <usart_serial_read_packet>:
 * \param len    Length of data
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
   808bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   808c0:	b083      	sub	sp, #12
   808c2:	4605      	mov	r5, r0
	while (len) {
   808c4:	4690      	mov	r8, r2
   808c6:	2a00      	cmp	r2, #0
   808c8:	d047      	beq.n	8095a <usart_serial_read_packet+0x9e>
   808ca:	1c4e      	adds	r6, r1, #1
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   808cc:	4f25      	ldr	r7, [pc, #148]	; (80964 <usart_serial_read_packet+0xa8>)
		while (usart_read(p_usart, &val));
   808ce:	4c26      	ldr	r4, [pc, #152]	; (80968 <usart_serial_read_packet+0xac>)
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   808d0:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 8097c <usart_serial_read_packet+0xc0>
	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
   808d4:	f8df b094 	ldr.w	fp, [pc, #148]	; 8096c <usart_serial_read_packet+0xb0>
   808d8:	f106 39ff 	add.w	r9, r6, #4294967295
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
	uint32_t val = 0;
   808dc:	2300      	movs	r3, #0
   808de:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   808e0:	4b22      	ldr	r3, [pc, #136]	; (8096c <usart_serial_read_packet+0xb0>)
   808e2:	429d      	cmp	r5, r3
   808e4:	d106      	bne.n	808f4 <usart_serial_read_packet+0x38>
		while (uart_read((Uart*)p_usart, data));
   808e6:	4658      	mov	r0, fp
   808e8:	4649      	mov	r1, r9
   808ea:	4b21      	ldr	r3, [pc, #132]	; (80970 <usart_serial_read_packet+0xb4>)
   808ec:	4798      	blx	r3
   808ee:	2800      	cmp	r0, #0
   808f0:	d1f9      	bne.n	808e6 <usart_serial_read_packet+0x2a>
   808f2:	e019      	b.n	80928 <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   808f4:	4b1f      	ldr	r3, [pc, #124]	; (80974 <usart_serial_read_packet+0xb8>)
   808f6:	429d      	cmp	r5, r3
   808f8:	d109      	bne.n	8090e <usart_serial_read_packet+0x52>
		while (usart_read(p_usart, &val));
   808fa:	4699      	mov	r9, r3
   808fc:	4648      	mov	r0, r9
   808fe:	a901      	add	r1, sp, #4
   80900:	47a0      	blx	r4
   80902:	2800      	cmp	r0, #0
   80904:	d1fa      	bne.n	808fc <usart_serial_read_packet+0x40>
		*data = (uint8_t)(val & 0xFF);
   80906:	9b01      	ldr	r3, [sp, #4]
   80908:	f806 3c01 	strb.w	r3, [r6, #-1]
   8090c:	e017      	b.n	8093e <usart_serial_read_packet+0x82>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   8090e:	4b1a      	ldr	r3, [pc, #104]	; (80978 <usart_serial_read_packet+0xbc>)
   80910:	429d      	cmp	r5, r3
   80912:	d109      	bne.n	80928 <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
   80914:	4699      	mov	r9, r3
   80916:	4648      	mov	r0, r9
   80918:	a901      	add	r1, sp, #4
   8091a:	47a0      	blx	r4
   8091c:	2800      	cmp	r0, #0
   8091e:	d1fa      	bne.n	80916 <usart_serial_read_packet+0x5a>
		*data = (uint8_t)(val & 0xFF);
   80920:	9b01      	ldr	r3, [sp, #4]
   80922:	f806 3c01 	strb.w	r3, [r6, #-1]
   80926:	e014      	b.n	80952 <usart_serial_read_packet+0x96>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80928:	4555      	cmp	r5, sl
   8092a:	d108      	bne.n	8093e <usart_serial_read_packet+0x82>
		while (usart_read(p_usart, &val));
   8092c:	4650      	mov	r0, sl
   8092e:	a901      	add	r1, sp, #4
   80930:	47a0      	blx	r4
   80932:	2800      	cmp	r0, #0
   80934:	d1fa      	bne.n	8092c <usart_serial_read_packet+0x70>
		*data = (uint8_t)(val & 0xFF);
   80936:	9b01      	ldr	r3, [sp, #4]
   80938:	f806 3c01 	strb.w	r3, [r6, #-1]
   8093c:	e009      	b.n	80952 <usart_serial_read_packet+0x96>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   8093e:	42bd      	cmp	r5, r7
   80940:	d107      	bne.n	80952 <usart_serial_read_packet+0x96>
		while (usart_read(p_usart, &val));
   80942:	4638      	mov	r0, r7
   80944:	a901      	add	r1, sp, #4
   80946:	47a0      	blx	r4
   80948:	2800      	cmp	r0, #0
   8094a:	d1fa      	bne.n	80942 <usart_serial_read_packet+0x86>
		*data = (uint8_t)(val & 0xFF);
   8094c:	9b01      	ldr	r3, [sp, #4]
   8094e:	f806 3c01 	strb.w	r3, [r6, #-1]
   80952:	3601      	adds	r6, #1
   80954:	f1b8 0801 	subs.w	r8, r8, #1
   80958:	d1be      	bne.n	808d8 <usart_serial_read_packet+0x1c>
		usart_serial_getchar(usart, data);
		len--;
		data++;
	}
	return STATUS_OK;
}
   8095a:	2000      	movs	r0, #0
   8095c:	b003      	add	sp, #12
   8095e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80962:	bf00      	nop
   80964:	400a4000 	.word	0x400a4000
   80968:	000803c1 	.word	0x000803c1
   8096c:	400e0800 	.word	0x400e0800
   80970:	000809c9 	.word	0x000809c9
   80974:	40098000 	.word	0x40098000
   80978:	4009c000 	.word	0x4009c000
   8097c:	400a0000 	.word	0x400a0000

00080980 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   80980:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   80982:	23ac      	movs	r3, #172	; 0xac
   80984:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   80986:	680a      	ldr	r2, [r1, #0]
   80988:	684b      	ldr	r3, [r1, #4]
   8098a:	fbb2 f3f3 	udiv	r3, r2, r3
   8098e:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   80990:	1e5c      	subs	r4, r3, #1
   80992:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   80996:	4294      	cmp	r4, r2
   80998:	d80a      	bhi.n	809b0 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
   8099a:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   8099c:	688b      	ldr	r3, [r1, #8]
   8099e:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   809a0:	f240 2302 	movw	r3, #514	; 0x202
   809a4:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   809a8:	2350      	movs	r3, #80	; 0x50
   809aa:	6003      	str	r3, [r0, #0]

	return 0;
   809ac:	2000      	movs	r0, #0
   809ae:	e000      	b.n	809b2 <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
   809b0:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
   809b2:	f85d 4b04 	ldr.w	r4, [sp], #4
   809b6:	4770      	bx	lr

000809b8 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   809b8:	6943      	ldr	r3, [r0, #20]
   809ba:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   809be:	bf1a      	itte	ne
   809c0:	61c1      	strne	r1, [r0, #28]
	return 0;
   809c2:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
   809c4:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
   809c6:	4770      	bx	lr

000809c8 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   809c8:	6943      	ldr	r3, [r0, #20]
   809ca:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   809ce:	bf1d      	ittte	ne
   809d0:	6983      	ldrne	r3, [r0, #24]
   809d2:	700b      	strbne	r3, [r1, #0]
	return 0;
   809d4:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
   809d6:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
   809d8:	4770      	bx	lr
   809da:	bf00      	nop

000809dc <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   809dc:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   809de:	480e      	ldr	r0, [pc, #56]	; (80a18 <sysclk_init+0x3c>)
   809e0:	4b0e      	ldr	r3, [pc, #56]	; (80a1c <sysclk_init+0x40>)
   809e2:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   809e4:	2000      	movs	r0, #0
   809e6:	213e      	movs	r1, #62	; 0x3e
   809e8:	4b0d      	ldr	r3, [pc, #52]	; (80a20 <sysclk_init+0x44>)
   809ea:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   809ec:	4c0d      	ldr	r4, [pc, #52]	; (80a24 <sysclk_init+0x48>)
   809ee:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   809f0:	2800      	cmp	r0, #0
   809f2:	d0fc      	beq.n	809ee <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   809f4:	4b0c      	ldr	r3, [pc, #48]	; (80a28 <sysclk_init+0x4c>)
   809f6:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   809f8:	4a0c      	ldr	r2, [pc, #48]	; (80a2c <sysclk_init+0x50>)
   809fa:	4b0d      	ldr	r3, [pc, #52]	; (80a30 <sysclk_init+0x54>)
   809fc:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   809fe:	4c0d      	ldr	r4, [pc, #52]	; (80a34 <sysclk_init+0x58>)
   80a00:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   80a02:	2800      	cmp	r0, #0
   80a04:	d0fc      	beq.n	80a00 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   80a06:	2010      	movs	r0, #16
   80a08:	4b0b      	ldr	r3, [pc, #44]	; (80a38 <sysclk_init+0x5c>)
   80a0a:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   80a0c:	4b0b      	ldr	r3, [pc, #44]	; (80a3c <sysclk_init+0x60>)
   80a0e:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   80a10:	4801      	ldr	r0, [pc, #4]	; (80a18 <sysclk_init+0x3c>)
   80a12:	4b02      	ldr	r3, [pc, #8]	; (80a1c <sysclk_init+0x40>)
   80a14:	4798      	blx	r3
   80a16:	bd10      	pop	{r4, pc}
   80a18:	0501bd00 	.word	0x0501bd00
   80a1c:	200700b1 	.word	0x200700b1
   80a20:	00080e15 	.word	0x00080e15
   80a24:	00080e69 	.word	0x00080e69
   80a28:	00080e79 	.word	0x00080e79
   80a2c:	200d3f01 	.word	0x200d3f01
   80a30:	400e0600 	.word	0x400e0600
   80a34:	00080e89 	.word	0x00080e89
   80a38:	00080db1 	.word	0x00080db1
   80a3c:	00080fa5 	.word	0x00080fa5

00080a40 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   80a40:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   80a42:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   80a46:	4b22      	ldr	r3, [pc, #136]	; (80ad0 <board_init+0x90>)
   80a48:	605a      	str	r2, [r3, #4]
   80a4a:	200b      	movs	r0, #11
   80a4c:	4c21      	ldr	r4, [pc, #132]	; (80ad4 <board_init+0x94>)
   80a4e:	47a0      	blx	r4
   80a50:	200c      	movs	r0, #12
   80a52:	47a0      	blx	r4
   80a54:	200d      	movs	r0, #13
   80a56:	47a0      	blx	r4
   80a58:	200e      	movs	r0, #14
   80a5a:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   80a5c:	203b      	movs	r0, #59	; 0x3b
   80a5e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80a62:	4c1d      	ldr	r4, [pc, #116]	; (80ad8 <board_init+0x98>)
   80a64:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   80a66:	2055      	movs	r0, #85	; 0x55
   80a68:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80a6c:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   80a6e:	2056      	movs	r0, #86	; 0x56
   80a70:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80a74:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   80a76:	2068      	movs	r0, #104	; 0x68
   80a78:	4918      	ldr	r1, [pc, #96]	; (80adc <board_init+0x9c>)
   80a7a:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   80a7c:	205c      	movs	r0, #92	; 0x5c
   80a7e:	4918      	ldr	r1, [pc, #96]	; (80ae0 <board_init+0xa0>)
   80a80:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   80a82:	4818      	ldr	r0, [pc, #96]	; (80ae4 <board_init+0xa4>)
   80a84:	f44f 7140 	mov.w	r1, #768	; 0x300
   80a88:	4a17      	ldr	r2, [pc, #92]	; (80ae8 <board_init+0xa8>)
   80a8a:	4b18      	ldr	r3, [pc, #96]	; (80aec <board_init+0xac>)
   80a8c:	4798      	blx	r3
		gpio_configure_pin(SPI1_NPCS3_GPIO, SPI1_NPCS3_FLAGS);
#   endif
#endif

#ifdef CONF_BOARD_TWI0
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
   80a8e:	2011      	movs	r0, #17
   80a90:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80a94:	47a0      	blx	r4
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
   80a96:	2012      	movs	r0, #18
   80a98:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80a9c:	47a0      	blx	r4
#endif

#ifdef CONF_BOARD_TWI1
	gpio_configure_pin(TWI1_DATA_GPIO, TWI1_DATA_FLAGS);
   80a9e:	202c      	movs	r0, #44	; 0x2c
   80aa0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80aa4:	47a0      	blx	r4
	gpio_configure_pin(TWI1_CLK_GPIO, TWI1_CLK_FLAGS);
   80aa6:	202d      	movs	r0, #45	; 0x2d
   80aa8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80aac:	47a0      	blx	r4
#endif

#ifdef CONF_BOARD_USART_RXD
	/* Configure USART RXD pin */
	gpio_configure_pin(PIN_USART0_RXD_IDX, PIN_USART0_RXD_FLAGS);
   80aae:	200a      	movs	r0, #10
   80ab0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80ab4:	47a0      	blx	r4
#endif

#ifdef CONF_BOARD_USART_TXD
	/* Configure USART TXD pin */
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
   80ab6:	200b      	movs	r0, #11
   80ab8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80abc:	47a0      	blx	r4
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   80abe:	202b      	movs	r0, #43	; 0x2b
   80ac0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80ac4:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   80ac6:	202a      	movs	r0, #42	; 0x2a
   80ac8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80acc:	47a0      	blx	r4
   80ace:	bd10      	pop	{r4, pc}
   80ad0:	400e1a50 	.word	0x400e1a50
   80ad4:	00080e99 	.word	0x00080e99
   80ad8:	00080b95 	.word	0x00080b95
   80adc:	28000079 	.word	0x28000079
   80ae0:	28000001 	.word	0x28000001
   80ae4:	400e0e00 	.word	0x400e0e00
   80ae8:	08000001 	.word	0x08000001
   80aec:	00080c69 	.word	0x00080c69

00080af0 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   80af0:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   80af2:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   80af6:	d016      	beq.n	80b26 <pio_set_peripheral+0x36>
   80af8:	d804      	bhi.n	80b04 <pio_set_peripheral+0x14>
   80afa:	b1c1      	cbz	r1, 80b2e <pio_set_peripheral+0x3e>
   80afc:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   80b00:	d00a      	beq.n	80b18 <pio_set_peripheral+0x28>
   80b02:	e013      	b.n	80b2c <pio_set_peripheral+0x3c>
   80b04:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   80b08:	d011      	beq.n	80b2e <pio_set_peripheral+0x3e>
   80b0a:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   80b0e:	d00e      	beq.n	80b2e <pio_set_peripheral+0x3e>
   80b10:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   80b14:	d10a      	bne.n	80b2c <pio_set_peripheral+0x3c>
   80b16:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   80b18:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   80b1a:	6f01      	ldr	r1, [r0, #112]	; 0x70
   80b1c:	400b      	ands	r3, r1
   80b1e:	ea23 0302 	bic.w	r3, r3, r2
   80b22:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   80b24:	e002      	b.n	80b2c <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   80b26:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   80b28:	4313      	orrs	r3, r2
   80b2a:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   80b2c:	6042      	str	r2, [r0, #4]
   80b2e:	4770      	bx	lr

00080b30 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   80b30:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80b32:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   80b36:	bf14      	ite	ne
   80b38:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80b3a:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   80b3c:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   80b40:	bf14      	ite	ne
   80b42:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   80b44:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   80b46:	f012 0f02 	tst.w	r2, #2
   80b4a:	d002      	beq.n	80b52 <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   80b4c:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   80b50:	e004      	b.n	80b5c <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   80b52:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   80b56:	bf18      	it	ne
   80b58:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   80b5c:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   80b5e:	6001      	str	r1, [r0, #0]
   80b60:	4770      	bx	lr
   80b62:	bf00      	nop

00080b64 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   80b64:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   80b66:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80b68:	9c01      	ldr	r4, [sp, #4]
   80b6a:	b10c      	cbz	r4, 80b70 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   80b6c:	6641      	str	r1, [r0, #100]	; 0x64
   80b6e:	e000      	b.n	80b72 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80b70:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   80b72:	b10b      	cbz	r3, 80b78 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   80b74:	6501      	str	r1, [r0, #80]	; 0x50
   80b76:	e000      	b.n	80b7a <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   80b78:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   80b7a:	b10a      	cbz	r2, 80b80 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   80b7c:	6301      	str	r1, [r0, #48]	; 0x30
   80b7e:	e000      	b.n	80b82 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   80b80:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   80b82:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   80b84:	6001      	str	r1, [r0, #0]
}
   80b86:	f85d 4b04 	ldr.w	r4, [sp], #4
   80b8a:	4770      	bx	lr

00080b8c <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   80b8c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   80b8e:	4770      	bx	lr

00080b90 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   80b90:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   80b92:	4770      	bx	lr

00080b94 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   80b94:	b570      	push	{r4, r5, r6, lr}
   80b96:	b082      	sub	sp, #8
   80b98:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   80b9a:	0944      	lsrs	r4, r0, #5
   80b9c:	f504 1400 	add.w	r4, r4, #2097152	; 0x200000
   80ba0:	f204 7407 	addw	r4, r4, #1799	; 0x707
   80ba4:	0266      	lsls	r6, r4, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   80ba6:	f001 44f0 	and.w	r4, r1, #2013265920	; 0x78000000
   80baa:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   80bae:	d030      	beq.n	80c12 <pio_configure_pin+0x7e>
   80bb0:	d806      	bhi.n	80bc0 <pio_configure_pin+0x2c>
   80bb2:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   80bb6:	d00a      	beq.n	80bce <pio_configure_pin+0x3a>
   80bb8:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   80bbc:	d018      	beq.n	80bf0 <pio_configure_pin+0x5c>
   80bbe:	e049      	b.n	80c54 <pio_configure_pin+0xc0>
   80bc0:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   80bc4:	d030      	beq.n	80c28 <pio_configure_pin+0x94>
   80bc6:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   80bca:	d02d      	beq.n	80c28 <pio_configure_pin+0x94>
   80bcc:	e042      	b.n	80c54 <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   80bce:	f000 001f 	and.w	r0, r0, #31
   80bd2:	2401      	movs	r4, #1
   80bd4:	4084      	lsls	r4, r0
   80bd6:	4630      	mov	r0, r6
   80bd8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80bdc:	4622      	mov	r2, r4
   80bde:	4b1f      	ldr	r3, [pc, #124]	; (80c5c <pio_configure_pin+0xc8>)
   80be0:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80be2:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80be6:	bf14      	ite	ne
   80be8:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80bea:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80bec:	2001      	movs	r0, #1
   80bee:	e032      	b.n	80c56 <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   80bf0:	f000 001f 	and.w	r0, r0, #31
   80bf4:	2401      	movs	r4, #1
   80bf6:	4084      	lsls	r4, r0
   80bf8:	4630      	mov	r0, r6
   80bfa:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80bfe:	4622      	mov	r2, r4
   80c00:	4b16      	ldr	r3, [pc, #88]	; (80c5c <pio_configure_pin+0xc8>)
   80c02:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80c04:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80c08:	bf14      	ite	ne
   80c0a:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80c0c:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80c0e:	2001      	movs	r0, #1
   80c10:	e021      	b.n	80c56 <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   80c12:	f000 011f 	and.w	r1, r0, #31
   80c16:	2401      	movs	r4, #1
   80c18:	4630      	mov	r0, r6
   80c1a:	fa04 f101 	lsl.w	r1, r4, r1
   80c1e:	462a      	mov	r2, r5
   80c20:	4b0f      	ldr	r3, [pc, #60]	; (80c60 <pio_configure_pin+0xcc>)
   80c22:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80c24:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   80c26:	e016      	b.n	80c56 <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80c28:	f000 011f 	and.w	r1, r0, #31
   80c2c:	2401      	movs	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80c2e:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80c32:	ea05 0304 	and.w	r3, r5, r4
   80c36:	9300      	str	r3, [sp, #0]
   80c38:	4630      	mov	r0, r6
   80c3a:	fa04 f101 	lsl.w	r1, r4, r1
   80c3e:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80c42:	bf14      	ite	ne
   80c44:	2200      	movne	r2, #0
   80c46:	2201      	moveq	r2, #1
   80c48:	f3c5 0380 	ubfx	r3, r5, #2, #1
   80c4c:	4d05      	ldr	r5, [pc, #20]	; (80c64 <pio_configure_pin+0xd0>)
   80c4e:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
   80c50:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   80c52:	e000      	b.n	80c56 <pio_configure_pin+0xc2>

	default:
		return 0;
   80c54:	2000      	movs	r0, #0
	}

	return 1;
}
   80c56:	b002      	add	sp, #8
   80c58:	bd70      	pop	{r4, r5, r6, pc}
   80c5a:	bf00      	nop
   80c5c:	00080af1 	.word	0x00080af1
   80c60:	00080b31 	.word	0x00080b31
   80c64:	00080b65 	.word	0x00080b65

00080c68 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   80c68:	b5f0      	push	{r4, r5, r6, r7, lr}
   80c6a:	b083      	sub	sp, #12
   80c6c:	4607      	mov	r7, r0
   80c6e:	460e      	mov	r6, r1
   80c70:	4615      	mov	r5, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   80c72:	f002 44f0 	and.w	r4, r2, #2013265920	; 0x78000000
   80c76:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   80c7a:	d026      	beq.n	80cca <pio_configure_pin_group+0x62>
   80c7c:	d806      	bhi.n	80c8c <pio_configure_pin_group+0x24>
   80c7e:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   80c82:	d00a      	beq.n	80c9a <pio_configure_pin_group+0x32>
   80c84:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   80c88:	d013      	beq.n	80cb2 <pio_configure_pin_group+0x4a>
   80c8a:	e034      	b.n	80cf6 <pio_configure_pin_group+0x8e>
   80c8c:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   80c90:	d01f      	beq.n	80cd2 <pio_configure_pin_group+0x6a>
   80c92:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   80c96:	d01c      	beq.n	80cd2 <pio_configure_pin_group+0x6a>
   80c98:	e02d      	b.n	80cf6 <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   80c9a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80c9e:	4632      	mov	r2, r6
   80ca0:	4b16      	ldr	r3, [pc, #88]	; (80cfc <pio_configure_pin_group+0x94>)
   80ca2:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80ca4:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80ca8:	bf14      	ite	ne
   80caa:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80cac:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80cae:	2001      	movs	r0, #1
   80cb0:	e022      	b.n	80cf8 <pio_configure_pin_group+0x90>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   80cb2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80cb6:	4632      	mov	r2, r6
   80cb8:	4b10      	ldr	r3, [pc, #64]	; (80cfc <pio_configure_pin_group+0x94>)
   80cba:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80cbc:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80cc0:	bf14      	ite	ne
   80cc2:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80cc4:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80cc6:	2001      	movs	r0, #1
   80cc8:	e016      	b.n	80cf8 <pio_configure_pin_group+0x90>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   80cca:	4b0d      	ldr	r3, [pc, #52]	; (80d00 <pio_configure_pin_group+0x98>)
   80ccc:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80cce:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   80cd0:	e012      	b.n	80cf8 <pio_configure_pin_group+0x90>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80cd2:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   80cd6:	f005 0301 	and.w	r3, r5, #1
   80cda:	9300      	str	r3, [sp, #0]
   80cdc:	4638      	mov	r0, r7
   80cde:	4631      	mov	r1, r6
   80ce0:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80ce4:	bf14      	ite	ne
   80ce6:	2200      	movne	r2, #0
   80ce8:	2201      	moveq	r2, #1
   80cea:	f3c5 0380 	ubfx	r3, r5, #2, #1
   80cee:	4c05      	ldr	r4, [pc, #20]	; (80d04 <pio_configure_pin_group+0x9c>)
   80cf0:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   80cf2:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   80cf4:	e000      	b.n	80cf8 <pio_configure_pin_group+0x90>

	default:
		return 0;
   80cf6:	2000      	movs	r0, #0
	}

	return 1;
}
   80cf8:	b003      	add	sp, #12
   80cfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80cfc:	00080af1 	.word	0x00080af1
   80d00:	00080b31 	.word	0x00080b31
   80d04:	00080b65 	.word	0x00080b65

00080d08 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   80d08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80d0c:	4604      	mov	r4, r0
   80d0e:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   80d10:	4b10      	ldr	r3, [pc, #64]	; (80d54 <pio_handler_process+0x4c>)
   80d12:	4798      	blx	r3
   80d14:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   80d16:	4620      	mov	r0, r4
   80d18:	4b0f      	ldr	r3, [pc, #60]	; (80d58 <pio_handler_process+0x50>)
   80d1a:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   80d1c:	4005      	ands	r5, r0
   80d1e:	d017      	beq.n	80d50 <pio_handler_process+0x48>
   80d20:	4f0e      	ldr	r7, [pc, #56]	; (80d5c <pio_handler_process+0x54>)
   80d22:	f107 040c 	add.w	r4, r7, #12
   80d26:	376c      	adds	r7, #108	; 0x6c
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   80d28:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   80d2c:	42b3      	cmp	r3, r6
   80d2e:	d10a      	bne.n	80d46 <pio_handler_process+0x3e>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   80d30:	f854 1c08 	ldr.w	r1, [r4, #-8]
   80d34:	4229      	tst	r1, r5
   80d36:	d006      	beq.n	80d46 <pio_handler_process+0x3e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   80d38:	6823      	ldr	r3, [r4, #0]
   80d3a:	4630      	mov	r0, r6
   80d3c:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   80d3e:	f854 3c08 	ldr.w	r3, [r4, #-8]
   80d42:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   80d46:	42bc      	cmp	r4, r7
   80d48:	d002      	beq.n	80d50 <pio_handler_process+0x48>
   80d4a:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   80d4c:	2d00      	cmp	r5, #0
   80d4e:	d1eb      	bne.n	80d28 <pio_handler_process+0x20>
   80d50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80d54:	00080b8d 	.word	0x00080b8d
   80d58:	00080b91 	.word	0x00080b91
   80d5c:	20070af0 	.word	0x20070af0

00080d60 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   80d60:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   80d62:	4802      	ldr	r0, [pc, #8]	; (80d6c <PIOA_Handler+0xc>)
   80d64:	210b      	movs	r1, #11
   80d66:	4b02      	ldr	r3, [pc, #8]	; (80d70 <PIOA_Handler+0x10>)
   80d68:	4798      	blx	r3
   80d6a:	bd08      	pop	{r3, pc}
   80d6c:	400e0e00 	.word	0x400e0e00
   80d70:	00080d09 	.word	0x00080d09

00080d74 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   80d74:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   80d76:	4802      	ldr	r0, [pc, #8]	; (80d80 <PIOB_Handler+0xc>)
   80d78:	210c      	movs	r1, #12
   80d7a:	4b02      	ldr	r3, [pc, #8]	; (80d84 <PIOB_Handler+0x10>)
   80d7c:	4798      	blx	r3
   80d7e:	bd08      	pop	{r3, pc}
   80d80:	400e1000 	.word	0x400e1000
   80d84:	00080d09 	.word	0x00080d09

00080d88 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   80d88:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   80d8a:	4802      	ldr	r0, [pc, #8]	; (80d94 <PIOC_Handler+0xc>)
   80d8c:	210d      	movs	r1, #13
   80d8e:	4b02      	ldr	r3, [pc, #8]	; (80d98 <PIOC_Handler+0x10>)
   80d90:	4798      	blx	r3
   80d92:	bd08      	pop	{r3, pc}
   80d94:	400e1200 	.word	0x400e1200
   80d98:	00080d09 	.word	0x00080d09

00080d9c <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   80d9c:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   80d9e:	4802      	ldr	r0, [pc, #8]	; (80da8 <PIOD_Handler+0xc>)
   80da0:	210e      	movs	r1, #14
   80da2:	4b02      	ldr	r3, [pc, #8]	; (80dac <PIOD_Handler+0x10>)
   80da4:	4798      	blx	r3
   80da6:	bd08      	pop	{r3, pc}
   80da8:	400e1400 	.word	0x400e1400
   80dac:	00080d09 	.word	0x00080d09

00080db0 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   80db0:	4b17      	ldr	r3, [pc, #92]	; (80e10 <pmc_switch_mck_to_pllack+0x60>)
   80db2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80db4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   80db8:	4310      	orrs	r0, r2
   80dba:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80dbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80dbe:	f013 0f08 	tst.w	r3, #8
   80dc2:	d109      	bne.n	80dd8 <pmc_switch_mck_to_pllack+0x28>
   80dc4:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80dc8:	4911      	ldr	r1, [pc, #68]	; (80e10 <pmc_switch_mck_to_pllack+0x60>)
   80dca:	e001      	b.n	80dd0 <pmc_switch_mck_to_pllack+0x20>
			--ul_timeout) {
		if (ul_timeout == 0) {
   80dcc:	3b01      	subs	r3, #1
   80dce:	d019      	beq.n	80e04 <pmc_switch_mck_to_pllack+0x54>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80dd0:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80dd2:	f012 0f08 	tst.w	r2, #8
   80dd6:	d0f9      	beq.n	80dcc <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   80dd8:	4b0d      	ldr	r3, [pc, #52]	; (80e10 <pmc_switch_mck_to_pllack+0x60>)
   80dda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80ddc:	f022 0203 	bic.w	r2, r2, #3
   80de0:	f042 0202 	orr.w	r2, r2, #2
   80de4:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80de6:	6e98      	ldr	r0, [r3, #104]	; 0x68
   80de8:	f010 0008 	ands.w	r0, r0, #8
   80dec:	d10c      	bne.n	80e08 <pmc_switch_mck_to_pllack+0x58>
   80dee:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80df2:	4907      	ldr	r1, [pc, #28]	; (80e10 <pmc_switch_mck_to_pllack+0x60>)
   80df4:	e001      	b.n	80dfa <pmc_switch_mck_to_pllack+0x4a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   80df6:	3b01      	subs	r3, #1
   80df8:	d008      	beq.n	80e0c <pmc_switch_mck_to_pllack+0x5c>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80dfa:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80dfc:	f012 0f08 	tst.w	r2, #8
   80e00:	d0f9      	beq.n	80df6 <pmc_switch_mck_to_pllack+0x46>
   80e02:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   80e04:	2001      	movs	r0, #1
   80e06:	4770      	bx	lr
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   80e08:	2000      	movs	r0, #0
   80e0a:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   80e0c:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   80e0e:	4770      	bx	lr
   80e10:	400e0600 	.word	0x400e0600

00080e14 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   80e14:	b138      	cbz	r0, 80e26 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80e16:	4911      	ldr	r1, [pc, #68]	; (80e5c <pmc_switch_mainck_to_xtal+0x48>)
   80e18:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   80e1a:	4a11      	ldr	r2, [pc, #68]	; (80e60 <pmc_switch_mainck_to_xtal+0x4c>)
   80e1c:	401a      	ands	r2, r3
   80e1e:	4b11      	ldr	r3, [pc, #68]	; (80e64 <pmc_switch_mainck_to_xtal+0x50>)
   80e20:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80e22:	620b      	str	r3, [r1, #32]
   80e24:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80e26:	4a0d      	ldr	r2, [pc, #52]	; (80e5c <pmc_switch_mainck_to_xtal+0x48>)
   80e28:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   80e2a:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   80e2e:	f023 0303 	bic.w	r3, r3, #3
   80e32:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   80e36:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   80e3a:	0209      	lsls	r1, r1, #8
   80e3c:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   80e3e:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80e40:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   80e42:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80e44:	f013 0f01 	tst.w	r3, #1
   80e48:	d0fb      	beq.n	80e42 <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   80e4a:	4a04      	ldr	r2, [pc, #16]	; (80e5c <pmc_switch_mainck_to_xtal+0x48>)
   80e4c:	6a13      	ldr	r3, [r2, #32]
   80e4e:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   80e52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   80e56:	6213      	str	r3, [r2, #32]
   80e58:	4770      	bx	lr
   80e5a:	bf00      	nop
   80e5c:	400e0600 	.word	0x400e0600
   80e60:	fec8fffc 	.word	0xfec8fffc
   80e64:	01370002 	.word	0x01370002

00080e68 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   80e68:	4b02      	ldr	r3, [pc, #8]	; (80e74 <pmc_osc_is_ready_mainck+0xc>)
   80e6a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80e6c:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   80e70:	4770      	bx	lr
   80e72:	bf00      	nop
   80e74:	400e0600 	.word	0x400e0600

00080e78 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   80e78:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   80e7c:	4b01      	ldr	r3, [pc, #4]	; (80e84 <pmc_disable_pllack+0xc>)
   80e7e:	629a      	str	r2, [r3, #40]	; 0x28
   80e80:	4770      	bx	lr
   80e82:	bf00      	nop
   80e84:	400e0600 	.word	0x400e0600

00080e88 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   80e88:	4b02      	ldr	r3, [pc, #8]	; (80e94 <pmc_is_locked_pllack+0xc>)
   80e8a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80e8c:	f000 0002 	and.w	r0, r0, #2
   80e90:	4770      	bx	lr
   80e92:	bf00      	nop
   80e94:	400e0600 	.word	0x400e0600

00080e98 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   80e98:	282c      	cmp	r0, #44	; 0x2c
   80e9a:	d820      	bhi.n	80ede <pmc_enable_periph_clk+0x46>
		return 1;
	}

	if (ul_id < 32) {
   80e9c:	281f      	cmp	r0, #31
   80e9e:	d80d      	bhi.n	80ebc <pmc_enable_periph_clk+0x24>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   80ea0:	4b12      	ldr	r3, [pc, #72]	; (80eec <pmc_enable_periph_clk+0x54>)
   80ea2:	699a      	ldr	r2, [r3, #24]
   80ea4:	2301      	movs	r3, #1
   80ea6:	4083      	lsls	r3, r0
   80ea8:	401a      	ands	r2, r3
   80eaa:	4293      	cmp	r3, r2
   80eac:	d019      	beq.n	80ee2 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER0 = 1 << ul_id;
   80eae:	2301      	movs	r3, #1
   80eb0:	fa03 f000 	lsl.w	r0, r3, r0
   80eb4:	4b0d      	ldr	r3, [pc, #52]	; (80eec <pmc_enable_periph_clk+0x54>)
   80eb6:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80eb8:	2000      	movs	r0, #0
   80eba:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80ebc:	4b0b      	ldr	r3, [pc, #44]	; (80eec <pmc_enable_periph_clk+0x54>)
   80ebe:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
   80ec2:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80ec4:	2301      	movs	r3, #1
   80ec6:	4083      	lsls	r3, r0
   80ec8:	401a      	ands	r2, r3
   80eca:	4293      	cmp	r3, r2
   80ecc:	d00b      	beq.n	80ee6 <pmc_enable_periph_clk+0x4e>
			PMC->PMC_PCER1 = 1 << ul_id;
   80ece:	2301      	movs	r3, #1
   80ed0:	fa03 f000 	lsl.w	r0, r3, r0
   80ed4:	4b05      	ldr	r3, [pc, #20]	; (80eec <pmc_enable_periph_clk+0x54>)
   80ed6:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   80eda:	2000      	movs	r0, #0
   80edc:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   80ede:	2001      	movs	r0, #1
   80ee0:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80ee2:	2000      	movs	r0, #0
   80ee4:	4770      	bx	lr
   80ee6:	2000      	movs	r0, #0
}
   80ee8:	4770      	bx	lr
   80eea:	bf00      	nop
   80eec:	400e0600 	.word	0x400e0600

00080ef0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80ef0:	e7fe      	b.n	80ef0 <Dummy_Handler>
   80ef2:	bf00      	nop

00080ef4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   80ef4:	b510      	push	{r4, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   80ef6:	4b1e      	ldr	r3, [pc, #120]	; (80f70 <Reset_Handler+0x7c>)
   80ef8:	4a1e      	ldr	r2, [pc, #120]	; (80f74 <Reset_Handler+0x80>)
   80efa:	429a      	cmp	r2, r3
   80efc:	d003      	beq.n	80f06 <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   80efe:	4b1e      	ldr	r3, [pc, #120]	; (80f78 <Reset_Handler+0x84>)
   80f00:	4a1b      	ldr	r2, [pc, #108]	; (80f70 <Reset_Handler+0x7c>)
   80f02:	429a      	cmp	r2, r3
   80f04:	d304      	bcc.n	80f10 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80f06:	4b1d      	ldr	r3, [pc, #116]	; (80f7c <Reset_Handler+0x88>)
   80f08:	4a1d      	ldr	r2, [pc, #116]	; (80f80 <Reset_Handler+0x8c>)
   80f0a:	429a      	cmp	r2, r3
   80f0c:	d30f      	bcc.n	80f2e <Reset_Handler+0x3a>
   80f0e:	e01a      	b.n	80f46 <Reset_Handler+0x52>
   80f10:	4b1c      	ldr	r3, [pc, #112]	; (80f84 <Reset_Handler+0x90>)
   80f12:	4c1d      	ldr	r4, [pc, #116]	; (80f88 <Reset_Handler+0x94>)
   80f14:	1ae4      	subs	r4, r4, r3
   80f16:	f024 0403 	bic.w	r4, r4, #3
   80f1a:	3404      	adds	r4, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   80f1c:	2300      	movs	r3, #0
			*pDest++ = *pSrc++;
   80f1e:	4814      	ldr	r0, [pc, #80]	; (80f70 <Reset_Handler+0x7c>)
   80f20:	4914      	ldr	r1, [pc, #80]	; (80f74 <Reset_Handler+0x80>)
   80f22:	585a      	ldr	r2, [r3, r1]
   80f24:	501a      	str	r2, [r3, r0]
   80f26:	3304      	adds	r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   80f28:	42a3      	cmp	r3, r4
   80f2a:	d1fa      	bne.n	80f22 <Reset_Handler+0x2e>
   80f2c:	e7eb      	b.n	80f06 <Reset_Handler+0x12>
   80f2e:	4b17      	ldr	r3, [pc, #92]	; (80f8c <Reset_Handler+0x98>)
   80f30:	4917      	ldr	r1, [pc, #92]	; (80f90 <Reset_Handler+0x9c>)
   80f32:	1ac9      	subs	r1, r1, r3
   80f34:	f021 0103 	bic.w	r1, r1, #3
   80f38:	1d1a      	adds	r2, r3, #4
   80f3a:	4411      	add	r1, r2
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   80f3c:	2200      	movs	r2, #0
   80f3e:	f843 2f04 	str.w	r2, [r3, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80f42:	428b      	cmp	r3, r1
   80f44:	d1fb      	bne.n	80f3e <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   80f46:	4a13      	ldr	r2, [pc, #76]	; (80f94 <Reset_Handler+0xa0>)
   80f48:	f022 4360 	bic.w	r3, r2, #3758096384	; 0xe0000000
   80f4c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   80f50:	4911      	ldr	r1, [pc, #68]	; (80f98 <Reset_Handler+0xa4>)
   80f52:	608b      	str	r3, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   80f54:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
   80f58:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
   80f5c:	d203      	bcs.n	80f66 <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   80f5e:	688a      	ldr	r2, [r1, #8]
   80f60:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   80f64:	608a      	str	r2, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   80f66:	4b0d      	ldr	r3, [pc, #52]	; (80f9c <Reset_Handler+0xa8>)
   80f68:	4798      	blx	r3

	/* Branch to main function */
	main();
   80f6a:	4b0d      	ldr	r3, [pc, #52]	; (80fa0 <Reset_Handler+0xac>)
   80f6c:	4798      	blx	r3
   80f6e:	e7fe      	b.n	80f6e <Reset_Handler+0x7a>
   80f70:	20070000 	.word	0x20070000
   80f74:	000848ac 	.word	0x000848ac
   80f78:	200709ac 	.word	0x200709ac
   80f7c:	20070ba8 	.word	0x20070ba8
   80f80:	200709ac 	.word	0x200709ac
   80f84:	20070004 	.word	0x20070004
   80f88:	200709af 	.word	0x200709af
   80f8c:	200709a8 	.word	0x200709a8
   80f90:	20070ba3 	.word	0x20070ba3
   80f94:	00080000 	.word	0x00080000
   80f98:	e000ed00 	.word	0xe000ed00
   80f9c:	00081339 	.word	0x00081339
   80fa0:	000812dd 	.word	0x000812dd

00080fa4 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   80fa4:	4b3e      	ldr	r3, [pc, #248]	; (810a0 <SystemCoreClockUpdate+0xfc>)
   80fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80fa8:	f003 0303 	and.w	r3, r3, #3
   80fac:	2b03      	cmp	r3, #3
   80fae:	d85f      	bhi.n	81070 <SystemCoreClockUpdate+0xcc>
   80fb0:	e8df f003 	tbb	[pc, r3]
   80fb4:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   80fb8:	4b3a      	ldr	r3, [pc, #232]	; (810a4 <SystemCoreClockUpdate+0x100>)
   80fba:	695b      	ldr	r3, [r3, #20]
   80fbc:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   80fc0:	bf14      	ite	ne
   80fc2:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   80fc6:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   80fca:	4b37      	ldr	r3, [pc, #220]	; (810a8 <SystemCoreClockUpdate+0x104>)
   80fcc:	601a      	str	r2, [r3, #0]
   80fce:	e04f      	b.n	81070 <SystemCoreClockUpdate+0xcc>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80fd0:	4b33      	ldr	r3, [pc, #204]	; (810a0 <SystemCoreClockUpdate+0xfc>)
   80fd2:	6a1b      	ldr	r3, [r3, #32]
   80fd4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80fd8:	d003      	beq.n	80fe2 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80fda:	4a34      	ldr	r2, [pc, #208]	; (810ac <SystemCoreClockUpdate+0x108>)
   80fdc:	4b32      	ldr	r3, [pc, #200]	; (810a8 <SystemCoreClockUpdate+0x104>)
   80fde:	601a      	str	r2, [r3, #0]
   80fe0:	e046      	b.n	81070 <SystemCoreClockUpdate+0xcc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80fe2:	4a33      	ldr	r2, [pc, #204]	; (810b0 <SystemCoreClockUpdate+0x10c>)
   80fe4:	4b30      	ldr	r3, [pc, #192]	; (810a8 <SystemCoreClockUpdate+0x104>)
   80fe6:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80fe8:	4b2d      	ldr	r3, [pc, #180]	; (810a0 <SystemCoreClockUpdate+0xfc>)
   80fea:	6a1b      	ldr	r3, [r3, #32]
   80fec:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80ff0:	2b10      	cmp	r3, #16
   80ff2:	d002      	beq.n	80ffa <SystemCoreClockUpdate+0x56>
   80ff4:	2b20      	cmp	r3, #32
   80ff6:	d004      	beq.n	81002 <SystemCoreClockUpdate+0x5e>
   80ff8:	e03a      	b.n	81070 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   80ffa:	4a2e      	ldr	r2, [pc, #184]	; (810b4 <SystemCoreClockUpdate+0x110>)
   80ffc:	4b2a      	ldr	r3, [pc, #168]	; (810a8 <SystemCoreClockUpdate+0x104>)
   80ffe:	601a      	str	r2, [r3, #0]
				break;
   81000:	e036      	b.n	81070 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   81002:	4a2a      	ldr	r2, [pc, #168]	; (810ac <SystemCoreClockUpdate+0x108>)
   81004:	4b28      	ldr	r3, [pc, #160]	; (810a8 <SystemCoreClockUpdate+0x104>)
   81006:	601a      	str	r2, [r3, #0]
				break;
   81008:	e032      	b.n	81070 <SystemCoreClockUpdate+0xcc>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   8100a:	4b25      	ldr	r3, [pc, #148]	; (810a0 <SystemCoreClockUpdate+0xfc>)
   8100c:	6a1b      	ldr	r3, [r3, #32]
   8100e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   81012:	d003      	beq.n	8101c <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   81014:	4a25      	ldr	r2, [pc, #148]	; (810ac <SystemCoreClockUpdate+0x108>)
   81016:	4b24      	ldr	r3, [pc, #144]	; (810a8 <SystemCoreClockUpdate+0x104>)
   81018:	601a      	str	r2, [r3, #0]
   8101a:	e012      	b.n	81042 <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   8101c:	4a24      	ldr	r2, [pc, #144]	; (810b0 <SystemCoreClockUpdate+0x10c>)
   8101e:	4b22      	ldr	r3, [pc, #136]	; (810a8 <SystemCoreClockUpdate+0x104>)
   81020:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   81022:	4b1f      	ldr	r3, [pc, #124]	; (810a0 <SystemCoreClockUpdate+0xfc>)
   81024:	6a1b      	ldr	r3, [r3, #32]
   81026:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8102a:	2b10      	cmp	r3, #16
   8102c:	d002      	beq.n	81034 <SystemCoreClockUpdate+0x90>
   8102e:	2b20      	cmp	r3, #32
   81030:	d004      	beq.n	8103c <SystemCoreClockUpdate+0x98>
   81032:	e006      	b.n	81042 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   81034:	4a1f      	ldr	r2, [pc, #124]	; (810b4 <SystemCoreClockUpdate+0x110>)
   81036:	4b1c      	ldr	r3, [pc, #112]	; (810a8 <SystemCoreClockUpdate+0x104>)
   81038:	601a      	str	r2, [r3, #0]
				break;
   8103a:	e002      	b.n	81042 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   8103c:	4a1b      	ldr	r2, [pc, #108]	; (810ac <SystemCoreClockUpdate+0x108>)
   8103e:	4b1a      	ldr	r3, [pc, #104]	; (810a8 <SystemCoreClockUpdate+0x104>)
   81040:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   81042:	4b17      	ldr	r3, [pc, #92]	; (810a0 <SystemCoreClockUpdate+0xfc>)
   81044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81046:	f003 0303 	and.w	r3, r3, #3
   8104a:	2b02      	cmp	r3, #2
   8104c:	d10d      	bne.n	8106a <SystemCoreClockUpdate+0xc6>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   8104e:	4b14      	ldr	r3, [pc, #80]	; (810a0 <SystemCoreClockUpdate+0xfc>)
   81050:	6a98      	ldr	r0, [r3, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   81052:	6a99      	ldr	r1, [r3, #40]	; 0x28
   81054:	4b14      	ldr	r3, [pc, #80]	; (810a8 <SystemCoreClockUpdate+0x104>)
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   81056:	f3c0 400a 	ubfx	r0, r0, #16, #11
   8105a:	681a      	ldr	r2, [r3, #0]
   8105c:	fb00 2202 	mla	r2, r0, r2, r2
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   81060:	b2c9      	uxtb	r1, r1
   81062:	fbb2 f2f1 	udiv	r2, r2, r1
   81066:	601a      	str	r2, [r3, #0]
   81068:	e002      	b.n	81070 <SystemCoreClockUpdate+0xcc>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   8106a:	4a13      	ldr	r2, [pc, #76]	; (810b8 <SystemCoreClockUpdate+0x114>)
   8106c:	4b0e      	ldr	r3, [pc, #56]	; (810a8 <SystemCoreClockUpdate+0x104>)
   8106e:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   81070:	4b0b      	ldr	r3, [pc, #44]	; (810a0 <SystemCoreClockUpdate+0xfc>)
   81072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81074:	f003 0370 	and.w	r3, r3, #112	; 0x70
   81078:	2b70      	cmp	r3, #112	; 0x70
   8107a:	d107      	bne.n	8108c <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
   8107c:	4b0a      	ldr	r3, [pc, #40]	; (810a8 <SystemCoreClockUpdate+0x104>)
   8107e:	681a      	ldr	r2, [r3, #0]
   81080:	490e      	ldr	r1, [pc, #56]	; (810bc <SystemCoreClockUpdate+0x118>)
   81082:	fba1 0202 	umull	r0, r2, r1, r2
   81086:	0852      	lsrs	r2, r2, #1
   81088:	601a      	str	r2, [r3, #0]
   8108a:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   8108c:	4b04      	ldr	r3, [pc, #16]	; (810a0 <SystemCoreClockUpdate+0xfc>)
   8108e:	6b19      	ldr	r1, [r3, #48]	; 0x30
   81090:	4b05      	ldr	r3, [pc, #20]	; (810a8 <SystemCoreClockUpdate+0x104>)
   81092:	f3c1 1102 	ubfx	r1, r1, #4, #3
   81096:	681a      	ldr	r2, [r3, #0]
   81098:	40ca      	lsrs	r2, r1
   8109a:	601a      	str	r2, [r3, #0]
   8109c:	4770      	bx	lr
   8109e:	bf00      	nop
   810a0:	400e0600 	.word	0x400e0600
   810a4:	400e1a10 	.word	0x400e1a10
   810a8:	20070140 	.word	0x20070140
   810ac:	00b71b00 	.word	0x00b71b00
   810b0:	003d0900 	.word	0x003d0900
   810b4:	007a1200 	.word	0x007a1200
   810b8:	0e4e1c00 	.word	0x0e4e1c00
   810bc:	aaaaaaab 	.word	0xaaaaaaab

000810c0 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   810c0:	4b09      	ldr	r3, [pc, #36]	; (810e8 <_sbrk+0x28>)
   810c2:	681b      	ldr	r3, [r3, #0]
   810c4:	b913      	cbnz	r3, 810cc <_sbrk+0xc>
		heap = (unsigned char *)&_end;
   810c6:	4a09      	ldr	r2, [pc, #36]	; (810ec <_sbrk+0x2c>)
   810c8:	4b07      	ldr	r3, [pc, #28]	; (810e8 <_sbrk+0x28>)
   810ca:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   810cc:	4b06      	ldr	r3, [pc, #24]	; (810e8 <_sbrk+0x28>)
   810ce:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   810d0:	181a      	adds	r2, r3, r0
   810d2:	4907      	ldr	r1, [pc, #28]	; (810f0 <_sbrk+0x30>)
   810d4:	4291      	cmp	r1, r2
   810d6:	db04      	blt.n	810e2 <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
   810d8:	4610      	mov	r0, r2
   810da:	4a03      	ldr	r2, [pc, #12]	; (810e8 <_sbrk+0x28>)
   810dc:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   810de:	4618      	mov	r0, r3
   810e0:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
   810e2:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
   810e6:	4770      	bx	lr
   810e8:	20070b60 	.word	0x20070b60
   810ec:	20072ba8 	.word	0x20072ba8
   810f0:	20087ffc 	.word	0x20087ffc

000810f4 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   810f4:	f04f 30ff 	mov.w	r0, #4294967295
   810f8:	4770      	bx	lr
   810fa:	bf00      	nop

000810fc <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   810fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   81100:	604b      	str	r3, [r1, #4]

	return 0;
}
   81102:	2000      	movs	r0, #0
   81104:	4770      	bx	lr
   81106:	bf00      	nop

00081108 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   81108:	2001      	movs	r0, #1
   8110a:	4770      	bx	lr

0008110c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   8110c:	2000      	movs	r0, #0
   8110e:	4770      	bx	lr

00081110 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   81110:	b5f0      	push	{r4, r5, r6, r7, lr}
   81112:	b083      	sub	sp, #12
   81114:	4604      	mov	r4, r0
   81116:	460d      	mov	r5, r1
	uint32_t val = 0;
   81118:	2300      	movs	r3, #0
   8111a:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   8111c:	4b1f      	ldr	r3, [pc, #124]	; (8119c <usart_serial_getchar+0x8c>)
   8111e:	4298      	cmp	r0, r3
   81120:	d107      	bne.n	81132 <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
   81122:	461f      	mov	r7, r3
   81124:	4e1e      	ldr	r6, [pc, #120]	; (811a0 <usart_serial_getchar+0x90>)
   81126:	4638      	mov	r0, r7
   81128:	4629      	mov	r1, r5
   8112a:	47b0      	blx	r6
   8112c:	2800      	cmp	r0, #0
   8112e:	d1fa      	bne.n	81126 <usart_serial_getchar+0x16>
   81130:	e019      	b.n	81166 <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   81132:	4b1c      	ldr	r3, [pc, #112]	; (811a4 <usart_serial_getchar+0x94>)
   81134:	4298      	cmp	r0, r3
   81136:	d109      	bne.n	8114c <usart_serial_getchar+0x3c>
		while (usart_read(p_usart, &val));
   81138:	461f      	mov	r7, r3
   8113a:	4e1b      	ldr	r6, [pc, #108]	; (811a8 <usart_serial_getchar+0x98>)
   8113c:	4638      	mov	r0, r7
   8113e:	a901      	add	r1, sp, #4
   81140:	47b0      	blx	r6
   81142:	2800      	cmp	r0, #0
   81144:	d1fa      	bne.n	8113c <usart_serial_getchar+0x2c>
		*data = (uint8_t)(val & 0xFF);
   81146:	9b01      	ldr	r3, [sp, #4]
   81148:	702b      	strb	r3, [r5, #0]
   8114a:	e019      	b.n	81180 <usart_serial_getchar+0x70>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   8114c:	4b17      	ldr	r3, [pc, #92]	; (811ac <usart_serial_getchar+0x9c>)
   8114e:	4298      	cmp	r0, r3
   81150:	d109      	bne.n	81166 <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
   81152:	461e      	mov	r6, r3
   81154:	4c14      	ldr	r4, [pc, #80]	; (811a8 <usart_serial_getchar+0x98>)
   81156:	4630      	mov	r0, r6
   81158:	a901      	add	r1, sp, #4
   8115a:	47a0      	blx	r4
   8115c:	2800      	cmp	r0, #0
   8115e:	d1fa      	bne.n	81156 <usart_serial_getchar+0x46>
		*data = (uint8_t)(val & 0xFF);
   81160:	9b01      	ldr	r3, [sp, #4]
   81162:	702b      	strb	r3, [r5, #0]
   81164:	e018      	b.n	81198 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   81166:	4b12      	ldr	r3, [pc, #72]	; (811b0 <usart_serial_getchar+0xa0>)
   81168:	429c      	cmp	r4, r3
   8116a:	d109      	bne.n	81180 <usart_serial_getchar+0x70>
		while (usart_read(p_usart, &val));
   8116c:	461e      	mov	r6, r3
   8116e:	4c0e      	ldr	r4, [pc, #56]	; (811a8 <usart_serial_getchar+0x98>)
   81170:	4630      	mov	r0, r6
   81172:	a901      	add	r1, sp, #4
   81174:	47a0      	blx	r4
   81176:	2800      	cmp	r0, #0
   81178:	d1fa      	bne.n	81170 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
   8117a:	9b01      	ldr	r3, [sp, #4]
   8117c:	702b      	strb	r3, [r5, #0]
   8117e:	e00b      	b.n	81198 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   81180:	4b0c      	ldr	r3, [pc, #48]	; (811b4 <usart_serial_getchar+0xa4>)
   81182:	429c      	cmp	r4, r3
   81184:	d108      	bne.n	81198 <usart_serial_getchar+0x88>
		while (usart_read(p_usart, &val));
   81186:	461e      	mov	r6, r3
   81188:	4c07      	ldr	r4, [pc, #28]	; (811a8 <usart_serial_getchar+0x98>)
   8118a:	4630      	mov	r0, r6
   8118c:	a901      	add	r1, sp, #4
   8118e:	47a0      	blx	r4
   81190:	2800      	cmp	r0, #0
   81192:	d1fa      	bne.n	8118a <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
   81194:	9b01      	ldr	r3, [sp, #4]
   81196:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   81198:	b003      	add	sp, #12
   8119a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8119c:	400e0800 	.word	0x400e0800
   811a0:	000809c9 	.word	0x000809c9
   811a4:	40098000 	.word	0x40098000
   811a8:	000803c1 	.word	0x000803c1
   811ac:	4009c000 	.word	0x4009c000
   811b0:	400a0000 	.word	0x400a0000
   811b4:	400a4000 	.word	0x400a4000

000811b8 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   811b8:	b570      	push	{r4, r5, r6, lr}
   811ba:	460c      	mov	r4, r1
#ifdef UART
	if (UART == (Uart*)p_usart) {
   811bc:	4b21      	ldr	r3, [pc, #132]	; (81244 <usart_serial_putchar+0x8c>)
   811be:	4298      	cmp	r0, r3
   811c0:	d107      	bne.n	811d2 <usart_serial_putchar+0x1a>
		while (uart_write((Uart*)p_usart, c)!=0);
   811c2:	461e      	mov	r6, r3
   811c4:	4d20      	ldr	r5, [pc, #128]	; (81248 <usart_serial_putchar+0x90>)
   811c6:	4630      	mov	r0, r6
   811c8:	4621      	mov	r1, r4
   811ca:	47a8      	blx	r5
   811cc:	2800      	cmp	r0, #0
   811ce:	d1fa      	bne.n	811c6 <usart_serial_putchar+0xe>
   811d0:	e02b      	b.n	8122a <usart_serial_putchar+0x72>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   811d2:	4b1e      	ldr	r3, [pc, #120]	; (8124c <usart_serial_putchar+0x94>)
   811d4:	4298      	cmp	r0, r3
   811d6:	d107      	bne.n	811e8 <usart_serial_putchar+0x30>
		while (usart_write(p_usart, c)!=0);
   811d8:	461e      	mov	r6, r3
   811da:	4d1d      	ldr	r5, [pc, #116]	; (81250 <usart_serial_putchar+0x98>)
   811dc:	4630      	mov	r0, r6
   811de:	4621      	mov	r1, r4
   811e0:	47a8      	blx	r5
   811e2:	2800      	cmp	r0, #0
   811e4:	d1fa      	bne.n	811dc <usart_serial_putchar+0x24>
   811e6:	e022      	b.n	8122e <usart_serial_putchar+0x76>
		return 1;
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   811e8:	4b1a      	ldr	r3, [pc, #104]	; (81254 <usart_serial_putchar+0x9c>)
   811ea:	4298      	cmp	r0, r3
   811ec:	d107      	bne.n	811fe <usart_serial_putchar+0x46>
		while (usart_write(p_usart, c)!=0);
   811ee:	461e      	mov	r6, r3
   811f0:	4d17      	ldr	r5, [pc, #92]	; (81250 <usart_serial_putchar+0x98>)
   811f2:	4630      	mov	r0, r6
   811f4:	4621      	mov	r1, r4
   811f6:	47a8      	blx	r5
   811f8:	2800      	cmp	r0, #0
   811fa:	d1fa      	bne.n	811f2 <usart_serial_putchar+0x3a>
   811fc:	e019      	b.n	81232 <usart_serial_putchar+0x7a>
		return 1;
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   811fe:	4b16      	ldr	r3, [pc, #88]	; (81258 <usart_serial_putchar+0xa0>)
   81200:	4298      	cmp	r0, r3
   81202:	d107      	bne.n	81214 <usart_serial_putchar+0x5c>
		while (usart_write(p_usart, c)!=0);
   81204:	461e      	mov	r6, r3
   81206:	4d12      	ldr	r5, [pc, #72]	; (81250 <usart_serial_putchar+0x98>)
   81208:	4630      	mov	r0, r6
   8120a:	4621      	mov	r1, r4
   8120c:	47a8      	blx	r5
   8120e:	2800      	cmp	r0, #0
   81210:	d1fa      	bne.n	81208 <usart_serial_putchar+0x50>
   81212:	e010      	b.n	81236 <usart_serial_putchar+0x7e>
		return 1;
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   81214:	4b11      	ldr	r3, [pc, #68]	; (8125c <usart_serial_putchar+0xa4>)
   81216:	4298      	cmp	r0, r3
   81218:	d10f      	bne.n	8123a <usart_serial_putchar+0x82>
		while (usart_write(p_usart, c)!=0);
   8121a:	461e      	mov	r6, r3
   8121c:	4d0c      	ldr	r5, [pc, #48]	; (81250 <usart_serial_putchar+0x98>)
   8121e:	4630      	mov	r0, r6
   81220:	4621      	mov	r1, r4
   81222:	47a8      	blx	r5
   81224:	2800      	cmp	r0, #0
   81226:	d1fa      	bne.n	8121e <usart_serial_putchar+0x66>
   81228:	e009      	b.n	8123e <usart_serial_putchar+0x86>
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
   8122a:	2001      	movs	r0, #1
   8122c:	bd70      	pop	{r4, r5, r6, pc}
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   8122e:	2001      	movs	r0, #1
   81230:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   81232:	2001      	movs	r0, #1
   81234:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   81236:	2001      	movs	r0, #1
   81238:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   8123a:	2000      	movs	r0, #0
   8123c:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   8123e:	2001      	movs	r0, #1
	}
# endif
#endif /* ifdef USART */

	return 0;
}
   81240:	bd70      	pop	{r4, r5, r6, pc}
   81242:	bf00      	nop
   81244:	400e0800 	.word	0x400e0800
   81248:	000809b9 	.word	0x000809b9
   8124c:	40098000 	.word	0x40098000
   81250:	000803ad 	.word	0x000803ad
   81254:	4009c000 	.word	0x4009c000
   81258:	400a0000 	.word	0x400a0000
   8125c:	400a4000 	.word	0x400a4000

00081260 <configureConsole>:
 */
#include <asf.h>
#include "../com/Com.h"

void configureConsole()
{
   81260:	b530      	push	{r4, r5, lr}
   81262:	b085      	sub	sp, #20
   81264:	2008      	movs	r0, #8
   81266:	4d12      	ldr	r5, [pc, #72]	; (812b0 <configureConsole+0x50>)
   81268:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   8126a:	4c12      	ldr	r4, [pc, #72]	; (812b4 <configureConsole+0x54>)
   8126c:	4b12      	ldr	r3, [pc, #72]	; (812b8 <configureConsole+0x58>)
   8126e:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   81270:	4a12      	ldr	r2, [pc, #72]	; (812bc <configureConsole+0x5c>)
   81272:	4b13      	ldr	r3, [pc, #76]	; (812c0 <configureConsole+0x60>)
   81274:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   81276:	4a13      	ldr	r2, [pc, #76]	; (812c4 <configureConsole+0x64>)
   81278:	4b13      	ldr	r3, [pc, #76]	; (812c8 <configureConsole+0x68>)
   8127a:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   8127c:	4b13      	ldr	r3, [pc, #76]	; (812cc <configureConsole+0x6c>)
   8127e:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   81280:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   81284:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   81286:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8128a:	9303      	str	r3, [sp, #12]
   8128c:	2008      	movs	r0, #8
   8128e:	47a8      	blx	r5
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   81290:	4620      	mov	r0, r4
   81292:	a901      	add	r1, sp, #4
   81294:	4b0e      	ldr	r3, [pc, #56]	; (812d0 <configureConsole+0x70>)
   81296:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   81298:	4d0e      	ldr	r5, [pc, #56]	; (812d4 <configureConsole+0x74>)
   8129a:	682b      	ldr	r3, [r5, #0]
   8129c:	6898      	ldr	r0, [r3, #8]
   8129e:	2100      	movs	r1, #0
   812a0:	4c0d      	ldr	r4, [pc, #52]	; (812d8 <configureConsole+0x78>)
   812a2:	47a0      	blx	r4
	setbuf(stdin, NULL);
   812a4:	682b      	ldr	r3, [r5, #0]
   812a6:	6858      	ldr	r0, [r3, #4]
   812a8:	2100      	movs	r1, #0
   812aa:	47a0      	blx	r4
		.paritytype = CONF_UART_PARITY
	};
	
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONSOLE_UART, &uart_serial_options);
}
   812ac:	b005      	add	sp, #20
   812ae:	bd30      	pop	{r4, r5, pc}
   812b0:	00080e99 	.word	0x00080e99
   812b4:	400e0800 	.word	0x400e0800
   812b8:	20070ba0 	.word	0x20070ba0
   812bc:	000811b9 	.word	0x000811b9
   812c0:	20070b9c 	.word	0x20070b9c
   812c4:	00081111 	.word	0x00081111
   812c8:	20070b98 	.word	0x20070b98
   812cc:	0501bd00 	.word	0x0501bd00
   812d0:	00080981 	.word	0x00080981
   812d4:	20070570 	.word	0x20070570
   812d8:	000815a1 	.word	0x000815a1

000812dc <main>:

int main (void)
{
   812dc:	b570      	push	{r4, r5, r6, lr}
   812de:	b082      	sub	sp, #8

	/* Initialize the common clock service, board-specific initialization, and
	* interrupt vector support prior to using the TWI master interfaces.
	*/
	sysclk_init();
   812e0:	4b0d      	ldr	r3, [pc, #52]	; (81318 <main+0x3c>)
   812e2:	4798      	blx	r3

	board_init();
   812e4:	4b0d      	ldr	r3, [pc, #52]	; (8131c <main+0x40>)
   812e6:	4798      	blx	r3
	
	configureConsole();
   812e8:	4b0d      	ldr	r3, [pc, #52]	; (81320 <main+0x44>)
   812ea:	4798      	blx	r3

	 // TWI master initialization options.
	 //initTwiMaster();
	 initTwi();
   812ec:	4b0d      	ldr	r3, [pc, #52]	; (81324 <main+0x48>)
   812ee:	4798      	blx	r3
	 //readSlave();
	//readWrite();
	uint8_t data[1];
	uint8_t i;
	uint8_t dum[3];
	dum[0]=TWI_CMD_FROM_ARM_ID;
   812f0:	2310      	movs	r3, #16
   812f2:	f88d 3004 	strb.w	r3, [sp, #4]
	dum[1]=0;
   812f6:	2300      	movs	r3, #0
   812f8:	f88d 3005 	strb.w	r3, [sp, #5]
	dum[2]=0;
   812fc:	f88d 3006 	strb.w	r3, [sp, #6]
	while(1)
	{
		//delay_ms(1000);
		
		sendArm(dum,3);
   81300:	4e09      	ldr	r6, [pc, #36]	; (81328 <main+0x4c>)
		//sendArmCmd(TWI_CMD_FROM_ARM_ID);
		//delay_ms(1000);
		reciveFromArm(3);
   81302:	4d0a      	ldr	r5, [pc, #40]	; (8132c <main+0x50>)
		delay_ms(100);
   81304:	4c0a      	ldr	r4, [pc, #40]	; (81330 <main+0x54>)
	dum[2]=0;
	while(1)
	{
		//delay_ms(1000);
		
		sendArm(dum,3);
   81306:	a801      	add	r0, sp, #4
   81308:	2103      	movs	r1, #3
   8130a:	47b0      	blx	r6
		//sendArmCmd(TWI_CMD_FROM_ARM_ID);
		//delay_ms(1000);
		reciveFromArm(3);
   8130c:	2003      	movs	r0, #3
   8130e:	47a8      	blx	r5
		delay_ms(100);
   81310:	4620      	mov	r0, r4
   81312:	4b08      	ldr	r3, [pc, #32]	; (81334 <main+0x58>)
   81314:	4798      	blx	r3
   81316:	e7f6      	b.n	81306 <main+0x2a>
   81318:	000809dd 	.word	0x000809dd
   8131c:	00080a41 	.word	0x00080a41
   81320:	00081261 	.word	0x00081261
   81324:	00080439 	.word	0x00080439
   81328:	00080479 	.word	0x00080479
   8132c:	000804e9 	.word	0x000804e9
   81330:	000927c0 	.word	0x000927c0
   81334:	20070001 	.word	0x20070001

00081338 <__libc_init_array>:
   81338:	b570      	push	{r4, r5, r6, lr}
   8133a:	4e0f      	ldr	r6, [pc, #60]	; (81378 <__libc_init_array+0x40>)
   8133c:	4d0f      	ldr	r5, [pc, #60]	; (8137c <__libc_init_array+0x44>)
   8133e:	1b76      	subs	r6, r6, r5
   81340:	10b6      	asrs	r6, r6, #2
   81342:	d007      	beq.n	81354 <__libc_init_array+0x1c>
   81344:	3d04      	subs	r5, #4
   81346:	2400      	movs	r4, #0
   81348:	3401      	adds	r4, #1
   8134a:	f855 3f04 	ldr.w	r3, [r5, #4]!
   8134e:	4798      	blx	r3
   81350:	42a6      	cmp	r6, r4
   81352:	d1f9      	bne.n	81348 <__libc_init_array+0x10>
   81354:	4e0a      	ldr	r6, [pc, #40]	; (81380 <__libc_init_array+0x48>)
   81356:	4d0b      	ldr	r5, [pc, #44]	; (81384 <__libc_init_array+0x4c>)
   81358:	f003 fa92 	bl	84880 <_init>
   8135c:	1b76      	subs	r6, r6, r5
   8135e:	10b6      	asrs	r6, r6, #2
   81360:	d008      	beq.n	81374 <__libc_init_array+0x3c>
   81362:	3d04      	subs	r5, #4
   81364:	2400      	movs	r4, #0
   81366:	3401      	adds	r4, #1
   81368:	f855 3f04 	ldr.w	r3, [r5, #4]!
   8136c:	4798      	blx	r3
   8136e:	42a6      	cmp	r6, r4
   81370:	d1f9      	bne.n	81366 <__libc_init_array+0x2e>
   81372:	bd70      	pop	{r4, r5, r6, pc}
   81374:	bd70      	pop	{r4, r5, r6, pc}
   81376:	bf00      	nop
   81378:	0008488c 	.word	0x0008488c
   8137c:	0008488c 	.word	0x0008488c
   81380:	00084894 	.word	0x00084894
   81384:	0008488c 	.word	0x0008488c

00081388 <iprintf>:
   81388:	b40f      	push	{r0, r1, r2, r3}
   8138a:	b510      	push	{r4, lr}
   8138c:	4b07      	ldr	r3, [pc, #28]	; (813ac <iprintf+0x24>)
   8138e:	b082      	sub	sp, #8
   81390:	ac04      	add	r4, sp, #16
   81392:	f854 2b04 	ldr.w	r2, [r4], #4
   81396:	6818      	ldr	r0, [r3, #0]
   81398:	4623      	mov	r3, r4
   8139a:	6881      	ldr	r1, [r0, #8]
   8139c:	9401      	str	r4, [sp, #4]
   8139e:	f000 f9f3 	bl	81788 <_vfiprintf_r>
   813a2:	b002      	add	sp, #8
   813a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   813a8:	b004      	add	sp, #16
   813aa:	4770      	bx	lr
   813ac:	20070570 	.word	0x20070570

000813b0 <memcpy>:
   813b0:	4684      	mov	ip, r0
   813b2:	ea41 0300 	orr.w	r3, r1, r0
   813b6:	f013 0303 	ands.w	r3, r3, #3
   813ba:	d149      	bne.n	81450 <memcpy+0xa0>
   813bc:	3a40      	subs	r2, #64	; 0x40
   813be:	d323      	bcc.n	81408 <memcpy+0x58>
   813c0:	680b      	ldr	r3, [r1, #0]
   813c2:	6003      	str	r3, [r0, #0]
   813c4:	684b      	ldr	r3, [r1, #4]
   813c6:	6043      	str	r3, [r0, #4]
   813c8:	688b      	ldr	r3, [r1, #8]
   813ca:	6083      	str	r3, [r0, #8]
   813cc:	68cb      	ldr	r3, [r1, #12]
   813ce:	60c3      	str	r3, [r0, #12]
   813d0:	690b      	ldr	r3, [r1, #16]
   813d2:	6103      	str	r3, [r0, #16]
   813d4:	694b      	ldr	r3, [r1, #20]
   813d6:	6143      	str	r3, [r0, #20]
   813d8:	698b      	ldr	r3, [r1, #24]
   813da:	6183      	str	r3, [r0, #24]
   813dc:	69cb      	ldr	r3, [r1, #28]
   813de:	61c3      	str	r3, [r0, #28]
   813e0:	6a0b      	ldr	r3, [r1, #32]
   813e2:	6203      	str	r3, [r0, #32]
   813e4:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   813e6:	6243      	str	r3, [r0, #36]	; 0x24
   813e8:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   813ea:	6283      	str	r3, [r0, #40]	; 0x28
   813ec:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   813ee:	62c3      	str	r3, [r0, #44]	; 0x2c
   813f0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   813f2:	6303      	str	r3, [r0, #48]	; 0x30
   813f4:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   813f6:	6343      	str	r3, [r0, #52]	; 0x34
   813f8:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   813fa:	6383      	str	r3, [r0, #56]	; 0x38
   813fc:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   813fe:	63c3      	str	r3, [r0, #60]	; 0x3c
   81400:	3040      	adds	r0, #64	; 0x40
   81402:	3140      	adds	r1, #64	; 0x40
   81404:	3a40      	subs	r2, #64	; 0x40
   81406:	d2db      	bcs.n	813c0 <memcpy+0x10>
   81408:	3230      	adds	r2, #48	; 0x30
   8140a:	d30b      	bcc.n	81424 <memcpy+0x74>
   8140c:	680b      	ldr	r3, [r1, #0]
   8140e:	6003      	str	r3, [r0, #0]
   81410:	684b      	ldr	r3, [r1, #4]
   81412:	6043      	str	r3, [r0, #4]
   81414:	688b      	ldr	r3, [r1, #8]
   81416:	6083      	str	r3, [r0, #8]
   81418:	68cb      	ldr	r3, [r1, #12]
   8141a:	60c3      	str	r3, [r0, #12]
   8141c:	3010      	adds	r0, #16
   8141e:	3110      	adds	r1, #16
   81420:	3a10      	subs	r2, #16
   81422:	d2f3      	bcs.n	8140c <memcpy+0x5c>
   81424:	320c      	adds	r2, #12
   81426:	d305      	bcc.n	81434 <memcpy+0x84>
   81428:	f851 3b04 	ldr.w	r3, [r1], #4
   8142c:	f840 3b04 	str.w	r3, [r0], #4
   81430:	3a04      	subs	r2, #4
   81432:	d2f9      	bcs.n	81428 <memcpy+0x78>
   81434:	3204      	adds	r2, #4
   81436:	d008      	beq.n	8144a <memcpy+0x9a>
   81438:	07d2      	lsls	r2, r2, #31
   8143a:	bf1c      	itt	ne
   8143c:	f811 3b01 	ldrbne.w	r3, [r1], #1
   81440:	f800 3b01 	strbne.w	r3, [r0], #1
   81444:	d301      	bcc.n	8144a <memcpy+0x9a>
   81446:	880b      	ldrh	r3, [r1, #0]
   81448:	8003      	strh	r3, [r0, #0]
   8144a:	4660      	mov	r0, ip
   8144c:	4770      	bx	lr
   8144e:	bf00      	nop
   81450:	2a08      	cmp	r2, #8
   81452:	d313      	bcc.n	8147c <memcpy+0xcc>
   81454:	078b      	lsls	r3, r1, #30
   81456:	d0b1      	beq.n	813bc <memcpy+0xc>
   81458:	f010 0303 	ands.w	r3, r0, #3
   8145c:	d0ae      	beq.n	813bc <memcpy+0xc>
   8145e:	f1c3 0304 	rsb	r3, r3, #4
   81462:	1ad2      	subs	r2, r2, r3
   81464:	07db      	lsls	r3, r3, #31
   81466:	bf1c      	itt	ne
   81468:	f811 3b01 	ldrbne.w	r3, [r1], #1
   8146c:	f800 3b01 	strbne.w	r3, [r0], #1
   81470:	d3a4      	bcc.n	813bc <memcpy+0xc>
   81472:	f831 3b02 	ldrh.w	r3, [r1], #2
   81476:	f820 3b02 	strh.w	r3, [r0], #2
   8147a:	e79f      	b.n	813bc <memcpy+0xc>
   8147c:	3a04      	subs	r2, #4
   8147e:	d3d9      	bcc.n	81434 <memcpy+0x84>
   81480:	3a01      	subs	r2, #1
   81482:	f811 3b01 	ldrb.w	r3, [r1], #1
   81486:	f800 3b01 	strb.w	r3, [r0], #1
   8148a:	d2f9      	bcs.n	81480 <memcpy+0xd0>
   8148c:	780b      	ldrb	r3, [r1, #0]
   8148e:	7003      	strb	r3, [r0, #0]
   81490:	784b      	ldrb	r3, [r1, #1]
   81492:	7043      	strb	r3, [r0, #1]
   81494:	788b      	ldrb	r3, [r1, #2]
   81496:	7083      	strb	r3, [r0, #2]
   81498:	4660      	mov	r0, ip
   8149a:	4770      	bx	lr

0008149c <memset>:
   8149c:	b4f0      	push	{r4, r5, r6, r7}
   8149e:	0784      	lsls	r4, r0, #30
   814a0:	d043      	beq.n	8152a <memset+0x8e>
   814a2:	1e54      	subs	r4, r2, #1
   814a4:	2a00      	cmp	r2, #0
   814a6:	d03e      	beq.n	81526 <memset+0x8a>
   814a8:	b2cd      	uxtb	r5, r1
   814aa:	4603      	mov	r3, r0
   814ac:	e003      	b.n	814b6 <memset+0x1a>
   814ae:	1e62      	subs	r2, r4, #1
   814b0:	2c00      	cmp	r4, #0
   814b2:	d038      	beq.n	81526 <memset+0x8a>
   814b4:	4614      	mov	r4, r2
   814b6:	f803 5b01 	strb.w	r5, [r3], #1
   814ba:	079a      	lsls	r2, r3, #30
   814bc:	d1f7      	bne.n	814ae <memset+0x12>
   814be:	2c03      	cmp	r4, #3
   814c0:	d92a      	bls.n	81518 <memset+0x7c>
   814c2:	b2cd      	uxtb	r5, r1
   814c4:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   814c8:	2c0f      	cmp	r4, #15
   814ca:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   814ce:	d915      	bls.n	814fc <memset+0x60>
   814d0:	f1a4 0710 	sub.w	r7, r4, #16
   814d4:	093f      	lsrs	r7, r7, #4
   814d6:	f103 0610 	add.w	r6, r3, #16
   814da:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   814de:	461a      	mov	r2, r3
   814e0:	6015      	str	r5, [r2, #0]
   814e2:	6055      	str	r5, [r2, #4]
   814e4:	6095      	str	r5, [r2, #8]
   814e6:	60d5      	str	r5, [r2, #12]
   814e8:	3210      	adds	r2, #16
   814ea:	42b2      	cmp	r2, r6
   814ec:	d1f8      	bne.n	814e0 <memset+0x44>
   814ee:	f004 040f 	and.w	r4, r4, #15
   814f2:	3701      	adds	r7, #1
   814f4:	2c03      	cmp	r4, #3
   814f6:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   814fa:	d90d      	bls.n	81518 <memset+0x7c>
   814fc:	461e      	mov	r6, r3
   814fe:	4622      	mov	r2, r4
   81500:	3a04      	subs	r2, #4
   81502:	2a03      	cmp	r2, #3
   81504:	f846 5b04 	str.w	r5, [r6], #4
   81508:	d8fa      	bhi.n	81500 <memset+0x64>
   8150a:	1f22      	subs	r2, r4, #4
   8150c:	f022 0203 	bic.w	r2, r2, #3
   81510:	3204      	adds	r2, #4
   81512:	4413      	add	r3, r2
   81514:	f004 0403 	and.w	r4, r4, #3
   81518:	b12c      	cbz	r4, 81526 <memset+0x8a>
   8151a:	b2c9      	uxtb	r1, r1
   8151c:	441c      	add	r4, r3
   8151e:	f803 1b01 	strb.w	r1, [r3], #1
   81522:	42a3      	cmp	r3, r4
   81524:	d1fb      	bne.n	8151e <memset+0x82>
   81526:	bcf0      	pop	{r4, r5, r6, r7}
   81528:	4770      	bx	lr
   8152a:	4614      	mov	r4, r2
   8152c:	4603      	mov	r3, r0
   8152e:	e7c6      	b.n	814be <memset+0x22>

00081530 <_puts_r>:
   81530:	b5f0      	push	{r4, r5, r6, r7, lr}
   81532:	4604      	mov	r4, r0
   81534:	b089      	sub	sp, #36	; 0x24
   81536:	4608      	mov	r0, r1
   81538:	460d      	mov	r5, r1
   8153a:	f000 f8b9 	bl	816b0 <strlen>
   8153e:	68a3      	ldr	r3, [r4, #8]
   81540:	2102      	movs	r1, #2
   81542:	899a      	ldrh	r2, [r3, #12]
   81544:	f8df e044 	ldr.w	lr, [pc, #68]	; 8158c <_puts_r+0x5c>
   81548:	f100 0c01 	add.w	ip, r0, #1
   8154c:	2701      	movs	r7, #1
   8154e:	ae04      	add	r6, sp, #16
   81550:	9102      	str	r1, [sp, #8]
   81552:	0491      	lsls	r1, r2, #18
   81554:	9504      	str	r5, [sp, #16]
   81556:	9005      	str	r0, [sp, #20]
   81558:	f8cd c00c 	str.w	ip, [sp, #12]
   8155c:	f8cd e018 	str.w	lr, [sp, #24]
   81560:	9707      	str	r7, [sp, #28]
   81562:	9601      	str	r6, [sp, #4]
   81564:	d406      	bmi.n	81574 <_puts_r+0x44>
   81566:	6e59      	ldr	r1, [r3, #100]	; 0x64
   81568:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   8156c:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   81570:	819a      	strh	r2, [r3, #12]
   81572:	6659      	str	r1, [r3, #100]	; 0x64
   81574:	4620      	mov	r0, r4
   81576:	4619      	mov	r1, r3
   81578:	aa01      	add	r2, sp, #4
   8157a:	f001 faaf 	bl	82adc <__sfvwrite_r>
   8157e:	2800      	cmp	r0, #0
   81580:	bf0c      	ite	eq
   81582:	200a      	moveq	r0, #10
   81584:	f04f 30ff 	movne.w	r0, #4294967295
   81588:	b009      	add	sp, #36	; 0x24
   8158a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8158c:	00084648 	.word	0x00084648

00081590 <puts>:
   81590:	4b02      	ldr	r3, [pc, #8]	; (8159c <puts+0xc>)
   81592:	4601      	mov	r1, r0
   81594:	6818      	ldr	r0, [r3, #0]
   81596:	f7ff bfcb 	b.w	81530 <_puts_r>
   8159a:	bf00      	nop
   8159c:	20070570 	.word	0x20070570

000815a0 <setbuf>:
   815a0:	2900      	cmp	r1, #0
   815a2:	bf0c      	ite	eq
   815a4:	2202      	moveq	r2, #2
   815a6:	2200      	movne	r2, #0
   815a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
   815ac:	f000 b800 	b.w	815b0 <setvbuf>

000815b0 <setvbuf>:
   815b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   815b4:	4d3c      	ldr	r5, [pc, #240]	; (816a8 <setvbuf+0xf8>)
   815b6:	4604      	mov	r4, r0
   815b8:	682d      	ldr	r5, [r5, #0]
   815ba:	4688      	mov	r8, r1
   815bc:	4616      	mov	r6, r2
   815be:	461f      	mov	r7, r3
   815c0:	b115      	cbz	r5, 815c8 <setvbuf+0x18>
   815c2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   815c4:	2b00      	cmp	r3, #0
   815c6:	d04f      	beq.n	81668 <setvbuf+0xb8>
   815c8:	2e02      	cmp	r6, #2
   815ca:	d830      	bhi.n	8162e <setvbuf+0x7e>
   815cc:	2f00      	cmp	r7, #0
   815ce:	db2e      	blt.n	8162e <setvbuf+0x7e>
   815d0:	4628      	mov	r0, r5
   815d2:	4621      	mov	r1, r4
   815d4:	f001 f856 	bl	82684 <_fflush_r>
   815d8:	89a3      	ldrh	r3, [r4, #12]
   815da:	2200      	movs	r2, #0
   815dc:	6062      	str	r2, [r4, #4]
   815de:	61a2      	str	r2, [r4, #24]
   815e0:	061a      	lsls	r2, r3, #24
   815e2:	d428      	bmi.n	81636 <setvbuf+0x86>
   815e4:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   815e8:	b29b      	uxth	r3, r3
   815ea:	2e02      	cmp	r6, #2
   815ec:	81a3      	strh	r3, [r4, #12]
   815ee:	d02d      	beq.n	8164c <setvbuf+0x9c>
   815f0:	f1b8 0f00 	cmp.w	r8, #0
   815f4:	d03c      	beq.n	81670 <setvbuf+0xc0>
   815f6:	2e01      	cmp	r6, #1
   815f8:	d013      	beq.n	81622 <setvbuf+0x72>
   815fa:	b29b      	uxth	r3, r3
   815fc:	f003 0008 	and.w	r0, r3, #8
   81600:	4a2a      	ldr	r2, [pc, #168]	; (816ac <setvbuf+0xfc>)
   81602:	b280      	uxth	r0, r0
   81604:	63ea      	str	r2, [r5, #60]	; 0x3c
   81606:	f8c4 8000 	str.w	r8, [r4]
   8160a:	f8c4 8010 	str.w	r8, [r4, #16]
   8160e:	6167      	str	r7, [r4, #20]
   81610:	b178      	cbz	r0, 81632 <setvbuf+0x82>
   81612:	f013 0f03 	tst.w	r3, #3
   81616:	bf18      	it	ne
   81618:	2700      	movne	r7, #0
   8161a:	60a7      	str	r7, [r4, #8]
   8161c:	2000      	movs	r0, #0
   8161e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81622:	f043 0301 	orr.w	r3, r3, #1
   81626:	427a      	negs	r2, r7
   81628:	81a3      	strh	r3, [r4, #12]
   8162a:	61a2      	str	r2, [r4, #24]
   8162c:	e7e5      	b.n	815fa <setvbuf+0x4a>
   8162e:	f04f 30ff 	mov.w	r0, #4294967295
   81632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81636:	4628      	mov	r0, r5
   81638:	6921      	ldr	r1, [r4, #16]
   8163a:	f001 f983 	bl	82944 <_free_r>
   8163e:	89a3      	ldrh	r3, [r4, #12]
   81640:	2e02      	cmp	r6, #2
   81642:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   81646:	b29b      	uxth	r3, r3
   81648:	81a3      	strh	r3, [r4, #12]
   8164a:	d1d1      	bne.n	815f0 <setvbuf+0x40>
   8164c:	2000      	movs	r0, #0
   8164e:	f104 0243 	add.w	r2, r4, #67	; 0x43
   81652:	f043 0302 	orr.w	r3, r3, #2
   81656:	2500      	movs	r5, #0
   81658:	2101      	movs	r1, #1
   8165a:	81a3      	strh	r3, [r4, #12]
   8165c:	60a5      	str	r5, [r4, #8]
   8165e:	6022      	str	r2, [r4, #0]
   81660:	6122      	str	r2, [r4, #16]
   81662:	6161      	str	r1, [r4, #20]
   81664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81668:	4628      	mov	r0, r5
   8166a:	f001 f827 	bl	826bc <__sinit>
   8166e:	e7ab      	b.n	815c8 <setvbuf+0x18>
   81670:	2f00      	cmp	r7, #0
   81672:	bf08      	it	eq
   81674:	f44f 6780 	moveq.w	r7, #1024	; 0x400
   81678:	4638      	mov	r0, r7
   8167a:	f001 fc59 	bl	82f30 <malloc>
   8167e:	4680      	mov	r8, r0
   81680:	b128      	cbz	r0, 8168e <setvbuf+0xde>
   81682:	89a3      	ldrh	r3, [r4, #12]
   81684:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   81688:	b29b      	uxth	r3, r3
   8168a:	81a3      	strh	r3, [r4, #12]
   8168c:	e7b3      	b.n	815f6 <setvbuf+0x46>
   8168e:	f44f 6080 	mov.w	r0, #1024	; 0x400
   81692:	f001 fc4d 	bl	82f30 <malloc>
   81696:	4680      	mov	r8, r0
   81698:	b918      	cbnz	r0, 816a2 <setvbuf+0xf2>
   8169a:	89a3      	ldrh	r3, [r4, #12]
   8169c:	f04f 30ff 	mov.w	r0, #4294967295
   816a0:	e7d5      	b.n	8164e <setvbuf+0x9e>
   816a2:	f44f 6780 	mov.w	r7, #1024	; 0x400
   816a6:	e7ec      	b.n	81682 <setvbuf+0xd2>
   816a8:	20070570 	.word	0x20070570
   816ac:	000826b1 	.word	0x000826b1

000816b0 <strlen>:
   816b0:	f020 0103 	bic.w	r1, r0, #3
   816b4:	f010 0003 	ands.w	r0, r0, #3
   816b8:	f1c0 0000 	rsb	r0, r0, #0
   816bc:	f851 3b04 	ldr.w	r3, [r1], #4
   816c0:	f100 0c04 	add.w	ip, r0, #4
   816c4:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   816c8:	f06f 0200 	mvn.w	r2, #0
   816cc:	bf1c      	itt	ne
   816ce:	fa22 f20c 	lsrne.w	r2, r2, ip
   816d2:	4313      	orrne	r3, r2
   816d4:	f04f 0c01 	mov.w	ip, #1
   816d8:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   816dc:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   816e0:	eba3 020c 	sub.w	r2, r3, ip
   816e4:	ea22 0203 	bic.w	r2, r2, r3
   816e8:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   816ec:	bf04      	itt	eq
   816ee:	f851 3b04 	ldreq.w	r3, [r1], #4
   816f2:	3004      	addeq	r0, #4
   816f4:	d0f4      	beq.n	816e0 <strlen+0x30>
   816f6:	f013 0fff 	tst.w	r3, #255	; 0xff
   816fa:	bf1f      	itttt	ne
   816fc:	3001      	addne	r0, #1
   816fe:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
   81702:	3001      	addne	r0, #1
   81704:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
   81708:	bf18      	it	ne
   8170a:	3001      	addne	r0, #1
   8170c:	4770      	bx	lr
   8170e:	bf00      	nop

00081710 <__sprint_r.part.0>:
   81710:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   81712:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   81716:	049c      	lsls	r4, r3, #18
   81718:	460e      	mov	r6, r1
   8171a:	4680      	mov	r8, r0
   8171c:	4691      	mov	r9, r2
   8171e:	d52a      	bpl.n	81776 <__sprint_r.part.0+0x66>
   81720:	6893      	ldr	r3, [r2, #8]
   81722:	6812      	ldr	r2, [r2, #0]
   81724:	f102 0a08 	add.w	sl, r2, #8
   81728:	b31b      	cbz	r3, 81772 <__sprint_r.part.0+0x62>
   8172a:	e91a 00a0 	ldmdb	sl, {r5, r7}
   8172e:	08bf      	lsrs	r7, r7, #2
   81730:	d017      	beq.n	81762 <__sprint_r.part.0+0x52>
   81732:	3d04      	subs	r5, #4
   81734:	2400      	movs	r4, #0
   81736:	e001      	b.n	8173c <__sprint_r.part.0+0x2c>
   81738:	42a7      	cmp	r7, r4
   8173a:	d010      	beq.n	8175e <__sprint_r.part.0+0x4e>
   8173c:	4640      	mov	r0, r8
   8173e:	f855 1f04 	ldr.w	r1, [r5, #4]!
   81742:	4632      	mov	r2, r6
   81744:	f001 f850 	bl	827e8 <_fputwc_r>
   81748:	1c43      	adds	r3, r0, #1
   8174a:	f104 0401 	add.w	r4, r4, #1
   8174e:	d1f3      	bne.n	81738 <__sprint_r.part.0+0x28>
   81750:	2300      	movs	r3, #0
   81752:	f8c9 3008 	str.w	r3, [r9, #8]
   81756:	f8c9 3004 	str.w	r3, [r9, #4]
   8175a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8175e:	f8d9 3008 	ldr.w	r3, [r9, #8]
   81762:	eba3 0387 	sub.w	r3, r3, r7, lsl #2
   81766:	f8c9 3008 	str.w	r3, [r9, #8]
   8176a:	f10a 0a08 	add.w	sl, sl, #8
   8176e:	2b00      	cmp	r3, #0
   81770:	d1db      	bne.n	8172a <__sprint_r.part.0+0x1a>
   81772:	2000      	movs	r0, #0
   81774:	e7ec      	b.n	81750 <__sprint_r.part.0+0x40>
   81776:	f001 f9b1 	bl	82adc <__sfvwrite_r>
   8177a:	2300      	movs	r3, #0
   8177c:	f8c9 3008 	str.w	r3, [r9, #8]
   81780:	f8c9 3004 	str.w	r3, [r9, #4]
   81784:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00081788 <_vfiprintf_r>:
   81788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8178c:	b0b1      	sub	sp, #196	; 0xc4
   8178e:	461c      	mov	r4, r3
   81790:	9102      	str	r1, [sp, #8]
   81792:	4690      	mov	r8, r2
   81794:	9308      	str	r3, [sp, #32]
   81796:	9006      	str	r0, [sp, #24]
   81798:	b118      	cbz	r0, 817a2 <_vfiprintf_r+0x1a>
   8179a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8179c:	2b00      	cmp	r3, #0
   8179e:	f000 80e8 	beq.w	81972 <_vfiprintf_r+0x1ea>
   817a2:	9d02      	ldr	r5, [sp, #8]
   817a4:	89ab      	ldrh	r3, [r5, #12]
   817a6:	b29a      	uxth	r2, r3
   817a8:	0490      	lsls	r0, r2, #18
   817aa:	d407      	bmi.n	817bc <_vfiprintf_r+0x34>
   817ac:	6e6a      	ldr	r2, [r5, #100]	; 0x64
   817ae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   817b2:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
   817b6:	81ab      	strh	r3, [r5, #12]
   817b8:	b29a      	uxth	r2, r3
   817ba:	6669      	str	r1, [r5, #100]	; 0x64
   817bc:	0711      	lsls	r1, r2, #28
   817be:	f140 80b7 	bpl.w	81930 <_vfiprintf_r+0x1a8>
   817c2:	f8dd b008 	ldr.w	fp, [sp, #8]
   817c6:	f8db 3010 	ldr.w	r3, [fp, #16]
   817ca:	2b00      	cmp	r3, #0
   817cc:	f000 80b0 	beq.w	81930 <_vfiprintf_r+0x1a8>
   817d0:	f002 021a 	and.w	r2, r2, #26
   817d4:	2a0a      	cmp	r2, #10
   817d6:	f000 80b7 	beq.w	81948 <_vfiprintf_r+0x1c0>
   817da:	2300      	movs	r3, #0
   817dc:	f10d 0980 	add.w	r9, sp, #128	; 0x80
   817e0:	930a      	str	r3, [sp, #40]	; 0x28
   817e2:	9315      	str	r3, [sp, #84]	; 0x54
   817e4:	9314      	str	r3, [sp, #80]	; 0x50
   817e6:	9309      	str	r3, [sp, #36]	; 0x24
   817e8:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
   817ec:	464e      	mov	r6, r9
   817ee:	f898 3000 	ldrb.w	r3, [r8]
   817f2:	2b00      	cmp	r3, #0
   817f4:	f000 84c8 	beq.w	82188 <_vfiprintf_r+0xa00>
   817f8:	2b25      	cmp	r3, #37	; 0x25
   817fa:	f000 84c5 	beq.w	82188 <_vfiprintf_r+0xa00>
   817fe:	f108 0201 	add.w	r2, r8, #1
   81802:	e001      	b.n	81808 <_vfiprintf_r+0x80>
   81804:	2b25      	cmp	r3, #37	; 0x25
   81806:	d004      	beq.n	81812 <_vfiprintf_r+0x8a>
   81808:	7813      	ldrb	r3, [r2, #0]
   8180a:	4614      	mov	r4, r2
   8180c:	3201      	adds	r2, #1
   8180e:	2b00      	cmp	r3, #0
   81810:	d1f8      	bne.n	81804 <_vfiprintf_r+0x7c>
   81812:	ebc8 0504 	rsb	r5, r8, r4
   81816:	b195      	cbz	r5, 8183e <_vfiprintf_r+0xb6>
   81818:	9b14      	ldr	r3, [sp, #80]	; 0x50
   8181a:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8181c:	3301      	adds	r3, #1
   8181e:	442a      	add	r2, r5
   81820:	2b07      	cmp	r3, #7
   81822:	f8c6 8000 	str.w	r8, [r6]
   81826:	6075      	str	r5, [r6, #4]
   81828:	9215      	str	r2, [sp, #84]	; 0x54
   8182a:	9314      	str	r3, [sp, #80]	; 0x50
   8182c:	dd7b      	ble.n	81926 <_vfiprintf_r+0x19e>
   8182e:	2a00      	cmp	r2, #0
   81830:	f040 84d5 	bne.w	821de <_vfiprintf_r+0xa56>
   81834:	9809      	ldr	r0, [sp, #36]	; 0x24
   81836:	9214      	str	r2, [sp, #80]	; 0x50
   81838:	4428      	add	r0, r5
   8183a:	464e      	mov	r6, r9
   8183c:	9009      	str	r0, [sp, #36]	; 0x24
   8183e:	7823      	ldrb	r3, [r4, #0]
   81840:	2b00      	cmp	r3, #0
   81842:	f000 83ed 	beq.w	82020 <_vfiprintf_r+0x898>
   81846:	2100      	movs	r1, #0
   81848:	f04f 0200 	mov.w	r2, #0
   8184c:	f04f 3cff 	mov.w	ip, #4294967295
   81850:	7863      	ldrb	r3, [r4, #1]
   81852:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
   81856:	9104      	str	r1, [sp, #16]
   81858:	468a      	mov	sl, r1
   8185a:	f104 0801 	add.w	r8, r4, #1
   8185e:	4608      	mov	r0, r1
   81860:	4665      	mov	r5, ip
   81862:	f108 0801 	add.w	r8, r8, #1
   81866:	f1a3 0220 	sub.w	r2, r3, #32
   8186a:	2a58      	cmp	r2, #88	; 0x58
   8186c:	f200 82d9 	bhi.w	81e22 <_vfiprintf_r+0x69a>
   81870:	e8df f012 	tbh	[pc, r2, lsl #1]
   81874:	02d702cb 	.word	0x02d702cb
   81878:	02d202d7 	.word	0x02d202d7
   8187c:	02d702d7 	.word	0x02d702d7
   81880:	02d702d7 	.word	0x02d702d7
   81884:	02d702d7 	.word	0x02d702d7
   81888:	028f0282 	.word	0x028f0282
   8188c:	008402d7 	.word	0x008402d7
   81890:	02d70293 	.word	0x02d70293
   81894:	0196012b 	.word	0x0196012b
   81898:	01960196 	.word	0x01960196
   8189c:	01960196 	.word	0x01960196
   818a0:	01960196 	.word	0x01960196
   818a4:	01960196 	.word	0x01960196
   818a8:	02d702d7 	.word	0x02d702d7
   818ac:	02d702d7 	.word	0x02d702d7
   818b0:	02d702d7 	.word	0x02d702d7
   818b4:	02d702d7 	.word	0x02d702d7
   818b8:	02d702d7 	.word	0x02d702d7
   818bc:	02d70130 	.word	0x02d70130
   818c0:	02d702d7 	.word	0x02d702d7
   818c4:	02d702d7 	.word	0x02d702d7
   818c8:	02d702d7 	.word	0x02d702d7
   818cc:	02d702d7 	.word	0x02d702d7
   818d0:	017b02d7 	.word	0x017b02d7
   818d4:	02d702d7 	.word	0x02d702d7
   818d8:	02d702d7 	.word	0x02d702d7
   818dc:	01a402d7 	.word	0x01a402d7
   818e0:	02d702d7 	.word	0x02d702d7
   818e4:	02d701bf 	.word	0x02d701bf
   818e8:	02d702d7 	.word	0x02d702d7
   818ec:	02d702d7 	.word	0x02d702d7
   818f0:	02d702d7 	.word	0x02d702d7
   818f4:	02d702d7 	.word	0x02d702d7
   818f8:	01e402d7 	.word	0x01e402d7
   818fc:	02d701fa 	.word	0x02d701fa
   81900:	02d702d7 	.word	0x02d702d7
   81904:	01fa0216 	.word	0x01fa0216
   81908:	02d702d7 	.word	0x02d702d7
   8190c:	02d7021b 	.word	0x02d7021b
   81910:	00890228 	.word	0x00890228
   81914:	027d0266 	.word	0x027d0266
   81918:	023a02d7 	.word	0x023a02d7
   8191c:	011902d7 	.word	0x011902d7
   81920:	02d702d7 	.word	0x02d702d7
   81924:	02af      	.short	0x02af
   81926:	3608      	adds	r6, #8
   81928:	9809      	ldr	r0, [sp, #36]	; 0x24
   8192a:	4428      	add	r0, r5
   8192c:	9009      	str	r0, [sp, #36]	; 0x24
   8192e:	e786      	b.n	8183e <_vfiprintf_r+0xb6>
   81930:	9806      	ldr	r0, [sp, #24]
   81932:	9902      	ldr	r1, [sp, #8]
   81934:	f000 fd90 	bl	82458 <__swsetup_r>
   81938:	b9b0      	cbnz	r0, 81968 <_vfiprintf_r+0x1e0>
   8193a:	9d02      	ldr	r5, [sp, #8]
   8193c:	89aa      	ldrh	r2, [r5, #12]
   8193e:	f002 021a 	and.w	r2, r2, #26
   81942:	2a0a      	cmp	r2, #10
   81944:	f47f af49 	bne.w	817da <_vfiprintf_r+0x52>
   81948:	f8dd b008 	ldr.w	fp, [sp, #8]
   8194c:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
   81950:	2b00      	cmp	r3, #0
   81952:	f6ff af42 	blt.w	817da <_vfiprintf_r+0x52>
   81956:	9806      	ldr	r0, [sp, #24]
   81958:	4659      	mov	r1, fp
   8195a:	4642      	mov	r2, r8
   8195c:	4623      	mov	r3, r4
   8195e:	f000 fd3d 	bl	823dc <__sbprintf>
   81962:	b031      	add	sp, #196	; 0xc4
   81964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81968:	f04f 30ff 	mov.w	r0, #4294967295
   8196c:	b031      	add	sp, #196	; 0xc4
   8196e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81972:	f000 fea3 	bl	826bc <__sinit>
   81976:	e714      	b.n	817a2 <_vfiprintf_r+0x1a>
   81978:	4240      	negs	r0, r0
   8197a:	9308      	str	r3, [sp, #32]
   8197c:	f04a 0a04 	orr.w	sl, sl, #4
   81980:	f898 3000 	ldrb.w	r3, [r8]
   81984:	e76d      	b.n	81862 <_vfiprintf_r+0xda>
   81986:	f01a 0320 	ands.w	r3, sl, #32
   8198a:	9004      	str	r0, [sp, #16]
   8198c:	46ac      	mov	ip, r5
   8198e:	f000 80f4 	beq.w	81b7a <_vfiprintf_r+0x3f2>
   81992:	f8dd b020 	ldr.w	fp, [sp, #32]
   81996:	f10b 0307 	add.w	r3, fp, #7
   8199a:	f023 0307 	bic.w	r3, r3, #7
   8199e:	f103 0408 	add.w	r4, r3, #8
   819a2:	9408      	str	r4, [sp, #32]
   819a4:	e9d3 4500 	ldrd	r4, r5, [r3]
   819a8:	2300      	movs	r3, #0
   819aa:	f04f 0000 	mov.w	r0, #0
   819ae:	2100      	movs	r1, #0
   819b0:	f88d 0047 	strb.w	r0, [sp, #71]	; 0x47
   819b4:	f8cd c014 	str.w	ip, [sp, #20]
   819b8:	9107      	str	r1, [sp, #28]
   819ba:	f1bc 0f00 	cmp.w	ip, #0
   819be:	bfa8      	it	ge
   819c0:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
   819c4:	ea54 0205 	orrs.w	r2, r4, r5
   819c8:	f040 80ad 	bne.w	81b26 <_vfiprintf_r+0x39e>
   819cc:	f1bc 0f00 	cmp.w	ip, #0
   819d0:	f040 80a9 	bne.w	81b26 <_vfiprintf_r+0x39e>
   819d4:	2b00      	cmp	r3, #0
   819d6:	f040 83c0 	bne.w	8215a <_vfiprintf_r+0x9d2>
   819da:	f01a 0f01 	tst.w	sl, #1
   819de:	f000 83bc 	beq.w	8215a <_vfiprintf_r+0x9d2>
   819e2:	2330      	movs	r3, #48	; 0x30
   819e4:	af30      	add	r7, sp, #192	; 0xc0
   819e6:	f807 3d41 	strb.w	r3, [r7, #-65]!
   819ea:	ebc7 0409 	rsb	r4, r7, r9
   819ee:	9405      	str	r4, [sp, #20]
   819f0:	f8dd b014 	ldr.w	fp, [sp, #20]
   819f4:	9c07      	ldr	r4, [sp, #28]
   819f6:	45e3      	cmp	fp, ip
   819f8:	bfb8      	it	lt
   819fa:	46e3      	movlt	fp, ip
   819fc:	f8cd b00c 	str.w	fp, [sp, #12]
   81a00:	b11c      	cbz	r4, 81a0a <_vfiprintf_r+0x282>
   81a02:	f10b 0b01 	add.w	fp, fp, #1
   81a06:	f8cd b00c 	str.w	fp, [sp, #12]
   81a0a:	f01a 0502 	ands.w	r5, sl, #2
   81a0e:	9507      	str	r5, [sp, #28]
   81a10:	d005      	beq.n	81a1e <_vfiprintf_r+0x296>
   81a12:	f8dd b00c 	ldr.w	fp, [sp, #12]
   81a16:	f10b 0b02 	add.w	fp, fp, #2
   81a1a:	f8cd b00c 	str.w	fp, [sp, #12]
   81a1e:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
   81a22:	930b      	str	r3, [sp, #44]	; 0x2c
   81a24:	f040 821b 	bne.w	81e5e <_vfiprintf_r+0x6d6>
   81a28:	9d04      	ldr	r5, [sp, #16]
   81a2a:	f8dd b00c 	ldr.w	fp, [sp, #12]
   81a2e:	ebcb 0405 	rsb	r4, fp, r5
   81a32:	2c00      	cmp	r4, #0
   81a34:	f340 8213 	ble.w	81e5e <_vfiprintf_r+0x6d6>
   81a38:	2c10      	cmp	r4, #16
   81a3a:	f340 8489 	ble.w	82350 <_vfiprintf_r+0xbc8>
   81a3e:	4dbe      	ldr	r5, [pc, #760]	; (81d38 <_vfiprintf_r+0x5b0>)
   81a40:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81a42:	462b      	mov	r3, r5
   81a44:	9814      	ldr	r0, [sp, #80]	; 0x50
   81a46:	4625      	mov	r5, r4
   81a48:	f04f 0b10 	mov.w	fp, #16
   81a4c:	4664      	mov	r4, ip
   81a4e:	46b4      	mov	ip, r6
   81a50:	461e      	mov	r6, r3
   81a52:	e006      	b.n	81a62 <_vfiprintf_r+0x2da>
   81a54:	1c83      	adds	r3, r0, #2
   81a56:	f10c 0c08 	add.w	ip, ip, #8
   81a5a:	4608      	mov	r0, r1
   81a5c:	3d10      	subs	r5, #16
   81a5e:	2d10      	cmp	r5, #16
   81a60:	dd11      	ble.n	81a86 <_vfiprintf_r+0x2fe>
   81a62:	1c41      	adds	r1, r0, #1
   81a64:	3210      	adds	r2, #16
   81a66:	2907      	cmp	r1, #7
   81a68:	9215      	str	r2, [sp, #84]	; 0x54
   81a6a:	e88c 0840 	stmia.w	ip, {r6, fp}
   81a6e:	9114      	str	r1, [sp, #80]	; 0x50
   81a70:	ddf0      	ble.n	81a54 <_vfiprintf_r+0x2cc>
   81a72:	2a00      	cmp	r2, #0
   81a74:	f040 81e6 	bne.w	81e44 <_vfiprintf_r+0x6bc>
   81a78:	3d10      	subs	r5, #16
   81a7a:	2d10      	cmp	r5, #16
   81a7c:	f04f 0301 	mov.w	r3, #1
   81a80:	4610      	mov	r0, r2
   81a82:	46cc      	mov	ip, r9
   81a84:	dced      	bgt.n	81a62 <_vfiprintf_r+0x2da>
   81a86:	4631      	mov	r1, r6
   81a88:	4666      	mov	r6, ip
   81a8a:	46a4      	mov	ip, r4
   81a8c:	462c      	mov	r4, r5
   81a8e:	460d      	mov	r5, r1
   81a90:	4422      	add	r2, r4
   81a92:	2b07      	cmp	r3, #7
   81a94:	9215      	str	r2, [sp, #84]	; 0x54
   81a96:	6035      	str	r5, [r6, #0]
   81a98:	6074      	str	r4, [r6, #4]
   81a9a:	9314      	str	r3, [sp, #80]	; 0x50
   81a9c:	f300 836d 	bgt.w	8217a <_vfiprintf_r+0x9f2>
   81aa0:	3608      	adds	r6, #8
   81aa2:	1c59      	adds	r1, r3, #1
   81aa4:	e1de      	b.n	81e64 <_vfiprintf_r+0x6dc>
   81aa6:	f01a 0f20 	tst.w	sl, #32
   81aaa:	9004      	str	r0, [sp, #16]
   81aac:	46ac      	mov	ip, r5
   81aae:	f000 808d 	beq.w	81bcc <_vfiprintf_r+0x444>
   81ab2:	9d08      	ldr	r5, [sp, #32]
   81ab4:	1deb      	adds	r3, r5, #7
   81ab6:	f023 0307 	bic.w	r3, r3, #7
   81aba:	f103 0b08 	add.w	fp, r3, #8
   81abe:	e9d3 4500 	ldrd	r4, r5, [r3]
   81ac2:	f8cd b020 	str.w	fp, [sp, #32]
   81ac6:	2301      	movs	r3, #1
   81ac8:	e76f      	b.n	819aa <_vfiprintf_r+0x222>
   81aca:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
   81ace:	f898 3000 	ldrb.w	r3, [r8]
   81ad2:	e6c6      	b.n	81862 <_vfiprintf_r+0xda>
   81ad4:	f04a 0a10 	orr.w	sl, sl, #16
   81ad8:	f01a 0f20 	tst.w	sl, #32
   81adc:	9004      	str	r0, [sp, #16]
   81ade:	46ac      	mov	ip, r5
   81ae0:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   81ae4:	f000 80c8 	beq.w	81c78 <_vfiprintf_r+0x4f0>
   81ae8:	9c08      	ldr	r4, [sp, #32]
   81aea:	1de1      	adds	r1, r4, #7
   81aec:	f021 0107 	bic.w	r1, r1, #7
   81af0:	e9d1 2300 	ldrd	r2, r3, [r1]
   81af4:	3108      	adds	r1, #8
   81af6:	9108      	str	r1, [sp, #32]
   81af8:	4614      	mov	r4, r2
   81afa:	461d      	mov	r5, r3
   81afc:	2a00      	cmp	r2, #0
   81afe:	f173 0b00 	sbcs.w	fp, r3, #0
   81b02:	f2c0 83ce 	blt.w	822a2 <_vfiprintf_r+0xb1a>
   81b06:	f1bc 0f00 	cmp.w	ip, #0
   81b0a:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
   81b0e:	bfa8      	it	ge
   81b10:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
   81b14:	ea54 0205 	orrs.w	r2, r4, r5
   81b18:	9007      	str	r0, [sp, #28]
   81b1a:	f8cd c014 	str.w	ip, [sp, #20]
   81b1e:	f04f 0301 	mov.w	r3, #1
   81b22:	f43f af53 	beq.w	819cc <_vfiprintf_r+0x244>
   81b26:	2b01      	cmp	r3, #1
   81b28:	f000 8319 	beq.w	8215e <_vfiprintf_r+0x9d6>
   81b2c:	2b02      	cmp	r3, #2
   81b2e:	f10d 037f 	add.w	r3, sp, #127	; 0x7f
   81b32:	f040 824c 	bne.w	81fce <_vfiprintf_r+0x846>
   81b36:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   81b3a:	4619      	mov	r1, r3
   81b3c:	f004 000f 	and.w	r0, r4, #15
   81b40:	0922      	lsrs	r2, r4, #4
   81b42:	f81b 0000 	ldrb.w	r0, [fp, r0]
   81b46:	ea42 7205 	orr.w	r2, r2, r5, lsl #28
   81b4a:	092b      	lsrs	r3, r5, #4
   81b4c:	7008      	strb	r0, [r1, #0]
   81b4e:	ea52 0003 	orrs.w	r0, r2, r3
   81b52:	460f      	mov	r7, r1
   81b54:	4614      	mov	r4, r2
   81b56:	461d      	mov	r5, r3
   81b58:	f101 31ff 	add.w	r1, r1, #4294967295
   81b5c:	d1ee      	bne.n	81b3c <_vfiprintf_r+0x3b4>
   81b5e:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   81b62:	ebc7 0309 	rsb	r3, r7, r9
   81b66:	9305      	str	r3, [sp, #20]
   81b68:	e742      	b.n	819f0 <_vfiprintf_r+0x268>
   81b6a:	f04a 0a10 	orr.w	sl, sl, #16
   81b6e:	f01a 0320 	ands.w	r3, sl, #32
   81b72:	9004      	str	r0, [sp, #16]
   81b74:	46ac      	mov	ip, r5
   81b76:	f47f af0c 	bne.w	81992 <_vfiprintf_r+0x20a>
   81b7a:	f01a 0210 	ands.w	r2, sl, #16
   81b7e:	f040 8311 	bne.w	821a4 <_vfiprintf_r+0xa1c>
   81b82:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
   81b86:	f000 830d 	beq.w	821a4 <_vfiprintf_r+0xa1c>
   81b8a:	f8dd b020 	ldr.w	fp, [sp, #32]
   81b8e:	4613      	mov	r3, r2
   81b90:	f8bb 4000 	ldrh.w	r4, [fp]
   81b94:	f10b 0b04 	add.w	fp, fp, #4
   81b98:	2500      	movs	r5, #0
   81b9a:	f8cd b020 	str.w	fp, [sp, #32]
   81b9e:	e704      	b.n	819aa <_vfiprintf_r+0x222>
   81ba0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   81ba4:	2000      	movs	r0, #0
   81ba6:	f818 3b01 	ldrb.w	r3, [r8], #1
   81baa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   81bae:	eb02 0040 	add.w	r0, r2, r0, lsl #1
   81bb2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   81bb6:	2a09      	cmp	r2, #9
   81bb8:	d9f5      	bls.n	81ba6 <_vfiprintf_r+0x41e>
   81bba:	e654      	b.n	81866 <_vfiprintf_r+0xde>
   81bbc:	f04a 0a10 	orr.w	sl, sl, #16
   81bc0:	f01a 0f20 	tst.w	sl, #32
   81bc4:	9004      	str	r0, [sp, #16]
   81bc6:	46ac      	mov	ip, r5
   81bc8:	f47f af73 	bne.w	81ab2 <_vfiprintf_r+0x32a>
   81bcc:	f01a 0f10 	tst.w	sl, #16
   81bd0:	f040 82ef 	bne.w	821b2 <_vfiprintf_r+0xa2a>
   81bd4:	f01a 0f40 	tst.w	sl, #64	; 0x40
   81bd8:	f000 82eb 	beq.w	821b2 <_vfiprintf_r+0xa2a>
   81bdc:	f8dd b020 	ldr.w	fp, [sp, #32]
   81be0:	2500      	movs	r5, #0
   81be2:	f8bb 4000 	ldrh.w	r4, [fp]
   81be6:	f10b 0b04 	add.w	fp, fp, #4
   81bea:	2301      	movs	r3, #1
   81bec:	f8cd b020 	str.w	fp, [sp, #32]
   81bf0:	e6db      	b.n	819aa <_vfiprintf_r+0x222>
   81bf2:	46ac      	mov	ip, r5
   81bf4:	4d51      	ldr	r5, [pc, #324]	; (81d3c <_vfiprintf_r+0x5b4>)
   81bf6:	f01a 0f20 	tst.w	sl, #32
   81bfa:	9004      	str	r0, [sp, #16]
   81bfc:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   81c00:	950a      	str	r5, [sp, #40]	; 0x28
   81c02:	f000 80f0 	beq.w	81de6 <_vfiprintf_r+0x65e>
   81c06:	9d08      	ldr	r5, [sp, #32]
   81c08:	1dea      	adds	r2, r5, #7
   81c0a:	f022 0207 	bic.w	r2, r2, #7
   81c0e:	f102 0b08 	add.w	fp, r2, #8
   81c12:	f8cd b020 	str.w	fp, [sp, #32]
   81c16:	e9d2 4500 	ldrd	r4, r5, [r2]
   81c1a:	f01a 0f01 	tst.w	sl, #1
   81c1e:	f000 82aa 	beq.w	82176 <_vfiprintf_r+0x9ee>
   81c22:	ea54 0b05 	orrs.w	fp, r4, r5
   81c26:	f000 82a6 	beq.w	82176 <_vfiprintf_r+0x9ee>
   81c2a:	2230      	movs	r2, #48	; 0x30
   81c2c:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
   81c30:	f04a 0a02 	orr.w	sl, sl, #2
   81c34:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   81c38:	2302      	movs	r3, #2
   81c3a:	e6b6      	b.n	819aa <_vfiprintf_r+0x222>
   81c3c:	9b08      	ldr	r3, [sp, #32]
   81c3e:	f8dd b020 	ldr.w	fp, [sp, #32]
   81c42:	681b      	ldr	r3, [r3, #0]
   81c44:	2401      	movs	r4, #1
   81c46:	f04f 0500 	mov.w	r5, #0
   81c4a:	f10b 0b04 	add.w	fp, fp, #4
   81c4e:	9004      	str	r0, [sp, #16]
   81c50:	9403      	str	r4, [sp, #12]
   81c52:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
   81c56:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   81c5a:	f8cd b020 	str.w	fp, [sp, #32]
   81c5e:	9405      	str	r4, [sp, #20]
   81c60:	af16      	add	r7, sp, #88	; 0x58
   81c62:	f04f 0c00 	mov.w	ip, #0
   81c66:	e6d0      	b.n	81a0a <_vfiprintf_r+0x282>
   81c68:	f01a 0f20 	tst.w	sl, #32
   81c6c:	9004      	str	r0, [sp, #16]
   81c6e:	46ac      	mov	ip, r5
   81c70:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   81c74:	f47f af38 	bne.w	81ae8 <_vfiprintf_r+0x360>
   81c78:	f01a 0f10 	tst.w	sl, #16
   81c7c:	f040 82a7 	bne.w	821ce <_vfiprintf_r+0xa46>
   81c80:	f01a 0f40 	tst.w	sl, #64	; 0x40
   81c84:	f000 82a3 	beq.w	821ce <_vfiprintf_r+0xa46>
   81c88:	f8dd b020 	ldr.w	fp, [sp, #32]
   81c8c:	f9bb 4000 	ldrsh.w	r4, [fp]
   81c90:	f10b 0b04 	add.w	fp, fp, #4
   81c94:	17e5      	asrs	r5, r4, #31
   81c96:	4622      	mov	r2, r4
   81c98:	462b      	mov	r3, r5
   81c9a:	f8cd b020 	str.w	fp, [sp, #32]
   81c9e:	e72d      	b.n	81afc <_vfiprintf_r+0x374>
   81ca0:	f04a 0a40 	orr.w	sl, sl, #64	; 0x40
   81ca4:	f898 3000 	ldrb.w	r3, [r8]
   81ca8:	e5db      	b.n	81862 <_vfiprintf_r+0xda>
   81caa:	f898 3000 	ldrb.w	r3, [r8]
   81cae:	4642      	mov	r2, r8
   81cb0:	2b6c      	cmp	r3, #108	; 0x6c
   81cb2:	bf03      	ittte	eq
   81cb4:	f108 0801 	addeq.w	r8, r8, #1
   81cb8:	f04a 0a20 	orreq.w	sl, sl, #32
   81cbc:	7853      	ldrbeq	r3, [r2, #1]
   81cbe:	f04a 0a10 	orrne.w	sl, sl, #16
   81cc2:	e5ce      	b.n	81862 <_vfiprintf_r+0xda>
   81cc4:	f01a 0f20 	tst.w	sl, #32
   81cc8:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   81ccc:	f000 82f7 	beq.w	822be <_vfiprintf_r+0xb36>
   81cd0:	9c08      	ldr	r4, [sp, #32]
   81cd2:	6821      	ldr	r1, [r4, #0]
   81cd4:	9c09      	ldr	r4, [sp, #36]	; 0x24
   81cd6:	17e5      	asrs	r5, r4, #31
   81cd8:	462b      	mov	r3, r5
   81cda:	9d08      	ldr	r5, [sp, #32]
   81cdc:	4622      	mov	r2, r4
   81cde:	3504      	adds	r5, #4
   81ce0:	9508      	str	r5, [sp, #32]
   81ce2:	e9c1 2300 	strd	r2, r3, [r1]
   81ce6:	e582      	b.n	817ee <_vfiprintf_r+0x66>
   81ce8:	9c08      	ldr	r4, [sp, #32]
   81cea:	46ac      	mov	ip, r5
   81cec:	6827      	ldr	r7, [r4, #0]
   81cee:	f04f 0500 	mov.w	r5, #0
   81cf2:	9004      	str	r0, [sp, #16]
   81cf4:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
   81cf8:	3404      	adds	r4, #4
   81cfa:	2f00      	cmp	r7, #0
   81cfc:	f000 8332 	beq.w	82364 <_vfiprintf_r+0xbdc>
   81d00:	f1bc 0f00 	cmp.w	ip, #0
   81d04:	4638      	mov	r0, r7
   81d06:	f2c0 8307 	blt.w	82318 <_vfiprintf_r+0xb90>
   81d0a:	4662      	mov	r2, ip
   81d0c:	2100      	movs	r1, #0
   81d0e:	f8cd c004 	str.w	ip, [sp, #4]
   81d12:	f001 fbb1 	bl	83478 <memchr>
   81d16:	f8dd c004 	ldr.w	ip, [sp, #4]
   81d1a:	2800      	cmp	r0, #0
   81d1c:	f000 833a 	beq.w	82394 <_vfiprintf_r+0xc0c>
   81d20:	1bc0      	subs	r0, r0, r7
   81d22:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
   81d26:	4560      	cmp	r0, ip
   81d28:	bfa8      	it	ge
   81d2a:	4660      	movge	r0, ip
   81d2c:	9005      	str	r0, [sp, #20]
   81d2e:	9408      	str	r4, [sp, #32]
   81d30:	9507      	str	r5, [sp, #28]
   81d32:	f04f 0c00 	mov.w	ip, #0
   81d36:	e65b      	b.n	819f0 <_vfiprintf_r+0x268>
   81d38:	00084870 	.word	0x00084870
   81d3c:	00084830 	.word	0x00084830
   81d40:	9b08      	ldr	r3, [sp, #32]
   81d42:	f8dd b020 	ldr.w	fp, [sp, #32]
   81d46:	9004      	str	r0, [sp, #16]
   81d48:	48b2      	ldr	r0, [pc, #712]	; (82014 <_vfiprintf_r+0x88c>)
   81d4a:	681c      	ldr	r4, [r3, #0]
   81d4c:	2230      	movs	r2, #48	; 0x30
   81d4e:	2378      	movs	r3, #120	; 0x78
   81d50:	f10b 0b04 	add.w	fp, fp, #4
   81d54:	46ac      	mov	ip, r5
   81d56:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
   81d5a:	f04a 0a02 	orr.w	sl, sl, #2
   81d5e:	f8cd b020 	str.w	fp, [sp, #32]
   81d62:	2500      	movs	r5, #0
   81d64:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   81d68:	900a      	str	r0, [sp, #40]	; 0x28
   81d6a:	2302      	movs	r3, #2
   81d6c:	e61d      	b.n	819aa <_vfiprintf_r+0x222>
   81d6e:	f04a 0a20 	orr.w	sl, sl, #32
   81d72:	f898 3000 	ldrb.w	r3, [r8]
   81d76:	e574      	b.n	81862 <_vfiprintf_r+0xda>
   81d78:	f8dd b020 	ldr.w	fp, [sp, #32]
   81d7c:	f8db 0000 	ldr.w	r0, [fp]
   81d80:	f10b 0304 	add.w	r3, fp, #4
   81d84:	2800      	cmp	r0, #0
   81d86:	f6ff adf7 	blt.w	81978 <_vfiprintf_r+0x1f0>
   81d8a:	9308      	str	r3, [sp, #32]
   81d8c:	f898 3000 	ldrb.w	r3, [r8]
   81d90:	e567      	b.n	81862 <_vfiprintf_r+0xda>
   81d92:	f898 3000 	ldrb.w	r3, [r8]
   81d96:	212b      	movs	r1, #43	; 0x2b
   81d98:	e563      	b.n	81862 <_vfiprintf_r+0xda>
   81d9a:	f898 3000 	ldrb.w	r3, [r8]
   81d9e:	f108 0401 	add.w	r4, r8, #1
   81da2:	2b2a      	cmp	r3, #42	; 0x2a
   81da4:	f000 8305 	beq.w	823b2 <_vfiprintf_r+0xc2a>
   81da8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   81dac:	2a09      	cmp	r2, #9
   81dae:	bf98      	it	ls
   81db0:	2500      	movls	r5, #0
   81db2:	f200 82fa 	bhi.w	823aa <_vfiprintf_r+0xc22>
   81db6:	f814 3b01 	ldrb.w	r3, [r4], #1
   81dba:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   81dbe:	eb02 0545 	add.w	r5, r2, r5, lsl #1
   81dc2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   81dc6:	2a09      	cmp	r2, #9
   81dc8:	d9f5      	bls.n	81db6 <_vfiprintf_r+0x62e>
   81dca:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
   81dce:	46a0      	mov	r8, r4
   81dd0:	e549      	b.n	81866 <_vfiprintf_r+0xde>
   81dd2:	4c90      	ldr	r4, [pc, #576]	; (82014 <_vfiprintf_r+0x88c>)
   81dd4:	f01a 0f20 	tst.w	sl, #32
   81dd8:	9004      	str	r0, [sp, #16]
   81dda:	46ac      	mov	ip, r5
   81ddc:	940a      	str	r4, [sp, #40]	; 0x28
   81dde:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   81de2:	f47f af10 	bne.w	81c06 <_vfiprintf_r+0x47e>
   81de6:	f01a 0f10 	tst.w	sl, #16
   81dea:	f040 81ea 	bne.w	821c2 <_vfiprintf_r+0xa3a>
   81dee:	f01a 0f40 	tst.w	sl, #64	; 0x40
   81df2:	f000 81e6 	beq.w	821c2 <_vfiprintf_r+0xa3a>
   81df6:	f8dd b020 	ldr.w	fp, [sp, #32]
   81dfa:	2500      	movs	r5, #0
   81dfc:	f8bb 4000 	ldrh.w	r4, [fp]
   81e00:	f10b 0b04 	add.w	fp, fp, #4
   81e04:	f8cd b020 	str.w	fp, [sp, #32]
   81e08:	e707      	b.n	81c1a <_vfiprintf_r+0x492>
   81e0a:	f898 3000 	ldrb.w	r3, [r8]
   81e0e:	2900      	cmp	r1, #0
   81e10:	f47f ad27 	bne.w	81862 <_vfiprintf_r+0xda>
   81e14:	2120      	movs	r1, #32
   81e16:	e524      	b.n	81862 <_vfiprintf_r+0xda>
   81e18:	f04a 0a01 	orr.w	sl, sl, #1
   81e1c:	f898 3000 	ldrb.w	r3, [r8]
   81e20:	e51f      	b.n	81862 <_vfiprintf_r+0xda>
   81e22:	9004      	str	r0, [sp, #16]
   81e24:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   81e28:	2b00      	cmp	r3, #0
   81e2a:	f000 80f9 	beq.w	82020 <_vfiprintf_r+0x898>
   81e2e:	2501      	movs	r5, #1
   81e30:	f04f 0b00 	mov.w	fp, #0
   81e34:	9503      	str	r5, [sp, #12]
   81e36:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   81e3a:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
   81e3e:	9505      	str	r5, [sp, #20]
   81e40:	af16      	add	r7, sp, #88	; 0x58
   81e42:	e70e      	b.n	81c62 <_vfiprintf_r+0x4da>
   81e44:	9806      	ldr	r0, [sp, #24]
   81e46:	9902      	ldr	r1, [sp, #8]
   81e48:	aa13      	add	r2, sp, #76	; 0x4c
   81e4a:	f7ff fc61 	bl	81710 <__sprint_r.part.0>
   81e4e:	2800      	cmp	r0, #0
   81e50:	f040 80ed 	bne.w	8202e <_vfiprintf_r+0x8a6>
   81e54:	9814      	ldr	r0, [sp, #80]	; 0x50
   81e56:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81e58:	1c43      	adds	r3, r0, #1
   81e5a:	46cc      	mov	ip, r9
   81e5c:	e5fe      	b.n	81a5c <_vfiprintf_r+0x2d4>
   81e5e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81e60:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81e62:	1c59      	adds	r1, r3, #1
   81e64:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
   81e68:	b168      	cbz	r0, 81e86 <_vfiprintf_r+0x6fe>
   81e6a:	3201      	adds	r2, #1
   81e6c:	f10d 0047 	add.w	r0, sp, #71	; 0x47
   81e70:	2301      	movs	r3, #1
   81e72:	2907      	cmp	r1, #7
   81e74:	9215      	str	r2, [sp, #84]	; 0x54
   81e76:	9114      	str	r1, [sp, #80]	; 0x50
   81e78:	e886 0009 	stmia.w	r6, {r0, r3}
   81e7c:	f300 8160 	bgt.w	82140 <_vfiprintf_r+0x9b8>
   81e80:	460b      	mov	r3, r1
   81e82:	3608      	adds	r6, #8
   81e84:	3101      	adds	r1, #1
   81e86:	9c07      	ldr	r4, [sp, #28]
   81e88:	b164      	cbz	r4, 81ea4 <_vfiprintf_r+0x71c>
   81e8a:	3202      	adds	r2, #2
   81e8c:	a812      	add	r0, sp, #72	; 0x48
   81e8e:	2302      	movs	r3, #2
   81e90:	2907      	cmp	r1, #7
   81e92:	9215      	str	r2, [sp, #84]	; 0x54
   81e94:	9114      	str	r1, [sp, #80]	; 0x50
   81e96:	e886 0009 	stmia.w	r6, {r0, r3}
   81e9a:	f300 8157 	bgt.w	8214c <_vfiprintf_r+0x9c4>
   81e9e:	460b      	mov	r3, r1
   81ea0:	3608      	adds	r6, #8
   81ea2:	3101      	adds	r1, #1
   81ea4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   81ea6:	2d80      	cmp	r5, #128	; 0x80
   81ea8:	f000 8101 	beq.w	820ae <_vfiprintf_r+0x926>
   81eac:	9d05      	ldr	r5, [sp, #20]
   81eae:	ebc5 040c 	rsb	r4, r5, ip
   81eb2:	2c00      	cmp	r4, #0
   81eb4:	dd2f      	ble.n	81f16 <_vfiprintf_r+0x78e>
   81eb6:	2c10      	cmp	r4, #16
   81eb8:	4d57      	ldr	r5, [pc, #348]	; (82018 <_vfiprintf_r+0x890>)
   81eba:	dd22      	ble.n	81f02 <_vfiprintf_r+0x77a>
   81ebc:	4630      	mov	r0, r6
   81ebe:	f04f 0b10 	mov.w	fp, #16
   81ec2:	462e      	mov	r6, r5
   81ec4:	4625      	mov	r5, r4
   81ec6:	9c06      	ldr	r4, [sp, #24]
   81ec8:	e006      	b.n	81ed8 <_vfiprintf_r+0x750>
   81eca:	f103 0c02 	add.w	ip, r3, #2
   81ece:	3008      	adds	r0, #8
   81ed0:	460b      	mov	r3, r1
   81ed2:	3d10      	subs	r5, #16
   81ed4:	2d10      	cmp	r5, #16
   81ed6:	dd10      	ble.n	81efa <_vfiprintf_r+0x772>
   81ed8:	1c59      	adds	r1, r3, #1
   81eda:	3210      	adds	r2, #16
   81edc:	2907      	cmp	r1, #7
   81ede:	9215      	str	r2, [sp, #84]	; 0x54
   81ee0:	e880 0840 	stmia.w	r0, {r6, fp}
   81ee4:	9114      	str	r1, [sp, #80]	; 0x50
   81ee6:	ddf0      	ble.n	81eca <_vfiprintf_r+0x742>
   81ee8:	2a00      	cmp	r2, #0
   81eea:	d163      	bne.n	81fb4 <_vfiprintf_r+0x82c>
   81eec:	3d10      	subs	r5, #16
   81eee:	2d10      	cmp	r5, #16
   81ef0:	f04f 0c01 	mov.w	ip, #1
   81ef4:	4613      	mov	r3, r2
   81ef6:	4648      	mov	r0, r9
   81ef8:	dcee      	bgt.n	81ed8 <_vfiprintf_r+0x750>
   81efa:	462c      	mov	r4, r5
   81efc:	4661      	mov	r1, ip
   81efe:	4635      	mov	r5, r6
   81f00:	4606      	mov	r6, r0
   81f02:	4422      	add	r2, r4
   81f04:	2907      	cmp	r1, #7
   81f06:	9215      	str	r2, [sp, #84]	; 0x54
   81f08:	6035      	str	r5, [r6, #0]
   81f0a:	6074      	str	r4, [r6, #4]
   81f0c:	9114      	str	r1, [sp, #80]	; 0x50
   81f0e:	f300 80c1 	bgt.w	82094 <_vfiprintf_r+0x90c>
   81f12:	3608      	adds	r6, #8
   81f14:	3101      	adds	r1, #1
   81f16:	9d05      	ldr	r5, [sp, #20]
   81f18:	2907      	cmp	r1, #7
   81f1a:	442a      	add	r2, r5
   81f1c:	9215      	str	r2, [sp, #84]	; 0x54
   81f1e:	6037      	str	r7, [r6, #0]
   81f20:	6075      	str	r5, [r6, #4]
   81f22:	9114      	str	r1, [sp, #80]	; 0x50
   81f24:	f340 80c1 	ble.w	820aa <_vfiprintf_r+0x922>
   81f28:	2a00      	cmp	r2, #0
   81f2a:	f040 8130 	bne.w	8218e <_vfiprintf_r+0xa06>
   81f2e:	9214      	str	r2, [sp, #80]	; 0x50
   81f30:	464e      	mov	r6, r9
   81f32:	f01a 0f04 	tst.w	sl, #4
   81f36:	f000 808b 	beq.w	82050 <_vfiprintf_r+0x8c8>
   81f3a:	9d04      	ldr	r5, [sp, #16]
   81f3c:	f8dd b00c 	ldr.w	fp, [sp, #12]
   81f40:	ebcb 0405 	rsb	r4, fp, r5
   81f44:	2c00      	cmp	r4, #0
   81f46:	f340 8083 	ble.w	82050 <_vfiprintf_r+0x8c8>
   81f4a:	2c10      	cmp	r4, #16
   81f4c:	f340 821e 	ble.w	8238c <_vfiprintf_r+0xc04>
   81f50:	9914      	ldr	r1, [sp, #80]	; 0x50
   81f52:	4d32      	ldr	r5, [pc, #200]	; (8201c <_vfiprintf_r+0x894>)
   81f54:	2710      	movs	r7, #16
   81f56:	f8dd a018 	ldr.w	sl, [sp, #24]
   81f5a:	f8dd b008 	ldr.w	fp, [sp, #8]
   81f5e:	e005      	b.n	81f6c <_vfiprintf_r+0x7e4>
   81f60:	1c88      	adds	r0, r1, #2
   81f62:	3608      	adds	r6, #8
   81f64:	4619      	mov	r1, r3
   81f66:	3c10      	subs	r4, #16
   81f68:	2c10      	cmp	r4, #16
   81f6a:	dd10      	ble.n	81f8e <_vfiprintf_r+0x806>
   81f6c:	1c4b      	adds	r3, r1, #1
   81f6e:	3210      	adds	r2, #16
   81f70:	2b07      	cmp	r3, #7
   81f72:	9215      	str	r2, [sp, #84]	; 0x54
   81f74:	e886 00a0 	stmia.w	r6, {r5, r7}
   81f78:	9314      	str	r3, [sp, #80]	; 0x50
   81f7a:	ddf1      	ble.n	81f60 <_vfiprintf_r+0x7d8>
   81f7c:	2a00      	cmp	r2, #0
   81f7e:	d17d      	bne.n	8207c <_vfiprintf_r+0x8f4>
   81f80:	3c10      	subs	r4, #16
   81f82:	2c10      	cmp	r4, #16
   81f84:	f04f 0001 	mov.w	r0, #1
   81f88:	4611      	mov	r1, r2
   81f8a:	464e      	mov	r6, r9
   81f8c:	dcee      	bgt.n	81f6c <_vfiprintf_r+0x7e4>
   81f8e:	4422      	add	r2, r4
   81f90:	2807      	cmp	r0, #7
   81f92:	9215      	str	r2, [sp, #84]	; 0x54
   81f94:	6035      	str	r5, [r6, #0]
   81f96:	6074      	str	r4, [r6, #4]
   81f98:	9014      	str	r0, [sp, #80]	; 0x50
   81f9a:	dd59      	ble.n	82050 <_vfiprintf_r+0x8c8>
   81f9c:	2a00      	cmp	r2, #0
   81f9e:	d14f      	bne.n	82040 <_vfiprintf_r+0x8b8>
   81fa0:	9c09      	ldr	r4, [sp, #36]	; 0x24
   81fa2:	f8dd b00c 	ldr.w	fp, [sp, #12]
   81fa6:	9d04      	ldr	r5, [sp, #16]
   81fa8:	45ab      	cmp	fp, r5
   81faa:	bfac      	ite	ge
   81fac:	445c      	addge	r4, fp
   81fae:	1964      	addlt	r4, r4, r5
   81fb0:	9409      	str	r4, [sp, #36]	; 0x24
   81fb2:	e05e      	b.n	82072 <_vfiprintf_r+0x8ea>
   81fb4:	4620      	mov	r0, r4
   81fb6:	9902      	ldr	r1, [sp, #8]
   81fb8:	aa13      	add	r2, sp, #76	; 0x4c
   81fba:	f7ff fba9 	bl	81710 <__sprint_r.part.0>
   81fbe:	2800      	cmp	r0, #0
   81fc0:	d135      	bne.n	8202e <_vfiprintf_r+0x8a6>
   81fc2:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81fc4:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81fc6:	f103 0c01 	add.w	ip, r3, #1
   81fca:	4648      	mov	r0, r9
   81fcc:	e781      	b.n	81ed2 <_vfiprintf_r+0x74a>
   81fce:	08e0      	lsrs	r0, r4, #3
   81fd0:	ea40 7045 	orr.w	r0, r0, r5, lsl #29
   81fd4:	f004 0207 	and.w	r2, r4, #7
   81fd8:	08e9      	lsrs	r1, r5, #3
   81fda:	3230      	adds	r2, #48	; 0x30
   81fdc:	ea50 0b01 	orrs.w	fp, r0, r1
   81fe0:	461f      	mov	r7, r3
   81fe2:	701a      	strb	r2, [r3, #0]
   81fe4:	4604      	mov	r4, r0
   81fe6:	460d      	mov	r5, r1
   81fe8:	f103 33ff 	add.w	r3, r3, #4294967295
   81fec:	d1ef      	bne.n	81fce <_vfiprintf_r+0x846>
   81fee:	f01a 0f01 	tst.w	sl, #1
   81ff2:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   81ff6:	4639      	mov	r1, r7
   81ff8:	f000 80b9 	beq.w	8216e <_vfiprintf_r+0x9e6>
   81ffc:	2a30      	cmp	r2, #48	; 0x30
   81ffe:	f43f acf4 	beq.w	819ea <_vfiprintf_r+0x262>
   82002:	461f      	mov	r7, r3
   82004:	ebc7 0509 	rsb	r5, r7, r9
   82008:	2330      	movs	r3, #48	; 0x30
   8200a:	9505      	str	r5, [sp, #20]
   8200c:	f801 3c01 	strb.w	r3, [r1, #-1]
   82010:	e4ee      	b.n	819f0 <_vfiprintf_r+0x268>
   82012:	bf00      	nop
   82014:	00084844 	.word	0x00084844
   82018:	00084860 	.word	0x00084860
   8201c:	00084870 	.word	0x00084870
   82020:	9b15      	ldr	r3, [sp, #84]	; 0x54
   82022:	b123      	cbz	r3, 8202e <_vfiprintf_r+0x8a6>
   82024:	9806      	ldr	r0, [sp, #24]
   82026:	9902      	ldr	r1, [sp, #8]
   82028:	aa13      	add	r2, sp, #76	; 0x4c
   8202a:	f7ff fb71 	bl	81710 <__sprint_r.part.0>
   8202e:	9c02      	ldr	r4, [sp, #8]
   82030:	89a3      	ldrh	r3, [r4, #12]
   82032:	065b      	lsls	r3, r3, #25
   82034:	f53f ac98 	bmi.w	81968 <_vfiprintf_r+0x1e0>
   82038:	9809      	ldr	r0, [sp, #36]	; 0x24
   8203a:	b031      	add	sp, #196	; 0xc4
   8203c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82040:	9806      	ldr	r0, [sp, #24]
   82042:	9902      	ldr	r1, [sp, #8]
   82044:	aa13      	add	r2, sp, #76	; 0x4c
   82046:	f7ff fb63 	bl	81710 <__sprint_r.part.0>
   8204a:	2800      	cmp	r0, #0
   8204c:	d1ef      	bne.n	8202e <_vfiprintf_r+0x8a6>
   8204e:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82050:	9c09      	ldr	r4, [sp, #36]	; 0x24
   82052:	f8dd b00c 	ldr.w	fp, [sp, #12]
   82056:	9d04      	ldr	r5, [sp, #16]
   82058:	45ab      	cmp	fp, r5
   8205a:	bfac      	ite	ge
   8205c:	445c      	addge	r4, fp
   8205e:	1964      	addlt	r4, r4, r5
   82060:	9409      	str	r4, [sp, #36]	; 0x24
   82062:	b132      	cbz	r2, 82072 <_vfiprintf_r+0x8ea>
   82064:	9806      	ldr	r0, [sp, #24]
   82066:	9902      	ldr	r1, [sp, #8]
   82068:	aa13      	add	r2, sp, #76	; 0x4c
   8206a:	f7ff fb51 	bl	81710 <__sprint_r.part.0>
   8206e:	2800      	cmp	r0, #0
   82070:	d1dd      	bne.n	8202e <_vfiprintf_r+0x8a6>
   82072:	2000      	movs	r0, #0
   82074:	9014      	str	r0, [sp, #80]	; 0x50
   82076:	464e      	mov	r6, r9
   82078:	f7ff bbb9 	b.w	817ee <_vfiprintf_r+0x66>
   8207c:	4650      	mov	r0, sl
   8207e:	4659      	mov	r1, fp
   82080:	aa13      	add	r2, sp, #76	; 0x4c
   82082:	f7ff fb45 	bl	81710 <__sprint_r.part.0>
   82086:	2800      	cmp	r0, #0
   82088:	d1d1      	bne.n	8202e <_vfiprintf_r+0x8a6>
   8208a:	9914      	ldr	r1, [sp, #80]	; 0x50
   8208c:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8208e:	1c48      	adds	r0, r1, #1
   82090:	464e      	mov	r6, r9
   82092:	e768      	b.n	81f66 <_vfiprintf_r+0x7de>
   82094:	2a00      	cmp	r2, #0
   82096:	f040 80f7 	bne.w	82288 <_vfiprintf_r+0xb00>
   8209a:	9c05      	ldr	r4, [sp, #20]
   8209c:	2301      	movs	r3, #1
   8209e:	9720      	str	r7, [sp, #128]	; 0x80
   820a0:	9421      	str	r4, [sp, #132]	; 0x84
   820a2:	9415      	str	r4, [sp, #84]	; 0x54
   820a4:	4622      	mov	r2, r4
   820a6:	9314      	str	r3, [sp, #80]	; 0x50
   820a8:	464e      	mov	r6, r9
   820aa:	3608      	adds	r6, #8
   820ac:	e741      	b.n	81f32 <_vfiprintf_r+0x7aa>
   820ae:	9d04      	ldr	r5, [sp, #16]
   820b0:	f8dd b00c 	ldr.w	fp, [sp, #12]
   820b4:	ebcb 0405 	rsb	r4, fp, r5
   820b8:	2c00      	cmp	r4, #0
   820ba:	f77f aef7 	ble.w	81eac <_vfiprintf_r+0x724>
   820be:	2c10      	cmp	r4, #16
   820c0:	4da6      	ldr	r5, [pc, #664]	; (8235c <_vfiprintf_r+0xbd4>)
   820c2:	f340 8170 	ble.w	823a6 <_vfiprintf_r+0xc1e>
   820c6:	4629      	mov	r1, r5
   820c8:	f04f 0b10 	mov.w	fp, #16
   820cc:	4625      	mov	r5, r4
   820ce:	4664      	mov	r4, ip
   820d0:	46b4      	mov	ip, r6
   820d2:	460e      	mov	r6, r1
   820d4:	e006      	b.n	820e4 <_vfiprintf_r+0x95c>
   820d6:	1c98      	adds	r0, r3, #2
   820d8:	f10c 0c08 	add.w	ip, ip, #8
   820dc:	460b      	mov	r3, r1
   820de:	3d10      	subs	r5, #16
   820e0:	2d10      	cmp	r5, #16
   820e2:	dd0f      	ble.n	82104 <_vfiprintf_r+0x97c>
   820e4:	1c59      	adds	r1, r3, #1
   820e6:	3210      	adds	r2, #16
   820e8:	2907      	cmp	r1, #7
   820ea:	9215      	str	r2, [sp, #84]	; 0x54
   820ec:	e88c 0840 	stmia.w	ip, {r6, fp}
   820f0:	9114      	str	r1, [sp, #80]	; 0x50
   820f2:	ddf0      	ble.n	820d6 <_vfiprintf_r+0x94e>
   820f4:	b9ba      	cbnz	r2, 82126 <_vfiprintf_r+0x99e>
   820f6:	3d10      	subs	r5, #16
   820f8:	2d10      	cmp	r5, #16
   820fa:	f04f 0001 	mov.w	r0, #1
   820fe:	4613      	mov	r3, r2
   82100:	46cc      	mov	ip, r9
   82102:	dcef      	bgt.n	820e4 <_vfiprintf_r+0x95c>
   82104:	4633      	mov	r3, r6
   82106:	4666      	mov	r6, ip
   82108:	46a4      	mov	ip, r4
   8210a:	462c      	mov	r4, r5
   8210c:	461d      	mov	r5, r3
   8210e:	4422      	add	r2, r4
   82110:	2807      	cmp	r0, #7
   82112:	9215      	str	r2, [sp, #84]	; 0x54
   82114:	6035      	str	r5, [r6, #0]
   82116:	6074      	str	r4, [r6, #4]
   82118:	9014      	str	r0, [sp, #80]	; 0x50
   8211a:	f300 80af 	bgt.w	8227c <_vfiprintf_r+0xaf4>
   8211e:	3608      	adds	r6, #8
   82120:	1c41      	adds	r1, r0, #1
   82122:	4603      	mov	r3, r0
   82124:	e6c2      	b.n	81eac <_vfiprintf_r+0x724>
   82126:	9806      	ldr	r0, [sp, #24]
   82128:	9902      	ldr	r1, [sp, #8]
   8212a:	aa13      	add	r2, sp, #76	; 0x4c
   8212c:	f7ff faf0 	bl	81710 <__sprint_r.part.0>
   82130:	2800      	cmp	r0, #0
   82132:	f47f af7c 	bne.w	8202e <_vfiprintf_r+0x8a6>
   82136:	9b14      	ldr	r3, [sp, #80]	; 0x50
   82138:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8213a:	1c58      	adds	r0, r3, #1
   8213c:	46cc      	mov	ip, r9
   8213e:	e7ce      	b.n	820de <_vfiprintf_r+0x956>
   82140:	2a00      	cmp	r2, #0
   82142:	d179      	bne.n	82238 <_vfiprintf_r+0xab0>
   82144:	4619      	mov	r1, r3
   82146:	464e      	mov	r6, r9
   82148:	4613      	mov	r3, r2
   8214a:	e69c      	b.n	81e86 <_vfiprintf_r+0x6fe>
   8214c:	2a00      	cmp	r2, #0
   8214e:	f040 8084 	bne.w	8225a <_vfiprintf_r+0xad2>
   82152:	2101      	movs	r1, #1
   82154:	4613      	mov	r3, r2
   82156:	464e      	mov	r6, r9
   82158:	e6a4      	b.n	81ea4 <_vfiprintf_r+0x71c>
   8215a:	464f      	mov	r7, r9
   8215c:	e448      	b.n	819f0 <_vfiprintf_r+0x268>
   8215e:	2d00      	cmp	r5, #0
   82160:	bf08      	it	eq
   82162:	2c0a      	cmpeq	r4, #10
   82164:	d246      	bcs.n	821f4 <_vfiprintf_r+0xa6c>
   82166:	3430      	adds	r4, #48	; 0x30
   82168:	af30      	add	r7, sp, #192	; 0xc0
   8216a:	f807 4d41 	strb.w	r4, [r7, #-65]!
   8216e:	ebc7 0309 	rsb	r3, r7, r9
   82172:	9305      	str	r3, [sp, #20]
   82174:	e43c      	b.n	819f0 <_vfiprintf_r+0x268>
   82176:	2302      	movs	r3, #2
   82178:	e417      	b.n	819aa <_vfiprintf_r+0x222>
   8217a:	2a00      	cmp	r2, #0
   8217c:	f040 80af 	bne.w	822de <_vfiprintf_r+0xb56>
   82180:	4613      	mov	r3, r2
   82182:	2101      	movs	r1, #1
   82184:	464e      	mov	r6, r9
   82186:	e66d      	b.n	81e64 <_vfiprintf_r+0x6dc>
   82188:	4644      	mov	r4, r8
   8218a:	f7ff bb58 	b.w	8183e <_vfiprintf_r+0xb6>
   8218e:	9806      	ldr	r0, [sp, #24]
   82190:	9902      	ldr	r1, [sp, #8]
   82192:	aa13      	add	r2, sp, #76	; 0x4c
   82194:	f7ff fabc 	bl	81710 <__sprint_r.part.0>
   82198:	2800      	cmp	r0, #0
   8219a:	f47f af48 	bne.w	8202e <_vfiprintf_r+0x8a6>
   8219e:	9a15      	ldr	r2, [sp, #84]	; 0x54
   821a0:	464e      	mov	r6, r9
   821a2:	e6c6      	b.n	81f32 <_vfiprintf_r+0x7aa>
   821a4:	9d08      	ldr	r5, [sp, #32]
   821a6:	682c      	ldr	r4, [r5, #0]
   821a8:	3504      	adds	r5, #4
   821aa:	9508      	str	r5, [sp, #32]
   821ac:	2500      	movs	r5, #0
   821ae:	f7ff bbfc 	b.w	819aa <_vfiprintf_r+0x222>
   821b2:	9d08      	ldr	r5, [sp, #32]
   821b4:	2301      	movs	r3, #1
   821b6:	682c      	ldr	r4, [r5, #0]
   821b8:	3504      	adds	r5, #4
   821ba:	9508      	str	r5, [sp, #32]
   821bc:	2500      	movs	r5, #0
   821be:	f7ff bbf4 	b.w	819aa <_vfiprintf_r+0x222>
   821c2:	9d08      	ldr	r5, [sp, #32]
   821c4:	682c      	ldr	r4, [r5, #0]
   821c6:	3504      	adds	r5, #4
   821c8:	9508      	str	r5, [sp, #32]
   821ca:	2500      	movs	r5, #0
   821cc:	e525      	b.n	81c1a <_vfiprintf_r+0x492>
   821ce:	9d08      	ldr	r5, [sp, #32]
   821d0:	682c      	ldr	r4, [r5, #0]
   821d2:	3504      	adds	r5, #4
   821d4:	9508      	str	r5, [sp, #32]
   821d6:	17e5      	asrs	r5, r4, #31
   821d8:	4622      	mov	r2, r4
   821da:	462b      	mov	r3, r5
   821dc:	e48e      	b.n	81afc <_vfiprintf_r+0x374>
   821de:	9806      	ldr	r0, [sp, #24]
   821e0:	9902      	ldr	r1, [sp, #8]
   821e2:	aa13      	add	r2, sp, #76	; 0x4c
   821e4:	f7ff fa94 	bl	81710 <__sprint_r.part.0>
   821e8:	2800      	cmp	r0, #0
   821ea:	f47f af20 	bne.w	8202e <_vfiprintf_r+0x8a6>
   821ee:	464e      	mov	r6, r9
   821f0:	f7ff bb9a 	b.w	81928 <_vfiprintf_r+0x1a0>
   821f4:	f10d 0b7f 	add.w	fp, sp, #127	; 0x7f
   821f8:	9603      	str	r6, [sp, #12]
   821fa:	465e      	mov	r6, fp
   821fc:	46e3      	mov	fp, ip
   821fe:	4620      	mov	r0, r4
   82200:	4629      	mov	r1, r5
   82202:	220a      	movs	r2, #10
   82204:	2300      	movs	r3, #0
   82206:	f001 fdb9 	bl	83d7c <__aeabi_uldivmod>
   8220a:	3230      	adds	r2, #48	; 0x30
   8220c:	7032      	strb	r2, [r6, #0]
   8220e:	4620      	mov	r0, r4
   82210:	4629      	mov	r1, r5
   82212:	220a      	movs	r2, #10
   82214:	2300      	movs	r3, #0
   82216:	f001 fdb1 	bl	83d7c <__aeabi_uldivmod>
   8221a:	4604      	mov	r4, r0
   8221c:	460d      	mov	r5, r1
   8221e:	ea54 0005 	orrs.w	r0, r4, r5
   82222:	4637      	mov	r7, r6
   82224:	f106 36ff 	add.w	r6, r6, #4294967295
   82228:	d1e9      	bne.n	821fe <_vfiprintf_r+0xa76>
   8222a:	ebc7 0309 	rsb	r3, r7, r9
   8222e:	46dc      	mov	ip, fp
   82230:	9e03      	ldr	r6, [sp, #12]
   82232:	9305      	str	r3, [sp, #20]
   82234:	f7ff bbdc 	b.w	819f0 <_vfiprintf_r+0x268>
   82238:	9806      	ldr	r0, [sp, #24]
   8223a:	9902      	ldr	r1, [sp, #8]
   8223c:	aa13      	add	r2, sp, #76	; 0x4c
   8223e:	f8cd c004 	str.w	ip, [sp, #4]
   82242:	f7ff fa65 	bl	81710 <__sprint_r.part.0>
   82246:	f8dd c004 	ldr.w	ip, [sp, #4]
   8224a:	2800      	cmp	r0, #0
   8224c:	f47f aeef 	bne.w	8202e <_vfiprintf_r+0x8a6>
   82250:	9b14      	ldr	r3, [sp, #80]	; 0x50
   82252:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82254:	1c59      	adds	r1, r3, #1
   82256:	464e      	mov	r6, r9
   82258:	e615      	b.n	81e86 <_vfiprintf_r+0x6fe>
   8225a:	9806      	ldr	r0, [sp, #24]
   8225c:	9902      	ldr	r1, [sp, #8]
   8225e:	aa13      	add	r2, sp, #76	; 0x4c
   82260:	f8cd c004 	str.w	ip, [sp, #4]
   82264:	f7ff fa54 	bl	81710 <__sprint_r.part.0>
   82268:	f8dd c004 	ldr.w	ip, [sp, #4]
   8226c:	2800      	cmp	r0, #0
   8226e:	f47f aede 	bne.w	8202e <_vfiprintf_r+0x8a6>
   82272:	9b14      	ldr	r3, [sp, #80]	; 0x50
   82274:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82276:	1c59      	adds	r1, r3, #1
   82278:	464e      	mov	r6, r9
   8227a:	e613      	b.n	81ea4 <_vfiprintf_r+0x71c>
   8227c:	2a00      	cmp	r2, #0
   8227e:	d156      	bne.n	8232e <_vfiprintf_r+0xba6>
   82280:	2101      	movs	r1, #1
   82282:	4613      	mov	r3, r2
   82284:	464e      	mov	r6, r9
   82286:	e611      	b.n	81eac <_vfiprintf_r+0x724>
   82288:	9806      	ldr	r0, [sp, #24]
   8228a:	9902      	ldr	r1, [sp, #8]
   8228c:	aa13      	add	r2, sp, #76	; 0x4c
   8228e:	f7ff fa3f 	bl	81710 <__sprint_r.part.0>
   82292:	2800      	cmp	r0, #0
   82294:	f47f aecb 	bne.w	8202e <_vfiprintf_r+0x8a6>
   82298:	9914      	ldr	r1, [sp, #80]	; 0x50
   8229a:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8229c:	3101      	adds	r1, #1
   8229e:	464e      	mov	r6, r9
   822a0:	e639      	b.n	81f16 <_vfiprintf_r+0x78e>
   822a2:	f04f 0b2d 	mov.w	fp, #45	; 0x2d
   822a6:	4264      	negs	r4, r4
   822a8:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   822ac:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
   822b0:	f8cd b01c 	str.w	fp, [sp, #28]
   822b4:	f8cd c014 	str.w	ip, [sp, #20]
   822b8:	2301      	movs	r3, #1
   822ba:	f7ff bb7e 	b.w	819ba <_vfiprintf_r+0x232>
   822be:	f01a 0f10 	tst.w	sl, #16
   822c2:	d11d      	bne.n	82300 <_vfiprintf_r+0xb78>
   822c4:	f01a 0f40 	tst.w	sl, #64	; 0x40
   822c8:	d058      	beq.n	8237c <_vfiprintf_r+0xbf4>
   822ca:	9d08      	ldr	r5, [sp, #32]
   822cc:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
   822d0:	682b      	ldr	r3, [r5, #0]
   822d2:	3504      	adds	r5, #4
   822d4:	9508      	str	r5, [sp, #32]
   822d6:	f8a3 b000 	strh.w	fp, [r3]
   822da:	f7ff ba88 	b.w	817ee <_vfiprintf_r+0x66>
   822de:	9806      	ldr	r0, [sp, #24]
   822e0:	9902      	ldr	r1, [sp, #8]
   822e2:	aa13      	add	r2, sp, #76	; 0x4c
   822e4:	f8cd c004 	str.w	ip, [sp, #4]
   822e8:	f7ff fa12 	bl	81710 <__sprint_r.part.0>
   822ec:	f8dd c004 	ldr.w	ip, [sp, #4]
   822f0:	2800      	cmp	r0, #0
   822f2:	f47f ae9c 	bne.w	8202e <_vfiprintf_r+0x8a6>
   822f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
   822f8:	9a15      	ldr	r2, [sp, #84]	; 0x54
   822fa:	1c59      	adds	r1, r3, #1
   822fc:	464e      	mov	r6, r9
   822fe:	e5b1      	b.n	81e64 <_vfiprintf_r+0x6dc>
   82300:	f8dd b020 	ldr.w	fp, [sp, #32]
   82304:	9c09      	ldr	r4, [sp, #36]	; 0x24
   82306:	f8db 3000 	ldr.w	r3, [fp]
   8230a:	f10b 0b04 	add.w	fp, fp, #4
   8230e:	f8cd b020 	str.w	fp, [sp, #32]
   82312:	601c      	str	r4, [r3, #0]
   82314:	f7ff ba6b 	b.w	817ee <_vfiprintf_r+0x66>
   82318:	9408      	str	r4, [sp, #32]
   8231a:	f7ff f9c9 	bl	816b0 <strlen>
   8231e:	f89d 4047 	ldrb.w	r4, [sp, #71]	; 0x47
   82322:	9005      	str	r0, [sp, #20]
   82324:	9407      	str	r4, [sp, #28]
   82326:	f04f 0c00 	mov.w	ip, #0
   8232a:	f7ff bb61 	b.w	819f0 <_vfiprintf_r+0x268>
   8232e:	9806      	ldr	r0, [sp, #24]
   82330:	9902      	ldr	r1, [sp, #8]
   82332:	aa13      	add	r2, sp, #76	; 0x4c
   82334:	f8cd c004 	str.w	ip, [sp, #4]
   82338:	f7ff f9ea 	bl	81710 <__sprint_r.part.0>
   8233c:	f8dd c004 	ldr.w	ip, [sp, #4]
   82340:	2800      	cmp	r0, #0
   82342:	f47f ae74 	bne.w	8202e <_vfiprintf_r+0x8a6>
   82346:	9b14      	ldr	r3, [sp, #80]	; 0x50
   82348:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8234a:	1c59      	adds	r1, r3, #1
   8234c:	464e      	mov	r6, r9
   8234e:	e5ad      	b.n	81eac <_vfiprintf_r+0x724>
   82350:	9b14      	ldr	r3, [sp, #80]	; 0x50
   82352:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82354:	3301      	adds	r3, #1
   82356:	4d02      	ldr	r5, [pc, #8]	; (82360 <_vfiprintf_r+0xbd8>)
   82358:	f7ff bb9a 	b.w	81a90 <_vfiprintf_r+0x308>
   8235c:	00084860 	.word	0x00084860
   82360:	00084870 	.word	0x00084870
   82364:	f1bc 0f06 	cmp.w	ip, #6
   82368:	bf34      	ite	cc
   8236a:	4663      	movcc	r3, ip
   8236c:	2306      	movcs	r3, #6
   8236e:	9408      	str	r4, [sp, #32]
   82370:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
   82374:	9305      	str	r3, [sp, #20]
   82376:	9403      	str	r4, [sp, #12]
   82378:	4f16      	ldr	r7, [pc, #88]	; (823d4 <_vfiprintf_r+0xc4c>)
   8237a:	e472      	b.n	81c62 <_vfiprintf_r+0x4da>
   8237c:	9c08      	ldr	r4, [sp, #32]
   8237e:	9d09      	ldr	r5, [sp, #36]	; 0x24
   82380:	6823      	ldr	r3, [r4, #0]
   82382:	3404      	adds	r4, #4
   82384:	9408      	str	r4, [sp, #32]
   82386:	601d      	str	r5, [r3, #0]
   82388:	f7ff ba31 	b.w	817ee <_vfiprintf_r+0x66>
   8238c:	9814      	ldr	r0, [sp, #80]	; 0x50
   8238e:	4d12      	ldr	r5, [pc, #72]	; (823d8 <_vfiprintf_r+0xc50>)
   82390:	3001      	adds	r0, #1
   82392:	e5fc      	b.n	81f8e <_vfiprintf_r+0x806>
   82394:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
   82398:	f8cd c014 	str.w	ip, [sp, #20]
   8239c:	9507      	str	r5, [sp, #28]
   8239e:	9408      	str	r4, [sp, #32]
   823a0:	4684      	mov	ip, r0
   823a2:	f7ff bb25 	b.w	819f0 <_vfiprintf_r+0x268>
   823a6:	4608      	mov	r0, r1
   823a8:	e6b1      	b.n	8210e <_vfiprintf_r+0x986>
   823aa:	46a0      	mov	r8, r4
   823ac:	2500      	movs	r5, #0
   823ae:	f7ff ba5a 	b.w	81866 <_vfiprintf_r+0xde>
   823b2:	f8dd b020 	ldr.w	fp, [sp, #32]
   823b6:	f898 3001 	ldrb.w	r3, [r8, #1]
   823ba:	f8db 5000 	ldr.w	r5, [fp]
   823be:	f10b 0204 	add.w	r2, fp, #4
   823c2:	2d00      	cmp	r5, #0
   823c4:	9208      	str	r2, [sp, #32]
   823c6:	46a0      	mov	r8, r4
   823c8:	f6bf aa4b 	bge.w	81862 <_vfiprintf_r+0xda>
   823cc:	f04f 35ff 	mov.w	r5, #4294967295
   823d0:	f7ff ba47 	b.w	81862 <_vfiprintf_r+0xda>
   823d4:	00084858 	.word	0x00084858
   823d8:	00084870 	.word	0x00084870

000823dc <__sbprintf>:
   823dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   823e0:	6e4f      	ldr	r7, [r1, #100]	; 0x64
   823e2:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   823e6:	4688      	mov	r8, r1
   823e8:	9719      	str	r7, [sp, #100]	; 0x64
   823ea:	f8d8 701c 	ldr.w	r7, [r8, #28]
   823ee:	f8b1 a00c 	ldrh.w	sl, [r1, #12]
   823f2:	f8b1 900e 	ldrh.w	r9, [r1, #14]
   823f6:	9707      	str	r7, [sp, #28]
   823f8:	f8d8 7024 	ldr.w	r7, [r8, #36]	; 0x24
   823fc:	ac1a      	add	r4, sp, #104	; 0x68
   823fe:	f44f 6580 	mov.w	r5, #1024	; 0x400
   82402:	f02a 0a02 	bic.w	sl, sl, #2
   82406:	2600      	movs	r6, #0
   82408:	4669      	mov	r1, sp
   8240a:	9400      	str	r4, [sp, #0]
   8240c:	9404      	str	r4, [sp, #16]
   8240e:	9502      	str	r5, [sp, #8]
   82410:	9505      	str	r5, [sp, #20]
   82412:	f8ad a00c 	strh.w	sl, [sp, #12]
   82416:	f8ad 900e 	strh.w	r9, [sp, #14]
   8241a:	9709      	str	r7, [sp, #36]	; 0x24
   8241c:	9606      	str	r6, [sp, #24]
   8241e:	4605      	mov	r5, r0
   82420:	f7ff f9b2 	bl	81788 <_vfiprintf_r>
   82424:	1e04      	subs	r4, r0, #0
   82426:	db07      	blt.n	82438 <__sbprintf+0x5c>
   82428:	4628      	mov	r0, r5
   8242a:	4669      	mov	r1, sp
   8242c:	f000 f92a 	bl	82684 <_fflush_r>
   82430:	42b0      	cmp	r0, r6
   82432:	bf18      	it	ne
   82434:	f04f 34ff 	movne.w	r4, #4294967295
   82438:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   8243c:	065b      	lsls	r3, r3, #25
   8243e:	d505      	bpl.n	8244c <__sbprintf+0x70>
   82440:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   82444:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82448:	f8a8 300c 	strh.w	r3, [r8, #12]
   8244c:	4620      	mov	r0, r4
   8244e:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   82452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   82456:	bf00      	nop

00082458 <__swsetup_r>:
   82458:	4b2f      	ldr	r3, [pc, #188]	; (82518 <__swsetup_r+0xc0>)
   8245a:	b570      	push	{r4, r5, r6, lr}
   8245c:	4606      	mov	r6, r0
   8245e:	6818      	ldr	r0, [r3, #0]
   82460:	460c      	mov	r4, r1
   82462:	b110      	cbz	r0, 8246a <__swsetup_r+0x12>
   82464:	6b82      	ldr	r2, [r0, #56]	; 0x38
   82466:	2a00      	cmp	r2, #0
   82468:	d036      	beq.n	824d8 <__swsetup_r+0x80>
   8246a:	89a5      	ldrh	r5, [r4, #12]
   8246c:	b2ab      	uxth	r3, r5
   8246e:	0719      	lsls	r1, r3, #28
   82470:	d50c      	bpl.n	8248c <__swsetup_r+0x34>
   82472:	6922      	ldr	r2, [r4, #16]
   82474:	b1aa      	cbz	r2, 824a2 <__swsetup_r+0x4a>
   82476:	f013 0101 	ands.w	r1, r3, #1
   8247a:	d01e      	beq.n	824ba <__swsetup_r+0x62>
   8247c:	6963      	ldr	r3, [r4, #20]
   8247e:	2100      	movs	r1, #0
   82480:	425b      	negs	r3, r3
   82482:	61a3      	str	r3, [r4, #24]
   82484:	60a1      	str	r1, [r4, #8]
   82486:	b1f2      	cbz	r2, 824c6 <__swsetup_r+0x6e>
   82488:	2000      	movs	r0, #0
   8248a:	bd70      	pop	{r4, r5, r6, pc}
   8248c:	06da      	lsls	r2, r3, #27
   8248e:	d53a      	bpl.n	82506 <__swsetup_r+0xae>
   82490:	075b      	lsls	r3, r3, #29
   82492:	d424      	bmi.n	824de <__swsetup_r+0x86>
   82494:	6922      	ldr	r2, [r4, #16]
   82496:	f045 0308 	orr.w	r3, r5, #8
   8249a:	81a3      	strh	r3, [r4, #12]
   8249c:	b29b      	uxth	r3, r3
   8249e:	2a00      	cmp	r2, #0
   824a0:	d1e9      	bne.n	82476 <__swsetup_r+0x1e>
   824a2:	f403 7120 	and.w	r1, r3, #640	; 0x280
   824a6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   824aa:	d0e4      	beq.n	82476 <__swsetup_r+0x1e>
   824ac:	4630      	mov	r0, r6
   824ae:	4621      	mov	r1, r4
   824b0:	f000 fcce 	bl	82e50 <__smakebuf_r>
   824b4:	89a3      	ldrh	r3, [r4, #12]
   824b6:	6922      	ldr	r2, [r4, #16]
   824b8:	e7dd      	b.n	82476 <__swsetup_r+0x1e>
   824ba:	0798      	lsls	r0, r3, #30
   824bc:	bf58      	it	pl
   824be:	6961      	ldrpl	r1, [r4, #20]
   824c0:	60a1      	str	r1, [r4, #8]
   824c2:	2a00      	cmp	r2, #0
   824c4:	d1e0      	bne.n	82488 <__swsetup_r+0x30>
   824c6:	89a3      	ldrh	r3, [r4, #12]
   824c8:	061a      	lsls	r2, r3, #24
   824ca:	d5dd      	bpl.n	82488 <__swsetup_r+0x30>
   824cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   824d0:	81a3      	strh	r3, [r4, #12]
   824d2:	f04f 30ff 	mov.w	r0, #4294967295
   824d6:	bd70      	pop	{r4, r5, r6, pc}
   824d8:	f000 f8f0 	bl	826bc <__sinit>
   824dc:	e7c5      	b.n	8246a <__swsetup_r+0x12>
   824de:	6b21      	ldr	r1, [r4, #48]	; 0x30
   824e0:	b149      	cbz	r1, 824f6 <__swsetup_r+0x9e>
   824e2:	f104 0340 	add.w	r3, r4, #64	; 0x40
   824e6:	4299      	cmp	r1, r3
   824e8:	d003      	beq.n	824f2 <__swsetup_r+0x9a>
   824ea:	4630      	mov	r0, r6
   824ec:	f000 fa2a 	bl	82944 <_free_r>
   824f0:	89a5      	ldrh	r5, [r4, #12]
   824f2:	2300      	movs	r3, #0
   824f4:	6323      	str	r3, [r4, #48]	; 0x30
   824f6:	6922      	ldr	r2, [r4, #16]
   824f8:	f025 0524 	bic.w	r5, r5, #36	; 0x24
   824fc:	2100      	movs	r1, #0
   824fe:	b2ad      	uxth	r5, r5
   82500:	6022      	str	r2, [r4, #0]
   82502:	6061      	str	r1, [r4, #4]
   82504:	e7c7      	b.n	82496 <__swsetup_r+0x3e>
   82506:	f045 0540 	orr.w	r5, r5, #64	; 0x40
   8250a:	2309      	movs	r3, #9
   8250c:	6033      	str	r3, [r6, #0]
   8250e:	f04f 30ff 	mov.w	r0, #4294967295
   82512:	81a5      	strh	r5, [r4, #12]
   82514:	bd70      	pop	{r4, r5, r6, pc}
   82516:	bf00      	nop
   82518:	20070570 	.word	0x20070570

0008251c <register_fini>:
   8251c:	4b02      	ldr	r3, [pc, #8]	; (82528 <register_fini+0xc>)
   8251e:	b113      	cbz	r3, 82526 <register_fini+0xa>
   82520:	4802      	ldr	r0, [pc, #8]	; (8252c <register_fini+0x10>)
   82522:	f000 b805 	b.w	82530 <atexit>
   82526:	4770      	bx	lr
   82528:	00000000 	.word	0x00000000
   8252c:	000827b9 	.word	0x000827b9

00082530 <atexit>:
   82530:	4601      	mov	r1, r0
   82532:	2000      	movs	r0, #0
   82534:	4602      	mov	r2, r0
   82536:	4603      	mov	r3, r0
   82538:	f001 bb24 	b.w	83b84 <__register_exitproc>

0008253c <__sflush_r>:
   8253c:	898b      	ldrh	r3, [r1, #12]
   8253e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82542:	b29a      	uxth	r2, r3
   82544:	460d      	mov	r5, r1
   82546:	0711      	lsls	r1, r2, #28
   82548:	4680      	mov	r8, r0
   8254a:	d43c      	bmi.n	825c6 <__sflush_r+0x8a>
   8254c:	686a      	ldr	r2, [r5, #4]
   8254e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   82552:	2a00      	cmp	r2, #0
   82554:	81ab      	strh	r3, [r5, #12]
   82556:	dd59      	ble.n	8260c <__sflush_r+0xd0>
   82558:	6aac      	ldr	r4, [r5, #40]	; 0x28
   8255a:	2c00      	cmp	r4, #0
   8255c:	d04b      	beq.n	825f6 <__sflush_r+0xba>
   8255e:	b29b      	uxth	r3, r3
   82560:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   82564:	2100      	movs	r1, #0
   82566:	b292      	uxth	r2, r2
   82568:	f8d8 6000 	ldr.w	r6, [r8]
   8256c:	f8c8 1000 	str.w	r1, [r8]
   82570:	2a00      	cmp	r2, #0
   82572:	d04f      	beq.n	82614 <__sflush_r+0xd8>
   82574:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   82576:	075f      	lsls	r7, r3, #29
   82578:	d505      	bpl.n	82586 <__sflush_r+0x4a>
   8257a:	6869      	ldr	r1, [r5, #4]
   8257c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   8257e:	1a52      	subs	r2, r2, r1
   82580:	b10b      	cbz	r3, 82586 <__sflush_r+0x4a>
   82582:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   82584:	1ad2      	subs	r2, r2, r3
   82586:	4640      	mov	r0, r8
   82588:	69e9      	ldr	r1, [r5, #28]
   8258a:	2300      	movs	r3, #0
   8258c:	47a0      	blx	r4
   8258e:	1c44      	adds	r4, r0, #1
   82590:	d04a      	beq.n	82628 <__sflush_r+0xec>
   82592:	89ab      	ldrh	r3, [r5, #12]
   82594:	692a      	ldr	r2, [r5, #16]
   82596:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   8259a:	b29b      	uxth	r3, r3
   8259c:	2100      	movs	r1, #0
   8259e:	602a      	str	r2, [r5, #0]
   825a0:	04da      	lsls	r2, r3, #19
   825a2:	81ab      	strh	r3, [r5, #12]
   825a4:	6069      	str	r1, [r5, #4]
   825a6:	d44c      	bmi.n	82642 <__sflush_r+0x106>
   825a8:	6b29      	ldr	r1, [r5, #48]	; 0x30
   825aa:	f8c8 6000 	str.w	r6, [r8]
   825ae:	b311      	cbz	r1, 825f6 <__sflush_r+0xba>
   825b0:	f105 0340 	add.w	r3, r5, #64	; 0x40
   825b4:	4299      	cmp	r1, r3
   825b6:	d002      	beq.n	825be <__sflush_r+0x82>
   825b8:	4640      	mov	r0, r8
   825ba:	f000 f9c3 	bl	82944 <_free_r>
   825be:	2000      	movs	r0, #0
   825c0:	6328      	str	r0, [r5, #48]	; 0x30
   825c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   825c6:	692e      	ldr	r6, [r5, #16]
   825c8:	b1ae      	cbz	r6, 825f6 <__sflush_r+0xba>
   825ca:	0791      	lsls	r1, r2, #30
   825cc:	682c      	ldr	r4, [r5, #0]
   825ce:	bf0c      	ite	eq
   825d0:	696b      	ldreq	r3, [r5, #20]
   825d2:	2300      	movne	r3, #0
   825d4:	602e      	str	r6, [r5, #0]
   825d6:	1ba4      	subs	r4, r4, r6
   825d8:	60ab      	str	r3, [r5, #8]
   825da:	e00a      	b.n	825f2 <__sflush_r+0xb6>
   825dc:	4632      	mov	r2, r6
   825de:	4623      	mov	r3, r4
   825e0:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   825e2:	4640      	mov	r0, r8
   825e4:	69e9      	ldr	r1, [r5, #28]
   825e6:	47b8      	blx	r7
   825e8:	2800      	cmp	r0, #0
   825ea:	ebc0 0404 	rsb	r4, r0, r4
   825ee:	4406      	add	r6, r0
   825f0:	dd04      	ble.n	825fc <__sflush_r+0xc0>
   825f2:	2c00      	cmp	r4, #0
   825f4:	dcf2      	bgt.n	825dc <__sflush_r+0xa0>
   825f6:	2000      	movs	r0, #0
   825f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   825fc:	89ab      	ldrh	r3, [r5, #12]
   825fe:	f04f 30ff 	mov.w	r0, #4294967295
   82602:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82606:	81ab      	strh	r3, [r5, #12]
   82608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8260c:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   8260e:	2a00      	cmp	r2, #0
   82610:	dca2      	bgt.n	82558 <__sflush_r+0x1c>
   82612:	e7f0      	b.n	825f6 <__sflush_r+0xba>
   82614:	2301      	movs	r3, #1
   82616:	4640      	mov	r0, r8
   82618:	69e9      	ldr	r1, [r5, #28]
   8261a:	47a0      	blx	r4
   8261c:	1c43      	adds	r3, r0, #1
   8261e:	4602      	mov	r2, r0
   82620:	d01e      	beq.n	82660 <__sflush_r+0x124>
   82622:	89ab      	ldrh	r3, [r5, #12]
   82624:	6aac      	ldr	r4, [r5, #40]	; 0x28
   82626:	e7a6      	b.n	82576 <__sflush_r+0x3a>
   82628:	f8d8 3000 	ldr.w	r3, [r8]
   8262c:	b95b      	cbnz	r3, 82646 <__sflush_r+0x10a>
   8262e:	89aa      	ldrh	r2, [r5, #12]
   82630:	6929      	ldr	r1, [r5, #16]
   82632:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   82636:	b292      	uxth	r2, r2
   82638:	606b      	str	r3, [r5, #4]
   8263a:	04d3      	lsls	r3, r2, #19
   8263c:	81aa      	strh	r2, [r5, #12]
   8263e:	6029      	str	r1, [r5, #0]
   82640:	d5b2      	bpl.n	825a8 <__sflush_r+0x6c>
   82642:	6528      	str	r0, [r5, #80]	; 0x50
   82644:	e7b0      	b.n	825a8 <__sflush_r+0x6c>
   82646:	2b1d      	cmp	r3, #29
   82648:	d001      	beq.n	8264e <__sflush_r+0x112>
   8264a:	2b16      	cmp	r3, #22
   8264c:	d113      	bne.n	82676 <__sflush_r+0x13a>
   8264e:	89a9      	ldrh	r1, [r5, #12]
   82650:	692b      	ldr	r3, [r5, #16]
   82652:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
   82656:	2200      	movs	r2, #0
   82658:	81a9      	strh	r1, [r5, #12]
   8265a:	602b      	str	r3, [r5, #0]
   8265c:	606a      	str	r2, [r5, #4]
   8265e:	e7a3      	b.n	825a8 <__sflush_r+0x6c>
   82660:	f8d8 3000 	ldr.w	r3, [r8]
   82664:	2b00      	cmp	r3, #0
   82666:	d0dc      	beq.n	82622 <__sflush_r+0xe6>
   82668:	2b1d      	cmp	r3, #29
   8266a:	d001      	beq.n	82670 <__sflush_r+0x134>
   8266c:	2b16      	cmp	r3, #22
   8266e:	d1c5      	bne.n	825fc <__sflush_r+0xc0>
   82670:	f8c8 6000 	str.w	r6, [r8]
   82674:	e7bf      	b.n	825f6 <__sflush_r+0xba>
   82676:	89ab      	ldrh	r3, [r5, #12]
   82678:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8267c:	81ab      	strh	r3, [r5, #12]
   8267e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82682:	bf00      	nop

00082684 <_fflush_r>:
   82684:	b510      	push	{r4, lr}
   82686:	4604      	mov	r4, r0
   82688:	b082      	sub	sp, #8
   8268a:	b108      	cbz	r0, 82690 <_fflush_r+0xc>
   8268c:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8268e:	b153      	cbz	r3, 826a6 <_fflush_r+0x22>
   82690:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   82694:	b908      	cbnz	r0, 8269a <_fflush_r+0x16>
   82696:	b002      	add	sp, #8
   82698:	bd10      	pop	{r4, pc}
   8269a:	4620      	mov	r0, r4
   8269c:	b002      	add	sp, #8
   8269e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   826a2:	f7ff bf4b 	b.w	8253c <__sflush_r>
   826a6:	9101      	str	r1, [sp, #4]
   826a8:	f000 f808 	bl	826bc <__sinit>
   826ac:	9901      	ldr	r1, [sp, #4]
   826ae:	e7ef      	b.n	82690 <_fflush_r+0xc>

000826b0 <_cleanup_r>:
   826b0:	4901      	ldr	r1, [pc, #4]	; (826b8 <_cleanup_r+0x8>)
   826b2:	f000 bb9f 	b.w	82df4 <_fwalk>
   826b6:	bf00      	nop
   826b8:	00083cd1 	.word	0x00083cd1

000826bc <__sinit>:
   826bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   826c0:	6b84      	ldr	r4, [r0, #56]	; 0x38
   826c2:	b083      	sub	sp, #12
   826c4:	4607      	mov	r7, r0
   826c6:	2c00      	cmp	r4, #0
   826c8:	d165      	bne.n	82796 <__sinit+0xda>
   826ca:	687d      	ldr	r5, [r7, #4]
   826cc:	4833      	ldr	r0, [pc, #204]	; (8279c <__sinit+0xe0>)
   826ce:	2304      	movs	r3, #4
   826d0:	2103      	movs	r1, #3
   826d2:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   826d6:	63f8      	str	r0, [r7, #60]	; 0x3c
   826d8:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   826dc:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   826e0:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   826e4:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   826e8:	81ab      	strh	r3, [r5, #12]
   826ea:	602c      	str	r4, [r5, #0]
   826ec:	606c      	str	r4, [r5, #4]
   826ee:	60ac      	str	r4, [r5, #8]
   826f0:	666c      	str	r4, [r5, #100]	; 0x64
   826f2:	81ec      	strh	r4, [r5, #14]
   826f4:	612c      	str	r4, [r5, #16]
   826f6:	616c      	str	r4, [r5, #20]
   826f8:	61ac      	str	r4, [r5, #24]
   826fa:	4621      	mov	r1, r4
   826fc:	2208      	movs	r2, #8
   826fe:	f7fe fecd 	bl	8149c <memset>
   82702:	f8df b09c 	ldr.w	fp, [pc, #156]	; 827a0 <__sinit+0xe4>
   82706:	68be      	ldr	r6, [r7, #8]
   82708:	f8df a098 	ldr.w	sl, [pc, #152]	; 827a4 <__sinit+0xe8>
   8270c:	f8df 9098 	ldr.w	r9, [pc, #152]	; 827a8 <__sinit+0xec>
   82710:	f8df 8098 	ldr.w	r8, [pc, #152]	; 827ac <__sinit+0xf0>
   82714:	2301      	movs	r3, #1
   82716:	2209      	movs	r2, #9
   82718:	61ed      	str	r5, [r5, #28]
   8271a:	f8c5 b020 	str.w	fp, [r5, #32]
   8271e:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   82722:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   82726:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   8272a:	4621      	mov	r1, r4
   8272c:	81f3      	strh	r3, [r6, #14]
   8272e:	81b2      	strh	r2, [r6, #12]
   82730:	6034      	str	r4, [r6, #0]
   82732:	6074      	str	r4, [r6, #4]
   82734:	60b4      	str	r4, [r6, #8]
   82736:	6674      	str	r4, [r6, #100]	; 0x64
   82738:	6134      	str	r4, [r6, #16]
   8273a:	6174      	str	r4, [r6, #20]
   8273c:	61b4      	str	r4, [r6, #24]
   8273e:	2208      	movs	r2, #8
   82740:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   82744:	9301      	str	r3, [sp, #4]
   82746:	f7fe fea9 	bl	8149c <memset>
   8274a:	68fd      	ldr	r5, [r7, #12]
   8274c:	2012      	movs	r0, #18
   8274e:	2202      	movs	r2, #2
   82750:	61f6      	str	r6, [r6, #28]
   82752:	f8c6 b020 	str.w	fp, [r6, #32]
   82756:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   8275a:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   8275e:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   82762:	4621      	mov	r1, r4
   82764:	81a8      	strh	r0, [r5, #12]
   82766:	81ea      	strh	r2, [r5, #14]
   82768:	602c      	str	r4, [r5, #0]
   8276a:	606c      	str	r4, [r5, #4]
   8276c:	60ac      	str	r4, [r5, #8]
   8276e:	666c      	str	r4, [r5, #100]	; 0x64
   82770:	612c      	str	r4, [r5, #16]
   82772:	616c      	str	r4, [r5, #20]
   82774:	61ac      	str	r4, [r5, #24]
   82776:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   8277a:	2208      	movs	r2, #8
   8277c:	f7fe fe8e 	bl	8149c <memset>
   82780:	9b01      	ldr	r3, [sp, #4]
   82782:	61ed      	str	r5, [r5, #28]
   82784:	f8c5 b020 	str.w	fp, [r5, #32]
   82788:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   8278c:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   82790:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   82794:	63bb      	str	r3, [r7, #56]	; 0x38
   82796:	b003      	add	sp, #12
   82798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8279c:	000826b1 	.word	0x000826b1
   827a0:	000839c5 	.word	0x000839c5
   827a4:	000839e9 	.word	0x000839e9
   827a8:	00083a21 	.word	0x00083a21
   827ac:	00083a41 	.word	0x00083a41

000827b0 <__sfp_lock_acquire>:
   827b0:	4770      	bx	lr
   827b2:	bf00      	nop

000827b4 <__sfp_lock_release>:
   827b4:	4770      	bx	lr
   827b6:	bf00      	nop

000827b8 <__libc_fini_array>:
   827b8:	b538      	push	{r3, r4, r5, lr}
   827ba:	4d09      	ldr	r5, [pc, #36]	; (827e0 <__libc_fini_array+0x28>)
   827bc:	4c09      	ldr	r4, [pc, #36]	; (827e4 <__libc_fini_array+0x2c>)
   827be:	1b64      	subs	r4, r4, r5
   827c0:	10a4      	asrs	r4, r4, #2
   827c2:	bf18      	it	ne
   827c4:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
   827c8:	d005      	beq.n	827d6 <__libc_fini_array+0x1e>
   827ca:	3c01      	subs	r4, #1
   827cc:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   827d0:	4798      	blx	r3
   827d2:	2c00      	cmp	r4, #0
   827d4:	d1f9      	bne.n	827ca <__libc_fini_array+0x12>
   827d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   827da:	f002 b85b 	b.w	84894 <_fini>
   827de:	bf00      	nop
   827e0:	000848a0 	.word	0x000848a0
   827e4:	000848a4 	.word	0x000848a4

000827e8 <_fputwc_r>:
   827e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   827ec:	8993      	ldrh	r3, [r2, #12]
   827ee:	460f      	mov	r7, r1
   827f0:	0499      	lsls	r1, r3, #18
   827f2:	b082      	sub	sp, #8
   827f4:	4614      	mov	r4, r2
   827f6:	4680      	mov	r8, r0
   827f8:	d406      	bmi.n	82808 <_fputwc_r+0x20>
   827fa:	6e52      	ldr	r2, [r2, #100]	; 0x64
   827fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   82800:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   82804:	81a3      	strh	r3, [r4, #12]
   82806:	6662      	str	r2, [r4, #100]	; 0x64
   82808:	f000 fb1c 	bl	82e44 <__locale_mb_cur_max>
   8280c:	2801      	cmp	r0, #1
   8280e:	d03e      	beq.n	8288e <_fputwc_r+0xa6>
   82810:	463a      	mov	r2, r7
   82812:	4640      	mov	r0, r8
   82814:	a901      	add	r1, sp, #4
   82816:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   8281a:	f001 f969 	bl	83af0 <_wcrtomb_r>
   8281e:	1c42      	adds	r2, r0, #1
   82820:	4606      	mov	r6, r0
   82822:	d02d      	beq.n	82880 <_fputwc_r+0x98>
   82824:	2800      	cmp	r0, #0
   82826:	d03a      	beq.n	8289e <_fputwc_r+0xb6>
   82828:	f89d 1004 	ldrb.w	r1, [sp, #4]
   8282c:	2500      	movs	r5, #0
   8282e:	e009      	b.n	82844 <_fputwc_r+0x5c>
   82830:	6823      	ldr	r3, [r4, #0]
   82832:	7019      	strb	r1, [r3, #0]
   82834:	6823      	ldr	r3, [r4, #0]
   82836:	3301      	adds	r3, #1
   82838:	6023      	str	r3, [r4, #0]
   8283a:	3501      	adds	r5, #1
   8283c:	42b5      	cmp	r5, r6
   8283e:	d22e      	bcs.n	8289e <_fputwc_r+0xb6>
   82840:	ab01      	add	r3, sp, #4
   82842:	5ce9      	ldrb	r1, [r5, r3]
   82844:	68a3      	ldr	r3, [r4, #8]
   82846:	3b01      	subs	r3, #1
   82848:	2b00      	cmp	r3, #0
   8284a:	60a3      	str	r3, [r4, #8]
   8284c:	daf0      	bge.n	82830 <_fputwc_r+0x48>
   8284e:	69a2      	ldr	r2, [r4, #24]
   82850:	4293      	cmp	r3, r2
   82852:	db06      	blt.n	82862 <_fputwc_r+0x7a>
   82854:	6823      	ldr	r3, [r4, #0]
   82856:	7019      	strb	r1, [r3, #0]
   82858:	6823      	ldr	r3, [r4, #0]
   8285a:	7819      	ldrb	r1, [r3, #0]
   8285c:	3301      	adds	r3, #1
   8285e:	290a      	cmp	r1, #10
   82860:	d1ea      	bne.n	82838 <_fputwc_r+0x50>
   82862:	4640      	mov	r0, r8
   82864:	4622      	mov	r2, r4
   82866:	f001 f8ef 	bl	83a48 <__swbuf_r>
   8286a:	f1b0 33ff 	subs.w	r3, r0, #4294967295
   8286e:	4258      	negs	r0, r3
   82870:	4158      	adcs	r0, r3
   82872:	2800      	cmp	r0, #0
   82874:	d0e1      	beq.n	8283a <_fputwc_r+0x52>
   82876:	f04f 30ff 	mov.w	r0, #4294967295
   8287a:	b002      	add	sp, #8
   8287c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82880:	89a3      	ldrh	r3, [r4, #12]
   82882:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82886:	81a3      	strh	r3, [r4, #12]
   82888:	b002      	add	sp, #8
   8288a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8288e:	1e7b      	subs	r3, r7, #1
   82890:	2bfe      	cmp	r3, #254	; 0xfe
   82892:	d8bd      	bhi.n	82810 <_fputwc_r+0x28>
   82894:	b2f9      	uxtb	r1, r7
   82896:	4606      	mov	r6, r0
   82898:	f88d 1004 	strb.w	r1, [sp, #4]
   8289c:	e7c6      	b.n	8282c <_fputwc_r+0x44>
   8289e:	4638      	mov	r0, r7
   828a0:	b002      	add	sp, #8
   828a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   828a6:	bf00      	nop

000828a8 <_malloc_trim_r>:
   828a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   828aa:	4d23      	ldr	r5, [pc, #140]	; (82938 <_malloc_trim_r+0x90>)
   828ac:	460f      	mov	r7, r1
   828ae:	4604      	mov	r4, r0
   828b0:	f000 fe92 	bl	835d8 <__malloc_lock>
   828b4:	68ab      	ldr	r3, [r5, #8]
   828b6:	685e      	ldr	r6, [r3, #4]
   828b8:	f026 0603 	bic.w	r6, r6, #3
   828bc:	1bf1      	subs	r1, r6, r7
   828be:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   828c2:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   828c6:	f021 010f 	bic.w	r1, r1, #15
   828ca:	f5a1 5780 	sub.w	r7, r1, #4096	; 0x1000
   828ce:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
   828d2:	db07      	blt.n	828e4 <_malloc_trim_r+0x3c>
   828d4:	4620      	mov	r0, r4
   828d6:	2100      	movs	r1, #0
   828d8:	f001 f862 	bl	839a0 <_sbrk_r>
   828dc:	68ab      	ldr	r3, [r5, #8]
   828de:	4433      	add	r3, r6
   828e0:	4298      	cmp	r0, r3
   828e2:	d004      	beq.n	828ee <_malloc_trim_r+0x46>
   828e4:	4620      	mov	r0, r4
   828e6:	f000 fe79 	bl	835dc <__malloc_unlock>
   828ea:	2000      	movs	r0, #0
   828ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   828ee:	4620      	mov	r0, r4
   828f0:	4279      	negs	r1, r7
   828f2:	f001 f855 	bl	839a0 <_sbrk_r>
   828f6:	3001      	adds	r0, #1
   828f8:	d00d      	beq.n	82916 <_malloc_trim_r+0x6e>
   828fa:	4b10      	ldr	r3, [pc, #64]	; (8293c <_malloc_trim_r+0x94>)
   828fc:	68aa      	ldr	r2, [r5, #8]
   828fe:	6819      	ldr	r1, [r3, #0]
   82900:	1bf6      	subs	r6, r6, r7
   82902:	f046 0601 	orr.w	r6, r6, #1
   82906:	4620      	mov	r0, r4
   82908:	1bc9      	subs	r1, r1, r7
   8290a:	6056      	str	r6, [r2, #4]
   8290c:	6019      	str	r1, [r3, #0]
   8290e:	f000 fe65 	bl	835dc <__malloc_unlock>
   82912:	2001      	movs	r0, #1
   82914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82916:	4620      	mov	r0, r4
   82918:	2100      	movs	r1, #0
   8291a:	f001 f841 	bl	839a0 <_sbrk_r>
   8291e:	68ab      	ldr	r3, [r5, #8]
   82920:	1ac2      	subs	r2, r0, r3
   82922:	2a0f      	cmp	r2, #15
   82924:	ddde      	ble.n	828e4 <_malloc_trim_r+0x3c>
   82926:	4d06      	ldr	r5, [pc, #24]	; (82940 <_malloc_trim_r+0x98>)
   82928:	4904      	ldr	r1, [pc, #16]	; (8293c <_malloc_trim_r+0x94>)
   8292a:	682d      	ldr	r5, [r5, #0]
   8292c:	f042 0201 	orr.w	r2, r2, #1
   82930:	1b40      	subs	r0, r0, r5
   82932:	605a      	str	r2, [r3, #4]
   82934:	6008      	str	r0, [r1, #0]
   82936:	e7d5      	b.n	828e4 <_malloc_trim_r+0x3c>
   82938:	20070598 	.word	0x20070598
   8293c:	20070b70 	.word	0x20070b70
   82940:	200709a4 	.word	0x200709a4

00082944 <_free_r>:
   82944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82948:	460d      	mov	r5, r1
   8294a:	4606      	mov	r6, r0
   8294c:	2900      	cmp	r1, #0
   8294e:	d055      	beq.n	829fc <_free_r+0xb8>
   82950:	f000 fe42 	bl	835d8 <__malloc_lock>
   82954:	f855 1c04 	ldr.w	r1, [r5, #-4]
   82958:	f8df c170 	ldr.w	ip, [pc, #368]	; 82acc <_free_r+0x188>
   8295c:	f1a5 0408 	sub.w	r4, r5, #8
   82960:	f021 0301 	bic.w	r3, r1, #1
   82964:	18e2      	adds	r2, r4, r3
   82966:	f8dc 0008 	ldr.w	r0, [ip, #8]
   8296a:	6857      	ldr	r7, [r2, #4]
   8296c:	4290      	cmp	r0, r2
   8296e:	f027 0703 	bic.w	r7, r7, #3
   82972:	d068      	beq.n	82a46 <_free_r+0x102>
   82974:	f011 0101 	ands.w	r1, r1, #1
   82978:	6057      	str	r7, [r2, #4]
   8297a:	d032      	beq.n	829e2 <_free_r+0x9e>
   8297c:	2100      	movs	r1, #0
   8297e:	19d0      	adds	r0, r2, r7
   82980:	6840      	ldr	r0, [r0, #4]
   82982:	07c0      	lsls	r0, r0, #31
   82984:	d406      	bmi.n	82994 <_free_r+0x50>
   82986:	443b      	add	r3, r7
   82988:	6890      	ldr	r0, [r2, #8]
   8298a:	2900      	cmp	r1, #0
   8298c:	d04d      	beq.n	82a2a <_free_r+0xe6>
   8298e:	68d2      	ldr	r2, [r2, #12]
   82990:	60c2      	str	r2, [r0, #12]
   82992:	6090      	str	r0, [r2, #8]
   82994:	f043 0201 	orr.w	r2, r3, #1
   82998:	6062      	str	r2, [r4, #4]
   8299a:	50e3      	str	r3, [r4, r3]
   8299c:	b9e1      	cbnz	r1, 829d8 <_free_r+0x94>
   8299e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   829a2:	d32d      	bcc.n	82a00 <_free_r+0xbc>
   829a4:	0a5a      	lsrs	r2, r3, #9
   829a6:	2a04      	cmp	r2, #4
   829a8:	d869      	bhi.n	82a7e <_free_r+0x13a>
   829aa:	0998      	lsrs	r0, r3, #6
   829ac:	3038      	adds	r0, #56	; 0x38
   829ae:	0041      	lsls	r1, r0, #1
   829b0:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
   829b4:	f8dc 2008 	ldr.w	r2, [ip, #8]
   829b8:	4944      	ldr	r1, [pc, #272]	; (82acc <_free_r+0x188>)
   829ba:	4562      	cmp	r2, ip
   829bc:	d065      	beq.n	82a8a <_free_r+0x146>
   829be:	6851      	ldr	r1, [r2, #4]
   829c0:	f021 0103 	bic.w	r1, r1, #3
   829c4:	428b      	cmp	r3, r1
   829c6:	d202      	bcs.n	829ce <_free_r+0x8a>
   829c8:	6892      	ldr	r2, [r2, #8]
   829ca:	4594      	cmp	ip, r2
   829cc:	d1f7      	bne.n	829be <_free_r+0x7a>
   829ce:	68d3      	ldr	r3, [r2, #12]
   829d0:	60e3      	str	r3, [r4, #12]
   829d2:	60a2      	str	r2, [r4, #8]
   829d4:	609c      	str	r4, [r3, #8]
   829d6:	60d4      	str	r4, [r2, #12]
   829d8:	4630      	mov	r0, r6
   829da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   829de:	f000 bdfd 	b.w	835dc <__malloc_unlock>
   829e2:	f855 5c08 	ldr.w	r5, [r5, #-8]
   829e6:	f10c 0808 	add.w	r8, ip, #8
   829ea:	1b64      	subs	r4, r4, r5
   829ec:	68a0      	ldr	r0, [r4, #8]
   829ee:	442b      	add	r3, r5
   829f0:	4540      	cmp	r0, r8
   829f2:	d042      	beq.n	82a7a <_free_r+0x136>
   829f4:	68e5      	ldr	r5, [r4, #12]
   829f6:	60c5      	str	r5, [r0, #12]
   829f8:	60a8      	str	r0, [r5, #8]
   829fa:	e7c0      	b.n	8297e <_free_r+0x3a>
   829fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82a00:	08db      	lsrs	r3, r3, #3
   82a02:	109a      	asrs	r2, r3, #2
   82a04:	2001      	movs	r0, #1
   82a06:	4090      	lsls	r0, r2
   82a08:	f8dc 1004 	ldr.w	r1, [ip, #4]
   82a0c:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
   82a10:	689a      	ldr	r2, [r3, #8]
   82a12:	4301      	orrs	r1, r0
   82a14:	60a2      	str	r2, [r4, #8]
   82a16:	60e3      	str	r3, [r4, #12]
   82a18:	f8cc 1004 	str.w	r1, [ip, #4]
   82a1c:	4630      	mov	r0, r6
   82a1e:	609c      	str	r4, [r3, #8]
   82a20:	60d4      	str	r4, [r2, #12]
   82a22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   82a26:	f000 bdd9 	b.w	835dc <__malloc_unlock>
   82a2a:	4d29      	ldr	r5, [pc, #164]	; (82ad0 <_free_r+0x18c>)
   82a2c:	42a8      	cmp	r0, r5
   82a2e:	d1ae      	bne.n	8298e <_free_r+0x4a>
   82a30:	f043 0201 	orr.w	r2, r3, #1
   82a34:	f8cc 4014 	str.w	r4, [ip, #20]
   82a38:	f8cc 4010 	str.w	r4, [ip, #16]
   82a3c:	60e0      	str	r0, [r4, #12]
   82a3e:	60a0      	str	r0, [r4, #8]
   82a40:	6062      	str	r2, [r4, #4]
   82a42:	50e3      	str	r3, [r4, r3]
   82a44:	e7c8      	b.n	829d8 <_free_r+0x94>
   82a46:	441f      	add	r7, r3
   82a48:	07cb      	lsls	r3, r1, #31
   82a4a:	d407      	bmi.n	82a5c <_free_r+0x118>
   82a4c:	f855 1c08 	ldr.w	r1, [r5, #-8]
   82a50:	1a64      	subs	r4, r4, r1
   82a52:	68e3      	ldr	r3, [r4, #12]
   82a54:	68a2      	ldr	r2, [r4, #8]
   82a56:	440f      	add	r7, r1
   82a58:	60d3      	str	r3, [r2, #12]
   82a5a:	609a      	str	r2, [r3, #8]
   82a5c:	4b1d      	ldr	r3, [pc, #116]	; (82ad4 <_free_r+0x190>)
   82a5e:	f047 0201 	orr.w	r2, r7, #1
   82a62:	681b      	ldr	r3, [r3, #0]
   82a64:	6062      	str	r2, [r4, #4]
   82a66:	429f      	cmp	r7, r3
   82a68:	f8cc 4008 	str.w	r4, [ip, #8]
   82a6c:	d3b4      	bcc.n	829d8 <_free_r+0x94>
   82a6e:	4b1a      	ldr	r3, [pc, #104]	; (82ad8 <_free_r+0x194>)
   82a70:	4630      	mov	r0, r6
   82a72:	6819      	ldr	r1, [r3, #0]
   82a74:	f7ff ff18 	bl	828a8 <_malloc_trim_r>
   82a78:	e7ae      	b.n	829d8 <_free_r+0x94>
   82a7a:	2101      	movs	r1, #1
   82a7c:	e77f      	b.n	8297e <_free_r+0x3a>
   82a7e:	2a14      	cmp	r2, #20
   82a80:	d80b      	bhi.n	82a9a <_free_r+0x156>
   82a82:	f102 005b 	add.w	r0, r2, #91	; 0x5b
   82a86:	0041      	lsls	r1, r0, #1
   82a88:	e792      	b.n	829b0 <_free_r+0x6c>
   82a8a:	1080      	asrs	r0, r0, #2
   82a8c:	2501      	movs	r5, #1
   82a8e:	4085      	lsls	r5, r0
   82a90:	6848      	ldr	r0, [r1, #4]
   82a92:	4613      	mov	r3, r2
   82a94:	4328      	orrs	r0, r5
   82a96:	6048      	str	r0, [r1, #4]
   82a98:	e79a      	b.n	829d0 <_free_r+0x8c>
   82a9a:	2a54      	cmp	r2, #84	; 0x54
   82a9c:	d803      	bhi.n	82aa6 <_free_r+0x162>
   82a9e:	0b18      	lsrs	r0, r3, #12
   82aa0:	306e      	adds	r0, #110	; 0x6e
   82aa2:	0041      	lsls	r1, r0, #1
   82aa4:	e784      	b.n	829b0 <_free_r+0x6c>
   82aa6:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   82aaa:	d803      	bhi.n	82ab4 <_free_r+0x170>
   82aac:	0bd8      	lsrs	r0, r3, #15
   82aae:	3077      	adds	r0, #119	; 0x77
   82ab0:	0041      	lsls	r1, r0, #1
   82ab2:	e77d      	b.n	829b0 <_free_r+0x6c>
   82ab4:	f240 5154 	movw	r1, #1364	; 0x554
   82ab8:	428a      	cmp	r2, r1
   82aba:	d803      	bhi.n	82ac4 <_free_r+0x180>
   82abc:	0c98      	lsrs	r0, r3, #18
   82abe:	307c      	adds	r0, #124	; 0x7c
   82ac0:	0041      	lsls	r1, r0, #1
   82ac2:	e775      	b.n	829b0 <_free_r+0x6c>
   82ac4:	21fc      	movs	r1, #252	; 0xfc
   82ac6:	207e      	movs	r0, #126	; 0x7e
   82ac8:	e772      	b.n	829b0 <_free_r+0x6c>
   82aca:	bf00      	nop
   82acc:	20070598 	.word	0x20070598
   82ad0:	200705a0 	.word	0x200705a0
   82ad4:	200709a0 	.word	0x200709a0
   82ad8:	20070b6c 	.word	0x20070b6c

00082adc <__sfvwrite_r>:
   82adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82ae0:	6893      	ldr	r3, [r2, #8]
   82ae2:	b083      	sub	sp, #12
   82ae4:	4616      	mov	r6, r2
   82ae6:	4681      	mov	r9, r0
   82ae8:	460c      	mov	r4, r1
   82aea:	b32b      	cbz	r3, 82b38 <__sfvwrite_r+0x5c>
   82aec:	898b      	ldrh	r3, [r1, #12]
   82aee:	0719      	lsls	r1, r3, #28
   82af0:	d526      	bpl.n	82b40 <__sfvwrite_r+0x64>
   82af2:	6922      	ldr	r2, [r4, #16]
   82af4:	b322      	cbz	r2, 82b40 <__sfvwrite_r+0x64>
   82af6:	f003 0202 	and.w	r2, r3, #2
   82afa:	b292      	uxth	r2, r2
   82afc:	6835      	ldr	r5, [r6, #0]
   82afe:	2a00      	cmp	r2, #0
   82b00:	d02c      	beq.n	82b5c <__sfvwrite_r+0x80>
   82b02:	f04f 0a00 	mov.w	sl, #0
   82b06:	f8df b2e8 	ldr.w	fp, [pc, #744]	; 82df0 <__sfvwrite_r+0x314>
   82b0a:	46d0      	mov	r8, sl
   82b0c:	45d8      	cmp	r8, fp
   82b0e:	bf34      	ite	cc
   82b10:	4643      	movcc	r3, r8
   82b12:	465b      	movcs	r3, fp
   82b14:	4652      	mov	r2, sl
   82b16:	4648      	mov	r0, r9
   82b18:	f1b8 0f00 	cmp.w	r8, #0
   82b1c:	d04f      	beq.n	82bbe <__sfvwrite_r+0xe2>
   82b1e:	69e1      	ldr	r1, [r4, #28]
   82b20:	6a67      	ldr	r7, [r4, #36]	; 0x24
   82b22:	47b8      	blx	r7
   82b24:	2800      	cmp	r0, #0
   82b26:	dd56      	ble.n	82bd6 <__sfvwrite_r+0xfa>
   82b28:	68b3      	ldr	r3, [r6, #8]
   82b2a:	4482      	add	sl, r0
   82b2c:	1a1b      	subs	r3, r3, r0
   82b2e:	ebc0 0808 	rsb	r8, r0, r8
   82b32:	60b3      	str	r3, [r6, #8]
   82b34:	2b00      	cmp	r3, #0
   82b36:	d1e9      	bne.n	82b0c <__sfvwrite_r+0x30>
   82b38:	2000      	movs	r0, #0
   82b3a:	b003      	add	sp, #12
   82b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82b40:	4648      	mov	r0, r9
   82b42:	4621      	mov	r1, r4
   82b44:	f7ff fc88 	bl	82458 <__swsetup_r>
   82b48:	2800      	cmp	r0, #0
   82b4a:	f040 8148 	bne.w	82dde <__sfvwrite_r+0x302>
   82b4e:	89a3      	ldrh	r3, [r4, #12]
   82b50:	6835      	ldr	r5, [r6, #0]
   82b52:	f003 0202 	and.w	r2, r3, #2
   82b56:	b292      	uxth	r2, r2
   82b58:	2a00      	cmp	r2, #0
   82b5a:	d1d2      	bne.n	82b02 <__sfvwrite_r+0x26>
   82b5c:	f013 0a01 	ands.w	sl, r3, #1
   82b60:	d142      	bne.n	82be8 <__sfvwrite_r+0x10c>
   82b62:	46d0      	mov	r8, sl
   82b64:	f1b8 0f00 	cmp.w	r8, #0
   82b68:	d023      	beq.n	82bb2 <__sfvwrite_r+0xd6>
   82b6a:	059a      	lsls	r2, r3, #22
   82b6c:	68a7      	ldr	r7, [r4, #8]
   82b6e:	d576      	bpl.n	82c5e <__sfvwrite_r+0x182>
   82b70:	45b8      	cmp	r8, r7
   82b72:	f0c0 80a4 	bcc.w	82cbe <__sfvwrite_r+0x1e2>
   82b76:	f413 6f90 	tst.w	r3, #1152	; 0x480
   82b7a:	f040 80b2 	bne.w	82ce2 <__sfvwrite_r+0x206>
   82b7e:	6820      	ldr	r0, [r4, #0]
   82b80:	46bb      	mov	fp, r7
   82b82:	4651      	mov	r1, sl
   82b84:	465a      	mov	r2, fp
   82b86:	f000 fcc1 	bl	8350c <memmove>
   82b8a:	68a2      	ldr	r2, [r4, #8]
   82b8c:	6821      	ldr	r1, [r4, #0]
   82b8e:	1bd2      	subs	r2, r2, r7
   82b90:	eb01 030b 	add.w	r3, r1, fp
   82b94:	60a2      	str	r2, [r4, #8]
   82b96:	6023      	str	r3, [r4, #0]
   82b98:	4642      	mov	r2, r8
   82b9a:	68b3      	ldr	r3, [r6, #8]
   82b9c:	4492      	add	sl, r2
   82b9e:	1a9b      	subs	r3, r3, r2
   82ba0:	ebc2 0808 	rsb	r8, r2, r8
   82ba4:	60b3      	str	r3, [r6, #8]
   82ba6:	2b00      	cmp	r3, #0
   82ba8:	d0c6      	beq.n	82b38 <__sfvwrite_r+0x5c>
   82baa:	89a3      	ldrh	r3, [r4, #12]
   82bac:	f1b8 0f00 	cmp.w	r8, #0
   82bb0:	d1db      	bne.n	82b6a <__sfvwrite_r+0x8e>
   82bb2:	f8d5 a000 	ldr.w	sl, [r5]
   82bb6:	f8d5 8004 	ldr.w	r8, [r5, #4]
   82bba:	3508      	adds	r5, #8
   82bbc:	e7d2      	b.n	82b64 <__sfvwrite_r+0x88>
   82bbe:	f8d5 a000 	ldr.w	sl, [r5]
   82bc2:	f8d5 8004 	ldr.w	r8, [r5, #4]
   82bc6:	3508      	adds	r5, #8
   82bc8:	e7a0      	b.n	82b0c <__sfvwrite_r+0x30>
   82bca:	4648      	mov	r0, r9
   82bcc:	4621      	mov	r1, r4
   82bce:	f7ff fd59 	bl	82684 <_fflush_r>
   82bd2:	2800      	cmp	r0, #0
   82bd4:	d059      	beq.n	82c8a <__sfvwrite_r+0x1ae>
   82bd6:	89a3      	ldrh	r3, [r4, #12]
   82bd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82bdc:	f04f 30ff 	mov.w	r0, #4294967295
   82be0:	81a3      	strh	r3, [r4, #12]
   82be2:	b003      	add	sp, #12
   82be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82be8:	4692      	mov	sl, r2
   82bea:	9201      	str	r2, [sp, #4]
   82bec:	4693      	mov	fp, r2
   82bee:	4690      	mov	r8, r2
   82bf0:	f1b8 0f00 	cmp.w	r8, #0
   82bf4:	d02b      	beq.n	82c4e <__sfvwrite_r+0x172>
   82bf6:	9f01      	ldr	r7, [sp, #4]
   82bf8:	2f00      	cmp	r7, #0
   82bfa:	d064      	beq.n	82cc6 <__sfvwrite_r+0x1ea>
   82bfc:	6820      	ldr	r0, [r4, #0]
   82bfe:	6921      	ldr	r1, [r4, #16]
   82c00:	45c2      	cmp	sl, r8
   82c02:	bf34      	ite	cc
   82c04:	4653      	movcc	r3, sl
   82c06:	4643      	movcs	r3, r8
   82c08:	4288      	cmp	r0, r1
   82c0a:	461f      	mov	r7, r3
   82c0c:	f8d4 c008 	ldr.w	ip, [r4, #8]
   82c10:	6962      	ldr	r2, [r4, #20]
   82c12:	d903      	bls.n	82c1c <__sfvwrite_r+0x140>
   82c14:	4494      	add	ip, r2
   82c16:	4563      	cmp	r3, ip
   82c18:	f300 80ae 	bgt.w	82d78 <__sfvwrite_r+0x29c>
   82c1c:	4293      	cmp	r3, r2
   82c1e:	db36      	blt.n	82c8e <__sfvwrite_r+0x1b2>
   82c20:	4613      	mov	r3, r2
   82c22:	6a67      	ldr	r7, [r4, #36]	; 0x24
   82c24:	4648      	mov	r0, r9
   82c26:	69e1      	ldr	r1, [r4, #28]
   82c28:	465a      	mov	r2, fp
   82c2a:	47b8      	blx	r7
   82c2c:	1e07      	subs	r7, r0, #0
   82c2e:	ddd2      	ble.n	82bd6 <__sfvwrite_r+0xfa>
   82c30:	ebba 0a07 	subs.w	sl, sl, r7
   82c34:	d03a      	beq.n	82cac <__sfvwrite_r+0x1d0>
   82c36:	68b3      	ldr	r3, [r6, #8]
   82c38:	44bb      	add	fp, r7
   82c3a:	1bdb      	subs	r3, r3, r7
   82c3c:	ebc7 0808 	rsb	r8, r7, r8
   82c40:	60b3      	str	r3, [r6, #8]
   82c42:	2b00      	cmp	r3, #0
   82c44:	f43f af78 	beq.w	82b38 <__sfvwrite_r+0x5c>
   82c48:	f1b8 0f00 	cmp.w	r8, #0
   82c4c:	d1d3      	bne.n	82bf6 <__sfvwrite_r+0x11a>
   82c4e:	2700      	movs	r7, #0
   82c50:	f8d5 b000 	ldr.w	fp, [r5]
   82c54:	f8d5 8004 	ldr.w	r8, [r5, #4]
   82c58:	9701      	str	r7, [sp, #4]
   82c5a:	3508      	adds	r5, #8
   82c5c:	e7c8      	b.n	82bf0 <__sfvwrite_r+0x114>
   82c5e:	6820      	ldr	r0, [r4, #0]
   82c60:	6923      	ldr	r3, [r4, #16]
   82c62:	4298      	cmp	r0, r3
   82c64:	d802      	bhi.n	82c6c <__sfvwrite_r+0x190>
   82c66:	6963      	ldr	r3, [r4, #20]
   82c68:	4598      	cmp	r8, r3
   82c6a:	d272      	bcs.n	82d52 <__sfvwrite_r+0x276>
   82c6c:	45b8      	cmp	r8, r7
   82c6e:	bf38      	it	cc
   82c70:	4647      	movcc	r7, r8
   82c72:	463a      	mov	r2, r7
   82c74:	4651      	mov	r1, sl
   82c76:	f000 fc49 	bl	8350c <memmove>
   82c7a:	68a3      	ldr	r3, [r4, #8]
   82c7c:	6822      	ldr	r2, [r4, #0]
   82c7e:	1bdb      	subs	r3, r3, r7
   82c80:	443a      	add	r2, r7
   82c82:	60a3      	str	r3, [r4, #8]
   82c84:	6022      	str	r2, [r4, #0]
   82c86:	2b00      	cmp	r3, #0
   82c88:	d09f      	beq.n	82bca <__sfvwrite_r+0xee>
   82c8a:	463a      	mov	r2, r7
   82c8c:	e785      	b.n	82b9a <__sfvwrite_r+0xbe>
   82c8e:	461a      	mov	r2, r3
   82c90:	4659      	mov	r1, fp
   82c92:	9300      	str	r3, [sp, #0]
   82c94:	f000 fc3a 	bl	8350c <memmove>
   82c98:	9b00      	ldr	r3, [sp, #0]
   82c9a:	68a1      	ldr	r1, [r4, #8]
   82c9c:	6822      	ldr	r2, [r4, #0]
   82c9e:	1ac9      	subs	r1, r1, r3
   82ca0:	ebba 0a07 	subs.w	sl, sl, r7
   82ca4:	4413      	add	r3, r2
   82ca6:	60a1      	str	r1, [r4, #8]
   82ca8:	6023      	str	r3, [r4, #0]
   82caa:	d1c4      	bne.n	82c36 <__sfvwrite_r+0x15a>
   82cac:	4648      	mov	r0, r9
   82cae:	4621      	mov	r1, r4
   82cb0:	f7ff fce8 	bl	82684 <_fflush_r>
   82cb4:	2800      	cmp	r0, #0
   82cb6:	d18e      	bne.n	82bd6 <__sfvwrite_r+0xfa>
   82cb8:	f8cd a004 	str.w	sl, [sp, #4]
   82cbc:	e7bb      	b.n	82c36 <__sfvwrite_r+0x15a>
   82cbe:	6820      	ldr	r0, [r4, #0]
   82cc0:	4647      	mov	r7, r8
   82cc2:	46c3      	mov	fp, r8
   82cc4:	e75d      	b.n	82b82 <__sfvwrite_r+0xa6>
   82cc6:	4658      	mov	r0, fp
   82cc8:	210a      	movs	r1, #10
   82cca:	4642      	mov	r2, r8
   82ccc:	f000 fbd4 	bl	83478 <memchr>
   82cd0:	2800      	cmp	r0, #0
   82cd2:	d07f      	beq.n	82dd4 <__sfvwrite_r+0x2f8>
   82cd4:	f100 0a01 	add.w	sl, r0, #1
   82cd8:	2701      	movs	r7, #1
   82cda:	ebcb 0a0a 	rsb	sl, fp, sl
   82cde:	9701      	str	r7, [sp, #4]
   82ce0:	e78c      	b.n	82bfc <__sfvwrite_r+0x120>
   82ce2:	6822      	ldr	r2, [r4, #0]
   82ce4:	6921      	ldr	r1, [r4, #16]
   82ce6:	6967      	ldr	r7, [r4, #20]
   82ce8:	ebc1 0c02 	rsb	ip, r1, r2
   82cec:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   82cf0:	f10c 0201 	add.w	r2, ip, #1
   82cf4:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   82cf8:	4442      	add	r2, r8
   82cfa:	107f      	asrs	r7, r7, #1
   82cfc:	4297      	cmp	r7, r2
   82cfe:	bf34      	ite	cc
   82d00:	4617      	movcc	r7, r2
   82d02:	463a      	movcs	r2, r7
   82d04:	055b      	lsls	r3, r3, #21
   82d06:	d54f      	bpl.n	82da8 <__sfvwrite_r+0x2cc>
   82d08:	4611      	mov	r1, r2
   82d0a:	4648      	mov	r0, r9
   82d0c:	f8cd c000 	str.w	ip, [sp]
   82d10:	f000 f916 	bl	82f40 <_malloc_r>
   82d14:	f8dd c000 	ldr.w	ip, [sp]
   82d18:	4683      	mov	fp, r0
   82d1a:	2800      	cmp	r0, #0
   82d1c:	d062      	beq.n	82de4 <__sfvwrite_r+0x308>
   82d1e:	4662      	mov	r2, ip
   82d20:	6921      	ldr	r1, [r4, #16]
   82d22:	f8cd c000 	str.w	ip, [sp]
   82d26:	f7fe fb43 	bl	813b0 <memcpy>
   82d2a:	89a2      	ldrh	r2, [r4, #12]
   82d2c:	f8dd c000 	ldr.w	ip, [sp]
   82d30:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   82d34:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   82d38:	81a2      	strh	r2, [r4, #12]
   82d3a:	eb0b 000c 	add.w	r0, fp, ip
   82d3e:	ebcc 0207 	rsb	r2, ip, r7
   82d42:	f8c4 b010 	str.w	fp, [r4, #16]
   82d46:	6167      	str	r7, [r4, #20]
   82d48:	6020      	str	r0, [r4, #0]
   82d4a:	60a2      	str	r2, [r4, #8]
   82d4c:	4647      	mov	r7, r8
   82d4e:	46c3      	mov	fp, r8
   82d50:	e717      	b.n	82b82 <__sfvwrite_r+0xa6>
   82d52:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   82d56:	4590      	cmp	r8, r2
   82d58:	bf38      	it	cc
   82d5a:	4642      	movcc	r2, r8
   82d5c:	fb92 f2f3 	sdiv	r2, r2, r3
   82d60:	fb02 f303 	mul.w	r3, r2, r3
   82d64:	6a67      	ldr	r7, [r4, #36]	; 0x24
   82d66:	4648      	mov	r0, r9
   82d68:	69e1      	ldr	r1, [r4, #28]
   82d6a:	4652      	mov	r2, sl
   82d6c:	47b8      	blx	r7
   82d6e:	2800      	cmp	r0, #0
   82d70:	f77f af31 	ble.w	82bd6 <__sfvwrite_r+0xfa>
   82d74:	4602      	mov	r2, r0
   82d76:	e710      	b.n	82b9a <__sfvwrite_r+0xbe>
   82d78:	4662      	mov	r2, ip
   82d7a:	4659      	mov	r1, fp
   82d7c:	f8cd c000 	str.w	ip, [sp]
   82d80:	f000 fbc4 	bl	8350c <memmove>
   82d84:	f8dd c000 	ldr.w	ip, [sp]
   82d88:	6823      	ldr	r3, [r4, #0]
   82d8a:	4648      	mov	r0, r9
   82d8c:	4463      	add	r3, ip
   82d8e:	6023      	str	r3, [r4, #0]
   82d90:	4621      	mov	r1, r4
   82d92:	f8cd c000 	str.w	ip, [sp]
   82d96:	f7ff fc75 	bl	82684 <_fflush_r>
   82d9a:	f8dd c000 	ldr.w	ip, [sp]
   82d9e:	2800      	cmp	r0, #0
   82da0:	f47f af19 	bne.w	82bd6 <__sfvwrite_r+0xfa>
   82da4:	4667      	mov	r7, ip
   82da6:	e743      	b.n	82c30 <__sfvwrite_r+0x154>
   82da8:	4648      	mov	r0, r9
   82daa:	f8cd c000 	str.w	ip, [sp]
   82dae:	f000 fc17 	bl	835e0 <_realloc_r>
   82db2:	f8dd c000 	ldr.w	ip, [sp]
   82db6:	4683      	mov	fp, r0
   82db8:	2800      	cmp	r0, #0
   82dba:	d1be      	bne.n	82d3a <__sfvwrite_r+0x25e>
   82dbc:	4648      	mov	r0, r9
   82dbe:	6921      	ldr	r1, [r4, #16]
   82dc0:	f7ff fdc0 	bl	82944 <_free_r>
   82dc4:	89a3      	ldrh	r3, [r4, #12]
   82dc6:	220c      	movs	r2, #12
   82dc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   82dcc:	b29b      	uxth	r3, r3
   82dce:	f8c9 2000 	str.w	r2, [r9]
   82dd2:	e701      	b.n	82bd8 <__sfvwrite_r+0xfc>
   82dd4:	2701      	movs	r7, #1
   82dd6:	f108 0a01 	add.w	sl, r8, #1
   82dda:	9701      	str	r7, [sp, #4]
   82ddc:	e70e      	b.n	82bfc <__sfvwrite_r+0x120>
   82dde:	f04f 30ff 	mov.w	r0, #4294967295
   82de2:	e6aa      	b.n	82b3a <__sfvwrite_r+0x5e>
   82de4:	230c      	movs	r3, #12
   82de6:	f8c9 3000 	str.w	r3, [r9]
   82dea:	89a3      	ldrh	r3, [r4, #12]
   82dec:	e6f4      	b.n	82bd8 <__sfvwrite_r+0xfc>
   82dee:	bf00      	nop
   82df0:	7ffffc00 	.word	0x7ffffc00

00082df4 <_fwalk>:
   82df4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82df8:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
   82dfc:	4688      	mov	r8, r1
   82dfe:	d019      	beq.n	82e34 <_fwalk+0x40>
   82e00:	2600      	movs	r6, #0
   82e02:	687d      	ldr	r5, [r7, #4]
   82e04:	68bc      	ldr	r4, [r7, #8]
   82e06:	3d01      	subs	r5, #1
   82e08:	d40e      	bmi.n	82e28 <_fwalk+0x34>
   82e0a:	89a3      	ldrh	r3, [r4, #12]
   82e0c:	3d01      	subs	r5, #1
   82e0e:	2b01      	cmp	r3, #1
   82e10:	d906      	bls.n	82e20 <_fwalk+0x2c>
   82e12:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   82e16:	4620      	mov	r0, r4
   82e18:	3301      	adds	r3, #1
   82e1a:	d001      	beq.n	82e20 <_fwalk+0x2c>
   82e1c:	47c0      	blx	r8
   82e1e:	4306      	orrs	r6, r0
   82e20:	1c6b      	adds	r3, r5, #1
   82e22:	f104 0468 	add.w	r4, r4, #104	; 0x68
   82e26:	d1f0      	bne.n	82e0a <_fwalk+0x16>
   82e28:	683f      	ldr	r7, [r7, #0]
   82e2a:	2f00      	cmp	r7, #0
   82e2c:	d1e9      	bne.n	82e02 <_fwalk+0xe>
   82e2e:	4630      	mov	r0, r6
   82e30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82e34:	463e      	mov	r6, r7
   82e36:	4630      	mov	r0, r6
   82e38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00082e3c <__locale_charset>:
   82e3c:	4800      	ldr	r0, [pc, #0]	; (82e40 <__locale_charset+0x4>)
   82e3e:	4770      	bx	lr
   82e40:	20070574 	.word	0x20070574

00082e44 <__locale_mb_cur_max>:
   82e44:	4b01      	ldr	r3, [pc, #4]	; (82e4c <__locale_mb_cur_max+0x8>)
   82e46:	6818      	ldr	r0, [r3, #0]
   82e48:	4770      	bx	lr
   82e4a:	bf00      	nop
   82e4c:	20070594 	.word	0x20070594

00082e50 <__smakebuf_r>:
   82e50:	b5f0      	push	{r4, r5, r6, r7, lr}
   82e52:	898b      	ldrh	r3, [r1, #12]
   82e54:	b091      	sub	sp, #68	; 0x44
   82e56:	b29a      	uxth	r2, r3
   82e58:	0796      	lsls	r6, r2, #30
   82e5a:	460c      	mov	r4, r1
   82e5c:	4605      	mov	r5, r0
   82e5e:	d437      	bmi.n	82ed0 <__smakebuf_r+0x80>
   82e60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   82e64:	2900      	cmp	r1, #0
   82e66:	db17      	blt.n	82e98 <__smakebuf_r+0x48>
   82e68:	aa01      	add	r2, sp, #4
   82e6a:	f000 ff39 	bl	83ce0 <_fstat_r>
   82e6e:	2800      	cmp	r0, #0
   82e70:	db10      	blt.n	82e94 <__smakebuf_r+0x44>
   82e72:	9b02      	ldr	r3, [sp, #8]
   82e74:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
   82e78:	f5b3 5100 	subs.w	r1, r3, #8192	; 0x2000
   82e7c:	424f      	negs	r7, r1
   82e7e:	414f      	adcs	r7, r1
   82e80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   82e84:	d02c      	beq.n	82ee0 <__smakebuf_r+0x90>
   82e86:	89a3      	ldrh	r3, [r4, #12]
   82e88:	f44f 6680 	mov.w	r6, #1024	; 0x400
   82e8c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   82e90:	81a3      	strh	r3, [r4, #12]
   82e92:	e00b      	b.n	82eac <__smakebuf_r+0x5c>
   82e94:	89a3      	ldrh	r3, [r4, #12]
   82e96:	b29a      	uxth	r2, r3
   82e98:	f012 0f80 	tst.w	r2, #128	; 0x80
   82e9c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   82ea0:	81a3      	strh	r3, [r4, #12]
   82ea2:	bf14      	ite	ne
   82ea4:	2640      	movne	r6, #64	; 0x40
   82ea6:	f44f 6680 	moveq.w	r6, #1024	; 0x400
   82eaa:	2700      	movs	r7, #0
   82eac:	4628      	mov	r0, r5
   82eae:	4631      	mov	r1, r6
   82eb0:	f000 f846 	bl	82f40 <_malloc_r>
   82eb4:	89a3      	ldrh	r3, [r4, #12]
   82eb6:	2800      	cmp	r0, #0
   82eb8:	d029      	beq.n	82f0e <__smakebuf_r+0xbe>
   82eba:	4a1b      	ldr	r2, [pc, #108]	; (82f28 <__smakebuf_r+0xd8>)
   82ebc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   82ec0:	63ea      	str	r2, [r5, #60]	; 0x3c
   82ec2:	81a3      	strh	r3, [r4, #12]
   82ec4:	6020      	str	r0, [r4, #0]
   82ec6:	6120      	str	r0, [r4, #16]
   82ec8:	6166      	str	r6, [r4, #20]
   82eca:	b9a7      	cbnz	r7, 82ef6 <__smakebuf_r+0xa6>
   82ecc:	b011      	add	sp, #68	; 0x44
   82ece:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82ed0:	f101 0343 	add.w	r3, r1, #67	; 0x43
   82ed4:	2201      	movs	r2, #1
   82ed6:	600b      	str	r3, [r1, #0]
   82ed8:	610b      	str	r3, [r1, #16]
   82eda:	614a      	str	r2, [r1, #20]
   82edc:	b011      	add	sp, #68	; 0x44
   82ede:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82ee0:	4a12      	ldr	r2, [pc, #72]	; (82f2c <__smakebuf_r+0xdc>)
   82ee2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   82ee4:	4293      	cmp	r3, r2
   82ee6:	d1ce      	bne.n	82e86 <__smakebuf_r+0x36>
   82ee8:	89a3      	ldrh	r3, [r4, #12]
   82eea:	f44f 6680 	mov.w	r6, #1024	; 0x400
   82eee:	4333      	orrs	r3, r6
   82ef0:	81a3      	strh	r3, [r4, #12]
   82ef2:	64e6      	str	r6, [r4, #76]	; 0x4c
   82ef4:	e7da      	b.n	82eac <__smakebuf_r+0x5c>
   82ef6:	4628      	mov	r0, r5
   82ef8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   82efc:	f000 ff04 	bl	83d08 <_isatty_r>
   82f00:	2800      	cmp	r0, #0
   82f02:	d0e3      	beq.n	82ecc <__smakebuf_r+0x7c>
   82f04:	89a3      	ldrh	r3, [r4, #12]
   82f06:	f043 0301 	orr.w	r3, r3, #1
   82f0a:	81a3      	strh	r3, [r4, #12]
   82f0c:	e7de      	b.n	82ecc <__smakebuf_r+0x7c>
   82f0e:	059a      	lsls	r2, r3, #22
   82f10:	d4dc      	bmi.n	82ecc <__smakebuf_r+0x7c>
   82f12:	f104 0243 	add.w	r2, r4, #67	; 0x43
   82f16:	f043 0302 	orr.w	r3, r3, #2
   82f1a:	2101      	movs	r1, #1
   82f1c:	81a3      	strh	r3, [r4, #12]
   82f1e:	6022      	str	r2, [r4, #0]
   82f20:	6122      	str	r2, [r4, #16]
   82f22:	6161      	str	r1, [r4, #20]
   82f24:	e7d2      	b.n	82ecc <__smakebuf_r+0x7c>
   82f26:	bf00      	nop
   82f28:	000826b1 	.word	0x000826b1
   82f2c:	00083a21 	.word	0x00083a21

00082f30 <malloc>:
   82f30:	4b02      	ldr	r3, [pc, #8]	; (82f3c <malloc+0xc>)
   82f32:	4601      	mov	r1, r0
   82f34:	6818      	ldr	r0, [r3, #0]
   82f36:	f000 b803 	b.w	82f40 <_malloc_r>
   82f3a:	bf00      	nop
   82f3c:	20070570 	.word	0x20070570

00082f40 <_malloc_r>:
   82f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82f44:	f101 050b 	add.w	r5, r1, #11
   82f48:	2d16      	cmp	r5, #22
   82f4a:	b083      	sub	sp, #12
   82f4c:	4606      	mov	r6, r0
   82f4e:	d927      	bls.n	82fa0 <_malloc_r+0x60>
   82f50:	f035 0507 	bics.w	r5, r5, #7
   82f54:	d427      	bmi.n	82fa6 <_malloc_r+0x66>
   82f56:	42a9      	cmp	r1, r5
   82f58:	d825      	bhi.n	82fa6 <_malloc_r+0x66>
   82f5a:	4630      	mov	r0, r6
   82f5c:	f000 fb3c 	bl	835d8 <__malloc_lock>
   82f60:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   82f64:	d226      	bcs.n	82fb4 <_malloc_r+0x74>
   82f66:	4fc1      	ldr	r7, [pc, #772]	; (8326c <_malloc_r+0x32c>)
   82f68:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
   82f6c:	eb07 03cc 	add.w	r3, r7, ip, lsl #3
   82f70:	68dc      	ldr	r4, [r3, #12]
   82f72:	429c      	cmp	r4, r3
   82f74:	f000 81d2 	beq.w	8331c <_malloc_r+0x3dc>
   82f78:	6863      	ldr	r3, [r4, #4]
   82f7a:	68e2      	ldr	r2, [r4, #12]
   82f7c:	f023 0303 	bic.w	r3, r3, #3
   82f80:	4423      	add	r3, r4
   82f82:	6858      	ldr	r0, [r3, #4]
   82f84:	68a1      	ldr	r1, [r4, #8]
   82f86:	f040 0501 	orr.w	r5, r0, #1
   82f8a:	60ca      	str	r2, [r1, #12]
   82f8c:	4630      	mov	r0, r6
   82f8e:	6091      	str	r1, [r2, #8]
   82f90:	605d      	str	r5, [r3, #4]
   82f92:	f000 fb23 	bl	835dc <__malloc_unlock>
   82f96:	3408      	adds	r4, #8
   82f98:	4620      	mov	r0, r4
   82f9a:	b003      	add	sp, #12
   82f9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82fa0:	2510      	movs	r5, #16
   82fa2:	42a9      	cmp	r1, r5
   82fa4:	d9d9      	bls.n	82f5a <_malloc_r+0x1a>
   82fa6:	2400      	movs	r4, #0
   82fa8:	230c      	movs	r3, #12
   82faa:	4620      	mov	r0, r4
   82fac:	6033      	str	r3, [r6, #0]
   82fae:	b003      	add	sp, #12
   82fb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82fb4:	ea5f 2c55 	movs.w	ip, r5, lsr #9
   82fb8:	f000 8089 	beq.w	830ce <_malloc_r+0x18e>
   82fbc:	f1bc 0f04 	cmp.w	ip, #4
   82fc0:	f200 8160 	bhi.w	83284 <_malloc_r+0x344>
   82fc4:	ea4f 1c95 	mov.w	ip, r5, lsr #6
   82fc8:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
   82fcc:	ea4f 014c 	mov.w	r1, ip, lsl #1
   82fd0:	4fa6      	ldr	r7, [pc, #664]	; (8326c <_malloc_r+0x32c>)
   82fd2:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   82fd6:	68cc      	ldr	r4, [r1, #12]
   82fd8:	42a1      	cmp	r1, r4
   82fda:	d105      	bne.n	82fe8 <_malloc_r+0xa8>
   82fdc:	e00c      	b.n	82ff8 <_malloc_r+0xb8>
   82fde:	2b00      	cmp	r3, #0
   82fe0:	da79      	bge.n	830d6 <_malloc_r+0x196>
   82fe2:	68e4      	ldr	r4, [r4, #12]
   82fe4:	42a1      	cmp	r1, r4
   82fe6:	d007      	beq.n	82ff8 <_malloc_r+0xb8>
   82fe8:	6862      	ldr	r2, [r4, #4]
   82fea:	f022 0203 	bic.w	r2, r2, #3
   82fee:	1b53      	subs	r3, r2, r5
   82ff0:	2b0f      	cmp	r3, #15
   82ff2:	ddf4      	ble.n	82fde <_malloc_r+0x9e>
   82ff4:	f10c 3cff 	add.w	ip, ip, #4294967295
   82ff8:	f10c 0c01 	add.w	ip, ip, #1
   82ffc:	4b9b      	ldr	r3, [pc, #620]	; (8326c <_malloc_r+0x32c>)
   82ffe:	693c      	ldr	r4, [r7, #16]
   83000:	f103 0e08 	add.w	lr, r3, #8
   83004:	4574      	cmp	r4, lr
   83006:	f000 817e 	beq.w	83306 <_malloc_r+0x3c6>
   8300a:	6861      	ldr	r1, [r4, #4]
   8300c:	f021 0103 	bic.w	r1, r1, #3
   83010:	1b4a      	subs	r2, r1, r5
   83012:	2a0f      	cmp	r2, #15
   83014:	f300 8164 	bgt.w	832e0 <_malloc_r+0x3a0>
   83018:	2a00      	cmp	r2, #0
   8301a:	f8c3 e014 	str.w	lr, [r3, #20]
   8301e:	f8c3 e010 	str.w	lr, [r3, #16]
   83022:	da69      	bge.n	830f8 <_malloc_r+0x1b8>
   83024:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   83028:	f080 813a 	bcs.w	832a0 <_malloc_r+0x360>
   8302c:	08c9      	lsrs	r1, r1, #3
   8302e:	108a      	asrs	r2, r1, #2
   83030:	f04f 0801 	mov.w	r8, #1
   83034:	fa08 f802 	lsl.w	r8, r8, r2
   83038:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   8303c:	685a      	ldr	r2, [r3, #4]
   8303e:	6888      	ldr	r0, [r1, #8]
   83040:	ea48 0202 	orr.w	r2, r8, r2
   83044:	60a0      	str	r0, [r4, #8]
   83046:	60e1      	str	r1, [r4, #12]
   83048:	605a      	str	r2, [r3, #4]
   8304a:	608c      	str	r4, [r1, #8]
   8304c:	60c4      	str	r4, [r0, #12]
   8304e:	ea4f 03ac 	mov.w	r3, ip, asr #2
   83052:	2001      	movs	r0, #1
   83054:	4098      	lsls	r0, r3
   83056:	4290      	cmp	r0, r2
   83058:	d85b      	bhi.n	83112 <_malloc_r+0x1d2>
   8305a:	4202      	tst	r2, r0
   8305c:	d106      	bne.n	8306c <_malloc_r+0x12c>
   8305e:	f02c 0c03 	bic.w	ip, ip, #3
   83062:	0040      	lsls	r0, r0, #1
   83064:	4202      	tst	r2, r0
   83066:	f10c 0c04 	add.w	ip, ip, #4
   8306a:	d0fa      	beq.n	83062 <_malloc_r+0x122>
   8306c:	eb07 08cc 	add.w	r8, r7, ip, lsl #3
   83070:	4644      	mov	r4, r8
   83072:	46e1      	mov	r9, ip
   83074:	68e3      	ldr	r3, [r4, #12]
   83076:	429c      	cmp	r4, r3
   83078:	d107      	bne.n	8308a <_malloc_r+0x14a>
   8307a:	e146      	b.n	8330a <_malloc_r+0x3ca>
   8307c:	2a00      	cmp	r2, #0
   8307e:	f280 8157 	bge.w	83330 <_malloc_r+0x3f0>
   83082:	68db      	ldr	r3, [r3, #12]
   83084:	429c      	cmp	r4, r3
   83086:	f000 8140 	beq.w	8330a <_malloc_r+0x3ca>
   8308a:	6859      	ldr	r1, [r3, #4]
   8308c:	f021 0103 	bic.w	r1, r1, #3
   83090:	1b4a      	subs	r2, r1, r5
   83092:	2a0f      	cmp	r2, #15
   83094:	ddf2      	ble.n	8307c <_malloc_r+0x13c>
   83096:	461c      	mov	r4, r3
   83098:	f854 cf08 	ldr.w	ip, [r4, #8]!
   8309c:	68d9      	ldr	r1, [r3, #12]
   8309e:	f045 0901 	orr.w	r9, r5, #1
   830a2:	f042 0801 	orr.w	r8, r2, #1
   830a6:	441d      	add	r5, r3
   830a8:	f8c3 9004 	str.w	r9, [r3, #4]
   830ac:	4630      	mov	r0, r6
   830ae:	f8cc 100c 	str.w	r1, [ip, #12]
   830b2:	f8c1 c008 	str.w	ip, [r1, #8]
   830b6:	617d      	str	r5, [r7, #20]
   830b8:	613d      	str	r5, [r7, #16]
   830ba:	f8c5 e00c 	str.w	lr, [r5, #12]
   830be:	f8c5 e008 	str.w	lr, [r5, #8]
   830c2:	f8c5 8004 	str.w	r8, [r5, #4]
   830c6:	50aa      	str	r2, [r5, r2]
   830c8:	f000 fa88 	bl	835dc <__malloc_unlock>
   830cc:	e764      	b.n	82f98 <_malloc_r+0x58>
   830ce:	217e      	movs	r1, #126	; 0x7e
   830d0:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
   830d4:	e77c      	b.n	82fd0 <_malloc_r+0x90>
   830d6:	4422      	add	r2, r4
   830d8:	6850      	ldr	r0, [r2, #4]
   830da:	68e3      	ldr	r3, [r4, #12]
   830dc:	68a1      	ldr	r1, [r4, #8]
   830de:	f040 0501 	orr.w	r5, r0, #1
   830e2:	60cb      	str	r3, [r1, #12]
   830e4:	4630      	mov	r0, r6
   830e6:	6099      	str	r1, [r3, #8]
   830e8:	6055      	str	r5, [r2, #4]
   830ea:	f000 fa77 	bl	835dc <__malloc_unlock>
   830ee:	3408      	adds	r4, #8
   830f0:	4620      	mov	r0, r4
   830f2:	b003      	add	sp, #12
   830f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   830f8:	4421      	add	r1, r4
   830fa:	684b      	ldr	r3, [r1, #4]
   830fc:	4630      	mov	r0, r6
   830fe:	f043 0301 	orr.w	r3, r3, #1
   83102:	604b      	str	r3, [r1, #4]
   83104:	f000 fa6a 	bl	835dc <__malloc_unlock>
   83108:	3408      	adds	r4, #8
   8310a:	4620      	mov	r0, r4
   8310c:	b003      	add	sp, #12
   8310e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83112:	68bc      	ldr	r4, [r7, #8]
   83114:	6863      	ldr	r3, [r4, #4]
   83116:	f023 0903 	bic.w	r9, r3, #3
   8311a:	45a9      	cmp	r9, r5
   8311c:	d304      	bcc.n	83128 <_malloc_r+0x1e8>
   8311e:	ebc5 0309 	rsb	r3, r5, r9
   83122:	2b0f      	cmp	r3, #15
   83124:	f300 8091 	bgt.w	8324a <_malloc_r+0x30a>
   83128:	4b51      	ldr	r3, [pc, #324]	; (83270 <_malloc_r+0x330>)
   8312a:	4a52      	ldr	r2, [pc, #328]	; (83274 <_malloc_r+0x334>)
   8312c:	6819      	ldr	r1, [r3, #0]
   8312e:	6813      	ldr	r3, [r2, #0]
   83130:	eb05 0a01 	add.w	sl, r5, r1
   83134:	3301      	adds	r3, #1
   83136:	eb04 0b09 	add.w	fp, r4, r9
   8313a:	f000 8161 	beq.w	83400 <_malloc_r+0x4c0>
   8313e:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
   83142:	f10a 0a0f 	add.w	sl, sl, #15
   83146:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
   8314a:	f02a 0a0f 	bic.w	sl, sl, #15
   8314e:	4630      	mov	r0, r6
   83150:	4651      	mov	r1, sl
   83152:	9201      	str	r2, [sp, #4]
   83154:	f000 fc24 	bl	839a0 <_sbrk_r>
   83158:	f1b0 3fff 	cmp.w	r0, #4294967295
   8315c:	4680      	mov	r8, r0
   8315e:	9a01      	ldr	r2, [sp, #4]
   83160:	f000 8101 	beq.w	83366 <_malloc_r+0x426>
   83164:	4583      	cmp	fp, r0
   83166:	f200 80fb 	bhi.w	83360 <_malloc_r+0x420>
   8316a:	f8df c114 	ldr.w	ip, [pc, #276]	; 83280 <_malloc_r+0x340>
   8316e:	45c3      	cmp	fp, r8
   83170:	f8dc 3000 	ldr.w	r3, [ip]
   83174:	4453      	add	r3, sl
   83176:	f8cc 3000 	str.w	r3, [ip]
   8317a:	f000 814a 	beq.w	83412 <_malloc_r+0x4d2>
   8317e:	6812      	ldr	r2, [r2, #0]
   83180:	493c      	ldr	r1, [pc, #240]	; (83274 <_malloc_r+0x334>)
   83182:	3201      	adds	r2, #1
   83184:	bf1b      	ittet	ne
   83186:	ebcb 0b08 	rsbne	fp, fp, r8
   8318a:	445b      	addne	r3, fp
   8318c:	f8c1 8000 	streq.w	r8, [r1]
   83190:	f8cc 3000 	strne.w	r3, [ip]
   83194:	f018 0307 	ands.w	r3, r8, #7
   83198:	f000 8114 	beq.w	833c4 <_malloc_r+0x484>
   8319c:	f1c3 0208 	rsb	r2, r3, #8
   831a0:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
   831a4:	4490      	add	r8, r2
   831a6:	3308      	adds	r3, #8
   831a8:	44c2      	add	sl, r8
   831aa:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
   831ae:	ebca 0a03 	rsb	sl, sl, r3
   831b2:	4651      	mov	r1, sl
   831b4:	4630      	mov	r0, r6
   831b6:	f8cd c004 	str.w	ip, [sp, #4]
   831ba:	f000 fbf1 	bl	839a0 <_sbrk_r>
   831be:	1c43      	adds	r3, r0, #1
   831c0:	f8dd c004 	ldr.w	ip, [sp, #4]
   831c4:	f000 8135 	beq.w	83432 <_malloc_r+0x4f2>
   831c8:	ebc8 0200 	rsb	r2, r8, r0
   831cc:	4452      	add	r2, sl
   831ce:	f042 0201 	orr.w	r2, r2, #1
   831d2:	f8dc 3000 	ldr.w	r3, [ip]
   831d6:	42bc      	cmp	r4, r7
   831d8:	4453      	add	r3, sl
   831da:	f8c7 8008 	str.w	r8, [r7, #8]
   831de:	f8cc 3000 	str.w	r3, [ip]
   831e2:	f8c8 2004 	str.w	r2, [r8, #4]
   831e6:	f8df a098 	ldr.w	sl, [pc, #152]	; 83280 <_malloc_r+0x340>
   831ea:	d015      	beq.n	83218 <_malloc_r+0x2d8>
   831ec:	f1b9 0f0f 	cmp.w	r9, #15
   831f0:	f240 80eb 	bls.w	833ca <_malloc_r+0x48a>
   831f4:	6861      	ldr	r1, [r4, #4]
   831f6:	f1a9 020c 	sub.w	r2, r9, #12
   831fa:	f022 0207 	bic.w	r2, r2, #7
   831fe:	f001 0101 	and.w	r1, r1, #1
   83202:	ea42 0e01 	orr.w	lr, r2, r1
   83206:	2005      	movs	r0, #5
   83208:	18a1      	adds	r1, r4, r2
   8320a:	2a0f      	cmp	r2, #15
   8320c:	f8c4 e004 	str.w	lr, [r4, #4]
   83210:	6048      	str	r0, [r1, #4]
   83212:	6088      	str	r0, [r1, #8]
   83214:	f200 8111 	bhi.w	8343a <_malloc_r+0x4fa>
   83218:	4a17      	ldr	r2, [pc, #92]	; (83278 <_malloc_r+0x338>)
   8321a:	68bc      	ldr	r4, [r7, #8]
   8321c:	6811      	ldr	r1, [r2, #0]
   8321e:	428b      	cmp	r3, r1
   83220:	bf88      	it	hi
   83222:	6013      	strhi	r3, [r2, #0]
   83224:	4a15      	ldr	r2, [pc, #84]	; (8327c <_malloc_r+0x33c>)
   83226:	6811      	ldr	r1, [r2, #0]
   83228:	428b      	cmp	r3, r1
   8322a:	bf88      	it	hi
   8322c:	6013      	strhi	r3, [r2, #0]
   8322e:	6862      	ldr	r2, [r4, #4]
   83230:	f022 0203 	bic.w	r2, r2, #3
   83234:	4295      	cmp	r5, r2
   83236:	ebc5 0302 	rsb	r3, r5, r2
   8323a:	d801      	bhi.n	83240 <_malloc_r+0x300>
   8323c:	2b0f      	cmp	r3, #15
   8323e:	dc04      	bgt.n	8324a <_malloc_r+0x30a>
   83240:	4630      	mov	r0, r6
   83242:	f000 f9cb 	bl	835dc <__malloc_unlock>
   83246:	2400      	movs	r4, #0
   83248:	e6a6      	b.n	82f98 <_malloc_r+0x58>
   8324a:	f045 0201 	orr.w	r2, r5, #1
   8324e:	f043 0301 	orr.w	r3, r3, #1
   83252:	4425      	add	r5, r4
   83254:	6062      	str	r2, [r4, #4]
   83256:	4630      	mov	r0, r6
   83258:	60bd      	str	r5, [r7, #8]
   8325a:	606b      	str	r3, [r5, #4]
   8325c:	f000 f9be 	bl	835dc <__malloc_unlock>
   83260:	3408      	adds	r4, #8
   83262:	4620      	mov	r0, r4
   83264:	b003      	add	sp, #12
   83266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8326a:	bf00      	nop
   8326c:	20070598 	.word	0x20070598
   83270:	20070b6c 	.word	0x20070b6c
   83274:	200709a4 	.word	0x200709a4
   83278:	20070b68 	.word	0x20070b68
   8327c:	20070b64 	.word	0x20070b64
   83280:	20070b70 	.word	0x20070b70
   83284:	f1bc 0f14 	cmp.w	ip, #20
   83288:	d961      	bls.n	8334e <_malloc_r+0x40e>
   8328a:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
   8328e:	f200 808f 	bhi.w	833b0 <_malloc_r+0x470>
   83292:	ea4f 3c15 	mov.w	ip, r5, lsr #12
   83296:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
   8329a:	ea4f 014c 	mov.w	r1, ip, lsl #1
   8329e:	e697      	b.n	82fd0 <_malloc_r+0x90>
   832a0:	0a4b      	lsrs	r3, r1, #9
   832a2:	2b04      	cmp	r3, #4
   832a4:	d958      	bls.n	83358 <_malloc_r+0x418>
   832a6:	2b14      	cmp	r3, #20
   832a8:	f200 80ad 	bhi.w	83406 <_malloc_r+0x4c6>
   832ac:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   832b0:	0050      	lsls	r0, r2, #1
   832b2:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   832b6:	6883      	ldr	r3, [r0, #8]
   832b8:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 83474 <_malloc_r+0x534>
   832bc:	4283      	cmp	r3, r0
   832be:	f000 808a 	beq.w	833d6 <_malloc_r+0x496>
   832c2:	685a      	ldr	r2, [r3, #4]
   832c4:	f022 0203 	bic.w	r2, r2, #3
   832c8:	4291      	cmp	r1, r2
   832ca:	d202      	bcs.n	832d2 <_malloc_r+0x392>
   832cc:	689b      	ldr	r3, [r3, #8]
   832ce:	4298      	cmp	r0, r3
   832d0:	d1f7      	bne.n	832c2 <_malloc_r+0x382>
   832d2:	68d9      	ldr	r1, [r3, #12]
   832d4:	687a      	ldr	r2, [r7, #4]
   832d6:	60e1      	str	r1, [r4, #12]
   832d8:	60a3      	str	r3, [r4, #8]
   832da:	608c      	str	r4, [r1, #8]
   832dc:	60dc      	str	r4, [r3, #12]
   832de:	e6b6      	b.n	8304e <_malloc_r+0x10e>
   832e0:	f045 0701 	orr.w	r7, r5, #1
   832e4:	f042 0101 	orr.w	r1, r2, #1
   832e8:	4425      	add	r5, r4
   832ea:	6067      	str	r7, [r4, #4]
   832ec:	4630      	mov	r0, r6
   832ee:	615d      	str	r5, [r3, #20]
   832f0:	611d      	str	r5, [r3, #16]
   832f2:	f8c5 e00c 	str.w	lr, [r5, #12]
   832f6:	f8c5 e008 	str.w	lr, [r5, #8]
   832fa:	6069      	str	r1, [r5, #4]
   832fc:	50aa      	str	r2, [r5, r2]
   832fe:	3408      	adds	r4, #8
   83300:	f000 f96c 	bl	835dc <__malloc_unlock>
   83304:	e648      	b.n	82f98 <_malloc_r+0x58>
   83306:	685a      	ldr	r2, [r3, #4]
   83308:	e6a1      	b.n	8304e <_malloc_r+0x10e>
   8330a:	f109 0901 	add.w	r9, r9, #1
   8330e:	f019 0f03 	tst.w	r9, #3
   83312:	f104 0408 	add.w	r4, r4, #8
   83316:	f47f aead 	bne.w	83074 <_malloc_r+0x134>
   8331a:	e02d      	b.n	83378 <_malloc_r+0x438>
   8331c:	f104 0308 	add.w	r3, r4, #8
   83320:	6964      	ldr	r4, [r4, #20]
   83322:	42a3      	cmp	r3, r4
   83324:	bf08      	it	eq
   83326:	f10c 0c02 	addeq.w	ip, ip, #2
   8332a:	f43f ae67 	beq.w	82ffc <_malloc_r+0xbc>
   8332e:	e623      	b.n	82f78 <_malloc_r+0x38>
   83330:	4419      	add	r1, r3
   83332:	6848      	ldr	r0, [r1, #4]
   83334:	461c      	mov	r4, r3
   83336:	f854 2f08 	ldr.w	r2, [r4, #8]!
   8333a:	68db      	ldr	r3, [r3, #12]
   8333c:	f040 0501 	orr.w	r5, r0, #1
   83340:	604d      	str	r5, [r1, #4]
   83342:	4630      	mov	r0, r6
   83344:	60d3      	str	r3, [r2, #12]
   83346:	609a      	str	r2, [r3, #8]
   83348:	f000 f948 	bl	835dc <__malloc_unlock>
   8334c:	e624      	b.n	82f98 <_malloc_r+0x58>
   8334e:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
   83352:	ea4f 014c 	mov.w	r1, ip, lsl #1
   83356:	e63b      	b.n	82fd0 <_malloc_r+0x90>
   83358:	098a      	lsrs	r2, r1, #6
   8335a:	3238      	adds	r2, #56	; 0x38
   8335c:	0050      	lsls	r0, r2, #1
   8335e:	e7a8      	b.n	832b2 <_malloc_r+0x372>
   83360:	42bc      	cmp	r4, r7
   83362:	f43f af02 	beq.w	8316a <_malloc_r+0x22a>
   83366:	68bc      	ldr	r4, [r7, #8]
   83368:	6862      	ldr	r2, [r4, #4]
   8336a:	f022 0203 	bic.w	r2, r2, #3
   8336e:	e761      	b.n	83234 <_malloc_r+0x2f4>
   83370:	f8d8 8000 	ldr.w	r8, [r8]
   83374:	4598      	cmp	r8, r3
   83376:	d17a      	bne.n	8346e <_malloc_r+0x52e>
   83378:	f01c 0f03 	tst.w	ip, #3
   8337c:	f1a8 0308 	sub.w	r3, r8, #8
   83380:	f10c 3cff 	add.w	ip, ip, #4294967295
   83384:	d1f4      	bne.n	83370 <_malloc_r+0x430>
   83386:	687b      	ldr	r3, [r7, #4]
   83388:	ea23 0300 	bic.w	r3, r3, r0
   8338c:	607b      	str	r3, [r7, #4]
   8338e:	0040      	lsls	r0, r0, #1
   83390:	4298      	cmp	r0, r3
   83392:	f63f aebe 	bhi.w	83112 <_malloc_r+0x1d2>
   83396:	2800      	cmp	r0, #0
   83398:	f43f aebb 	beq.w	83112 <_malloc_r+0x1d2>
   8339c:	4203      	tst	r3, r0
   8339e:	46cc      	mov	ip, r9
   833a0:	f47f ae64 	bne.w	8306c <_malloc_r+0x12c>
   833a4:	0040      	lsls	r0, r0, #1
   833a6:	4203      	tst	r3, r0
   833a8:	f10c 0c04 	add.w	ip, ip, #4
   833ac:	d0fa      	beq.n	833a4 <_malloc_r+0x464>
   833ae:	e65d      	b.n	8306c <_malloc_r+0x12c>
   833b0:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
   833b4:	d819      	bhi.n	833ea <_malloc_r+0x4aa>
   833b6:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
   833ba:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
   833be:	ea4f 014c 	mov.w	r1, ip, lsl #1
   833c2:	e605      	b.n	82fd0 <_malloc_r+0x90>
   833c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   833c8:	e6ee      	b.n	831a8 <_malloc_r+0x268>
   833ca:	2301      	movs	r3, #1
   833cc:	f8c8 3004 	str.w	r3, [r8, #4]
   833d0:	4644      	mov	r4, r8
   833d2:	2200      	movs	r2, #0
   833d4:	e72e      	b.n	83234 <_malloc_r+0x2f4>
   833d6:	1092      	asrs	r2, r2, #2
   833d8:	2001      	movs	r0, #1
   833da:	4090      	lsls	r0, r2
   833dc:	f8d8 2004 	ldr.w	r2, [r8, #4]
   833e0:	4619      	mov	r1, r3
   833e2:	4302      	orrs	r2, r0
   833e4:	f8c8 2004 	str.w	r2, [r8, #4]
   833e8:	e775      	b.n	832d6 <_malloc_r+0x396>
   833ea:	f240 5354 	movw	r3, #1364	; 0x554
   833ee:	459c      	cmp	ip, r3
   833f0:	d81b      	bhi.n	8342a <_malloc_r+0x4ea>
   833f2:	ea4f 4c95 	mov.w	ip, r5, lsr #18
   833f6:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
   833fa:	ea4f 014c 	mov.w	r1, ip, lsl #1
   833fe:	e5e7      	b.n	82fd0 <_malloc_r+0x90>
   83400:	f10a 0a10 	add.w	sl, sl, #16
   83404:	e6a3      	b.n	8314e <_malloc_r+0x20e>
   83406:	2b54      	cmp	r3, #84	; 0x54
   83408:	d81f      	bhi.n	8344a <_malloc_r+0x50a>
   8340a:	0b0a      	lsrs	r2, r1, #12
   8340c:	326e      	adds	r2, #110	; 0x6e
   8340e:	0050      	lsls	r0, r2, #1
   83410:	e74f      	b.n	832b2 <_malloc_r+0x372>
   83412:	f3cb 010b 	ubfx	r1, fp, #0, #12
   83416:	2900      	cmp	r1, #0
   83418:	f47f aeb1 	bne.w	8317e <_malloc_r+0x23e>
   8341c:	eb0a 0109 	add.w	r1, sl, r9
   83420:	68ba      	ldr	r2, [r7, #8]
   83422:	f041 0101 	orr.w	r1, r1, #1
   83426:	6051      	str	r1, [r2, #4]
   83428:	e6f6      	b.n	83218 <_malloc_r+0x2d8>
   8342a:	21fc      	movs	r1, #252	; 0xfc
   8342c:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
   83430:	e5ce      	b.n	82fd0 <_malloc_r+0x90>
   83432:	2201      	movs	r2, #1
   83434:	f04f 0a00 	mov.w	sl, #0
   83438:	e6cb      	b.n	831d2 <_malloc_r+0x292>
   8343a:	f104 0108 	add.w	r1, r4, #8
   8343e:	4630      	mov	r0, r6
   83440:	f7ff fa80 	bl	82944 <_free_r>
   83444:	f8da 3000 	ldr.w	r3, [sl]
   83448:	e6e6      	b.n	83218 <_malloc_r+0x2d8>
   8344a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8344e:	d803      	bhi.n	83458 <_malloc_r+0x518>
   83450:	0bca      	lsrs	r2, r1, #15
   83452:	3277      	adds	r2, #119	; 0x77
   83454:	0050      	lsls	r0, r2, #1
   83456:	e72c      	b.n	832b2 <_malloc_r+0x372>
   83458:	f240 5254 	movw	r2, #1364	; 0x554
   8345c:	4293      	cmp	r3, r2
   8345e:	d803      	bhi.n	83468 <_malloc_r+0x528>
   83460:	0c8a      	lsrs	r2, r1, #18
   83462:	327c      	adds	r2, #124	; 0x7c
   83464:	0050      	lsls	r0, r2, #1
   83466:	e724      	b.n	832b2 <_malloc_r+0x372>
   83468:	20fc      	movs	r0, #252	; 0xfc
   8346a:	227e      	movs	r2, #126	; 0x7e
   8346c:	e721      	b.n	832b2 <_malloc_r+0x372>
   8346e:	687b      	ldr	r3, [r7, #4]
   83470:	e78d      	b.n	8338e <_malloc_r+0x44e>
   83472:	bf00      	nop
   83474:	20070598 	.word	0x20070598

00083478 <memchr>:
   83478:	0783      	lsls	r3, r0, #30
   8347a:	b470      	push	{r4, r5, r6}
   8347c:	b2c9      	uxtb	r1, r1
   8347e:	d040      	beq.n	83502 <memchr+0x8a>
   83480:	1e54      	subs	r4, r2, #1
   83482:	b32a      	cbz	r2, 834d0 <memchr+0x58>
   83484:	7803      	ldrb	r3, [r0, #0]
   83486:	428b      	cmp	r3, r1
   83488:	d023      	beq.n	834d2 <memchr+0x5a>
   8348a:	1c43      	adds	r3, r0, #1
   8348c:	e004      	b.n	83498 <memchr+0x20>
   8348e:	b1fc      	cbz	r4, 834d0 <memchr+0x58>
   83490:	7805      	ldrb	r5, [r0, #0]
   83492:	4614      	mov	r4, r2
   83494:	428d      	cmp	r5, r1
   83496:	d01c      	beq.n	834d2 <memchr+0x5a>
   83498:	f013 0f03 	tst.w	r3, #3
   8349c:	4618      	mov	r0, r3
   8349e:	f104 32ff 	add.w	r2, r4, #4294967295
   834a2:	f103 0301 	add.w	r3, r3, #1
   834a6:	d1f2      	bne.n	8348e <memchr+0x16>
   834a8:	2c03      	cmp	r4, #3
   834aa:	d814      	bhi.n	834d6 <memchr+0x5e>
   834ac:	1e65      	subs	r5, r4, #1
   834ae:	b354      	cbz	r4, 83506 <memchr+0x8e>
   834b0:	7803      	ldrb	r3, [r0, #0]
   834b2:	428b      	cmp	r3, r1
   834b4:	d00d      	beq.n	834d2 <memchr+0x5a>
   834b6:	1c42      	adds	r2, r0, #1
   834b8:	2300      	movs	r3, #0
   834ba:	e002      	b.n	834c2 <memchr+0x4a>
   834bc:	7804      	ldrb	r4, [r0, #0]
   834be:	428c      	cmp	r4, r1
   834c0:	d007      	beq.n	834d2 <memchr+0x5a>
   834c2:	42ab      	cmp	r3, r5
   834c4:	4610      	mov	r0, r2
   834c6:	f103 0301 	add.w	r3, r3, #1
   834ca:	f102 0201 	add.w	r2, r2, #1
   834ce:	d1f5      	bne.n	834bc <memchr+0x44>
   834d0:	2000      	movs	r0, #0
   834d2:	bc70      	pop	{r4, r5, r6}
   834d4:	4770      	bx	lr
   834d6:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
   834da:	4603      	mov	r3, r0
   834dc:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   834e0:	681a      	ldr	r2, [r3, #0]
   834e2:	4618      	mov	r0, r3
   834e4:	4072      	eors	r2, r6
   834e6:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
   834ea:	ea25 0202 	bic.w	r2, r5, r2
   834ee:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   834f2:	f103 0304 	add.w	r3, r3, #4
   834f6:	d1d9      	bne.n	834ac <memchr+0x34>
   834f8:	3c04      	subs	r4, #4
   834fa:	2c03      	cmp	r4, #3
   834fc:	4618      	mov	r0, r3
   834fe:	d8ef      	bhi.n	834e0 <memchr+0x68>
   83500:	e7d4      	b.n	834ac <memchr+0x34>
   83502:	4614      	mov	r4, r2
   83504:	e7d0      	b.n	834a8 <memchr+0x30>
   83506:	4620      	mov	r0, r4
   83508:	e7e3      	b.n	834d2 <memchr+0x5a>
   8350a:	bf00      	nop

0008350c <memmove>:
   8350c:	4288      	cmp	r0, r1
   8350e:	b4f0      	push	{r4, r5, r6, r7}
   83510:	d910      	bls.n	83534 <memmove+0x28>
   83512:	188c      	adds	r4, r1, r2
   83514:	42a0      	cmp	r0, r4
   83516:	d20d      	bcs.n	83534 <memmove+0x28>
   83518:	1885      	adds	r5, r0, r2
   8351a:	1e53      	subs	r3, r2, #1
   8351c:	b142      	cbz	r2, 83530 <memmove+0x24>
   8351e:	4621      	mov	r1, r4
   83520:	462a      	mov	r2, r5
   83522:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
   83526:	3b01      	subs	r3, #1
   83528:	f802 4d01 	strb.w	r4, [r2, #-1]!
   8352c:	1c5c      	adds	r4, r3, #1
   8352e:	d1f8      	bne.n	83522 <memmove+0x16>
   83530:	bcf0      	pop	{r4, r5, r6, r7}
   83532:	4770      	bx	lr
   83534:	2a0f      	cmp	r2, #15
   83536:	d944      	bls.n	835c2 <memmove+0xb6>
   83538:	ea40 0301 	orr.w	r3, r0, r1
   8353c:	079b      	lsls	r3, r3, #30
   8353e:	d144      	bne.n	835ca <memmove+0xbe>
   83540:	f1a2 0710 	sub.w	r7, r2, #16
   83544:	093f      	lsrs	r7, r7, #4
   83546:	eb00 1607 	add.w	r6, r0, r7, lsl #4
   8354a:	3610      	adds	r6, #16
   8354c:	460c      	mov	r4, r1
   8354e:	4603      	mov	r3, r0
   83550:	6825      	ldr	r5, [r4, #0]
   83552:	3310      	adds	r3, #16
   83554:	f843 5c10 	str.w	r5, [r3, #-16]
   83558:	6865      	ldr	r5, [r4, #4]
   8355a:	3410      	adds	r4, #16
   8355c:	f843 5c0c 	str.w	r5, [r3, #-12]
   83560:	f854 5c08 	ldr.w	r5, [r4, #-8]
   83564:	f843 5c08 	str.w	r5, [r3, #-8]
   83568:	f854 5c04 	ldr.w	r5, [r4, #-4]
   8356c:	f843 5c04 	str.w	r5, [r3, #-4]
   83570:	42b3      	cmp	r3, r6
   83572:	d1ed      	bne.n	83550 <memmove+0x44>
   83574:	1c7b      	adds	r3, r7, #1
   83576:	f002 0c0f 	and.w	ip, r2, #15
   8357a:	011b      	lsls	r3, r3, #4
   8357c:	f1bc 0f03 	cmp.w	ip, #3
   83580:	4419      	add	r1, r3
   83582:	4403      	add	r3, r0
   83584:	d923      	bls.n	835ce <memmove+0xc2>
   83586:	460e      	mov	r6, r1
   83588:	461d      	mov	r5, r3
   8358a:	4664      	mov	r4, ip
   8358c:	f856 7b04 	ldr.w	r7, [r6], #4
   83590:	3c04      	subs	r4, #4
   83592:	2c03      	cmp	r4, #3
   83594:	f845 7b04 	str.w	r7, [r5], #4
   83598:	d8f8      	bhi.n	8358c <memmove+0x80>
   8359a:	f1ac 0404 	sub.w	r4, ip, #4
   8359e:	f024 0403 	bic.w	r4, r4, #3
   835a2:	3404      	adds	r4, #4
   835a4:	f002 0203 	and.w	r2, r2, #3
   835a8:	4423      	add	r3, r4
   835aa:	4421      	add	r1, r4
   835ac:	2a00      	cmp	r2, #0
   835ae:	d0bf      	beq.n	83530 <memmove+0x24>
   835b0:	441a      	add	r2, r3
   835b2:	f811 4b01 	ldrb.w	r4, [r1], #1
   835b6:	f803 4b01 	strb.w	r4, [r3], #1
   835ba:	4293      	cmp	r3, r2
   835bc:	d1f9      	bne.n	835b2 <memmove+0xa6>
   835be:	bcf0      	pop	{r4, r5, r6, r7}
   835c0:	4770      	bx	lr
   835c2:	4603      	mov	r3, r0
   835c4:	2a00      	cmp	r2, #0
   835c6:	d1f3      	bne.n	835b0 <memmove+0xa4>
   835c8:	e7b2      	b.n	83530 <memmove+0x24>
   835ca:	4603      	mov	r3, r0
   835cc:	e7f0      	b.n	835b0 <memmove+0xa4>
   835ce:	4662      	mov	r2, ip
   835d0:	2a00      	cmp	r2, #0
   835d2:	d1ed      	bne.n	835b0 <memmove+0xa4>
   835d4:	e7ac      	b.n	83530 <memmove+0x24>
   835d6:	bf00      	nop

000835d8 <__malloc_lock>:
   835d8:	4770      	bx	lr
   835da:	bf00      	nop

000835dc <__malloc_unlock>:
   835dc:	4770      	bx	lr
   835de:	bf00      	nop

000835e0 <_realloc_r>:
   835e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   835e4:	460c      	mov	r4, r1
   835e6:	b083      	sub	sp, #12
   835e8:	4690      	mov	r8, r2
   835ea:	4681      	mov	r9, r0
   835ec:	2900      	cmp	r1, #0
   835ee:	f000 80ba 	beq.w	83766 <_realloc_r+0x186>
   835f2:	f7ff fff1 	bl	835d8 <__malloc_lock>
   835f6:	f108 060b 	add.w	r6, r8, #11
   835fa:	f854 3c04 	ldr.w	r3, [r4, #-4]
   835fe:	2e16      	cmp	r6, #22
   83600:	f023 0503 	bic.w	r5, r3, #3
   83604:	f1a4 0708 	sub.w	r7, r4, #8
   83608:	d84b      	bhi.n	836a2 <_realloc_r+0xc2>
   8360a:	2110      	movs	r1, #16
   8360c:	460e      	mov	r6, r1
   8360e:	45b0      	cmp	r8, r6
   83610:	d84c      	bhi.n	836ac <_realloc_r+0xcc>
   83612:	428d      	cmp	r5, r1
   83614:	da51      	bge.n	836ba <_realloc_r+0xda>
   83616:	f8df b384 	ldr.w	fp, [pc, #900]	; 8399c <_realloc_r+0x3bc>
   8361a:	1978      	adds	r0, r7, r5
   8361c:	f8db e008 	ldr.w	lr, [fp, #8]
   83620:	4586      	cmp	lr, r0
   83622:	f000 80a6 	beq.w	83772 <_realloc_r+0x192>
   83626:	6842      	ldr	r2, [r0, #4]
   83628:	f022 0c01 	bic.w	ip, r2, #1
   8362c:	4484      	add	ip, r0
   8362e:	f8dc c004 	ldr.w	ip, [ip, #4]
   83632:	f01c 0f01 	tst.w	ip, #1
   83636:	d054      	beq.n	836e2 <_realloc_r+0x102>
   83638:	2200      	movs	r2, #0
   8363a:	4610      	mov	r0, r2
   8363c:	07db      	lsls	r3, r3, #31
   8363e:	d46f      	bmi.n	83720 <_realloc_r+0x140>
   83640:	f854 3c08 	ldr.w	r3, [r4, #-8]
   83644:	ebc3 0a07 	rsb	sl, r3, r7
   83648:	f8da 3004 	ldr.w	r3, [sl, #4]
   8364c:	f023 0303 	bic.w	r3, r3, #3
   83650:	442b      	add	r3, r5
   83652:	2800      	cmp	r0, #0
   83654:	d062      	beq.n	8371c <_realloc_r+0x13c>
   83656:	4570      	cmp	r0, lr
   83658:	f000 80e9 	beq.w	8382e <_realloc_r+0x24e>
   8365c:	eb02 0e03 	add.w	lr, r2, r3
   83660:	458e      	cmp	lr, r1
   83662:	db5b      	blt.n	8371c <_realloc_r+0x13c>
   83664:	68c3      	ldr	r3, [r0, #12]
   83666:	6882      	ldr	r2, [r0, #8]
   83668:	46d0      	mov	r8, sl
   8366a:	60d3      	str	r3, [r2, #12]
   8366c:	609a      	str	r2, [r3, #8]
   8366e:	f858 1f08 	ldr.w	r1, [r8, #8]!
   83672:	f8da 300c 	ldr.w	r3, [sl, #12]
   83676:	1f2a      	subs	r2, r5, #4
   83678:	2a24      	cmp	r2, #36	; 0x24
   8367a:	60cb      	str	r3, [r1, #12]
   8367c:	6099      	str	r1, [r3, #8]
   8367e:	f200 8123 	bhi.w	838c8 <_realloc_r+0x2e8>
   83682:	2a13      	cmp	r2, #19
   83684:	f240 80b0 	bls.w	837e8 <_realloc_r+0x208>
   83688:	6823      	ldr	r3, [r4, #0]
   8368a:	2a1b      	cmp	r2, #27
   8368c:	f8ca 3008 	str.w	r3, [sl, #8]
   83690:	6863      	ldr	r3, [r4, #4]
   83692:	f8ca 300c 	str.w	r3, [sl, #12]
   83696:	f200 812b 	bhi.w	838f0 <_realloc_r+0x310>
   8369a:	3408      	adds	r4, #8
   8369c:	f10a 0310 	add.w	r3, sl, #16
   836a0:	e0a3      	b.n	837ea <_realloc_r+0x20a>
   836a2:	f026 0607 	bic.w	r6, r6, #7
   836a6:	2e00      	cmp	r6, #0
   836a8:	4631      	mov	r1, r6
   836aa:	dab0      	bge.n	8360e <_realloc_r+0x2e>
   836ac:	230c      	movs	r3, #12
   836ae:	2000      	movs	r0, #0
   836b0:	f8c9 3000 	str.w	r3, [r9]
   836b4:	b003      	add	sp, #12
   836b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   836ba:	46a0      	mov	r8, r4
   836bc:	1baa      	subs	r2, r5, r6
   836be:	2a0f      	cmp	r2, #15
   836c0:	f003 0301 	and.w	r3, r3, #1
   836c4:	d81a      	bhi.n	836fc <_realloc_r+0x11c>
   836c6:	432b      	orrs	r3, r5
   836c8:	607b      	str	r3, [r7, #4]
   836ca:	443d      	add	r5, r7
   836cc:	686b      	ldr	r3, [r5, #4]
   836ce:	f043 0301 	orr.w	r3, r3, #1
   836d2:	606b      	str	r3, [r5, #4]
   836d4:	4648      	mov	r0, r9
   836d6:	f7ff ff81 	bl	835dc <__malloc_unlock>
   836da:	4640      	mov	r0, r8
   836dc:	b003      	add	sp, #12
   836de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   836e2:	f022 0203 	bic.w	r2, r2, #3
   836e6:	eb02 0c05 	add.w	ip, r2, r5
   836ea:	458c      	cmp	ip, r1
   836ec:	dba6      	blt.n	8363c <_realloc_r+0x5c>
   836ee:	68c2      	ldr	r2, [r0, #12]
   836f0:	6881      	ldr	r1, [r0, #8]
   836f2:	46a0      	mov	r8, r4
   836f4:	60ca      	str	r2, [r1, #12]
   836f6:	4665      	mov	r5, ip
   836f8:	6091      	str	r1, [r2, #8]
   836fa:	e7df      	b.n	836bc <_realloc_r+0xdc>
   836fc:	19b9      	adds	r1, r7, r6
   836fe:	4333      	orrs	r3, r6
   83700:	f042 0001 	orr.w	r0, r2, #1
   83704:	607b      	str	r3, [r7, #4]
   83706:	440a      	add	r2, r1
   83708:	6048      	str	r0, [r1, #4]
   8370a:	6853      	ldr	r3, [r2, #4]
   8370c:	3108      	adds	r1, #8
   8370e:	f043 0301 	orr.w	r3, r3, #1
   83712:	6053      	str	r3, [r2, #4]
   83714:	4648      	mov	r0, r9
   83716:	f7ff f915 	bl	82944 <_free_r>
   8371a:	e7db      	b.n	836d4 <_realloc_r+0xf4>
   8371c:	428b      	cmp	r3, r1
   8371e:	da33      	bge.n	83788 <_realloc_r+0x1a8>
   83720:	4641      	mov	r1, r8
   83722:	4648      	mov	r0, r9
   83724:	f7ff fc0c 	bl	82f40 <_malloc_r>
   83728:	4680      	mov	r8, r0
   8372a:	2800      	cmp	r0, #0
   8372c:	d0d2      	beq.n	836d4 <_realloc_r+0xf4>
   8372e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   83732:	f1a0 0108 	sub.w	r1, r0, #8
   83736:	f023 0201 	bic.w	r2, r3, #1
   8373a:	443a      	add	r2, r7
   8373c:	4291      	cmp	r1, r2
   8373e:	f000 80bc 	beq.w	838ba <_realloc_r+0x2da>
   83742:	1f2a      	subs	r2, r5, #4
   83744:	2a24      	cmp	r2, #36	; 0x24
   83746:	d86e      	bhi.n	83826 <_realloc_r+0x246>
   83748:	2a13      	cmp	r2, #19
   8374a:	d842      	bhi.n	837d2 <_realloc_r+0x1f2>
   8374c:	4603      	mov	r3, r0
   8374e:	4622      	mov	r2, r4
   83750:	6811      	ldr	r1, [r2, #0]
   83752:	6019      	str	r1, [r3, #0]
   83754:	6851      	ldr	r1, [r2, #4]
   83756:	6059      	str	r1, [r3, #4]
   83758:	6892      	ldr	r2, [r2, #8]
   8375a:	609a      	str	r2, [r3, #8]
   8375c:	4621      	mov	r1, r4
   8375e:	4648      	mov	r0, r9
   83760:	f7ff f8f0 	bl	82944 <_free_r>
   83764:	e7b6      	b.n	836d4 <_realloc_r+0xf4>
   83766:	4611      	mov	r1, r2
   83768:	b003      	add	sp, #12
   8376a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8376e:	f7ff bbe7 	b.w	82f40 <_malloc_r>
   83772:	f8de 2004 	ldr.w	r2, [lr, #4]
   83776:	f106 0c10 	add.w	ip, r6, #16
   8377a:	f022 0203 	bic.w	r2, r2, #3
   8377e:	1950      	adds	r0, r2, r5
   83780:	4560      	cmp	r0, ip
   83782:	da3d      	bge.n	83800 <_realloc_r+0x220>
   83784:	4670      	mov	r0, lr
   83786:	e759      	b.n	8363c <_realloc_r+0x5c>
   83788:	46d0      	mov	r8, sl
   8378a:	f858 0f08 	ldr.w	r0, [r8, #8]!
   8378e:	f8da 100c 	ldr.w	r1, [sl, #12]
   83792:	1f2a      	subs	r2, r5, #4
   83794:	2a24      	cmp	r2, #36	; 0x24
   83796:	60c1      	str	r1, [r0, #12]
   83798:	6088      	str	r0, [r1, #8]
   8379a:	f200 80a0 	bhi.w	838de <_realloc_r+0x2fe>
   8379e:	2a13      	cmp	r2, #19
   837a0:	f240 809b 	bls.w	838da <_realloc_r+0x2fa>
   837a4:	6821      	ldr	r1, [r4, #0]
   837a6:	2a1b      	cmp	r2, #27
   837a8:	f8ca 1008 	str.w	r1, [sl, #8]
   837ac:	6861      	ldr	r1, [r4, #4]
   837ae:	f8ca 100c 	str.w	r1, [sl, #12]
   837b2:	f200 80b2 	bhi.w	8391a <_realloc_r+0x33a>
   837b6:	3408      	adds	r4, #8
   837b8:	f10a 0210 	add.w	r2, sl, #16
   837bc:	6821      	ldr	r1, [r4, #0]
   837be:	461d      	mov	r5, r3
   837c0:	6011      	str	r1, [r2, #0]
   837c2:	6861      	ldr	r1, [r4, #4]
   837c4:	4657      	mov	r7, sl
   837c6:	6051      	str	r1, [r2, #4]
   837c8:	68a3      	ldr	r3, [r4, #8]
   837ca:	6093      	str	r3, [r2, #8]
   837cc:	f8da 3004 	ldr.w	r3, [sl, #4]
   837d0:	e774      	b.n	836bc <_realloc_r+0xdc>
   837d2:	6823      	ldr	r3, [r4, #0]
   837d4:	2a1b      	cmp	r2, #27
   837d6:	6003      	str	r3, [r0, #0]
   837d8:	6863      	ldr	r3, [r4, #4]
   837da:	6043      	str	r3, [r0, #4]
   837dc:	d862      	bhi.n	838a4 <_realloc_r+0x2c4>
   837de:	f100 0308 	add.w	r3, r0, #8
   837e2:	f104 0208 	add.w	r2, r4, #8
   837e6:	e7b3      	b.n	83750 <_realloc_r+0x170>
   837e8:	4643      	mov	r3, r8
   837ea:	6822      	ldr	r2, [r4, #0]
   837ec:	4675      	mov	r5, lr
   837ee:	601a      	str	r2, [r3, #0]
   837f0:	6862      	ldr	r2, [r4, #4]
   837f2:	4657      	mov	r7, sl
   837f4:	605a      	str	r2, [r3, #4]
   837f6:	68a2      	ldr	r2, [r4, #8]
   837f8:	609a      	str	r2, [r3, #8]
   837fa:	f8da 3004 	ldr.w	r3, [sl, #4]
   837fe:	e75d      	b.n	836bc <_realloc_r+0xdc>
   83800:	1b83      	subs	r3, r0, r6
   83802:	4437      	add	r7, r6
   83804:	f043 0301 	orr.w	r3, r3, #1
   83808:	f8cb 7008 	str.w	r7, [fp, #8]
   8380c:	607b      	str	r3, [r7, #4]
   8380e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   83812:	4648      	mov	r0, r9
   83814:	f003 0301 	and.w	r3, r3, #1
   83818:	431e      	orrs	r6, r3
   8381a:	f844 6c04 	str.w	r6, [r4, #-4]
   8381e:	f7ff fedd 	bl	835dc <__malloc_unlock>
   83822:	4620      	mov	r0, r4
   83824:	e75a      	b.n	836dc <_realloc_r+0xfc>
   83826:	4621      	mov	r1, r4
   83828:	f7ff fe70 	bl	8350c <memmove>
   8382c:	e796      	b.n	8375c <_realloc_r+0x17c>
   8382e:	eb02 0c03 	add.w	ip, r2, r3
   83832:	f106 0210 	add.w	r2, r6, #16
   83836:	4594      	cmp	ip, r2
   83838:	f6ff af70 	blt.w	8371c <_realloc_r+0x13c>
   8383c:	4657      	mov	r7, sl
   8383e:	f857 1f08 	ldr.w	r1, [r7, #8]!
   83842:	f8da 300c 	ldr.w	r3, [sl, #12]
   83846:	1f2a      	subs	r2, r5, #4
   83848:	2a24      	cmp	r2, #36	; 0x24
   8384a:	60cb      	str	r3, [r1, #12]
   8384c:	6099      	str	r1, [r3, #8]
   8384e:	f200 8086 	bhi.w	8395e <_realloc_r+0x37e>
   83852:	2a13      	cmp	r2, #19
   83854:	d977      	bls.n	83946 <_realloc_r+0x366>
   83856:	6823      	ldr	r3, [r4, #0]
   83858:	2a1b      	cmp	r2, #27
   8385a:	f8ca 3008 	str.w	r3, [sl, #8]
   8385e:	6863      	ldr	r3, [r4, #4]
   83860:	f8ca 300c 	str.w	r3, [sl, #12]
   83864:	f200 8084 	bhi.w	83970 <_realloc_r+0x390>
   83868:	3408      	adds	r4, #8
   8386a:	f10a 0310 	add.w	r3, sl, #16
   8386e:	6822      	ldr	r2, [r4, #0]
   83870:	601a      	str	r2, [r3, #0]
   83872:	6862      	ldr	r2, [r4, #4]
   83874:	605a      	str	r2, [r3, #4]
   83876:	68a2      	ldr	r2, [r4, #8]
   83878:	609a      	str	r2, [r3, #8]
   8387a:	ebc6 020c 	rsb	r2, r6, ip
   8387e:	eb0a 0306 	add.w	r3, sl, r6
   83882:	f042 0201 	orr.w	r2, r2, #1
   83886:	f8cb 3008 	str.w	r3, [fp, #8]
   8388a:	605a      	str	r2, [r3, #4]
   8388c:	f8da 3004 	ldr.w	r3, [sl, #4]
   83890:	4648      	mov	r0, r9
   83892:	f003 0301 	and.w	r3, r3, #1
   83896:	431e      	orrs	r6, r3
   83898:	f8ca 6004 	str.w	r6, [sl, #4]
   8389c:	f7ff fe9e 	bl	835dc <__malloc_unlock>
   838a0:	4638      	mov	r0, r7
   838a2:	e71b      	b.n	836dc <_realloc_r+0xfc>
   838a4:	68a3      	ldr	r3, [r4, #8]
   838a6:	2a24      	cmp	r2, #36	; 0x24
   838a8:	6083      	str	r3, [r0, #8]
   838aa:	68e3      	ldr	r3, [r4, #12]
   838ac:	60c3      	str	r3, [r0, #12]
   838ae:	d02b      	beq.n	83908 <_realloc_r+0x328>
   838b0:	f100 0310 	add.w	r3, r0, #16
   838b4:	f104 0210 	add.w	r2, r4, #16
   838b8:	e74a      	b.n	83750 <_realloc_r+0x170>
   838ba:	f850 2c04 	ldr.w	r2, [r0, #-4]
   838be:	46a0      	mov	r8, r4
   838c0:	f022 0203 	bic.w	r2, r2, #3
   838c4:	4415      	add	r5, r2
   838c6:	e6f9      	b.n	836bc <_realloc_r+0xdc>
   838c8:	4621      	mov	r1, r4
   838ca:	4640      	mov	r0, r8
   838cc:	4675      	mov	r5, lr
   838ce:	4657      	mov	r7, sl
   838d0:	f7ff fe1c 	bl	8350c <memmove>
   838d4:	f8da 3004 	ldr.w	r3, [sl, #4]
   838d8:	e6f0      	b.n	836bc <_realloc_r+0xdc>
   838da:	4642      	mov	r2, r8
   838dc:	e76e      	b.n	837bc <_realloc_r+0x1dc>
   838de:	4621      	mov	r1, r4
   838e0:	4640      	mov	r0, r8
   838e2:	461d      	mov	r5, r3
   838e4:	4657      	mov	r7, sl
   838e6:	f7ff fe11 	bl	8350c <memmove>
   838ea:	f8da 3004 	ldr.w	r3, [sl, #4]
   838ee:	e6e5      	b.n	836bc <_realloc_r+0xdc>
   838f0:	68a3      	ldr	r3, [r4, #8]
   838f2:	2a24      	cmp	r2, #36	; 0x24
   838f4:	f8ca 3010 	str.w	r3, [sl, #16]
   838f8:	68e3      	ldr	r3, [r4, #12]
   838fa:	f8ca 3014 	str.w	r3, [sl, #20]
   838fe:	d018      	beq.n	83932 <_realloc_r+0x352>
   83900:	3410      	adds	r4, #16
   83902:	f10a 0318 	add.w	r3, sl, #24
   83906:	e770      	b.n	837ea <_realloc_r+0x20a>
   83908:	6922      	ldr	r2, [r4, #16]
   8390a:	f100 0318 	add.w	r3, r0, #24
   8390e:	6102      	str	r2, [r0, #16]
   83910:	6961      	ldr	r1, [r4, #20]
   83912:	f104 0218 	add.w	r2, r4, #24
   83916:	6141      	str	r1, [r0, #20]
   83918:	e71a      	b.n	83750 <_realloc_r+0x170>
   8391a:	68a1      	ldr	r1, [r4, #8]
   8391c:	2a24      	cmp	r2, #36	; 0x24
   8391e:	f8ca 1010 	str.w	r1, [sl, #16]
   83922:	68e1      	ldr	r1, [r4, #12]
   83924:	f8ca 1014 	str.w	r1, [sl, #20]
   83928:	d00f      	beq.n	8394a <_realloc_r+0x36a>
   8392a:	3410      	adds	r4, #16
   8392c:	f10a 0218 	add.w	r2, sl, #24
   83930:	e744      	b.n	837bc <_realloc_r+0x1dc>
   83932:	6922      	ldr	r2, [r4, #16]
   83934:	f10a 0320 	add.w	r3, sl, #32
   83938:	f8ca 2018 	str.w	r2, [sl, #24]
   8393c:	6962      	ldr	r2, [r4, #20]
   8393e:	3418      	adds	r4, #24
   83940:	f8ca 201c 	str.w	r2, [sl, #28]
   83944:	e751      	b.n	837ea <_realloc_r+0x20a>
   83946:	463b      	mov	r3, r7
   83948:	e791      	b.n	8386e <_realloc_r+0x28e>
   8394a:	6921      	ldr	r1, [r4, #16]
   8394c:	f10a 0220 	add.w	r2, sl, #32
   83950:	f8ca 1018 	str.w	r1, [sl, #24]
   83954:	6961      	ldr	r1, [r4, #20]
   83956:	3418      	adds	r4, #24
   83958:	f8ca 101c 	str.w	r1, [sl, #28]
   8395c:	e72e      	b.n	837bc <_realloc_r+0x1dc>
   8395e:	4621      	mov	r1, r4
   83960:	4638      	mov	r0, r7
   83962:	f8cd c004 	str.w	ip, [sp, #4]
   83966:	f7ff fdd1 	bl	8350c <memmove>
   8396a:	f8dd c004 	ldr.w	ip, [sp, #4]
   8396e:	e784      	b.n	8387a <_realloc_r+0x29a>
   83970:	68a3      	ldr	r3, [r4, #8]
   83972:	2a24      	cmp	r2, #36	; 0x24
   83974:	f8ca 3010 	str.w	r3, [sl, #16]
   83978:	68e3      	ldr	r3, [r4, #12]
   8397a:	f8ca 3014 	str.w	r3, [sl, #20]
   8397e:	d003      	beq.n	83988 <_realloc_r+0x3a8>
   83980:	3410      	adds	r4, #16
   83982:	f10a 0318 	add.w	r3, sl, #24
   83986:	e772      	b.n	8386e <_realloc_r+0x28e>
   83988:	6922      	ldr	r2, [r4, #16]
   8398a:	f10a 0320 	add.w	r3, sl, #32
   8398e:	f8ca 2018 	str.w	r2, [sl, #24]
   83992:	6962      	ldr	r2, [r4, #20]
   83994:	3418      	adds	r4, #24
   83996:	f8ca 201c 	str.w	r2, [sl, #28]
   8399a:	e768      	b.n	8386e <_realloc_r+0x28e>
   8399c:	20070598 	.word	0x20070598

000839a0 <_sbrk_r>:
   839a0:	b538      	push	{r3, r4, r5, lr}
   839a2:	4c07      	ldr	r4, [pc, #28]	; (839c0 <_sbrk_r+0x20>)
   839a4:	2300      	movs	r3, #0
   839a6:	4605      	mov	r5, r0
   839a8:	4608      	mov	r0, r1
   839aa:	6023      	str	r3, [r4, #0]
   839ac:	f7fd fb88 	bl	810c0 <_sbrk>
   839b0:	1c43      	adds	r3, r0, #1
   839b2:	d000      	beq.n	839b6 <_sbrk_r+0x16>
   839b4:	bd38      	pop	{r3, r4, r5, pc}
   839b6:	6823      	ldr	r3, [r4, #0]
   839b8:	2b00      	cmp	r3, #0
   839ba:	d0fb      	beq.n	839b4 <_sbrk_r+0x14>
   839bc:	602b      	str	r3, [r5, #0]
   839be:	bd38      	pop	{r3, r4, r5, pc}
   839c0:	20070ba4 	.word	0x20070ba4

000839c4 <__sread>:
   839c4:	b510      	push	{r4, lr}
   839c6:	460c      	mov	r4, r1
   839c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   839cc:	f000 f9c2 	bl	83d54 <_read_r>
   839d0:	2800      	cmp	r0, #0
   839d2:	db03      	blt.n	839dc <__sread+0x18>
   839d4:	6d23      	ldr	r3, [r4, #80]	; 0x50
   839d6:	4403      	add	r3, r0
   839d8:	6523      	str	r3, [r4, #80]	; 0x50
   839da:	bd10      	pop	{r4, pc}
   839dc:	89a3      	ldrh	r3, [r4, #12]
   839de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   839e2:	81a3      	strh	r3, [r4, #12]
   839e4:	bd10      	pop	{r4, pc}
   839e6:	bf00      	nop

000839e8 <__swrite>:
   839e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   839ec:	460c      	mov	r4, r1
   839ee:	8989      	ldrh	r1, [r1, #12]
   839f0:	461d      	mov	r5, r3
   839f2:	05cb      	lsls	r3, r1, #23
   839f4:	4616      	mov	r6, r2
   839f6:	4607      	mov	r7, r0
   839f8:	d506      	bpl.n	83a08 <__swrite+0x20>
   839fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   839fe:	2200      	movs	r2, #0
   83a00:	2302      	movs	r3, #2
   83a02:	f000 f993 	bl	83d2c <_lseek_r>
   83a06:	89a1      	ldrh	r1, [r4, #12]
   83a08:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   83a0c:	81a1      	strh	r1, [r4, #12]
   83a0e:	4638      	mov	r0, r7
   83a10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   83a14:	4632      	mov	r2, r6
   83a16:	462b      	mov	r3, r5
   83a18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   83a1c:	f000 b89e 	b.w	83b5c <_write_r>

00083a20 <__sseek>:
   83a20:	b510      	push	{r4, lr}
   83a22:	460c      	mov	r4, r1
   83a24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83a28:	f000 f980 	bl	83d2c <_lseek_r>
   83a2c:	89a3      	ldrh	r3, [r4, #12]
   83a2e:	1c42      	adds	r2, r0, #1
   83a30:	bf0e      	itee	eq
   83a32:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   83a36:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   83a3a:	6520      	strne	r0, [r4, #80]	; 0x50
   83a3c:	81a3      	strh	r3, [r4, #12]
   83a3e:	bd10      	pop	{r4, pc}

00083a40 <__sclose>:
   83a40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83a44:	f000 b8f2 	b.w	83c2c <_close_r>

00083a48 <__swbuf_r>:
   83a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83a4a:	460d      	mov	r5, r1
   83a4c:	4614      	mov	r4, r2
   83a4e:	4607      	mov	r7, r0
   83a50:	b110      	cbz	r0, 83a58 <__swbuf_r+0x10>
   83a52:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83a54:	2b00      	cmp	r3, #0
   83a56:	d048      	beq.n	83aea <__swbuf_r+0xa2>
   83a58:	89a2      	ldrh	r2, [r4, #12]
   83a5a:	69a0      	ldr	r0, [r4, #24]
   83a5c:	b293      	uxth	r3, r2
   83a5e:	60a0      	str	r0, [r4, #8]
   83a60:	0718      	lsls	r0, r3, #28
   83a62:	d538      	bpl.n	83ad6 <__swbuf_r+0x8e>
   83a64:	6926      	ldr	r6, [r4, #16]
   83a66:	2e00      	cmp	r6, #0
   83a68:	d035      	beq.n	83ad6 <__swbuf_r+0x8e>
   83a6a:	0499      	lsls	r1, r3, #18
   83a6c:	b2ed      	uxtb	r5, r5
   83a6e:	d515      	bpl.n	83a9c <__swbuf_r+0x54>
   83a70:	6823      	ldr	r3, [r4, #0]
   83a72:	6962      	ldr	r2, [r4, #20]
   83a74:	1b9e      	subs	r6, r3, r6
   83a76:	4296      	cmp	r6, r2
   83a78:	da1c      	bge.n	83ab4 <__swbuf_r+0x6c>
   83a7a:	3601      	adds	r6, #1
   83a7c:	68a2      	ldr	r2, [r4, #8]
   83a7e:	1c59      	adds	r1, r3, #1
   83a80:	3a01      	subs	r2, #1
   83a82:	60a2      	str	r2, [r4, #8]
   83a84:	6021      	str	r1, [r4, #0]
   83a86:	701d      	strb	r5, [r3, #0]
   83a88:	6963      	ldr	r3, [r4, #20]
   83a8a:	42b3      	cmp	r3, r6
   83a8c:	d01a      	beq.n	83ac4 <__swbuf_r+0x7c>
   83a8e:	89a3      	ldrh	r3, [r4, #12]
   83a90:	07db      	lsls	r3, r3, #31
   83a92:	d501      	bpl.n	83a98 <__swbuf_r+0x50>
   83a94:	2d0a      	cmp	r5, #10
   83a96:	d015      	beq.n	83ac4 <__swbuf_r+0x7c>
   83a98:	4628      	mov	r0, r5
   83a9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83a9c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   83a9e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   83aa2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   83aa6:	6663      	str	r3, [r4, #100]	; 0x64
   83aa8:	6823      	ldr	r3, [r4, #0]
   83aaa:	81a2      	strh	r2, [r4, #12]
   83aac:	6962      	ldr	r2, [r4, #20]
   83aae:	1b9e      	subs	r6, r3, r6
   83ab0:	4296      	cmp	r6, r2
   83ab2:	dbe2      	blt.n	83a7a <__swbuf_r+0x32>
   83ab4:	4638      	mov	r0, r7
   83ab6:	4621      	mov	r1, r4
   83ab8:	f7fe fde4 	bl	82684 <_fflush_r>
   83abc:	b940      	cbnz	r0, 83ad0 <__swbuf_r+0x88>
   83abe:	6823      	ldr	r3, [r4, #0]
   83ac0:	2601      	movs	r6, #1
   83ac2:	e7db      	b.n	83a7c <__swbuf_r+0x34>
   83ac4:	4638      	mov	r0, r7
   83ac6:	4621      	mov	r1, r4
   83ac8:	f7fe fddc 	bl	82684 <_fflush_r>
   83acc:	2800      	cmp	r0, #0
   83ace:	d0e3      	beq.n	83a98 <__swbuf_r+0x50>
   83ad0:	f04f 30ff 	mov.w	r0, #4294967295
   83ad4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83ad6:	4638      	mov	r0, r7
   83ad8:	4621      	mov	r1, r4
   83ada:	f7fe fcbd 	bl	82458 <__swsetup_r>
   83ade:	2800      	cmp	r0, #0
   83ae0:	d1f6      	bne.n	83ad0 <__swbuf_r+0x88>
   83ae2:	89a2      	ldrh	r2, [r4, #12]
   83ae4:	6926      	ldr	r6, [r4, #16]
   83ae6:	b293      	uxth	r3, r2
   83ae8:	e7bf      	b.n	83a6a <__swbuf_r+0x22>
   83aea:	f7fe fde7 	bl	826bc <__sinit>
   83aee:	e7b3      	b.n	83a58 <__swbuf_r+0x10>

00083af0 <_wcrtomb_r>:
   83af0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83af4:	461e      	mov	r6, r3
   83af6:	b086      	sub	sp, #24
   83af8:	460c      	mov	r4, r1
   83afa:	4605      	mov	r5, r0
   83afc:	4617      	mov	r7, r2
   83afe:	4b0f      	ldr	r3, [pc, #60]	; (83b3c <_wcrtomb_r+0x4c>)
   83b00:	b191      	cbz	r1, 83b28 <_wcrtomb_r+0x38>
   83b02:	f8d3 8000 	ldr.w	r8, [r3]
   83b06:	f7ff f999 	bl	82e3c <__locale_charset>
   83b0a:	9600      	str	r6, [sp, #0]
   83b0c:	4603      	mov	r3, r0
   83b0e:	4621      	mov	r1, r4
   83b10:	463a      	mov	r2, r7
   83b12:	4628      	mov	r0, r5
   83b14:	47c0      	blx	r8
   83b16:	1c43      	adds	r3, r0, #1
   83b18:	d103      	bne.n	83b22 <_wcrtomb_r+0x32>
   83b1a:	2200      	movs	r2, #0
   83b1c:	238a      	movs	r3, #138	; 0x8a
   83b1e:	6032      	str	r2, [r6, #0]
   83b20:	602b      	str	r3, [r5, #0]
   83b22:	b006      	add	sp, #24
   83b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83b28:	681f      	ldr	r7, [r3, #0]
   83b2a:	f7ff f987 	bl	82e3c <__locale_charset>
   83b2e:	9600      	str	r6, [sp, #0]
   83b30:	4603      	mov	r3, r0
   83b32:	4622      	mov	r2, r4
   83b34:	4628      	mov	r0, r5
   83b36:	a903      	add	r1, sp, #12
   83b38:	47b8      	blx	r7
   83b3a:	e7ec      	b.n	83b16 <_wcrtomb_r+0x26>
   83b3c:	200709a8 	.word	0x200709a8

00083b40 <__ascii_wctomb>:
   83b40:	b121      	cbz	r1, 83b4c <__ascii_wctomb+0xc>
   83b42:	2aff      	cmp	r2, #255	; 0xff
   83b44:	d804      	bhi.n	83b50 <__ascii_wctomb+0x10>
   83b46:	700a      	strb	r2, [r1, #0]
   83b48:	2001      	movs	r0, #1
   83b4a:	4770      	bx	lr
   83b4c:	4608      	mov	r0, r1
   83b4e:	4770      	bx	lr
   83b50:	238a      	movs	r3, #138	; 0x8a
   83b52:	6003      	str	r3, [r0, #0]
   83b54:	f04f 30ff 	mov.w	r0, #4294967295
   83b58:	4770      	bx	lr
   83b5a:	bf00      	nop

00083b5c <_write_r>:
   83b5c:	b570      	push	{r4, r5, r6, lr}
   83b5e:	4c08      	ldr	r4, [pc, #32]	; (83b80 <_write_r+0x24>)
   83b60:	4606      	mov	r6, r0
   83b62:	2500      	movs	r5, #0
   83b64:	4608      	mov	r0, r1
   83b66:	4611      	mov	r1, r2
   83b68:	461a      	mov	r2, r3
   83b6a:	6025      	str	r5, [r4, #0]
   83b6c:	f7fc fe7c 	bl	80868 <_write>
   83b70:	1c43      	adds	r3, r0, #1
   83b72:	d000      	beq.n	83b76 <_write_r+0x1a>
   83b74:	bd70      	pop	{r4, r5, r6, pc}
   83b76:	6823      	ldr	r3, [r4, #0]
   83b78:	2b00      	cmp	r3, #0
   83b7a:	d0fb      	beq.n	83b74 <_write_r+0x18>
   83b7c:	6033      	str	r3, [r6, #0]
   83b7e:	bd70      	pop	{r4, r5, r6, pc}
   83b80:	20070ba4 	.word	0x20070ba4

00083b84 <__register_exitproc>:
   83b84:	b5f0      	push	{r4, r5, r6, r7, lr}
   83b86:	4c27      	ldr	r4, [pc, #156]	; (83c24 <__register_exitproc+0xa0>)
   83b88:	b085      	sub	sp, #20
   83b8a:	6826      	ldr	r6, [r4, #0]
   83b8c:	4607      	mov	r7, r0
   83b8e:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   83b92:	2c00      	cmp	r4, #0
   83b94:	d040      	beq.n	83c18 <__register_exitproc+0x94>
   83b96:	6865      	ldr	r5, [r4, #4]
   83b98:	2d1f      	cmp	r5, #31
   83b9a:	dd1e      	ble.n	83bda <__register_exitproc+0x56>
   83b9c:	4822      	ldr	r0, [pc, #136]	; (83c28 <__register_exitproc+0xa4>)
   83b9e:	b918      	cbnz	r0, 83ba8 <__register_exitproc+0x24>
   83ba0:	f04f 30ff 	mov.w	r0, #4294967295
   83ba4:	b005      	add	sp, #20
   83ba6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83ba8:	f44f 70c8 	mov.w	r0, #400	; 0x190
   83bac:	9103      	str	r1, [sp, #12]
   83bae:	9202      	str	r2, [sp, #8]
   83bb0:	9301      	str	r3, [sp, #4]
   83bb2:	f7ff f9bd 	bl	82f30 <malloc>
   83bb6:	9903      	ldr	r1, [sp, #12]
   83bb8:	4604      	mov	r4, r0
   83bba:	9a02      	ldr	r2, [sp, #8]
   83bbc:	9b01      	ldr	r3, [sp, #4]
   83bbe:	2800      	cmp	r0, #0
   83bc0:	d0ee      	beq.n	83ba0 <__register_exitproc+0x1c>
   83bc2:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
   83bc6:	2000      	movs	r0, #0
   83bc8:	6025      	str	r5, [r4, #0]
   83bca:	6060      	str	r0, [r4, #4]
   83bcc:	4605      	mov	r5, r0
   83bce:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   83bd2:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   83bd6:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   83bda:	b93f      	cbnz	r7, 83bec <__register_exitproc+0x68>
   83bdc:	1c6b      	adds	r3, r5, #1
   83bde:	2000      	movs	r0, #0
   83be0:	3502      	adds	r5, #2
   83be2:	6063      	str	r3, [r4, #4]
   83be4:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
   83be8:	b005      	add	sp, #20
   83bea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83bec:	2601      	movs	r6, #1
   83bee:	40ae      	lsls	r6, r5
   83bf0:	eb04 0085 	add.w	r0, r4, r5, lsl #2
   83bf4:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   83bf8:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   83bfc:	2f02      	cmp	r7, #2
   83bfe:	ea42 0206 	orr.w	r2, r2, r6
   83c02:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   83c06:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   83c0a:	d1e7      	bne.n	83bdc <__register_exitproc+0x58>
   83c0c:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   83c10:	431e      	orrs	r6, r3
   83c12:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
   83c16:	e7e1      	b.n	83bdc <__register_exitproc+0x58>
   83c18:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   83c1c:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   83c20:	e7b9      	b.n	83b96 <__register_exitproc+0x12>
   83c22:	bf00      	nop
   83c24:	0008482c 	.word	0x0008482c
   83c28:	00082f31 	.word	0x00082f31

00083c2c <_close_r>:
   83c2c:	b538      	push	{r3, r4, r5, lr}
   83c2e:	4c07      	ldr	r4, [pc, #28]	; (83c4c <_close_r+0x20>)
   83c30:	2300      	movs	r3, #0
   83c32:	4605      	mov	r5, r0
   83c34:	4608      	mov	r0, r1
   83c36:	6023      	str	r3, [r4, #0]
   83c38:	f7fd fa5c 	bl	810f4 <_close>
   83c3c:	1c43      	adds	r3, r0, #1
   83c3e:	d000      	beq.n	83c42 <_close_r+0x16>
   83c40:	bd38      	pop	{r3, r4, r5, pc}
   83c42:	6823      	ldr	r3, [r4, #0]
   83c44:	2b00      	cmp	r3, #0
   83c46:	d0fb      	beq.n	83c40 <_close_r+0x14>
   83c48:	602b      	str	r3, [r5, #0]
   83c4a:	bd38      	pop	{r3, r4, r5, pc}
   83c4c:	20070ba4 	.word	0x20070ba4

00083c50 <_fclose_r>:
   83c50:	b570      	push	{r4, r5, r6, lr}
   83c52:	460c      	mov	r4, r1
   83c54:	4605      	mov	r5, r0
   83c56:	b131      	cbz	r1, 83c66 <_fclose_r+0x16>
   83c58:	b110      	cbz	r0, 83c60 <_fclose_r+0x10>
   83c5a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83c5c:	2b00      	cmp	r3, #0
   83c5e:	d02f      	beq.n	83cc0 <_fclose_r+0x70>
   83c60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83c64:	b90b      	cbnz	r3, 83c6a <_fclose_r+0x1a>
   83c66:	2000      	movs	r0, #0
   83c68:	bd70      	pop	{r4, r5, r6, pc}
   83c6a:	4628      	mov	r0, r5
   83c6c:	4621      	mov	r1, r4
   83c6e:	f7fe fd09 	bl	82684 <_fflush_r>
   83c72:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   83c74:	4606      	mov	r6, r0
   83c76:	b133      	cbz	r3, 83c86 <_fclose_r+0x36>
   83c78:	4628      	mov	r0, r5
   83c7a:	69e1      	ldr	r1, [r4, #28]
   83c7c:	4798      	blx	r3
   83c7e:	2800      	cmp	r0, #0
   83c80:	bfb8      	it	lt
   83c82:	f04f 36ff 	movlt.w	r6, #4294967295
   83c86:	89a3      	ldrh	r3, [r4, #12]
   83c88:	061b      	lsls	r3, r3, #24
   83c8a:	d41c      	bmi.n	83cc6 <_fclose_r+0x76>
   83c8c:	6b21      	ldr	r1, [r4, #48]	; 0x30
   83c8e:	b141      	cbz	r1, 83ca2 <_fclose_r+0x52>
   83c90:	f104 0340 	add.w	r3, r4, #64	; 0x40
   83c94:	4299      	cmp	r1, r3
   83c96:	d002      	beq.n	83c9e <_fclose_r+0x4e>
   83c98:	4628      	mov	r0, r5
   83c9a:	f7fe fe53 	bl	82944 <_free_r>
   83c9e:	2300      	movs	r3, #0
   83ca0:	6323      	str	r3, [r4, #48]	; 0x30
   83ca2:	6c61      	ldr	r1, [r4, #68]	; 0x44
   83ca4:	b121      	cbz	r1, 83cb0 <_fclose_r+0x60>
   83ca6:	4628      	mov	r0, r5
   83ca8:	f7fe fe4c 	bl	82944 <_free_r>
   83cac:	2300      	movs	r3, #0
   83cae:	6463      	str	r3, [r4, #68]	; 0x44
   83cb0:	f7fe fd7e 	bl	827b0 <__sfp_lock_acquire>
   83cb4:	2300      	movs	r3, #0
   83cb6:	81a3      	strh	r3, [r4, #12]
   83cb8:	f7fe fd7c 	bl	827b4 <__sfp_lock_release>
   83cbc:	4630      	mov	r0, r6
   83cbe:	bd70      	pop	{r4, r5, r6, pc}
   83cc0:	f7fe fcfc 	bl	826bc <__sinit>
   83cc4:	e7cc      	b.n	83c60 <_fclose_r+0x10>
   83cc6:	4628      	mov	r0, r5
   83cc8:	6921      	ldr	r1, [r4, #16]
   83cca:	f7fe fe3b 	bl	82944 <_free_r>
   83cce:	e7dd      	b.n	83c8c <_fclose_r+0x3c>

00083cd0 <fclose>:
   83cd0:	4b02      	ldr	r3, [pc, #8]	; (83cdc <fclose+0xc>)
   83cd2:	4601      	mov	r1, r0
   83cd4:	6818      	ldr	r0, [r3, #0]
   83cd6:	f7ff bfbb 	b.w	83c50 <_fclose_r>
   83cda:	bf00      	nop
   83cdc:	20070570 	.word	0x20070570

00083ce0 <_fstat_r>:
   83ce0:	b538      	push	{r3, r4, r5, lr}
   83ce2:	4c08      	ldr	r4, [pc, #32]	; (83d04 <_fstat_r+0x24>)
   83ce4:	2300      	movs	r3, #0
   83ce6:	4605      	mov	r5, r0
   83ce8:	4608      	mov	r0, r1
   83cea:	4611      	mov	r1, r2
   83cec:	6023      	str	r3, [r4, #0]
   83cee:	f7fd fa05 	bl	810fc <_fstat>
   83cf2:	1c43      	adds	r3, r0, #1
   83cf4:	d000      	beq.n	83cf8 <_fstat_r+0x18>
   83cf6:	bd38      	pop	{r3, r4, r5, pc}
   83cf8:	6823      	ldr	r3, [r4, #0]
   83cfa:	2b00      	cmp	r3, #0
   83cfc:	d0fb      	beq.n	83cf6 <_fstat_r+0x16>
   83cfe:	602b      	str	r3, [r5, #0]
   83d00:	bd38      	pop	{r3, r4, r5, pc}
   83d02:	bf00      	nop
   83d04:	20070ba4 	.word	0x20070ba4

00083d08 <_isatty_r>:
   83d08:	b538      	push	{r3, r4, r5, lr}
   83d0a:	4c07      	ldr	r4, [pc, #28]	; (83d28 <_isatty_r+0x20>)
   83d0c:	2300      	movs	r3, #0
   83d0e:	4605      	mov	r5, r0
   83d10:	4608      	mov	r0, r1
   83d12:	6023      	str	r3, [r4, #0]
   83d14:	f7fd f9f8 	bl	81108 <_isatty>
   83d18:	1c43      	adds	r3, r0, #1
   83d1a:	d000      	beq.n	83d1e <_isatty_r+0x16>
   83d1c:	bd38      	pop	{r3, r4, r5, pc}
   83d1e:	6823      	ldr	r3, [r4, #0]
   83d20:	2b00      	cmp	r3, #0
   83d22:	d0fb      	beq.n	83d1c <_isatty_r+0x14>
   83d24:	602b      	str	r3, [r5, #0]
   83d26:	bd38      	pop	{r3, r4, r5, pc}
   83d28:	20070ba4 	.word	0x20070ba4

00083d2c <_lseek_r>:
   83d2c:	b570      	push	{r4, r5, r6, lr}
   83d2e:	4c08      	ldr	r4, [pc, #32]	; (83d50 <_lseek_r+0x24>)
   83d30:	4606      	mov	r6, r0
   83d32:	2500      	movs	r5, #0
   83d34:	4608      	mov	r0, r1
   83d36:	4611      	mov	r1, r2
   83d38:	461a      	mov	r2, r3
   83d3a:	6025      	str	r5, [r4, #0]
   83d3c:	f7fd f9e6 	bl	8110c <_lseek>
   83d40:	1c43      	adds	r3, r0, #1
   83d42:	d000      	beq.n	83d46 <_lseek_r+0x1a>
   83d44:	bd70      	pop	{r4, r5, r6, pc}
   83d46:	6823      	ldr	r3, [r4, #0]
   83d48:	2b00      	cmp	r3, #0
   83d4a:	d0fb      	beq.n	83d44 <_lseek_r+0x18>
   83d4c:	6033      	str	r3, [r6, #0]
   83d4e:	bd70      	pop	{r4, r5, r6, pc}
   83d50:	20070ba4 	.word	0x20070ba4

00083d54 <_read_r>:
   83d54:	b570      	push	{r4, r5, r6, lr}
   83d56:	4c08      	ldr	r4, [pc, #32]	; (83d78 <_read_r+0x24>)
   83d58:	4606      	mov	r6, r0
   83d5a:	2500      	movs	r5, #0
   83d5c:	4608      	mov	r0, r1
   83d5e:	4611      	mov	r1, r2
   83d60:	461a      	mov	r2, r3
   83d62:	6025      	str	r5, [r4, #0]
   83d64:	f7fc f9f0 	bl	80148 <_read>
   83d68:	1c43      	adds	r3, r0, #1
   83d6a:	d000      	beq.n	83d6e <_read_r+0x1a>
   83d6c:	bd70      	pop	{r4, r5, r6, pc}
   83d6e:	6823      	ldr	r3, [r4, #0]
   83d70:	2b00      	cmp	r3, #0
   83d72:	d0fb      	beq.n	83d6c <_read_r+0x18>
   83d74:	6033      	str	r3, [r6, #0]
   83d76:	bd70      	pop	{r4, r5, r6, pc}
   83d78:	20070ba4 	.word	0x20070ba4

00083d7c <__aeabi_uldivmod>:
   83d7c:	b94b      	cbnz	r3, 83d92 <__aeabi_uldivmod+0x16>
   83d7e:	b942      	cbnz	r2, 83d92 <__aeabi_uldivmod+0x16>
   83d80:	2900      	cmp	r1, #0
   83d82:	bf08      	it	eq
   83d84:	2800      	cmpeq	r0, #0
   83d86:	d002      	beq.n	83d8e <__aeabi_uldivmod+0x12>
   83d88:	f04f 31ff 	mov.w	r1, #4294967295
   83d8c:	4608      	mov	r0, r1
   83d8e:	f000 b83b 	b.w	83e08 <__aeabi_idiv0>
   83d92:	b082      	sub	sp, #8
   83d94:	46ec      	mov	ip, sp
   83d96:	e92d 5000 	stmdb	sp!, {ip, lr}
   83d9a:	f000 f81d 	bl	83dd8 <__gnu_uldivmod_helper>
   83d9e:	f8dd e004 	ldr.w	lr, [sp, #4]
   83da2:	b002      	add	sp, #8
   83da4:	bc0c      	pop	{r2, r3}
   83da6:	4770      	bx	lr

00083da8 <__gnu_ldivmod_helper>:
   83da8:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   83dac:	9e08      	ldr	r6, [sp, #32]
   83dae:	4614      	mov	r4, r2
   83db0:	461d      	mov	r5, r3
   83db2:	4680      	mov	r8, r0
   83db4:	4689      	mov	r9, r1
   83db6:	f000 f829 	bl	83e0c <__divdi3>
   83dba:	fb04 f301 	mul.w	r3, r4, r1
   83dbe:	fba4 ab00 	umull	sl, fp, r4, r0
   83dc2:	fb00 3205 	mla	r2, r0, r5, r3
   83dc6:	4493      	add	fp, r2
   83dc8:	ebb8 080a 	subs.w	r8, r8, sl
   83dcc:	eb69 090b 	sbc.w	r9, r9, fp
   83dd0:	e9c6 8900 	strd	r8, r9, [r6]
   83dd4:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

00083dd8 <__gnu_uldivmod_helper>:
   83dd8:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   83ddc:	9e08      	ldr	r6, [sp, #32]
   83dde:	4614      	mov	r4, r2
   83de0:	461d      	mov	r5, r3
   83de2:	4680      	mov	r8, r0
   83de4:	4689      	mov	r9, r1
   83de6:	f000 f961 	bl	840ac <__udivdi3>
   83dea:	fb00 f505 	mul.w	r5, r0, r5
   83dee:	fba0 ab04 	umull	sl, fp, r0, r4
   83df2:	fb04 5401 	mla	r4, r4, r1, r5
   83df6:	44a3      	add	fp, r4
   83df8:	ebb8 080a 	subs.w	r8, r8, sl
   83dfc:	eb69 090b 	sbc.w	r9, r9, fp
   83e00:	e9c6 8900 	strd	r8, r9, [r6]
   83e04:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

00083e08 <__aeabi_idiv0>:
   83e08:	4770      	bx	lr
   83e0a:	bf00      	nop

00083e0c <__divdi3>:
   83e0c:	2900      	cmp	r1, #0
   83e0e:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83e12:	f2c0 80a1 	blt.w	83f58 <__divdi3+0x14c>
   83e16:	2400      	movs	r4, #0
   83e18:	2b00      	cmp	r3, #0
   83e1a:	f2c0 8098 	blt.w	83f4e <__divdi3+0x142>
   83e1e:	4615      	mov	r5, r2
   83e20:	4606      	mov	r6, r0
   83e22:	460f      	mov	r7, r1
   83e24:	2b00      	cmp	r3, #0
   83e26:	d13f      	bne.n	83ea8 <__divdi3+0x9c>
   83e28:	428a      	cmp	r2, r1
   83e2a:	d958      	bls.n	83ede <__divdi3+0xd2>
   83e2c:	fab2 f382 	clz	r3, r2
   83e30:	b14b      	cbz	r3, 83e46 <__divdi3+0x3a>
   83e32:	f1c3 0220 	rsb	r2, r3, #32
   83e36:	fa01 f703 	lsl.w	r7, r1, r3
   83e3a:	fa20 f202 	lsr.w	r2, r0, r2
   83e3e:	409d      	lsls	r5, r3
   83e40:	fa00 f603 	lsl.w	r6, r0, r3
   83e44:	4317      	orrs	r7, r2
   83e46:	0c29      	lsrs	r1, r5, #16
   83e48:	fbb7 f2f1 	udiv	r2, r7, r1
   83e4c:	fb01 7712 	mls	r7, r1, r2, r7
   83e50:	b2a8      	uxth	r0, r5
   83e52:	fb00 f302 	mul.w	r3, r0, r2
   83e56:	ea4f 4c16 	mov.w	ip, r6, lsr #16
   83e5a:	ea4c 4707 	orr.w	r7, ip, r7, lsl #16
   83e5e:	42bb      	cmp	r3, r7
   83e60:	d909      	bls.n	83e76 <__divdi3+0x6a>
   83e62:	197f      	adds	r7, r7, r5
   83e64:	f102 3cff 	add.w	ip, r2, #4294967295
   83e68:	f080 8105 	bcs.w	84076 <__divdi3+0x26a>
   83e6c:	42bb      	cmp	r3, r7
   83e6e:	f240 8102 	bls.w	84076 <__divdi3+0x26a>
   83e72:	3a02      	subs	r2, #2
   83e74:	442f      	add	r7, r5
   83e76:	1aff      	subs	r7, r7, r3
   83e78:	fbb7 f3f1 	udiv	r3, r7, r1
   83e7c:	fb01 7113 	mls	r1, r1, r3, r7
   83e80:	fb00 f003 	mul.w	r0, r0, r3
   83e84:	b2b6      	uxth	r6, r6
   83e86:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
   83e8a:	4288      	cmp	r0, r1
   83e8c:	d908      	bls.n	83ea0 <__divdi3+0x94>
   83e8e:	1949      	adds	r1, r1, r5
   83e90:	f103 37ff 	add.w	r7, r3, #4294967295
   83e94:	f080 80f1 	bcs.w	8407a <__divdi3+0x26e>
   83e98:	4288      	cmp	r0, r1
   83e9a:	f240 80ee 	bls.w	8407a <__divdi3+0x26e>
   83e9e:	3b02      	subs	r3, #2
   83ea0:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   83ea4:	2300      	movs	r3, #0
   83ea6:	e003      	b.n	83eb0 <__divdi3+0xa4>
   83ea8:	428b      	cmp	r3, r1
   83eaa:	d90a      	bls.n	83ec2 <__divdi3+0xb6>
   83eac:	2300      	movs	r3, #0
   83eae:	461a      	mov	r2, r3
   83eb0:	4610      	mov	r0, r2
   83eb2:	4619      	mov	r1, r3
   83eb4:	b114      	cbz	r4, 83ebc <__divdi3+0xb0>
   83eb6:	4240      	negs	r0, r0
   83eb8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   83ebc:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83ec0:	4770      	bx	lr
   83ec2:	fab3 f883 	clz	r8, r3
   83ec6:	f1b8 0f00 	cmp.w	r8, #0
   83eca:	f040 8088 	bne.w	83fde <__divdi3+0x1d2>
   83ece:	428b      	cmp	r3, r1
   83ed0:	d302      	bcc.n	83ed8 <__divdi3+0xcc>
   83ed2:	4282      	cmp	r2, r0
   83ed4:	f200 80e2 	bhi.w	8409c <__divdi3+0x290>
   83ed8:	2300      	movs	r3, #0
   83eda:	2201      	movs	r2, #1
   83edc:	e7e8      	b.n	83eb0 <__divdi3+0xa4>
   83ede:	b912      	cbnz	r2, 83ee6 <__divdi3+0xda>
   83ee0:	2301      	movs	r3, #1
   83ee2:	fbb3 f5f2 	udiv	r5, r3, r2
   83ee6:	fab5 f285 	clz	r2, r5
   83eea:	2a00      	cmp	r2, #0
   83eec:	d13a      	bne.n	83f64 <__divdi3+0x158>
   83eee:	1b7f      	subs	r7, r7, r5
   83ef0:	0c28      	lsrs	r0, r5, #16
   83ef2:	fa1f fc85 	uxth.w	ip, r5
   83ef6:	2301      	movs	r3, #1
   83ef8:	fbb7 f1f0 	udiv	r1, r7, r0
   83efc:	fb00 7711 	mls	r7, r0, r1, r7
   83f00:	fb0c f201 	mul.w	r2, ip, r1
   83f04:	ea4f 4816 	mov.w	r8, r6, lsr #16
   83f08:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
   83f0c:	42ba      	cmp	r2, r7
   83f0e:	d907      	bls.n	83f20 <__divdi3+0x114>
   83f10:	197f      	adds	r7, r7, r5
   83f12:	f101 38ff 	add.w	r8, r1, #4294967295
   83f16:	d202      	bcs.n	83f1e <__divdi3+0x112>
   83f18:	42ba      	cmp	r2, r7
   83f1a:	f200 80c4 	bhi.w	840a6 <__divdi3+0x29a>
   83f1e:	4641      	mov	r1, r8
   83f20:	1abf      	subs	r7, r7, r2
   83f22:	fbb7 f2f0 	udiv	r2, r7, r0
   83f26:	fb00 7012 	mls	r0, r0, r2, r7
   83f2a:	fb0c fc02 	mul.w	ip, ip, r2
   83f2e:	b2b6      	uxth	r6, r6
   83f30:	ea46 4000 	orr.w	r0, r6, r0, lsl #16
   83f34:	4584      	cmp	ip, r0
   83f36:	d907      	bls.n	83f48 <__divdi3+0x13c>
   83f38:	1940      	adds	r0, r0, r5
   83f3a:	f102 37ff 	add.w	r7, r2, #4294967295
   83f3e:	d202      	bcs.n	83f46 <__divdi3+0x13a>
   83f40:	4584      	cmp	ip, r0
   83f42:	f200 80ae 	bhi.w	840a2 <__divdi3+0x296>
   83f46:	463a      	mov	r2, r7
   83f48:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   83f4c:	e7b0      	b.n	83eb0 <__divdi3+0xa4>
   83f4e:	43e4      	mvns	r4, r4
   83f50:	4252      	negs	r2, r2
   83f52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   83f56:	e762      	b.n	83e1e <__divdi3+0x12>
   83f58:	4240      	negs	r0, r0
   83f5a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   83f5e:	f04f 34ff 	mov.w	r4, #4294967295
   83f62:	e759      	b.n	83e18 <__divdi3+0xc>
   83f64:	4095      	lsls	r5, r2
   83f66:	f1c2 0920 	rsb	r9, r2, #32
   83f6a:	fa27 f109 	lsr.w	r1, r7, r9
   83f6e:	fa26 f909 	lsr.w	r9, r6, r9
   83f72:	4097      	lsls	r7, r2
   83f74:	0c28      	lsrs	r0, r5, #16
   83f76:	fbb1 f8f0 	udiv	r8, r1, r0
   83f7a:	fb00 1118 	mls	r1, r0, r8, r1
   83f7e:	fa1f fc85 	uxth.w	ip, r5
   83f82:	fb0c f308 	mul.w	r3, ip, r8
   83f86:	ea49 0907 	orr.w	r9, r9, r7
   83f8a:	ea4f 4719 	mov.w	r7, r9, lsr #16
   83f8e:	ea47 4101 	orr.w	r1, r7, r1, lsl #16
   83f92:	428b      	cmp	r3, r1
   83f94:	fa06 f602 	lsl.w	r6, r6, r2
   83f98:	d908      	bls.n	83fac <__divdi3+0x1a0>
   83f9a:	1949      	adds	r1, r1, r5
   83f9c:	f108 32ff 	add.w	r2, r8, #4294967295
   83fa0:	d27a      	bcs.n	84098 <__divdi3+0x28c>
   83fa2:	428b      	cmp	r3, r1
   83fa4:	d978      	bls.n	84098 <__divdi3+0x28c>
   83fa6:	f1a8 0802 	sub.w	r8, r8, #2
   83faa:	4429      	add	r1, r5
   83fac:	1ac9      	subs	r1, r1, r3
   83fae:	fbb1 f3f0 	udiv	r3, r1, r0
   83fb2:	fb00 1713 	mls	r7, r0, r3, r1
   83fb6:	fb0c f203 	mul.w	r2, ip, r3
   83fba:	fa1f f989 	uxth.w	r9, r9
   83fbe:	ea49 4707 	orr.w	r7, r9, r7, lsl #16
   83fc2:	42ba      	cmp	r2, r7
   83fc4:	d907      	bls.n	83fd6 <__divdi3+0x1ca>
   83fc6:	197f      	adds	r7, r7, r5
   83fc8:	f103 31ff 	add.w	r1, r3, #4294967295
   83fcc:	d260      	bcs.n	84090 <__divdi3+0x284>
   83fce:	42ba      	cmp	r2, r7
   83fd0:	d95e      	bls.n	84090 <__divdi3+0x284>
   83fd2:	3b02      	subs	r3, #2
   83fd4:	442f      	add	r7, r5
   83fd6:	1abf      	subs	r7, r7, r2
   83fd8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   83fdc:	e78c      	b.n	83ef8 <__divdi3+0xec>
   83fde:	f1c8 0220 	rsb	r2, r8, #32
   83fe2:	fa25 f102 	lsr.w	r1, r5, r2
   83fe6:	fa03 fc08 	lsl.w	ip, r3, r8
   83fea:	fa27 f302 	lsr.w	r3, r7, r2
   83fee:	fa20 f202 	lsr.w	r2, r0, r2
   83ff2:	fa07 f708 	lsl.w	r7, r7, r8
   83ff6:	ea41 0c0c 	orr.w	ip, r1, ip
   83ffa:	ea4f 491c 	mov.w	r9, ip, lsr #16
   83ffe:	fbb3 f1f9 	udiv	r1, r3, r9
   84002:	fb09 3311 	mls	r3, r9, r1, r3
   84006:	fa1f fa8c 	uxth.w	sl, ip
   8400a:	fb0a fb01 	mul.w	fp, sl, r1
   8400e:	4317      	orrs	r7, r2
   84010:	0c3a      	lsrs	r2, r7, #16
   84012:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   84016:	459b      	cmp	fp, r3
   84018:	fa05 f008 	lsl.w	r0, r5, r8
   8401c:	d908      	bls.n	84030 <__divdi3+0x224>
   8401e:	eb13 030c 	adds.w	r3, r3, ip
   84022:	f101 32ff 	add.w	r2, r1, #4294967295
   84026:	d235      	bcs.n	84094 <__divdi3+0x288>
   84028:	459b      	cmp	fp, r3
   8402a:	d933      	bls.n	84094 <__divdi3+0x288>
   8402c:	3902      	subs	r1, #2
   8402e:	4463      	add	r3, ip
   84030:	ebcb 0303 	rsb	r3, fp, r3
   84034:	fbb3 f2f9 	udiv	r2, r3, r9
   84038:	fb09 3312 	mls	r3, r9, r2, r3
   8403c:	fb0a fa02 	mul.w	sl, sl, r2
   84040:	b2bf      	uxth	r7, r7
   84042:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
   84046:	45ba      	cmp	sl, r7
   84048:	d908      	bls.n	8405c <__divdi3+0x250>
   8404a:	eb17 070c 	adds.w	r7, r7, ip
   8404e:	f102 33ff 	add.w	r3, r2, #4294967295
   84052:	d21b      	bcs.n	8408c <__divdi3+0x280>
   84054:	45ba      	cmp	sl, r7
   84056:	d919      	bls.n	8408c <__divdi3+0x280>
   84058:	3a02      	subs	r2, #2
   8405a:	4467      	add	r7, ip
   8405c:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
   84060:	fba5 0100 	umull	r0, r1, r5, r0
   84064:	ebca 0707 	rsb	r7, sl, r7
   84068:	428f      	cmp	r7, r1
   8406a:	f04f 0300 	mov.w	r3, #0
   8406e:	d30a      	bcc.n	84086 <__divdi3+0x27a>
   84070:	d005      	beq.n	8407e <__divdi3+0x272>
   84072:	462a      	mov	r2, r5
   84074:	e71c      	b.n	83eb0 <__divdi3+0xa4>
   84076:	4662      	mov	r2, ip
   84078:	e6fd      	b.n	83e76 <__divdi3+0x6a>
   8407a:	463b      	mov	r3, r7
   8407c:	e710      	b.n	83ea0 <__divdi3+0x94>
   8407e:	fa06 f608 	lsl.w	r6, r6, r8
   84082:	4286      	cmp	r6, r0
   84084:	d2f5      	bcs.n	84072 <__divdi3+0x266>
   84086:	1e6a      	subs	r2, r5, #1
   84088:	2300      	movs	r3, #0
   8408a:	e711      	b.n	83eb0 <__divdi3+0xa4>
   8408c:	461a      	mov	r2, r3
   8408e:	e7e5      	b.n	8405c <__divdi3+0x250>
   84090:	460b      	mov	r3, r1
   84092:	e7a0      	b.n	83fd6 <__divdi3+0x1ca>
   84094:	4611      	mov	r1, r2
   84096:	e7cb      	b.n	84030 <__divdi3+0x224>
   84098:	4690      	mov	r8, r2
   8409a:	e787      	b.n	83fac <__divdi3+0x1a0>
   8409c:	4643      	mov	r3, r8
   8409e:	4642      	mov	r2, r8
   840a0:	e706      	b.n	83eb0 <__divdi3+0xa4>
   840a2:	3a02      	subs	r2, #2
   840a4:	e750      	b.n	83f48 <__divdi3+0x13c>
   840a6:	3902      	subs	r1, #2
   840a8:	442f      	add	r7, r5
   840aa:	e739      	b.n	83f20 <__divdi3+0x114>

000840ac <__udivdi3>:
   840ac:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   840b0:	4614      	mov	r4, r2
   840b2:	4605      	mov	r5, r0
   840b4:	460e      	mov	r6, r1
   840b6:	2b00      	cmp	r3, #0
   840b8:	d143      	bne.n	84142 <__udivdi3+0x96>
   840ba:	428a      	cmp	r2, r1
   840bc:	d953      	bls.n	84166 <__udivdi3+0xba>
   840be:	fab2 f782 	clz	r7, r2
   840c2:	b157      	cbz	r7, 840da <__udivdi3+0x2e>
   840c4:	f1c7 0620 	rsb	r6, r7, #32
   840c8:	fa20 f606 	lsr.w	r6, r0, r6
   840cc:	fa01 f307 	lsl.w	r3, r1, r7
   840d0:	fa02 f407 	lsl.w	r4, r2, r7
   840d4:	fa00 f507 	lsl.w	r5, r0, r7
   840d8:	431e      	orrs	r6, r3
   840da:	0c21      	lsrs	r1, r4, #16
   840dc:	fbb6 f2f1 	udiv	r2, r6, r1
   840e0:	fb01 6612 	mls	r6, r1, r2, r6
   840e4:	b2a0      	uxth	r0, r4
   840e6:	fb00 f302 	mul.w	r3, r0, r2
   840ea:	0c2f      	lsrs	r7, r5, #16
   840ec:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   840f0:	42b3      	cmp	r3, r6
   840f2:	d909      	bls.n	84108 <__udivdi3+0x5c>
   840f4:	1936      	adds	r6, r6, r4
   840f6:	f102 37ff 	add.w	r7, r2, #4294967295
   840fa:	f080 80fd 	bcs.w	842f8 <__udivdi3+0x24c>
   840fe:	42b3      	cmp	r3, r6
   84100:	f240 80fa 	bls.w	842f8 <__udivdi3+0x24c>
   84104:	3a02      	subs	r2, #2
   84106:	4426      	add	r6, r4
   84108:	1af6      	subs	r6, r6, r3
   8410a:	fbb6 f3f1 	udiv	r3, r6, r1
   8410e:	fb01 6113 	mls	r1, r1, r3, r6
   84112:	fb00 f003 	mul.w	r0, r0, r3
   84116:	b2ad      	uxth	r5, r5
   84118:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
   8411c:	4288      	cmp	r0, r1
   8411e:	d908      	bls.n	84132 <__udivdi3+0x86>
   84120:	1909      	adds	r1, r1, r4
   84122:	f103 36ff 	add.w	r6, r3, #4294967295
   84126:	f080 80e9 	bcs.w	842fc <__udivdi3+0x250>
   8412a:	4288      	cmp	r0, r1
   8412c:	f240 80e6 	bls.w	842fc <__udivdi3+0x250>
   84130:	3b02      	subs	r3, #2
   84132:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   84136:	2300      	movs	r3, #0
   84138:	4610      	mov	r0, r2
   8413a:	4619      	mov	r1, r3
   8413c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   84140:	4770      	bx	lr
   84142:	428b      	cmp	r3, r1
   84144:	d84c      	bhi.n	841e0 <__udivdi3+0x134>
   84146:	fab3 f683 	clz	r6, r3
   8414a:	2e00      	cmp	r6, #0
   8414c:	d14f      	bne.n	841ee <__udivdi3+0x142>
   8414e:	428b      	cmp	r3, r1
   84150:	d302      	bcc.n	84158 <__udivdi3+0xac>
   84152:	4282      	cmp	r2, r0
   84154:	f200 80dd 	bhi.w	84312 <__udivdi3+0x266>
   84158:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8415c:	2300      	movs	r3, #0
   8415e:	2201      	movs	r2, #1
   84160:	4610      	mov	r0, r2
   84162:	4619      	mov	r1, r3
   84164:	4770      	bx	lr
   84166:	b912      	cbnz	r2, 8416e <__udivdi3+0xc2>
   84168:	2401      	movs	r4, #1
   8416a:	fbb4 f4f2 	udiv	r4, r4, r2
   8416e:	fab4 f284 	clz	r2, r4
   84172:	2a00      	cmp	r2, #0
   84174:	f040 8082 	bne.w	8427c <__udivdi3+0x1d0>
   84178:	1b09      	subs	r1, r1, r4
   8417a:	0c26      	lsrs	r6, r4, #16
   8417c:	b2a7      	uxth	r7, r4
   8417e:	2301      	movs	r3, #1
   84180:	fbb1 f0f6 	udiv	r0, r1, r6
   84184:	fb06 1110 	mls	r1, r6, r0, r1
   84188:	fb07 f200 	mul.w	r2, r7, r0
   8418c:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   84190:	ea4c 4101 	orr.w	r1, ip, r1, lsl #16
   84194:	428a      	cmp	r2, r1
   84196:	d907      	bls.n	841a8 <__udivdi3+0xfc>
   84198:	1909      	adds	r1, r1, r4
   8419a:	f100 3cff 	add.w	ip, r0, #4294967295
   8419e:	d202      	bcs.n	841a6 <__udivdi3+0xfa>
   841a0:	428a      	cmp	r2, r1
   841a2:	f200 80c8 	bhi.w	84336 <__udivdi3+0x28a>
   841a6:	4660      	mov	r0, ip
   841a8:	1a89      	subs	r1, r1, r2
   841aa:	fbb1 f2f6 	udiv	r2, r1, r6
   841ae:	fb06 1112 	mls	r1, r6, r2, r1
   841b2:	fb07 f702 	mul.w	r7, r7, r2
   841b6:	b2ad      	uxth	r5, r5
   841b8:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
   841bc:	42af      	cmp	r7, r5
   841be:	d908      	bls.n	841d2 <__udivdi3+0x126>
   841c0:	192c      	adds	r4, r5, r4
   841c2:	f102 31ff 	add.w	r1, r2, #4294967295
   841c6:	f080 809b 	bcs.w	84300 <__udivdi3+0x254>
   841ca:	42a7      	cmp	r7, r4
   841cc:	f240 8098 	bls.w	84300 <__udivdi3+0x254>
   841d0:	3a02      	subs	r2, #2
   841d2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
   841d6:	4610      	mov	r0, r2
   841d8:	4619      	mov	r1, r3
   841da:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   841de:	4770      	bx	lr
   841e0:	2300      	movs	r3, #0
   841e2:	461a      	mov	r2, r3
   841e4:	4610      	mov	r0, r2
   841e6:	4619      	mov	r1, r3
   841e8:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   841ec:	4770      	bx	lr
   841ee:	f1c6 0520 	rsb	r5, r6, #32
   841f2:	fa22 f705 	lsr.w	r7, r2, r5
   841f6:	fa03 f406 	lsl.w	r4, r3, r6
   841fa:	fa21 f305 	lsr.w	r3, r1, r5
   841fe:	fa01 fb06 	lsl.w	fp, r1, r6
   84202:	fa20 f505 	lsr.w	r5, r0, r5
   84206:	433c      	orrs	r4, r7
   84208:	ea4f 4814 	mov.w	r8, r4, lsr #16
   8420c:	fbb3 fcf8 	udiv	ip, r3, r8
   84210:	fb08 331c 	mls	r3, r8, ip, r3
   84214:	fa1f f984 	uxth.w	r9, r4
   84218:	fb09 fa0c 	mul.w	sl, r9, ip
   8421c:	ea45 0b0b 	orr.w	fp, r5, fp
   84220:	ea4f 451b 	mov.w	r5, fp, lsr #16
   84224:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
   84228:	459a      	cmp	sl, r3
   8422a:	fa02 f206 	lsl.w	r2, r2, r6
   8422e:	d904      	bls.n	8423a <__udivdi3+0x18e>
   84230:	191b      	adds	r3, r3, r4
   84232:	f10c 35ff 	add.w	r5, ip, #4294967295
   84236:	d36f      	bcc.n	84318 <__udivdi3+0x26c>
   84238:	46ac      	mov	ip, r5
   8423a:	ebca 0303 	rsb	r3, sl, r3
   8423e:	fbb3 f5f8 	udiv	r5, r3, r8
   84242:	fb08 3315 	mls	r3, r8, r5, r3
   84246:	fb09 f905 	mul.w	r9, r9, r5
   8424a:	fa1f fb8b 	uxth.w	fp, fp
   8424e:	ea4b 4703 	orr.w	r7, fp, r3, lsl #16
   84252:	45b9      	cmp	r9, r7
   84254:	d904      	bls.n	84260 <__udivdi3+0x1b4>
   84256:	193f      	adds	r7, r7, r4
   84258:	f105 33ff 	add.w	r3, r5, #4294967295
   8425c:	d362      	bcc.n	84324 <__udivdi3+0x278>
   8425e:	461d      	mov	r5, r3
   84260:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
   84264:	fbac 2302 	umull	r2, r3, ip, r2
   84268:	ebc9 0707 	rsb	r7, r9, r7
   8426c:	429f      	cmp	r7, r3
   8426e:	f04f 0500 	mov.w	r5, #0
   84272:	d34a      	bcc.n	8430a <__udivdi3+0x25e>
   84274:	d046      	beq.n	84304 <__udivdi3+0x258>
   84276:	4662      	mov	r2, ip
   84278:	462b      	mov	r3, r5
   8427a:	e75d      	b.n	84138 <__udivdi3+0x8c>
   8427c:	4094      	lsls	r4, r2
   8427e:	f1c2 0920 	rsb	r9, r2, #32
   84282:	fa21 fc09 	lsr.w	ip, r1, r9
   84286:	4091      	lsls	r1, r2
   84288:	fa20 f909 	lsr.w	r9, r0, r9
   8428c:	0c26      	lsrs	r6, r4, #16
   8428e:	fbbc f8f6 	udiv	r8, ip, r6
   84292:	fb06 cc18 	mls	ip, r6, r8, ip
   84296:	b2a7      	uxth	r7, r4
   84298:	fb07 f308 	mul.w	r3, r7, r8
   8429c:	ea49 0901 	orr.w	r9, r9, r1
   842a0:	ea4f 4119 	mov.w	r1, r9, lsr #16
   842a4:	ea41 4c0c 	orr.w	ip, r1, ip, lsl #16
   842a8:	4563      	cmp	r3, ip
   842aa:	fa00 f502 	lsl.w	r5, r0, r2
   842ae:	d909      	bls.n	842c4 <__udivdi3+0x218>
   842b0:	eb1c 0c04 	adds.w	ip, ip, r4
   842b4:	f108 32ff 	add.w	r2, r8, #4294967295
   842b8:	d23b      	bcs.n	84332 <__udivdi3+0x286>
   842ba:	4563      	cmp	r3, ip
   842bc:	d939      	bls.n	84332 <__udivdi3+0x286>
   842be:	f1a8 0802 	sub.w	r8, r8, #2
   842c2:	44a4      	add	ip, r4
   842c4:	ebc3 0c0c 	rsb	ip, r3, ip
   842c8:	fbbc f3f6 	udiv	r3, ip, r6
   842cc:	fb06 c113 	mls	r1, r6, r3, ip
   842d0:	fb07 f203 	mul.w	r2, r7, r3
   842d4:	fa1f f989 	uxth.w	r9, r9
   842d8:	ea49 4101 	orr.w	r1, r9, r1, lsl #16
   842dc:	428a      	cmp	r2, r1
   842de:	d907      	bls.n	842f0 <__udivdi3+0x244>
   842e0:	1909      	adds	r1, r1, r4
   842e2:	f103 30ff 	add.w	r0, r3, #4294967295
   842e6:	d222      	bcs.n	8432e <__udivdi3+0x282>
   842e8:	428a      	cmp	r2, r1
   842ea:	d920      	bls.n	8432e <__udivdi3+0x282>
   842ec:	3b02      	subs	r3, #2
   842ee:	4421      	add	r1, r4
   842f0:	1a89      	subs	r1, r1, r2
   842f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   842f6:	e743      	b.n	84180 <__udivdi3+0xd4>
   842f8:	463a      	mov	r2, r7
   842fa:	e705      	b.n	84108 <__udivdi3+0x5c>
   842fc:	4633      	mov	r3, r6
   842fe:	e718      	b.n	84132 <__udivdi3+0x86>
   84300:	460a      	mov	r2, r1
   84302:	e766      	b.n	841d2 <__udivdi3+0x126>
   84304:	40b0      	lsls	r0, r6
   84306:	4290      	cmp	r0, r2
   84308:	d2b5      	bcs.n	84276 <__udivdi3+0x1ca>
   8430a:	f10c 32ff 	add.w	r2, ip, #4294967295
   8430e:	2300      	movs	r3, #0
   84310:	e712      	b.n	84138 <__udivdi3+0x8c>
   84312:	4633      	mov	r3, r6
   84314:	4632      	mov	r2, r6
   84316:	e70f      	b.n	84138 <__udivdi3+0x8c>
   84318:	459a      	cmp	sl, r3
   8431a:	d98d      	bls.n	84238 <__udivdi3+0x18c>
   8431c:	f1ac 0c02 	sub.w	ip, ip, #2
   84320:	4423      	add	r3, r4
   84322:	e78a      	b.n	8423a <__udivdi3+0x18e>
   84324:	45b9      	cmp	r9, r7
   84326:	d99a      	bls.n	8425e <__udivdi3+0x1b2>
   84328:	3d02      	subs	r5, #2
   8432a:	4427      	add	r7, r4
   8432c:	e798      	b.n	84260 <__udivdi3+0x1b4>
   8432e:	4603      	mov	r3, r0
   84330:	e7de      	b.n	842f0 <__udivdi3+0x244>
   84332:	4690      	mov	r8, r2
   84334:	e7c6      	b.n	842c4 <__udivdi3+0x218>
   84336:	3802      	subs	r0, #2
   84338:	4421      	add	r1, r4
   8433a:	e735      	b.n	841a8 <__udivdi3+0xfc>
   8433c:	74697257 	.word	0x74697257
   84340:	6f742065 	.word	0x6f742065
   84344:	616c7320 	.word	0x616c7320
   84348:	00006576 	.word	0x00006576
   8434c:	74697257 	.word	0x74697257
   84350:	6f742065 	.word	0x6f742065
   84354:	616c7320 	.word	0x616c7320
   84358:	64206576 	.word	0x64206576
   8435c:	00656e6f 	.word	0x00656e6f
   84360:	6f727265 	.word	0x6f727265
   84364:	6e6f2072 	.word	0x6e6f2072
   84368:	69727720 	.word	0x69727720
   8436c:	74206574 	.word	0x74206574
   84370:	6c73206f 	.word	0x6c73206f
   84374:	00657661 	.word	0x00657661
   84378:	64616552 	.word	0x64616552
   8437c:	6f726620 	.word	0x6f726620
   84380:	6c73206d 	.word	0x6c73206d
   84384:	00657661 	.word	0x00657661
   84388:	656e6f44 	.word	0x656e6f44
   8438c:	61657220 	.word	0x61657220
   84390:	676e6964 	.word	0x676e6964
   84394:	00000000 	.word	0x00000000
   84398:	20746f67 	.word	0x20746f67
   8439c:	41544144 	.word	0x41544144
   843a0:	0a78253a 	.word	0x0a78253a
   843a4:	00000000 	.word	0x00000000
   843a8:	20746f67 	.word	0x20746f67
   843ac:	3a746e69 	.word	0x3a746e69
   843b0:	000a6425 	.word	0x000a6425
   843b4:	20746f67 	.word	0x20746f67
   843b8:	72616863 	.word	0x72616863
   843bc:	0a63253a 	.word	0x0a63253a
   843c0:	00000000 	.word	0x00000000
   843c4:	20746f67 	.word	0x20746f67
   843c8:	72662078 	.word	0x72662078
   843cc:	61206d6f 	.word	0x61206d6f
   843d0:	69756472 	.word	0x69756472
   843d4:	4e206f6e 	.word	0x4e206f6e
   843d8:	4144204f 	.word	0x4144204f
   843dc:	00004154 	.word	0x00004154
   843e0:	20746f67 	.word	0x20746f67
   843e4:	68206e69 	.word	0x68206e69
   843e8:	203a7865 	.word	0x203a7865
   843ec:	000a7825 	.word	0x000a7825
   843f0:	20746f67 	.word	0x20746f67
   843f4:	64206e69 	.word	0x64206e69
   843f8:	203a6365 	.word	0x203a6365
   843fc:	000a6425 	.word	0x000a6425
   84400:	20646d63 	.word	0x20646d63
   84404:	54207369 	.word	0x54207369
   84408:	435f4957 	.word	0x435f4957
   8440c:	465f444d 	.word	0x465f444d
   84410:	5f4d4f52 	.word	0x5f4d4f52
   84414:	5f4d5241 	.word	0x5f4d5241
   84418:	203a4449 	.word	0x203a4449
   8441c:	0a207825 	.word	0x0a207825
   84420:	00000000 	.word	0x00000000
   84424:	20646d63 	.word	0x20646d63
   84428:	54207369 	.word	0x54207369
   8442c:	435f4957 	.word	0x435f4957
   84430:	465f444d 	.word	0x465f444d
   84434:	5f4d4f52 	.word	0x5f4d4f52
   84438:	5f4d5241 	.word	0x5f4d5241
   8443c:	5f4a424f 	.word	0x5f4a424f
   84440:	3a534f50 	.word	0x3a534f50
   84444:	20782520 	.word	0x20782520
   84448:	0000000a 	.word	0x0000000a
   8444c:	20646d63 	.word	0x20646d63
   84450:	54207369 	.word	0x54207369
   84454:	435f4957 	.word	0x435f4957
   84458:	465f444d 	.word	0x465f444d
   8445c:	5f4d4f52 	.word	0x5f4d4f52
   84460:	5f4d5241 	.word	0x5f4d5241
   84464:	504f5244 	.word	0x504f5244
   84468:	5f584f42 	.word	0x5f584f42
   8446c:	3a534f50 	.word	0x3a534f50
   84470:	20782520 	.word	0x20782520
   84474:	0000000a 	.word	0x0000000a
   84478:	20646d63 	.word	0x20646d63
   8447c:	54207369 	.word	0x54207369
   84480:	435f4957 	.word	0x435f4957
   84484:	465f444d 	.word	0x465f444d
   84488:	5f4d4f52 	.word	0x5f4d4f52
   8448c:	5f4d5241 	.word	0x5f4d5241
   84490:	5358414d 	.word	0x5358414d
   84494:	44454550 	.word	0x44454550
   84498:	7825203a 	.word	0x7825203a
   8449c:	00000a20 	.word	0x00000a20
   844a0:	20646d63 	.word	0x20646d63
   844a4:	54207369 	.word	0x54207369
   844a8:	435f4957 	.word	0x435f4957
   844ac:	465f444d 	.word	0x465f444d
   844b0:	5f4d4f52 	.word	0x5f4d4f52
   844b4:	5f4d5241 	.word	0x5f4d5241
   844b8:	43435553 	.word	0x43435553
   844bc:	5f535345 	.word	0x5f535345
   844c0:	5446494c 	.word	0x5446494c
   844c4:	7825203a 	.word	0x7825203a
   844c8:	00000a20 	.word	0x00000a20
   844cc:	20646d63 	.word	0x20646d63
   844d0:	54207369 	.word	0x54207369
   844d4:	435f4957 	.word	0x435f4957
   844d8:	465f444d 	.word	0x465f444d
   844dc:	5f4d4f52 	.word	0x5f4d4f52
   844e0:	5f4d5241 	.word	0x5f4d5241
   844e4:	4c494146 	.word	0x4c494146
   844e8:	494c5f44 	.word	0x494c5f44
   844ec:	203a5446 	.word	0x203a5446
   844f0:	0a207825 	.word	0x0a207825
   844f4:	00000000 	.word	0x00000000
   844f8:	20646d63 	.word	0x20646d63
   844fc:	54207369 	.word	0x54207369
   84500:	435f4957 	.word	0x435f4957
   84504:	465f444d 	.word	0x465f444d
   84508:	5f4d4f52 	.word	0x5f4d4f52
   8450c:	5f4d5241 	.word	0x5f4d5241
   84510:	43435553 	.word	0x43435553
   84514:	5f535345 	.word	0x5f535345
   84518:	494c4544 	.word	0x494c4544
   8451c:	3a524556 	.word	0x3a524556
   84520:	20782520 	.word	0x20782520
   84524:	0000000a 	.word	0x0000000a
   84528:	20646d63 	.word	0x20646d63
   8452c:	54207369 	.word	0x54207369
   84530:	435f4957 	.word	0x435f4957
   84534:	465f444d 	.word	0x465f444d
   84538:	5f4d4f52 	.word	0x5f4d4f52
   8453c:	5f4d5241 	.word	0x5f4d5241
   84540:	4c494146 	.word	0x4c494146
   84544:	445f4445 	.word	0x445f4445
   84548:	56494c45 	.word	0x56494c45
   8454c:	203a5245 	.word	0x203a5245
   84550:	0a207825 	.word	0x0a207825
   84554:	00000000 	.word	0x00000000
   84558:	20646d63 	.word	0x20646d63
   8455c:	54207369 	.word	0x54207369
   84560:	435f4957 	.word	0x435f4957
   84564:	465f444d 	.word	0x465f444d
   84568:	5f4d4f52 	.word	0x5f4d4f52
   8456c:	5f4d5241 	.word	0x5f4d5241
   84570:	554a4441 	.word	0x554a4441
   84574:	505f5453 	.word	0x505f5453
   84578:	203a534f 	.word	0x203a534f
   8457c:	0a207825 	.word	0x0a207825
   84580:	00000000 	.word	0x00000000
   84584:	20646d63 	.word	0x20646d63
   84588:	54207369 	.word	0x54207369
   8458c:	435f4957 	.word	0x435f4957
   84590:	465f444d 	.word	0x465f444d
   84594:	5f4d4f52 	.word	0x5f4d4f52
   84598:	5f4d5241 	.word	0x5f4d5241
   8459c:	524f4241 	.word	0x524f4241
   845a0:	44415f54 	.word	0x44415f54
   845a4:	5453554a 	.word	0x5453554a
   845a8:	7825203a 	.word	0x7825203a
   845ac:	00000a20 	.word	0x00000a20
   845b0:	20646d63 	.word	0x20646d63
   845b4:	54207369 	.word	0x54207369
   845b8:	435f4957 	.word	0x435f4957
   845bc:	545f444d 	.word	0x545f444d
   845c0:	52415f4f 	.word	0x52415f4f
   845c4:	4e495f4d 	.word	0x4e495f4d
   845c8:	203a5449 	.word	0x203a5449
   845cc:	0a207825 	.word	0x0a207825
   845d0:	00000000 	.word	0x00000000
   845d4:	20646d63 	.word	0x20646d63
   845d8:	54207369 	.word	0x54207369
   845dc:	435f4957 	.word	0x435f4957
   845e0:	545f444d 	.word	0x545f444d
   845e4:	52415f4f 	.word	0x52415f4f
   845e8:	494c5f4d 	.word	0x494c5f4d
   845ec:	535f5446 	.word	0x535f5446
   845f0:	52415551 	.word	0x52415551
   845f4:	25203a45 	.word	0x25203a45
   845f8:	000a2078 	.word	0x000a2078
   845fc:	20646d63 	.word	0x20646d63
   84600:	54207369 	.word	0x54207369
   84604:	435f4957 	.word	0x435f4957
   84608:	545f444d 	.word	0x545f444d
   8460c:	52415f4f 	.word	0x52415f4f
   84610:	494c5f4d 	.word	0x494c5f4d
   84614:	475f5446 	.word	0x475f5446
   84618:	5353414c 	.word	0x5353414c
   8461c:	7825203a 	.word	0x7825203a
   84620:	00000a20 	.word	0x00000a20
   84624:	20646d63 	.word	0x20646d63
   84628:	54207369 	.word	0x54207369
   8462c:	435f4957 	.word	0x435f4957
   84630:	545f444d 	.word	0x545f444d
   84634:	52415f4f 	.word	0x52415f4f
   84638:	494c5f4d 	.word	0x494c5f4d
   8463c:	535f5446 	.word	0x535f5446
   84640:	3a4b434f 	.word	0x3a4b434f
   84644:	20782520 	.word	0x20782520
   84648:	0000000a 	.word	0x0000000a
   8464c:	20646d63 	.word	0x20646d63
   84650:	54207369 	.word	0x54207369
   84654:	435f4957 	.word	0x435f4957
   84658:	545f444d 	.word	0x545f444d
   8465c:	52415f4f 	.word	0x52415f4f
   84660:	42415f4d 	.word	0x42415f4d
   84664:	5f54524f 	.word	0x5f54524f
   84668:	5446494c 	.word	0x5446494c
   8466c:	7825203a 	.word	0x7825203a
   84670:	00000a20 	.word	0x00000a20
   84674:	20646d63 	.word	0x20646d63
   84678:	54207369 	.word	0x54207369
   8467c:	435f4957 	.word	0x435f4957
   84680:	545f444d 	.word	0x545f444d
   84684:	52415f4f 	.word	0x52415f4f
   84688:	45445f4d 	.word	0x45445f4d
   8468c:	4556494c 	.word	0x4556494c
   84690:	424f5f52 	.word	0x424f5f52
   84694:	25203a4a 	.word	0x25203a4a
   84698:	000a2078 	.word	0x000a2078
   8469c:	20646d63 	.word	0x20646d63
   846a0:	54207369 	.word	0x54207369
   846a4:	435f4957 	.word	0x435f4957
   846a8:	465f444d 	.word	0x465f444d
   846ac:	5f4d4f52 	.word	0x5f4d4f52
   846b0:	5f534f50 	.word	0x5f534f50
   846b4:	3a584f42 	.word	0x3a584f42
   846b8:	20782520 	.word	0x20782520
   846bc:	0000000a 	.word	0x0000000a
   846c0:	20646d63 	.word	0x20646d63
   846c4:	54207369 	.word	0x54207369
   846c8:	435f4957 	.word	0x435f4957
   846cc:	465f444d 	.word	0x465f444d
   846d0:	5f4d4f52 	.word	0x5f4d4f52
   846d4:	5f534f50 	.word	0x5f534f50
   846d8:	4f424f52 	.word	0x4f424f52
   846dc:	25203a54 	.word	0x25203a54
   846e0:	000a2078 	.word	0x000a2078
   846e4:	20646d63 	.word	0x20646d63
   846e8:	54207369 	.word	0x54207369
   846ec:	435f4957 	.word	0x435f4957
   846f0:	465f444d 	.word	0x465f444d
   846f4:	5f4d4f52 	.word	0x5f4d4f52
   846f8:	5f534f50 	.word	0x5f534f50
   846fc:	4b434f53 	.word	0x4b434f53
   84700:	7825203a 	.word	0x7825203a
   84704:	00000a20 	.word	0x00000a20
   84708:	20646d63 	.word	0x20646d63
   8470c:	54207369 	.word	0x54207369
   84710:	435f4957 	.word	0x435f4957
   84714:	465f444d 	.word	0x465f444d
   84718:	5f4d4f52 	.word	0x5f4d4f52
   8471c:	5f534f50 	.word	0x5f534f50
   84720:	41555153 	.word	0x41555153
   84724:	203a4552 	.word	0x203a4552
   84728:	0a207825 	.word	0x0a207825
   8472c:	00000000 	.word	0x00000000
   84730:	20646d63 	.word	0x20646d63
   84734:	54207369 	.word	0x54207369
   84738:	435f4957 	.word	0x435f4957
   8473c:	465f444d 	.word	0x465f444d
   84740:	5f4d4f52 	.word	0x5f4d4f52
   84744:	5f534f50 	.word	0x5f534f50
   84748:	53414c47 	.word	0x53414c47
   8474c:	25203a53 	.word	0x25203a53
   84750:	000a2078 	.word	0x000a2078
   84754:	20646d63 	.word	0x20646d63
   84758:	54207369 	.word	0x54207369
   8475c:	435f4957 	.word	0x435f4957
   84760:	545f444d 	.word	0x545f444d
   84764:	4f505f4f 	.word	0x4f505f4f
   84768:	4e495f53 	.word	0x4e495f53
   8476c:	203a5449 	.word	0x203a5449
   84770:	0a207825 	.word	0x0a207825
   84774:	00000000 	.word	0x00000000
   84778:	20646d63 	.word	0x20646d63
   8477c:	54207369 	.word	0x54207369
   84780:	435f4957 	.word	0x435f4957
   84784:	545f444d 	.word	0x545f444d
   84788:	4f505f4f 	.word	0x4f505f4f
   8478c:	4f525f53 	.word	0x4f525f53
   84790:	3a544f42 	.word	0x3a544f42
   84794:	20782520 	.word	0x20782520
   84798:	0000000a 	.word	0x0000000a
   8479c:	20646d63 	.word	0x20646d63
   847a0:	54207369 	.word	0x54207369
   847a4:	435f4957 	.word	0x435f4957
   847a8:	545f444d 	.word	0x545f444d
   847ac:	4f505f4f 	.word	0x4f505f4f
   847b0:	4f535f53 	.word	0x4f535f53
   847b4:	203a4b43 	.word	0x203a4b43
   847b8:	0a207825 	.word	0x0a207825
   847bc:	00000000 	.word	0x00000000
   847c0:	20646d63 	.word	0x20646d63
   847c4:	54207369 	.word	0x54207369
   847c8:	435f4957 	.word	0x435f4957
   847cc:	545f444d 	.word	0x545f444d
   847d0:	4f505f4f 	.word	0x4f505f4f
   847d4:	51535f53 	.word	0x51535f53
   847d8:	45524155 	.word	0x45524155
   847dc:	7825203a 	.word	0x7825203a
   847e0:	00000a20 	.word	0x00000a20
   847e4:	20646d63 	.word	0x20646d63
   847e8:	54207369 	.word	0x54207369
   847ec:	435f4957 	.word	0x435f4957
   847f0:	545f444d 	.word	0x545f444d
   847f4:	4f505f4f 	.word	0x4f505f4f
   847f8:	4c475f53 	.word	0x4c475f53
   847fc:	3a535341 	.word	0x3a535341
   84800:	20782520 	.word	0x20782520
   84804:	0000000a 	.word	0x0000000a
   84808:	20646d63 	.word	0x20646d63
   8480c:	4e207369 	.word	0x4e207369
   84810:	465f544f 	.word	0x465f544f
   84814:	444e554f 	.word	0x444e554f
   84818:	7825203a 	.word	0x7825203a
   8481c:	00000a20 	.word	0x00000a20
   84820:	6f727265 	.word	0x6f727265
   84824:	00000a72 	.word	0x00000a72
   84828:	00000043 	.word	0x00000043

0008482c <_global_impure_ptr>:
   8482c:	20070148 33323130 37363534 42413938     H.. 0123456789AB
   8483c:	46454443 00000000 33323130 37363534     CDEF....01234567
   8484c:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   8485c:	0000296c                                l)..

00084860 <zeroes.6721>:
   84860:	30303030 30303030 30303030 30303030     0000000000000000

00084870 <blanks.6720>:
   84870:	20202020 20202020 20202020 20202020                     

00084880 <_init>:
   84880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84882:	bf00      	nop
   84884:	bcf8      	pop	{r3, r4, r5, r6, r7}
   84886:	bc08      	pop	{r3}
   84888:	469e      	mov	lr, r3
   8488a:	4770      	bx	lr

0008488c <__init_array_start>:
   8488c:	0008251d 	.word	0x0008251d

00084890 <__frame_dummy_init_array_entry>:
   84890:	00080119                                ....

00084894 <_fini>:
   84894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84896:	bf00      	nop
   84898:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8489a:	bc08      	pop	{r3}
   8489c:	469e      	mov	lr, r3
   8489e:	4770      	bx	lr

000848a0 <__fini_array_start>:
   848a0:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20070000:	f3bf 8f5f 	dmb	sy
20070004:	3801      	subs	r0, #1
20070006:	d1fb      	bne.n	20070000 <portable_delay_cycles>
20070008:	4770      	bx	lr
2007000a:	bf00      	nop

2007000c <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007000c:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070010:	4a20      	ldr	r2, [pc, #128]	; (20070094 <SystemInit+0x88>)
20070012:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070014:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070018:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007001a:	4b1f      	ldr	r3, [pc, #124]	; (20070098 <SystemInit+0x8c>)
2007001c:	6a1b      	ldr	r3, [r3, #32]
2007001e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070022:	d107      	bne.n	20070034 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070024:	4a1d      	ldr	r2, [pc, #116]	; (2007009c <SystemInit+0x90>)
20070026:	4b1c      	ldr	r3, [pc, #112]	; (20070098 <SystemInit+0x8c>)
20070028:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007002a:	461a      	mov	r2, r3
2007002c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007002e:	f013 0f01 	tst.w	r3, #1
20070032:	d0fb      	beq.n	2007002c <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070034:	4a1a      	ldr	r2, [pc, #104]	; (200700a0 <SystemInit+0x94>)
20070036:	4b18      	ldr	r3, [pc, #96]	; (20070098 <SystemInit+0x8c>)
20070038:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007003a:	461a      	mov	r2, r3
2007003c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007003e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070042:	d0fb      	beq.n	2007003c <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070044:	4b14      	ldr	r3, [pc, #80]	; (20070098 <SystemInit+0x8c>)
20070046:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20070048:	f022 0203 	bic.w	r2, r2, #3
2007004c:	f042 0201 	orr.w	r2, r2, #1
20070050:	631a      	str	r2, [r3, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070052:	461a      	mov	r2, r3
20070054:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070056:	f013 0f08 	tst.w	r3, #8
2007005a:	d0fb      	beq.n	20070054 <SystemInit+0x48>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007005c:	4a11      	ldr	r2, [pc, #68]	; (200700a4 <SystemInit+0x98>)
2007005e:	4b0e      	ldr	r3, [pc, #56]	; (20070098 <SystemInit+0x8c>)
20070060:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070062:	461a      	mov	r2, r3
20070064:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070066:	f013 0f02 	tst.w	r3, #2
2007006a:	d0fb      	beq.n	20070064 <SystemInit+0x58>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007006c:	2211      	movs	r2, #17
2007006e:	4b0a      	ldr	r3, [pc, #40]	; (20070098 <SystemInit+0x8c>)
20070070:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070072:	461a      	mov	r2, r3
20070074:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070076:	f013 0f08 	tst.w	r3, #8
2007007a:	d0fb      	beq.n	20070074 <SystemInit+0x68>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007007c:	2212      	movs	r2, #18
2007007e:	4b06      	ldr	r3, [pc, #24]	; (20070098 <SystemInit+0x8c>)
20070080:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070082:	461a      	mov	r2, r3
20070084:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070086:	f013 0f08 	tst.w	r3, #8
2007008a:	d0fb      	beq.n	20070084 <SystemInit+0x78>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007008c:	4a06      	ldr	r2, [pc, #24]	; (200700a8 <SystemInit+0x9c>)
2007008e:	4b07      	ldr	r3, [pc, #28]	; (200700ac <SystemInit+0xa0>)
20070090:	601a      	str	r2, [r3, #0]
20070092:	4770      	bx	lr
20070094:	400e0a00 	.word	0x400e0a00
20070098:	400e0600 	.word	0x400e0600
2007009c:	00370809 	.word	0x00370809
200700a0:	01370809 	.word	0x01370809
200700a4:	200d3f01 	.word	0x200d3f01
200700a8:	0501bd00 	.word	0x0501bd00
200700ac:	20070140 	.word	0x20070140

200700b0 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700b0:	4b1b      	ldr	r3, [pc, #108]	; (20070120 <system_init_flash+0x70>)
200700b2:	4298      	cmp	r0, r3
200700b4:	d806      	bhi.n	200700c4 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700b6:	2300      	movs	r3, #0
200700b8:	4a1a      	ldr	r2, [pc, #104]	; (20070124 <system_init_flash+0x74>)
200700ba:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700bc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700c0:	6013      	str	r3, [r2, #0]
200700c2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700c4:	4b18      	ldr	r3, [pc, #96]	; (20070128 <system_init_flash+0x78>)
200700c6:	4298      	cmp	r0, r3
200700c8:	d807      	bhi.n	200700da <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700ca:	f44f 7380 	mov.w	r3, #256	; 0x100
200700ce:	4a15      	ldr	r2, [pc, #84]	; (20070124 <system_init_flash+0x74>)
200700d0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700d2:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700d6:	6013      	str	r3, [r2, #0]
200700d8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700da:	4b14      	ldr	r3, [pc, #80]	; (2007012c <system_init_flash+0x7c>)
200700dc:	4298      	cmp	r0, r3
200700de:	d807      	bhi.n	200700f0 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700e0:	f44f 7300 	mov.w	r3, #512	; 0x200
200700e4:	4a0f      	ldr	r2, [pc, #60]	; (20070124 <system_init_flash+0x74>)
200700e6:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700e8:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ec:	6013      	str	r3, [r2, #0]
200700ee:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700f0:	4b0f      	ldr	r3, [pc, #60]	; (20070130 <system_init_flash+0x80>)
200700f2:	4298      	cmp	r0, r3
200700f4:	d807      	bhi.n	20070106 <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700f6:	f44f 7340 	mov.w	r3, #768	; 0x300
200700fa:	4a0a      	ldr	r2, [pc, #40]	; (20070124 <system_init_flash+0x74>)
200700fc:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700fe:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070102:	6013      	str	r3, [r2, #0]
20070104:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
20070106:	4b0b      	ldr	r3, [pc, #44]	; (20070134 <system_init_flash+0x84>)
20070108:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007010a:	bf94      	ite	ls
2007010c:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070110:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070114:	4a03      	ldr	r2, [pc, #12]	; (20070124 <system_init_flash+0x74>)
20070116:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
20070118:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007011c:	6013      	str	r3, [r2, #0]
2007011e:	4770      	bx	lr
20070120:	0121eabf 	.word	0x0121eabf
20070124:	400e0a00 	.word	0x400e0a00
20070128:	02faf07f 	.word	0x02faf07f
2007012c:	03d08fff 	.word	0x03d08fff
20070130:	04c4b3ff 	.word	0x04c4b3ff
20070134:	055d4a7f 	.word	0x055d4a7f

20070138 <xNextTaskUnblockTime>:
20070138:	ffffffff                                ....

2007013c <g_interrupt_enabled>:
2007013c:	00000001                                ....

20070140 <SystemCoreClock>:
20070140:	003d0900 00000000                       ..=.....

20070148 <impure_data>:
20070148:	00000000 20070434 2007049c 20070504     ....4.. ... ... 
	...
2007017c:	00084828 00000000 00000000 00000000     (H..............
	...
200701f0:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20070200:	0005deec 0000000b 00000000 00000000     ................
	...

20070570 <_impure_ptr>:
20070570:	20070148                                H.. 

20070574 <lc_ctype_charset>:
20070574:	49435341 00000049 00000000 00000000     ASCII...........
	...

20070594 <__mb_cur_max>:
20070594:	00000001                                ....

20070598 <__malloc_av_>:
	...
200705a0:	20070598 20070598 200705a0 200705a0     ... ... ... ... 
200705b0:	200705a8 200705a8 200705b0 200705b0     ... ... ... ... 
200705c0:	200705b8 200705b8 200705c0 200705c0     ... ... ... ... 
200705d0:	200705c8 200705c8 200705d0 200705d0     ... ... ... ... 
200705e0:	200705d8 200705d8 200705e0 200705e0     ... ... ... ... 
200705f0:	200705e8 200705e8 200705f0 200705f0     ... ... ... ... 
20070600:	200705f8 200705f8 20070600 20070600     ... ... ... ... 
20070610:	20070608 20070608 20070610 20070610     ... ... ... ... 
20070620:	20070618 20070618 20070620 20070620     ... ...  ..  .. 
20070630:	20070628 20070628 20070630 20070630     (.. (.. 0.. 0.. 
20070640:	20070638 20070638 20070640 20070640     8.. 8.. @.. @.. 
20070650:	20070648 20070648 20070650 20070650     H.. H.. P.. P.. 
20070660:	20070658 20070658 20070660 20070660     X.. X.. `.. `.. 
20070670:	20070668 20070668 20070670 20070670     h.. h.. p.. p.. 
20070680:	20070678 20070678 20070680 20070680     x.. x.. ... ... 
20070690:	20070688 20070688 20070690 20070690     ... ... ... ... 
200706a0:	20070698 20070698 200706a0 200706a0     ... ... ... ... 
200706b0:	200706a8 200706a8 200706b0 200706b0     ... ... ... ... 
200706c0:	200706b8 200706b8 200706c0 200706c0     ... ... ... ... 
200706d0:	200706c8 200706c8 200706d0 200706d0     ... ... ... ... 
200706e0:	200706d8 200706d8 200706e0 200706e0     ... ... ... ... 
200706f0:	200706e8 200706e8 200706f0 200706f0     ... ... ... ... 
20070700:	200706f8 200706f8 20070700 20070700     ... ... ... ... 
20070710:	20070708 20070708 20070710 20070710     ... ... ... ... 
20070720:	20070718 20070718 20070720 20070720     ... ...  ..  .. 
20070730:	20070728 20070728 20070730 20070730     (.. (.. 0.. 0.. 
20070740:	20070738 20070738 20070740 20070740     8.. 8.. @.. @.. 
20070750:	20070748 20070748 20070750 20070750     H.. H.. P.. P.. 
20070760:	20070758 20070758 20070760 20070760     X.. X.. `.. `.. 
20070770:	20070768 20070768 20070770 20070770     h.. h.. p.. p.. 
20070780:	20070778 20070778 20070780 20070780     x.. x.. ... ... 
20070790:	20070788 20070788 20070790 20070790     ... ... ... ... 
200707a0:	20070798 20070798 200707a0 200707a0     ... ... ... ... 
200707b0:	200707a8 200707a8 200707b0 200707b0     ... ... ... ... 
200707c0:	200707b8 200707b8 200707c0 200707c0     ... ... ... ... 
200707d0:	200707c8 200707c8 200707d0 200707d0     ... ... ... ... 
200707e0:	200707d8 200707d8 200707e0 200707e0     ... ... ... ... 
200707f0:	200707e8 200707e8 200707f0 200707f0     ... ... ... ... 
20070800:	200707f8 200707f8 20070800 20070800     ... ... ... ... 
20070810:	20070808 20070808 20070810 20070810     ... ... ... ... 
20070820:	20070818 20070818 20070820 20070820     ... ...  ..  .. 
20070830:	20070828 20070828 20070830 20070830     (.. (.. 0.. 0.. 
20070840:	20070838 20070838 20070840 20070840     8.. 8.. @.. @.. 
20070850:	20070848 20070848 20070850 20070850     H.. H.. P.. P.. 
20070860:	20070858 20070858 20070860 20070860     X.. X.. `.. `.. 
20070870:	20070868 20070868 20070870 20070870     h.. h.. p.. p.. 
20070880:	20070878 20070878 20070880 20070880     x.. x.. ... ... 
20070890:	20070888 20070888 20070890 20070890     ... ... ... ... 
200708a0:	20070898 20070898 200708a0 200708a0     ... ... ... ... 
200708b0:	200708a8 200708a8 200708b0 200708b0     ... ... ... ... 
200708c0:	200708b8 200708b8 200708c0 200708c0     ... ... ... ... 
200708d0:	200708c8 200708c8 200708d0 200708d0     ... ... ... ... 
200708e0:	200708d8 200708d8 200708e0 200708e0     ... ... ... ... 
200708f0:	200708e8 200708e8 200708f0 200708f0     ... ... ... ... 
20070900:	200708f8 200708f8 20070900 20070900     ... ... ... ... 
20070910:	20070908 20070908 20070910 20070910     ... ... ... ... 
20070920:	20070918 20070918 20070920 20070920     ... ...  ..  .. 
20070930:	20070928 20070928 20070930 20070930     (.. (.. 0.. 0.. 
20070940:	20070938 20070938 20070940 20070940     8.. 8.. @.. @.. 
20070950:	20070948 20070948 20070950 20070950     H.. H.. P.. P.. 
20070960:	20070958 20070958 20070960 20070960     X.. X.. `.. `.. 
20070970:	20070968 20070968 20070970 20070970     h.. h.. p.. p.. 
20070980:	20070978 20070978 20070980 20070980     x.. x.. ... ... 
20070990:	20070988 20070988 20070990 20070990     ... ... ... ... 

200709a0 <__malloc_trim_threshold>:
200709a0:	00020000                                ....

200709a4 <__malloc_sbrk_base>:
200709a4:	ffffffff                                ....

200709a8 <__wctomb>:
200709a8:	00083b41                                A;..
