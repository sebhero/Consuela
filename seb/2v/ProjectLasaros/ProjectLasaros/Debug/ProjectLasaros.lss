
ProjectLasaros.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006cbc  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00086cbc  00086cbc  0000ecbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000a84  20070000  00086cc4  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000a3c4  20070a88  00087750  00010a88  2**3
                  ALLOC
  4 .stack        00002004  2007ae4c  00091b14  00010a88  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00010a84  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  00010aad  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001b233  00000000  00000000  00010b08  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00004977  00000000  00000000  0002bd3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000a8cf  00000000  00000000  000306b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001280  00000000  00000000  0003af81  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000011a8  00000000  00000000  0003c201  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001d42c  00000000  00000000  0003d3a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001a743  00000000  00000000  0005a7d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0006cc3b  00000000  00000000  00074f18  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00003520  00000000  00000000  000e1b54  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	2007ce50 	.word	0x2007ce50
   80004:	00082cc5 	.word	0x00082cc5
   80008:	00082cc1 	.word	0x00082cc1
   8000c:	00082cc1 	.word	0x00082cc1
   80010:	00082cc1 	.word	0x00082cc1
   80014:	00082cc1 	.word	0x00082cc1
   80018:	00082cc1 	.word	0x00082cc1
	...
   8002c:	00081221 	.word	0x00081221
   80030:	00082cc1 	.word	0x00082cc1
   80034:	00000000 	.word	0x00000000
   80038:	0008129d 	.word	0x0008129d
   8003c:	000812d9 	.word	0x000812d9
   80040:	00082cc1 	.word	0x00082cc1
   80044:	00082cc1 	.word	0x00082cc1
   80048:	00082cc1 	.word	0x00082cc1
   8004c:	00082cc1 	.word	0x00082cc1
   80050:	00082cc1 	.word	0x00082cc1
   80054:	00082cc1 	.word	0x00082cc1
   80058:	00082cc1 	.word	0x00082cc1
   8005c:	00082cc1 	.word	0x00082cc1
   80060:	00082cc1 	.word	0x00082cc1
   80064:	00082cc1 	.word	0x00082cc1
   80068:	00000000 	.word	0x00000000
   8006c:	00082b0d 	.word	0x00082b0d
   80070:	00082b21 	.word	0x00082b21
   80074:	00082b35 	.word	0x00082b35
   80078:	00082b49 	.word	0x00082b49
	...
   80084:	00080f49 	.word	0x00080f49
   80088:	00082cc1 	.word	0x00082cc1
   8008c:	00082cc1 	.word	0x00082cc1
   80090:	00082cc1 	.word	0x00082cc1
   80094:	00082cc1 	.word	0x00082cc1
   80098:	00082cc1 	.word	0x00082cc1
   8009c:	00082cc1 	.word	0x00082cc1
   800a0:	00082cc1 	.word	0x00082cc1
   800a4:	00000000 	.word	0x00000000
   800a8:	00082cc1 	.word	0x00082cc1
   800ac:	00080611 	.word	0x00080611
   800b0:	000805dd 	.word	0x000805dd
   800b4:	00082cc1 	.word	0x00082cc1
   800b8:	00082cc1 	.word	0x00082cc1
   800bc:	00082cc1 	.word	0x00082cc1
   800c0:	00082cc1 	.word	0x00082cc1
   800c4:	00082cc1 	.word	0x00082cc1
   800c8:	00082cc1 	.word	0x00082cc1
   800cc:	00082cc1 	.word	0x00082cc1
   800d0:	00082cc1 	.word	0x00082cc1
   800d4:	00082cc1 	.word	0x00082cc1
   800d8:	00082cc1 	.word	0x00082cc1
   800dc:	00082cc1 	.word	0x00082cc1
   800e0:	00082cc1 	.word	0x00082cc1
   800e4:	00082cc1 	.word	0x00082cc1
   800e8:	00082cc1 	.word	0x00082cc1
   800ec:	00082cc1 	.word	0x00082cc1
   800f0:	00082cc1 	.word	0x00082cc1

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070a88 	.word	0x20070a88
   80110:	00000000 	.word	0x00000000
   80114:	00086cc4 	.word	0x00086cc4

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b06      	ldr	r3, [pc, #24]	; (80134 <frame_dummy+0x1c>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4806      	ldr	r0, [pc, #24]	; (80138 <frame_dummy+0x20>)
   80120:	4906      	ldr	r1, [pc, #24]	; (8013c <frame_dummy+0x24>)
   80122:	f3af 8000 	nop.w
   80126:	4806      	ldr	r0, [pc, #24]	; (80140 <frame_dummy+0x28>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b113      	cbz	r3, 80132 <frame_dummy+0x1a>
   8012c:	4b05      	ldr	r3, [pc, #20]	; (80144 <frame_dummy+0x2c>)
   8012e:	b103      	cbz	r3, 80132 <frame_dummy+0x1a>
   80130:	4798      	blx	r3
   80132:	bd08      	pop	{r3, pc}
   80134:	00000000 	.word	0x00000000
   80138:	00086cc4 	.word	0x00086cc4
   8013c:	20070a8c 	.word	0x20070a8c
   80140:	00086cc4 	.word	0x00086cc4
   80144:	00000000 	.word	0x00000000

00080148 <twi_set_speed>:
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
   80148:	4b0f      	ldr	r3, [pc, #60]	; (80188 <twi_set_speed+0x40>)
   8014a:	4299      	cmp	r1, r3
   8014c:	d819      	bhi.n	80182 <twi_set_speed+0x3a>
		return FAIL;
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   8014e:	0049      	lsls	r1, r1, #1
   80150:	fbb2 f2f1 	udiv	r2, r2, r1
   80154:	3a04      	subs	r2, #4

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   80156:	2aff      	cmp	r2, #255	; 0xff
   80158:	d907      	bls.n	8016a <twi_set_speed+0x22>
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
   8015a:	2300      	movs	r3, #0
	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
		/* Increase clock divider */
		ckdiv++;
   8015c:	3301      	adds	r3, #1
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
   8015e:	0852      	lsrs	r2, r2, #1
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   80160:	2aff      	cmp	r2, #255	; 0xff
   80162:	d903      	bls.n	8016c <twi_set_speed+0x24>
   80164:	2b07      	cmp	r3, #7
   80166:	d1f9      	bne.n	8015c <twi_set_speed+0x14>
   80168:	e000      	b.n	8016c <twi_set_speed+0x24>
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
   8016a:	2300      	movs	r3, #0
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   8016c:	0211      	lsls	r1, r2, #8
   8016e:	b289      	uxth	r1, r1
			TWI_CWGR_CKDIV(ckdiv);
   80170:	041b      	lsls	r3, r3, #16
   80172:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   80176:	430b      	orrs	r3, r1
   80178:	b2d2      	uxtb	r2, r2
   8017a:	431a      	orrs	r2, r3
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
   8017c:	6102      	str	r2, [r0, #16]
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
			TWI_CWGR_CKDIV(ckdiv);

	return PASS;
   8017e:	2000      	movs	r0, #0
   80180:	4770      	bx	lr
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
		return FAIL;
   80182:	2001      	movs	r0, #1
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
			TWI_CWGR_CKDIV(ckdiv);

	return PASS;
}
   80184:	4770      	bx	lr
   80186:	bf00      	nop
   80188:	00061a80 	.word	0x00061a80

0008018c <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
   8018c:	b538      	push	{r3, r4, r5, lr}
   8018e:	4604      	mov	r4, r0
   80190:	460d      	mov	r5, r1
	uint32_t status = TWI_SUCCESS;

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
   80192:	f04f 33ff 	mov.w	r3, #4294967295
   80196:	6283      	str	r3, [r0, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
   80198:	6a03      	ldr	r3, [r0, #32]
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
   8019a:	2380      	movs	r3, #128	; 0x80
   8019c:	6003      	str	r3, [r0, #0]
	p_twi->TWI_RHR;
   8019e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
   801a0:	2308      	movs	r3, #8
   801a2:	6003      	str	r3, [r0, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
   801a4:	2320      	movs	r3, #32
   801a6:	6003      	str	r3, [r0, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
   801a8:	2304      	movs	r3, #4
   801aa:	6003      	str	r3, [r0, #0]
	twi_reset(p_twi);

	twi_enable_master_mode(p_twi);

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
   801ac:	6849      	ldr	r1, [r1, #4]
   801ae:	682a      	ldr	r2, [r5, #0]
   801b0:	4b05      	ldr	r3, [pc, #20]	; (801c8 <twi_master_init+0x3c>)
   801b2:	4798      	blx	r3
   801b4:	2801      	cmp	r0, #1
   801b6:	bf14      	ite	ne
   801b8:	2000      	movne	r0, #0
   801ba:	2001      	moveq	r0, #1
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
	}

	if (p_opt->smbus == 1) {
   801bc:	7a6b      	ldrb	r3, [r5, #9]
   801be:	2b01      	cmp	r3, #1
		p_twi->TWI_CR = TWI_CR_QUICK;
   801c0:	bf04      	itt	eq
   801c2:	2340      	moveq	r3, #64	; 0x40
   801c4:	6023      	streq	r3, [r4, #0]
	}

	return status;
}
   801c6:	bd38      	pop	{r3, r4, r5, pc}
   801c8:	00080149 	.word	0x00080149

000801cc <twi_master_read>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twi_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
   801cc:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
   801d0:	4604      	mov	r4, r0
	uint32_t status;
	uint32_t cnt = p_packet->length;
   801d2:	68cb      	ldr	r3, [r1, #12]
	uint8_t *buffer = p_packet->buffer;
   801d4:	688e      	ldr	r6, [r1, #8]
	uint8_t stop_sent = 0;
	uint32_t timeout = TWI_TIMEOUT;;
	
	/* Check argument */
	if (cnt == 0) {
   801d6:	2b00      	cmp	r3, #0
   801d8:	d049      	beq.n	8026e <twi_master_read+0xa2>
		return TWI_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
   801da:	2200      	movs	r2, #0
   801dc:	6042      	str	r2, [r0, #4]
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
   801de:	6848      	ldr	r0, [r1, #4]
   801e0:	0200      	lsls	r0, r0, #8
   801e2:	f400 7040 	and.w	r0, r0, #768	; 0x300
		return TWI_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
   801e6:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
   801ea:	7c0d      	ldrb	r5, [r1, #16]
   801ec:	042d      	lsls	r5, r5, #16
   801ee:	f405 05fe 	and.w	r5, r5, #8323072	; 0x7f0000
   801f2:	4328      	orrs	r0, r5
   801f4:	6060      	str	r0, [r4, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
   801f6:	60e2      	str	r2, [r4, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   801f8:	684a      	ldr	r2, [r1, #4]
 */
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
   801fa:	b15a      	cbz	r2, 80214 <twi_master_read+0x48>
		return 0;

	val = addr[0];
   801fc:	7808      	ldrb	r0, [r1, #0]
	if (len > 1) {
   801fe:	2a01      	cmp	r2, #1
		val <<= 8;
		val |= addr[1];
   80200:	bfc4      	itt	gt
   80202:	784d      	ldrbgt	r5, [r1, #1]
   80204:	ea45 2000 	orrgt.w	r0, r5, r0, lsl #8
	}
	if (len > 2) {
   80208:	2a02      	cmp	r2, #2
   8020a:	dd04      	ble.n	80216 <twi_master_read+0x4a>
		val <<= 8;
		val |= addr[2];
   8020c:	788a      	ldrb	r2, [r1, #2]
   8020e:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
   80212:	e000      	b.n	80216 <twi_master_read+0x4a>
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
		return 0;
   80214:	2000      	movs	r0, #0
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   80216:	60e0      	str	r0, [r4, #12]

	/* Send a START condition */
	if (cnt == 1) {
   80218:	2b01      	cmp	r3, #1
   8021a:	d104      	bne.n	80226 <twi_master_read+0x5a>
		p_twi->TWI_CR = TWI_CR_START | TWI_CR_STOP;
   8021c:	2203      	movs	r2, #3
   8021e:	6022      	str	r2, [r4, #0]
		stop_sent = 1;
   80220:	f04f 0c01 	mov.w	ip, #1
   80224:	e02b      	b.n	8027e <twi_master_read+0xb2>
	} else {
		p_twi->TWI_CR = TWI_CR_START;
   80226:	2201      	movs	r2, #1
   80228:	6022      	str	r2, [r4, #0]
		stop_sent = 0;
   8022a:	f04f 0c00 	mov.w	ip, #0
   8022e:	e026      	b.n	8027e <twi_master_read+0xb2>
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
   80230:	6a21      	ldr	r1, [r4, #32]
		if (status & TWI_SR_NACK) {
   80232:	f411 7f80 	tst.w	r1, #256	; 0x100
   80236:	d11c      	bne.n	80272 <twi_master_read+0xa6>
			return TWI_RECEIVE_NACK;
		}

		if (!timeout--) {
   80238:	1e55      	subs	r5, r2, #1
   8023a:	b1e2      	cbz	r2, 80276 <twi_master_read+0xaa>
   8023c:	462a      	mov	r2, r5
			return TWI_ERROR_TIMEOUT;
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
   8023e:	2b01      	cmp	r3, #1
   80240:	d105      	bne.n	8024e <twi_master_read+0x82>
   80242:	f1bc 0f00 	cmp.w	ip, #0
   80246:	d102      	bne.n	8024e <twi_master_read+0x82>
			p_twi->TWI_CR = TWI_CR_STOP;
   80248:	f8c4 9000 	str.w	r9, [r4]
			stop_sent = 1;
   8024c:	46c4      	mov	ip, r8
		}

		if (!(status & TWI_SR_RXRDY)) {
   8024e:	f011 0f02 	tst.w	r1, #2
   80252:	d004      	beq.n	8025e <twi_master_read+0x92>
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;
   80254:	6b22      	ldr	r2, [r4, #48]	; 0x30
   80256:	7032      	strb	r2, [r6, #0]

		cnt--;
   80258:	3b01      	subs	r3, #1
		}

		if (!(status & TWI_SR_RXRDY)) {
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;
   8025a:	3601      	adds	r6, #1

		cnt--;
		timeout = TWI_TIMEOUT;
   8025c:	463a      	mov	r2, r7
	} else {
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
   8025e:	2b00      	cmp	r3, #0
   80260:	d1e6      	bne.n	80230 <twi_master_read+0x64>

		cnt--;
		timeout = TWI_TIMEOUT;
	}

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
   80262:	6a23      	ldr	r3, [r4, #32]
   80264:	f013 0f01 	tst.w	r3, #1
   80268:	d0fb      	beq.n	80262 <twi_master_read+0x96>
	}

	p_twi->TWI_SR;
   8026a:	6a23      	ldr	r3, [r4, #32]

	return TWI_SUCCESS;
   8026c:	e014      	b.n	80298 <twi_master_read+0xcc>
	uint8_t stop_sent = 0;
	uint32_t timeout = TWI_TIMEOUT;;
	
	/* Check argument */
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
   8026e:	2001      	movs	r0, #1
   80270:	e012      	b.n	80298 <twi_master_read+0xcc>
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
   80272:	2005      	movs	r0, #5
   80274:	e010      	b.n	80298 <twi_master_read+0xcc>
		}

		if (!timeout--) {
			return TWI_ERROR_TIMEOUT;
   80276:	2009      	movs	r0, #9
   80278:	e00e      	b.n	80298 <twi_master_read+0xcc>
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
   8027a:	2005      	movs	r0, #5
   8027c:	e00c      	b.n	80298 <twi_master_read+0xcc>
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
   8027e:	6a21      	ldr	r1, [r4, #32]
		if (status & TWI_SR_NACK) {
   80280:	f411 7080 	ands.w	r0, r1, #256	; 0x100
   80284:	d1f9      	bne.n	8027a <twi_master_read+0xae>
			return TWI_RECEIVE_NACK;
		}

		if (!timeout--) {
   80286:	f643 2297 	movw	r2, #14999	; 0x3a97
			return TWI_ERROR_TIMEOUT;
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
			p_twi->TWI_CR = TWI_CR_STOP;
   8028a:	f04f 0902 	mov.w	r9, #2
			stop_sent = 1;
   8028e:	f04f 0801 	mov.w	r8, #1
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;

		cnt--;
		timeout = TWI_TIMEOUT;
   80292:	f643 2798 	movw	r7, #15000	; 0x3a98
   80296:	e7d2      	b.n	8023e <twi_master_read+0x72>
	}

	p_twi->TWI_SR;

	return TWI_SUCCESS;
}
   80298:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
   8029c:	4770      	bx	lr
   8029e:	bf00      	nop

000802a0 <twi_master_write>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
   802a0:	b470      	push	{r4, r5, r6}
   802a2:	4603      	mov	r3, r0
	uint32_t status;
	uint32_t cnt = p_packet->length;
   802a4:	68ca      	ldr	r2, [r1, #12]
	uint8_t *buffer = p_packet->buffer;
   802a6:	6888      	ldr	r0, [r1, #8]

	/* Check argument */
	if (cnt == 0) {
   802a8:	2a00      	cmp	r2, #0
   802aa:	d03f      	beq.n	8032c <twi_master_write+0x8c>
		return TWI_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
   802ac:	2400      	movs	r4, #0
   802ae:	605c      	str	r4, [r3, #4]
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
   802b0:	7c0e      	ldrb	r6, [r1, #16]
   802b2:	0436      	lsls	r6, r6, #16
   802b4:	f406 06fe 	and.w	r6, r6, #8323072	; 0x7f0000
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
   802b8:	684d      	ldr	r5, [r1, #4]
   802ba:	022d      	lsls	r5, r5, #8
   802bc:	f405 7540 	and.w	r5, r5, #768	; 0x300
		return TWI_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
   802c0:	4335      	orrs	r5, r6
   802c2:	605d      	str	r5, [r3, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
   802c4:	60dc      	str	r4, [r3, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   802c6:	684c      	ldr	r4, [r1, #4]
 */
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
   802c8:	b15c      	cbz	r4, 802e2 <twi_master_write+0x42>
		return 0;

	val = addr[0];
   802ca:	780d      	ldrb	r5, [r1, #0]
	if (len > 1) {
   802cc:	2c01      	cmp	r4, #1
		val <<= 8;
		val |= addr[1];
   802ce:	bfc4      	itt	gt
   802d0:	784e      	ldrbgt	r6, [r1, #1]
   802d2:	ea46 2505 	orrgt.w	r5, r6, r5, lsl #8
	}
	if (len > 2) {
   802d6:	2c02      	cmp	r4, #2
   802d8:	dd04      	ble.n	802e4 <twi_master_write+0x44>
		val <<= 8;
		val |= addr[2];
   802da:	7889      	ldrb	r1, [r1, #2]
   802dc:	ea41 2505 	orr.w	r5, r1, r5, lsl #8
   802e0:	e000      	b.n	802e4 <twi_master_write+0x44>
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
		return 0;
   802e2:	2500      	movs	r5, #0
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   802e4:	60dd      	str	r5, [r3, #12]
   802e6:	e00b      	b.n	80300 <twi_master_write+0x60>

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
   802e8:	6a19      	ldr	r1, [r3, #32]
		if (status & TWI_SR_NACK) {
   802ea:	f411 7f80 	tst.w	r1, #256	; 0x100
   802ee:	d11f      	bne.n	80330 <twi_master_write+0x90>
			return TWI_RECEIVE_NACK;
		}

		if (!(status & TWI_SR_TXRDY)) {
   802f0:	f011 0f04 	tst.w	r1, #4
   802f4:	d0f8      	beq.n	802e8 <twi_master_write+0x48>
			continue;
		}
		p_twi->TWI_THR = *buffer++;
   802f6:	f810 1b01 	ldrb.w	r1, [r0], #1
   802fa:	6359      	str	r1, [r3, #52]	; 0x34
	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
   802fc:	3a01      	subs	r2, #1
   802fe:	d007      	beq.n	80310 <twi_master_write+0x70>
		status = p_twi->TWI_SR;
   80300:	6a19      	ldr	r1, [r3, #32]
		if (status & TWI_SR_NACK) {
   80302:	f411 7f80 	tst.w	r1, #256	; 0x100
   80306:	d115      	bne.n	80334 <twi_master_write+0x94>
			return TWI_RECEIVE_NACK;
		}

		if (!(status & TWI_SR_TXRDY)) {
   80308:	f011 0f04 	tst.w	r1, #4
   8030c:	d1f3      	bne.n	802f6 <twi_master_write+0x56>
   8030e:	e7eb      	b.n	802e8 <twi_master_write+0x48>

		cnt--;
	}

	while (1) {
		status = p_twi->TWI_SR;
   80310:	6a1a      	ldr	r2, [r3, #32]
		if (status & TWI_SR_NACK) {
   80312:	f412 7080 	ands.w	r0, r2, #256	; 0x100
   80316:	d10f      	bne.n	80338 <twi_master_write+0x98>
			return TWI_RECEIVE_NACK;
		}

		if (status & TWI_SR_TXRDY) {
   80318:	f012 0f04 	tst.w	r2, #4
   8031c:	d0f8      	beq.n	80310 <twi_master_write+0x70>
			break;
		}
	}

	p_twi->TWI_CR = TWI_CR_STOP;
   8031e:	2202      	movs	r2, #2
   80320:	601a      	str	r2, [r3, #0]

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
   80322:	6a1a      	ldr	r2, [r3, #32]
   80324:	f012 0f01 	tst.w	r2, #1
   80328:	d0fb      	beq.n	80322 <twi_master_write+0x82>
   8032a:	e006      	b.n	8033a <twi_master_write+0x9a>
	uint32_t cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;

	/* Check argument */
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
   8032c:	2001      	movs	r0, #1
   8032e:	e004      	b.n	8033a <twi_master_write+0x9a>

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
   80330:	2005      	movs	r0, #5
   80332:	e002      	b.n	8033a <twi_master_write+0x9a>
   80334:	2005      	movs	r0, #5
   80336:	e000      	b.n	8033a <twi_master_write+0x9a>
	}

	while (1) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
   80338:	2005      	movs	r0, #5

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
	}

	return TWI_SUCCESS;
}
   8033a:	bc70      	pop	{r4, r5, r6}
   8033c:	4770      	bx	lr
   8033e:	bf00      	nop

00080340 <twi_probe>:
 * \param uc_slave_addr Address of the remote chip to search for.
 *
 * \return TWI_SUCCESS if a chip was found, error code otherwise.
 */
uint32_t twi_probe(Twi *p_twi, uint8_t uc_slave_addr)
{
   80340:	b500      	push	{lr}
   80342:	b087      	sub	sp, #28
	twi_packet_t packet;
	uint8_t data = 0;
   80344:	2300      	movs	r3, #0
   80346:	aa06      	add	r2, sp, #24
   80348:	f802 3d15 	strb.w	r3, [r2, #-21]!

	/* Data to send */
	packet.buffer = &data;
   8034c:	9203      	str	r2, [sp, #12]
	/* Data length */
	packet.length = 1;
   8034e:	2201      	movs	r2, #1
   80350:	9204      	str	r2, [sp, #16]
	/* Slave chip address */
	packet.chip = (uint32_t) uc_slave_addr;
   80352:	f88d 1014 	strb.w	r1, [sp, #20]
	/* Internal chip address */
	packet.addr[0] = 0;
   80356:	f88d 3004 	strb.w	r3, [sp, #4]
	/* Address length */
	packet.addr_length = 0;
   8035a:	9302      	str	r3, [sp, #8]

	/* Perform a master write access */
	return (twi_master_write(p_twi, &packet));
   8035c:	a901      	add	r1, sp, #4
   8035e:	4b02      	ldr	r3, [pc, #8]	; (80368 <twi_probe+0x28>)
   80360:	4798      	blx	r3
}
   80362:	b007      	add	sp, #28
   80364:	f85d fb04 	ldr.w	pc, [sp], #4
   80368:	000802a1 	.word	0x000802a1

0008036c <twi_reset>:
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
   8036c:	2380      	movs	r3, #128	; 0x80
   8036e:	6003      	str	r3, [r0, #0]
	p_twi->TWI_RHR;
   80370:	6b03      	ldr	r3, [r0, #48]	; 0x30
   80372:	4770      	bx	lr

00080374 <setObject>:
void setObjectSimple(objectinfo_t theObj){
	setObject(theObj.theObject, theObj.xpos, theObj.ypos);
}

void setObject(Object obj, int x, int y){
	switch(obj){
   80374:	2803      	cmp	r0, #3
   80376:	d00a      	beq.n	8038e <setObject+0x1a>
   80378:	2804      	cmp	r0, #4
   8037a:	d00f      	beq.n	8039c <setObject+0x28>
   8037c:	2802      	cmp	r0, #2
   8037e:	d113      	bne.n	803a8 <setObject+0x34>
		case SOCK:
		objects[2].x_pos = x;
   80380:	4b0d      	ldr	r3, [pc, #52]	; (803b8 <setObject+0x44>)
   80382:	6199      	str	r1, [r3, #24]
		objects[2].y_pos = y;
   80384:	61da      	str	r2, [r3, #28]
		objects[2].name = obj;
   80386:	2202      	movs	r2, #2
   80388:	f883 2020 	strb.w	r2, [r3, #32]
		break;
   8038c:	e00c      	b.n	803a8 <setObject+0x34>
		case SQUARE:
		objects[3].x_pos = x;
   8038e:	4b0a      	ldr	r3, [pc, #40]	; (803b8 <setObject+0x44>)
   80390:	6259      	str	r1, [r3, #36]	; 0x24
		objects[3].y_pos = y;
   80392:	629a      	str	r2, [r3, #40]	; 0x28
		objects[3].name = obj;
   80394:	2203      	movs	r2, #3
   80396:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		break;
   8039a:	e005      	b.n	803a8 <setObject+0x34>
		case GLASS:
		objects[4].x_pos = x;
   8039c:	4b06      	ldr	r3, [pc, #24]	; (803b8 <setObject+0x44>)
   8039e:	6319      	str	r1, [r3, #48]	; 0x30
		objects[4].y_pos = y;
   803a0:	635a      	str	r2, [r3, #52]	; 0x34
		objects[4].name = obj;
   803a2:	2204      	movs	r2, #4
   803a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		break;
		default:
		break;
	}
	objects[0].x_pos  = 50;
   803a8:	4b03      	ldr	r3, [pc, #12]	; (803b8 <setObject+0x44>)
   803aa:	2232      	movs	r2, #50	; 0x32
   803ac:	601a      	str	r2, [r3, #0]
	objects[0].y_pos = 0;
   803ae:	2200      	movs	r2, #0
   803b0:	605a      	str	r2, [r3, #4]
	objects[0].name = 0;
   803b2:	721a      	strb	r2, [r3, #8]
   803b4:	4770      	bx	lr
   803b6:	bf00      	nop
   803b8:	2007ad88 	.word	0x2007ad88

000803bc <setObjectSimple>:
		.y_pos = dropOff_y,
		.name_p = "Drop off"
	}
};*/
object_pos_t objects[8];
void setObjectSimple(objectinfo_t theObj){
   803bc:	b500      	push	{lr}
   803be:	b083      	sub	sp, #12
   803c0:	ab02      	add	r3, sp, #8
   803c2:	e903 0003 	stmdb	r3, {r0, r1}
	setObject(theObj.theObject, theObj.xpos, theObj.ypos);
   803c6:	f89d 0000 	ldrb.w	r0, [sp]
   803ca:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
   803ce:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
   803d2:	4b02      	ldr	r3, [pc, #8]	; (803dc <setObjectSimple+0x20>)
   803d4:	4798      	blx	r3
}
   803d6:	b003      	add	sp, #12
   803d8:	f85d fb04 	ldr.w	pc, [sp], #4
   803dc:	00080375 	.word	0x00080375

000803e0 <setCollectAll>:
	objects[0].y_pos = 0;
	objects[0].name = 0;
}

void setCollectAll(uint8_t getAll){
	getAllObj = getAll;
   803e0:	4b01      	ldr	r3, [pc, #4]	; (803e8 <setCollectAll+0x8>)
   803e2:	7018      	strb	r0, [r3, #0]
   803e4:	4770      	bx	lr
   803e6:	bf00      	nop
   803e8:	20070aae 	.word	0x20070aae

000803ec <setDonePickup>:
}

void setDonePickup(){
	suspendNav = false;
   803ec:	2200      	movs	r2, #0
   803ee:	4b01      	ldr	r3, [pc, #4]	; (803f4 <setDonePickup+0x8>)
   803f0:	701a      	strb	r2, [r3, #0]
   803f2:	4770      	bx	lr
   803f4:	20070aad 	.word	0x20070aad

000803f8 <setDropoffDone>:
}

void setDropoffDone(){
	suspendNav = false;
   803f8:	2200      	movs	r2, #0
   803fa:	4b01      	ldr	r3, [pc, #4]	; (80400 <setDropoffDone+0x8>)
   803fc:	701a      	strb	r2, [r3, #0]
   803fe:	4770      	bx	lr
   80400:	20070aad 	.word	0x20070aad

00080404 <pulse_timer_init_channel>:

 /*
 * \brief Initialize the specified pulse timer channel
 *
 */
static void pulse_timer_init_channel(uint32_t ch_n) {
   80404:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   80408:	4606      	mov	r6, r0

	ioport_set_pin_dir(pulse_timers[ch_n].pin, IOPORT_DIR_INPUT);
   8040a:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   8040e:	4b3b      	ldr	r3, [pc, #236]	; (804fc <pulse_timer_init_channel+0xf8>)
   80410:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   80414:	6944      	ldr	r4, [r0, #20]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
   80416:	0963      	lsrs	r3, r4, #5
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   80418:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   8041c:	f203 7307 	addw	r3, r3, #1799	; 0x707
   80420:	025b      	lsls	r3, r3, #9
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
   80422:	f004 041f 	and.w	r4, r4, #31
   80426:	2201      	movs	r2, #1
   80428:	fa02 f404 	lsl.w	r4, r2, r4
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   8042c:	615c      	str	r4, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   8042e:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
	ioport_set_pin_mode(pulse_timers[ch_n].pin, pulse_timers[ch_n].mux | pulse_timers[ch_n].ioport_mode);
   80432:	6943      	ldr	r3, [r0, #20]
   80434:	69c4      	ldr	r4, [r0, #28]
   80436:	6981      	ldr	r1, [r0, #24]
   80438:	4321      	orrs	r1, r4
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
   8043a:	f003 001f 	and.w	r0, r3, #31
   8043e:	4082      	lsls	r2, r0
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
   80440:	095b      	lsrs	r3, r3, #5
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   80442:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80446:	f203 7307 	addw	r3, r3, #1799	; 0x707
   8044a:	025b      	lsls	r3, r3, #9
__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
   8044c:	f011 0f08 	tst.w	r1, #8
		base->PIO_PUER = mask;
   80450:	bf14      	ite	ne
   80452:	665a      	strne	r2, [r3, #100]	; 0x64
	} else {
		base->PIO_PUDR = mask;
   80454:	661a      	streq	r2, [r3, #96]	; 0x60
	} else {
		base->PIO_PPDDR = mask;
	}
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
   80456:	f011 0f20 	tst.w	r1, #32
		base->PIO_MDER = mask;
   8045a:	bf14      	ite	ne
   8045c:	651a      	strne	r2, [r3, #80]	; 0x50
	} else {
		base->PIO_MDDR = mask;
   8045e:	655a      	streq	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
   80460:	f011 0fc0 	tst.w	r1, #192	; 0xc0
		base->PIO_IFER = mask;
   80464:	bf14      	ite	ne
   80466:	621a      	strne	r2, [r3, #32]
	} else {
		base->PIO_IFDR = mask;
   80468:	625a      	streq	r2, [r3, #36]	; 0x24
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
   8046a:	f011 0f80 	tst.w	r1, #128	; 0x80
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
   8046e:	bf14      	ite	ne
   80470:	f8c3 2084 	strne.w	r2, [r3, #132]	; 0x84
#else
		base->PIO_IFSCER = mask;
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
   80474:	f8c3 2080 	streq.w	r2, [r3, #128]	; 0x80
		base->PIO_IFSCDR = mask;
#endif
	}

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
   80478:	f011 0f01 	tst.w	r1, #1
		base->PIO_ABSR |= mask;
   8047c:	6f19      	ldr	r1, [r3, #112]	; 0x70
   8047e:	bf14      	ite	ne
   80480:	430a      	orrne	r2, r1
	} else {
		base->PIO_ABSR &= ~mask;
   80482:	ea21 0202 	biceq.w	r2, r1, r2
   80486:	671a      	str	r2, [r3, #112]	; 0x70
	ioport_disable_pin(pulse_timers[ch_n].pin);
   80488:	4d1c      	ldr	r5, [pc, #112]	; (804fc <pulse_timer_init_channel+0xf8>)
   8048a:	ea4f 09c6 	mov.w	r9, r6, lsl #3
   8048e:	eb09 0706 	add.w	r7, r9, r6
   80492:	00bf      	lsls	r7, r7, #2
   80494:	19ec      	adds	r4, r5, r7
   80496:	6963      	ldr	r3, [r4, #20]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
   80498:	f003 021f 	and.w	r2, r3, #31
   8049c:	f04f 0801 	mov.w	r8, #1
   804a0:	fa08 f202 	lsl.w	r2, r8, r2
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
   804a4:	095b      	lsrs	r3, r3, #5
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   804a6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   804aa:	f203 7307 	addw	r3, r3, #1799	; 0x707
   804ae:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
   804b0:	605a      	str	r2, [r3, #4]

	pmc_set_writeprotect(false);
   804b2:	2000      	movs	r0, #0
   804b4:	4b12      	ldr	r3, [pc, #72]	; (80500 <pulse_timer_init_channel+0xfc>)
   804b6:	4798      	blx	r3
	pmc_enable_periph_clk(pulse_timers[ch_n].id);
   804b8:	68a0      	ldr	r0, [r4, #8]
   804ba:	4b12      	ldr	r3, [pc, #72]	; (80504 <pulse_timer_init_channel+0x100>)
   804bc:	4798      	blx	r3

	tc_init(pulse_timers[ch_n].tc, pulse_timers[ch_n].tc_ch, pulse_timers[ch_n].tc_mode);
   804be:	59e8      	ldr	r0, [r5, r7]
   804c0:	6861      	ldr	r1, [r4, #4]
   804c2:	6922      	ldr	r2, [r4, #16]
   804c4:	4b10      	ldr	r3, [pc, #64]	; (80508 <pulse_timer_init_channel+0x104>)
   804c6:	4798      	blx	r3

	tc_start(pulse_timers[ch_n].tc, pulse_timers[ch_n].tc_ch);
   804c8:	59e8      	ldr	r0, [r5, r7]
   804ca:	6861      	ldr	r1, [r4, #4]
   804cc:	4b0f      	ldr	r3, [pc, #60]	; (8050c <pulse_timer_init_channel+0x108>)
   804ce:	4798      	blx	r3
	tc_enable_interrupt(pulse_timers[ch_n].tc, pulse_timers[ch_n].tc_ch, TC_IER_LDRBS );
   804d0:	59e8      	ldr	r0, [r5, r7]
   804d2:	6861      	ldr	r1, [r4, #4]
   804d4:	2240      	movs	r2, #64	; 0x40
   804d6:	4b0e      	ldr	r3, [pc, #56]	; (80510 <pulse_timer_init_channel+0x10c>)
   804d8:	4798      	blx	r3
	NVIC_DisableIRQ(pulse_timers[ch_n].IRQn);
   804da:	444e      	add	r6, r9
   804dc:	eb05 0586 	add.w	r5, r5, r6, lsl #2
   804e0:	7b2b      	ldrb	r3, [r5, #12]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
   804e2:	b259      	sxtb	r1, r3
   804e4:	0949      	lsrs	r1, r1, #5
   804e6:	f003 031f 	and.w	r3, r3, #31
   804ea:	fa08 f303 	lsl.w	r3, r8, r3
   804ee:	3120      	adds	r1, #32
   804f0:	4a08      	ldr	r2, [pc, #32]	; (80514 <pulse_timer_init_channel+0x110>)
   804f2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
   804f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   804fa:	bf00      	nop
   804fc:	200701b0 	.word	0x200701b0
   80500:	00082c9d 	.word	0x00082c9d
   80504:	00082c45 	.word	0x00082c45
   80508:	000810c1 	.word	0x000810c1
   8050c:	000810dd 	.word	0x000810dd
   80510:	000810e5 	.word	0x000810e5
   80514:	e000e100 	.word	0xe000e100

00080518 <pulse_init_channel>:
 * \brief Initialize the specified pulse channel
 *
 * \note Need to call pulse_start(ch_n) to start output
 *
 */
 static void pulse_init_channel(uint32_t ch_n) {
   80518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8051c:	4604      	mov	r4, r0
    ioport_set_pin_mode(pulse_channels[ch_n].pin, pulse_channels[ch_n].mux);
   8051e:	ebc0 1200 	rsb	r2, r0, r0, lsl #4
   80522:	4b29      	ldr	r3, [pc, #164]	; (805c8 <pulse_init_channel+0xb0>)
   80524:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   80528:	6b13      	ldr	r3, [r2, #48]	; 0x30
   8052a:	6b51      	ldr	r1, [r2, #52]	; 0x34
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
   8052c:	f003 021f 	and.w	r2, r3, #31
   80530:	2001      	movs	r0, #1
   80532:	fa00 f202 	lsl.w	r2, r0, r2
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
   80536:	095b      	lsrs	r3, r3, #5
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   80538:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   8053c:	f203 7307 	addw	r3, r3, #1799	; 0x707
   80540:	025b      	lsls	r3, r3, #9
__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
   80542:	f011 0f08 	tst.w	r1, #8
		base->PIO_PUER = mask;
   80546:	bf14      	ite	ne
   80548:	665a      	strne	r2, [r3, #100]	; 0x64
	} else {
		base->PIO_PUDR = mask;
   8054a:	661a      	streq	r2, [r3, #96]	; 0x60
	} else {
		base->PIO_PPDDR = mask;
	}
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
   8054c:	f011 0f20 	tst.w	r1, #32
		base->PIO_MDER = mask;
   80550:	bf14      	ite	ne
   80552:	651a      	strne	r2, [r3, #80]	; 0x50
	} else {
		base->PIO_MDDR = mask;
   80554:	655a      	streq	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
   80556:	f011 0fc0 	tst.w	r1, #192	; 0xc0
		base->PIO_IFER = mask;
   8055a:	bf14      	ite	ne
   8055c:	621a      	strne	r2, [r3, #32]
	} else {
		base->PIO_IFDR = mask;
   8055e:	625a      	streq	r2, [r3, #36]	; 0x24
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
   80560:	f011 0f80 	tst.w	r1, #128	; 0x80
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
   80564:	bf14      	ite	ne
   80566:	f8c3 2084 	strne.w	r2, [r3, #132]	; 0x84
#else
		base->PIO_IFSCER = mask;
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
   8056a:	f8c3 2080 	streq.w	r2, [r3, #128]	; 0x80
		base->PIO_IFSCDR = mask;
#endif
	}

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
   8056e:	f011 0f01 	tst.w	r1, #1
		base->PIO_ABSR |= mask;
   80572:	6f19      	ldr	r1, [r3, #112]	; 0x70
   80574:	bf14      	ite	ne
   80576:	430a      	orrne	r2, r1
	} else {
		base->PIO_ABSR &= ~mask;
   80578:	ea21 0202 	biceq.w	r2, r1, r2
   8057c:	671a      	str	r2, [r3, #112]	; 0x70
    ioport_disable_pin(pulse_channels[ch_n].pin);
   8057e:	4d12      	ldr	r5, [pc, #72]	; (805c8 <pulse_init_channel+0xb0>)
   80580:	0127      	lsls	r7, r4, #4
   80582:	ebc4 0807 	rsb	r8, r4, r7
   80586:	ea4f 0888 	mov.w	r8, r8, lsl #2
   8058a:	eb05 0608 	add.w	r6, r5, r8
   8058e:	6b33      	ldr	r3, [r6, #48]	; 0x30
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
   80590:	f003 021f 	and.w	r2, r3, #31
   80594:	2101      	movs	r1, #1
   80596:	fa01 f202 	lsl.w	r2, r1, r2
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
   8059a:	095b      	lsrs	r3, r3, #5
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   8059c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   805a0:	f203 7307 	addw	r3, r3, #1799	; 0x707
   805a4:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
   805a6:	605a      	str	r2, [r3, #4]

    pmc_enable_periph_clk(pulse_channels[ch_n].id);
   805a8:	6af0      	ldr	r0, [r6, #44]	; 0x2c
   805aa:	4b08      	ldr	r3, [pc, #32]	; (805cc <pulse_init_channel+0xb4>)
   805ac:	4798      	blx	r3
    pwm_channel_disable(pulse_channels[ch_n].pwm, pulse_channels[ch_n].pwm_channel.channel);
   805ae:	f855 0008 	ldr.w	r0, [r5, r8]
   805b2:	6871      	ldr	r1, [r6, #4]
   805b4:	4b06      	ldr	r3, [pc, #24]	; (805d0 <pulse_init_channel+0xb8>)
   805b6:	4798      	blx	r3
    pwm_init(pulse_channels[ch_n].pwm, &pulse_clock_setting);
   805b8:	1b3c      	subs	r4, r7, r4
   805ba:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   805be:	4905      	ldr	r1, [pc, #20]	; (805d4 <pulse_init_channel+0xbc>)
   805c0:	4b05      	ldr	r3, [pc, #20]	; (805d8 <pulse_init_channel+0xc0>)
   805c2:	4798      	blx	r3
   805c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   805c8:	20070138 	.word	0x20070138
   805cc:	00082c45 	.word	0x00082c45
   805d0:	00080855 	.word	0x00080855
   805d4:	200701f8 	.word	0x200701f8
   805d8:	00080815 	.word	0x00080815

000805dc <TC1_Handler>:
	// Calculate the duration in microseconds.
	uint32_t duration = (diff ) / (((CHIP_FREQ_CPU_MAX / pulse_timers[ch_n].divider)/1000)/1000);
	return duration;
}

void TC1_Handler(void) {
   805dc:	b510      	push	{r4, lr}
	tc_get_status(pulse_timers[TC1_Handler_pulse_timer_idx].tc, pulse_timers[TC1_Handler_pulse_timer_idx].tc_ch);
   805de:	4c09      	ldr	r4, [pc, #36]	; (80604 <TC1_Handler+0x28>)
   805e0:	6820      	ldr	r0, [r4, #0]
   805e2:	6861      	ldr	r1, [r4, #4]
   805e4:	4b08      	ldr	r3, [pc, #32]	; (80608 <TC1_Handler+0x2c>)
   805e6:	4798      	blx	r3
	NVIC_DisableIRQ(pulse_timers[TC1_Handler_pulse_timer_idx].IRQn);
   805e8:	7b23      	ldrb	r3, [r4, #12]
   805ea:	b259      	sxtb	r1, r3
   805ec:	0949      	lsrs	r1, r1, #5
   805ee:	f003 031f 	and.w	r3, r3, #31
   805f2:	2201      	movs	r2, #1
   805f4:	fa02 f303 	lsl.w	r3, r2, r3
   805f8:	3120      	adds	r1, #32
   805fa:	4a04      	ldr	r2, [pc, #16]	; (8060c <TC1_Handler+0x30>)
   805fc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
   80600:	bd10      	pop	{r4, pc}
   80602:	bf00      	nop
   80604:	200701b0 	.word	0x200701b0
   80608:	000810ed 	.word	0x000810ed
   8060c:	e000e100 	.word	0xe000e100

00080610 <TC0_Handler>:
}

void TC0_Handler(void) {
   80610:	b510      	push	{r4, lr}
	tc_get_status(pulse_timers[TC2_Handler_pulse_timer_idx].tc, pulse_timers[TC2_Handler_pulse_timer_idx].tc_ch);
   80612:	4c09      	ldr	r4, [pc, #36]	; (80638 <TC0_Handler+0x28>)
   80614:	6a60      	ldr	r0, [r4, #36]	; 0x24
   80616:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   80618:	4b08      	ldr	r3, [pc, #32]	; (8063c <TC0_Handler+0x2c>)
   8061a:	4798      	blx	r3
	NVIC_DisableIRQ(pulse_timers[TC2_Handler_pulse_timer_idx].IRQn);
   8061c:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   80620:	b259      	sxtb	r1, r3
   80622:	0949      	lsrs	r1, r1, #5
   80624:	f003 031f 	and.w	r3, r3, #31
   80628:	2201      	movs	r2, #1
   8062a:	fa02 f303 	lsl.w	r3, r2, r3
   8062e:	3120      	adds	r1, #32
   80630:	4a03      	ldr	r2, [pc, #12]	; (80640 <TC0_Handler+0x30>)
   80632:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
   80636:	bd10      	pop	{r4, pc}
   80638:	200701b0 	.word	0x200701b0
   8063c:	000810ed 	.word	0x000810ed
   80640:	e000e100 	.word	0xe000e100

00080644 <pulse_init>:
}


void pulse_init() {
   80644:	b510      	push	{r4, lr}
    pulse_init_channel(0);
   80646:	2000      	movs	r0, #0
   80648:	4c04      	ldr	r4, [pc, #16]	; (8065c <pulse_init+0x18>)
   8064a:	47a0      	blx	r4
    pulse_init_channel(1);
   8064c:	2001      	movs	r0, #1
   8064e:	47a0      	blx	r4
	pulse_timer_init_channel(0);
   80650:	2000      	movs	r0, #0
   80652:	4c03      	ldr	r4, [pc, #12]	; (80660 <pulse_init+0x1c>)
   80654:	47a0      	blx	r4
	pulse_timer_init_channel(1);
   80656:	2001      	movs	r0, #1
   80658:	47a0      	blx	r4
   8065a:	bd10      	pop	{r4, pc}
   8065c:	00080519 	.word	0x00080519
   80660:	00080405 	.word	0x00080405

00080664 <pulseCounter_handlerA>:
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   80664:	4b04      	ldr	r3, [pc, #16]	; (80678 <pulseCounter_handlerA+0x14>)
   80666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
/* Initialization of extern variables goes only with definition */
int counterA = 0;
int counterB = 0;

void pulseCounter_handlerA(const uint32_t id, const uint32_t index){
	if (ioport_get_pin_level(A))
   80668:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
   8066c:	d003      	beq.n	80676 <pulseCounter_handlerA+0x12>
	{
		counterA++;
   8066e:	4b03      	ldr	r3, [pc, #12]	; (8067c <pulseCounter_handlerA+0x18>)
   80670:	681a      	ldr	r2, [r3, #0]
   80672:	3201      	adds	r2, #1
   80674:	601a      	str	r2, [r3, #0]
   80676:	4770      	bx	lr
   80678:	400e1200 	.word	0x400e1200
   8067c:	20070ab0 	.word	0x20070ab0

00080680 <pulseCounter_handlerB>:
   80680:	4b04      	ldr	r3, [pc, #16]	; (80694 <pulseCounter_handlerB+0x14>)
   80682:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
	}
}

void pulseCounter_handlerB(const uint32_t id, const uint32_t index){
	if (ioport_get_pin_level(B))
   80684:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   80688:	d003      	beq.n	80692 <pulseCounter_handlerB+0x12>
	{
		counterB++;
   8068a:	4b03      	ldr	r3, [pc, #12]	; (80698 <pulseCounter_handlerB+0x18>)
   8068c:	681a      	ldr	r2, [r3, #0]
   8068e:	3201      	adds	r2, #1
   80690:	601a      	str	r2, [r3, #0]
   80692:	4770      	bx	lr
   80694:	400e1200 	.word	0x400e1200
   80698:	20070ab4 	.word	0x20070ab4

0008069c <pulseCounter_configA>:
	}
}

void pulseCounter_configA(uint32_t ul_id, Pio *p_pio, const uint32_t ul_mask){
   8069c:	b570      	push	{r4, r5, r6, lr}
   8069e:	b082      	sub	sp, #8
   806a0:	4606      	mov	r6, r0
   806a2:	460d      	mov	r5, r1
   806a4:	4614      	mov	r4, r2
	pmc_set_writeprotect(false);
   806a6:	2000      	movs	r0, #0
   806a8:	4b0d      	ldr	r3, [pc, #52]	; (806e0 <pulseCounter_configA+0x44>)
   806aa:	4798      	blx	r3
	pmc_enable_periph_clk(ul_id);
   806ac:	4630      	mov	r0, r6
   806ae:	4b0d      	ldr	r3, [pc, #52]	; (806e4 <pulseCounter_configA+0x48>)
   806b0:	4798      	blx	r3
	//pio_set_output(p_pio, ul_mask, LOW, DISABLE, ENABLE);
	pio_set_input(p_pio, ul_mask, PIO_PULLUP);
   806b2:	4628      	mov	r0, r5
   806b4:	4621      	mov	r1, r4
   806b6:	2201      	movs	r2, #1
   806b8:	4b0b      	ldr	r3, [pc, #44]	; (806e8 <pulseCounter_configA+0x4c>)
   806ba:	4798      	blx	r3
	pio_handler_set(p_pio, ul_id, ul_mask, PIO_IT_EDGE, pulseCounter_handlerA);
   806bc:	4b0b      	ldr	r3, [pc, #44]	; (806ec <pulseCounter_configA+0x50>)
   806be:	9300      	str	r3, [sp, #0]
   806c0:	4628      	mov	r0, r5
   806c2:	4631      	mov	r1, r6
   806c4:	4622      	mov	r2, r4
   806c6:	2340      	movs	r3, #64	; 0x40
   806c8:	4e09      	ldr	r6, [pc, #36]	; (806f0 <pulseCounter_configA+0x54>)
   806ca:	47b0      	blx	r6
	pio_enable_interrupt(p_pio, ul_mask);
   806cc:	4628      	mov	r0, r5
   806ce:	4621      	mov	r1, r4
   806d0:	4b08      	ldr	r3, [pc, #32]	; (806f4 <pulseCounter_configA+0x58>)
   806d2:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   806d4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   806d8:	4b07      	ldr	r3, [pc, #28]	; (806f8 <pulseCounter_configA+0x5c>)
   806da:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(PIOC_IRQn);
}
   806dc:	b002      	add	sp, #8
   806de:	bd70      	pop	{r4, r5, r6, pc}
   806e0:	00082c9d 	.word	0x00082c9d
   806e4:	00082c45 	.word	0x00082c45
   806e8:	00082869 	.word	0x00082869
   806ec:	00080665 	.word	0x00080665
   806f0:	00082ad1 	.word	0x00082ad1
   806f4:	000828f5 	.word	0x000828f5
   806f8:	e000e100 	.word	0xe000e100

000806fc <pulseCounter_configB>:

void pulseCounter_configB(uint32_t ul_id, Pio *p_pio, const uint32_t ul_mask){
   806fc:	b570      	push	{r4, r5, r6, lr}
   806fe:	b082      	sub	sp, #8
   80700:	4606      	mov	r6, r0
   80702:	460d      	mov	r5, r1
   80704:	4614      	mov	r4, r2
	pmc_set_writeprotect(false);
   80706:	2000      	movs	r0, #0
   80708:	4b0d      	ldr	r3, [pc, #52]	; (80740 <pulseCounter_configB+0x44>)
   8070a:	4798      	blx	r3
	pmc_enable_periph_clk(ul_id);
   8070c:	4630      	mov	r0, r6
   8070e:	4b0d      	ldr	r3, [pc, #52]	; (80744 <pulseCounter_configB+0x48>)
   80710:	4798      	blx	r3
	//pio_set_output(p_pio, ul_mask, LOW, DISABLE, ENABLE);
	pio_set_input(p_pio, ul_mask, PIO_PULLUP);
   80712:	4628      	mov	r0, r5
   80714:	4621      	mov	r1, r4
   80716:	2201      	movs	r2, #1
   80718:	4b0b      	ldr	r3, [pc, #44]	; (80748 <pulseCounter_configB+0x4c>)
   8071a:	4798      	blx	r3
	pio_handler_set(p_pio, ul_id, ul_mask, PIO_IT_EDGE, pulseCounter_handlerB);
   8071c:	4b0b      	ldr	r3, [pc, #44]	; (8074c <pulseCounter_configB+0x50>)
   8071e:	9300      	str	r3, [sp, #0]
   80720:	4628      	mov	r0, r5
   80722:	4631      	mov	r1, r6
   80724:	4622      	mov	r2, r4
   80726:	2340      	movs	r3, #64	; 0x40
   80728:	4e09      	ldr	r6, [pc, #36]	; (80750 <pulseCounter_configB+0x54>)
   8072a:	47b0      	blx	r6
	pio_enable_interrupt(p_pio, ul_mask);
   8072c:	4628      	mov	r0, r5
   8072e:	4621      	mov	r1, r4
   80730:	4b08      	ldr	r3, [pc, #32]	; (80754 <pulseCounter_configB+0x58>)
   80732:	4798      	blx	r3
   80734:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   80738:	4b07      	ldr	r3, [pc, #28]	; (80758 <pulseCounter_configB+0x5c>)
   8073a:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(PIOC_IRQn);
   8073c:	b002      	add	sp, #8
   8073e:	bd70      	pop	{r4, r5, r6, pc}
   80740:	00082c9d 	.word	0x00082c9d
   80744:	00082c45 	.word	0x00082c45
   80748:	00082869 	.word	0x00082869
   8074c:	00080681 	.word	0x00080681
   80750:	00082ad1 	.word	0x00082ad1
   80754:	000828f5 	.word	0x000828f5
   80758:	e000e100 	.word	0xe000e100

0008075c <TC0_init>:
static uint32_t disable_write_protect(uint32_t key){
	if(key == WPKEY_WPMR_PMC)
	{
		*p_PMC_WPMR &= 0;               // clear entire register just to be safe
		*p_PMC_WPMR |= WPKEY_WPMR_PMC;  // first write WPKEY = 0x504D43 to register
		*p_PMC_WPMR &= 0x11111100;      // then clear WPEN bit, mask upper bytes
   8075c:	4b11      	ldr	r3, [pc, #68]	; (807a4 <TC0_init+0x48>)
   8075e:	4a12      	ldr	r2, [pc, #72]	; (807a8 <TC0_init+0x4c>)
   80760:	6013      	str	r3, [r2, #0]
	}
}

static void enable_clock_TC0CH0(void){
	*p_TC_CCR &= ~(1 << CLKDIS); // clear disable bit
	*p_TC_CCR |= (1 << CLKEN);   // set enable bit
   80762:	4a12      	ldr	r2, [pc, #72]	; (807ac <TC0_init+0x50>)
		}
	}
}

static void enable_clock_TC0CH0(void){
	*p_TC_CCR &= ~(1 << CLKDIS); // clear disable bit
   80764:	6811      	ldr	r1, [r2, #0]
   80766:	f021 0102 	bic.w	r1, r1, #2
	*p_TC_CCR |= (1 << CLKEN);   // set enable bit
   8076a:	f041 0101 	orr.w	r1, r1, #1
   8076e:	6011      	str	r1, [r2, #0]
	else if (key == WPKEY_WPMR_TC)
	{
		enable_clock_TC0CH0();    /* in order to access TC_WPMR, the Timer Counter clock of the first channel must be enabled */	
		*p_TC_WPMR &= 0;
		*p_TC_WPMR |= WPKEY_WPMR_TC;
		*p_TC_WPMR &= 0x11111100; // disable Write Protect by clearing WPEN bit, mask upper bytes
   80770:	32e4      	adds	r2, #228	; 0xe4
   80772:	6013      	str	r3, [r2, #0]

static void enable_periph_clk(uint32_t periph_id){
	//disable_write_protect(WPKEY_WPMR_PMC);
	if(periph_id == PERIPH_ID_TCC0)
	{
		if((*p_PMC_PCSR0 & (1<<PERIPH_ID_TCC0)) != (1<<PERIPH_ID_TCC0)){  /* check status of peripheral clock corresponding to Timer Counter Channel 0 (if enabled) */
   80774:	4b0e      	ldr	r3, [pc, #56]	; (807b0 <TC0_init+0x54>)
   80776:	681b      	ldr	r3, [r3, #0]
   80778:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
   8077c:	d103      	bne.n	80786 <TC0_init+0x2a>
			*p_PMC_PCER0 = (1 << PERIPH_ID_TCC0);                         /* enable peripheral clock corresponding to Timer Counter Channel 0 */
   8077e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   80782:	4b0c      	ldr	r3, [pc, #48]	; (807b4 <TC0_init+0x58>)
   80784:	601a      	str	r2, [r3, #0]
	*p_TC_CMR0 &= ~(1 << WAVE);
}

/* Set TCCLKS bits in TC_CMR (clock selected MCK/2 clock signal (from PMC)) */
static void select_clock(void){
	*p_TC_CMR0 &= 0x11111110;
   80786:	4a0c      	ldr	r2, [pc, #48]	; (807b8 <TC0_init+0x5c>)
   80788:	6813      	ldr	r3, [r2, #0]
   8078a:	f003 3311 	and.w	r3, r3, #286331153	; 0x11111111
   8078e:	f023 0301 	bic.w	r3, r3, #1
   80792:	6013      	str	r3, [r2, #0]
/* The start and stop commands are effective only if the clock is enabled */
/* A trigger resets the counter and starts the counter clock */
/* Each channel has a software trigger, available by setting SWTRG in TC_CCR */
/* A software trigger is performed: the counter is reset and the clock is started */
static void start_clock(void){
	*p_TC_CCR |= (1 << SWTRG); 
   80794:	4b05      	ldr	r3, [pc, #20]	; (807ac <TC0_init+0x50>)
		}
	}
}

static void enable_clock_TC0CH0(void){
	*p_TC_CCR &= ~(1 << CLKDIS); // clear disable bit
   80796:	681a      	ldr	r2, [r3, #0]
   80798:	f022 0202 	bic.w	r2, r2, #2
/* The start and stop commands are effective only if the clock is enabled */
/* A trigger resets the counter and starts the counter clock */
/* Each channel has a software trigger, available by setting SWTRG in TC_CCR */
/* A software trigger is performed: the counter is reset and the clock is started */
static void start_clock(void){
	*p_TC_CCR |= (1 << SWTRG); 
   8079c:	f042 0205 	orr.w	r2, r2, #5
   807a0:	601a      	str	r2, [r3, #0]
   807a2:	4770      	bx	lr
   807a4:	00100100 	.word	0x00100100
   807a8:	400e06e4 	.word	0x400e06e4
   807ac:	40080000 	.word	0x40080000
   807b0:	400e0618 	.word	0x400e0618
   807b4:	400e0610 	.word	0x400e0610
   807b8:	40080004 	.word	0x40080004

000807bc <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
   807bc:	b4f0      	push	{r4, r5, r6, r7}
   807be:	b08c      	sub	sp, #48	; 0x30
   807c0:	4607      	mov	r7, r0
   807c2:	460e      	mov	r6, r1
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
   807c4:	ac01      	add	r4, sp, #4
   807c6:	4d12      	ldr	r5, [pc, #72]	; (80810 <pwm_clocks_generate+0x54>)
   807c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   807ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   807cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   807ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   807d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   807d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   807d8:	466a      	mov	r2, sp
			{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
   807da:	2300      	movs	r3, #0
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   807dc:	f852 4f04 	ldr.w	r4, [r2, #4]!
   807e0:	fbb6 f4f4 	udiv	r4, r6, r4
   807e4:	fbb4 f4f7 	udiv	r4, r4, r7
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
   807e8:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   807ec:	d903      	bls.n	807f6 <pwm_clocks_generate+0x3a>
			break;
		}
		ul_pre++;
   807ee:	3301      	adds	r3, #1
	} while (ul_pre < PWM_CLOCK_PRE_MAX);
   807f0:	2b0b      	cmp	r3, #11
   807f2:	d1f3      	bne.n	807dc <pwm_clocks_generate+0x20>
   807f4:	e004      	b.n	80800 <pwm_clocks_generate+0x44>

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
   807f6:	2b0a      	cmp	r3, #10
   807f8:	d805      	bhi.n	80806 <pwm_clocks_generate+0x4a>
		return ul_div | (ul_pre << 8);
   807fa:	ea44 2003 	orr.w	r0, r4, r3, lsl #8
   807fe:	e004      	b.n	8080a <pwm_clocks_generate+0x4e>
	} else {
		return PWM_INVALID_ARGUMENT;
   80800:	f64f 70ff 	movw	r0, #65535	; 0xffff
   80804:	e001      	b.n	8080a <pwm_clocks_generate+0x4e>
   80806:	f64f 70ff 	movw	r0, #65535	; 0xffff
	}
}
   8080a:	b00c      	add	sp, #48	; 0x30
   8080c:	bcf0      	pop	{r4, r5, r6, r7}
   8080e:	4770      	bx	lr
   80810:	00086738 	.word	0x00086738

00080814 <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
   80814:	b570      	push	{r4, r5, r6, lr}
   80816:	4606      	mov	r6, r0
   80818:	460c      	mov	r4, r1
	uint32_t clock = 0;
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
   8081a:	6808      	ldr	r0, [r1, #0]
   8081c:	b140      	cbz	r0, 80830 <pwm_init+0x1c>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
   8081e:	6889      	ldr	r1, [r1, #8]
   80820:	4b0b      	ldr	r3, [pc, #44]	; (80850 <pwm_init+0x3c>)
   80822:	4798      	blx	r3
   80824:	4605      	mov	r5, r0
		if (result == PWM_INVALID_ARGUMENT) {
   80826:	f64f 73ff 	movw	r3, #65535	; 0xffff
   8082a:	4298      	cmp	r0, r3
   8082c:	d101      	bne.n	80832 <pwm_init+0x1e>
   8082e:	e00e      	b.n	8084e <pwm_init+0x3a>
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
	uint32_t clock = 0;
   80830:	2500      	movs	r5, #0

		clock = result;
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
   80832:	6860      	ldr	r0, [r4, #4]
   80834:	b140      	cbz	r0, 80848 <pwm_init+0x34>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
   80836:	68a1      	ldr	r1, [r4, #8]
   80838:	4b05      	ldr	r3, [pc, #20]	; (80850 <pwm_init+0x3c>)
   8083a:	4798      	blx	r3

		if (result == PWM_INVALID_ARGUMENT) {
   8083c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   80840:	4298      	cmp	r0, r3
   80842:	d004      	beq.n	8084e <pwm_init+0x3a>
			return result;
		}

		clock |= (result << 16);
   80844:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
	}
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
   80848:	6035      	str	r5, [r6, #0]
#endif
	return 0;
   8084a:	2000      	movs	r0, #0
   8084c:	bd70      	pop	{r4, r5, r6, pc}
}
   8084e:	bd70      	pop	{r4, r5, r6, pc}
   80850:	000807bd 	.word	0x000807bd

00080854 <pwm_channel_disable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_DIS = (1 << ul_channel);
   80854:	2301      	movs	r3, #1
   80856:	fa03 f101 	lsl.w	r1, r3, r1
   8085a:	6081      	str	r1, [r0, #8]
   8085c:	4770      	bx	lr
   8085e:	bf00      	nop

00080860 <twi_comInit>:

void buildObject(uint8_t data[5], objectinfo_t *ptr_object);

void buildXY(uint8_t data[5], uint16_t *pInt, uint16_t *ypos_1);

void twi_comInit(void) {
   80860:	b500      	push	{lr}
   80862:	b085      	sub	sp, #20
	// TWI master initialization options.
	//set that there is no data;
	theArm.hasData = 0;
   80864:	2300      	movs	r3, #0
   80866:	4a0a      	ldr	r2, [pc, #40]	; (80890 <twi_comInit+0x30>)
   80868:	7153      	strb	r3, [r2, #5]
//	SLAVE_ADDR = SLAVE_ADDR_ARM;//twi slave address for arm

	twi_master_options_t opt;
	opt.speed = TWI_SPEED;
   8086a:	4a0a      	ldr	r2, [pc, #40]	; (80894 <twi_comInit+0x34>)
   8086c:	9202      	str	r2, [sp, #8]
	opt.chip = SLAVE_ADDR_ARM;
   8086e:	2202      	movs	r2, #2
   80870:	f88d 200c 	strb.w	r2, [sp, #12]
typedef twi_packet_t twi_package_t;

static inline uint32_t twi_master_setup(twi_master_t p_twi,
		twi_master_options_t *p_opt)
{
	p_opt->master_clk = sysclk_get_cpu_hz();
   80874:	4a08      	ldr	r2, [pc, #32]	; (80898 <twi_comInit+0x38>)
   80876:	9201      	str	r2, [sp, #4]
	p_opt->smbus      = 0;
   80878:	f88d 300d 	strb.w	r3, [sp, #13]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   8087c:	2017      	movs	r0, #23
   8087e:	4b07      	ldr	r3, [pc, #28]	; (8089c <twi_comInit+0x3c>)
   80880:	4798      	blx	r3
	} else {
		// Do Nothing
	}
#endif

	return (twi_master_init(p_twi, p_opt));
   80882:	4807      	ldr	r0, [pc, #28]	; (808a0 <twi_comInit+0x40>)
   80884:	a901      	add	r1, sp, #4
   80886:	4b07      	ldr	r3, [pc, #28]	; (808a4 <twi_comInit+0x44>)
   80888:	4798      	blx	r3

	// Initialize the TWI master driver.
	twi_master_setup(TWI_PORT, &opt);
}
   8088a:	b005      	add	sp, #20
   8088c:	f85d fb04 	ldr.w	pc, [sp], #4
   80890:	2007ae24 	.word	0x2007ae24
   80894:	000186a0 	.word	0x000186a0
   80898:	0501bd00 	.word	0x0501bd00
   8089c:	00082c45 	.word	0x00082c45
   808a0:	40090000 	.word	0x40090000
   808a4:	0008018d 	.word	0x0008018d

000808a8 <twiSendData>:
	}
}

//Send data to Arm with TWI
//data holds the data, dataLength is how many bytes the data is.
uint8_t twiSendData(uint8_t *data, int dataLength) {
   808a8:	b530      	push	{r4, r5, lr}
   808aa:	b087      	sub	sp, #28

	twi_package_t packet = {
   808ac:	2300      	movs	r3, #0
   808ae:	9301      	str	r3, [sp, #4]
   808b0:	9302      	str	r3, [sp, #8]
   808b2:	9305      	str	r3, [sp, #20]
   808b4:	9003      	str	r0, [sp, #12]
   808b6:	9104      	str	r1, [sp, #16]
   808b8:	2102      	movs	r1, #2
   808ba:	f88d 1014 	strb.w	r1, [sp, #20]
			.buffer       = data, // transfer data source buffer
			.length       = dataLength   // transfer data size (bytes)
	};


	if (twi_probe(TWI_PORT, SLAVE_ADDR_ARM) == TWI_SUCCESS) {
   808be:	4808      	ldr	r0, [pc, #32]	; (808e0 <twiSendData+0x38>)
   808c0:	4b08      	ldr	r3, [pc, #32]	; (808e4 <twiSendData+0x3c>)
   808c2:	4798      	blx	r3
   808c4:	b938      	cbnz	r0, 808d6 <twiSendData+0x2e>
		while (twi_master_write(TWI_PORT, &packet) != TWI_SUCCESS);
   808c6:	4d06      	ldr	r5, [pc, #24]	; (808e0 <twiSendData+0x38>)
   808c8:	4c07      	ldr	r4, [pc, #28]	; (808e8 <twiSendData+0x40>)
   808ca:	4628      	mov	r0, r5
   808cc:	a901      	add	r1, sp, #4
   808ce:	47a0      	blx	r4
   808d0:	2800      	cmp	r0, #0
   808d2:	d1fa      	bne.n	808ca <twiSendData+0x22>
   808d4:	e001      	b.n	808da <twiSendData+0x32>
		return 1;
	} else {
		return 0;
   808d6:	2000      	movs	r0, #0
   808d8:	e000      	b.n	808dc <twiSendData+0x34>
	};


	if (twi_probe(TWI_PORT, SLAVE_ADDR_ARM) == TWI_SUCCESS) {
		while (twi_master_write(TWI_PORT, &packet) != TWI_SUCCESS);
		return 1;
   808da:	2001      	movs	r0, #1
	} else {
		return 0;
	}
}
   808dc:	b007      	add	sp, #28
   808de:	bd30      	pop	{r4, r5, pc}
   808e0:	40090000 	.word	0x40090000
   808e4:	00080341 	.word	0x00080341
   808e8:	000802a1 	.word	0x000802a1

000808ec <twiReciveData>:

//Recive data from ARM with TWI
//recives and prints the data out on Uart.
//packageSize how many bytes expected to recive
//returns the data recived as array.
uint8_t twiReciveData(uint8_t *recv, uint8_t packageSize) {
   808ec:	b530      	push	{r4, r5, lr}
   808ee:	b087      	sub	sp, #28
	//package recived
	twi_package_t pkt_rcv = {
   808f0:	2300      	movs	r3, #0
   808f2:	9301      	str	r3, [sp, #4]
   808f4:	9302      	str	r3, [sp, #8]
   808f6:	9305      	str	r3, [sp, #20]
   808f8:	9003      	str	r0, [sp, #12]
   808fa:	9104      	str	r1, [sp, #16]
   808fc:	2302      	movs	r3, #2
   808fe:	f88d 3014 	strb.w	r3, [sp, #20]
			.length       = packageSize   // transfer data size (bytes)
	};

// 	if(twi_probe(TWI_PORT,SLAVE_ADDR)==TWI_SUCCESS)
// 	{
	while (twi_master_read(TWI_PORT, &pkt_rcv) != TWI_SUCCESS);
   80902:	4d05      	ldr	r5, [pc, #20]	; (80918 <twiReciveData+0x2c>)
   80904:	4c05      	ldr	r4, [pc, #20]	; (8091c <twiReciveData+0x30>)
   80906:	4628      	mov	r0, r5
   80908:	a901      	add	r1, sp, #4
   8090a:	47a0      	blx	r4
   8090c:	2800      	cmp	r0, #0
   8090e:	d1fa      	bne.n	80906 <twiReciveData+0x1a>
// 	}
// 	else{
// 		return 0;
// 	}

}
   80910:	2001      	movs	r0, #1
   80912:	b007      	add	sp, #28
   80914:	bd30      	pop	{r4, r5, pc}
   80916:	bf00      	nop
   80918:	40090000 	.word	0x40090000
   8091c:	000801cd 	.word	0x000801cd

00080920 <handleCmd>:


void handleCmd(uint8_t cmd) {
   80920:	b508      	push	{r3, lr}

	switch (cmd) {
   80922:	3802      	subs	r0, #2
   80924:	2823      	cmp	r0, #35	; 0x23
   80926:	d837      	bhi.n	80998 <handleCmd+0x78>
   80928:	e8df f000 	tbb	[pc, r0]
   8092c:	361e1a16 	.word	0x361e1a16
   80930:	36363636 	.word	0x36363636
   80934:	36363636 	.word	0x36363636
   80938:	36363636 	.word	0x36363636
   8093c:	36363636 	.word	0x36363636
   80940:	36363636 	.word	0x36363636
   80944:	36363636 	.word	0x36363636
   80948:	2a123636 	.word	0x2a123636
   8094c:	32262e22 	.word	0x32262e22
		case TWI_CMD_ARM_INIT:
			printf("TWI_CMD_ARM_INIT\n");
   80950:	4813      	ldr	r0, [pc, #76]	; (809a0 <handleCmd+0x80>)
   80952:	4b14      	ldr	r3, [pc, #80]	; (809a4 <handleCmd+0x84>)
   80954:	4798      	blx	r3
			break;
   80956:	bd08      	pop	{r3, pc}
		case TWI_CMD_ARM_REQ_BOX_INFO:
			printf("TWI_CMD_ARM_REQ_BOX_INFO\n");
   80958:	4813      	ldr	r0, [pc, #76]	; (809a8 <handleCmd+0x88>)
   8095a:	4b12      	ldr	r3, [pc, #72]	; (809a4 <handleCmd+0x84>)
   8095c:	4798      	blx	r3
			break;
   8095e:	bd08      	pop	{r3, pc}
		case TWI_CMD_ARM_REQ_OBJ_INFO:
			printf("TWI_CMD_ARM_REQ_OBJ_INFO\n");
   80960:	4812      	ldr	r0, [pc, #72]	; (809ac <handleCmd+0x8c>)
   80962:	4b10      	ldr	r3, [pc, #64]	; (809a4 <handleCmd+0x84>)
   80964:	4798      	blx	r3
			break;
   80966:	bd08      	pop	{r3, pc}
		case TWI_CMD_ARM_REQ_COLLECT_INFO:
			printf("TWI_CMD_ARM_REQ_COLLECT_INFO\n");
   80968:	4811      	ldr	r0, [pc, #68]	; (809b0 <handleCmd+0x90>)
   8096a:	4b0e      	ldr	r3, [pc, #56]	; (809a4 <handleCmd+0x84>)
   8096c:	4798      	blx	r3
			break;
   8096e:	bd08      	pop	{r3, pc}
		case TWI_CMD_PICKUP_START:
			printf("TWI_CMD_PICKUP_START\n");
   80970:	4810      	ldr	r0, [pc, #64]	; (809b4 <handleCmd+0x94>)
   80972:	4b0c      	ldr	r3, [pc, #48]	; (809a4 <handleCmd+0x84>)
   80974:	4798      	blx	r3
			break;
   80976:	bd08      	pop	{r3, pc}
		case TWI_CMD_PICKUP_STATUS:
			printf("TWI_CMD_PICKUP_STATUS\n");
   80978:	480f      	ldr	r0, [pc, #60]	; (809b8 <handleCmd+0x98>)
   8097a:	4b0a      	ldr	r3, [pc, #40]	; (809a4 <handleCmd+0x84>)
   8097c:	4798      	blx	r3
			break;
   8097e:	bd08      	pop	{r3, pc}
		case TWI_CMD_DROPOFF_START:
			printf("TWI_CMD_DROPOFF_START\n");
   80980:	480e      	ldr	r0, [pc, #56]	; (809bc <handleCmd+0x9c>)
   80982:	4b08      	ldr	r3, [pc, #32]	; (809a4 <handleCmd+0x84>)
   80984:	4798      	blx	r3
			break;
   80986:	bd08      	pop	{r3, pc}
		case TWI_CMD_DROPOFF_STATUS:
			printf("TWI_CMD_DROPOFF_STATUS\n");
   80988:	480d      	ldr	r0, [pc, #52]	; (809c0 <handleCmd+0xa0>)
   8098a:	4b06      	ldr	r3, [pc, #24]	; (809a4 <handleCmd+0x84>)
   8098c:	4798      	blx	r3
			break;
   8098e:	bd08      	pop	{r3, pc}
		case TWI_CMD_ERROR:
			printf("TWI_CMD_ERROR\n");
   80990:	480c      	ldr	r0, [pc, #48]	; (809c4 <handleCmd+0xa4>)
   80992:	4b04      	ldr	r3, [pc, #16]	; (809a4 <handleCmd+0x84>)
   80994:	4798      	blx	r3
			break;
   80996:	bd08      	pop	{r3, pc}
		default:
			printf("error\n");
   80998:	480b      	ldr	r0, [pc, #44]	; (809c8 <handleCmd+0xa8>)
   8099a:	4b02      	ldr	r3, [pc, #8]	; (809a4 <handleCmd+0x84>)
   8099c:	4798      	blx	r3
   8099e:	bd08      	pop	{r3, pc}
   809a0:	00086768 	.word	0x00086768
   809a4:	00083ce1 	.word	0x00083ce1
   809a8:	0008677c 	.word	0x0008677c
   809ac:	00086798 	.word	0x00086798
   809b0:	000867b4 	.word	0x000867b4
   809b4:	000867d4 	.word	0x000867d4
   809b8:	000867ec 	.word	0x000867ec
   809bc:	00086804 	.word	0x00086804
   809c0:	0008681c 	.word	0x0008681c
   809c4:	00086834 	.word	0x00086834
   809c8:	00086844 	.word	0x00086844

000809cc <twi_getArmInfo>:
	}
}

arminfo_t twi_getArmInfo() {
   809cc:	b510      	push	{r4, lr}
   809ce:	b082      	sub	sp, #8
   809d0:	4604      	mov	r4, r0
// 	if(theArm.hasData)
// 	{
// 		return theArm;
// 	}

	uint8_t data[3] = {0};
   809d2:	2300      	movs	r3, #0
   809d4:	f88d 3006 	strb.w	r3, [sp, #6]
	uint8_t recv[3] = {0};
   809d8:	f8ad 3000 	strh.w	r3, [sp]
   809dc:	f88d 3002 	strb.w	r3, [sp, #2]
	uint8_t result;


	data[0] = TWI_CMD_ARM_INIT;
   809e0:	2320      	movs	r3, #32
   809e2:	f88d 3004 	strb.w	r3, [sp, #4]
	data[1] = TWI_CMD_ARM_REQ_BOX_INFO;
   809e6:	2302      	movs	r3, #2
   809e8:	f88d 3005 	strb.w	r3, [sp, #5]

	//TWI_CMD_ARM_REQ_COLLECT_INFO;
	//TWI_CMD_ARM_REQ_OBJ_INFO

	result = twiSendData(data, 3);
   809ec:	a801      	add	r0, sp, #4
   809ee:	2103      	movs	r1, #3
   809f0:	4b38      	ldr	r3, [pc, #224]	; (80ad4 <twi_getArmInfo+0x108>)
   809f2:	4798      	blx	r3
	if (result) {
   809f4:	b1f0      	cbz	r0, 80a34 <twi_getArmInfo+0x68>

//		vTaskDelay(pdMSTOTICKS(20));
		twiReciveData(recv, 3);
   809f6:	4668      	mov	r0, sp
   809f8:	2103      	movs	r1, #3
   809fa:	4b37      	ldr	r3, [pc, #220]	; (80ad8 <twi_getArmInfo+0x10c>)
   809fc:	4798      	blx	r3
		//printf("111 Receive successful: %u, %u, %u\n", recv[0], recv[1], recv[2]);
		//vTaskDelay(pdMSTOTICKS(10));
		theArm.boxDistance = recv[1];
   809fe:	4b37      	ldr	r3, [pc, #220]	; (80adc <twi_getArmInfo+0x110>)
   80a00:	f89d 2001 	ldrb.w	r2, [sp, #1]
   80a04:	701a      	strb	r2, [r3, #0]
		theArm.boxAngle = recv[2];
   80a06:	f89d 2002 	ldrb.w	r2, [sp, #2]
   80a0a:	705a      	strb	r2, [r3, #1]

		//todo remove
		theArm.hasData = 1;
   80a0c:	2201      	movs	r2, #1
   80a0e:	715a      	strb	r2, [r3, #5]
	}

	//vTaskDelay(pdMSTOTICKS(60));

	//setup for next send
	data[0] = TWI_CMD_ARM_INIT;
   80a10:	2320      	movs	r3, #32
   80a12:	f88d 3004 	strb.w	r3, [sp, #4]
	data[1] = TWI_CMD_ARM_REQ_OBJ_INFO;
   80a16:	2103      	movs	r1, #3
   80a18:	f88d 1005 	strb.w	r1, [sp, #5]
	recv[0] = 0;
   80a1c:	2300      	movs	r3, #0
   80a1e:	f88d 3000 	strb.w	r3, [sp]
	recv[1] = 0;
   80a22:	f88d 3001 	strb.w	r3, [sp, #1]
	recv[2] = 0;
   80a26:	f88d 3002 	strb.w	r3, [sp, #2]

	result = twiSendData(data, 3);
   80a2a:	a801      	add	r0, sp, #4
   80a2c:	4b29      	ldr	r3, [pc, #164]	; (80ad4 <twi_getArmInfo+0x108>)
   80a2e:	4798      	blx	r3
	if (result) {
   80a30:	b958      	cbnz	r0, 80a4a <twi_getArmInfo+0x7e>
   80a32:	e027      	b.n	80a84 <twi_getArmInfo+0xb8>
		theArm.boxAngle = recv[2];

		//todo remove
		theArm.hasData = 1;
	} else {
		puts("Fail 111");
   80a34:	482a      	ldr	r0, [pc, #168]	; (80ae0 <twi_getArmInfo+0x114>)
   80a36:	4b2b      	ldr	r3, [pc, #172]	; (80ae4 <twi_getArmInfo+0x118>)
   80a38:	4798      	blx	r3
		//vTaskDelay(pdMSTOTICKS(10));
		theArm.hasData = 0;
   80a3a:	4b28      	ldr	r3, [pc, #160]	; (80adc <twi_getArmInfo+0x110>)
   80a3c:	2200      	movs	r2, #0
   80a3e:	715a      	strb	r2, [r3, #5]
		return theArm;
   80a40:	6818      	ldr	r0, [r3, #0]
   80a42:	6020      	str	r0, [r4, #0]
   80a44:	889b      	ldrh	r3, [r3, #4]
   80a46:	80a3      	strh	r3, [r4, #4]
   80a48:	e040      	b.n	80acc <twi_getArmInfo+0x100>
	recv[2] = 0;

	result = twiSendData(data, 3);
	if (result) {
		//vTaskDelay(pdMSTOTICKS(20));
		twiReciveData(recv, 3);
   80a4a:	4668      	mov	r0, sp
   80a4c:	2103      	movs	r1, #3
   80a4e:	4b22      	ldr	r3, [pc, #136]	; (80ad8 <twi_getArmInfo+0x10c>)
   80a50:	4798      	blx	r3
// 			//printf("222 Receive successful: %u, %u, %u\n", recv[0], recv[1], recv[2]);
// 			//vTaskDelay(pdMSTOTICKS(10));
		theArm.objectDistance = recv[1];
   80a52:	4b22      	ldr	r3, [pc, #136]	; (80adc <twi_getArmInfo+0x110>)
   80a54:	f89d 2001 	ldrb.w	r2, [sp, #1]
   80a58:	709a      	strb	r2, [r3, #2]
		theArm.objectAngle = recv[2];
   80a5a:	f89d 2002 	ldrb.w	r2, [sp, #2]
   80a5e:	70da      	strb	r2, [r3, #3]
		theArm.hasData = 1;
   80a60:	2201      	movs	r2, #1
   80a62:	715a      	strb	r2, [r3, #5]
		return theArm;
	}


	//data[0] = TWI_CMD_ARM_INIT;
	data[1] = TWI_CMD_ARM_REQ_COLLECT_INFO;
   80a64:	2304      	movs	r3, #4
   80a66:	f88d 3005 	strb.w	r3, [sp, #5]
	recv[0] = 0;
   80a6a:	2300      	movs	r3, #0
   80a6c:	f88d 3000 	strb.w	r3, [sp]
	recv[1] = 0;
   80a70:	f88d 3001 	strb.w	r3, [sp, #1]
	recv[2] = 0;
   80a74:	f88d 3002 	strb.w	r3, [sp, #2]


	result = twiSendData(data, 3);
   80a78:	a801      	add	r0, sp, #4
   80a7a:	2103      	movs	r1, #3
   80a7c:	4b15      	ldr	r3, [pc, #84]	; (80ad4 <twi_getArmInfo+0x108>)
   80a7e:	4798      	blx	r3
	if (result) {
   80a80:	b1d0      	cbz	r0, 80ab8 <twi_getArmInfo+0xec>
   80a82:	e00a      	b.n	80a9a <twi_getArmInfo+0xce>
// 			//vTaskDelay(pdMSTOTICKS(10));
		theArm.objectDistance = recv[1];
		theArm.objectAngle = recv[2];
		theArm.hasData = 1;
	} else {
		puts("Fail 222");
   80a84:	4818      	ldr	r0, [pc, #96]	; (80ae8 <twi_getArmInfo+0x11c>)
   80a86:	4b17      	ldr	r3, [pc, #92]	; (80ae4 <twi_getArmInfo+0x118>)
   80a88:	4798      	blx	r3
		//vTaskDelay(pdMSTOTICKS(10));
		theArm.hasData = 0;
   80a8a:	4b14      	ldr	r3, [pc, #80]	; (80adc <twi_getArmInfo+0x110>)
   80a8c:	2200      	movs	r2, #0
   80a8e:	715a      	strb	r2, [r3, #5]
		return theArm;
   80a90:	6818      	ldr	r0, [r3, #0]
   80a92:	6020      	str	r0, [r4, #0]
   80a94:	889b      	ldrh	r3, [r3, #4]
   80a96:	80a3      	strh	r3, [r4, #4]
   80a98:	e018      	b.n	80acc <twi_getArmInfo+0x100>
	result = twiSendData(data, 3);
	if (result) {

		//delay_ms(20);

		twiReciveData(recv, 3);
   80a9a:	4668      	mov	r0, sp
   80a9c:	2103      	movs	r1, #3
   80a9e:	4b0e      	ldr	r3, [pc, #56]	; (80ad8 <twi_getArmInfo+0x10c>)
   80aa0:	4798      	blx	r3
		//printf("333 Receive successful: %u, %u, %u\n", recv[0], recv[1], recv[2]);
		//vTaskDelay(pdMSTOTICKS(10));
		theArm.collectAll = recv[1];
   80aa2:	4b0e      	ldr	r3, [pc, #56]	; (80adc <twi_getArmInfo+0x110>)
   80aa4:	f89d 2001 	ldrb.w	r2, [sp, #1]
   80aa8:	711a      	strb	r2, [r3, #4]
		theArm.hasData = 1;
   80aaa:	2201      	movs	r2, #1
   80aac:	715a      	strb	r2, [r3, #5]
		theArm.hasData = 0;
		return theArm;
	}

	//return the armInfo
	return theArm;
   80aae:	6818      	ldr	r0, [r3, #0]
   80ab0:	6020      	str	r0, [r4, #0]
   80ab2:	889b      	ldrh	r3, [r3, #4]
   80ab4:	80a3      	strh	r3, [r4, #4]
   80ab6:	e009      	b.n	80acc <twi_getArmInfo+0x100>
		//printf("333 Receive successful: %u, %u, %u\n", recv[0], recv[1], recv[2]);
		//vTaskDelay(pdMSTOTICKS(10));
		theArm.collectAll = recv[1];
		theArm.hasData = 1;
	} else {
		puts("Fail 333");
   80ab8:	480c      	ldr	r0, [pc, #48]	; (80aec <twi_getArmInfo+0x120>)
   80aba:	4b0a      	ldr	r3, [pc, #40]	; (80ae4 <twi_getArmInfo+0x118>)
   80abc:	4798      	blx	r3
		//vTaskDelay(pdMSTOTICKS(10));
		theArm.hasData = 0;
   80abe:	4b07      	ldr	r3, [pc, #28]	; (80adc <twi_getArmInfo+0x110>)
   80ac0:	2200      	movs	r2, #0
   80ac2:	715a      	strb	r2, [r3, #5]
		return theArm;
   80ac4:	6818      	ldr	r0, [r3, #0]
   80ac6:	6020      	str	r0, [r4, #0]
   80ac8:	889b      	ldrh	r3, [r3, #4]
   80aca:	80a3      	strh	r3, [r4, #4]
	}

	//return the armInfo
	return theArm;
}
   80acc:	4620      	mov	r0, r4
   80ace:	b002      	add	sp, #8
   80ad0:	bd10      	pop	{r4, pc}
   80ad2:	bf00      	nop
   80ad4:	000808a9 	.word	0x000808a9
   80ad8:	000808ed 	.word	0x000808ed
   80adc:	2007ae24 	.word	0x2007ae24
   80ae0:	0008684c 	.word	0x0008684c
   80ae4:	00083ee9 	.word	0x00083ee9
   80ae8:	00086858 	.word	0x00086858
   80aec:	00086864 	.word	0x00086864

00080af0 <twi_pickupStart>:
// 	twi_set_slave_addr(TWI_PORT, SLAVE_ADDR);
// 
// }

//send command for arm to start pickup
uint8_t twi_pickupStart() {
   80af0:	b500      	push	{lr}
   80af2:	b083      	sub	sp, #12

	uint8_t data[3] = {TWI_CMD_PICKUP_START, 0, 0};
   80af4:	2322      	movs	r3, #34	; 0x22
   80af6:	f88d 3004 	strb.w	r3, [sp, #4]
   80afa:	2300      	movs	r3, #0
   80afc:	f88d 3005 	strb.w	r3, [sp, #5]
   80b00:	f88d 3006 	strb.w	r3, [sp, #6]
	//send pickup start cmd
	return twiSendData(data, 3);
   80b04:	a801      	add	r0, sp, #4
   80b06:	2103      	movs	r1, #3
   80b08:	4b02      	ldr	r3, [pc, #8]	; (80b14 <twi_pickupStart+0x24>)
   80b0a:	4798      	blx	r3
}
   80b0c:	b003      	add	sp, #12
   80b0e:	f85d fb04 	ldr.w	pc, [sp], #4
   80b12:	bf00      	nop
   80b14:	000808a9 	.word	0x000808a9

00080b18 <twi_pickupGetStatus>:
void twi_pickupSetCm(uint8_t cm) {
	twi_move_cm = cm;
}

//set arm in send pickup status
PickupStatus twi_pickupGetStatus() {
   80b18:	b500      	push	{lr}
   80b1a:	b083      	sub	sp, #12
	uint8_t data[3] = {TWI_CMD_PICKUP_STATUS, 0, 0};
   80b1c:	2324      	movs	r3, #36	; 0x24
   80b1e:	f88d 3004 	strb.w	r3, [sp, #4]
   80b22:	2300      	movs	r3, #0
   80b24:	f88d 3005 	strb.w	r3, [sp, #5]
   80b28:	f88d 3006 	strb.w	r3, [sp, #6]
	uint8_t recv[3] = {0};
   80b2c:	f8ad 3000 	strh.w	r3, [sp]
   80b30:	f88d 3002 	strb.w	r3, [sp, #2]
	//	twi_reset 	//maybe fix out of sync
	//send pickup start cmd
	if (twiSendData(data, 3)) {
   80b34:	a801      	add	r0, sp, #4
   80b36:	2103      	movs	r1, #3
   80b38:	4b17      	ldr	r3, [pc, #92]	; (80b98 <twi_pickupGetStatus+0x80>)
   80b3a:	4798      	blx	r3
   80b3c:	b330      	cbz	r0, 80b8c <twi_pickupGetStatus+0x74>
		delay_ms(10);
   80b3e:	f64e 2060 	movw	r0, #60000	; 0xea60
   80b42:	4b16      	ldr	r3, [pc, #88]	; (80b9c <twi_pickupGetStatus+0x84>)
   80b44:	4798      	blx	r3
		//get status
		twiReciveData(recv, 3);
   80b46:	4668      	mov	r0, sp
   80b48:	2103      	movs	r1, #3
   80b4a:	4b15      	ldr	r3, [pc, #84]	; (80ba0 <twi_pickupGetStatus+0x88>)
   80b4c:	4798      	blx	r3
		if (recv[0] == TWI_CMD_PICKUP_STATUS) {
   80b4e:	f89d 3000 	ldrb.w	r3, [sp]
   80b52:	2b24      	cmp	r3, #36	; 0x24
   80b54:	d10c      	bne.n	80b70 <twi_pickupGetStatus+0x58>
			//printf("pickupstatus %x %u",recv[0],recv[1]);
			//vTaskDelay(pdMSTOTICKS(10));

			//when slave want to move
			if (recv[1] == PICKUP_FORWARD || recv[1] == PICKUP_BACKWARD) {
   80b56:	f89d 0001 	ldrb.w	r0, [sp, #1]
   80b5a:	1ec3      	subs	r3, r0, #3
   80b5c:	b2db      	uxtb	r3, r3
   80b5e:	2b01      	cmp	r3, #1
   80b60:	d817      	bhi.n	80b92 <twi_pickupGetStatus+0x7a>
	}
}

//set pickup status. when done driving
void twi_pickupSetMasterStatus(PickupStatus newStatus) {
	twi_masterPickupStatus = newStatus;
   80b62:	4b10      	ldr	r3, [pc, #64]	; (80ba4 <twi_pickupGetStatus+0x8c>)
   80b64:	7018      	strb	r0, [r3, #0]
	return twiSendData(data, 3);
}


void twi_pickupSetCm(uint8_t cm) {
	twi_move_cm = cm;
   80b66:	f89d 2002 	ldrb.w	r2, [sp, #2]
   80b6a:	4b0f      	ldr	r3, [pc, #60]	; (80ba8 <twi_pickupGetStatus+0x90>)
   80b6c:	701a      	strb	r2, [r3, #0]
   80b6e:	e010      	b.n	80b92 <twi_pickupGetStatus+0x7a>
				twi_pickupSetMasterStatus(recv[1]);
				twi_pickupSetCm(recv[2]);
			}
			return recv[1];
		} else {
			puts("ERROR pickup status");
   80b70:	480e      	ldr	r0, [pc, #56]	; (80bac <twi_pickupGetStatus+0x94>)
   80b72:	4b0f      	ldr	r3, [pc, #60]	; (80bb0 <twi_pickupGetStatus+0x98>)
   80b74:	4798      	blx	r3
			printf("got: %x %u\n", recv[0], recv[0]);
   80b76:	f89d 2000 	ldrb.w	r2, [sp]
   80b7a:	480e      	ldr	r0, [pc, #56]	; (80bb4 <twi_pickupGetStatus+0x9c>)
   80b7c:	4611      	mov	r1, r2
   80b7e:	4b0e      	ldr	r3, [pc, #56]	; (80bb8 <twi_pickupGetStatus+0xa0>)
   80b80:	4798      	blx	r3
			//vTaskDelay(pdMSTOTICKS(10));
			handleCmd(recv[0]);
   80b82:	f89d 0000 	ldrb.w	r0, [sp]
   80b86:	4b0d      	ldr	r3, [pc, #52]	; (80bbc <twi_pickupGetStatus+0xa4>)
   80b88:	4798      	blx	r3
   80b8a:	e002      	b.n	80b92 <twi_pickupGetStatus+0x7a>
			//vTaskDelay(pdMSTOTICKS(10));
		}

	} else {
		puts("Error on send status pickup");
   80b8c:	480c      	ldr	r0, [pc, #48]	; (80bc0 <twi_pickupGetStatus+0xa8>)
   80b8e:	4b08      	ldr	r3, [pc, #32]	; (80bb0 <twi_pickupGetStatus+0x98>)
   80b90:	4798      	blx	r3
	}

}
   80b92:	b003      	add	sp, #12
   80b94:	f85d fb04 	ldr.w	pc, [sp], #4
   80b98:	000808a9 	.word	0x000808a9
   80b9c:	20070001 	.word	0x20070001
   80ba0:	000808ed 	.word	0x000808ed
   80ba4:	20070204 	.word	0x20070204
   80ba8:	20070ab8 	.word	0x20070ab8
   80bac:	00086870 	.word	0x00086870
   80bb0:	00083ee9 	.word	0x00083ee9
   80bb4:	00086884 	.word	0x00086884
   80bb8:	00083ce1 	.word	0x00083ce1
   80bbc:	00080921 	.word	0x00080921
   80bc0:	00086890 	.word	0x00086890

00080bc4 <twi_pickupSendMovementDone>:

//send done driving
uint8_t twi_pickupSendMovementDone() {
   80bc4:	b500      	push	{lr}
   80bc6:	b083      	sub	sp, #12
	uint8_t data[3] = {TWI_CMD_PICKUP_STATUS, PICKUP_DONE_DRIVE, 0};
   80bc8:	4b0a      	ldr	r3, [pc, #40]	; (80bf4 <twi_pickupSendMovementDone+0x30>)
   80bca:	881a      	ldrh	r2, [r3, #0]
   80bcc:	789b      	ldrb	r3, [r3, #2]
   80bce:	f8ad 2004 	strh.w	r2, [sp, #4]
   80bd2:	f88d 3006 	strb.w	r3, [sp, #6]
	//send pickup start cmd
	if (twiSendData(data, 3)) {
   80bd6:	a801      	add	r0, sp, #4
   80bd8:	2103      	movs	r1, #3
   80bda:	4b07      	ldr	r3, [pc, #28]	; (80bf8 <twi_pickupSendMovementDone+0x34>)
   80bdc:	4798      	blx	r3
   80bde:	4603      	mov	r3, r0
   80be0:	b118      	cbz	r0, 80bea <twi_pickupSendMovementDone+0x26>
		twi_masterPickupStatus = PICKUP_RUNNING;
   80be2:	2205      	movs	r2, #5
   80be4:	4b05      	ldr	r3, [pc, #20]	; (80bfc <twi_pickupSendMovementDone+0x38>)
   80be6:	701a      	strb	r2, [r3, #0]
		//success
		
		return 1;
   80be8:	2301      	movs	r3, #1
	} else {
		//failed
		return 0;
	}

}
   80bea:	4618      	mov	r0, r3
   80bec:	b003      	add	sp, #12
   80bee:	f85d fb04 	ldr.w	pc, [sp], #4
   80bf2:	bf00      	nop
   80bf4:	00086764 	.word	0x00086764
   80bf8:	000808a9 	.word	0x000808a9
   80bfc:	20070204 	.word	0x20070204

00080c00 <twi_dropoffStart>:

//start dropoff
uint8_t twi_dropoffStart(void) {
   80c00:	b500      	push	{lr}
   80c02:	b083      	sub	sp, #12

	uint8_t data[3] = {TWI_CMD_DROPOFF_START, 0, 0};
   80c04:	2321      	movs	r3, #33	; 0x21
   80c06:	f88d 3004 	strb.w	r3, [sp, #4]
   80c0a:	2300      	movs	r3, #0
   80c0c:	f88d 3005 	strb.w	r3, [sp, #5]
   80c10:	f88d 3006 	strb.w	r3, [sp, #6]
	//send pickup start cmd
	return twiSendData(data, 3);
   80c14:	a801      	add	r0, sp, #4
   80c16:	2103      	movs	r1, #3
   80c18:	4b02      	ldr	r3, [pc, #8]	; (80c24 <twi_dropoffStart+0x24>)
   80c1a:	4798      	blx	r3
}
   80c1c:	b003      	add	sp, #12
   80c1e:	f85d fb04 	ldr.w	pc, [sp], #4
   80c22:	bf00      	nop
   80c24:	000808a9 	.word	0x000808a9

00080c28 <twi_dropoffGetStatus>:

//get the dropoff status
DropoffStatus twi_dropoffGetStatus(void) {
   80c28:	b500      	push	{lr}
   80c2a:	b083      	sub	sp, #12
	uint8_t data[3] = {TWI_CMD_DROPOFF_STATUS, 0, 0};
   80c2c:	2323      	movs	r3, #35	; 0x23
   80c2e:	f88d 3004 	strb.w	r3, [sp, #4]
   80c32:	2300      	movs	r3, #0
   80c34:	f88d 3005 	strb.w	r3, [sp, #5]
   80c38:	f88d 3006 	strb.w	r3, [sp, #6]
	uint8_t recv[3] = {0};
   80c3c:	f8ad 3000 	strh.w	r3, [sp]
   80c40:	f88d 3002 	strb.w	r3, [sp, #2]
	//send pickup start cmd
	if (twiSendData(data, 3)) {
   80c44:	a801      	add	r0, sp, #4
   80c46:	2103      	movs	r1, #3
   80c48:	4b10      	ldr	r3, [pc, #64]	; (80c8c <twi_dropoffGetStatus+0x64>)
   80c4a:	4798      	blx	r3
   80c4c:	b1c0      	cbz	r0, 80c80 <twi_dropoffGetStatus+0x58>
		//get status
		twiReciveData(recv, 3);
   80c4e:	4668      	mov	r0, sp
   80c50:	2103      	movs	r1, #3
   80c52:	4b0f      	ldr	r3, [pc, #60]	; (80c90 <twi_dropoffGetStatus+0x68>)
   80c54:	4798      	blx	r3
		if (recv[0] == TWI_CMD_DROPOFF_STATUS) {
   80c56:	f89d 3000 	ldrb.w	r3, [sp]
   80c5a:	2b23      	cmp	r3, #35	; 0x23
   80c5c:	d102      	bne.n	80c64 <twi_dropoffGetStatus+0x3c>
			//printf("pickupstatus %x %u",recv[0],recv[1]);
			//vTaskDelay(pdMSTOTICKS(10));
			//wait here for arm to finish..

			return recv[1];
   80c5e:	f89d 0001 	ldrb.w	r0, [sp, #1]
   80c62:	e010      	b.n	80c86 <twi_dropoffGetStatus+0x5e>
		} else {
			puts("ERROR pickup status");
   80c64:	480b      	ldr	r0, [pc, #44]	; (80c94 <twi_dropoffGetStatus+0x6c>)
   80c66:	4b0c      	ldr	r3, [pc, #48]	; (80c98 <twi_dropoffGetStatus+0x70>)
   80c68:	4798      	blx	r3
			printf("got: %x %u\n", recv[0], recv[0]);
   80c6a:	f89d 2000 	ldrb.w	r2, [sp]
   80c6e:	480b      	ldr	r0, [pc, #44]	; (80c9c <twi_dropoffGetStatus+0x74>)
   80c70:	4611      	mov	r1, r2
   80c72:	4b0b      	ldr	r3, [pc, #44]	; (80ca0 <twi_dropoffGetStatus+0x78>)
   80c74:	4798      	blx	r3
			//vTaskDelay(pdMSTOTICKS(10));
			handleCmd(recv[0]);
   80c76:	f89d 0000 	ldrb.w	r0, [sp]
   80c7a:	4b0a      	ldr	r3, [pc, #40]	; (80ca4 <twi_dropoffGetStatus+0x7c>)
   80c7c:	4798      	blx	r3
   80c7e:	e002      	b.n	80c86 <twi_dropoffGetStatus+0x5e>
			//vTaskDelay(pdMSTOTICKS(10));
		}

	} else {
		puts("Error on send status pickup");
   80c80:	4809      	ldr	r0, [pc, #36]	; (80ca8 <twi_dropoffGetStatus+0x80>)
   80c82:	4b05      	ldr	r3, [pc, #20]	; (80c98 <twi_dropoffGetStatus+0x70>)
   80c84:	4798      	blx	r3
	}
}
   80c86:	b003      	add	sp, #12
   80c88:	f85d fb04 	ldr.w	pc, [sp], #4
   80c8c:	000808a9 	.word	0x000808a9
   80c90:	000808ed 	.word	0x000808ed
   80c94:	00086870 	.word	0x00086870
   80c98:	00083ee9 	.word	0x00083ee9
   80c9c:	00086884 	.word	0x00086884
   80ca0:	00083ce1 	.word	0x00083ce1
   80ca4:	00080921 	.word	0x00080921
   80ca8:	00086890 	.word	0x00086890

00080cac <twi_navSendCmd>:
uint8_t twi_pickupGetMoveCm(void) {
	return twi_move_cm;
}

//send nav command
uint8_t twi_navSendCmd(TwiCmdNav cmd) {
   80cac:	b530      	push	{r4, r5, lr}
   80cae:	b089      	sub	sp, #36	; 0x24
   80cb0:	f88d 0007 	strb.w	r0, [sp, #7]
	twi_package_t packet = {
   80cb4:	2300      	movs	r3, #0
   80cb6:	9303      	str	r3, [sp, #12]
   80cb8:	9304      	str	r3, [sp, #16]
   80cba:	9307      	str	r3, [sp, #28]
   80cbc:	f10d 0307 	add.w	r3, sp, #7
   80cc0:	9305      	str	r3, [sp, #20]
   80cc2:	2301      	movs	r3, #1
   80cc4:	9306      	str	r3, [sp, #24]
   80cc6:	2103      	movs	r1, #3
   80cc8:	f88d 101c 	strb.w	r1, [sp, #28]
			.buffer       = &cmd, // transfer data source buffer &cmd
			.length       = 1   // transfer data size (bytes)
	};


	if (twi_probe(TWI_PORT, SLAVE_ADDR_NAV) == TWI_SUCCESS) {
   80ccc:	4809      	ldr	r0, [pc, #36]	; (80cf4 <twi_navSendCmd+0x48>)
   80cce:	4b0a      	ldr	r3, [pc, #40]	; (80cf8 <twi_navSendCmd+0x4c>)
   80cd0:	4798      	blx	r3
   80cd2:	b938      	cbnz	r0, 80ce4 <twi_navSendCmd+0x38>
	//puts("Write to slave");
	while (twi_master_write(TWI_PORT, &packet) != TWI_SUCCESS);
   80cd4:	4d07      	ldr	r5, [pc, #28]	; (80cf4 <twi_navSendCmd+0x48>)
   80cd6:	4c09      	ldr	r4, [pc, #36]	; (80cfc <twi_navSendCmd+0x50>)
   80cd8:	4628      	mov	r0, r5
   80cda:	a903      	add	r1, sp, #12
   80cdc:	47a0      	blx	r4
   80cde:	2800      	cmp	r0, #0
   80ce0:	d1fa      	bne.n	80cd8 <twi_navSendCmd+0x2c>
   80ce2:	e004      	b.n	80cee <twi_navSendCmd+0x42>
	//delay_ms(10);
	//puts("Write to slave done");
	return 1;
	} else {
		puts("error on write to slave");
   80ce4:	4806      	ldr	r0, [pc, #24]	; (80d00 <twi_navSendCmd+0x54>)
   80ce6:	4b07      	ldr	r3, [pc, #28]	; (80d04 <twi_navSendCmd+0x58>)
   80ce8:	4798      	blx	r3
		return 0;
   80cea:	2000      	movs	r0, #0
   80cec:	e000      	b.n	80cf0 <twi_navSendCmd+0x44>
	if (twi_probe(TWI_PORT, SLAVE_ADDR_NAV) == TWI_SUCCESS) {
	//puts("Write to slave");
	while (twi_master_write(TWI_PORT, &packet) != TWI_SUCCESS);
	//delay_ms(10);
	//puts("Write to slave done");
	return 1;
   80cee:	2001      	movs	r0, #1
	} else {
		puts("error on write to slave");
		return 0;
	}
}
   80cf0:	b009      	add	sp, #36	; 0x24
   80cf2:	bd30      	pop	{r4, r5, pc}
   80cf4:	40090000 	.word	0x40090000
   80cf8:	00080341 	.word	0x00080341
   80cfc:	000802a1 	.word	0x000802a1
   80d00:	000868ac 	.word	0x000868ac
   80d04:	00083ee9 	.word	0x00083ee9

00080d08 <twi_navRead>:

//get nav info
void twi_navRead(uint8_t *readedData) {
   80d08:	b530      	push	{r4, r5, lr}
   80d0a:	b087      	sub	sp, #28
	//package recived
	twi_package_t pkt_rcv = {
   80d0c:	2300      	movs	r3, #0
   80d0e:	9301      	str	r3, [sp, #4]
   80d10:	9302      	str	r3, [sp, #8]
   80d12:	9305      	str	r3, [sp, #20]
   80d14:	9003      	str	r0, [sp, #12]
   80d16:	2305      	movs	r3, #5
   80d18:	9304      	str	r3, [sp, #16]
   80d1a:	2303      	movs	r3, #3
   80d1c:	f88d 3014 	strb.w	r3, [sp, #20]
	};

//TODO FIX TWI0 TO TWI_PORT

/*	if (twi_probe(TWI_PORT, SLAVE_ADDR_NAV) == TWI_SUCCESS) {*/
	while (twi_master_read(TWI_PORT, &pkt_rcv) != TWI_SUCCESS);
   80d20:	4d04      	ldr	r5, [pc, #16]	; (80d34 <twi_navRead+0x2c>)
   80d22:	4c05      	ldr	r4, [pc, #20]	; (80d38 <twi_navRead+0x30>)
   80d24:	4628      	mov	r0, r5
   80d26:	a901      	add	r1, sp, #4
   80d28:	47a0      	blx	r4
   80d2a:	2800      	cmp	r0, #0
   80d2c:	d1fa      	bne.n	80d24 <twi_navRead+0x1c>
	//return 1 success and recv has gotten the twi data.
	//return 1;
// 	} else {
// 		puts("Error on NAV READ");
// 	}
}
   80d2e:	b007      	add	sp, #28
   80d30:	bd30      	pop	{r4, r5, pc}
   80d32:	bf00      	nop
   80d34:	40090000 	.word	0x40090000
   80d38:	000801cd 	.word	0x000801cd

00080d3c <buildObject>:
	buildObject(dataGoal, ptr_boxgoal);

}
//build object with cords
//from uint8 to int16
void buildObject(uint8_t data[5], objectinfo_t *ptr_object) {	
   80d3c:	b410      	push	{r4}
	int16_t x = (data[1] << 8) | (data[2] << 0);
	int16_t y = (data[3] << 8) | (data[4] << 0);
   80d3e:	78c2      	ldrb	r2, [r0, #3]
   80d40:	7903      	ldrb	r3, [r0, #4]
   80d42:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

}
//build object with cords
//from uint8 to int16
void buildObject(uint8_t data[5], objectinfo_t *ptr_object) {	
	int16_t x = (data[1] << 8) | (data[2] << 0);
   80d46:	7844      	ldrb	r4, [r0, #1]
   80d48:	7882      	ldrb	r2, [r0, #2]
   80d4a:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
	int16_t y = (data[3] << 8) | (data[4] << 0);
	ptr_object->xpos = x;
   80d4e:	804a      	strh	r2, [r1, #2]
	ptr_object->ypos = y;
   80d50:	808b      	strh	r3, [r1, #4]

}
   80d52:	f85d 4b04 	ldr.w	r4, [sp], #4
   80d56:	4770      	bx	lr

00080d58 <twi_navGetSockPos>:
// 		puts("Error on NAV READ");
// 	}
}

uint8_t twi_navGetSockPos(objectinfo_t *ptr_sock)
{
   80d58:	b530      	push	{r4, r5, lr}
   80d5a:	b083      	sub	sp, #12
   80d5c:	4605      	mov	r5, r0
	TwiCmdNav cmdSock = SOCKETXY;
	uint8_t dataSock[5] = {0};
   80d5e:	2300      	movs	r3, #0
   80d60:	9300      	str	r3, [sp, #0]
   80d62:	f88d 3004 	strb.w	r3, [sp, #4]
	if(twi_navSendCmd(cmdSock))
   80d66:	2052      	movs	r0, #82	; 0x52
   80d68:	4b0c      	ldr	r3, [pc, #48]	; (80d9c <twi_navGetSockPos+0x44>)
   80d6a:	4798      	blx	r3
   80d6c:	4604      	mov	r4, r0
   80d6e:	b158      	cbz	r0, 80d88 <twi_navGetSockPos+0x30>
	{
		twi_navRead(dataSock);
   80d70:	4668      	mov	r0, sp
   80d72:	4b0b      	ldr	r3, [pc, #44]	; (80da0 <twi_navGetSockPos+0x48>)
   80d74:	4798      	blx	r3
// 	for (int i =0; i<5; i++)
// 	{
// 		printf("%i = %x",i,dataSock[i]);
// 	}
// 	puts("end of SOCK DATA");
	vTaskDelay(pdMSTOTICKS(40));
   80d76:	2028      	movs	r0, #40	; 0x28
   80d78:	4b0a      	ldr	r3, [pc, #40]	; (80da4 <twi_navGetSockPos+0x4c>)
   80d7a:	4798      	blx	r3
	buildObject(dataSock, ptr_sock);
   80d7c:	4668      	mov	r0, sp
   80d7e:	4629      	mov	r1, r5
   80d80:	4b09      	ldr	r3, [pc, #36]	; (80da8 <twi_navGetSockPos+0x50>)
   80d82:	4798      	blx	r3
	return 1;
   80d84:	2401      	movs	r4, #1
   80d86:	e005      	b.n	80d94 <twi_navGetSockPos+0x3c>
	if(twi_navSendCmd(cmdSock))
	{
		twi_navRead(dataSock);
	}
	else{
		delay_ms(20);
   80d88:	4808      	ldr	r0, [pc, #32]	; (80dac <twi_navGetSockPos+0x54>)
   80d8a:	4b09      	ldr	r3, [pc, #36]	; (80db0 <twi_navGetSockPos+0x58>)
   80d8c:	4798      	blx	r3
		puts("NAV FAILed");
   80d8e:	4809      	ldr	r0, [pc, #36]	; (80db4 <twi_navGetSockPos+0x5c>)
   80d90:	4b09      	ldr	r3, [pc, #36]	; (80db8 <twi_navGetSockPos+0x60>)
   80d92:	4798      	blx	r3
// 	}
// 	puts("end of SOCK DATA");
	vTaskDelay(pdMSTOTICKS(40));
	buildObject(dataSock, ptr_sock);
	return 1;
}
   80d94:	4620      	mov	r0, r4
   80d96:	b003      	add	sp, #12
   80d98:	bd30      	pop	{r4, r5, pc}
   80d9a:	bf00      	nop
   80d9c:	00080cad 	.word	0x00080cad
   80da0:	00080d09 	.word	0x00080d09
   80da4:	00081f95 	.word	0x00081f95
   80da8:	00080d3d 	.word	0x00080d3d
   80dac:	0001d4c0 	.word	0x0001d4c0
   80db0:	20070001 	.word	0x20070001
   80db4:	000868e4 	.word	0x000868e4
   80db8:	00083ee9 	.word	0x00083ee9

00080dbc <twi_navGetSquarePos>:

uint8_t twi_navGetSquarePos(objectinfo_t *ptr_obj)
{
   80dbc:	b510      	push	{r4, lr}
   80dbe:	b082      	sub	sp, #8
   80dc0:	4604      	mov	r4, r0
	TwiCmdNav cmd = SQUAREXY;
	uint8_t data[5] = {0};
   80dc2:	2300      	movs	r3, #0
   80dc4:	9300      	str	r3, [sp, #0]
   80dc6:	f88d 3004 	strb.w	r3, [sp, #4]
	if(twi_navSendCmd(cmd))
   80dca:	2053      	movs	r0, #83	; 0x53
   80dcc:	4b0b      	ldr	r3, [pc, #44]	; (80dfc <twi_navGetSquarePos+0x40>)
   80dce:	4798      	blx	r3
   80dd0:	b150      	cbz	r0, 80de8 <twi_navGetSquarePos+0x2c>
	{
		twi_navRead(data);
   80dd2:	4668      	mov	r0, sp
   80dd4:	4b0a      	ldr	r3, [pc, #40]	; (80e00 <twi_navGetSquarePos+0x44>)
   80dd6:	4798      	blx	r3
// 	for (int i =0; i<5; i++)
// 	{
// 		printf("%i = %x",i,data[i]);
// 	}
// 	puts("end of SOCK DATA");
	vTaskDelay(pdMSTOTICKS(40));
   80dd8:	2028      	movs	r0, #40	; 0x28
   80dda:	4b0a      	ldr	r3, [pc, #40]	; (80e04 <twi_navGetSquarePos+0x48>)
   80ddc:	4798      	blx	r3
	buildObject(data, ptr_obj);
   80dde:	4668      	mov	r0, sp
   80de0:	4621      	mov	r1, r4
   80de2:	4b09      	ldr	r3, [pc, #36]	; (80e08 <twi_navGetSquarePos+0x4c>)
   80de4:	4798      	blx	r3
   80de6:	e006      	b.n	80df6 <twi_navGetSquarePos+0x3a>
	if(twi_navSendCmd(cmd))
	{
		twi_navRead(data);
	}
	else{
		delay_ms(20);
   80de8:	4808      	ldr	r0, [pc, #32]	; (80e0c <twi_navGetSquarePos+0x50>)
   80dea:	4b09      	ldr	r3, [pc, #36]	; (80e10 <twi_navGetSquarePos+0x54>)
   80dec:	4798      	blx	r3
		puts("NAV FAILed");
   80dee:	4809      	ldr	r0, [pc, #36]	; (80e14 <twi_navGetSquarePos+0x58>)
   80df0:	4b09      	ldr	r3, [pc, #36]	; (80e18 <twi_navGetSquarePos+0x5c>)
   80df2:	4798      	blx	r3
		return 0;
   80df4:	2000      	movs	r0, #0
// 		printf("%i = %x",i,data[i]);
// 	}
// 	puts("end of SOCK DATA");
	vTaskDelay(pdMSTOTICKS(40));
	buildObject(data, ptr_obj);
}
   80df6:	b002      	add	sp, #8
   80df8:	bd10      	pop	{r4, pc}
   80dfa:	bf00      	nop
   80dfc:	00080cad 	.word	0x00080cad
   80e00:	00080d09 	.word	0x00080d09
   80e04:	00081f95 	.word	0x00081f95
   80e08:	00080d3d 	.word	0x00080d3d
   80e0c:	0001d4c0 	.word	0x0001d4c0
   80e10:	20070001 	.word	0x20070001
   80e14:	000868e4 	.word	0x000868e4
   80e18:	00083ee9 	.word	0x00083ee9

00080e1c <twi_navGetGlassPos>:
uint8_t twi_navGetGlassPos(objectinfo_t *ptr_obj)
{
   80e1c:	b510      	push	{r4, lr}
   80e1e:	b082      	sub	sp, #8
   80e20:	4604      	mov	r4, r0
		TwiCmdNav cmd = GLASSXY;
		uint8_t data[5] = {0};
   80e22:	2300      	movs	r3, #0
   80e24:	9300      	str	r3, [sp, #0]
   80e26:	f88d 3004 	strb.w	r3, [sp, #4]
		if(twi_navSendCmd(cmd))
   80e2a:	2054      	movs	r0, #84	; 0x54
   80e2c:	4b0b      	ldr	r3, [pc, #44]	; (80e5c <twi_navGetGlassPos+0x40>)
   80e2e:	4798      	blx	r3
   80e30:	b150      	cbz	r0, 80e48 <twi_navGetGlassPos+0x2c>
		{
			twi_navRead(data);
   80e32:	4668      	mov	r0, sp
   80e34:	4b0a      	ldr	r3, [pc, #40]	; (80e60 <twi_navGetGlassPos+0x44>)
   80e36:	4798      	blx	r3
// 		for (int i =0; i<5; i++)
// 		{
// 			printf("%i = %x",i,data[i]);
// 		}
// 		puts("end of SOCK DATA");
		vTaskDelay(pdMSTOTICKS(40));
   80e38:	2028      	movs	r0, #40	; 0x28
   80e3a:	4b0a      	ldr	r3, [pc, #40]	; (80e64 <twi_navGetGlassPos+0x48>)
   80e3c:	4798      	blx	r3
		buildObject(data, ptr_obj);
   80e3e:	4668      	mov	r0, sp
   80e40:	4621      	mov	r1, r4
   80e42:	4b09      	ldr	r3, [pc, #36]	; (80e68 <twi_navGetGlassPos+0x4c>)
   80e44:	4798      	blx	r3
   80e46:	e006      	b.n	80e56 <twi_navGetGlassPos+0x3a>
		if(twi_navSendCmd(cmd))
		{
			twi_navRead(data);
		}
		else{
			delay_ms(20);
   80e48:	4808      	ldr	r0, [pc, #32]	; (80e6c <twi_navGetGlassPos+0x50>)
   80e4a:	4b09      	ldr	r3, [pc, #36]	; (80e70 <twi_navGetGlassPos+0x54>)
   80e4c:	4798      	blx	r3
			puts("NAV FAILed");
   80e4e:	4809      	ldr	r0, [pc, #36]	; (80e74 <twi_navGetGlassPos+0x58>)
   80e50:	4b09      	ldr	r3, [pc, #36]	; (80e78 <twi_navGetGlassPos+0x5c>)
   80e52:	4798      	blx	r3
			return 0;
   80e54:	2000      	movs	r0, #0
// 		}
// 		puts("end of SOCK DATA");
		vTaskDelay(pdMSTOTICKS(40));
		buildObject(data, ptr_obj);
	
}
   80e56:	b002      	add	sp, #8
   80e58:	bd10      	pop	{r4, pc}
   80e5a:	bf00      	nop
   80e5c:	00080cad 	.word	0x00080cad
   80e60:	00080d09 	.word	0x00080d09
   80e64:	00081f95 	.word	0x00081f95
   80e68:	00080d3d 	.word	0x00080d3d
   80e6c:	0001d4c0 	.word	0x0001d4c0
   80e70:	20070001 	.word	0x20070001
   80e74:	000868e4 	.word	0x000868e4
   80e78:	00083ee9 	.word	0x00083ee9

00080e7c <twi_navGetBoxPos>:
uint8_t twi_navGetBoxPos(objectinfo_t *ptr_obj)
{
   80e7c:	b510      	push	{r4, lr}
   80e7e:	b082      	sub	sp, #8
   80e80:	4604      	mov	r4, r0
			TwiCmdNav cmd = GLASSXY;
			uint8_t data[5] = {0};
   80e82:	2300      	movs	r3, #0
   80e84:	9300      	str	r3, [sp, #0]
   80e86:	f88d 3004 	strb.w	r3, [sp, #4]
			if(twi_navSendCmd(cmd))
   80e8a:	2054      	movs	r0, #84	; 0x54
   80e8c:	4b0b      	ldr	r3, [pc, #44]	; (80ebc <twi_navGetBoxPos+0x40>)
   80e8e:	4798      	blx	r3
   80e90:	b150      	cbz	r0, 80ea8 <twi_navGetBoxPos+0x2c>
			{
				twi_navRead(data);
   80e92:	4668      	mov	r0, sp
   80e94:	4b0a      	ldr	r3, [pc, #40]	; (80ec0 <twi_navGetBoxPos+0x44>)
   80e96:	4798      	blx	r3
// 			for (int i =0; i<5; i++)
// 			{
// 				printf("%i = %x",i,data[i]);
// 			}
// 			puts("end of SOCK DATA");
			vTaskDelay(pdMSTOTICKS(40));
   80e98:	2028      	movs	r0, #40	; 0x28
   80e9a:	4b0a      	ldr	r3, [pc, #40]	; (80ec4 <twi_navGetBoxPos+0x48>)
   80e9c:	4798      	blx	r3
			buildObject(data, ptr_obj);
   80e9e:	4668      	mov	r0, sp
   80ea0:	4621      	mov	r1, r4
   80ea2:	4b09      	ldr	r3, [pc, #36]	; (80ec8 <twi_navGetBoxPos+0x4c>)
   80ea4:	4798      	blx	r3
   80ea6:	e006      	b.n	80eb6 <twi_navGetBoxPos+0x3a>
			if(twi_navSendCmd(cmd))
			{
				twi_navRead(data);
			}
			else{
				delay_ms(20);
   80ea8:	4808      	ldr	r0, [pc, #32]	; (80ecc <twi_navGetBoxPos+0x50>)
   80eaa:	4b09      	ldr	r3, [pc, #36]	; (80ed0 <twi_navGetBoxPos+0x54>)
   80eac:	4798      	blx	r3
				puts("NAV FAILed");
   80eae:	4809      	ldr	r0, [pc, #36]	; (80ed4 <twi_navGetBoxPos+0x58>)
   80eb0:	4b09      	ldr	r3, [pc, #36]	; (80ed8 <twi_navGetBoxPos+0x5c>)
   80eb2:	4798      	blx	r3
				return 0;
   80eb4:	2000      	movs	r0, #0
// 				printf("%i = %x",i,data[i]);
// 			}
// 			puts("end of SOCK DATA");
			vTaskDelay(pdMSTOTICKS(40));
			buildObject(data, ptr_obj);
}
   80eb6:	b002      	add	sp, #8
   80eb8:	bd10      	pop	{r4, pc}
   80eba:	bf00      	nop
   80ebc:	00080cad 	.word	0x00080cad
   80ec0:	00080d09 	.word	0x00080d09
   80ec4:	00081f95 	.word	0x00081f95
   80ec8:	00080d3d 	.word	0x00080d3d
   80ecc:	0001d4c0 	.word	0x0001d4c0
   80ed0:	20070001 	.word	0x20070001
   80ed4:	000868e4 	.word	0x000868e4
   80ed8:	00083ee9 	.word	0x00083ee9

00080edc <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   80edc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80ee0:	460c      	mov	r4, r1
   80ee2:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
   80ee4:	b960      	cbnz	r0, 80f00 <_read+0x24>
		return -1;
	}

	for (; len > 0; --len) {
   80ee6:	2a00      	cmp	r2, #0
   80ee8:	dd0e      	ble.n	80f08 <_read+0x2c>
   80eea:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   80eec:	4e09      	ldr	r6, [pc, #36]	; (80f14 <_read+0x38>)
   80eee:	4d0a      	ldr	r5, [pc, #40]	; (80f18 <_read+0x3c>)
   80ef0:	6830      	ldr	r0, [r6, #0]
   80ef2:	4621      	mov	r1, r4
   80ef4:	682b      	ldr	r3, [r5, #0]
   80ef6:	4798      	blx	r3
		ptr++;
   80ef8:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   80efa:	42bc      	cmp	r4, r7
   80efc:	d1f8      	bne.n	80ef0 <_read+0x14>
   80efe:	e006      	b.n	80f0e <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
   80f00:	f04f 30ff 	mov.w	r0, #4294967295
   80f04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len > 0; --len) {
   80f08:	2000      	movs	r0, #0
   80f0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
   80f0e:	4640      	mov	r0, r8
	}
	return nChars;
}
   80f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80f14:	2007ae34 	.word	0x2007ae34
   80f18:	2007ae2c 	.word	0x2007ae2c

00080f1c <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   80f1c:	6943      	ldr	r3, [r0, #20]
   80f1e:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   80f22:	bf1d      	ittte	ne
   80f24:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   80f28:	61c1      	strne	r1, [r0, #28]
	return 0;
   80f2a:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
   80f2c:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
   80f2e:	4770      	bx	lr

00080f30 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   80f30:	6943      	ldr	r3, [r0, #20]
   80f32:	f013 0f01 	tst.w	r3, #1
   80f36:	d005      	beq.n	80f44 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   80f38:	6983      	ldr	r3, [r0, #24]
   80f3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   80f3e:	600b      	str	r3, [r1, #0]

	return 0;
   80f40:	2000      	movs	r0, #0
   80f42:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   80f44:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   80f46:	4770      	bx	lr

00080f48 <USART0_Handler>:
#if SAMD || SAMR21 || SAML21
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
   80f48:	b500      	push	{lr}
   80f4a:	b083      	sub	sp, #12
	uint8_t temp;
#if SAMD || SAMR21 || SAML21
	usart_serial_read_packet(&host_uart_module, &temp, 1);
#else
	usart_serial_read_packet(USART_HOST, &temp, 1);
   80f4c:	4811      	ldr	r0, [pc, #68]	; (80f94 <USART0_Handler+0x4c>)
   80f4e:	f10d 0107 	add.w	r1, sp, #7
   80f52:	2201      	movs	r2, #1
   80f54:	4b10      	ldr	r3, [pc, #64]	; (80f98 <USART0_Handler+0x50>)
   80f56:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   80f58:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   80f5a:	f3bf 8f5f 	dmb	sy
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
   80f5e:	2200      	movs	r2, #0
   80f60:	4b0e      	ldr	r3, [pc, #56]	; (80f9c <USART0_Handler+0x54>)
   80f62:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
   80f64:	4b0e      	ldr	r3, [pc, #56]	; (80fa0 <USART0_Handler+0x58>)
   80f66:	781b      	ldrb	r3, [r3, #0]
   80f68:	f89d 1007 	ldrb.w	r1, [sp, #7]
   80f6c:	4a0d      	ldr	r2, [pc, #52]	; (80fa4 <USART0_Handler+0x5c>)
   80f6e:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
   80f70:	2b9b      	cmp	r3, #155	; 0x9b
   80f72:	d103      	bne.n	80f7c <USART0_Handler+0x34>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
   80f74:	2200      	movs	r2, #0
   80f76:	4b0a      	ldr	r3, [pc, #40]	; (80fa0 <USART0_Handler+0x58>)
   80f78:	701a      	strb	r2, [r3, #0]
   80f7a:	e002      	b.n	80f82 <USART0_Handler+0x3a>
	} else {
		serial_rx_buf_tail++;
   80f7c:	3301      	adds	r3, #1
   80f7e:	4a08      	ldr	r2, [pc, #32]	; (80fa0 <USART0_Handler+0x58>)
   80f80:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
   80f82:	2201      	movs	r2, #1
   80f84:	4b05      	ldr	r3, [pc, #20]	; (80f9c <USART0_Handler+0x54>)
   80f86:	701a      	strb	r2, [r3, #0]
   80f88:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   80f8c:	b662      	cpsie	i
}
   80f8e:	b003      	add	sp, #12
   80f90:	f85d fb04 	ldr.w	pc, [sp], #4
   80f94:	40098000 	.word	0x40098000
   80f98:	00080ffd 	.word	0x00080ffd
   80f9c:	20070214 	.word	0x20070214
   80fa0:	20070b58 	.word	0x20070b58
   80fa4:	20070abc 	.word	0x20070abc

00080fa8 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   80fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80fac:	460e      	mov	r6, r1
   80fae:	4615      	mov	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   80fb0:	3801      	subs	r0, #1
   80fb2:	2802      	cmp	r0, #2
   80fb4:	d80f      	bhi.n	80fd6 <_write+0x2e>
		return -1;
	}

	for (; len != 0; --len) {
   80fb6:	b192      	cbz	r2, 80fde <_write+0x36>
   80fb8:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
   80fba:	f8df 803c 	ldr.w	r8, [pc, #60]	; 80ff8 <_write+0x50>
   80fbe:	4f0d      	ldr	r7, [pc, #52]	; (80ff4 <_write+0x4c>)
   80fc0:	f8d8 0000 	ldr.w	r0, [r8]
   80fc4:	5d31      	ldrb	r1, [r6, r4]
   80fc6:	683b      	ldr	r3, [r7, #0]
   80fc8:	4798      	blx	r3
   80fca:	2800      	cmp	r0, #0
   80fcc:	db0a      	blt.n	80fe4 <_write+0x3c>
			return -1;
		}
		++nChars;
   80fce:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   80fd0:	42a5      	cmp	r5, r4
   80fd2:	d1f5      	bne.n	80fc0 <_write+0x18>
   80fd4:	e00a      	b.n	80fec <_write+0x44>
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
   80fd6:	f04f 30ff 	mov.w	r0, #4294967295
   80fda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len != 0; --len) {
   80fde:	2000      	movs	r0, #0
   80fe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
   80fe4:	f04f 30ff 	mov.w	r0, #4294967295
   80fe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		++nChars;
   80fec:	4620      	mov	r0, r4
	}
	return nChars;
}
   80fee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80ff2:	bf00      	nop
   80ff4:	2007ae30 	.word	0x2007ae30
   80ff8:	2007ae34 	.word	0x2007ae34

00080ffc <usart_serial_read_packet>:
 * \param len    Length of data
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
   80ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81000:	b083      	sub	sp, #12
   81002:	4605      	mov	r5, r0
	while (len) {
   81004:	4690      	mov	r8, r2
   81006:	2a00      	cmp	r2, #0
   81008:	d047      	beq.n	8109a <usart_serial_read_packet+0x9e>
   8100a:	1c4e      	adds	r6, r1, #1
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   8100c:	4f25      	ldr	r7, [pc, #148]	; (810a4 <usart_serial_read_packet+0xa8>)
		while (usart_read(p_usart, &val));
   8100e:	4c26      	ldr	r4, [pc, #152]	; (810a8 <usart_serial_read_packet+0xac>)
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   81010:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 810bc <usart_serial_read_packet+0xc0>
	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
   81014:	f8df b094 	ldr.w	fp, [pc, #148]	; 810ac <usart_serial_read_packet+0xb0>
   81018:	f106 39ff 	add.w	r9, r6, #4294967295
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
	uint32_t val = 0;
   8101c:	2300      	movs	r3, #0
   8101e:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   81020:	4b22      	ldr	r3, [pc, #136]	; (810ac <usart_serial_read_packet+0xb0>)
   81022:	429d      	cmp	r5, r3
   81024:	d106      	bne.n	81034 <usart_serial_read_packet+0x38>
		while (uart_read((Uart*)p_usart, data));
   81026:	4658      	mov	r0, fp
   81028:	4649      	mov	r1, r9
   8102a:	4b21      	ldr	r3, [pc, #132]	; (810b0 <usart_serial_read_packet+0xb4>)
   8102c:	4798      	blx	r3
   8102e:	2800      	cmp	r0, #0
   81030:	d1f9      	bne.n	81026 <usart_serial_read_packet+0x2a>
   81032:	e019      	b.n	81068 <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   81034:	4b1f      	ldr	r3, [pc, #124]	; (810b4 <usart_serial_read_packet+0xb8>)
   81036:	429d      	cmp	r5, r3
   81038:	d109      	bne.n	8104e <usart_serial_read_packet+0x52>
		while (usart_read(p_usart, &val));
   8103a:	4699      	mov	r9, r3
   8103c:	4648      	mov	r0, r9
   8103e:	a901      	add	r1, sp, #4
   81040:	47a0      	blx	r4
   81042:	2800      	cmp	r0, #0
   81044:	d1fa      	bne.n	8103c <usart_serial_read_packet+0x40>
		*data = (uint8_t)(val & 0xFF);
   81046:	9b01      	ldr	r3, [sp, #4]
   81048:	f806 3c01 	strb.w	r3, [r6, #-1]
   8104c:	e017      	b.n	8107e <usart_serial_read_packet+0x82>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   8104e:	4b1a      	ldr	r3, [pc, #104]	; (810b8 <usart_serial_read_packet+0xbc>)
   81050:	429d      	cmp	r5, r3
   81052:	d109      	bne.n	81068 <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
   81054:	4699      	mov	r9, r3
   81056:	4648      	mov	r0, r9
   81058:	a901      	add	r1, sp, #4
   8105a:	47a0      	blx	r4
   8105c:	2800      	cmp	r0, #0
   8105e:	d1fa      	bne.n	81056 <usart_serial_read_packet+0x5a>
		*data = (uint8_t)(val & 0xFF);
   81060:	9b01      	ldr	r3, [sp, #4]
   81062:	f806 3c01 	strb.w	r3, [r6, #-1]
   81066:	e014      	b.n	81092 <usart_serial_read_packet+0x96>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   81068:	4555      	cmp	r5, sl
   8106a:	d108      	bne.n	8107e <usart_serial_read_packet+0x82>
		while (usart_read(p_usart, &val));
   8106c:	4650      	mov	r0, sl
   8106e:	a901      	add	r1, sp, #4
   81070:	47a0      	blx	r4
   81072:	2800      	cmp	r0, #0
   81074:	d1fa      	bne.n	8106c <usart_serial_read_packet+0x70>
		*data = (uint8_t)(val & 0xFF);
   81076:	9b01      	ldr	r3, [sp, #4]
   81078:	f806 3c01 	strb.w	r3, [r6, #-1]
   8107c:	e009      	b.n	81092 <usart_serial_read_packet+0x96>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   8107e:	42bd      	cmp	r5, r7
   81080:	d107      	bne.n	81092 <usart_serial_read_packet+0x96>
		while (usart_read(p_usart, &val));
   81082:	4638      	mov	r0, r7
   81084:	a901      	add	r1, sp, #4
   81086:	47a0      	blx	r4
   81088:	2800      	cmp	r0, #0
   8108a:	d1fa      	bne.n	81082 <usart_serial_read_packet+0x86>
		*data = (uint8_t)(val & 0xFF);
   8108c:	9b01      	ldr	r3, [sp, #4]
   8108e:	f806 3c01 	strb.w	r3, [r6, #-1]
   81092:	3601      	adds	r6, #1
   81094:	f1b8 0801 	subs.w	r8, r8, #1
   81098:	d1be      	bne.n	81018 <usart_serial_read_packet+0x1c>
		usart_serial_getchar(usart, data);
		len--;
		data++;
	}
	return STATUS_OK;
}
   8109a:	2000      	movs	r0, #0
   8109c:	b003      	add	sp, #12
   8109e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   810a2:	bf00      	nop
   810a4:	400a4000 	.word	0x400a4000
   810a8:	00080f31 	.word	0x00080f31
   810ac:	400e0800 	.word	0x400e0800
   810b0:	0008113d 	.word	0x0008113d
   810b4:	40098000 	.word	0x40098000
   810b8:	4009c000 	.word	0x4009c000
   810bc:	400a0000 	.word	0x400a0000

000810c0 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
   810c0:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   810c2:	0189      	lsls	r1, r1, #6
   810c4:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   810c6:	2402      	movs	r4, #2
   810c8:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   810ca:	f04f 31ff 	mov.w	r1, #4294967295
   810ce:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   810d0:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   810d2:	605a      	str	r2, [r3, #4]
}
   810d4:	f85d 4b04 	ldr.w	r4, [sp], #4
   810d8:	4770      	bx	lr
   810da:	bf00      	nop

000810dc <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   810dc:	0189      	lsls	r1, r1, #6
   810de:	2305      	movs	r3, #5
   810e0:	5043      	str	r3, [r0, r1]
   810e2:	4770      	bx	lr

000810e4 <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   810e4:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
   810e8:	624a      	str	r2, [r1, #36]	; 0x24
   810ea:	4770      	bx	lr

000810ec <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   810ec:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
   810f0:	6a08      	ldr	r0, [r1, #32]
}
   810f2:	4770      	bx	lr

000810f4 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   810f4:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   810f6:	23ac      	movs	r3, #172	; 0xac
   810f8:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   810fa:	680a      	ldr	r2, [r1, #0]
   810fc:	684b      	ldr	r3, [r1, #4]
   810fe:	fbb2 f3f3 	udiv	r3, r2, r3
   81102:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   81104:	1e5c      	subs	r4, r3, #1
   81106:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   8110a:	4294      	cmp	r4, r2
   8110c:	d80a      	bhi.n	81124 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
   8110e:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   81110:	688b      	ldr	r3, [r1, #8]
   81112:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   81114:	f240 2302 	movw	r3, #514	; 0x202
   81118:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   8111c:	2350      	movs	r3, #80	; 0x50
   8111e:	6003      	str	r3, [r0, #0]

	return 0;
   81120:	2000      	movs	r0, #0
   81122:	e000      	b.n	81126 <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
   81124:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
   81126:	f85d 4b04 	ldr.w	r4, [sp], #4
   8112a:	4770      	bx	lr

0008112c <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   8112c:	6943      	ldr	r3, [r0, #20]
   8112e:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   81132:	bf1a      	itte	ne
   81134:	61c1      	strne	r1, [r0, #28]
	return 0;
   81136:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
   81138:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
   8113a:	4770      	bx	lr

0008113c <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   8113c:	6943      	ldr	r3, [r0, #20]
   8113e:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   81142:	bf1d      	ittte	ne
   81144:	6983      	ldrne	r3, [r0, #24]
   81146:	700b      	strbne	r3, [r1, #0]
	return 0;
   81148:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
   8114a:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
   8114c:	4770      	bx	lr
   8114e:	bf00      	nop

00081150 <vListInitialise>:
void vListInitialise( xList *pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
   81150:	f100 0308 	add.w	r3, r0, #8
   81154:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   81156:	f04f 32ff 	mov.w	r2, #4294967295
   8115a:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
   8115c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
   8115e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
   81160:	2300      	movs	r3, #0
   81162:	6003      	str	r3, [r0, #0]
   81164:	4770      	bx	lr
   81166:	bf00      	nop

00081168 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   81168:	2300      	movs	r3, #0
   8116a:	6103      	str	r3, [r0, #16]
   8116c:	4770      	bx	lr
   8116e:	bf00      	nop

00081170 <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
   81170:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
   81172:	685a      	ldr	r2, [r3, #4]
   81174:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
   81176:	6842      	ldr	r2, [r0, #4]
   81178:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   8117a:	685a      	ldr	r2, [r3, #4]
   8117c:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
   8117e:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
   81180:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   81182:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   81184:	6803      	ldr	r3, [r0, #0]
   81186:	3301      	adds	r3, #1
   81188:	6003      	str	r3, [r0, #0]
   8118a:	4770      	bx	lr

0008118c <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
   8118c:	b410      	push	{r4}
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
   8118e:	680c      	ldr	r4, [r1, #0]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   81190:	f1b4 3fff 	cmp.w	r4, #4294967295
   81194:	d101      	bne.n	8119a <vListInsert+0xe>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   81196:	6903      	ldr	r3, [r0, #16]
   81198:	e00a      	b.n	811b0 <vListInsert+0x24>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
   8119a:	f100 0308 	add.w	r3, r0, #8
   8119e:	68c2      	ldr	r2, [r0, #12]
   811a0:	6812      	ldr	r2, [r2, #0]
   811a2:	4294      	cmp	r4, r2
   811a4:	d304      	bcc.n	811b0 <vListInsert+0x24>
   811a6:	685b      	ldr	r3, [r3, #4]
   811a8:	685a      	ldr	r2, [r3, #4]
   811aa:	6812      	ldr	r2, [r2, #0]
   811ac:	4294      	cmp	r4, r2
   811ae:	d2fa      	bcs.n	811a6 <vListInsert+0x1a>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   811b0:	685a      	ldr	r2, [r3, #4]
   811b2:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   811b4:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
   811b6:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
   811b8:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   811ba:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   811bc:	6803      	ldr	r3, [r0, #0]
   811be:	3301      	adds	r3, #1
   811c0:	6003      	str	r3, [r0, #0]
}
   811c2:	f85d 4b04 	ldr.w	r4, [sp], #4
   811c6:	4770      	bx	lr

000811c8 <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   811c8:	6843      	ldr	r3, [r0, #4]
   811ca:	6882      	ldr	r2, [r0, #8]
   811cc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   811ce:	6883      	ldr	r3, [r0, #8]
   811d0:	6842      	ldr	r2, [r0, #4]
   811d2:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
   811d4:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   811d6:	685a      	ldr	r2, [r3, #4]
   811d8:	4282      	cmp	r2, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   811da:	bf04      	itt	eq
   811dc:	6882      	ldreq	r2, [r0, #8]
   811de:	605a      	streq	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
   811e0:	2200      	movs	r2, #0
   811e2:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
   811e4:	681a      	ldr	r2, [r3, #0]
   811e6:	3a01      	subs	r2, #1
   811e8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   811ea:	6818      	ldr	r0, [r3, #0]
}
   811ec:	4770      	bx	lr
   811ee:	bf00      	nop

000811f0 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
   811f0:	4803      	ldr	r0, [pc, #12]	; (81200 <prvPortStartFirstTask+0x10>)
   811f2:	6800      	ldr	r0, [r0, #0]
   811f4:	6800      	ldr	r0, [r0, #0]
   811f6:	f380 8808 	msr	MSP, r0
   811fa:	b662      	cpsie	i
   811fc:	df00      	svc	0
   811fe:	bf00      	nop
   81200:	e000ed08 	.word	0xe000ed08

00081204 <pxPortInitialiseStack>:
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   81204:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   81208:	f840 3c04 	str.w	r3, [r0, #-4]
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
   8120c:	f840 1c08 	str.w	r1, [r0, #-8]
	pxTopOfStack--;
	*pxTopOfStack = 0;	/* LR */
   81210:	2300      	movs	r3, #0
   81212:	f840 3c0c 	str.w	r3, [r0, #-12]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
   81216:	f840 2c20 	str.w	r2, [r0, #-32]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
   8121a:	3840      	subs	r0, #64	; 0x40
   8121c:	4770      	bx	lr
   8121e:	bf00      	nop

00081220 <SVC_Handler>:
/*-----------------------------------------------------------*/

__attribute__ (( naked )) void SVC_Handler( void )
{
	__asm volatile (
   81220:	4b06      	ldr	r3, [pc, #24]	; (8123c <pxCurrentTCBConst2>)
   81222:	6819      	ldr	r1, [r3, #0]
   81224:	6808      	ldr	r0, [r1, #0]
   81226:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8122a:	f380 8809 	msr	PSP, r0
   8122e:	f04f 0000 	mov.w	r0, #0
   81232:	f380 8811 	msr	BASEPRI, r0
   81236:	f04e 0e0d 	orr.w	lr, lr, #13
   8123a:	4770      	bx	lr

0008123c <pxCurrentTCBConst2>:
   8123c:	2007ac24 	.word	0x2007ac24

00081240 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   81240:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   81244:	4b01      	ldr	r3, [pc, #4]	; (8124c <vPortYieldFromISR+0xc>)
   81246:	601a      	str	r2, [r3, #0]
   81248:	4770      	bx	lr
   8124a:	bf00      	nop
   8124c:	e000ed04 	.word	0xe000ed04

00081250 <ulPortSetInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
   81250:	f3ef 8011 	mrs	r0, BASEPRI
   81254:	f04f 01a0 	mov.w	r1, #160	; 0xa0
   81258:	f381 8811 	msr	BASEPRI, r1
   8125c:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
}
   8125e:	2000      	movs	r0, #0

00081260 <vPortEnterCritical>:
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   81260:	b508      	push	{r3, lr}
	portDISABLE_INTERRUPTS();
   81262:	4b03      	ldr	r3, [pc, #12]	; (81270 <vPortEnterCritical+0x10>)
   81264:	4798      	blx	r3
	uxCriticalNesting++;
   81266:	4b03      	ldr	r3, [pc, #12]	; (81274 <vPortEnterCritical+0x14>)
   81268:	681a      	ldr	r2, [r3, #0]
   8126a:	3201      	adds	r2, #1
   8126c:	601a      	str	r2, [r3, #0]
   8126e:	bd08      	pop	{r3, pc}
   81270:	00081251 	.word	0x00081251
   81274:	20070208 	.word	0x20070208

00081278 <vPortClearInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
   81278:	f380 8811 	msr	BASEPRI, r0
   8127c:	4770      	bx	lr
   8127e:	bf00      	nop

00081280 <vPortExitCritical>:
	uxCriticalNesting++;
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   81280:	b508      	push	{r3, lr}
	uxCriticalNesting--;
   81282:	4a04      	ldr	r2, [pc, #16]	; (81294 <vPortExitCritical+0x14>)
   81284:	6813      	ldr	r3, [r2, #0]
   81286:	3b01      	subs	r3, #1
   81288:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
   8128a:	b913      	cbnz	r3, 81292 <vPortExitCritical+0x12>
	{
		portENABLE_INTERRUPTS();
   8128c:	2000      	movs	r0, #0
   8128e:	4b02      	ldr	r3, [pc, #8]	; (81298 <vPortExitCritical+0x18>)
   81290:	4798      	blx	r3
   81292:	bd08      	pop	{r3, pc}
   81294:	20070208 	.word	0x20070208
   81298:	00081279 	.word	0x00081279

0008129c <PendSV_Handler>:

__attribute__(( naked )) void PendSV_Handler( void )
{
	/* This is a naked function. */

	__asm volatile
   8129c:	f3ef 8009 	mrs	r0, PSP
   812a0:	4b0c      	ldr	r3, [pc, #48]	; (812d4 <pxCurrentTCBConst>)
   812a2:	681a      	ldr	r2, [r3, #0]
   812a4:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   812a8:	6010      	str	r0, [r2, #0]
   812aa:	e92d 4008 	stmdb	sp!, {r3, lr}
   812ae:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   812b2:	f380 8811 	msr	BASEPRI, r0
   812b6:	f000 fed3 	bl	82060 <vTaskSwitchContext>
   812ba:	f04f 0000 	mov.w	r0, #0
   812be:	f380 8811 	msr	BASEPRI, r0
   812c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   812c6:	6819      	ldr	r1, [r3, #0]
   812c8:	6808      	ldr	r0, [r1, #0]
   812ca:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   812ce:	f380 8809 	msr	PSP, r0
   812d2:	4770      	bx	lr

000812d4 <pxCurrentTCBConst>:
   812d4:	2007ac24 	.word	0x2007ac24

000812d8 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void SysTick_Handler( void )
{
   812d8:	b508      	push	{r3, lr}
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   812da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   812de:	4b05      	ldr	r3, [pc, #20]	; (812f4 <SysTick_Handler+0x1c>)
   812e0:	601a      	str	r2, [r3, #0]
	to generate the tick interrupt. */
	#if configUSE_TICKLESS_IDLE == 1
		portNVIC_SYSTICK_LOAD_REG = ulTimerReloadValueForOneTick;
	#endif

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
   812e2:	4b05      	ldr	r3, [pc, #20]	; (812f8 <SysTick_Handler+0x20>)
   812e4:	4798      	blx	r3
	{
		vTaskIncrementTick();
   812e6:	4b05      	ldr	r3, [pc, #20]	; (812fc <SysTick_Handler+0x24>)
   812e8:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
   812ea:	2000      	movs	r0, #0
   812ec:	4b04      	ldr	r3, [pc, #16]	; (81300 <SysTick_Handler+0x28>)
   812ee:	4798      	blx	r3
   812f0:	bd08      	pop	{r3, pc}
   812f2:	bf00      	nop
   812f4:	e000ed04 	.word	0xe000ed04
   812f8:	00081251 	.word	0x00081251
   812fc:	00081cdd 	.word	0x00081cdd
   81300:	00081279 	.word	0x00081279

00081304 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = 45UL / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;;
   81304:	4a03      	ldr	r2, [pc, #12]	; (81314 <vPortSetupTimerInterrupt+0x10>)
   81306:	4b04      	ldr	r3, [pc, #16]	; (81318 <vPortSetupTimerInterrupt+0x14>)
   81308:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
   8130a:	2207      	movs	r2, #7
   8130c:	3b04      	subs	r3, #4
   8130e:	601a      	str	r2, [r3, #0]
   81310:	4770      	bx	lr
   81312:	bf00      	nop
   81314:	0001481f 	.word	0x0001481f
   81318:	e000e014 	.word	0xe000e014

0008131c <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
   8131c:	b510      	push	{r4, lr}
	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
	See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
   8131e:	4b09      	ldr	r3, [pc, #36]	; (81344 <xPortStartScheduler+0x28>)
   81320:	681a      	ldr	r2, [r3, #0]
   81322:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
   81326:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
   81328:	681a      	ldr	r2, [r3, #0]
   8132a:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
   8132e:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
   81330:	4b05      	ldr	r3, [pc, #20]	; (81348 <xPortStartScheduler+0x2c>)
   81332:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   81334:	2400      	movs	r4, #0
   81336:	4b05      	ldr	r3, [pc, #20]	; (8134c <xPortStartScheduler+0x30>)
   81338:	601c      	str	r4, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
   8133a:	4b05      	ldr	r3, [pc, #20]	; (81350 <xPortStartScheduler+0x34>)
   8133c:	4798      	blx	r3

	/* Should not get here! */
	return 0;
}
   8133e:	4620      	mov	r0, r4
   81340:	bd10      	pop	{r4, pc}
   81342:	bf00      	nop
   81344:	e000ed20 	.word	0xe000ed20
   81348:	00081305 	.word	0x00081305
   8134c:	20070208 	.word	0x20070208
   81350:	000811f1 	.word	0x000811f1

00081354 <prvInsertBlockIntoFreeList>:
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
   81354:	b430      	push	{r4, r5}
xBlockLink *pxIterator;
unsigned char *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
   81356:	4a13      	ldr	r2, [pc, #76]	; (813a4 <prvInsertBlockIntoFreeList+0x50>)
   81358:	6813      	ldr	r3, [r2, #0]
   8135a:	4283      	cmp	r3, r0
   8135c:	d201      	bcs.n	81362 <prvInsertBlockIntoFreeList+0xe>
   8135e:	461a      	mov	r2, r3
   81360:	e7fa      	b.n	81358 <prvInsertBlockIntoFreeList+0x4>
   81362:	4611      	mov	r1, r2
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */	
	puc = ( unsigned char * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
   81364:	6854      	ldr	r4, [r2, #4]
   81366:	1915      	adds	r5, r2, r4
   81368:	4285      	cmp	r5, r0
   8136a:	d103      	bne.n	81374 <prvInsertBlockIntoFreeList+0x20>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
   8136c:	6868      	ldr	r0, [r5, #4]
   8136e:	4404      	add	r4, r0
   81370:	6054      	str	r4, [r2, #4]
   81372:	4610      	mov	r0, r2
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( unsigned char * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
   81374:	6842      	ldr	r2, [r0, #4]
   81376:	1884      	adds	r4, r0, r2
   81378:	42a3      	cmp	r3, r4
   8137a:	d10c      	bne.n	81396 <prvInsertBlockIntoFreeList+0x42>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
   8137c:	4c0a      	ldr	r4, [pc, #40]	; (813a8 <prvInsertBlockIntoFreeList+0x54>)
   8137e:	6824      	ldr	r4, [r4, #0]
   81380:	429c      	cmp	r4, r3
   81382:	d006      	beq.n	81392 <prvInsertBlockIntoFreeList+0x3e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
   81384:	685b      	ldr	r3, [r3, #4]
   81386:	441a      	add	r2, r3
   81388:	6042      	str	r2, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
   8138a:	680b      	ldr	r3, [r1, #0]
   8138c:	681b      	ldr	r3, [r3, #0]
   8138e:	6003      	str	r3, [r0, #0]
   81390:	e002      	b.n	81398 <prvInsertBlockIntoFreeList+0x44>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
   81392:	6003      	str	r3, [r0, #0]
   81394:	e000      	b.n	81398 <prvInsertBlockIntoFreeList+0x44>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;		
   81396:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
   81398:	4281      	cmp	r1, r0
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
   8139a:	bf18      	it	ne
   8139c:	6008      	strne	r0, [r1, #0]
	}
}
   8139e:	bc30      	pop	{r4, r5}
   813a0:	4770      	bx	lr
   813a2:	bf00      	nop
   813a4:	2007ab64 	.word	0x2007ab64
   813a8:	2007ab60 	.word	0x2007ab60

000813ac <pvPortMalloc>:
/* STATIC FUNCTIONS ARE DEFINED AS MACROS TO MINIMIZE THE FUNCTION CALL DEPTH. */

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   813ac:	b538      	push	{r3, r4, r5, lr}
   813ae:	4604      	mov	r4, r0
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
   813b0:	4b28      	ldr	r3, [pc, #160]	; (81454 <pvPortMalloc+0xa8>)
   813b2:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
   813b4:	4b28      	ldr	r3, [pc, #160]	; (81458 <pvPortMalloc+0xac>)
   813b6:	681b      	ldr	r3, [r3, #0]
   813b8:	b99b      	cbnz	r3, 813e2 <pvPortMalloc+0x36>
	/* Ensure the start of the heap is aligned. */
	configASSERT( ( ( ( unsigned long ) xHeap.ucHeap ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;
   813ba:	4a28      	ldr	r2, [pc, #160]	; (8145c <pvPortMalloc+0xb0>)
   813bc:	4b28      	ldr	r3, [pc, #160]	; (81460 <pvPortMalloc+0xb4>)
   813be:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
   813c0:	2100      	movs	r1, #0
   813c2:	6051      	str	r1, [r2, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	pucHeapEnd = xHeap.ucHeap + xTotalHeapSize;
	pucHeapEnd -= heapSTRUCT_SIZE;
	pxEnd = ( void * ) pucHeapEnd;
   813c4:	f649 72f0 	movw	r2, #40944	; 0x9ff0
   813c8:	1898      	adds	r0, r3, r2
   813ca:	4d23      	ldr	r5, [pc, #140]	; (81458 <pvPortMalloc+0xac>)
   813cc:	6028      	str	r0, [r5, #0]
	configASSERT( ( ( ( unsigned long ) pxEnd ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );
	pxEnd->xBlockSize = 0;
   813ce:	f649 75f4 	movw	r5, #40948	; 0x9ff4
   813d2:	5159      	str	r1, [r3, r5]
	pxEnd->pxNextFreeBlock = NULL;
   813d4:	5099      	str	r1, [r3, r2]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) xHeap.ucHeap;
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
   813d6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
   813d8:	6018      	str	r0, [r3, #0]

	/* The heap now contains pxEnd. */
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
   813da:	4b22      	ldr	r3, [pc, #136]	; (81464 <pvPortMalloc+0xb8>)
   813dc:	681a      	ldr	r2, [r3, #0]
   813de:	3a10      	subs	r2, #16
   813e0:	601a      	str	r2, [r3, #0]
			prvHeapInit();
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
   813e2:	2c00      	cmp	r4, #0
   813e4:	d02d      	beq.n	81442 <pvPortMalloc+0x96>
		{
			xWantedSize += heapSTRUCT_SIZE;
   813e6:	f104 0210 	add.w	r2, r4, #16

			/* Ensure that blocks are always aligned to the required number of 
			bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   813ea:	f012 0f07 	tst.w	r2, #7
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   813ee:	bf1c      	itt	ne
   813f0:	f022 0207 	bicne.w	r2, r2, #7
   813f4:	3208      	addne	r2, #8
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < xTotalHeapSize ) )
   813f6:	1e51      	subs	r1, r2, #1
   813f8:	f649 73fe 	movw	r3, #40958	; 0x9ffe
   813fc:	4299      	cmp	r1, r3
   813fe:	d822      	bhi.n	81446 <pvPortMalloc+0x9a>
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
   81400:	4916      	ldr	r1, [pc, #88]	; (8145c <pvPortMalloc+0xb0>)
   81402:	680c      	ldr	r4, [r1, #0]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   81404:	6863      	ldr	r3, [r4, #4]
   81406:	429a      	cmp	r2, r3
   81408:	d904      	bls.n	81414 <pvPortMalloc+0x68>
   8140a:	6823      	ldr	r3, [r4, #0]
   8140c:	b113      	cbz	r3, 81414 <pvPortMalloc+0x68>
   8140e:	4621      	mov	r1, r4
			{
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
   81410:	461c      	mov	r4, r3
   81412:	e7f7      	b.n	81404 <pvPortMalloc+0x58>
			}

			/* If the end marker was reached then a block of adequate size was
			not found. */
			if( pxBlock != pxEnd )
   81414:	4b10      	ldr	r3, [pc, #64]	; (81458 <pvPortMalloc+0xac>)
   81416:	681b      	ldr	r3, [r3, #0]
   81418:	429c      	cmp	r4, r3
   8141a:	d016      	beq.n	8144a <pvPortMalloc+0x9e>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
   8141c:	680d      	ldr	r5, [r1, #0]
   8141e:	3510      	adds	r5, #16

				/* This block is being returned for use so must be taken out of
				the	list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
   81420:	6823      	ldr	r3, [r4, #0]
   81422:	600b      	str	r3, [r1, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
   81424:	6863      	ldr	r3, [r4, #4]
   81426:	1a9b      	subs	r3, r3, r2
   81428:	2b20      	cmp	r3, #32
   8142a:	d904      	bls.n	81436 <pvPortMalloc+0x8a>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
   8142c:	18a0      	adds	r0, r4, r2

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
   8142e:	6043      	str	r3, [r0, #4]
					pxBlock->xBlockSize = xWantedSize;
   81430:	6062      	str	r2, [r4, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
   81432:	4b0d      	ldr	r3, [pc, #52]	; (81468 <pvPortMalloc+0xbc>)
   81434:	4798      	blx	r3
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
   81436:	4b0b      	ldr	r3, [pc, #44]	; (81464 <pvPortMalloc+0xb8>)
   81438:	681a      	ldr	r2, [r3, #0]
   8143a:	6861      	ldr	r1, [r4, #4]
   8143c:	1a52      	subs	r2, r2, r1
   8143e:	601a      	str	r2, [r3, #0]
   81440:	e004      	b.n	8144c <pvPortMalloc+0xa0>
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
   81442:	2500      	movs	r5, #0
   81444:	e002      	b.n	8144c <pvPortMalloc+0xa0>
   81446:	2500      	movs	r5, #0
   81448:	e000      	b.n	8144c <pvPortMalloc+0xa0>
   8144a:	2500      	movs	r5, #0

				xFreeBytesRemaining -= pxBlock->xBlockSize;
			}
		}
	}
	xTaskResumeAll();
   8144c:	4b07      	ldr	r3, [pc, #28]	; (8146c <pvPortMalloc+0xc0>)
   8144e:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
}
   81450:	4628      	mov	r0, r5
   81452:	bd38      	pop	{r3, r4, r5, pc}
   81454:	00081cad 	.word	0x00081cad
   81458:	2007ab60 	.word	0x2007ab60
   8145c:	2007ab64 	.word	0x2007ab64
   81460:	20070b60 	.word	0x20070b60
   81464:	2007020c 	.word	0x2007020c
   81468:	00081355 	.word	0x00081355
   8146c:	00081dfd 	.word	0x00081dfd

00081470 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   81470:	b510      	push	{r4, lr}
unsigned char *puc = ( unsigned char * ) pv;
xBlockLink *pxLink;

	if( pv != NULL )
   81472:	4604      	mov	r4, r0
   81474:	b168      	cbz	r0, 81492 <vPortFree+0x22>
		puc -= heapSTRUCT_SIZE;

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		vTaskSuspendAll();
   81476:	4b07      	ldr	r3, [pc, #28]	; (81494 <vPortFree+0x24>)
   81478:	4798      	blx	r3
		{
			/* Add this block to the list of free blocks. */
			xFreeBytesRemaining += pxLink->xBlockSize;
   8147a:	4b07      	ldr	r3, [pc, #28]	; (81498 <vPortFree+0x28>)
   8147c:	6819      	ldr	r1, [r3, #0]
   8147e:	f854 2c0c 	ldr.w	r2, [r4, #-12]
   81482:	440a      	add	r2, r1
   81484:	601a      	str	r2, [r3, #0]
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );			
   81486:	f1a4 0010 	sub.w	r0, r4, #16
   8148a:	4b04      	ldr	r3, [pc, #16]	; (8149c <vPortFree+0x2c>)
   8148c:	4798      	blx	r3
		}
		xTaskResumeAll();
   8148e:	4b04      	ldr	r3, [pc, #16]	; (814a0 <vPortFree+0x30>)
   81490:	4798      	blx	r3
   81492:	bd10      	pop	{r4, pc}
   81494:	00081cad 	.word	0x00081cad
   81498:	2007020c 	.word	0x2007020c
   8149c:	00081355 	.word	0x00081355
   814a0:	00081dfd 	.word	0x00081dfd

000814a4 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
   814a4:	b510      	push	{r4, lr}
   814a6:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
   814a8:	6c03      	ldr	r3, [r0, #64]	; 0x40
   814aa:	b93b      	cbnz	r3, 814bc <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   814ac:	6803      	ldr	r3, [r0, #0]
   814ae:	bb1b      	cbnz	r3, 814f8 <prvCopyDataToQueue+0x54>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   814b0:	6840      	ldr	r0, [r0, #4]
   814b2:	4b13      	ldr	r3, [pc, #76]	; (81500 <prvCopyDataToQueue+0x5c>)
   814b4:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
   814b6:	2300      	movs	r3, #0
   814b8:	6063      	str	r3, [r4, #4]
   814ba:	e01d      	b.n	814f8 <prvCopyDataToQueue+0x54>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
   814bc:	b96a      	cbnz	r2, 814da <prvCopyDataToQueue+0x36>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   814be:	6880      	ldr	r0, [r0, #8]
   814c0:	461a      	mov	r2, r3
   814c2:	4b10      	ldr	r3, [pc, #64]	; (81504 <prvCopyDataToQueue+0x60>)
   814c4:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   814c6:	68a2      	ldr	r2, [r4, #8]
   814c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
   814ca:	4413      	add	r3, r2
   814cc:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
   814ce:	6862      	ldr	r2, [r4, #4]
   814d0:	4293      	cmp	r3, r2
   814d2:	d311      	bcc.n	814f8 <prvCopyDataToQueue+0x54>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   814d4:	6823      	ldr	r3, [r4, #0]
   814d6:	60a3      	str	r3, [r4, #8]
   814d8:	e00e      	b.n	814f8 <prvCopyDataToQueue+0x54>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   814da:	68c0      	ldr	r0, [r0, #12]
   814dc:	461a      	mov	r2, r3
   814de:	4b09      	ldr	r3, [pc, #36]	; (81504 <prvCopyDataToQueue+0x60>)
   814e0:	4798      	blx	r3
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
   814e2:	6c22      	ldr	r2, [r4, #64]	; 0x40
   814e4:	4252      	negs	r2, r2
   814e6:	68e3      	ldr	r3, [r4, #12]
   814e8:	4413      	add	r3, r2
   814ea:	60e3      	str	r3, [r4, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
   814ec:	6821      	ldr	r1, [r4, #0]
   814ee:	428b      	cmp	r3, r1
   814f0:	d202      	bcs.n	814f8 <prvCopyDataToQueue+0x54>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   814f2:	6863      	ldr	r3, [r4, #4]
   814f4:	441a      	add	r2, r3
   814f6:	60e2      	str	r2, [r4, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
   814f8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   814fa:	3301      	adds	r3, #1
   814fc:	63a3      	str	r3, [r4, #56]	; 0x38
   814fe:	bd10      	pop	{r4, pc}
   81500:	00082379 	.word	0x00082379
   81504:	00083d09 	.word	0x00083d09

00081508 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
   81508:	b538      	push	{r3, r4, r5, lr}
   8150a:	4603      	mov	r3, r0
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
   8150c:	6805      	ldr	r5, [r0, #0]
   8150e:	b15d      	cbz	r5, 81528 <prvCopyDataFromQueue+0x20>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
   81510:	6c02      	ldr	r2, [r0, #64]	; 0x40
   81512:	68c4      	ldr	r4, [r0, #12]
   81514:	4414      	add	r4, r2
   81516:	60c4      	str	r4, [r0, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
   81518:	6840      	ldr	r0, [r0, #4]
   8151a:	4284      	cmp	r4, r0
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
   8151c:	bf28      	it	cs
   8151e:	60dd      	strcs	r5, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
   81520:	4608      	mov	r0, r1
   81522:	68d9      	ldr	r1, [r3, #12]
   81524:	4b01      	ldr	r3, [pc, #4]	; (8152c <prvCopyDataFromQueue+0x24>)
   81526:	4798      	blx	r3
   81528:	bd38      	pop	{r3, r4, r5, pc}
   8152a:	bf00      	nop
   8152c:	00083d09 	.word	0x00083d09

00081530 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
   81530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81532:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   81534:	4b1d      	ldr	r3, [pc, #116]	; (815ac <prvUnlockQueue+0x7c>)
   81536:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   81538:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   8153a:	2b00      	cmp	r3, #0
   8153c:	dd12      	ble.n	81564 <prvUnlockQueue+0x34>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   8153e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   81540:	b183      	cbz	r3, 81564 <prvUnlockQueue+0x34>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   81542:	f104 0624 	add.w	r6, r4, #36	; 0x24
   81546:	4d1a      	ldr	r5, [pc, #104]	; (815b0 <prvUnlockQueue+0x80>)
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   81548:	4f1a      	ldr	r7, [pc, #104]	; (815b4 <prvUnlockQueue+0x84>)
   8154a:	e001      	b.n	81550 <prvUnlockQueue+0x20>
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   8154c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   8154e:	b14b      	cbz	r3, 81564 <prvUnlockQueue+0x34>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   81550:	4630      	mov	r0, r6
   81552:	47a8      	blx	r5
   81554:	b100      	cbz	r0, 81558 <prvUnlockQueue+0x28>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   81556:	47b8      	blx	r7
				}

				--( pxQueue->xTxLock );
   81558:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   8155a:	3b01      	subs	r3, #1
   8155c:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   8155e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   81560:	2b00      	cmp	r3, #0
   81562:	dcf3      	bgt.n	8154c <prvUnlockQueue+0x1c>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
   81564:	f04f 33ff 	mov.w	r3, #4294967295
   81568:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
   8156a:	4b13      	ldr	r3, [pc, #76]	; (815b8 <prvUnlockQueue+0x88>)
   8156c:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   8156e:	4b0f      	ldr	r3, [pc, #60]	; (815ac <prvUnlockQueue+0x7c>)
   81570:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   81572:	6c63      	ldr	r3, [r4, #68]	; 0x44
   81574:	2b00      	cmp	r3, #0
   81576:	dd12      	ble.n	8159e <prvUnlockQueue+0x6e>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   81578:	6923      	ldr	r3, [r4, #16]
   8157a:	b183      	cbz	r3, 8159e <prvUnlockQueue+0x6e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   8157c:	f104 0610 	add.w	r6, r4, #16
   81580:	4d0b      	ldr	r5, [pc, #44]	; (815b0 <prvUnlockQueue+0x80>)
				{
					vTaskMissedYield();
   81582:	4f0c      	ldr	r7, [pc, #48]	; (815b4 <prvUnlockQueue+0x84>)
   81584:	e001      	b.n	8158a <prvUnlockQueue+0x5a>
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   81586:	6923      	ldr	r3, [r4, #16]
   81588:	b14b      	cbz	r3, 8159e <prvUnlockQueue+0x6e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   8158a:	4630      	mov	r0, r6
   8158c:	47a8      	blx	r5
   8158e:	b100      	cbz	r0, 81592 <prvUnlockQueue+0x62>
				{
					vTaskMissedYield();
   81590:	47b8      	blx	r7
				}

				--( pxQueue->xRxLock );
   81592:	6c63      	ldr	r3, [r4, #68]	; 0x44
   81594:	3b01      	subs	r3, #1
   81596:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   81598:	6c63      	ldr	r3, [r4, #68]	; 0x44
   8159a:	2b00      	cmp	r3, #0
   8159c:	dcf3      	bgt.n	81586 <prvUnlockQueue+0x56>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
   8159e:	f04f 33ff 	mov.w	r3, #4294967295
   815a2:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
   815a4:	4b04      	ldr	r3, [pc, #16]	; (815b8 <prvUnlockQueue+0x88>)
   815a6:	4798      	blx	r3
   815a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   815aa:	bf00      	nop
   815ac:	00081261 	.word	0x00081261
   815b0:	00082195 	.word	0x00082195
   815b4:	000822c5 	.word	0x000822c5
   815b8:	00081281 	.word	0x00081281

000815bc <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
   815bc:	b538      	push	{r3, r4, r5, lr}
   815be:	460d      	mov	r5, r1
	configASSERT( pxQueue );
   815c0:	4604      	mov	r4, r0
   815c2:	b918      	cbnz	r0, 815cc <xQueueGenericReset+0x10>
   815c4:	4b16      	ldr	r3, [pc, #88]	; (81620 <xQueueGenericReset+0x64>)
   815c6:	4798      	blx	r3
   815c8:	bf00      	nop
   815ca:	e7fd      	b.n	815c8 <xQueueGenericReset+0xc>

	taskENTER_CRITICAL();
   815cc:	4b15      	ldr	r3, [pc, #84]	; (81624 <xQueueGenericReset+0x68>)
   815ce:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   815d0:	6823      	ldr	r3, [r4, #0]
   815d2:	6c22      	ldr	r2, [r4, #64]	; 0x40
   815d4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   815d6:	fb00 f002 	mul.w	r0, r0, r2
   815da:	1819      	adds	r1, r3, r0
   815dc:	6061      	str	r1, [r4, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
   815de:	2100      	movs	r1, #0
   815e0:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   815e2:	60a3      	str	r3, [r4, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
   815e4:	1a82      	subs	r2, r0, r2
   815e6:	4413      	add	r3, r2
   815e8:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
   815ea:	f04f 33ff 	mov.w	r3, #4294967295
   815ee:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
   815f0:	64a3      	str	r3, [r4, #72]	; 0x48

		if( xNewQueue == pdFALSE )
   815f2:	b955      	cbnz	r5, 8160a <xQueueGenericReset+0x4e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to	write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   815f4:	6923      	ldr	r3, [r4, #16]
   815f6:	b17b      	cbz	r3, 81618 <xQueueGenericReset+0x5c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   815f8:	f104 0010 	add.w	r0, r4, #16
   815fc:	4b0a      	ldr	r3, [pc, #40]	; (81628 <xQueueGenericReset+0x6c>)
   815fe:	4798      	blx	r3
   81600:	2801      	cmp	r0, #1
   81602:	d109      	bne.n	81618 <xQueueGenericReset+0x5c>
				{
					portYIELD_WITHIN_API();
   81604:	4b09      	ldr	r3, [pc, #36]	; (8162c <xQueueGenericReset+0x70>)
   81606:	4798      	blx	r3
   81608:	e006      	b.n	81618 <xQueueGenericReset+0x5c>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   8160a:	f104 0010 	add.w	r0, r4, #16
   8160e:	4d08      	ldr	r5, [pc, #32]	; (81630 <xQueueGenericReset+0x74>)
   81610:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   81612:	f104 0024 	add.w	r0, r4, #36	; 0x24
   81616:	47a8      	blx	r5
		}
	}
	taskEXIT_CRITICAL();
   81618:	4b06      	ldr	r3, [pc, #24]	; (81634 <xQueueGenericReset+0x78>)
   8161a:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
   8161c:	2001      	movs	r0, #1
   8161e:	bd38      	pop	{r3, r4, r5, pc}
   81620:	00081251 	.word	0x00081251
   81624:	00081261 	.word	0x00081261
   81628:	00082195 	.word	0x00082195
   8162c:	00081241 	.word	0x00081241
   81630:	00081151 	.word	0x00081151
   81634:	00081281 	.word	0x00081281

00081638 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
   81638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8163a:	460d      	mov	r5, r1
   8163c:	4617      	mov	r7, r2
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
   8163e:	4606      	mov	r6, r0
   81640:	b188      	cbz	r0, 81666 <xQueueGenericCreate+0x2e>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
   81642:	2050      	movs	r0, #80	; 0x50
   81644:	4b0e      	ldr	r3, [pc, #56]	; (81680 <xQueueGenericCreate+0x48>)
   81646:	4798      	blx	r3
		if( pxNewQueue != NULL )
   81648:	4604      	mov	r4, r0
   8164a:	b160      	cbz	r0, 81666 <xQueueGenericCreate+0x2e>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
   8164c:	fb05 f006 	mul.w	r0, r5, r6

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
   81650:	3001      	adds	r0, #1
   81652:	4b0b      	ldr	r3, [pc, #44]	; (81680 <xQueueGenericCreate+0x48>)
   81654:	4798      	blx	r3
   81656:	6020      	str	r0, [r4, #0]
			if( pxNewQueue->pcHead != NULL )
   81658:	b940      	cbnz	r0, 8166c <xQueueGenericCreate+0x34>
				xReturn = pxNewQueue;
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
   8165a:	4620      	mov	r0, r4
   8165c:	4b09      	ldr	r3, [pc, #36]	; (81684 <xQueueGenericCreate+0x4c>)
   8165e:	4798      	blx	r3
   81660:	e001      	b.n	81666 <xQueueGenericCreate+0x2e>
			}
		}
	}

	configASSERT( xReturn );
   81662:	bf00      	nop
   81664:	e7fd      	b.n	81662 <xQueueGenericCreate+0x2a>
   81666:	4b08      	ldr	r3, [pc, #32]	; (81688 <xQueueGenericCreate+0x50>)
   81668:	4798      	blx	r3
   8166a:	e7fa      	b.n	81662 <xQueueGenericCreate+0x2a>
			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
			if( pxNewQueue->pcHead != NULL )
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
   8166c:	63e6      	str	r6, [r4, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
   8166e:	6425      	str	r5, [r4, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
   81670:	4620      	mov	r0, r4
   81672:	2101      	movs	r1, #1
   81674:	4b05      	ldr	r3, [pc, #20]	; (8168c <xQueueGenericCreate+0x54>)
   81676:	4798      	blx	r3
				#if ( configUSE_TRACE_FACILITY == 1 )
				{
					pxNewQueue->ucQueueType = ucQueueType;
   81678:	f884 704d 	strb.w	r7, [r4, #77]	; 0x4d
	}

	configASSERT( xReturn );

	return xReturn;
}
   8167c:	4620      	mov	r0, r4
   8167e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81680:	000813ad 	.word	0x000813ad
   81684:	00081471 	.word	0x00081471
   81688:	00081251 	.word	0x00081251
   8168c:	000815bd 	.word	0x000815bd

00081690 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
   81690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81694:	b085      	sub	sp, #20
   81696:	468a      	mov	sl, r1
   81698:	9201      	str	r2, [sp, #4]
   8169a:	469b      	mov	fp, r3
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;

	configASSERT( pxQueue );
   8169c:	4604      	mov	r4, r0
   8169e:	b918      	cbnz	r0, 816a8 <xQueueGenericSend+0x18>
   816a0:	4b36      	ldr	r3, [pc, #216]	; (8177c <xQueueGenericSend+0xec>)
   816a2:	4798      	blx	r3
   816a4:	bf00      	nop
   816a6:	e7fd      	b.n	816a4 <xQueueGenericSend+0x14>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   816a8:	b909      	cbnz	r1, 816ae <xQueueGenericSend+0x1e>
   816aa:	6c03      	ldr	r3, [r0, #64]	; 0x40
   816ac:	b91b      	cbnz	r3, 816b6 <xQueueGenericSend+0x26>

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
   816ae:	2700      	movs	r7, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   816b0:	4e33      	ldr	r6, [pc, #204]	; (81780 <xQueueGenericSend+0xf0>)
					vTaskSetTimeOutState( &xTimeOut );
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
   816b2:	4d34      	ldr	r5, [pc, #208]	; (81784 <xQueueGenericSend+0xf4>)
   816b4:	e003      	b.n	816be <xQueueGenericSend+0x2e>
{
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;

	configASSERT( pxQueue );
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   816b6:	4b31      	ldr	r3, [pc, #196]	; (8177c <xQueueGenericSend+0xec>)
   816b8:	4798      	blx	r3
   816ba:	bf00      	nop
   816bc:	e7fd      	b.n	816ba <xQueueGenericSend+0x2a>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   816be:	47b0      	blx	r6
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   816c0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   816c2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   816c4:	429a      	cmp	r2, r3
   816c6:	d212      	bcs.n	816ee <xQueueGenericSend+0x5e>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   816c8:	4620      	mov	r0, r4
   816ca:	4651      	mov	r1, sl
   816cc:	465a      	mov	r2, fp
   816ce:	4b2e      	ldr	r3, [pc, #184]	; (81788 <xQueueGenericSend+0xf8>)
   816d0:	4798      	blx	r3

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   816d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   816d4:	b13b      	cbz	r3, 816e6 <xQueueGenericSend+0x56>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
   816d6:	f104 0024 	add.w	r0, r4, #36	; 0x24
   816da:	4b2c      	ldr	r3, [pc, #176]	; (8178c <xQueueGenericSend+0xfc>)
   816dc:	4798      	blx	r3
   816de:	2801      	cmp	r0, #1
   816e0:	d101      	bne.n	816e6 <xQueueGenericSend+0x56>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
   816e2:	4b2b      	ldr	r3, [pc, #172]	; (81790 <xQueueGenericSend+0x100>)
   816e4:	4798      	blx	r3
					}
				}

				taskEXIT_CRITICAL();
   816e6:	4b27      	ldr	r3, [pc, #156]	; (81784 <xQueueGenericSend+0xf4>)
   816e8:	4798      	blx	r3

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
   816ea:	2001      	movs	r0, #1
   816ec:	e043      	b.n	81776 <xQueueGenericSend+0xe6>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   816ee:	9b01      	ldr	r3, [sp, #4]
   816f0:	b91b      	cbnz	r3, 816fa <xQueueGenericSend+0x6a>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   816f2:	4b24      	ldr	r3, [pc, #144]	; (81784 <xQueueGenericSend+0xf4>)
   816f4:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
   816f6:	2000      	movs	r0, #0
   816f8:	e03d      	b.n	81776 <xQueueGenericSend+0xe6>
				}
				else if( xEntryTimeSet == pdFALSE )
   816fa:	b91f      	cbnz	r7, 81704 <xQueueGenericSend+0x74>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   816fc:	a802      	add	r0, sp, #8
   816fe:	4b25      	ldr	r3, [pc, #148]	; (81794 <xQueueGenericSend+0x104>)
   81700:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   81702:	2701      	movs	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
   81704:	47a8      	blx	r5

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   81706:	4b24      	ldr	r3, [pc, #144]	; (81798 <xQueueGenericSend+0x108>)
   81708:	4798      	blx	r3
		prvLockQueue( pxQueue );
   8170a:	47b0      	blx	r6
   8170c:	6c63      	ldr	r3, [r4, #68]	; 0x44
   8170e:	f1b3 3fff 	cmp.w	r3, #4294967295
   81712:	bf04      	itt	eq
   81714:	2300      	moveq	r3, #0
   81716:	6463      	streq	r3, [r4, #68]	; 0x44
   81718:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   8171a:	f1b3 3fff 	cmp.w	r3, #4294967295
   8171e:	bf04      	itt	eq
   81720:	2300      	moveq	r3, #0
   81722:	64a3      	streq	r3, [r4, #72]	; 0x48
   81724:	47a8      	blx	r5

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   81726:	a802      	add	r0, sp, #8
   81728:	a901      	add	r1, sp, #4
   8172a:	4b1c      	ldr	r3, [pc, #112]	; (8179c <xQueueGenericSend+0x10c>)
   8172c:	4798      	blx	r3
   8172e:	b9e0      	cbnz	r0, 8176a <xQueueGenericSend+0xda>

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   81730:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
   81732:	f8d4 9038 	ldr.w	r9, [r4, #56]	; 0x38
   81736:	f8d4 803c 	ldr.w	r8, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
   8173a:	47a8      	blx	r5
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   8173c:	45c1      	cmp	r9, r8
   8173e:	d10e      	bne.n	8175e <xQueueGenericSend+0xce>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   81740:	f104 0010 	add.w	r0, r4, #16
   81744:	9901      	ldr	r1, [sp, #4]
   81746:	4b16      	ldr	r3, [pc, #88]	; (817a0 <xQueueGenericSend+0x110>)
   81748:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   8174a:	4620      	mov	r0, r4
   8174c:	4b15      	ldr	r3, [pc, #84]	; (817a4 <xQueueGenericSend+0x114>)
   8174e:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   81750:	4b15      	ldr	r3, [pc, #84]	; (817a8 <xQueueGenericSend+0x118>)
   81752:	4798      	blx	r3
   81754:	2800      	cmp	r0, #0
   81756:	d1b2      	bne.n	816be <xQueueGenericSend+0x2e>
				{
					portYIELD_WITHIN_API();
   81758:	4b0d      	ldr	r3, [pc, #52]	; (81790 <xQueueGenericSend+0x100>)
   8175a:	4798      	blx	r3
   8175c:	e7af      	b.n	816be <xQueueGenericSend+0x2e>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   8175e:	4620      	mov	r0, r4
   81760:	4b10      	ldr	r3, [pc, #64]	; (817a4 <xQueueGenericSend+0x114>)
   81762:	4798      	blx	r3
				( void ) xTaskResumeAll();
   81764:	4b10      	ldr	r3, [pc, #64]	; (817a8 <xQueueGenericSend+0x118>)
   81766:	4798      	blx	r3
   81768:	e7a9      	b.n	816be <xQueueGenericSend+0x2e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   8176a:	4620      	mov	r0, r4
   8176c:	4b0d      	ldr	r3, [pc, #52]	; (817a4 <xQueueGenericSend+0x114>)
   8176e:	4798      	blx	r3
			( void ) xTaskResumeAll();
   81770:	4b0d      	ldr	r3, [pc, #52]	; (817a8 <xQueueGenericSend+0x118>)
   81772:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
   81774:	2000      	movs	r0, #0
		}
	}
}
   81776:	b005      	add	sp, #20
   81778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8177c:	00081251 	.word	0x00081251
   81780:	00081261 	.word	0x00081261
   81784:	00081281 	.word	0x00081281
   81788:	000814a5 	.word	0x000814a5
   8178c:	00082195 	.word	0x00082195
   81790:	00081241 	.word	0x00081241
   81794:	00082219 	.word	0x00082219
   81798:	00081cad 	.word	0x00081cad
   8179c:	00082241 	.word	0x00082241
   817a0:	000820f1 	.word	0x000820f1
   817a4:	00081531 	.word	0x00081531
   817a8:	00081dfd 	.word	0x00081dfd

000817ac <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
   817ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   817b0:	460e      	mov	r6, r1
   817b2:	4615      	mov	r5, r2
   817b4:	4698      	mov	r8, r3
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	configASSERT( pxQueue );
   817b6:	4604      	mov	r4, r0
   817b8:	b918      	cbnz	r0, 817c2 <xQueueGenericSendFromISR+0x16>
   817ba:	4b1c      	ldr	r3, [pc, #112]	; (8182c <xQueueGenericSendFromISR+0x80>)
   817bc:	4798      	blx	r3
   817be:	bf00      	nop
   817c0:	e7fd      	b.n	817be <xQueueGenericSendFromISR+0x12>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   817c2:	b929      	cbnz	r1, 817d0 <xQueueGenericSendFromISR+0x24>
   817c4:	6c03      	ldr	r3, [r0, #64]	; 0x40
   817c6:	b11b      	cbz	r3, 817d0 <xQueueGenericSendFromISR+0x24>
   817c8:	4b18      	ldr	r3, [pc, #96]	; (8182c <xQueueGenericSendFromISR+0x80>)
   817ca:	4798      	blx	r3
   817cc:	bf00      	nop
   817ce:	e7fd      	b.n	817cc <xQueueGenericSendFromISR+0x20>
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   817d0:	4b16      	ldr	r3, [pc, #88]	; (8182c <xQueueGenericSendFromISR+0x80>)
   817d2:	4798      	blx	r3
   817d4:	4607      	mov	r7, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   817d6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   817d8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   817da:	429a      	cmp	r2, r3
   817dc:	d218      	bcs.n	81810 <xQueueGenericSendFromISR+0x64>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   817de:	4620      	mov	r0, r4
   817e0:	4631      	mov	r1, r6
   817e2:	4642      	mov	r2, r8
   817e4:	4b12      	ldr	r3, [pc, #72]	; (81830 <xQueueGenericSendFromISR+0x84>)
   817e6:	4798      	blx	r3

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
   817e8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   817ea:	f1b3 3fff 	cmp.w	r3, #4294967295
   817ee:	d10a      	bne.n	81806 <xQueueGenericSendFromISR+0x5a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   817f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   817f2:	b17b      	cbz	r3, 81814 <xQueueGenericSendFromISR+0x68>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   817f4:	f104 0024 	add.w	r0, r4, #36	; 0x24
   817f8:	4b0e      	ldr	r3, [pc, #56]	; (81834 <xQueueGenericSendFromISR+0x88>)
   817fa:	4798      	blx	r3
   817fc:	b160      	cbz	r0, 81818 <xQueueGenericSendFromISR+0x6c>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						if( pxHigherPriorityTaskWoken != NULL )
   817fe:	b16d      	cbz	r5, 8181c <xQueueGenericSendFromISR+0x70>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
   81800:	2401      	movs	r4, #1
   81802:	602c      	str	r4, [r5, #0]
   81804:	e00b      	b.n	8181e <xQueueGenericSendFromISR+0x72>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
   81806:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   81808:	3301      	adds	r3, #1
   8180a:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
   8180c:	2401      	movs	r4, #1
   8180e:	e006      	b.n	8181e <xQueueGenericSendFromISR+0x72>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
   81810:	2400      	movs	r4, #0
   81812:	e004      	b.n	8181e <xQueueGenericSendFromISR+0x72>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
   81814:	2401      	movs	r4, #1
   81816:	e002      	b.n	8181e <xQueueGenericSendFromISR+0x72>
   81818:	2401      	movs	r4, #1
   8181a:	e000      	b.n	8181e <xQueueGenericSendFromISR+0x72>
   8181c:	2401      	movs	r4, #1
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   8181e:	4638      	mov	r0, r7
   81820:	4b05      	ldr	r3, [pc, #20]	; (81838 <xQueueGenericSendFromISR+0x8c>)
   81822:	4798      	blx	r3

	return xReturn;
}
   81824:	4620      	mov	r0, r4
   81826:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8182a:	bf00      	nop
   8182c:	00081251 	.word	0x00081251
   81830:	000814a5 	.word	0x000814a5
   81834:	00082195 	.word	0x00082195
   81838:	00081279 	.word	0x00081279

0008183c <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
   8183c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81840:	b085      	sub	sp, #20
   81842:	4689      	mov	r9, r1
   81844:	9201      	str	r2, [sp, #4]
   81846:	469a      	mov	sl, r3
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;

	configASSERT( pxQueue );
   81848:	4604      	mov	r4, r0
   8184a:	b918      	cbnz	r0, 81854 <xQueueGenericReceive+0x18>
   8184c:	4b44      	ldr	r3, [pc, #272]	; (81960 <xQueueGenericReceive+0x124>)
   8184e:	4798      	blx	r3
   81850:	bf00      	nop
   81852:	e7fd      	b.n	81850 <xQueueGenericReceive+0x14>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   81854:	b909      	cbnz	r1, 8185a <xQueueGenericReceive+0x1e>
   81856:	6c03      	ldr	r3, [r0, #64]	; 0x40
   81858:	b92b      	cbnz	r3, 81866 <xQueueGenericReceive+0x2a>
	return xReturn;
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
   8185a:	2700      	movs	r7, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   8185c:	4e41      	ldr	r6, [pc, #260]	; (81964 <xQueueGenericReceive+0x128>)
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   8185e:	f8df b134 	ldr.w	fp, [pc, #308]	; 81994 <xQueueGenericReceive+0x158>
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
   81862:	4d41      	ldr	r5, [pc, #260]	; (81968 <xQueueGenericReceive+0x12c>)
   81864:	e003      	b.n	8186e <xQueueGenericReceive+0x32>
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;

	configASSERT( pxQueue );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   81866:	4b3e      	ldr	r3, [pc, #248]	; (81960 <xQueueGenericReceive+0x124>)
   81868:	4798      	blx	r3
   8186a:	bf00      	nop
   8186c:	e7fd      	b.n	8186a <xQueueGenericReceive+0x2e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   8186e:	47b0      	blx	r6
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
   81870:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   81872:	2b00      	cmp	r3, #0
   81874:	d028      	beq.n	818c8 <xQueueGenericReceive+0x8c>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
   81876:	68e5      	ldr	r5, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
   81878:	4620      	mov	r0, r4
   8187a:	4649      	mov	r1, r9
   8187c:	4b3b      	ldr	r3, [pc, #236]	; (8196c <xQueueGenericReceive+0x130>)
   8187e:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
   81880:	f1ba 0f00 	cmp.w	sl, #0
   81884:	d112      	bne.n	818ac <xQueueGenericReceive+0x70>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
   81886:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   81888:	3b01      	subs	r3, #1
   8188a:	63a3      	str	r3, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   8188c:	6823      	ldr	r3, [r4, #0]
   8188e:	b913      	cbnz	r3, 81896 <xQueueGenericReceive+0x5a>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
   81890:	4b37      	ldr	r3, [pc, #220]	; (81970 <xQueueGenericReceive+0x134>)
   81892:	4798      	blx	r3
   81894:	6060      	str	r0, [r4, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   81896:	6923      	ldr	r3, [r4, #16]
   81898:	b193      	cbz	r3, 818c0 <xQueueGenericReceive+0x84>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   8189a:	f104 0010 	add.w	r0, r4, #16
   8189e:	4b35      	ldr	r3, [pc, #212]	; (81974 <xQueueGenericReceive+0x138>)
   818a0:	4798      	blx	r3
   818a2:	2801      	cmp	r0, #1
   818a4:	d10c      	bne.n	818c0 <xQueueGenericReceive+0x84>
						{
							portYIELD_WITHIN_API();
   818a6:	4b34      	ldr	r3, [pc, #208]	; (81978 <xQueueGenericReceive+0x13c>)
   818a8:	4798      	blx	r3
   818aa:	e009      	b.n	818c0 <xQueueGenericReceive+0x84>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
   818ac:	60e5      	str	r5, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   818ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
   818b0:	b133      	cbz	r3, 818c0 <xQueueGenericReceive+0x84>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   818b2:	f104 0024 	add.w	r0, r4, #36	; 0x24
   818b6:	4b2f      	ldr	r3, [pc, #188]	; (81974 <xQueueGenericReceive+0x138>)
   818b8:	4798      	blx	r3
   818ba:	b108      	cbz	r0, 818c0 <xQueueGenericReceive+0x84>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
   818bc:	4b2e      	ldr	r3, [pc, #184]	; (81978 <xQueueGenericReceive+0x13c>)
   818be:	4798      	blx	r3
						}
					}
				}

				taskEXIT_CRITICAL();
   818c0:	4b29      	ldr	r3, [pc, #164]	; (81968 <xQueueGenericReceive+0x12c>)
   818c2:	4798      	blx	r3
				return pdPASS;
   818c4:	2001      	movs	r0, #1
   818c6:	e048      	b.n	8195a <xQueueGenericReceive+0x11e>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   818c8:	9b01      	ldr	r3, [sp, #4]
   818ca:	b91b      	cbnz	r3, 818d4 <xQueueGenericReceive+0x98>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   818cc:	4b26      	ldr	r3, [pc, #152]	; (81968 <xQueueGenericReceive+0x12c>)
   818ce:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
   818d0:	2000      	movs	r0, #0
   818d2:	e042      	b.n	8195a <xQueueGenericReceive+0x11e>
				}
				else if( xEntryTimeSet == pdFALSE )
   818d4:	b917      	cbnz	r7, 818dc <xQueueGenericReceive+0xa0>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   818d6:	a802      	add	r0, sp, #8
   818d8:	47d8      	blx	fp
					xEntryTimeSet = pdTRUE;
   818da:	2701      	movs	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
   818dc:	47a8      	blx	r5

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   818de:	4b27      	ldr	r3, [pc, #156]	; (8197c <xQueueGenericReceive+0x140>)
   818e0:	4798      	blx	r3
		prvLockQueue( pxQueue );
   818e2:	47b0      	blx	r6
   818e4:	6c63      	ldr	r3, [r4, #68]	; 0x44
   818e6:	f1b3 3fff 	cmp.w	r3, #4294967295
   818ea:	bf04      	itt	eq
   818ec:	2300      	moveq	r3, #0
   818ee:	6463      	streq	r3, [r4, #68]	; 0x44
   818f0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   818f2:	f1b3 3fff 	cmp.w	r3, #4294967295
   818f6:	bf04      	itt	eq
   818f8:	2300      	moveq	r3, #0
   818fa:	64a3      	streq	r3, [r4, #72]	; 0x48
   818fc:	47a8      	blx	r5

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   818fe:	a802      	add	r0, sp, #8
   81900:	a901      	add	r1, sp, #4
   81902:	4b1f      	ldr	r3, [pc, #124]	; (81980 <xQueueGenericReceive+0x144>)
   81904:	4798      	blx	r3
   81906:	bb10      	cbnz	r0, 8194e <xQueueGenericReceive+0x112>

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   81908:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
   8190a:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
   8190e:	47a8      	blx	r5
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   81910:	f1b8 0f00 	cmp.w	r8, #0
   81914:	d115      	bne.n	81942 <xQueueGenericReceive+0x106>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   81916:	6823      	ldr	r3, [r4, #0]
   81918:	b923      	cbnz	r3, 81924 <xQueueGenericReceive+0xe8>
					{
						portENTER_CRITICAL();
   8191a:	47b0      	blx	r6
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   8191c:	6860      	ldr	r0, [r4, #4]
   8191e:	4b19      	ldr	r3, [pc, #100]	; (81984 <xQueueGenericReceive+0x148>)
   81920:	4798      	blx	r3
						}
						portEXIT_CRITICAL();
   81922:	47a8      	blx	r5
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   81924:	f104 0024 	add.w	r0, r4, #36	; 0x24
   81928:	9901      	ldr	r1, [sp, #4]
   8192a:	4b17      	ldr	r3, [pc, #92]	; (81988 <xQueueGenericReceive+0x14c>)
   8192c:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   8192e:	4620      	mov	r0, r4
   81930:	4b16      	ldr	r3, [pc, #88]	; (8198c <xQueueGenericReceive+0x150>)
   81932:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   81934:	4b16      	ldr	r3, [pc, #88]	; (81990 <xQueueGenericReceive+0x154>)
   81936:	4798      	blx	r3
   81938:	2800      	cmp	r0, #0
   8193a:	d198      	bne.n	8186e <xQueueGenericReceive+0x32>
				{
					portYIELD_WITHIN_API();
   8193c:	4b0e      	ldr	r3, [pc, #56]	; (81978 <xQueueGenericReceive+0x13c>)
   8193e:	4798      	blx	r3
   81940:	e795      	b.n	8186e <xQueueGenericReceive+0x32>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   81942:	4620      	mov	r0, r4
   81944:	4b11      	ldr	r3, [pc, #68]	; (8198c <xQueueGenericReceive+0x150>)
   81946:	4798      	blx	r3
				( void ) xTaskResumeAll();
   81948:	4b11      	ldr	r3, [pc, #68]	; (81990 <xQueueGenericReceive+0x154>)
   8194a:	4798      	blx	r3
   8194c:	e78f      	b.n	8186e <xQueueGenericReceive+0x32>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
   8194e:	4620      	mov	r0, r4
   81950:	4b0e      	ldr	r3, [pc, #56]	; (8198c <xQueueGenericReceive+0x150>)
   81952:	4798      	blx	r3
			( void ) xTaskResumeAll();
   81954:	4b0e      	ldr	r3, [pc, #56]	; (81990 <xQueueGenericReceive+0x154>)
   81956:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
   81958:	2000      	movs	r0, #0
		}
	}
}
   8195a:	b005      	add	sp, #20
   8195c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81960:	00081251 	.word	0x00081251
   81964:	00081261 	.word	0x00081261
   81968:	00081281 	.word	0x00081281
   8196c:	00081509 	.word	0x00081509
   81970:	000822d1 	.word	0x000822d1
   81974:	00082195 	.word	0x00082195
   81978:	00081241 	.word	0x00081241
   8197c:	00081cad 	.word	0x00081cad
   81980:	00082241 	.word	0x00082241
   81984:	000822fd 	.word	0x000822fd
   81988:	000820f1 	.word	0x000820f1
   8198c:	00081531 	.word	0x00081531
   81990:	00081dfd 	.word	0x00081dfd
   81994:	00082219 	.word	0x00082219

00081998 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vQueueWaitForMessageRestricted( xQueueHandle pxQueue, portTickType xTicksToWait )
	{
   81998:	b538      	push	{r3, r4, r5, lr}
   8199a:	4604      	mov	r4, r0
   8199c:	460d      	mov	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   8199e:	4b0d      	ldr	r3, [pc, #52]	; (819d4 <vQueueWaitForMessageRestricted+0x3c>)
   819a0:	4798      	blx	r3
   819a2:	6c63      	ldr	r3, [r4, #68]	; 0x44
   819a4:	f1b3 3fff 	cmp.w	r3, #4294967295
   819a8:	bf04      	itt	eq
   819aa:	2300      	moveq	r3, #0
   819ac:	6463      	streq	r3, [r4, #68]	; 0x44
   819ae:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   819b0:	f1b3 3fff 	cmp.w	r3, #4294967295
   819b4:	bf04      	itt	eq
   819b6:	2300      	moveq	r3, #0
   819b8:	64a3      	streq	r3, [r4, #72]	; 0x48
   819ba:	4b07      	ldr	r3, [pc, #28]	; (819d8 <vQueueWaitForMessageRestricted+0x40>)
   819bc:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
   819be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   819c0:	b923      	cbnz	r3, 819cc <vQueueWaitForMessageRestricted+0x34>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   819c2:	f104 0024 	add.w	r0, r4, #36	; 0x24
   819c6:	4629      	mov	r1, r5
   819c8:	4b04      	ldr	r3, [pc, #16]	; (819dc <vQueueWaitForMessageRestricted+0x44>)
   819ca:	4798      	blx	r3
		}
		prvUnlockQueue( pxQueue );
   819cc:	4620      	mov	r0, r4
   819ce:	4b04      	ldr	r3, [pc, #16]	; (819e0 <vQueueWaitForMessageRestricted+0x48>)
   819d0:	4798      	blx	r3
   819d2:	bd38      	pop	{r3, r4, r5, pc}
   819d4:	00081261 	.word	0x00081261
   819d8:	00081281 	.word	0x00081281
   819dc:	00082151 	.word	0x00082151
   819e0:	00081531 	.word	0x00081531

000819e4 <prvAddCurrentTaskToDelayedList>:
	#endif
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
   819e4:	b510      	push	{r4, lr}
   819e6:	4604      	mov	r4, r0
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
   819e8:	4b0e      	ldr	r3, [pc, #56]	; (81a24 <prvAddCurrentTaskToDelayedList+0x40>)
   819ea:	681b      	ldr	r3, [r3, #0]
   819ec:	6058      	str	r0, [r3, #4]

	if( xTimeToWake < xTickCount )
   819ee:	4b0e      	ldr	r3, [pc, #56]	; (81a28 <prvAddCurrentTaskToDelayedList+0x44>)
   819f0:	681b      	ldr	r3, [r3, #0]
   819f2:	4298      	cmp	r0, r3
   819f4:	d207      	bcs.n	81a06 <prvAddCurrentTaskToDelayedList+0x22>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   819f6:	4b0d      	ldr	r3, [pc, #52]	; (81a2c <prvAddCurrentTaskToDelayedList+0x48>)
   819f8:	6818      	ldr	r0, [r3, #0]
   819fa:	4b0a      	ldr	r3, [pc, #40]	; (81a24 <prvAddCurrentTaskToDelayedList+0x40>)
   819fc:	6819      	ldr	r1, [r3, #0]
   819fe:	3104      	adds	r1, #4
   81a00:	4b0b      	ldr	r3, [pc, #44]	; (81a30 <prvAddCurrentTaskToDelayedList+0x4c>)
   81a02:	4798      	blx	r3
   81a04:	bd10      	pop	{r4, pc}
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   81a06:	4b0b      	ldr	r3, [pc, #44]	; (81a34 <prvAddCurrentTaskToDelayedList+0x50>)
   81a08:	6818      	ldr	r0, [r3, #0]
   81a0a:	4b06      	ldr	r3, [pc, #24]	; (81a24 <prvAddCurrentTaskToDelayedList+0x40>)
   81a0c:	6819      	ldr	r1, [r3, #0]
   81a0e:	3104      	adds	r1, #4
   81a10:	4b07      	ldr	r3, [pc, #28]	; (81a30 <prvAddCurrentTaskToDelayedList+0x4c>)
   81a12:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
   81a14:	4b08      	ldr	r3, [pc, #32]	; (81a38 <prvAddCurrentTaskToDelayedList+0x54>)
   81a16:	681b      	ldr	r3, [r3, #0]
   81a18:	429c      	cmp	r4, r3
		{
			xNextTaskUnblockTime = xTimeToWake;
   81a1a:	bf3c      	itt	cc
   81a1c:	4b06      	ldrcc	r3, [pc, #24]	; (81a38 <prvAddCurrentTaskToDelayedList+0x54>)
   81a1e:	601c      	strcc	r4, [r3, #0]
   81a20:	bd10      	pop	{r4, pc}
   81a22:	bf00      	nop
   81a24:	2007ac24 	.word	0x2007ac24
   81a28:	2007ac40 	.word	0x2007ac40
   81a2c:	2007ac44 	.word	0x2007ac44
   81a30:	0008118d 	.word	0x0008118d
   81a34:	2007ab84 	.word	0x2007ab84
   81a38:	20070210 	.word	0x20070210

00081a3c <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
   81a3c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81a40:	460e      	mov	r6, r1
   81a42:	4617      	mov	r7, r2
   81a44:	469a      	mov	sl, r3
   81a46:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   81a48:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
   81a4c:	4681      	mov	r9, r0
   81a4e:	b918      	cbnz	r0, 81a58 <xTaskGenericCreate+0x1c>
   81a50:	4b62      	ldr	r3, [pc, #392]	; (81bdc <xTaskGenericCreate+0x1a0>)
   81a52:	4798      	blx	r3
   81a54:	bf00      	nop
   81a56:	e7fd      	b.n	81a54 <xTaskGenericCreate+0x18>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
   81a58:	2d04      	cmp	r5, #4
   81a5a:	d903      	bls.n	81a64 <xTaskGenericCreate+0x28>
   81a5c:	4b5f      	ldr	r3, [pc, #380]	; (81bdc <xTaskGenericCreate+0x1a0>)
   81a5e:	4798      	blx	r3
   81a60:	bf00      	nop
   81a62:	e7fd      	b.n	81a60 <xTaskGenericCreate+0x24>
{
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
   81a64:	204c      	movs	r0, #76	; 0x4c
   81a66:	4b5e      	ldr	r3, [pc, #376]	; (81be0 <xTaskGenericCreate+0x1a4>)
   81a68:	4798      	blx	r3

	if( pxNewTCB != NULL )
   81a6a:	4604      	mov	r4, r0
   81a6c:	2800      	cmp	r0, #0
   81a6e:	f000 80b1 	beq.w	81bd4 <xTaskGenericCreate+0x198>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   81a72:	f1b8 0f00 	cmp.w	r8, #0
   81a76:	f040 80a9 	bne.w	81bcc <xTaskGenericCreate+0x190>
   81a7a:	00b8      	lsls	r0, r7, #2
   81a7c:	4b58      	ldr	r3, [pc, #352]	; (81be0 <xTaskGenericCreate+0x1a4>)
   81a7e:	4798      	blx	r3
   81a80:	6320      	str	r0, [r4, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
   81a82:	b918      	cbnz	r0, 81a8c <xTaskGenericCreate+0x50>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
   81a84:	4620      	mov	r0, r4
   81a86:	4b57      	ldr	r3, [pc, #348]	; (81be4 <xTaskGenericCreate+0x1a8>)
   81a88:	4798      	blx	r3
   81a8a:	e0a3      	b.n	81bd4 <xTaskGenericCreate+0x198>
			pxNewTCB = NULL;
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
   81a8c:	21a5      	movs	r1, #165	; 0xa5
   81a8e:	00ba      	lsls	r2, r7, #2
   81a90:	4b55      	ldr	r3, [pc, #340]	; (81be8 <xTaskGenericCreate+0x1ac>)
   81a92:	4798      	blx	r3
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
   81a94:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
   81a98:	3f01      	subs	r7, #1
   81a9a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   81a9c:	eb03 0387 	add.w	r3, r3, r7, lsl #2
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
   81aa0:	f023 0b07 	bic.w	fp, r3, #7
{
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
   81aa4:	f104 0034 	add.w	r0, r4, #52	; 0x34
   81aa8:	4631      	mov	r1, r6
   81aaa:	220a      	movs	r2, #10
   81aac:	4b4f      	ldr	r3, [pc, #316]	; (81bec <xTaskGenericCreate+0x1b0>)
   81aae:	4798      	blx	r3
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
   81ab0:	2300      	movs	r3, #0
   81ab2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
   81ab6:	2d04      	cmp	r5, #4
   81ab8:	bf34      	ite	cc
   81aba:	462e      	movcc	r6, r5
   81abc:	2604      	movcs	r6, #4
	if( uxPriority >= configMAX_PRIORITIES )
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
	}

	pxTCB->uxPriority = uxPriority;
   81abe:	62e6      	str	r6, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
   81ac0:	64a6      	str	r6, [r4, #72]	; 0x48
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
   81ac2:	1d27      	adds	r7, r4, #4
   81ac4:	4638      	mov	r0, r7
   81ac6:	f8df 8170 	ldr.w	r8, [pc, #368]	; 81c38 <xTaskGenericCreate+0x1fc>
   81aca:	47c0      	blx	r8
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
   81acc:	f104 0018 	add.w	r0, r4, #24
   81ad0:	47c0      	blx	r8

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
   81ad2:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
   81ad4:	f1c6 0605 	rsb	r6, r6, #5
   81ad8:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
   81ada:	6264      	str	r4, [r4, #36]	; 0x24
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   81adc:	4658      	mov	r0, fp
   81ade:	4649      	mov	r1, r9
   81ae0:	4652      	mov	r2, sl
   81ae2:	4b43      	ldr	r3, [pc, #268]	; (81bf0 <xTaskGenericCreate+0x1b4>)
   81ae4:	4798      	blx	r3
   81ae6:	6020      	str	r0, [r4, #0]
		}
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   81ae8:	f010 0f07 	tst.w	r0, #7
   81aec:	d003      	beq.n	81af6 <xTaskGenericCreate+0xba>
   81aee:	4b3b      	ldr	r3, [pc, #236]	; (81bdc <xTaskGenericCreate+0x1a0>)
   81af0:	4798      	blx	r3
   81af2:	bf00      	nop
   81af4:	e7fd      	b.n	81af2 <xTaskGenericCreate+0xb6>

		if( ( void * ) pxCreatedTask != NULL )
   81af6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   81af8:	b103      	cbz	r3, 81afc <xTaskGenericCreate+0xc0>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
   81afa:	601c      	str	r4, [r3, #0]
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
   81afc:	4b3d      	ldr	r3, [pc, #244]	; (81bf4 <xTaskGenericCreate+0x1b8>)
   81afe:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
   81b00:	4b3d      	ldr	r3, [pc, #244]	; (81bf8 <xTaskGenericCreate+0x1bc>)
   81b02:	681a      	ldr	r2, [r3, #0]
   81b04:	3201      	adds	r2, #1
   81b06:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
   81b08:	4b3c      	ldr	r3, [pc, #240]	; (81bfc <xTaskGenericCreate+0x1c0>)
   81b0a:	681b      	ldr	r3, [r3, #0]
   81b0c:	bb2b      	cbnz	r3, 81b5a <xTaskGenericCreate+0x11e>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
   81b0e:	4b3b      	ldr	r3, [pc, #236]	; (81bfc <xTaskGenericCreate+0x1c0>)
   81b10:	601c      	str	r4, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
   81b12:	4b39      	ldr	r3, [pc, #228]	; (81bf8 <xTaskGenericCreate+0x1bc>)
   81b14:	681b      	ldr	r3, [r3, #0]
   81b16:	2b01      	cmp	r3, #1
   81b18:	d129      	bne.n	81b6e <xTaskGenericCreate+0x132>
   81b1a:	4e39      	ldr	r6, [pc, #228]	; (81c00 <xTaskGenericCreate+0x1c4>)
   81b1c:	f106 0964 	add.w	r9, r6, #100	; 0x64
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
   81b20:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 81c04 <xTaskGenericCreate+0x1c8>
   81b24:	4630      	mov	r0, r6
   81b26:	47c0      	blx	r8
   81b28:	3614      	adds	r6, #20

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
   81b2a:	454e      	cmp	r6, r9
   81b2c:	d1fa      	bne.n	81b24 <xTaskGenericCreate+0xe8>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
   81b2e:	f8df 910c 	ldr.w	r9, [pc, #268]	; 81c3c <xTaskGenericCreate+0x200>
   81b32:	4648      	mov	r0, r9
   81b34:	4e33      	ldr	r6, [pc, #204]	; (81c04 <xTaskGenericCreate+0x1c8>)
   81b36:	47b0      	blx	r6
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
   81b38:	f8df 8104 	ldr.w	r8, [pc, #260]	; 81c40 <xTaskGenericCreate+0x204>
   81b3c:	4640      	mov	r0, r8
   81b3e:	47b0      	blx	r6
	vListInitialise( ( xList * ) &xPendingReadyList );
   81b40:	4831      	ldr	r0, [pc, #196]	; (81c08 <xTaskGenericCreate+0x1cc>)
   81b42:	47b0      	blx	r6

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
   81b44:	4831      	ldr	r0, [pc, #196]	; (81c0c <xTaskGenericCreate+0x1d0>)
   81b46:	47b0      	blx	r6
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
   81b48:	4831      	ldr	r0, [pc, #196]	; (81c10 <xTaskGenericCreate+0x1d4>)
   81b4a:	47b0      	blx	r6
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   81b4c:	4b31      	ldr	r3, [pc, #196]	; (81c14 <xTaskGenericCreate+0x1d8>)
   81b4e:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   81b52:	4b31      	ldr	r3, [pc, #196]	; (81c18 <xTaskGenericCreate+0x1dc>)
   81b54:	f8c3 8000 	str.w	r8, [r3]
   81b58:	e009      	b.n	81b6e <xTaskGenericCreate+0x132>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
   81b5a:	4b30      	ldr	r3, [pc, #192]	; (81c1c <xTaskGenericCreate+0x1e0>)
   81b5c:	681b      	ldr	r3, [r3, #0]
   81b5e:	b933      	cbnz	r3, 81b6e <xTaskGenericCreate+0x132>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
   81b60:	4b26      	ldr	r3, [pc, #152]	; (81bfc <xTaskGenericCreate+0x1c0>)
   81b62:	681b      	ldr	r3, [r3, #0]
   81b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   81b66:	429d      	cmp	r5, r3
					{
						pxCurrentTCB = pxNewTCB;
   81b68:	bf24      	itt	cs
   81b6a:	4b24      	ldrcs	r3, [pc, #144]	; (81bfc <xTaskGenericCreate+0x1c0>)
   81b6c:	601c      	strcs	r4, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
   81b6e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   81b70:	4a2b      	ldr	r2, [pc, #172]	; (81c20 <xTaskGenericCreate+0x1e4>)
   81b72:	6812      	ldr	r2, [r2, #0]
   81b74:	4293      	cmp	r3, r2
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
   81b76:	bf84      	itt	hi
   81b78:	4a29      	ldrhi	r2, [pc, #164]	; (81c20 <xTaskGenericCreate+0x1e4>)
   81b7a:	6013      	strhi	r3, [r2, #0]
			}

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
   81b7c:	4a29      	ldr	r2, [pc, #164]	; (81c24 <xTaskGenericCreate+0x1e8>)
   81b7e:	6811      	ldr	r1, [r2, #0]
   81b80:	6421      	str	r1, [r4, #64]	; 0x40
			}
			#endif
			uxTaskNumber++;
   81b82:	3101      	adds	r1, #1
   81b84:	6011      	str	r1, [r2, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
   81b86:	4a28      	ldr	r2, [pc, #160]	; (81c28 <xTaskGenericCreate+0x1ec>)
   81b88:	6812      	ldr	r2, [r2, #0]
   81b8a:	4293      	cmp	r3, r2
   81b8c:	bf84      	itt	hi
   81b8e:	4a26      	ldrhi	r2, [pc, #152]	; (81c28 <xTaskGenericCreate+0x1ec>)
   81b90:	6013      	strhi	r3, [r2, #0]
   81b92:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81b96:	481a      	ldr	r0, [pc, #104]	; (81c00 <xTaskGenericCreate+0x1c4>)
   81b98:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   81b9c:	4639      	mov	r1, r7
   81b9e:	4b23      	ldr	r3, [pc, #140]	; (81c2c <xTaskGenericCreate+0x1f0>)
   81ba0:	4798      	blx	r3

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
   81ba2:	4b23      	ldr	r3, [pc, #140]	; (81c30 <xTaskGenericCreate+0x1f4>)
   81ba4:	4798      	blx	r3
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
   81ba6:	4b1d      	ldr	r3, [pc, #116]	; (81c1c <xTaskGenericCreate+0x1e0>)
   81ba8:	681b      	ldr	r3, [r3, #0]
   81baa:	b14b      	cbz	r3, 81bc0 <xTaskGenericCreate+0x184>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
   81bac:	4b13      	ldr	r3, [pc, #76]	; (81bfc <xTaskGenericCreate+0x1c0>)
   81bae:	681b      	ldr	r3, [r3, #0]
   81bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   81bb2:	429d      	cmp	r5, r3
   81bb4:	d907      	bls.n	81bc6 <xTaskGenericCreate+0x18a>
			{
				portYIELD_WITHIN_API();
   81bb6:	4b1f      	ldr	r3, [pc, #124]	; (81c34 <xTaskGenericCreate+0x1f8>)
   81bb8:	4798      	blx	r3
			#endif
			uxTaskNumber++;

			prvAddTaskToReadyQueue( pxNewTCB );

			xReturn = pdPASS;
   81bba:	2001      	movs	r0, #1
   81bbc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81bc0:	2001      	movs	r0, #1
   81bc2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81bc6:	2001      	movs	r0, #1
   81bc8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if( pxNewTCB != NULL )
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   81bcc:	f8c0 8030 	str.w	r8, [r0, #48]	; 0x30
   81bd0:	4640      	mov	r0, r8
   81bd2:	e75b      	b.n	81a8c <xTaskGenericCreate+0x50>
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   81bd4:	f04f 30ff 	mov.w	r0, #4294967295
			}
		}
	}

	return xReturn;
}
   81bd8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81bdc:	00081251 	.word	0x00081251
   81be0:	000813ad 	.word	0x000813ad
   81be4:	00081471 	.word	0x00081471
   81be8:	00083df5 	.word	0x00083df5
   81bec:	00084069 	.word	0x00084069
   81bf0:	00081205 	.word	0x00081205
   81bf4:	00081261 	.word	0x00081261
   81bf8:	2007ac64 	.word	0x2007ac64
   81bfc:	2007ac24 	.word	0x2007ac24
   81c00:	2007abbc 	.word	0x2007abbc
   81c04:	00081151 	.word	0x00081151
   81c08:	2007ac28 	.word	0x2007ac28
   81c0c:	2007ab90 	.word	0x2007ab90
   81c10:	2007ab70 	.word	0x2007ab70
   81c14:	2007ab84 	.word	0x2007ab84
   81c18:	2007ac44 	.word	0x2007ac44
   81c1c:	2007ab88 	.word	0x2007ab88
   81c20:	2007ac68 	.word	0x2007ac68
   81c24:	2007ac48 	.word	0x2007ac48
   81c28:	2007abb8 	.word	0x2007abb8
   81c2c:	00081171 	.word	0x00081171
   81c30:	00081281 	.word	0x00081281
   81c34:	00081241 	.word	0x00081241
   81c38:	00081169 	.word	0x00081169
   81c3c:	2007ac4c 	.word	0x2007ac4c
   81c40:	2007aba4 	.word	0x2007aba4

00081c44 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
   81c44:	b510      	push	{r4, lr}
   81c46:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
   81c48:	2300      	movs	r3, #0
   81c4a:	9300      	str	r3, [sp, #0]
   81c4c:	9301      	str	r3, [sp, #4]
   81c4e:	9302      	str	r3, [sp, #8]
   81c50:	9303      	str	r3, [sp, #12]
   81c52:	480e      	ldr	r0, [pc, #56]	; (81c8c <vTaskStartScheduler+0x48>)
   81c54:	490e      	ldr	r1, [pc, #56]	; (81c90 <vTaskStartScheduler+0x4c>)
   81c56:	2282      	movs	r2, #130	; 0x82
   81c58:	4c0e      	ldr	r4, [pc, #56]	; (81c94 <vTaskStartScheduler+0x50>)
   81c5a:	47a0      	blx	r4
	}
	#endif

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   81c5c:	2801      	cmp	r0, #1
   81c5e:	d10e      	bne.n	81c7e <vTaskStartScheduler+0x3a>
		{
			xReturn = xTimerCreateTimerTask();
   81c60:	4b0d      	ldr	r3, [pc, #52]	; (81c98 <vTaskStartScheduler+0x54>)
   81c62:	4798      	blx	r3
		}
	}
	#endif

	if( xReturn == pdPASS )
   81c64:	2801      	cmp	r0, #1
   81c66:	d10a      	bne.n	81c7e <vTaskStartScheduler+0x3a>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
   81c68:	4b0c      	ldr	r3, [pc, #48]	; (81c9c <vTaskStartScheduler+0x58>)
   81c6a:	4798      	blx	r3

		xSchedulerRunning = pdTRUE;
   81c6c:	2201      	movs	r2, #1
   81c6e:	4b0c      	ldr	r3, [pc, #48]	; (81ca0 <vTaskStartScheduler+0x5c>)
   81c70:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
   81c72:	2200      	movs	r2, #0
   81c74:	4b0b      	ldr	r3, [pc, #44]	; (81ca4 <vTaskStartScheduler+0x60>)
   81c76:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   81c78:	4b0b      	ldr	r3, [pc, #44]	; (81ca8 <vTaskStartScheduler+0x64>)
   81c7a:	4798      	blx	r3
   81c7c:	e004      	b.n	81c88 <vTaskStartScheduler+0x44>
			/* Should only reach here if a task calls xTaskEndScheduler(). */
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
   81c7e:	b918      	cbnz	r0, 81c88 <vTaskStartScheduler+0x44>
   81c80:	4b06      	ldr	r3, [pc, #24]	; (81c9c <vTaskStartScheduler+0x58>)
   81c82:	4798      	blx	r3
   81c84:	bf00      	nop
   81c86:	e7fd      	b.n	81c84 <vTaskStartScheduler+0x40>
}
   81c88:	b004      	add	sp, #16
   81c8a:	bd10      	pop	{r4, pc}
   81c8c:	00081fdd 	.word	0x00081fdd
   81c90:	00086924 	.word	0x00086924
   81c94:	00081a3d 	.word	0x00081a3d
   81c98:	00082471 	.word	0x00082471
   81c9c:	00081251 	.word	0x00081251
   81ca0:	2007ab88 	.word	0x2007ab88
   81ca4:	2007ac40 	.word	0x2007ac40
   81ca8:	0008131d 	.word	0x0008131d

00081cac <vTaskSuspendAll>:

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
   81cac:	4b02      	ldr	r3, [pc, #8]	; (81cb8 <vTaskSuspendAll+0xc>)
   81cae:	681a      	ldr	r2, [r3, #0]
   81cb0:	3201      	adds	r2, #1
   81cb2:	601a      	str	r2, [r3, #0]
   81cb4:	4770      	bx	lr
   81cb6:	bf00      	nop
   81cb8:	2007ac20 	.word	0x2007ac20

00081cbc <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
   81cbc:	b510      	push	{r4, lr}
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
   81cbe:	4b04      	ldr	r3, [pc, #16]	; (81cd0 <xTaskGetTickCount+0x14>)
   81cc0:	4798      	blx	r3
	{
		xTicks = xTickCount;
   81cc2:	4b04      	ldr	r3, [pc, #16]	; (81cd4 <xTaskGetTickCount+0x18>)
   81cc4:	681c      	ldr	r4, [r3, #0]
	}
	taskEXIT_CRITICAL();
   81cc6:	4b04      	ldr	r3, [pc, #16]	; (81cd8 <xTaskGetTickCount+0x1c>)
   81cc8:	4798      	blx	r3

	return xTicks;
}
   81cca:	4620      	mov	r0, r4
   81ccc:	bd10      	pop	{r4, pc}
   81cce:	bf00      	nop
   81cd0:	00081261 	.word	0x00081261
   81cd4:	2007ac40 	.word	0x2007ac40
   81cd8:	00081281 	.word	0x00081281

00081cdc <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
   81cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   81ce0:	4b3a      	ldr	r3, [pc, #232]	; (81dcc <vTaskIncrementTick+0xf0>)
   81ce2:	681b      	ldr	r3, [r3, #0]
   81ce4:	2b00      	cmp	r3, #0
   81ce6:	d16b      	bne.n	81dc0 <vTaskIncrementTick+0xe4>
	{
		++xTickCount;
   81ce8:	4b39      	ldr	r3, [pc, #228]	; (81dd0 <vTaskIncrementTick+0xf4>)
   81cea:	681a      	ldr	r2, [r3, #0]
   81cec:	3201      	adds	r2, #1
   81cee:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
   81cf0:	681b      	ldr	r3, [r3, #0]
   81cf2:	bb03      	cbnz	r3, 81d36 <vTaskIncrementTick+0x5a>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
   81cf4:	4b37      	ldr	r3, [pc, #220]	; (81dd4 <vTaskIncrementTick+0xf8>)
   81cf6:	681b      	ldr	r3, [r3, #0]
   81cf8:	681b      	ldr	r3, [r3, #0]
   81cfa:	b11b      	cbz	r3, 81d04 <vTaskIncrementTick+0x28>
   81cfc:	4b36      	ldr	r3, [pc, #216]	; (81dd8 <vTaskIncrementTick+0xfc>)
   81cfe:	4798      	blx	r3
   81d00:	bf00      	nop
   81d02:	e7fd      	b.n	81d00 <vTaskIncrementTick+0x24>

			pxTemp = pxDelayedTaskList;
   81d04:	4b33      	ldr	r3, [pc, #204]	; (81dd4 <vTaskIncrementTick+0xf8>)
   81d06:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
   81d08:	4a34      	ldr	r2, [pc, #208]	; (81ddc <vTaskIncrementTick+0x100>)
   81d0a:	6810      	ldr	r0, [r2, #0]
   81d0c:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
   81d0e:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
   81d10:	4a33      	ldr	r2, [pc, #204]	; (81de0 <vTaskIncrementTick+0x104>)
   81d12:	6811      	ldr	r1, [r2, #0]
   81d14:	3101      	adds	r1, #1
   81d16:	6011      	str	r1, [r2, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   81d18:	681b      	ldr	r3, [r3, #0]
   81d1a:	681b      	ldr	r3, [r3, #0]
   81d1c:	b923      	cbnz	r3, 81d28 <vTaskIncrementTick+0x4c>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
   81d1e:	f04f 32ff 	mov.w	r2, #4294967295
   81d22:	4b30      	ldr	r3, [pc, #192]	; (81de4 <vTaskIncrementTick+0x108>)
   81d24:	601a      	str	r2, [r3, #0]
   81d26:	e006      	b.n	81d36 <vTaskIncrementTick+0x5a>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   81d28:	4b2a      	ldr	r3, [pc, #168]	; (81dd4 <vTaskIncrementTick+0xf8>)
   81d2a:	681b      	ldr	r3, [r3, #0]
   81d2c:	68db      	ldr	r3, [r3, #12]
   81d2e:	68db      	ldr	r3, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   81d30:	685a      	ldr	r2, [r3, #4]
   81d32:	4b2c      	ldr	r3, [pc, #176]	; (81de4 <vTaskIncrementTick+0x108>)
   81d34:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
   81d36:	4b26      	ldr	r3, [pc, #152]	; (81dd0 <vTaskIncrementTick+0xf4>)
   81d38:	681a      	ldr	r2, [r3, #0]
   81d3a:	4b2a      	ldr	r3, [pc, #168]	; (81de4 <vTaskIncrementTick+0x108>)
   81d3c:	681b      	ldr	r3, [r3, #0]
   81d3e:	429a      	cmp	r2, r3
   81d40:	d342      	bcc.n	81dc8 <vTaskIncrementTick+0xec>
   81d42:	4b24      	ldr	r3, [pc, #144]	; (81dd4 <vTaskIncrementTick+0xf8>)
   81d44:	681b      	ldr	r3, [r3, #0]
   81d46:	681b      	ldr	r3, [r3, #0]
   81d48:	b14b      	cbz	r3, 81d5e <vTaskIncrementTick+0x82>
   81d4a:	4b22      	ldr	r3, [pc, #136]	; (81dd4 <vTaskIncrementTick+0xf8>)
   81d4c:	681b      	ldr	r3, [r3, #0]
   81d4e:	68db      	ldr	r3, [r3, #12]
   81d50:	68dc      	ldr	r4, [r3, #12]
   81d52:	6863      	ldr	r3, [r4, #4]
   81d54:	4a1e      	ldr	r2, [pc, #120]	; (81dd0 <vTaskIncrementTick+0xf4>)
   81d56:	6812      	ldr	r2, [r2, #0]
   81d58:	4293      	cmp	r3, r2
   81d5a:	d913      	bls.n	81d84 <vTaskIncrementTick+0xa8>
   81d5c:	e00e      	b.n	81d7c <vTaskIncrementTick+0xa0>
   81d5e:	f04f 32ff 	mov.w	r2, #4294967295
   81d62:	4b20      	ldr	r3, [pc, #128]	; (81de4 <vTaskIncrementTick+0x108>)
   81d64:	601a      	str	r2, [r3, #0]
   81d66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81d6a:	4b1a      	ldr	r3, [pc, #104]	; (81dd4 <vTaskIncrementTick+0xf8>)
   81d6c:	681b      	ldr	r3, [r3, #0]
   81d6e:	68db      	ldr	r3, [r3, #12]
   81d70:	68dc      	ldr	r4, [r3, #12]
   81d72:	6863      	ldr	r3, [r4, #4]
   81d74:	4a16      	ldr	r2, [pc, #88]	; (81dd0 <vTaskIncrementTick+0xf4>)
   81d76:	6812      	ldr	r2, [r2, #0]
   81d78:	4293      	cmp	r3, r2
   81d7a:	d907      	bls.n	81d8c <vTaskIncrementTick+0xb0>
   81d7c:	4a19      	ldr	r2, [pc, #100]	; (81de4 <vTaskIncrementTick+0x108>)
   81d7e:	6013      	str	r3, [r2, #0]
   81d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81d84:	4e18      	ldr	r6, [pc, #96]	; (81de8 <vTaskIncrementTick+0x10c>)
   81d86:	4f19      	ldr	r7, [pc, #100]	; (81dec <vTaskIncrementTick+0x110>)
   81d88:	f8df 806c 	ldr.w	r8, [pc, #108]	; 81df8 <vTaskIncrementTick+0x11c>
   81d8c:	1d25      	adds	r5, r4, #4
   81d8e:	4628      	mov	r0, r5
   81d90:	47b0      	blx	r6
   81d92:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   81d94:	b113      	cbz	r3, 81d9c <vTaskIncrementTick+0xc0>
   81d96:	f104 0018 	add.w	r0, r4, #24
   81d9a:	47b0      	blx	r6
   81d9c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   81d9e:	683a      	ldr	r2, [r7, #0]
   81da0:	4293      	cmp	r3, r2
   81da2:	bf88      	it	hi
   81da4:	603b      	strhi	r3, [r7, #0]
   81da6:	eb03 0083 	add.w	r0, r3, r3, lsl #2
   81daa:	eb08 0080 	add.w	r0, r8, r0, lsl #2
   81dae:	4629      	mov	r1, r5
   81db0:	4b0f      	ldr	r3, [pc, #60]	; (81df0 <vTaskIncrementTick+0x114>)
   81db2:	4798      	blx	r3
   81db4:	4b07      	ldr	r3, [pc, #28]	; (81dd4 <vTaskIncrementTick+0xf8>)
   81db6:	681b      	ldr	r3, [r3, #0]
   81db8:	681b      	ldr	r3, [r3, #0]
   81dba:	2b00      	cmp	r3, #0
   81dbc:	d1d5      	bne.n	81d6a <vTaskIncrementTick+0x8e>
   81dbe:	e7ce      	b.n	81d5e <vTaskIncrementTick+0x82>
	}
	else
	{
		++uxMissedTicks;
   81dc0:	4b0c      	ldr	r3, [pc, #48]	; (81df4 <vTaskIncrementTick+0x118>)
   81dc2:	681a      	ldr	r2, [r3, #0]
   81dc4:	3201      	adds	r2, #1
   81dc6:	601a      	str	r2, [r3, #0]
   81dc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81dcc:	2007ac20 	.word	0x2007ac20
   81dd0:	2007ac40 	.word	0x2007ac40
   81dd4:	2007ab84 	.word	0x2007ab84
   81dd8:	00081251 	.word	0x00081251
   81ddc:	2007ac44 	.word	0x2007ac44
   81de0:	2007ac3c 	.word	0x2007ac3c
   81de4:	20070210 	.word	0x20070210
   81de8:	000811c9 	.word	0x000811c9
   81dec:	2007abb8 	.word	0x2007abb8
   81df0:	00081171 	.word	0x00081171
   81df4:	2007ab6c 	.word	0x2007ab6c
   81df8:	2007abbc 	.word	0x2007abbc

00081dfc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE != 0  */
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
   81dfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   81e00:	4b31      	ldr	r3, [pc, #196]	; (81ec8 <xTaskResumeAll+0xcc>)
   81e02:	681b      	ldr	r3, [r3, #0]
   81e04:	b91b      	cbnz	r3, 81e0e <xTaskResumeAll+0x12>
   81e06:	4b31      	ldr	r3, [pc, #196]	; (81ecc <xTaskResumeAll+0xd0>)
   81e08:	4798      	blx	r3
   81e0a:	bf00      	nop
   81e0c:	e7fd      	b.n	81e0a <xTaskResumeAll+0xe>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   81e0e:	4b30      	ldr	r3, [pc, #192]	; (81ed0 <xTaskResumeAll+0xd4>)
   81e10:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
   81e12:	4b2d      	ldr	r3, [pc, #180]	; (81ec8 <xTaskResumeAll+0xcc>)
   81e14:	681a      	ldr	r2, [r3, #0]
   81e16:	3a01      	subs	r2, #1
   81e18:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   81e1a:	681b      	ldr	r3, [r3, #0]
   81e1c:	2b00      	cmp	r3, #0
   81e1e:	d148      	bne.n	81eb2 <xTaskResumeAll+0xb6>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
   81e20:	4b2c      	ldr	r3, [pc, #176]	; (81ed4 <xTaskResumeAll+0xd8>)
   81e22:	681b      	ldr	r3, [r3, #0]
   81e24:	2b00      	cmp	r3, #0
   81e26:	d046      	beq.n	81eb6 <xTaskResumeAll+0xba>
   81e28:	2500      	movs	r5, #0
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   81e2a:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 81f00 <xTaskResumeAll+0x104>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
					uxListRemove( &( pxTCB->xEventListItem ) );
   81e2e:	4f2a      	ldr	r7, [pc, #168]	; (81ed8 <xTaskResumeAll+0xdc>)
					uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyQueue( pxTCB );
   81e30:	4e2a      	ldr	r6, [pc, #168]	; (81edc <xTaskResumeAll+0xe0>)
   81e32:	e01d      	b.n	81e70 <xTaskResumeAll+0x74>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
   81e34:	f8d8 300c 	ldr.w	r3, [r8, #12]
   81e38:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xEventListItem ) );
   81e3a:	f104 0018 	add.w	r0, r4, #24
   81e3e:	47b8      	blx	r7
					uxListRemove( &( pxTCB->xGenericListItem ) );
   81e40:	f104 0904 	add.w	r9, r4, #4
   81e44:	4648      	mov	r0, r9
   81e46:	47b8      	blx	r7
					prvAddTaskToReadyQueue( pxTCB );
   81e48:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   81e4a:	6832      	ldr	r2, [r6, #0]
   81e4c:	4293      	cmp	r3, r2
   81e4e:	bf88      	it	hi
   81e50:	6033      	strhi	r3, [r6, #0]
   81e52:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81e56:	4822      	ldr	r0, [pc, #136]	; (81ee0 <xTaskResumeAll+0xe4>)
   81e58:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   81e5c:	4649      	mov	r1, r9
   81e5e:	4b21      	ldr	r3, [pc, #132]	; (81ee4 <xTaskResumeAll+0xe8>)
   81e60:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   81e62:	4b21      	ldr	r3, [pc, #132]	; (81ee8 <xTaskResumeAll+0xec>)
   81e64:	681b      	ldr	r3, [r3, #0]
   81e66:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   81e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					{
						xYieldRequired = pdTRUE;
   81e6a:	429a      	cmp	r2, r3
   81e6c:	bf28      	it	cs
   81e6e:	2501      	movcs	r5, #1
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   81e70:	f8d8 3000 	ldr.w	r3, [r8]
   81e74:	2b00      	cmp	r3, #0
   81e76:	d1dd      	bne.n	81e34 <xTaskResumeAll+0x38>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   81e78:	4b1c      	ldr	r3, [pc, #112]	; (81eec <xTaskResumeAll+0xf0>)
   81e7a:	681b      	ldr	r3, [r3, #0]
   81e7c:	b163      	cbz	r3, 81e98 <xTaskResumeAll+0x9c>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   81e7e:	4b1b      	ldr	r3, [pc, #108]	; (81eec <xTaskResumeAll+0xf0>)
   81e80:	681b      	ldr	r3, [r3, #0]
   81e82:	b17b      	cbz	r3, 81ea4 <xTaskResumeAll+0xa8>
					{
						vTaskIncrementTick();
   81e84:	4d1a      	ldr	r5, [pc, #104]	; (81ef0 <xTaskResumeAll+0xf4>)
						--uxMissedTicks;
   81e86:	4c19      	ldr	r4, [pc, #100]	; (81eec <xTaskResumeAll+0xf0>)
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
					{
						vTaskIncrementTick();
   81e88:	47a8      	blx	r5
						--uxMissedTicks;
   81e8a:	6823      	ldr	r3, [r4, #0]
   81e8c:	3b01      	subs	r3, #1
   81e8e:	6023      	str	r3, [r4, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   81e90:	6823      	ldr	r3, [r4, #0]
   81e92:	2b00      	cmp	r3, #0
   81e94:	d1f8      	bne.n	81e88 <xTaskResumeAll+0x8c>
   81e96:	e005      	b.n	81ea4 <xTaskResumeAll+0xa8>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
   81e98:	2d01      	cmp	r5, #1
   81e9a:	d003      	beq.n	81ea4 <xTaskResumeAll+0xa8>
   81e9c:	4b15      	ldr	r3, [pc, #84]	; (81ef4 <xTaskResumeAll+0xf8>)
   81e9e:	681b      	ldr	r3, [r3, #0]
   81ea0:	2b01      	cmp	r3, #1
   81ea2:	d10a      	bne.n	81eba <xTaskResumeAll+0xbe>
				{
					xAlreadyYielded = pdTRUE;
					xMissedYield = pdFALSE;
   81ea4:	2200      	movs	r2, #0
   81ea6:	4b13      	ldr	r3, [pc, #76]	; (81ef4 <xTaskResumeAll+0xf8>)
   81ea8:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
   81eaa:	4b13      	ldr	r3, [pc, #76]	; (81ef8 <xTaskResumeAll+0xfc>)
   81eac:	4798      	blx	r3
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
				{
					xAlreadyYielded = pdTRUE;
   81eae:	2401      	movs	r4, #1
   81eb0:	e004      	b.n	81ebc <xTaskResumeAll+0xc0>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   81eb2:	2400      	movs	r4, #0
   81eb4:	e002      	b.n	81ebc <xTaskResumeAll+0xc0>
   81eb6:	2400      	movs	r4, #0
   81eb8:	e000      	b.n	81ebc <xTaskResumeAll+0xc0>
   81eba:	2400      	movs	r4, #0
					portYIELD_WITHIN_API();
				}
			}
		}
	}
	taskEXIT_CRITICAL();
   81ebc:	4b0f      	ldr	r3, [pc, #60]	; (81efc <xTaskResumeAll+0x100>)
   81ebe:	4798      	blx	r3

	return xAlreadyYielded;
}
   81ec0:	4620      	mov	r0, r4
   81ec2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   81ec6:	bf00      	nop
   81ec8:	2007ac20 	.word	0x2007ac20
   81ecc:	00081251 	.word	0x00081251
   81ed0:	00081261 	.word	0x00081261
   81ed4:	2007ac64 	.word	0x2007ac64
   81ed8:	000811c9 	.word	0x000811c9
   81edc:	2007abb8 	.word	0x2007abb8
   81ee0:	2007abbc 	.word	0x2007abbc
   81ee4:	00081171 	.word	0x00081171
   81ee8:	2007ac24 	.word	0x2007ac24
   81eec:	2007ab6c 	.word	0x2007ab6c
   81ef0:	00081cdd 	.word	0x00081cdd
   81ef4:	2007ac60 	.word	0x2007ac60
   81ef8:	00081241 	.word	0x00081241
   81efc:	00081281 	.word	0x00081281
   81f00:	2007ac28 	.word	0x2007ac28

00081f04 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
   81f04:	b538      	push	{r3, r4, r5, lr}
   81f06:	460c      	mov	r4, r1
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;

		configASSERT( pxPreviousWakeTime );
   81f08:	4605      	mov	r5, r0
   81f0a:	b918      	cbnz	r0, 81f14 <vTaskDelayUntil+0x10>
   81f0c:	4b19      	ldr	r3, [pc, #100]	; (81f74 <vTaskDelayUntil+0x70>)
   81f0e:	4798      	blx	r3
   81f10:	bf00      	nop
   81f12:	e7fd      	b.n	81f10 <vTaskDelayUntil+0xc>
		configASSERT( ( xTimeIncrement > 0U ) );
   81f14:	b919      	cbnz	r1, 81f1e <vTaskDelayUntil+0x1a>
   81f16:	4b17      	ldr	r3, [pc, #92]	; (81f74 <vTaskDelayUntil+0x70>)
   81f18:	4798      	blx	r3
   81f1a:	bf00      	nop
   81f1c:	e7fd      	b.n	81f1a <vTaskDelayUntil+0x16>

		vTaskSuspendAll();
   81f1e:	4b16      	ldr	r3, [pc, #88]	; (81f78 <vTaskDelayUntil+0x74>)
   81f20:	4798      	blx	r3
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
   81f22:	682b      	ldr	r3, [r5, #0]
   81f24:	441c      	add	r4, r3

			if( xTickCount < *pxPreviousWakeTime )
   81f26:	4a15      	ldr	r2, [pc, #84]	; (81f7c <vTaskDelayUntil+0x78>)
   81f28:	6812      	ldr	r2, [r2, #0]
   81f2a:	4293      	cmp	r3, r2
   81f2c:	d907      	bls.n	81f3e <vTaskDelayUntil+0x3a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
   81f2e:	42a3      	cmp	r3, r4
   81f30:	d91c      	bls.n	81f6c <vTaskDelayUntil+0x68>
   81f32:	4b12      	ldr	r3, [pc, #72]	; (81f7c <vTaskDelayUntil+0x78>)
   81f34:	681b      	ldr	r3, [r3, #0]
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   81f36:	602c      	str	r4, [r5, #0]

			if( xShouldDelay != pdFALSE )
   81f38:	429c      	cmp	r4, r3
   81f3a:	d90f      	bls.n	81f5c <vTaskDelayUntil+0x58>
   81f3c:	e006      	b.n	81f4c <vTaskDelayUntil+0x48>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
   81f3e:	42a3      	cmp	r3, r4
   81f40:	d812      	bhi.n	81f68 <vTaskDelayUntil+0x64>
   81f42:	4b0e      	ldr	r3, [pc, #56]	; (81f7c <vTaskDelayUntil+0x78>)
   81f44:	681b      	ldr	r3, [r3, #0]
   81f46:	429c      	cmp	r4, r3
   81f48:	d80e      	bhi.n	81f68 <vTaskDelayUntil+0x64>
   81f4a:	e00f      	b.n	81f6c <vTaskDelayUntil+0x68>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   81f4c:	4b0c      	ldr	r3, [pc, #48]	; (81f80 <vTaskDelayUntil+0x7c>)
   81f4e:	6818      	ldr	r0, [r3, #0]
   81f50:	3004      	adds	r0, #4
   81f52:	4b0c      	ldr	r3, [pc, #48]	; (81f84 <vTaskDelayUntil+0x80>)
   81f54:	4798      	blx	r3
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}

				prvAddCurrentTaskToDelayedList( xTimeToWake );
   81f56:	4620      	mov	r0, r4
   81f58:	4b0b      	ldr	r3, [pc, #44]	; (81f88 <vTaskDelayUntil+0x84>)
   81f5a:	4798      	blx	r3
			}
		}
		xAlreadyYielded = xTaskResumeAll();
   81f5c:	4b0b      	ldr	r3, [pc, #44]	; (81f8c <vTaskDelayUntil+0x88>)
   81f5e:	4798      	blx	r3

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   81f60:	b930      	cbnz	r0, 81f70 <vTaskDelayUntil+0x6c>
		{
			portYIELD_WITHIN_API();
   81f62:	4b0b      	ldr	r3, [pc, #44]	; (81f90 <vTaskDelayUntil+0x8c>)
   81f64:	4798      	blx	r3
   81f66:	bd38      	pop	{r3, r4, r5, pc}
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   81f68:	602c      	str	r4, [r5, #0]
   81f6a:	e7ef      	b.n	81f4c <vTaskDelayUntil+0x48>
   81f6c:	602c      	str	r4, [r5, #0]
   81f6e:	e7f5      	b.n	81f5c <vTaskDelayUntil+0x58>
   81f70:	bd38      	pop	{r3, r4, r5, pc}
   81f72:	bf00      	nop
   81f74:	00081251 	.word	0x00081251
   81f78:	00081cad 	.word	0x00081cad
   81f7c:	2007ac40 	.word	0x2007ac40
   81f80:	2007ac24 	.word	0x2007ac24
   81f84:	000811c9 	.word	0x000811c9
   81f88:	000819e5 	.word	0x000819e5
   81f8c:	00081dfd 	.word	0x00081dfd
   81f90:	00081241 	.word	0x00081241

00081f94 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
   81f94:	b510      	push	{r4, lr}
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
   81f96:	4604      	mov	r4, r0
   81f98:	b178      	cbz	r0, 81fba <vTaskDelay+0x26>
		{
			vTaskSuspendAll();
   81f9a:	4b09      	ldr	r3, [pc, #36]	; (81fc0 <vTaskDelay+0x2c>)
   81f9c:	4798      	blx	r3
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
   81f9e:	4b09      	ldr	r3, [pc, #36]	; (81fc4 <vTaskDelay+0x30>)
   81fa0:	681b      	ldr	r3, [r3, #0]
   81fa2:	441c      	add	r4, r3

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   81fa4:	4b08      	ldr	r3, [pc, #32]	; (81fc8 <vTaskDelay+0x34>)
   81fa6:	6818      	ldr	r0, [r3, #0]
   81fa8:	3004      	adds	r0, #4
   81faa:	4b08      	ldr	r3, [pc, #32]	; (81fcc <vTaskDelay+0x38>)
   81fac:	4798      	blx	r3
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
   81fae:	4620      	mov	r0, r4
   81fb0:	4b07      	ldr	r3, [pc, #28]	; (81fd0 <vTaskDelay+0x3c>)
   81fb2:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
   81fb4:	4b07      	ldr	r3, [pc, #28]	; (81fd4 <vTaskDelay+0x40>)
   81fb6:	4798      	blx	r3
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   81fb8:	b908      	cbnz	r0, 81fbe <vTaskDelay+0x2a>
		{
			portYIELD_WITHIN_API();
   81fba:	4b07      	ldr	r3, [pc, #28]	; (81fd8 <vTaskDelay+0x44>)
   81fbc:	4798      	blx	r3
   81fbe:	bd10      	pop	{r4, pc}
   81fc0:	00081cad 	.word	0x00081cad
   81fc4:	2007ac40 	.word	0x2007ac40
   81fc8:	2007ac24 	.word	0x2007ac24
   81fcc:	000811c9 	.word	0x000811c9
   81fd0:	000819e5 	.word	0x000819e5
   81fd4:	00081dfd 	.word	0x00081dfd
   81fd8:	00081241 	.word	0x00081241

00081fdc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   81fdc:	b580      	push	{r7, lr}
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   81fde:	4d15      	ldr	r5, [pc, #84]	; (82034 <prvIdleTask+0x58>)

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
   81fe0:	4e15      	ldr	r6, [pc, #84]	; (82038 <prvIdleTask+0x5c>)
			{
				taskYIELD();
   81fe2:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8205c <prvIdleTask+0x80>
   81fe6:	e01c      	b.n	82022 <prvIdleTask+0x46>

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
   81fe8:	4b14      	ldr	r3, [pc, #80]	; (8203c <prvIdleTask+0x60>)
   81fea:	4798      	blx	r3
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   81fec:	4b14      	ldr	r3, [pc, #80]	; (82040 <prvIdleTask+0x64>)
   81fee:	681c      	ldr	r4, [r3, #0]
			xTaskResumeAll();
   81ff0:	4b14      	ldr	r3, [pc, #80]	; (82044 <prvIdleTask+0x68>)
   81ff2:	4798      	blx	r3

			if( xListIsEmpty == pdFALSE )
   81ff4:	b1ac      	cbz	r4, 82022 <prvIdleTask+0x46>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
   81ff6:	4b14      	ldr	r3, [pc, #80]	; (82048 <prvIdleTask+0x6c>)
   81ff8:	4798      	blx	r3
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
   81ffa:	4b11      	ldr	r3, [pc, #68]	; (82040 <prvIdleTask+0x64>)
   81ffc:	68db      	ldr	r3, [r3, #12]
   81ffe:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xGenericListItem ) );
   82000:	1d20      	adds	r0, r4, #4
   82002:	4b12      	ldr	r3, [pc, #72]	; (8204c <prvIdleTask+0x70>)
   82004:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
   82006:	4b12      	ldr	r3, [pc, #72]	; (82050 <prvIdleTask+0x74>)
   82008:	681a      	ldr	r2, [r3, #0]
   8200a:	3a01      	subs	r2, #1
   8200c:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
   8200e:	682b      	ldr	r3, [r5, #0]
   82010:	3b01      	subs	r3, #1
   82012:	602b      	str	r3, [r5, #0]
				}
				taskEXIT_CRITICAL();
   82014:	4b0f      	ldr	r3, [pc, #60]	; (82054 <prvIdleTask+0x78>)
   82016:	4798      	blx	r3
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
   82018:	6b20      	ldr	r0, [r4, #48]	; 0x30
   8201a:	4f0f      	ldr	r7, [pc, #60]	; (82058 <prvIdleTask+0x7c>)
   8201c:	47b8      	blx	r7
		vPortFree( pxTCB );
   8201e:	4620      	mov	r0, r4
   82020:	47b8      	blx	r7
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   82022:	682b      	ldr	r3, [r5, #0]
   82024:	2b00      	cmp	r3, #0
   82026:	d1df      	bne.n	81fe8 <prvIdleTask+0xc>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
   82028:	6833      	ldr	r3, [r6, #0]
   8202a:	2b01      	cmp	r3, #1
   8202c:	d9f9      	bls.n	82022 <prvIdleTask+0x46>
			{
				taskYIELD();
   8202e:	47c0      	blx	r8
   82030:	e7f7      	b.n	82022 <prvIdleTask+0x46>
   82032:	bf00      	nop
   82034:	2007ab8c 	.word	0x2007ab8c
   82038:	2007abbc 	.word	0x2007abbc
   8203c:	00081cad 	.word	0x00081cad
   82040:	2007ab90 	.word	0x2007ab90
   82044:	00081dfd 	.word	0x00081dfd
   82048:	00081261 	.word	0x00081261
   8204c:	000811c9 	.word	0x000811c9
   82050:	2007ac64 	.word	0x2007ac64
   82054:	00081281 	.word	0x00081281
   82058:	00081471 	.word	0x00081471
   8205c:	00081241 	.word	0x00081241

00082060 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   82060:	b508      	push	{r3, lr}
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
   82062:	4b1d      	ldr	r3, [pc, #116]	; (820d8 <vTaskSwitchContext+0x78>)
   82064:	681b      	ldr	r3, [r3, #0]
   82066:	b95b      	cbnz	r3, 82080 <vTaskSwitchContext+0x20>
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   82068:	4b1c      	ldr	r3, [pc, #112]	; (820dc <vTaskSwitchContext+0x7c>)
   8206a:	681b      	ldr	r3, [r3, #0]
   8206c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   82070:	009b      	lsls	r3, r3, #2
   82072:	4a1b      	ldr	r2, [pc, #108]	; (820e0 <vTaskSwitchContext+0x80>)
   82074:	58d3      	ldr	r3, [r2, r3]
   82076:	b9cb      	cbnz	r3, 820ac <vTaskSwitchContext+0x4c>
   82078:	4b18      	ldr	r3, [pc, #96]	; (820dc <vTaskSwitchContext+0x7c>)
   8207a:	681b      	ldr	r3, [r3, #0]
   8207c:	b953      	cbnz	r3, 82094 <vTaskSwitchContext+0x34>
   8207e:	e005      	b.n	8208c <vTaskSwitchContext+0x2c>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
   82080:	2201      	movs	r2, #1
   82082:	4b18      	ldr	r3, [pc, #96]	; (820e4 <vTaskSwitchContext+0x84>)
   82084:	601a      	str	r2, [r3, #0]
   82086:	bd08      	pop	{r3, pc}
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   82088:	681a      	ldr	r2, [r3, #0]
   8208a:	b92a      	cbnz	r2, 82098 <vTaskSwitchContext+0x38>
   8208c:	4b16      	ldr	r3, [pc, #88]	; (820e8 <vTaskSwitchContext+0x88>)
   8208e:	4798      	blx	r3
   82090:	bf00      	nop
   82092:	e7fd      	b.n	82090 <vTaskSwitchContext+0x30>
   82094:	4b11      	ldr	r3, [pc, #68]	; (820dc <vTaskSwitchContext+0x7c>)
   82096:	4912      	ldr	r1, [pc, #72]	; (820e0 <vTaskSwitchContext+0x80>)
   82098:	681a      	ldr	r2, [r3, #0]
   8209a:	3a01      	subs	r2, #1
   8209c:	601a      	str	r2, [r3, #0]
   8209e:	681a      	ldr	r2, [r3, #0]
   820a0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   820a4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
   820a8:	2a00      	cmp	r2, #0
   820aa:	d0ed      	beq.n	82088 <vTaskSwitchContext+0x28>
   820ac:	4b0b      	ldr	r3, [pc, #44]	; (820dc <vTaskSwitchContext+0x7c>)
   820ae:	681b      	ldr	r3, [r3, #0]
   820b0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   820b4:	4a0a      	ldr	r2, [pc, #40]	; (820e0 <vTaskSwitchContext+0x80>)
   820b6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   820ba:	685a      	ldr	r2, [r3, #4]
   820bc:	6852      	ldr	r2, [r2, #4]
   820be:	605a      	str	r2, [r3, #4]
   820c0:	f103 0108 	add.w	r1, r3, #8
   820c4:	428a      	cmp	r2, r1
   820c6:	bf04      	itt	eq
   820c8:	6852      	ldreq	r2, [r2, #4]
   820ca:	605a      	streq	r2, [r3, #4]
   820cc:	685b      	ldr	r3, [r3, #4]
   820ce:	68da      	ldr	r2, [r3, #12]
   820d0:	4b06      	ldr	r3, [pc, #24]	; (820ec <vTaskSwitchContext+0x8c>)
   820d2:	601a      	str	r2, [r3, #0]
   820d4:	bd08      	pop	{r3, pc}
   820d6:	bf00      	nop
   820d8:	2007ac20 	.word	0x2007ac20
   820dc:	2007abb8 	.word	0x2007abb8
   820e0:	2007abbc 	.word	0x2007abbc
   820e4:	2007ac60 	.word	0x2007ac60
   820e8:	00081251 	.word	0x00081251
   820ec:	2007ac24 	.word	0x2007ac24

000820f0 <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
   820f0:	b538      	push	{r3, r4, r5, lr}
   820f2:	460c      	mov	r4, r1
portTickType xTimeToWake;

	configASSERT( pxEventList );
   820f4:	b918      	cbnz	r0, 820fe <vTaskPlaceOnEventList+0xe>
   820f6:	4b0e      	ldr	r3, [pc, #56]	; (82130 <vTaskPlaceOnEventList+0x40>)
   820f8:	4798      	blx	r3
   820fa:	bf00      	nop
   820fc:	e7fd      	b.n	820fa <vTaskPlaceOnEventList+0xa>
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   820fe:	4d0d      	ldr	r5, [pc, #52]	; (82134 <vTaskPlaceOnEventList+0x44>)
   82100:	6829      	ldr	r1, [r5, #0]
   82102:	3118      	adds	r1, #24
   82104:	4b0c      	ldr	r3, [pc, #48]	; (82138 <vTaskPlaceOnEventList+0x48>)
   82106:	4798      	blx	r3

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   82108:	6828      	ldr	r0, [r5, #0]
   8210a:	3004      	adds	r0, #4
   8210c:	4b0b      	ldr	r3, [pc, #44]	; (8213c <vTaskPlaceOnEventList+0x4c>)
   8210e:	4798      	blx	r3
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
   82110:	f1b4 3fff 	cmp.w	r4, #4294967295
   82114:	d105      	bne.n	82122 <vTaskPlaceOnEventList+0x32>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   82116:	6829      	ldr	r1, [r5, #0]
   82118:	4809      	ldr	r0, [pc, #36]	; (82140 <vTaskPlaceOnEventList+0x50>)
   8211a:	3104      	adds	r1, #4
   8211c:	4b09      	ldr	r3, [pc, #36]	; (82144 <vTaskPlaceOnEventList+0x54>)
   8211e:	4798      	blx	r3
   82120:	bd38      	pop	{r3, r4, r5, pc}
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
   82122:	4b09      	ldr	r3, [pc, #36]	; (82148 <vTaskPlaceOnEventList+0x58>)
   82124:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
   82126:	4420      	add	r0, r4
   82128:	4b08      	ldr	r3, [pc, #32]	; (8214c <vTaskPlaceOnEventList+0x5c>)
   8212a:	4798      	blx	r3
   8212c:	bd38      	pop	{r3, r4, r5, pc}
   8212e:	bf00      	nop
   82130:	00081251 	.word	0x00081251
   82134:	2007ac24 	.word	0x2007ac24
   82138:	0008118d 	.word	0x0008118d
   8213c:	000811c9 	.word	0x000811c9
   82140:	2007ab70 	.word	0x2007ab70
   82144:	00081171 	.word	0x00081171
   82148:	2007ac40 	.word	0x2007ac40
   8214c:	000819e5 	.word	0x000819e5

00082150 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait )
	{
   82150:	b538      	push	{r3, r4, r5, lr}
   82152:	460d      	mov	r5, r1
	portTickType xTimeToWake;

		configASSERT( pxEventList );
   82154:	b918      	cbnz	r0, 8215e <vTaskPlaceOnEventListRestricted+0xe>
   82156:	4b09      	ldr	r3, [pc, #36]	; (8217c <vTaskPlaceOnEventListRestricted+0x2c>)
   82158:	4798      	blx	r3
   8215a:	bf00      	nop
   8215c:	e7fd      	b.n	8215a <vTaskPlaceOnEventListRestricted+0xa>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   8215e:	4c08      	ldr	r4, [pc, #32]	; (82180 <vTaskPlaceOnEventListRestricted+0x30>)
   82160:	6821      	ldr	r1, [r4, #0]
   82162:	3118      	adds	r1, #24
   82164:	4b07      	ldr	r3, [pc, #28]	; (82184 <vTaskPlaceOnEventListRestricted+0x34>)
   82166:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   82168:	6820      	ldr	r0, [r4, #0]
   8216a:	3004      	adds	r0, #4
   8216c:	4b06      	ldr	r3, [pc, #24]	; (82188 <vTaskPlaceOnEventListRestricted+0x38>)
   8216e:	4798      	blx	r3
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
   82170:	4b06      	ldr	r3, [pc, #24]	; (8218c <vTaskPlaceOnEventListRestricted+0x3c>)
   82172:	6818      	ldr	r0, [r3, #0]
		
		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
   82174:	4428      	add	r0, r5
   82176:	4b06      	ldr	r3, [pc, #24]	; (82190 <vTaskPlaceOnEventListRestricted+0x40>)
   82178:	4798      	blx	r3
   8217a:	bd38      	pop	{r3, r4, r5, pc}
   8217c:	00081251 	.word	0x00081251
   82180:	2007ac24 	.word	0x2007ac24
   82184:	00081171 	.word	0x00081171
   82188:	000811c9 	.word	0x000811c9
   8218c:	2007ac40 	.word	0x2007ac40
   82190:	000819e5 	.word	0x000819e5

00082194 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
   82194:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   82196:	68c3      	ldr	r3, [r0, #12]
   82198:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
   8219a:	b91c      	cbnz	r4, 821a4 <xTaskRemoveFromEventList+0x10>
   8219c:	4b16      	ldr	r3, [pc, #88]	; (821f8 <xTaskRemoveFromEventList+0x64>)
   8219e:	4798      	blx	r3
   821a0:	bf00      	nop
   821a2:	e7fd      	b.n	821a0 <xTaskRemoveFromEventList+0xc>
	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   821a4:	f104 0518 	add.w	r5, r4, #24
   821a8:	4628      	mov	r0, r5
   821aa:	4b14      	ldr	r3, [pc, #80]	; (821fc <xTaskRemoveFromEventList+0x68>)
   821ac:	4798      	blx	r3

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   821ae:	4b14      	ldr	r3, [pc, #80]	; (82200 <xTaskRemoveFromEventList+0x6c>)
   821b0:	681b      	ldr	r3, [r3, #0]
   821b2:	b99b      	cbnz	r3, 821dc <xTaskRemoveFromEventList+0x48>
	{
		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
   821b4:	1d25      	adds	r5, r4, #4
   821b6:	4628      	mov	r0, r5
   821b8:	4b10      	ldr	r3, [pc, #64]	; (821fc <xTaskRemoveFromEventList+0x68>)
   821ba:	4798      	blx	r3
		prvAddTaskToReadyQueue( pxUnblockedTCB );
   821bc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   821be:	4a11      	ldr	r2, [pc, #68]	; (82204 <xTaskRemoveFromEventList+0x70>)
   821c0:	6812      	ldr	r2, [r2, #0]
   821c2:	4293      	cmp	r3, r2
   821c4:	bf84      	itt	hi
   821c6:	4a0f      	ldrhi	r2, [pc, #60]	; (82204 <xTaskRemoveFromEventList+0x70>)
   821c8:	6013      	strhi	r3, [r2, #0]
   821ca:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   821ce:	480e      	ldr	r0, [pc, #56]	; (82208 <xTaskRemoveFromEventList+0x74>)
   821d0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   821d4:	4629      	mov	r1, r5
   821d6:	4b0d      	ldr	r3, [pc, #52]	; (8220c <xTaskRemoveFromEventList+0x78>)
   821d8:	4798      	blx	r3
   821da:	e003      	b.n	821e4 <xTaskRemoveFromEventList+0x50>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   821dc:	480c      	ldr	r0, [pc, #48]	; (82210 <xTaskRemoveFromEventList+0x7c>)
   821de:	4629      	mov	r1, r5
   821e0:	4b0a      	ldr	r3, [pc, #40]	; (8220c <xTaskRemoveFromEventList+0x78>)
   821e2:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
   821e4:	4b0b      	ldr	r3, [pc, #44]	; (82214 <xTaskRemoveFromEventList+0x80>)
   821e6:	681b      	ldr	r3, [r3, #0]
   821e8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   821ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
   821ec:	4298      	cmp	r0, r3
   821ee:	bf34      	ite	cc
   821f0:	2000      	movcc	r0, #0
   821f2:	2001      	movcs	r0, #1
   821f4:	bd38      	pop	{r3, r4, r5, pc}
   821f6:	bf00      	nop
   821f8:	00081251 	.word	0x00081251
   821fc:	000811c9 	.word	0x000811c9
   82200:	2007ac20 	.word	0x2007ac20
   82204:	2007abb8 	.word	0x2007abb8
   82208:	2007abbc 	.word	0x2007abbc
   8220c:	00081171 	.word	0x00081171
   82210:	2007ac28 	.word	0x2007ac28
   82214:	2007ac24 	.word	0x2007ac24

00082218 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
   82218:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
   8221a:	b918      	cbnz	r0, 82224 <vTaskSetTimeOutState+0xc>
   8221c:	4b05      	ldr	r3, [pc, #20]	; (82234 <vTaskSetTimeOutState+0x1c>)
   8221e:	4798      	blx	r3
   82220:	bf00      	nop
   82222:	e7fd      	b.n	82220 <vTaskSetTimeOutState+0x8>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   82224:	4a04      	ldr	r2, [pc, #16]	; (82238 <vTaskSetTimeOutState+0x20>)
   82226:	6812      	ldr	r2, [r2, #0]
   82228:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   8222a:	4a04      	ldr	r2, [pc, #16]	; (8223c <vTaskSetTimeOutState+0x24>)
   8222c:	6812      	ldr	r2, [r2, #0]
   8222e:	6042      	str	r2, [r0, #4]
   82230:	bd08      	pop	{r3, pc}
   82232:	bf00      	nop
   82234:	00081251 	.word	0x00081251
   82238:	2007ac3c 	.word	0x2007ac3c
   8223c:	2007ac40 	.word	0x2007ac40

00082240 <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
   82240:	b538      	push	{r3, r4, r5, lr}
   82242:	460d      	mov	r5, r1
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
   82244:	4604      	mov	r4, r0
   82246:	b918      	cbnz	r0, 82250 <xTaskCheckForTimeOut+0x10>
   82248:	4b18      	ldr	r3, [pc, #96]	; (822ac <xTaskCheckForTimeOut+0x6c>)
   8224a:	4798      	blx	r3
   8224c:	bf00      	nop
   8224e:	e7fd      	b.n	8224c <xTaskCheckForTimeOut+0xc>
	configASSERT( pxTicksToWait );
   82250:	b919      	cbnz	r1, 8225a <xTaskCheckForTimeOut+0x1a>
   82252:	4b16      	ldr	r3, [pc, #88]	; (822ac <xTaskCheckForTimeOut+0x6c>)
   82254:	4798      	blx	r3
   82256:	bf00      	nop
   82258:	e7fd      	b.n	82256 <xTaskCheckForTimeOut+0x16>

	taskENTER_CRITICAL();
   8225a:	4b15      	ldr	r3, [pc, #84]	; (822b0 <xTaskCheckForTimeOut+0x70>)
   8225c:	4798      	blx	r3
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
   8225e:	682b      	ldr	r3, [r5, #0]
   82260:	f1b3 3fff 	cmp.w	r3, #4294967295
   82264:	d019      	beq.n	8229a <xTaskCheckForTimeOut+0x5a>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
   82266:	4a13      	ldr	r2, [pc, #76]	; (822b4 <xTaskCheckForTimeOut+0x74>)
   82268:	6811      	ldr	r1, [r2, #0]
   8226a:	6822      	ldr	r2, [r4, #0]
   8226c:	428a      	cmp	r2, r1
   8226e:	d004      	beq.n	8227a <xTaskCheckForTimeOut+0x3a>
   82270:	4a11      	ldr	r2, [pc, #68]	; (822b8 <xTaskCheckForTimeOut+0x78>)
   82272:	6811      	ldr	r1, [r2, #0]
   82274:	6862      	ldr	r2, [r4, #4]
   82276:	428a      	cmp	r2, r1
   82278:	d911      	bls.n	8229e <xTaskCheckForTimeOut+0x5e>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
   8227a:	4a0f      	ldr	r2, [pc, #60]	; (822b8 <xTaskCheckForTimeOut+0x78>)
   8227c:	6811      	ldr	r1, [r2, #0]
   8227e:	6862      	ldr	r2, [r4, #4]
   82280:	1a89      	subs	r1, r1, r2
   82282:	428b      	cmp	r3, r1
   82284:	d90d      	bls.n	822a2 <xTaskCheckForTimeOut+0x62>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
   82286:	490c      	ldr	r1, [pc, #48]	; (822b8 <xTaskCheckForTimeOut+0x78>)
   82288:	6809      	ldr	r1, [r1, #0]
   8228a:	1a52      	subs	r2, r2, r1
   8228c:	4413      	add	r3, r2
   8228e:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
   82290:	4620      	mov	r0, r4
   82292:	4b0a      	ldr	r3, [pc, #40]	; (822bc <xTaskCheckForTimeOut+0x7c>)
   82294:	4798      	blx	r3
			xReturn = pdFALSE;
   82296:	2400      	movs	r4, #0
   82298:	e004      	b.n	822a4 <xTaskCheckForTimeOut+0x64>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
   8229a:	2400      	movs	r4, #0
   8229c:	e002      	b.n	822a4 <xTaskCheckForTimeOut+0x64>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
   8229e:	2401      	movs	r4, #1
   822a0:	e000      	b.n	822a4 <xTaskCheckForTimeOut+0x64>
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
   822a2:	2401      	movs	r4, #1
		}
	}
	taskEXIT_CRITICAL();
   822a4:	4b06      	ldr	r3, [pc, #24]	; (822c0 <xTaskCheckForTimeOut+0x80>)
   822a6:	4798      	blx	r3

	return xReturn;
}
   822a8:	4620      	mov	r0, r4
   822aa:	bd38      	pop	{r3, r4, r5, pc}
   822ac:	00081251 	.word	0x00081251
   822b0:	00081261 	.word	0x00081261
   822b4:	2007ac3c 	.word	0x2007ac3c
   822b8:	2007ac40 	.word	0x2007ac40
   822bc:	00082219 	.word	0x00082219
   822c0:	00081281 	.word	0x00081281

000822c4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xMissedYield = pdTRUE;
   822c4:	2201      	movs	r2, #1
   822c6:	4b01      	ldr	r3, [pc, #4]	; (822cc <vTaskMissedYield+0x8>)
   822c8:	601a      	str	r2, [r3, #0]
   822ca:	4770      	bx	lr
   822cc:	2007ac60 	.word	0x2007ac60

000822d0 <xTaskGetCurrentTaskHandle>:
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
   822d0:	4b01      	ldr	r3, [pc, #4]	; (822d8 <xTaskGetCurrentTaskHandle+0x8>)
   822d2:	6818      	ldr	r0, [r3, #0]

		return xReturn;
	}
   822d4:	4770      	bx	lr
   822d6:	bf00      	nop
   822d8:	2007ac24 	.word	0x2007ac24

000822dc <xTaskGetSchedulerState>:

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
   822dc:	4b05      	ldr	r3, [pc, #20]	; (822f4 <xTaskGetSchedulerState+0x18>)
   822de:	681b      	ldr	r3, [r3, #0]
   822e0:	b133      	cbz	r3, 822f0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   822e2:	4b05      	ldr	r3, [pc, #20]	; (822f8 <xTaskGetSchedulerState+0x1c>)
   822e4:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
   822e6:	2b00      	cmp	r3, #0
   822e8:	bf14      	ite	ne
   822ea:	2002      	movne	r0, #2
   822ec:	2001      	moveq	r0, #1
   822ee:	4770      	bx	lr
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   822f0:	2000      	movs	r0, #0
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
   822f2:	4770      	bx	lr
   822f4:	2007ab88 	.word	0x2007ab88
   822f8:	2007ac20 	.word	0x2007ac20

000822fc <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
   822fc:	b538      	push	{r3, r4, r5, lr}
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
   822fe:	4604      	mov	r4, r0
   82300:	2800      	cmp	r0, #0
   82302:	d02e      	beq.n	82362 <vTaskPriorityInherit+0x66>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
   82304:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   82306:	4a17      	ldr	r2, [pc, #92]	; (82364 <vTaskPriorityInherit+0x68>)
   82308:	6812      	ldr	r2, [r2, #0]
   8230a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
   8230c:	4293      	cmp	r3, r2
   8230e:	d228      	bcs.n	82362 <vTaskPriorityInherit+0x66>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
   82310:	4a14      	ldr	r2, [pc, #80]	; (82364 <vTaskPriorityInherit+0x68>)
   82312:	6812      	ldr	r2, [r2, #0]
   82314:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
   82316:	f1c2 0205 	rsb	r2, r2, #5
   8231a:	6182      	str	r2, [r0, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
   8231c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   82320:	4a11      	ldr	r2, [pc, #68]	; (82368 <vTaskPriorityInherit+0x6c>)
   82322:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   82326:	6942      	ldr	r2, [r0, #20]
   82328:	429a      	cmp	r2, r3
   8232a:	d116      	bne.n	8235a <vTaskPriorityInherit+0x5e>
				{
					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   8232c:	1d05      	adds	r5, r0, #4
   8232e:	4628      	mov	r0, r5
   82330:	4b0e      	ldr	r3, [pc, #56]	; (8236c <vTaskPriorityInherit+0x70>)
   82332:	4798      	blx	r3
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   82334:	4b0b      	ldr	r3, [pc, #44]	; (82364 <vTaskPriorityInherit+0x68>)
   82336:	681b      	ldr	r3, [r3, #0]
   82338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   8233a:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyQueue( pxTCB );
   8233c:	4a0c      	ldr	r2, [pc, #48]	; (82370 <vTaskPriorityInherit+0x74>)
   8233e:	6812      	ldr	r2, [r2, #0]
   82340:	4293      	cmp	r3, r2
   82342:	bf84      	itt	hi
   82344:	4a0a      	ldrhi	r2, [pc, #40]	; (82370 <vTaskPriorityInherit+0x74>)
   82346:	6013      	strhi	r3, [r2, #0]
   82348:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   8234c:	4806      	ldr	r0, [pc, #24]	; (82368 <vTaskPriorityInherit+0x6c>)
   8234e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   82352:	4629      	mov	r1, r5
   82354:	4b07      	ldr	r3, [pc, #28]	; (82374 <vTaskPriorityInherit+0x78>)
   82356:	4798      	blx	r3
   82358:	bd38      	pop	{r3, r4, r5, pc}
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   8235a:	4b02      	ldr	r3, [pc, #8]	; (82364 <vTaskPriorityInherit+0x68>)
   8235c:	681b      	ldr	r3, [r3, #0]
   8235e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   82360:	62c3      	str	r3, [r0, #44]	; 0x2c
   82362:	bd38      	pop	{r3, r4, r5, pc}
   82364:	2007ac24 	.word	0x2007ac24
   82368:	2007abbc 	.word	0x2007abbc
   8236c:	000811c9 	.word	0x000811c9
   82370:	2007abb8 	.word	0x2007abb8
   82374:	00081171 	.word	0x00081171

00082378 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
   82378:	b538      	push	{r3, r4, r5, lr}
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
   8237a:	4604      	mov	r4, r0
   8237c:	b1d0      	cbz	r0, 823b4 <vTaskPriorityDisinherit+0x3c>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   8237e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   82380:	6c83      	ldr	r3, [r0, #72]	; 0x48
   82382:	429a      	cmp	r2, r3
   82384:	d016      	beq.n	823b4 <vTaskPriorityDisinherit+0x3c>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   82386:	1d05      	adds	r5, r0, #4
   82388:	4628      	mov	r0, r5
   8238a:	4b0b      	ldr	r3, [pc, #44]	; (823b8 <vTaskPriorityDisinherit+0x40>)
   8238c:	4798      	blx	r3
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
   8238e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   82390:	62e3      	str	r3, [r4, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
   82392:	f1c3 0205 	rsb	r2, r3, #5
   82396:	61a2      	str	r2, [r4, #24]
				prvAddTaskToReadyQueue( pxTCB );
   82398:	4a08      	ldr	r2, [pc, #32]	; (823bc <vTaskPriorityDisinherit+0x44>)
   8239a:	6812      	ldr	r2, [r2, #0]
   8239c:	4293      	cmp	r3, r2
   8239e:	bf84      	itt	hi
   823a0:	4a06      	ldrhi	r2, [pc, #24]	; (823bc <vTaskPriorityDisinherit+0x44>)
   823a2:	6013      	strhi	r3, [r2, #0]
   823a4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   823a8:	4805      	ldr	r0, [pc, #20]	; (823c0 <vTaskPriorityDisinherit+0x48>)
   823aa:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   823ae:	4629      	mov	r1, r5
   823b0:	4b04      	ldr	r3, [pc, #16]	; (823c4 <vTaskPriorityDisinherit+0x4c>)
   823b2:	4798      	blx	r3
   823b4:	bd38      	pop	{r3, r4, r5, pc}
   823b6:	bf00      	nop
   823b8:	000811c9 	.word	0x000811c9
   823bc:	2007abb8 	.word	0x2007abb8
   823c0:	2007abbc 	.word	0x2007abbc
   823c4:	00081171 	.word	0x00081171

000823c8 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
   823c8:	b510      	push	{r4, lr}
   823ca:	4604      	mov	r4, r0
portBASE_TYPE xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   823cc:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   823ce:	6120      	str	r0, [r4, #16]

	if( xNextExpiryTime <= xTimeNow )
   823d0:	4291      	cmp	r1, r2
   823d2:	d80a      	bhi.n	823ea <prvInsertTimerInActiveList+0x22>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
   823d4:	1ad2      	subs	r2, r2, r3
   823d6:	6981      	ldr	r1, [r0, #24]
   823d8:	428a      	cmp	r2, r1
   823da:	d211      	bcs.n	82400 <prvInsertTimerInActiveList+0x38>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   823dc:	4b0a      	ldr	r3, [pc, #40]	; (82408 <prvInsertTimerInActiveList+0x40>)
   823de:	6818      	ldr	r0, [r3, #0]
   823e0:	1d21      	adds	r1, r4, #4
   823e2:	4b0a      	ldr	r3, [pc, #40]	; (8240c <prvInsertTimerInActiveList+0x44>)
   823e4:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
   823e6:	2000      	movs	r0, #0
   823e8:	bd10      	pop	{r4, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   823ea:	429a      	cmp	r2, r3
   823ec:	d201      	bcs.n	823f2 <prvInsertTimerInActiveList+0x2a>
   823ee:	4299      	cmp	r1, r3
   823f0:	d208      	bcs.n	82404 <prvInsertTimerInActiveList+0x3c>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   823f2:	4b07      	ldr	r3, [pc, #28]	; (82410 <prvInsertTimerInActiveList+0x48>)
   823f4:	6818      	ldr	r0, [r3, #0]
   823f6:	1d21      	adds	r1, r4, #4
   823f8:	4b04      	ldr	r3, [pc, #16]	; (8240c <prvInsertTimerInActiveList+0x44>)
   823fa:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
   823fc:	2000      	movs	r0, #0
   823fe:	bd10      	pop	{r4, pc}
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   82400:	2001      	movs	r0, #1
   82402:	bd10      	pop	{r4, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   82404:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
   82406:	bd10      	pop	{r4, pc}
   82408:	2007aca0 	.word	0x2007aca0
   8240c:	0008118d 	.word	0x0008118d
   82410:	2007ac6c 	.word	0x2007ac6c

00082414 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   82414:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   82416:	4b0d      	ldr	r3, [pc, #52]	; (8244c <prvCheckForValidListAndQueue+0x38>)
   82418:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   8241a:	4b0d      	ldr	r3, [pc, #52]	; (82450 <prvCheckForValidListAndQueue+0x3c>)
   8241c:	681b      	ldr	r3, [r3, #0]
   8241e:	b98b      	cbnz	r3, 82444 <prvCheckForValidListAndQueue+0x30>
		{
			vListInitialise( &xActiveTimerList1 );
   82420:	4d0c      	ldr	r5, [pc, #48]	; (82454 <prvCheckForValidListAndQueue+0x40>)
   82422:	4628      	mov	r0, r5
   82424:	4e0c      	ldr	r6, [pc, #48]	; (82458 <prvCheckForValidListAndQueue+0x44>)
   82426:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
   82428:	4c0c      	ldr	r4, [pc, #48]	; (8245c <prvCheckForValidListAndQueue+0x48>)
   8242a:	4620      	mov	r0, r4
   8242c:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
   8242e:	4b0c      	ldr	r3, [pc, #48]	; (82460 <prvCheckForValidListAndQueue+0x4c>)
   82430:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   82432:	4b0c      	ldr	r3, [pc, #48]	; (82464 <prvCheckForValidListAndQueue+0x50>)
   82434:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
   82436:	2005      	movs	r0, #5
   82438:	210c      	movs	r1, #12
   8243a:	2200      	movs	r2, #0
   8243c:	4b0a      	ldr	r3, [pc, #40]	; (82468 <prvCheckForValidListAndQueue+0x54>)
   8243e:	4798      	blx	r3
   82440:	4b03      	ldr	r3, [pc, #12]	; (82450 <prvCheckForValidListAndQueue+0x3c>)
   82442:	6018      	str	r0, [r3, #0]
		}
	}
	taskEXIT_CRITICAL();
   82444:	4b09      	ldr	r3, [pc, #36]	; (8246c <prvCheckForValidListAndQueue+0x58>)
   82446:	4798      	blx	r3
   82448:	bd70      	pop	{r4, r5, r6, pc}
   8244a:	bf00      	nop
   8244c:	00081261 	.word	0x00081261
   82450:	2007ac9c 	.word	0x2007ac9c
   82454:	2007ac70 	.word	0x2007ac70
   82458:	00081151 	.word	0x00081151
   8245c:	2007ac84 	.word	0x2007ac84
   82460:	2007ac6c 	.word	0x2007ac6c
   82464:	2007aca0 	.word	0x2007aca0
   82468:	00081639 	.word	0x00081639
   8246c:	00081281 	.word	0x00081281

00082470 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
   82470:	b510      	push	{r4, lr}
   82472:	b084      	sub	sp, #16

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   82474:	4b0b      	ldr	r3, [pc, #44]	; (824a4 <xTimerCreateTimerTask+0x34>)
   82476:	4798      	blx	r3

	if( xTimerQueue != NULL )
   82478:	4b0b      	ldr	r3, [pc, #44]	; (824a8 <xTimerCreateTimerTask+0x38>)
   8247a:	681b      	ldr	r3, [r3, #0]
   8247c:	b163      	cbz	r3, 82498 <xTimerCreateTimerTask+0x28>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
   8247e:	2304      	movs	r3, #4
   82480:	9300      	str	r3, [sp, #0]
   82482:	2300      	movs	r3, #0
   82484:	9301      	str	r3, [sp, #4]
   82486:	9302      	str	r3, [sp, #8]
   82488:	9303      	str	r3, [sp, #12]
   8248a:	4808      	ldr	r0, [pc, #32]	; (824ac <xTimerCreateTimerTask+0x3c>)
   8248c:	4908      	ldr	r1, [pc, #32]	; (824b0 <xTimerCreateTimerTask+0x40>)
   8248e:	f44f 7282 	mov.w	r2, #260	; 0x104
   82492:	4c08      	ldr	r4, [pc, #32]	; (824b4 <xTimerCreateTimerTask+0x44>)
   82494:	47a0      	blx	r4
		}
		#endif
	}

	configASSERT( xReturn );
   82496:	b918      	cbnz	r0, 824a0 <xTimerCreateTimerTask+0x30>
   82498:	4b07      	ldr	r3, [pc, #28]	; (824b8 <xTimerCreateTimerTask+0x48>)
   8249a:	4798      	blx	r3
   8249c:	bf00      	nop
   8249e:	e7fd      	b.n	8249c <xTimerCreateTimerTask+0x2c>
	return xReturn;
}
   824a0:	b004      	add	sp, #16
   824a2:	bd10      	pop	{r4, pc}
   824a4:	00082415 	.word	0x00082415
   824a8:	2007ac9c 	.word	0x2007ac9c
   824ac:	000825c5 	.word	0x000825c5
   824b0:	00086930 	.word	0x00086930
   824b4:	00081a3d 	.word	0x00081a3d
   824b8:	00081251 	.word	0x00081251

000824bc <xTimerGenericCommand>:
	return ( xTimerHandle ) pxNewTimer;
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
   824bc:	b510      	push	{r4, lr}
   824be:	b084      	sub	sp, #16
portBASE_TYPE xReturn = pdFAIL;
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   824c0:	4c0f      	ldr	r4, [pc, #60]	; (82500 <xTimerGenericCommand+0x44>)
   824c2:	6824      	ldr	r4, [r4, #0]
   824c4:	b1c4      	cbz	r4, 824f8 <xTimerGenericCommand+0x3c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   824c6:	9101      	str	r1, [sp, #4]
		xMessage.xMessageValue = xOptionalValue;
   824c8:	9202      	str	r2, [sp, #8]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
   824ca:	9003      	str	r0, [sp, #12]

		if( pxHigherPriorityTaskWoken == NULL )
   824cc:	b96b      	cbnz	r3, 824ea <xTimerGenericCommand+0x2e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   824ce:	4b0d      	ldr	r3, [pc, #52]	; (82504 <xTimerGenericCommand+0x48>)
   824d0:	4798      	blx	r3
   824d2:	2801      	cmp	r0, #1
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
   824d4:	4b0a      	ldr	r3, [pc, #40]	; (82500 <xTimerGenericCommand+0x44>)
   824d6:	6818      	ldr	r0, [r3, #0]
   824d8:	a901      	add	r1, sp, #4
   824da:	bf07      	ittee	eq
   824dc:	9a06      	ldreq	r2, [sp, #24]
   824de:	2300      	moveq	r3, #0
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   824e0:	2200      	movne	r2, #0
   824e2:	4613      	movne	r3, r2
   824e4:	4c08      	ldr	r4, [pc, #32]	; (82508 <xTimerGenericCommand+0x4c>)
   824e6:	47a0      	blx	r4
   824e8:	e007      	b.n	824fa <xTimerGenericCommand+0x3e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   824ea:	4620      	mov	r0, r4
   824ec:	a901      	add	r1, sp, #4
   824ee:	461a      	mov	r2, r3
   824f0:	2300      	movs	r3, #0
   824f2:	4c06      	ldr	r4, [pc, #24]	; (8250c <xTimerGenericCommand+0x50>)
   824f4:	47a0      	blx	r4
   824f6:	e000      	b.n	824fa <xTimerGenericCommand+0x3e>
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
portBASE_TYPE xReturn = pdFAIL;
   824f8:	2000      	movs	r0, #0

		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}

	return xReturn;
}
   824fa:	b004      	add	sp, #16
   824fc:	bd10      	pop	{r4, pc}
   824fe:	bf00      	nop
   82500:	2007ac9c 	.word	0x2007ac9c
   82504:	000822dd 	.word	0x000822dd
   82508:	00081691 	.word	0x00081691
   8250c:	000817ad 	.word	0x000817ad

00082510 <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
   82510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   82514:	b082      	sub	sp, #8
   82516:	4681      	mov	r9, r0
portTickType xTimeNow;
PRIVILEGED_DATA static portTickType xLastTime = ( portTickType ) 0U;

	xTimeNow = xTaskGetTickCount();
   82518:	4b22      	ldr	r3, [pc, #136]	; (825a4 <prvSampleTimeNow+0x94>)
   8251a:	4798      	blx	r3
   8251c:	4680      	mov	r8, r0

	if( xTimeNow < xLastTime )
   8251e:	4b22      	ldr	r3, [pc, #136]	; (825a8 <prvSampleTimeNow+0x98>)
   82520:	681b      	ldr	r3, [r3, #0]
   82522:	4298      	cmp	r0, r3
   82524:	d234      	bcs.n	82590 <prvSampleTimeNow+0x80>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   82526:	4e21      	ldr	r6, [pc, #132]	; (825ac <prvSampleTimeNow+0x9c>)
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
		uxListRemove( &( pxTimer->xTimerListItem ) );
   82528:	4f21      	ldr	r7, [pc, #132]	; (825b0 <prvSampleTimeNow+0xa0>)
   8252a:	e024      	b.n	82576 <prvSampleTimeNow+0x66>
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   8252c:	68da      	ldr	r2, [r3, #12]
   8252e:	f8d2 a000 	ldr.w	sl, [r2]

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   82532:	68db      	ldr	r3, [r3, #12]
   82534:	68dc      	ldr	r4, [r3, #12]
		uxListRemove( &( pxTimer->xTimerListItem ) );
   82536:	1d25      	adds	r5, r4, #4
   82538:	4628      	mov	r0, r5
   8253a:	47b8      	blx	r7

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   8253c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   8253e:	4620      	mov	r0, r4
   82540:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   82542:	69e3      	ldr	r3, [r4, #28]
   82544:	2b01      	cmp	r3, #1
   82546:	d116      	bne.n	82576 <prvSampleTimeNow+0x66>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   82548:	69a3      	ldr	r3, [r4, #24]
   8254a:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
   8254c:	4553      	cmp	r3, sl
   8254e:	d906      	bls.n	8255e <prvSampleTimeNow+0x4e>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   82550:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   82552:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   82554:	6830      	ldr	r0, [r6, #0]
   82556:	4629      	mov	r1, r5
   82558:	4b16      	ldr	r3, [pc, #88]	; (825b4 <prvSampleTimeNow+0xa4>)
   8255a:	4798      	blx	r3
   8255c:	e00b      	b.n	82576 <prvSampleTimeNow+0x66>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   8255e:	2300      	movs	r3, #0
   82560:	9300      	str	r3, [sp, #0]
   82562:	4620      	mov	r0, r4
   82564:	4619      	mov	r1, r3
   82566:	4652      	mov	r2, sl
   82568:	4c13      	ldr	r4, [pc, #76]	; (825b8 <prvSampleTimeNow+0xa8>)
   8256a:	47a0      	blx	r4
				configASSERT( xResult );
   8256c:	b918      	cbnz	r0, 82576 <prvSampleTimeNow+0x66>
   8256e:	4b13      	ldr	r3, [pc, #76]	; (825bc <prvSampleTimeNow+0xac>)
   82570:	4798      	blx	r3
   82572:	bf00      	nop
   82574:	e7fd      	b.n	82572 <prvSampleTimeNow+0x62>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   82576:	6833      	ldr	r3, [r6, #0]
   82578:	681a      	ldr	r2, [r3, #0]
   8257a:	2a00      	cmp	r2, #0
   8257c:	d1d6      	bne.n	8252c <prvSampleTimeNow+0x1c>
			}
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
   8257e:	4a10      	ldr	r2, [pc, #64]	; (825c0 <prvSampleTimeNow+0xb0>)
   82580:	6811      	ldr	r1, [r2, #0]
   82582:	480a      	ldr	r0, [pc, #40]	; (825ac <prvSampleTimeNow+0x9c>)
   82584:	6001      	str	r1, [r0, #0]
	pxOverflowTimerList = pxTemp;
   82586:	6013      	str	r3, [r2, #0]
	xTimeNow = xTaskGetTickCount();

	if( xTimeNow < xLastTime )
	{
		prvSwitchTimerLists( xLastTime );
		*pxTimerListsWereSwitched = pdTRUE;
   82588:	2301      	movs	r3, #1
   8258a:	f8c9 3000 	str.w	r3, [r9]
   8258e:	e002      	b.n	82596 <prvSampleTimeNow+0x86>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   82590:	2300      	movs	r3, #0
   82592:	f8c9 3000 	str.w	r3, [r9]
	}

	xLastTime = xTimeNow;
   82596:	4b04      	ldr	r3, [pc, #16]	; (825a8 <prvSampleTimeNow+0x98>)
   82598:	f8c3 8000 	str.w	r8, [r3]

	return xTimeNow;
}
   8259c:	4640      	mov	r0, r8
   8259e:	b002      	add	sp, #8
   825a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   825a4:	00081cbd 	.word	0x00081cbd
   825a8:	2007ac98 	.word	0x2007ac98
   825ac:	2007ac6c 	.word	0x2007ac6c
   825b0:	000811c9 	.word	0x000811c9
   825b4:	0008118d 	.word	0x0008118d
   825b8:	000824bd 	.word	0x000824bd
   825bc:	00081251 	.word	0x00081251
   825c0:	2007aca0 	.word	0x2007aca0

000825c4 <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   825c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   825c8:	b087      	sub	sp, #28
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
   825ca:	4d4d      	ldr	r5, [pc, #308]	; (82700 <prvTimerTask+0x13c>)
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
	uxListRemove( &( pxTimer->xTimerListItem ) );
   825cc:	f8df 8160 	ldr.w	r8, [pc, #352]	; 82730 <prvTimerTask+0x16c>
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   825d0:	4b4c      	ldr	r3, [pc, #304]	; (82704 <prvTimerTask+0x140>)
   825d2:	681b      	ldr	r3, [r3, #0]
   825d4:	681a      	ldr	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   825d6:	2a00      	cmp	r2, #0
   825d8:	f000 8087 	beq.w	826ea <prvTimerTask+0x126>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   825dc:	68db      	ldr	r3, [r3, #12]
   825de:	681e      	ldr	r6, [r3, #0]
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
   825e0:	4b49      	ldr	r3, [pc, #292]	; (82708 <prvTimerTask+0x144>)
   825e2:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   825e4:	a803      	add	r0, sp, #12
   825e6:	4b49      	ldr	r3, [pc, #292]	; (8270c <prvTimerTask+0x148>)
   825e8:	4798      	blx	r3
   825ea:	4607      	mov	r7, r0
		if( xTimerListsWereSwitched == pdFALSE )
   825ec:	9b03      	ldr	r3, [sp, #12]
   825ee:	2b00      	cmp	r3, #0
   825f0:	d130      	bne.n	82654 <prvTimerTask+0x90>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   825f2:	4286      	cmp	r6, r0
   825f4:	d824      	bhi.n	82640 <prvTimerTask+0x7c>
			{
				xTaskResumeAll();
   825f6:	4b46      	ldr	r3, [pc, #280]	; (82710 <prvTimerTask+0x14c>)
   825f8:	4798      	blx	r3
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   825fa:	4b42      	ldr	r3, [pc, #264]	; (82704 <prvTimerTask+0x140>)
   825fc:	681b      	ldr	r3, [r3, #0]
   825fe:	68db      	ldr	r3, [r3, #12]
   82600:	68dc      	ldr	r4, [r3, #12]
	uxListRemove( &( pxTimer->xTimerListItem ) );
   82602:	1d20      	adds	r0, r4, #4
   82604:	47c0      	blx	r8
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   82606:	69e3      	ldr	r3, [r4, #28]
   82608:	2b01      	cmp	r3, #1
   8260a:	d114      	bne.n	82636 <prvTimerTask+0x72>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
   8260c:	69a1      	ldr	r1, [r4, #24]
   8260e:	4620      	mov	r0, r4
   82610:	4431      	add	r1, r6
   82612:	463a      	mov	r2, r7
   82614:	4633      	mov	r3, r6
   82616:	4f3f      	ldr	r7, [pc, #252]	; (82714 <prvTimerTask+0x150>)
   82618:	47b8      	blx	r7
   8261a:	2801      	cmp	r0, #1
   8261c:	d10b      	bne.n	82636 <prvTimerTask+0x72>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   8261e:	2300      	movs	r3, #0
   82620:	9300      	str	r3, [sp, #0]
   82622:	4620      	mov	r0, r4
   82624:	4619      	mov	r1, r3
   82626:	4632      	mov	r2, r6
   82628:	4e3b      	ldr	r6, [pc, #236]	; (82718 <prvTimerTask+0x154>)
   8262a:	47b0      	blx	r6
			configASSERT( xResult );
   8262c:	b918      	cbnz	r0, 82636 <prvTimerTask+0x72>
   8262e:	4b3b      	ldr	r3, [pc, #236]	; (8271c <prvTimerTask+0x158>)
   82630:	4798      	blx	r3
   82632:	bf00      	nop
   82634:	e7fd      	b.n	82632 <prvTimerTask+0x6e>
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   82636:	6a63      	ldr	r3, [r4, #36]	; 0x24
   82638:	4620      	mov	r0, r4
   8263a:	4798      	blx	r3
   8263c:	e00c      	b.n	82658 <prvTimerTask+0x94>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
   8263e:	2600      	movs	r6, #0
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
   82640:	6828      	ldr	r0, [r5, #0]
   82642:	1bf1      	subs	r1, r6, r7
   82644:	4b36      	ldr	r3, [pc, #216]	; (82720 <prvTimerTask+0x15c>)
   82646:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
   82648:	4b31      	ldr	r3, [pc, #196]	; (82710 <prvTimerTask+0x14c>)
   8264a:	4798      	blx	r3
   8264c:	b920      	cbnz	r0, 82658 <prvTimerTask+0x94>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
   8264e:	4b35      	ldr	r3, [pc, #212]	; (82724 <prvTimerTask+0x160>)
   82650:	4798      	blx	r3
   82652:	e001      	b.n	82658 <prvTimerTask+0x94>
				}
			}
		}
		else
		{
			xTaskResumeAll();
   82654:	4b2e      	ldr	r3, [pc, #184]	; (82710 <prvTimerTask+0x14c>)
   82656:	4798      	blx	r3
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   82658:	a802      	add	r0, sp, #8
   8265a:	4b2c      	ldr	r3, [pc, #176]	; (8270c <prvTimerTask+0x148>)
   8265c:	4798      	blx	r3
   8265e:	4607      	mov	r7, r0

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
   82660:	4e31      	ldr	r6, [pc, #196]	; (82728 <prvTimerTask+0x164>)
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   82662:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 82714 <prvTimerTask+0x150>
   82666:	e038      	b.n	826da <prvTimerTask+0x116>
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
	{
		pxTimer = xMessage.pxTimer;
   82668:	9c05      	ldr	r4, [sp, #20]

		/* Is the timer already in a list of active timers?  When the command
		is trmCOMMAND_PROCESS_TIMER_OVERFLOW, the timer will be NULL as the
		command is to the task rather than to an individual timer. */
		if( pxTimer != NULL )
   8266a:	b11c      	cbz	r4, 82674 <prvTimerTask+0xb0>
		{
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
   8266c:	6961      	ldr	r1, [r4, #20]
   8266e:	b109      	cbz	r1, 82674 <prvTimerTask+0xb0>
			{
				/* The timer is in a list, remove it. */
				uxListRemove( &( pxTimer->xTimerListItem ) );
   82670:	1d20      	adds	r0, r4, #4
   82672:	47c0      	blx	r8
			}
		}

		traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.xMessageValue );

		switch( xMessage.xMessageID )
   82674:	9903      	ldr	r1, [sp, #12]
   82676:	2902      	cmp	r1, #2
   82678:	d01f      	beq.n	826ba <prvTimerTask+0xf6>
   8267a:	2903      	cmp	r1, #3
   8267c:	d02a      	beq.n	826d4 <prvTimerTask+0x110>
   8267e:	2900      	cmp	r1, #0
   82680:	d12b      	bne.n	826da <prvTimerTask+0x116>
		{
			case tmrCOMMAND_START :
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
   82682:	9b04      	ldr	r3, [sp, #16]
   82684:	69a1      	ldr	r1, [r4, #24]
   82686:	4620      	mov	r0, r4
   82688:	4419      	add	r1, r3
   8268a:	463a      	mov	r2, r7
   8268c:	47c8      	blx	r9
   8268e:	2801      	cmp	r0, #1
   82690:	d123      	bne.n	826da <prvTimerTask+0x116>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   82692:	6a63      	ldr	r3, [r4, #36]	; 0x24
   82694:	4620      	mov	r0, r4
   82696:	4798      	blx	r3

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   82698:	69e3      	ldr	r3, [r4, #28]
   8269a:	2b01      	cmp	r3, #1
   8269c:	d11d      	bne.n	826da <prvTimerTask+0x116>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   8269e:	69a2      	ldr	r2, [r4, #24]
   826a0:	2300      	movs	r3, #0
   826a2:	9300      	str	r3, [sp, #0]
   826a4:	4620      	mov	r0, r4
   826a6:	4619      	mov	r1, r3
   826a8:	9c04      	ldr	r4, [sp, #16]
   826aa:	4422      	add	r2, r4
   826ac:	4c1a      	ldr	r4, [pc, #104]	; (82718 <prvTimerTask+0x154>)
   826ae:	47a0      	blx	r4
						configASSERT( xResult );
   826b0:	b998      	cbnz	r0, 826da <prvTimerTask+0x116>
   826b2:	4b1a      	ldr	r3, [pc, #104]	; (8271c <prvTimerTask+0x158>)
   826b4:	4798      	blx	r3
   826b6:	bf00      	nop
   826b8:	e7fd      	b.n	826b6 <prvTimerTask+0xf2>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
   826ba:	9904      	ldr	r1, [sp, #16]
   826bc:	61a1      	str	r1, [r4, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   826be:	b919      	cbnz	r1, 826c8 <prvTimerTask+0x104>
   826c0:	4b16      	ldr	r3, [pc, #88]	; (8271c <prvTimerTask+0x158>)
   826c2:	4798      	blx	r3
   826c4:	bf00      	nop
   826c6:	e7fd      	b.n	826c4 <prvTimerTask+0x100>
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   826c8:	4620      	mov	r0, r4
   826ca:	4439      	add	r1, r7
   826cc:	463a      	mov	r2, r7
   826ce:	463b      	mov	r3, r7
   826d0:	47c8      	blx	r9
   826d2:	e002      	b.n	826da <prvTimerTask+0x116>
				break;

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
   826d4:	4620      	mov	r0, r4
   826d6:	4b15      	ldr	r3, [pc, #84]	; (8272c <prvTimerTask+0x168>)
   826d8:	4798      	blx	r3

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
   826da:	6828      	ldr	r0, [r5, #0]
   826dc:	a903      	add	r1, sp, #12
   826de:	2200      	movs	r2, #0
   826e0:	4613      	mov	r3, r2
   826e2:	47b0      	blx	r6
   826e4:	2800      	cmp	r0, #0
   826e6:	d1bf      	bne.n	82668 <prvTimerTask+0xa4>
   826e8:	e772      	b.n	825d0 <prvTimerTask+0xc>
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
   826ea:	4b07      	ldr	r3, [pc, #28]	; (82708 <prvTimerTask+0x144>)
   826ec:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   826ee:	a803      	add	r0, sp, #12
   826f0:	4b06      	ldr	r3, [pc, #24]	; (8270c <prvTimerTask+0x148>)
   826f2:	4798      	blx	r3
   826f4:	4607      	mov	r7, r0
		if( xTimerListsWereSwitched == pdFALSE )
   826f6:	9b03      	ldr	r3, [sp, #12]
   826f8:	2b00      	cmp	r3, #0
   826fa:	d0a0      	beq.n	8263e <prvTimerTask+0x7a>
   826fc:	e7aa      	b.n	82654 <prvTimerTask+0x90>
   826fe:	bf00      	nop
   82700:	2007ac9c 	.word	0x2007ac9c
   82704:	2007ac6c 	.word	0x2007ac6c
   82708:	00081cad 	.word	0x00081cad
   8270c:	00082511 	.word	0x00082511
   82710:	00081dfd 	.word	0x00081dfd
   82714:	000823c9 	.word	0x000823c9
   82718:	000824bd 	.word	0x000824bd
   8271c:	00081251 	.word	0x00081251
   82720:	00081999 	.word	0x00081999
   82724:	00081241 	.word	0x00081241
   82728:	0008183d 	.word	0x0008183d
   8272c:	00081471 	.word	0x00081471
   82730:	000811c9 	.word	0x000811c9

00082734 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   82734:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   82736:	480e      	ldr	r0, [pc, #56]	; (82770 <sysclk_init+0x3c>)
   82738:	4b0e      	ldr	r3, [pc, #56]	; (82774 <sysclk_init+0x40>)
   8273a:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   8273c:	2000      	movs	r0, #0
   8273e:	213e      	movs	r1, #62	; 0x3e
   82740:	4b0d      	ldr	r3, [pc, #52]	; (82778 <sysclk_init+0x44>)
   82742:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   82744:	4c0d      	ldr	r4, [pc, #52]	; (8277c <sysclk_init+0x48>)
   82746:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   82748:	2800      	cmp	r0, #0
   8274a:	d0fc      	beq.n	82746 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   8274c:	4b0c      	ldr	r3, [pc, #48]	; (82780 <sysclk_init+0x4c>)
   8274e:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   82750:	4a0c      	ldr	r2, [pc, #48]	; (82784 <sysclk_init+0x50>)
   82752:	4b0d      	ldr	r3, [pc, #52]	; (82788 <sysclk_init+0x54>)
   82754:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   82756:	4c0d      	ldr	r4, [pc, #52]	; (8278c <sysclk_init+0x58>)
   82758:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   8275a:	2800      	cmp	r0, #0
   8275c:	d0fc      	beq.n	82758 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   8275e:	2010      	movs	r0, #16
   82760:	4b0b      	ldr	r3, [pc, #44]	; (82790 <sysclk_init+0x5c>)
   82762:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   82764:	4b0b      	ldr	r3, [pc, #44]	; (82794 <sysclk_init+0x60>)
   82766:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   82768:	4801      	ldr	r0, [pc, #4]	; (82770 <sysclk_init+0x3c>)
   8276a:	4b02      	ldr	r3, [pc, #8]	; (82774 <sysclk_init+0x40>)
   8276c:	4798      	blx	r3
   8276e:	bd10      	pop	{r4, pc}
   82770:	0501bd00 	.word	0x0501bd00
   82774:	200700b1 	.word	0x200700b1
   82778:	00082bc1 	.word	0x00082bc1
   8277c:	00082c15 	.word	0x00082c15
   82780:	00082c25 	.word	0x00082c25
   82784:	200d3f01 	.word	0x200d3f01
   82788:	400e0600 	.word	0x400e0600
   8278c:	00082c35 	.word	0x00082c35
   82790:	00082b5d 	.word	0x00082b5d
   82794:	00082d75 	.word	0x00082d75

00082798 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   82798:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   8279a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8279e:	4b1a      	ldr	r3, [pc, #104]	; (82808 <board_init+0x70>)
   827a0:	605a      	str	r2, [r3, #4]
   827a2:	200b      	movs	r0, #11
   827a4:	4c19      	ldr	r4, [pc, #100]	; (8280c <board_init+0x74>)
   827a6:	47a0      	blx	r4
   827a8:	200c      	movs	r0, #12
   827aa:	47a0      	blx	r4
   827ac:	200d      	movs	r0, #13
   827ae:	47a0      	blx	r4
   827b0:	200e      	movs	r0, #14
   827b2:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   827b4:	203b      	movs	r0, #59	; 0x3b
   827b6:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   827ba:	4c15      	ldr	r4, [pc, #84]	; (82810 <board_init+0x78>)
   827bc:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   827be:	2055      	movs	r0, #85	; 0x55
   827c0:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   827c4:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   827c6:	2056      	movs	r0, #86	; 0x56
   827c8:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   827cc:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   827ce:	2068      	movs	r0, #104	; 0x68
   827d0:	4910      	ldr	r1, [pc, #64]	; (82814 <board_init+0x7c>)
   827d2:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   827d4:	205c      	movs	r0, #92	; 0x5c
   827d6:	4910      	ldr	r1, [pc, #64]	; (82818 <board_init+0x80>)
   827d8:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   827da:	4810      	ldr	r0, [pc, #64]	; (8281c <board_init+0x84>)
   827dc:	f44f 7140 	mov.w	r1, #768	; 0x300
   827e0:	4a0f      	ldr	r2, [pc, #60]	; (82820 <board_init+0x88>)
   827e2:	4b10      	ldr	r3, [pc, #64]	; (82824 <board_init+0x8c>)
   827e4:	4798      	blx	r3
		gpio_configure_pin(SPI1_NPCS3_GPIO, SPI1_NPCS3_FLAGS);
#   endif
#endif

#ifdef CONF_BOARD_TWI0
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
   827e6:	2011      	movs	r0, #17
   827e8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   827ec:	47a0      	blx	r4
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
   827ee:	2012      	movs	r0, #18
   827f0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   827f4:	47a0      	blx	r4
#endif

#ifdef CONF_BOARD_TWI1
	gpio_configure_pin(TWI1_DATA_GPIO, TWI1_DATA_FLAGS);
   827f6:	202c      	movs	r0, #44	; 0x2c
   827f8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   827fc:	47a0      	blx	r4
	gpio_configure_pin(TWI1_CLK_GPIO, TWI1_CLK_FLAGS);
   827fe:	202d      	movs	r0, #45	; 0x2d
   82800:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82804:	47a0      	blx	r4
   82806:	bd10      	pop	{r4, pc}
   82808:	400e1a50 	.word	0x400e1a50
   8280c:	00082c45 	.word	0x00082c45
   82810:	00082905 	.word	0x00082905
   82814:	28000079 	.word	0x28000079
   82818:	28000001 	.word	0x28000001
   8281c:	400e0e00 	.word	0x400e0e00
   82820:	08000001 	.word	0x08000001
   82824:	000829d9 	.word	0x000829d9

00082828 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   82828:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   8282a:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   8282e:	d016      	beq.n	8285e <pio_set_peripheral+0x36>
   82830:	d804      	bhi.n	8283c <pio_set_peripheral+0x14>
   82832:	b1c1      	cbz	r1, 82866 <pio_set_peripheral+0x3e>
   82834:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   82838:	d00a      	beq.n	82850 <pio_set_peripheral+0x28>
   8283a:	e013      	b.n	82864 <pio_set_peripheral+0x3c>
   8283c:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   82840:	d011      	beq.n	82866 <pio_set_peripheral+0x3e>
   82842:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   82846:	d00e      	beq.n	82866 <pio_set_peripheral+0x3e>
   82848:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   8284c:	d10a      	bne.n	82864 <pio_set_peripheral+0x3c>
   8284e:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   82850:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   82852:	6f01      	ldr	r1, [r0, #112]	; 0x70
   82854:	400b      	ands	r3, r1
   82856:	ea23 0302 	bic.w	r3, r3, r2
   8285a:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   8285c:	e002      	b.n	82864 <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   8285e:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   82860:	4313      	orrs	r3, r2
   82862:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   82864:	6042      	str	r2, [r0, #4]
   82866:	4770      	bx	lr

00082868 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   82868:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8286a:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   8286e:	bf14      	ite	ne
   82870:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   82872:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   82874:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   82878:	bf14      	ite	ne
   8287a:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   8287c:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   8287e:	f012 0f02 	tst.w	r2, #2
   82882:	d002      	beq.n	8288a <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   82884:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   82888:	e004      	b.n	82894 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   8288a:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   8288e:	bf18      	it	ne
   82890:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   82894:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   82896:	6001      	str	r1, [r0, #0]
   82898:	4770      	bx	lr
   8289a:	bf00      	nop

0008289c <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   8289c:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   8289e:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   828a0:	9c01      	ldr	r4, [sp, #4]
   828a2:	b10c      	cbz	r4, 828a8 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   828a4:	6641      	str	r1, [r0, #100]	; 0x64
   828a6:	e000      	b.n	828aa <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   828a8:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   828aa:	b10b      	cbz	r3, 828b0 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   828ac:	6501      	str	r1, [r0, #80]	; 0x50
   828ae:	e000      	b.n	828b2 <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   828b0:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   828b2:	b10a      	cbz	r2, 828b8 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   828b4:	6301      	str	r1, [r0, #48]	; 0x30
   828b6:	e000      	b.n	828ba <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   828b8:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   828ba:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   828bc:	6001      	str	r1, [r0, #0]
}
   828be:	f85d 4b04 	ldr.w	r4, [sp], #4
   828c2:	4770      	bx	lr

000828c4 <pio_configure_interrupt>:
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
   828c4:	f012 0f10 	tst.w	r2, #16
   828c8:	d010      	beq.n	828ec <pio_configure_interrupt+0x28>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
   828ca:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
   828ce:	f012 0f20 	tst.w	r2, #32
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
   828d2:	bf14      	ite	ne
   828d4:	f8c0 10d4 	strne.w	r1, [r0, #212]	; 0xd4
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
   828d8:	f8c0 10d0 	streq.w	r1, [r0, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
   828dc:	f012 0f40 	tst.w	r2, #64	; 0x40
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
   828e0:	bf14      	ite	ne
   828e2:	f8c0 10c0 	strne.w	r1, [r0, #192]	; 0xc0
		} else {
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
   828e6:	f8c0 10c4 	streq.w	r1, [r0, #196]	; 0xc4
   828ea:	4770      	bx	lr
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
   828ec:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
   828f0:	4770      	bx	lr
   828f2:	bf00      	nop

000828f4 <pio_enable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_ISR;
   828f4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
	p_pio->PIO_IER = ul_mask;
   828f6:	6401      	str	r1, [r0, #64]	; 0x40
   828f8:	4770      	bx	lr
   828fa:	bf00      	nop

000828fc <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   828fc:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   828fe:	4770      	bx	lr

00082900 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   82900:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   82902:	4770      	bx	lr

00082904 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   82904:	b570      	push	{r4, r5, r6, lr}
   82906:	b082      	sub	sp, #8
   82908:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   8290a:	0944      	lsrs	r4, r0, #5
   8290c:	f504 1400 	add.w	r4, r4, #2097152	; 0x200000
   82910:	f204 7407 	addw	r4, r4, #1799	; 0x707
   82914:	0266      	lsls	r6, r4, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   82916:	f001 44f0 	and.w	r4, r1, #2013265920	; 0x78000000
   8291a:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   8291e:	d030      	beq.n	82982 <pio_configure_pin+0x7e>
   82920:	d806      	bhi.n	82930 <pio_configure_pin+0x2c>
   82922:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   82926:	d00a      	beq.n	8293e <pio_configure_pin+0x3a>
   82928:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   8292c:	d018      	beq.n	82960 <pio_configure_pin+0x5c>
   8292e:	e049      	b.n	829c4 <pio_configure_pin+0xc0>
   82930:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   82934:	d030      	beq.n	82998 <pio_configure_pin+0x94>
   82936:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   8293a:	d02d      	beq.n	82998 <pio_configure_pin+0x94>
   8293c:	e042      	b.n	829c4 <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   8293e:	f000 001f 	and.w	r0, r0, #31
   82942:	2401      	movs	r4, #1
   82944:	4084      	lsls	r4, r0
   82946:	4630      	mov	r0, r6
   82948:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8294c:	4622      	mov	r2, r4
   8294e:	4b1f      	ldr	r3, [pc, #124]	; (829cc <pio_configure_pin+0xc8>)
   82950:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   82952:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   82956:	bf14      	ite	ne
   82958:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8295a:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   8295c:	2001      	movs	r0, #1
   8295e:	e032      	b.n	829c6 <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   82960:	f000 001f 	and.w	r0, r0, #31
   82964:	2401      	movs	r4, #1
   82966:	4084      	lsls	r4, r0
   82968:	4630      	mov	r0, r6
   8296a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8296e:	4622      	mov	r2, r4
   82970:	4b16      	ldr	r3, [pc, #88]	; (829cc <pio_configure_pin+0xc8>)
   82972:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   82974:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   82978:	bf14      	ite	ne
   8297a:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8297c:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   8297e:	2001      	movs	r0, #1
   82980:	e021      	b.n	829c6 <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   82982:	f000 011f 	and.w	r1, r0, #31
   82986:	2401      	movs	r4, #1
   82988:	4630      	mov	r0, r6
   8298a:	fa04 f101 	lsl.w	r1, r4, r1
   8298e:	462a      	mov	r2, r5
   82990:	4b0f      	ldr	r3, [pc, #60]	; (829d0 <pio_configure_pin+0xcc>)
   82992:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   82994:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   82996:	e016      	b.n	829c6 <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   82998:	f000 011f 	and.w	r1, r0, #31
   8299c:	2401      	movs	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   8299e:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   829a2:	ea05 0304 	and.w	r3, r5, r4
   829a6:	9300      	str	r3, [sp, #0]
   829a8:	4630      	mov	r0, r6
   829aa:	fa04 f101 	lsl.w	r1, r4, r1
   829ae:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   829b2:	bf14      	ite	ne
   829b4:	2200      	movne	r2, #0
   829b6:	2201      	moveq	r2, #1
   829b8:	f3c5 0380 	ubfx	r3, r5, #2, #1
   829bc:	4d05      	ldr	r5, [pc, #20]	; (829d4 <pio_configure_pin+0xd0>)
   829be:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
   829c0:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   829c2:	e000      	b.n	829c6 <pio_configure_pin+0xc2>

	default:
		return 0;
   829c4:	2000      	movs	r0, #0
	}

	return 1;
}
   829c6:	b002      	add	sp, #8
   829c8:	bd70      	pop	{r4, r5, r6, pc}
   829ca:	bf00      	nop
   829cc:	00082829 	.word	0x00082829
   829d0:	00082869 	.word	0x00082869
   829d4:	0008289d 	.word	0x0008289d

000829d8 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   829d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   829da:	b083      	sub	sp, #12
   829dc:	4607      	mov	r7, r0
   829de:	460e      	mov	r6, r1
   829e0:	4615      	mov	r5, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   829e2:	f002 44f0 	and.w	r4, r2, #2013265920	; 0x78000000
   829e6:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   829ea:	d026      	beq.n	82a3a <pio_configure_pin_group+0x62>
   829ec:	d806      	bhi.n	829fc <pio_configure_pin_group+0x24>
   829ee:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   829f2:	d00a      	beq.n	82a0a <pio_configure_pin_group+0x32>
   829f4:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   829f8:	d013      	beq.n	82a22 <pio_configure_pin_group+0x4a>
   829fa:	e034      	b.n	82a66 <pio_configure_pin_group+0x8e>
   829fc:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   82a00:	d01f      	beq.n	82a42 <pio_configure_pin_group+0x6a>
   82a02:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   82a06:	d01c      	beq.n	82a42 <pio_configure_pin_group+0x6a>
   82a08:	e02d      	b.n	82a66 <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   82a0a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82a0e:	4632      	mov	r2, r6
   82a10:	4b16      	ldr	r3, [pc, #88]	; (82a6c <pio_configure_pin_group+0x94>)
   82a12:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   82a14:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   82a18:	bf14      	ite	ne
   82a1a:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   82a1c:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   82a1e:	2001      	movs	r0, #1
   82a20:	e022      	b.n	82a68 <pio_configure_pin_group+0x90>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   82a22:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   82a26:	4632      	mov	r2, r6
   82a28:	4b10      	ldr	r3, [pc, #64]	; (82a6c <pio_configure_pin_group+0x94>)
   82a2a:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   82a2c:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   82a30:	bf14      	ite	ne
   82a32:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   82a34:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   82a36:	2001      	movs	r0, #1
   82a38:	e016      	b.n	82a68 <pio_configure_pin_group+0x90>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   82a3a:	4b0d      	ldr	r3, [pc, #52]	; (82a70 <pio_configure_pin_group+0x98>)
   82a3c:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   82a3e:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   82a40:	e012      	b.n	82a68 <pio_configure_pin_group+0x90>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   82a42:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   82a46:	f005 0301 	and.w	r3, r5, #1
   82a4a:	9300      	str	r3, [sp, #0]
   82a4c:	4638      	mov	r0, r7
   82a4e:	4631      	mov	r1, r6
   82a50:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   82a54:	bf14      	ite	ne
   82a56:	2200      	movne	r2, #0
   82a58:	2201      	moveq	r2, #1
   82a5a:	f3c5 0380 	ubfx	r3, r5, #2, #1
   82a5e:	4c05      	ldr	r4, [pc, #20]	; (82a74 <pio_configure_pin_group+0x9c>)
   82a60:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   82a62:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   82a64:	e000      	b.n	82a68 <pio_configure_pin_group+0x90>

	default:
		return 0;
   82a66:	2000      	movs	r0, #0
	}

	return 1;
}
   82a68:	b003      	add	sp, #12
   82a6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82a6c:	00082829 	.word	0x00082829
   82a70:	00082869 	.word	0x00082869
   82a74:	0008289d 	.word	0x0008289d

00082a78 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   82a78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82a7c:	4604      	mov	r4, r0
   82a7e:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   82a80:	4b10      	ldr	r3, [pc, #64]	; (82ac4 <pio_handler_process+0x4c>)
   82a82:	4798      	blx	r3
   82a84:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   82a86:	4620      	mov	r0, r4
   82a88:	4b0f      	ldr	r3, [pc, #60]	; (82ac8 <pio_handler_process+0x50>)
   82a8a:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   82a8c:	4005      	ands	r5, r0
   82a8e:	d017      	beq.n	82ac0 <pio_handler_process+0x48>
   82a90:	4f0e      	ldr	r7, [pc, #56]	; (82acc <pio_handler_process+0x54>)
   82a92:	f107 040c 	add.w	r4, r7, #12
   82a96:	376c      	adds	r7, #108	; 0x6c
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   82a98:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   82a9c:	42b3      	cmp	r3, r6
   82a9e:	d10a      	bne.n	82ab6 <pio_handler_process+0x3e>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   82aa0:	f854 1c08 	ldr.w	r1, [r4, #-8]
   82aa4:	4229      	tst	r1, r5
   82aa6:	d006      	beq.n	82ab6 <pio_handler_process+0x3e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   82aa8:	6823      	ldr	r3, [r4, #0]
   82aaa:	4630      	mov	r0, r6
   82aac:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   82aae:	f854 3c08 	ldr.w	r3, [r4, #-8]
   82ab2:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   82ab6:	42bc      	cmp	r4, r7
   82ab8:	d002      	beq.n	82ac0 <pio_handler_process+0x48>
   82aba:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   82abc:	2d00      	cmp	r5, #0
   82abe:	d1eb      	bne.n	82a98 <pio_handler_process+0x20>
   82ac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82ac4:	000828fd 	.word	0x000828fd
   82ac8:	00082901 	.word	0x00082901
   82acc:	2007aca8 	.word	0x2007aca8

00082ad0 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
   82ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
   82ad2:	4c0b      	ldr	r4, [pc, #44]	; (82b00 <pio_handler_set+0x30>)
   82ad4:	6824      	ldr	r4, [r4, #0]
   82ad6:	2c06      	cmp	r4, #6
   82ad8:	d810      	bhi.n	82afc <pio_handler_set+0x2c>
		return 1;

	/* Define new source */
	pSource = &(gs_interrupt_sources[gs_ul_nb_sources]);
   82ada:	4f0a      	ldr	r7, [pc, #40]	; (82b04 <pio_handler_set+0x34>)
   82adc:	0126      	lsls	r6, r4, #4
   82ade:	19bd      	adds	r5, r7, r6
	pSource->id = ul_id;
   82ae0:	51b9      	str	r1, [r7, r6]
	pSource->mask = ul_mask;
   82ae2:	606a      	str	r2, [r5, #4]
	pSource->attr = ul_attr;
   82ae4:	60ab      	str	r3, [r5, #8]
	pSource->handler = p_handler;
   82ae6:	9906      	ldr	r1, [sp, #24]
   82ae8:	60e9      	str	r1, [r5, #12]
	gs_ul_nb_sources++;
   82aea:	3401      	adds	r4, #1
   82aec:	4904      	ldr	r1, [pc, #16]	; (82b00 <pio_handler_set+0x30>)
   82aee:	600c      	str	r4, [r1, #0]

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
   82af0:	4611      	mov	r1, r2
   82af2:	461a      	mov	r2, r3
   82af4:	4b04      	ldr	r3, [pc, #16]	; (82b08 <pio_handler_set+0x38>)
   82af6:	4798      	blx	r3

	return 0;
   82af8:	2000      	movs	r0, #0
   82afa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;
   82afc:	2001      	movs	r0, #1

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);

	return 0;
}
   82afe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82b00:	2007aca4 	.word	0x2007aca4
   82b04:	2007aca8 	.word	0x2007aca8
   82b08:	000828c5 	.word	0x000828c5

00082b0c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   82b0c:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   82b0e:	4802      	ldr	r0, [pc, #8]	; (82b18 <PIOA_Handler+0xc>)
   82b10:	210b      	movs	r1, #11
   82b12:	4b02      	ldr	r3, [pc, #8]	; (82b1c <PIOA_Handler+0x10>)
   82b14:	4798      	blx	r3
   82b16:	bd08      	pop	{r3, pc}
   82b18:	400e0e00 	.word	0x400e0e00
   82b1c:	00082a79 	.word	0x00082a79

00082b20 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   82b20:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   82b22:	4802      	ldr	r0, [pc, #8]	; (82b2c <PIOB_Handler+0xc>)
   82b24:	210c      	movs	r1, #12
   82b26:	4b02      	ldr	r3, [pc, #8]	; (82b30 <PIOB_Handler+0x10>)
   82b28:	4798      	blx	r3
   82b2a:	bd08      	pop	{r3, pc}
   82b2c:	400e1000 	.word	0x400e1000
   82b30:	00082a79 	.word	0x00082a79

00082b34 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   82b34:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   82b36:	4802      	ldr	r0, [pc, #8]	; (82b40 <PIOC_Handler+0xc>)
   82b38:	210d      	movs	r1, #13
   82b3a:	4b02      	ldr	r3, [pc, #8]	; (82b44 <PIOC_Handler+0x10>)
   82b3c:	4798      	blx	r3
   82b3e:	bd08      	pop	{r3, pc}
   82b40:	400e1200 	.word	0x400e1200
   82b44:	00082a79 	.word	0x00082a79

00082b48 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   82b48:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   82b4a:	4802      	ldr	r0, [pc, #8]	; (82b54 <PIOD_Handler+0xc>)
   82b4c:	210e      	movs	r1, #14
   82b4e:	4b02      	ldr	r3, [pc, #8]	; (82b58 <PIOD_Handler+0x10>)
   82b50:	4798      	blx	r3
   82b52:	bd08      	pop	{r3, pc}
   82b54:	400e1400 	.word	0x400e1400
   82b58:	00082a79 	.word	0x00082a79

00082b5c <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   82b5c:	4b17      	ldr	r3, [pc, #92]	; (82bbc <pmc_switch_mck_to_pllack+0x60>)
   82b5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   82b60:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   82b64:	4310      	orrs	r0, r2
   82b66:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82b68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82b6a:	f013 0f08 	tst.w	r3, #8
   82b6e:	d109      	bne.n	82b84 <pmc_switch_mck_to_pllack+0x28>
   82b70:	f44f 6300 	mov.w	r3, #2048	; 0x800
   82b74:	4911      	ldr	r1, [pc, #68]	; (82bbc <pmc_switch_mck_to_pllack+0x60>)
   82b76:	e001      	b.n	82b7c <pmc_switch_mck_to_pllack+0x20>
			--ul_timeout) {
		if (ul_timeout == 0) {
   82b78:	3b01      	subs	r3, #1
   82b7a:	d019      	beq.n	82bb0 <pmc_switch_mck_to_pllack+0x54>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82b7c:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   82b7e:	f012 0f08 	tst.w	r2, #8
   82b82:	d0f9      	beq.n	82b78 <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   82b84:	4b0d      	ldr	r3, [pc, #52]	; (82bbc <pmc_switch_mck_to_pllack+0x60>)
   82b86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   82b88:	f022 0203 	bic.w	r2, r2, #3
   82b8c:	f042 0202 	orr.w	r2, r2, #2
   82b90:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82b92:	6e98      	ldr	r0, [r3, #104]	; 0x68
   82b94:	f010 0008 	ands.w	r0, r0, #8
   82b98:	d10c      	bne.n	82bb4 <pmc_switch_mck_to_pllack+0x58>
   82b9a:	f44f 6300 	mov.w	r3, #2048	; 0x800
   82b9e:	4907      	ldr	r1, [pc, #28]	; (82bbc <pmc_switch_mck_to_pllack+0x60>)
   82ba0:	e001      	b.n	82ba6 <pmc_switch_mck_to_pllack+0x4a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   82ba2:	3b01      	subs	r3, #1
   82ba4:	d008      	beq.n	82bb8 <pmc_switch_mck_to_pllack+0x5c>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82ba6:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   82ba8:	f012 0f08 	tst.w	r2, #8
   82bac:	d0f9      	beq.n	82ba2 <pmc_switch_mck_to_pllack+0x46>
   82bae:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   82bb0:	2001      	movs	r0, #1
   82bb2:	4770      	bx	lr
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   82bb4:	2000      	movs	r0, #0
   82bb6:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   82bb8:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   82bba:	4770      	bx	lr
   82bbc:	400e0600 	.word	0x400e0600

00082bc0 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   82bc0:	b138      	cbz	r0, 82bd2 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   82bc2:	4911      	ldr	r1, [pc, #68]	; (82c08 <pmc_switch_mainck_to_xtal+0x48>)
   82bc4:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   82bc6:	4a11      	ldr	r2, [pc, #68]	; (82c0c <pmc_switch_mainck_to_xtal+0x4c>)
   82bc8:	401a      	ands	r2, r3
   82bca:	4b11      	ldr	r3, [pc, #68]	; (82c10 <pmc_switch_mainck_to_xtal+0x50>)
   82bcc:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   82bce:	620b      	str	r3, [r1, #32]
   82bd0:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   82bd2:	4a0d      	ldr	r2, [pc, #52]	; (82c08 <pmc_switch_mainck_to_xtal+0x48>)
   82bd4:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   82bd6:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   82bda:	f023 0303 	bic.w	r3, r3, #3
   82bde:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   82be2:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   82be6:	0209      	lsls	r1, r1, #8
   82be8:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   82bea:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   82bec:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   82bee:	6e93      	ldr	r3, [r2, #104]	; 0x68
   82bf0:	f013 0f01 	tst.w	r3, #1
   82bf4:	d0fb      	beq.n	82bee <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   82bf6:	4a04      	ldr	r2, [pc, #16]	; (82c08 <pmc_switch_mainck_to_xtal+0x48>)
   82bf8:	6a13      	ldr	r3, [r2, #32]
   82bfa:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   82bfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   82c02:	6213      	str	r3, [r2, #32]
   82c04:	4770      	bx	lr
   82c06:	bf00      	nop
   82c08:	400e0600 	.word	0x400e0600
   82c0c:	fec8fffc 	.word	0xfec8fffc
   82c10:	01370002 	.word	0x01370002

00082c14 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   82c14:	4b02      	ldr	r3, [pc, #8]	; (82c20 <pmc_osc_is_ready_mainck+0xc>)
   82c16:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   82c18:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   82c1c:	4770      	bx	lr
   82c1e:	bf00      	nop
   82c20:	400e0600 	.word	0x400e0600

00082c24 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   82c24:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   82c28:	4b01      	ldr	r3, [pc, #4]	; (82c30 <pmc_disable_pllack+0xc>)
   82c2a:	629a      	str	r2, [r3, #40]	; 0x28
   82c2c:	4770      	bx	lr
   82c2e:	bf00      	nop
   82c30:	400e0600 	.word	0x400e0600

00082c34 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   82c34:	4b02      	ldr	r3, [pc, #8]	; (82c40 <pmc_is_locked_pllack+0xc>)
   82c36:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   82c38:	f000 0002 	and.w	r0, r0, #2
   82c3c:	4770      	bx	lr
   82c3e:	bf00      	nop
   82c40:	400e0600 	.word	0x400e0600

00082c44 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   82c44:	282c      	cmp	r0, #44	; 0x2c
   82c46:	d820      	bhi.n	82c8a <pmc_enable_periph_clk+0x46>
		return 1;
	}

	if (ul_id < 32) {
   82c48:	281f      	cmp	r0, #31
   82c4a:	d80d      	bhi.n	82c68 <pmc_enable_periph_clk+0x24>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   82c4c:	4b12      	ldr	r3, [pc, #72]	; (82c98 <pmc_enable_periph_clk+0x54>)
   82c4e:	699a      	ldr	r2, [r3, #24]
   82c50:	2301      	movs	r3, #1
   82c52:	4083      	lsls	r3, r0
   82c54:	401a      	ands	r2, r3
   82c56:	4293      	cmp	r3, r2
   82c58:	d019      	beq.n	82c8e <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER0 = 1 << ul_id;
   82c5a:	2301      	movs	r3, #1
   82c5c:	fa03 f000 	lsl.w	r0, r3, r0
   82c60:	4b0d      	ldr	r3, [pc, #52]	; (82c98 <pmc_enable_periph_clk+0x54>)
   82c62:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   82c64:	2000      	movs	r0, #0
   82c66:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   82c68:	4b0b      	ldr	r3, [pc, #44]	; (82c98 <pmc_enable_periph_clk+0x54>)
   82c6a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
   82c6e:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   82c70:	2301      	movs	r3, #1
   82c72:	4083      	lsls	r3, r0
   82c74:	401a      	ands	r2, r3
   82c76:	4293      	cmp	r3, r2
   82c78:	d00b      	beq.n	82c92 <pmc_enable_periph_clk+0x4e>
			PMC->PMC_PCER1 = 1 << ul_id;
   82c7a:	2301      	movs	r3, #1
   82c7c:	fa03 f000 	lsl.w	r0, r3, r0
   82c80:	4b05      	ldr	r3, [pc, #20]	; (82c98 <pmc_enable_periph_clk+0x54>)
   82c82:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   82c86:	2000      	movs	r0, #0
   82c88:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   82c8a:	2001      	movs	r0, #1
   82c8c:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   82c8e:	2000      	movs	r0, #0
   82c90:	4770      	bx	lr
   82c92:	2000      	movs	r0, #0
}
   82c94:	4770      	bx	lr
   82c96:	bf00      	nop
   82c98:	400e0600 	.word	0x400e0600

00082c9c <pmc_set_writeprotect>:
 *
 * \param ul_enable 1 to enable, 0 to disable.
 */
void pmc_set_writeprotect(uint32_t ul_enable)
{
	if (ul_enable) {
   82c9c:	b120      	cbz	r0, 82ca8 <pmc_set_writeprotect+0xc>
		PMC->PMC_WPMR = PMC_WPMR_WPKEY_PASSWD | PMC_WPMR_WPEN;
   82c9e:	4a05      	ldr	r2, [pc, #20]	; (82cb4 <pmc_set_writeprotect+0x18>)
   82ca0:	4b05      	ldr	r3, [pc, #20]	; (82cb8 <pmc_set_writeprotect+0x1c>)
   82ca2:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
   82ca6:	4770      	bx	lr
	} else {
		PMC->PMC_WPMR = PMC_WPMR_WPKEY_PASSWD;
   82ca8:	4a04      	ldr	r2, [pc, #16]	; (82cbc <pmc_set_writeprotect+0x20>)
   82caa:	4b03      	ldr	r3, [pc, #12]	; (82cb8 <pmc_set_writeprotect+0x1c>)
   82cac:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
   82cb0:	4770      	bx	lr
   82cb2:	bf00      	nop
   82cb4:	504d4301 	.word	0x504d4301
   82cb8:	400e0600 	.word	0x400e0600
   82cbc:	504d4300 	.word	0x504d4300

00082cc0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   82cc0:	e7fe      	b.n	82cc0 <Dummy_Handler>
   82cc2:	bf00      	nop

00082cc4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   82cc4:	b510      	push	{r4, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   82cc6:	4b1e      	ldr	r3, [pc, #120]	; (82d40 <Reset_Handler+0x7c>)
   82cc8:	4a1e      	ldr	r2, [pc, #120]	; (82d44 <Reset_Handler+0x80>)
   82cca:	429a      	cmp	r2, r3
   82ccc:	d003      	beq.n	82cd6 <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   82cce:	4b1e      	ldr	r3, [pc, #120]	; (82d48 <Reset_Handler+0x84>)
   82cd0:	4a1b      	ldr	r2, [pc, #108]	; (82d40 <Reset_Handler+0x7c>)
   82cd2:	429a      	cmp	r2, r3
   82cd4:	d304      	bcc.n	82ce0 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   82cd6:	4b1d      	ldr	r3, [pc, #116]	; (82d4c <Reset_Handler+0x88>)
   82cd8:	4a1d      	ldr	r2, [pc, #116]	; (82d50 <Reset_Handler+0x8c>)
   82cda:	429a      	cmp	r2, r3
   82cdc:	d30f      	bcc.n	82cfe <Reset_Handler+0x3a>
   82cde:	e01a      	b.n	82d16 <Reset_Handler+0x52>
   82ce0:	4b1c      	ldr	r3, [pc, #112]	; (82d54 <Reset_Handler+0x90>)
   82ce2:	4c1d      	ldr	r4, [pc, #116]	; (82d58 <Reset_Handler+0x94>)
   82ce4:	1ae4      	subs	r4, r4, r3
   82ce6:	f024 0403 	bic.w	r4, r4, #3
   82cea:	3404      	adds	r4, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   82cec:	2300      	movs	r3, #0
			*pDest++ = *pSrc++;
   82cee:	4814      	ldr	r0, [pc, #80]	; (82d40 <Reset_Handler+0x7c>)
   82cf0:	4914      	ldr	r1, [pc, #80]	; (82d44 <Reset_Handler+0x80>)
   82cf2:	585a      	ldr	r2, [r3, r1]
   82cf4:	501a      	str	r2, [r3, r0]
   82cf6:	3304      	adds	r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   82cf8:	42a3      	cmp	r3, r4
   82cfa:	d1fa      	bne.n	82cf2 <Reset_Handler+0x2e>
   82cfc:	e7eb      	b.n	82cd6 <Reset_Handler+0x12>
   82cfe:	4b17      	ldr	r3, [pc, #92]	; (82d5c <Reset_Handler+0x98>)
   82d00:	4917      	ldr	r1, [pc, #92]	; (82d60 <Reset_Handler+0x9c>)
   82d02:	1ac9      	subs	r1, r1, r3
   82d04:	f021 0103 	bic.w	r1, r1, #3
   82d08:	1d1a      	adds	r2, r3, #4
   82d0a:	4411      	add	r1, r2
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   82d0c:	2200      	movs	r2, #0
   82d0e:	f843 2f04 	str.w	r2, [r3, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   82d12:	428b      	cmp	r3, r1
   82d14:	d1fb      	bne.n	82d0e <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   82d16:	4a13      	ldr	r2, [pc, #76]	; (82d64 <Reset_Handler+0xa0>)
   82d18:	f022 4360 	bic.w	r3, r2, #3758096384	; 0xe0000000
   82d1c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   82d20:	4911      	ldr	r1, [pc, #68]	; (82d68 <Reset_Handler+0xa4>)
   82d22:	608b      	str	r3, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   82d24:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
   82d28:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
   82d2c:	d203      	bcs.n	82d36 <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   82d2e:	688a      	ldr	r2, [r1, #8]
   82d30:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   82d34:	608a      	str	r2, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   82d36:	4b0d      	ldr	r3, [pc, #52]	; (82d6c <Reset_Handler+0xa8>)
   82d38:	4798      	blx	r3

	/* Branch to main function */
	main();
   82d3a:	4b0d      	ldr	r3, [pc, #52]	; (82d70 <Reset_Handler+0xac>)
   82d3c:	4798      	blx	r3
   82d3e:	e7fe      	b.n	82d3e <Reset_Handler+0x7a>
   82d40:	20070000 	.word	0x20070000
   82d44:	00086cc4 	.word	0x00086cc4
   82d48:	20070a84 	.word	0x20070a84
   82d4c:	2007ae4c 	.word	0x2007ae4c
   82d50:	20070a88 	.word	0x20070a88
   82d54:	20070004 	.word	0x20070004
   82d58:	20070a87 	.word	0x20070a87
   82d5c:	20070a84 	.word	0x20070a84
   82d60:	2007ae47 	.word	0x2007ae47
   82d64:	00080000 	.word	0x00080000
   82d68:	e000ed00 	.word	0xe000ed00
   82d6c:	00083c91 	.word	0x00083c91
   82d70:	000834dd 	.word	0x000834dd

00082d74 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   82d74:	4b3e      	ldr	r3, [pc, #248]	; (82e70 <SystemCoreClockUpdate+0xfc>)
   82d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82d78:	f003 0303 	and.w	r3, r3, #3
   82d7c:	2b03      	cmp	r3, #3
   82d7e:	d85f      	bhi.n	82e40 <SystemCoreClockUpdate+0xcc>
   82d80:	e8df f003 	tbb	[pc, r3]
   82d84:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   82d88:	4b3a      	ldr	r3, [pc, #232]	; (82e74 <SystemCoreClockUpdate+0x100>)
   82d8a:	695b      	ldr	r3, [r3, #20]
   82d8c:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   82d90:	bf14      	ite	ne
   82d92:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   82d96:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   82d9a:	4b37      	ldr	r3, [pc, #220]	; (82e78 <SystemCoreClockUpdate+0x104>)
   82d9c:	601a      	str	r2, [r3, #0]
   82d9e:	e04f      	b.n	82e40 <SystemCoreClockUpdate+0xcc>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   82da0:	4b33      	ldr	r3, [pc, #204]	; (82e70 <SystemCoreClockUpdate+0xfc>)
   82da2:	6a1b      	ldr	r3, [r3, #32]
   82da4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   82da8:	d003      	beq.n	82db2 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   82daa:	4a34      	ldr	r2, [pc, #208]	; (82e7c <SystemCoreClockUpdate+0x108>)
   82dac:	4b32      	ldr	r3, [pc, #200]	; (82e78 <SystemCoreClockUpdate+0x104>)
   82dae:	601a      	str	r2, [r3, #0]
   82db0:	e046      	b.n	82e40 <SystemCoreClockUpdate+0xcc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   82db2:	4a33      	ldr	r2, [pc, #204]	; (82e80 <SystemCoreClockUpdate+0x10c>)
   82db4:	4b30      	ldr	r3, [pc, #192]	; (82e78 <SystemCoreClockUpdate+0x104>)
   82db6:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   82db8:	4b2d      	ldr	r3, [pc, #180]	; (82e70 <SystemCoreClockUpdate+0xfc>)
   82dba:	6a1b      	ldr	r3, [r3, #32]
   82dbc:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82dc0:	2b10      	cmp	r3, #16
   82dc2:	d002      	beq.n	82dca <SystemCoreClockUpdate+0x56>
   82dc4:	2b20      	cmp	r3, #32
   82dc6:	d004      	beq.n	82dd2 <SystemCoreClockUpdate+0x5e>
   82dc8:	e03a      	b.n	82e40 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   82dca:	4a2e      	ldr	r2, [pc, #184]	; (82e84 <SystemCoreClockUpdate+0x110>)
   82dcc:	4b2a      	ldr	r3, [pc, #168]	; (82e78 <SystemCoreClockUpdate+0x104>)
   82dce:	601a      	str	r2, [r3, #0]
				break;
   82dd0:	e036      	b.n	82e40 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   82dd2:	4a2a      	ldr	r2, [pc, #168]	; (82e7c <SystemCoreClockUpdate+0x108>)
   82dd4:	4b28      	ldr	r3, [pc, #160]	; (82e78 <SystemCoreClockUpdate+0x104>)
   82dd6:	601a      	str	r2, [r3, #0]
				break;
   82dd8:	e032      	b.n	82e40 <SystemCoreClockUpdate+0xcc>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   82dda:	4b25      	ldr	r3, [pc, #148]	; (82e70 <SystemCoreClockUpdate+0xfc>)
   82ddc:	6a1b      	ldr	r3, [r3, #32]
   82dde:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   82de2:	d003      	beq.n	82dec <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   82de4:	4a25      	ldr	r2, [pc, #148]	; (82e7c <SystemCoreClockUpdate+0x108>)
   82de6:	4b24      	ldr	r3, [pc, #144]	; (82e78 <SystemCoreClockUpdate+0x104>)
   82de8:	601a      	str	r2, [r3, #0]
   82dea:	e012      	b.n	82e12 <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   82dec:	4a24      	ldr	r2, [pc, #144]	; (82e80 <SystemCoreClockUpdate+0x10c>)
   82dee:	4b22      	ldr	r3, [pc, #136]	; (82e78 <SystemCoreClockUpdate+0x104>)
   82df0:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   82df2:	4b1f      	ldr	r3, [pc, #124]	; (82e70 <SystemCoreClockUpdate+0xfc>)
   82df4:	6a1b      	ldr	r3, [r3, #32]
   82df6:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82dfa:	2b10      	cmp	r3, #16
   82dfc:	d002      	beq.n	82e04 <SystemCoreClockUpdate+0x90>
   82dfe:	2b20      	cmp	r3, #32
   82e00:	d004      	beq.n	82e0c <SystemCoreClockUpdate+0x98>
   82e02:	e006      	b.n	82e12 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   82e04:	4a1f      	ldr	r2, [pc, #124]	; (82e84 <SystemCoreClockUpdate+0x110>)
   82e06:	4b1c      	ldr	r3, [pc, #112]	; (82e78 <SystemCoreClockUpdate+0x104>)
   82e08:	601a      	str	r2, [r3, #0]
				break;
   82e0a:	e002      	b.n	82e12 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   82e0c:	4a1b      	ldr	r2, [pc, #108]	; (82e7c <SystemCoreClockUpdate+0x108>)
   82e0e:	4b1a      	ldr	r3, [pc, #104]	; (82e78 <SystemCoreClockUpdate+0x104>)
   82e10:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   82e12:	4b17      	ldr	r3, [pc, #92]	; (82e70 <SystemCoreClockUpdate+0xfc>)
   82e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82e16:	f003 0303 	and.w	r3, r3, #3
   82e1a:	2b02      	cmp	r3, #2
   82e1c:	d10d      	bne.n	82e3a <SystemCoreClockUpdate+0xc6>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   82e1e:	4b14      	ldr	r3, [pc, #80]	; (82e70 <SystemCoreClockUpdate+0xfc>)
   82e20:	6a98      	ldr	r0, [r3, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   82e22:	6a99      	ldr	r1, [r3, #40]	; 0x28
   82e24:	4b14      	ldr	r3, [pc, #80]	; (82e78 <SystemCoreClockUpdate+0x104>)
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   82e26:	f3c0 400a 	ubfx	r0, r0, #16, #11
   82e2a:	681a      	ldr	r2, [r3, #0]
   82e2c:	fb00 2202 	mla	r2, r0, r2, r2
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   82e30:	b2c9      	uxtb	r1, r1
   82e32:	fbb2 f2f1 	udiv	r2, r2, r1
   82e36:	601a      	str	r2, [r3, #0]
   82e38:	e002      	b.n	82e40 <SystemCoreClockUpdate+0xcc>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   82e3a:	4a13      	ldr	r2, [pc, #76]	; (82e88 <SystemCoreClockUpdate+0x114>)
   82e3c:	4b0e      	ldr	r3, [pc, #56]	; (82e78 <SystemCoreClockUpdate+0x104>)
   82e3e:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   82e40:	4b0b      	ldr	r3, [pc, #44]	; (82e70 <SystemCoreClockUpdate+0xfc>)
   82e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82e44:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82e48:	2b70      	cmp	r3, #112	; 0x70
   82e4a:	d107      	bne.n	82e5c <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
   82e4c:	4b0a      	ldr	r3, [pc, #40]	; (82e78 <SystemCoreClockUpdate+0x104>)
   82e4e:	681a      	ldr	r2, [r3, #0]
   82e50:	490e      	ldr	r1, [pc, #56]	; (82e8c <SystemCoreClockUpdate+0x118>)
   82e52:	fba1 0202 	umull	r0, r2, r1, r2
   82e56:	0852      	lsrs	r2, r2, #1
   82e58:	601a      	str	r2, [r3, #0]
   82e5a:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   82e5c:	4b04      	ldr	r3, [pc, #16]	; (82e70 <SystemCoreClockUpdate+0xfc>)
   82e5e:	6b19      	ldr	r1, [r3, #48]	; 0x30
   82e60:	4b05      	ldr	r3, [pc, #20]	; (82e78 <SystemCoreClockUpdate+0x104>)
   82e62:	f3c1 1102 	ubfx	r1, r1, #4, #3
   82e66:	681a      	ldr	r2, [r3, #0]
   82e68:	40ca      	lsrs	r2, r1
   82e6a:	601a      	str	r2, [r3, #0]
   82e6c:	4770      	bx	lr
   82e6e:	bf00      	nop
   82e70:	400e0600 	.word	0x400e0600
   82e74:	400e1a10 	.word	0x400e1a10
   82e78:	20070218 	.word	0x20070218
   82e7c:	00b71b00 	.word	0x00b71b00
   82e80:	003d0900 	.word	0x003d0900
   82e84:	007a1200 	.word	0x007a1200
   82e88:	0e4e1c00 	.word	0x0e4e1c00
   82e8c:	aaaaaaab 	.word	0xaaaaaaab

00082e90 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   82e90:	4b09      	ldr	r3, [pc, #36]	; (82eb8 <_sbrk+0x28>)
   82e92:	681b      	ldr	r3, [r3, #0]
   82e94:	b913      	cbnz	r3, 82e9c <_sbrk+0xc>
		heap = (unsigned char *)&_end;
   82e96:	4a09      	ldr	r2, [pc, #36]	; (82ebc <_sbrk+0x2c>)
   82e98:	4b07      	ldr	r3, [pc, #28]	; (82eb8 <_sbrk+0x28>)
   82e9a:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   82e9c:	4b06      	ldr	r3, [pc, #24]	; (82eb8 <_sbrk+0x28>)
   82e9e:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   82ea0:	181a      	adds	r2, r3, r0
   82ea2:	4907      	ldr	r1, [pc, #28]	; (82ec0 <_sbrk+0x30>)
   82ea4:	4291      	cmp	r1, r2
   82ea6:	db04      	blt.n	82eb2 <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
   82ea8:	4610      	mov	r0, r2
   82eaa:	4a03      	ldr	r2, [pc, #12]	; (82eb8 <_sbrk+0x28>)
   82eac:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   82eae:	4618      	mov	r0, r3
   82eb0:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
   82eb2:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
   82eb6:	4770      	bx	lr
   82eb8:	2007ad18 	.word	0x2007ad18
   82ebc:	2007ce50 	.word	0x2007ce50
   82ec0:	20087ffc 	.word	0x20087ffc

00082ec4 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   82ec4:	f04f 30ff 	mov.w	r0, #4294967295
   82ec8:	4770      	bx	lr
   82eca:	bf00      	nop

00082ecc <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   82ecc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   82ed0:	604b      	str	r3, [r1, #4]

	return 0;
}
   82ed2:	2000      	movs	r0, #0
   82ed4:	4770      	bx	lr
   82ed6:	bf00      	nop

00082ed8 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   82ed8:	2001      	movs	r0, #1
   82eda:	4770      	bx	lr

00082edc <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   82edc:	2000      	movs	r0, #0
   82ede:	4770      	bx	lr

00082ee0 <vUltraSensorTask>:

/*
 * The task below handles close-range localization
 *
 */
void vUltraSensorTask(void *pvParam) {
   82ee0:	b570      	push	{r4, r5, r6, lr}

	while (1)
	{
		if (booleanUltraSensor == 1 && booleanCommunication == 0 && booleanDriving == 0)
   82ee2:	4c11      	ldr	r4, [pc, #68]	; (82f28 <vUltraSensorTask+0x48>)
			angleUltraSensor = 0;
			WITHIN_RANGE_FLAG = 0;
		}
		else // continue blocking
		{
			vTaskDelay(pdMSTOTICKS(100));
   82ee4:	4d11      	ldr	r5, [pc, #68]	; (82f2c <vUltraSensorTask+0x4c>)
 */
void vUltraSensorTask(void *pvParam) {

	while (1)
	{
		if (booleanUltraSensor == 1 && booleanCommunication == 0 && booleanDriving == 0)
   82ee6:	4e12      	ldr	r6, [pc, #72]	; (82f30 <vUltraSensorTask+0x50>)
   82ee8:	7823      	ldrb	r3, [r4, #0]
   82eea:	2b01      	cmp	r3, #1
   82eec:	d119      	bne.n	82f22 <vUltraSensorTask+0x42>
   82eee:	7833      	ldrb	r3, [r6, #0]
   82ef0:	b9bb      	cbnz	r3, 82f22 <vUltraSensorTask+0x42>
   82ef2:	4b10      	ldr	r3, [pc, #64]	; (82f34 <vUltraSensorTask+0x54>)
   82ef4:	781b      	ldrb	r3, [r3, #0]
   82ef6:	b9a3      	cbnz	r3, 82f22 <vUltraSensorTask+0x42>
		{
			puts("ULTRA SOUND find obj");
   82ef8:	480f      	ldr	r0, [pc, #60]	; (82f38 <vUltraSensorTask+0x58>)
   82efa:	4b10      	ldr	r3, [pc, #64]	; (82f3c <vUltraSensorTask+0x5c>)
   82efc:	4798      	blx	r3
			vTaskDelay(pdMSTOTICKS(5000));
   82efe:	f241 3088 	movw	r0, #5000	; 0x1388
   82f02:	47a8      	blx	r5
			booleanDriving=0;
   82f04:	2300      	movs	r3, #0
   82f06:	4a0b      	ldr	r2, [pc, #44]	; (82f34 <vUltraSensorTask+0x54>)
   82f08:	7013      	strb	r3, [r2, #0]
			booleanUltraSensor=0;
   82f0a:	7023      	strb	r3, [r4, #0]
			booleanModifyPosition = 0;
   82f0c:	4a0c      	ldr	r2, [pc, #48]	; (82f40 <vUltraSensorTask+0x60>)
   82f0e:	7013      	strb	r3, [r2, #0]
			booleanCommunication = 1;
   82f10:	2201      	movs	r2, #1
   82f12:	7032      	strb	r2, [r6, #0]
// 							booleanCommunication = 1;
// 						}
// 					}
// 				}
// 			}
			distanceUltraSensor = 0;
   82f14:	4a0b      	ldr	r2, [pc, #44]	; (82f44 <vUltraSensorTask+0x64>)
   82f16:	6013      	str	r3, [r2, #0]
			angleUltraSensor = 0;
   82f18:	4a0b      	ldr	r2, [pc, #44]	; (82f48 <vUltraSensorTask+0x68>)
   82f1a:	6013      	str	r3, [r2, #0]
			WITHIN_RANGE_FLAG = 0;
   82f1c:	4a0b      	ldr	r2, [pc, #44]	; (82f4c <vUltraSensorTask+0x6c>)
   82f1e:	7013      	strb	r3, [r2, #0]
   82f20:	e7e2      	b.n	82ee8 <vUltraSensorTask+0x8>
		}
		else // continue blocking
		{
			vTaskDelay(pdMSTOTICKS(100));
   82f22:	2064      	movs	r0, #100	; 0x64
   82f24:	47a8      	blx	r5
   82f26:	e7df      	b.n	82ee8 <vUltraSensorTask+0x8>
   82f28:	2007ad29 	.word	0x2007ad29
   82f2c:	00081f95 	.word	0x00081f95
   82f30:	2007ad28 	.word	0x2007ad28
   82f34:	2007ad1c 	.word	0x2007ad1c
   82f38:	00086938 	.word	0x00086938
   82f3c:	00083ee9 	.word	0x00083ee9
   82f40:	2007ad2a 	.word	0x2007ad2a
   82f44:	20070aa8 	.word	0x20070aa8
   82f48:	20070aa4 	.word	0x20070aa4
   82f4c:	20070aac 	.word	0x20070aac

00082f50 <vCommunicationTask>:

/*
 * Task manages TWI-communication
 */
void vCommunicationTask(void *pvParam)
{
   82f50:	b5f0      	push	{r4, r5, r6, r7, lr}
   82f52:	b091      	sub	sp, #68	; 0x44
	
	while(1)
	{
		if (booleanCommunication == 1 && booleanUltraSensor == 0 && booleanDriving == 0 && booleanModifyPosition == 0)
   82f54:	4c9b      	ldr	r4, [pc, #620]	; (831c4 <vCommunicationTask+0x274>)
			}
			//end of current_twi_state
		} 
		else
		{
			vTaskDelay(pdMSTOTICKS(100));
   82f56:	4d9c      	ldr	r5, [pc, #624]	; (831c8 <vCommunicationTask+0x278>)
void vCommunicationTask(void *pvParam)
{
	
	while(1)
	{
		if (booleanCommunication == 1 && booleanUltraSensor == 0 && booleanDriving == 0 && booleanModifyPosition == 0)
   82f58:	4e9c      	ldr	r6, [pc, #624]	; (831cc <vCommunicationTask+0x27c>)
   82f5a:	7823      	ldrb	r3, [r4, #0]
   82f5c:	2b01      	cmp	r3, #1
   82f5e:	f040 8199 	bne.w	83294 <vCommunicationTask+0x344>
   82f62:	7833      	ldrb	r3, [r6, #0]
   82f64:	2b00      	cmp	r3, #0
   82f66:	f040 8195 	bne.w	83294 <vCommunicationTask+0x344>
   82f6a:	4b99      	ldr	r3, [pc, #612]	; (831d0 <vCommunicationTask+0x280>)
   82f6c:	781b      	ldrb	r3, [r3, #0]
   82f6e:	2b00      	cmp	r3, #0
   82f70:	f040 8190 	bne.w	83294 <vCommunicationTask+0x344>
   82f74:	4b97      	ldr	r3, [pc, #604]	; (831d4 <vCommunicationTask+0x284>)
   82f76:	781b      	ldrb	r3, [r3, #0]
   82f78:	2b00      	cmp	r3, #0
   82f7a:	f040 818b 	bne.w	83294 <vCommunicationTask+0x344>
		{
			//check state for communication
			switch (current_twi_state)
   82f7e:	4b96      	ldr	r3, [pc, #600]	; (831d8 <vCommunicationTask+0x288>)
   82f80:	7819      	ldrb	r1, [r3, #0]
   82f82:	2905      	cmp	r1, #5
   82f84:	f200 8182 	bhi.w	8328c <vCommunicationTask+0x33c>
   82f88:	e8df f011 	tbh	[pc, r1, lsl #1]
   82f8c:	00960006 	.word	0x00960006
   82f90:	00e200a8 	.word	0x00e200a8
   82f94:	017c00f1 	.word	0x017c00f1
			{
				case INIT_ARM:
					puts("INIT_ARM");
   82f98:	4890      	ldr	r0, [pc, #576]	; (831dc <vCommunicationTask+0x28c>)
   82f9a:	4b91      	ldr	r3, [pc, #580]	; (831e0 <vCommunicationTask+0x290>)
   82f9c:	4798      	blx	r3
					armInfo = twi_getArmInfo();	
   82f9e:	4f91      	ldr	r7, [pc, #580]	; (831e4 <vCommunicationTask+0x294>)
   82fa0:	a806      	add	r0, sp, #24
   82fa2:	4b91      	ldr	r3, [pc, #580]	; (831e8 <vCommunicationTask+0x298>)
   82fa4:	4798      	blx	r3
   82fa6:	9806      	ldr	r0, [sp, #24]
   82fa8:	6038      	str	r0, [r7, #0]
   82faa:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   82fae:	80bb      	strh	r3, [r7, #4]
					if(armInfo.hasData)
   82fb0:	797b      	ldrb	r3, [r7, #5]
   82fb2:	b11b      	cbz	r3, 82fbc <vCommunicationTask+0x6c>
					{
						//todo remove						
						setCollectAll(armInfo.collectAll);
   82fb4:	7938      	ldrb	r0, [r7, #4]
   82fb6:	4b8d      	ldr	r3, [pc, #564]	; (831ec <vCommunicationTask+0x29c>)
   82fb8:	4798      	blx	r3
   82fba:	e00c      	b.n	82fd6 <vCommunicationTask+0x86>
						
						
					}
					else
					{
						puts("INIT ARM NO DATA");
   82fbc:	488c      	ldr	r0, [pc, #560]	; (831f0 <vCommunicationTask+0x2a0>)
   82fbe:	4b88      	ldr	r3, [pc, #544]	; (831e0 <vCommunicationTask+0x290>)
   82fc0:	4798      	blx	r3
						vTaskDelay(pdMSTOTICKS(100));
   82fc2:	2064      	movs	r0, #100	; 0x64
   82fc4:	47a8      	blx	r5
						//try again 
						booleanCommunication = 1;
   82fc6:	2301      	movs	r3, #1
   82fc8:	7023      	strb	r3, [r4, #0]
						booleanDriving = 0;
   82fca:	2200      	movs	r2, #0
   82fcc:	4b80      	ldr	r3, [pc, #512]	; (831d0 <vCommunicationTask+0x280>)
   82fce:	701a      	strb	r2, [r3, #0]
						delay_ms(1000);
   82fd0:	4888      	ldr	r0, [pc, #544]	; (831f4 <vCommunicationTask+0x2a4>)
   82fd2:	4b89      	ldr	r3, [pc, #548]	; (831f8 <vCommunicationTask+0x2a8>)
   82fd4:	4798      	blx	r3
					}
					
					//get object pos
					//get Info about objects
					objectinfo_t sock;
					sock.theObject = SOCK;
   82fd6:	2302      	movs	r3, #2
   82fd8:	f88d 3020 	strb.w	r3, [sp, #32]
					sock.xpos=0;
   82fdc:	2700      	movs	r7, #0
   82fde:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
					sock.ypos=0;
   82fe2:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
					twi_navGetSockPos(&sock);
   82fe6:	a808      	add	r0, sp, #32
   82fe8:	4b84      	ldr	r3, [pc, #528]	; (831fc <vCommunicationTask+0x2ac>)
   82fea:	4798      	blx	r3
					//printf("sock: x=%d, y=%d.\n",sock.xpos,sock.ypos);
					
					objectinfo_t square;
					square.theObject = SQUARE;
   82fec:	2303      	movs	r3, #3
   82fee:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
					square.xpos=0;
   82ff2:	f8ad 702a 	strh.w	r7, [sp, #42]	; 0x2a
					square.ypos=0;
   82ff6:	f8ad 702c 	strh.w	r7, [sp, #44]	; 0x2c
					twi_navGetSquarePos(&square);
   82ffa:	a80a      	add	r0, sp, #40	; 0x28
   82ffc:	4b80      	ldr	r3, [pc, #512]	; (83200 <vCommunicationTask+0x2b0>)
   82ffe:	4798      	blx	r3
					//printf("square: x=%d, y=%d.\n",square.xpos,square.ypos);
					objectinfo_t glass;
					glass.theObject = GLASS;
   83000:	2304      	movs	r3, #4
   83002:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
					glass.xpos=0;
   83006:	f8ad 7032 	strh.w	r7, [sp, #50]	; 0x32
					glass.ypos=0;
   8300a:	f8ad 7034 	strh.w	r7, [sp, #52]	; 0x34
					int res=twi_navGetGlassPos(&glass);
   8300e:	a80c      	add	r0, sp, #48	; 0x30
   83010:	4b7c      	ldr	r3, [pc, #496]	; (83204 <vCommunicationTask+0x2b4>)
   83012:	4798      	blx	r3
					//printf("glass: x=%d, y=%d.\n",glass.xpos,glass.ypos);
					objectinfo_t boxgoal;
					boxgoal.theObject = BOXGOAL;
   83014:	2305      	movs	r3, #5
   83016:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
					boxgoal.xpos=0;
   8301a:	f8ad 703a 	strh.w	r7, [sp, #58]	; 0x3a
					boxgoal.ypos=0;
   8301e:	f8ad 703c 	strh.w	r7, [sp, #60]	; 0x3c
					res=twi_navGetBoxPos(&boxgoal);
   83022:	a80e      	add	r0, sp, #56	; 0x38
   83024:	4b78      	ldr	r3, [pc, #480]	; (83208 <vCommunicationTask+0x2b8>)
   83026:	4798      	blx	r3
					//printf("boxgoal: x=%d, y=%d.\n",boxgoal.xpos,boxgoal.ypos);
					
					//twi_navGetObjectsPos(&sock, &square, &glass, &boxgoal)
					if(res)
   83028:	2800      	cmp	r0, #0
   8302a:	d037      	beq.n	8309c <vCommunicationTask+0x14c>
					{
											
						
						
						setObjectSimple(sock);
   8302c:	ab08      	add	r3, sp, #32
   8302e:	e893 0003 	ldmia.w	r3, {r0, r1}
   83032:	4f76      	ldr	r7, [pc, #472]	; (8320c <vCommunicationTask+0x2bc>)
   83034:	47b8      	blx	r7
						setObjectSimple(square);
   83036:	ab0a      	add	r3, sp, #40	; 0x28
   83038:	e893 0003 	ldmia.w	r3, {r0, r1}
   8303c:	47b8      	blx	r7
						setObjectSimple(glass);
   8303e:	ab0c      	add	r3, sp, #48	; 0x30
   83040:	e893 0003 	ldmia.w	r3, {r0, r1}
   83044:	47b8      	blx	r7
						setObjectSimple(boxgoal);
   83046:	ab10      	add	r3, sp, #64	; 0x40
   83048:	e913 0003 	ldmdb	r3, {r0, r1}
   8304c:	47b8      	blx	r7
						
						//todo del
						// 							setObject(SQUARE,100,300);
						// 							setObject(SOCK, 300, 300);
						// 							setObject(GLASS, 300, 100);
						printf("so x=%d, y=%d. sq x=%d y=%d. gl x=%d y=%d bo x=%d y=%d",sock.xpos,sock.ypos,square.xpos,square.ypos,
   8304e:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
   83052:	f9bd 2024 	ldrsh.w	r2, [sp, #36]	; 0x24
   83056:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
   8305a:	f9bd 002c 	ldrsh.w	r0, [sp, #44]	; 0x2c
   8305e:	9000      	str	r0, [sp, #0]
   83060:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
   83064:	9001      	str	r0, [sp, #4]
   83066:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	; 0x34
   8306a:	9002      	str	r0, [sp, #8]
   8306c:	f9bd 003a 	ldrsh.w	r0, [sp, #58]	; 0x3a
   83070:	9003      	str	r0, [sp, #12]
   83072:	f9bd 003c 	ldrsh.w	r0, [sp, #60]	; 0x3c
   83076:	9004      	str	r0, [sp, #16]
   83078:	4865      	ldr	r0, [pc, #404]	; (83210 <vCommunicationTask+0x2c0>)
   8307a:	4f66      	ldr	r7, [pc, #408]	; (83214 <vCommunicationTask+0x2c4>)
   8307c:	47b8      	blx	r7
						glass.xpos,glass.ypos,boxgoal.xpos,boxgoal.ypos);
						printf("init arm done\n");
   8307e:	4866      	ldr	r0, [pc, #408]	; (83218 <vCommunicationTask+0x2c8>)
   83080:	47b8      	blx	r7
						printf("arminfo: %u %u %u %u all: %u\n",armInfo.boxAngle, armInfo.boxDistance, armInfo.objectAngle, armInfo.objectDistance,armInfo.collectAll);
   83082:	4858      	ldr	r0, [pc, #352]	; (831e4 <vCommunicationTask+0x294>)
   83084:	7841      	ldrb	r1, [r0, #1]
   83086:	7802      	ldrb	r2, [r0, #0]
   83088:	78c3      	ldrb	r3, [r0, #3]
   8308a:	f890 e002 	ldrb.w	lr, [r0, #2]
   8308e:	f8cd e000 	str.w	lr, [sp]
   83092:	7900      	ldrb	r0, [r0, #4]
   83094:	9001      	str	r0, [sp, #4]
   83096:	4861      	ldr	r0, [pc, #388]	; (8321c <vCommunicationTask+0x2cc>)
   83098:	47b8      	blx	r7
   8309a:	e75e      	b.n	82f5a <vCommunicationTask+0xa>
						//booleanCommunication = 0;
						//booleanDriving = 1;
					}
					else
					{
						puts("INIT NAV NO DATA");
   8309c:	4860      	ldr	r0, [pc, #384]	; (83220 <vCommunicationTask+0x2d0>)
   8309e:	4b50      	ldr	r3, [pc, #320]	; (831e0 <vCommunicationTask+0x290>)
   830a0:	4798      	blx	r3
						twi_reset(TWI_PORT);
   830a2:	4860      	ldr	r0, [pc, #384]	; (83224 <vCommunicationTask+0x2d4>)
   830a4:	4b60      	ldr	r3, [pc, #384]	; (83228 <vCommunicationTask+0x2d8>)
   830a6:	4798      	blx	r3
						vTaskDelay(pdMSTOTICKS(100));
   830a8:	2064      	movs	r0, #100	; 0x64
   830aa:	47a8      	blx	r5
						booleanCommunication = 1;
   830ac:	2301      	movs	r3, #1
   830ae:	7023      	strb	r3, [r4, #0]
						booleanDriving = 0;
   830b0:	2200      	movs	r2, #0
   830b2:	4b47      	ldr	r3, [pc, #284]	; (831d0 <vCommunicationTask+0x280>)
   830b4:	701a      	strb	r2, [r3, #0]
   830b6:	e750      	b.n	82f5a <vCommunicationTask+0xa>
					
				break;
				case START_PICKUP:
					
					//start pickup after modify position
					if (twi_pickupStart() == 1)
   830b8:	4b5c      	ldr	r3, [pc, #368]	; (8322c <vCommunicationTask+0x2dc>)
   830ba:	4798      	blx	r3
   830bc:	2801      	cmp	r0, #1
   830be:	d106      	bne.n	830ce <vCommunicationTask+0x17e>
					{
						puts("STARTED PICKUP");
   830c0:	485b      	ldr	r0, [pc, #364]	; (83230 <vCommunicationTask+0x2e0>)
   830c2:	4b47      	ldr	r3, [pc, #284]	; (831e0 <vCommunicationTask+0x290>)
   830c4:	4798      	blx	r3
						//Could start pickup
						
						current_twi_state=GET_STATUS_PICKUP;
   830c6:	2202      	movs	r2, #2
   830c8:	4b43      	ldr	r3, [pc, #268]	; (831d8 <vCommunicationTask+0x288>)
   830ca:	701a      	strb	r2, [r3, #0]
   830cc:	e745      	b.n	82f5a <vCommunicationTask+0xa>
						
					}
					else
					{
						//failed to start pickup!! try again!
						puts("FAILED TO START_PICKUP");
   830ce:	4859      	ldr	r0, [pc, #356]	; (83234 <vCommunicationTask+0x2e4>)
   830d0:	4b43      	ldr	r3, [pc, #268]	; (831e0 <vCommunicationTask+0x290>)
   830d2:	4798      	blx	r3
						current_twi_state=START_PICKUP;
   830d4:	2201      	movs	r2, #1
   830d6:	4b40      	ldr	r3, [pc, #256]	; (831d8 <vCommunicationTask+0x288>)
   830d8:	701a      	strb	r2, [r3, #0]
   830da:	e73e      	b.n	82f5a <vCommunicationTask+0xa>
				break;
				//pick up is started, getting status
				case GET_STATUS_PICKUP:
					;//due to c code no statement after case
					//get current arm status about pickup
					uint8_t status = twi_pickupGetStatus();
   830dc:	4b56      	ldr	r3, [pc, #344]	; (83238 <vCommunicationTask+0x2e8>)
   830de:	4798      	blx	r3
					
					switch(status)
   830e0:	3802      	subs	r0, #2
   830e2:	2805      	cmp	r0, #5
   830e4:	f63f af39 	bhi.w	82f5a <vCommunicationTask+0xa>
   830e8:	a301      	add	r3, pc, #4	; (adr r3, 830f0 <vCommunicationTask+0x1a0>)
   830ea:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
   830ee:	bf00      	nop
   830f0:	00083119 	.word	0x00083119
   830f4:	00083135 	.word	0x00083135
   830f8:	00083135 	.word	0x00083135
   830fc:	00082f5b 	.word	0x00082f5b
   83100:	00083109 	.word	0x00083109
   83104:	00083111 	.word	0x00083111
					{
						case PICKUP_FAILED:
						puts("PICKUP_FAILED");
   83108:	484c      	ldr	r0, [pc, #304]	; (8323c <vCommunicationTask+0x2ec>)
   8310a:	4b35      	ldr	r3, [pc, #212]	; (831e0 <vCommunicationTask+0x290>)
   8310c:	4798      	blx	r3
						break;
   8310e:	e724      	b.n	82f5a <vCommunicationTask+0xa>
						case PICKUP_DONE_DRIVE:
						puts("PICKUP_DONE_DRIVE");
   83110:	484b      	ldr	r0, [pc, #300]	; (83240 <vCommunicationTask+0x2f0>)
   83112:	4b33      	ldr	r3, [pc, #204]	; (831e0 <vCommunicationTask+0x290>)
   83114:	4798      	blx	r3
						break;
   83116:	e720      	b.n	82f5a <vCommunicationTask+0xa>
						break;
						case PICKUP_DONE:
							//TODO: done picking up
							//done with pickup, continue to drive
							//stop communicating
							puts("PICKUP_DONE");
   83118:	484a      	ldr	r0, [pc, #296]	; (83244 <vCommunicationTask+0x2f4>)
   8311a:	4b31      	ldr	r3, [pc, #196]	; (831e0 <vCommunicationTask+0x290>)
   8311c:	4798      	blx	r3
							//tell (set) movement that pickup is done
							setDonePickup();
   8311e:	4b4a      	ldr	r3, [pc, #296]	; (83248 <vCommunicationTask+0x2f8>)
   83120:	4798      	blx	r3
							booleanUltraSensor=0;
   83122:	2300      	movs	r3, #0
   83124:	7033      	strb	r3, [r6, #0]
							booleanModifyPosition=0;
   83126:	4a2b      	ldr	r2, [pc, #172]	; (831d4 <vCommunicationTask+0x284>)
   83128:	7013      	strb	r3, [r2, #0]
							booleanCommunication=0;
   8312a:	7023      	strb	r3, [r4, #0]
							booleanDriving=1;
   8312c:	2201      	movs	r2, #1
   8312e:	4b28      	ldr	r3, [pc, #160]	; (831d0 <vCommunicationTask+0x280>)
   83130:	701a      	strb	r2, [r3, #0]
							
							
						break;						
   83132:	e712      	b.n	82f5a <vCommunicationTask+0xa>
						case PICKUP_FORWARD:
						case PICKUP_BACKWARD:
							puts("go forward or back");
   83134:	4845      	ldr	r0, [pc, #276]	; (8324c <vCommunicationTask+0x2fc>)
   83136:	4b2a      	ldr	r3, [pc, #168]	; (831e0 <vCommunicationTask+0x290>)
   83138:	4798      	blx	r3
							//TODO: call function that drives forward/backwards based on cm
							printf("Driving forward/backward");
   8313a:	4845      	ldr	r0, [pc, #276]	; (83250 <vCommunicationTask+0x300>)
   8313c:	4f35      	ldr	r7, [pc, #212]	; (83214 <vCommunicationTask+0x2c4>)
   8313e:	47b8      	blx	r7
/*
In order to function properly certain arms need to drive forward during pickup-action
*/

static void driveForwardDuringPickup(){
	printf("\Forward drive during pickup!");
   83140:	4844      	ldr	r0, [pc, #272]	; (83254 <vCommunicationTask+0x304>)
   83142:	47b8      	blx	r7
	//todo uncom
	//forwardDrive(20); //20 cm may suffice
	vTaskDelay(pdMSTOTICKS(2000));
   83144:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   83148:	47a8      	blx	r5
							puts("go forward or back");
							//TODO: call function that drives forward/backwards based on cm
							printf("Driving forward/backward");
							//if we needed to drive during pickup, check if driving is done
							driveForwardDuringPickup();							
							twi_pickupSendMovementDone();
   8314a:	4b43      	ldr	r3, [pc, #268]	; (83258 <vCommunicationTask+0x308>)
   8314c:	4798      	blx	r3
						break;
   8314e:	e704      	b.n	82f5a <vCommunicationTask+0xa>
					//end of get status pickup
				break;
				
				
				case START_DROP_OFF:
					if (twi_dropoffStart() == 1)
   83150:	4b42      	ldr	r3, [pc, #264]	; (8325c <vCommunicationTask+0x30c>)
   83152:	4798      	blx	r3
   83154:	2801      	cmp	r0, #1
   83156:	d103      	bne.n	83160 <vCommunicationTask+0x210>
					{
						
						//done starting pickup
						current_twi_state=GET_STATUS_DROP_OFF;
   83158:	2204      	movs	r2, #4
   8315a:	4b1f      	ldr	r3, [pc, #124]	; (831d8 <vCommunicationTask+0x288>)
   8315c:	701a      	strb	r2, [r3, #0]
   8315e:	e6fc      	b.n	82f5a <vCommunicationTask+0xa>
					}
					else
					{
						//failed to start DROPOFF
						puts("FAILD TO START DROPOFF");
   83160:	483f      	ldr	r0, [pc, #252]	; (83260 <vCommunicationTask+0x310>)
   83162:	4b1f      	ldr	r3, [pc, #124]	; (831e0 <vCommunicationTask+0x290>)
   83164:	4798      	blx	r3
						current_twi_state=START_DROP_OFF;
   83166:	2203      	movs	r2, #3
   83168:	4b1b      	ldr	r3, [pc, #108]	; (831d8 <vCommunicationTask+0x288>)
   8316a:	701a      	strb	r2, [r3, #0]
   8316c:	e6f5      	b.n	82f5a <vCommunicationTask+0xa>
					}
				break;
				
				case GET_STATUS_DROP_OFF:
					puts("GET_STATUS_DROP_OFF");
   8316e:	483d      	ldr	r0, [pc, #244]	; (83264 <vCommunicationTask+0x314>)
   83170:	4b1b      	ldr	r3, [pc, #108]	; (831e0 <vCommunicationTask+0x290>)
   83172:	4798      	blx	r3
					switch(twi_dropoffGetStatus())
   83174:	4b3c      	ldr	r3, [pc, #240]	; (83268 <vCommunicationTask+0x318>)
   83176:	4798      	blx	r3
   83178:	3802      	subs	r0, #2
   8317a:	2803      	cmp	r0, #3
   8317c:	f63f aeed 	bhi.w	82f5a <vCommunicationTask+0xa>
   83180:	e8df f000 	tbb	[pc, r0]
   83184:	7c1b1702 	.word	0x7c1b1702
					{
						case DROPOFF_DONE:
						//tell (set)drive that pickup is done.
							setDropoffDone();
   83188:	4b38      	ldr	r3, [pc, #224]	; (8326c <vCommunicationTask+0x31c>)
   8318a:	4798      	blx	r3
							printf("DROPOFF_DONE\n");
   8318c:	4838      	ldr	r0, [pc, #224]	; (83270 <vCommunicationTask+0x320>)
   8318e:	4b21      	ldr	r3, [pc, #132]	; (83214 <vCommunicationTask+0x2c4>)
   83190:	4798      	blx	r3
							if(armInfo.collectAll)
   83192:	4b14      	ldr	r3, [pc, #80]	; (831e4 <vCommunicationTask+0x294>)
   83194:	791b      	ldrb	r3, [r3, #4]
   83196:	b11b      	cbz	r3, 831a0 <vCommunicationTask+0x250>
							{
								booleanDriving=0;
   83198:	2200      	movs	r2, #0
   8319a:	4b0d      	ldr	r3, [pc, #52]	; (831d0 <vCommunicationTask+0x280>)
   8319c:	701a      	strb	r2, [r3, #0]
   8319e:	e002      	b.n	831a6 <vCommunicationTask+0x256>
							}
							else
							{
								booleanDriving=1;
   831a0:	2201      	movs	r2, #1
   831a2:	4b0b      	ldr	r3, [pc, #44]	; (831d0 <vCommunicationTask+0x280>)
   831a4:	701a      	strb	r2, [r3, #0]
							}
							booleanUltraSensor=0;
   831a6:	2300      	movs	r3, #0
   831a8:	7033      	strb	r3, [r6, #0]
							booleanModifyPosition=0;
   831aa:	4a0a      	ldr	r2, [pc, #40]	; (831d4 <vCommunicationTask+0x284>)
   831ac:	7013      	strb	r3, [r2, #0]
							booleanCommunication=0;
   831ae:	7023      	strb	r3, [r4, #0]
						break;
   831b0:	e6d3      	b.n	82f5a <vCommunicationTask+0xa>
						case DROPOFF_RUNNING:
							printf("DROPOFF_RUNNING\n");
   831b2:	4830      	ldr	r0, [pc, #192]	; (83274 <vCommunicationTask+0x324>)
   831b4:	4b17      	ldr	r3, [pc, #92]	; (83214 <vCommunicationTask+0x2c4>)
   831b6:	4798      	blx	r3
						break;
   831b8:	e6cf      	b.n	82f5a <vCommunicationTask+0xa>
						case DROPOFF_FAILED:
							printf("DROPOFF_FAILED\n");
   831ba:	482f      	ldr	r0, [pc, #188]	; (83278 <vCommunicationTask+0x328>)
   831bc:	4b15      	ldr	r3, [pc, #84]	; (83214 <vCommunicationTask+0x2c4>)
   831be:	4798      	blx	r3
						break;
   831c0:	e6cb      	b.n	82f5a <vCommunicationTask+0xa>
   831c2:	bf00      	nop
   831c4:	2007ad28 	.word	0x2007ad28
   831c8:	00081f95 	.word	0x00081f95
   831cc:	2007ad29 	.word	0x2007ad29
   831d0:	2007ad1c 	.word	0x2007ad1c
   831d4:	2007ad2a 	.word	0x2007ad2a
   831d8:	2007ae45 	.word	0x2007ae45
   831dc:	00086950 	.word	0x00086950
   831e0:	00083ee9 	.word	0x00083ee9
   831e4:	2007ad20 	.word	0x2007ad20
   831e8:	000809cd 	.word	0x000809cd
   831ec:	000803e1 	.word	0x000803e1
   831f0:	0008695c 	.word	0x0008695c
   831f4:	005b8d80 	.word	0x005b8d80
   831f8:	20070001 	.word	0x20070001
   831fc:	00080d59 	.word	0x00080d59
   83200:	00080dbd 	.word	0x00080dbd
   83204:	00080e1d 	.word	0x00080e1d
   83208:	00080e7d 	.word	0x00080e7d
   8320c:	000803bd 	.word	0x000803bd
   83210:	00086970 	.word	0x00086970
   83214:	00083ce1 	.word	0x00083ce1
   83218:	000869a8 	.word	0x000869a8
   8321c:	000869b8 	.word	0x000869b8
   83220:	000869d8 	.word	0x000869d8
   83224:	40090000 	.word	0x40090000
   83228:	0008036d 	.word	0x0008036d
   8322c:	00080af1 	.word	0x00080af1
   83230:	000869ec 	.word	0x000869ec
   83234:	000869fc 	.word	0x000869fc
   83238:	00080b19 	.word	0x00080b19
   8323c:	00086a14 	.word	0x00086a14
   83240:	00086a24 	.word	0x00086a24
   83244:	00086a38 	.word	0x00086a38
   83248:	000803ed 	.word	0x000803ed
   8324c:	00086a44 	.word	0x00086a44
   83250:	00086a58 	.word	0x00086a58
   83254:	00086a74 	.word	0x00086a74
   83258:	00080bc5 	.word	0x00080bc5
   8325c:	00080c01 	.word	0x00080c01
   83260:	00086a94 	.word	0x00086a94
   83264:	00086aac 	.word	0x00086aac
   83268:	00080c29 	.word	0x00080c29
   8326c:	000803f9 	.word	0x000803f9
   83270:	00086ac0 	.word	0x00086ac0
   83274:	00086ad0 	.word	0x00086ad0
   83278:	00086ae4 	.word	0x00086ae4
						case DROPOFF_IDLE:
							printf("DROPOFF_IDLE\n");
   8327c:	4807      	ldr	r0, [pc, #28]	; (8329c <vCommunicationTask+0x34c>)
   8327e:	4b08      	ldr	r3, [pc, #32]	; (832a0 <vCommunicationTask+0x350>)
   83280:	4798      	blx	r3
						break;
   83282:	e66a      	b.n	82f5a <vCommunicationTask+0xa>
					}				
				break;
				case IDLE:
					puts("IDLE");
   83284:	4807      	ldr	r0, [pc, #28]	; (832a4 <vCommunicationTask+0x354>)
   83286:	4b08      	ldr	r3, [pc, #32]	; (832a8 <vCommunicationTask+0x358>)
   83288:	4798      	blx	r3
				break;
   8328a:	e666      	b.n	82f5a <vCommunicationTask+0xa>
				default:
					printf("FAILED twi switch %d\n",current_twi_state);
   8328c:	4807      	ldr	r0, [pc, #28]	; (832ac <vCommunicationTask+0x35c>)
   8328e:	4b04      	ldr	r3, [pc, #16]	; (832a0 <vCommunicationTask+0x350>)
   83290:	4798      	blx	r3
				break;
			}
			//end of current_twi_state
		} 
   83292:	e662      	b.n	82f5a <vCommunicationTask+0xa>
		else
		{
			vTaskDelay(pdMSTOTICKS(100));
   83294:	2064      	movs	r0, #100	; 0x64
   83296:	47a8      	blx	r5
   83298:	e65f      	b.n	82f5a <vCommunicationTask+0xa>
   8329a:	bf00      	nop
   8329c:	00086af4 	.word	0x00086af4
   832a0:	00083ce1 	.word	0x00083ce1
   832a4:	00086924 	.word	0x00086924
   832a8:	00083ee9 	.word	0x00083ee9
   832ac:	00086b04 	.word	0x00086b04

000832b0 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   832b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   832b2:	b083      	sub	sp, #12
   832b4:	4604      	mov	r4, r0
   832b6:	460d      	mov	r5, r1
	uint32_t val = 0;
   832b8:	2300      	movs	r3, #0
   832ba:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   832bc:	4b1f      	ldr	r3, [pc, #124]	; (8333c <usart_serial_getchar+0x8c>)
   832be:	4298      	cmp	r0, r3
   832c0:	d107      	bne.n	832d2 <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
   832c2:	461f      	mov	r7, r3
   832c4:	4e1e      	ldr	r6, [pc, #120]	; (83340 <usart_serial_getchar+0x90>)
   832c6:	4638      	mov	r0, r7
   832c8:	4629      	mov	r1, r5
   832ca:	47b0      	blx	r6
   832cc:	2800      	cmp	r0, #0
   832ce:	d1fa      	bne.n	832c6 <usart_serial_getchar+0x16>
   832d0:	e019      	b.n	83306 <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   832d2:	4b1c      	ldr	r3, [pc, #112]	; (83344 <usart_serial_getchar+0x94>)
   832d4:	4298      	cmp	r0, r3
   832d6:	d109      	bne.n	832ec <usart_serial_getchar+0x3c>
		while (usart_read(p_usart, &val));
   832d8:	461f      	mov	r7, r3
   832da:	4e1b      	ldr	r6, [pc, #108]	; (83348 <usart_serial_getchar+0x98>)
   832dc:	4638      	mov	r0, r7
   832de:	a901      	add	r1, sp, #4
   832e0:	47b0      	blx	r6
   832e2:	2800      	cmp	r0, #0
   832e4:	d1fa      	bne.n	832dc <usart_serial_getchar+0x2c>
		*data = (uint8_t)(val & 0xFF);
   832e6:	9b01      	ldr	r3, [sp, #4]
   832e8:	702b      	strb	r3, [r5, #0]
   832ea:	e019      	b.n	83320 <usart_serial_getchar+0x70>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   832ec:	4b17      	ldr	r3, [pc, #92]	; (8334c <usart_serial_getchar+0x9c>)
   832ee:	4298      	cmp	r0, r3
   832f0:	d109      	bne.n	83306 <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
   832f2:	461e      	mov	r6, r3
   832f4:	4c14      	ldr	r4, [pc, #80]	; (83348 <usart_serial_getchar+0x98>)
   832f6:	4630      	mov	r0, r6
   832f8:	a901      	add	r1, sp, #4
   832fa:	47a0      	blx	r4
   832fc:	2800      	cmp	r0, #0
   832fe:	d1fa      	bne.n	832f6 <usart_serial_getchar+0x46>
		*data = (uint8_t)(val & 0xFF);
   83300:	9b01      	ldr	r3, [sp, #4]
   83302:	702b      	strb	r3, [r5, #0]
   83304:	e018      	b.n	83338 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   83306:	4b12      	ldr	r3, [pc, #72]	; (83350 <usart_serial_getchar+0xa0>)
   83308:	429c      	cmp	r4, r3
   8330a:	d109      	bne.n	83320 <usart_serial_getchar+0x70>
		while (usart_read(p_usart, &val));
   8330c:	461e      	mov	r6, r3
   8330e:	4c0e      	ldr	r4, [pc, #56]	; (83348 <usart_serial_getchar+0x98>)
   83310:	4630      	mov	r0, r6
   83312:	a901      	add	r1, sp, #4
   83314:	47a0      	blx	r4
   83316:	2800      	cmp	r0, #0
   83318:	d1fa      	bne.n	83310 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
   8331a:	9b01      	ldr	r3, [sp, #4]
   8331c:	702b      	strb	r3, [r5, #0]
   8331e:	e00b      	b.n	83338 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   83320:	4b0c      	ldr	r3, [pc, #48]	; (83354 <usart_serial_getchar+0xa4>)
   83322:	429c      	cmp	r4, r3
   83324:	d108      	bne.n	83338 <usart_serial_getchar+0x88>
		while (usart_read(p_usart, &val));
   83326:	461e      	mov	r6, r3
   83328:	4c07      	ldr	r4, [pc, #28]	; (83348 <usart_serial_getchar+0x98>)
   8332a:	4630      	mov	r0, r6
   8332c:	a901      	add	r1, sp, #4
   8332e:	47a0      	blx	r4
   83330:	2800      	cmp	r0, #0
   83332:	d1fa      	bne.n	8332a <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
   83334:	9b01      	ldr	r3, [sp, #4]
   83336:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   83338:	b003      	add	sp, #12
   8333a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8333c:	400e0800 	.word	0x400e0800
   83340:	0008113d 	.word	0x0008113d
   83344:	40098000 	.word	0x40098000
   83348:	00080f31 	.word	0x00080f31
   8334c:	4009c000 	.word	0x4009c000
   83350:	400a0000 	.word	0x400a0000
   83354:	400a4000 	.word	0x400a4000

00083358 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   83358:	b570      	push	{r4, r5, r6, lr}
   8335a:	460c      	mov	r4, r1
#ifdef UART
	if (UART == (Uart*)p_usart) {
   8335c:	4b21      	ldr	r3, [pc, #132]	; (833e4 <usart_serial_putchar+0x8c>)
   8335e:	4298      	cmp	r0, r3
   83360:	d107      	bne.n	83372 <usart_serial_putchar+0x1a>
		while (uart_write((Uart*)p_usart, c)!=0);
   83362:	461e      	mov	r6, r3
   83364:	4d20      	ldr	r5, [pc, #128]	; (833e8 <usart_serial_putchar+0x90>)
   83366:	4630      	mov	r0, r6
   83368:	4621      	mov	r1, r4
   8336a:	47a8      	blx	r5
   8336c:	2800      	cmp	r0, #0
   8336e:	d1fa      	bne.n	83366 <usart_serial_putchar+0xe>
   83370:	e02b      	b.n	833ca <usart_serial_putchar+0x72>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   83372:	4b1e      	ldr	r3, [pc, #120]	; (833ec <usart_serial_putchar+0x94>)
   83374:	4298      	cmp	r0, r3
   83376:	d107      	bne.n	83388 <usart_serial_putchar+0x30>
		while (usart_write(p_usart, c)!=0);
   83378:	461e      	mov	r6, r3
   8337a:	4d1d      	ldr	r5, [pc, #116]	; (833f0 <usart_serial_putchar+0x98>)
   8337c:	4630      	mov	r0, r6
   8337e:	4621      	mov	r1, r4
   83380:	47a8      	blx	r5
   83382:	2800      	cmp	r0, #0
   83384:	d1fa      	bne.n	8337c <usart_serial_putchar+0x24>
   83386:	e022      	b.n	833ce <usart_serial_putchar+0x76>
		return 1;
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   83388:	4b1a      	ldr	r3, [pc, #104]	; (833f4 <usart_serial_putchar+0x9c>)
   8338a:	4298      	cmp	r0, r3
   8338c:	d107      	bne.n	8339e <usart_serial_putchar+0x46>
		while (usart_write(p_usart, c)!=0);
   8338e:	461e      	mov	r6, r3
   83390:	4d17      	ldr	r5, [pc, #92]	; (833f0 <usart_serial_putchar+0x98>)
   83392:	4630      	mov	r0, r6
   83394:	4621      	mov	r1, r4
   83396:	47a8      	blx	r5
   83398:	2800      	cmp	r0, #0
   8339a:	d1fa      	bne.n	83392 <usart_serial_putchar+0x3a>
   8339c:	e019      	b.n	833d2 <usart_serial_putchar+0x7a>
		return 1;
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   8339e:	4b16      	ldr	r3, [pc, #88]	; (833f8 <usart_serial_putchar+0xa0>)
   833a0:	4298      	cmp	r0, r3
   833a2:	d107      	bne.n	833b4 <usart_serial_putchar+0x5c>
		while (usart_write(p_usart, c)!=0);
   833a4:	461e      	mov	r6, r3
   833a6:	4d12      	ldr	r5, [pc, #72]	; (833f0 <usart_serial_putchar+0x98>)
   833a8:	4630      	mov	r0, r6
   833aa:	4621      	mov	r1, r4
   833ac:	47a8      	blx	r5
   833ae:	2800      	cmp	r0, #0
   833b0:	d1fa      	bne.n	833a8 <usart_serial_putchar+0x50>
   833b2:	e010      	b.n	833d6 <usart_serial_putchar+0x7e>
		return 1;
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   833b4:	4b11      	ldr	r3, [pc, #68]	; (833fc <usart_serial_putchar+0xa4>)
   833b6:	4298      	cmp	r0, r3
   833b8:	d10f      	bne.n	833da <usart_serial_putchar+0x82>
		while (usart_write(p_usart, c)!=0);
   833ba:	461e      	mov	r6, r3
   833bc:	4d0c      	ldr	r5, [pc, #48]	; (833f0 <usart_serial_putchar+0x98>)
   833be:	4630      	mov	r0, r6
   833c0:	4621      	mov	r1, r4
   833c2:	47a8      	blx	r5
   833c4:	2800      	cmp	r0, #0
   833c6:	d1fa      	bne.n	833be <usart_serial_putchar+0x66>
   833c8:	e009      	b.n	833de <usart_serial_putchar+0x86>
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
   833ca:	2001      	movs	r0, #1
   833cc:	bd70      	pop	{r4, r5, r6, pc}
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   833ce:	2001      	movs	r0, #1
   833d0:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   833d2:	2001      	movs	r0, #1
   833d4:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   833d6:	2001      	movs	r0, #1
   833d8:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   833da:	2000      	movs	r0, #0
   833dc:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   833de:	2001      	movs	r0, #1
	}
# endif
#endif /* ifdef USART */

	return 0;
}
   833e0:	bd70      	pop	{r4, r5, r6, pc}
   833e2:	bf00      	nop
   833e4:	400e0800 	.word	0x400e0800
   833e8:	0008112d 	.word	0x0008112d
   833ec:	40098000 	.word	0x40098000
   833f0:	00080f1d 	.word	0x00080f1d
   833f4:	4009c000 	.word	0x4009c000
   833f8:	400a0000 	.word	0x400a0000
   833fc:	400a4000 	.word	0x400a4000

00083400 <vDriveToObjectTask>:
curObj=1;
/*
 * Task that administers entire functionality that concerns robot's automatic transportation and movement-mobilization
 *
 */
void vDriveToObjectTask(void *pvParam) {
   83400:	b5f0      	push	{r4, r5, r6, r7, lr}
   83402:	b083      	sub	sp, #12
	
	while (1)
	{
		if (booleanDriving == 1 && booleanUltraSensor == 0 && booleanCommunication == 0)
   83404:	4c26      	ldr	r4, [pc, #152]	; (834a0 <vDriveToObjectTask+0xa0>)
			portTickType xLastWakeTime = xTaskGetTickCount();
			vTaskDelayUntil(&xLastWakeTime, pdMSTOTICKS(250));
		}
		else // continue blocking
		{
			vTaskDelay(pdMSTOTICKS(200));
   83406:	4d27      	ldr	r5, [pc, #156]	; (834a4 <vDriveToObjectTask+0xa4>)
 */
void vDriveToObjectTask(void *pvParam) {
	
	while (1)
	{
		if (booleanDriving == 1 && booleanUltraSensor == 0 && booleanCommunication == 0)
   83408:	4e27      	ldr	r6, [pc, #156]	; (834a8 <vDriveToObjectTask+0xa8>)
   8340a:	7823      	ldrb	r3, [r4, #0]
   8340c:	2b01      	cmp	r3, #1
   8340e:	d12d      	bne.n	8346c <vDriveToObjectTask+0x6c>
   83410:	7833      	ldrb	r3, [r6, #0]
   83412:	2b00      	cmp	r3, #0
   83414:	d12a      	bne.n	8346c <vDriveToObjectTask+0x6c>
   83416:	4b25      	ldr	r3, [pc, #148]	; (834ac <vDriveToObjectTask+0xac>)
   83418:	781b      	ldrb	r3, [r3, #0]
   8341a:	bb3b      	cbnz	r3, 8346c <vDriveToObjectTask+0x6c>
		{
						
 			printf("\n>>>>>>>>>>>>DRIVING TO OBJECT<<<<<<<<<<<<\n");
   8341c:	4824      	ldr	r0, [pc, #144]	; (834b0 <vDriveToObjectTask+0xb0>)
   8341e:	4b25      	ldr	r3, [pc, #148]	; (834b4 <vDriveToObjectTask+0xb4>)
   83420:	4798      	blx	r3
			//todo del
			uint8_t gotoVal=0;
			if(curObj < 3) 
   83422:	4b25      	ldr	r3, [pc, #148]	; (834b8 <vDriveToObjectTask+0xb8>)
   83424:	681b      	ldr	r3, [r3, #0]
   83426:	2b02      	cmp	r3, #2
   83428:	dc23      	bgt.n	83472 <vDriveToObjectTask+0x72>
			{
				gotoVal=1;
				curObj++;
   8342a:	3301      	adds	r3, #1
   8342c:	4a22      	ldr	r2, [pc, #136]	; (834b8 <vDriveToObjectTask+0xb8>)
   8342e:	6013      	str	r3, [r2, #0]
			}
			else{
				gotoVal = 2;
			}
			vTaskDelay(pdMSTOTICKS(4000));
   83430:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
   83434:	47a8      	blx	r5
static arminfo_t armInfo;
static void driveForwardDuringPickup(void);
static void setBitLevels(int, int, int, int);

static void setBitLevels(int driving, int ultrasensor, int modifyPosition, int communication){
	booleanDriving = driving;
   83436:	2300      	movs	r3, #0
   83438:	7023      	strb	r3, [r4, #0]
	booleanUltraSensor = ultrasensor;
   8343a:	2701      	movs	r7, #1
   8343c:	7037      	strb	r7, [r6, #0]
	booleanModifyPosition = modifyPosition;
   8343e:	4a1f      	ldr	r2, [pc, #124]	; (834bc <vDriveToObjectTask+0xbc>)
   83440:	7013      	strb	r3, [r2, #0]
	booleanCommunication = communication;
   83442:	4a1a      	ldr	r2, [pc, #104]	; (834ac <vDriveToObjectTask+0xac>)
   83444:	7013      	strb	r3, [r2, #0]
			//todo uncomment
// 			uint8_t gotoVal = goToNext();
			if(gotoVal == 1)
			{
				setBitLevels(0, 1, 0, 0); // ultrasensor = 1
				current_twi_state = START_PICKUP;
   83446:	4b1e      	ldr	r3, [pc, #120]	; (834c0 <vDriveToObjectTask+0xc0>)
   83448:	701f      	strb	r7, [r3, #0]
				puts("GOTO PICKUP FROM DRIVE");
   8344a:	481e      	ldr	r0, [pc, #120]	; (834c4 <vDriveToObjectTask+0xc4>)
   8344c:	4b1e      	ldr	r3, [pc, #120]	; (834c8 <vDriveToObjectTask+0xc8>)
   8344e:	4798      	blx	r3
			    printf("\nGotoVal = %u", gotoVal);
   83450:	481e      	ldr	r0, [pc, #120]	; (834cc <vDriveToObjectTask+0xcc>)
   83452:	4639      	mov	r1, r7
   83454:	4b17      	ldr	r3, [pc, #92]	; (834b4 <vDriveToObjectTask+0xb4>)
   83456:	4798      	blx	r3
			{
				// Mission accomplished!
				setBitLevels(0, 0, 0, 0); // do not enter any task!
				printf("\nGotoVal = %u", gotoVal);
			}
			portTickType xLastWakeTime = xTaskGetTickCount();
   83458:	4b1d      	ldr	r3, [pc, #116]	; (834d0 <vDriveToObjectTask+0xd0>)
   8345a:	4798      	blx	r3
   8345c:	ab02      	add	r3, sp, #8
   8345e:	f843 0d04 	str.w	r0, [r3, #-4]!
			vTaskDelayUntil(&xLastWakeTime, pdMSTOTICKS(250));
   83462:	4618      	mov	r0, r3
   83464:	21fa      	movs	r1, #250	; 0xfa
   83466:	4b1b      	ldr	r3, [pc, #108]	; (834d4 <vDriveToObjectTask+0xd4>)
   83468:	4798      	blx	r3
void vDriveToObjectTask(void *pvParam) {
	
	while (1)
	{
		if (booleanDriving == 1 && booleanUltraSensor == 0 && booleanCommunication == 0)
		{
   8346a:	e7ce      	b.n	8340a <vDriveToObjectTask+0xa>
			portTickType xLastWakeTime = xTaskGetTickCount();
			vTaskDelayUntil(&xLastWakeTime, pdMSTOTICKS(250));
		}
		else // continue blocking
		{
			vTaskDelay(pdMSTOTICKS(200));
   8346c:	20c8      	movs	r0, #200	; 0xc8
   8346e:	47a8      	blx	r5
   83470:	e7cb      	b.n	8340a <vDriveToObjectTask+0xa>
				curObj++;
			}
			else{
				gotoVal = 2;
			}
			vTaskDelay(pdMSTOTICKS(4000));
   83472:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
   83476:	47a8      	blx	r5
static arminfo_t armInfo;
static void driveForwardDuringPickup(void);
static void setBitLevels(int, int, int, int);

static void setBitLevels(int driving, int ultrasensor, int modifyPosition, int communication){
	booleanDriving = driving;
   83478:	2300      	movs	r3, #0
   8347a:	7023      	strb	r3, [r4, #0]
	booleanUltraSensor = ultrasensor;
   8347c:	2201      	movs	r2, #1
   8347e:	7032      	strb	r2, [r6, #0]
	booleanModifyPosition = modifyPosition;
   83480:	4a0e      	ldr	r2, [pc, #56]	; (834bc <vDriveToObjectTask+0xbc>)
   83482:	7013      	strb	r3, [r2, #0]
	booleanCommunication = communication;
   83484:	4a09      	ldr	r2, [pc, #36]	; (834ac <vDriveToObjectTask+0xac>)
   83486:	7013      	strb	r3, [r2, #0]
			}
			
			if(gotoVal == 2)
			{
				setBitLevels(0, 1, 0, 0); // ultrasensor = 1
				current_twi_state = START_DROP_OFF;
   83488:	2203      	movs	r2, #3
   8348a:	4b0d      	ldr	r3, [pc, #52]	; (834c0 <vDriveToObjectTask+0xc0>)
   8348c:	701a      	strb	r2, [r3, #0]
				puts("GOTO DROPOFF FROM DRIVE");
   8348e:	4812      	ldr	r0, [pc, #72]	; (834d8 <vDriveToObjectTask+0xd8>)
   83490:	4b0d      	ldr	r3, [pc, #52]	; (834c8 <vDriveToObjectTask+0xc8>)
   83492:	4798      	blx	r3
			    printf("\nGotoVal = %u", gotoVal);
   83494:	480d      	ldr	r0, [pc, #52]	; (834cc <vDriveToObjectTask+0xcc>)
   83496:	2102      	movs	r1, #2
   83498:	4b06      	ldr	r3, [pc, #24]	; (834b4 <vDriveToObjectTask+0xb4>)
   8349a:	4798      	blx	r3
   8349c:	e7dc      	b.n	83458 <vDriveToObjectTask+0x58>
   8349e:	bf00      	nop
   834a0:	2007ad1c 	.word	0x2007ad1c
   834a4:	00081f95 	.word	0x00081f95
   834a8:	2007ad29 	.word	0x2007ad29
   834ac:	2007ad28 	.word	0x2007ad28
   834b0:	00086b1c 	.word	0x00086b1c
   834b4:	00083ce1 	.word	0x00083ce1
   834b8:	2007021c 	.word	0x2007021c
   834bc:	2007ad2a 	.word	0x2007ad2a
   834c0:	2007ae45 	.word	0x2007ae45
   834c4:	00086b48 	.word	0x00086b48
   834c8:	00083ee9 	.word	0x00083ee9
   834cc:	00086b60 	.word	0x00086b60
   834d0:	00081cbd 	.word	0x00081cbd
   834d4:	00081f05 	.word	0x00081f05
   834d8:	00086b70 	.word	0x00086b70

000834dc <main>:
	printf("Console ready\n");
	printf("=============\n");
}

int main (void)
{
   834dc:	b570      	push	{r4, r5, r6, lr}
   834de:	b088      	sub	sp, #32
	/* Insert system clock initialization code here (sysclk_init()). */
	sysclk_init();
   834e0:	4b52      	ldr	r3, [pc, #328]	; (8362c <main+0x150>)
   834e2:	4798      	blx	r3
	board_init();
   834e4:	4b52      	ldr	r3, [pc, #328]	; (83630 <main+0x154>)
   834e6:	4798      	blx	r3
   834e8:	2008      	movs	r0, #8
   834ea:	4d52      	ldr	r5, [pc, #328]	; (83634 <main+0x158>)
   834ec:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   834ee:	4c52      	ldr	r4, [pc, #328]	; (83638 <main+0x15c>)
   834f0:	4b52      	ldr	r3, [pc, #328]	; (8363c <main+0x160>)
   834f2:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   834f4:	4a52      	ldr	r2, [pc, #328]	; (83640 <main+0x164>)
   834f6:	4b53      	ldr	r3, [pc, #332]	; (83644 <main+0x168>)
   834f8:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   834fa:	4a53      	ldr	r2, [pc, #332]	; (83648 <main+0x16c>)
   834fc:	4b53      	ldr	r3, [pc, #332]	; (8364c <main+0x170>)
   834fe:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   83500:	4b53      	ldr	r3, [pc, #332]	; (83650 <main+0x174>)
   83502:	9305      	str	r3, [sp, #20]
	uart_settings.ul_baudrate = opt->baudrate;
   83504:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   83508:	9306      	str	r3, [sp, #24]
	uart_settings.ul_mode = opt->paritytype;
   8350a:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8350e:	9307      	str	r3, [sp, #28]
   83510:	2008      	movs	r0, #8
   83512:	47a8      	blx	r5
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   83514:	4620      	mov	r0, r4
   83516:	a905      	add	r1, sp, #20
   83518:	4b4e      	ldr	r3, [pc, #312]	; (83654 <main+0x178>)
   8351a:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   8351c:	4e4e      	ldr	r6, [pc, #312]	; (83658 <main+0x17c>)
   8351e:	6833      	ldr	r3, [r6, #0]
   83520:	6898      	ldr	r0, [r3, #8]
   83522:	2100      	movs	r1, #0
   83524:	4c4d      	ldr	r4, [pc, #308]	; (8365c <main+0x180>)
   83526:	47a0      	blx	r4
	setbuf(stdin, NULL);
   83528:	6833      	ldr	r3, [r6, #0]
   8352a:	6858      	ldr	r0, [r3, #4]
   8352c:	2100      	movs	r1, #0
   8352e:	47a0      	blx	r4

	/* Configure console UART. */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
	
	printf("Console ready\n");
   83530:	484b      	ldr	r0, [pc, #300]	; (83660 <main+0x184>)
   83532:	4c4c      	ldr	r4, [pc, #304]	; (83664 <main+0x188>)
   83534:	47a0      	blx	r4
	printf("=============\n");
   83536:	484c      	ldr	r0, [pc, #304]	; (83668 <main+0x18c>)
   83538:	47a0      	blx	r4
{
	/* Insert system clock initialization code here (sysclk_init()). */
	sysclk_init();
	board_init();
	configure_console();
	TC0_init();
   8353a:	4b4c      	ldr	r3, [pc, #304]	; (8366c <main+0x190>)
   8353c:	4798      	blx	r3
	//init twi communication
	twi_comInit();
   8353e:	4b4c      	ldr	r3, [pc, #304]	; (83670 <main+0x194>)
   83540:	4798      	blx	r3
	//armInfo = twi_getArmInfo();
	
	uint32_t value = 0;
	
	
	pulseCounter_configA(ID_PIOC, PIOC, PIO_PC28);
   83542:	4c4c      	ldr	r4, [pc, #304]	; (83674 <main+0x198>)
   83544:	200d      	movs	r0, #13
   83546:	4621      	mov	r1, r4
   83548:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   8354c:	4b4a      	ldr	r3, [pc, #296]	; (83678 <main+0x19c>)
   8354e:	4798      	blx	r3
	pulseCounter_configB(ID_PIOC, PIOC, PIO_PC23);
   83550:	200d      	movs	r0, #13
   83552:	4621      	mov	r1, r4
   83554:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   83558:	4b48      	ldr	r3, [pc, #288]	; (8367c <main+0x1a0>)
   8355a:	4798      	blx	r3
	
	pulse_init();
   8355c:	4b48      	ldr	r3, [pc, #288]	; (83680 <main+0x1a4>)
   8355e:	4798      	blx	r3
	
	current_twi_state = INIT_ARM;
   83560:	2600      	movs	r6, #0
   83562:	4b48      	ldr	r3, [pc, #288]	; (83684 <main+0x1a8>)
   83564:	701e      	strb	r6, [r3, #0]
   83566:	200b      	movs	r0, #11
   83568:	47a8      	blx	r5
   8356a:	200c      	movs	r0, #12
   8356c:	47a8      	blx	r5
   8356e:	200d      	movs	r0, #13
   83570:	47a8      	blx	r5
   83572:	200e      	movs	r0, #14
   83574:	47a8      	blx	r5
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   83576:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   8357a:	6123      	str	r3, [r4, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   8357c:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   83580:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   83584:	6123      	str	r3, [r4, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   83586:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   8358a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
   8358e:	6163      	str	r3, [r4, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   83590:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   83594:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   83598:	6123      	str	r3, [r4, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   8359a:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   8359e:	6363      	str	r3, [r4, #52]	; 0x34
	ioport_set_pin_dir(trig, IOPORT_DIR_OUTPUT);
	ioport_set_pin_dir(echo, IOPORT_DIR_INPUT);
	ioport_set_pin_dir(servo, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(servo, LOW);
	
	if(xTaskCreate(vDriveToObjectTask, "DriveToObject", 1000, NULL, 1, pxTaskDriveToObject) != pdPASS){
   835a0:	2301      	movs	r3, #1
   835a2:	9300      	str	r3, [sp, #0]
   835a4:	4b38      	ldr	r3, [pc, #224]	; (83688 <main+0x1ac>)
   835a6:	681b      	ldr	r3, [r3, #0]
   835a8:	9301      	str	r3, [sp, #4]
   835aa:	9602      	str	r6, [sp, #8]
   835ac:	9603      	str	r6, [sp, #12]
   835ae:	4837      	ldr	r0, [pc, #220]	; (8368c <main+0x1b0>)
   835b0:	4937      	ldr	r1, [pc, #220]	; (83690 <main+0x1b4>)
   835b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   835b6:	4633      	mov	r3, r6
   835b8:	4c36      	ldr	r4, [pc, #216]	; (83694 <main+0x1b8>)
   835ba:	47a0      	blx	r4
   835bc:	2801      	cmp	r0, #1
   835be:	d002      	beq.n	835c6 <main+0xea>
		printf("Failed to create DriveToObject-task");
   835c0:	4835      	ldr	r0, [pc, #212]	; (83698 <main+0x1bc>)
   835c2:	4b28      	ldr	r3, [pc, #160]	; (83664 <main+0x188>)
   835c4:	4798      	blx	r3
	}
	
	if(xTaskCreate(vUltraSensorTask, "UltraSensor", 1000, NULL, 1, pxTaskUltraSensor) != pdPASS){
   835c6:	2301      	movs	r3, #1
   835c8:	9300      	str	r3, [sp, #0]
   835ca:	4b34      	ldr	r3, [pc, #208]	; (8369c <main+0x1c0>)
   835cc:	681b      	ldr	r3, [r3, #0]
   835ce:	9301      	str	r3, [sp, #4]
   835d0:	2300      	movs	r3, #0
   835d2:	9302      	str	r3, [sp, #8]
   835d4:	9303      	str	r3, [sp, #12]
   835d6:	4832      	ldr	r0, [pc, #200]	; (836a0 <main+0x1c4>)
   835d8:	4932      	ldr	r1, [pc, #200]	; (836a4 <main+0x1c8>)
   835da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   835de:	4c2d      	ldr	r4, [pc, #180]	; (83694 <main+0x1b8>)
   835e0:	47a0      	blx	r4
   835e2:	2801      	cmp	r0, #1
   835e4:	d002      	beq.n	835ec <main+0x110>
		printf("Failed to create UltraSensor-task");
   835e6:	4830      	ldr	r0, [pc, #192]	; (836a8 <main+0x1cc>)
   835e8:	4b1e      	ldr	r3, [pc, #120]	; (83664 <main+0x188>)
   835ea:	4798      	blx	r3
	}
	
	if(xTaskCreate(vCommunicationTask, "Communication", 1000, NULL, 1, pxTaskCommunication) != pdPASS){
   835ec:	2301      	movs	r3, #1
   835ee:	9300      	str	r3, [sp, #0]
   835f0:	4b2e      	ldr	r3, [pc, #184]	; (836ac <main+0x1d0>)
   835f2:	681b      	ldr	r3, [r3, #0]
   835f4:	9301      	str	r3, [sp, #4]
   835f6:	2300      	movs	r3, #0
   835f8:	9302      	str	r3, [sp, #8]
   835fa:	9303      	str	r3, [sp, #12]
   835fc:	482c      	ldr	r0, [pc, #176]	; (836b0 <main+0x1d4>)
   835fe:	492d      	ldr	r1, [pc, #180]	; (836b4 <main+0x1d8>)
   83600:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   83604:	4c23      	ldr	r4, [pc, #140]	; (83694 <main+0x1b8>)
   83606:	47a0      	blx	r4
   83608:	2801      	cmp	r0, #1
   8360a:	d002      	beq.n	83612 <main+0x136>
		printf("Failed to create Communication-task");
   8360c:	482a      	ldr	r0, [pc, #168]	; (836b8 <main+0x1dc>)
   8360e:	4b15      	ldr	r3, [pc, #84]	; (83664 <main+0x188>)
   83610:	4798      	blx	r3
	}
	
	booleanDriving = 0;
   83612:	2300      	movs	r3, #0
   83614:	4a29      	ldr	r2, [pc, #164]	; (836bc <main+0x1e0>)
   83616:	7013      	strb	r3, [r2, #0]
	booleanUltraSensor = 0;
   83618:	4a29      	ldr	r2, [pc, #164]	; (836c0 <main+0x1e4>)
   8361a:	7013      	strb	r3, [r2, #0]
	booleanModifyPosition = 0;
   8361c:	4a29      	ldr	r2, [pc, #164]	; (836c4 <main+0x1e8>)
   8361e:	7013      	strb	r3, [r2, #0]
	booleanCommunication = 1;
   83620:	2201      	movs	r2, #1
   83622:	4b29      	ldr	r3, [pc, #164]	; (836c8 <main+0x1ec>)
   83624:	701a      	strb	r2, [r3, #0]
	
	vTaskStartScheduler();
   83626:	4b29      	ldr	r3, [pc, #164]	; (836cc <main+0x1f0>)
   83628:	4798      	blx	r3
   8362a:	e7fe      	b.n	8362a <main+0x14e>
   8362c:	00082735 	.word	0x00082735
   83630:	00082799 	.word	0x00082799
   83634:	00082c45 	.word	0x00082c45
   83638:	400e0800 	.word	0x400e0800
   8363c:	2007ae34 	.word	0x2007ae34
   83640:	00083359 	.word	0x00083359
   83644:	2007ae30 	.word	0x2007ae30
   83648:	000832b1 	.word	0x000832b1
   8364c:	2007ae2c 	.word	0x2007ae2c
   83650:	0501bd00 	.word	0x0501bd00
   83654:	000810f5 	.word	0x000810f5
   83658:	20070648 	.word	0x20070648
   8365c:	00083ef9 	.word	0x00083ef9
   83660:	00086b88 	.word	0x00086b88
   83664:	00083ce1 	.word	0x00083ce1
   83668:	00086b98 	.word	0x00086b98
   8366c:	0008075d 	.word	0x0008075d
   83670:	00080861 	.word	0x00080861
   83674:	400e1200 	.word	0x400e1200
   83678:	0008069d 	.word	0x0008069d
   8367c:	000806fd 	.word	0x000806fd
   83680:	00080645 	.word	0x00080645
   83684:	2007ae45 	.word	0x2007ae45
   83688:	2007ae3c 	.word	0x2007ae3c
   8368c:	00083401 	.word	0x00083401
   83690:	00086ba8 	.word	0x00086ba8
   83694:	00081a3d 	.word	0x00081a3d
   83698:	00086bb8 	.word	0x00086bb8
   8369c:	2007ae38 	.word	0x2007ae38
   836a0:	00082ee1 	.word	0x00082ee1
   836a4:	00086bdc 	.word	0x00086bdc
   836a8:	00086be8 	.word	0x00086be8
   836ac:	2007ae40 	.word	0x2007ae40
   836b0:	00082f51 	.word	0x00082f51
   836b4:	00086c0c 	.word	0x00086c0c
   836b8:	00086c1c 	.word	0x00086c1c
   836bc:	2007ad1c 	.word	0x2007ad1c
   836c0:	2007ad29 	.word	0x2007ad29
   836c4:	2007ad2a 	.word	0x2007ad2a
   836c8:	2007ad28 	.word	0x2007ad28
   836cc:	00081c45 	.word	0x00081c45

000836d0 <__aeabi_uldivmod>:
   836d0:	b94b      	cbnz	r3, 836e6 <__aeabi_uldivmod+0x16>
   836d2:	b942      	cbnz	r2, 836e6 <__aeabi_uldivmod+0x16>
   836d4:	2900      	cmp	r1, #0
   836d6:	bf08      	it	eq
   836d8:	2800      	cmpeq	r0, #0
   836da:	d002      	beq.n	836e2 <__aeabi_uldivmod+0x12>
   836dc:	f04f 31ff 	mov.w	r1, #4294967295
   836e0:	4608      	mov	r0, r1
   836e2:	f000 b83b 	b.w	8375c <__aeabi_idiv0>
   836e6:	b082      	sub	sp, #8
   836e8:	46ec      	mov	ip, sp
   836ea:	e92d 5000 	stmdb	sp!, {ip, lr}
   836ee:	f000 f81d 	bl	8372c <__gnu_uldivmod_helper>
   836f2:	f8dd e004 	ldr.w	lr, [sp, #4]
   836f6:	b002      	add	sp, #8
   836f8:	bc0c      	pop	{r2, r3}
   836fa:	4770      	bx	lr

000836fc <__gnu_ldivmod_helper>:
   836fc:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   83700:	9e08      	ldr	r6, [sp, #32]
   83702:	4614      	mov	r4, r2
   83704:	461d      	mov	r5, r3
   83706:	4680      	mov	r8, r0
   83708:	4689      	mov	r9, r1
   8370a:	f000 f829 	bl	83760 <__divdi3>
   8370e:	fb04 f301 	mul.w	r3, r4, r1
   83712:	fba4 ab00 	umull	sl, fp, r4, r0
   83716:	fb00 3205 	mla	r2, r0, r5, r3
   8371a:	4493      	add	fp, r2
   8371c:	ebb8 080a 	subs.w	r8, r8, sl
   83720:	eb69 090b 	sbc.w	r9, r9, fp
   83724:	e9c6 8900 	strd	r8, r9, [r6]
   83728:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

0008372c <__gnu_uldivmod_helper>:
   8372c:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   83730:	9e08      	ldr	r6, [sp, #32]
   83732:	4614      	mov	r4, r2
   83734:	461d      	mov	r5, r3
   83736:	4680      	mov	r8, r0
   83738:	4689      	mov	r9, r1
   8373a:	f000 f961 	bl	83a00 <__udivdi3>
   8373e:	fb00 f505 	mul.w	r5, r0, r5
   83742:	fba0 ab04 	umull	sl, fp, r0, r4
   83746:	fb04 5401 	mla	r4, r4, r1, r5
   8374a:	44a3      	add	fp, r4
   8374c:	ebb8 080a 	subs.w	r8, r8, sl
   83750:	eb69 090b 	sbc.w	r9, r9, fp
   83754:	e9c6 8900 	strd	r8, r9, [r6]
   83758:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

0008375c <__aeabi_idiv0>:
   8375c:	4770      	bx	lr
   8375e:	bf00      	nop

00083760 <__divdi3>:
   83760:	2900      	cmp	r1, #0
   83762:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83766:	f2c0 80a1 	blt.w	838ac <__divdi3+0x14c>
   8376a:	2400      	movs	r4, #0
   8376c:	2b00      	cmp	r3, #0
   8376e:	f2c0 8098 	blt.w	838a2 <__divdi3+0x142>
   83772:	4615      	mov	r5, r2
   83774:	4606      	mov	r6, r0
   83776:	460f      	mov	r7, r1
   83778:	2b00      	cmp	r3, #0
   8377a:	d13f      	bne.n	837fc <__divdi3+0x9c>
   8377c:	428a      	cmp	r2, r1
   8377e:	d958      	bls.n	83832 <__divdi3+0xd2>
   83780:	fab2 f382 	clz	r3, r2
   83784:	b14b      	cbz	r3, 8379a <__divdi3+0x3a>
   83786:	f1c3 0220 	rsb	r2, r3, #32
   8378a:	fa01 f703 	lsl.w	r7, r1, r3
   8378e:	fa20 f202 	lsr.w	r2, r0, r2
   83792:	409d      	lsls	r5, r3
   83794:	fa00 f603 	lsl.w	r6, r0, r3
   83798:	4317      	orrs	r7, r2
   8379a:	0c29      	lsrs	r1, r5, #16
   8379c:	fbb7 f2f1 	udiv	r2, r7, r1
   837a0:	fb01 7712 	mls	r7, r1, r2, r7
   837a4:	b2a8      	uxth	r0, r5
   837a6:	fb00 f302 	mul.w	r3, r0, r2
   837aa:	ea4f 4c16 	mov.w	ip, r6, lsr #16
   837ae:	ea4c 4707 	orr.w	r7, ip, r7, lsl #16
   837b2:	42bb      	cmp	r3, r7
   837b4:	d909      	bls.n	837ca <__divdi3+0x6a>
   837b6:	197f      	adds	r7, r7, r5
   837b8:	f102 3cff 	add.w	ip, r2, #4294967295
   837bc:	f080 8105 	bcs.w	839ca <__divdi3+0x26a>
   837c0:	42bb      	cmp	r3, r7
   837c2:	f240 8102 	bls.w	839ca <__divdi3+0x26a>
   837c6:	3a02      	subs	r2, #2
   837c8:	442f      	add	r7, r5
   837ca:	1aff      	subs	r7, r7, r3
   837cc:	fbb7 f3f1 	udiv	r3, r7, r1
   837d0:	fb01 7113 	mls	r1, r1, r3, r7
   837d4:	fb00 f003 	mul.w	r0, r0, r3
   837d8:	b2b6      	uxth	r6, r6
   837da:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
   837de:	4288      	cmp	r0, r1
   837e0:	d908      	bls.n	837f4 <__divdi3+0x94>
   837e2:	1949      	adds	r1, r1, r5
   837e4:	f103 37ff 	add.w	r7, r3, #4294967295
   837e8:	f080 80f1 	bcs.w	839ce <__divdi3+0x26e>
   837ec:	4288      	cmp	r0, r1
   837ee:	f240 80ee 	bls.w	839ce <__divdi3+0x26e>
   837f2:	3b02      	subs	r3, #2
   837f4:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   837f8:	2300      	movs	r3, #0
   837fa:	e003      	b.n	83804 <__divdi3+0xa4>
   837fc:	428b      	cmp	r3, r1
   837fe:	d90a      	bls.n	83816 <__divdi3+0xb6>
   83800:	2300      	movs	r3, #0
   83802:	461a      	mov	r2, r3
   83804:	4610      	mov	r0, r2
   83806:	4619      	mov	r1, r3
   83808:	b114      	cbz	r4, 83810 <__divdi3+0xb0>
   8380a:	4240      	negs	r0, r0
   8380c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   83810:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83814:	4770      	bx	lr
   83816:	fab3 f883 	clz	r8, r3
   8381a:	f1b8 0f00 	cmp.w	r8, #0
   8381e:	f040 8088 	bne.w	83932 <__divdi3+0x1d2>
   83822:	428b      	cmp	r3, r1
   83824:	d302      	bcc.n	8382c <__divdi3+0xcc>
   83826:	4282      	cmp	r2, r0
   83828:	f200 80e2 	bhi.w	839f0 <__divdi3+0x290>
   8382c:	2300      	movs	r3, #0
   8382e:	2201      	movs	r2, #1
   83830:	e7e8      	b.n	83804 <__divdi3+0xa4>
   83832:	b912      	cbnz	r2, 8383a <__divdi3+0xda>
   83834:	2301      	movs	r3, #1
   83836:	fbb3 f5f2 	udiv	r5, r3, r2
   8383a:	fab5 f285 	clz	r2, r5
   8383e:	2a00      	cmp	r2, #0
   83840:	d13a      	bne.n	838b8 <__divdi3+0x158>
   83842:	1b7f      	subs	r7, r7, r5
   83844:	0c28      	lsrs	r0, r5, #16
   83846:	fa1f fc85 	uxth.w	ip, r5
   8384a:	2301      	movs	r3, #1
   8384c:	fbb7 f1f0 	udiv	r1, r7, r0
   83850:	fb00 7711 	mls	r7, r0, r1, r7
   83854:	fb0c f201 	mul.w	r2, ip, r1
   83858:	ea4f 4816 	mov.w	r8, r6, lsr #16
   8385c:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
   83860:	42ba      	cmp	r2, r7
   83862:	d907      	bls.n	83874 <__divdi3+0x114>
   83864:	197f      	adds	r7, r7, r5
   83866:	f101 38ff 	add.w	r8, r1, #4294967295
   8386a:	d202      	bcs.n	83872 <__divdi3+0x112>
   8386c:	42ba      	cmp	r2, r7
   8386e:	f200 80c4 	bhi.w	839fa <__divdi3+0x29a>
   83872:	4641      	mov	r1, r8
   83874:	1abf      	subs	r7, r7, r2
   83876:	fbb7 f2f0 	udiv	r2, r7, r0
   8387a:	fb00 7012 	mls	r0, r0, r2, r7
   8387e:	fb0c fc02 	mul.w	ip, ip, r2
   83882:	b2b6      	uxth	r6, r6
   83884:	ea46 4000 	orr.w	r0, r6, r0, lsl #16
   83888:	4584      	cmp	ip, r0
   8388a:	d907      	bls.n	8389c <__divdi3+0x13c>
   8388c:	1940      	adds	r0, r0, r5
   8388e:	f102 37ff 	add.w	r7, r2, #4294967295
   83892:	d202      	bcs.n	8389a <__divdi3+0x13a>
   83894:	4584      	cmp	ip, r0
   83896:	f200 80ae 	bhi.w	839f6 <__divdi3+0x296>
   8389a:	463a      	mov	r2, r7
   8389c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   838a0:	e7b0      	b.n	83804 <__divdi3+0xa4>
   838a2:	43e4      	mvns	r4, r4
   838a4:	4252      	negs	r2, r2
   838a6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   838aa:	e762      	b.n	83772 <__divdi3+0x12>
   838ac:	4240      	negs	r0, r0
   838ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   838b2:	f04f 34ff 	mov.w	r4, #4294967295
   838b6:	e759      	b.n	8376c <__divdi3+0xc>
   838b8:	4095      	lsls	r5, r2
   838ba:	f1c2 0920 	rsb	r9, r2, #32
   838be:	fa27 f109 	lsr.w	r1, r7, r9
   838c2:	fa26 f909 	lsr.w	r9, r6, r9
   838c6:	4097      	lsls	r7, r2
   838c8:	0c28      	lsrs	r0, r5, #16
   838ca:	fbb1 f8f0 	udiv	r8, r1, r0
   838ce:	fb00 1118 	mls	r1, r0, r8, r1
   838d2:	fa1f fc85 	uxth.w	ip, r5
   838d6:	fb0c f308 	mul.w	r3, ip, r8
   838da:	ea49 0907 	orr.w	r9, r9, r7
   838de:	ea4f 4719 	mov.w	r7, r9, lsr #16
   838e2:	ea47 4101 	orr.w	r1, r7, r1, lsl #16
   838e6:	428b      	cmp	r3, r1
   838e8:	fa06 f602 	lsl.w	r6, r6, r2
   838ec:	d908      	bls.n	83900 <__divdi3+0x1a0>
   838ee:	1949      	adds	r1, r1, r5
   838f0:	f108 32ff 	add.w	r2, r8, #4294967295
   838f4:	d27a      	bcs.n	839ec <__divdi3+0x28c>
   838f6:	428b      	cmp	r3, r1
   838f8:	d978      	bls.n	839ec <__divdi3+0x28c>
   838fa:	f1a8 0802 	sub.w	r8, r8, #2
   838fe:	4429      	add	r1, r5
   83900:	1ac9      	subs	r1, r1, r3
   83902:	fbb1 f3f0 	udiv	r3, r1, r0
   83906:	fb00 1713 	mls	r7, r0, r3, r1
   8390a:	fb0c f203 	mul.w	r2, ip, r3
   8390e:	fa1f f989 	uxth.w	r9, r9
   83912:	ea49 4707 	orr.w	r7, r9, r7, lsl #16
   83916:	42ba      	cmp	r2, r7
   83918:	d907      	bls.n	8392a <__divdi3+0x1ca>
   8391a:	197f      	adds	r7, r7, r5
   8391c:	f103 31ff 	add.w	r1, r3, #4294967295
   83920:	d260      	bcs.n	839e4 <__divdi3+0x284>
   83922:	42ba      	cmp	r2, r7
   83924:	d95e      	bls.n	839e4 <__divdi3+0x284>
   83926:	3b02      	subs	r3, #2
   83928:	442f      	add	r7, r5
   8392a:	1abf      	subs	r7, r7, r2
   8392c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   83930:	e78c      	b.n	8384c <__divdi3+0xec>
   83932:	f1c8 0220 	rsb	r2, r8, #32
   83936:	fa25 f102 	lsr.w	r1, r5, r2
   8393a:	fa03 fc08 	lsl.w	ip, r3, r8
   8393e:	fa27 f302 	lsr.w	r3, r7, r2
   83942:	fa20 f202 	lsr.w	r2, r0, r2
   83946:	fa07 f708 	lsl.w	r7, r7, r8
   8394a:	ea41 0c0c 	orr.w	ip, r1, ip
   8394e:	ea4f 491c 	mov.w	r9, ip, lsr #16
   83952:	fbb3 f1f9 	udiv	r1, r3, r9
   83956:	fb09 3311 	mls	r3, r9, r1, r3
   8395a:	fa1f fa8c 	uxth.w	sl, ip
   8395e:	fb0a fb01 	mul.w	fp, sl, r1
   83962:	4317      	orrs	r7, r2
   83964:	0c3a      	lsrs	r2, r7, #16
   83966:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   8396a:	459b      	cmp	fp, r3
   8396c:	fa05 f008 	lsl.w	r0, r5, r8
   83970:	d908      	bls.n	83984 <__divdi3+0x224>
   83972:	eb13 030c 	adds.w	r3, r3, ip
   83976:	f101 32ff 	add.w	r2, r1, #4294967295
   8397a:	d235      	bcs.n	839e8 <__divdi3+0x288>
   8397c:	459b      	cmp	fp, r3
   8397e:	d933      	bls.n	839e8 <__divdi3+0x288>
   83980:	3902      	subs	r1, #2
   83982:	4463      	add	r3, ip
   83984:	ebcb 0303 	rsb	r3, fp, r3
   83988:	fbb3 f2f9 	udiv	r2, r3, r9
   8398c:	fb09 3312 	mls	r3, r9, r2, r3
   83990:	fb0a fa02 	mul.w	sl, sl, r2
   83994:	b2bf      	uxth	r7, r7
   83996:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
   8399a:	45ba      	cmp	sl, r7
   8399c:	d908      	bls.n	839b0 <__divdi3+0x250>
   8399e:	eb17 070c 	adds.w	r7, r7, ip
   839a2:	f102 33ff 	add.w	r3, r2, #4294967295
   839a6:	d21b      	bcs.n	839e0 <__divdi3+0x280>
   839a8:	45ba      	cmp	sl, r7
   839aa:	d919      	bls.n	839e0 <__divdi3+0x280>
   839ac:	3a02      	subs	r2, #2
   839ae:	4467      	add	r7, ip
   839b0:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
   839b4:	fba5 0100 	umull	r0, r1, r5, r0
   839b8:	ebca 0707 	rsb	r7, sl, r7
   839bc:	428f      	cmp	r7, r1
   839be:	f04f 0300 	mov.w	r3, #0
   839c2:	d30a      	bcc.n	839da <__divdi3+0x27a>
   839c4:	d005      	beq.n	839d2 <__divdi3+0x272>
   839c6:	462a      	mov	r2, r5
   839c8:	e71c      	b.n	83804 <__divdi3+0xa4>
   839ca:	4662      	mov	r2, ip
   839cc:	e6fd      	b.n	837ca <__divdi3+0x6a>
   839ce:	463b      	mov	r3, r7
   839d0:	e710      	b.n	837f4 <__divdi3+0x94>
   839d2:	fa06 f608 	lsl.w	r6, r6, r8
   839d6:	4286      	cmp	r6, r0
   839d8:	d2f5      	bcs.n	839c6 <__divdi3+0x266>
   839da:	1e6a      	subs	r2, r5, #1
   839dc:	2300      	movs	r3, #0
   839de:	e711      	b.n	83804 <__divdi3+0xa4>
   839e0:	461a      	mov	r2, r3
   839e2:	e7e5      	b.n	839b0 <__divdi3+0x250>
   839e4:	460b      	mov	r3, r1
   839e6:	e7a0      	b.n	8392a <__divdi3+0x1ca>
   839e8:	4611      	mov	r1, r2
   839ea:	e7cb      	b.n	83984 <__divdi3+0x224>
   839ec:	4690      	mov	r8, r2
   839ee:	e787      	b.n	83900 <__divdi3+0x1a0>
   839f0:	4643      	mov	r3, r8
   839f2:	4642      	mov	r2, r8
   839f4:	e706      	b.n	83804 <__divdi3+0xa4>
   839f6:	3a02      	subs	r2, #2
   839f8:	e750      	b.n	8389c <__divdi3+0x13c>
   839fa:	3902      	subs	r1, #2
   839fc:	442f      	add	r7, r5
   839fe:	e739      	b.n	83874 <__divdi3+0x114>

00083a00 <__udivdi3>:
   83a00:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83a04:	4614      	mov	r4, r2
   83a06:	4605      	mov	r5, r0
   83a08:	460e      	mov	r6, r1
   83a0a:	2b00      	cmp	r3, #0
   83a0c:	d143      	bne.n	83a96 <__udivdi3+0x96>
   83a0e:	428a      	cmp	r2, r1
   83a10:	d953      	bls.n	83aba <__udivdi3+0xba>
   83a12:	fab2 f782 	clz	r7, r2
   83a16:	b157      	cbz	r7, 83a2e <__udivdi3+0x2e>
   83a18:	f1c7 0620 	rsb	r6, r7, #32
   83a1c:	fa20 f606 	lsr.w	r6, r0, r6
   83a20:	fa01 f307 	lsl.w	r3, r1, r7
   83a24:	fa02 f407 	lsl.w	r4, r2, r7
   83a28:	fa00 f507 	lsl.w	r5, r0, r7
   83a2c:	431e      	orrs	r6, r3
   83a2e:	0c21      	lsrs	r1, r4, #16
   83a30:	fbb6 f2f1 	udiv	r2, r6, r1
   83a34:	fb01 6612 	mls	r6, r1, r2, r6
   83a38:	b2a0      	uxth	r0, r4
   83a3a:	fb00 f302 	mul.w	r3, r0, r2
   83a3e:	0c2f      	lsrs	r7, r5, #16
   83a40:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   83a44:	42b3      	cmp	r3, r6
   83a46:	d909      	bls.n	83a5c <__udivdi3+0x5c>
   83a48:	1936      	adds	r6, r6, r4
   83a4a:	f102 37ff 	add.w	r7, r2, #4294967295
   83a4e:	f080 80fd 	bcs.w	83c4c <__udivdi3+0x24c>
   83a52:	42b3      	cmp	r3, r6
   83a54:	f240 80fa 	bls.w	83c4c <__udivdi3+0x24c>
   83a58:	3a02      	subs	r2, #2
   83a5a:	4426      	add	r6, r4
   83a5c:	1af6      	subs	r6, r6, r3
   83a5e:	fbb6 f3f1 	udiv	r3, r6, r1
   83a62:	fb01 6113 	mls	r1, r1, r3, r6
   83a66:	fb00 f003 	mul.w	r0, r0, r3
   83a6a:	b2ad      	uxth	r5, r5
   83a6c:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
   83a70:	4288      	cmp	r0, r1
   83a72:	d908      	bls.n	83a86 <__udivdi3+0x86>
   83a74:	1909      	adds	r1, r1, r4
   83a76:	f103 36ff 	add.w	r6, r3, #4294967295
   83a7a:	f080 80e9 	bcs.w	83c50 <__udivdi3+0x250>
   83a7e:	4288      	cmp	r0, r1
   83a80:	f240 80e6 	bls.w	83c50 <__udivdi3+0x250>
   83a84:	3b02      	subs	r3, #2
   83a86:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   83a8a:	2300      	movs	r3, #0
   83a8c:	4610      	mov	r0, r2
   83a8e:	4619      	mov	r1, r3
   83a90:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83a94:	4770      	bx	lr
   83a96:	428b      	cmp	r3, r1
   83a98:	d84c      	bhi.n	83b34 <__udivdi3+0x134>
   83a9a:	fab3 f683 	clz	r6, r3
   83a9e:	2e00      	cmp	r6, #0
   83aa0:	d14f      	bne.n	83b42 <__udivdi3+0x142>
   83aa2:	428b      	cmp	r3, r1
   83aa4:	d302      	bcc.n	83aac <__udivdi3+0xac>
   83aa6:	4282      	cmp	r2, r0
   83aa8:	f200 80dd 	bhi.w	83c66 <__udivdi3+0x266>
   83aac:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83ab0:	2300      	movs	r3, #0
   83ab2:	2201      	movs	r2, #1
   83ab4:	4610      	mov	r0, r2
   83ab6:	4619      	mov	r1, r3
   83ab8:	4770      	bx	lr
   83aba:	b912      	cbnz	r2, 83ac2 <__udivdi3+0xc2>
   83abc:	2401      	movs	r4, #1
   83abe:	fbb4 f4f2 	udiv	r4, r4, r2
   83ac2:	fab4 f284 	clz	r2, r4
   83ac6:	2a00      	cmp	r2, #0
   83ac8:	f040 8082 	bne.w	83bd0 <__udivdi3+0x1d0>
   83acc:	1b09      	subs	r1, r1, r4
   83ace:	0c26      	lsrs	r6, r4, #16
   83ad0:	b2a7      	uxth	r7, r4
   83ad2:	2301      	movs	r3, #1
   83ad4:	fbb1 f0f6 	udiv	r0, r1, r6
   83ad8:	fb06 1110 	mls	r1, r6, r0, r1
   83adc:	fb07 f200 	mul.w	r2, r7, r0
   83ae0:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   83ae4:	ea4c 4101 	orr.w	r1, ip, r1, lsl #16
   83ae8:	428a      	cmp	r2, r1
   83aea:	d907      	bls.n	83afc <__udivdi3+0xfc>
   83aec:	1909      	adds	r1, r1, r4
   83aee:	f100 3cff 	add.w	ip, r0, #4294967295
   83af2:	d202      	bcs.n	83afa <__udivdi3+0xfa>
   83af4:	428a      	cmp	r2, r1
   83af6:	f200 80c8 	bhi.w	83c8a <__udivdi3+0x28a>
   83afa:	4660      	mov	r0, ip
   83afc:	1a89      	subs	r1, r1, r2
   83afe:	fbb1 f2f6 	udiv	r2, r1, r6
   83b02:	fb06 1112 	mls	r1, r6, r2, r1
   83b06:	fb07 f702 	mul.w	r7, r7, r2
   83b0a:	b2ad      	uxth	r5, r5
   83b0c:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
   83b10:	42af      	cmp	r7, r5
   83b12:	d908      	bls.n	83b26 <__udivdi3+0x126>
   83b14:	192c      	adds	r4, r5, r4
   83b16:	f102 31ff 	add.w	r1, r2, #4294967295
   83b1a:	f080 809b 	bcs.w	83c54 <__udivdi3+0x254>
   83b1e:	42a7      	cmp	r7, r4
   83b20:	f240 8098 	bls.w	83c54 <__udivdi3+0x254>
   83b24:	3a02      	subs	r2, #2
   83b26:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
   83b2a:	4610      	mov	r0, r2
   83b2c:	4619      	mov	r1, r3
   83b2e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83b32:	4770      	bx	lr
   83b34:	2300      	movs	r3, #0
   83b36:	461a      	mov	r2, r3
   83b38:	4610      	mov	r0, r2
   83b3a:	4619      	mov	r1, r3
   83b3c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83b40:	4770      	bx	lr
   83b42:	f1c6 0520 	rsb	r5, r6, #32
   83b46:	fa22 f705 	lsr.w	r7, r2, r5
   83b4a:	fa03 f406 	lsl.w	r4, r3, r6
   83b4e:	fa21 f305 	lsr.w	r3, r1, r5
   83b52:	fa01 fb06 	lsl.w	fp, r1, r6
   83b56:	fa20 f505 	lsr.w	r5, r0, r5
   83b5a:	433c      	orrs	r4, r7
   83b5c:	ea4f 4814 	mov.w	r8, r4, lsr #16
   83b60:	fbb3 fcf8 	udiv	ip, r3, r8
   83b64:	fb08 331c 	mls	r3, r8, ip, r3
   83b68:	fa1f f984 	uxth.w	r9, r4
   83b6c:	fb09 fa0c 	mul.w	sl, r9, ip
   83b70:	ea45 0b0b 	orr.w	fp, r5, fp
   83b74:	ea4f 451b 	mov.w	r5, fp, lsr #16
   83b78:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
   83b7c:	459a      	cmp	sl, r3
   83b7e:	fa02 f206 	lsl.w	r2, r2, r6
   83b82:	d904      	bls.n	83b8e <__udivdi3+0x18e>
   83b84:	191b      	adds	r3, r3, r4
   83b86:	f10c 35ff 	add.w	r5, ip, #4294967295
   83b8a:	d36f      	bcc.n	83c6c <__udivdi3+0x26c>
   83b8c:	46ac      	mov	ip, r5
   83b8e:	ebca 0303 	rsb	r3, sl, r3
   83b92:	fbb3 f5f8 	udiv	r5, r3, r8
   83b96:	fb08 3315 	mls	r3, r8, r5, r3
   83b9a:	fb09 f905 	mul.w	r9, r9, r5
   83b9e:	fa1f fb8b 	uxth.w	fp, fp
   83ba2:	ea4b 4703 	orr.w	r7, fp, r3, lsl #16
   83ba6:	45b9      	cmp	r9, r7
   83ba8:	d904      	bls.n	83bb4 <__udivdi3+0x1b4>
   83baa:	193f      	adds	r7, r7, r4
   83bac:	f105 33ff 	add.w	r3, r5, #4294967295
   83bb0:	d362      	bcc.n	83c78 <__udivdi3+0x278>
   83bb2:	461d      	mov	r5, r3
   83bb4:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
   83bb8:	fbac 2302 	umull	r2, r3, ip, r2
   83bbc:	ebc9 0707 	rsb	r7, r9, r7
   83bc0:	429f      	cmp	r7, r3
   83bc2:	f04f 0500 	mov.w	r5, #0
   83bc6:	d34a      	bcc.n	83c5e <__udivdi3+0x25e>
   83bc8:	d046      	beq.n	83c58 <__udivdi3+0x258>
   83bca:	4662      	mov	r2, ip
   83bcc:	462b      	mov	r3, r5
   83bce:	e75d      	b.n	83a8c <__udivdi3+0x8c>
   83bd0:	4094      	lsls	r4, r2
   83bd2:	f1c2 0920 	rsb	r9, r2, #32
   83bd6:	fa21 fc09 	lsr.w	ip, r1, r9
   83bda:	4091      	lsls	r1, r2
   83bdc:	fa20 f909 	lsr.w	r9, r0, r9
   83be0:	0c26      	lsrs	r6, r4, #16
   83be2:	fbbc f8f6 	udiv	r8, ip, r6
   83be6:	fb06 cc18 	mls	ip, r6, r8, ip
   83bea:	b2a7      	uxth	r7, r4
   83bec:	fb07 f308 	mul.w	r3, r7, r8
   83bf0:	ea49 0901 	orr.w	r9, r9, r1
   83bf4:	ea4f 4119 	mov.w	r1, r9, lsr #16
   83bf8:	ea41 4c0c 	orr.w	ip, r1, ip, lsl #16
   83bfc:	4563      	cmp	r3, ip
   83bfe:	fa00 f502 	lsl.w	r5, r0, r2
   83c02:	d909      	bls.n	83c18 <__udivdi3+0x218>
   83c04:	eb1c 0c04 	adds.w	ip, ip, r4
   83c08:	f108 32ff 	add.w	r2, r8, #4294967295
   83c0c:	d23b      	bcs.n	83c86 <__udivdi3+0x286>
   83c0e:	4563      	cmp	r3, ip
   83c10:	d939      	bls.n	83c86 <__udivdi3+0x286>
   83c12:	f1a8 0802 	sub.w	r8, r8, #2
   83c16:	44a4      	add	ip, r4
   83c18:	ebc3 0c0c 	rsb	ip, r3, ip
   83c1c:	fbbc f3f6 	udiv	r3, ip, r6
   83c20:	fb06 c113 	mls	r1, r6, r3, ip
   83c24:	fb07 f203 	mul.w	r2, r7, r3
   83c28:	fa1f f989 	uxth.w	r9, r9
   83c2c:	ea49 4101 	orr.w	r1, r9, r1, lsl #16
   83c30:	428a      	cmp	r2, r1
   83c32:	d907      	bls.n	83c44 <__udivdi3+0x244>
   83c34:	1909      	adds	r1, r1, r4
   83c36:	f103 30ff 	add.w	r0, r3, #4294967295
   83c3a:	d222      	bcs.n	83c82 <__udivdi3+0x282>
   83c3c:	428a      	cmp	r2, r1
   83c3e:	d920      	bls.n	83c82 <__udivdi3+0x282>
   83c40:	3b02      	subs	r3, #2
   83c42:	4421      	add	r1, r4
   83c44:	1a89      	subs	r1, r1, r2
   83c46:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   83c4a:	e743      	b.n	83ad4 <__udivdi3+0xd4>
   83c4c:	463a      	mov	r2, r7
   83c4e:	e705      	b.n	83a5c <__udivdi3+0x5c>
   83c50:	4633      	mov	r3, r6
   83c52:	e718      	b.n	83a86 <__udivdi3+0x86>
   83c54:	460a      	mov	r2, r1
   83c56:	e766      	b.n	83b26 <__udivdi3+0x126>
   83c58:	40b0      	lsls	r0, r6
   83c5a:	4290      	cmp	r0, r2
   83c5c:	d2b5      	bcs.n	83bca <__udivdi3+0x1ca>
   83c5e:	f10c 32ff 	add.w	r2, ip, #4294967295
   83c62:	2300      	movs	r3, #0
   83c64:	e712      	b.n	83a8c <__udivdi3+0x8c>
   83c66:	4633      	mov	r3, r6
   83c68:	4632      	mov	r2, r6
   83c6a:	e70f      	b.n	83a8c <__udivdi3+0x8c>
   83c6c:	459a      	cmp	sl, r3
   83c6e:	d98d      	bls.n	83b8c <__udivdi3+0x18c>
   83c70:	f1ac 0c02 	sub.w	ip, ip, #2
   83c74:	4423      	add	r3, r4
   83c76:	e78a      	b.n	83b8e <__udivdi3+0x18e>
   83c78:	45b9      	cmp	r9, r7
   83c7a:	d99a      	bls.n	83bb2 <__udivdi3+0x1b2>
   83c7c:	3d02      	subs	r5, #2
   83c7e:	4427      	add	r7, r4
   83c80:	e798      	b.n	83bb4 <__udivdi3+0x1b4>
   83c82:	4603      	mov	r3, r0
   83c84:	e7de      	b.n	83c44 <__udivdi3+0x244>
   83c86:	4690      	mov	r8, r2
   83c88:	e7c6      	b.n	83c18 <__udivdi3+0x218>
   83c8a:	3802      	subs	r0, #2
   83c8c:	4421      	add	r1, r4
   83c8e:	e735      	b.n	83afc <__udivdi3+0xfc>

00083c90 <__libc_init_array>:
   83c90:	b570      	push	{r4, r5, r6, lr}
   83c92:	4e0f      	ldr	r6, [pc, #60]	; (83cd0 <__libc_init_array+0x40>)
   83c94:	4d0f      	ldr	r5, [pc, #60]	; (83cd4 <__libc_init_array+0x44>)
   83c96:	1b76      	subs	r6, r6, r5
   83c98:	10b6      	asrs	r6, r6, #2
   83c9a:	d007      	beq.n	83cac <__libc_init_array+0x1c>
   83c9c:	3d04      	subs	r5, #4
   83c9e:	2400      	movs	r4, #0
   83ca0:	3401      	adds	r4, #1
   83ca2:	f855 3f04 	ldr.w	r3, [r5, #4]!
   83ca6:	4798      	blx	r3
   83ca8:	42a6      	cmp	r6, r4
   83caa:	d1f9      	bne.n	83ca0 <__libc_init_array+0x10>
   83cac:	4e0a      	ldr	r6, [pc, #40]	; (83cd8 <__libc_init_array+0x48>)
   83cae:	4d0b      	ldr	r5, [pc, #44]	; (83cdc <__libc_init_array+0x4c>)
   83cb0:	f002 fff2 	bl	86c98 <_init>
   83cb4:	1b76      	subs	r6, r6, r5
   83cb6:	10b6      	asrs	r6, r6, #2
   83cb8:	d008      	beq.n	83ccc <__libc_init_array+0x3c>
   83cba:	3d04      	subs	r5, #4
   83cbc:	2400      	movs	r4, #0
   83cbe:	3401      	adds	r4, #1
   83cc0:	f855 3f04 	ldr.w	r3, [r5, #4]!
   83cc4:	4798      	blx	r3
   83cc6:	42a6      	cmp	r6, r4
   83cc8:	d1f9      	bne.n	83cbe <__libc_init_array+0x2e>
   83cca:	bd70      	pop	{r4, r5, r6, pc}
   83ccc:	bd70      	pop	{r4, r5, r6, pc}
   83cce:	bf00      	nop
   83cd0:	00086ca4 	.word	0x00086ca4
   83cd4:	00086ca4 	.word	0x00086ca4
   83cd8:	00086cac 	.word	0x00086cac
   83cdc:	00086ca4 	.word	0x00086ca4

00083ce0 <iprintf>:
   83ce0:	b40f      	push	{r0, r1, r2, r3}
   83ce2:	b510      	push	{r4, lr}
   83ce4:	4b07      	ldr	r3, [pc, #28]	; (83d04 <iprintf+0x24>)
   83ce6:	b082      	sub	sp, #8
   83ce8:	ac04      	add	r4, sp, #16
   83cea:	f854 2b04 	ldr.w	r2, [r4], #4
   83cee:	6818      	ldr	r0, [r3, #0]
   83cf0:	4623      	mov	r3, r4
   83cf2:	6881      	ldr	r1, [r0, #8]
   83cf4:	9401      	str	r4, [sp, #4]
   83cf6:	f000 fa25 	bl	84144 <_vfiprintf_r>
   83cfa:	b002      	add	sp, #8
   83cfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   83d00:	b004      	add	sp, #16
   83d02:	4770      	bx	lr
   83d04:	20070648 	.word	0x20070648

00083d08 <memcpy>:
   83d08:	4684      	mov	ip, r0
   83d0a:	ea41 0300 	orr.w	r3, r1, r0
   83d0e:	f013 0303 	ands.w	r3, r3, #3
   83d12:	d149      	bne.n	83da8 <memcpy+0xa0>
   83d14:	3a40      	subs	r2, #64	; 0x40
   83d16:	d323      	bcc.n	83d60 <memcpy+0x58>
   83d18:	680b      	ldr	r3, [r1, #0]
   83d1a:	6003      	str	r3, [r0, #0]
   83d1c:	684b      	ldr	r3, [r1, #4]
   83d1e:	6043      	str	r3, [r0, #4]
   83d20:	688b      	ldr	r3, [r1, #8]
   83d22:	6083      	str	r3, [r0, #8]
   83d24:	68cb      	ldr	r3, [r1, #12]
   83d26:	60c3      	str	r3, [r0, #12]
   83d28:	690b      	ldr	r3, [r1, #16]
   83d2a:	6103      	str	r3, [r0, #16]
   83d2c:	694b      	ldr	r3, [r1, #20]
   83d2e:	6143      	str	r3, [r0, #20]
   83d30:	698b      	ldr	r3, [r1, #24]
   83d32:	6183      	str	r3, [r0, #24]
   83d34:	69cb      	ldr	r3, [r1, #28]
   83d36:	61c3      	str	r3, [r0, #28]
   83d38:	6a0b      	ldr	r3, [r1, #32]
   83d3a:	6203      	str	r3, [r0, #32]
   83d3c:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   83d3e:	6243      	str	r3, [r0, #36]	; 0x24
   83d40:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   83d42:	6283      	str	r3, [r0, #40]	; 0x28
   83d44:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   83d46:	62c3      	str	r3, [r0, #44]	; 0x2c
   83d48:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   83d4a:	6303      	str	r3, [r0, #48]	; 0x30
   83d4c:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   83d4e:	6343      	str	r3, [r0, #52]	; 0x34
   83d50:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   83d52:	6383      	str	r3, [r0, #56]	; 0x38
   83d54:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   83d56:	63c3      	str	r3, [r0, #60]	; 0x3c
   83d58:	3040      	adds	r0, #64	; 0x40
   83d5a:	3140      	adds	r1, #64	; 0x40
   83d5c:	3a40      	subs	r2, #64	; 0x40
   83d5e:	d2db      	bcs.n	83d18 <memcpy+0x10>
   83d60:	3230      	adds	r2, #48	; 0x30
   83d62:	d30b      	bcc.n	83d7c <memcpy+0x74>
   83d64:	680b      	ldr	r3, [r1, #0]
   83d66:	6003      	str	r3, [r0, #0]
   83d68:	684b      	ldr	r3, [r1, #4]
   83d6a:	6043      	str	r3, [r0, #4]
   83d6c:	688b      	ldr	r3, [r1, #8]
   83d6e:	6083      	str	r3, [r0, #8]
   83d70:	68cb      	ldr	r3, [r1, #12]
   83d72:	60c3      	str	r3, [r0, #12]
   83d74:	3010      	adds	r0, #16
   83d76:	3110      	adds	r1, #16
   83d78:	3a10      	subs	r2, #16
   83d7a:	d2f3      	bcs.n	83d64 <memcpy+0x5c>
   83d7c:	320c      	adds	r2, #12
   83d7e:	d305      	bcc.n	83d8c <memcpy+0x84>
   83d80:	f851 3b04 	ldr.w	r3, [r1], #4
   83d84:	f840 3b04 	str.w	r3, [r0], #4
   83d88:	3a04      	subs	r2, #4
   83d8a:	d2f9      	bcs.n	83d80 <memcpy+0x78>
   83d8c:	3204      	adds	r2, #4
   83d8e:	d008      	beq.n	83da2 <memcpy+0x9a>
   83d90:	07d2      	lsls	r2, r2, #31
   83d92:	bf1c      	itt	ne
   83d94:	f811 3b01 	ldrbne.w	r3, [r1], #1
   83d98:	f800 3b01 	strbne.w	r3, [r0], #1
   83d9c:	d301      	bcc.n	83da2 <memcpy+0x9a>
   83d9e:	880b      	ldrh	r3, [r1, #0]
   83da0:	8003      	strh	r3, [r0, #0]
   83da2:	4660      	mov	r0, ip
   83da4:	4770      	bx	lr
   83da6:	bf00      	nop
   83da8:	2a08      	cmp	r2, #8
   83daa:	d313      	bcc.n	83dd4 <memcpy+0xcc>
   83dac:	078b      	lsls	r3, r1, #30
   83dae:	d0b1      	beq.n	83d14 <memcpy+0xc>
   83db0:	f010 0303 	ands.w	r3, r0, #3
   83db4:	d0ae      	beq.n	83d14 <memcpy+0xc>
   83db6:	f1c3 0304 	rsb	r3, r3, #4
   83dba:	1ad2      	subs	r2, r2, r3
   83dbc:	07db      	lsls	r3, r3, #31
   83dbe:	bf1c      	itt	ne
   83dc0:	f811 3b01 	ldrbne.w	r3, [r1], #1
   83dc4:	f800 3b01 	strbne.w	r3, [r0], #1
   83dc8:	d3a4      	bcc.n	83d14 <memcpy+0xc>
   83dca:	f831 3b02 	ldrh.w	r3, [r1], #2
   83dce:	f820 3b02 	strh.w	r3, [r0], #2
   83dd2:	e79f      	b.n	83d14 <memcpy+0xc>
   83dd4:	3a04      	subs	r2, #4
   83dd6:	d3d9      	bcc.n	83d8c <memcpy+0x84>
   83dd8:	3a01      	subs	r2, #1
   83dda:	f811 3b01 	ldrb.w	r3, [r1], #1
   83dde:	f800 3b01 	strb.w	r3, [r0], #1
   83de2:	d2f9      	bcs.n	83dd8 <memcpy+0xd0>
   83de4:	780b      	ldrb	r3, [r1, #0]
   83de6:	7003      	strb	r3, [r0, #0]
   83de8:	784b      	ldrb	r3, [r1, #1]
   83dea:	7043      	strb	r3, [r0, #1]
   83dec:	788b      	ldrb	r3, [r1, #2]
   83dee:	7083      	strb	r3, [r0, #2]
   83df0:	4660      	mov	r0, ip
   83df2:	4770      	bx	lr

00083df4 <memset>:
   83df4:	b4f0      	push	{r4, r5, r6, r7}
   83df6:	0784      	lsls	r4, r0, #30
   83df8:	d043      	beq.n	83e82 <memset+0x8e>
   83dfa:	1e54      	subs	r4, r2, #1
   83dfc:	2a00      	cmp	r2, #0
   83dfe:	d03e      	beq.n	83e7e <memset+0x8a>
   83e00:	b2cd      	uxtb	r5, r1
   83e02:	4603      	mov	r3, r0
   83e04:	e003      	b.n	83e0e <memset+0x1a>
   83e06:	1e62      	subs	r2, r4, #1
   83e08:	2c00      	cmp	r4, #0
   83e0a:	d038      	beq.n	83e7e <memset+0x8a>
   83e0c:	4614      	mov	r4, r2
   83e0e:	f803 5b01 	strb.w	r5, [r3], #1
   83e12:	079a      	lsls	r2, r3, #30
   83e14:	d1f7      	bne.n	83e06 <memset+0x12>
   83e16:	2c03      	cmp	r4, #3
   83e18:	d92a      	bls.n	83e70 <memset+0x7c>
   83e1a:	b2cd      	uxtb	r5, r1
   83e1c:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   83e20:	2c0f      	cmp	r4, #15
   83e22:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   83e26:	d915      	bls.n	83e54 <memset+0x60>
   83e28:	f1a4 0710 	sub.w	r7, r4, #16
   83e2c:	093f      	lsrs	r7, r7, #4
   83e2e:	f103 0610 	add.w	r6, r3, #16
   83e32:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   83e36:	461a      	mov	r2, r3
   83e38:	6015      	str	r5, [r2, #0]
   83e3a:	6055      	str	r5, [r2, #4]
   83e3c:	6095      	str	r5, [r2, #8]
   83e3e:	60d5      	str	r5, [r2, #12]
   83e40:	3210      	adds	r2, #16
   83e42:	42b2      	cmp	r2, r6
   83e44:	d1f8      	bne.n	83e38 <memset+0x44>
   83e46:	f004 040f 	and.w	r4, r4, #15
   83e4a:	3701      	adds	r7, #1
   83e4c:	2c03      	cmp	r4, #3
   83e4e:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   83e52:	d90d      	bls.n	83e70 <memset+0x7c>
   83e54:	461e      	mov	r6, r3
   83e56:	4622      	mov	r2, r4
   83e58:	3a04      	subs	r2, #4
   83e5a:	2a03      	cmp	r2, #3
   83e5c:	f846 5b04 	str.w	r5, [r6], #4
   83e60:	d8fa      	bhi.n	83e58 <memset+0x64>
   83e62:	1f22      	subs	r2, r4, #4
   83e64:	f022 0203 	bic.w	r2, r2, #3
   83e68:	3204      	adds	r2, #4
   83e6a:	4413      	add	r3, r2
   83e6c:	f004 0403 	and.w	r4, r4, #3
   83e70:	b12c      	cbz	r4, 83e7e <memset+0x8a>
   83e72:	b2c9      	uxtb	r1, r1
   83e74:	441c      	add	r4, r3
   83e76:	f803 1b01 	strb.w	r1, [r3], #1
   83e7a:	42a3      	cmp	r3, r4
   83e7c:	d1fb      	bne.n	83e76 <memset+0x82>
   83e7e:	bcf0      	pop	{r4, r5, r6, r7}
   83e80:	4770      	bx	lr
   83e82:	4614      	mov	r4, r2
   83e84:	4603      	mov	r3, r0
   83e86:	e7c6      	b.n	83e16 <memset+0x22>

00083e88 <_puts_r>:
   83e88:	b5f0      	push	{r4, r5, r6, r7, lr}
   83e8a:	4604      	mov	r4, r0
   83e8c:	b089      	sub	sp, #36	; 0x24
   83e8e:	4608      	mov	r0, r1
   83e90:	460d      	mov	r5, r1
   83e92:	f000 f8b9 	bl	84008 <strlen>
   83e96:	68a3      	ldr	r3, [r4, #8]
   83e98:	2102      	movs	r1, #2
   83e9a:	899a      	ldrh	r2, [r3, #12]
   83e9c:	f8df e044 	ldr.w	lr, [pc, #68]	; 83ee4 <_puts_r+0x5c>
   83ea0:	f100 0c01 	add.w	ip, r0, #1
   83ea4:	2701      	movs	r7, #1
   83ea6:	ae04      	add	r6, sp, #16
   83ea8:	9102      	str	r1, [sp, #8]
   83eaa:	0491      	lsls	r1, r2, #18
   83eac:	9504      	str	r5, [sp, #16]
   83eae:	9005      	str	r0, [sp, #20]
   83eb0:	f8cd c00c 	str.w	ip, [sp, #12]
   83eb4:	f8cd e018 	str.w	lr, [sp, #24]
   83eb8:	9707      	str	r7, [sp, #28]
   83eba:	9601      	str	r6, [sp, #4]
   83ebc:	d406      	bmi.n	83ecc <_puts_r+0x44>
   83ebe:	6e59      	ldr	r1, [r3, #100]	; 0x64
   83ec0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   83ec4:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   83ec8:	819a      	strh	r2, [r3, #12]
   83eca:	6659      	str	r1, [r3, #100]	; 0x64
   83ecc:	4620      	mov	r0, r4
   83ece:	4619      	mov	r1, r3
   83ed0:	aa01      	add	r2, sp, #4
   83ed2:	f001 fae1 	bl	85498 <__sfvwrite_r>
   83ed6:	2800      	cmp	r0, #0
   83ed8:	bf0c      	ite	eq
   83eda:	200a      	moveq	r0, #10
   83edc:	f04f 30ff 	movne.w	r0, #4294967295
   83ee0:	b009      	add	sp, #36	; 0x24
   83ee2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83ee4:	00086920 	.word	0x00086920

00083ee8 <puts>:
   83ee8:	4b02      	ldr	r3, [pc, #8]	; (83ef4 <puts+0xc>)
   83eea:	4601      	mov	r1, r0
   83eec:	6818      	ldr	r0, [r3, #0]
   83eee:	f7ff bfcb 	b.w	83e88 <_puts_r>
   83ef2:	bf00      	nop
   83ef4:	20070648 	.word	0x20070648

00083ef8 <setbuf>:
   83ef8:	2900      	cmp	r1, #0
   83efa:	bf0c      	ite	eq
   83efc:	2202      	moveq	r2, #2
   83efe:	2200      	movne	r2, #0
   83f00:	f44f 6380 	mov.w	r3, #1024	; 0x400
   83f04:	f000 b800 	b.w	83f08 <setvbuf>

00083f08 <setvbuf>:
   83f08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83f0c:	4d3c      	ldr	r5, [pc, #240]	; (84000 <setvbuf+0xf8>)
   83f0e:	4604      	mov	r4, r0
   83f10:	682d      	ldr	r5, [r5, #0]
   83f12:	4688      	mov	r8, r1
   83f14:	4616      	mov	r6, r2
   83f16:	461f      	mov	r7, r3
   83f18:	b115      	cbz	r5, 83f20 <setvbuf+0x18>
   83f1a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   83f1c:	2b00      	cmp	r3, #0
   83f1e:	d04f      	beq.n	83fc0 <setvbuf+0xb8>
   83f20:	2e02      	cmp	r6, #2
   83f22:	d830      	bhi.n	83f86 <setvbuf+0x7e>
   83f24:	2f00      	cmp	r7, #0
   83f26:	db2e      	blt.n	83f86 <setvbuf+0x7e>
   83f28:	4628      	mov	r0, r5
   83f2a:	4621      	mov	r1, r4
   83f2c:	f001 f888 	bl	85040 <_fflush_r>
   83f30:	89a3      	ldrh	r3, [r4, #12]
   83f32:	2200      	movs	r2, #0
   83f34:	6062      	str	r2, [r4, #4]
   83f36:	61a2      	str	r2, [r4, #24]
   83f38:	061a      	lsls	r2, r3, #24
   83f3a:	d428      	bmi.n	83f8e <setvbuf+0x86>
   83f3c:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   83f40:	b29b      	uxth	r3, r3
   83f42:	2e02      	cmp	r6, #2
   83f44:	81a3      	strh	r3, [r4, #12]
   83f46:	d02d      	beq.n	83fa4 <setvbuf+0x9c>
   83f48:	f1b8 0f00 	cmp.w	r8, #0
   83f4c:	d03c      	beq.n	83fc8 <setvbuf+0xc0>
   83f4e:	2e01      	cmp	r6, #1
   83f50:	d013      	beq.n	83f7a <setvbuf+0x72>
   83f52:	b29b      	uxth	r3, r3
   83f54:	f003 0008 	and.w	r0, r3, #8
   83f58:	4a2a      	ldr	r2, [pc, #168]	; (84004 <setvbuf+0xfc>)
   83f5a:	b280      	uxth	r0, r0
   83f5c:	63ea      	str	r2, [r5, #60]	; 0x3c
   83f5e:	f8c4 8000 	str.w	r8, [r4]
   83f62:	f8c4 8010 	str.w	r8, [r4, #16]
   83f66:	6167      	str	r7, [r4, #20]
   83f68:	b178      	cbz	r0, 83f8a <setvbuf+0x82>
   83f6a:	f013 0f03 	tst.w	r3, #3
   83f6e:	bf18      	it	ne
   83f70:	2700      	movne	r7, #0
   83f72:	60a7      	str	r7, [r4, #8]
   83f74:	2000      	movs	r0, #0
   83f76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83f7a:	f043 0301 	orr.w	r3, r3, #1
   83f7e:	427a      	negs	r2, r7
   83f80:	81a3      	strh	r3, [r4, #12]
   83f82:	61a2      	str	r2, [r4, #24]
   83f84:	e7e5      	b.n	83f52 <setvbuf+0x4a>
   83f86:	f04f 30ff 	mov.w	r0, #4294967295
   83f8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83f8e:	4628      	mov	r0, r5
   83f90:	6921      	ldr	r1, [r4, #16]
   83f92:	f001 f9b5 	bl	85300 <_free_r>
   83f96:	89a3      	ldrh	r3, [r4, #12]
   83f98:	2e02      	cmp	r6, #2
   83f9a:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   83f9e:	b29b      	uxth	r3, r3
   83fa0:	81a3      	strh	r3, [r4, #12]
   83fa2:	d1d1      	bne.n	83f48 <setvbuf+0x40>
   83fa4:	2000      	movs	r0, #0
   83fa6:	f104 0243 	add.w	r2, r4, #67	; 0x43
   83faa:	f043 0302 	orr.w	r3, r3, #2
   83fae:	2500      	movs	r5, #0
   83fb0:	2101      	movs	r1, #1
   83fb2:	81a3      	strh	r3, [r4, #12]
   83fb4:	60a5      	str	r5, [r4, #8]
   83fb6:	6022      	str	r2, [r4, #0]
   83fb8:	6122      	str	r2, [r4, #16]
   83fba:	6161      	str	r1, [r4, #20]
   83fbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83fc0:	4628      	mov	r0, r5
   83fc2:	f001 f859 	bl	85078 <__sinit>
   83fc6:	e7ab      	b.n	83f20 <setvbuf+0x18>
   83fc8:	2f00      	cmp	r7, #0
   83fca:	bf08      	it	eq
   83fcc:	f44f 6780 	moveq.w	r7, #1024	; 0x400
   83fd0:	4638      	mov	r0, r7
   83fd2:	f001 fc8b 	bl	858ec <malloc>
   83fd6:	4680      	mov	r8, r0
   83fd8:	b128      	cbz	r0, 83fe6 <setvbuf+0xde>
   83fda:	89a3      	ldrh	r3, [r4, #12]
   83fdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   83fe0:	b29b      	uxth	r3, r3
   83fe2:	81a3      	strh	r3, [r4, #12]
   83fe4:	e7b3      	b.n	83f4e <setvbuf+0x46>
   83fe6:	f44f 6080 	mov.w	r0, #1024	; 0x400
   83fea:	f001 fc7f 	bl	858ec <malloc>
   83fee:	4680      	mov	r8, r0
   83ff0:	b918      	cbnz	r0, 83ffa <setvbuf+0xf2>
   83ff2:	89a3      	ldrh	r3, [r4, #12]
   83ff4:	f04f 30ff 	mov.w	r0, #4294967295
   83ff8:	e7d5      	b.n	83fa6 <setvbuf+0x9e>
   83ffa:	f44f 6780 	mov.w	r7, #1024	; 0x400
   83ffe:	e7ec      	b.n	83fda <setvbuf+0xd2>
   84000:	20070648 	.word	0x20070648
   84004:	0008506d 	.word	0x0008506d

00084008 <strlen>:
   84008:	f020 0103 	bic.w	r1, r0, #3
   8400c:	f010 0003 	ands.w	r0, r0, #3
   84010:	f1c0 0000 	rsb	r0, r0, #0
   84014:	f851 3b04 	ldr.w	r3, [r1], #4
   84018:	f100 0c04 	add.w	ip, r0, #4
   8401c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   84020:	f06f 0200 	mvn.w	r2, #0
   84024:	bf1c      	itt	ne
   84026:	fa22 f20c 	lsrne.w	r2, r2, ip
   8402a:	4313      	orrne	r3, r2
   8402c:	f04f 0c01 	mov.w	ip, #1
   84030:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   84034:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   84038:	eba3 020c 	sub.w	r2, r3, ip
   8403c:	ea22 0203 	bic.w	r2, r2, r3
   84040:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   84044:	bf04      	itt	eq
   84046:	f851 3b04 	ldreq.w	r3, [r1], #4
   8404a:	3004      	addeq	r0, #4
   8404c:	d0f4      	beq.n	84038 <strlen+0x30>
   8404e:	f013 0fff 	tst.w	r3, #255	; 0xff
   84052:	bf1f      	itttt	ne
   84054:	3001      	addne	r0, #1
   84056:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
   8405a:	3001      	addne	r0, #1
   8405c:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
   84060:	bf18      	it	ne
   84062:	3001      	addne	r0, #1
   84064:	4770      	bx	lr
   84066:	bf00      	nop

00084068 <strncpy>:
   84068:	ea40 0301 	orr.w	r3, r0, r1
   8406c:	079b      	lsls	r3, r3, #30
   8406e:	b470      	push	{r4, r5, r6}
   84070:	d12a      	bne.n	840c8 <strncpy+0x60>
   84072:	2a03      	cmp	r2, #3
   84074:	d928      	bls.n	840c8 <strncpy+0x60>
   84076:	460c      	mov	r4, r1
   84078:	4603      	mov	r3, r0
   8407a:	4621      	mov	r1, r4
   8407c:	f854 5b04 	ldr.w	r5, [r4], #4
   84080:	f1a5 3601 	sub.w	r6, r5, #16843009	; 0x1010101
   84084:	ea26 0605 	bic.w	r6, r6, r5
   84088:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
   8408c:	d105      	bne.n	8409a <strncpy+0x32>
   8408e:	3a04      	subs	r2, #4
   84090:	2a03      	cmp	r2, #3
   84092:	f843 5b04 	str.w	r5, [r3], #4
   84096:	4621      	mov	r1, r4
   84098:	d8ef      	bhi.n	8407a <strncpy+0x12>
   8409a:	b19a      	cbz	r2, 840c4 <strncpy+0x5c>
   8409c:	780c      	ldrb	r4, [r1, #0]
   8409e:	3a01      	subs	r2, #1
   840a0:	701c      	strb	r4, [r3, #0]
   840a2:	3301      	adds	r3, #1
   840a4:	b13c      	cbz	r4, 840b6 <strncpy+0x4e>
   840a6:	b16a      	cbz	r2, 840c4 <strncpy+0x5c>
   840a8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   840ac:	3a01      	subs	r2, #1
   840ae:	f803 4b01 	strb.w	r4, [r3], #1
   840b2:	2c00      	cmp	r4, #0
   840b4:	d1f7      	bne.n	840a6 <strncpy+0x3e>
   840b6:	b12a      	cbz	r2, 840c4 <strncpy+0x5c>
   840b8:	441a      	add	r2, r3
   840ba:	2100      	movs	r1, #0
   840bc:	f803 1b01 	strb.w	r1, [r3], #1
   840c0:	4293      	cmp	r3, r2
   840c2:	d1fb      	bne.n	840bc <strncpy+0x54>
   840c4:	bc70      	pop	{r4, r5, r6}
   840c6:	4770      	bx	lr
   840c8:	4603      	mov	r3, r0
   840ca:	e7e6      	b.n	8409a <strncpy+0x32>

000840cc <__sprint_r.part.0>:
   840cc:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   840ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   840d2:	049c      	lsls	r4, r3, #18
   840d4:	460e      	mov	r6, r1
   840d6:	4680      	mov	r8, r0
   840d8:	4691      	mov	r9, r2
   840da:	d52a      	bpl.n	84132 <__sprint_r.part.0+0x66>
   840dc:	6893      	ldr	r3, [r2, #8]
   840de:	6812      	ldr	r2, [r2, #0]
   840e0:	f102 0a08 	add.w	sl, r2, #8
   840e4:	b31b      	cbz	r3, 8412e <__sprint_r.part.0+0x62>
   840e6:	e91a 00a0 	ldmdb	sl, {r5, r7}
   840ea:	08bf      	lsrs	r7, r7, #2
   840ec:	d017      	beq.n	8411e <__sprint_r.part.0+0x52>
   840ee:	3d04      	subs	r5, #4
   840f0:	2400      	movs	r4, #0
   840f2:	e001      	b.n	840f8 <__sprint_r.part.0+0x2c>
   840f4:	42a7      	cmp	r7, r4
   840f6:	d010      	beq.n	8411a <__sprint_r.part.0+0x4e>
   840f8:	4640      	mov	r0, r8
   840fa:	f855 1f04 	ldr.w	r1, [r5, #4]!
   840fe:	4632      	mov	r2, r6
   84100:	f001 f850 	bl	851a4 <_fputwc_r>
   84104:	1c43      	adds	r3, r0, #1
   84106:	f104 0401 	add.w	r4, r4, #1
   8410a:	d1f3      	bne.n	840f4 <__sprint_r.part.0+0x28>
   8410c:	2300      	movs	r3, #0
   8410e:	f8c9 3008 	str.w	r3, [r9, #8]
   84112:	f8c9 3004 	str.w	r3, [r9, #4]
   84116:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8411a:	f8d9 3008 	ldr.w	r3, [r9, #8]
   8411e:	eba3 0387 	sub.w	r3, r3, r7, lsl #2
   84122:	f8c9 3008 	str.w	r3, [r9, #8]
   84126:	f10a 0a08 	add.w	sl, sl, #8
   8412a:	2b00      	cmp	r3, #0
   8412c:	d1db      	bne.n	840e6 <__sprint_r.part.0+0x1a>
   8412e:	2000      	movs	r0, #0
   84130:	e7ec      	b.n	8410c <__sprint_r.part.0+0x40>
   84132:	f001 f9b1 	bl	85498 <__sfvwrite_r>
   84136:	2300      	movs	r3, #0
   84138:	f8c9 3008 	str.w	r3, [r9, #8]
   8413c:	f8c9 3004 	str.w	r3, [r9, #4]
   84140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00084144 <_vfiprintf_r>:
   84144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84148:	b0b1      	sub	sp, #196	; 0xc4
   8414a:	461c      	mov	r4, r3
   8414c:	9102      	str	r1, [sp, #8]
   8414e:	4690      	mov	r8, r2
   84150:	9308      	str	r3, [sp, #32]
   84152:	9006      	str	r0, [sp, #24]
   84154:	b118      	cbz	r0, 8415e <_vfiprintf_r+0x1a>
   84156:	6b83      	ldr	r3, [r0, #56]	; 0x38
   84158:	2b00      	cmp	r3, #0
   8415a:	f000 80e8 	beq.w	8432e <_vfiprintf_r+0x1ea>
   8415e:	9d02      	ldr	r5, [sp, #8]
   84160:	89ab      	ldrh	r3, [r5, #12]
   84162:	b29a      	uxth	r2, r3
   84164:	0490      	lsls	r0, r2, #18
   84166:	d407      	bmi.n	84178 <_vfiprintf_r+0x34>
   84168:	6e6a      	ldr	r2, [r5, #100]	; 0x64
   8416a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   8416e:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
   84172:	81ab      	strh	r3, [r5, #12]
   84174:	b29a      	uxth	r2, r3
   84176:	6669      	str	r1, [r5, #100]	; 0x64
   84178:	0711      	lsls	r1, r2, #28
   8417a:	f140 80b7 	bpl.w	842ec <_vfiprintf_r+0x1a8>
   8417e:	f8dd b008 	ldr.w	fp, [sp, #8]
   84182:	f8db 3010 	ldr.w	r3, [fp, #16]
   84186:	2b00      	cmp	r3, #0
   84188:	f000 80b0 	beq.w	842ec <_vfiprintf_r+0x1a8>
   8418c:	f002 021a 	and.w	r2, r2, #26
   84190:	2a0a      	cmp	r2, #10
   84192:	f000 80b7 	beq.w	84304 <_vfiprintf_r+0x1c0>
   84196:	2300      	movs	r3, #0
   84198:	f10d 0980 	add.w	r9, sp, #128	; 0x80
   8419c:	930a      	str	r3, [sp, #40]	; 0x28
   8419e:	9315      	str	r3, [sp, #84]	; 0x54
   841a0:	9314      	str	r3, [sp, #80]	; 0x50
   841a2:	9309      	str	r3, [sp, #36]	; 0x24
   841a4:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
   841a8:	464e      	mov	r6, r9
   841aa:	f898 3000 	ldrb.w	r3, [r8]
   841ae:	2b00      	cmp	r3, #0
   841b0:	f000 84c8 	beq.w	84b44 <_vfiprintf_r+0xa00>
   841b4:	2b25      	cmp	r3, #37	; 0x25
   841b6:	f000 84c5 	beq.w	84b44 <_vfiprintf_r+0xa00>
   841ba:	f108 0201 	add.w	r2, r8, #1
   841be:	e001      	b.n	841c4 <_vfiprintf_r+0x80>
   841c0:	2b25      	cmp	r3, #37	; 0x25
   841c2:	d004      	beq.n	841ce <_vfiprintf_r+0x8a>
   841c4:	7813      	ldrb	r3, [r2, #0]
   841c6:	4614      	mov	r4, r2
   841c8:	3201      	adds	r2, #1
   841ca:	2b00      	cmp	r3, #0
   841cc:	d1f8      	bne.n	841c0 <_vfiprintf_r+0x7c>
   841ce:	ebc8 0504 	rsb	r5, r8, r4
   841d2:	b195      	cbz	r5, 841fa <_vfiprintf_r+0xb6>
   841d4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   841d6:	9a15      	ldr	r2, [sp, #84]	; 0x54
   841d8:	3301      	adds	r3, #1
   841da:	442a      	add	r2, r5
   841dc:	2b07      	cmp	r3, #7
   841de:	f8c6 8000 	str.w	r8, [r6]
   841e2:	6075      	str	r5, [r6, #4]
   841e4:	9215      	str	r2, [sp, #84]	; 0x54
   841e6:	9314      	str	r3, [sp, #80]	; 0x50
   841e8:	dd7b      	ble.n	842e2 <_vfiprintf_r+0x19e>
   841ea:	2a00      	cmp	r2, #0
   841ec:	f040 84d5 	bne.w	84b9a <_vfiprintf_r+0xa56>
   841f0:	9809      	ldr	r0, [sp, #36]	; 0x24
   841f2:	9214      	str	r2, [sp, #80]	; 0x50
   841f4:	4428      	add	r0, r5
   841f6:	464e      	mov	r6, r9
   841f8:	9009      	str	r0, [sp, #36]	; 0x24
   841fa:	7823      	ldrb	r3, [r4, #0]
   841fc:	2b00      	cmp	r3, #0
   841fe:	f000 83ed 	beq.w	849dc <_vfiprintf_r+0x898>
   84202:	2100      	movs	r1, #0
   84204:	f04f 0200 	mov.w	r2, #0
   84208:	f04f 3cff 	mov.w	ip, #4294967295
   8420c:	7863      	ldrb	r3, [r4, #1]
   8420e:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
   84212:	9104      	str	r1, [sp, #16]
   84214:	468a      	mov	sl, r1
   84216:	f104 0801 	add.w	r8, r4, #1
   8421a:	4608      	mov	r0, r1
   8421c:	4665      	mov	r5, ip
   8421e:	f108 0801 	add.w	r8, r8, #1
   84222:	f1a3 0220 	sub.w	r2, r3, #32
   84226:	2a58      	cmp	r2, #88	; 0x58
   84228:	f200 82d9 	bhi.w	847de <_vfiprintf_r+0x69a>
   8422c:	e8df f012 	tbh	[pc, r2, lsl #1]
   84230:	02d702cb 	.word	0x02d702cb
   84234:	02d202d7 	.word	0x02d202d7
   84238:	02d702d7 	.word	0x02d702d7
   8423c:	02d702d7 	.word	0x02d702d7
   84240:	02d702d7 	.word	0x02d702d7
   84244:	028f0282 	.word	0x028f0282
   84248:	008402d7 	.word	0x008402d7
   8424c:	02d70293 	.word	0x02d70293
   84250:	0196012b 	.word	0x0196012b
   84254:	01960196 	.word	0x01960196
   84258:	01960196 	.word	0x01960196
   8425c:	01960196 	.word	0x01960196
   84260:	01960196 	.word	0x01960196
   84264:	02d702d7 	.word	0x02d702d7
   84268:	02d702d7 	.word	0x02d702d7
   8426c:	02d702d7 	.word	0x02d702d7
   84270:	02d702d7 	.word	0x02d702d7
   84274:	02d702d7 	.word	0x02d702d7
   84278:	02d70130 	.word	0x02d70130
   8427c:	02d702d7 	.word	0x02d702d7
   84280:	02d702d7 	.word	0x02d702d7
   84284:	02d702d7 	.word	0x02d702d7
   84288:	02d702d7 	.word	0x02d702d7
   8428c:	017b02d7 	.word	0x017b02d7
   84290:	02d702d7 	.word	0x02d702d7
   84294:	02d702d7 	.word	0x02d702d7
   84298:	01a402d7 	.word	0x01a402d7
   8429c:	02d702d7 	.word	0x02d702d7
   842a0:	02d701bf 	.word	0x02d701bf
   842a4:	02d702d7 	.word	0x02d702d7
   842a8:	02d702d7 	.word	0x02d702d7
   842ac:	02d702d7 	.word	0x02d702d7
   842b0:	02d702d7 	.word	0x02d702d7
   842b4:	01e402d7 	.word	0x01e402d7
   842b8:	02d701fa 	.word	0x02d701fa
   842bc:	02d702d7 	.word	0x02d702d7
   842c0:	01fa0216 	.word	0x01fa0216
   842c4:	02d702d7 	.word	0x02d702d7
   842c8:	02d7021b 	.word	0x02d7021b
   842cc:	00890228 	.word	0x00890228
   842d0:	027d0266 	.word	0x027d0266
   842d4:	023a02d7 	.word	0x023a02d7
   842d8:	011902d7 	.word	0x011902d7
   842dc:	02d702d7 	.word	0x02d702d7
   842e0:	02af      	.short	0x02af
   842e2:	3608      	adds	r6, #8
   842e4:	9809      	ldr	r0, [sp, #36]	; 0x24
   842e6:	4428      	add	r0, r5
   842e8:	9009      	str	r0, [sp, #36]	; 0x24
   842ea:	e786      	b.n	841fa <_vfiprintf_r+0xb6>
   842ec:	9806      	ldr	r0, [sp, #24]
   842ee:	9902      	ldr	r1, [sp, #8]
   842f0:	f000 fd90 	bl	84e14 <__swsetup_r>
   842f4:	b9b0      	cbnz	r0, 84324 <_vfiprintf_r+0x1e0>
   842f6:	9d02      	ldr	r5, [sp, #8]
   842f8:	89aa      	ldrh	r2, [r5, #12]
   842fa:	f002 021a 	and.w	r2, r2, #26
   842fe:	2a0a      	cmp	r2, #10
   84300:	f47f af49 	bne.w	84196 <_vfiprintf_r+0x52>
   84304:	f8dd b008 	ldr.w	fp, [sp, #8]
   84308:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
   8430c:	2b00      	cmp	r3, #0
   8430e:	f6ff af42 	blt.w	84196 <_vfiprintf_r+0x52>
   84312:	9806      	ldr	r0, [sp, #24]
   84314:	4659      	mov	r1, fp
   84316:	4642      	mov	r2, r8
   84318:	4623      	mov	r3, r4
   8431a:	f000 fd3d 	bl	84d98 <__sbprintf>
   8431e:	b031      	add	sp, #196	; 0xc4
   84320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84324:	f04f 30ff 	mov.w	r0, #4294967295
   84328:	b031      	add	sp, #196	; 0xc4
   8432a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8432e:	f000 fea3 	bl	85078 <__sinit>
   84332:	e714      	b.n	8415e <_vfiprintf_r+0x1a>
   84334:	4240      	negs	r0, r0
   84336:	9308      	str	r3, [sp, #32]
   84338:	f04a 0a04 	orr.w	sl, sl, #4
   8433c:	f898 3000 	ldrb.w	r3, [r8]
   84340:	e76d      	b.n	8421e <_vfiprintf_r+0xda>
   84342:	f01a 0320 	ands.w	r3, sl, #32
   84346:	9004      	str	r0, [sp, #16]
   84348:	46ac      	mov	ip, r5
   8434a:	f000 80f4 	beq.w	84536 <_vfiprintf_r+0x3f2>
   8434e:	f8dd b020 	ldr.w	fp, [sp, #32]
   84352:	f10b 0307 	add.w	r3, fp, #7
   84356:	f023 0307 	bic.w	r3, r3, #7
   8435a:	f103 0408 	add.w	r4, r3, #8
   8435e:	9408      	str	r4, [sp, #32]
   84360:	e9d3 4500 	ldrd	r4, r5, [r3]
   84364:	2300      	movs	r3, #0
   84366:	f04f 0000 	mov.w	r0, #0
   8436a:	2100      	movs	r1, #0
   8436c:	f88d 0047 	strb.w	r0, [sp, #71]	; 0x47
   84370:	f8cd c014 	str.w	ip, [sp, #20]
   84374:	9107      	str	r1, [sp, #28]
   84376:	f1bc 0f00 	cmp.w	ip, #0
   8437a:	bfa8      	it	ge
   8437c:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
   84380:	ea54 0205 	orrs.w	r2, r4, r5
   84384:	f040 80ad 	bne.w	844e2 <_vfiprintf_r+0x39e>
   84388:	f1bc 0f00 	cmp.w	ip, #0
   8438c:	f040 80a9 	bne.w	844e2 <_vfiprintf_r+0x39e>
   84390:	2b00      	cmp	r3, #0
   84392:	f040 83c0 	bne.w	84b16 <_vfiprintf_r+0x9d2>
   84396:	f01a 0f01 	tst.w	sl, #1
   8439a:	f000 83bc 	beq.w	84b16 <_vfiprintf_r+0x9d2>
   8439e:	2330      	movs	r3, #48	; 0x30
   843a0:	af30      	add	r7, sp, #192	; 0xc0
   843a2:	f807 3d41 	strb.w	r3, [r7, #-65]!
   843a6:	ebc7 0409 	rsb	r4, r7, r9
   843aa:	9405      	str	r4, [sp, #20]
   843ac:	f8dd b014 	ldr.w	fp, [sp, #20]
   843b0:	9c07      	ldr	r4, [sp, #28]
   843b2:	45e3      	cmp	fp, ip
   843b4:	bfb8      	it	lt
   843b6:	46e3      	movlt	fp, ip
   843b8:	f8cd b00c 	str.w	fp, [sp, #12]
   843bc:	b11c      	cbz	r4, 843c6 <_vfiprintf_r+0x282>
   843be:	f10b 0b01 	add.w	fp, fp, #1
   843c2:	f8cd b00c 	str.w	fp, [sp, #12]
   843c6:	f01a 0502 	ands.w	r5, sl, #2
   843ca:	9507      	str	r5, [sp, #28]
   843cc:	d005      	beq.n	843da <_vfiprintf_r+0x296>
   843ce:	f8dd b00c 	ldr.w	fp, [sp, #12]
   843d2:	f10b 0b02 	add.w	fp, fp, #2
   843d6:	f8cd b00c 	str.w	fp, [sp, #12]
   843da:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
   843de:	930b      	str	r3, [sp, #44]	; 0x2c
   843e0:	f040 821b 	bne.w	8481a <_vfiprintf_r+0x6d6>
   843e4:	9d04      	ldr	r5, [sp, #16]
   843e6:	f8dd b00c 	ldr.w	fp, [sp, #12]
   843ea:	ebcb 0405 	rsb	r4, fp, r5
   843ee:	2c00      	cmp	r4, #0
   843f0:	f340 8213 	ble.w	8481a <_vfiprintf_r+0x6d6>
   843f4:	2c10      	cmp	r4, #16
   843f6:	f340 8489 	ble.w	84d0c <_vfiprintf_r+0xbc8>
   843fa:	4dbe      	ldr	r5, [pc, #760]	; (846f4 <_vfiprintf_r+0x5b0>)
   843fc:	9a15      	ldr	r2, [sp, #84]	; 0x54
   843fe:	462b      	mov	r3, r5
   84400:	9814      	ldr	r0, [sp, #80]	; 0x50
   84402:	4625      	mov	r5, r4
   84404:	f04f 0b10 	mov.w	fp, #16
   84408:	4664      	mov	r4, ip
   8440a:	46b4      	mov	ip, r6
   8440c:	461e      	mov	r6, r3
   8440e:	e006      	b.n	8441e <_vfiprintf_r+0x2da>
   84410:	1c83      	adds	r3, r0, #2
   84412:	f10c 0c08 	add.w	ip, ip, #8
   84416:	4608      	mov	r0, r1
   84418:	3d10      	subs	r5, #16
   8441a:	2d10      	cmp	r5, #16
   8441c:	dd11      	ble.n	84442 <_vfiprintf_r+0x2fe>
   8441e:	1c41      	adds	r1, r0, #1
   84420:	3210      	adds	r2, #16
   84422:	2907      	cmp	r1, #7
   84424:	9215      	str	r2, [sp, #84]	; 0x54
   84426:	e88c 0840 	stmia.w	ip, {r6, fp}
   8442a:	9114      	str	r1, [sp, #80]	; 0x50
   8442c:	ddf0      	ble.n	84410 <_vfiprintf_r+0x2cc>
   8442e:	2a00      	cmp	r2, #0
   84430:	f040 81e6 	bne.w	84800 <_vfiprintf_r+0x6bc>
   84434:	3d10      	subs	r5, #16
   84436:	2d10      	cmp	r5, #16
   84438:	f04f 0301 	mov.w	r3, #1
   8443c:	4610      	mov	r0, r2
   8443e:	46cc      	mov	ip, r9
   84440:	dced      	bgt.n	8441e <_vfiprintf_r+0x2da>
   84442:	4631      	mov	r1, r6
   84444:	4666      	mov	r6, ip
   84446:	46a4      	mov	ip, r4
   84448:	462c      	mov	r4, r5
   8444a:	460d      	mov	r5, r1
   8444c:	4422      	add	r2, r4
   8444e:	2b07      	cmp	r3, #7
   84450:	9215      	str	r2, [sp, #84]	; 0x54
   84452:	6035      	str	r5, [r6, #0]
   84454:	6074      	str	r4, [r6, #4]
   84456:	9314      	str	r3, [sp, #80]	; 0x50
   84458:	f300 836d 	bgt.w	84b36 <_vfiprintf_r+0x9f2>
   8445c:	3608      	adds	r6, #8
   8445e:	1c59      	adds	r1, r3, #1
   84460:	e1de      	b.n	84820 <_vfiprintf_r+0x6dc>
   84462:	f01a 0f20 	tst.w	sl, #32
   84466:	9004      	str	r0, [sp, #16]
   84468:	46ac      	mov	ip, r5
   8446a:	f000 808d 	beq.w	84588 <_vfiprintf_r+0x444>
   8446e:	9d08      	ldr	r5, [sp, #32]
   84470:	1deb      	adds	r3, r5, #7
   84472:	f023 0307 	bic.w	r3, r3, #7
   84476:	f103 0b08 	add.w	fp, r3, #8
   8447a:	e9d3 4500 	ldrd	r4, r5, [r3]
   8447e:	f8cd b020 	str.w	fp, [sp, #32]
   84482:	2301      	movs	r3, #1
   84484:	e76f      	b.n	84366 <_vfiprintf_r+0x222>
   84486:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
   8448a:	f898 3000 	ldrb.w	r3, [r8]
   8448e:	e6c6      	b.n	8421e <_vfiprintf_r+0xda>
   84490:	f04a 0a10 	orr.w	sl, sl, #16
   84494:	f01a 0f20 	tst.w	sl, #32
   84498:	9004      	str	r0, [sp, #16]
   8449a:	46ac      	mov	ip, r5
   8449c:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   844a0:	f000 80c8 	beq.w	84634 <_vfiprintf_r+0x4f0>
   844a4:	9c08      	ldr	r4, [sp, #32]
   844a6:	1de1      	adds	r1, r4, #7
   844a8:	f021 0107 	bic.w	r1, r1, #7
   844ac:	e9d1 2300 	ldrd	r2, r3, [r1]
   844b0:	3108      	adds	r1, #8
   844b2:	9108      	str	r1, [sp, #32]
   844b4:	4614      	mov	r4, r2
   844b6:	461d      	mov	r5, r3
   844b8:	2a00      	cmp	r2, #0
   844ba:	f173 0b00 	sbcs.w	fp, r3, #0
   844be:	f2c0 83ce 	blt.w	84c5e <_vfiprintf_r+0xb1a>
   844c2:	f1bc 0f00 	cmp.w	ip, #0
   844c6:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
   844ca:	bfa8      	it	ge
   844cc:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
   844d0:	ea54 0205 	orrs.w	r2, r4, r5
   844d4:	9007      	str	r0, [sp, #28]
   844d6:	f8cd c014 	str.w	ip, [sp, #20]
   844da:	f04f 0301 	mov.w	r3, #1
   844de:	f43f af53 	beq.w	84388 <_vfiprintf_r+0x244>
   844e2:	2b01      	cmp	r3, #1
   844e4:	f000 8319 	beq.w	84b1a <_vfiprintf_r+0x9d6>
   844e8:	2b02      	cmp	r3, #2
   844ea:	f10d 037f 	add.w	r3, sp, #127	; 0x7f
   844ee:	f040 824c 	bne.w	8498a <_vfiprintf_r+0x846>
   844f2:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   844f6:	4619      	mov	r1, r3
   844f8:	f004 000f 	and.w	r0, r4, #15
   844fc:	0922      	lsrs	r2, r4, #4
   844fe:	f81b 0000 	ldrb.w	r0, [fp, r0]
   84502:	ea42 7205 	orr.w	r2, r2, r5, lsl #28
   84506:	092b      	lsrs	r3, r5, #4
   84508:	7008      	strb	r0, [r1, #0]
   8450a:	ea52 0003 	orrs.w	r0, r2, r3
   8450e:	460f      	mov	r7, r1
   84510:	4614      	mov	r4, r2
   84512:	461d      	mov	r5, r3
   84514:	f101 31ff 	add.w	r1, r1, #4294967295
   84518:	d1ee      	bne.n	844f8 <_vfiprintf_r+0x3b4>
   8451a:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   8451e:	ebc7 0309 	rsb	r3, r7, r9
   84522:	9305      	str	r3, [sp, #20]
   84524:	e742      	b.n	843ac <_vfiprintf_r+0x268>
   84526:	f04a 0a10 	orr.w	sl, sl, #16
   8452a:	f01a 0320 	ands.w	r3, sl, #32
   8452e:	9004      	str	r0, [sp, #16]
   84530:	46ac      	mov	ip, r5
   84532:	f47f af0c 	bne.w	8434e <_vfiprintf_r+0x20a>
   84536:	f01a 0210 	ands.w	r2, sl, #16
   8453a:	f040 8311 	bne.w	84b60 <_vfiprintf_r+0xa1c>
   8453e:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
   84542:	f000 830d 	beq.w	84b60 <_vfiprintf_r+0xa1c>
   84546:	f8dd b020 	ldr.w	fp, [sp, #32]
   8454a:	4613      	mov	r3, r2
   8454c:	f8bb 4000 	ldrh.w	r4, [fp]
   84550:	f10b 0b04 	add.w	fp, fp, #4
   84554:	2500      	movs	r5, #0
   84556:	f8cd b020 	str.w	fp, [sp, #32]
   8455a:	e704      	b.n	84366 <_vfiprintf_r+0x222>
   8455c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   84560:	2000      	movs	r0, #0
   84562:	f818 3b01 	ldrb.w	r3, [r8], #1
   84566:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   8456a:	eb02 0040 	add.w	r0, r2, r0, lsl #1
   8456e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   84572:	2a09      	cmp	r2, #9
   84574:	d9f5      	bls.n	84562 <_vfiprintf_r+0x41e>
   84576:	e654      	b.n	84222 <_vfiprintf_r+0xde>
   84578:	f04a 0a10 	orr.w	sl, sl, #16
   8457c:	f01a 0f20 	tst.w	sl, #32
   84580:	9004      	str	r0, [sp, #16]
   84582:	46ac      	mov	ip, r5
   84584:	f47f af73 	bne.w	8446e <_vfiprintf_r+0x32a>
   84588:	f01a 0f10 	tst.w	sl, #16
   8458c:	f040 82ef 	bne.w	84b6e <_vfiprintf_r+0xa2a>
   84590:	f01a 0f40 	tst.w	sl, #64	; 0x40
   84594:	f000 82eb 	beq.w	84b6e <_vfiprintf_r+0xa2a>
   84598:	f8dd b020 	ldr.w	fp, [sp, #32]
   8459c:	2500      	movs	r5, #0
   8459e:	f8bb 4000 	ldrh.w	r4, [fp]
   845a2:	f10b 0b04 	add.w	fp, fp, #4
   845a6:	2301      	movs	r3, #1
   845a8:	f8cd b020 	str.w	fp, [sp, #32]
   845ac:	e6db      	b.n	84366 <_vfiprintf_r+0x222>
   845ae:	46ac      	mov	ip, r5
   845b0:	4d51      	ldr	r5, [pc, #324]	; (846f8 <_vfiprintf_r+0x5b4>)
   845b2:	f01a 0f20 	tst.w	sl, #32
   845b6:	9004      	str	r0, [sp, #16]
   845b8:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   845bc:	950a      	str	r5, [sp, #40]	; 0x28
   845be:	f000 80f0 	beq.w	847a2 <_vfiprintf_r+0x65e>
   845c2:	9d08      	ldr	r5, [sp, #32]
   845c4:	1dea      	adds	r2, r5, #7
   845c6:	f022 0207 	bic.w	r2, r2, #7
   845ca:	f102 0b08 	add.w	fp, r2, #8
   845ce:	f8cd b020 	str.w	fp, [sp, #32]
   845d2:	e9d2 4500 	ldrd	r4, r5, [r2]
   845d6:	f01a 0f01 	tst.w	sl, #1
   845da:	f000 82aa 	beq.w	84b32 <_vfiprintf_r+0x9ee>
   845de:	ea54 0b05 	orrs.w	fp, r4, r5
   845e2:	f000 82a6 	beq.w	84b32 <_vfiprintf_r+0x9ee>
   845e6:	2230      	movs	r2, #48	; 0x30
   845e8:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
   845ec:	f04a 0a02 	orr.w	sl, sl, #2
   845f0:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   845f4:	2302      	movs	r3, #2
   845f6:	e6b6      	b.n	84366 <_vfiprintf_r+0x222>
   845f8:	9b08      	ldr	r3, [sp, #32]
   845fa:	f8dd b020 	ldr.w	fp, [sp, #32]
   845fe:	681b      	ldr	r3, [r3, #0]
   84600:	2401      	movs	r4, #1
   84602:	f04f 0500 	mov.w	r5, #0
   84606:	f10b 0b04 	add.w	fp, fp, #4
   8460a:	9004      	str	r0, [sp, #16]
   8460c:	9403      	str	r4, [sp, #12]
   8460e:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
   84612:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   84616:	f8cd b020 	str.w	fp, [sp, #32]
   8461a:	9405      	str	r4, [sp, #20]
   8461c:	af16      	add	r7, sp, #88	; 0x58
   8461e:	f04f 0c00 	mov.w	ip, #0
   84622:	e6d0      	b.n	843c6 <_vfiprintf_r+0x282>
   84624:	f01a 0f20 	tst.w	sl, #32
   84628:	9004      	str	r0, [sp, #16]
   8462a:	46ac      	mov	ip, r5
   8462c:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   84630:	f47f af38 	bne.w	844a4 <_vfiprintf_r+0x360>
   84634:	f01a 0f10 	tst.w	sl, #16
   84638:	f040 82a7 	bne.w	84b8a <_vfiprintf_r+0xa46>
   8463c:	f01a 0f40 	tst.w	sl, #64	; 0x40
   84640:	f000 82a3 	beq.w	84b8a <_vfiprintf_r+0xa46>
   84644:	f8dd b020 	ldr.w	fp, [sp, #32]
   84648:	f9bb 4000 	ldrsh.w	r4, [fp]
   8464c:	f10b 0b04 	add.w	fp, fp, #4
   84650:	17e5      	asrs	r5, r4, #31
   84652:	4622      	mov	r2, r4
   84654:	462b      	mov	r3, r5
   84656:	f8cd b020 	str.w	fp, [sp, #32]
   8465a:	e72d      	b.n	844b8 <_vfiprintf_r+0x374>
   8465c:	f04a 0a40 	orr.w	sl, sl, #64	; 0x40
   84660:	f898 3000 	ldrb.w	r3, [r8]
   84664:	e5db      	b.n	8421e <_vfiprintf_r+0xda>
   84666:	f898 3000 	ldrb.w	r3, [r8]
   8466a:	4642      	mov	r2, r8
   8466c:	2b6c      	cmp	r3, #108	; 0x6c
   8466e:	bf03      	ittte	eq
   84670:	f108 0801 	addeq.w	r8, r8, #1
   84674:	f04a 0a20 	orreq.w	sl, sl, #32
   84678:	7853      	ldrbeq	r3, [r2, #1]
   8467a:	f04a 0a10 	orrne.w	sl, sl, #16
   8467e:	e5ce      	b.n	8421e <_vfiprintf_r+0xda>
   84680:	f01a 0f20 	tst.w	sl, #32
   84684:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   84688:	f000 82f7 	beq.w	84c7a <_vfiprintf_r+0xb36>
   8468c:	9c08      	ldr	r4, [sp, #32]
   8468e:	6821      	ldr	r1, [r4, #0]
   84690:	9c09      	ldr	r4, [sp, #36]	; 0x24
   84692:	17e5      	asrs	r5, r4, #31
   84694:	462b      	mov	r3, r5
   84696:	9d08      	ldr	r5, [sp, #32]
   84698:	4622      	mov	r2, r4
   8469a:	3504      	adds	r5, #4
   8469c:	9508      	str	r5, [sp, #32]
   8469e:	e9c1 2300 	strd	r2, r3, [r1]
   846a2:	e582      	b.n	841aa <_vfiprintf_r+0x66>
   846a4:	9c08      	ldr	r4, [sp, #32]
   846a6:	46ac      	mov	ip, r5
   846a8:	6827      	ldr	r7, [r4, #0]
   846aa:	f04f 0500 	mov.w	r5, #0
   846ae:	9004      	str	r0, [sp, #16]
   846b0:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
   846b4:	3404      	adds	r4, #4
   846b6:	2f00      	cmp	r7, #0
   846b8:	f000 8332 	beq.w	84d20 <_vfiprintf_r+0xbdc>
   846bc:	f1bc 0f00 	cmp.w	ip, #0
   846c0:	4638      	mov	r0, r7
   846c2:	f2c0 8307 	blt.w	84cd4 <_vfiprintf_r+0xb90>
   846c6:	4662      	mov	r2, ip
   846c8:	2100      	movs	r1, #0
   846ca:	f8cd c004 	str.w	ip, [sp, #4]
   846ce:	f001 fbb1 	bl	85e34 <memchr>
   846d2:	f8dd c004 	ldr.w	ip, [sp, #4]
   846d6:	2800      	cmp	r0, #0
   846d8:	f000 833a 	beq.w	84d50 <_vfiprintf_r+0xc0c>
   846dc:	1bc0      	subs	r0, r0, r7
   846de:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
   846e2:	4560      	cmp	r0, ip
   846e4:	bfa8      	it	ge
   846e6:	4660      	movge	r0, ip
   846e8:	9005      	str	r0, [sp, #20]
   846ea:	9408      	str	r4, [sp, #32]
   846ec:	9507      	str	r5, [sp, #28]
   846ee:	f04f 0c00 	mov.w	ip, #0
   846f2:	e65b      	b.n	843ac <_vfiprintf_r+0x268>
   846f4:	00086c88 	.word	0x00086c88
   846f8:	00086c48 	.word	0x00086c48
   846fc:	9b08      	ldr	r3, [sp, #32]
   846fe:	f8dd b020 	ldr.w	fp, [sp, #32]
   84702:	9004      	str	r0, [sp, #16]
   84704:	48b2      	ldr	r0, [pc, #712]	; (849d0 <_vfiprintf_r+0x88c>)
   84706:	681c      	ldr	r4, [r3, #0]
   84708:	2230      	movs	r2, #48	; 0x30
   8470a:	2378      	movs	r3, #120	; 0x78
   8470c:	f10b 0b04 	add.w	fp, fp, #4
   84710:	46ac      	mov	ip, r5
   84712:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
   84716:	f04a 0a02 	orr.w	sl, sl, #2
   8471a:	f8cd b020 	str.w	fp, [sp, #32]
   8471e:	2500      	movs	r5, #0
   84720:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   84724:	900a      	str	r0, [sp, #40]	; 0x28
   84726:	2302      	movs	r3, #2
   84728:	e61d      	b.n	84366 <_vfiprintf_r+0x222>
   8472a:	f04a 0a20 	orr.w	sl, sl, #32
   8472e:	f898 3000 	ldrb.w	r3, [r8]
   84732:	e574      	b.n	8421e <_vfiprintf_r+0xda>
   84734:	f8dd b020 	ldr.w	fp, [sp, #32]
   84738:	f8db 0000 	ldr.w	r0, [fp]
   8473c:	f10b 0304 	add.w	r3, fp, #4
   84740:	2800      	cmp	r0, #0
   84742:	f6ff adf7 	blt.w	84334 <_vfiprintf_r+0x1f0>
   84746:	9308      	str	r3, [sp, #32]
   84748:	f898 3000 	ldrb.w	r3, [r8]
   8474c:	e567      	b.n	8421e <_vfiprintf_r+0xda>
   8474e:	f898 3000 	ldrb.w	r3, [r8]
   84752:	212b      	movs	r1, #43	; 0x2b
   84754:	e563      	b.n	8421e <_vfiprintf_r+0xda>
   84756:	f898 3000 	ldrb.w	r3, [r8]
   8475a:	f108 0401 	add.w	r4, r8, #1
   8475e:	2b2a      	cmp	r3, #42	; 0x2a
   84760:	f000 8305 	beq.w	84d6e <_vfiprintf_r+0xc2a>
   84764:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   84768:	2a09      	cmp	r2, #9
   8476a:	bf98      	it	ls
   8476c:	2500      	movls	r5, #0
   8476e:	f200 82fa 	bhi.w	84d66 <_vfiprintf_r+0xc22>
   84772:	f814 3b01 	ldrb.w	r3, [r4], #1
   84776:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   8477a:	eb02 0545 	add.w	r5, r2, r5, lsl #1
   8477e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   84782:	2a09      	cmp	r2, #9
   84784:	d9f5      	bls.n	84772 <_vfiprintf_r+0x62e>
   84786:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
   8478a:	46a0      	mov	r8, r4
   8478c:	e549      	b.n	84222 <_vfiprintf_r+0xde>
   8478e:	4c90      	ldr	r4, [pc, #576]	; (849d0 <_vfiprintf_r+0x88c>)
   84790:	f01a 0f20 	tst.w	sl, #32
   84794:	9004      	str	r0, [sp, #16]
   84796:	46ac      	mov	ip, r5
   84798:	940a      	str	r4, [sp, #40]	; 0x28
   8479a:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   8479e:	f47f af10 	bne.w	845c2 <_vfiprintf_r+0x47e>
   847a2:	f01a 0f10 	tst.w	sl, #16
   847a6:	f040 81ea 	bne.w	84b7e <_vfiprintf_r+0xa3a>
   847aa:	f01a 0f40 	tst.w	sl, #64	; 0x40
   847ae:	f000 81e6 	beq.w	84b7e <_vfiprintf_r+0xa3a>
   847b2:	f8dd b020 	ldr.w	fp, [sp, #32]
   847b6:	2500      	movs	r5, #0
   847b8:	f8bb 4000 	ldrh.w	r4, [fp]
   847bc:	f10b 0b04 	add.w	fp, fp, #4
   847c0:	f8cd b020 	str.w	fp, [sp, #32]
   847c4:	e707      	b.n	845d6 <_vfiprintf_r+0x492>
   847c6:	f898 3000 	ldrb.w	r3, [r8]
   847ca:	2900      	cmp	r1, #0
   847cc:	f47f ad27 	bne.w	8421e <_vfiprintf_r+0xda>
   847d0:	2120      	movs	r1, #32
   847d2:	e524      	b.n	8421e <_vfiprintf_r+0xda>
   847d4:	f04a 0a01 	orr.w	sl, sl, #1
   847d8:	f898 3000 	ldrb.w	r3, [r8]
   847dc:	e51f      	b.n	8421e <_vfiprintf_r+0xda>
   847de:	9004      	str	r0, [sp, #16]
   847e0:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   847e4:	2b00      	cmp	r3, #0
   847e6:	f000 80f9 	beq.w	849dc <_vfiprintf_r+0x898>
   847ea:	2501      	movs	r5, #1
   847ec:	f04f 0b00 	mov.w	fp, #0
   847f0:	9503      	str	r5, [sp, #12]
   847f2:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   847f6:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
   847fa:	9505      	str	r5, [sp, #20]
   847fc:	af16      	add	r7, sp, #88	; 0x58
   847fe:	e70e      	b.n	8461e <_vfiprintf_r+0x4da>
   84800:	9806      	ldr	r0, [sp, #24]
   84802:	9902      	ldr	r1, [sp, #8]
   84804:	aa13      	add	r2, sp, #76	; 0x4c
   84806:	f7ff fc61 	bl	840cc <__sprint_r.part.0>
   8480a:	2800      	cmp	r0, #0
   8480c:	f040 80ed 	bne.w	849ea <_vfiprintf_r+0x8a6>
   84810:	9814      	ldr	r0, [sp, #80]	; 0x50
   84812:	9a15      	ldr	r2, [sp, #84]	; 0x54
   84814:	1c43      	adds	r3, r0, #1
   84816:	46cc      	mov	ip, r9
   84818:	e5fe      	b.n	84418 <_vfiprintf_r+0x2d4>
   8481a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   8481c:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8481e:	1c59      	adds	r1, r3, #1
   84820:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
   84824:	b168      	cbz	r0, 84842 <_vfiprintf_r+0x6fe>
   84826:	3201      	adds	r2, #1
   84828:	f10d 0047 	add.w	r0, sp, #71	; 0x47
   8482c:	2301      	movs	r3, #1
   8482e:	2907      	cmp	r1, #7
   84830:	9215      	str	r2, [sp, #84]	; 0x54
   84832:	9114      	str	r1, [sp, #80]	; 0x50
   84834:	e886 0009 	stmia.w	r6, {r0, r3}
   84838:	f300 8160 	bgt.w	84afc <_vfiprintf_r+0x9b8>
   8483c:	460b      	mov	r3, r1
   8483e:	3608      	adds	r6, #8
   84840:	3101      	adds	r1, #1
   84842:	9c07      	ldr	r4, [sp, #28]
   84844:	b164      	cbz	r4, 84860 <_vfiprintf_r+0x71c>
   84846:	3202      	adds	r2, #2
   84848:	a812      	add	r0, sp, #72	; 0x48
   8484a:	2302      	movs	r3, #2
   8484c:	2907      	cmp	r1, #7
   8484e:	9215      	str	r2, [sp, #84]	; 0x54
   84850:	9114      	str	r1, [sp, #80]	; 0x50
   84852:	e886 0009 	stmia.w	r6, {r0, r3}
   84856:	f300 8157 	bgt.w	84b08 <_vfiprintf_r+0x9c4>
   8485a:	460b      	mov	r3, r1
   8485c:	3608      	adds	r6, #8
   8485e:	3101      	adds	r1, #1
   84860:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   84862:	2d80      	cmp	r5, #128	; 0x80
   84864:	f000 8101 	beq.w	84a6a <_vfiprintf_r+0x926>
   84868:	9d05      	ldr	r5, [sp, #20]
   8486a:	ebc5 040c 	rsb	r4, r5, ip
   8486e:	2c00      	cmp	r4, #0
   84870:	dd2f      	ble.n	848d2 <_vfiprintf_r+0x78e>
   84872:	2c10      	cmp	r4, #16
   84874:	4d57      	ldr	r5, [pc, #348]	; (849d4 <_vfiprintf_r+0x890>)
   84876:	dd22      	ble.n	848be <_vfiprintf_r+0x77a>
   84878:	4630      	mov	r0, r6
   8487a:	f04f 0b10 	mov.w	fp, #16
   8487e:	462e      	mov	r6, r5
   84880:	4625      	mov	r5, r4
   84882:	9c06      	ldr	r4, [sp, #24]
   84884:	e006      	b.n	84894 <_vfiprintf_r+0x750>
   84886:	f103 0c02 	add.w	ip, r3, #2
   8488a:	3008      	adds	r0, #8
   8488c:	460b      	mov	r3, r1
   8488e:	3d10      	subs	r5, #16
   84890:	2d10      	cmp	r5, #16
   84892:	dd10      	ble.n	848b6 <_vfiprintf_r+0x772>
   84894:	1c59      	adds	r1, r3, #1
   84896:	3210      	adds	r2, #16
   84898:	2907      	cmp	r1, #7
   8489a:	9215      	str	r2, [sp, #84]	; 0x54
   8489c:	e880 0840 	stmia.w	r0, {r6, fp}
   848a0:	9114      	str	r1, [sp, #80]	; 0x50
   848a2:	ddf0      	ble.n	84886 <_vfiprintf_r+0x742>
   848a4:	2a00      	cmp	r2, #0
   848a6:	d163      	bne.n	84970 <_vfiprintf_r+0x82c>
   848a8:	3d10      	subs	r5, #16
   848aa:	2d10      	cmp	r5, #16
   848ac:	f04f 0c01 	mov.w	ip, #1
   848b0:	4613      	mov	r3, r2
   848b2:	4648      	mov	r0, r9
   848b4:	dcee      	bgt.n	84894 <_vfiprintf_r+0x750>
   848b6:	462c      	mov	r4, r5
   848b8:	4661      	mov	r1, ip
   848ba:	4635      	mov	r5, r6
   848bc:	4606      	mov	r6, r0
   848be:	4422      	add	r2, r4
   848c0:	2907      	cmp	r1, #7
   848c2:	9215      	str	r2, [sp, #84]	; 0x54
   848c4:	6035      	str	r5, [r6, #0]
   848c6:	6074      	str	r4, [r6, #4]
   848c8:	9114      	str	r1, [sp, #80]	; 0x50
   848ca:	f300 80c1 	bgt.w	84a50 <_vfiprintf_r+0x90c>
   848ce:	3608      	adds	r6, #8
   848d0:	3101      	adds	r1, #1
   848d2:	9d05      	ldr	r5, [sp, #20]
   848d4:	2907      	cmp	r1, #7
   848d6:	442a      	add	r2, r5
   848d8:	9215      	str	r2, [sp, #84]	; 0x54
   848da:	6037      	str	r7, [r6, #0]
   848dc:	6075      	str	r5, [r6, #4]
   848de:	9114      	str	r1, [sp, #80]	; 0x50
   848e0:	f340 80c1 	ble.w	84a66 <_vfiprintf_r+0x922>
   848e4:	2a00      	cmp	r2, #0
   848e6:	f040 8130 	bne.w	84b4a <_vfiprintf_r+0xa06>
   848ea:	9214      	str	r2, [sp, #80]	; 0x50
   848ec:	464e      	mov	r6, r9
   848ee:	f01a 0f04 	tst.w	sl, #4
   848f2:	f000 808b 	beq.w	84a0c <_vfiprintf_r+0x8c8>
   848f6:	9d04      	ldr	r5, [sp, #16]
   848f8:	f8dd b00c 	ldr.w	fp, [sp, #12]
   848fc:	ebcb 0405 	rsb	r4, fp, r5
   84900:	2c00      	cmp	r4, #0
   84902:	f340 8083 	ble.w	84a0c <_vfiprintf_r+0x8c8>
   84906:	2c10      	cmp	r4, #16
   84908:	f340 821e 	ble.w	84d48 <_vfiprintf_r+0xc04>
   8490c:	9914      	ldr	r1, [sp, #80]	; 0x50
   8490e:	4d32      	ldr	r5, [pc, #200]	; (849d8 <_vfiprintf_r+0x894>)
   84910:	2710      	movs	r7, #16
   84912:	f8dd a018 	ldr.w	sl, [sp, #24]
   84916:	f8dd b008 	ldr.w	fp, [sp, #8]
   8491a:	e005      	b.n	84928 <_vfiprintf_r+0x7e4>
   8491c:	1c88      	adds	r0, r1, #2
   8491e:	3608      	adds	r6, #8
   84920:	4619      	mov	r1, r3
   84922:	3c10      	subs	r4, #16
   84924:	2c10      	cmp	r4, #16
   84926:	dd10      	ble.n	8494a <_vfiprintf_r+0x806>
   84928:	1c4b      	adds	r3, r1, #1
   8492a:	3210      	adds	r2, #16
   8492c:	2b07      	cmp	r3, #7
   8492e:	9215      	str	r2, [sp, #84]	; 0x54
   84930:	e886 00a0 	stmia.w	r6, {r5, r7}
   84934:	9314      	str	r3, [sp, #80]	; 0x50
   84936:	ddf1      	ble.n	8491c <_vfiprintf_r+0x7d8>
   84938:	2a00      	cmp	r2, #0
   8493a:	d17d      	bne.n	84a38 <_vfiprintf_r+0x8f4>
   8493c:	3c10      	subs	r4, #16
   8493e:	2c10      	cmp	r4, #16
   84940:	f04f 0001 	mov.w	r0, #1
   84944:	4611      	mov	r1, r2
   84946:	464e      	mov	r6, r9
   84948:	dcee      	bgt.n	84928 <_vfiprintf_r+0x7e4>
   8494a:	4422      	add	r2, r4
   8494c:	2807      	cmp	r0, #7
   8494e:	9215      	str	r2, [sp, #84]	; 0x54
   84950:	6035      	str	r5, [r6, #0]
   84952:	6074      	str	r4, [r6, #4]
   84954:	9014      	str	r0, [sp, #80]	; 0x50
   84956:	dd59      	ble.n	84a0c <_vfiprintf_r+0x8c8>
   84958:	2a00      	cmp	r2, #0
   8495a:	d14f      	bne.n	849fc <_vfiprintf_r+0x8b8>
   8495c:	9c09      	ldr	r4, [sp, #36]	; 0x24
   8495e:	f8dd b00c 	ldr.w	fp, [sp, #12]
   84962:	9d04      	ldr	r5, [sp, #16]
   84964:	45ab      	cmp	fp, r5
   84966:	bfac      	ite	ge
   84968:	445c      	addge	r4, fp
   8496a:	1964      	addlt	r4, r4, r5
   8496c:	9409      	str	r4, [sp, #36]	; 0x24
   8496e:	e05e      	b.n	84a2e <_vfiprintf_r+0x8ea>
   84970:	4620      	mov	r0, r4
   84972:	9902      	ldr	r1, [sp, #8]
   84974:	aa13      	add	r2, sp, #76	; 0x4c
   84976:	f7ff fba9 	bl	840cc <__sprint_r.part.0>
   8497a:	2800      	cmp	r0, #0
   8497c:	d135      	bne.n	849ea <_vfiprintf_r+0x8a6>
   8497e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   84980:	9a15      	ldr	r2, [sp, #84]	; 0x54
   84982:	f103 0c01 	add.w	ip, r3, #1
   84986:	4648      	mov	r0, r9
   84988:	e781      	b.n	8488e <_vfiprintf_r+0x74a>
   8498a:	08e0      	lsrs	r0, r4, #3
   8498c:	ea40 7045 	orr.w	r0, r0, r5, lsl #29
   84990:	f004 0207 	and.w	r2, r4, #7
   84994:	08e9      	lsrs	r1, r5, #3
   84996:	3230      	adds	r2, #48	; 0x30
   84998:	ea50 0b01 	orrs.w	fp, r0, r1
   8499c:	461f      	mov	r7, r3
   8499e:	701a      	strb	r2, [r3, #0]
   849a0:	4604      	mov	r4, r0
   849a2:	460d      	mov	r5, r1
   849a4:	f103 33ff 	add.w	r3, r3, #4294967295
   849a8:	d1ef      	bne.n	8498a <_vfiprintf_r+0x846>
   849aa:	f01a 0f01 	tst.w	sl, #1
   849ae:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   849b2:	4639      	mov	r1, r7
   849b4:	f000 80b9 	beq.w	84b2a <_vfiprintf_r+0x9e6>
   849b8:	2a30      	cmp	r2, #48	; 0x30
   849ba:	f43f acf4 	beq.w	843a6 <_vfiprintf_r+0x262>
   849be:	461f      	mov	r7, r3
   849c0:	ebc7 0509 	rsb	r5, r7, r9
   849c4:	2330      	movs	r3, #48	; 0x30
   849c6:	9505      	str	r5, [sp, #20]
   849c8:	f801 3c01 	strb.w	r3, [r1, #-1]
   849cc:	e4ee      	b.n	843ac <_vfiprintf_r+0x268>
   849ce:	bf00      	nop
   849d0:	00086c5c 	.word	0x00086c5c
   849d4:	00086c78 	.word	0x00086c78
   849d8:	00086c88 	.word	0x00086c88
   849dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
   849de:	b123      	cbz	r3, 849ea <_vfiprintf_r+0x8a6>
   849e0:	9806      	ldr	r0, [sp, #24]
   849e2:	9902      	ldr	r1, [sp, #8]
   849e4:	aa13      	add	r2, sp, #76	; 0x4c
   849e6:	f7ff fb71 	bl	840cc <__sprint_r.part.0>
   849ea:	9c02      	ldr	r4, [sp, #8]
   849ec:	89a3      	ldrh	r3, [r4, #12]
   849ee:	065b      	lsls	r3, r3, #25
   849f0:	f53f ac98 	bmi.w	84324 <_vfiprintf_r+0x1e0>
   849f4:	9809      	ldr	r0, [sp, #36]	; 0x24
   849f6:	b031      	add	sp, #196	; 0xc4
   849f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   849fc:	9806      	ldr	r0, [sp, #24]
   849fe:	9902      	ldr	r1, [sp, #8]
   84a00:	aa13      	add	r2, sp, #76	; 0x4c
   84a02:	f7ff fb63 	bl	840cc <__sprint_r.part.0>
   84a06:	2800      	cmp	r0, #0
   84a08:	d1ef      	bne.n	849ea <_vfiprintf_r+0x8a6>
   84a0a:	9a15      	ldr	r2, [sp, #84]	; 0x54
   84a0c:	9c09      	ldr	r4, [sp, #36]	; 0x24
   84a0e:	f8dd b00c 	ldr.w	fp, [sp, #12]
   84a12:	9d04      	ldr	r5, [sp, #16]
   84a14:	45ab      	cmp	fp, r5
   84a16:	bfac      	ite	ge
   84a18:	445c      	addge	r4, fp
   84a1a:	1964      	addlt	r4, r4, r5
   84a1c:	9409      	str	r4, [sp, #36]	; 0x24
   84a1e:	b132      	cbz	r2, 84a2e <_vfiprintf_r+0x8ea>
   84a20:	9806      	ldr	r0, [sp, #24]
   84a22:	9902      	ldr	r1, [sp, #8]
   84a24:	aa13      	add	r2, sp, #76	; 0x4c
   84a26:	f7ff fb51 	bl	840cc <__sprint_r.part.0>
   84a2a:	2800      	cmp	r0, #0
   84a2c:	d1dd      	bne.n	849ea <_vfiprintf_r+0x8a6>
   84a2e:	2000      	movs	r0, #0
   84a30:	9014      	str	r0, [sp, #80]	; 0x50
   84a32:	464e      	mov	r6, r9
   84a34:	f7ff bbb9 	b.w	841aa <_vfiprintf_r+0x66>
   84a38:	4650      	mov	r0, sl
   84a3a:	4659      	mov	r1, fp
   84a3c:	aa13      	add	r2, sp, #76	; 0x4c
   84a3e:	f7ff fb45 	bl	840cc <__sprint_r.part.0>
   84a42:	2800      	cmp	r0, #0
   84a44:	d1d1      	bne.n	849ea <_vfiprintf_r+0x8a6>
   84a46:	9914      	ldr	r1, [sp, #80]	; 0x50
   84a48:	9a15      	ldr	r2, [sp, #84]	; 0x54
   84a4a:	1c48      	adds	r0, r1, #1
   84a4c:	464e      	mov	r6, r9
   84a4e:	e768      	b.n	84922 <_vfiprintf_r+0x7de>
   84a50:	2a00      	cmp	r2, #0
   84a52:	f040 80f7 	bne.w	84c44 <_vfiprintf_r+0xb00>
   84a56:	9c05      	ldr	r4, [sp, #20]
   84a58:	2301      	movs	r3, #1
   84a5a:	9720      	str	r7, [sp, #128]	; 0x80
   84a5c:	9421      	str	r4, [sp, #132]	; 0x84
   84a5e:	9415      	str	r4, [sp, #84]	; 0x54
   84a60:	4622      	mov	r2, r4
   84a62:	9314      	str	r3, [sp, #80]	; 0x50
   84a64:	464e      	mov	r6, r9
   84a66:	3608      	adds	r6, #8
   84a68:	e741      	b.n	848ee <_vfiprintf_r+0x7aa>
   84a6a:	9d04      	ldr	r5, [sp, #16]
   84a6c:	f8dd b00c 	ldr.w	fp, [sp, #12]
   84a70:	ebcb 0405 	rsb	r4, fp, r5
   84a74:	2c00      	cmp	r4, #0
   84a76:	f77f aef7 	ble.w	84868 <_vfiprintf_r+0x724>
   84a7a:	2c10      	cmp	r4, #16
   84a7c:	4da6      	ldr	r5, [pc, #664]	; (84d18 <_vfiprintf_r+0xbd4>)
   84a7e:	f340 8170 	ble.w	84d62 <_vfiprintf_r+0xc1e>
   84a82:	4629      	mov	r1, r5
   84a84:	f04f 0b10 	mov.w	fp, #16
   84a88:	4625      	mov	r5, r4
   84a8a:	4664      	mov	r4, ip
   84a8c:	46b4      	mov	ip, r6
   84a8e:	460e      	mov	r6, r1
   84a90:	e006      	b.n	84aa0 <_vfiprintf_r+0x95c>
   84a92:	1c98      	adds	r0, r3, #2
   84a94:	f10c 0c08 	add.w	ip, ip, #8
   84a98:	460b      	mov	r3, r1
   84a9a:	3d10      	subs	r5, #16
   84a9c:	2d10      	cmp	r5, #16
   84a9e:	dd0f      	ble.n	84ac0 <_vfiprintf_r+0x97c>
   84aa0:	1c59      	adds	r1, r3, #1
   84aa2:	3210      	adds	r2, #16
   84aa4:	2907      	cmp	r1, #7
   84aa6:	9215      	str	r2, [sp, #84]	; 0x54
   84aa8:	e88c 0840 	stmia.w	ip, {r6, fp}
   84aac:	9114      	str	r1, [sp, #80]	; 0x50
   84aae:	ddf0      	ble.n	84a92 <_vfiprintf_r+0x94e>
   84ab0:	b9ba      	cbnz	r2, 84ae2 <_vfiprintf_r+0x99e>
   84ab2:	3d10      	subs	r5, #16
   84ab4:	2d10      	cmp	r5, #16
   84ab6:	f04f 0001 	mov.w	r0, #1
   84aba:	4613      	mov	r3, r2
   84abc:	46cc      	mov	ip, r9
   84abe:	dcef      	bgt.n	84aa0 <_vfiprintf_r+0x95c>
   84ac0:	4633      	mov	r3, r6
   84ac2:	4666      	mov	r6, ip
   84ac4:	46a4      	mov	ip, r4
   84ac6:	462c      	mov	r4, r5
   84ac8:	461d      	mov	r5, r3
   84aca:	4422      	add	r2, r4
   84acc:	2807      	cmp	r0, #7
   84ace:	9215      	str	r2, [sp, #84]	; 0x54
   84ad0:	6035      	str	r5, [r6, #0]
   84ad2:	6074      	str	r4, [r6, #4]
   84ad4:	9014      	str	r0, [sp, #80]	; 0x50
   84ad6:	f300 80af 	bgt.w	84c38 <_vfiprintf_r+0xaf4>
   84ada:	3608      	adds	r6, #8
   84adc:	1c41      	adds	r1, r0, #1
   84ade:	4603      	mov	r3, r0
   84ae0:	e6c2      	b.n	84868 <_vfiprintf_r+0x724>
   84ae2:	9806      	ldr	r0, [sp, #24]
   84ae4:	9902      	ldr	r1, [sp, #8]
   84ae6:	aa13      	add	r2, sp, #76	; 0x4c
   84ae8:	f7ff faf0 	bl	840cc <__sprint_r.part.0>
   84aec:	2800      	cmp	r0, #0
   84aee:	f47f af7c 	bne.w	849ea <_vfiprintf_r+0x8a6>
   84af2:	9b14      	ldr	r3, [sp, #80]	; 0x50
   84af4:	9a15      	ldr	r2, [sp, #84]	; 0x54
   84af6:	1c58      	adds	r0, r3, #1
   84af8:	46cc      	mov	ip, r9
   84afa:	e7ce      	b.n	84a9a <_vfiprintf_r+0x956>
   84afc:	2a00      	cmp	r2, #0
   84afe:	d179      	bne.n	84bf4 <_vfiprintf_r+0xab0>
   84b00:	4619      	mov	r1, r3
   84b02:	464e      	mov	r6, r9
   84b04:	4613      	mov	r3, r2
   84b06:	e69c      	b.n	84842 <_vfiprintf_r+0x6fe>
   84b08:	2a00      	cmp	r2, #0
   84b0a:	f040 8084 	bne.w	84c16 <_vfiprintf_r+0xad2>
   84b0e:	2101      	movs	r1, #1
   84b10:	4613      	mov	r3, r2
   84b12:	464e      	mov	r6, r9
   84b14:	e6a4      	b.n	84860 <_vfiprintf_r+0x71c>
   84b16:	464f      	mov	r7, r9
   84b18:	e448      	b.n	843ac <_vfiprintf_r+0x268>
   84b1a:	2d00      	cmp	r5, #0
   84b1c:	bf08      	it	eq
   84b1e:	2c0a      	cmpeq	r4, #10
   84b20:	d246      	bcs.n	84bb0 <_vfiprintf_r+0xa6c>
   84b22:	3430      	adds	r4, #48	; 0x30
   84b24:	af30      	add	r7, sp, #192	; 0xc0
   84b26:	f807 4d41 	strb.w	r4, [r7, #-65]!
   84b2a:	ebc7 0309 	rsb	r3, r7, r9
   84b2e:	9305      	str	r3, [sp, #20]
   84b30:	e43c      	b.n	843ac <_vfiprintf_r+0x268>
   84b32:	2302      	movs	r3, #2
   84b34:	e417      	b.n	84366 <_vfiprintf_r+0x222>
   84b36:	2a00      	cmp	r2, #0
   84b38:	f040 80af 	bne.w	84c9a <_vfiprintf_r+0xb56>
   84b3c:	4613      	mov	r3, r2
   84b3e:	2101      	movs	r1, #1
   84b40:	464e      	mov	r6, r9
   84b42:	e66d      	b.n	84820 <_vfiprintf_r+0x6dc>
   84b44:	4644      	mov	r4, r8
   84b46:	f7ff bb58 	b.w	841fa <_vfiprintf_r+0xb6>
   84b4a:	9806      	ldr	r0, [sp, #24]
   84b4c:	9902      	ldr	r1, [sp, #8]
   84b4e:	aa13      	add	r2, sp, #76	; 0x4c
   84b50:	f7ff fabc 	bl	840cc <__sprint_r.part.0>
   84b54:	2800      	cmp	r0, #0
   84b56:	f47f af48 	bne.w	849ea <_vfiprintf_r+0x8a6>
   84b5a:	9a15      	ldr	r2, [sp, #84]	; 0x54
   84b5c:	464e      	mov	r6, r9
   84b5e:	e6c6      	b.n	848ee <_vfiprintf_r+0x7aa>
   84b60:	9d08      	ldr	r5, [sp, #32]
   84b62:	682c      	ldr	r4, [r5, #0]
   84b64:	3504      	adds	r5, #4
   84b66:	9508      	str	r5, [sp, #32]
   84b68:	2500      	movs	r5, #0
   84b6a:	f7ff bbfc 	b.w	84366 <_vfiprintf_r+0x222>
   84b6e:	9d08      	ldr	r5, [sp, #32]
   84b70:	2301      	movs	r3, #1
   84b72:	682c      	ldr	r4, [r5, #0]
   84b74:	3504      	adds	r5, #4
   84b76:	9508      	str	r5, [sp, #32]
   84b78:	2500      	movs	r5, #0
   84b7a:	f7ff bbf4 	b.w	84366 <_vfiprintf_r+0x222>
   84b7e:	9d08      	ldr	r5, [sp, #32]
   84b80:	682c      	ldr	r4, [r5, #0]
   84b82:	3504      	adds	r5, #4
   84b84:	9508      	str	r5, [sp, #32]
   84b86:	2500      	movs	r5, #0
   84b88:	e525      	b.n	845d6 <_vfiprintf_r+0x492>
   84b8a:	9d08      	ldr	r5, [sp, #32]
   84b8c:	682c      	ldr	r4, [r5, #0]
   84b8e:	3504      	adds	r5, #4
   84b90:	9508      	str	r5, [sp, #32]
   84b92:	17e5      	asrs	r5, r4, #31
   84b94:	4622      	mov	r2, r4
   84b96:	462b      	mov	r3, r5
   84b98:	e48e      	b.n	844b8 <_vfiprintf_r+0x374>
   84b9a:	9806      	ldr	r0, [sp, #24]
   84b9c:	9902      	ldr	r1, [sp, #8]
   84b9e:	aa13      	add	r2, sp, #76	; 0x4c
   84ba0:	f7ff fa94 	bl	840cc <__sprint_r.part.0>
   84ba4:	2800      	cmp	r0, #0
   84ba6:	f47f af20 	bne.w	849ea <_vfiprintf_r+0x8a6>
   84baa:	464e      	mov	r6, r9
   84bac:	f7ff bb9a 	b.w	842e4 <_vfiprintf_r+0x1a0>
   84bb0:	f10d 0b7f 	add.w	fp, sp, #127	; 0x7f
   84bb4:	9603      	str	r6, [sp, #12]
   84bb6:	465e      	mov	r6, fp
   84bb8:	46e3      	mov	fp, ip
   84bba:	4620      	mov	r0, r4
   84bbc:	4629      	mov	r1, r5
   84bbe:	220a      	movs	r2, #10
   84bc0:	2300      	movs	r3, #0
   84bc2:	f7fe fd85 	bl	836d0 <__aeabi_uldivmod>
   84bc6:	3230      	adds	r2, #48	; 0x30
   84bc8:	7032      	strb	r2, [r6, #0]
   84bca:	4620      	mov	r0, r4
   84bcc:	4629      	mov	r1, r5
   84bce:	220a      	movs	r2, #10
   84bd0:	2300      	movs	r3, #0
   84bd2:	f7fe fd7d 	bl	836d0 <__aeabi_uldivmod>
   84bd6:	4604      	mov	r4, r0
   84bd8:	460d      	mov	r5, r1
   84bda:	ea54 0005 	orrs.w	r0, r4, r5
   84bde:	4637      	mov	r7, r6
   84be0:	f106 36ff 	add.w	r6, r6, #4294967295
   84be4:	d1e9      	bne.n	84bba <_vfiprintf_r+0xa76>
   84be6:	ebc7 0309 	rsb	r3, r7, r9
   84bea:	46dc      	mov	ip, fp
   84bec:	9e03      	ldr	r6, [sp, #12]
   84bee:	9305      	str	r3, [sp, #20]
   84bf0:	f7ff bbdc 	b.w	843ac <_vfiprintf_r+0x268>
   84bf4:	9806      	ldr	r0, [sp, #24]
   84bf6:	9902      	ldr	r1, [sp, #8]
   84bf8:	aa13      	add	r2, sp, #76	; 0x4c
   84bfa:	f8cd c004 	str.w	ip, [sp, #4]
   84bfe:	f7ff fa65 	bl	840cc <__sprint_r.part.0>
   84c02:	f8dd c004 	ldr.w	ip, [sp, #4]
   84c06:	2800      	cmp	r0, #0
   84c08:	f47f aeef 	bne.w	849ea <_vfiprintf_r+0x8a6>
   84c0c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   84c0e:	9a15      	ldr	r2, [sp, #84]	; 0x54
   84c10:	1c59      	adds	r1, r3, #1
   84c12:	464e      	mov	r6, r9
   84c14:	e615      	b.n	84842 <_vfiprintf_r+0x6fe>
   84c16:	9806      	ldr	r0, [sp, #24]
   84c18:	9902      	ldr	r1, [sp, #8]
   84c1a:	aa13      	add	r2, sp, #76	; 0x4c
   84c1c:	f8cd c004 	str.w	ip, [sp, #4]
   84c20:	f7ff fa54 	bl	840cc <__sprint_r.part.0>
   84c24:	f8dd c004 	ldr.w	ip, [sp, #4]
   84c28:	2800      	cmp	r0, #0
   84c2a:	f47f aede 	bne.w	849ea <_vfiprintf_r+0x8a6>
   84c2e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   84c30:	9a15      	ldr	r2, [sp, #84]	; 0x54
   84c32:	1c59      	adds	r1, r3, #1
   84c34:	464e      	mov	r6, r9
   84c36:	e613      	b.n	84860 <_vfiprintf_r+0x71c>
   84c38:	2a00      	cmp	r2, #0
   84c3a:	d156      	bne.n	84cea <_vfiprintf_r+0xba6>
   84c3c:	2101      	movs	r1, #1
   84c3e:	4613      	mov	r3, r2
   84c40:	464e      	mov	r6, r9
   84c42:	e611      	b.n	84868 <_vfiprintf_r+0x724>
   84c44:	9806      	ldr	r0, [sp, #24]
   84c46:	9902      	ldr	r1, [sp, #8]
   84c48:	aa13      	add	r2, sp, #76	; 0x4c
   84c4a:	f7ff fa3f 	bl	840cc <__sprint_r.part.0>
   84c4e:	2800      	cmp	r0, #0
   84c50:	f47f aecb 	bne.w	849ea <_vfiprintf_r+0x8a6>
   84c54:	9914      	ldr	r1, [sp, #80]	; 0x50
   84c56:	9a15      	ldr	r2, [sp, #84]	; 0x54
   84c58:	3101      	adds	r1, #1
   84c5a:	464e      	mov	r6, r9
   84c5c:	e639      	b.n	848d2 <_vfiprintf_r+0x78e>
   84c5e:	f04f 0b2d 	mov.w	fp, #45	; 0x2d
   84c62:	4264      	negs	r4, r4
   84c64:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   84c68:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
   84c6c:	f8cd b01c 	str.w	fp, [sp, #28]
   84c70:	f8cd c014 	str.w	ip, [sp, #20]
   84c74:	2301      	movs	r3, #1
   84c76:	f7ff bb7e 	b.w	84376 <_vfiprintf_r+0x232>
   84c7a:	f01a 0f10 	tst.w	sl, #16
   84c7e:	d11d      	bne.n	84cbc <_vfiprintf_r+0xb78>
   84c80:	f01a 0f40 	tst.w	sl, #64	; 0x40
   84c84:	d058      	beq.n	84d38 <_vfiprintf_r+0xbf4>
   84c86:	9d08      	ldr	r5, [sp, #32]
   84c88:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
   84c8c:	682b      	ldr	r3, [r5, #0]
   84c8e:	3504      	adds	r5, #4
   84c90:	9508      	str	r5, [sp, #32]
   84c92:	f8a3 b000 	strh.w	fp, [r3]
   84c96:	f7ff ba88 	b.w	841aa <_vfiprintf_r+0x66>
   84c9a:	9806      	ldr	r0, [sp, #24]
   84c9c:	9902      	ldr	r1, [sp, #8]
   84c9e:	aa13      	add	r2, sp, #76	; 0x4c
   84ca0:	f8cd c004 	str.w	ip, [sp, #4]
   84ca4:	f7ff fa12 	bl	840cc <__sprint_r.part.0>
   84ca8:	f8dd c004 	ldr.w	ip, [sp, #4]
   84cac:	2800      	cmp	r0, #0
   84cae:	f47f ae9c 	bne.w	849ea <_vfiprintf_r+0x8a6>
   84cb2:	9b14      	ldr	r3, [sp, #80]	; 0x50
   84cb4:	9a15      	ldr	r2, [sp, #84]	; 0x54
   84cb6:	1c59      	adds	r1, r3, #1
   84cb8:	464e      	mov	r6, r9
   84cba:	e5b1      	b.n	84820 <_vfiprintf_r+0x6dc>
   84cbc:	f8dd b020 	ldr.w	fp, [sp, #32]
   84cc0:	9c09      	ldr	r4, [sp, #36]	; 0x24
   84cc2:	f8db 3000 	ldr.w	r3, [fp]
   84cc6:	f10b 0b04 	add.w	fp, fp, #4
   84cca:	f8cd b020 	str.w	fp, [sp, #32]
   84cce:	601c      	str	r4, [r3, #0]
   84cd0:	f7ff ba6b 	b.w	841aa <_vfiprintf_r+0x66>
   84cd4:	9408      	str	r4, [sp, #32]
   84cd6:	f7ff f997 	bl	84008 <strlen>
   84cda:	f89d 4047 	ldrb.w	r4, [sp, #71]	; 0x47
   84cde:	9005      	str	r0, [sp, #20]
   84ce0:	9407      	str	r4, [sp, #28]
   84ce2:	f04f 0c00 	mov.w	ip, #0
   84ce6:	f7ff bb61 	b.w	843ac <_vfiprintf_r+0x268>
   84cea:	9806      	ldr	r0, [sp, #24]
   84cec:	9902      	ldr	r1, [sp, #8]
   84cee:	aa13      	add	r2, sp, #76	; 0x4c
   84cf0:	f8cd c004 	str.w	ip, [sp, #4]
   84cf4:	f7ff f9ea 	bl	840cc <__sprint_r.part.0>
   84cf8:	f8dd c004 	ldr.w	ip, [sp, #4]
   84cfc:	2800      	cmp	r0, #0
   84cfe:	f47f ae74 	bne.w	849ea <_vfiprintf_r+0x8a6>
   84d02:	9b14      	ldr	r3, [sp, #80]	; 0x50
   84d04:	9a15      	ldr	r2, [sp, #84]	; 0x54
   84d06:	1c59      	adds	r1, r3, #1
   84d08:	464e      	mov	r6, r9
   84d0a:	e5ad      	b.n	84868 <_vfiprintf_r+0x724>
   84d0c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   84d0e:	9a15      	ldr	r2, [sp, #84]	; 0x54
   84d10:	3301      	adds	r3, #1
   84d12:	4d02      	ldr	r5, [pc, #8]	; (84d1c <_vfiprintf_r+0xbd8>)
   84d14:	f7ff bb9a 	b.w	8444c <_vfiprintf_r+0x308>
   84d18:	00086c78 	.word	0x00086c78
   84d1c:	00086c88 	.word	0x00086c88
   84d20:	f1bc 0f06 	cmp.w	ip, #6
   84d24:	bf34      	ite	cc
   84d26:	4663      	movcc	r3, ip
   84d28:	2306      	movcs	r3, #6
   84d2a:	9408      	str	r4, [sp, #32]
   84d2c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
   84d30:	9305      	str	r3, [sp, #20]
   84d32:	9403      	str	r4, [sp, #12]
   84d34:	4f16      	ldr	r7, [pc, #88]	; (84d90 <_vfiprintf_r+0xc4c>)
   84d36:	e472      	b.n	8461e <_vfiprintf_r+0x4da>
   84d38:	9c08      	ldr	r4, [sp, #32]
   84d3a:	9d09      	ldr	r5, [sp, #36]	; 0x24
   84d3c:	6823      	ldr	r3, [r4, #0]
   84d3e:	3404      	adds	r4, #4
   84d40:	9408      	str	r4, [sp, #32]
   84d42:	601d      	str	r5, [r3, #0]
   84d44:	f7ff ba31 	b.w	841aa <_vfiprintf_r+0x66>
   84d48:	9814      	ldr	r0, [sp, #80]	; 0x50
   84d4a:	4d12      	ldr	r5, [pc, #72]	; (84d94 <_vfiprintf_r+0xc50>)
   84d4c:	3001      	adds	r0, #1
   84d4e:	e5fc      	b.n	8494a <_vfiprintf_r+0x806>
   84d50:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
   84d54:	f8cd c014 	str.w	ip, [sp, #20]
   84d58:	9507      	str	r5, [sp, #28]
   84d5a:	9408      	str	r4, [sp, #32]
   84d5c:	4684      	mov	ip, r0
   84d5e:	f7ff bb25 	b.w	843ac <_vfiprintf_r+0x268>
   84d62:	4608      	mov	r0, r1
   84d64:	e6b1      	b.n	84aca <_vfiprintf_r+0x986>
   84d66:	46a0      	mov	r8, r4
   84d68:	2500      	movs	r5, #0
   84d6a:	f7ff ba5a 	b.w	84222 <_vfiprintf_r+0xde>
   84d6e:	f8dd b020 	ldr.w	fp, [sp, #32]
   84d72:	f898 3001 	ldrb.w	r3, [r8, #1]
   84d76:	f8db 5000 	ldr.w	r5, [fp]
   84d7a:	f10b 0204 	add.w	r2, fp, #4
   84d7e:	2d00      	cmp	r5, #0
   84d80:	9208      	str	r2, [sp, #32]
   84d82:	46a0      	mov	r8, r4
   84d84:	f6bf aa4b 	bge.w	8421e <_vfiprintf_r+0xda>
   84d88:	f04f 35ff 	mov.w	r5, #4294967295
   84d8c:	f7ff ba47 	b.w	8421e <_vfiprintf_r+0xda>
   84d90:	00086c70 	.word	0x00086c70
   84d94:	00086c88 	.word	0x00086c88

00084d98 <__sbprintf>:
   84d98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   84d9c:	6e4f      	ldr	r7, [r1, #100]	; 0x64
   84d9e:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   84da2:	4688      	mov	r8, r1
   84da4:	9719      	str	r7, [sp, #100]	; 0x64
   84da6:	f8d8 701c 	ldr.w	r7, [r8, #28]
   84daa:	f8b1 a00c 	ldrh.w	sl, [r1, #12]
   84dae:	f8b1 900e 	ldrh.w	r9, [r1, #14]
   84db2:	9707      	str	r7, [sp, #28]
   84db4:	f8d8 7024 	ldr.w	r7, [r8, #36]	; 0x24
   84db8:	ac1a      	add	r4, sp, #104	; 0x68
   84dba:	f44f 6580 	mov.w	r5, #1024	; 0x400
   84dbe:	f02a 0a02 	bic.w	sl, sl, #2
   84dc2:	2600      	movs	r6, #0
   84dc4:	4669      	mov	r1, sp
   84dc6:	9400      	str	r4, [sp, #0]
   84dc8:	9404      	str	r4, [sp, #16]
   84dca:	9502      	str	r5, [sp, #8]
   84dcc:	9505      	str	r5, [sp, #20]
   84dce:	f8ad a00c 	strh.w	sl, [sp, #12]
   84dd2:	f8ad 900e 	strh.w	r9, [sp, #14]
   84dd6:	9709      	str	r7, [sp, #36]	; 0x24
   84dd8:	9606      	str	r6, [sp, #24]
   84dda:	4605      	mov	r5, r0
   84ddc:	f7ff f9b2 	bl	84144 <_vfiprintf_r>
   84de0:	1e04      	subs	r4, r0, #0
   84de2:	db07      	blt.n	84df4 <__sbprintf+0x5c>
   84de4:	4628      	mov	r0, r5
   84de6:	4669      	mov	r1, sp
   84de8:	f000 f92a 	bl	85040 <_fflush_r>
   84dec:	42b0      	cmp	r0, r6
   84dee:	bf18      	it	ne
   84df0:	f04f 34ff 	movne.w	r4, #4294967295
   84df4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   84df8:	065b      	lsls	r3, r3, #25
   84dfa:	d505      	bpl.n	84e08 <__sbprintf+0x70>
   84dfc:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   84e00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   84e04:	f8a8 300c 	strh.w	r3, [r8, #12]
   84e08:	4620      	mov	r0, r4
   84e0a:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   84e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   84e12:	bf00      	nop

00084e14 <__swsetup_r>:
   84e14:	4b2f      	ldr	r3, [pc, #188]	; (84ed4 <__swsetup_r+0xc0>)
   84e16:	b570      	push	{r4, r5, r6, lr}
   84e18:	4606      	mov	r6, r0
   84e1a:	6818      	ldr	r0, [r3, #0]
   84e1c:	460c      	mov	r4, r1
   84e1e:	b110      	cbz	r0, 84e26 <__swsetup_r+0x12>
   84e20:	6b82      	ldr	r2, [r0, #56]	; 0x38
   84e22:	2a00      	cmp	r2, #0
   84e24:	d036      	beq.n	84e94 <__swsetup_r+0x80>
   84e26:	89a5      	ldrh	r5, [r4, #12]
   84e28:	b2ab      	uxth	r3, r5
   84e2a:	0719      	lsls	r1, r3, #28
   84e2c:	d50c      	bpl.n	84e48 <__swsetup_r+0x34>
   84e2e:	6922      	ldr	r2, [r4, #16]
   84e30:	b1aa      	cbz	r2, 84e5e <__swsetup_r+0x4a>
   84e32:	f013 0101 	ands.w	r1, r3, #1
   84e36:	d01e      	beq.n	84e76 <__swsetup_r+0x62>
   84e38:	6963      	ldr	r3, [r4, #20]
   84e3a:	2100      	movs	r1, #0
   84e3c:	425b      	negs	r3, r3
   84e3e:	61a3      	str	r3, [r4, #24]
   84e40:	60a1      	str	r1, [r4, #8]
   84e42:	b1f2      	cbz	r2, 84e82 <__swsetup_r+0x6e>
   84e44:	2000      	movs	r0, #0
   84e46:	bd70      	pop	{r4, r5, r6, pc}
   84e48:	06da      	lsls	r2, r3, #27
   84e4a:	d53a      	bpl.n	84ec2 <__swsetup_r+0xae>
   84e4c:	075b      	lsls	r3, r3, #29
   84e4e:	d424      	bmi.n	84e9a <__swsetup_r+0x86>
   84e50:	6922      	ldr	r2, [r4, #16]
   84e52:	f045 0308 	orr.w	r3, r5, #8
   84e56:	81a3      	strh	r3, [r4, #12]
   84e58:	b29b      	uxth	r3, r3
   84e5a:	2a00      	cmp	r2, #0
   84e5c:	d1e9      	bne.n	84e32 <__swsetup_r+0x1e>
   84e5e:	f403 7120 	and.w	r1, r3, #640	; 0x280
   84e62:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   84e66:	d0e4      	beq.n	84e32 <__swsetup_r+0x1e>
   84e68:	4630      	mov	r0, r6
   84e6a:	4621      	mov	r1, r4
   84e6c:	f000 fcce 	bl	8580c <__smakebuf_r>
   84e70:	89a3      	ldrh	r3, [r4, #12]
   84e72:	6922      	ldr	r2, [r4, #16]
   84e74:	e7dd      	b.n	84e32 <__swsetup_r+0x1e>
   84e76:	0798      	lsls	r0, r3, #30
   84e78:	bf58      	it	pl
   84e7a:	6961      	ldrpl	r1, [r4, #20]
   84e7c:	60a1      	str	r1, [r4, #8]
   84e7e:	2a00      	cmp	r2, #0
   84e80:	d1e0      	bne.n	84e44 <__swsetup_r+0x30>
   84e82:	89a3      	ldrh	r3, [r4, #12]
   84e84:	061a      	lsls	r2, r3, #24
   84e86:	d5dd      	bpl.n	84e44 <__swsetup_r+0x30>
   84e88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   84e8c:	81a3      	strh	r3, [r4, #12]
   84e8e:	f04f 30ff 	mov.w	r0, #4294967295
   84e92:	bd70      	pop	{r4, r5, r6, pc}
   84e94:	f000 f8f0 	bl	85078 <__sinit>
   84e98:	e7c5      	b.n	84e26 <__swsetup_r+0x12>
   84e9a:	6b21      	ldr	r1, [r4, #48]	; 0x30
   84e9c:	b149      	cbz	r1, 84eb2 <__swsetup_r+0x9e>
   84e9e:	f104 0340 	add.w	r3, r4, #64	; 0x40
   84ea2:	4299      	cmp	r1, r3
   84ea4:	d003      	beq.n	84eae <__swsetup_r+0x9a>
   84ea6:	4630      	mov	r0, r6
   84ea8:	f000 fa2a 	bl	85300 <_free_r>
   84eac:	89a5      	ldrh	r5, [r4, #12]
   84eae:	2300      	movs	r3, #0
   84eb0:	6323      	str	r3, [r4, #48]	; 0x30
   84eb2:	6922      	ldr	r2, [r4, #16]
   84eb4:	f025 0524 	bic.w	r5, r5, #36	; 0x24
   84eb8:	2100      	movs	r1, #0
   84eba:	b2ad      	uxth	r5, r5
   84ebc:	6022      	str	r2, [r4, #0]
   84ebe:	6061      	str	r1, [r4, #4]
   84ec0:	e7c7      	b.n	84e52 <__swsetup_r+0x3e>
   84ec2:	f045 0540 	orr.w	r5, r5, #64	; 0x40
   84ec6:	2309      	movs	r3, #9
   84ec8:	6033      	str	r3, [r6, #0]
   84eca:	f04f 30ff 	mov.w	r0, #4294967295
   84ece:	81a5      	strh	r5, [r4, #12]
   84ed0:	bd70      	pop	{r4, r5, r6, pc}
   84ed2:	bf00      	nop
   84ed4:	20070648 	.word	0x20070648

00084ed8 <register_fini>:
   84ed8:	4b02      	ldr	r3, [pc, #8]	; (84ee4 <register_fini+0xc>)
   84eda:	b113      	cbz	r3, 84ee2 <register_fini+0xa>
   84edc:	4802      	ldr	r0, [pc, #8]	; (84ee8 <register_fini+0x10>)
   84ede:	f000 b805 	b.w	84eec <atexit>
   84ee2:	4770      	bx	lr
   84ee4:	00000000 	.word	0x00000000
   84ee8:	00085175 	.word	0x00085175

00084eec <atexit>:
   84eec:	4601      	mov	r1, r0
   84eee:	2000      	movs	r0, #0
   84ef0:	4602      	mov	r2, r0
   84ef2:	4603      	mov	r3, r0
   84ef4:	f001 bb24 	b.w	86540 <__register_exitproc>

00084ef8 <__sflush_r>:
   84ef8:	898b      	ldrh	r3, [r1, #12]
   84efa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84efe:	b29a      	uxth	r2, r3
   84f00:	460d      	mov	r5, r1
   84f02:	0711      	lsls	r1, r2, #28
   84f04:	4680      	mov	r8, r0
   84f06:	d43c      	bmi.n	84f82 <__sflush_r+0x8a>
   84f08:	686a      	ldr	r2, [r5, #4]
   84f0a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   84f0e:	2a00      	cmp	r2, #0
   84f10:	81ab      	strh	r3, [r5, #12]
   84f12:	dd59      	ble.n	84fc8 <__sflush_r+0xd0>
   84f14:	6aac      	ldr	r4, [r5, #40]	; 0x28
   84f16:	2c00      	cmp	r4, #0
   84f18:	d04b      	beq.n	84fb2 <__sflush_r+0xba>
   84f1a:	b29b      	uxth	r3, r3
   84f1c:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   84f20:	2100      	movs	r1, #0
   84f22:	b292      	uxth	r2, r2
   84f24:	f8d8 6000 	ldr.w	r6, [r8]
   84f28:	f8c8 1000 	str.w	r1, [r8]
   84f2c:	2a00      	cmp	r2, #0
   84f2e:	d04f      	beq.n	84fd0 <__sflush_r+0xd8>
   84f30:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   84f32:	075f      	lsls	r7, r3, #29
   84f34:	d505      	bpl.n	84f42 <__sflush_r+0x4a>
   84f36:	6869      	ldr	r1, [r5, #4]
   84f38:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   84f3a:	1a52      	subs	r2, r2, r1
   84f3c:	b10b      	cbz	r3, 84f42 <__sflush_r+0x4a>
   84f3e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   84f40:	1ad2      	subs	r2, r2, r3
   84f42:	4640      	mov	r0, r8
   84f44:	69e9      	ldr	r1, [r5, #28]
   84f46:	2300      	movs	r3, #0
   84f48:	47a0      	blx	r4
   84f4a:	1c44      	adds	r4, r0, #1
   84f4c:	d04a      	beq.n	84fe4 <__sflush_r+0xec>
   84f4e:	89ab      	ldrh	r3, [r5, #12]
   84f50:	692a      	ldr	r2, [r5, #16]
   84f52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   84f56:	b29b      	uxth	r3, r3
   84f58:	2100      	movs	r1, #0
   84f5a:	602a      	str	r2, [r5, #0]
   84f5c:	04da      	lsls	r2, r3, #19
   84f5e:	81ab      	strh	r3, [r5, #12]
   84f60:	6069      	str	r1, [r5, #4]
   84f62:	d44c      	bmi.n	84ffe <__sflush_r+0x106>
   84f64:	6b29      	ldr	r1, [r5, #48]	; 0x30
   84f66:	f8c8 6000 	str.w	r6, [r8]
   84f6a:	b311      	cbz	r1, 84fb2 <__sflush_r+0xba>
   84f6c:	f105 0340 	add.w	r3, r5, #64	; 0x40
   84f70:	4299      	cmp	r1, r3
   84f72:	d002      	beq.n	84f7a <__sflush_r+0x82>
   84f74:	4640      	mov	r0, r8
   84f76:	f000 f9c3 	bl	85300 <_free_r>
   84f7a:	2000      	movs	r0, #0
   84f7c:	6328      	str	r0, [r5, #48]	; 0x30
   84f7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84f82:	692e      	ldr	r6, [r5, #16]
   84f84:	b1ae      	cbz	r6, 84fb2 <__sflush_r+0xba>
   84f86:	0791      	lsls	r1, r2, #30
   84f88:	682c      	ldr	r4, [r5, #0]
   84f8a:	bf0c      	ite	eq
   84f8c:	696b      	ldreq	r3, [r5, #20]
   84f8e:	2300      	movne	r3, #0
   84f90:	602e      	str	r6, [r5, #0]
   84f92:	1ba4      	subs	r4, r4, r6
   84f94:	60ab      	str	r3, [r5, #8]
   84f96:	e00a      	b.n	84fae <__sflush_r+0xb6>
   84f98:	4632      	mov	r2, r6
   84f9a:	4623      	mov	r3, r4
   84f9c:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   84f9e:	4640      	mov	r0, r8
   84fa0:	69e9      	ldr	r1, [r5, #28]
   84fa2:	47b8      	blx	r7
   84fa4:	2800      	cmp	r0, #0
   84fa6:	ebc0 0404 	rsb	r4, r0, r4
   84faa:	4406      	add	r6, r0
   84fac:	dd04      	ble.n	84fb8 <__sflush_r+0xc0>
   84fae:	2c00      	cmp	r4, #0
   84fb0:	dcf2      	bgt.n	84f98 <__sflush_r+0xa0>
   84fb2:	2000      	movs	r0, #0
   84fb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84fb8:	89ab      	ldrh	r3, [r5, #12]
   84fba:	f04f 30ff 	mov.w	r0, #4294967295
   84fbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   84fc2:	81ab      	strh	r3, [r5, #12]
   84fc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84fc8:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   84fca:	2a00      	cmp	r2, #0
   84fcc:	dca2      	bgt.n	84f14 <__sflush_r+0x1c>
   84fce:	e7f0      	b.n	84fb2 <__sflush_r+0xba>
   84fd0:	2301      	movs	r3, #1
   84fd2:	4640      	mov	r0, r8
   84fd4:	69e9      	ldr	r1, [r5, #28]
   84fd6:	47a0      	blx	r4
   84fd8:	1c43      	adds	r3, r0, #1
   84fda:	4602      	mov	r2, r0
   84fdc:	d01e      	beq.n	8501c <__sflush_r+0x124>
   84fde:	89ab      	ldrh	r3, [r5, #12]
   84fe0:	6aac      	ldr	r4, [r5, #40]	; 0x28
   84fe2:	e7a6      	b.n	84f32 <__sflush_r+0x3a>
   84fe4:	f8d8 3000 	ldr.w	r3, [r8]
   84fe8:	b95b      	cbnz	r3, 85002 <__sflush_r+0x10a>
   84fea:	89aa      	ldrh	r2, [r5, #12]
   84fec:	6929      	ldr	r1, [r5, #16]
   84fee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   84ff2:	b292      	uxth	r2, r2
   84ff4:	606b      	str	r3, [r5, #4]
   84ff6:	04d3      	lsls	r3, r2, #19
   84ff8:	81aa      	strh	r2, [r5, #12]
   84ffa:	6029      	str	r1, [r5, #0]
   84ffc:	d5b2      	bpl.n	84f64 <__sflush_r+0x6c>
   84ffe:	6528      	str	r0, [r5, #80]	; 0x50
   85000:	e7b0      	b.n	84f64 <__sflush_r+0x6c>
   85002:	2b1d      	cmp	r3, #29
   85004:	d001      	beq.n	8500a <__sflush_r+0x112>
   85006:	2b16      	cmp	r3, #22
   85008:	d113      	bne.n	85032 <__sflush_r+0x13a>
   8500a:	89a9      	ldrh	r1, [r5, #12]
   8500c:	692b      	ldr	r3, [r5, #16]
   8500e:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
   85012:	2200      	movs	r2, #0
   85014:	81a9      	strh	r1, [r5, #12]
   85016:	602b      	str	r3, [r5, #0]
   85018:	606a      	str	r2, [r5, #4]
   8501a:	e7a3      	b.n	84f64 <__sflush_r+0x6c>
   8501c:	f8d8 3000 	ldr.w	r3, [r8]
   85020:	2b00      	cmp	r3, #0
   85022:	d0dc      	beq.n	84fde <__sflush_r+0xe6>
   85024:	2b1d      	cmp	r3, #29
   85026:	d001      	beq.n	8502c <__sflush_r+0x134>
   85028:	2b16      	cmp	r3, #22
   8502a:	d1c5      	bne.n	84fb8 <__sflush_r+0xc0>
   8502c:	f8c8 6000 	str.w	r6, [r8]
   85030:	e7bf      	b.n	84fb2 <__sflush_r+0xba>
   85032:	89ab      	ldrh	r3, [r5, #12]
   85034:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   85038:	81ab      	strh	r3, [r5, #12]
   8503a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8503e:	bf00      	nop

00085040 <_fflush_r>:
   85040:	b510      	push	{r4, lr}
   85042:	4604      	mov	r4, r0
   85044:	b082      	sub	sp, #8
   85046:	b108      	cbz	r0, 8504c <_fflush_r+0xc>
   85048:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8504a:	b153      	cbz	r3, 85062 <_fflush_r+0x22>
   8504c:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   85050:	b908      	cbnz	r0, 85056 <_fflush_r+0x16>
   85052:	b002      	add	sp, #8
   85054:	bd10      	pop	{r4, pc}
   85056:	4620      	mov	r0, r4
   85058:	b002      	add	sp, #8
   8505a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8505e:	f7ff bf4b 	b.w	84ef8 <__sflush_r>
   85062:	9101      	str	r1, [sp, #4]
   85064:	f000 f808 	bl	85078 <__sinit>
   85068:	9901      	ldr	r1, [sp, #4]
   8506a:	e7ef      	b.n	8504c <_fflush_r+0xc>

0008506c <_cleanup_r>:
   8506c:	4901      	ldr	r1, [pc, #4]	; (85074 <_cleanup_r+0x8>)
   8506e:	f000 bb9f 	b.w	857b0 <_fwalk>
   85072:	bf00      	nop
   85074:	0008668d 	.word	0x0008668d

00085078 <__sinit>:
   85078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8507c:	6b84      	ldr	r4, [r0, #56]	; 0x38
   8507e:	b083      	sub	sp, #12
   85080:	4607      	mov	r7, r0
   85082:	2c00      	cmp	r4, #0
   85084:	d165      	bne.n	85152 <__sinit+0xda>
   85086:	687d      	ldr	r5, [r7, #4]
   85088:	4833      	ldr	r0, [pc, #204]	; (85158 <__sinit+0xe0>)
   8508a:	2304      	movs	r3, #4
   8508c:	2103      	movs	r1, #3
   8508e:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   85092:	63f8      	str	r0, [r7, #60]	; 0x3c
   85094:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   85098:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   8509c:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   850a0:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   850a4:	81ab      	strh	r3, [r5, #12]
   850a6:	602c      	str	r4, [r5, #0]
   850a8:	606c      	str	r4, [r5, #4]
   850aa:	60ac      	str	r4, [r5, #8]
   850ac:	666c      	str	r4, [r5, #100]	; 0x64
   850ae:	81ec      	strh	r4, [r5, #14]
   850b0:	612c      	str	r4, [r5, #16]
   850b2:	616c      	str	r4, [r5, #20]
   850b4:	61ac      	str	r4, [r5, #24]
   850b6:	4621      	mov	r1, r4
   850b8:	2208      	movs	r2, #8
   850ba:	f7fe fe9b 	bl	83df4 <memset>
   850be:	f8df b09c 	ldr.w	fp, [pc, #156]	; 8515c <__sinit+0xe4>
   850c2:	68be      	ldr	r6, [r7, #8]
   850c4:	f8df a098 	ldr.w	sl, [pc, #152]	; 85160 <__sinit+0xe8>
   850c8:	f8df 9098 	ldr.w	r9, [pc, #152]	; 85164 <__sinit+0xec>
   850cc:	f8df 8098 	ldr.w	r8, [pc, #152]	; 85168 <__sinit+0xf0>
   850d0:	2301      	movs	r3, #1
   850d2:	2209      	movs	r2, #9
   850d4:	61ed      	str	r5, [r5, #28]
   850d6:	f8c5 b020 	str.w	fp, [r5, #32]
   850da:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   850de:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   850e2:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   850e6:	4621      	mov	r1, r4
   850e8:	81f3      	strh	r3, [r6, #14]
   850ea:	81b2      	strh	r2, [r6, #12]
   850ec:	6034      	str	r4, [r6, #0]
   850ee:	6074      	str	r4, [r6, #4]
   850f0:	60b4      	str	r4, [r6, #8]
   850f2:	6674      	str	r4, [r6, #100]	; 0x64
   850f4:	6134      	str	r4, [r6, #16]
   850f6:	6174      	str	r4, [r6, #20]
   850f8:	61b4      	str	r4, [r6, #24]
   850fa:	2208      	movs	r2, #8
   850fc:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   85100:	9301      	str	r3, [sp, #4]
   85102:	f7fe fe77 	bl	83df4 <memset>
   85106:	68fd      	ldr	r5, [r7, #12]
   85108:	2012      	movs	r0, #18
   8510a:	2202      	movs	r2, #2
   8510c:	61f6      	str	r6, [r6, #28]
   8510e:	f8c6 b020 	str.w	fp, [r6, #32]
   85112:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   85116:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   8511a:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   8511e:	4621      	mov	r1, r4
   85120:	81a8      	strh	r0, [r5, #12]
   85122:	81ea      	strh	r2, [r5, #14]
   85124:	602c      	str	r4, [r5, #0]
   85126:	606c      	str	r4, [r5, #4]
   85128:	60ac      	str	r4, [r5, #8]
   8512a:	666c      	str	r4, [r5, #100]	; 0x64
   8512c:	612c      	str	r4, [r5, #16]
   8512e:	616c      	str	r4, [r5, #20]
   85130:	61ac      	str	r4, [r5, #24]
   85132:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   85136:	2208      	movs	r2, #8
   85138:	f7fe fe5c 	bl	83df4 <memset>
   8513c:	9b01      	ldr	r3, [sp, #4]
   8513e:	61ed      	str	r5, [r5, #28]
   85140:	f8c5 b020 	str.w	fp, [r5, #32]
   85144:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   85148:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   8514c:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   85150:	63bb      	str	r3, [r7, #56]	; 0x38
   85152:	b003      	add	sp, #12
   85154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85158:	0008506d 	.word	0x0008506d
   8515c:	00086381 	.word	0x00086381
   85160:	000863a5 	.word	0x000863a5
   85164:	000863dd 	.word	0x000863dd
   85168:	000863fd 	.word	0x000863fd

0008516c <__sfp_lock_acquire>:
   8516c:	4770      	bx	lr
   8516e:	bf00      	nop

00085170 <__sfp_lock_release>:
   85170:	4770      	bx	lr
   85172:	bf00      	nop

00085174 <__libc_fini_array>:
   85174:	b538      	push	{r3, r4, r5, lr}
   85176:	4d09      	ldr	r5, [pc, #36]	; (8519c <__libc_fini_array+0x28>)
   85178:	4c09      	ldr	r4, [pc, #36]	; (851a0 <__libc_fini_array+0x2c>)
   8517a:	1b64      	subs	r4, r4, r5
   8517c:	10a4      	asrs	r4, r4, #2
   8517e:	bf18      	it	ne
   85180:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
   85184:	d005      	beq.n	85192 <__libc_fini_array+0x1e>
   85186:	3c01      	subs	r4, #1
   85188:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   8518c:	4798      	blx	r3
   8518e:	2c00      	cmp	r4, #0
   85190:	d1f9      	bne.n	85186 <__libc_fini_array+0x12>
   85192:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   85196:	f001 bd89 	b.w	86cac <_fini>
   8519a:	bf00      	nop
   8519c:	00086cb8 	.word	0x00086cb8
   851a0:	00086cbc 	.word	0x00086cbc

000851a4 <_fputwc_r>:
   851a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   851a8:	8993      	ldrh	r3, [r2, #12]
   851aa:	460f      	mov	r7, r1
   851ac:	0499      	lsls	r1, r3, #18
   851ae:	b082      	sub	sp, #8
   851b0:	4614      	mov	r4, r2
   851b2:	4680      	mov	r8, r0
   851b4:	d406      	bmi.n	851c4 <_fputwc_r+0x20>
   851b6:	6e52      	ldr	r2, [r2, #100]	; 0x64
   851b8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   851bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   851c0:	81a3      	strh	r3, [r4, #12]
   851c2:	6662      	str	r2, [r4, #100]	; 0x64
   851c4:	f000 fb1c 	bl	85800 <__locale_mb_cur_max>
   851c8:	2801      	cmp	r0, #1
   851ca:	d03e      	beq.n	8524a <_fputwc_r+0xa6>
   851cc:	463a      	mov	r2, r7
   851ce:	4640      	mov	r0, r8
   851d0:	a901      	add	r1, sp, #4
   851d2:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   851d6:	f001 f969 	bl	864ac <_wcrtomb_r>
   851da:	1c42      	adds	r2, r0, #1
   851dc:	4606      	mov	r6, r0
   851de:	d02d      	beq.n	8523c <_fputwc_r+0x98>
   851e0:	2800      	cmp	r0, #0
   851e2:	d03a      	beq.n	8525a <_fputwc_r+0xb6>
   851e4:	f89d 1004 	ldrb.w	r1, [sp, #4]
   851e8:	2500      	movs	r5, #0
   851ea:	e009      	b.n	85200 <_fputwc_r+0x5c>
   851ec:	6823      	ldr	r3, [r4, #0]
   851ee:	7019      	strb	r1, [r3, #0]
   851f0:	6823      	ldr	r3, [r4, #0]
   851f2:	3301      	adds	r3, #1
   851f4:	6023      	str	r3, [r4, #0]
   851f6:	3501      	adds	r5, #1
   851f8:	42b5      	cmp	r5, r6
   851fa:	d22e      	bcs.n	8525a <_fputwc_r+0xb6>
   851fc:	ab01      	add	r3, sp, #4
   851fe:	5ce9      	ldrb	r1, [r5, r3]
   85200:	68a3      	ldr	r3, [r4, #8]
   85202:	3b01      	subs	r3, #1
   85204:	2b00      	cmp	r3, #0
   85206:	60a3      	str	r3, [r4, #8]
   85208:	daf0      	bge.n	851ec <_fputwc_r+0x48>
   8520a:	69a2      	ldr	r2, [r4, #24]
   8520c:	4293      	cmp	r3, r2
   8520e:	db06      	blt.n	8521e <_fputwc_r+0x7a>
   85210:	6823      	ldr	r3, [r4, #0]
   85212:	7019      	strb	r1, [r3, #0]
   85214:	6823      	ldr	r3, [r4, #0]
   85216:	7819      	ldrb	r1, [r3, #0]
   85218:	3301      	adds	r3, #1
   8521a:	290a      	cmp	r1, #10
   8521c:	d1ea      	bne.n	851f4 <_fputwc_r+0x50>
   8521e:	4640      	mov	r0, r8
   85220:	4622      	mov	r2, r4
   85222:	f001 f8ef 	bl	86404 <__swbuf_r>
   85226:	f1b0 33ff 	subs.w	r3, r0, #4294967295
   8522a:	4258      	negs	r0, r3
   8522c:	4158      	adcs	r0, r3
   8522e:	2800      	cmp	r0, #0
   85230:	d0e1      	beq.n	851f6 <_fputwc_r+0x52>
   85232:	f04f 30ff 	mov.w	r0, #4294967295
   85236:	b002      	add	sp, #8
   85238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8523c:	89a3      	ldrh	r3, [r4, #12]
   8523e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   85242:	81a3      	strh	r3, [r4, #12]
   85244:	b002      	add	sp, #8
   85246:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8524a:	1e7b      	subs	r3, r7, #1
   8524c:	2bfe      	cmp	r3, #254	; 0xfe
   8524e:	d8bd      	bhi.n	851cc <_fputwc_r+0x28>
   85250:	b2f9      	uxtb	r1, r7
   85252:	4606      	mov	r6, r0
   85254:	f88d 1004 	strb.w	r1, [sp, #4]
   85258:	e7c6      	b.n	851e8 <_fputwc_r+0x44>
   8525a:	4638      	mov	r0, r7
   8525c:	b002      	add	sp, #8
   8525e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85262:	bf00      	nop

00085264 <_malloc_trim_r>:
   85264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   85266:	4d23      	ldr	r5, [pc, #140]	; (852f4 <_malloc_trim_r+0x90>)
   85268:	460f      	mov	r7, r1
   8526a:	4604      	mov	r4, r0
   8526c:	f000 fe92 	bl	85f94 <__malloc_lock>
   85270:	68ab      	ldr	r3, [r5, #8]
   85272:	685e      	ldr	r6, [r3, #4]
   85274:	f026 0603 	bic.w	r6, r6, #3
   85278:	1bf1      	subs	r1, r6, r7
   8527a:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   8527e:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   85282:	f021 010f 	bic.w	r1, r1, #15
   85286:	f5a1 5780 	sub.w	r7, r1, #4096	; 0x1000
   8528a:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
   8528e:	db07      	blt.n	852a0 <_malloc_trim_r+0x3c>
   85290:	4620      	mov	r0, r4
   85292:	2100      	movs	r1, #0
   85294:	f001 f862 	bl	8635c <_sbrk_r>
   85298:	68ab      	ldr	r3, [r5, #8]
   8529a:	4433      	add	r3, r6
   8529c:	4298      	cmp	r0, r3
   8529e:	d004      	beq.n	852aa <_malloc_trim_r+0x46>
   852a0:	4620      	mov	r0, r4
   852a2:	f000 fe79 	bl	85f98 <__malloc_unlock>
   852a6:	2000      	movs	r0, #0
   852a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   852aa:	4620      	mov	r0, r4
   852ac:	4279      	negs	r1, r7
   852ae:	f001 f855 	bl	8635c <_sbrk_r>
   852b2:	3001      	adds	r0, #1
   852b4:	d00d      	beq.n	852d2 <_malloc_trim_r+0x6e>
   852b6:	4b10      	ldr	r3, [pc, #64]	; (852f8 <_malloc_trim_r+0x94>)
   852b8:	68aa      	ldr	r2, [r5, #8]
   852ba:	6819      	ldr	r1, [r3, #0]
   852bc:	1bf6      	subs	r6, r6, r7
   852be:	f046 0601 	orr.w	r6, r6, #1
   852c2:	4620      	mov	r0, r4
   852c4:	1bc9      	subs	r1, r1, r7
   852c6:	6056      	str	r6, [r2, #4]
   852c8:	6019      	str	r1, [r3, #0]
   852ca:	f000 fe65 	bl	85f98 <__malloc_unlock>
   852ce:	2001      	movs	r0, #1
   852d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   852d2:	4620      	mov	r0, r4
   852d4:	2100      	movs	r1, #0
   852d6:	f001 f841 	bl	8635c <_sbrk_r>
   852da:	68ab      	ldr	r3, [r5, #8]
   852dc:	1ac2      	subs	r2, r0, r3
   852de:	2a0f      	cmp	r2, #15
   852e0:	ddde      	ble.n	852a0 <_malloc_trim_r+0x3c>
   852e2:	4d06      	ldr	r5, [pc, #24]	; (852fc <_malloc_trim_r+0x98>)
   852e4:	4904      	ldr	r1, [pc, #16]	; (852f8 <_malloc_trim_r+0x94>)
   852e6:	682d      	ldr	r5, [r5, #0]
   852e8:	f042 0201 	orr.w	r2, r2, #1
   852ec:	1b40      	subs	r0, r0, r5
   852ee:	605a      	str	r2, [r3, #4]
   852f0:	6008      	str	r0, [r1, #0]
   852f2:	e7d5      	b.n	852a0 <_malloc_trim_r+0x3c>
   852f4:	20070670 	.word	0x20070670
   852f8:	2007ad38 	.word	0x2007ad38
   852fc:	20070a7c 	.word	0x20070a7c

00085300 <_free_r>:
   85300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   85304:	460d      	mov	r5, r1
   85306:	4606      	mov	r6, r0
   85308:	2900      	cmp	r1, #0
   8530a:	d055      	beq.n	853b8 <_free_r+0xb8>
   8530c:	f000 fe42 	bl	85f94 <__malloc_lock>
   85310:	f855 1c04 	ldr.w	r1, [r5, #-4]
   85314:	f8df c170 	ldr.w	ip, [pc, #368]	; 85488 <_free_r+0x188>
   85318:	f1a5 0408 	sub.w	r4, r5, #8
   8531c:	f021 0301 	bic.w	r3, r1, #1
   85320:	18e2      	adds	r2, r4, r3
   85322:	f8dc 0008 	ldr.w	r0, [ip, #8]
   85326:	6857      	ldr	r7, [r2, #4]
   85328:	4290      	cmp	r0, r2
   8532a:	f027 0703 	bic.w	r7, r7, #3
   8532e:	d068      	beq.n	85402 <_free_r+0x102>
   85330:	f011 0101 	ands.w	r1, r1, #1
   85334:	6057      	str	r7, [r2, #4]
   85336:	d032      	beq.n	8539e <_free_r+0x9e>
   85338:	2100      	movs	r1, #0
   8533a:	19d0      	adds	r0, r2, r7
   8533c:	6840      	ldr	r0, [r0, #4]
   8533e:	07c0      	lsls	r0, r0, #31
   85340:	d406      	bmi.n	85350 <_free_r+0x50>
   85342:	443b      	add	r3, r7
   85344:	6890      	ldr	r0, [r2, #8]
   85346:	2900      	cmp	r1, #0
   85348:	d04d      	beq.n	853e6 <_free_r+0xe6>
   8534a:	68d2      	ldr	r2, [r2, #12]
   8534c:	60c2      	str	r2, [r0, #12]
   8534e:	6090      	str	r0, [r2, #8]
   85350:	f043 0201 	orr.w	r2, r3, #1
   85354:	6062      	str	r2, [r4, #4]
   85356:	50e3      	str	r3, [r4, r3]
   85358:	b9e1      	cbnz	r1, 85394 <_free_r+0x94>
   8535a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   8535e:	d32d      	bcc.n	853bc <_free_r+0xbc>
   85360:	0a5a      	lsrs	r2, r3, #9
   85362:	2a04      	cmp	r2, #4
   85364:	d869      	bhi.n	8543a <_free_r+0x13a>
   85366:	0998      	lsrs	r0, r3, #6
   85368:	3038      	adds	r0, #56	; 0x38
   8536a:	0041      	lsls	r1, r0, #1
   8536c:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
   85370:	f8dc 2008 	ldr.w	r2, [ip, #8]
   85374:	4944      	ldr	r1, [pc, #272]	; (85488 <_free_r+0x188>)
   85376:	4562      	cmp	r2, ip
   85378:	d065      	beq.n	85446 <_free_r+0x146>
   8537a:	6851      	ldr	r1, [r2, #4]
   8537c:	f021 0103 	bic.w	r1, r1, #3
   85380:	428b      	cmp	r3, r1
   85382:	d202      	bcs.n	8538a <_free_r+0x8a>
   85384:	6892      	ldr	r2, [r2, #8]
   85386:	4594      	cmp	ip, r2
   85388:	d1f7      	bne.n	8537a <_free_r+0x7a>
   8538a:	68d3      	ldr	r3, [r2, #12]
   8538c:	60e3      	str	r3, [r4, #12]
   8538e:	60a2      	str	r2, [r4, #8]
   85390:	609c      	str	r4, [r3, #8]
   85392:	60d4      	str	r4, [r2, #12]
   85394:	4630      	mov	r0, r6
   85396:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8539a:	f000 bdfd 	b.w	85f98 <__malloc_unlock>
   8539e:	f855 5c08 	ldr.w	r5, [r5, #-8]
   853a2:	f10c 0808 	add.w	r8, ip, #8
   853a6:	1b64      	subs	r4, r4, r5
   853a8:	68a0      	ldr	r0, [r4, #8]
   853aa:	442b      	add	r3, r5
   853ac:	4540      	cmp	r0, r8
   853ae:	d042      	beq.n	85436 <_free_r+0x136>
   853b0:	68e5      	ldr	r5, [r4, #12]
   853b2:	60c5      	str	r5, [r0, #12]
   853b4:	60a8      	str	r0, [r5, #8]
   853b6:	e7c0      	b.n	8533a <_free_r+0x3a>
   853b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   853bc:	08db      	lsrs	r3, r3, #3
   853be:	109a      	asrs	r2, r3, #2
   853c0:	2001      	movs	r0, #1
   853c2:	4090      	lsls	r0, r2
   853c4:	f8dc 1004 	ldr.w	r1, [ip, #4]
   853c8:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
   853cc:	689a      	ldr	r2, [r3, #8]
   853ce:	4301      	orrs	r1, r0
   853d0:	60a2      	str	r2, [r4, #8]
   853d2:	60e3      	str	r3, [r4, #12]
   853d4:	f8cc 1004 	str.w	r1, [ip, #4]
   853d8:	4630      	mov	r0, r6
   853da:	609c      	str	r4, [r3, #8]
   853dc:	60d4      	str	r4, [r2, #12]
   853de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   853e2:	f000 bdd9 	b.w	85f98 <__malloc_unlock>
   853e6:	4d29      	ldr	r5, [pc, #164]	; (8548c <_free_r+0x18c>)
   853e8:	42a8      	cmp	r0, r5
   853ea:	d1ae      	bne.n	8534a <_free_r+0x4a>
   853ec:	f043 0201 	orr.w	r2, r3, #1
   853f0:	f8cc 4014 	str.w	r4, [ip, #20]
   853f4:	f8cc 4010 	str.w	r4, [ip, #16]
   853f8:	60e0      	str	r0, [r4, #12]
   853fa:	60a0      	str	r0, [r4, #8]
   853fc:	6062      	str	r2, [r4, #4]
   853fe:	50e3      	str	r3, [r4, r3]
   85400:	e7c8      	b.n	85394 <_free_r+0x94>
   85402:	441f      	add	r7, r3
   85404:	07cb      	lsls	r3, r1, #31
   85406:	d407      	bmi.n	85418 <_free_r+0x118>
   85408:	f855 1c08 	ldr.w	r1, [r5, #-8]
   8540c:	1a64      	subs	r4, r4, r1
   8540e:	68e3      	ldr	r3, [r4, #12]
   85410:	68a2      	ldr	r2, [r4, #8]
   85412:	440f      	add	r7, r1
   85414:	60d3      	str	r3, [r2, #12]
   85416:	609a      	str	r2, [r3, #8]
   85418:	4b1d      	ldr	r3, [pc, #116]	; (85490 <_free_r+0x190>)
   8541a:	f047 0201 	orr.w	r2, r7, #1
   8541e:	681b      	ldr	r3, [r3, #0]
   85420:	6062      	str	r2, [r4, #4]
   85422:	429f      	cmp	r7, r3
   85424:	f8cc 4008 	str.w	r4, [ip, #8]
   85428:	d3b4      	bcc.n	85394 <_free_r+0x94>
   8542a:	4b1a      	ldr	r3, [pc, #104]	; (85494 <_free_r+0x194>)
   8542c:	4630      	mov	r0, r6
   8542e:	6819      	ldr	r1, [r3, #0]
   85430:	f7ff ff18 	bl	85264 <_malloc_trim_r>
   85434:	e7ae      	b.n	85394 <_free_r+0x94>
   85436:	2101      	movs	r1, #1
   85438:	e77f      	b.n	8533a <_free_r+0x3a>
   8543a:	2a14      	cmp	r2, #20
   8543c:	d80b      	bhi.n	85456 <_free_r+0x156>
   8543e:	f102 005b 	add.w	r0, r2, #91	; 0x5b
   85442:	0041      	lsls	r1, r0, #1
   85444:	e792      	b.n	8536c <_free_r+0x6c>
   85446:	1080      	asrs	r0, r0, #2
   85448:	2501      	movs	r5, #1
   8544a:	4085      	lsls	r5, r0
   8544c:	6848      	ldr	r0, [r1, #4]
   8544e:	4613      	mov	r3, r2
   85450:	4328      	orrs	r0, r5
   85452:	6048      	str	r0, [r1, #4]
   85454:	e79a      	b.n	8538c <_free_r+0x8c>
   85456:	2a54      	cmp	r2, #84	; 0x54
   85458:	d803      	bhi.n	85462 <_free_r+0x162>
   8545a:	0b18      	lsrs	r0, r3, #12
   8545c:	306e      	adds	r0, #110	; 0x6e
   8545e:	0041      	lsls	r1, r0, #1
   85460:	e784      	b.n	8536c <_free_r+0x6c>
   85462:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   85466:	d803      	bhi.n	85470 <_free_r+0x170>
   85468:	0bd8      	lsrs	r0, r3, #15
   8546a:	3077      	adds	r0, #119	; 0x77
   8546c:	0041      	lsls	r1, r0, #1
   8546e:	e77d      	b.n	8536c <_free_r+0x6c>
   85470:	f240 5154 	movw	r1, #1364	; 0x554
   85474:	428a      	cmp	r2, r1
   85476:	d803      	bhi.n	85480 <_free_r+0x180>
   85478:	0c98      	lsrs	r0, r3, #18
   8547a:	307c      	adds	r0, #124	; 0x7c
   8547c:	0041      	lsls	r1, r0, #1
   8547e:	e775      	b.n	8536c <_free_r+0x6c>
   85480:	21fc      	movs	r1, #252	; 0xfc
   85482:	207e      	movs	r0, #126	; 0x7e
   85484:	e772      	b.n	8536c <_free_r+0x6c>
   85486:	bf00      	nop
   85488:	20070670 	.word	0x20070670
   8548c:	20070678 	.word	0x20070678
   85490:	20070a78 	.word	0x20070a78
   85494:	2007ad34 	.word	0x2007ad34

00085498 <__sfvwrite_r>:
   85498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8549c:	6893      	ldr	r3, [r2, #8]
   8549e:	b083      	sub	sp, #12
   854a0:	4616      	mov	r6, r2
   854a2:	4681      	mov	r9, r0
   854a4:	460c      	mov	r4, r1
   854a6:	b32b      	cbz	r3, 854f4 <__sfvwrite_r+0x5c>
   854a8:	898b      	ldrh	r3, [r1, #12]
   854aa:	0719      	lsls	r1, r3, #28
   854ac:	d526      	bpl.n	854fc <__sfvwrite_r+0x64>
   854ae:	6922      	ldr	r2, [r4, #16]
   854b0:	b322      	cbz	r2, 854fc <__sfvwrite_r+0x64>
   854b2:	f003 0202 	and.w	r2, r3, #2
   854b6:	b292      	uxth	r2, r2
   854b8:	6835      	ldr	r5, [r6, #0]
   854ba:	2a00      	cmp	r2, #0
   854bc:	d02c      	beq.n	85518 <__sfvwrite_r+0x80>
   854be:	f04f 0a00 	mov.w	sl, #0
   854c2:	f8df b2e8 	ldr.w	fp, [pc, #744]	; 857ac <__sfvwrite_r+0x314>
   854c6:	46d0      	mov	r8, sl
   854c8:	45d8      	cmp	r8, fp
   854ca:	bf34      	ite	cc
   854cc:	4643      	movcc	r3, r8
   854ce:	465b      	movcs	r3, fp
   854d0:	4652      	mov	r2, sl
   854d2:	4648      	mov	r0, r9
   854d4:	f1b8 0f00 	cmp.w	r8, #0
   854d8:	d04f      	beq.n	8557a <__sfvwrite_r+0xe2>
   854da:	69e1      	ldr	r1, [r4, #28]
   854dc:	6a67      	ldr	r7, [r4, #36]	; 0x24
   854de:	47b8      	blx	r7
   854e0:	2800      	cmp	r0, #0
   854e2:	dd56      	ble.n	85592 <__sfvwrite_r+0xfa>
   854e4:	68b3      	ldr	r3, [r6, #8]
   854e6:	4482      	add	sl, r0
   854e8:	1a1b      	subs	r3, r3, r0
   854ea:	ebc0 0808 	rsb	r8, r0, r8
   854ee:	60b3      	str	r3, [r6, #8]
   854f0:	2b00      	cmp	r3, #0
   854f2:	d1e9      	bne.n	854c8 <__sfvwrite_r+0x30>
   854f4:	2000      	movs	r0, #0
   854f6:	b003      	add	sp, #12
   854f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   854fc:	4648      	mov	r0, r9
   854fe:	4621      	mov	r1, r4
   85500:	f7ff fc88 	bl	84e14 <__swsetup_r>
   85504:	2800      	cmp	r0, #0
   85506:	f040 8148 	bne.w	8579a <__sfvwrite_r+0x302>
   8550a:	89a3      	ldrh	r3, [r4, #12]
   8550c:	6835      	ldr	r5, [r6, #0]
   8550e:	f003 0202 	and.w	r2, r3, #2
   85512:	b292      	uxth	r2, r2
   85514:	2a00      	cmp	r2, #0
   85516:	d1d2      	bne.n	854be <__sfvwrite_r+0x26>
   85518:	f013 0a01 	ands.w	sl, r3, #1
   8551c:	d142      	bne.n	855a4 <__sfvwrite_r+0x10c>
   8551e:	46d0      	mov	r8, sl
   85520:	f1b8 0f00 	cmp.w	r8, #0
   85524:	d023      	beq.n	8556e <__sfvwrite_r+0xd6>
   85526:	059a      	lsls	r2, r3, #22
   85528:	68a7      	ldr	r7, [r4, #8]
   8552a:	d576      	bpl.n	8561a <__sfvwrite_r+0x182>
   8552c:	45b8      	cmp	r8, r7
   8552e:	f0c0 80a4 	bcc.w	8567a <__sfvwrite_r+0x1e2>
   85532:	f413 6f90 	tst.w	r3, #1152	; 0x480
   85536:	f040 80b2 	bne.w	8569e <__sfvwrite_r+0x206>
   8553a:	6820      	ldr	r0, [r4, #0]
   8553c:	46bb      	mov	fp, r7
   8553e:	4651      	mov	r1, sl
   85540:	465a      	mov	r2, fp
   85542:	f000 fcc1 	bl	85ec8 <memmove>
   85546:	68a2      	ldr	r2, [r4, #8]
   85548:	6821      	ldr	r1, [r4, #0]
   8554a:	1bd2      	subs	r2, r2, r7
   8554c:	eb01 030b 	add.w	r3, r1, fp
   85550:	60a2      	str	r2, [r4, #8]
   85552:	6023      	str	r3, [r4, #0]
   85554:	4642      	mov	r2, r8
   85556:	68b3      	ldr	r3, [r6, #8]
   85558:	4492      	add	sl, r2
   8555a:	1a9b      	subs	r3, r3, r2
   8555c:	ebc2 0808 	rsb	r8, r2, r8
   85560:	60b3      	str	r3, [r6, #8]
   85562:	2b00      	cmp	r3, #0
   85564:	d0c6      	beq.n	854f4 <__sfvwrite_r+0x5c>
   85566:	89a3      	ldrh	r3, [r4, #12]
   85568:	f1b8 0f00 	cmp.w	r8, #0
   8556c:	d1db      	bne.n	85526 <__sfvwrite_r+0x8e>
   8556e:	f8d5 a000 	ldr.w	sl, [r5]
   85572:	f8d5 8004 	ldr.w	r8, [r5, #4]
   85576:	3508      	adds	r5, #8
   85578:	e7d2      	b.n	85520 <__sfvwrite_r+0x88>
   8557a:	f8d5 a000 	ldr.w	sl, [r5]
   8557e:	f8d5 8004 	ldr.w	r8, [r5, #4]
   85582:	3508      	adds	r5, #8
   85584:	e7a0      	b.n	854c8 <__sfvwrite_r+0x30>
   85586:	4648      	mov	r0, r9
   85588:	4621      	mov	r1, r4
   8558a:	f7ff fd59 	bl	85040 <_fflush_r>
   8558e:	2800      	cmp	r0, #0
   85590:	d059      	beq.n	85646 <__sfvwrite_r+0x1ae>
   85592:	89a3      	ldrh	r3, [r4, #12]
   85594:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   85598:	f04f 30ff 	mov.w	r0, #4294967295
   8559c:	81a3      	strh	r3, [r4, #12]
   8559e:	b003      	add	sp, #12
   855a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   855a4:	4692      	mov	sl, r2
   855a6:	9201      	str	r2, [sp, #4]
   855a8:	4693      	mov	fp, r2
   855aa:	4690      	mov	r8, r2
   855ac:	f1b8 0f00 	cmp.w	r8, #0
   855b0:	d02b      	beq.n	8560a <__sfvwrite_r+0x172>
   855b2:	9f01      	ldr	r7, [sp, #4]
   855b4:	2f00      	cmp	r7, #0
   855b6:	d064      	beq.n	85682 <__sfvwrite_r+0x1ea>
   855b8:	6820      	ldr	r0, [r4, #0]
   855ba:	6921      	ldr	r1, [r4, #16]
   855bc:	45c2      	cmp	sl, r8
   855be:	bf34      	ite	cc
   855c0:	4653      	movcc	r3, sl
   855c2:	4643      	movcs	r3, r8
   855c4:	4288      	cmp	r0, r1
   855c6:	461f      	mov	r7, r3
   855c8:	f8d4 c008 	ldr.w	ip, [r4, #8]
   855cc:	6962      	ldr	r2, [r4, #20]
   855ce:	d903      	bls.n	855d8 <__sfvwrite_r+0x140>
   855d0:	4494      	add	ip, r2
   855d2:	4563      	cmp	r3, ip
   855d4:	f300 80ae 	bgt.w	85734 <__sfvwrite_r+0x29c>
   855d8:	4293      	cmp	r3, r2
   855da:	db36      	blt.n	8564a <__sfvwrite_r+0x1b2>
   855dc:	4613      	mov	r3, r2
   855de:	6a67      	ldr	r7, [r4, #36]	; 0x24
   855e0:	4648      	mov	r0, r9
   855e2:	69e1      	ldr	r1, [r4, #28]
   855e4:	465a      	mov	r2, fp
   855e6:	47b8      	blx	r7
   855e8:	1e07      	subs	r7, r0, #0
   855ea:	ddd2      	ble.n	85592 <__sfvwrite_r+0xfa>
   855ec:	ebba 0a07 	subs.w	sl, sl, r7
   855f0:	d03a      	beq.n	85668 <__sfvwrite_r+0x1d0>
   855f2:	68b3      	ldr	r3, [r6, #8]
   855f4:	44bb      	add	fp, r7
   855f6:	1bdb      	subs	r3, r3, r7
   855f8:	ebc7 0808 	rsb	r8, r7, r8
   855fc:	60b3      	str	r3, [r6, #8]
   855fe:	2b00      	cmp	r3, #0
   85600:	f43f af78 	beq.w	854f4 <__sfvwrite_r+0x5c>
   85604:	f1b8 0f00 	cmp.w	r8, #0
   85608:	d1d3      	bne.n	855b2 <__sfvwrite_r+0x11a>
   8560a:	2700      	movs	r7, #0
   8560c:	f8d5 b000 	ldr.w	fp, [r5]
   85610:	f8d5 8004 	ldr.w	r8, [r5, #4]
   85614:	9701      	str	r7, [sp, #4]
   85616:	3508      	adds	r5, #8
   85618:	e7c8      	b.n	855ac <__sfvwrite_r+0x114>
   8561a:	6820      	ldr	r0, [r4, #0]
   8561c:	6923      	ldr	r3, [r4, #16]
   8561e:	4298      	cmp	r0, r3
   85620:	d802      	bhi.n	85628 <__sfvwrite_r+0x190>
   85622:	6963      	ldr	r3, [r4, #20]
   85624:	4598      	cmp	r8, r3
   85626:	d272      	bcs.n	8570e <__sfvwrite_r+0x276>
   85628:	45b8      	cmp	r8, r7
   8562a:	bf38      	it	cc
   8562c:	4647      	movcc	r7, r8
   8562e:	463a      	mov	r2, r7
   85630:	4651      	mov	r1, sl
   85632:	f000 fc49 	bl	85ec8 <memmove>
   85636:	68a3      	ldr	r3, [r4, #8]
   85638:	6822      	ldr	r2, [r4, #0]
   8563a:	1bdb      	subs	r3, r3, r7
   8563c:	443a      	add	r2, r7
   8563e:	60a3      	str	r3, [r4, #8]
   85640:	6022      	str	r2, [r4, #0]
   85642:	2b00      	cmp	r3, #0
   85644:	d09f      	beq.n	85586 <__sfvwrite_r+0xee>
   85646:	463a      	mov	r2, r7
   85648:	e785      	b.n	85556 <__sfvwrite_r+0xbe>
   8564a:	461a      	mov	r2, r3
   8564c:	4659      	mov	r1, fp
   8564e:	9300      	str	r3, [sp, #0]
   85650:	f000 fc3a 	bl	85ec8 <memmove>
   85654:	9b00      	ldr	r3, [sp, #0]
   85656:	68a1      	ldr	r1, [r4, #8]
   85658:	6822      	ldr	r2, [r4, #0]
   8565a:	1ac9      	subs	r1, r1, r3
   8565c:	ebba 0a07 	subs.w	sl, sl, r7
   85660:	4413      	add	r3, r2
   85662:	60a1      	str	r1, [r4, #8]
   85664:	6023      	str	r3, [r4, #0]
   85666:	d1c4      	bne.n	855f2 <__sfvwrite_r+0x15a>
   85668:	4648      	mov	r0, r9
   8566a:	4621      	mov	r1, r4
   8566c:	f7ff fce8 	bl	85040 <_fflush_r>
   85670:	2800      	cmp	r0, #0
   85672:	d18e      	bne.n	85592 <__sfvwrite_r+0xfa>
   85674:	f8cd a004 	str.w	sl, [sp, #4]
   85678:	e7bb      	b.n	855f2 <__sfvwrite_r+0x15a>
   8567a:	6820      	ldr	r0, [r4, #0]
   8567c:	4647      	mov	r7, r8
   8567e:	46c3      	mov	fp, r8
   85680:	e75d      	b.n	8553e <__sfvwrite_r+0xa6>
   85682:	4658      	mov	r0, fp
   85684:	210a      	movs	r1, #10
   85686:	4642      	mov	r2, r8
   85688:	f000 fbd4 	bl	85e34 <memchr>
   8568c:	2800      	cmp	r0, #0
   8568e:	d07f      	beq.n	85790 <__sfvwrite_r+0x2f8>
   85690:	f100 0a01 	add.w	sl, r0, #1
   85694:	2701      	movs	r7, #1
   85696:	ebcb 0a0a 	rsb	sl, fp, sl
   8569a:	9701      	str	r7, [sp, #4]
   8569c:	e78c      	b.n	855b8 <__sfvwrite_r+0x120>
   8569e:	6822      	ldr	r2, [r4, #0]
   856a0:	6921      	ldr	r1, [r4, #16]
   856a2:	6967      	ldr	r7, [r4, #20]
   856a4:	ebc1 0c02 	rsb	ip, r1, r2
   856a8:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   856ac:	f10c 0201 	add.w	r2, ip, #1
   856b0:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   856b4:	4442      	add	r2, r8
   856b6:	107f      	asrs	r7, r7, #1
   856b8:	4297      	cmp	r7, r2
   856ba:	bf34      	ite	cc
   856bc:	4617      	movcc	r7, r2
   856be:	463a      	movcs	r2, r7
   856c0:	055b      	lsls	r3, r3, #21
   856c2:	d54f      	bpl.n	85764 <__sfvwrite_r+0x2cc>
   856c4:	4611      	mov	r1, r2
   856c6:	4648      	mov	r0, r9
   856c8:	f8cd c000 	str.w	ip, [sp]
   856cc:	f000 f916 	bl	858fc <_malloc_r>
   856d0:	f8dd c000 	ldr.w	ip, [sp]
   856d4:	4683      	mov	fp, r0
   856d6:	2800      	cmp	r0, #0
   856d8:	d062      	beq.n	857a0 <__sfvwrite_r+0x308>
   856da:	4662      	mov	r2, ip
   856dc:	6921      	ldr	r1, [r4, #16]
   856de:	f8cd c000 	str.w	ip, [sp]
   856e2:	f7fe fb11 	bl	83d08 <memcpy>
   856e6:	89a2      	ldrh	r2, [r4, #12]
   856e8:	f8dd c000 	ldr.w	ip, [sp]
   856ec:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   856f0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   856f4:	81a2      	strh	r2, [r4, #12]
   856f6:	eb0b 000c 	add.w	r0, fp, ip
   856fa:	ebcc 0207 	rsb	r2, ip, r7
   856fe:	f8c4 b010 	str.w	fp, [r4, #16]
   85702:	6167      	str	r7, [r4, #20]
   85704:	6020      	str	r0, [r4, #0]
   85706:	60a2      	str	r2, [r4, #8]
   85708:	4647      	mov	r7, r8
   8570a:	46c3      	mov	fp, r8
   8570c:	e717      	b.n	8553e <__sfvwrite_r+0xa6>
   8570e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   85712:	4590      	cmp	r8, r2
   85714:	bf38      	it	cc
   85716:	4642      	movcc	r2, r8
   85718:	fb92 f2f3 	sdiv	r2, r2, r3
   8571c:	fb02 f303 	mul.w	r3, r2, r3
   85720:	6a67      	ldr	r7, [r4, #36]	; 0x24
   85722:	4648      	mov	r0, r9
   85724:	69e1      	ldr	r1, [r4, #28]
   85726:	4652      	mov	r2, sl
   85728:	47b8      	blx	r7
   8572a:	2800      	cmp	r0, #0
   8572c:	f77f af31 	ble.w	85592 <__sfvwrite_r+0xfa>
   85730:	4602      	mov	r2, r0
   85732:	e710      	b.n	85556 <__sfvwrite_r+0xbe>
   85734:	4662      	mov	r2, ip
   85736:	4659      	mov	r1, fp
   85738:	f8cd c000 	str.w	ip, [sp]
   8573c:	f000 fbc4 	bl	85ec8 <memmove>
   85740:	f8dd c000 	ldr.w	ip, [sp]
   85744:	6823      	ldr	r3, [r4, #0]
   85746:	4648      	mov	r0, r9
   85748:	4463      	add	r3, ip
   8574a:	6023      	str	r3, [r4, #0]
   8574c:	4621      	mov	r1, r4
   8574e:	f8cd c000 	str.w	ip, [sp]
   85752:	f7ff fc75 	bl	85040 <_fflush_r>
   85756:	f8dd c000 	ldr.w	ip, [sp]
   8575a:	2800      	cmp	r0, #0
   8575c:	f47f af19 	bne.w	85592 <__sfvwrite_r+0xfa>
   85760:	4667      	mov	r7, ip
   85762:	e743      	b.n	855ec <__sfvwrite_r+0x154>
   85764:	4648      	mov	r0, r9
   85766:	f8cd c000 	str.w	ip, [sp]
   8576a:	f000 fc17 	bl	85f9c <_realloc_r>
   8576e:	f8dd c000 	ldr.w	ip, [sp]
   85772:	4683      	mov	fp, r0
   85774:	2800      	cmp	r0, #0
   85776:	d1be      	bne.n	856f6 <__sfvwrite_r+0x25e>
   85778:	4648      	mov	r0, r9
   8577a:	6921      	ldr	r1, [r4, #16]
   8577c:	f7ff fdc0 	bl	85300 <_free_r>
   85780:	89a3      	ldrh	r3, [r4, #12]
   85782:	220c      	movs	r2, #12
   85784:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   85788:	b29b      	uxth	r3, r3
   8578a:	f8c9 2000 	str.w	r2, [r9]
   8578e:	e701      	b.n	85594 <__sfvwrite_r+0xfc>
   85790:	2701      	movs	r7, #1
   85792:	f108 0a01 	add.w	sl, r8, #1
   85796:	9701      	str	r7, [sp, #4]
   85798:	e70e      	b.n	855b8 <__sfvwrite_r+0x120>
   8579a:	f04f 30ff 	mov.w	r0, #4294967295
   8579e:	e6aa      	b.n	854f6 <__sfvwrite_r+0x5e>
   857a0:	230c      	movs	r3, #12
   857a2:	f8c9 3000 	str.w	r3, [r9]
   857a6:	89a3      	ldrh	r3, [r4, #12]
   857a8:	e6f4      	b.n	85594 <__sfvwrite_r+0xfc>
   857aa:	bf00      	nop
   857ac:	7ffffc00 	.word	0x7ffffc00

000857b0 <_fwalk>:
   857b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   857b4:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
   857b8:	4688      	mov	r8, r1
   857ba:	d019      	beq.n	857f0 <_fwalk+0x40>
   857bc:	2600      	movs	r6, #0
   857be:	687d      	ldr	r5, [r7, #4]
   857c0:	68bc      	ldr	r4, [r7, #8]
   857c2:	3d01      	subs	r5, #1
   857c4:	d40e      	bmi.n	857e4 <_fwalk+0x34>
   857c6:	89a3      	ldrh	r3, [r4, #12]
   857c8:	3d01      	subs	r5, #1
   857ca:	2b01      	cmp	r3, #1
   857cc:	d906      	bls.n	857dc <_fwalk+0x2c>
   857ce:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   857d2:	4620      	mov	r0, r4
   857d4:	3301      	adds	r3, #1
   857d6:	d001      	beq.n	857dc <_fwalk+0x2c>
   857d8:	47c0      	blx	r8
   857da:	4306      	orrs	r6, r0
   857dc:	1c6b      	adds	r3, r5, #1
   857de:	f104 0468 	add.w	r4, r4, #104	; 0x68
   857e2:	d1f0      	bne.n	857c6 <_fwalk+0x16>
   857e4:	683f      	ldr	r7, [r7, #0]
   857e6:	2f00      	cmp	r7, #0
   857e8:	d1e9      	bne.n	857be <_fwalk+0xe>
   857ea:	4630      	mov	r0, r6
   857ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   857f0:	463e      	mov	r6, r7
   857f2:	4630      	mov	r0, r6
   857f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000857f8 <__locale_charset>:
   857f8:	4800      	ldr	r0, [pc, #0]	; (857fc <__locale_charset+0x4>)
   857fa:	4770      	bx	lr
   857fc:	2007064c 	.word	0x2007064c

00085800 <__locale_mb_cur_max>:
   85800:	4b01      	ldr	r3, [pc, #4]	; (85808 <__locale_mb_cur_max+0x8>)
   85802:	6818      	ldr	r0, [r3, #0]
   85804:	4770      	bx	lr
   85806:	bf00      	nop
   85808:	2007066c 	.word	0x2007066c

0008580c <__smakebuf_r>:
   8580c:	b5f0      	push	{r4, r5, r6, r7, lr}
   8580e:	898b      	ldrh	r3, [r1, #12]
   85810:	b091      	sub	sp, #68	; 0x44
   85812:	b29a      	uxth	r2, r3
   85814:	0796      	lsls	r6, r2, #30
   85816:	460c      	mov	r4, r1
   85818:	4605      	mov	r5, r0
   8581a:	d437      	bmi.n	8588c <__smakebuf_r+0x80>
   8581c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   85820:	2900      	cmp	r1, #0
   85822:	db17      	blt.n	85854 <__smakebuf_r+0x48>
   85824:	aa01      	add	r2, sp, #4
   85826:	f000 ff39 	bl	8669c <_fstat_r>
   8582a:	2800      	cmp	r0, #0
   8582c:	db10      	blt.n	85850 <__smakebuf_r+0x44>
   8582e:	9b02      	ldr	r3, [sp, #8]
   85830:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
   85834:	f5b3 5100 	subs.w	r1, r3, #8192	; 0x2000
   85838:	424f      	negs	r7, r1
   8583a:	414f      	adcs	r7, r1
   8583c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   85840:	d02c      	beq.n	8589c <__smakebuf_r+0x90>
   85842:	89a3      	ldrh	r3, [r4, #12]
   85844:	f44f 6680 	mov.w	r6, #1024	; 0x400
   85848:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   8584c:	81a3      	strh	r3, [r4, #12]
   8584e:	e00b      	b.n	85868 <__smakebuf_r+0x5c>
   85850:	89a3      	ldrh	r3, [r4, #12]
   85852:	b29a      	uxth	r2, r3
   85854:	f012 0f80 	tst.w	r2, #128	; 0x80
   85858:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   8585c:	81a3      	strh	r3, [r4, #12]
   8585e:	bf14      	ite	ne
   85860:	2640      	movne	r6, #64	; 0x40
   85862:	f44f 6680 	moveq.w	r6, #1024	; 0x400
   85866:	2700      	movs	r7, #0
   85868:	4628      	mov	r0, r5
   8586a:	4631      	mov	r1, r6
   8586c:	f000 f846 	bl	858fc <_malloc_r>
   85870:	89a3      	ldrh	r3, [r4, #12]
   85872:	2800      	cmp	r0, #0
   85874:	d029      	beq.n	858ca <__smakebuf_r+0xbe>
   85876:	4a1b      	ldr	r2, [pc, #108]	; (858e4 <__smakebuf_r+0xd8>)
   85878:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   8587c:	63ea      	str	r2, [r5, #60]	; 0x3c
   8587e:	81a3      	strh	r3, [r4, #12]
   85880:	6020      	str	r0, [r4, #0]
   85882:	6120      	str	r0, [r4, #16]
   85884:	6166      	str	r6, [r4, #20]
   85886:	b9a7      	cbnz	r7, 858b2 <__smakebuf_r+0xa6>
   85888:	b011      	add	sp, #68	; 0x44
   8588a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8588c:	f101 0343 	add.w	r3, r1, #67	; 0x43
   85890:	2201      	movs	r2, #1
   85892:	600b      	str	r3, [r1, #0]
   85894:	610b      	str	r3, [r1, #16]
   85896:	614a      	str	r2, [r1, #20]
   85898:	b011      	add	sp, #68	; 0x44
   8589a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8589c:	4a12      	ldr	r2, [pc, #72]	; (858e8 <__smakebuf_r+0xdc>)
   8589e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   858a0:	4293      	cmp	r3, r2
   858a2:	d1ce      	bne.n	85842 <__smakebuf_r+0x36>
   858a4:	89a3      	ldrh	r3, [r4, #12]
   858a6:	f44f 6680 	mov.w	r6, #1024	; 0x400
   858aa:	4333      	orrs	r3, r6
   858ac:	81a3      	strh	r3, [r4, #12]
   858ae:	64e6      	str	r6, [r4, #76]	; 0x4c
   858b0:	e7da      	b.n	85868 <__smakebuf_r+0x5c>
   858b2:	4628      	mov	r0, r5
   858b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   858b8:	f000 ff04 	bl	866c4 <_isatty_r>
   858bc:	2800      	cmp	r0, #0
   858be:	d0e3      	beq.n	85888 <__smakebuf_r+0x7c>
   858c0:	89a3      	ldrh	r3, [r4, #12]
   858c2:	f043 0301 	orr.w	r3, r3, #1
   858c6:	81a3      	strh	r3, [r4, #12]
   858c8:	e7de      	b.n	85888 <__smakebuf_r+0x7c>
   858ca:	059a      	lsls	r2, r3, #22
   858cc:	d4dc      	bmi.n	85888 <__smakebuf_r+0x7c>
   858ce:	f104 0243 	add.w	r2, r4, #67	; 0x43
   858d2:	f043 0302 	orr.w	r3, r3, #2
   858d6:	2101      	movs	r1, #1
   858d8:	81a3      	strh	r3, [r4, #12]
   858da:	6022      	str	r2, [r4, #0]
   858dc:	6122      	str	r2, [r4, #16]
   858de:	6161      	str	r1, [r4, #20]
   858e0:	e7d2      	b.n	85888 <__smakebuf_r+0x7c>
   858e2:	bf00      	nop
   858e4:	0008506d 	.word	0x0008506d
   858e8:	000863dd 	.word	0x000863dd

000858ec <malloc>:
   858ec:	4b02      	ldr	r3, [pc, #8]	; (858f8 <malloc+0xc>)
   858ee:	4601      	mov	r1, r0
   858f0:	6818      	ldr	r0, [r3, #0]
   858f2:	f000 b803 	b.w	858fc <_malloc_r>
   858f6:	bf00      	nop
   858f8:	20070648 	.word	0x20070648

000858fc <_malloc_r>:
   858fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85900:	f101 050b 	add.w	r5, r1, #11
   85904:	2d16      	cmp	r5, #22
   85906:	b083      	sub	sp, #12
   85908:	4606      	mov	r6, r0
   8590a:	d927      	bls.n	8595c <_malloc_r+0x60>
   8590c:	f035 0507 	bics.w	r5, r5, #7
   85910:	d427      	bmi.n	85962 <_malloc_r+0x66>
   85912:	42a9      	cmp	r1, r5
   85914:	d825      	bhi.n	85962 <_malloc_r+0x66>
   85916:	4630      	mov	r0, r6
   85918:	f000 fb3c 	bl	85f94 <__malloc_lock>
   8591c:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   85920:	d226      	bcs.n	85970 <_malloc_r+0x74>
   85922:	4fc1      	ldr	r7, [pc, #772]	; (85c28 <_malloc_r+0x32c>)
   85924:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
   85928:	eb07 03cc 	add.w	r3, r7, ip, lsl #3
   8592c:	68dc      	ldr	r4, [r3, #12]
   8592e:	429c      	cmp	r4, r3
   85930:	f000 81d2 	beq.w	85cd8 <_malloc_r+0x3dc>
   85934:	6863      	ldr	r3, [r4, #4]
   85936:	68e2      	ldr	r2, [r4, #12]
   85938:	f023 0303 	bic.w	r3, r3, #3
   8593c:	4423      	add	r3, r4
   8593e:	6858      	ldr	r0, [r3, #4]
   85940:	68a1      	ldr	r1, [r4, #8]
   85942:	f040 0501 	orr.w	r5, r0, #1
   85946:	60ca      	str	r2, [r1, #12]
   85948:	4630      	mov	r0, r6
   8594a:	6091      	str	r1, [r2, #8]
   8594c:	605d      	str	r5, [r3, #4]
   8594e:	f000 fb23 	bl	85f98 <__malloc_unlock>
   85952:	3408      	adds	r4, #8
   85954:	4620      	mov	r0, r4
   85956:	b003      	add	sp, #12
   85958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8595c:	2510      	movs	r5, #16
   8595e:	42a9      	cmp	r1, r5
   85960:	d9d9      	bls.n	85916 <_malloc_r+0x1a>
   85962:	2400      	movs	r4, #0
   85964:	230c      	movs	r3, #12
   85966:	4620      	mov	r0, r4
   85968:	6033      	str	r3, [r6, #0]
   8596a:	b003      	add	sp, #12
   8596c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85970:	ea5f 2c55 	movs.w	ip, r5, lsr #9
   85974:	f000 8089 	beq.w	85a8a <_malloc_r+0x18e>
   85978:	f1bc 0f04 	cmp.w	ip, #4
   8597c:	f200 8160 	bhi.w	85c40 <_malloc_r+0x344>
   85980:	ea4f 1c95 	mov.w	ip, r5, lsr #6
   85984:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
   85988:	ea4f 014c 	mov.w	r1, ip, lsl #1
   8598c:	4fa6      	ldr	r7, [pc, #664]	; (85c28 <_malloc_r+0x32c>)
   8598e:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   85992:	68cc      	ldr	r4, [r1, #12]
   85994:	42a1      	cmp	r1, r4
   85996:	d105      	bne.n	859a4 <_malloc_r+0xa8>
   85998:	e00c      	b.n	859b4 <_malloc_r+0xb8>
   8599a:	2b00      	cmp	r3, #0
   8599c:	da79      	bge.n	85a92 <_malloc_r+0x196>
   8599e:	68e4      	ldr	r4, [r4, #12]
   859a0:	42a1      	cmp	r1, r4
   859a2:	d007      	beq.n	859b4 <_malloc_r+0xb8>
   859a4:	6862      	ldr	r2, [r4, #4]
   859a6:	f022 0203 	bic.w	r2, r2, #3
   859aa:	1b53      	subs	r3, r2, r5
   859ac:	2b0f      	cmp	r3, #15
   859ae:	ddf4      	ble.n	8599a <_malloc_r+0x9e>
   859b0:	f10c 3cff 	add.w	ip, ip, #4294967295
   859b4:	f10c 0c01 	add.w	ip, ip, #1
   859b8:	4b9b      	ldr	r3, [pc, #620]	; (85c28 <_malloc_r+0x32c>)
   859ba:	693c      	ldr	r4, [r7, #16]
   859bc:	f103 0e08 	add.w	lr, r3, #8
   859c0:	4574      	cmp	r4, lr
   859c2:	f000 817e 	beq.w	85cc2 <_malloc_r+0x3c6>
   859c6:	6861      	ldr	r1, [r4, #4]
   859c8:	f021 0103 	bic.w	r1, r1, #3
   859cc:	1b4a      	subs	r2, r1, r5
   859ce:	2a0f      	cmp	r2, #15
   859d0:	f300 8164 	bgt.w	85c9c <_malloc_r+0x3a0>
   859d4:	2a00      	cmp	r2, #0
   859d6:	f8c3 e014 	str.w	lr, [r3, #20]
   859da:	f8c3 e010 	str.w	lr, [r3, #16]
   859de:	da69      	bge.n	85ab4 <_malloc_r+0x1b8>
   859e0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   859e4:	f080 813a 	bcs.w	85c5c <_malloc_r+0x360>
   859e8:	08c9      	lsrs	r1, r1, #3
   859ea:	108a      	asrs	r2, r1, #2
   859ec:	f04f 0801 	mov.w	r8, #1
   859f0:	fa08 f802 	lsl.w	r8, r8, r2
   859f4:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   859f8:	685a      	ldr	r2, [r3, #4]
   859fa:	6888      	ldr	r0, [r1, #8]
   859fc:	ea48 0202 	orr.w	r2, r8, r2
   85a00:	60a0      	str	r0, [r4, #8]
   85a02:	60e1      	str	r1, [r4, #12]
   85a04:	605a      	str	r2, [r3, #4]
   85a06:	608c      	str	r4, [r1, #8]
   85a08:	60c4      	str	r4, [r0, #12]
   85a0a:	ea4f 03ac 	mov.w	r3, ip, asr #2
   85a0e:	2001      	movs	r0, #1
   85a10:	4098      	lsls	r0, r3
   85a12:	4290      	cmp	r0, r2
   85a14:	d85b      	bhi.n	85ace <_malloc_r+0x1d2>
   85a16:	4202      	tst	r2, r0
   85a18:	d106      	bne.n	85a28 <_malloc_r+0x12c>
   85a1a:	f02c 0c03 	bic.w	ip, ip, #3
   85a1e:	0040      	lsls	r0, r0, #1
   85a20:	4202      	tst	r2, r0
   85a22:	f10c 0c04 	add.w	ip, ip, #4
   85a26:	d0fa      	beq.n	85a1e <_malloc_r+0x122>
   85a28:	eb07 08cc 	add.w	r8, r7, ip, lsl #3
   85a2c:	4644      	mov	r4, r8
   85a2e:	46e1      	mov	r9, ip
   85a30:	68e3      	ldr	r3, [r4, #12]
   85a32:	429c      	cmp	r4, r3
   85a34:	d107      	bne.n	85a46 <_malloc_r+0x14a>
   85a36:	e146      	b.n	85cc6 <_malloc_r+0x3ca>
   85a38:	2a00      	cmp	r2, #0
   85a3a:	f280 8157 	bge.w	85cec <_malloc_r+0x3f0>
   85a3e:	68db      	ldr	r3, [r3, #12]
   85a40:	429c      	cmp	r4, r3
   85a42:	f000 8140 	beq.w	85cc6 <_malloc_r+0x3ca>
   85a46:	6859      	ldr	r1, [r3, #4]
   85a48:	f021 0103 	bic.w	r1, r1, #3
   85a4c:	1b4a      	subs	r2, r1, r5
   85a4e:	2a0f      	cmp	r2, #15
   85a50:	ddf2      	ble.n	85a38 <_malloc_r+0x13c>
   85a52:	461c      	mov	r4, r3
   85a54:	f854 cf08 	ldr.w	ip, [r4, #8]!
   85a58:	68d9      	ldr	r1, [r3, #12]
   85a5a:	f045 0901 	orr.w	r9, r5, #1
   85a5e:	f042 0801 	orr.w	r8, r2, #1
   85a62:	441d      	add	r5, r3
   85a64:	f8c3 9004 	str.w	r9, [r3, #4]
   85a68:	4630      	mov	r0, r6
   85a6a:	f8cc 100c 	str.w	r1, [ip, #12]
   85a6e:	f8c1 c008 	str.w	ip, [r1, #8]
   85a72:	617d      	str	r5, [r7, #20]
   85a74:	613d      	str	r5, [r7, #16]
   85a76:	f8c5 e00c 	str.w	lr, [r5, #12]
   85a7a:	f8c5 e008 	str.w	lr, [r5, #8]
   85a7e:	f8c5 8004 	str.w	r8, [r5, #4]
   85a82:	50aa      	str	r2, [r5, r2]
   85a84:	f000 fa88 	bl	85f98 <__malloc_unlock>
   85a88:	e764      	b.n	85954 <_malloc_r+0x58>
   85a8a:	217e      	movs	r1, #126	; 0x7e
   85a8c:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
   85a90:	e77c      	b.n	8598c <_malloc_r+0x90>
   85a92:	4422      	add	r2, r4
   85a94:	6850      	ldr	r0, [r2, #4]
   85a96:	68e3      	ldr	r3, [r4, #12]
   85a98:	68a1      	ldr	r1, [r4, #8]
   85a9a:	f040 0501 	orr.w	r5, r0, #1
   85a9e:	60cb      	str	r3, [r1, #12]
   85aa0:	4630      	mov	r0, r6
   85aa2:	6099      	str	r1, [r3, #8]
   85aa4:	6055      	str	r5, [r2, #4]
   85aa6:	f000 fa77 	bl	85f98 <__malloc_unlock>
   85aaa:	3408      	adds	r4, #8
   85aac:	4620      	mov	r0, r4
   85aae:	b003      	add	sp, #12
   85ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85ab4:	4421      	add	r1, r4
   85ab6:	684b      	ldr	r3, [r1, #4]
   85ab8:	4630      	mov	r0, r6
   85aba:	f043 0301 	orr.w	r3, r3, #1
   85abe:	604b      	str	r3, [r1, #4]
   85ac0:	f000 fa6a 	bl	85f98 <__malloc_unlock>
   85ac4:	3408      	adds	r4, #8
   85ac6:	4620      	mov	r0, r4
   85ac8:	b003      	add	sp, #12
   85aca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85ace:	68bc      	ldr	r4, [r7, #8]
   85ad0:	6863      	ldr	r3, [r4, #4]
   85ad2:	f023 0903 	bic.w	r9, r3, #3
   85ad6:	45a9      	cmp	r9, r5
   85ad8:	d304      	bcc.n	85ae4 <_malloc_r+0x1e8>
   85ada:	ebc5 0309 	rsb	r3, r5, r9
   85ade:	2b0f      	cmp	r3, #15
   85ae0:	f300 8091 	bgt.w	85c06 <_malloc_r+0x30a>
   85ae4:	4b51      	ldr	r3, [pc, #324]	; (85c2c <_malloc_r+0x330>)
   85ae6:	4a52      	ldr	r2, [pc, #328]	; (85c30 <_malloc_r+0x334>)
   85ae8:	6819      	ldr	r1, [r3, #0]
   85aea:	6813      	ldr	r3, [r2, #0]
   85aec:	eb05 0a01 	add.w	sl, r5, r1
   85af0:	3301      	adds	r3, #1
   85af2:	eb04 0b09 	add.w	fp, r4, r9
   85af6:	f000 8161 	beq.w	85dbc <_malloc_r+0x4c0>
   85afa:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
   85afe:	f10a 0a0f 	add.w	sl, sl, #15
   85b02:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
   85b06:	f02a 0a0f 	bic.w	sl, sl, #15
   85b0a:	4630      	mov	r0, r6
   85b0c:	4651      	mov	r1, sl
   85b0e:	9201      	str	r2, [sp, #4]
   85b10:	f000 fc24 	bl	8635c <_sbrk_r>
   85b14:	f1b0 3fff 	cmp.w	r0, #4294967295
   85b18:	4680      	mov	r8, r0
   85b1a:	9a01      	ldr	r2, [sp, #4]
   85b1c:	f000 8101 	beq.w	85d22 <_malloc_r+0x426>
   85b20:	4583      	cmp	fp, r0
   85b22:	f200 80fb 	bhi.w	85d1c <_malloc_r+0x420>
   85b26:	f8df c114 	ldr.w	ip, [pc, #276]	; 85c3c <_malloc_r+0x340>
   85b2a:	45c3      	cmp	fp, r8
   85b2c:	f8dc 3000 	ldr.w	r3, [ip]
   85b30:	4453      	add	r3, sl
   85b32:	f8cc 3000 	str.w	r3, [ip]
   85b36:	f000 814a 	beq.w	85dce <_malloc_r+0x4d2>
   85b3a:	6812      	ldr	r2, [r2, #0]
   85b3c:	493c      	ldr	r1, [pc, #240]	; (85c30 <_malloc_r+0x334>)
   85b3e:	3201      	adds	r2, #1
   85b40:	bf1b      	ittet	ne
   85b42:	ebcb 0b08 	rsbne	fp, fp, r8
   85b46:	445b      	addne	r3, fp
   85b48:	f8c1 8000 	streq.w	r8, [r1]
   85b4c:	f8cc 3000 	strne.w	r3, [ip]
   85b50:	f018 0307 	ands.w	r3, r8, #7
   85b54:	f000 8114 	beq.w	85d80 <_malloc_r+0x484>
   85b58:	f1c3 0208 	rsb	r2, r3, #8
   85b5c:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
   85b60:	4490      	add	r8, r2
   85b62:	3308      	adds	r3, #8
   85b64:	44c2      	add	sl, r8
   85b66:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
   85b6a:	ebca 0a03 	rsb	sl, sl, r3
   85b6e:	4651      	mov	r1, sl
   85b70:	4630      	mov	r0, r6
   85b72:	f8cd c004 	str.w	ip, [sp, #4]
   85b76:	f000 fbf1 	bl	8635c <_sbrk_r>
   85b7a:	1c43      	adds	r3, r0, #1
   85b7c:	f8dd c004 	ldr.w	ip, [sp, #4]
   85b80:	f000 8135 	beq.w	85dee <_malloc_r+0x4f2>
   85b84:	ebc8 0200 	rsb	r2, r8, r0
   85b88:	4452      	add	r2, sl
   85b8a:	f042 0201 	orr.w	r2, r2, #1
   85b8e:	f8dc 3000 	ldr.w	r3, [ip]
   85b92:	42bc      	cmp	r4, r7
   85b94:	4453      	add	r3, sl
   85b96:	f8c7 8008 	str.w	r8, [r7, #8]
   85b9a:	f8cc 3000 	str.w	r3, [ip]
   85b9e:	f8c8 2004 	str.w	r2, [r8, #4]
   85ba2:	f8df a098 	ldr.w	sl, [pc, #152]	; 85c3c <_malloc_r+0x340>
   85ba6:	d015      	beq.n	85bd4 <_malloc_r+0x2d8>
   85ba8:	f1b9 0f0f 	cmp.w	r9, #15
   85bac:	f240 80eb 	bls.w	85d86 <_malloc_r+0x48a>
   85bb0:	6861      	ldr	r1, [r4, #4]
   85bb2:	f1a9 020c 	sub.w	r2, r9, #12
   85bb6:	f022 0207 	bic.w	r2, r2, #7
   85bba:	f001 0101 	and.w	r1, r1, #1
   85bbe:	ea42 0e01 	orr.w	lr, r2, r1
   85bc2:	2005      	movs	r0, #5
   85bc4:	18a1      	adds	r1, r4, r2
   85bc6:	2a0f      	cmp	r2, #15
   85bc8:	f8c4 e004 	str.w	lr, [r4, #4]
   85bcc:	6048      	str	r0, [r1, #4]
   85bce:	6088      	str	r0, [r1, #8]
   85bd0:	f200 8111 	bhi.w	85df6 <_malloc_r+0x4fa>
   85bd4:	4a17      	ldr	r2, [pc, #92]	; (85c34 <_malloc_r+0x338>)
   85bd6:	68bc      	ldr	r4, [r7, #8]
   85bd8:	6811      	ldr	r1, [r2, #0]
   85bda:	428b      	cmp	r3, r1
   85bdc:	bf88      	it	hi
   85bde:	6013      	strhi	r3, [r2, #0]
   85be0:	4a15      	ldr	r2, [pc, #84]	; (85c38 <_malloc_r+0x33c>)
   85be2:	6811      	ldr	r1, [r2, #0]
   85be4:	428b      	cmp	r3, r1
   85be6:	bf88      	it	hi
   85be8:	6013      	strhi	r3, [r2, #0]
   85bea:	6862      	ldr	r2, [r4, #4]
   85bec:	f022 0203 	bic.w	r2, r2, #3
   85bf0:	4295      	cmp	r5, r2
   85bf2:	ebc5 0302 	rsb	r3, r5, r2
   85bf6:	d801      	bhi.n	85bfc <_malloc_r+0x300>
   85bf8:	2b0f      	cmp	r3, #15
   85bfa:	dc04      	bgt.n	85c06 <_malloc_r+0x30a>
   85bfc:	4630      	mov	r0, r6
   85bfe:	f000 f9cb 	bl	85f98 <__malloc_unlock>
   85c02:	2400      	movs	r4, #0
   85c04:	e6a6      	b.n	85954 <_malloc_r+0x58>
   85c06:	f045 0201 	orr.w	r2, r5, #1
   85c0a:	f043 0301 	orr.w	r3, r3, #1
   85c0e:	4425      	add	r5, r4
   85c10:	6062      	str	r2, [r4, #4]
   85c12:	4630      	mov	r0, r6
   85c14:	60bd      	str	r5, [r7, #8]
   85c16:	606b      	str	r3, [r5, #4]
   85c18:	f000 f9be 	bl	85f98 <__malloc_unlock>
   85c1c:	3408      	adds	r4, #8
   85c1e:	4620      	mov	r0, r4
   85c20:	b003      	add	sp, #12
   85c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85c26:	bf00      	nop
   85c28:	20070670 	.word	0x20070670
   85c2c:	2007ad34 	.word	0x2007ad34
   85c30:	20070a7c 	.word	0x20070a7c
   85c34:	2007ad30 	.word	0x2007ad30
   85c38:	2007ad2c 	.word	0x2007ad2c
   85c3c:	2007ad38 	.word	0x2007ad38
   85c40:	f1bc 0f14 	cmp.w	ip, #20
   85c44:	d961      	bls.n	85d0a <_malloc_r+0x40e>
   85c46:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
   85c4a:	f200 808f 	bhi.w	85d6c <_malloc_r+0x470>
   85c4e:	ea4f 3c15 	mov.w	ip, r5, lsr #12
   85c52:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
   85c56:	ea4f 014c 	mov.w	r1, ip, lsl #1
   85c5a:	e697      	b.n	8598c <_malloc_r+0x90>
   85c5c:	0a4b      	lsrs	r3, r1, #9
   85c5e:	2b04      	cmp	r3, #4
   85c60:	d958      	bls.n	85d14 <_malloc_r+0x418>
   85c62:	2b14      	cmp	r3, #20
   85c64:	f200 80ad 	bhi.w	85dc2 <_malloc_r+0x4c6>
   85c68:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   85c6c:	0050      	lsls	r0, r2, #1
   85c6e:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   85c72:	6883      	ldr	r3, [r0, #8]
   85c74:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 85e30 <_malloc_r+0x534>
   85c78:	4283      	cmp	r3, r0
   85c7a:	f000 808a 	beq.w	85d92 <_malloc_r+0x496>
   85c7e:	685a      	ldr	r2, [r3, #4]
   85c80:	f022 0203 	bic.w	r2, r2, #3
   85c84:	4291      	cmp	r1, r2
   85c86:	d202      	bcs.n	85c8e <_malloc_r+0x392>
   85c88:	689b      	ldr	r3, [r3, #8]
   85c8a:	4298      	cmp	r0, r3
   85c8c:	d1f7      	bne.n	85c7e <_malloc_r+0x382>
   85c8e:	68d9      	ldr	r1, [r3, #12]
   85c90:	687a      	ldr	r2, [r7, #4]
   85c92:	60e1      	str	r1, [r4, #12]
   85c94:	60a3      	str	r3, [r4, #8]
   85c96:	608c      	str	r4, [r1, #8]
   85c98:	60dc      	str	r4, [r3, #12]
   85c9a:	e6b6      	b.n	85a0a <_malloc_r+0x10e>
   85c9c:	f045 0701 	orr.w	r7, r5, #1
   85ca0:	f042 0101 	orr.w	r1, r2, #1
   85ca4:	4425      	add	r5, r4
   85ca6:	6067      	str	r7, [r4, #4]
   85ca8:	4630      	mov	r0, r6
   85caa:	615d      	str	r5, [r3, #20]
   85cac:	611d      	str	r5, [r3, #16]
   85cae:	f8c5 e00c 	str.w	lr, [r5, #12]
   85cb2:	f8c5 e008 	str.w	lr, [r5, #8]
   85cb6:	6069      	str	r1, [r5, #4]
   85cb8:	50aa      	str	r2, [r5, r2]
   85cba:	3408      	adds	r4, #8
   85cbc:	f000 f96c 	bl	85f98 <__malloc_unlock>
   85cc0:	e648      	b.n	85954 <_malloc_r+0x58>
   85cc2:	685a      	ldr	r2, [r3, #4]
   85cc4:	e6a1      	b.n	85a0a <_malloc_r+0x10e>
   85cc6:	f109 0901 	add.w	r9, r9, #1
   85cca:	f019 0f03 	tst.w	r9, #3
   85cce:	f104 0408 	add.w	r4, r4, #8
   85cd2:	f47f aead 	bne.w	85a30 <_malloc_r+0x134>
   85cd6:	e02d      	b.n	85d34 <_malloc_r+0x438>
   85cd8:	f104 0308 	add.w	r3, r4, #8
   85cdc:	6964      	ldr	r4, [r4, #20]
   85cde:	42a3      	cmp	r3, r4
   85ce0:	bf08      	it	eq
   85ce2:	f10c 0c02 	addeq.w	ip, ip, #2
   85ce6:	f43f ae67 	beq.w	859b8 <_malloc_r+0xbc>
   85cea:	e623      	b.n	85934 <_malloc_r+0x38>
   85cec:	4419      	add	r1, r3
   85cee:	6848      	ldr	r0, [r1, #4]
   85cf0:	461c      	mov	r4, r3
   85cf2:	f854 2f08 	ldr.w	r2, [r4, #8]!
   85cf6:	68db      	ldr	r3, [r3, #12]
   85cf8:	f040 0501 	orr.w	r5, r0, #1
   85cfc:	604d      	str	r5, [r1, #4]
   85cfe:	4630      	mov	r0, r6
   85d00:	60d3      	str	r3, [r2, #12]
   85d02:	609a      	str	r2, [r3, #8]
   85d04:	f000 f948 	bl	85f98 <__malloc_unlock>
   85d08:	e624      	b.n	85954 <_malloc_r+0x58>
   85d0a:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
   85d0e:	ea4f 014c 	mov.w	r1, ip, lsl #1
   85d12:	e63b      	b.n	8598c <_malloc_r+0x90>
   85d14:	098a      	lsrs	r2, r1, #6
   85d16:	3238      	adds	r2, #56	; 0x38
   85d18:	0050      	lsls	r0, r2, #1
   85d1a:	e7a8      	b.n	85c6e <_malloc_r+0x372>
   85d1c:	42bc      	cmp	r4, r7
   85d1e:	f43f af02 	beq.w	85b26 <_malloc_r+0x22a>
   85d22:	68bc      	ldr	r4, [r7, #8]
   85d24:	6862      	ldr	r2, [r4, #4]
   85d26:	f022 0203 	bic.w	r2, r2, #3
   85d2a:	e761      	b.n	85bf0 <_malloc_r+0x2f4>
   85d2c:	f8d8 8000 	ldr.w	r8, [r8]
   85d30:	4598      	cmp	r8, r3
   85d32:	d17a      	bne.n	85e2a <_malloc_r+0x52e>
   85d34:	f01c 0f03 	tst.w	ip, #3
   85d38:	f1a8 0308 	sub.w	r3, r8, #8
   85d3c:	f10c 3cff 	add.w	ip, ip, #4294967295
   85d40:	d1f4      	bne.n	85d2c <_malloc_r+0x430>
   85d42:	687b      	ldr	r3, [r7, #4]
   85d44:	ea23 0300 	bic.w	r3, r3, r0
   85d48:	607b      	str	r3, [r7, #4]
   85d4a:	0040      	lsls	r0, r0, #1
   85d4c:	4298      	cmp	r0, r3
   85d4e:	f63f aebe 	bhi.w	85ace <_malloc_r+0x1d2>
   85d52:	2800      	cmp	r0, #0
   85d54:	f43f aebb 	beq.w	85ace <_malloc_r+0x1d2>
   85d58:	4203      	tst	r3, r0
   85d5a:	46cc      	mov	ip, r9
   85d5c:	f47f ae64 	bne.w	85a28 <_malloc_r+0x12c>
   85d60:	0040      	lsls	r0, r0, #1
   85d62:	4203      	tst	r3, r0
   85d64:	f10c 0c04 	add.w	ip, ip, #4
   85d68:	d0fa      	beq.n	85d60 <_malloc_r+0x464>
   85d6a:	e65d      	b.n	85a28 <_malloc_r+0x12c>
   85d6c:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
   85d70:	d819      	bhi.n	85da6 <_malloc_r+0x4aa>
   85d72:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
   85d76:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
   85d7a:	ea4f 014c 	mov.w	r1, ip, lsl #1
   85d7e:	e605      	b.n	8598c <_malloc_r+0x90>
   85d80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   85d84:	e6ee      	b.n	85b64 <_malloc_r+0x268>
   85d86:	2301      	movs	r3, #1
   85d88:	f8c8 3004 	str.w	r3, [r8, #4]
   85d8c:	4644      	mov	r4, r8
   85d8e:	2200      	movs	r2, #0
   85d90:	e72e      	b.n	85bf0 <_malloc_r+0x2f4>
   85d92:	1092      	asrs	r2, r2, #2
   85d94:	2001      	movs	r0, #1
   85d96:	4090      	lsls	r0, r2
   85d98:	f8d8 2004 	ldr.w	r2, [r8, #4]
   85d9c:	4619      	mov	r1, r3
   85d9e:	4302      	orrs	r2, r0
   85da0:	f8c8 2004 	str.w	r2, [r8, #4]
   85da4:	e775      	b.n	85c92 <_malloc_r+0x396>
   85da6:	f240 5354 	movw	r3, #1364	; 0x554
   85daa:	459c      	cmp	ip, r3
   85dac:	d81b      	bhi.n	85de6 <_malloc_r+0x4ea>
   85dae:	ea4f 4c95 	mov.w	ip, r5, lsr #18
   85db2:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
   85db6:	ea4f 014c 	mov.w	r1, ip, lsl #1
   85dba:	e5e7      	b.n	8598c <_malloc_r+0x90>
   85dbc:	f10a 0a10 	add.w	sl, sl, #16
   85dc0:	e6a3      	b.n	85b0a <_malloc_r+0x20e>
   85dc2:	2b54      	cmp	r3, #84	; 0x54
   85dc4:	d81f      	bhi.n	85e06 <_malloc_r+0x50a>
   85dc6:	0b0a      	lsrs	r2, r1, #12
   85dc8:	326e      	adds	r2, #110	; 0x6e
   85dca:	0050      	lsls	r0, r2, #1
   85dcc:	e74f      	b.n	85c6e <_malloc_r+0x372>
   85dce:	f3cb 010b 	ubfx	r1, fp, #0, #12
   85dd2:	2900      	cmp	r1, #0
   85dd4:	f47f aeb1 	bne.w	85b3a <_malloc_r+0x23e>
   85dd8:	eb0a 0109 	add.w	r1, sl, r9
   85ddc:	68ba      	ldr	r2, [r7, #8]
   85dde:	f041 0101 	orr.w	r1, r1, #1
   85de2:	6051      	str	r1, [r2, #4]
   85de4:	e6f6      	b.n	85bd4 <_malloc_r+0x2d8>
   85de6:	21fc      	movs	r1, #252	; 0xfc
   85de8:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
   85dec:	e5ce      	b.n	8598c <_malloc_r+0x90>
   85dee:	2201      	movs	r2, #1
   85df0:	f04f 0a00 	mov.w	sl, #0
   85df4:	e6cb      	b.n	85b8e <_malloc_r+0x292>
   85df6:	f104 0108 	add.w	r1, r4, #8
   85dfa:	4630      	mov	r0, r6
   85dfc:	f7ff fa80 	bl	85300 <_free_r>
   85e00:	f8da 3000 	ldr.w	r3, [sl]
   85e04:	e6e6      	b.n	85bd4 <_malloc_r+0x2d8>
   85e06:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   85e0a:	d803      	bhi.n	85e14 <_malloc_r+0x518>
   85e0c:	0bca      	lsrs	r2, r1, #15
   85e0e:	3277      	adds	r2, #119	; 0x77
   85e10:	0050      	lsls	r0, r2, #1
   85e12:	e72c      	b.n	85c6e <_malloc_r+0x372>
   85e14:	f240 5254 	movw	r2, #1364	; 0x554
   85e18:	4293      	cmp	r3, r2
   85e1a:	d803      	bhi.n	85e24 <_malloc_r+0x528>
   85e1c:	0c8a      	lsrs	r2, r1, #18
   85e1e:	327c      	adds	r2, #124	; 0x7c
   85e20:	0050      	lsls	r0, r2, #1
   85e22:	e724      	b.n	85c6e <_malloc_r+0x372>
   85e24:	20fc      	movs	r0, #252	; 0xfc
   85e26:	227e      	movs	r2, #126	; 0x7e
   85e28:	e721      	b.n	85c6e <_malloc_r+0x372>
   85e2a:	687b      	ldr	r3, [r7, #4]
   85e2c:	e78d      	b.n	85d4a <_malloc_r+0x44e>
   85e2e:	bf00      	nop
   85e30:	20070670 	.word	0x20070670

00085e34 <memchr>:
   85e34:	0783      	lsls	r3, r0, #30
   85e36:	b470      	push	{r4, r5, r6}
   85e38:	b2c9      	uxtb	r1, r1
   85e3a:	d040      	beq.n	85ebe <memchr+0x8a>
   85e3c:	1e54      	subs	r4, r2, #1
   85e3e:	b32a      	cbz	r2, 85e8c <memchr+0x58>
   85e40:	7803      	ldrb	r3, [r0, #0]
   85e42:	428b      	cmp	r3, r1
   85e44:	d023      	beq.n	85e8e <memchr+0x5a>
   85e46:	1c43      	adds	r3, r0, #1
   85e48:	e004      	b.n	85e54 <memchr+0x20>
   85e4a:	b1fc      	cbz	r4, 85e8c <memchr+0x58>
   85e4c:	7805      	ldrb	r5, [r0, #0]
   85e4e:	4614      	mov	r4, r2
   85e50:	428d      	cmp	r5, r1
   85e52:	d01c      	beq.n	85e8e <memchr+0x5a>
   85e54:	f013 0f03 	tst.w	r3, #3
   85e58:	4618      	mov	r0, r3
   85e5a:	f104 32ff 	add.w	r2, r4, #4294967295
   85e5e:	f103 0301 	add.w	r3, r3, #1
   85e62:	d1f2      	bne.n	85e4a <memchr+0x16>
   85e64:	2c03      	cmp	r4, #3
   85e66:	d814      	bhi.n	85e92 <memchr+0x5e>
   85e68:	1e65      	subs	r5, r4, #1
   85e6a:	b354      	cbz	r4, 85ec2 <memchr+0x8e>
   85e6c:	7803      	ldrb	r3, [r0, #0]
   85e6e:	428b      	cmp	r3, r1
   85e70:	d00d      	beq.n	85e8e <memchr+0x5a>
   85e72:	1c42      	adds	r2, r0, #1
   85e74:	2300      	movs	r3, #0
   85e76:	e002      	b.n	85e7e <memchr+0x4a>
   85e78:	7804      	ldrb	r4, [r0, #0]
   85e7a:	428c      	cmp	r4, r1
   85e7c:	d007      	beq.n	85e8e <memchr+0x5a>
   85e7e:	42ab      	cmp	r3, r5
   85e80:	4610      	mov	r0, r2
   85e82:	f103 0301 	add.w	r3, r3, #1
   85e86:	f102 0201 	add.w	r2, r2, #1
   85e8a:	d1f5      	bne.n	85e78 <memchr+0x44>
   85e8c:	2000      	movs	r0, #0
   85e8e:	bc70      	pop	{r4, r5, r6}
   85e90:	4770      	bx	lr
   85e92:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
   85e96:	4603      	mov	r3, r0
   85e98:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   85e9c:	681a      	ldr	r2, [r3, #0]
   85e9e:	4618      	mov	r0, r3
   85ea0:	4072      	eors	r2, r6
   85ea2:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
   85ea6:	ea25 0202 	bic.w	r2, r5, r2
   85eaa:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   85eae:	f103 0304 	add.w	r3, r3, #4
   85eb2:	d1d9      	bne.n	85e68 <memchr+0x34>
   85eb4:	3c04      	subs	r4, #4
   85eb6:	2c03      	cmp	r4, #3
   85eb8:	4618      	mov	r0, r3
   85eba:	d8ef      	bhi.n	85e9c <memchr+0x68>
   85ebc:	e7d4      	b.n	85e68 <memchr+0x34>
   85ebe:	4614      	mov	r4, r2
   85ec0:	e7d0      	b.n	85e64 <memchr+0x30>
   85ec2:	4620      	mov	r0, r4
   85ec4:	e7e3      	b.n	85e8e <memchr+0x5a>
   85ec6:	bf00      	nop

00085ec8 <memmove>:
   85ec8:	4288      	cmp	r0, r1
   85eca:	b4f0      	push	{r4, r5, r6, r7}
   85ecc:	d910      	bls.n	85ef0 <memmove+0x28>
   85ece:	188c      	adds	r4, r1, r2
   85ed0:	42a0      	cmp	r0, r4
   85ed2:	d20d      	bcs.n	85ef0 <memmove+0x28>
   85ed4:	1885      	adds	r5, r0, r2
   85ed6:	1e53      	subs	r3, r2, #1
   85ed8:	b142      	cbz	r2, 85eec <memmove+0x24>
   85eda:	4621      	mov	r1, r4
   85edc:	462a      	mov	r2, r5
   85ede:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
   85ee2:	3b01      	subs	r3, #1
   85ee4:	f802 4d01 	strb.w	r4, [r2, #-1]!
   85ee8:	1c5c      	adds	r4, r3, #1
   85eea:	d1f8      	bne.n	85ede <memmove+0x16>
   85eec:	bcf0      	pop	{r4, r5, r6, r7}
   85eee:	4770      	bx	lr
   85ef0:	2a0f      	cmp	r2, #15
   85ef2:	d944      	bls.n	85f7e <memmove+0xb6>
   85ef4:	ea40 0301 	orr.w	r3, r0, r1
   85ef8:	079b      	lsls	r3, r3, #30
   85efa:	d144      	bne.n	85f86 <memmove+0xbe>
   85efc:	f1a2 0710 	sub.w	r7, r2, #16
   85f00:	093f      	lsrs	r7, r7, #4
   85f02:	eb00 1607 	add.w	r6, r0, r7, lsl #4
   85f06:	3610      	adds	r6, #16
   85f08:	460c      	mov	r4, r1
   85f0a:	4603      	mov	r3, r0
   85f0c:	6825      	ldr	r5, [r4, #0]
   85f0e:	3310      	adds	r3, #16
   85f10:	f843 5c10 	str.w	r5, [r3, #-16]
   85f14:	6865      	ldr	r5, [r4, #4]
   85f16:	3410      	adds	r4, #16
   85f18:	f843 5c0c 	str.w	r5, [r3, #-12]
   85f1c:	f854 5c08 	ldr.w	r5, [r4, #-8]
   85f20:	f843 5c08 	str.w	r5, [r3, #-8]
   85f24:	f854 5c04 	ldr.w	r5, [r4, #-4]
   85f28:	f843 5c04 	str.w	r5, [r3, #-4]
   85f2c:	42b3      	cmp	r3, r6
   85f2e:	d1ed      	bne.n	85f0c <memmove+0x44>
   85f30:	1c7b      	adds	r3, r7, #1
   85f32:	f002 0c0f 	and.w	ip, r2, #15
   85f36:	011b      	lsls	r3, r3, #4
   85f38:	f1bc 0f03 	cmp.w	ip, #3
   85f3c:	4419      	add	r1, r3
   85f3e:	4403      	add	r3, r0
   85f40:	d923      	bls.n	85f8a <memmove+0xc2>
   85f42:	460e      	mov	r6, r1
   85f44:	461d      	mov	r5, r3
   85f46:	4664      	mov	r4, ip
   85f48:	f856 7b04 	ldr.w	r7, [r6], #4
   85f4c:	3c04      	subs	r4, #4
   85f4e:	2c03      	cmp	r4, #3
   85f50:	f845 7b04 	str.w	r7, [r5], #4
   85f54:	d8f8      	bhi.n	85f48 <memmove+0x80>
   85f56:	f1ac 0404 	sub.w	r4, ip, #4
   85f5a:	f024 0403 	bic.w	r4, r4, #3
   85f5e:	3404      	adds	r4, #4
   85f60:	f002 0203 	and.w	r2, r2, #3
   85f64:	4423      	add	r3, r4
   85f66:	4421      	add	r1, r4
   85f68:	2a00      	cmp	r2, #0
   85f6a:	d0bf      	beq.n	85eec <memmove+0x24>
   85f6c:	441a      	add	r2, r3
   85f6e:	f811 4b01 	ldrb.w	r4, [r1], #1
   85f72:	f803 4b01 	strb.w	r4, [r3], #1
   85f76:	4293      	cmp	r3, r2
   85f78:	d1f9      	bne.n	85f6e <memmove+0xa6>
   85f7a:	bcf0      	pop	{r4, r5, r6, r7}
   85f7c:	4770      	bx	lr
   85f7e:	4603      	mov	r3, r0
   85f80:	2a00      	cmp	r2, #0
   85f82:	d1f3      	bne.n	85f6c <memmove+0xa4>
   85f84:	e7b2      	b.n	85eec <memmove+0x24>
   85f86:	4603      	mov	r3, r0
   85f88:	e7f0      	b.n	85f6c <memmove+0xa4>
   85f8a:	4662      	mov	r2, ip
   85f8c:	2a00      	cmp	r2, #0
   85f8e:	d1ed      	bne.n	85f6c <memmove+0xa4>
   85f90:	e7ac      	b.n	85eec <memmove+0x24>
   85f92:	bf00      	nop

00085f94 <__malloc_lock>:
   85f94:	4770      	bx	lr
   85f96:	bf00      	nop

00085f98 <__malloc_unlock>:
   85f98:	4770      	bx	lr
   85f9a:	bf00      	nop

00085f9c <_realloc_r>:
   85f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85fa0:	460c      	mov	r4, r1
   85fa2:	b083      	sub	sp, #12
   85fa4:	4690      	mov	r8, r2
   85fa6:	4681      	mov	r9, r0
   85fa8:	2900      	cmp	r1, #0
   85faa:	f000 80ba 	beq.w	86122 <_realloc_r+0x186>
   85fae:	f7ff fff1 	bl	85f94 <__malloc_lock>
   85fb2:	f108 060b 	add.w	r6, r8, #11
   85fb6:	f854 3c04 	ldr.w	r3, [r4, #-4]
   85fba:	2e16      	cmp	r6, #22
   85fbc:	f023 0503 	bic.w	r5, r3, #3
   85fc0:	f1a4 0708 	sub.w	r7, r4, #8
   85fc4:	d84b      	bhi.n	8605e <_realloc_r+0xc2>
   85fc6:	2110      	movs	r1, #16
   85fc8:	460e      	mov	r6, r1
   85fca:	45b0      	cmp	r8, r6
   85fcc:	d84c      	bhi.n	86068 <_realloc_r+0xcc>
   85fce:	428d      	cmp	r5, r1
   85fd0:	da51      	bge.n	86076 <_realloc_r+0xda>
   85fd2:	f8df b384 	ldr.w	fp, [pc, #900]	; 86358 <_realloc_r+0x3bc>
   85fd6:	1978      	adds	r0, r7, r5
   85fd8:	f8db e008 	ldr.w	lr, [fp, #8]
   85fdc:	4586      	cmp	lr, r0
   85fde:	f000 80a6 	beq.w	8612e <_realloc_r+0x192>
   85fe2:	6842      	ldr	r2, [r0, #4]
   85fe4:	f022 0c01 	bic.w	ip, r2, #1
   85fe8:	4484      	add	ip, r0
   85fea:	f8dc c004 	ldr.w	ip, [ip, #4]
   85fee:	f01c 0f01 	tst.w	ip, #1
   85ff2:	d054      	beq.n	8609e <_realloc_r+0x102>
   85ff4:	2200      	movs	r2, #0
   85ff6:	4610      	mov	r0, r2
   85ff8:	07db      	lsls	r3, r3, #31
   85ffa:	d46f      	bmi.n	860dc <_realloc_r+0x140>
   85ffc:	f854 3c08 	ldr.w	r3, [r4, #-8]
   86000:	ebc3 0a07 	rsb	sl, r3, r7
   86004:	f8da 3004 	ldr.w	r3, [sl, #4]
   86008:	f023 0303 	bic.w	r3, r3, #3
   8600c:	442b      	add	r3, r5
   8600e:	2800      	cmp	r0, #0
   86010:	d062      	beq.n	860d8 <_realloc_r+0x13c>
   86012:	4570      	cmp	r0, lr
   86014:	f000 80e9 	beq.w	861ea <_realloc_r+0x24e>
   86018:	eb02 0e03 	add.w	lr, r2, r3
   8601c:	458e      	cmp	lr, r1
   8601e:	db5b      	blt.n	860d8 <_realloc_r+0x13c>
   86020:	68c3      	ldr	r3, [r0, #12]
   86022:	6882      	ldr	r2, [r0, #8]
   86024:	46d0      	mov	r8, sl
   86026:	60d3      	str	r3, [r2, #12]
   86028:	609a      	str	r2, [r3, #8]
   8602a:	f858 1f08 	ldr.w	r1, [r8, #8]!
   8602e:	f8da 300c 	ldr.w	r3, [sl, #12]
   86032:	1f2a      	subs	r2, r5, #4
   86034:	2a24      	cmp	r2, #36	; 0x24
   86036:	60cb      	str	r3, [r1, #12]
   86038:	6099      	str	r1, [r3, #8]
   8603a:	f200 8123 	bhi.w	86284 <_realloc_r+0x2e8>
   8603e:	2a13      	cmp	r2, #19
   86040:	f240 80b0 	bls.w	861a4 <_realloc_r+0x208>
   86044:	6823      	ldr	r3, [r4, #0]
   86046:	2a1b      	cmp	r2, #27
   86048:	f8ca 3008 	str.w	r3, [sl, #8]
   8604c:	6863      	ldr	r3, [r4, #4]
   8604e:	f8ca 300c 	str.w	r3, [sl, #12]
   86052:	f200 812b 	bhi.w	862ac <_realloc_r+0x310>
   86056:	3408      	adds	r4, #8
   86058:	f10a 0310 	add.w	r3, sl, #16
   8605c:	e0a3      	b.n	861a6 <_realloc_r+0x20a>
   8605e:	f026 0607 	bic.w	r6, r6, #7
   86062:	2e00      	cmp	r6, #0
   86064:	4631      	mov	r1, r6
   86066:	dab0      	bge.n	85fca <_realloc_r+0x2e>
   86068:	230c      	movs	r3, #12
   8606a:	2000      	movs	r0, #0
   8606c:	f8c9 3000 	str.w	r3, [r9]
   86070:	b003      	add	sp, #12
   86072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86076:	46a0      	mov	r8, r4
   86078:	1baa      	subs	r2, r5, r6
   8607a:	2a0f      	cmp	r2, #15
   8607c:	f003 0301 	and.w	r3, r3, #1
   86080:	d81a      	bhi.n	860b8 <_realloc_r+0x11c>
   86082:	432b      	orrs	r3, r5
   86084:	607b      	str	r3, [r7, #4]
   86086:	443d      	add	r5, r7
   86088:	686b      	ldr	r3, [r5, #4]
   8608a:	f043 0301 	orr.w	r3, r3, #1
   8608e:	606b      	str	r3, [r5, #4]
   86090:	4648      	mov	r0, r9
   86092:	f7ff ff81 	bl	85f98 <__malloc_unlock>
   86096:	4640      	mov	r0, r8
   86098:	b003      	add	sp, #12
   8609a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8609e:	f022 0203 	bic.w	r2, r2, #3
   860a2:	eb02 0c05 	add.w	ip, r2, r5
   860a6:	458c      	cmp	ip, r1
   860a8:	dba6      	blt.n	85ff8 <_realloc_r+0x5c>
   860aa:	68c2      	ldr	r2, [r0, #12]
   860ac:	6881      	ldr	r1, [r0, #8]
   860ae:	46a0      	mov	r8, r4
   860b0:	60ca      	str	r2, [r1, #12]
   860b2:	4665      	mov	r5, ip
   860b4:	6091      	str	r1, [r2, #8]
   860b6:	e7df      	b.n	86078 <_realloc_r+0xdc>
   860b8:	19b9      	adds	r1, r7, r6
   860ba:	4333      	orrs	r3, r6
   860bc:	f042 0001 	orr.w	r0, r2, #1
   860c0:	607b      	str	r3, [r7, #4]
   860c2:	440a      	add	r2, r1
   860c4:	6048      	str	r0, [r1, #4]
   860c6:	6853      	ldr	r3, [r2, #4]
   860c8:	3108      	adds	r1, #8
   860ca:	f043 0301 	orr.w	r3, r3, #1
   860ce:	6053      	str	r3, [r2, #4]
   860d0:	4648      	mov	r0, r9
   860d2:	f7ff f915 	bl	85300 <_free_r>
   860d6:	e7db      	b.n	86090 <_realloc_r+0xf4>
   860d8:	428b      	cmp	r3, r1
   860da:	da33      	bge.n	86144 <_realloc_r+0x1a8>
   860dc:	4641      	mov	r1, r8
   860de:	4648      	mov	r0, r9
   860e0:	f7ff fc0c 	bl	858fc <_malloc_r>
   860e4:	4680      	mov	r8, r0
   860e6:	2800      	cmp	r0, #0
   860e8:	d0d2      	beq.n	86090 <_realloc_r+0xf4>
   860ea:	f854 3c04 	ldr.w	r3, [r4, #-4]
   860ee:	f1a0 0108 	sub.w	r1, r0, #8
   860f2:	f023 0201 	bic.w	r2, r3, #1
   860f6:	443a      	add	r2, r7
   860f8:	4291      	cmp	r1, r2
   860fa:	f000 80bc 	beq.w	86276 <_realloc_r+0x2da>
   860fe:	1f2a      	subs	r2, r5, #4
   86100:	2a24      	cmp	r2, #36	; 0x24
   86102:	d86e      	bhi.n	861e2 <_realloc_r+0x246>
   86104:	2a13      	cmp	r2, #19
   86106:	d842      	bhi.n	8618e <_realloc_r+0x1f2>
   86108:	4603      	mov	r3, r0
   8610a:	4622      	mov	r2, r4
   8610c:	6811      	ldr	r1, [r2, #0]
   8610e:	6019      	str	r1, [r3, #0]
   86110:	6851      	ldr	r1, [r2, #4]
   86112:	6059      	str	r1, [r3, #4]
   86114:	6892      	ldr	r2, [r2, #8]
   86116:	609a      	str	r2, [r3, #8]
   86118:	4621      	mov	r1, r4
   8611a:	4648      	mov	r0, r9
   8611c:	f7ff f8f0 	bl	85300 <_free_r>
   86120:	e7b6      	b.n	86090 <_realloc_r+0xf4>
   86122:	4611      	mov	r1, r2
   86124:	b003      	add	sp, #12
   86126:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8612a:	f7ff bbe7 	b.w	858fc <_malloc_r>
   8612e:	f8de 2004 	ldr.w	r2, [lr, #4]
   86132:	f106 0c10 	add.w	ip, r6, #16
   86136:	f022 0203 	bic.w	r2, r2, #3
   8613a:	1950      	adds	r0, r2, r5
   8613c:	4560      	cmp	r0, ip
   8613e:	da3d      	bge.n	861bc <_realloc_r+0x220>
   86140:	4670      	mov	r0, lr
   86142:	e759      	b.n	85ff8 <_realloc_r+0x5c>
   86144:	46d0      	mov	r8, sl
   86146:	f858 0f08 	ldr.w	r0, [r8, #8]!
   8614a:	f8da 100c 	ldr.w	r1, [sl, #12]
   8614e:	1f2a      	subs	r2, r5, #4
   86150:	2a24      	cmp	r2, #36	; 0x24
   86152:	60c1      	str	r1, [r0, #12]
   86154:	6088      	str	r0, [r1, #8]
   86156:	f200 80a0 	bhi.w	8629a <_realloc_r+0x2fe>
   8615a:	2a13      	cmp	r2, #19
   8615c:	f240 809b 	bls.w	86296 <_realloc_r+0x2fa>
   86160:	6821      	ldr	r1, [r4, #0]
   86162:	2a1b      	cmp	r2, #27
   86164:	f8ca 1008 	str.w	r1, [sl, #8]
   86168:	6861      	ldr	r1, [r4, #4]
   8616a:	f8ca 100c 	str.w	r1, [sl, #12]
   8616e:	f200 80b2 	bhi.w	862d6 <_realloc_r+0x33a>
   86172:	3408      	adds	r4, #8
   86174:	f10a 0210 	add.w	r2, sl, #16
   86178:	6821      	ldr	r1, [r4, #0]
   8617a:	461d      	mov	r5, r3
   8617c:	6011      	str	r1, [r2, #0]
   8617e:	6861      	ldr	r1, [r4, #4]
   86180:	4657      	mov	r7, sl
   86182:	6051      	str	r1, [r2, #4]
   86184:	68a3      	ldr	r3, [r4, #8]
   86186:	6093      	str	r3, [r2, #8]
   86188:	f8da 3004 	ldr.w	r3, [sl, #4]
   8618c:	e774      	b.n	86078 <_realloc_r+0xdc>
   8618e:	6823      	ldr	r3, [r4, #0]
   86190:	2a1b      	cmp	r2, #27
   86192:	6003      	str	r3, [r0, #0]
   86194:	6863      	ldr	r3, [r4, #4]
   86196:	6043      	str	r3, [r0, #4]
   86198:	d862      	bhi.n	86260 <_realloc_r+0x2c4>
   8619a:	f100 0308 	add.w	r3, r0, #8
   8619e:	f104 0208 	add.w	r2, r4, #8
   861a2:	e7b3      	b.n	8610c <_realloc_r+0x170>
   861a4:	4643      	mov	r3, r8
   861a6:	6822      	ldr	r2, [r4, #0]
   861a8:	4675      	mov	r5, lr
   861aa:	601a      	str	r2, [r3, #0]
   861ac:	6862      	ldr	r2, [r4, #4]
   861ae:	4657      	mov	r7, sl
   861b0:	605a      	str	r2, [r3, #4]
   861b2:	68a2      	ldr	r2, [r4, #8]
   861b4:	609a      	str	r2, [r3, #8]
   861b6:	f8da 3004 	ldr.w	r3, [sl, #4]
   861ba:	e75d      	b.n	86078 <_realloc_r+0xdc>
   861bc:	1b83      	subs	r3, r0, r6
   861be:	4437      	add	r7, r6
   861c0:	f043 0301 	orr.w	r3, r3, #1
   861c4:	f8cb 7008 	str.w	r7, [fp, #8]
   861c8:	607b      	str	r3, [r7, #4]
   861ca:	f854 3c04 	ldr.w	r3, [r4, #-4]
   861ce:	4648      	mov	r0, r9
   861d0:	f003 0301 	and.w	r3, r3, #1
   861d4:	431e      	orrs	r6, r3
   861d6:	f844 6c04 	str.w	r6, [r4, #-4]
   861da:	f7ff fedd 	bl	85f98 <__malloc_unlock>
   861de:	4620      	mov	r0, r4
   861e0:	e75a      	b.n	86098 <_realloc_r+0xfc>
   861e2:	4621      	mov	r1, r4
   861e4:	f7ff fe70 	bl	85ec8 <memmove>
   861e8:	e796      	b.n	86118 <_realloc_r+0x17c>
   861ea:	eb02 0c03 	add.w	ip, r2, r3
   861ee:	f106 0210 	add.w	r2, r6, #16
   861f2:	4594      	cmp	ip, r2
   861f4:	f6ff af70 	blt.w	860d8 <_realloc_r+0x13c>
   861f8:	4657      	mov	r7, sl
   861fa:	f857 1f08 	ldr.w	r1, [r7, #8]!
   861fe:	f8da 300c 	ldr.w	r3, [sl, #12]
   86202:	1f2a      	subs	r2, r5, #4
   86204:	2a24      	cmp	r2, #36	; 0x24
   86206:	60cb      	str	r3, [r1, #12]
   86208:	6099      	str	r1, [r3, #8]
   8620a:	f200 8086 	bhi.w	8631a <_realloc_r+0x37e>
   8620e:	2a13      	cmp	r2, #19
   86210:	d977      	bls.n	86302 <_realloc_r+0x366>
   86212:	6823      	ldr	r3, [r4, #0]
   86214:	2a1b      	cmp	r2, #27
   86216:	f8ca 3008 	str.w	r3, [sl, #8]
   8621a:	6863      	ldr	r3, [r4, #4]
   8621c:	f8ca 300c 	str.w	r3, [sl, #12]
   86220:	f200 8084 	bhi.w	8632c <_realloc_r+0x390>
   86224:	3408      	adds	r4, #8
   86226:	f10a 0310 	add.w	r3, sl, #16
   8622a:	6822      	ldr	r2, [r4, #0]
   8622c:	601a      	str	r2, [r3, #0]
   8622e:	6862      	ldr	r2, [r4, #4]
   86230:	605a      	str	r2, [r3, #4]
   86232:	68a2      	ldr	r2, [r4, #8]
   86234:	609a      	str	r2, [r3, #8]
   86236:	ebc6 020c 	rsb	r2, r6, ip
   8623a:	eb0a 0306 	add.w	r3, sl, r6
   8623e:	f042 0201 	orr.w	r2, r2, #1
   86242:	f8cb 3008 	str.w	r3, [fp, #8]
   86246:	605a      	str	r2, [r3, #4]
   86248:	f8da 3004 	ldr.w	r3, [sl, #4]
   8624c:	4648      	mov	r0, r9
   8624e:	f003 0301 	and.w	r3, r3, #1
   86252:	431e      	orrs	r6, r3
   86254:	f8ca 6004 	str.w	r6, [sl, #4]
   86258:	f7ff fe9e 	bl	85f98 <__malloc_unlock>
   8625c:	4638      	mov	r0, r7
   8625e:	e71b      	b.n	86098 <_realloc_r+0xfc>
   86260:	68a3      	ldr	r3, [r4, #8]
   86262:	2a24      	cmp	r2, #36	; 0x24
   86264:	6083      	str	r3, [r0, #8]
   86266:	68e3      	ldr	r3, [r4, #12]
   86268:	60c3      	str	r3, [r0, #12]
   8626a:	d02b      	beq.n	862c4 <_realloc_r+0x328>
   8626c:	f100 0310 	add.w	r3, r0, #16
   86270:	f104 0210 	add.w	r2, r4, #16
   86274:	e74a      	b.n	8610c <_realloc_r+0x170>
   86276:	f850 2c04 	ldr.w	r2, [r0, #-4]
   8627a:	46a0      	mov	r8, r4
   8627c:	f022 0203 	bic.w	r2, r2, #3
   86280:	4415      	add	r5, r2
   86282:	e6f9      	b.n	86078 <_realloc_r+0xdc>
   86284:	4621      	mov	r1, r4
   86286:	4640      	mov	r0, r8
   86288:	4675      	mov	r5, lr
   8628a:	4657      	mov	r7, sl
   8628c:	f7ff fe1c 	bl	85ec8 <memmove>
   86290:	f8da 3004 	ldr.w	r3, [sl, #4]
   86294:	e6f0      	b.n	86078 <_realloc_r+0xdc>
   86296:	4642      	mov	r2, r8
   86298:	e76e      	b.n	86178 <_realloc_r+0x1dc>
   8629a:	4621      	mov	r1, r4
   8629c:	4640      	mov	r0, r8
   8629e:	461d      	mov	r5, r3
   862a0:	4657      	mov	r7, sl
   862a2:	f7ff fe11 	bl	85ec8 <memmove>
   862a6:	f8da 3004 	ldr.w	r3, [sl, #4]
   862aa:	e6e5      	b.n	86078 <_realloc_r+0xdc>
   862ac:	68a3      	ldr	r3, [r4, #8]
   862ae:	2a24      	cmp	r2, #36	; 0x24
   862b0:	f8ca 3010 	str.w	r3, [sl, #16]
   862b4:	68e3      	ldr	r3, [r4, #12]
   862b6:	f8ca 3014 	str.w	r3, [sl, #20]
   862ba:	d018      	beq.n	862ee <_realloc_r+0x352>
   862bc:	3410      	adds	r4, #16
   862be:	f10a 0318 	add.w	r3, sl, #24
   862c2:	e770      	b.n	861a6 <_realloc_r+0x20a>
   862c4:	6922      	ldr	r2, [r4, #16]
   862c6:	f100 0318 	add.w	r3, r0, #24
   862ca:	6102      	str	r2, [r0, #16]
   862cc:	6961      	ldr	r1, [r4, #20]
   862ce:	f104 0218 	add.w	r2, r4, #24
   862d2:	6141      	str	r1, [r0, #20]
   862d4:	e71a      	b.n	8610c <_realloc_r+0x170>
   862d6:	68a1      	ldr	r1, [r4, #8]
   862d8:	2a24      	cmp	r2, #36	; 0x24
   862da:	f8ca 1010 	str.w	r1, [sl, #16]
   862de:	68e1      	ldr	r1, [r4, #12]
   862e0:	f8ca 1014 	str.w	r1, [sl, #20]
   862e4:	d00f      	beq.n	86306 <_realloc_r+0x36a>
   862e6:	3410      	adds	r4, #16
   862e8:	f10a 0218 	add.w	r2, sl, #24
   862ec:	e744      	b.n	86178 <_realloc_r+0x1dc>
   862ee:	6922      	ldr	r2, [r4, #16]
   862f0:	f10a 0320 	add.w	r3, sl, #32
   862f4:	f8ca 2018 	str.w	r2, [sl, #24]
   862f8:	6962      	ldr	r2, [r4, #20]
   862fa:	3418      	adds	r4, #24
   862fc:	f8ca 201c 	str.w	r2, [sl, #28]
   86300:	e751      	b.n	861a6 <_realloc_r+0x20a>
   86302:	463b      	mov	r3, r7
   86304:	e791      	b.n	8622a <_realloc_r+0x28e>
   86306:	6921      	ldr	r1, [r4, #16]
   86308:	f10a 0220 	add.w	r2, sl, #32
   8630c:	f8ca 1018 	str.w	r1, [sl, #24]
   86310:	6961      	ldr	r1, [r4, #20]
   86312:	3418      	adds	r4, #24
   86314:	f8ca 101c 	str.w	r1, [sl, #28]
   86318:	e72e      	b.n	86178 <_realloc_r+0x1dc>
   8631a:	4621      	mov	r1, r4
   8631c:	4638      	mov	r0, r7
   8631e:	f8cd c004 	str.w	ip, [sp, #4]
   86322:	f7ff fdd1 	bl	85ec8 <memmove>
   86326:	f8dd c004 	ldr.w	ip, [sp, #4]
   8632a:	e784      	b.n	86236 <_realloc_r+0x29a>
   8632c:	68a3      	ldr	r3, [r4, #8]
   8632e:	2a24      	cmp	r2, #36	; 0x24
   86330:	f8ca 3010 	str.w	r3, [sl, #16]
   86334:	68e3      	ldr	r3, [r4, #12]
   86336:	f8ca 3014 	str.w	r3, [sl, #20]
   8633a:	d003      	beq.n	86344 <_realloc_r+0x3a8>
   8633c:	3410      	adds	r4, #16
   8633e:	f10a 0318 	add.w	r3, sl, #24
   86342:	e772      	b.n	8622a <_realloc_r+0x28e>
   86344:	6922      	ldr	r2, [r4, #16]
   86346:	f10a 0320 	add.w	r3, sl, #32
   8634a:	f8ca 2018 	str.w	r2, [sl, #24]
   8634e:	6962      	ldr	r2, [r4, #20]
   86350:	3418      	adds	r4, #24
   86352:	f8ca 201c 	str.w	r2, [sl, #28]
   86356:	e768      	b.n	8622a <_realloc_r+0x28e>
   86358:	20070670 	.word	0x20070670

0008635c <_sbrk_r>:
   8635c:	b538      	push	{r3, r4, r5, lr}
   8635e:	4c07      	ldr	r4, [pc, #28]	; (8637c <_sbrk_r+0x20>)
   86360:	2300      	movs	r3, #0
   86362:	4605      	mov	r5, r0
   86364:	4608      	mov	r0, r1
   86366:	6023      	str	r3, [r4, #0]
   86368:	f7fc fd92 	bl	82e90 <_sbrk>
   8636c:	1c43      	adds	r3, r0, #1
   8636e:	d000      	beq.n	86372 <_sbrk_r+0x16>
   86370:	bd38      	pop	{r3, r4, r5, pc}
   86372:	6823      	ldr	r3, [r4, #0]
   86374:	2b00      	cmp	r3, #0
   86376:	d0fb      	beq.n	86370 <_sbrk_r+0x14>
   86378:	602b      	str	r3, [r5, #0]
   8637a:	bd38      	pop	{r3, r4, r5, pc}
   8637c:	2007ae48 	.word	0x2007ae48

00086380 <__sread>:
   86380:	b510      	push	{r4, lr}
   86382:	460c      	mov	r4, r1
   86384:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   86388:	f000 f9c2 	bl	86710 <_read_r>
   8638c:	2800      	cmp	r0, #0
   8638e:	db03      	blt.n	86398 <__sread+0x18>
   86390:	6d23      	ldr	r3, [r4, #80]	; 0x50
   86392:	4403      	add	r3, r0
   86394:	6523      	str	r3, [r4, #80]	; 0x50
   86396:	bd10      	pop	{r4, pc}
   86398:	89a3      	ldrh	r3, [r4, #12]
   8639a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   8639e:	81a3      	strh	r3, [r4, #12]
   863a0:	bd10      	pop	{r4, pc}
   863a2:	bf00      	nop

000863a4 <__swrite>:
   863a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   863a8:	460c      	mov	r4, r1
   863aa:	8989      	ldrh	r1, [r1, #12]
   863ac:	461d      	mov	r5, r3
   863ae:	05cb      	lsls	r3, r1, #23
   863b0:	4616      	mov	r6, r2
   863b2:	4607      	mov	r7, r0
   863b4:	d506      	bpl.n	863c4 <__swrite+0x20>
   863b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   863ba:	2200      	movs	r2, #0
   863bc:	2302      	movs	r3, #2
   863be:	f000 f993 	bl	866e8 <_lseek_r>
   863c2:	89a1      	ldrh	r1, [r4, #12]
   863c4:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   863c8:	81a1      	strh	r1, [r4, #12]
   863ca:	4638      	mov	r0, r7
   863cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   863d0:	4632      	mov	r2, r6
   863d2:	462b      	mov	r3, r5
   863d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   863d8:	f000 b89e 	b.w	86518 <_write_r>

000863dc <__sseek>:
   863dc:	b510      	push	{r4, lr}
   863de:	460c      	mov	r4, r1
   863e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   863e4:	f000 f980 	bl	866e8 <_lseek_r>
   863e8:	89a3      	ldrh	r3, [r4, #12]
   863ea:	1c42      	adds	r2, r0, #1
   863ec:	bf0e      	itee	eq
   863ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   863f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   863f6:	6520      	strne	r0, [r4, #80]	; 0x50
   863f8:	81a3      	strh	r3, [r4, #12]
   863fa:	bd10      	pop	{r4, pc}

000863fc <__sclose>:
   863fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   86400:	f000 b8f2 	b.w	865e8 <_close_r>

00086404 <__swbuf_r>:
   86404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   86406:	460d      	mov	r5, r1
   86408:	4614      	mov	r4, r2
   8640a:	4607      	mov	r7, r0
   8640c:	b110      	cbz	r0, 86414 <__swbuf_r+0x10>
   8640e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   86410:	2b00      	cmp	r3, #0
   86412:	d048      	beq.n	864a6 <__swbuf_r+0xa2>
   86414:	89a2      	ldrh	r2, [r4, #12]
   86416:	69a0      	ldr	r0, [r4, #24]
   86418:	b293      	uxth	r3, r2
   8641a:	60a0      	str	r0, [r4, #8]
   8641c:	0718      	lsls	r0, r3, #28
   8641e:	d538      	bpl.n	86492 <__swbuf_r+0x8e>
   86420:	6926      	ldr	r6, [r4, #16]
   86422:	2e00      	cmp	r6, #0
   86424:	d035      	beq.n	86492 <__swbuf_r+0x8e>
   86426:	0499      	lsls	r1, r3, #18
   86428:	b2ed      	uxtb	r5, r5
   8642a:	d515      	bpl.n	86458 <__swbuf_r+0x54>
   8642c:	6823      	ldr	r3, [r4, #0]
   8642e:	6962      	ldr	r2, [r4, #20]
   86430:	1b9e      	subs	r6, r3, r6
   86432:	4296      	cmp	r6, r2
   86434:	da1c      	bge.n	86470 <__swbuf_r+0x6c>
   86436:	3601      	adds	r6, #1
   86438:	68a2      	ldr	r2, [r4, #8]
   8643a:	1c59      	adds	r1, r3, #1
   8643c:	3a01      	subs	r2, #1
   8643e:	60a2      	str	r2, [r4, #8]
   86440:	6021      	str	r1, [r4, #0]
   86442:	701d      	strb	r5, [r3, #0]
   86444:	6963      	ldr	r3, [r4, #20]
   86446:	42b3      	cmp	r3, r6
   86448:	d01a      	beq.n	86480 <__swbuf_r+0x7c>
   8644a:	89a3      	ldrh	r3, [r4, #12]
   8644c:	07db      	lsls	r3, r3, #31
   8644e:	d501      	bpl.n	86454 <__swbuf_r+0x50>
   86450:	2d0a      	cmp	r5, #10
   86452:	d015      	beq.n	86480 <__swbuf_r+0x7c>
   86454:	4628      	mov	r0, r5
   86456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   86458:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8645a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   8645e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   86462:	6663      	str	r3, [r4, #100]	; 0x64
   86464:	6823      	ldr	r3, [r4, #0]
   86466:	81a2      	strh	r2, [r4, #12]
   86468:	6962      	ldr	r2, [r4, #20]
   8646a:	1b9e      	subs	r6, r3, r6
   8646c:	4296      	cmp	r6, r2
   8646e:	dbe2      	blt.n	86436 <__swbuf_r+0x32>
   86470:	4638      	mov	r0, r7
   86472:	4621      	mov	r1, r4
   86474:	f7fe fde4 	bl	85040 <_fflush_r>
   86478:	b940      	cbnz	r0, 8648c <__swbuf_r+0x88>
   8647a:	6823      	ldr	r3, [r4, #0]
   8647c:	2601      	movs	r6, #1
   8647e:	e7db      	b.n	86438 <__swbuf_r+0x34>
   86480:	4638      	mov	r0, r7
   86482:	4621      	mov	r1, r4
   86484:	f7fe fddc 	bl	85040 <_fflush_r>
   86488:	2800      	cmp	r0, #0
   8648a:	d0e3      	beq.n	86454 <__swbuf_r+0x50>
   8648c:	f04f 30ff 	mov.w	r0, #4294967295
   86490:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   86492:	4638      	mov	r0, r7
   86494:	4621      	mov	r1, r4
   86496:	f7fe fcbd 	bl	84e14 <__swsetup_r>
   8649a:	2800      	cmp	r0, #0
   8649c:	d1f6      	bne.n	8648c <__swbuf_r+0x88>
   8649e:	89a2      	ldrh	r2, [r4, #12]
   864a0:	6926      	ldr	r6, [r4, #16]
   864a2:	b293      	uxth	r3, r2
   864a4:	e7bf      	b.n	86426 <__swbuf_r+0x22>
   864a6:	f7fe fde7 	bl	85078 <__sinit>
   864aa:	e7b3      	b.n	86414 <__swbuf_r+0x10>

000864ac <_wcrtomb_r>:
   864ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   864b0:	461e      	mov	r6, r3
   864b2:	b086      	sub	sp, #24
   864b4:	460c      	mov	r4, r1
   864b6:	4605      	mov	r5, r0
   864b8:	4617      	mov	r7, r2
   864ba:	4b0f      	ldr	r3, [pc, #60]	; (864f8 <_wcrtomb_r+0x4c>)
   864bc:	b191      	cbz	r1, 864e4 <_wcrtomb_r+0x38>
   864be:	f8d3 8000 	ldr.w	r8, [r3]
   864c2:	f7ff f999 	bl	857f8 <__locale_charset>
   864c6:	9600      	str	r6, [sp, #0]
   864c8:	4603      	mov	r3, r0
   864ca:	4621      	mov	r1, r4
   864cc:	463a      	mov	r2, r7
   864ce:	4628      	mov	r0, r5
   864d0:	47c0      	blx	r8
   864d2:	1c43      	adds	r3, r0, #1
   864d4:	d103      	bne.n	864de <_wcrtomb_r+0x32>
   864d6:	2200      	movs	r2, #0
   864d8:	238a      	movs	r3, #138	; 0x8a
   864da:	6032      	str	r2, [r6, #0]
   864dc:	602b      	str	r3, [r5, #0]
   864de:	b006      	add	sp, #24
   864e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   864e4:	681f      	ldr	r7, [r3, #0]
   864e6:	f7ff f987 	bl	857f8 <__locale_charset>
   864ea:	9600      	str	r6, [sp, #0]
   864ec:	4603      	mov	r3, r0
   864ee:	4622      	mov	r2, r4
   864f0:	4628      	mov	r0, r5
   864f2:	a903      	add	r1, sp, #12
   864f4:	47b8      	blx	r7
   864f6:	e7ec      	b.n	864d2 <_wcrtomb_r+0x26>
   864f8:	20070a80 	.word	0x20070a80

000864fc <__ascii_wctomb>:
   864fc:	b121      	cbz	r1, 86508 <__ascii_wctomb+0xc>
   864fe:	2aff      	cmp	r2, #255	; 0xff
   86500:	d804      	bhi.n	8650c <__ascii_wctomb+0x10>
   86502:	700a      	strb	r2, [r1, #0]
   86504:	2001      	movs	r0, #1
   86506:	4770      	bx	lr
   86508:	4608      	mov	r0, r1
   8650a:	4770      	bx	lr
   8650c:	238a      	movs	r3, #138	; 0x8a
   8650e:	6003      	str	r3, [r0, #0]
   86510:	f04f 30ff 	mov.w	r0, #4294967295
   86514:	4770      	bx	lr
   86516:	bf00      	nop

00086518 <_write_r>:
   86518:	b570      	push	{r4, r5, r6, lr}
   8651a:	4c08      	ldr	r4, [pc, #32]	; (8653c <_write_r+0x24>)
   8651c:	4606      	mov	r6, r0
   8651e:	2500      	movs	r5, #0
   86520:	4608      	mov	r0, r1
   86522:	4611      	mov	r1, r2
   86524:	461a      	mov	r2, r3
   86526:	6025      	str	r5, [r4, #0]
   86528:	f7fa fd3e 	bl	80fa8 <_write>
   8652c:	1c43      	adds	r3, r0, #1
   8652e:	d000      	beq.n	86532 <_write_r+0x1a>
   86530:	bd70      	pop	{r4, r5, r6, pc}
   86532:	6823      	ldr	r3, [r4, #0]
   86534:	2b00      	cmp	r3, #0
   86536:	d0fb      	beq.n	86530 <_write_r+0x18>
   86538:	6033      	str	r3, [r6, #0]
   8653a:	bd70      	pop	{r4, r5, r6, pc}
   8653c:	2007ae48 	.word	0x2007ae48

00086540 <__register_exitproc>:
   86540:	b5f0      	push	{r4, r5, r6, r7, lr}
   86542:	4c27      	ldr	r4, [pc, #156]	; (865e0 <__register_exitproc+0xa0>)
   86544:	b085      	sub	sp, #20
   86546:	6826      	ldr	r6, [r4, #0]
   86548:	4607      	mov	r7, r0
   8654a:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   8654e:	2c00      	cmp	r4, #0
   86550:	d040      	beq.n	865d4 <__register_exitproc+0x94>
   86552:	6865      	ldr	r5, [r4, #4]
   86554:	2d1f      	cmp	r5, #31
   86556:	dd1e      	ble.n	86596 <__register_exitproc+0x56>
   86558:	4822      	ldr	r0, [pc, #136]	; (865e4 <__register_exitproc+0xa4>)
   8655a:	b918      	cbnz	r0, 86564 <__register_exitproc+0x24>
   8655c:	f04f 30ff 	mov.w	r0, #4294967295
   86560:	b005      	add	sp, #20
   86562:	bdf0      	pop	{r4, r5, r6, r7, pc}
   86564:	f44f 70c8 	mov.w	r0, #400	; 0x190
   86568:	9103      	str	r1, [sp, #12]
   8656a:	9202      	str	r2, [sp, #8]
   8656c:	9301      	str	r3, [sp, #4]
   8656e:	f7ff f9bd 	bl	858ec <malloc>
   86572:	9903      	ldr	r1, [sp, #12]
   86574:	4604      	mov	r4, r0
   86576:	9a02      	ldr	r2, [sp, #8]
   86578:	9b01      	ldr	r3, [sp, #4]
   8657a:	2800      	cmp	r0, #0
   8657c:	d0ee      	beq.n	8655c <__register_exitproc+0x1c>
   8657e:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
   86582:	2000      	movs	r0, #0
   86584:	6025      	str	r5, [r4, #0]
   86586:	6060      	str	r0, [r4, #4]
   86588:	4605      	mov	r5, r0
   8658a:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   8658e:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   86592:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   86596:	b93f      	cbnz	r7, 865a8 <__register_exitproc+0x68>
   86598:	1c6b      	adds	r3, r5, #1
   8659a:	2000      	movs	r0, #0
   8659c:	3502      	adds	r5, #2
   8659e:	6063      	str	r3, [r4, #4]
   865a0:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
   865a4:	b005      	add	sp, #20
   865a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   865a8:	2601      	movs	r6, #1
   865aa:	40ae      	lsls	r6, r5
   865ac:	eb04 0085 	add.w	r0, r4, r5, lsl #2
   865b0:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   865b4:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   865b8:	2f02      	cmp	r7, #2
   865ba:	ea42 0206 	orr.w	r2, r2, r6
   865be:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   865c2:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   865c6:	d1e7      	bne.n	86598 <__register_exitproc+0x58>
   865c8:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   865cc:	431e      	orrs	r6, r3
   865ce:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
   865d2:	e7e1      	b.n	86598 <__register_exitproc+0x58>
   865d4:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   865d8:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   865dc:	e7b9      	b.n	86552 <__register_exitproc+0x12>
   865de:	bf00      	nop
   865e0:	00086c44 	.word	0x00086c44
   865e4:	000858ed 	.word	0x000858ed

000865e8 <_close_r>:
   865e8:	b538      	push	{r3, r4, r5, lr}
   865ea:	4c07      	ldr	r4, [pc, #28]	; (86608 <_close_r+0x20>)
   865ec:	2300      	movs	r3, #0
   865ee:	4605      	mov	r5, r0
   865f0:	4608      	mov	r0, r1
   865f2:	6023      	str	r3, [r4, #0]
   865f4:	f7fc fc66 	bl	82ec4 <_close>
   865f8:	1c43      	adds	r3, r0, #1
   865fa:	d000      	beq.n	865fe <_close_r+0x16>
   865fc:	bd38      	pop	{r3, r4, r5, pc}
   865fe:	6823      	ldr	r3, [r4, #0]
   86600:	2b00      	cmp	r3, #0
   86602:	d0fb      	beq.n	865fc <_close_r+0x14>
   86604:	602b      	str	r3, [r5, #0]
   86606:	bd38      	pop	{r3, r4, r5, pc}
   86608:	2007ae48 	.word	0x2007ae48

0008660c <_fclose_r>:
   8660c:	b570      	push	{r4, r5, r6, lr}
   8660e:	460c      	mov	r4, r1
   86610:	4605      	mov	r5, r0
   86612:	b131      	cbz	r1, 86622 <_fclose_r+0x16>
   86614:	b110      	cbz	r0, 8661c <_fclose_r+0x10>
   86616:	6b83      	ldr	r3, [r0, #56]	; 0x38
   86618:	2b00      	cmp	r3, #0
   8661a:	d02f      	beq.n	8667c <_fclose_r+0x70>
   8661c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   86620:	b90b      	cbnz	r3, 86626 <_fclose_r+0x1a>
   86622:	2000      	movs	r0, #0
   86624:	bd70      	pop	{r4, r5, r6, pc}
   86626:	4628      	mov	r0, r5
   86628:	4621      	mov	r1, r4
   8662a:	f7fe fd09 	bl	85040 <_fflush_r>
   8662e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   86630:	4606      	mov	r6, r0
   86632:	b133      	cbz	r3, 86642 <_fclose_r+0x36>
   86634:	4628      	mov	r0, r5
   86636:	69e1      	ldr	r1, [r4, #28]
   86638:	4798      	blx	r3
   8663a:	2800      	cmp	r0, #0
   8663c:	bfb8      	it	lt
   8663e:	f04f 36ff 	movlt.w	r6, #4294967295
   86642:	89a3      	ldrh	r3, [r4, #12]
   86644:	061b      	lsls	r3, r3, #24
   86646:	d41c      	bmi.n	86682 <_fclose_r+0x76>
   86648:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8664a:	b141      	cbz	r1, 8665e <_fclose_r+0x52>
   8664c:	f104 0340 	add.w	r3, r4, #64	; 0x40
   86650:	4299      	cmp	r1, r3
   86652:	d002      	beq.n	8665a <_fclose_r+0x4e>
   86654:	4628      	mov	r0, r5
   86656:	f7fe fe53 	bl	85300 <_free_r>
   8665a:	2300      	movs	r3, #0
   8665c:	6323      	str	r3, [r4, #48]	; 0x30
   8665e:	6c61      	ldr	r1, [r4, #68]	; 0x44
   86660:	b121      	cbz	r1, 8666c <_fclose_r+0x60>
   86662:	4628      	mov	r0, r5
   86664:	f7fe fe4c 	bl	85300 <_free_r>
   86668:	2300      	movs	r3, #0
   8666a:	6463      	str	r3, [r4, #68]	; 0x44
   8666c:	f7fe fd7e 	bl	8516c <__sfp_lock_acquire>
   86670:	2300      	movs	r3, #0
   86672:	81a3      	strh	r3, [r4, #12]
   86674:	f7fe fd7c 	bl	85170 <__sfp_lock_release>
   86678:	4630      	mov	r0, r6
   8667a:	bd70      	pop	{r4, r5, r6, pc}
   8667c:	f7fe fcfc 	bl	85078 <__sinit>
   86680:	e7cc      	b.n	8661c <_fclose_r+0x10>
   86682:	4628      	mov	r0, r5
   86684:	6921      	ldr	r1, [r4, #16]
   86686:	f7fe fe3b 	bl	85300 <_free_r>
   8668a:	e7dd      	b.n	86648 <_fclose_r+0x3c>

0008668c <fclose>:
   8668c:	4b02      	ldr	r3, [pc, #8]	; (86698 <fclose+0xc>)
   8668e:	4601      	mov	r1, r0
   86690:	6818      	ldr	r0, [r3, #0]
   86692:	f7ff bfbb 	b.w	8660c <_fclose_r>
   86696:	bf00      	nop
   86698:	20070648 	.word	0x20070648

0008669c <_fstat_r>:
   8669c:	b538      	push	{r3, r4, r5, lr}
   8669e:	4c08      	ldr	r4, [pc, #32]	; (866c0 <_fstat_r+0x24>)
   866a0:	2300      	movs	r3, #0
   866a2:	4605      	mov	r5, r0
   866a4:	4608      	mov	r0, r1
   866a6:	4611      	mov	r1, r2
   866a8:	6023      	str	r3, [r4, #0]
   866aa:	f7fc fc0f 	bl	82ecc <_fstat>
   866ae:	1c43      	adds	r3, r0, #1
   866b0:	d000      	beq.n	866b4 <_fstat_r+0x18>
   866b2:	bd38      	pop	{r3, r4, r5, pc}
   866b4:	6823      	ldr	r3, [r4, #0]
   866b6:	2b00      	cmp	r3, #0
   866b8:	d0fb      	beq.n	866b2 <_fstat_r+0x16>
   866ba:	602b      	str	r3, [r5, #0]
   866bc:	bd38      	pop	{r3, r4, r5, pc}
   866be:	bf00      	nop
   866c0:	2007ae48 	.word	0x2007ae48

000866c4 <_isatty_r>:
   866c4:	b538      	push	{r3, r4, r5, lr}
   866c6:	4c07      	ldr	r4, [pc, #28]	; (866e4 <_isatty_r+0x20>)
   866c8:	2300      	movs	r3, #0
   866ca:	4605      	mov	r5, r0
   866cc:	4608      	mov	r0, r1
   866ce:	6023      	str	r3, [r4, #0]
   866d0:	f7fc fc02 	bl	82ed8 <_isatty>
   866d4:	1c43      	adds	r3, r0, #1
   866d6:	d000      	beq.n	866da <_isatty_r+0x16>
   866d8:	bd38      	pop	{r3, r4, r5, pc}
   866da:	6823      	ldr	r3, [r4, #0]
   866dc:	2b00      	cmp	r3, #0
   866de:	d0fb      	beq.n	866d8 <_isatty_r+0x14>
   866e0:	602b      	str	r3, [r5, #0]
   866e2:	bd38      	pop	{r3, r4, r5, pc}
   866e4:	2007ae48 	.word	0x2007ae48

000866e8 <_lseek_r>:
   866e8:	b570      	push	{r4, r5, r6, lr}
   866ea:	4c08      	ldr	r4, [pc, #32]	; (8670c <_lseek_r+0x24>)
   866ec:	4606      	mov	r6, r0
   866ee:	2500      	movs	r5, #0
   866f0:	4608      	mov	r0, r1
   866f2:	4611      	mov	r1, r2
   866f4:	461a      	mov	r2, r3
   866f6:	6025      	str	r5, [r4, #0]
   866f8:	f7fc fbf0 	bl	82edc <_lseek>
   866fc:	1c43      	adds	r3, r0, #1
   866fe:	d000      	beq.n	86702 <_lseek_r+0x1a>
   86700:	bd70      	pop	{r4, r5, r6, pc}
   86702:	6823      	ldr	r3, [r4, #0]
   86704:	2b00      	cmp	r3, #0
   86706:	d0fb      	beq.n	86700 <_lseek_r+0x18>
   86708:	6033      	str	r3, [r6, #0]
   8670a:	bd70      	pop	{r4, r5, r6, pc}
   8670c:	2007ae48 	.word	0x2007ae48

00086710 <_read_r>:
   86710:	b570      	push	{r4, r5, r6, lr}
   86712:	4c08      	ldr	r4, [pc, #32]	; (86734 <_read_r+0x24>)
   86714:	4606      	mov	r6, r0
   86716:	2500      	movs	r5, #0
   86718:	4608      	mov	r0, r1
   8671a:	4611      	mov	r1, r2
   8671c:	461a      	mov	r2, r3
   8671e:	6025      	str	r5, [r4, #0]
   86720:	f7fa fbdc 	bl	80edc <_read>
   86724:	1c43      	adds	r3, r0, #1
   86726:	d000      	beq.n	8672a <_read_r+0x1a>
   86728:	bd70      	pop	{r4, r5, r6, pc}
   8672a:	6823      	ldr	r3, [r4, #0]
   8672c:	2b00      	cmp	r3, #0
   8672e:	d0fb      	beq.n	86728 <_read_r+0x18>
   86730:	6033      	str	r3, [r6, #0]
   86732:	bd70      	pop	{r4, r5, r6, pc}
   86734:	2007ae48 	.word	0x2007ae48
   86738:	00000001 	.word	0x00000001
   8673c:	00000002 	.word	0x00000002
   86740:	00000004 	.word	0x00000004
   86744:	00000008 	.word	0x00000008
   86748:	00000010 	.word	0x00000010
   8674c:	00000020 	.word	0x00000020
   86750:	00000040 	.word	0x00000040
   86754:	00000080 	.word	0x00000080
   86758:	00000100 	.word	0x00000100
   8675c:	00000200 	.word	0x00000200
   86760:	00000400 	.word	0x00000400
   86764:	00000724 	.word	0x00000724
   86768:	5f495754 	.word	0x5f495754
   8676c:	5f444d43 	.word	0x5f444d43
   86770:	5f4d5241 	.word	0x5f4d5241
   86774:	54494e49 	.word	0x54494e49
   86778:	0000000a 	.word	0x0000000a
   8677c:	5f495754 	.word	0x5f495754
   86780:	5f444d43 	.word	0x5f444d43
   86784:	5f4d5241 	.word	0x5f4d5241
   86788:	5f514552 	.word	0x5f514552
   8678c:	5f584f42 	.word	0x5f584f42
   86790:	4f464e49 	.word	0x4f464e49
   86794:	0000000a 	.word	0x0000000a
   86798:	5f495754 	.word	0x5f495754
   8679c:	5f444d43 	.word	0x5f444d43
   867a0:	5f4d5241 	.word	0x5f4d5241
   867a4:	5f514552 	.word	0x5f514552
   867a8:	5f4a424f 	.word	0x5f4a424f
   867ac:	4f464e49 	.word	0x4f464e49
   867b0:	0000000a 	.word	0x0000000a
   867b4:	5f495754 	.word	0x5f495754
   867b8:	5f444d43 	.word	0x5f444d43
   867bc:	5f4d5241 	.word	0x5f4d5241
   867c0:	5f514552 	.word	0x5f514552
   867c4:	4c4c4f43 	.word	0x4c4c4f43
   867c8:	5f544345 	.word	0x5f544345
   867cc:	4f464e49 	.word	0x4f464e49
   867d0:	0000000a 	.word	0x0000000a
   867d4:	5f495754 	.word	0x5f495754
   867d8:	5f444d43 	.word	0x5f444d43
   867dc:	4b434950 	.word	0x4b434950
   867e0:	535f5055 	.word	0x535f5055
   867e4:	54524154 	.word	0x54524154
   867e8:	0000000a 	.word	0x0000000a
   867ec:	5f495754 	.word	0x5f495754
   867f0:	5f444d43 	.word	0x5f444d43
   867f4:	4b434950 	.word	0x4b434950
   867f8:	535f5055 	.word	0x535f5055
   867fc:	55544154 	.word	0x55544154
   86800:	00000a53 	.word	0x00000a53
   86804:	5f495754 	.word	0x5f495754
   86808:	5f444d43 	.word	0x5f444d43
   8680c:	504f5244 	.word	0x504f5244
   86810:	5f46464f 	.word	0x5f46464f
   86814:	52415453 	.word	0x52415453
   86818:	00000a54 	.word	0x00000a54
   8681c:	5f495754 	.word	0x5f495754
   86820:	5f444d43 	.word	0x5f444d43
   86824:	504f5244 	.word	0x504f5244
   86828:	5f46464f 	.word	0x5f46464f
   8682c:	54415453 	.word	0x54415453
   86830:	000a5355 	.word	0x000a5355
   86834:	5f495754 	.word	0x5f495754
   86838:	5f444d43 	.word	0x5f444d43
   8683c:	4f525245 	.word	0x4f525245
   86840:	00000a52 	.word	0x00000a52
   86844:	6f727265 	.word	0x6f727265
   86848:	00000a72 	.word	0x00000a72
   8684c:	6c696146 	.word	0x6c696146
   86850:	31313120 	.word	0x31313120
   86854:	00000000 	.word	0x00000000
   86858:	6c696146 	.word	0x6c696146
   8685c:	32323220 	.word	0x32323220
   86860:	00000000 	.word	0x00000000
   86864:	6c696146 	.word	0x6c696146
   86868:	33333320 	.word	0x33333320
   8686c:	00000000 	.word	0x00000000
   86870:	4f525245 	.word	0x4f525245
   86874:	69702052 	.word	0x69702052
   86878:	70756b63 	.word	0x70756b63
   8687c:	61747320 	.word	0x61747320
   86880:	00737574 	.word	0x00737574
   86884:	3a746f67 	.word	0x3a746f67
   86888:	20782520 	.word	0x20782520
   8688c:	000a7525 	.word	0x000a7525
   86890:	6f727245 	.word	0x6f727245
   86894:	6e6f2072 	.word	0x6e6f2072
   86898:	6e657320 	.word	0x6e657320
   8689c:	74732064 	.word	0x74732064
   868a0:	73757461 	.word	0x73757461
   868a4:	63697020 	.word	0x63697020
   868a8:	0070756b 	.word	0x0070756b
   868ac:	6f727265 	.word	0x6f727265
   868b0:	6e6f2072 	.word	0x6e6f2072
   868b4:	69727720 	.word	0x69727720
   868b8:	74206574 	.word	0x74206574
   868bc:	6c73206f 	.word	0x6c73206f
   868c0:	00657661 	.word	0x00657661
   868c4:	444e4553 	.word	0x444e4553
   868c8:	434f5320 	.word	0x434f5320
   868cc:	5854454b 	.word	0x5854454b
   868d0:	00000059 	.word	0x00000059
   868d4:	444e4553 	.word	0x444e4553
   868d8:	55515320 	.word	0x55515320
   868dc:	58455241 	.word	0x58455241
   868e0:	00000059 	.word	0x00000059
   868e4:	2056414e 	.word	0x2056414e
   868e8:	4c494146 	.word	0x4c494146
   868ec:	00006465 	.word	0x00006465
   868f0:	444e4553 	.word	0x444e4553
   868f4:	414c4720 	.word	0x414c4720
   868f8:	59585353 	.word	0x59585353
   868fc:	00000000 	.word	0x00000000
   86900:	444e4553 	.word	0x444e4553
   86904:	786f4220 	.word	0x786f4220
   86908:	6c616f47 	.word	0x6c616f47
   8690c:	00007978 	.word	0x00007978
   86910:	09097325 	.word	0x09097325
   86914:	25096325 	.word	0x25096325
   86918:	75250975 	.word	0x75250975
   8691c:	0d752509 	.word	0x0d752509
   86920:	0000000a 	.word	0x0000000a
   86924:	454c4449 	.word	0x454c4449
   86928:	00000000 	.word	0x00000000
   8692c:	00000a0d 	.word	0x00000a0d
   86930:	20726d54 	.word	0x20726d54
   86934:	00637653 	.word	0x00637653
   86938:	52544c55 	.word	0x52544c55
   8693c:	4f532041 	.word	0x4f532041
   86940:	20444e55 	.word	0x20444e55
   86944:	646e6966 	.word	0x646e6966
   86948:	6a626f20 	.word	0x6a626f20
   8694c:	00000000 	.word	0x00000000
   86950:	54494e49 	.word	0x54494e49
   86954:	4d52415f 	.word	0x4d52415f
   86958:	00000000 	.word	0x00000000
   8695c:	54494e49 	.word	0x54494e49
   86960:	4d524120 	.word	0x4d524120
   86964:	204f4e20 	.word	0x204f4e20
   86968:	41544144 	.word	0x41544144
   8696c:	00000000 	.word	0x00000000
   86970:	78206f73 	.word	0x78206f73
   86974:	2c64253d 	.word	0x2c64253d
   86978:	253d7920 	.word	0x253d7920
   8697c:	73202e64 	.word	0x73202e64
   86980:	3d782071 	.word	0x3d782071
   86984:	79206425 	.word	0x79206425
   86988:	2e64253d 	.word	0x2e64253d
   8698c:	206c6720 	.word	0x206c6720
   86990:	64253d78 	.word	0x64253d78
   86994:	253d7920 	.word	0x253d7920
   86998:	6f622064 	.word	0x6f622064
   8699c:	253d7820 	.word	0x253d7820
   869a0:	3d792064 	.word	0x3d792064
   869a4:	00006425 	.word	0x00006425
   869a8:	74696e69 	.word	0x74696e69
   869ac:	6d726120 	.word	0x6d726120
   869b0:	6e6f6420 	.word	0x6e6f6420
   869b4:	00000a65 	.word	0x00000a65
   869b8:	696d7261 	.word	0x696d7261
   869bc:	3a6f666e 	.word	0x3a6f666e
   869c0:	20752520 	.word	0x20752520
   869c4:	25207525 	.word	0x25207525
   869c8:	75252075 	.word	0x75252075
   869cc:	6c6c6120 	.word	0x6c6c6120
   869d0:	7525203a 	.word	0x7525203a
   869d4:	0000000a 	.word	0x0000000a
   869d8:	54494e49 	.word	0x54494e49
   869dc:	56414e20 	.word	0x56414e20
   869e0:	204f4e20 	.word	0x204f4e20
   869e4:	41544144 	.word	0x41544144
   869e8:	00000000 	.word	0x00000000
   869ec:	52415453 	.word	0x52415453
   869f0:	20444554 	.word	0x20444554
   869f4:	4b434950 	.word	0x4b434950
   869f8:	00005055 	.word	0x00005055
   869fc:	4c494146 	.word	0x4c494146
   86a00:	54204445 	.word	0x54204445
   86a04:	5453204f 	.word	0x5453204f
   86a08:	5f545241 	.word	0x5f545241
   86a0c:	4b434950 	.word	0x4b434950
   86a10:	00005055 	.word	0x00005055
   86a14:	4b434950 	.word	0x4b434950
   86a18:	465f5055 	.word	0x465f5055
   86a1c:	454c4941 	.word	0x454c4941
   86a20:	00000044 	.word	0x00000044
   86a24:	4b434950 	.word	0x4b434950
   86a28:	445f5055 	.word	0x445f5055
   86a2c:	5f454e4f 	.word	0x5f454e4f
   86a30:	56495244 	.word	0x56495244
   86a34:	00000045 	.word	0x00000045
   86a38:	4b434950 	.word	0x4b434950
   86a3c:	445f5055 	.word	0x445f5055
   86a40:	00454e4f 	.word	0x00454e4f
   86a44:	66206f67 	.word	0x66206f67
   86a48:	6177726f 	.word	0x6177726f
   86a4c:	6f206472 	.word	0x6f206472
   86a50:	61622072 	.word	0x61622072
   86a54:	00006b63 	.word	0x00006b63
   86a58:	76697244 	.word	0x76697244
   86a5c:	20676e69 	.word	0x20676e69
   86a60:	77726f66 	.word	0x77726f66
   86a64:	2f647261 	.word	0x2f647261
   86a68:	6b636162 	.word	0x6b636162
   86a6c:	64726177 	.word	0x64726177
   86a70:	00000000 	.word	0x00000000
   86a74:	77726f46 	.word	0x77726f46
   86a78:	20647261 	.word	0x20647261
   86a7c:	76697264 	.word	0x76697264
   86a80:	75642065 	.word	0x75642065
   86a84:	676e6972 	.word	0x676e6972
   86a88:	63697020 	.word	0x63697020
   86a8c:	2170756b 	.word	0x2170756b
   86a90:	00000000 	.word	0x00000000
   86a94:	4c494146 	.word	0x4c494146
   86a98:	4f542044 	.word	0x4f542044
   86a9c:	41545320 	.word	0x41545320
   86aa0:	44205452 	.word	0x44205452
   86aa4:	4f504f52 	.word	0x4f504f52
   86aa8:	00004646 	.word	0x00004646
   86aac:	5f544547 	.word	0x5f544547
   86ab0:	54415453 	.word	0x54415453
   86ab4:	445f5355 	.word	0x445f5355
   86ab8:	5f504f52 	.word	0x5f504f52
   86abc:	0046464f 	.word	0x0046464f
   86ac0:	504f5244 	.word	0x504f5244
   86ac4:	5f46464f 	.word	0x5f46464f
   86ac8:	454e4f44 	.word	0x454e4f44
   86acc:	0000000a 	.word	0x0000000a
   86ad0:	504f5244 	.word	0x504f5244
   86ad4:	5f46464f 	.word	0x5f46464f
   86ad8:	4e4e5552 	.word	0x4e4e5552
   86adc:	0a474e49 	.word	0x0a474e49
   86ae0:	00000000 	.word	0x00000000
   86ae4:	504f5244 	.word	0x504f5244
   86ae8:	5f46464f 	.word	0x5f46464f
   86aec:	4c494146 	.word	0x4c494146
   86af0:	000a4445 	.word	0x000a4445
   86af4:	504f5244 	.word	0x504f5244
   86af8:	5f46464f 	.word	0x5f46464f
   86afc:	454c4449 	.word	0x454c4449
   86b00:	0000000a 	.word	0x0000000a
   86b04:	4c494146 	.word	0x4c494146
   86b08:	74204445 	.word	0x74204445
   86b0c:	73206977 	.word	0x73206977
   86b10:	63746977 	.word	0x63746977
   86b14:	64252068 	.word	0x64252068
   86b18:	0000000a 	.word	0x0000000a
   86b1c:	3e3e3e0a 	.word	0x3e3e3e0a
   86b20:	3e3e3e3e 	.word	0x3e3e3e3e
   86b24:	3e3e3e3e 	.word	0x3e3e3e3e
   86b28:	4952443e 	.word	0x4952443e
   86b2c:	474e4956 	.word	0x474e4956
   86b30:	204f5420 	.word	0x204f5420
   86b34:	454a424f 	.word	0x454a424f
   86b38:	3c3c5443 	.word	0x3c3c5443
   86b3c:	3c3c3c3c 	.word	0x3c3c3c3c
   86b40:	3c3c3c3c 	.word	0x3c3c3c3c
   86b44:	000a3c3c 	.word	0x000a3c3c
   86b48:	4f544f47 	.word	0x4f544f47
   86b4c:	43495020 	.word	0x43495020
   86b50:	2050554b 	.word	0x2050554b
   86b54:	4d4f5246 	.word	0x4d4f5246
   86b58:	49524420 	.word	0x49524420
   86b5c:	00004556 	.word	0x00004556
   86b60:	746f470a 	.word	0x746f470a
   86b64:	6c61566f 	.word	0x6c61566f
   86b68:	25203d20 	.word	0x25203d20
   86b6c:	00000075 	.word	0x00000075
   86b70:	4f544f47 	.word	0x4f544f47
   86b74:	4f524420 	.word	0x4f524420
   86b78:	46464f50 	.word	0x46464f50
   86b7c:	4f524620 	.word	0x4f524620
   86b80:	5244204d 	.word	0x5244204d
   86b84:	00455649 	.word	0x00455649
   86b88:	736e6f43 	.word	0x736e6f43
   86b8c:	20656c6f 	.word	0x20656c6f
   86b90:	64616572 	.word	0x64616572
   86b94:	00000a79 	.word	0x00000a79
   86b98:	3d3d3d3d 	.word	0x3d3d3d3d
   86b9c:	3d3d3d3d 	.word	0x3d3d3d3d
   86ba0:	3d3d3d3d 	.word	0x3d3d3d3d
   86ba4:	00000a3d 	.word	0x00000a3d
   86ba8:	76697244 	.word	0x76697244
   86bac:	4f6f5465 	.word	0x4f6f5465
   86bb0:	63656a62 	.word	0x63656a62
   86bb4:	00000074 	.word	0x00000074
   86bb8:	6c696146 	.word	0x6c696146
   86bbc:	74206465 	.word	0x74206465
   86bc0:	7263206f 	.word	0x7263206f
   86bc4:	65746165 	.word	0x65746165
   86bc8:	69724420 	.word	0x69724420
   86bcc:	6f546576 	.word	0x6f546576
   86bd0:	656a624f 	.word	0x656a624f
   86bd4:	742d7463 	.word	0x742d7463
   86bd8:	006b7361 	.word	0x006b7361
   86bdc:	72746c55 	.word	0x72746c55
   86be0:	6e655361 	.word	0x6e655361
   86be4:	00726f73 	.word	0x00726f73
   86be8:	6c696146 	.word	0x6c696146
   86bec:	74206465 	.word	0x74206465
   86bf0:	7263206f 	.word	0x7263206f
   86bf4:	65746165 	.word	0x65746165
   86bf8:	746c5520 	.word	0x746c5520
   86bfc:	65536172 	.word	0x65536172
   86c00:	726f736e 	.word	0x726f736e
   86c04:	7361742d 	.word	0x7361742d
   86c08:	0000006b 	.word	0x0000006b
   86c0c:	6d6d6f43 	.word	0x6d6d6f43
   86c10:	63696e75 	.word	0x63696e75
   86c14:	6f697461 	.word	0x6f697461
   86c18:	0000006e 	.word	0x0000006e
   86c1c:	6c696146 	.word	0x6c696146
   86c20:	74206465 	.word	0x74206465
   86c24:	7263206f 	.word	0x7263206f
   86c28:	65746165 	.word	0x65746165
   86c2c:	6d6f4320 	.word	0x6d6f4320
   86c30:	696e756d 	.word	0x696e756d
   86c34:	69746163 	.word	0x69746163
   86c38:	742d6e6f 	.word	0x742d6e6f
   86c3c:	006b7361 	.word	0x006b7361
   86c40:	00000043 	.word	0x00000043

00086c44 <_global_impure_ptr>:
   86c44:	20070220 33323130 37363534 42413938      .. 0123456789AB
   86c54:	46454443 00000000 33323130 37363534     CDEF....01234567
   86c64:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   86c74:	0000296c                                l)..

00086c78 <zeroes.6721>:
   86c78:	30303030 30303030 30303030 30303030     0000000000000000

00086c88 <blanks.6720>:
   86c88:	20202020 20202020 20202020 20202020                     

00086c98 <_init>:
   86c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   86c9a:	bf00      	nop
   86c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   86c9e:	bc08      	pop	{r3}
   86ca0:	469e      	mov	lr, r3
   86ca2:	4770      	bx	lr

00086ca4 <__init_array_start>:
   86ca4:	00084ed9 	.word	0x00084ed9

00086ca8 <__frame_dummy_init_array_entry>:
   86ca8:	00080119                                ....

00086cac <_fini>:
   86cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   86cae:	bf00      	nop
   86cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   86cb2:	bc08      	pop	{r3}
   86cb4:	469e      	mov	lr, r3
   86cb6:	4770      	bx	lr

00086cb8 <__fini_array_start>:
   86cb8:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20070000:	f3bf 8f5f 	dmb	sy
20070004:	3801      	subs	r0, #1
20070006:	d1fb      	bne.n	20070000 <portable_delay_cycles>
20070008:	4770      	bx	lr
2007000a:	bf00      	nop

2007000c <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007000c:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070010:	4a20      	ldr	r2, [pc, #128]	; (20070094 <SystemInit+0x88>)
20070012:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070014:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070018:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007001a:	4b1f      	ldr	r3, [pc, #124]	; (20070098 <SystemInit+0x8c>)
2007001c:	6a1b      	ldr	r3, [r3, #32]
2007001e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070022:	d107      	bne.n	20070034 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070024:	4a1d      	ldr	r2, [pc, #116]	; (2007009c <SystemInit+0x90>)
20070026:	4b1c      	ldr	r3, [pc, #112]	; (20070098 <SystemInit+0x8c>)
20070028:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007002a:	461a      	mov	r2, r3
2007002c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007002e:	f013 0f01 	tst.w	r3, #1
20070032:	d0fb      	beq.n	2007002c <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070034:	4a1a      	ldr	r2, [pc, #104]	; (200700a0 <SystemInit+0x94>)
20070036:	4b18      	ldr	r3, [pc, #96]	; (20070098 <SystemInit+0x8c>)
20070038:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007003a:	461a      	mov	r2, r3
2007003c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007003e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070042:	d0fb      	beq.n	2007003c <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070044:	4b14      	ldr	r3, [pc, #80]	; (20070098 <SystemInit+0x8c>)
20070046:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20070048:	f022 0203 	bic.w	r2, r2, #3
2007004c:	f042 0201 	orr.w	r2, r2, #1
20070050:	631a      	str	r2, [r3, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070052:	461a      	mov	r2, r3
20070054:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070056:	f013 0f08 	tst.w	r3, #8
2007005a:	d0fb      	beq.n	20070054 <SystemInit+0x48>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007005c:	4a11      	ldr	r2, [pc, #68]	; (200700a4 <SystemInit+0x98>)
2007005e:	4b0e      	ldr	r3, [pc, #56]	; (20070098 <SystemInit+0x8c>)
20070060:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070062:	461a      	mov	r2, r3
20070064:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070066:	f013 0f02 	tst.w	r3, #2
2007006a:	d0fb      	beq.n	20070064 <SystemInit+0x58>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007006c:	2211      	movs	r2, #17
2007006e:	4b0a      	ldr	r3, [pc, #40]	; (20070098 <SystemInit+0x8c>)
20070070:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070072:	461a      	mov	r2, r3
20070074:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070076:	f013 0f08 	tst.w	r3, #8
2007007a:	d0fb      	beq.n	20070074 <SystemInit+0x68>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007007c:	2212      	movs	r2, #18
2007007e:	4b06      	ldr	r3, [pc, #24]	; (20070098 <SystemInit+0x8c>)
20070080:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070082:	461a      	mov	r2, r3
20070084:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070086:	f013 0f08 	tst.w	r3, #8
2007008a:	d0fb      	beq.n	20070084 <SystemInit+0x78>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007008c:	4a06      	ldr	r2, [pc, #24]	; (200700a8 <SystemInit+0x9c>)
2007008e:	4b07      	ldr	r3, [pc, #28]	; (200700ac <SystemInit+0xa0>)
20070090:	601a      	str	r2, [r3, #0]
20070092:	4770      	bx	lr
20070094:	400e0a00 	.word	0x400e0a00
20070098:	400e0600 	.word	0x400e0600
2007009c:	00370809 	.word	0x00370809
200700a0:	01370809 	.word	0x01370809
200700a4:	200d3f01 	.word	0x200d3f01
200700a8:	0501bd00 	.word	0x0501bd00
200700ac:	20070218 	.word	0x20070218

200700b0 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700b0:	4b1b      	ldr	r3, [pc, #108]	; (20070120 <system_init_flash+0x70>)
200700b2:	4298      	cmp	r0, r3
200700b4:	d806      	bhi.n	200700c4 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700b6:	2300      	movs	r3, #0
200700b8:	4a1a      	ldr	r2, [pc, #104]	; (20070124 <system_init_flash+0x74>)
200700ba:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700bc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700c0:	6013      	str	r3, [r2, #0]
200700c2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700c4:	4b18      	ldr	r3, [pc, #96]	; (20070128 <system_init_flash+0x78>)
200700c6:	4298      	cmp	r0, r3
200700c8:	d807      	bhi.n	200700da <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700ca:	f44f 7380 	mov.w	r3, #256	; 0x100
200700ce:	4a15      	ldr	r2, [pc, #84]	; (20070124 <system_init_flash+0x74>)
200700d0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700d2:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700d6:	6013      	str	r3, [r2, #0]
200700d8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700da:	4b14      	ldr	r3, [pc, #80]	; (2007012c <system_init_flash+0x7c>)
200700dc:	4298      	cmp	r0, r3
200700de:	d807      	bhi.n	200700f0 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700e0:	f44f 7300 	mov.w	r3, #512	; 0x200
200700e4:	4a0f      	ldr	r2, [pc, #60]	; (20070124 <system_init_flash+0x74>)
200700e6:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700e8:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ec:	6013      	str	r3, [r2, #0]
200700ee:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700f0:	4b0f      	ldr	r3, [pc, #60]	; (20070130 <system_init_flash+0x80>)
200700f2:	4298      	cmp	r0, r3
200700f4:	d807      	bhi.n	20070106 <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700f6:	f44f 7340 	mov.w	r3, #768	; 0x300
200700fa:	4a0a      	ldr	r2, [pc, #40]	; (20070124 <system_init_flash+0x74>)
200700fc:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700fe:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070102:	6013      	str	r3, [r2, #0]
20070104:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
20070106:	4b0b      	ldr	r3, [pc, #44]	; (20070134 <system_init_flash+0x84>)
20070108:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007010a:	bf94      	ite	ls
2007010c:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070110:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070114:	4a03      	ldr	r2, [pc, #12]	; (20070124 <system_init_flash+0x74>)
20070116:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
20070118:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007011c:	6013      	str	r3, [r2, #0]
2007011e:	4770      	bx	lr
20070120:	0121eabf 	.word	0x0121eabf
20070124:	400e0a00 	.word	0x400e0a00
20070128:	02faf07f 	.word	0x02faf07f
2007012c:	03d08fff 	.word	0x03d08fff
20070130:	04c4b3ff 	.word	0x04c4b3ff
20070134:	055d4a7f 	.word	0x055d4a7f

20070138 <pulse_channels>:
20070138:	40094000 00000000 0000000b 00010000     .@.@............
20070148:	00000000 0000c350 00000000 00000000     ....P...........
	...
20070164:	00000024 00000043 00000001 000007d0     $...C...........
20070174:	40094000 00000001 0000000b 00010000     .@.@............
20070184:	00000000 0000c350 00000000 00000000     ....P...........
	...
200701a0:	00000024 00000045 00000001 000007d0     $...E...........

200701b0 <pulse_timers>:
200701b0:	40080000 00000001 0000001c 0000001c     ...@............
200701c0:	00090600 00000002 00000000 00000008     ................
200701d0:	00000002 40080000 00000000 0000001b     .......@........
200701e0:	0000001b 00090600 00000039 00000001     ........9.......
200701f0:	00000008 00000002                       ........

200701f8 <pulse_clock_setting>:
200701f8:	000f4240 00000000 0501bd00              @B..........

20070204 <twi_masterPickupStatus>:
20070204:	00000005                                ....

20070208 <uxCriticalNesting>:
20070208:	aaaaaaaa                                ....

2007020c <xFreeBytesRemaining>:
2007020c:	0000a000                                ....

20070210 <xNextTaskUnblockTime>:
20070210:	ffffffff                                ....

20070214 <g_interrupt_enabled>:
20070214:	00000001                                ....

20070218 <SystemCoreClock>:
20070218:	003d0900                                ..=.

2007021c <curObj>:
2007021c:	00000001                                ....

20070220 <impure_data>:
20070220:	00000000 2007050c 20070574 200705dc     ....... t.. ... 
	...
20070254:	00086c40 00000000 00000000 00000000     @l..............
	...
200702c8:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200702d8:	0005deec 0000000b 00000000 00000000     ................
	...

20070648 <_impure_ptr>:
20070648:	20070220                                 .. 

2007064c <lc_ctype_charset>:
2007064c:	49435341 00000049 00000000 00000000     ASCII...........
	...

2007066c <__mb_cur_max>:
2007066c:	00000001                                ....

20070670 <__malloc_av_>:
	...
20070678:	20070670 20070670 20070678 20070678     p.. p.. x.. x.. 
20070688:	20070680 20070680 20070688 20070688     ... ... ... ... 
20070698:	20070690 20070690 20070698 20070698     ... ... ... ... 
200706a8:	200706a0 200706a0 200706a8 200706a8     ... ... ... ... 
200706b8:	200706b0 200706b0 200706b8 200706b8     ... ... ... ... 
200706c8:	200706c0 200706c0 200706c8 200706c8     ... ... ... ... 
200706d8:	200706d0 200706d0 200706d8 200706d8     ... ... ... ... 
200706e8:	200706e0 200706e0 200706e8 200706e8     ... ... ... ... 
200706f8:	200706f0 200706f0 200706f8 200706f8     ... ... ... ... 
20070708:	20070700 20070700 20070708 20070708     ... ... ... ... 
20070718:	20070710 20070710 20070718 20070718     ... ... ... ... 
20070728:	20070720 20070720 20070728 20070728      ..  .. (.. (.. 
20070738:	20070730 20070730 20070738 20070738     0.. 0.. 8.. 8.. 
20070748:	20070740 20070740 20070748 20070748     @.. @.. H.. H.. 
20070758:	20070750 20070750 20070758 20070758     P.. P.. X.. X.. 
20070768:	20070760 20070760 20070768 20070768     `.. `.. h.. h.. 
20070778:	20070770 20070770 20070778 20070778     p.. p.. x.. x.. 
20070788:	20070780 20070780 20070788 20070788     ... ... ... ... 
20070798:	20070790 20070790 20070798 20070798     ... ... ... ... 
200707a8:	200707a0 200707a0 200707a8 200707a8     ... ... ... ... 
200707b8:	200707b0 200707b0 200707b8 200707b8     ... ... ... ... 
200707c8:	200707c0 200707c0 200707c8 200707c8     ... ... ... ... 
200707d8:	200707d0 200707d0 200707d8 200707d8     ... ... ... ... 
200707e8:	200707e0 200707e0 200707e8 200707e8     ... ... ... ... 
200707f8:	200707f0 200707f0 200707f8 200707f8     ... ... ... ... 
20070808:	20070800 20070800 20070808 20070808     ... ... ... ... 
20070818:	20070810 20070810 20070818 20070818     ... ... ... ... 
20070828:	20070820 20070820 20070828 20070828      ..  .. (.. (.. 
20070838:	20070830 20070830 20070838 20070838     0.. 0.. 8.. 8.. 
20070848:	20070840 20070840 20070848 20070848     @.. @.. H.. H.. 
20070858:	20070850 20070850 20070858 20070858     P.. P.. X.. X.. 
20070868:	20070860 20070860 20070868 20070868     `.. `.. h.. h.. 
20070878:	20070870 20070870 20070878 20070878     p.. p.. x.. x.. 
20070888:	20070880 20070880 20070888 20070888     ... ... ... ... 
20070898:	20070890 20070890 20070898 20070898     ... ... ... ... 
200708a8:	200708a0 200708a0 200708a8 200708a8     ... ... ... ... 
200708b8:	200708b0 200708b0 200708b8 200708b8     ... ... ... ... 
200708c8:	200708c0 200708c0 200708c8 200708c8     ... ... ... ... 
200708d8:	200708d0 200708d0 200708d8 200708d8     ... ... ... ... 
200708e8:	200708e0 200708e0 200708e8 200708e8     ... ... ... ... 
200708f8:	200708f0 200708f0 200708f8 200708f8     ... ... ... ... 
20070908:	20070900 20070900 20070908 20070908     ... ... ... ... 
20070918:	20070910 20070910 20070918 20070918     ... ... ... ... 
20070928:	20070920 20070920 20070928 20070928      ..  .. (.. (.. 
20070938:	20070930 20070930 20070938 20070938     0.. 0.. 8.. 8.. 
20070948:	20070940 20070940 20070948 20070948     @.. @.. H.. H.. 
20070958:	20070950 20070950 20070958 20070958     P.. P.. X.. X.. 
20070968:	20070960 20070960 20070968 20070968     `.. `.. h.. h.. 
20070978:	20070970 20070970 20070978 20070978     p.. p.. x.. x.. 
20070988:	20070980 20070980 20070988 20070988     ... ... ... ... 
20070998:	20070990 20070990 20070998 20070998     ... ... ... ... 
200709a8:	200709a0 200709a0 200709a8 200709a8     ... ... ... ... 
200709b8:	200709b0 200709b0 200709b8 200709b8     ... ... ... ... 
200709c8:	200709c0 200709c0 200709c8 200709c8     ... ... ... ... 
200709d8:	200709d0 200709d0 200709d8 200709d8     ... ... ... ... 
200709e8:	200709e0 200709e0 200709e8 200709e8     ... ... ... ... 
200709f8:	200709f0 200709f0 200709f8 200709f8     ... ... ... ... 
20070a08:	20070a00 20070a00 20070a08 20070a08     ... ... ... ... 
20070a18:	20070a10 20070a10 20070a18 20070a18     ... ... ... ... 
20070a28:	20070a20 20070a20 20070a28 20070a28      ..  .. (.. (.. 
20070a38:	20070a30 20070a30 20070a38 20070a38     0.. 0.. 8.. 8.. 
20070a48:	20070a40 20070a40 20070a48 20070a48     @.. @.. H.. H.. 
20070a58:	20070a50 20070a50 20070a58 20070a58     P.. P.. X.. X.. 
20070a68:	20070a60 20070a60 20070a68 20070a68     `.. `.. h.. h.. 

20070a78 <__malloc_trim_threshold>:
20070a78:	00020000                                ....

20070a7c <__malloc_sbrk_base>:
20070a7c:	ffffffff                                ....

20070a80 <__wctomb>:
20070a80:	000864fd                                .d..
