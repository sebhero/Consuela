
SebTWI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000045f4  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  000845f4  000845f4  0000c5f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009a4  20070000  000845fc  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000184  200709a4  00084fa0  000109a4  2**2
                  ALLOC
  4 .stack        00002000  20070b28  00085124  000109a4  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  000109a4  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  000109cd  2**0
                  CONTENTS, READONLY
  7 .debug_info   0000e1f2  00000000  00000000  00010a28  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000028b1  00000000  00000000  0001ec1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00005469  00000000  00000000  000214cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000b70  00000000  00000000  00026934  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000a78  00000000  00000000  000274a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001887d  00000000  00000000  00027f1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000ffb7  00000000  00000000  00040799  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00062f3e  00000000  00000000  00050750  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000023d0  00000000  00000000  000b3690  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20072b28 	.word	0x20072b28
   80004:	00080c91 	.word	0x00080c91
   80008:	00080c8d 	.word	0x00080c8d
   8000c:	00080c8d 	.word	0x00080c8d
   80010:	00080c8d 	.word	0x00080c8d
   80014:	00080c8d 	.word	0x00080c8d
   80018:	00080c8d 	.word	0x00080c8d
	...
   8002c:	00080c8d 	.word	0x00080c8d
   80030:	00080c8d 	.word	0x00080c8d
   80034:	00000000 	.word	0x00000000
   80038:	00080c8d 	.word	0x00080c8d
   8003c:	00080c8d 	.word	0x00080c8d
   80040:	00080c8d 	.word	0x00080c8d
   80044:	00080c8d 	.word	0x00080c8d
   80048:	00080c8d 	.word	0x00080c8d
   8004c:	00080c8d 	.word	0x00080c8d
   80050:	00080c8d 	.word	0x00080c8d
   80054:	00080c8d 	.word	0x00080c8d
   80058:	00080c8d 	.word	0x00080c8d
   8005c:	00080c8d 	.word	0x00080c8d
   80060:	00080c8d 	.word	0x00080c8d
   80064:	00080c8d 	.word	0x00080c8d
   80068:	00000000 	.word	0x00000000
   8006c:	00080a75 	.word	0x00080a75
   80070:	00080a89 	.word	0x00080a89
   80074:	00080a9d 	.word	0x00080a9d
   80078:	00080ab1 	.word	0x00080ab1
	...
   80084:	00080ead 	.word	0x00080ead
   80088:	00080c8d 	.word	0x00080c8d
   8008c:	00080c8d 	.word	0x00080c8d
   80090:	00080c8d 	.word	0x00080c8d
   80094:	00080c8d 	.word	0x00080c8d
   80098:	00080c8d 	.word	0x00080c8d
   8009c:	00080c8d 	.word	0x00080c8d
   800a0:	00080c8d 	.word	0x00080c8d
   800a4:	00000000 	.word	0x00000000
   800a8:	00080c8d 	.word	0x00080c8d
   800ac:	00080c8d 	.word	0x00080c8d
   800b0:	00080c8d 	.word	0x00080c8d
   800b4:	00080c8d 	.word	0x00080c8d
   800b8:	00080c8d 	.word	0x00080c8d
   800bc:	00080c8d 	.word	0x00080c8d
   800c0:	00080c8d 	.word	0x00080c8d
   800c4:	00080c8d 	.word	0x00080c8d
   800c8:	00080c8d 	.word	0x00080c8d
   800cc:	00080c8d 	.word	0x00080c8d
   800d0:	00080c8d 	.word	0x00080c8d
   800d4:	00080c8d 	.word	0x00080c8d
   800d8:	00080c8d 	.word	0x00080c8d
   800dc:	00080c8d 	.word	0x00080c8d
   800e0:	00080c8d 	.word	0x00080c8d
   800e4:	00080c8d 	.word	0x00080c8d
   800e8:	00080c8d 	.word	0x00080c8d
   800ec:	00080c8d 	.word	0x00080c8d
   800f0:	00080c8d 	.word	0x00080c8d

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	200709a4 	.word	0x200709a4
   80110:	00000000 	.word	0x00000000
   80114:	000845fc 	.word	0x000845fc

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b06      	ldr	r3, [pc, #24]	; (80134 <frame_dummy+0x1c>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4806      	ldr	r0, [pc, #24]	; (80138 <frame_dummy+0x20>)
   80120:	4906      	ldr	r1, [pc, #24]	; (8013c <frame_dummy+0x24>)
   80122:	f3af 8000 	nop.w
   80126:	4806      	ldr	r0, [pc, #24]	; (80140 <frame_dummy+0x28>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b113      	cbz	r3, 80132 <frame_dummy+0x1a>
   8012c:	4b05      	ldr	r3, [pc, #20]	; (80144 <frame_dummy+0x2c>)
   8012e:	b103      	cbz	r3, 80132 <frame_dummy+0x1a>
   80130:	4798      	blx	r3
   80132:	bd08      	pop	{r3, pc}
   80134:	00000000 	.word	0x00000000
   80138:	000845fc 	.word	0x000845fc
   8013c:	200709a8 	.word	0x200709a8
   80140:	000845fc 	.word	0x000845fc
   80144:	00000000 	.word	0x00000000

00080148 <twi_comInit>:

void buildObject(uint8_t data[5], objectinfo_t *ptr_object);

void buildXY(uint8_t data[5], uint16_t *pInt, uint16_t *ypos_1);

void twi_comInit(void) {
   80148:	b500      	push	{lr}
   8014a:	b085      	sub	sp, #20
	// TWI master initialization options.
	//set that there is no data;
	theArm.hasData = 0;
   8014c:	2300      	movs	r3, #0
   8014e:	4a0b      	ldr	r2, [pc, #44]	; (8017c <twi_comInit+0x34>)
   80150:	7153      	strb	r3, [r2, #5]
	SLAVE_ADDR = SLAVE_ADDR_ARM;//twi slave address for arm
   80152:	2202      	movs	r2, #2
   80154:	490a      	ldr	r1, [pc, #40]	; (80180 <twi_comInit+0x38>)
   80156:	600a      	str	r2, [r1, #0]

	twi_master_options_t opt;
	opt.speed = TWI_SPEED;
   80158:	490a      	ldr	r1, [pc, #40]	; (80184 <twi_comInit+0x3c>)
   8015a:	9102      	str	r1, [sp, #8]
	opt.chip = SLAVE_ADDR;
   8015c:	f88d 200c 	strb.w	r2, [sp, #12]
typedef twi_packet_t twi_package_t;

static inline uint32_t twi_master_setup(twi_master_t p_twi,
		twi_master_options_t *p_opt)
{
	p_opt->master_clk = sysclk_get_cpu_hz();
   80160:	4a09      	ldr	r2, [pc, #36]	; (80188 <twi_comInit+0x40>)
   80162:	9201      	str	r2, [sp, #4]
	p_opt->smbus      = 0;
   80164:	f88d 300d 	strb.w	r3, [sp, #13]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   80168:	2017      	movs	r0, #23
   8016a:	4b08      	ldr	r3, [pc, #32]	; (8018c <twi_comInit+0x44>)
   8016c:	4798      	blx	r3
	} else {
		// Do Nothing
	}
#endif

	return (twi_master_init(p_twi, p_opt));
   8016e:	4808      	ldr	r0, [pc, #32]	; (80190 <twi_comInit+0x48>)
   80170:	a901      	add	r1, sp, #4
   80172:	4b08      	ldr	r3, [pc, #32]	; (80194 <twi_comInit+0x4c>)
   80174:	4798      	blx	r3

	// Initialize the TWI master driver.
	twi_master_setup(TWI_PORT, &opt);
}
   80176:	b005      	add	sp, #20
   80178:	f85d fb04 	ldr.w	pc, [sp], #4
   8017c:	20070b10 	.word	0x20070b10
   80180:	20070b0c 	.word	0x20070b0c
   80184:	000186a0 	.word	0x000186a0
   80188:	0501bd00 	.word	0x0501bd00
   8018c:	00080bad 	.word	0x00080bad
   80190:	40090000 	.word	0x40090000
   80194:	00080511 	.word	0x00080511

00080198 <twiSendData>:
	}
}

//Send data to Arm with TWI
//data holds the data, dataLength is how many bytes the data is.
uint8_t twiSendData(uint8_t *data, int dataLength) {
   80198:	b530      	push	{r4, r5, lr}
   8019a:	b087      	sub	sp, #28

	twi_package_t packet = {
   8019c:	2300      	movs	r3, #0
   8019e:	9301      	str	r3, [sp, #4]
   801a0:	9302      	str	r3, [sp, #8]
   801a2:	9305      	str	r3, [sp, #20]
   801a4:	9003      	str	r0, [sp, #12]
   801a6:	9104      	str	r1, [sp, #16]
   801a8:	4b0a      	ldr	r3, [pc, #40]	; (801d4 <twiSendData+0x3c>)
   801aa:	7819      	ldrb	r1, [r3, #0]
   801ac:	f88d 1014 	strb.w	r1, [sp, #20]
			.buffer       = data, // transfer data source buffer
			.length       = dataLength   // transfer data size (bytes)
	};


	if (twi_probe(TWI_PORT, SLAVE_ADDR) == TWI_SUCCESS) {
   801b0:	4809      	ldr	r0, [pc, #36]	; (801d8 <twiSendData+0x40>)
   801b2:	4b0a      	ldr	r3, [pc, #40]	; (801dc <twiSendData+0x44>)
   801b4:	4798      	blx	r3
   801b6:	b938      	cbnz	r0, 801c8 <twiSendData+0x30>
		while (twi_master_write(TWI_PORT, &packet) != TWI_SUCCESS);
   801b8:	4d07      	ldr	r5, [pc, #28]	; (801d8 <twiSendData+0x40>)
   801ba:	4c09      	ldr	r4, [pc, #36]	; (801e0 <twiSendData+0x48>)
   801bc:	4628      	mov	r0, r5
   801be:	a901      	add	r1, sp, #4
   801c0:	47a0      	blx	r4
   801c2:	2800      	cmp	r0, #0
   801c4:	d1fa      	bne.n	801bc <twiSendData+0x24>
   801c6:	e001      	b.n	801cc <twiSendData+0x34>
		return 1;
	} else {
		return 0;
   801c8:	2000      	movs	r0, #0
   801ca:	e000      	b.n	801ce <twiSendData+0x36>
	};


	if (twi_probe(TWI_PORT, SLAVE_ADDR) == TWI_SUCCESS) {
		while (twi_master_write(TWI_PORT, &packet) != TWI_SUCCESS);
		return 1;
   801cc:	2001      	movs	r0, #1
	} else {
		return 0;
	}
}
   801ce:	b007      	add	sp, #28
   801d0:	bd30      	pop	{r4, r5, pc}
   801d2:	bf00      	nop
   801d4:	20070b0c 	.word	0x20070b0c
   801d8:	40090000 	.word	0x40090000
   801dc:	000806c5 	.word	0x000806c5
   801e0:	00080625 	.word	0x00080625

000801e4 <twiReciveData>:

//Recive data from ARM with TWI
//recives and prints the data out on Uart.
//packageSize how many bytes expected to recive
//returns the data recived as array.
uint8_t twiReciveData(uint8_t *recv, uint8_t packageSize) {
   801e4:	b530      	push	{r4, r5, lr}
   801e6:	b087      	sub	sp, #28
	//package recived
	twi_package_t pkt_rcv = {
   801e8:	2300      	movs	r3, #0
   801ea:	9301      	str	r3, [sp, #4]
   801ec:	9302      	str	r3, [sp, #8]
   801ee:	9305      	str	r3, [sp, #20]
   801f0:	9003      	str	r0, [sp, #12]
   801f2:	9104      	str	r1, [sp, #16]
   801f4:	4b06      	ldr	r3, [pc, #24]	; (80210 <twiReciveData+0x2c>)
   801f6:	681b      	ldr	r3, [r3, #0]
   801f8:	f88d 3014 	strb.w	r3, [sp, #20]
			.length       = packageSize   // transfer data size (bytes)
	};

// 	if(twi_probe(TWI_PORT,SLAVE_ADDR)==TWI_SUCCESS)
// 	{
	while (twi_master_read(TWI_PORT, &pkt_rcv) != TWI_SUCCESS);
   801fc:	4d05      	ldr	r5, [pc, #20]	; (80214 <twiReciveData+0x30>)
   801fe:	4c06      	ldr	r4, [pc, #24]	; (80218 <twiReciveData+0x34>)
   80200:	4628      	mov	r0, r5
   80202:	a901      	add	r1, sp, #4
   80204:	47a0      	blx	r4
   80206:	2800      	cmp	r0, #0
   80208:	d1fa      	bne.n	80200 <twiReciveData+0x1c>
// 	}
// 	else{
// 		return 0;
// 	}

}
   8020a:	2001      	movs	r0, #1
   8020c:	b007      	add	sp, #28
   8020e:	bd30      	pop	{r4, r5, pc}
   80210:	20070b0c 	.word	0x20070b0c
   80214:	40090000 	.word	0x40090000
   80218:	00080551 	.word	0x00080551

0008021c <handleCmd>:


void handleCmd(uint8_t cmd) {
   8021c:	b508      	push	{r3, lr}

	switch (cmd) {
   8021e:	3802      	subs	r0, #2
   80220:	2823      	cmp	r0, #35	; 0x23
   80222:	d837      	bhi.n	80294 <handleCmd+0x78>
   80224:	e8df f000 	tbb	[pc, r0]
   80228:	361e1a16 	.word	0x361e1a16
   8022c:	36363636 	.word	0x36363636
   80230:	36363636 	.word	0x36363636
   80234:	36363636 	.word	0x36363636
   80238:	36363636 	.word	0x36363636
   8023c:	36363636 	.word	0x36363636
   80240:	36363636 	.word	0x36363636
   80244:	2a123636 	.word	0x2a123636
   80248:	32262e22 	.word	0x32262e22
		case TWI_CMD_ARM_INIT:
			printf("TWI_CMD_ARM_INIT\n");
   8024c:	4813      	ldr	r0, [pc, #76]	; (8029c <handleCmd+0x80>)
   8024e:	4b14      	ldr	r3, [pc, #80]	; (802a0 <handleCmd+0x84>)
   80250:	4798      	blx	r3
			break;
   80252:	bd08      	pop	{r3, pc}
		case TWI_CMD_ARM_REQ_BOX_INFO:
			printf("TWI_CMD_ARM_REQ_BOX_INFO\n");
   80254:	4813      	ldr	r0, [pc, #76]	; (802a4 <handleCmd+0x88>)
   80256:	4b12      	ldr	r3, [pc, #72]	; (802a0 <handleCmd+0x84>)
   80258:	4798      	blx	r3
			break;
   8025a:	bd08      	pop	{r3, pc}
		case TWI_CMD_ARM_REQ_OBJ_INFO:
			printf("TWI_CMD_ARM_REQ_OBJ_INFO\n");
   8025c:	4812      	ldr	r0, [pc, #72]	; (802a8 <handleCmd+0x8c>)
   8025e:	4b10      	ldr	r3, [pc, #64]	; (802a0 <handleCmd+0x84>)
   80260:	4798      	blx	r3
			break;
   80262:	bd08      	pop	{r3, pc}
		case TWI_CMD_ARM_REQ_COLLECT_INFO:
			printf("TWI_CMD_ARM_REQ_COLLECT_INFO\n");
   80264:	4811      	ldr	r0, [pc, #68]	; (802ac <handleCmd+0x90>)
   80266:	4b0e      	ldr	r3, [pc, #56]	; (802a0 <handleCmd+0x84>)
   80268:	4798      	blx	r3
			break;
   8026a:	bd08      	pop	{r3, pc}
		case TWI_CMD_PICKUP_START:
			printf("TWI_CMD_PICKUP_START\n");
   8026c:	4810      	ldr	r0, [pc, #64]	; (802b0 <handleCmd+0x94>)
   8026e:	4b0c      	ldr	r3, [pc, #48]	; (802a0 <handleCmd+0x84>)
   80270:	4798      	blx	r3
			break;
   80272:	bd08      	pop	{r3, pc}
		case TWI_CMD_PICKUP_STATUS:
			printf("TWI_CMD_PICKUP_STATUS\n");
   80274:	480f      	ldr	r0, [pc, #60]	; (802b4 <handleCmd+0x98>)
   80276:	4b0a      	ldr	r3, [pc, #40]	; (802a0 <handleCmd+0x84>)
   80278:	4798      	blx	r3
			break;
   8027a:	bd08      	pop	{r3, pc}
		case TWI_CMD_DROPOFF_START:
			printf("TWI_CMD_DROPOFF_START\n");
   8027c:	480e      	ldr	r0, [pc, #56]	; (802b8 <handleCmd+0x9c>)
   8027e:	4b08      	ldr	r3, [pc, #32]	; (802a0 <handleCmd+0x84>)
   80280:	4798      	blx	r3
			break;
   80282:	bd08      	pop	{r3, pc}
		case TWI_CMD_DROPOFF_STATUS:
			printf("TWI_CMD_DROPOFF_STATUS\n");
   80284:	480d      	ldr	r0, [pc, #52]	; (802bc <handleCmd+0xa0>)
   80286:	4b06      	ldr	r3, [pc, #24]	; (802a0 <handleCmd+0x84>)
   80288:	4798      	blx	r3
			break;
   8028a:	bd08      	pop	{r3, pc}
		case TWI_CMD_ERROR:
			printf("TWI_CMD_ERROR\n");
   8028c:	480c      	ldr	r0, [pc, #48]	; (802c0 <handleCmd+0xa4>)
   8028e:	4b04      	ldr	r3, [pc, #16]	; (802a0 <handleCmd+0x84>)
   80290:	4798      	blx	r3
			break;
   80292:	bd08      	pop	{r3, pc}
		default:
			printf("error\n");
   80294:	480b      	ldr	r0, [pc, #44]	; (802c4 <handleCmd+0xa8>)
   80296:	4b02      	ldr	r3, [pc, #8]	; (802a0 <handleCmd+0x84>)
   80298:	4798      	blx	r3
   8029a:	bd08      	pop	{r3, pc}
   8029c:	000841ac 	.word	0x000841ac
   802a0:	000811f9 	.word	0x000811f9
   802a4:	000841c0 	.word	0x000841c0
   802a8:	000841dc 	.word	0x000841dc
   802ac:	000841f8 	.word	0x000841f8
   802b0:	00084218 	.word	0x00084218
   802b4:	00084230 	.word	0x00084230
   802b8:	00084248 	.word	0x00084248
   802bc:	00084260 	.word	0x00084260
   802c0:	00084278 	.word	0x00084278
   802c4:	00084288 	.word	0x00084288

000802c8 <twi_dropoffStart>:
	}

}

//start dropoff
uint8_t twi_dropoffStart(void) {
   802c8:	b500      	push	{lr}
   802ca:	b083      	sub	sp, #12

	uint8_t data[3] = {TWI_CMD_DROPOFF_START, 0, 0};
   802cc:	2321      	movs	r3, #33	; 0x21
   802ce:	f88d 3004 	strb.w	r3, [sp, #4]
   802d2:	2300      	movs	r3, #0
   802d4:	f88d 3005 	strb.w	r3, [sp, #5]
   802d8:	f88d 3006 	strb.w	r3, [sp, #6]
	//send pickup start cmd
	return twiSendData(data, 3);
   802dc:	a801      	add	r0, sp, #4
   802de:	2103      	movs	r1, #3
   802e0:	4b02      	ldr	r3, [pc, #8]	; (802ec <twi_dropoffStart+0x24>)
   802e2:	4798      	blx	r3
}
   802e4:	b003      	add	sp, #12
   802e6:	f85d fb04 	ldr.w	pc, [sp], #4
   802ea:	bf00      	nop
   802ec:	00080199 	.word	0x00080199

000802f0 <twi_dropoffGetStatus>:

//get the dropoff status
DropoffStatus twi_dropoffGetStatus(void) {
   802f0:	b500      	push	{lr}
   802f2:	b083      	sub	sp, #12
	uint8_t data[3] = {TWI_CMD_DROPOFF_STATUS, 0, 0};
   802f4:	2323      	movs	r3, #35	; 0x23
   802f6:	f88d 3004 	strb.w	r3, [sp, #4]
   802fa:	2300      	movs	r3, #0
   802fc:	f88d 3005 	strb.w	r3, [sp, #5]
   80300:	f88d 3006 	strb.w	r3, [sp, #6]
	uint8_t recv[3] = {0};
   80304:	f8ad 3000 	strh.w	r3, [sp]
   80308:	f88d 3002 	strb.w	r3, [sp, #2]
	//send pickup start cmd
	if (twiSendData(data, 3)) {
   8030c:	a801      	add	r0, sp, #4
   8030e:	2103      	movs	r1, #3
   80310:	4b10      	ldr	r3, [pc, #64]	; (80354 <twi_dropoffGetStatus+0x64>)
   80312:	4798      	blx	r3
   80314:	b1c0      	cbz	r0, 80348 <twi_dropoffGetStatus+0x58>
		//get status
		twiReciveData(recv, 3);
   80316:	4668      	mov	r0, sp
   80318:	2103      	movs	r1, #3
   8031a:	4b0f      	ldr	r3, [pc, #60]	; (80358 <twi_dropoffGetStatus+0x68>)
   8031c:	4798      	blx	r3
		if (recv[0] == TWI_CMD_DROPOFF_STATUS) {
   8031e:	f89d 3000 	ldrb.w	r3, [sp]
   80322:	2b23      	cmp	r3, #35	; 0x23
   80324:	d102      	bne.n	8032c <twi_dropoffGetStatus+0x3c>
			//printf("pickupstatus %x %u",recv[0],recv[1]);
			//vTaskDelay(pdMSTOTICKS(10));
			//wait here for arm to finish..

			return recv[1];
   80326:	f89d 0001 	ldrb.w	r0, [sp, #1]
   8032a:	e010      	b.n	8034e <twi_dropoffGetStatus+0x5e>
		} else {
			puts("ERROR pickup status");
   8032c:	480b      	ldr	r0, [pc, #44]	; (8035c <twi_dropoffGetStatus+0x6c>)
   8032e:	4b0c      	ldr	r3, [pc, #48]	; (80360 <twi_dropoffGetStatus+0x70>)
   80330:	4798      	blx	r3
			printf("got: %x %u\n", recv[0], recv[0]);
   80332:	f89d 2000 	ldrb.w	r2, [sp]
   80336:	480b      	ldr	r0, [pc, #44]	; (80364 <twi_dropoffGetStatus+0x74>)
   80338:	4611      	mov	r1, r2
   8033a:	4b0b      	ldr	r3, [pc, #44]	; (80368 <twi_dropoffGetStatus+0x78>)
   8033c:	4798      	blx	r3
			//vTaskDelay(pdMSTOTICKS(10));
			handleCmd(recv[0]);
   8033e:	f89d 0000 	ldrb.w	r0, [sp]
   80342:	4b0a      	ldr	r3, [pc, #40]	; (8036c <twi_dropoffGetStatus+0x7c>)
   80344:	4798      	blx	r3
   80346:	e002      	b.n	8034e <twi_dropoffGetStatus+0x5e>
			//vTaskDelay(pdMSTOTICKS(10));
		}

	} else {
		puts("Error on send status pickup");
   80348:	4809      	ldr	r0, [pc, #36]	; (80370 <twi_dropoffGetStatus+0x80>)
   8034a:	4b05      	ldr	r3, [pc, #20]	; (80360 <twi_dropoffGetStatus+0x70>)
   8034c:	4798      	blx	r3
	}
}
   8034e:	b003      	add	sp, #12
   80350:	f85d fb04 	ldr.w	pc, [sp], #4
   80354:	00080199 	.word	0x00080199
   80358:	000801e5 	.word	0x000801e5
   8035c:	000842b4 	.word	0x000842b4
   80360:	00081315 	.word	0x00081315
   80364:	000842c8 	.word	0x000842c8
   80368:	000811f9 	.word	0x000811f9
   8036c:	0008021d 	.word	0x0008021d
   80370:	000842d4 	.word	0x000842d4

00080374 <usart_serial_read_packet>:
 * \param len    Length of data
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
   80374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80378:	b083      	sub	sp, #12
   8037a:	4605      	mov	r5, r0
	while (len) {
   8037c:	4690      	mov	r8, r2
   8037e:	2a00      	cmp	r2, #0
   80380:	d047      	beq.n	80412 <usart_serial_read_packet+0x9e>
   80382:	1c4e      	adds	r6, r1, #1
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80384:	4f25      	ldr	r7, [pc, #148]	; (8041c <usart_serial_read_packet+0xa8>)
		while (usart_read(p_usart, &val));
   80386:	4c26      	ldr	r4, [pc, #152]	; (80420 <usart_serial_read_packet+0xac>)
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80388:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 80434 <usart_serial_read_packet+0xc0>
	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
   8038c:	f8df b094 	ldr.w	fp, [pc, #148]	; 80424 <usart_serial_read_packet+0xb0>
   80390:	f106 39ff 	add.w	r9, r6, #4294967295
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
	uint32_t val = 0;
   80394:	2300      	movs	r3, #0
   80396:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   80398:	4b22      	ldr	r3, [pc, #136]	; (80424 <usart_serial_read_packet+0xb0>)
   8039a:	429d      	cmp	r5, r3
   8039c:	d106      	bne.n	803ac <usart_serial_read_packet+0x38>
		while (uart_read((Uart*)p_usart, data));
   8039e:	4658      	mov	r0, fp
   803a0:	4649      	mov	r1, r9
   803a2:	4b21      	ldr	r3, [pc, #132]	; (80428 <usart_serial_read_packet+0xb4>)
   803a4:	4798      	blx	r3
   803a6:	2800      	cmp	r0, #0
   803a8:	d1f9      	bne.n	8039e <usart_serial_read_packet+0x2a>
   803aa:	e019      	b.n	803e0 <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   803ac:	4b1f      	ldr	r3, [pc, #124]	; (8042c <usart_serial_read_packet+0xb8>)
   803ae:	429d      	cmp	r5, r3
   803b0:	d109      	bne.n	803c6 <usart_serial_read_packet+0x52>
		while (usart_read(p_usart, &val));
   803b2:	4699      	mov	r9, r3
   803b4:	4648      	mov	r0, r9
   803b6:	a901      	add	r1, sp, #4
   803b8:	47a0      	blx	r4
   803ba:	2800      	cmp	r0, #0
   803bc:	d1fa      	bne.n	803b4 <usart_serial_read_packet+0x40>
		*data = (uint8_t)(val & 0xFF);
   803be:	9b01      	ldr	r3, [sp, #4]
   803c0:	f806 3c01 	strb.w	r3, [r6, #-1]
   803c4:	e017      	b.n	803f6 <usart_serial_read_packet+0x82>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   803c6:	4b1a      	ldr	r3, [pc, #104]	; (80430 <usart_serial_read_packet+0xbc>)
   803c8:	429d      	cmp	r5, r3
   803ca:	d109      	bne.n	803e0 <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
   803cc:	4699      	mov	r9, r3
   803ce:	4648      	mov	r0, r9
   803d0:	a901      	add	r1, sp, #4
   803d2:	47a0      	blx	r4
   803d4:	2800      	cmp	r0, #0
   803d6:	d1fa      	bne.n	803ce <usart_serial_read_packet+0x5a>
		*data = (uint8_t)(val & 0xFF);
   803d8:	9b01      	ldr	r3, [sp, #4]
   803da:	f806 3c01 	strb.w	r3, [r6, #-1]
   803de:	e014      	b.n	8040a <usart_serial_read_packet+0x96>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   803e0:	4555      	cmp	r5, sl
   803e2:	d108      	bne.n	803f6 <usart_serial_read_packet+0x82>
		while (usart_read(p_usart, &val));
   803e4:	4650      	mov	r0, sl
   803e6:	a901      	add	r1, sp, #4
   803e8:	47a0      	blx	r4
   803ea:	2800      	cmp	r0, #0
   803ec:	d1fa      	bne.n	803e4 <usart_serial_read_packet+0x70>
		*data = (uint8_t)(val & 0xFF);
   803ee:	9b01      	ldr	r3, [sp, #4]
   803f0:	f806 3c01 	strb.w	r3, [r6, #-1]
   803f4:	e009      	b.n	8040a <usart_serial_read_packet+0x96>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   803f6:	42bd      	cmp	r5, r7
   803f8:	d107      	bne.n	8040a <usart_serial_read_packet+0x96>
		while (usart_read(p_usart, &val));
   803fa:	4638      	mov	r0, r7
   803fc:	a901      	add	r1, sp, #4
   803fe:	47a0      	blx	r4
   80400:	2800      	cmp	r0, #0
   80402:	d1fa      	bne.n	803fa <usart_serial_read_packet+0x86>
		*data = (uint8_t)(val & 0xFF);
   80404:	9b01      	ldr	r3, [sp, #4]
   80406:	f806 3c01 	strb.w	r3, [r6, #-1]
   8040a:	3601      	adds	r6, #1
   8040c:	f1b8 0801 	subs.w	r8, r8, #1
   80410:	d1be      	bne.n	80390 <usart_serial_read_packet+0x1c>
		usart_serial_getchar(usart, data);
		len--;
		data++;
	}
	return STATUS_OK;
}
   80412:	2000      	movs	r0, #0
   80414:	b003      	add	sp, #12
   80416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8041a:	bf00      	nop
   8041c:	400a4000 	.word	0x400a4000
   80420:	00080c75 	.word	0x00080c75
   80424:	400e0800 	.word	0x400e0800
   80428:	00080c4d 	.word	0x00080c4d
   8042c:	40098000 	.word	0x40098000
   80430:	4009c000 	.word	0x4009c000
   80434:	400a0000 	.word	0x400a0000

00080438 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   80438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8043c:	460c      	mov	r4, r1
   8043e:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
   80440:	b960      	cbnz	r0, 8045c <_read+0x24>
		return -1;
	}

	for (; len > 0; --len) {
   80442:	2a00      	cmp	r2, #0
   80444:	dd0e      	ble.n	80464 <_read+0x2c>
   80446:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   80448:	4e09      	ldr	r6, [pc, #36]	; (80470 <_read+0x38>)
   8044a:	4d0a      	ldr	r5, [pc, #40]	; (80474 <_read+0x3c>)
   8044c:	6830      	ldr	r0, [r6, #0]
   8044e:	4621      	mov	r1, r4
   80450:	682b      	ldr	r3, [r5, #0]
   80452:	4798      	blx	r3
		ptr++;
   80454:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   80456:	42bc      	cmp	r4, r7
   80458:	d1f8      	bne.n	8044c <_read+0x14>
   8045a:	e006      	b.n	8046a <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
   8045c:	f04f 30ff 	mov.w	r0, #4294967295
   80460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len > 0; --len) {
   80464:	2000      	movs	r0, #0
   80466:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
   8046a:	4640      	mov	r0, r8
	}
	return nChars;
}
   8046c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80470:	20070b20 	.word	0x20070b20
   80474:	20070b18 	.word	0x20070b18

00080478 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   80478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8047c:	460e      	mov	r6, r1
   8047e:	4615      	mov	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   80480:	3801      	subs	r0, #1
   80482:	2802      	cmp	r0, #2
   80484:	d80f      	bhi.n	804a6 <_write+0x2e>
		return -1;
	}

	for (; len != 0; --len) {
   80486:	b192      	cbz	r2, 804ae <_write+0x36>
   80488:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
   8048a:	f8df 803c 	ldr.w	r8, [pc, #60]	; 804c8 <_write+0x50>
   8048e:	4f0d      	ldr	r7, [pc, #52]	; (804c4 <_write+0x4c>)
   80490:	f8d8 0000 	ldr.w	r0, [r8]
   80494:	5d31      	ldrb	r1, [r6, r4]
   80496:	683b      	ldr	r3, [r7, #0]
   80498:	4798      	blx	r3
   8049a:	2800      	cmp	r0, #0
   8049c:	db0a      	blt.n	804b4 <_write+0x3c>
			return -1;
		}
		++nChars;
   8049e:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   804a0:	42a5      	cmp	r5, r4
   804a2:	d1f5      	bne.n	80490 <_write+0x18>
   804a4:	e00a      	b.n	804bc <_write+0x44>
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
   804a6:	f04f 30ff 	mov.w	r0, #4294967295
   804aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len != 0; --len) {
   804ae:	2000      	movs	r0, #0
   804b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
   804b4:	f04f 30ff 	mov.w	r0, #4294967295
   804b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		++nChars;
   804bc:	4620      	mov	r0, r4
	}
	return nChars;
}
   804be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   804c2:	bf00      	nop
   804c4:	20070b1c 	.word	0x20070b1c
   804c8:	20070b20 	.word	0x20070b20

000804cc <twi_set_speed>:
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
   804cc:	4b0f      	ldr	r3, [pc, #60]	; (8050c <twi_set_speed+0x40>)
   804ce:	4299      	cmp	r1, r3
   804d0:	d819      	bhi.n	80506 <twi_set_speed+0x3a>
		return FAIL;
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   804d2:	0049      	lsls	r1, r1, #1
   804d4:	fbb2 f2f1 	udiv	r2, r2, r1
   804d8:	3a04      	subs	r2, #4

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   804da:	2aff      	cmp	r2, #255	; 0xff
   804dc:	d907      	bls.n	804ee <twi_set_speed+0x22>
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
   804de:	2300      	movs	r3, #0
	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
		/* Increase clock divider */
		ckdiv++;
   804e0:	3301      	adds	r3, #1
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
   804e2:	0852      	lsrs	r2, r2, #1
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   804e4:	2aff      	cmp	r2, #255	; 0xff
   804e6:	d903      	bls.n	804f0 <twi_set_speed+0x24>
   804e8:	2b07      	cmp	r3, #7
   804ea:	d1f9      	bne.n	804e0 <twi_set_speed+0x14>
   804ec:	e000      	b.n	804f0 <twi_set_speed+0x24>
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
   804ee:	2300      	movs	r3, #0
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   804f0:	0211      	lsls	r1, r2, #8
   804f2:	b289      	uxth	r1, r1
			TWI_CWGR_CKDIV(ckdiv);
   804f4:	041b      	lsls	r3, r3, #16
   804f6:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   804fa:	430b      	orrs	r3, r1
   804fc:	b2d2      	uxtb	r2, r2
   804fe:	431a      	orrs	r2, r3
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
   80500:	6102      	str	r2, [r0, #16]
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
			TWI_CWGR_CKDIV(ckdiv);

	return PASS;
   80502:	2000      	movs	r0, #0
   80504:	4770      	bx	lr
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
		return FAIL;
   80506:	2001      	movs	r0, #1
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
			TWI_CWGR_CKDIV(ckdiv);

	return PASS;
}
   80508:	4770      	bx	lr
   8050a:	bf00      	nop
   8050c:	00061a80 	.word	0x00061a80

00080510 <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
   80510:	b538      	push	{r3, r4, r5, lr}
   80512:	4604      	mov	r4, r0
   80514:	460d      	mov	r5, r1
	uint32_t status = TWI_SUCCESS;

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
   80516:	f04f 33ff 	mov.w	r3, #4294967295
   8051a:	6283      	str	r3, [r0, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
   8051c:	6a03      	ldr	r3, [r0, #32]
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
   8051e:	2380      	movs	r3, #128	; 0x80
   80520:	6003      	str	r3, [r0, #0]
	p_twi->TWI_RHR;
   80522:	6b03      	ldr	r3, [r0, #48]	; 0x30
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
   80524:	2308      	movs	r3, #8
   80526:	6003      	str	r3, [r0, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
   80528:	2320      	movs	r3, #32
   8052a:	6003      	str	r3, [r0, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
   8052c:	2304      	movs	r3, #4
   8052e:	6003      	str	r3, [r0, #0]
	twi_reset(p_twi);

	twi_enable_master_mode(p_twi);

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
   80530:	6849      	ldr	r1, [r1, #4]
   80532:	682a      	ldr	r2, [r5, #0]
   80534:	4b05      	ldr	r3, [pc, #20]	; (8054c <twi_master_init+0x3c>)
   80536:	4798      	blx	r3
   80538:	2801      	cmp	r0, #1
   8053a:	bf14      	ite	ne
   8053c:	2000      	movne	r0, #0
   8053e:	2001      	moveq	r0, #1
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
	}

	if (p_opt->smbus == 1) {
   80540:	7a6b      	ldrb	r3, [r5, #9]
   80542:	2b01      	cmp	r3, #1
		p_twi->TWI_CR = TWI_CR_QUICK;
   80544:	bf04      	itt	eq
   80546:	2340      	moveq	r3, #64	; 0x40
   80548:	6023      	streq	r3, [r4, #0]
	}

	return status;
}
   8054a:	bd38      	pop	{r3, r4, r5, pc}
   8054c:	000804cd 	.word	0x000804cd

00080550 <twi_master_read>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twi_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
   80550:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
   80554:	4604      	mov	r4, r0
	uint32_t status;
	uint32_t cnt = p_packet->length;
   80556:	68cb      	ldr	r3, [r1, #12]
	uint8_t *buffer = p_packet->buffer;
   80558:	688e      	ldr	r6, [r1, #8]
	uint8_t stop_sent = 0;
	uint32_t timeout = TWI_TIMEOUT;;
	
	/* Check argument */
	if (cnt == 0) {
   8055a:	2b00      	cmp	r3, #0
   8055c:	d049      	beq.n	805f2 <twi_master_read+0xa2>
		return TWI_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
   8055e:	2200      	movs	r2, #0
   80560:	6042      	str	r2, [r0, #4]
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
   80562:	6848      	ldr	r0, [r1, #4]
   80564:	0200      	lsls	r0, r0, #8
   80566:	f400 7040 	and.w	r0, r0, #768	; 0x300
		return TWI_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
   8056a:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
   8056e:	7c0d      	ldrb	r5, [r1, #16]
   80570:	042d      	lsls	r5, r5, #16
   80572:	f405 05fe 	and.w	r5, r5, #8323072	; 0x7f0000
   80576:	4328      	orrs	r0, r5
   80578:	6060      	str	r0, [r4, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
   8057a:	60e2      	str	r2, [r4, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   8057c:	684a      	ldr	r2, [r1, #4]
 */
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
   8057e:	b15a      	cbz	r2, 80598 <twi_master_read+0x48>
		return 0;

	val = addr[0];
   80580:	7808      	ldrb	r0, [r1, #0]
	if (len > 1) {
   80582:	2a01      	cmp	r2, #1
		val <<= 8;
		val |= addr[1];
   80584:	bfc4      	itt	gt
   80586:	784d      	ldrbgt	r5, [r1, #1]
   80588:	ea45 2000 	orrgt.w	r0, r5, r0, lsl #8
	}
	if (len > 2) {
   8058c:	2a02      	cmp	r2, #2
   8058e:	dd04      	ble.n	8059a <twi_master_read+0x4a>
		val <<= 8;
		val |= addr[2];
   80590:	788a      	ldrb	r2, [r1, #2]
   80592:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
   80596:	e000      	b.n	8059a <twi_master_read+0x4a>
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
		return 0;
   80598:	2000      	movs	r0, #0
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   8059a:	60e0      	str	r0, [r4, #12]

	/* Send a START condition */
	if (cnt == 1) {
   8059c:	2b01      	cmp	r3, #1
   8059e:	d104      	bne.n	805aa <twi_master_read+0x5a>
		p_twi->TWI_CR = TWI_CR_START | TWI_CR_STOP;
   805a0:	2203      	movs	r2, #3
   805a2:	6022      	str	r2, [r4, #0]
		stop_sent = 1;
   805a4:	f04f 0c01 	mov.w	ip, #1
   805a8:	e02b      	b.n	80602 <twi_master_read+0xb2>
	} else {
		p_twi->TWI_CR = TWI_CR_START;
   805aa:	2201      	movs	r2, #1
   805ac:	6022      	str	r2, [r4, #0]
		stop_sent = 0;
   805ae:	f04f 0c00 	mov.w	ip, #0
   805b2:	e026      	b.n	80602 <twi_master_read+0xb2>
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
   805b4:	6a21      	ldr	r1, [r4, #32]
		if (status & TWI_SR_NACK) {
   805b6:	f411 7f80 	tst.w	r1, #256	; 0x100
   805ba:	d11c      	bne.n	805f6 <twi_master_read+0xa6>
			return TWI_RECEIVE_NACK;
		}

		if (!timeout--) {
   805bc:	1e55      	subs	r5, r2, #1
   805be:	b1e2      	cbz	r2, 805fa <twi_master_read+0xaa>
   805c0:	462a      	mov	r2, r5
			return TWI_ERROR_TIMEOUT;
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
   805c2:	2b01      	cmp	r3, #1
   805c4:	d105      	bne.n	805d2 <twi_master_read+0x82>
   805c6:	f1bc 0f00 	cmp.w	ip, #0
   805ca:	d102      	bne.n	805d2 <twi_master_read+0x82>
			p_twi->TWI_CR = TWI_CR_STOP;
   805cc:	f8c4 9000 	str.w	r9, [r4]
			stop_sent = 1;
   805d0:	46c4      	mov	ip, r8
		}

		if (!(status & TWI_SR_RXRDY)) {
   805d2:	f011 0f02 	tst.w	r1, #2
   805d6:	d004      	beq.n	805e2 <twi_master_read+0x92>
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;
   805d8:	6b22      	ldr	r2, [r4, #48]	; 0x30
   805da:	7032      	strb	r2, [r6, #0]

		cnt--;
   805dc:	3b01      	subs	r3, #1
		}

		if (!(status & TWI_SR_RXRDY)) {
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;
   805de:	3601      	adds	r6, #1

		cnt--;
		timeout = TWI_TIMEOUT;
   805e0:	463a      	mov	r2, r7
	} else {
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
   805e2:	2b00      	cmp	r3, #0
   805e4:	d1e6      	bne.n	805b4 <twi_master_read+0x64>

		cnt--;
		timeout = TWI_TIMEOUT;
	}

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
   805e6:	6a23      	ldr	r3, [r4, #32]
   805e8:	f013 0f01 	tst.w	r3, #1
   805ec:	d0fb      	beq.n	805e6 <twi_master_read+0x96>
	}

	p_twi->TWI_SR;
   805ee:	6a23      	ldr	r3, [r4, #32]

	return TWI_SUCCESS;
   805f0:	e014      	b.n	8061c <twi_master_read+0xcc>
	uint8_t stop_sent = 0;
	uint32_t timeout = TWI_TIMEOUT;;
	
	/* Check argument */
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
   805f2:	2001      	movs	r0, #1
   805f4:	e012      	b.n	8061c <twi_master_read+0xcc>
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
   805f6:	2005      	movs	r0, #5
   805f8:	e010      	b.n	8061c <twi_master_read+0xcc>
		}

		if (!timeout--) {
			return TWI_ERROR_TIMEOUT;
   805fa:	2009      	movs	r0, #9
   805fc:	e00e      	b.n	8061c <twi_master_read+0xcc>
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
   805fe:	2005      	movs	r0, #5
   80600:	e00c      	b.n	8061c <twi_master_read+0xcc>
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
   80602:	6a21      	ldr	r1, [r4, #32]
		if (status & TWI_SR_NACK) {
   80604:	f411 7080 	ands.w	r0, r1, #256	; 0x100
   80608:	d1f9      	bne.n	805fe <twi_master_read+0xae>
			return TWI_RECEIVE_NACK;
		}

		if (!timeout--) {
   8060a:	f643 2297 	movw	r2, #14999	; 0x3a97
			return TWI_ERROR_TIMEOUT;
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
			p_twi->TWI_CR = TWI_CR_STOP;
   8060e:	f04f 0902 	mov.w	r9, #2
			stop_sent = 1;
   80612:	f04f 0801 	mov.w	r8, #1
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;

		cnt--;
		timeout = TWI_TIMEOUT;
   80616:	f643 2798 	movw	r7, #15000	; 0x3a98
   8061a:	e7d2      	b.n	805c2 <twi_master_read+0x72>
	}

	p_twi->TWI_SR;

	return TWI_SUCCESS;
}
   8061c:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
   80620:	4770      	bx	lr
   80622:	bf00      	nop

00080624 <twi_master_write>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
   80624:	b470      	push	{r4, r5, r6}
   80626:	4603      	mov	r3, r0
	uint32_t status;
	uint32_t cnt = p_packet->length;
   80628:	68ca      	ldr	r2, [r1, #12]
	uint8_t *buffer = p_packet->buffer;
   8062a:	6888      	ldr	r0, [r1, #8]

	/* Check argument */
	if (cnt == 0) {
   8062c:	2a00      	cmp	r2, #0
   8062e:	d03f      	beq.n	806b0 <twi_master_write+0x8c>
		return TWI_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
   80630:	2400      	movs	r4, #0
   80632:	605c      	str	r4, [r3, #4]
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
   80634:	7c0e      	ldrb	r6, [r1, #16]
   80636:	0436      	lsls	r6, r6, #16
   80638:	f406 06fe 	and.w	r6, r6, #8323072	; 0x7f0000
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
   8063c:	684d      	ldr	r5, [r1, #4]
   8063e:	022d      	lsls	r5, r5, #8
   80640:	f405 7540 	and.w	r5, r5, #768	; 0x300
		return TWI_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
   80644:	4335      	orrs	r5, r6
   80646:	605d      	str	r5, [r3, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
   80648:	60dc      	str	r4, [r3, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   8064a:	684c      	ldr	r4, [r1, #4]
 */
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
   8064c:	b15c      	cbz	r4, 80666 <twi_master_write+0x42>
		return 0;

	val = addr[0];
   8064e:	780d      	ldrb	r5, [r1, #0]
	if (len > 1) {
   80650:	2c01      	cmp	r4, #1
		val <<= 8;
		val |= addr[1];
   80652:	bfc4      	itt	gt
   80654:	784e      	ldrbgt	r6, [r1, #1]
   80656:	ea46 2505 	orrgt.w	r5, r6, r5, lsl #8
	}
	if (len > 2) {
   8065a:	2c02      	cmp	r4, #2
   8065c:	dd04      	ble.n	80668 <twi_master_write+0x44>
		val <<= 8;
		val |= addr[2];
   8065e:	7889      	ldrb	r1, [r1, #2]
   80660:	ea41 2505 	orr.w	r5, r1, r5, lsl #8
   80664:	e000      	b.n	80668 <twi_master_write+0x44>
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
		return 0;
   80666:	2500      	movs	r5, #0
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   80668:	60dd      	str	r5, [r3, #12]
   8066a:	e00b      	b.n	80684 <twi_master_write+0x60>

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
   8066c:	6a19      	ldr	r1, [r3, #32]
		if (status & TWI_SR_NACK) {
   8066e:	f411 7f80 	tst.w	r1, #256	; 0x100
   80672:	d11f      	bne.n	806b4 <twi_master_write+0x90>
			return TWI_RECEIVE_NACK;
		}

		if (!(status & TWI_SR_TXRDY)) {
   80674:	f011 0f04 	tst.w	r1, #4
   80678:	d0f8      	beq.n	8066c <twi_master_write+0x48>
			continue;
		}
		p_twi->TWI_THR = *buffer++;
   8067a:	f810 1b01 	ldrb.w	r1, [r0], #1
   8067e:	6359      	str	r1, [r3, #52]	; 0x34
	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
   80680:	3a01      	subs	r2, #1
   80682:	d007      	beq.n	80694 <twi_master_write+0x70>
		status = p_twi->TWI_SR;
   80684:	6a19      	ldr	r1, [r3, #32]
		if (status & TWI_SR_NACK) {
   80686:	f411 7f80 	tst.w	r1, #256	; 0x100
   8068a:	d115      	bne.n	806b8 <twi_master_write+0x94>
			return TWI_RECEIVE_NACK;
		}

		if (!(status & TWI_SR_TXRDY)) {
   8068c:	f011 0f04 	tst.w	r1, #4
   80690:	d1f3      	bne.n	8067a <twi_master_write+0x56>
   80692:	e7eb      	b.n	8066c <twi_master_write+0x48>

		cnt--;
	}

	while (1) {
		status = p_twi->TWI_SR;
   80694:	6a1a      	ldr	r2, [r3, #32]
		if (status & TWI_SR_NACK) {
   80696:	f412 7080 	ands.w	r0, r2, #256	; 0x100
   8069a:	d10f      	bne.n	806bc <twi_master_write+0x98>
			return TWI_RECEIVE_NACK;
		}

		if (status & TWI_SR_TXRDY) {
   8069c:	f012 0f04 	tst.w	r2, #4
   806a0:	d0f8      	beq.n	80694 <twi_master_write+0x70>
			break;
		}
	}

	p_twi->TWI_CR = TWI_CR_STOP;
   806a2:	2202      	movs	r2, #2
   806a4:	601a      	str	r2, [r3, #0]

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
   806a6:	6a1a      	ldr	r2, [r3, #32]
   806a8:	f012 0f01 	tst.w	r2, #1
   806ac:	d0fb      	beq.n	806a6 <twi_master_write+0x82>
   806ae:	e006      	b.n	806be <twi_master_write+0x9a>
	uint32_t cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;

	/* Check argument */
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
   806b0:	2001      	movs	r0, #1
   806b2:	e004      	b.n	806be <twi_master_write+0x9a>

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
   806b4:	2005      	movs	r0, #5
   806b6:	e002      	b.n	806be <twi_master_write+0x9a>
   806b8:	2005      	movs	r0, #5
   806ba:	e000      	b.n	806be <twi_master_write+0x9a>
	}

	while (1) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
   806bc:	2005      	movs	r0, #5

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
	}

	return TWI_SUCCESS;
}
   806be:	bc70      	pop	{r4, r5, r6}
   806c0:	4770      	bx	lr
   806c2:	bf00      	nop

000806c4 <twi_probe>:
 * \param uc_slave_addr Address of the remote chip to search for.
 *
 * \return TWI_SUCCESS if a chip was found, error code otherwise.
 */
uint32_t twi_probe(Twi *p_twi, uint8_t uc_slave_addr)
{
   806c4:	b500      	push	{lr}
   806c6:	b087      	sub	sp, #28
	twi_packet_t packet;
	uint8_t data = 0;
   806c8:	2300      	movs	r3, #0
   806ca:	aa06      	add	r2, sp, #24
   806cc:	f802 3d15 	strb.w	r3, [r2, #-21]!

	/* Data to send */
	packet.buffer = &data;
   806d0:	9203      	str	r2, [sp, #12]
	/* Data length */
	packet.length = 1;
   806d2:	2201      	movs	r2, #1
   806d4:	9204      	str	r2, [sp, #16]
	/* Slave chip address */
	packet.chip = (uint32_t) uc_slave_addr;
   806d6:	f88d 1014 	strb.w	r1, [sp, #20]
	/* Internal chip address */
	packet.addr[0] = 0;
   806da:	f88d 3004 	strb.w	r3, [sp, #4]
	/* Address length */
	packet.addr_length = 0;
   806de:	9302      	str	r3, [sp, #8]

	/* Perform a master write access */
	return (twi_master_write(p_twi, &packet));
   806e0:	a901      	add	r1, sp, #4
   806e2:	4b02      	ldr	r3, [pc, #8]	; (806ec <twi_probe+0x28>)
   806e4:	4798      	blx	r3
}
   806e6:	b007      	add	sp, #28
   806e8:	f85d fb04 	ldr.w	pc, [sp], #4
   806ec:	00080625 	.word	0x00080625

000806f0 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   806f0:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   806f2:	480e      	ldr	r0, [pc, #56]	; (8072c <sysclk_init+0x3c>)
   806f4:	4b0e      	ldr	r3, [pc, #56]	; (80730 <sysclk_init+0x40>)
   806f6:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   806f8:	2000      	movs	r0, #0
   806fa:	213e      	movs	r1, #62	; 0x3e
   806fc:	4b0d      	ldr	r3, [pc, #52]	; (80734 <sysclk_init+0x44>)
   806fe:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   80700:	4c0d      	ldr	r4, [pc, #52]	; (80738 <sysclk_init+0x48>)
   80702:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   80704:	2800      	cmp	r0, #0
   80706:	d0fc      	beq.n	80702 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   80708:	4b0c      	ldr	r3, [pc, #48]	; (8073c <sysclk_init+0x4c>)
   8070a:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   8070c:	4a0c      	ldr	r2, [pc, #48]	; (80740 <sysclk_init+0x50>)
   8070e:	4b0d      	ldr	r3, [pc, #52]	; (80744 <sysclk_init+0x54>)
   80710:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   80712:	4c0d      	ldr	r4, [pc, #52]	; (80748 <sysclk_init+0x58>)
   80714:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   80716:	2800      	cmp	r0, #0
   80718:	d0fc      	beq.n	80714 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   8071a:	2010      	movs	r0, #16
   8071c:	4b0b      	ldr	r3, [pc, #44]	; (8074c <sysclk_init+0x5c>)
   8071e:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   80720:	4b0b      	ldr	r3, [pc, #44]	; (80750 <sysclk_init+0x60>)
   80722:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   80724:	4801      	ldr	r0, [pc, #4]	; (8072c <sysclk_init+0x3c>)
   80726:	4b02      	ldr	r3, [pc, #8]	; (80730 <sysclk_init+0x40>)
   80728:	4798      	blx	r3
   8072a:	bd10      	pop	{r4, pc}
   8072c:	0501bd00 	.word	0x0501bd00
   80730:	200700b1 	.word	0x200700b1
   80734:	00080b29 	.word	0x00080b29
   80738:	00080b7d 	.word	0x00080b7d
   8073c:	00080b8d 	.word	0x00080b8d
   80740:	200d3f01 	.word	0x200d3f01
   80744:	400e0600 	.word	0x400e0600
   80748:	00080b9d 	.word	0x00080b9d
   8074c:	00080ac5 	.word	0x00080ac5
   80750:	00080d41 	.word	0x00080d41

00080754 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   80754:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   80756:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8075a:	4b22      	ldr	r3, [pc, #136]	; (807e4 <board_init+0x90>)
   8075c:	605a      	str	r2, [r3, #4]
   8075e:	200b      	movs	r0, #11
   80760:	4c21      	ldr	r4, [pc, #132]	; (807e8 <board_init+0x94>)
   80762:	47a0      	blx	r4
   80764:	200c      	movs	r0, #12
   80766:	47a0      	blx	r4
   80768:	200d      	movs	r0, #13
   8076a:	47a0      	blx	r4
   8076c:	200e      	movs	r0, #14
   8076e:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   80770:	203b      	movs	r0, #59	; 0x3b
   80772:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80776:	4c1d      	ldr	r4, [pc, #116]	; (807ec <board_init+0x98>)
   80778:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   8077a:	2055      	movs	r0, #85	; 0x55
   8077c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80780:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   80782:	2056      	movs	r0, #86	; 0x56
   80784:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80788:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   8078a:	2068      	movs	r0, #104	; 0x68
   8078c:	4918      	ldr	r1, [pc, #96]	; (807f0 <board_init+0x9c>)
   8078e:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   80790:	205c      	movs	r0, #92	; 0x5c
   80792:	4918      	ldr	r1, [pc, #96]	; (807f4 <board_init+0xa0>)
   80794:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   80796:	4818      	ldr	r0, [pc, #96]	; (807f8 <board_init+0xa4>)
   80798:	f44f 7140 	mov.w	r1, #768	; 0x300
   8079c:	4a17      	ldr	r2, [pc, #92]	; (807fc <board_init+0xa8>)
   8079e:	4b18      	ldr	r3, [pc, #96]	; (80800 <board_init+0xac>)
   807a0:	4798      	blx	r3
		gpio_configure_pin(SPI1_NPCS3_GPIO, SPI1_NPCS3_FLAGS);
#   endif
#endif

#ifdef CONF_BOARD_TWI0
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
   807a2:	2011      	movs	r0, #17
   807a4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   807a8:	47a0      	blx	r4
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
   807aa:	2012      	movs	r0, #18
   807ac:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   807b0:	47a0      	blx	r4
#endif

#ifdef CONF_BOARD_TWI1
	gpio_configure_pin(TWI1_DATA_GPIO, TWI1_DATA_FLAGS);
   807b2:	202c      	movs	r0, #44	; 0x2c
   807b4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   807b8:	47a0      	blx	r4
	gpio_configure_pin(TWI1_CLK_GPIO, TWI1_CLK_FLAGS);
   807ba:	202d      	movs	r0, #45	; 0x2d
   807bc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   807c0:	47a0      	blx	r4
#endif

#ifdef CONF_BOARD_USART_RXD
	/* Configure USART RXD pin */
	gpio_configure_pin(PIN_USART0_RXD_IDX, PIN_USART0_RXD_FLAGS);
   807c2:	200a      	movs	r0, #10
   807c4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   807c8:	47a0      	blx	r4
#endif

#ifdef CONF_BOARD_USART_TXD
	/* Configure USART TXD pin */
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
   807ca:	200b      	movs	r0, #11
   807cc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   807d0:	47a0      	blx	r4
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   807d2:	202b      	movs	r0, #43	; 0x2b
   807d4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   807d8:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   807da:	202a      	movs	r0, #42	; 0x2a
   807dc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   807e0:	47a0      	blx	r4
   807e2:	bd10      	pop	{r4, pc}
   807e4:	400e1a50 	.word	0x400e1a50
   807e8:	00080bad 	.word	0x00080bad
   807ec:	000808a9 	.word	0x000808a9
   807f0:	28000079 	.word	0x28000079
   807f4:	28000001 	.word	0x28000001
   807f8:	400e0e00 	.word	0x400e0e00
   807fc:	08000001 	.word	0x08000001
   80800:	0008097d 	.word	0x0008097d

00080804 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   80804:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   80806:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   8080a:	d016      	beq.n	8083a <pio_set_peripheral+0x36>
   8080c:	d804      	bhi.n	80818 <pio_set_peripheral+0x14>
   8080e:	b1c1      	cbz	r1, 80842 <pio_set_peripheral+0x3e>
   80810:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   80814:	d00a      	beq.n	8082c <pio_set_peripheral+0x28>
   80816:	e013      	b.n	80840 <pio_set_peripheral+0x3c>
   80818:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   8081c:	d011      	beq.n	80842 <pio_set_peripheral+0x3e>
   8081e:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   80822:	d00e      	beq.n	80842 <pio_set_peripheral+0x3e>
   80824:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   80828:	d10a      	bne.n	80840 <pio_set_peripheral+0x3c>
   8082a:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   8082c:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   8082e:	6f01      	ldr	r1, [r0, #112]	; 0x70
   80830:	400b      	ands	r3, r1
   80832:	ea23 0302 	bic.w	r3, r3, r2
   80836:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   80838:	e002      	b.n	80840 <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   8083a:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   8083c:	4313      	orrs	r3, r2
   8083e:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   80840:	6042      	str	r2, [r0, #4]
   80842:	4770      	bx	lr

00080844 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   80844:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80846:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   8084a:	bf14      	ite	ne
   8084c:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8084e:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   80850:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   80854:	bf14      	ite	ne
   80856:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   80858:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   8085a:	f012 0f02 	tst.w	r2, #2
   8085e:	d002      	beq.n	80866 <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   80860:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   80864:	e004      	b.n	80870 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   80866:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   8086a:	bf18      	it	ne
   8086c:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   80870:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   80872:	6001      	str	r1, [r0, #0]
   80874:	4770      	bx	lr
   80876:	bf00      	nop

00080878 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   80878:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   8087a:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8087c:	9c01      	ldr	r4, [sp, #4]
   8087e:	b10c      	cbz	r4, 80884 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   80880:	6641      	str	r1, [r0, #100]	; 0x64
   80882:	e000      	b.n	80886 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80884:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   80886:	b10b      	cbz	r3, 8088c <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   80888:	6501      	str	r1, [r0, #80]	; 0x50
   8088a:	e000      	b.n	8088e <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   8088c:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   8088e:	b10a      	cbz	r2, 80894 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   80890:	6301      	str	r1, [r0, #48]	; 0x30
   80892:	e000      	b.n	80896 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   80894:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   80896:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   80898:	6001      	str	r1, [r0, #0]
}
   8089a:	f85d 4b04 	ldr.w	r4, [sp], #4
   8089e:	4770      	bx	lr

000808a0 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   808a0:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   808a2:	4770      	bx	lr

000808a4 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   808a4:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   808a6:	4770      	bx	lr

000808a8 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   808a8:	b570      	push	{r4, r5, r6, lr}
   808aa:	b082      	sub	sp, #8
   808ac:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   808ae:	0944      	lsrs	r4, r0, #5
   808b0:	f504 1400 	add.w	r4, r4, #2097152	; 0x200000
   808b4:	f204 7407 	addw	r4, r4, #1799	; 0x707
   808b8:	0266      	lsls	r6, r4, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   808ba:	f001 44f0 	and.w	r4, r1, #2013265920	; 0x78000000
   808be:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   808c2:	d030      	beq.n	80926 <pio_configure_pin+0x7e>
   808c4:	d806      	bhi.n	808d4 <pio_configure_pin+0x2c>
   808c6:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   808ca:	d00a      	beq.n	808e2 <pio_configure_pin+0x3a>
   808cc:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   808d0:	d018      	beq.n	80904 <pio_configure_pin+0x5c>
   808d2:	e049      	b.n	80968 <pio_configure_pin+0xc0>
   808d4:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   808d8:	d030      	beq.n	8093c <pio_configure_pin+0x94>
   808da:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   808de:	d02d      	beq.n	8093c <pio_configure_pin+0x94>
   808e0:	e042      	b.n	80968 <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   808e2:	f000 001f 	and.w	r0, r0, #31
   808e6:	2401      	movs	r4, #1
   808e8:	4084      	lsls	r4, r0
   808ea:	4630      	mov	r0, r6
   808ec:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   808f0:	4622      	mov	r2, r4
   808f2:	4b1f      	ldr	r3, [pc, #124]	; (80970 <pio_configure_pin+0xc8>)
   808f4:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   808f6:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   808fa:	bf14      	ite	ne
   808fc:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   808fe:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80900:	2001      	movs	r0, #1
   80902:	e032      	b.n	8096a <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   80904:	f000 001f 	and.w	r0, r0, #31
   80908:	2401      	movs	r4, #1
   8090a:	4084      	lsls	r4, r0
   8090c:	4630      	mov	r0, r6
   8090e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80912:	4622      	mov	r2, r4
   80914:	4b16      	ldr	r3, [pc, #88]	; (80970 <pio_configure_pin+0xc8>)
   80916:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80918:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   8091c:	bf14      	ite	ne
   8091e:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80920:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80922:	2001      	movs	r0, #1
   80924:	e021      	b.n	8096a <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   80926:	f000 011f 	and.w	r1, r0, #31
   8092a:	2401      	movs	r4, #1
   8092c:	4630      	mov	r0, r6
   8092e:	fa04 f101 	lsl.w	r1, r4, r1
   80932:	462a      	mov	r2, r5
   80934:	4b0f      	ldr	r3, [pc, #60]	; (80974 <pio_configure_pin+0xcc>)
   80936:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80938:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   8093a:	e016      	b.n	8096a <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   8093c:	f000 011f 	and.w	r1, r0, #31
   80940:	2401      	movs	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80942:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80946:	ea05 0304 	and.w	r3, r5, r4
   8094a:	9300      	str	r3, [sp, #0]
   8094c:	4630      	mov	r0, r6
   8094e:	fa04 f101 	lsl.w	r1, r4, r1
   80952:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80956:	bf14      	ite	ne
   80958:	2200      	movne	r2, #0
   8095a:	2201      	moveq	r2, #1
   8095c:	f3c5 0380 	ubfx	r3, r5, #2, #1
   80960:	4d05      	ldr	r5, [pc, #20]	; (80978 <pio_configure_pin+0xd0>)
   80962:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
   80964:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   80966:	e000      	b.n	8096a <pio_configure_pin+0xc2>

	default:
		return 0;
   80968:	2000      	movs	r0, #0
	}

	return 1;
}
   8096a:	b002      	add	sp, #8
   8096c:	bd70      	pop	{r4, r5, r6, pc}
   8096e:	bf00      	nop
   80970:	00080805 	.word	0x00080805
   80974:	00080845 	.word	0x00080845
   80978:	00080879 	.word	0x00080879

0008097c <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   8097c:	b5f0      	push	{r4, r5, r6, r7, lr}
   8097e:	b083      	sub	sp, #12
   80980:	4607      	mov	r7, r0
   80982:	460e      	mov	r6, r1
   80984:	4615      	mov	r5, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   80986:	f002 44f0 	and.w	r4, r2, #2013265920	; 0x78000000
   8098a:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   8098e:	d026      	beq.n	809de <pio_configure_pin_group+0x62>
   80990:	d806      	bhi.n	809a0 <pio_configure_pin_group+0x24>
   80992:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   80996:	d00a      	beq.n	809ae <pio_configure_pin_group+0x32>
   80998:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   8099c:	d013      	beq.n	809c6 <pio_configure_pin_group+0x4a>
   8099e:	e034      	b.n	80a0a <pio_configure_pin_group+0x8e>
   809a0:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   809a4:	d01f      	beq.n	809e6 <pio_configure_pin_group+0x6a>
   809a6:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   809aa:	d01c      	beq.n	809e6 <pio_configure_pin_group+0x6a>
   809ac:	e02d      	b.n	80a0a <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   809ae:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   809b2:	4632      	mov	r2, r6
   809b4:	4b16      	ldr	r3, [pc, #88]	; (80a10 <pio_configure_pin_group+0x94>)
   809b6:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   809b8:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   809bc:	bf14      	ite	ne
   809be:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   809c0:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   809c2:	2001      	movs	r0, #1
   809c4:	e022      	b.n	80a0c <pio_configure_pin_group+0x90>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   809c6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   809ca:	4632      	mov	r2, r6
   809cc:	4b10      	ldr	r3, [pc, #64]	; (80a10 <pio_configure_pin_group+0x94>)
   809ce:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   809d0:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   809d4:	bf14      	ite	ne
   809d6:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   809d8:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   809da:	2001      	movs	r0, #1
   809dc:	e016      	b.n	80a0c <pio_configure_pin_group+0x90>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   809de:	4b0d      	ldr	r3, [pc, #52]	; (80a14 <pio_configure_pin_group+0x98>)
   809e0:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   809e2:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   809e4:	e012      	b.n	80a0c <pio_configure_pin_group+0x90>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   809e6:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   809ea:	f005 0301 	and.w	r3, r5, #1
   809ee:	9300      	str	r3, [sp, #0]
   809f0:	4638      	mov	r0, r7
   809f2:	4631      	mov	r1, r6
   809f4:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   809f8:	bf14      	ite	ne
   809fa:	2200      	movne	r2, #0
   809fc:	2201      	moveq	r2, #1
   809fe:	f3c5 0380 	ubfx	r3, r5, #2, #1
   80a02:	4c05      	ldr	r4, [pc, #20]	; (80a18 <pio_configure_pin_group+0x9c>)
   80a04:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   80a06:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   80a08:	e000      	b.n	80a0c <pio_configure_pin_group+0x90>

	default:
		return 0;
   80a0a:	2000      	movs	r0, #0
	}

	return 1;
}
   80a0c:	b003      	add	sp, #12
   80a0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80a10:	00080805 	.word	0x00080805
   80a14:	00080845 	.word	0x00080845
   80a18:	00080879 	.word	0x00080879

00080a1c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   80a1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80a20:	4604      	mov	r4, r0
   80a22:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   80a24:	4b10      	ldr	r3, [pc, #64]	; (80a68 <pio_handler_process+0x4c>)
   80a26:	4798      	blx	r3
   80a28:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   80a2a:	4620      	mov	r0, r4
   80a2c:	4b0f      	ldr	r3, [pc, #60]	; (80a6c <pio_handler_process+0x50>)
   80a2e:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   80a30:	4005      	ands	r5, r0
   80a32:	d017      	beq.n	80a64 <pio_handler_process+0x48>
   80a34:	4f0e      	ldr	r7, [pc, #56]	; (80a70 <pio_handler_process+0x54>)
   80a36:	f107 040c 	add.w	r4, r7, #12
   80a3a:	376c      	adds	r7, #108	; 0x6c
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   80a3c:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   80a40:	42b3      	cmp	r3, r6
   80a42:	d10a      	bne.n	80a5a <pio_handler_process+0x3e>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   80a44:	f854 1c08 	ldr.w	r1, [r4, #-8]
   80a48:	4229      	tst	r1, r5
   80a4a:	d006      	beq.n	80a5a <pio_handler_process+0x3e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   80a4c:	6823      	ldr	r3, [r4, #0]
   80a4e:	4630      	mov	r0, r6
   80a50:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   80a52:	f854 3c08 	ldr.w	r3, [r4, #-8]
   80a56:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   80a5a:	42bc      	cmp	r4, r7
   80a5c:	d002      	beq.n	80a64 <pio_handler_process+0x48>
   80a5e:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   80a60:	2d00      	cmp	r5, #0
   80a62:	d1eb      	bne.n	80a3c <pio_handler_process+0x20>
   80a64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80a68:	000808a1 	.word	0x000808a1
   80a6c:	000808a5 	.word	0x000808a5
   80a70:	200709c0 	.word	0x200709c0

00080a74 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   80a74:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   80a76:	4802      	ldr	r0, [pc, #8]	; (80a80 <PIOA_Handler+0xc>)
   80a78:	210b      	movs	r1, #11
   80a7a:	4b02      	ldr	r3, [pc, #8]	; (80a84 <PIOA_Handler+0x10>)
   80a7c:	4798      	blx	r3
   80a7e:	bd08      	pop	{r3, pc}
   80a80:	400e0e00 	.word	0x400e0e00
   80a84:	00080a1d 	.word	0x00080a1d

00080a88 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   80a88:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   80a8a:	4802      	ldr	r0, [pc, #8]	; (80a94 <PIOB_Handler+0xc>)
   80a8c:	210c      	movs	r1, #12
   80a8e:	4b02      	ldr	r3, [pc, #8]	; (80a98 <PIOB_Handler+0x10>)
   80a90:	4798      	blx	r3
   80a92:	bd08      	pop	{r3, pc}
   80a94:	400e1000 	.word	0x400e1000
   80a98:	00080a1d 	.word	0x00080a1d

00080a9c <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   80a9c:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   80a9e:	4802      	ldr	r0, [pc, #8]	; (80aa8 <PIOC_Handler+0xc>)
   80aa0:	210d      	movs	r1, #13
   80aa2:	4b02      	ldr	r3, [pc, #8]	; (80aac <PIOC_Handler+0x10>)
   80aa4:	4798      	blx	r3
   80aa6:	bd08      	pop	{r3, pc}
   80aa8:	400e1200 	.word	0x400e1200
   80aac:	00080a1d 	.word	0x00080a1d

00080ab0 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   80ab0:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   80ab2:	4802      	ldr	r0, [pc, #8]	; (80abc <PIOD_Handler+0xc>)
   80ab4:	210e      	movs	r1, #14
   80ab6:	4b02      	ldr	r3, [pc, #8]	; (80ac0 <PIOD_Handler+0x10>)
   80ab8:	4798      	blx	r3
   80aba:	bd08      	pop	{r3, pc}
   80abc:	400e1400 	.word	0x400e1400
   80ac0:	00080a1d 	.word	0x00080a1d

00080ac4 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   80ac4:	4b17      	ldr	r3, [pc, #92]	; (80b24 <pmc_switch_mck_to_pllack+0x60>)
   80ac6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80ac8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   80acc:	4310      	orrs	r0, r2
   80ace:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80ad0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80ad2:	f013 0f08 	tst.w	r3, #8
   80ad6:	d109      	bne.n	80aec <pmc_switch_mck_to_pllack+0x28>
   80ad8:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80adc:	4911      	ldr	r1, [pc, #68]	; (80b24 <pmc_switch_mck_to_pllack+0x60>)
   80ade:	e001      	b.n	80ae4 <pmc_switch_mck_to_pllack+0x20>
			--ul_timeout) {
		if (ul_timeout == 0) {
   80ae0:	3b01      	subs	r3, #1
   80ae2:	d019      	beq.n	80b18 <pmc_switch_mck_to_pllack+0x54>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80ae4:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80ae6:	f012 0f08 	tst.w	r2, #8
   80aea:	d0f9      	beq.n	80ae0 <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   80aec:	4b0d      	ldr	r3, [pc, #52]	; (80b24 <pmc_switch_mck_to_pllack+0x60>)
   80aee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80af0:	f022 0203 	bic.w	r2, r2, #3
   80af4:	f042 0202 	orr.w	r2, r2, #2
   80af8:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80afa:	6e98      	ldr	r0, [r3, #104]	; 0x68
   80afc:	f010 0008 	ands.w	r0, r0, #8
   80b00:	d10c      	bne.n	80b1c <pmc_switch_mck_to_pllack+0x58>
   80b02:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80b06:	4907      	ldr	r1, [pc, #28]	; (80b24 <pmc_switch_mck_to_pllack+0x60>)
   80b08:	e001      	b.n	80b0e <pmc_switch_mck_to_pllack+0x4a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   80b0a:	3b01      	subs	r3, #1
   80b0c:	d008      	beq.n	80b20 <pmc_switch_mck_to_pllack+0x5c>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80b0e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80b10:	f012 0f08 	tst.w	r2, #8
   80b14:	d0f9      	beq.n	80b0a <pmc_switch_mck_to_pllack+0x46>
   80b16:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   80b18:	2001      	movs	r0, #1
   80b1a:	4770      	bx	lr
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   80b1c:	2000      	movs	r0, #0
   80b1e:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   80b20:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   80b22:	4770      	bx	lr
   80b24:	400e0600 	.word	0x400e0600

00080b28 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   80b28:	b138      	cbz	r0, 80b3a <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80b2a:	4911      	ldr	r1, [pc, #68]	; (80b70 <pmc_switch_mainck_to_xtal+0x48>)
   80b2c:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   80b2e:	4a11      	ldr	r2, [pc, #68]	; (80b74 <pmc_switch_mainck_to_xtal+0x4c>)
   80b30:	401a      	ands	r2, r3
   80b32:	4b11      	ldr	r3, [pc, #68]	; (80b78 <pmc_switch_mainck_to_xtal+0x50>)
   80b34:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80b36:	620b      	str	r3, [r1, #32]
   80b38:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80b3a:	4a0d      	ldr	r2, [pc, #52]	; (80b70 <pmc_switch_mainck_to_xtal+0x48>)
   80b3c:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   80b3e:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   80b42:	f023 0303 	bic.w	r3, r3, #3
   80b46:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   80b4a:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   80b4e:	0209      	lsls	r1, r1, #8
   80b50:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   80b52:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80b54:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   80b56:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80b58:	f013 0f01 	tst.w	r3, #1
   80b5c:	d0fb      	beq.n	80b56 <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   80b5e:	4a04      	ldr	r2, [pc, #16]	; (80b70 <pmc_switch_mainck_to_xtal+0x48>)
   80b60:	6a13      	ldr	r3, [r2, #32]
   80b62:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   80b66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   80b6a:	6213      	str	r3, [r2, #32]
   80b6c:	4770      	bx	lr
   80b6e:	bf00      	nop
   80b70:	400e0600 	.word	0x400e0600
   80b74:	fec8fffc 	.word	0xfec8fffc
   80b78:	01370002 	.word	0x01370002

00080b7c <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   80b7c:	4b02      	ldr	r3, [pc, #8]	; (80b88 <pmc_osc_is_ready_mainck+0xc>)
   80b7e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80b80:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   80b84:	4770      	bx	lr
   80b86:	bf00      	nop
   80b88:	400e0600 	.word	0x400e0600

00080b8c <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   80b8c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   80b90:	4b01      	ldr	r3, [pc, #4]	; (80b98 <pmc_disable_pllack+0xc>)
   80b92:	629a      	str	r2, [r3, #40]	; 0x28
   80b94:	4770      	bx	lr
   80b96:	bf00      	nop
   80b98:	400e0600 	.word	0x400e0600

00080b9c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   80b9c:	4b02      	ldr	r3, [pc, #8]	; (80ba8 <pmc_is_locked_pllack+0xc>)
   80b9e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80ba0:	f000 0002 	and.w	r0, r0, #2
   80ba4:	4770      	bx	lr
   80ba6:	bf00      	nop
   80ba8:	400e0600 	.word	0x400e0600

00080bac <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   80bac:	282c      	cmp	r0, #44	; 0x2c
   80bae:	d820      	bhi.n	80bf2 <pmc_enable_periph_clk+0x46>
		return 1;
	}

	if (ul_id < 32) {
   80bb0:	281f      	cmp	r0, #31
   80bb2:	d80d      	bhi.n	80bd0 <pmc_enable_periph_clk+0x24>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   80bb4:	4b12      	ldr	r3, [pc, #72]	; (80c00 <pmc_enable_periph_clk+0x54>)
   80bb6:	699a      	ldr	r2, [r3, #24]
   80bb8:	2301      	movs	r3, #1
   80bba:	4083      	lsls	r3, r0
   80bbc:	401a      	ands	r2, r3
   80bbe:	4293      	cmp	r3, r2
   80bc0:	d019      	beq.n	80bf6 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER0 = 1 << ul_id;
   80bc2:	2301      	movs	r3, #1
   80bc4:	fa03 f000 	lsl.w	r0, r3, r0
   80bc8:	4b0d      	ldr	r3, [pc, #52]	; (80c00 <pmc_enable_periph_clk+0x54>)
   80bca:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80bcc:	2000      	movs	r0, #0
   80bce:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80bd0:	4b0b      	ldr	r3, [pc, #44]	; (80c00 <pmc_enable_periph_clk+0x54>)
   80bd2:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
   80bd6:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80bd8:	2301      	movs	r3, #1
   80bda:	4083      	lsls	r3, r0
   80bdc:	401a      	ands	r2, r3
   80bde:	4293      	cmp	r3, r2
   80be0:	d00b      	beq.n	80bfa <pmc_enable_periph_clk+0x4e>
			PMC->PMC_PCER1 = 1 << ul_id;
   80be2:	2301      	movs	r3, #1
   80be4:	fa03 f000 	lsl.w	r0, r3, r0
   80be8:	4b05      	ldr	r3, [pc, #20]	; (80c00 <pmc_enable_periph_clk+0x54>)
   80bea:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   80bee:	2000      	movs	r0, #0
   80bf0:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   80bf2:	2001      	movs	r0, #1
   80bf4:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80bf6:	2000      	movs	r0, #0
   80bf8:	4770      	bx	lr
   80bfa:	2000      	movs	r0, #0
}
   80bfc:	4770      	bx	lr
   80bfe:	bf00      	nop
   80c00:	400e0600 	.word	0x400e0600

00080c04 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   80c04:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   80c06:	23ac      	movs	r3, #172	; 0xac
   80c08:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   80c0a:	680a      	ldr	r2, [r1, #0]
   80c0c:	684b      	ldr	r3, [r1, #4]
   80c0e:	fbb2 f3f3 	udiv	r3, r2, r3
   80c12:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   80c14:	1e5c      	subs	r4, r3, #1
   80c16:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   80c1a:	4294      	cmp	r4, r2
   80c1c:	d80a      	bhi.n	80c34 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
   80c1e:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   80c20:	688b      	ldr	r3, [r1, #8]
   80c22:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   80c24:	f240 2302 	movw	r3, #514	; 0x202
   80c28:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80c2c:	2350      	movs	r3, #80	; 0x50
   80c2e:	6003      	str	r3, [r0, #0]

	return 0;
   80c30:	2000      	movs	r0, #0
   80c32:	e000      	b.n	80c36 <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
   80c34:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
   80c36:	f85d 4b04 	ldr.w	r4, [sp], #4
   80c3a:	4770      	bx	lr

00080c3c <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   80c3c:	6943      	ldr	r3, [r0, #20]
   80c3e:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   80c42:	bf1a      	itte	ne
   80c44:	61c1      	strne	r1, [r0, #28]
	return 0;
   80c46:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
   80c48:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
   80c4a:	4770      	bx	lr

00080c4c <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   80c4c:	6943      	ldr	r3, [r0, #20]
   80c4e:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   80c52:	bf1d      	ittte	ne
   80c54:	6983      	ldrne	r3, [r0, #24]
   80c56:	700b      	strbne	r3, [r1, #0]
	return 0;
   80c58:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
   80c5a:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
   80c5c:	4770      	bx	lr
   80c5e:	bf00      	nop

00080c60 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   80c60:	6943      	ldr	r3, [r0, #20]
   80c62:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   80c66:	bf1d      	ittte	ne
   80c68:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   80c6c:	61c1      	strne	r1, [r0, #28]
	return 0;
   80c6e:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
   80c70:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
   80c72:	4770      	bx	lr

00080c74 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   80c74:	6943      	ldr	r3, [r0, #20]
   80c76:	f013 0f01 	tst.w	r3, #1
   80c7a:	d005      	beq.n	80c88 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   80c7c:	6983      	ldr	r3, [r0, #24]
   80c7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
   80c82:	600b      	str	r3, [r1, #0]

	return 0;
   80c84:	2000      	movs	r0, #0
   80c86:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   80c88:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   80c8a:	4770      	bx	lr

00080c8c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80c8c:	e7fe      	b.n	80c8c <Dummy_Handler>
   80c8e:	bf00      	nop

00080c90 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   80c90:	b510      	push	{r4, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   80c92:	4b1e      	ldr	r3, [pc, #120]	; (80d0c <Reset_Handler+0x7c>)
   80c94:	4a1e      	ldr	r2, [pc, #120]	; (80d10 <Reset_Handler+0x80>)
   80c96:	429a      	cmp	r2, r3
   80c98:	d003      	beq.n	80ca2 <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   80c9a:	4b1e      	ldr	r3, [pc, #120]	; (80d14 <Reset_Handler+0x84>)
   80c9c:	4a1b      	ldr	r2, [pc, #108]	; (80d0c <Reset_Handler+0x7c>)
   80c9e:	429a      	cmp	r2, r3
   80ca0:	d304      	bcc.n	80cac <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80ca2:	4b1d      	ldr	r3, [pc, #116]	; (80d18 <Reset_Handler+0x88>)
   80ca4:	4a1d      	ldr	r2, [pc, #116]	; (80d1c <Reset_Handler+0x8c>)
   80ca6:	429a      	cmp	r2, r3
   80ca8:	d30f      	bcc.n	80cca <Reset_Handler+0x3a>
   80caa:	e01a      	b.n	80ce2 <Reset_Handler+0x52>
   80cac:	4b1c      	ldr	r3, [pc, #112]	; (80d20 <Reset_Handler+0x90>)
   80cae:	4c1d      	ldr	r4, [pc, #116]	; (80d24 <Reset_Handler+0x94>)
   80cb0:	1ae4      	subs	r4, r4, r3
   80cb2:	f024 0403 	bic.w	r4, r4, #3
   80cb6:	3404      	adds	r4, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   80cb8:	2300      	movs	r3, #0
			*pDest++ = *pSrc++;
   80cba:	4814      	ldr	r0, [pc, #80]	; (80d0c <Reset_Handler+0x7c>)
   80cbc:	4914      	ldr	r1, [pc, #80]	; (80d10 <Reset_Handler+0x80>)
   80cbe:	585a      	ldr	r2, [r3, r1]
   80cc0:	501a      	str	r2, [r3, r0]
   80cc2:	3304      	adds	r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   80cc4:	42a3      	cmp	r3, r4
   80cc6:	d1fa      	bne.n	80cbe <Reset_Handler+0x2e>
   80cc8:	e7eb      	b.n	80ca2 <Reset_Handler+0x12>
   80cca:	4b17      	ldr	r3, [pc, #92]	; (80d28 <Reset_Handler+0x98>)
   80ccc:	4917      	ldr	r1, [pc, #92]	; (80d2c <Reset_Handler+0x9c>)
   80cce:	1ac9      	subs	r1, r1, r3
   80cd0:	f021 0103 	bic.w	r1, r1, #3
   80cd4:	1d1a      	adds	r2, r3, #4
   80cd6:	4411      	add	r1, r2
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   80cd8:	2200      	movs	r2, #0
   80cda:	f843 2f04 	str.w	r2, [r3, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80cde:	428b      	cmp	r3, r1
   80ce0:	d1fb      	bne.n	80cda <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   80ce2:	4a13      	ldr	r2, [pc, #76]	; (80d30 <Reset_Handler+0xa0>)
   80ce4:	f022 4360 	bic.w	r3, r2, #3758096384	; 0xe0000000
   80ce8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   80cec:	4911      	ldr	r1, [pc, #68]	; (80d34 <Reset_Handler+0xa4>)
   80cee:	608b      	str	r3, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   80cf0:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
   80cf4:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
   80cf8:	d203      	bcs.n	80d02 <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   80cfa:	688a      	ldr	r2, [r1, #8]
   80cfc:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   80d00:	608a      	str	r2, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   80d02:	4b0d      	ldr	r3, [pc, #52]	; (80d38 <Reset_Handler+0xa8>)
   80d04:	4798      	blx	r3

	/* Branch to main function */
	main();
   80d06:	4b0d      	ldr	r3, [pc, #52]	; (80d3c <Reset_Handler+0xac>)
   80d08:	4798      	blx	r3
   80d0a:	e7fe      	b.n	80d0a <Reset_Handler+0x7a>
   80d0c:	20070000 	.word	0x20070000
   80d10:	000845fc 	.word	0x000845fc
   80d14:	200709a4 	.word	0x200709a4
   80d18:	20070b28 	.word	0x20070b28
   80d1c:	200709a4 	.word	0x200709a4
   80d20:	20070004 	.word	0x20070004
   80d24:	200709a7 	.word	0x200709a7
   80d28:	200709a0 	.word	0x200709a0
   80d2c:	20070b23 	.word	0x20070b23
   80d30:	00080000 	.word	0x00080000
   80d34:	e000ed00 	.word	0xe000ed00
   80d38:	000811a9 	.word	0x000811a9
   80d3c:	00081159 	.word	0x00081159

00080d40 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   80d40:	4b3e      	ldr	r3, [pc, #248]	; (80e3c <SystemCoreClockUpdate+0xfc>)
   80d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80d44:	f003 0303 	and.w	r3, r3, #3
   80d48:	2b03      	cmp	r3, #3
   80d4a:	d85f      	bhi.n	80e0c <SystemCoreClockUpdate+0xcc>
   80d4c:	e8df f003 	tbb	[pc, r3]
   80d50:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   80d54:	4b3a      	ldr	r3, [pc, #232]	; (80e40 <SystemCoreClockUpdate+0x100>)
   80d56:	695b      	ldr	r3, [r3, #20]
   80d58:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   80d5c:	bf14      	ite	ne
   80d5e:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   80d62:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   80d66:	4b37      	ldr	r3, [pc, #220]	; (80e44 <SystemCoreClockUpdate+0x104>)
   80d68:	601a      	str	r2, [r3, #0]
   80d6a:	e04f      	b.n	80e0c <SystemCoreClockUpdate+0xcc>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80d6c:	4b33      	ldr	r3, [pc, #204]	; (80e3c <SystemCoreClockUpdate+0xfc>)
   80d6e:	6a1b      	ldr	r3, [r3, #32]
   80d70:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80d74:	d003      	beq.n	80d7e <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80d76:	4a34      	ldr	r2, [pc, #208]	; (80e48 <SystemCoreClockUpdate+0x108>)
   80d78:	4b32      	ldr	r3, [pc, #200]	; (80e44 <SystemCoreClockUpdate+0x104>)
   80d7a:	601a      	str	r2, [r3, #0]
   80d7c:	e046      	b.n	80e0c <SystemCoreClockUpdate+0xcc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80d7e:	4a33      	ldr	r2, [pc, #204]	; (80e4c <SystemCoreClockUpdate+0x10c>)
   80d80:	4b30      	ldr	r3, [pc, #192]	; (80e44 <SystemCoreClockUpdate+0x104>)
   80d82:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80d84:	4b2d      	ldr	r3, [pc, #180]	; (80e3c <SystemCoreClockUpdate+0xfc>)
   80d86:	6a1b      	ldr	r3, [r3, #32]
   80d88:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80d8c:	2b10      	cmp	r3, #16
   80d8e:	d002      	beq.n	80d96 <SystemCoreClockUpdate+0x56>
   80d90:	2b20      	cmp	r3, #32
   80d92:	d004      	beq.n	80d9e <SystemCoreClockUpdate+0x5e>
   80d94:	e03a      	b.n	80e0c <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   80d96:	4a2e      	ldr	r2, [pc, #184]	; (80e50 <SystemCoreClockUpdate+0x110>)
   80d98:	4b2a      	ldr	r3, [pc, #168]	; (80e44 <SystemCoreClockUpdate+0x104>)
   80d9a:	601a      	str	r2, [r3, #0]
				break;
   80d9c:	e036      	b.n	80e0c <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   80d9e:	4a2a      	ldr	r2, [pc, #168]	; (80e48 <SystemCoreClockUpdate+0x108>)
   80da0:	4b28      	ldr	r3, [pc, #160]	; (80e44 <SystemCoreClockUpdate+0x104>)
   80da2:	601a      	str	r2, [r3, #0]
				break;
   80da4:	e032      	b.n	80e0c <SystemCoreClockUpdate+0xcc>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80da6:	4b25      	ldr	r3, [pc, #148]	; (80e3c <SystemCoreClockUpdate+0xfc>)
   80da8:	6a1b      	ldr	r3, [r3, #32]
   80daa:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80dae:	d003      	beq.n	80db8 <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80db0:	4a25      	ldr	r2, [pc, #148]	; (80e48 <SystemCoreClockUpdate+0x108>)
   80db2:	4b24      	ldr	r3, [pc, #144]	; (80e44 <SystemCoreClockUpdate+0x104>)
   80db4:	601a      	str	r2, [r3, #0]
   80db6:	e012      	b.n	80dde <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80db8:	4a24      	ldr	r2, [pc, #144]	; (80e4c <SystemCoreClockUpdate+0x10c>)
   80dba:	4b22      	ldr	r3, [pc, #136]	; (80e44 <SystemCoreClockUpdate+0x104>)
   80dbc:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80dbe:	4b1f      	ldr	r3, [pc, #124]	; (80e3c <SystemCoreClockUpdate+0xfc>)
   80dc0:	6a1b      	ldr	r3, [r3, #32]
   80dc2:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80dc6:	2b10      	cmp	r3, #16
   80dc8:	d002      	beq.n	80dd0 <SystemCoreClockUpdate+0x90>
   80dca:	2b20      	cmp	r3, #32
   80dcc:	d004      	beq.n	80dd8 <SystemCoreClockUpdate+0x98>
   80dce:	e006      	b.n	80dde <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   80dd0:	4a1f      	ldr	r2, [pc, #124]	; (80e50 <SystemCoreClockUpdate+0x110>)
   80dd2:	4b1c      	ldr	r3, [pc, #112]	; (80e44 <SystemCoreClockUpdate+0x104>)
   80dd4:	601a      	str	r2, [r3, #0]
				break;
   80dd6:	e002      	b.n	80dde <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   80dd8:	4a1b      	ldr	r2, [pc, #108]	; (80e48 <SystemCoreClockUpdate+0x108>)
   80dda:	4b1a      	ldr	r3, [pc, #104]	; (80e44 <SystemCoreClockUpdate+0x104>)
   80ddc:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   80dde:	4b17      	ldr	r3, [pc, #92]	; (80e3c <SystemCoreClockUpdate+0xfc>)
   80de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80de2:	f003 0303 	and.w	r3, r3, #3
   80de6:	2b02      	cmp	r3, #2
   80de8:	d10d      	bne.n	80e06 <SystemCoreClockUpdate+0xc6>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80dea:	4b14      	ldr	r3, [pc, #80]	; (80e3c <SystemCoreClockUpdate+0xfc>)
   80dec:	6a98      	ldr	r0, [r3, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80dee:	6a99      	ldr	r1, [r3, #40]	; 0x28
   80df0:	4b14      	ldr	r3, [pc, #80]	; (80e44 <SystemCoreClockUpdate+0x104>)
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80df2:	f3c0 400a 	ubfx	r0, r0, #16, #11
   80df6:	681a      	ldr	r2, [r3, #0]
   80df8:	fb00 2202 	mla	r2, r0, r2, r2
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80dfc:	b2c9      	uxtb	r1, r1
   80dfe:	fbb2 f2f1 	udiv	r2, r2, r1
   80e02:	601a      	str	r2, [r3, #0]
   80e04:	e002      	b.n	80e0c <SystemCoreClockUpdate+0xcc>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   80e06:	4a13      	ldr	r2, [pc, #76]	; (80e54 <SystemCoreClockUpdate+0x114>)
   80e08:	4b0e      	ldr	r3, [pc, #56]	; (80e44 <SystemCoreClockUpdate+0x104>)
   80e0a:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   80e0c:	4b0b      	ldr	r3, [pc, #44]	; (80e3c <SystemCoreClockUpdate+0xfc>)
   80e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80e10:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80e14:	2b70      	cmp	r3, #112	; 0x70
   80e16:	d107      	bne.n	80e28 <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
   80e18:	4b0a      	ldr	r3, [pc, #40]	; (80e44 <SystemCoreClockUpdate+0x104>)
   80e1a:	681a      	ldr	r2, [r3, #0]
   80e1c:	490e      	ldr	r1, [pc, #56]	; (80e58 <SystemCoreClockUpdate+0x118>)
   80e1e:	fba1 0202 	umull	r0, r2, r1, r2
   80e22:	0852      	lsrs	r2, r2, #1
   80e24:	601a      	str	r2, [r3, #0]
   80e26:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   80e28:	4b04      	ldr	r3, [pc, #16]	; (80e3c <SystemCoreClockUpdate+0xfc>)
   80e2a:	6b19      	ldr	r1, [r3, #48]	; 0x30
   80e2c:	4b05      	ldr	r3, [pc, #20]	; (80e44 <SystemCoreClockUpdate+0x104>)
   80e2e:	f3c1 1102 	ubfx	r1, r1, #4, #3
   80e32:	681a      	ldr	r2, [r3, #0]
   80e34:	40ca      	lsrs	r2, r1
   80e36:	601a      	str	r2, [r3, #0]
   80e38:	4770      	bx	lr
   80e3a:	bf00      	nop
   80e3c:	400e0600 	.word	0x400e0600
   80e40:	400e1a10 	.word	0x400e1a10
   80e44:	2007013c 	.word	0x2007013c
   80e48:	00b71b00 	.word	0x00b71b00
   80e4c:	003d0900 	.word	0x003d0900
   80e50:	007a1200 	.word	0x007a1200
   80e54:	0e4e1c00 	.word	0x0e4e1c00
   80e58:	aaaaaaab 	.word	0xaaaaaaab

00080e5c <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   80e5c:	4b09      	ldr	r3, [pc, #36]	; (80e84 <_sbrk+0x28>)
   80e5e:	681b      	ldr	r3, [r3, #0]
   80e60:	b913      	cbnz	r3, 80e68 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
   80e62:	4a09      	ldr	r2, [pc, #36]	; (80e88 <_sbrk+0x2c>)
   80e64:	4b07      	ldr	r3, [pc, #28]	; (80e84 <_sbrk+0x28>)
   80e66:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   80e68:	4b06      	ldr	r3, [pc, #24]	; (80e84 <_sbrk+0x28>)
   80e6a:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   80e6c:	181a      	adds	r2, r3, r0
   80e6e:	4907      	ldr	r1, [pc, #28]	; (80e8c <_sbrk+0x30>)
   80e70:	4291      	cmp	r1, r2
   80e72:	db04      	blt.n	80e7e <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
   80e74:	4610      	mov	r0, r2
   80e76:	4a03      	ldr	r2, [pc, #12]	; (80e84 <_sbrk+0x28>)
   80e78:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   80e7a:	4618      	mov	r0, r3
   80e7c:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
   80e7e:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
   80e82:	4770      	bx	lr
   80e84:	20070a30 	.word	0x20070a30
   80e88:	20072b28 	.word	0x20072b28
   80e8c:	20087ffc 	.word	0x20087ffc

00080e90 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   80e90:	f04f 30ff 	mov.w	r0, #4294967295
   80e94:	4770      	bx	lr
   80e96:	bf00      	nop

00080e98 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   80e98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   80e9c:	604b      	str	r3, [r1, #4]

	return 0;
}
   80e9e:	2000      	movs	r0, #0
   80ea0:	4770      	bx	lr
   80ea2:	bf00      	nop

00080ea4 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   80ea4:	2001      	movs	r0, #1
   80ea6:	4770      	bx	lr

00080ea8 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   80ea8:	2000      	movs	r0, #0
   80eaa:	4770      	bx	lr

00080eac <USART0_Handler>:
#if SAMD || SAMR21 || SAML21
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
   80eac:	b500      	push	{lr}
   80eae:	b083      	sub	sp, #12
	uint8_t temp;
#if SAMD || SAMR21 || SAML21
	usart_serial_read_packet(&host_uart_module, &temp, 1);
#else
	usart_serial_read_packet(USART_HOST, &temp, 1);
   80eb0:	4811      	ldr	r0, [pc, #68]	; (80ef8 <USART0_Handler+0x4c>)
   80eb2:	f10d 0107 	add.w	r1, sp, #7
   80eb6:	2201      	movs	r2, #1
   80eb8:	4b10      	ldr	r3, [pc, #64]	; (80efc <USART0_Handler+0x50>)
   80eba:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   80ebc:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   80ebe:	f3bf 8f5f 	dmb	sy
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
   80ec2:	2200      	movs	r2, #0
   80ec4:	4b0e      	ldr	r3, [pc, #56]	; (80f00 <USART0_Handler+0x54>)
   80ec6:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
   80ec8:	4b0e      	ldr	r3, [pc, #56]	; (80f04 <USART0_Handler+0x58>)
   80eca:	781b      	ldrb	r3, [r3, #0]
   80ecc:	f89d 1007 	ldrb.w	r1, [sp, #7]
   80ed0:	4a0d      	ldr	r2, [pc, #52]	; (80f08 <USART0_Handler+0x5c>)
   80ed2:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
   80ed4:	2b9b      	cmp	r3, #155	; 0x9b
   80ed6:	d103      	bne.n	80ee0 <USART0_Handler+0x34>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
   80ed8:	2200      	movs	r2, #0
   80eda:	4b0a      	ldr	r3, [pc, #40]	; (80f04 <USART0_Handler+0x58>)
   80edc:	701a      	strb	r2, [r3, #0]
   80ede:	e002      	b.n	80ee6 <USART0_Handler+0x3a>
	} else {
		serial_rx_buf_tail++;
   80ee0:	3301      	adds	r3, #1
   80ee2:	4a08      	ldr	r2, [pc, #32]	; (80f04 <USART0_Handler+0x58>)
   80ee4:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
   80ee6:	2201      	movs	r2, #1
   80ee8:	4b05      	ldr	r3, [pc, #20]	; (80f00 <USART0_Handler+0x54>)
   80eea:	701a      	strb	r2, [r3, #0]
   80eec:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   80ef0:	b662      	cpsie	i
}
   80ef2:	b003      	add	sp, #12
   80ef4:	f85d fb04 	ldr.w	pc, [sp], #4
   80ef8:	40098000 	.word	0x40098000
   80efc:	00080375 	.word	0x00080375
   80f00:	20070138 	.word	0x20070138
   80f04:	20070ad0 	.word	0x20070ad0
   80f08:	20070a34 	.word	0x20070a34

00080f0c <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   80f0c:	b5f0      	push	{r4, r5, r6, r7, lr}
   80f0e:	b083      	sub	sp, #12
   80f10:	4604      	mov	r4, r0
   80f12:	460d      	mov	r5, r1
	uint32_t val = 0;
   80f14:	2300      	movs	r3, #0
   80f16:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   80f18:	4b1f      	ldr	r3, [pc, #124]	; (80f98 <usart_serial_getchar+0x8c>)
   80f1a:	4298      	cmp	r0, r3
   80f1c:	d107      	bne.n	80f2e <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
   80f1e:	461f      	mov	r7, r3
   80f20:	4e1e      	ldr	r6, [pc, #120]	; (80f9c <usart_serial_getchar+0x90>)
   80f22:	4638      	mov	r0, r7
   80f24:	4629      	mov	r1, r5
   80f26:	47b0      	blx	r6
   80f28:	2800      	cmp	r0, #0
   80f2a:	d1fa      	bne.n	80f22 <usart_serial_getchar+0x16>
   80f2c:	e019      	b.n	80f62 <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80f2e:	4b1c      	ldr	r3, [pc, #112]	; (80fa0 <usart_serial_getchar+0x94>)
   80f30:	4298      	cmp	r0, r3
   80f32:	d109      	bne.n	80f48 <usart_serial_getchar+0x3c>
		while (usart_read(p_usart, &val));
   80f34:	461f      	mov	r7, r3
   80f36:	4e1b      	ldr	r6, [pc, #108]	; (80fa4 <usart_serial_getchar+0x98>)
   80f38:	4638      	mov	r0, r7
   80f3a:	a901      	add	r1, sp, #4
   80f3c:	47b0      	blx	r6
   80f3e:	2800      	cmp	r0, #0
   80f40:	d1fa      	bne.n	80f38 <usart_serial_getchar+0x2c>
		*data = (uint8_t)(val & 0xFF);
   80f42:	9b01      	ldr	r3, [sp, #4]
   80f44:	702b      	strb	r3, [r5, #0]
   80f46:	e019      	b.n	80f7c <usart_serial_getchar+0x70>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80f48:	4b17      	ldr	r3, [pc, #92]	; (80fa8 <usart_serial_getchar+0x9c>)
   80f4a:	4298      	cmp	r0, r3
   80f4c:	d109      	bne.n	80f62 <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
   80f4e:	461e      	mov	r6, r3
   80f50:	4c14      	ldr	r4, [pc, #80]	; (80fa4 <usart_serial_getchar+0x98>)
   80f52:	4630      	mov	r0, r6
   80f54:	a901      	add	r1, sp, #4
   80f56:	47a0      	blx	r4
   80f58:	2800      	cmp	r0, #0
   80f5a:	d1fa      	bne.n	80f52 <usart_serial_getchar+0x46>
		*data = (uint8_t)(val & 0xFF);
   80f5c:	9b01      	ldr	r3, [sp, #4]
   80f5e:	702b      	strb	r3, [r5, #0]
   80f60:	e018      	b.n	80f94 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80f62:	4b12      	ldr	r3, [pc, #72]	; (80fac <usart_serial_getchar+0xa0>)
   80f64:	429c      	cmp	r4, r3
   80f66:	d109      	bne.n	80f7c <usart_serial_getchar+0x70>
		while (usart_read(p_usart, &val));
   80f68:	461e      	mov	r6, r3
   80f6a:	4c0e      	ldr	r4, [pc, #56]	; (80fa4 <usart_serial_getchar+0x98>)
   80f6c:	4630      	mov	r0, r6
   80f6e:	a901      	add	r1, sp, #4
   80f70:	47a0      	blx	r4
   80f72:	2800      	cmp	r0, #0
   80f74:	d1fa      	bne.n	80f6c <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
   80f76:	9b01      	ldr	r3, [sp, #4]
   80f78:	702b      	strb	r3, [r5, #0]
   80f7a:	e00b      	b.n	80f94 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80f7c:	4b0c      	ldr	r3, [pc, #48]	; (80fb0 <usart_serial_getchar+0xa4>)
   80f7e:	429c      	cmp	r4, r3
   80f80:	d108      	bne.n	80f94 <usart_serial_getchar+0x88>
		while (usart_read(p_usart, &val));
   80f82:	461e      	mov	r6, r3
   80f84:	4c07      	ldr	r4, [pc, #28]	; (80fa4 <usart_serial_getchar+0x98>)
   80f86:	4630      	mov	r0, r6
   80f88:	a901      	add	r1, sp, #4
   80f8a:	47a0      	blx	r4
   80f8c:	2800      	cmp	r0, #0
   80f8e:	d1fa      	bne.n	80f86 <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
   80f90:	9b01      	ldr	r3, [sp, #4]
   80f92:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   80f94:	b003      	add	sp, #12
   80f96:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80f98:	400e0800 	.word	0x400e0800
   80f9c:	00080c4d 	.word	0x00080c4d
   80fa0:	40098000 	.word	0x40098000
   80fa4:	00080c75 	.word	0x00080c75
   80fa8:	4009c000 	.word	0x4009c000
   80fac:	400a0000 	.word	0x400a0000
   80fb0:	400a4000 	.word	0x400a4000

00080fb4 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   80fb4:	b570      	push	{r4, r5, r6, lr}
   80fb6:	460c      	mov	r4, r1
#ifdef UART
	if (UART == (Uart*)p_usart) {
   80fb8:	4b21      	ldr	r3, [pc, #132]	; (81040 <usart_serial_putchar+0x8c>)
   80fba:	4298      	cmp	r0, r3
   80fbc:	d107      	bne.n	80fce <usart_serial_putchar+0x1a>
		while (uart_write((Uart*)p_usart, c)!=0);
   80fbe:	461e      	mov	r6, r3
   80fc0:	4d20      	ldr	r5, [pc, #128]	; (81044 <usart_serial_putchar+0x90>)
   80fc2:	4630      	mov	r0, r6
   80fc4:	4621      	mov	r1, r4
   80fc6:	47a8      	blx	r5
   80fc8:	2800      	cmp	r0, #0
   80fca:	d1fa      	bne.n	80fc2 <usart_serial_putchar+0xe>
   80fcc:	e02b      	b.n	81026 <usart_serial_putchar+0x72>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80fce:	4b1e      	ldr	r3, [pc, #120]	; (81048 <usart_serial_putchar+0x94>)
   80fd0:	4298      	cmp	r0, r3
   80fd2:	d107      	bne.n	80fe4 <usart_serial_putchar+0x30>
		while (usart_write(p_usart, c)!=0);
   80fd4:	461e      	mov	r6, r3
   80fd6:	4d1d      	ldr	r5, [pc, #116]	; (8104c <usart_serial_putchar+0x98>)
   80fd8:	4630      	mov	r0, r6
   80fda:	4621      	mov	r1, r4
   80fdc:	47a8      	blx	r5
   80fde:	2800      	cmp	r0, #0
   80fe0:	d1fa      	bne.n	80fd8 <usart_serial_putchar+0x24>
   80fe2:	e022      	b.n	8102a <usart_serial_putchar+0x76>
		return 1;
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80fe4:	4b1a      	ldr	r3, [pc, #104]	; (81050 <usart_serial_putchar+0x9c>)
   80fe6:	4298      	cmp	r0, r3
   80fe8:	d107      	bne.n	80ffa <usart_serial_putchar+0x46>
		while (usart_write(p_usart, c)!=0);
   80fea:	461e      	mov	r6, r3
   80fec:	4d17      	ldr	r5, [pc, #92]	; (8104c <usart_serial_putchar+0x98>)
   80fee:	4630      	mov	r0, r6
   80ff0:	4621      	mov	r1, r4
   80ff2:	47a8      	blx	r5
   80ff4:	2800      	cmp	r0, #0
   80ff6:	d1fa      	bne.n	80fee <usart_serial_putchar+0x3a>
   80ff8:	e019      	b.n	8102e <usart_serial_putchar+0x7a>
		return 1;
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80ffa:	4b16      	ldr	r3, [pc, #88]	; (81054 <usart_serial_putchar+0xa0>)
   80ffc:	4298      	cmp	r0, r3
   80ffe:	d107      	bne.n	81010 <usart_serial_putchar+0x5c>
		while (usart_write(p_usart, c)!=0);
   81000:	461e      	mov	r6, r3
   81002:	4d12      	ldr	r5, [pc, #72]	; (8104c <usart_serial_putchar+0x98>)
   81004:	4630      	mov	r0, r6
   81006:	4621      	mov	r1, r4
   81008:	47a8      	blx	r5
   8100a:	2800      	cmp	r0, #0
   8100c:	d1fa      	bne.n	81004 <usart_serial_putchar+0x50>
   8100e:	e010      	b.n	81032 <usart_serial_putchar+0x7e>
		return 1;
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   81010:	4b11      	ldr	r3, [pc, #68]	; (81058 <usart_serial_putchar+0xa4>)
   81012:	4298      	cmp	r0, r3
   81014:	d10f      	bne.n	81036 <usart_serial_putchar+0x82>
		while (usart_write(p_usart, c)!=0);
   81016:	461e      	mov	r6, r3
   81018:	4d0c      	ldr	r5, [pc, #48]	; (8104c <usart_serial_putchar+0x98>)
   8101a:	4630      	mov	r0, r6
   8101c:	4621      	mov	r1, r4
   8101e:	47a8      	blx	r5
   81020:	2800      	cmp	r0, #0
   81022:	d1fa      	bne.n	8101a <usart_serial_putchar+0x66>
   81024:	e009      	b.n	8103a <usart_serial_putchar+0x86>
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
   81026:	2001      	movs	r0, #1
   81028:	bd70      	pop	{r4, r5, r6, pc}
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   8102a:	2001      	movs	r0, #1
   8102c:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   8102e:	2001      	movs	r0, #1
   81030:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   81032:	2001      	movs	r0, #1
   81034:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   81036:	2000      	movs	r0, #0
   81038:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   8103a:	2001      	movs	r0, #1
	}
# endif
#endif /* ifdef USART */

	return 0;
}
   8103c:	bd70      	pop	{r4, r5, r6, pc}
   8103e:	bf00      	nop
   81040:	400e0800 	.word	0x400e0800
   81044:	00080c3d 	.word	0x00080c3d
   81048:	40098000 	.word	0x40098000
   8104c:	00080c61 	.word	0x00080c61
   81050:	4009c000 	.word	0x4009c000
   81054:	400a0000 	.word	0x400a0000
   81058:	400a4000 	.word	0x400a4000

0008105c <twi_test_dropoff>:
	//vTaskDelay(pdMSTOTICKS(80));
	
}

uint8_t startDropoff =0;
void twi_test_dropoff(void){
   8105c:	b508      	push	{r3, lr}
	puts("twi test dropoff");
   8105e:	4815      	ldr	r0, [pc, #84]	; (810b4 <twi_test_dropoff+0x58>)
   81060:	4b15      	ldr	r3, [pc, #84]	; (810b8 <twi_test_dropoff+0x5c>)
   81062:	4798      	blx	r3
	if (startDropoff==0)
   81064:	4b15      	ldr	r3, [pc, #84]	; (810bc <twi_test_dropoff+0x60>)
   81066:	781b      	ldrb	r3, [r3, #0]
   81068:	b943      	cbnz	r3, 8107c <twi_test_dropoff+0x20>
	{
		//RETURN 1 IF success
		startDropoff=twi_dropoffStart();
   8106a:	4b15      	ldr	r3, [pc, #84]	; (810c0 <twi_test_dropoff+0x64>)
   8106c:	4798      	blx	r3
   8106e:	4b13      	ldr	r3, [pc, #76]	; (810bc <twi_test_dropoff+0x60>)
   81070:	7018      	strb	r0, [r3, #0]
		if(startDropoff==0){
   81072:	b9f0      	cbnz	r0, 810b2 <twi_test_dropoff+0x56>
			puts("error start dropoff");
   81074:	4813      	ldr	r0, [pc, #76]	; (810c4 <twi_test_dropoff+0x68>)
   81076:	4b10      	ldr	r3, [pc, #64]	; (810b8 <twi_test_dropoff+0x5c>)
   81078:	4798      	blx	r3
   8107a:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		DropoffStatus dropoffStatus=twi_dropoffGetStatus();
   8107c:	4b12      	ldr	r3, [pc, #72]	; (810c8 <twi_test_dropoff+0x6c>)
   8107e:	4798      	blx	r3
		switch(dropoffStatus){
   81080:	2803      	cmp	r0, #3
   81082:	d004      	beq.n	8108e <twi_test_dropoff+0x32>
   81084:	2804      	cmp	r0, #4
   81086:	d006      	beq.n	81096 <twi_test_dropoff+0x3a>
   81088:	2802      	cmp	r0, #2
   8108a:	d10c      	bne.n	810a6 <twi_test_dropoff+0x4a>
   8108c:	e007      	b.n	8109e <twi_test_dropoff+0x42>
			case DROPOFF_RUNNING:
			puts("DROPOFF_RUNNING");
   8108e:	480f      	ldr	r0, [pc, #60]	; (810cc <twi_test_dropoff+0x70>)
   81090:	4b09      	ldr	r3, [pc, #36]	; (810b8 <twi_test_dropoff+0x5c>)
   81092:	4798      	blx	r3
			break;
   81094:	bd08      	pop	{r3, pc}
			case DROPOFF_FAILED:
			puts("DROPOFF_FAILED:");
   81096:	480e      	ldr	r0, [pc, #56]	; (810d0 <twi_test_dropoff+0x74>)
   81098:	4b07      	ldr	r3, [pc, #28]	; (810b8 <twi_test_dropoff+0x5c>)
   8109a:	4798      	blx	r3
			break;
   8109c:	bd08      	pop	{r3, pc}
			case DROPOFF_DONE:
			puts("DROPOFF_DONE:");
   8109e:	480d      	ldr	r0, [pc, #52]	; (810d4 <twi_test_dropoff+0x78>)
   810a0:	4b05      	ldr	r3, [pc, #20]	; (810b8 <twi_test_dropoff+0x5c>)
   810a2:	4798      	blx	r3
			break;
   810a4:	bd08      	pop	{r3, pc}
			default:
			//something went wrong restart.
			puts("dropoff unknown");
   810a6:	480c      	ldr	r0, [pc, #48]	; (810d8 <twi_test_dropoff+0x7c>)
   810a8:	4b03      	ldr	r3, [pc, #12]	; (810b8 <twi_test_dropoff+0x5c>)
   810aa:	4798      	blx	r3
			startDropoff=0;
   810ac:	2200      	movs	r2, #0
   810ae:	4b03      	ldr	r3, [pc, #12]	; (810bc <twi_test_dropoff+0x60>)
   810b0:	701a      	strb	r2, [r3, #0]
   810b2:	bd08      	pop	{r3, pc}
   810b4:	000844f8 	.word	0x000844f8
   810b8:	00081315 	.word	0x00081315
   810bc:	20070ad1 	.word	0x20070ad1
   810c0:	000802c9 	.word	0x000802c9
   810c4:	0008450c 	.word	0x0008450c
   810c8:	000802f1 	.word	0x000802f1
   810cc:	00084520 	.word	0x00084520
   810d0:	00084530 	.word	0x00084530
   810d4:	00084540 	.word	0x00084540
   810d8:	00084550 	.word	0x00084550

000810dc <configureConsole>:
	
	 
}

void configureConsole()
{
   810dc:	b530      	push	{r4, r5, lr}
   810de:	b085      	sub	sp, #20
   810e0:	2008      	movs	r0, #8
   810e2:	4d12      	ldr	r5, [pc, #72]	; (8112c <configureConsole+0x50>)
   810e4:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   810e6:	4c12      	ldr	r4, [pc, #72]	; (81130 <configureConsole+0x54>)
   810e8:	4b12      	ldr	r3, [pc, #72]	; (81134 <configureConsole+0x58>)
   810ea:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   810ec:	4a12      	ldr	r2, [pc, #72]	; (81138 <configureConsole+0x5c>)
   810ee:	4b13      	ldr	r3, [pc, #76]	; (8113c <configureConsole+0x60>)
   810f0:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   810f2:	4a13      	ldr	r2, [pc, #76]	; (81140 <configureConsole+0x64>)
   810f4:	4b13      	ldr	r3, [pc, #76]	; (81144 <configureConsole+0x68>)
   810f6:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   810f8:	4b13      	ldr	r3, [pc, #76]	; (81148 <configureConsole+0x6c>)
   810fa:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   810fc:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   81100:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   81102:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81106:	9303      	str	r3, [sp, #12]
   81108:	2008      	movs	r0, #8
   8110a:	47a8      	blx	r5
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   8110c:	4620      	mov	r0, r4
   8110e:	a901      	add	r1, sp, #4
   81110:	4b0e      	ldr	r3, [pc, #56]	; (8114c <configureConsole+0x70>)
   81112:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   81114:	4d0e      	ldr	r5, [pc, #56]	; (81150 <configureConsole+0x74>)
   81116:	682b      	ldr	r3, [r5, #0]
   81118:	6898      	ldr	r0, [r3, #8]
   8111a:	2100      	movs	r1, #0
   8111c:	4c0d      	ldr	r4, [pc, #52]	; (81154 <configureConsole+0x78>)
   8111e:	47a0      	blx	r4
	setbuf(stdin, NULL);
   81120:	682b      	ldr	r3, [r5, #0]
   81122:	6858      	ldr	r0, [r3, #4]
   81124:	2100      	movs	r1, #0
   81126:	47a0      	blx	r4
		.paritytype = CONF_UART_PARITY
	};
	
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONSOLE_UART, &uart_serial_options);
}
   81128:	b005      	add	sp, #20
   8112a:	bd30      	pop	{r4, r5, pc}
   8112c:	00080bad 	.word	0x00080bad
   81130:	400e0800 	.word	0x400e0800
   81134:	20070b20 	.word	0x20070b20
   81138:	00080fb5 	.word	0x00080fb5
   8113c:	20070b1c 	.word	0x20070b1c
   81140:	00080f0d 	.word	0x00080f0d
   81144:	20070b18 	.word	0x20070b18
   81148:	0501bd00 	.word	0x0501bd00
   8114c:	00080c05 	.word	0x00080c05
   81150:	20070568 	.word	0x20070568
   81154:	00081325 	.word	0x00081325

00081158 <main>:
}



int main (void)
{
   81158:	b570      	push	{r4, r5, r6, lr}
	  /* Initialize the common clock service, board-specific initialization, and
   * interrupt vector support prior to using the TWI master interfaces.
   */
  sysclk_init();
   8115a:	4b0b      	ldr	r3, [pc, #44]	; (81188 <main+0x30>)
   8115c:	4798      	blx	r3

	board_init();
   8115e:	4b0b      	ldr	r3, [pc, #44]	; (8118c <main+0x34>)
   81160:	4798      	blx	r3
	
	configureConsole();
   81162:	4b0b      	ldr	r3, [pc, #44]	; (81190 <main+0x38>)
   81164:	4798      	blx	r3

	 // TWI master initialization options.
	 //initTwiMaster();
	 //initTwi();
	 twi_comInit();
   81166:	4b0b      	ldr	r3, [pc, #44]	; (81194 <main+0x3c>)
   81168:	4798      	blx	r3
	 
	 while(!superDone)
   8116a:	4b0b      	ldr	r3, [pc, #44]	; (81198 <main+0x40>)
   8116c:	681b      	ldr	r3, [r3, #0]
   8116e:	b94b      	cbnz	r3, 81184 <main+0x2c>
	 {
//		twi_test_getArminfo();
//		twi_test_pickup();
		twi_test_dropoff();
   81170:	4e0a      	ldr	r6, [pc, #40]	; (8119c <main+0x44>)
		
		delay_ms(2000);
   81172:	4d0b      	ldr	r5, [pc, #44]	; (811a0 <main+0x48>)
   81174:	4c0b      	ldr	r4, [pc, #44]	; (811a4 <main+0x4c>)
	 
	 while(!superDone)
	 {
//		twi_test_getArminfo();
//		twi_test_pickup();
		twi_test_dropoff();
   81176:	47b0      	blx	r6
		
		delay_ms(2000);
   81178:	4628      	mov	r0, r5
   8117a:	47a0      	blx	r4
	 // TWI master initialization options.
	 //initTwiMaster();
	 //initTwi();
	 twi_comInit();
	 
	 while(!superDone)
   8117c:	4b06      	ldr	r3, [pc, #24]	; (81198 <main+0x40>)
   8117e:	681b      	ldr	r3, [r3, #0]
   81180:	2b00      	cmp	r3, #0
   81182:	d0f8      	beq.n	81176 <main+0x1e>
// 	
// 		}
	
	
	 
}
   81184:	2000      	movs	r0, #0
   81186:	bd70      	pop	{r4, r5, r6, pc}
   81188:	000806f1 	.word	0x000806f1
   8118c:	00080755 	.word	0x00080755
   81190:	000810dd 	.word	0x000810dd
   81194:	00080149 	.word	0x00080149
   81198:	20070ad4 	.word	0x20070ad4
   8119c:	0008105d 	.word	0x0008105d
   811a0:	00b71b00 	.word	0x00b71b00
   811a4:	20070001 	.word	0x20070001

000811a8 <__libc_init_array>:
   811a8:	b570      	push	{r4, r5, r6, lr}
   811aa:	4e0f      	ldr	r6, [pc, #60]	; (811e8 <__libc_init_array+0x40>)
   811ac:	4d0f      	ldr	r5, [pc, #60]	; (811ec <__libc_init_array+0x44>)
   811ae:	1b76      	subs	r6, r6, r5
   811b0:	10b6      	asrs	r6, r6, #2
   811b2:	d007      	beq.n	811c4 <__libc_init_array+0x1c>
   811b4:	3d04      	subs	r5, #4
   811b6:	2400      	movs	r4, #0
   811b8:	3401      	adds	r4, #1
   811ba:	f855 3f04 	ldr.w	r3, [r5, #4]!
   811be:	4798      	blx	r3
   811c0:	42a6      	cmp	r6, r4
   811c2:	d1f9      	bne.n	811b8 <__libc_init_array+0x10>
   811c4:	4e0a      	ldr	r6, [pc, #40]	; (811f0 <__libc_init_array+0x48>)
   811c6:	4d0b      	ldr	r5, [pc, #44]	; (811f4 <__libc_init_array+0x4c>)
   811c8:	f003 fa02 	bl	845d0 <_init>
   811cc:	1b76      	subs	r6, r6, r5
   811ce:	10b6      	asrs	r6, r6, #2
   811d0:	d008      	beq.n	811e4 <__libc_init_array+0x3c>
   811d2:	3d04      	subs	r5, #4
   811d4:	2400      	movs	r4, #0
   811d6:	3401      	adds	r4, #1
   811d8:	f855 3f04 	ldr.w	r3, [r5, #4]!
   811dc:	4798      	blx	r3
   811de:	42a6      	cmp	r6, r4
   811e0:	d1f9      	bne.n	811d6 <__libc_init_array+0x2e>
   811e2:	bd70      	pop	{r4, r5, r6, pc}
   811e4:	bd70      	pop	{r4, r5, r6, pc}
   811e6:	bf00      	nop
   811e8:	000845dc 	.word	0x000845dc
   811ec:	000845dc 	.word	0x000845dc
   811f0:	000845e4 	.word	0x000845e4
   811f4:	000845dc 	.word	0x000845dc

000811f8 <iprintf>:
   811f8:	b40f      	push	{r0, r1, r2, r3}
   811fa:	b510      	push	{r4, lr}
   811fc:	4b07      	ldr	r3, [pc, #28]	; (8121c <iprintf+0x24>)
   811fe:	b082      	sub	sp, #8
   81200:	ac04      	add	r4, sp, #16
   81202:	f854 2b04 	ldr.w	r2, [r4], #4
   81206:	6818      	ldr	r0, [r3, #0]
   81208:	4623      	mov	r3, r4
   8120a:	6881      	ldr	r1, [r0, #8]
   8120c:	9401      	str	r4, [sp, #4]
   8120e:	f000 f97d 	bl	8150c <_vfiprintf_r>
   81212:	b002      	add	sp, #8
   81214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   81218:	b004      	add	sp, #16
   8121a:	4770      	bx	lr
   8121c:	20070568 	.word	0x20070568

00081220 <memset>:
   81220:	b4f0      	push	{r4, r5, r6, r7}
   81222:	0784      	lsls	r4, r0, #30
   81224:	d043      	beq.n	812ae <memset+0x8e>
   81226:	1e54      	subs	r4, r2, #1
   81228:	2a00      	cmp	r2, #0
   8122a:	d03e      	beq.n	812aa <memset+0x8a>
   8122c:	b2cd      	uxtb	r5, r1
   8122e:	4603      	mov	r3, r0
   81230:	e003      	b.n	8123a <memset+0x1a>
   81232:	1e62      	subs	r2, r4, #1
   81234:	2c00      	cmp	r4, #0
   81236:	d038      	beq.n	812aa <memset+0x8a>
   81238:	4614      	mov	r4, r2
   8123a:	f803 5b01 	strb.w	r5, [r3], #1
   8123e:	079a      	lsls	r2, r3, #30
   81240:	d1f7      	bne.n	81232 <memset+0x12>
   81242:	2c03      	cmp	r4, #3
   81244:	d92a      	bls.n	8129c <memset+0x7c>
   81246:	b2cd      	uxtb	r5, r1
   81248:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   8124c:	2c0f      	cmp	r4, #15
   8124e:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   81252:	d915      	bls.n	81280 <memset+0x60>
   81254:	f1a4 0710 	sub.w	r7, r4, #16
   81258:	093f      	lsrs	r7, r7, #4
   8125a:	f103 0610 	add.w	r6, r3, #16
   8125e:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   81262:	461a      	mov	r2, r3
   81264:	6015      	str	r5, [r2, #0]
   81266:	6055      	str	r5, [r2, #4]
   81268:	6095      	str	r5, [r2, #8]
   8126a:	60d5      	str	r5, [r2, #12]
   8126c:	3210      	adds	r2, #16
   8126e:	42b2      	cmp	r2, r6
   81270:	d1f8      	bne.n	81264 <memset+0x44>
   81272:	f004 040f 	and.w	r4, r4, #15
   81276:	3701      	adds	r7, #1
   81278:	2c03      	cmp	r4, #3
   8127a:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   8127e:	d90d      	bls.n	8129c <memset+0x7c>
   81280:	461e      	mov	r6, r3
   81282:	4622      	mov	r2, r4
   81284:	3a04      	subs	r2, #4
   81286:	2a03      	cmp	r2, #3
   81288:	f846 5b04 	str.w	r5, [r6], #4
   8128c:	d8fa      	bhi.n	81284 <memset+0x64>
   8128e:	1f22      	subs	r2, r4, #4
   81290:	f022 0203 	bic.w	r2, r2, #3
   81294:	3204      	adds	r2, #4
   81296:	4413      	add	r3, r2
   81298:	f004 0403 	and.w	r4, r4, #3
   8129c:	b12c      	cbz	r4, 812aa <memset+0x8a>
   8129e:	b2c9      	uxtb	r1, r1
   812a0:	441c      	add	r4, r3
   812a2:	f803 1b01 	strb.w	r1, [r3], #1
   812a6:	42a3      	cmp	r3, r4
   812a8:	d1fb      	bne.n	812a2 <memset+0x82>
   812aa:	bcf0      	pop	{r4, r5, r6, r7}
   812ac:	4770      	bx	lr
   812ae:	4614      	mov	r4, r2
   812b0:	4603      	mov	r3, r0
   812b2:	e7c6      	b.n	81242 <memset+0x22>

000812b4 <_puts_r>:
   812b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   812b6:	4604      	mov	r4, r0
   812b8:	b089      	sub	sp, #36	; 0x24
   812ba:	4608      	mov	r0, r1
   812bc:	460d      	mov	r5, r1
   812be:	f000 f8b9 	bl	81434 <strlen>
   812c2:	68a3      	ldr	r3, [r4, #8]
   812c4:	2102      	movs	r1, #2
   812c6:	899a      	ldrh	r2, [r3, #12]
   812c8:	f8df e044 	ldr.w	lr, [pc, #68]	; 81310 <_puts_r+0x5c>
   812cc:	f100 0c01 	add.w	ip, r0, #1
   812d0:	2701      	movs	r7, #1
   812d2:	ae04      	add	r6, sp, #16
   812d4:	9102      	str	r1, [sp, #8]
   812d6:	0491      	lsls	r1, r2, #18
   812d8:	9504      	str	r5, [sp, #16]
   812da:	9005      	str	r0, [sp, #20]
   812dc:	f8cd c00c 	str.w	ip, [sp, #12]
   812e0:	f8cd e018 	str.w	lr, [sp, #24]
   812e4:	9707      	str	r7, [sp, #28]
   812e6:	9601      	str	r6, [sp, #4]
   812e8:	d406      	bmi.n	812f8 <_puts_r+0x44>
   812ea:	6e59      	ldr	r1, [r3, #100]	; 0x64
   812ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   812f0:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   812f4:	819a      	strh	r2, [r3, #12]
   812f6:	6659      	str	r1, [r3, #100]	; 0x64
   812f8:	4620      	mov	r0, r4
   812fa:	4619      	mov	r1, r3
   812fc:	aa01      	add	r2, sp, #4
   812fe:	f001 faaf 	bl	82860 <__sfvwrite_r>
   81302:	2800      	cmp	r0, #0
   81304:	bf0c      	ite	eq
   81306:	200a      	moveq	r0, #10
   81308:	f04f 30ff 	movne.w	r0, #4294967295
   8130c:	b009      	add	sp, #36	; 0x24
   8130e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   81310:	000841f4 	.word	0x000841f4

00081314 <puts>:
   81314:	4b02      	ldr	r3, [pc, #8]	; (81320 <puts+0xc>)
   81316:	4601      	mov	r1, r0
   81318:	6818      	ldr	r0, [r3, #0]
   8131a:	f7ff bfcb 	b.w	812b4 <_puts_r>
   8131e:	bf00      	nop
   81320:	20070568 	.word	0x20070568

00081324 <setbuf>:
   81324:	2900      	cmp	r1, #0
   81326:	bf0c      	ite	eq
   81328:	2202      	moveq	r2, #2
   8132a:	2200      	movne	r2, #0
   8132c:	f44f 6380 	mov.w	r3, #1024	; 0x400
   81330:	f000 b800 	b.w	81334 <setvbuf>

00081334 <setvbuf>:
   81334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81338:	4d3c      	ldr	r5, [pc, #240]	; (8142c <setvbuf+0xf8>)
   8133a:	4604      	mov	r4, r0
   8133c:	682d      	ldr	r5, [r5, #0]
   8133e:	4688      	mov	r8, r1
   81340:	4616      	mov	r6, r2
   81342:	461f      	mov	r7, r3
   81344:	b115      	cbz	r5, 8134c <setvbuf+0x18>
   81346:	6bab      	ldr	r3, [r5, #56]	; 0x38
   81348:	2b00      	cmp	r3, #0
   8134a:	d04f      	beq.n	813ec <setvbuf+0xb8>
   8134c:	2e02      	cmp	r6, #2
   8134e:	d830      	bhi.n	813b2 <setvbuf+0x7e>
   81350:	2f00      	cmp	r7, #0
   81352:	db2e      	blt.n	813b2 <setvbuf+0x7e>
   81354:	4628      	mov	r0, r5
   81356:	4621      	mov	r1, r4
   81358:	f001 f856 	bl	82408 <_fflush_r>
   8135c:	89a3      	ldrh	r3, [r4, #12]
   8135e:	2200      	movs	r2, #0
   81360:	6062      	str	r2, [r4, #4]
   81362:	61a2      	str	r2, [r4, #24]
   81364:	061a      	lsls	r2, r3, #24
   81366:	d428      	bmi.n	813ba <setvbuf+0x86>
   81368:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   8136c:	b29b      	uxth	r3, r3
   8136e:	2e02      	cmp	r6, #2
   81370:	81a3      	strh	r3, [r4, #12]
   81372:	d02d      	beq.n	813d0 <setvbuf+0x9c>
   81374:	f1b8 0f00 	cmp.w	r8, #0
   81378:	d03c      	beq.n	813f4 <setvbuf+0xc0>
   8137a:	2e01      	cmp	r6, #1
   8137c:	d013      	beq.n	813a6 <setvbuf+0x72>
   8137e:	b29b      	uxth	r3, r3
   81380:	f003 0008 	and.w	r0, r3, #8
   81384:	4a2a      	ldr	r2, [pc, #168]	; (81430 <setvbuf+0xfc>)
   81386:	b280      	uxth	r0, r0
   81388:	63ea      	str	r2, [r5, #60]	; 0x3c
   8138a:	f8c4 8000 	str.w	r8, [r4]
   8138e:	f8c4 8010 	str.w	r8, [r4, #16]
   81392:	6167      	str	r7, [r4, #20]
   81394:	b178      	cbz	r0, 813b6 <setvbuf+0x82>
   81396:	f013 0f03 	tst.w	r3, #3
   8139a:	bf18      	it	ne
   8139c:	2700      	movne	r7, #0
   8139e:	60a7      	str	r7, [r4, #8]
   813a0:	2000      	movs	r0, #0
   813a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   813a6:	f043 0301 	orr.w	r3, r3, #1
   813aa:	427a      	negs	r2, r7
   813ac:	81a3      	strh	r3, [r4, #12]
   813ae:	61a2      	str	r2, [r4, #24]
   813b0:	e7e5      	b.n	8137e <setvbuf+0x4a>
   813b2:	f04f 30ff 	mov.w	r0, #4294967295
   813b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   813ba:	4628      	mov	r0, r5
   813bc:	6921      	ldr	r1, [r4, #16]
   813be:	f001 f983 	bl	826c8 <_free_r>
   813c2:	89a3      	ldrh	r3, [r4, #12]
   813c4:	2e02      	cmp	r6, #2
   813c6:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   813ca:	b29b      	uxth	r3, r3
   813cc:	81a3      	strh	r3, [r4, #12]
   813ce:	d1d1      	bne.n	81374 <setvbuf+0x40>
   813d0:	2000      	movs	r0, #0
   813d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
   813d6:	f043 0302 	orr.w	r3, r3, #2
   813da:	2500      	movs	r5, #0
   813dc:	2101      	movs	r1, #1
   813de:	81a3      	strh	r3, [r4, #12]
   813e0:	60a5      	str	r5, [r4, #8]
   813e2:	6022      	str	r2, [r4, #0]
   813e4:	6122      	str	r2, [r4, #16]
   813e6:	6161      	str	r1, [r4, #20]
   813e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   813ec:	4628      	mov	r0, r5
   813ee:	f001 f827 	bl	82440 <__sinit>
   813f2:	e7ab      	b.n	8134c <setvbuf+0x18>
   813f4:	2f00      	cmp	r7, #0
   813f6:	bf08      	it	eq
   813f8:	f44f 6780 	moveq.w	r7, #1024	; 0x400
   813fc:	4638      	mov	r0, r7
   813fe:	f001 fc59 	bl	82cb4 <malloc>
   81402:	4680      	mov	r8, r0
   81404:	b128      	cbz	r0, 81412 <setvbuf+0xde>
   81406:	89a3      	ldrh	r3, [r4, #12]
   81408:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   8140c:	b29b      	uxth	r3, r3
   8140e:	81a3      	strh	r3, [r4, #12]
   81410:	e7b3      	b.n	8137a <setvbuf+0x46>
   81412:	f44f 6080 	mov.w	r0, #1024	; 0x400
   81416:	f001 fc4d 	bl	82cb4 <malloc>
   8141a:	4680      	mov	r8, r0
   8141c:	b918      	cbnz	r0, 81426 <setvbuf+0xf2>
   8141e:	89a3      	ldrh	r3, [r4, #12]
   81420:	f04f 30ff 	mov.w	r0, #4294967295
   81424:	e7d5      	b.n	813d2 <setvbuf+0x9e>
   81426:	f44f 6780 	mov.w	r7, #1024	; 0x400
   8142a:	e7ec      	b.n	81406 <setvbuf+0xd2>
   8142c:	20070568 	.word	0x20070568
   81430:	00082435 	.word	0x00082435

00081434 <strlen>:
   81434:	f020 0103 	bic.w	r1, r0, #3
   81438:	f010 0003 	ands.w	r0, r0, #3
   8143c:	f1c0 0000 	rsb	r0, r0, #0
   81440:	f851 3b04 	ldr.w	r3, [r1], #4
   81444:	f100 0c04 	add.w	ip, r0, #4
   81448:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   8144c:	f06f 0200 	mvn.w	r2, #0
   81450:	bf1c      	itt	ne
   81452:	fa22 f20c 	lsrne.w	r2, r2, ip
   81456:	4313      	orrne	r3, r2
   81458:	f04f 0c01 	mov.w	ip, #1
   8145c:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   81460:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   81464:	eba3 020c 	sub.w	r2, r3, ip
   81468:	ea22 0203 	bic.w	r2, r2, r3
   8146c:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   81470:	bf04      	itt	eq
   81472:	f851 3b04 	ldreq.w	r3, [r1], #4
   81476:	3004      	addeq	r0, #4
   81478:	d0f4      	beq.n	81464 <strlen+0x30>
   8147a:	f013 0fff 	tst.w	r3, #255	; 0xff
   8147e:	bf1f      	itttt	ne
   81480:	3001      	addne	r0, #1
   81482:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
   81486:	3001      	addne	r0, #1
   81488:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
   8148c:	bf18      	it	ne
   8148e:	3001      	addne	r0, #1
   81490:	4770      	bx	lr
   81492:	bf00      	nop

00081494 <__sprint_r.part.0>:
   81494:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   81496:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8149a:	049c      	lsls	r4, r3, #18
   8149c:	460e      	mov	r6, r1
   8149e:	4680      	mov	r8, r0
   814a0:	4691      	mov	r9, r2
   814a2:	d52a      	bpl.n	814fa <__sprint_r.part.0+0x66>
   814a4:	6893      	ldr	r3, [r2, #8]
   814a6:	6812      	ldr	r2, [r2, #0]
   814a8:	f102 0a08 	add.w	sl, r2, #8
   814ac:	b31b      	cbz	r3, 814f6 <__sprint_r.part.0+0x62>
   814ae:	e91a 00a0 	ldmdb	sl, {r5, r7}
   814b2:	08bf      	lsrs	r7, r7, #2
   814b4:	d017      	beq.n	814e6 <__sprint_r.part.0+0x52>
   814b6:	3d04      	subs	r5, #4
   814b8:	2400      	movs	r4, #0
   814ba:	e001      	b.n	814c0 <__sprint_r.part.0+0x2c>
   814bc:	42a7      	cmp	r7, r4
   814be:	d010      	beq.n	814e2 <__sprint_r.part.0+0x4e>
   814c0:	4640      	mov	r0, r8
   814c2:	f855 1f04 	ldr.w	r1, [r5, #4]!
   814c6:	4632      	mov	r2, r6
   814c8:	f001 f850 	bl	8256c <_fputwc_r>
   814cc:	1c43      	adds	r3, r0, #1
   814ce:	f104 0401 	add.w	r4, r4, #1
   814d2:	d1f3      	bne.n	814bc <__sprint_r.part.0+0x28>
   814d4:	2300      	movs	r3, #0
   814d6:	f8c9 3008 	str.w	r3, [r9, #8]
   814da:	f8c9 3004 	str.w	r3, [r9, #4]
   814de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   814e2:	f8d9 3008 	ldr.w	r3, [r9, #8]
   814e6:	eba3 0387 	sub.w	r3, r3, r7, lsl #2
   814ea:	f8c9 3008 	str.w	r3, [r9, #8]
   814ee:	f10a 0a08 	add.w	sl, sl, #8
   814f2:	2b00      	cmp	r3, #0
   814f4:	d1db      	bne.n	814ae <__sprint_r.part.0+0x1a>
   814f6:	2000      	movs	r0, #0
   814f8:	e7ec      	b.n	814d4 <__sprint_r.part.0+0x40>
   814fa:	f001 f9b1 	bl	82860 <__sfvwrite_r>
   814fe:	2300      	movs	r3, #0
   81500:	f8c9 3008 	str.w	r3, [r9, #8]
   81504:	f8c9 3004 	str.w	r3, [r9, #4]
   81508:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0008150c <_vfiprintf_r>:
   8150c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81510:	b0b1      	sub	sp, #196	; 0xc4
   81512:	461c      	mov	r4, r3
   81514:	9102      	str	r1, [sp, #8]
   81516:	4690      	mov	r8, r2
   81518:	9308      	str	r3, [sp, #32]
   8151a:	9006      	str	r0, [sp, #24]
   8151c:	b118      	cbz	r0, 81526 <_vfiprintf_r+0x1a>
   8151e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   81520:	2b00      	cmp	r3, #0
   81522:	f000 80e8 	beq.w	816f6 <_vfiprintf_r+0x1ea>
   81526:	9d02      	ldr	r5, [sp, #8]
   81528:	89ab      	ldrh	r3, [r5, #12]
   8152a:	b29a      	uxth	r2, r3
   8152c:	0490      	lsls	r0, r2, #18
   8152e:	d407      	bmi.n	81540 <_vfiprintf_r+0x34>
   81530:	6e6a      	ldr	r2, [r5, #100]	; 0x64
   81532:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   81536:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
   8153a:	81ab      	strh	r3, [r5, #12]
   8153c:	b29a      	uxth	r2, r3
   8153e:	6669      	str	r1, [r5, #100]	; 0x64
   81540:	0711      	lsls	r1, r2, #28
   81542:	f140 80b7 	bpl.w	816b4 <_vfiprintf_r+0x1a8>
   81546:	f8dd b008 	ldr.w	fp, [sp, #8]
   8154a:	f8db 3010 	ldr.w	r3, [fp, #16]
   8154e:	2b00      	cmp	r3, #0
   81550:	f000 80b0 	beq.w	816b4 <_vfiprintf_r+0x1a8>
   81554:	f002 021a 	and.w	r2, r2, #26
   81558:	2a0a      	cmp	r2, #10
   8155a:	f000 80b7 	beq.w	816cc <_vfiprintf_r+0x1c0>
   8155e:	2300      	movs	r3, #0
   81560:	f10d 0980 	add.w	r9, sp, #128	; 0x80
   81564:	930a      	str	r3, [sp, #40]	; 0x28
   81566:	9315      	str	r3, [sp, #84]	; 0x54
   81568:	9314      	str	r3, [sp, #80]	; 0x50
   8156a:	9309      	str	r3, [sp, #36]	; 0x24
   8156c:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
   81570:	464e      	mov	r6, r9
   81572:	f898 3000 	ldrb.w	r3, [r8]
   81576:	2b00      	cmp	r3, #0
   81578:	f000 84c8 	beq.w	81f0c <_vfiprintf_r+0xa00>
   8157c:	2b25      	cmp	r3, #37	; 0x25
   8157e:	f000 84c5 	beq.w	81f0c <_vfiprintf_r+0xa00>
   81582:	f108 0201 	add.w	r2, r8, #1
   81586:	e001      	b.n	8158c <_vfiprintf_r+0x80>
   81588:	2b25      	cmp	r3, #37	; 0x25
   8158a:	d004      	beq.n	81596 <_vfiprintf_r+0x8a>
   8158c:	7813      	ldrb	r3, [r2, #0]
   8158e:	4614      	mov	r4, r2
   81590:	3201      	adds	r2, #1
   81592:	2b00      	cmp	r3, #0
   81594:	d1f8      	bne.n	81588 <_vfiprintf_r+0x7c>
   81596:	ebc8 0504 	rsb	r5, r8, r4
   8159a:	b195      	cbz	r5, 815c2 <_vfiprintf_r+0xb6>
   8159c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   8159e:	9a15      	ldr	r2, [sp, #84]	; 0x54
   815a0:	3301      	adds	r3, #1
   815a2:	442a      	add	r2, r5
   815a4:	2b07      	cmp	r3, #7
   815a6:	f8c6 8000 	str.w	r8, [r6]
   815aa:	6075      	str	r5, [r6, #4]
   815ac:	9215      	str	r2, [sp, #84]	; 0x54
   815ae:	9314      	str	r3, [sp, #80]	; 0x50
   815b0:	dd7b      	ble.n	816aa <_vfiprintf_r+0x19e>
   815b2:	2a00      	cmp	r2, #0
   815b4:	f040 84d5 	bne.w	81f62 <_vfiprintf_r+0xa56>
   815b8:	9809      	ldr	r0, [sp, #36]	; 0x24
   815ba:	9214      	str	r2, [sp, #80]	; 0x50
   815bc:	4428      	add	r0, r5
   815be:	464e      	mov	r6, r9
   815c0:	9009      	str	r0, [sp, #36]	; 0x24
   815c2:	7823      	ldrb	r3, [r4, #0]
   815c4:	2b00      	cmp	r3, #0
   815c6:	f000 83ed 	beq.w	81da4 <_vfiprintf_r+0x898>
   815ca:	2100      	movs	r1, #0
   815cc:	f04f 0200 	mov.w	r2, #0
   815d0:	f04f 3cff 	mov.w	ip, #4294967295
   815d4:	7863      	ldrb	r3, [r4, #1]
   815d6:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
   815da:	9104      	str	r1, [sp, #16]
   815dc:	468a      	mov	sl, r1
   815de:	f104 0801 	add.w	r8, r4, #1
   815e2:	4608      	mov	r0, r1
   815e4:	4665      	mov	r5, ip
   815e6:	f108 0801 	add.w	r8, r8, #1
   815ea:	f1a3 0220 	sub.w	r2, r3, #32
   815ee:	2a58      	cmp	r2, #88	; 0x58
   815f0:	f200 82d9 	bhi.w	81ba6 <_vfiprintf_r+0x69a>
   815f4:	e8df f012 	tbh	[pc, r2, lsl #1]
   815f8:	02d702cb 	.word	0x02d702cb
   815fc:	02d202d7 	.word	0x02d202d7
   81600:	02d702d7 	.word	0x02d702d7
   81604:	02d702d7 	.word	0x02d702d7
   81608:	02d702d7 	.word	0x02d702d7
   8160c:	028f0282 	.word	0x028f0282
   81610:	008402d7 	.word	0x008402d7
   81614:	02d70293 	.word	0x02d70293
   81618:	0196012b 	.word	0x0196012b
   8161c:	01960196 	.word	0x01960196
   81620:	01960196 	.word	0x01960196
   81624:	01960196 	.word	0x01960196
   81628:	01960196 	.word	0x01960196
   8162c:	02d702d7 	.word	0x02d702d7
   81630:	02d702d7 	.word	0x02d702d7
   81634:	02d702d7 	.word	0x02d702d7
   81638:	02d702d7 	.word	0x02d702d7
   8163c:	02d702d7 	.word	0x02d702d7
   81640:	02d70130 	.word	0x02d70130
   81644:	02d702d7 	.word	0x02d702d7
   81648:	02d702d7 	.word	0x02d702d7
   8164c:	02d702d7 	.word	0x02d702d7
   81650:	02d702d7 	.word	0x02d702d7
   81654:	017b02d7 	.word	0x017b02d7
   81658:	02d702d7 	.word	0x02d702d7
   8165c:	02d702d7 	.word	0x02d702d7
   81660:	01a402d7 	.word	0x01a402d7
   81664:	02d702d7 	.word	0x02d702d7
   81668:	02d701bf 	.word	0x02d701bf
   8166c:	02d702d7 	.word	0x02d702d7
   81670:	02d702d7 	.word	0x02d702d7
   81674:	02d702d7 	.word	0x02d702d7
   81678:	02d702d7 	.word	0x02d702d7
   8167c:	01e402d7 	.word	0x01e402d7
   81680:	02d701fa 	.word	0x02d701fa
   81684:	02d702d7 	.word	0x02d702d7
   81688:	01fa0216 	.word	0x01fa0216
   8168c:	02d702d7 	.word	0x02d702d7
   81690:	02d7021b 	.word	0x02d7021b
   81694:	00890228 	.word	0x00890228
   81698:	027d0266 	.word	0x027d0266
   8169c:	023a02d7 	.word	0x023a02d7
   816a0:	011902d7 	.word	0x011902d7
   816a4:	02d702d7 	.word	0x02d702d7
   816a8:	02af      	.short	0x02af
   816aa:	3608      	adds	r6, #8
   816ac:	9809      	ldr	r0, [sp, #36]	; 0x24
   816ae:	4428      	add	r0, r5
   816b0:	9009      	str	r0, [sp, #36]	; 0x24
   816b2:	e786      	b.n	815c2 <_vfiprintf_r+0xb6>
   816b4:	9806      	ldr	r0, [sp, #24]
   816b6:	9902      	ldr	r1, [sp, #8]
   816b8:	f000 fd90 	bl	821dc <__swsetup_r>
   816bc:	b9b0      	cbnz	r0, 816ec <_vfiprintf_r+0x1e0>
   816be:	9d02      	ldr	r5, [sp, #8]
   816c0:	89aa      	ldrh	r2, [r5, #12]
   816c2:	f002 021a 	and.w	r2, r2, #26
   816c6:	2a0a      	cmp	r2, #10
   816c8:	f47f af49 	bne.w	8155e <_vfiprintf_r+0x52>
   816cc:	f8dd b008 	ldr.w	fp, [sp, #8]
   816d0:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
   816d4:	2b00      	cmp	r3, #0
   816d6:	f6ff af42 	blt.w	8155e <_vfiprintf_r+0x52>
   816da:	9806      	ldr	r0, [sp, #24]
   816dc:	4659      	mov	r1, fp
   816de:	4642      	mov	r2, r8
   816e0:	4623      	mov	r3, r4
   816e2:	f000 fd3d 	bl	82160 <__sbprintf>
   816e6:	b031      	add	sp, #196	; 0xc4
   816e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   816ec:	f04f 30ff 	mov.w	r0, #4294967295
   816f0:	b031      	add	sp, #196	; 0xc4
   816f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   816f6:	f000 fea3 	bl	82440 <__sinit>
   816fa:	e714      	b.n	81526 <_vfiprintf_r+0x1a>
   816fc:	4240      	negs	r0, r0
   816fe:	9308      	str	r3, [sp, #32]
   81700:	f04a 0a04 	orr.w	sl, sl, #4
   81704:	f898 3000 	ldrb.w	r3, [r8]
   81708:	e76d      	b.n	815e6 <_vfiprintf_r+0xda>
   8170a:	f01a 0320 	ands.w	r3, sl, #32
   8170e:	9004      	str	r0, [sp, #16]
   81710:	46ac      	mov	ip, r5
   81712:	f000 80f4 	beq.w	818fe <_vfiprintf_r+0x3f2>
   81716:	f8dd b020 	ldr.w	fp, [sp, #32]
   8171a:	f10b 0307 	add.w	r3, fp, #7
   8171e:	f023 0307 	bic.w	r3, r3, #7
   81722:	f103 0408 	add.w	r4, r3, #8
   81726:	9408      	str	r4, [sp, #32]
   81728:	e9d3 4500 	ldrd	r4, r5, [r3]
   8172c:	2300      	movs	r3, #0
   8172e:	f04f 0000 	mov.w	r0, #0
   81732:	2100      	movs	r1, #0
   81734:	f88d 0047 	strb.w	r0, [sp, #71]	; 0x47
   81738:	f8cd c014 	str.w	ip, [sp, #20]
   8173c:	9107      	str	r1, [sp, #28]
   8173e:	f1bc 0f00 	cmp.w	ip, #0
   81742:	bfa8      	it	ge
   81744:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
   81748:	ea54 0205 	orrs.w	r2, r4, r5
   8174c:	f040 80ad 	bne.w	818aa <_vfiprintf_r+0x39e>
   81750:	f1bc 0f00 	cmp.w	ip, #0
   81754:	f040 80a9 	bne.w	818aa <_vfiprintf_r+0x39e>
   81758:	2b00      	cmp	r3, #0
   8175a:	f040 83c0 	bne.w	81ede <_vfiprintf_r+0x9d2>
   8175e:	f01a 0f01 	tst.w	sl, #1
   81762:	f000 83bc 	beq.w	81ede <_vfiprintf_r+0x9d2>
   81766:	2330      	movs	r3, #48	; 0x30
   81768:	af30      	add	r7, sp, #192	; 0xc0
   8176a:	f807 3d41 	strb.w	r3, [r7, #-65]!
   8176e:	ebc7 0409 	rsb	r4, r7, r9
   81772:	9405      	str	r4, [sp, #20]
   81774:	f8dd b014 	ldr.w	fp, [sp, #20]
   81778:	9c07      	ldr	r4, [sp, #28]
   8177a:	45e3      	cmp	fp, ip
   8177c:	bfb8      	it	lt
   8177e:	46e3      	movlt	fp, ip
   81780:	f8cd b00c 	str.w	fp, [sp, #12]
   81784:	b11c      	cbz	r4, 8178e <_vfiprintf_r+0x282>
   81786:	f10b 0b01 	add.w	fp, fp, #1
   8178a:	f8cd b00c 	str.w	fp, [sp, #12]
   8178e:	f01a 0502 	ands.w	r5, sl, #2
   81792:	9507      	str	r5, [sp, #28]
   81794:	d005      	beq.n	817a2 <_vfiprintf_r+0x296>
   81796:	f8dd b00c 	ldr.w	fp, [sp, #12]
   8179a:	f10b 0b02 	add.w	fp, fp, #2
   8179e:	f8cd b00c 	str.w	fp, [sp, #12]
   817a2:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
   817a6:	930b      	str	r3, [sp, #44]	; 0x2c
   817a8:	f040 821b 	bne.w	81be2 <_vfiprintf_r+0x6d6>
   817ac:	9d04      	ldr	r5, [sp, #16]
   817ae:	f8dd b00c 	ldr.w	fp, [sp, #12]
   817b2:	ebcb 0405 	rsb	r4, fp, r5
   817b6:	2c00      	cmp	r4, #0
   817b8:	f340 8213 	ble.w	81be2 <_vfiprintf_r+0x6d6>
   817bc:	2c10      	cmp	r4, #16
   817be:	f340 8489 	ble.w	820d4 <_vfiprintf_r+0xbc8>
   817c2:	4dbe      	ldr	r5, [pc, #760]	; (81abc <_vfiprintf_r+0x5b0>)
   817c4:	9a15      	ldr	r2, [sp, #84]	; 0x54
   817c6:	462b      	mov	r3, r5
   817c8:	9814      	ldr	r0, [sp, #80]	; 0x50
   817ca:	4625      	mov	r5, r4
   817cc:	f04f 0b10 	mov.w	fp, #16
   817d0:	4664      	mov	r4, ip
   817d2:	46b4      	mov	ip, r6
   817d4:	461e      	mov	r6, r3
   817d6:	e006      	b.n	817e6 <_vfiprintf_r+0x2da>
   817d8:	1c83      	adds	r3, r0, #2
   817da:	f10c 0c08 	add.w	ip, ip, #8
   817de:	4608      	mov	r0, r1
   817e0:	3d10      	subs	r5, #16
   817e2:	2d10      	cmp	r5, #16
   817e4:	dd11      	ble.n	8180a <_vfiprintf_r+0x2fe>
   817e6:	1c41      	adds	r1, r0, #1
   817e8:	3210      	adds	r2, #16
   817ea:	2907      	cmp	r1, #7
   817ec:	9215      	str	r2, [sp, #84]	; 0x54
   817ee:	e88c 0840 	stmia.w	ip, {r6, fp}
   817f2:	9114      	str	r1, [sp, #80]	; 0x50
   817f4:	ddf0      	ble.n	817d8 <_vfiprintf_r+0x2cc>
   817f6:	2a00      	cmp	r2, #0
   817f8:	f040 81e6 	bne.w	81bc8 <_vfiprintf_r+0x6bc>
   817fc:	3d10      	subs	r5, #16
   817fe:	2d10      	cmp	r5, #16
   81800:	f04f 0301 	mov.w	r3, #1
   81804:	4610      	mov	r0, r2
   81806:	46cc      	mov	ip, r9
   81808:	dced      	bgt.n	817e6 <_vfiprintf_r+0x2da>
   8180a:	4631      	mov	r1, r6
   8180c:	4666      	mov	r6, ip
   8180e:	46a4      	mov	ip, r4
   81810:	462c      	mov	r4, r5
   81812:	460d      	mov	r5, r1
   81814:	4422      	add	r2, r4
   81816:	2b07      	cmp	r3, #7
   81818:	9215      	str	r2, [sp, #84]	; 0x54
   8181a:	6035      	str	r5, [r6, #0]
   8181c:	6074      	str	r4, [r6, #4]
   8181e:	9314      	str	r3, [sp, #80]	; 0x50
   81820:	f300 836d 	bgt.w	81efe <_vfiprintf_r+0x9f2>
   81824:	3608      	adds	r6, #8
   81826:	1c59      	adds	r1, r3, #1
   81828:	e1de      	b.n	81be8 <_vfiprintf_r+0x6dc>
   8182a:	f01a 0f20 	tst.w	sl, #32
   8182e:	9004      	str	r0, [sp, #16]
   81830:	46ac      	mov	ip, r5
   81832:	f000 808d 	beq.w	81950 <_vfiprintf_r+0x444>
   81836:	9d08      	ldr	r5, [sp, #32]
   81838:	1deb      	adds	r3, r5, #7
   8183a:	f023 0307 	bic.w	r3, r3, #7
   8183e:	f103 0b08 	add.w	fp, r3, #8
   81842:	e9d3 4500 	ldrd	r4, r5, [r3]
   81846:	f8cd b020 	str.w	fp, [sp, #32]
   8184a:	2301      	movs	r3, #1
   8184c:	e76f      	b.n	8172e <_vfiprintf_r+0x222>
   8184e:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
   81852:	f898 3000 	ldrb.w	r3, [r8]
   81856:	e6c6      	b.n	815e6 <_vfiprintf_r+0xda>
   81858:	f04a 0a10 	orr.w	sl, sl, #16
   8185c:	f01a 0f20 	tst.w	sl, #32
   81860:	9004      	str	r0, [sp, #16]
   81862:	46ac      	mov	ip, r5
   81864:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   81868:	f000 80c8 	beq.w	819fc <_vfiprintf_r+0x4f0>
   8186c:	9c08      	ldr	r4, [sp, #32]
   8186e:	1de1      	adds	r1, r4, #7
   81870:	f021 0107 	bic.w	r1, r1, #7
   81874:	e9d1 2300 	ldrd	r2, r3, [r1]
   81878:	3108      	adds	r1, #8
   8187a:	9108      	str	r1, [sp, #32]
   8187c:	4614      	mov	r4, r2
   8187e:	461d      	mov	r5, r3
   81880:	2a00      	cmp	r2, #0
   81882:	f173 0b00 	sbcs.w	fp, r3, #0
   81886:	f2c0 83ce 	blt.w	82026 <_vfiprintf_r+0xb1a>
   8188a:	f1bc 0f00 	cmp.w	ip, #0
   8188e:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
   81892:	bfa8      	it	ge
   81894:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
   81898:	ea54 0205 	orrs.w	r2, r4, r5
   8189c:	9007      	str	r0, [sp, #28]
   8189e:	f8cd c014 	str.w	ip, [sp, #20]
   818a2:	f04f 0301 	mov.w	r3, #1
   818a6:	f43f af53 	beq.w	81750 <_vfiprintf_r+0x244>
   818aa:	2b01      	cmp	r3, #1
   818ac:	f000 8319 	beq.w	81ee2 <_vfiprintf_r+0x9d6>
   818b0:	2b02      	cmp	r3, #2
   818b2:	f10d 037f 	add.w	r3, sp, #127	; 0x7f
   818b6:	f040 824c 	bne.w	81d52 <_vfiprintf_r+0x846>
   818ba:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   818be:	4619      	mov	r1, r3
   818c0:	f004 000f 	and.w	r0, r4, #15
   818c4:	0922      	lsrs	r2, r4, #4
   818c6:	f81b 0000 	ldrb.w	r0, [fp, r0]
   818ca:	ea42 7205 	orr.w	r2, r2, r5, lsl #28
   818ce:	092b      	lsrs	r3, r5, #4
   818d0:	7008      	strb	r0, [r1, #0]
   818d2:	ea52 0003 	orrs.w	r0, r2, r3
   818d6:	460f      	mov	r7, r1
   818d8:	4614      	mov	r4, r2
   818da:	461d      	mov	r5, r3
   818dc:	f101 31ff 	add.w	r1, r1, #4294967295
   818e0:	d1ee      	bne.n	818c0 <_vfiprintf_r+0x3b4>
   818e2:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   818e6:	ebc7 0309 	rsb	r3, r7, r9
   818ea:	9305      	str	r3, [sp, #20]
   818ec:	e742      	b.n	81774 <_vfiprintf_r+0x268>
   818ee:	f04a 0a10 	orr.w	sl, sl, #16
   818f2:	f01a 0320 	ands.w	r3, sl, #32
   818f6:	9004      	str	r0, [sp, #16]
   818f8:	46ac      	mov	ip, r5
   818fa:	f47f af0c 	bne.w	81716 <_vfiprintf_r+0x20a>
   818fe:	f01a 0210 	ands.w	r2, sl, #16
   81902:	f040 8311 	bne.w	81f28 <_vfiprintf_r+0xa1c>
   81906:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
   8190a:	f000 830d 	beq.w	81f28 <_vfiprintf_r+0xa1c>
   8190e:	f8dd b020 	ldr.w	fp, [sp, #32]
   81912:	4613      	mov	r3, r2
   81914:	f8bb 4000 	ldrh.w	r4, [fp]
   81918:	f10b 0b04 	add.w	fp, fp, #4
   8191c:	2500      	movs	r5, #0
   8191e:	f8cd b020 	str.w	fp, [sp, #32]
   81922:	e704      	b.n	8172e <_vfiprintf_r+0x222>
   81924:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   81928:	2000      	movs	r0, #0
   8192a:	f818 3b01 	ldrb.w	r3, [r8], #1
   8192e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   81932:	eb02 0040 	add.w	r0, r2, r0, lsl #1
   81936:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   8193a:	2a09      	cmp	r2, #9
   8193c:	d9f5      	bls.n	8192a <_vfiprintf_r+0x41e>
   8193e:	e654      	b.n	815ea <_vfiprintf_r+0xde>
   81940:	f04a 0a10 	orr.w	sl, sl, #16
   81944:	f01a 0f20 	tst.w	sl, #32
   81948:	9004      	str	r0, [sp, #16]
   8194a:	46ac      	mov	ip, r5
   8194c:	f47f af73 	bne.w	81836 <_vfiprintf_r+0x32a>
   81950:	f01a 0f10 	tst.w	sl, #16
   81954:	f040 82ef 	bne.w	81f36 <_vfiprintf_r+0xa2a>
   81958:	f01a 0f40 	tst.w	sl, #64	; 0x40
   8195c:	f000 82eb 	beq.w	81f36 <_vfiprintf_r+0xa2a>
   81960:	f8dd b020 	ldr.w	fp, [sp, #32]
   81964:	2500      	movs	r5, #0
   81966:	f8bb 4000 	ldrh.w	r4, [fp]
   8196a:	f10b 0b04 	add.w	fp, fp, #4
   8196e:	2301      	movs	r3, #1
   81970:	f8cd b020 	str.w	fp, [sp, #32]
   81974:	e6db      	b.n	8172e <_vfiprintf_r+0x222>
   81976:	46ac      	mov	ip, r5
   81978:	4d51      	ldr	r5, [pc, #324]	; (81ac0 <_vfiprintf_r+0x5b4>)
   8197a:	f01a 0f20 	tst.w	sl, #32
   8197e:	9004      	str	r0, [sp, #16]
   81980:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   81984:	950a      	str	r5, [sp, #40]	; 0x28
   81986:	f000 80f0 	beq.w	81b6a <_vfiprintf_r+0x65e>
   8198a:	9d08      	ldr	r5, [sp, #32]
   8198c:	1dea      	adds	r2, r5, #7
   8198e:	f022 0207 	bic.w	r2, r2, #7
   81992:	f102 0b08 	add.w	fp, r2, #8
   81996:	f8cd b020 	str.w	fp, [sp, #32]
   8199a:	e9d2 4500 	ldrd	r4, r5, [r2]
   8199e:	f01a 0f01 	tst.w	sl, #1
   819a2:	f000 82aa 	beq.w	81efa <_vfiprintf_r+0x9ee>
   819a6:	ea54 0b05 	orrs.w	fp, r4, r5
   819aa:	f000 82a6 	beq.w	81efa <_vfiprintf_r+0x9ee>
   819ae:	2230      	movs	r2, #48	; 0x30
   819b0:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
   819b4:	f04a 0a02 	orr.w	sl, sl, #2
   819b8:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   819bc:	2302      	movs	r3, #2
   819be:	e6b6      	b.n	8172e <_vfiprintf_r+0x222>
   819c0:	9b08      	ldr	r3, [sp, #32]
   819c2:	f8dd b020 	ldr.w	fp, [sp, #32]
   819c6:	681b      	ldr	r3, [r3, #0]
   819c8:	2401      	movs	r4, #1
   819ca:	f04f 0500 	mov.w	r5, #0
   819ce:	f10b 0b04 	add.w	fp, fp, #4
   819d2:	9004      	str	r0, [sp, #16]
   819d4:	9403      	str	r4, [sp, #12]
   819d6:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
   819da:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   819de:	f8cd b020 	str.w	fp, [sp, #32]
   819e2:	9405      	str	r4, [sp, #20]
   819e4:	af16      	add	r7, sp, #88	; 0x58
   819e6:	f04f 0c00 	mov.w	ip, #0
   819ea:	e6d0      	b.n	8178e <_vfiprintf_r+0x282>
   819ec:	f01a 0f20 	tst.w	sl, #32
   819f0:	9004      	str	r0, [sp, #16]
   819f2:	46ac      	mov	ip, r5
   819f4:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   819f8:	f47f af38 	bne.w	8186c <_vfiprintf_r+0x360>
   819fc:	f01a 0f10 	tst.w	sl, #16
   81a00:	f040 82a7 	bne.w	81f52 <_vfiprintf_r+0xa46>
   81a04:	f01a 0f40 	tst.w	sl, #64	; 0x40
   81a08:	f000 82a3 	beq.w	81f52 <_vfiprintf_r+0xa46>
   81a0c:	f8dd b020 	ldr.w	fp, [sp, #32]
   81a10:	f9bb 4000 	ldrsh.w	r4, [fp]
   81a14:	f10b 0b04 	add.w	fp, fp, #4
   81a18:	17e5      	asrs	r5, r4, #31
   81a1a:	4622      	mov	r2, r4
   81a1c:	462b      	mov	r3, r5
   81a1e:	f8cd b020 	str.w	fp, [sp, #32]
   81a22:	e72d      	b.n	81880 <_vfiprintf_r+0x374>
   81a24:	f04a 0a40 	orr.w	sl, sl, #64	; 0x40
   81a28:	f898 3000 	ldrb.w	r3, [r8]
   81a2c:	e5db      	b.n	815e6 <_vfiprintf_r+0xda>
   81a2e:	f898 3000 	ldrb.w	r3, [r8]
   81a32:	4642      	mov	r2, r8
   81a34:	2b6c      	cmp	r3, #108	; 0x6c
   81a36:	bf03      	ittte	eq
   81a38:	f108 0801 	addeq.w	r8, r8, #1
   81a3c:	f04a 0a20 	orreq.w	sl, sl, #32
   81a40:	7853      	ldrbeq	r3, [r2, #1]
   81a42:	f04a 0a10 	orrne.w	sl, sl, #16
   81a46:	e5ce      	b.n	815e6 <_vfiprintf_r+0xda>
   81a48:	f01a 0f20 	tst.w	sl, #32
   81a4c:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   81a50:	f000 82f7 	beq.w	82042 <_vfiprintf_r+0xb36>
   81a54:	9c08      	ldr	r4, [sp, #32]
   81a56:	6821      	ldr	r1, [r4, #0]
   81a58:	9c09      	ldr	r4, [sp, #36]	; 0x24
   81a5a:	17e5      	asrs	r5, r4, #31
   81a5c:	462b      	mov	r3, r5
   81a5e:	9d08      	ldr	r5, [sp, #32]
   81a60:	4622      	mov	r2, r4
   81a62:	3504      	adds	r5, #4
   81a64:	9508      	str	r5, [sp, #32]
   81a66:	e9c1 2300 	strd	r2, r3, [r1]
   81a6a:	e582      	b.n	81572 <_vfiprintf_r+0x66>
   81a6c:	9c08      	ldr	r4, [sp, #32]
   81a6e:	46ac      	mov	ip, r5
   81a70:	6827      	ldr	r7, [r4, #0]
   81a72:	f04f 0500 	mov.w	r5, #0
   81a76:	9004      	str	r0, [sp, #16]
   81a78:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
   81a7c:	3404      	adds	r4, #4
   81a7e:	2f00      	cmp	r7, #0
   81a80:	f000 8332 	beq.w	820e8 <_vfiprintf_r+0xbdc>
   81a84:	f1bc 0f00 	cmp.w	ip, #0
   81a88:	4638      	mov	r0, r7
   81a8a:	f2c0 8307 	blt.w	8209c <_vfiprintf_r+0xb90>
   81a8e:	4662      	mov	r2, ip
   81a90:	2100      	movs	r1, #0
   81a92:	f8cd c004 	str.w	ip, [sp, #4]
   81a96:	f001 fbb1 	bl	831fc <memchr>
   81a9a:	f8dd c004 	ldr.w	ip, [sp, #4]
   81a9e:	2800      	cmp	r0, #0
   81aa0:	f000 833a 	beq.w	82118 <_vfiprintf_r+0xc0c>
   81aa4:	1bc0      	subs	r0, r0, r7
   81aa6:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
   81aaa:	4560      	cmp	r0, ip
   81aac:	bfa8      	it	ge
   81aae:	4660      	movge	r0, ip
   81ab0:	9005      	str	r0, [sp, #20]
   81ab2:	9408      	str	r4, [sp, #32]
   81ab4:	9507      	str	r5, [sp, #28]
   81ab6:	f04f 0c00 	mov.w	ip, #0
   81aba:	e65b      	b.n	81774 <_vfiprintf_r+0x268>
   81abc:	000845c0 	.word	0x000845c0
   81ac0:	00084580 	.word	0x00084580
   81ac4:	9b08      	ldr	r3, [sp, #32]
   81ac6:	f8dd b020 	ldr.w	fp, [sp, #32]
   81aca:	9004      	str	r0, [sp, #16]
   81acc:	48b2      	ldr	r0, [pc, #712]	; (81d98 <_vfiprintf_r+0x88c>)
   81ace:	681c      	ldr	r4, [r3, #0]
   81ad0:	2230      	movs	r2, #48	; 0x30
   81ad2:	2378      	movs	r3, #120	; 0x78
   81ad4:	f10b 0b04 	add.w	fp, fp, #4
   81ad8:	46ac      	mov	ip, r5
   81ada:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
   81ade:	f04a 0a02 	orr.w	sl, sl, #2
   81ae2:	f8cd b020 	str.w	fp, [sp, #32]
   81ae6:	2500      	movs	r5, #0
   81ae8:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   81aec:	900a      	str	r0, [sp, #40]	; 0x28
   81aee:	2302      	movs	r3, #2
   81af0:	e61d      	b.n	8172e <_vfiprintf_r+0x222>
   81af2:	f04a 0a20 	orr.w	sl, sl, #32
   81af6:	f898 3000 	ldrb.w	r3, [r8]
   81afa:	e574      	b.n	815e6 <_vfiprintf_r+0xda>
   81afc:	f8dd b020 	ldr.w	fp, [sp, #32]
   81b00:	f8db 0000 	ldr.w	r0, [fp]
   81b04:	f10b 0304 	add.w	r3, fp, #4
   81b08:	2800      	cmp	r0, #0
   81b0a:	f6ff adf7 	blt.w	816fc <_vfiprintf_r+0x1f0>
   81b0e:	9308      	str	r3, [sp, #32]
   81b10:	f898 3000 	ldrb.w	r3, [r8]
   81b14:	e567      	b.n	815e6 <_vfiprintf_r+0xda>
   81b16:	f898 3000 	ldrb.w	r3, [r8]
   81b1a:	212b      	movs	r1, #43	; 0x2b
   81b1c:	e563      	b.n	815e6 <_vfiprintf_r+0xda>
   81b1e:	f898 3000 	ldrb.w	r3, [r8]
   81b22:	f108 0401 	add.w	r4, r8, #1
   81b26:	2b2a      	cmp	r3, #42	; 0x2a
   81b28:	f000 8305 	beq.w	82136 <_vfiprintf_r+0xc2a>
   81b2c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   81b30:	2a09      	cmp	r2, #9
   81b32:	bf98      	it	ls
   81b34:	2500      	movls	r5, #0
   81b36:	f200 82fa 	bhi.w	8212e <_vfiprintf_r+0xc22>
   81b3a:	f814 3b01 	ldrb.w	r3, [r4], #1
   81b3e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   81b42:	eb02 0545 	add.w	r5, r2, r5, lsl #1
   81b46:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   81b4a:	2a09      	cmp	r2, #9
   81b4c:	d9f5      	bls.n	81b3a <_vfiprintf_r+0x62e>
   81b4e:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
   81b52:	46a0      	mov	r8, r4
   81b54:	e549      	b.n	815ea <_vfiprintf_r+0xde>
   81b56:	4c90      	ldr	r4, [pc, #576]	; (81d98 <_vfiprintf_r+0x88c>)
   81b58:	f01a 0f20 	tst.w	sl, #32
   81b5c:	9004      	str	r0, [sp, #16]
   81b5e:	46ac      	mov	ip, r5
   81b60:	940a      	str	r4, [sp, #40]	; 0x28
   81b62:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   81b66:	f47f af10 	bne.w	8198a <_vfiprintf_r+0x47e>
   81b6a:	f01a 0f10 	tst.w	sl, #16
   81b6e:	f040 81ea 	bne.w	81f46 <_vfiprintf_r+0xa3a>
   81b72:	f01a 0f40 	tst.w	sl, #64	; 0x40
   81b76:	f000 81e6 	beq.w	81f46 <_vfiprintf_r+0xa3a>
   81b7a:	f8dd b020 	ldr.w	fp, [sp, #32]
   81b7e:	2500      	movs	r5, #0
   81b80:	f8bb 4000 	ldrh.w	r4, [fp]
   81b84:	f10b 0b04 	add.w	fp, fp, #4
   81b88:	f8cd b020 	str.w	fp, [sp, #32]
   81b8c:	e707      	b.n	8199e <_vfiprintf_r+0x492>
   81b8e:	f898 3000 	ldrb.w	r3, [r8]
   81b92:	2900      	cmp	r1, #0
   81b94:	f47f ad27 	bne.w	815e6 <_vfiprintf_r+0xda>
   81b98:	2120      	movs	r1, #32
   81b9a:	e524      	b.n	815e6 <_vfiprintf_r+0xda>
   81b9c:	f04a 0a01 	orr.w	sl, sl, #1
   81ba0:	f898 3000 	ldrb.w	r3, [r8]
   81ba4:	e51f      	b.n	815e6 <_vfiprintf_r+0xda>
   81ba6:	9004      	str	r0, [sp, #16]
   81ba8:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   81bac:	2b00      	cmp	r3, #0
   81bae:	f000 80f9 	beq.w	81da4 <_vfiprintf_r+0x898>
   81bb2:	2501      	movs	r5, #1
   81bb4:	f04f 0b00 	mov.w	fp, #0
   81bb8:	9503      	str	r5, [sp, #12]
   81bba:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   81bbe:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
   81bc2:	9505      	str	r5, [sp, #20]
   81bc4:	af16      	add	r7, sp, #88	; 0x58
   81bc6:	e70e      	b.n	819e6 <_vfiprintf_r+0x4da>
   81bc8:	9806      	ldr	r0, [sp, #24]
   81bca:	9902      	ldr	r1, [sp, #8]
   81bcc:	aa13      	add	r2, sp, #76	; 0x4c
   81bce:	f7ff fc61 	bl	81494 <__sprint_r.part.0>
   81bd2:	2800      	cmp	r0, #0
   81bd4:	f040 80ed 	bne.w	81db2 <_vfiprintf_r+0x8a6>
   81bd8:	9814      	ldr	r0, [sp, #80]	; 0x50
   81bda:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81bdc:	1c43      	adds	r3, r0, #1
   81bde:	46cc      	mov	ip, r9
   81be0:	e5fe      	b.n	817e0 <_vfiprintf_r+0x2d4>
   81be2:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81be4:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81be6:	1c59      	adds	r1, r3, #1
   81be8:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
   81bec:	b168      	cbz	r0, 81c0a <_vfiprintf_r+0x6fe>
   81bee:	3201      	adds	r2, #1
   81bf0:	f10d 0047 	add.w	r0, sp, #71	; 0x47
   81bf4:	2301      	movs	r3, #1
   81bf6:	2907      	cmp	r1, #7
   81bf8:	9215      	str	r2, [sp, #84]	; 0x54
   81bfa:	9114      	str	r1, [sp, #80]	; 0x50
   81bfc:	e886 0009 	stmia.w	r6, {r0, r3}
   81c00:	f300 8160 	bgt.w	81ec4 <_vfiprintf_r+0x9b8>
   81c04:	460b      	mov	r3, r1
   81c06:	3608      	adds	r6, #8
   81c08:	3101      	adds	r1, #1
   81c0a:	9c07      	ldr	r4, [sp, #28]
   81c0c:	b164      	cbz	r4, 81c28 <_vfiprintf_r+0x71c>
   81c0e:	3202      	adds	r2, #2
   81c10:	a812      	add	r0, sp, #72	; 0x48
   81c12:	2302      	movs	r3, #2
   81c14:	2907      	cmp	r1, #7
   81c16:	9215      	str	r2, [sp, #84]	; 0x54
   81c18:	9114      	str	r1, [sp, #80]	; 0x50
   81c1a:	e886 0009 	stmia.w	r6, {r0, r3}
   81c1e:	f300 8157 	bgt.w	81ed0 <_vfiprintf_r+0x9c4>
   81c22:	460b      	mov	r3, r1
   81c24:	3608      	adds	r6, #8
   81c26:	3101      	adds	r1, #1
   81c28:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   81c2a:	2d80      	cmp	r5, #128	; 0x80
   81c2c:	f000 8101 	beq.w	81e32 <_vfiprintf_r+0x926>
   81c30:	9d05      	ldr	r5, [sp, #20]
   81c32:	ebc5 040c 	rsb	r4, r5, ip
   81c36:	2c00      	cmp	r4, #0
   81c38:	dd2f      	ble.n	81c9a <_vfiprintf_r+0x78e>
   81c3a:	2c10      	cmp	r4, #16
   81c3c:	4d57      	ldr	r5, [pc, #348]	; (81d9c <_vfiprintf_r+0x890>)
   81c3e:	dd22      	ble.n	81c86 <_vfiprintf_r+0x77a>
   81c40:	4630      	mov	r0, r6
   81c42:	f04f 0b10 	mov.w	fp, #16
   81c46:	462e      	mov	r6, r5
   81c48:	4625      	mov	r5, r4
   81c4a:	9c06      	ldr	r4, [sp, #24]
   81c4c:	e006      	b.n	81c5c <_vfiprintf_r+0x750>
   81c4e:	f103 0c02 	add.w	ip, r3, #2
   81c52:	3008      	adds	r0, #8
   81c54:	460b      	mov	r3, r1
   81c56:	3d10      	subs	r5, #16
   81c58:	2d10      	cmp	r5, #16
   81c5a:	dd10      	ble.n	81c7e <_vfiprintf_r+0x772>
   81c5c:	1c59      	adds	r1, r3, #1
   81c5e:	3210      	adds	r2, #16
   81c60:	2907      	cmp	r1, #7
   81c62:	9215      	str	r2, [sp, #84]	; 0x54
   81c64:	e880 0840 	stmia.w	r0, {r6, fp}
   81c68:	9114      	str	r1, [sp, #80]	; 0x50
   81c6a:	ddf0      	ble.n	81c4e <_vfiprintf_r+0x742>
   81c6c:	2a00      	cmp	r2, #0
   81c6e:	d163      	bne.n	81d38 <_vfiprintf_r+0x82c>
   81c70:	3d10      	subs	r5, #16
   81c72:	2d10      	cmp	r5, #16
   81c74:	f04f 0c01 	mov.w	ip, #1
   81c78:	4613      	mov	r3, r2
   81c7a:	4648      	mov	r0, r9
   81c7c:	dcee      	bgt.n	81c5c <_vfiprintf_r+0x750>
   81c7e:	462c      	mov	r4, r5
   81c80:	4661      	mov	r1, ip
   81c82:	4635      	mov	r5, r6
   81c84:	4606      	mov	r6, r0
   81c86:	4422      	add	r2, r4
   81c88:	2907      	cmp	r1, #7
   81c8a:	9215      	str	r2, [sp, #84]	; 0x54
   81c8c:	6035      	str	r5, [r6, #0]
   81c8e:	6074      	str	r4, [r6, #4]
   81c90:	9114      	str	r1, [sp, #80]	; 0x50
   81c92:	f300 80c1 	bgt.w	81e18 <_vfiprintf_r+0x90c>
   81c96:	3608      	adds	r6, #8
   81c98:	3101      	adds	r1, #1
   81c9a:	9d05      	ldr	r5, [sp, #20]
   81c9c:	2907      	cmp	r1, #7
   81c9e:	442a      	add	r2, r5
   81ca0:	9215      	str	r2, [sp, #84]	; 0x54
   81ca2:	6037      	str	r7, [r6, #0]
   81ca4:	6075      	str	r5, [r6, #4]
   81ca6:	9114      	str	r1, [sp, #80]	; 0x50
   81ca8:	f340 80c1 	ble.w	81e2e <_vfiprintf_r+0x922>
   81cac:	2a00      	cmp	r2, #0
   81cae:	f040 8130 	bne.w	81f12 <_vfiprintf_r+0xa06>
   81cb2:	9214      	str	r2, [sp, #80]	; 0x50
   81cb4:	464e      	mov	r6, r9
   81cb6:	f01a 0f04 	tst.w	sl, #4
   81cba:	f000 808b 	beq.w	81dd4 <_vfiprintf_r+0x8c8>
   81cbe:	9d04      	ldr	r5, [sp, #16]
   81cc0:	f8dd b00c 	ldr.w	fp, [sp, #12]
   81cc4:	ebcb 0405 	rsb	r4, fp, r5
   81cc8:	2c00      	cmp	r4, #0
   81cca:	f340 8083 	ble.w	81dd4 <_vfiprintf_r+0x8c8>
   81cce:	2c10      	cmp	r4, #16
   81cd0:	f340 821e 	ble.w	82110 <_vfiprintf_r+0xc04>
   81cd4:	9914      	ldr	r1, [sp, #80]	; 0x50
   81cd6:	4d32      	ldr	r5, [pc, #200]	; (81da0 <_vfiprintf_r+0x894>)
   81cd8:	2710      	movs	r7, #16
   81cda:	f8dd a018 	ldr.w	sl, [sp, #24]
   81cde:	f8dd b008 	ldr.w	fp, [sp, #8]
   81ce2:	e005      	b.n	81cf0 <_vfiprintf_r+0x7e4>
   81ce4:	1c88      	adds	r0, r1, #2
   81ce6:	3608      	adds	r6, #8
   81ce8:	4619      	mov	r1, r3
   81cea:	3c10      	subs	r4, #16
   81cec:	2c10      	cmp	r4, #16
   81cee:	dd10      	ble.n	81d12 <_vfiprintf_r+0x806>
   81cf0:	1c4b      	adds	r3, r1, #1
   81cf2:	3210      	adds	r2, #16
   81cf4:	2b07      	cmp	r3, #7
   81cf6:	9215      	str	r2, [sp, #84]	; 0x54
   81cf8:	e886 00a0 	stmia.w	r6, {r5, r7}
   81cfc:	9314      	str	r3, [sp, #80]	; 0x50
   81cfe:	ddf1      	ble.n	81ce4 <_vfiprintf_r+0x7d8>
   81d00:	2a00      	cmp	r2, #0
   81d02:	d17d      	bne.n	81e00 <_vfiprintf_r+0x8f4>
   81d04:	3c10      	subs	r4, #16
   81d06:	2c10      	cmp	r4, #16
   81d08:	f04f 0001 	mov.w	r0, #1
   81d0c:	4611      	mov	r1, r2
   81d0e:	464e      	mov	r6, r9
   81d10:	dcee      	bgt.n	81cf0 <_vfiprintf_r+0x7e4>
   81d12:	4422      	add	r2, r4
   81d14:	2807      	cmp	r0, #7
   81d16:	9215      	str	r2, [sp, #84]	; 0x54
   81d18:	6035      	str	r5, [r6, #0]
   81d1a:	6074      	str	r4, [r6, #4]
   81d1c:	9014      	str	r0, [sp, #80]	; 0x50
   81d1e:	dd59      	ble.n	81dd4 <_vfiprintf_r+0x8c8>
   81d20:	2a00      	cmp	r2, #0
   81d22:	d14f      	bne.n	81dc4 <_vfiprintf_r+0x8b8>
   81d24:	9c09      	ldr	r4, [sp, #36]	; 0x24
   81d26:	f8dd b00c 	ldr.w	fp, [sp, #12]
   81d2a:	9d04      	ldr	r5, [sp, #16]
   81d2c:	45ab      	cmp	fp, r5
   81d2e:	bfac      	ite	ge
   81d30:	445c      	addge	r4, fp
   81d32:	1964      	addlt	r4, r4, r5
   81d34:	9409      	str	r4, [sp, #36]	; 0x24
   81d36:	e05e      	b.n	81df6 <_vfiprintf_r+0x8ea>
   81d38:	4620      	mov	r0, r4
   81d3a:	9902      	ldr	r1, [sp, #8]
   81d3c:	aa13      	add	r2, sp, #76	; 0x4c
   81d3e:	f7ff fba9 	bl	81494 <__sprint_r.part.0>
   81d42:	2800      	cmp	r0, #0
   81d44:	d135      	bne.n	81db2 <_vfiprintf_r+0x8a6>
   81d46:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81d48:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81d4a:	f103 0c01 	add.w	ip, r3, #1
   81d4e:	4648      	mov	r0, r9
   81d50:	e781      	b.n	81c56 <_vfiprintf_r+0x74a>
   81d52:	08e0      	lsrs	r0, r4, #3
   81d54:	ea40 7045 	orr.w	r0, r0, r5, lsl #29
   81d58:	f004 0207 	and.w	r2, r4, #7
   81d5c:	08e9      	lsrs	r1, r5, #3
   81d5e:	3230      	adds	r2, #48	; 0x30
   81d60:	ea50 0b01 	orrs.w	fp, r0, r1
   81d64:	461f      	mov	r7, r3
   81d66:	701a      	strb	r2, [r3, #0]
   81d68:	4604      	mov	r4, r0
   81d6a:	460d      	mov	r5, r1
   81d6c:	f103 33ff 	add.w	r3, r3, #4294967295
   81d70:	d1ef      	bne.n	81d52 <_vfiprintf_r+0x846>
   81d72:	f01a 0f01 	tst.w	sl, #1
   81d76:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   81d7a:	4639      	mov	r1, r7
   81d7c:	f000 80b9 	beq.w	81ef2 <_vfiprintf_r+0x9e6>
   81d80:	2a30      	cmp	r2, #48	; 0x30
   81d82:	f43f acf4 	beq.w	8176e <_vfiprintf_r+0x262>
   81d86:	461f      	mov	r7, r3
   81d88:	ebc7 0509 	rsb	r5, r7, r9
   81d8c:	2330      	movs	r3, #48	; 0x30
   81d8e:	9505      	str	r5, [sp, #20]
   81d90:	f801 3c01 	strb.w	r3, [r1, #-1]
   81d94:	e4ee      	b.n	81774 <_vfiprintf_r+0x268>
   81d96:	bf00      	nop
   81d98:	00084594 	.word	0x00084594
   81d9c:	000845b0 	.word	0x000845b0
   81da0:	000845c0 	.word	0x000845c0
   81da4:	9b15      	ldr	r3, [sp, #84]	; 0x54
   81da6:	b123      	cbz	r3, 81db2 <_vfiprintf_r+0x8a6>
   81da8:	9806      	ldr	r0, [sp, #24]
   81daa:	9902      	ldr	r1, [sp, #8]
   81dac:	aa13      	add	r2, sp, #76	; 0x4c
   81dae:	f7ff fb71 	bl	81494 <__sprint_r.part.0>
   81db2:	9c02      	ldr	r4, [sp, #8]
   81db4:	89a3      	ldrh	r3, [r4, #12]
   81db6:	065b      	lsls	r3, r3, #25
   81db8:	f53f ac98 	bmi.w	816ec <_vfiprintf_r+0x1e0>
   81dbc:	9809      	ldr	r0, [sp, #36]	; 0x24
   81dbe:	b031      	add	sp, #196	; 0xc4
   81dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81dc4:	9806      	ldr	r0, [sp, #24]
   81dc6:	9902      	ldr	r1, [sp, #8]
   81dc8:	aa13      	add	r2, sp, #76	; 0x4c
   81dca:	f7ff fb63 	bl	81494 <__sprint_r.part.0>
   81dce:	2800      	cmp	r0, #0
   81dd0:	d1ef      	bne.n	81db2 <_vfiprintf_r+0x8a6>
   81dd2:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81dd4:	9c09      	ldr	r4, [sp, #36]	; 0x24
   81dd6:	f8dd b00c 	ldr.w	fp, [sp, #12]
   81dda:	9d04      	ldr	r5, [sp, #16]
   81ddc:	45ab      	cmp	fp, r5
   81dde:	bfac      	ite	ge
   81de0:	445c      	addge	r4, fp
   81de2:	1964      	addlt	r4, r4, r5
   81de4:	9409      	str	r4, [sp, #36]	; 0x24
   81de6:	b132      	cbz	r2, 81df6 <_vfiprintf_r+0x8ea>
   81de8:	9806      	ldr	r0, [sp, #24]
   81dea:	9902      	ldr	r1, [sp, #8]
   81dec:	aa13      	add	r2, sp, #76	; 0x4c
   81dee:	f7ff fb51 	bl	81494 <__sprint_r.part.0>
   81df2:	2800      	cmp	r0, #0
   81df4:	d1dd      	bne.n	81db2 <_vfiprintf_r+0x8a6>
   81df6:	2000      	movs	r0, #0
   81df8:	9014      	str	r0, [sp, #80]	; 0x50
   81dfa:	464e      	mov	r6, r9
   81dfc:	f7ff bbb9 	b.w	81572 <_vfiprintf_r+0x66>
   81e00:	4650      	mov	r0, sl
   81e02:	4659      	mov	r1, fp
   81e04:	aa13      	add	r2, sp, #76	; 0x4c
   81e06:	f7ff fb45 	bl	81494 <__sprint_r.part.0>
   81e0a:	2800      	cmp	r0, #0
   81e0c:	d1d1      	bne.n	81db2 <_vfiprintf_r+0x8a6>
   81e0e:	9914      	ldr	r1, [sp, #80]	; 0x50
   81e10:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81e12:	1c48      	adds	r0, r1, #1
   81e14:	464e      	mov	r6, r9
   81e16:	e768      	b.n	81cea <_vfiprintf_r+0x7de>
   81e18:	2a00      	cmp	r2, #0
   81e1a:	f040 80f7 	bne.w	8200c <_vfiprintf_r+0xb00>
   81e1e:	9c05      	ldr	r4, [sp, #20]
   81e20:	2301      	movs	r3, #1
   81e22:	9720      	str	r7, [sp, #128]	; 0x80
   81e24:	9421      	str	r4, [sp, #132]	; 0x84
   81e26:	9415      	str	r4, [sp, #84]	; 0x54
   81e28:	4622      	mov	r2, r4
   81e2a:	9314      	str	r3, [sp, #80]	; 0x50
   81e2c:	464e      	mov	r6, r9
   81e2e:	3608      	adds	r6, #8
   81e30:	e741      	b.n	81cb6 <_vfiprintf_r+0x7aa>
   81e32:	9d04      	ldr	r5, [sp, #16]
   81e34:	f8dd b00c 	ldr.w	fp, [sp, #12]
   81e38:	ebcb 0405 	rsb	r4, fp, r5
   81e3c:	2c00      	cmp	r4, #0
   81e3e:	f77f aef7 	ble.w	81c30 <_vfiprintf_r+0x724>
   81e42:	2c10      	cmp	r4, #16
   81e44:	4da6      	ldr	r5, [pc, #664]	; (820e0 <_vfiprintf_r+0xbd4>)
   81e46:	f340 8170 	ble.w	8212a <_vfiprintf_r+0xc1e>
   81e4a:	4629      	mov	r1, r5
   81e4c:	f04f 0b10 	mov.w	fp, #16
   81e50:	4625      	mov	r5, r4
   81e52:	4664      	mov	r4, ip
   81e54:	46b4      	mov	ip, r6
   81e56:	460e      	mov	r6, r1
   81e58:	e006      	b.n	81e68 <_vfiprintf_r+0x95c>
   81e5a:	1c98      	adds	r0, r3, #2
   81e5c:	f10c 0c08 	add.w	ip, ip, #8
   81e60:	460b      	mov	r3, r1
   81e62:	3d10      	subs	r5, #16
   81e64:	2d10      	cmp	r5, #16
   81e66:	dd0f      	ble.n	81e88 <_vfiprintf_r+0x97c>
   81e68:	1c59      	adds	r1, r3, #1
   81e6a:	3210      	adds	r2, #16
   81e6c:	2907      	cmp	r1, #7
   81e6e:	9215      	str	r2, [sp, #84]	; 0x54
   81e70:	e88c 0840 	stmia.w	ip, {r6, fp}
   81e74:	9114      	str	r1, [sp, #80]	; 0x50
   81e76:	ddf0      	ble.n	81e5a <_vfiprintf_r+0x94e>
   81e78:	b9ba      	cbnz	r2, 81eaa <_vfiprintf_r+0x99e>
   81e7a:	3d10      	subs	r5, #16
   81e7c:	2d10      	cmp	r5, #16
   81e7e:	f04f 0001 	mov.w	r0, #1
   81e82:	4613      	mov	r3, r2
   81e84:	46cc      	mov	ip, r9
   81e86:	dcef      	bgt.n	81e68 <_vfiprintf_r+0x95c>
   81e88:	4633      	mov	r3, r6
   81e8a:	4666      	mov	r6, ip
   81e8c:	46a4      	mov	ip, r4
   81e8e:	462c      	mov	r4, r5
   81e90:	461d      	mov	r5, r3
   81e92:	4422      	add	r2, r4
   81e94:	2807      	cmp	r0, #7
   81e96:	9215      	str	r2, [sp, #84]	; 0x54
   81e98:	6035      	str	r5, [r6, #0]
   81e9a:	6074      	str	r4, [r6, #4]
   81e9c:	9014      	str	r0, [sp, #80]	; 0x50
   81e9e:	f300 80af 	bgt.w	82000 <_vfiprintf_r+0xaf4>
   81ea2:	3608      	adds	r6, #8
   81ea4:	1c41      	adds	r1, r0, #1
   81ea6:	4603      	mov	r3, r0
   81ea8:	e6c2      	b.n	81c30 <_vfiprintf_r+0x724>
   81eaa:	9806      	ldr	r0, [sp, #24]
   81eac:	9902      	ldr	r1, [sp, #8]
   81eae:	aa13      	add	r2, sp, #76	; 0x4c
   81eb0:	f7ff faf0 	bl	81494 <__sprint_r.part.0>
   81eb4:	2800      	cmp	r0, #0
   81eb6:	f47f af7c 	bne.w	81db2 <_vfiprintf_r+0x8a6>
   81eba:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81ebc:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81ebe:	1c58      	adds	r0, r3, #1
   81ec0:	46cc      	mov	ip, r9
   81ec2:	e7ce      	b.n	81e62 <_vfiprintf_r+0x956>
   81ec4:	2a00      	cmp	r2, #0
   81ec6:	d179      	bne.n	81fbc <_vfiprintf_r+0xab0>
   81ec8:	4619      	mov	r1, r3
   81eca:	464e      	mov	r6, r9
   81ecc:	4613      	mov	r3, r2
   81ece:	e69c      	b.n	81c0a <_vfiprintf_r+0x6fe>
   81ed0:	2a00      	cmp	r2, #0
   81ed2:	f040 8084 	bne.w	81fde <_vfiprintf_r+0xad2>
   81ed6:	2101      	movs	r1, #1
   81ed8:	4613      	mov	r3, r2
   81eda:	464e      	mov	r6, r9
   81edc:	e6a4      	b.n	81c28 <_vfiprintf_r+0x71c>
   81ede:	464f      	mov	r7, r9
   81ee0:	e448      	b.n	81774 <_vfiprintf_r+0x268>
   81ee2:	2d00      	cmp	r5, #0
   81ee4:	bf08      	it	eq
   81ee6:	2c0a      	cmpeq	r4, #10
   81ee8:	d246      	bcs.n	81f78 <_vfiprintf_r+0xa6c>
   81eea:	3430      	adds	r4, #48	; 0x30
   81eec:	af30      	add	r7, sp, #192	; 0xc0
   81eee:	f807 4d41 	strb.w	r4, [r7, #-65]!
   81ef2:	ebc7 0309 	rsb	r3, r7, r9
   81ef6:	9305      	str	r3, [sp, #20]
   81ef8:	e43c      	b.n	81774 <_vfiprintf_r+0x268>
   81efa:	2302      	movs	r3, #2
   81efc:	e417      	b.n	8172e <_vfiprintf_r+0x222>
   81efe:	2a00      	cmp	r2, #0
   81f00:	f040 80af 	bne.w	82062 <_vfiprintf_r+0xb56>
   81f04:	4613      	mov	r3, r2
   81f06:	2101      	movs	r1, #1
   81f08:	464e      	mov	r6, r9
   81f0a:	e66d      	b.n	81be8 <_vfiprintf_r+0x6dc>
   81f0c:	4644      	mov	r4, r8
   81f0e:	f7ff bb58 	b.w	815c2 <_vfiprintf_r+0xb6>
   81f12:	9806      	ldr	r0, [sp, #24]
   81f14:	9902      	ldr	r1, [sp, #8]
   81f16:	aa13      	add	r2, sp, #76	; 0x4c
   81f18:	f7ff fabc 	bl	81494 <__sprint_r.part.0>
   81f1c:	2800      	cmp	r0, #0
   81f1e:	f47f af48 	bne.w	81db2 <_vfiprintf_r+0x8a6>
   81f22:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81f24:	464e      	mov	r6, r9
   81f26:	e6c6      	b.n	81cb6 <_vfiprintf_r+0x7aa>
   81f28:	9d08      	ldr	r5, [sp, #32]
   81f2a:	682c      	ldr	r4, [r5, #0]
   81f2c:	3504      	adds	r5, #4
   81f2e:	9508      	str	r5, [sp, #32]
   81f30:	2500      	movs	r5, #0
   81f32:	f7ff bbfc 	b.w	8172e <_vfiprintf_r+0x222>
   81f36:	9d08      	ldr	r5, [sp, #32]
   81f38:	2301      	movs	r3, #1
   81f3a:	682c      	ldr	r4, [r5, #0]
   81f3c:	3504      	adds	r5, #4
   81f3e:	9508      	str	r5, [sp, #32]
   81f40:	2500      	movs	r5, #0
   81f42:	f7ff bbf4 	b.w	8172e <_vfiprintf_r+0x222>
   81f46:	9d08      	ldr	r5, [sp, #32]
   81f48:	682c      	ldr	r4, [r5, #0]
   81f4a:	3504      	adds	r5, #4
   81f4c:	9508      	str	r5, [sp, #32]
   81f4e:	2500      	movs	r5, #0
   81f50:	e525      	b.n	8199e <_vfiprintf_r+0x492>
   81f52:	9d08      	ldr	r5, [sp, #32]
   81f54:	682c      	ldr	r4, [r5, #0]
   81f56:	3504      	adds	r5, #4
   81f58:	9508      	str	r5, [sp, #32]
   81f5a:	17e5      	asrs	r5, r4, #31
   81f5c:	4622      	mov	r2, r4
   81f5e:	462b      	mov	r3, r5
   81f60:	e48e      	b.n	81880 <_vfiprintf_r+0x374>
   81f62:	9806      	ldr	r0, [sp, #24]
   81f64:	9902      	ldr	r1, [sp, #8]
   81f66:	aa13      	add	r2, sp, #76	; 0x4c
   81f68:	f7ff fa94 	bl	81494 <__sprint_r.part.0>
   81f6c:	2800      	cmp	r0, #0
   81f6e:	f47f af20 	bne.w	81db2 <_vfiprintf_r+0x8a6>
   81f72:	464e      	mov	r6, r9
   81f74:	f7ff bb9a 	b.w	816ac <_vfiprintf_r+0x1a0>
   81f78:	f10d 0b7f 	add.w	fp, sp, #127	; 0x7f
   81f7c:	9603      	str	r6, [sp, #12]
   81f7e:	465e      	mov	r6, fp
   81f80:	46e3      	mov	fp, ip
   81f82:	4620      	mov	r0, r4
   81f84:	4629      	mov	r1, r5
   81f86:	220a      	movs	r2, #10
   81f88:	2300      	movs	r3, #0
   81f8a:	f001 fe2f 	bl	83bec <__aeabi_uldivmod>
   81f8e:	3230      	adds	r2, #48	; 0x30
   81f90:	7032      	strb	r2, [r6, #0]
   81f92:	4620      	mov	r0, r4
   81f94:	4629      	mov	r1, r5
   81f96:	220a      	movs	r2, #10
   81f98:	2300      	movs	r3, #0
   81f9a:	f001 fe27 	bl	83bec <__aeabi_uldivmod>
   81f9e:	4604      	mov	r4, r0
   81fa0:	460d      	mov	r5, r1
   81fa2:	ea54 0005 	orrs.w	r0, r4, r5
   81fa6:	4637      	mov	r7, r6
   81fa8:	f106 36ff 	add.w	r6, r6, #4294967295
   81fac:	d1e9      	bne.n	81f82 <_vfiprintf_r+0xa76>
   81fae:	ebc7 0309 	rsb	r3, r7, r9
   81fb2:	46dc      	mov	ip, fp
   81fb4:	9e03      	ldr	r6, [sp, #12]
   81fb6:	9305      	str	r3, [sp, #20]
   81fb8:	f7ff bbdc 	b.w	81774 <_vfiprintf_r+0x268>
   81fbc:	9806      	ldr	r0, [sp, #24]
   81fbe:	9902      	ldr	r1, [sp, #8]
   81fc0:	aa13      	add	r2, sp, #76	; 0x4c
   81fc2:	f8cd c004 	str.w	ip, [sp, #4]
   81fc6:	f7ff fa65 	bl	81494 <__sprint_r.part.0>
   81fca:	f8dd c004 	ldr.w	ip, [sp, #4]
   81fce:	2800      	cmp	r0, #0
   81fd0:	f47f aeef 	bne.w	81db2 <_vfiprintf_r+0x8a6>
   81fd4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81fd6:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81fd8:	1c59      	adds	r1, r3, #1
   81fda:	464e      	mov	r6, r9
   81fdc:	e615      	b.n	81c0a <_vfiprintf_r+0x6fe>
   81fde:	9806      	ldr	r0, [sp, #24]
   81fe0:	9902      	ldr	r1, [sp, #8]
   81fe2:	aa13      	add	r2, sp, #76	; 0x4c
   81fe4:	f8cd c004 	str.w	ip, [sp, #4]
   81fe8:	f7ff fa54 	bl	81494 <__sprint_r.part.0>
   81fec:	f8dd c004 	ldr.w	ip, [sp, #4]
   81ff0:	2800      	cmp	r0, #0
   81ff2:	f47f aede 	bne.w	81db2 <_vfiprintf_r+0x8a6>
   81ff6:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81ff8:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81ffa:	1c59      	adds	r1, r3, #1
   81ffc:	464e      	mov	r6, r9
   81ffe:	e613      	b.n	81c28 <_vfiprintf_r+0x71c>
   82000:	2a00      	cmp	r2, #0
   82002:	d156      	bne.n	820b2 <_vfiprintf_r+0xba6>
   82004:	2101      	movs	r1, #1
   82006:	4613      	mov	r3, r2
   82008:	464e      	mov	r6, r9
   8200a:	e611      	b.n	81c30 <_vfiprintf_r+0x724>
   8200c:	9806      	ldr	r0, [sp, #24]
   8200e:	9902      	ldr	r1, [sp, #8]
   82010:	aa13      	add	r2, sp, #76	; 0x4c
   82012:	f7ff fa3f 	bl	81494 <__sprint_r.part.0>
   82016:	2800      	cmp	r0, #0
   82018:	f47f aecb 	bne.w	81db2 <_vfiprintf_r+0x8a6>
   8201c:	9914      	ldr	r1, [sp, #80]	; 0x50
   8201e:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82020:	3101      	adds	r1, #1
   82022:	464e      	mov	r6, r9
   82024:	e639      	b.n	81c9a <_vfiprintf_r+0x78e>
   82026:	f04f 0b2d 	mov.w	fp, #45	; 0x2d
   8202a:	4264      	negs	r4, r4
   8202c:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   82030:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
   82034:	f8cd b01c 	str.w	fp, [sp, #28]
   82038:	f8cd c014 	str.w	ip, [sp, #20]
   8203c:	2301      	movs	r3, #1
   8203e:	f7ff bb7e 	b.w	8173e <_vfiprintf_r+0x232>
   82042:	f01a 0f10 	tst.w	sl, #16
   82046:	d11d      	bne.n	82084 <_vfiprintf_r+0xb78>
   82048:	f01a 0f40 	tst.w	sl, #64	; 0x40
   8204c:	d058      	beq.n	82100 <_vfiprintf_r+0xbf4>
   8204e:	9d08      	ldr	r5, [sp, #32]
   82050:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
   82054:	682b      	ldr	r3, [r5, #0]
   82056:	3504      	adds	r5, #4
   82058:	9508      	str	r5, [sp, #32]
   8205a:	f8a3 b000 	strh.w	fp, [r3]
   8205e:	f7ff ba88 	b.w	81572 <_vfiprintf_r+0x66>
   82062:	9806      	ldr	r0, [sp, #24]
   82064:	9902      	ldr	r1, [sp, #8]
   82066:	aa13      	add	r2, sp, #76	; 0x4c
   82068:	f8cd c004 	str.w	ip, [sp, #4]
   8206c:	f7ff fa12 	bl	81494 <__sprint_r.part.0>
   82070:	f8dd c004 	ldr.w	ip, [sp, #4]
   82074:	2800      	cmp	r0, #0
   82076:	f47f ae9c 	bne.w	81db2 <_vfiprintf_r+0x8a6>
   8207a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   8207c:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8207e:	1c59      	adds	r1, r3, #1
   82080:	464e      	mov	r6, r9
   82082:	e5b1      	b.n	81be8 <_vfiprintf_r+0x6dc>
   82084:	f8dd b020 	ldr.w	fp, [sp, #32]
   82088:	9c09      	ldr	r4, [sp, #36]	; 0x24
   8208a:	f8db 3000 	ldr.w	r3, [fp]
   8208e:	f10b 0b04 	add.w	fp, fp, #4
   82092:	f8cd b020 	str.w	fp, [sp, #32]
   82096:	601c      	str	r4, [r3, #0]
   82098:	f7ff ba6b 	b.w	81572 <_vfiprintf_r+0x66>
   8209c:	9408      	str	r4, [sp, #32]
   8209e:	f7ff f9c9 	bl	81434 <strlen>
   820a2:	f89d 4047 	ldrb.w	r4, [sp, #71]	; 0x47
   820a6:	9005      	str	r0, [sp, #20]
   820a8:	9407      	str	r4, [sp, #28]
   820aa:	f04f 0c00 	mov.w	ip, #0
   820ae:	f7ff bb61 	b.w	81774 <_vfiprintf_r+0x268>
   820b2:	9806      	ldr	r0, [sp, #24]
   820b4:	9902      	ldr	r1, [sp, #8]
   820b6:	aa13      	add	r2, sp, #76	; 0x4c
   820b8:	f8cd c004 	str.w	ip, [sp, #4]
   820bc:	f7ff f9ea 	bl	81494 <__sprint_r.part.0>
   820c0:	f8dd c004 	ldr.w	ip, [sp, #4]
   820c4:	2800      	cmp	r0, #0
   820c6:	f47f ae74 	bne.w	81db2 <_vfiprintf_r+0x8a6>
   820ca:	9b14      	ldr	r3, [sp, #80]	; 0x50
   820cc:	9a15      	ldr	r2, [sp, #84]	; 0x54
   820ce:	1c59      	adds	r1, r3, #1
   820d0:	464e      	mov	r6, r9
   820d2:	e5ad      	b.n	81c30 <_vfiprintf_r+0x724>
   820d4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   820d6:	9a15      	ldr	r2, [sp, #84]	; 0x54
   820d8:	3301      	adds	r3, #1
   820da:	4d02      	ldr	r5, [pc, #8]	; (820e4 <_vfiprintf_r+0xbd8>)
   820dc:	f7ff bb9a 	b.w	81814 <_vfiprintf_r+0x308>
   820e0:	000845b0 	.word	0x000845b0
   820e4:	000845c0 	.word	0x000845c0
   820e8:	f1bc 0f06 	cmp.w	ip, #6
   820ec:	bf34      	ite	cc
   820ee:	4663      	movcc	r3, ip
   820f0:	2306      	movcs	r3, #6
   820f2:	9408      	str	r4, [sp, #32]
   820f4:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
   820f8:	9305      	str	r3, [sp, #20]
   820fa:	9403      	str	r4, [sp, #12]
   820fc:	4f16      	ldr	r7, [pc, #88]	; (82158 <_vfiprintf_r+0xc4c>)
   820fe:	e472      	b.n	819e6 <_vfiprintf_r+0x4da>
   82100:	9c08      	ldr	r4, [sp, #32]
   82102:	9d09      	ldr	r5, [sp, #36]	; 0x24
   82104:	6823      	ldr	r3, [r4, #0]
   82106:	3404      	adds	r4, #4
   82108:	9408      	str	r4, [sp, #32]
   8210a:	601d      	str	r5, [r3, #0]
   8210c:	f7ff ba31 	b.w	81572 <_vfiprintf_r+0x66>
   82110:	9814      	ldr	r0, [sp, #80]	; 0x50
   82112:	4d12      	ldr	r5, [pc, #72]	; (8215c <_vfiprintf_r+0xc50>)
   82114:	3001      	adds	r0, #1
   82116:	e5fc      	b.n	81d12 <_vfiprintf_r+0x806>
   82118:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
   8211c:	f8cd c014 	str.w	ip, [sp, #20]
   82120:	9507      	str	r5, [sp, #28]
   82122:	9408      	str	r4, [sp, #32]
   82124:	4684      	mov	ip, r0
   82126:	f7ff bb25 	b.w	81774 <_vfiprintf_r+0x268>
   8212a:	4608      	mov	r0, r1
   8212c:	e6b1      	b.n	81e92 <_vfiprintf_r+0x986>
   8212e:	46a0      	mov	r8, r4
   82130:	2500      	movs	r5, #0
   82132:	f7ff ba5a 	b.w	815ea <_vfiprintf_r+0xde>
   82136:	f8dd b020 	ldr.w	fp, [sp, #32]
   8213a:	f898 3001 	ldrb.w	r3, [r8, #1]
   8213e:	f8db 5000 	ldr.w	r5, [fp]
   82142:	f10b 0204 	add.w	r2, fp, #4
   82146:	2d00      	cmp	r5, #0
   82148:	9208      	str	r2, [sp, #32]
   8214a:	46a0      	mov	r8, r4
   8214c:	f6bf aa4b 	bge.w	815e6 <_vfiprintf_r+0xda>
   82150:	f04f 35ff 	mov.w	r5, #4294967295
   82154:	f7ff ba47 	b.w	815e6 <_vfiprintf_r+0xda>
   82158:	000845a8 	.word	0x000845a8
   8215c:	000845c0 	.word	0x000845c0

00082160 <__sbprintf>:
   82160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   82164:	6e4f      	ldr	r7, [r1, #100]	; 0x64
   82166:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   8216a:	4688      	mov	r8, r1
   8216c:	9719      	str	r7, [sp, #100]	; 0x64
   8216e:	f8d8 701c 	ldr.w	r7, [r8, #28]
   82172:	f8b1 a00c 	ldrh.w	sl, [r1, #12]
   82176:	f8b1 900e 	ldrh.w	r9, [r1, #14]
   8217a:	9707      	str	r7, [sp, #28]
   8217c:	f8d8 7024 	ldr.w	r7, [r8, #36]	; 0x24
   82180:	ac1a      	add	r4, sp, #104	; 0x68
   82182:	f44f 6580 	mov.w	r5, #1024	; 0x400
   82186:	f02a 0a02 	bic.w	sl, sl, #2
   8218a:	2600      	movs	r6, #0
   8218c:	4669      	mov	r1, sp
   8218e:	9400      	str	r4, [sp, #0]
   82190:	9404      	str	r4, [sp, #16]
   82192:	9502      	str	r5, [sp, #8]
   82194:	9505      	str	r5, [sp, #20]
   82196:	f8ad a00c 	strh.w	sl, [sp, #12]
   8219a:	f8ad 900e 	strh.w	r9, [sp, #14]
   8219e:	9709      	str	r7, [sp, #36]	; 0x24
   821a0:	9606      	str	r6, [sp, #24]
   821a2:	4605      	mov	r5, r0
   821a4:	f7ff f9b2 	bl	8150c <_vfiprintf_r>
   821a8:	1e04      	subs	r4, r0, #0
   821aa:	db07      	blt.n	821bc <__sbprintf+0x5c>
   821ac:	4628      	mov	r0, r5
   821ae:	4669      	mov	r1, sp
   821b0:	f000 f92a 	bl	82408 <_fflush_r>
   821b4:	42b0      	cmp	r0, r6
   821b6:	bf18      	it	ne
   821b8:	f04f 34ff 	movne.w	r4, #4294967295
   821bc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   821c0:	065b      	lsls	r3, r3, #25
   821c2:	d505      	bpl.n	821d0 <__sbprintf+0x70>
   821c4:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   821c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   821cc:	f8a8 300c 	strh.w	r3, [r8, #12]
   821d0:	4620      	mov	r0, r4
   821d2:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   821d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   821da:	bf00      	nop

000821dc <__swsetup_r>:
   821dc:	4b2f      	ldr	r3, [pc, #188]	; (8229c <__swsetup_r+0xc0>)
   821de:	b570      	push	{r4, r5, r6, lr}
   821e0:	4606      	mov	r6, r0
   821e2:	6818      	ldr	r0, [r3, #0]
   821e4:	460c      	mov	r4, r1
   821e6:	b110      	cbz	r0, 821ee <__swsetup_r+0x12>
   821e8:	6b82      	ldr	r2, [r0, #56]	; 0x38
   821ea:	2a00      	cmp	r2, #0
   821ec:	d036      	beq.n	8225c <__swsetup_r+0x80>
   821ee:	89a5      	ldrh	r5, [r4, #12]
   821f0:	b2ab      	uxth	r3, r5
   821f2:	0719      	lsls	r1, r3, #28
   821f4:	d50c      	bpl.n	82210 <__swsetup_r+0x34>
   821f6:	6922      	ldr	r2, [r4, #16]
   821f8:	b1aa      	cbz	r2, 82226 <__swsetup_r+0x4a>
   821fa:	f013 0101 	ands.w	r1, r3, #1
   821fe:	d01e      	beq.n	8223e <__swsetup_r+0x62>
   82200:	6963      	ldr	r3, [r4, #20]
   82202:	2100      	movs	r1, #0
   82204:	425b      	negs	r3, r3
   82206:	61a3      	str	r3, [r4, #24]
   82208:	60a1      	str	r1, [r4, #8]
   8220a:	b1f2      	cbz	r2, 8224a <__swsetup_r+0x6e>
   8220c:	2000      	movs	r0, #0
   8220e:	bd70      	pop	{r4, r5, r6, pc}
   82210:	06da      	lsls	r2, r3, #27
   82212:	d53a      	bpl.n	8228a <__swsetup_r+0xae>
   82214:	075b      	lsls	r3, r3, #29
   82216:	d424      	bmi.n	82262 <__swsetup_r+0x86>
   82218:	6922      	ldr	r2, [r4, #16]
   8221a:	f045 0308 	orr.w	r3, r5, #8
   8221e:	81a3      	strh	r3, [r4, #12]
   82220:	b29b      	uxth	r3, r3
   82222:	2a00      	cmp	r2, #0
   82224:	d1e9      	bne.n	821fa <__swsetup_r+0x1e>
   82226:	f403 7120 	and.w	r1, r3, #640	; 0x280
   8222a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   8222e:	d0e4      	beq.n	821fa <__swsetup_r+0x1e>
   82230:	4630      	mov	r0, r6
   82232:	4621      	mov	r1, r4
   82234:	f000 fcce 	bl	82bd4 <__smakebuf_r>
   82238:	89a3      	ldrh	r3, [r4, #12]
   8223a:	6922      	ldr	r2, [r4, #16]
   8223c:	e7dd      	b.n	821fa <__swsetup_r+0x1e>
   8223e:	0798      	lsls	r0, r3, #30
   82240:	bf58      	it	pl
   82242:	6961      	ldrpl	r1, [r4, #20]
   82244:	60a1      	str	r1, [r4, #8]
   82246:	2a00      	cmp	r2, #0
   82248:	d1e0      	bne.n	8220c <__swsetup_r+0x30>
   8224a:	89a3      	ldrh	r3, [r4, #12]
   8224c:	061a      	lsls	r2, r3, #24
   8224e:	d5dd      	bpl.n	8220c <__swsetup_r+0x30>
   82250:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82254:	81a3      	strh	r3, [r4, #12]
   82256:	f04f 30ff 	mov.w	r0, #4294967295
   8225a:	bd70      	pop	{r4, r5, r6, pc}
   8225c:	f000 f8f0 	bl	82440 <__sinit>
   82260:	e7c5      	b.n	821ee <__swsetup_r+0x12>
   82262:	6b21      	ldr	r1, [r4, #48]	; 0x30
   82264:	b149      	cbz	r1, 8227a <__swsetup_r+0x9e>
   82266:	f104 0340 	add.w	r3, r4, #64	; 0x40
   8226a:	4299      	cmp	r1, r3
   8226c:	d003      	beq.n	82276 <__swsetup_r+0x9a>
   8226e:	4630      	mov	r0, r6
   82270:	f000 fa2a 	bl	826c8 <_free_r>
   82274:	89a5      	ldrh	r5, [r4, #12]
   82276:	2300      	movs	r3, #0
   82278:	6323      	str	r3, [r4, #48]	; 0x30
   8227a:	6922      	ldr	r2, [r4, #16]
   8227c:	f025 0524 	bic.w	r5, r5, #36	; 0x24
   82280:	2100      	movs	r1, #0
   82282:	b2ad      	uxth	r5, r5
   82284:	6022      	str	r2, [r4, #0]
   82286:	6061      	str	r1, [r4, #4]
   82288:	e7c7      	b.n	8221a <__swsetup_r+0x3e>
   8228a:	f045 0540 	orr.w	r5, r5, #64	; 0x40
   8228e:	2309      	movs	r3, #9
   82290:	6033      	str	r3, [r6, #0]
   82292:	f04f 30ff 	mov.w	r0, #4294967295
   82296:	81a5      	strh	r5, [r4, #12]
   82298:	bd70      	pop	{r4, r5, r6, pc}
   8229a:	bf00      	nop
   8229c:	20070568 	.word	0x20070568

000822a0 <register_fini>:
   822a0:	4b02      	ldr	r3, [pc, #8]	; (822ac <register_fini+0xc>)
   822a2:	b113      	cbz	r3, 822aa <register_fini+0xa>
   822a4:	4802      	ldr	r0, [pc, #8]	; (822b0 <register_fini+0x10>)
   822a6:	f000 b805 	b.w	822b4 <atexit>
   822aa:	4770      	bx	lr
   822ac:	00000000 	.word	0x00000000
   822b0:	0008253d 	.word	0x0008253d

000822b4 <atexit>:
   822b4:	4601      	mov	r1, r0
   822b6:	2000      	movs	r0, #0
   822b8:	4602      	mov	r2, r0
   822ba:	4603      	mov	r3, r0
   822bc:	f001 bb9a 	b.w	839f4 <__register_exitproc>

000822c0 <__sflush_r>:
   822c0:	898b      	ldrh	r3, [r1, #12]
   822c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   822c6:	b29a      	uxth	r2, r3
   822c8:	460d      	mov	r5, r1
   822ca:	0711      	lsls	r1, r2, #28
   822cc:	4680      	mov	r8, r0
   822ce:	d43c      	bmi.n	8234a <__sflush_r+0x8a>
   822d0:	686a      	ldr	r2, [r5, #4]
   822d2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   822d6:	2a00      	cmp	r2, #0
   822d8:	81ab      	strh	r3, [r5, #12]
   822da:	dd59      	ble.n	82390 <__sflush_r+0xd0>
   822dc:	6aac      	ldr	r4, [r5, #40]	; 0x28
   822de:	2c00      	cmp	r4, #0
   822e0:	d04b      	beq.n	8237a <__sflush_r+0xba>
   822e2:	b29b      	uxth	r3, r3
   822e4:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   822e8:	2100      	movs	r1, #0
   822ea:	b292      	uxth	r2, r2
   822ec:	f8d8 6000 	ldr.w	r6, [r8]
   822f0:	f8c8 1000 	str.w	r1, [r8]
   822f4:	2a00      	cmp	r2, #0
   822f6:	d04f      	beq.n	82398 <__sflush_r+0xd8>
   822f8:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   822fa:	075f      	lsls	r7, r3, #29
   822fc:	d505      	bpl.n	8230a <__sflush_r+0x4a>
   822fe:	6869      	ldr	r1, [r5, #4]
   82300:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   82302:	1a52      	subs	r2, r2, r1
   82304:	b10b      	cbz	r3, 8230a <__sflush_r+0x4a>
   82306:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   82308:	1ad2      	subs	r2, r2, r3
   8230a:	4640      	mov	r0, r8
   8230c:	69e9      	ldr	r1, [r5, #28]
   8230e:	2300      	movs	r3, #0
   82310:	47a0      	blx	r4
   82312:	1c44      	adds	r4, r0, #1
   82314:	d04a      	beq.n	823ac <__sflush_r+0xec>
   82316:	89ab      	ldrh	r3, [r5, #12]
   82318:	692a      	ldr	r2, [r5, #16]
   8231a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   8231e:	b29b      	uxth	r3, r3
   82320:	2100      	movs	r1, #0
   82322:	602a      	str	r2, [r5, #0]
   82324:	04da      	lsls	r2, r3, #19
   82326:	81ab      	strh	r3, [r5, #12]
   82328:	6069      	str	r1, [r5, #4]
   8232a:	d44c      	bmi.n	823c6 <__sflush_r+0x106>
   8232c:	6b29      	ldr	r1, [r5, #48]	; 0x30
   8232e:	f8c8 6000 	str.w	r6, [r8]
   82332:	b311      	cbz	r1, 8237a <__sflush_r+0xba>
   82334:	f105 0340 	add.w	r3, r5, #64	; 0x40
   82338:	4299      	cmp	r1, r3
   8233a:	d002      	beq.n	82342 <__sflush_r+0x82>
   8233c:	4640      	mov	r0, r8
   8233e:	f000 f9c3 	bl	826c8 <_free_r>
   82342:	2000      	movs	r0, #0
   82344:	6328      	str	r0, [r5, #48]	; 0x30
   82346:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8234a:	692e      	ldr	r6, [r5, #16]
   8234c:	b1ae      	cbz	r6, 8237a <__sflush_r+0xba>
   8234e:	0791      	lsls	r1, r2, #30
   82350:	682c      	ldr	r4, [r5, #0]
   82352:	bf0c      	ite	eq
   82354:	696b      	ldreq	r3, [r5, #20]
   82356:	2300      	movne	r3, #0
   82358:	602e      	str	r6, [r5, #0]
   8235a:	1ba4      	subs	r4, r4, r6
   8235c:	60ab      	str	r3, [r5, #8]
   8235e:	e00a      	b.n	82376 <__sflush_r+0xb6>
   82360:	4632      	mov	r2, r6
   82362:	4623      	mov	r3, r4
   82364:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   82366:	4640      	mov	r0, r8
   82368:	69e9      	ldr	r1, [r5, #28]
   8236a:	47b8      	blx	r7
   8236c:	2800      	cmp	r0, #0
   8236e:	ebc0 0404 	rsb	r4, r0, r4
   82372:	4406      	add	r6, r0
   82374:	dd04      	ble.n	82380 <__sflush_r+0xc0>
   82376:	2c00      	cmp	r4, #0
   82378:	dcf2      	bgt.n	82360 <__sflush_r+0xa0>
   8237a:	2000      	movs	r0, #0
   8237c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82380:	89ab      	ldrh	r3, [r5, #12]
   82382:	f04f 30ff 	mov.w	r0, #4294967295
   82386:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8238a:	81ab      	strh	r3, [r5, #12]
   8238c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82390:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   82392:	2a00      	cmp	r2, #0
   82394:	dca2      	bgt.n	822dc <__sflush_r+0x1c>
   82396:	e7f0      	b.n	8237a <__sflush_r+0xba>
   82398:	2301      	movs	r3, #1
   8239a:	4640      	mov	r0, r8
   8239c:	69e9      	ldr	r1, [r5, #28]
   8239e:	47a0      	blx	r4
   823a0:	1c43      	adds	r3, r0, #1
   823a2:	4602      	mov	r2, r0
   823a4:	d01e      	beq.n	823e4 <__sflush_r+0x124>
   823a6:	89ab      	ldrh	r3, [r5, #12]
   823a8:	6aac      	ldr	r4, [r5, #40]	; 0x28
   823aa:	e7a6      	b.n	822fa <__sflush_r+0x3a>
   823ac:	f8d8 3000 	ldr.w	r3, [r8]
   823b0:	b95b      	cbnz	r3, 823ca <__sflush_r+0x10a>
   823b2:	89aa      	ldrh	r2, [r5, #12]
   823b4:	6929      	ldr	r1, [r5, #16]
   823b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   823ba:	b292      	uxth	r2, r2
   823bc:	606b      	str	r3, [r5, #4]
   823be:	04d3      	lsls	r3, r2, #19
   823c0:	81aa      	strh	r2, [r5, #12]
   823c2:	6029      	str	r1, [r5, #0]
   823c4:	d5b2      	bpl.n	8232c <__sflush_r+0x6c>
   823c6:	6528      	str	r0, [r5, #80]	; 0x50
   823c8:	e7b0      	b.n	8232c <__sflush_r+0x6c>
   823ca:	2b1d      	cmp	r3, #29
   823cc:	d001      	beq.n	823d2 <__sflush_r+0x112>
   823ce:	2b16      	cmp	r3, #22
   823d0:	d113      	bne.n	823fa <__sflush_r+0x13a>
   823d2:	89a9      	ldrh	r1, [r5, #12]
   823d4:	692b      	ldr	r3, [r5, #16]
   823d6:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
   823da:	2200      	movs	r2, #0
   823dc:	81a9      	strh	r1, [r5, #12]
   823de:	602b      	str	r3, [r5, #0]
   823e0:	606a      	str	r2, [r5, #4]
   823e2:	e7a3      	b.n	8232c <__sflush_r+0x6c>
   823e4:	f8d8 3000 	ldr.w	r3, [r8]
   823e8:	2b00      	cmp	r3, #0
   823ea:	d0dc      	beq.n	823a6 <__sflush_r+0xe6>
   823ec:	2b1d      	cmp	r3, #29
   823ee:	d001      	beq.n	823f4 <__sflush_r+0x134>
   823f0:	2b16      	cmp	r3, #22
   823f2:	d1c5      	bne.n	82380 <__sflush_r+0xc0>
   823f4:	f8c8 6000 	str.w	r6, [r8]
   823f8:	e7bf      	b.n	8237a <__sflush_r+0xba>
   823fa:	89ab      	ldrh	r3, [r5, #12]
   823fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82400:	81ab      	strh	r3, [r5, #12]
   82402:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82406:	bf00      	nop

00082408 <_fflush_r>:
   82408:	b510      	push	{r4, lr}
   8240a:	4604      	mov	r4, r0
   8240c:	b082      	sub	sp, #8
   8240e:	b108      	cbz	r0, 82414 <_fflush_r+0xc>
   82410:	6b83      	ldr	r3, [r0, #56]	; 0x38
   82412:	b153      	cbz	r3, 8242a <_fflush_r+0x22>
   82414:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   82418:	b908      	cbnz	r0, 8241e <_fflush_r+0x16>
   8241a:	b002      	add	sp, #8
   8241c:	bd10      	pop	{r4, pc}
   8241e:	4620      	mov	r0, r4
   82420:	b002      	add	sp, #8
   82422:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   82426:	f7ff bf4b 	b.w	822c0 <__sflush_r>
   8242a:	9101      	str	r1, [sp, #4]
   8242c:	f000 f808 	bl	82440 <__sinit>
   82430:	9901      	ldr	r1, [sp, #4]
   82432:	e7ef      	b.n	82414 <_fflush_r+0xc>

00082434 <_cleanup_r>:
   82434:	4901      	ldr	r1, [pc, #4]	; (8243c <_cleanup_r+0x8>)
   82436:	f000 bb9f 	b.w	82b78 <_fwalk>
   8243a:	bf00      	nop
   8243c:	00083b41 	.word	0x00083b41

00082440 <__sinit>:
   82440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82444:	6b84      	ldr	r4, [r0, #56]	; 0x38
   82446:	b083      	sub	sp, #12
   82448:	4607      	mov	r7, r0
   8244a:	2c00      	cmp	r4, #0
   8244c:	d165      	bne.n	8251a <__sinit+0xda>
   8244e:	687d      	ldr	r5, [r7, #4]
   82450:	4833      	ldr	r0, [pc, #204]	; (82520 <__sinit+0xe0>)
   82452:	2304      	movs	r3, #4
   82454:	2103      	movs	r1, #3
   82456:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   8245a:	63f8      	str	r0, [r7, #60]	; 0x3c
   8245c:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   82460:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   82464:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   82468:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   8246c:	81ab      	strh	r3, [r5, #12]
   8246e:	602c      	str	r4, [r5, #0]
   82470:	606c      	str	r4, [r5, #4]
   82472:	60ac      	str	r4, [r5, #8]
   82474:	666c      	str	r4, [r5, #100]	; 0x64
   82476:	81ec      	strh	r4, [r5, #14]
   82478:	612c      	str	r4, [r5, #16]
   8247a:	616c      	str	r4, [r5, #20]
   8247c:	61ac      	str	r4, [r5, #24]
   8247e:	4621      	mov	r1, r4
   82480:	2208      	movs	r2, #8
   82482:	f7fe fecd 	bl	81220 <memset>
   82486:	f8df b09c 	ldr.w	fp, [pc, #156]	; 82524 <__sinit+0xe4>
   8248a:	68be      	ldr	r6, [r7, #8]
   8248c:	f8df a098 	ldr.w	sl, [pc, #152]	; 82528 <__sinit+0xe8>
   82490:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8252c <__sinit+0xec>
   82494:	f8df 8098 	ldr.w	r8, [pc, #152]	; 82530 <__sinit+0xf0>
   82498:	2301      	movs	r3, #1
   8249a:	2209      	movs	r2, #9
   8249c:	61ed      	str	r5, [r5, #28]
   8249e:	f8c5 b020 	str.w	fp, [r5, #32]
   824a2:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   824a6:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   824aa:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   824ae:	4621      	mov	r1, r4
   824b0:	81f3      	strh	r3, [r6, #14]
   824b2:	81b2      	strh	r2, [r6, #12]
   824b4:	6034      	str	r4, [r6, #0]
   824b6:	6074      	str	r4, [r6, #4]
   824b8:	60b4      	str	r4, [r6, #8]
   824ba:	6674      	str	r4, [r6, #100]	; 0x64
   824bc:	6134      	str	r4, [r6, #16]
   824be:	6174      	str	r4, [r6, #20]
   824c0:	61b4      	str	r4, [r6, #24]
   824c2:	2208      	movs	r2, #8
   824c4:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   824c8:	9301      	str	r3, [sp, #4]
   824ca:	f7fe fea9 	bl	81220 <memset>
   824ce:	68fd      	ldr	r5, [r7, #12]
   824d0:	2012      	movs	r0, #18
   824d2:	2202      	movs	r2, #2
   824d4:	61f6      	str	r6, [r6, #28]
   824d6:	f8c6 b020 	str.w	fp, [r6, #32]
   824da:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   824de:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   824e2:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   824e6:	4621      	mov	r1, r4
   824e8:	81a8      	strh	r0, [r5, #12]
   824ea:	81ea      	strh	r2, [r5, #14]
   824ec:	602c      	str	r4, [r5, #0]
   824ee:	606c      	str	r4, [r5, #4]
   824f0:	60ac      	str	r4, [r5, #8]
   824f2:	666c      	str	r4, [r5, #100]	; 0x64
   824f4:	612c      	str	r4, [r5, #16]
   824f6:	616c      	str	r4, [r5, #20]
   824f8:	61ac      	str	r4, [r5, #24]
   824fa:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   824fe:	2208      	movs	r2, #8
   82500:	f7fe fe8e 	bl	81220 <memset>
   82504:	9b01      	ldr	r3, [sp, #4]
   82506:	61ed      	str	r5, [r5, #28]
   82508:	f8c5 b020 	str.w	fp, [r5, #32]
   8250c:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   82510:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   82514:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   82518:	63bb      	str	r3, [r7, #56]	; 0x38
   8251a:	b003      	add	sp, #12
   8251c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82520:	00082435 	.word	0x00082435
   82524:	00083835 	.word	0x00083835
   82528:	00083859 	.word	0x00083859
   8252c:	00083891 	.word	0x00083891
   82530:	000838b1 	.word	0x000838b1

00082534 <__sfp_lock_acquire>:
   82534:	4770      	bx	lr
   82536:	bf00      	nop

00082538 <__sfp_lock_release>:
   82538:	4770      	bx	lr
   8253a:	bf00      	nop

0008253c <__libc_fini_array>:
   8253c:	b538      	push	{r3, r4, r5, lr}
   8253e:	4d09      	ldr	r5, [pc, #36]	; (82564 <__libc_fini_array+0x28>)
   82540:	4c09      	ldr	r4, [pc, #36]	; (82568 <__libc_fini_array+0x2c>)
   82542:	1b64      	subs	r4, r4, r5
   82544:	10a4      	asrs	r4, r4, #2
   82546:	bf18      	it	ne
   82548:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
   8254c:	d005      	beq.n	8255a <__libc_fini_array+0x1e>
   8254e:	3c01      	subs	r4, #1
   82550:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   82554:	4798      	blx	r3
   82556:	2c00      	cmp	r4, #0
   82558:	d1f9      	bne.n	8254e <__libc_fini_array+0x12>
   8255a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8255e:	f002 b841 	b.w	845e4 <_fini>
   82562:	bf00      	nop
   82564:	000845f0 	.word	0x000845f0
   82568:	000845f4 	.word	0x000845f4

0008256c <_fputwc_r>:
   8256c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82570:	8993      	ldrh	r3, [r2, #12]
   82572:	460f      	mov	r7, r1
   82574:	0499      	lsls	r1, r3, #18
   82576:	b082      	sub	sp, #8
   82578:	4614      	mov	r4, r2
   8257a:	4680      	mov	r8, r0
   8257c:	d406      	bmi.n	8258c <_fputwc_r+0x20>
   8257e:	6e52      	ldr	r2, [r2, #100]	; 0x64
   82580:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   82584:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   82588:	81a3      	strh	r3, [r4, #12]
   8258a:	6662      	str	r2, [r4, #100]	; 0x64
   8258c:	f000 fb1c 	bl	82bc8 <__locale_mb_cur_max>
   82590:	2801      	cmp	r0, #1
   82592:	d03e      	beq.n	82612 <_fputwc_r+0xa6>
   82594:	463a      	mov	r2, r7
   82596:	4640      	mov	r0, r8
   82598:	a901      	add	r1, sp, #4
   8259a:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   8259e:	f001 f9df 	bl	83960 <_wcrtomb_r>
   825a2:	1c42      	adds	r2, r0, #1
   825a4:	4606      	mov	r6, r0
   825a6:	d02d      	beq.n	82604 <_fputwc_r+0x98>
   825a8:	2800      	cmp	r0, #0
   825aa:	d03a      	beq.n	82622 <_fputwc_r+0xb6>
   825ac:	f89d 1004 	ldrb.w	r1, [sp, #4]
   825b0:	2500      	movs	r5, #0
   825b2:	e009      	b.n	825c8 <_fputwc_r+0x5c>
   825b4:	6823      	ldr	r3, [r4, #0]
   825b6:	7019      	strb	r1, [r3, #0]
   825b8:	6823      	ldr	r3, [r4, #0]
   825ba:	3301      	adds	r3, #1
   825bc:	6023      	str	r3, [r4, #0]
   825be:	3501      	adds	r5, #1
   825c0:	42b5      	cmp	r5, r6
   825c2:	d22e      	bcs.n	82622 <_fputwc_r+0xb6>
   825c4:	ab01      	add	r3, sp, #4
   825c6:	5ce9      	ldrb	r1, [r5, r3]
   825c8:	68a3      	ldr	r3, [r4, #8]
   825ca:	3b01      	subs	r3, #1
   825cc:	2b00      	cmp	r3, #0
   825ce:	60a3      	str	r3, [r4, #8]
   825d0:	daf0      	bge.n	825b4 <_fputwc_r+0x48>
   825d2:	69a2      	ldr	r2, [r4, #24]
   825d4:	4293      	cmp	r3, r2
   825d6:	db06      	blt.n	825e6 <_fputwc_r+0x7a>
   825d8:	6823      	ldr	r3, [r4, #0]
   825da:	7019      	strb	r1, [r3, #0]
   825dc:	6823      	ldr	r3, [r4, #0]
   825de:	7819      	ldrb	r1, [r3, #0]
   825e0:	3301      	adds	r3, #1
   825e2:	290a      	cmp	r1, #10
   825e4:	d1ea      	bne.n	825bc <_fputwc_r+0x50>
   825e6:	4640      	mov	r0, r8
   825e8:	4622      	mov	r2, r4
   825ea:	f001 f965 	bl	838b8 <__swbuf_r>
   825ee:	f1b0 33ff 	subs.w	r3, r0, #4294967295
   825f2:	4258      	negs	r0, r3
   825f4:	4158      	adcs	r0, r3
   825f6:	2800      	cmp	r0, #0
   825f8:	d0e1      	beq.n	825be <_fputwc_r+0x52>
   825fa:	f04f 30ff 	mov.w	r0, #4294967295
   825fe:	b002      	add	sp, #8
   82600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82604:	89a3      	ldrh	r3, [r4, #12]
   82606:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8260a:	81a3      	strh	r3, [r4, #12]
   8260c:	b002      	add	sp, #8
   8260e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82612:	1e7b      	subs	r3, r7, #1
   82614:	2bfe      	cmp	r3, #254	; 0xfe
   82616:	d8bd      	bhi.n	82594 <_fputwc_r+0x28>
   82618:	b2f9      	uxtb	r1, r7
   8261a:	4606      	mov	r6, r0
   8261c:	f88d 1004 	strb.w	r1, [sp, #4]
   82620:	e7c6      	b.n	825b0 <_fputwc_r+0x44>
   82622:	4638      	mov	r0, r7
   82624:	b002      	add	sp, #8
   82626:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8262a:	bf00      	nop

0008262c <_malloc_trim_r>:
   8262c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8262e:	4d23      	ldr	r5, [pc, #140]	; (826bc <_malloc_trim_r+0x90>)
   82630:	460f      	mov	r7, r1
   82632:	4604      	mov	r4, r0
   82634:	f000 ff08 	bl	83448 <__malloc_lock>
   82638:	68ab      	ldr	r3, [r5, #8]
   8263a:	685e      	ldr	r6, [r3, #4]
   8263c:	f026 0603 	bic.w	r6, r6, #3
   82640:	1bf1      	subs	r1, r6, r7
   82642:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   82646:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   8264a:	f021 010f 	bic.w	r1, r1, #15
   8264e:	f5a1 5780 	sub.w	r7, r1, #4096	; 0x1000
   82652:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
   82656:	db07      	blt.n	82668 <_malloc_trim_r+0x3c>
   82658:	4620      	mov	r0, r4
   8265a:	2100      	movs	r1, #0
   8265c:	f001 f8d8 	bl	83810 <_sbrk_r>
   82660:	68ab      	ldr	r3, [r5, #8]
   82662:	4433      	add	r3, r6
   82664:	4298      	cmp	r0, r3
   82666:	d004      	beq.n	82672 <_malloc_trim_r+0x46>
   82668:	4620      	mov	r0, r4
   8266a:	f000 feef 	bl	8344c <__malloc_unlock>
   8266e:	2000      	movs	r0, #0
   82670:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82672:	4620      	mov	r0, r4
   82674:	4279      	negs	r1, r7
   82676:	f001 f8cb 	bl	83810 <_sbrk_r>
   8267a:	3001      	adds	r0, #1
   8267c:	d00d      	beq.n	8269a <_malloc_trim_r+0x6e>
   8267e:	4b10      	ldr	r3, [pc, #64]	; (826c0 <_malloc_trim_r+0x94>)
   82680:	68aa      	ldr	r2, [r5, #8]
   82682:	6819      	ldr	r1, [r3, #0]
   82684:	1bf6      	subs	r6, r6, r7
   82686:	f046 0601 	orr.w	r6, r6, #1
   8268a:	4620      	mov	r0, r4
   8268c:	1bc9      	subs	r1, r1, r7
   8268e:	6056      	str	r6, [r2, #4]
   82690:	6019      	str	r1, [r3, #0]
   82692:	f000 fedb 	bl	8344c <__malloc_unlock>
   82696:	2001      	movs	r0, #1
   82698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8269a:	4620      	mov	r0, r4
   8269c:	2100      	movs	r1, #0
   8269e:	f001 f8b7 	bl	83810 <_sbrk_r>
   826a2:	68ab      	ldr	r3, [r5, #8]
   826a4:	1ac2      	subs	r2, r0, r3
   826a6:	2a0f      	cmp	r2, #15
   826a8:	ddde      	ble.n	82668 <_malloc_trim_r+0x3c>
   826aa:	4d06      	ldr	r5, [pc, #24]	; (826c4 <_malloc_trim_r+0x98>)
   826ac:	4904      	ldr	r1, [pc, #16]	; (826c0 <_malloc_trim_r+0x94>)
   826ae:	682d      	ldr	r5, [r5, #0]
   826b0:	f042 0201 	orr.w	r2, r2, #1
   826b4:	1b40      	subs	r0, r0, r5
   826b6:	605a      	str	r2, [r3, #4]
   826b8:	6008      	str	r0, [r1, #0]
   826ba:	e7d5      	b.n	82668 <_malloc_trim_r+0x3c>
   826bc:	20070590 	.word	0x20070590
   826c0:	20070ae4 	.word	0x20070ae4
   826c4:	2007099c 	.word	0x2007099c

000826c8 <_free_r>:
   826c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   826cc:	460d      	mov	r5, r1
   826ce:	4606      	mov	r6, r0
   826d0:	2900      	cmp	r1, #0
   826d2:	d055      	beq.n	82780 <_free_r+0xb8>
   826d4:	f000 feb8 	bl	83448 <__malloc_lock>
   826d8:	f855 1c04 	ldr.w	r1, [r5, #-4]
   826dc:	f8df c170 	ldr.w	ip, [pc, #368]	; 82850 <_free_r+0x188>
   826e0:	f1a5 0408 	sub.w	r4, r5, #8
   826e4:	f021 0301 	bic.w	r3, r1, #1
   826e8:	18e2      	adds	r2, r4, r3
   826ea:	f8dc 0008 	ldr.w	r0, [ip, #8]
   826ee:	6857      	ldr	r7, [r2, #4]
   826f0:	4290      	cmp	r0, r2
   826f2:	f027 0703 	bic.w	r7, r7, #3
   826f6:	d068      	beq.n	827ca <_free_r+0x102>
   826f8:	f011 0101 	ands.w	r1, r1, #1
   826fc:	6057      	str	r7, [r2, #4]
   826fe:	d032      	beq.n	82766 <_free_r+0x9e>
   82700:	2100      	movs	r1, #0
   82702:	19d0      	adds	r0, r2, r7
   82704:	6840      	ldr	r0, [r0, #4]
   82706:	07c0      	lsls	r0, r0, #31
   82708:	d406      	bmi.n	82718 <_free_r+0x50>
   8270a:	443b      	add	r3, r7
   8270c:	6890      	ldr	r0, [r2, #8]
   8270e:	2900      	cmp	r1, #0
   82710:	d04d      	beq.n	827ae <_free_r+0xe6>
   82712:	68d2      	ldr	r2, [r2, #12]
   82714:	60c2      	str	r2, [r0, #12]
   82716:	6090      	str	r0, [r2, #8]
   82718:	f043 0201 	orr.w	r2, r3, #1
   8271c:	6062      	str	r2, [r4, #4]
   8271e:	50e3      	str	r3, [r4, r3]
   82720:	b9e1      	cbnz	r1, 8275c <_free_r+0x94>
   82722:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   82726:	d32d      	bcc.n	82784 <_free_r+0xbc>
   82728:	0a5a      	lsrs	r2, r3, #9
   8272a:	2a04      	cmp	r2, #4
   8272c:	d869      	bhi.n	82802 <_free_r+0x13a>
   8272e:	0998      	lsrs	r0, r3, #6
   82730:	3038      	adds	r0, #56	; 0x38
   82732:	0041      	lsls	r1, r0, #1
   82734:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
   82738:	f8dc 2008 	ldr.w	r2, [ip, #8]
   8273c:	4944      	ldr	r1, [pc, #272]	; (82850 <_free_r+0x188>)
   8273e:	4562      	cmp	r2, ip
   82740:	d065      	beq.n	8280e <_free_r+0x146>
   82742:	6851      	ldr	r1, [r2, #4]
   82744:	f021 0103 	bic.w	r1, r1, #3
   82748:	428b      	cmp	r3, r1
   8274a:	d202      	bcs.n	82752 <_free_r+0x8a>
   8274c:	6892      	ldr	r2, [r2, #8]
   8274e:	4594      	cmp	ip, r2
   82750:	d1f7      	bne.n	82742 <_free_r+0x7a>
   82752:	68d3      	ldr	r3, [r2, #12]
   82754:	60e3      	str	r3, [r4, #12]
   82756:	60a2      	str	r2, [r4, #8]
   82758:	609c      	str	r4, [r3, #8]
   8275a:	60d4      	str	r4, [r2, #12]
   8275c:	4630      	mov	r0, r6
   8275e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   82762:	f000 be73 	b.w	8344c <__malloc_unlock>
   82766:	f855 5c08 	ldr.w	r5, [r5, #-8]
   8276a:	f10c 0808 	add.w	r8, ip, #8
   8276e:	1b64      	subs	r4, r4, r5
   82770:	68a0      	ldr	r0, [r4, #8]
   82772:	442b      	add	r3, r5
   82774:	4540      	cmp	r0, r8
   82776:	d042      	beq.n	827fe <_free_r+0x136>
   82778:	68e5      	ldr	r5, [r4, #12]
   8277a:	60c5      	str	r5, [r0, #12]
   8277c:	60a8      	str	r0, [r5, #8]
   8277e:	e7c0      	b.n	82702 <_free_r+0x3a>
   82780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82784:	08db      	lsrs	r3, r3, #3
   82786:	109a      	asrs	r2, r3, #2
   82788:	2001      	movs	r0, #1
   8278a:	4090      	lsls	r0, r2
   8278c:	f8dc 1004 	ldr.w	r1, [ip, #4]
   82790:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
   82794:	689a      	ldr	r2, [r3, #8]
   82796:	4301      	orrs	r1, r0
   82798:	60a2      	str	r2, [r4, #8]
   8279a:	60e3      	str	r3, [r4, #12]
   8279c:	f8cc 1004 	str.w	r1, [ip, #4]
   827a0:	4630      	mov	r0, r6
   827a2:	609c      	str	r4, [r3, #8]
   827a4:	60d4      	str	r4, [r2, #12]
   827a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   827aa:	f000 be4f 	b.w	8344c <__malloc_unlock>
   827ae:	4d29      	ldr	r5, [pc, #164]	; (82854 <_free_r+0x18c>)
   827b0:	42a8      	cmp	r0, r5
   827b2:	d1ae      	bne.n	82712 <_free_r+0x4a>
   827b4:	f043 0201 	orr.w	r2, r3, #1
   827b8:	f8cc 4014 	str.w	r4, [ip, #20]
   827bc:	f8cc 4010 	str.w	r4, [ip, #16]
   827c0:	60e0      	str	r0, [r4, #12]
   827c2:	60a0      	str	r0, [r4, #8]
   827c4:	6062      	str	r2, [r4, #4]
   827c6:	50e3      	str	r3, [r4, r3]
   827c8:	e7c8      	b.n	8275c <_free_r+0x94>
   827ca:	441f      	add	r7, r3
   827cc:	07cb      	lsls	r3, r1, #31
   827ce:	d407      	bmi.n	827e0 <_free_r+0x118>
   827d0:	f855 1c08 	ldr.w	r1, [r5, #-8]
   827d4:	1a64      	subs	r4, r4, r1
   827d6:	68e3      	ldr	r3, [r4, #12]
   827d8:	68a2      	ldr	r2, [r4, #8]
   827da:	440f      	add	r7, r1
   827dc:	60d3      	str	r3, [r2, #12]
   827de:	609a      	str	r2, [r3, #8]
   827e0:	4b1d      	ldr	r3, [pc, #116]	; (82858 <_free_r+0x190>)
   827e2:	f047 0201 	orr.w	r2, r7, #1
   827e6:	681b      	ldr	r3, [r3, #0]
   827e8:	6062      	str	r2, [r4, #4]
   827ea:	429f      	cmp	r7, r3
   827ec:	f8cc 4008 	str.w	r4, [ip, #8]
   827f0:	d3b4      	bcc.n	8275c <_free_r+0x94>
   827f2:	4b1a      	ldr	r3, [pc, #104]	; (8285c <_free_r+0x194>)
   827f4:	4630      	mov	r0, r6
   827f6:	6819      	ldr	r1, [r3, #0]
   827f8:	f7ff ff18 	bl	8262c <_malloc_trim_r>
   827fc:	e7ae      	b.n	8275c <_free_r+0x94>
   827fe:	2101      	movs	r1, #1
   82800:	e77f      	b.n	82702 <_free_r+0x3a>
   82802:	2a14      	cmp	r2, #20
   82804:	d80b      	bhi.n	8281e <_free_r+0x156>
   82806:	f102 005b 	add.w	r0, r2, #91	; 0x5b
   8280a:	0041      	lsls	r1, r0, #1
   8280c:	e792      	b.n	82734 <_free_r+0x6c>
   8280e:	1080      	asrs	r0, r0, #2
   82810:	2501      	movs	r5, #1
   82812:	4085      	lsls	r5, r0
   82814:	6848      	ldr	r0, [r1, #4]
   82816:	4613      	mov	r3, r2
   82818:	4328      	orrs	r0, r5
   8281a:	6048      	str	r0, [r1, #4]
   8281c:	e79a      	b.n	82754 <_free_r+0x8c>
   8281e:	2a54      	cmp	r2, #84	; 0x54
   82820:	d803      	bhi.n	8282a <_free_r+0x162>
   82822:	0b18      	lsrs	r0, r3, #12
   82824:	306e      	adds	r0, #110	; 0x6e
   82826:	0041      	lsls	r1, r0, #1
   82828:	e784      	b.n	82734 <_free_r+0x6c>
   8282a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   8282e:	d803      	bhi.n	82838 <_free_r+0x170>
   82830:	0bd8      	lsrs	r0, r3, #15
   82832:	3077      	adds	r0, #119	; 0x77
   82834:	0041      	lsls	r1, r0, #1
   82836:	e77d      	b.n	82734 <_free_r+0x6c>
   82838:	f240 5154 	movw	r1, #1364	; 0x554
   8283c:	428a      	cmp	r2, r1
   8283e:	d803      	bhi.n	82848 <_free_r+0x180>
   82840:	0c98      	lsrs	r0, r3, #18
   82842:	307c      	adds	r0, #124	; 0x7c
   82844:	0041      	lsls	r1, r0, #1
   82846:	e775      	b.n	82734 <_free_r+0x6c>
   82848:	21fc      	movs	r1, #252	; 0xfc
   8284a:	207e      	movs	r0, #126	; 0x7e
   8284c:	e772      	b.n	82734 <_free_r+0x6c>
   8284e:	bf00      	nop
   82850:	20070590 	.word	0x20070590
   82854:	20070598 	.word	0x20070598
   82858:	20070998 	.word	0x20070998
   8285c:	20070ae0 	.word	0x20070ae0

00082860 <__sfvwrite_r>:
   82860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82864:	6893      	ldr	r3, [r2, #8]
   82866:	b083      	sub	sp, #12
   82868:	4616      	mov	r6, r2
   8286a:	4681      	mov	r9, r0
   8286c:	460c      	mov	r4, r1
   8286e:	b32b      	cbz	r3, 828bc <__sfvwrite_r+0x5c>
   82870:	898b      	ldrh	r3, [r1, #12]
   82872:	0719      	lsls	r1, r3, #28
   82874:	d526      	bpl.n	828c4 <__sfvwrite_r+0x64>
   82876:	6922      	ldr	r2, [r4, #16]
   82878:	b322      	cbz	r2, 828c4 <__sfvwrite_r+0x64>
   8287a:	f003 0202 	and.w	r2, r3, #2
   8287e:	b292      	uxth	r2, r2
   82880:	6835      	ldr	r5, [r6, #0]
   82882:	2a00      	cmp	r2, #0
   82884:	d02c      	beq.n	828e0 <__sfvwrite_r+0x80>
   82886:	f04f 0a00 	mov.w	sl, #0
   8288a:	f8df b2e8 	ldr.w	fp, [pc, #744]	; 82b74 <__sfvwrite_r+0x314>
   8288e:	46d0      	mov	r8, sl
   82890:	45d8      	cmp	r8, fp
   82892:	bf34      	ite	cc
   82894:	4643      	movcc	r3, r8
   82896:	465b      	movcs	r3, fp
   82898:	4652      	mov	r2, sl
   8289a:	4648      	mov	r0, r9
   8289c:	f1b8 0f00 	cmp.w	r8, #0
   828a0:	d04f      	beq.n	82942 <__sfvwrite_r+0xe2>
   828a2:	69e1      	ldr	r1, [r4, #28]
   828a4:	6a67      	ldr	r7, [r4, #36]	; 0x24
   828a6:	47b8      	blx	r7
   828a8:	2800      	cmp	r0, #0
   828aa:	dd56      	ble.n	8295a <__sfvwrite_r+0xfa>
   828ac:	68b3      	ldr	r3, [r6, #8]
   828ae:	4482      	add	sl, r0
   828b0:	1a1b      	subs	r3, r3, r0
   828b2:	ebc0 0808 	rsb	r8, r0, r8
   828b6:	60b3      	str	r3, [r6, #8]
   828b8:	2b00      	cmp	r3, #0
   828ba:	d1e9      	bne.n	82890 <__sfvwrite_r+0x30>
   828bc:	2000      	movs	r0, #0
   828be:	b003      	add	sp, #12
   828c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   828c4:	4648      	mov	r0, r9
   828c6:	4621      	mov	r1, r4
   828c8:	f7ff fc88 	bl	821dc <__swsetup_r>
   828cc:	2800      	cmp	r0, #0
   828ce:	f040 8148 	bne.w	82b62 <__sfvwrite_r+0x302>
   828d2:	89a3      	ldrh	r3, [r4, #12]
   828d4:	6835      	ldr	r5, [r6, #0]
   828d6:	f003 0202 	and.w	r2, r3, #2
   828da:	b292      	uxth	r2, r2
   828dc:	2a00      	cmp	r2, #0
   828de:	d1d2      	bne.n	82886 <__sfvwrite_r+0x26>
   828e0:	f013 0a01 	ands.w	sl, r3, #1
   828e4:	d142      	bne.n	8296c <__sfvwrite_r+0x10c>
   828e6:	46d0      	mov	r8, sl
   828e8:	f1b8 0f00 	cmp.w	r8, #0
   828ec:	d023      	beq.n	82936 <__sfvwrite_r+0xd6>
   828ee:	059a      	lsls	r2, r3, #22
   828f0:	68a7      	ldr	r7, [r4, #8]
   828f2:	d576      	bpl.n	829e2 <__sfvwrite_r+0x182>
   828f4:	45b8      	cmp	r8, r7
   828f6:	f0c0 80a4 	bcc.w	82a42 <__sfvwrite_r+0x1e2>
   828fa:	f413 6f90 	tst.w	r3, #1152	; 0x480
   828fe:	f040 80b2 	bne.w	82a66 <__sfvwrite_r+0x206>
   82902:	6820      	ldr	r0, [r4, #0]
   82904:	46bb      	mov	fp, r7
   82906:	4651      	mov	r1, sl
   82908:	465a      	mov	r2, fp
   8290a:	f000 fd37 	bl	8337c <memmove>
   8290e:	68a2      	ldr	r2, [r4, #8]
   82910:	6821      	ldr	r1, [r4, #0]
   82912:	1bd2      	subs	r2, r2, r7
   82914:	eb01 030b 	add.w	r3, r1, fp
   82918:	60a2      	str	r2, [r4, #8]
   8291a:	6023      	str	r3, [r4, #0]
   8291c:	4642      	mov	r2, r8
   8291e:	68b3      	ldr	r3, [r6, #8]
   82920:	4492      	add	sl, r2
   82922:	1a9b      	subs	r3, r3, r2
   82924:	ebc2 0808 	rsb	r8, r2, r8
   82928:	60b3      	str	r3, [r6, #8]
   8292a:	2b00      	cmp	r3, #0
   8292c:	d0c6      	beq.n	828bc <__sfvwrite_r+0x5c>
   8292e:	89a3      	ldrh	r3, [r4, #12]
   82930:	f1b8 0f00 	cmp.w	r8, #0
   82934:	d1db      	bne.n	828ee <__sfvwrite_r+0x8e>
   82936:	f8d5 a000 	ldr.w	sl, [r5]
   8293a:	f8d5 8004 	ldr.w	r8, [r5, #4]
   8293e:	3508      	adds	r5, #8
   82940:	e7d2      	b.n	828e8 <__sfvwrite_r+0x88>
   82942:	f8d5 a000 	ldr.w	sl, [r5]
   82946:	f8d5 8004 	ldr.w	r8, [r5, #4]
   8294a:	3508      	adds	r5, #8
   8294c:	e7a0      	b.n	82890 <__sfvwrite_r+0x30>
   8294e:	4648      	mov	r0, r9
   82950:	4621      	mov	r1, r4
   82952:	f7ff fd59 	bl	82408 <_fflush_r>
   82956:	2800      	cmp	r0, #0
   82958:	d059      	beq.n	82a0e <__sfvwrite_r+0x1ae>
   8295a:	89a3      	ldrh	r3, [r4, #12]
   8295c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82960:	f04f 30ff 	mov.w	r0, #4294967295
   82964:	81a3      	strh	r3, [r4, #12]
   82966:	b003      	add	sp, #12
   82968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8296c:	4692      	mov	sl, r2
   8296e:	9201      	str	r2, [sp, #4]
   82970:	4693      	mov	fp, r2
   82972:	4690      	mov	r8, r2
   82974:	f1b8 0f00 	cmp.w	r8, #0
   82978:	d02b      	beq.n	829d2 <__sfvwrite_r+0x172>
   8297a:	9f01      	ldr	r7, [sp, #4]
   8297c:	2f00      	cmp	r7, #0
   8297e:	d064      	beq.n	82a4a <__sfvwrite_r+0x1ea>
   82980:	6820      	ldr	r0, [r4, #0]
   82982:	6921      	ldr	r1, [r4, #16]
   82984:	45c2      	cmp	sl, r8
   82986:	bf34      	ite	cc
   82988:	4653      	movcc	r3, sl
   8298a:	4643      	movcs	r3, r8
   8298c:	4288      	cmp	r0, r1
   8298e:	461f      	mov	r7, r3
   82990:	f8d4 c008 	ldr.w	ip, [r4, #8]
   82994:	6962      	ldr	r2, [r4, #20]
   82996:	d903      	bls.n	829a0 <__sfvwrite_r+0x140>
   82998:	4494      	add	ip, r2
   8299a:	4563      	cmp	r3, ip
   8299c:	f300 80ae 	bgt.w	82afc <__sfvwrite_r+0x29c>
   829a0:	4293      	cmp	r3, r2
   829a2:	db36      	blt.n	82a12 <__sfvwrite_r+0x1b2>
   829a4:	4613      	mov	r3, r2
   829a6:	6a67      	ldr	r7, [r4, #36]	; 0x24
   829a8:	4648      	mov	r0, r9
   829aa:	69e1      	ldr	r1, [r4, #28]
   829ac:	465a      	mov	r2, fp
   829ae:	47b8      	blx	r7
   829b0:	1e07      	subs	r7, r0, #0
   829b2:	ddd2      	ble.n	8295a <__sfvwrite_r+0xfa>
   829b4:	ebba 0a07 	subs.w	sl, sl, r7
   829b8:	d03a      	beq.n	82a30 <__sfvwrite_r+0x1d0>
   829ba:	68b3      	ldr	r3, [r6, #8]
   829bc:	44bb      	add	fp, r7
   829be:	1bdb      	subs	r3, r3, r7
   829c0:	ebc7 0808 	rsb	r8, r7, r8
   829c4:	60b3      	str	r3, [r6, #8]
   829c6:	2b00      	cmp	r3, #0
   829c8:	f43f af78 	beq.w	828bc <__sfvwrite_r+0x5c>
   829cc:	f1b8 0f00 	cmp.w	r8, #0
   829d0:	d1d3      	bne.n	8297a <__sfvwrite_r+0x11a>
   829d2:	2700      	movs	r7, #0
   829d4:	f8d5 b000 	ldr.w	fp, [r5]
   829d8:	f8d5 8004 	ldr.w	r8, [r5, #4]
   829dc:	9701      	str	r7, [sp, #4]
   829de:	3508      	adds	r5, #8
   829e0:	e7c8      	b.n	82974 <__sfvwrite_r+0x114>
   829e2:	6820      	ldr	r0, [r4, #0]
   829e4:	6923      	ldr	r3, [r4, #16]
   829e6:	4298      	cmp	r0, r3
   829e8:	d802      	bhi.n	829f0 <__sfvwrite_r+0x190>
   829ea:	6963      	ldr	r3, [r4, #20]
   829ec:	4598      	cmp	r8, r3
   829ee:	d272      	bcs.n	82ad6 <__sfvwrite_r+0x276>
   829f0:	45b8      	cmp	r8, r7
   829f2:	bf38      	it	cc
   829f4:	4647      	movcc	r7, r8
   829f6:	463a      	mov	r2, r7
   829f8:	4651      	mov	r1, sl
   829fa:	f000 fcbf 	bl	8337c <memmove>
   829fe:	68a3      	ldr	r3, [r4, #8]
   82a00:	6822      	ldr	r2, [r4, #0]
   82a02:	1bdb      	subs	r3, r3, r7
   82a04:	443a      	add	r2, r7
   82a06:	60a3      	str	r3, [r4, #8]
   82a08:	6022      	str	r2, [r4, #0]
   82a0a:	2b00      	cmp	r3, #0
   82a0c:	d09f      	beq.n	8294e <__sfvwrite_r+0xee>
   82a0e:	463a      	mov	r2, r7
   82a10:	e785      	b.n	8291e <__sfvwrite_r+0xbe>
   82a12:	461a      	mov	r2, r3
   82a14:	4659      	mov	r1, fp
   82a16:	9300      	str	r3, [sp, #0]
   82a18:	f000 fcb0 	bl	8337c <memmove>
   82a1c:	9b00      	ldr	r3, [sp, #0]
   82a1e:	68a1      	ldr	r1, [r4, #8]
   82a20:	6822      	ldr	r2, [r4, #0]
   82a22:	1ac9      	subs	r1, r1, r3
   82a24:	ebba 0a07 	subs.w	sl, sl, r7
   82a28:	4413      	add	r3, r2
   82a2a:	60a1      	str	r1, [r4, #8]
   82a2c:	6023      	str	r3, [r4, #0]
   82a2e:	d1c4      	bne.n	829ba <__sfvwrite_r+0x15a>
   82a30:	4648      	mov	r0, r9
   82a32:	4621      	mov	r1, r4
   82a34:	f7ff fce8 	bl	82408 <_fflush_r>
   82a38:	2800      	cmp	r0, #0
   82a3a:	d18e      	bne.n	8295a <__sfvwrite_r+0xfa>
   82a3c:	f8cd a004 	str.w	sl, [sp, #4]
   82a40:	e7bb      	b.n	829ba <__sfvwrite_r+0x15a>
   82a42:	6820      	ldr	r0, [r4, #0]
   82a44:	4647      	mov	r7, r8
   82a46:	46c3      	mov	fp, r8
   82a48:	e75d      	b.n	82906 <__sfvwrite_r+0xa6>
   82a4a:	4658      	mov	r0, fp
   82a4c:	210a      	movs	r1, #10
   82a4e:	4642      	mov	r2, r8
   82a50:	f000 fbd4 	bl	831fc <memchr>
   82a54:	2800      	cmp	r0, #0
   82a56:	d07f      	beq.n	82b58 <__sfvwrite_r+0x2f8>
   82a58:	f100 0a01 	add.w	sl, r0, #1
   82a5c:	2701      	movs	r7, #1
   82a5e:	ebcb 0a0a 	rsb	sl, fp, sl
   82a62:	9701      	str	r7, [sp, #4]
   82a64:	e78c      	b.n	82980 <__sfvwrite_r+0x120>
   82a66:	6822      	ldr	r2, [r4, #0]
   82a68:	6921      	ldr	r1, [r4, #16]
   82a6a:	6967      	ldr	r7, [r4, #20]
   82a6c:	ebc1 0c02 	rsb	ip, r1, r2
   82a70:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   82a74:	f10c 0201 	add.w	r2, ip, #1
   82a78:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   82a7c:	4442      	add	r2, r8
   82a7e:	107f      	asrs	r7, r7, #1
   82a80:	4297      	cmp	r7, r2
   82a82:	bf34      	ite	cc
   82a84:	4617      	movcc	r7, r2
   82a86:	463a      	movcs	r2, r7
   82a88:	055b      	lsls	r3, r3, #21
   82a8a:	d54f      	bpl.n	82b2c <__sfvwrite_r+0x2cc>
   82a8c:	4611      	mov	r1, r2
   82a8e:	4648      	mov	r0, r9
   82a90:	f8cd c000 	str.w	ip, [sp]
   82a94:	f000 f916 	bl	82cc4 <_malloc_r>
   82a98:	f8dd c000 	ldr.w	ip, [sp]
   82a9c:	4683      	mov	fp, r0
   82a9e:	2800      	cmp	r0, #0
   82aa0:	d062      	beq.n	82b68 <__sfvwrite_r+0x308>
   82aa2:	4662      	mov	r2, ip
   82aa4:	6921      	ldr	r1, [r4, #16]
   82aa6:	f8cd c000 	str.w	ip, [sp]
   82aaa:	f000 fbf1 	bl	83290 <memcpy>
   82aae:	89a2      	ldrh	r2, [r4, #12]
   82ab0:	f8dd c000 	ldr.w	ip, [sp]
   82ab4:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   82ab8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   82abc:	81a2      	strh	r2, [r4, #12]
   82abe:	eb0b 000c 	add.w	r0, fp, ip
   82ac2:	ebcc 0207 	rsb	r2, ip, r7
   82ac6:	f8c4 b010 	str.w	fp, [r4, #16]
   82aca:	6167      	str	r7, [r4, #20]
   82acc:	6020      	str	r0, [r4, #0]
   82ace:	60a2      	str	r2, [r4, #8]
   82ad0:	4647      	mov	r7, r8
   82ad2:	46c3      	mov	fp, r8
   82ad4:	e717      	b.n	82906 <__sfvwrite_r+0xa6>
   82ad6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   82ada:	4590      	cmp	r8, r2
   82adc:	bf38      	it	cc
   82ade:	4642      	movcc	r2, r8
   82ae0:	fb92 f2f3 	sdiv	r2, r2, r3
   82ae4:	fb02 f303 	mul.w	r3, r2, r3
   82ae8:	6a67      	ldr	r7, [r4, #36]	; 0x24
   82aea:	4648      	mov	r0, r9
   82aec:	69e1      	ldr	r1, [r4, #28]
   82aee:	4652      	mov	r2, sl
   82af0:	47b8      	blx	r7
   82af2:	2800      	cmp	r0, #0
   82af4:	f77f af31 	ble.w	8295a <__sfvwrite_r+0xfa>
   82af8:	4602      	mov	r2, r0
   82afa:	e710      	b.n	8291e <__sfvwrite_r+0xbe>
   82afc:	4662      	mov	r2, ip
   82afe:	4659      	mov	r1, fp
   82b00:	f8cd c000 	str.w	ip, [sp]
   82b04:	f000 fc3a 	bl	8337c <memmove>
   82b08:	f8dd c000 	ldr.w	ip, [sp]
   82b0c:	6823      	ldr	r3, [r4, #0]
   82b0e:	4648      	mov	r0, r9
   82b10:	4463      	add	r3, ip
   82b12:	6023      	str	r3, [r4, #0]
   82b14:	4621      	mov	r1, r4
   82b16:	f8cd c000 	str.w	ip, [sp]
   82b1a:	f7ff fc75 	bl	82408 <_fflush_r>
   82b1e:	f8dd c000 	ldr.w	ip, [sp]
   82b22:	2800      	cmp	r0, #0
   82b24:	f47f af19 	bne.w	8295a <__sfvwrite_r+0xfa>
   82b28:	4667      	mov	r7, ip
   82b2a:	e743      	b.n	829b4 <__sfvwrite_r+0x154>
   82b2c:	4648      	mov	r0, r9
   82b2e:	f8cd c000 	str.w	ip, [sp]
   82b32:	f000 fc8d 	bl	83450 <_realloc_r>
   82b36:	f8dd c000 	ldr.w	ip, [sp]
   82b3a:	4683      	mov	fp, r0
   82b3c:	2800      	cmp	r0, #0
   82b3e:	d1be      	bne.n	82abe <__sfvwrite_r+0x25e>
   82b40:	4648      	mov	r0, r9
   82b42:	6921      	ldr	r1, [r4, #16]
   82b44:	f7ff fdc0 	bl	826c8 <_free_r>
   82b48:	89a3      	ldrh	r3, [r4, #12]
   82b4a:	220c      	movs	r2, #12
   82b4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   82b50:	b29b      	uxth	r3, r3
   82b52:	f8c9 2000 	str.w	r2, [r9]
   82b56:	e701      	b.n	8295c <__sfvwrite_r+0xfc>
   82b58:	2701      	movs	r7, #1
   82b5a:	f108 0a01 	add.w	sl, r8, #1
   82b5e:	9701      	str	r7, [sp, #4]
   82b60:	e70e      	b.n	82980 <__sfvwrite_r+0x120>
   82b62:	f04f 30ff 	mov.w	r0, #4294967295
   82b66:	e6aa      	b.n	828be <__sfvwrite_r+0x5e>
   82b68:	230c      	movs	r3, #12
   82b6a:	f8c9 3000 	str.w	r3, [r9]
   82b6e:	89a3      	ldrh	r3, [r4, #12]
   82b70:	e6f4      	b.n	8295c <__sfvwrite_r+0xfc>
   82b72:	bf00      	nop
   82b74:	7ffffc00 	.word	0x7ffffc00

00082b78 <_fwalk>:
   82b78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82b7c:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
   82b80:	4688      	mov	r8, r1
   82b82:	d019      	beq.n	82bb8 <_fwalk+0x40>
   82b84:	2600      	movs	r6, #0
   82b86:	687d      	ldr	r5, [r7, #4]
   82b88:	68bc      	ldr	r4, [r7, #8]
   82b8a:	3d01      	subs	r5, #1
   82b8c:	d40e      	bmi.n	82bac <_fwalk+0x34>
   82b8e:	89a3      	ldrh	r3, [r4, #12]
   82b90:	3d01      	subs	r5, #1
   82b92:	2b01      	cmp	r3, #1
   82b94:	d906      	bls.n	82ba4 <_fwalk+0x2c>
   82b96:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   82b9a:	4620      	mov	r0, r4
   82b9c:	3301      	adds	r3, #1
   82b9e:	d001      	beq.n	82ba4 <_fwalk+0x2c>
   82ba0:	47c0      	blx	r8
   82ba2:	4306      	orrs	r6, r0
   82ba4:	1c6b      	adds	r3, r5, #1
   82ba6:	f104 0468 	add.w	r4, r4, #104	; 0x68
   82baa:	d1f0      	bne.n	82b8e <_fwalk+0x16>
   82bac:	683f      	ldr	r7, [r7, #0]
   82bae:	2f00      	cmp	r7, #0
   82bb0:	d1e9      	bne.n	82b86 <_fwalk+0xe>
   82bb2:	4630      	mov	r0, r6
   82bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82bb8:	463e      	mov	r6, r7
   82bba:	4630      	mov	r0, r6
   82bbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00082bc0 <__locale_charset>:
   82bc0:	4800      	ldr	r0, [pc, #0]	; (82bc4 <__locale_charset+0x4>)
   82bc2:	4770      	bx	lr
   82bc4:	2007056c 	.word	0x2007056c

00082bc8 <__locale_mb_cur_max>:
   82bc8:	4b01      	ldr	r3, [pc, #4]	; (82bd0 <__locale_mb_cur_max+0x8>)
   82bca:	6818      	ldr	r0, [r3, #0]
   82bcc:	4770      	bx	lr
   82bce:	bf00      	nop
   82bd0:	2007058c 	.word	0x2007058c

00082bd4 <__smakebuf_r>:
   82bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
   82bd6:	898b      	ldrh	r3, [r1, #12]
   82bd8:	b091      	sub	sp, #68	; 0x44
   82bda:	b29a      	uxth	r2, r3
   82bdc:	0796      	lsls	r6, r2, #30
   82bde:	460c      	mov	r4, r1
   82be0:	4605      	mov	r5, r0
   82be2:	d437      	bmi.n	82c54 <__smakebuf_r+0x80>
   82be4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   82be8:	2900      	cmp	r1, #0
   82bea:	db17      	blt.n	82c1c <__smakebuf_r+0x48>
   82bec:	aa01      	add	r2, sp, #4
   82bee:	f000 ffaf 	bl	83b50 <_fstat_r>
   82bf2:	2800      	cmp	r0, #0
   82bf4:	db10      	blt.n	82c18 <__smakebuf_r+0x44>
   82bf6:	9b02      	ldr	r3, [sp, #8]
   82bf8:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
   82bfc:	f5b3 5100 	subs.w	r1, r3, #8192	; 0x2000
   82c00:	424f      	negs	r7, r1
   82c02:	414f      	adcs	r7, r1
   82c04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   82c08:	d02c      	beq.n	82c64 <__smakebuf_r+0x90>
   82c0a:	89a3      	ldrh	r3, [r4, #12]
   82c0c:	f44f 6680 	mov.w	r6, #1024	; 0x400
   82c10:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   82c14:	81a3      	strh	r3, [r4, #12]
   82c16:	e00b      	b.n	82c30 <__smakebuf_r+0x5c>
   82c18:	89a3      	ldrh	r3, [r4, #12]
   82c1a:	b29a      	uxth	r2, r3
   82c1c:	f012 0f80 	tst.w	r2, #128	; 0x80
   82c20:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   82c24:	81a3      	strh	r3, [r4, #12]
   82c26:	bf14      	ite	ne
   82c28:	2640      	movne	r6, #64	; 0x40
   82c2a:	f44f 6680 	moveq.w	r6, #1024	; 0x400
   82c2e:	2700      	movs	r7, #0
   82c30:	4628      	mov	r0, r5
   82c32:	4631      	mov	r1, r6
   82c34:	f000 f846 	bl	82cc4 <_malloc_r>
   82c38:	89a3      	ldrh	r3, [r4, #12]
   82c3a:	2800      	cmp	r0, #0
   82c3c:	d029      	beq.n	82c92 <__smakebuf_r+0xbe>
   82c3e:	4a1b      	ldr	r2, [pc, #108]	; (82cac <__smakebuf_r+0xd8>)
   82c40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   82c44:	63ea      	str	r2, [r5, #60]	; 0x3c
   82c46:	81a3      	strh	r3, [r4, #12]
   82c48:	6020      	str	r0, [r4, #0]
   82c4a:	6120      	str	r0, [r4, #16]
   82c4c:	6166      	str	r6, [r4, #20]
   82c4e:	b9a7      	cbnz	r7, 82c7a <__smakebuf_r+0xa6>
   82c50:	b011      	add	sp, #68	; 0x44
   82c52:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82c54:	f101 0343 	add.w	r3, r1, #67	; 0x43
   82c58:	2201      	movs	r2, #1
   82c5a:	600b      	str	r3, [r1, #0]
   82c5c:	610b      	str	r3, [r1, #16]
   82c5e:	614a      	str	r2, [r1, #20]
   82c60:	b011      	add	sp, #68	; 0x44
   82c62:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82c64:	4a12      	ldr	r2, [pc, #72]	; (82cb0 <__smakebuf_r+0xdc>)
   82c66:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   82c68:	4293      	cmp	r3, r2
   82c6a:	d1ce      	bne.n	82c0a <__smakebuf_r+0x36>
   82c6c:	89a3      	ldrh	r3, [r4, #12]
   82c6e:	f44f 6680 	mov.w	r6, #1024	; 0x400
   82c72:	4333      	orrs	r3, r6
   82c74:	81a3      	strh	r3, [r4, #12]
   82c76:	64e6      	str	r6, [r4, #76]	; 0x4c
   82c78:	e7da      	b.n	82c30 <__smakebuf_r+0x5c>
   82c7a:	4628      	mov	r0, r5
   82c7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   82c80:	f000 ff7a 	bl	83b78 <_isatty_r>
   82c84:	2800      	cmp	r0, #0
   82c86:	d0e3      	beq.n	82c50 <__smakebuf_r+0x7c>
   82c88:	89a3      	ldrh	r3, [r4, #12]
   82c8a:	f043 0301 	orr.w	r3, r3, #1
   82c8e:	81a3      	strh	r3, [r4, #12]
   82c90:	e7de      	b.n	82c50 <__smakebuf_r+0x7c>
   82c92:	059a      	lsls	r2, r3, #22
   82c94:	d4dc      	bmi.n	82c50 <__smakebuf_r+0x7c>
   82c96:	f104 0243 	add.w	r2, r4, #67	; 0x43
   82c9a:	f043 0302 	orr.w	r3, r3, #2
   82c9e:	2101      	movs	r1, #1
   82ca0:	81a3      	strh	r3, [r4, #12]
   82ca2:	6022      	str	r2, [r4, #0]
   82ca4:	6122      	str	r2, [r4, #16]
   82ca6:	6161      	str	r1, [r4, #20]
   82ca8:	e7d2      	b.n	82c50 <__smakebuf_r+0x7c>
   82caa:	bf00      	nop
   82cac:	00082435 	.word	0x00082435
   82cb0:	00083891 	.word	0x00083891

00082cb4 <malloc>:
   82cb4:	4b02      	ldr	r3, [pc, #8]	; (82cc0 <malloc+0xc>)
   82cb6:	4601      	mov	r1, r0
   82cb8:	6818      	ldr	r0, [r3, #0]
   82cba:	f000 b803 	b.w	82cc4 <_malloc_r>
   82cbe:	bf00      	nop
   82cc0:	20070568 	.word	0x20070568

00082cc4 <_malloc_r>:
   82cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82cc8:	f101 050b 	add.w	r5, r1, #11
   82ccc:	2d16      	cmp	r5, #22
   82cce:	b083      	sub	sp, #12
   82cd0:	4606      	mov	r6, r0
   82cd2:	d927      	bls.n	82d24 <_malloc_r+0x60>
   82cd4:	f035 0507 	bics.w	r5, r5, #7
   82cd8:	d427      	bmi.n	82d2a <_malloc_r+0x66>
   82cda:	42a9      	cmp	r1, r5
   82cdc:	d825      	bhi.n	82d2a <_malloc_r+0x66>
   82cde:	4630      	mov	r0, r6
   82ce0:	f000 fbb2 	bl	83448 <__malloc_lock>
   82ce4:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   82ce8:	d226      	bcs.n	82d38 <_malloc_r+0x74>
   82cea:	4fc1      	ldr	r7, [pc, #772]	; (82ff0 <_malloc_r+0x32c>)
   82cec:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
   82cf0:	eb07 03cc 	add.w	r3, r7, ip, lsl #3
   82cf4:	68dc      	ldr	r4, [r3, #12]
   82cf6:	429c      	cmp	r4, r3
   82cf8:	f000 81d2 	beq.w	830a0 <_malloc_r+0x3dc>
   82cfc:	6863      	ldr	r3, [r4, #4]
   82cfe:	68e2      	ldr	r2, [r4, #12]
   82d00:	f023 0303 	bic.w	r3, r3, #3
   82d04:	4423      	add	r3, r4
   82d06:	6858      	ldr	r0, [r3, #4]
   82d08:	68a1      	ldr	r1, [r4, #8]
   82d0a:	f040 0501 	orr.w	r5, r0, #1
   82d0e:	60ca      	str	r2, [r1, #12]
   82d10:	4630      	mov	r0, r6
   82d12:	6091      	str	r1, [r2, #8]
   82d14:	605d      	str	r5, [r3, #4]
   82d16:	f000 fb99 	bl	8344c <__malloc_unlock>
   82d1a:	3408      	adds	r4, #8
   82d1c:	4620      	mov	r0, r4
   82d1e:	b003      	add	sp, #12
   82d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82d24:	2510      	movs	r5, #16
   82d26:	42a9      	cmp	r1, r5
   82d28:	d9d9      	bls.n	82cde <_malloc_r+0x1a>
   82d2a:	2400      	movs	r4, #0
   82d2c:	230c      	movs	r3, #12
   82d2e:	4620      	mov	r0, r4
   82d30:	6033      	str	r3, [r6, #0]
   82d32:	b003      	add	sp, #12
   82d34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82d38:	ea5f 2c55 	movs.w	ip, r5, lsr #9
   82d3c:	f000 8089 	beq.w	82e52 <_malloc_r+0x18e>
   82d40:	f1bc 0f04 	cmp.w	ip, #4
   82d44:	f200 8160 	bhi.w	83008 <_malloc_r+0x344>
   82d48:	ea4f 1c95 	mov.w	ip, r5, lsr #6
   82d4c:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
   82d50:	ea4f 014c 	mov.w	r1, ip, lsl #1
   82d54:	4fa6      	ldr	r7, [pc, #664]	; (82ff0 <_malloc_r+0x32c>)
   82d56:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   82d5a:	68cc      	ldr	r4, [r1, #12]
   82d5c:	42a1      	cmp	r1, r4
   82d5e:	d105      	bne.n	82d6c <_malloc_r+0xa8>
   82d60:	e00c      	b.n	82d7c <_malloc_r+0xb8>
   82d62:	2b00      	cmp	r3, #0
   82d64:	da79      	bge.n	82e5a <_malloc_r+0x196>
   82d66:	68e4      	ldr	r4, [r4, #12]
   82d68:	42a1      	cmp	r1, r4
   82d6a:	d007      	beq.n	82d7c <_malloc_r+0xb8>
   82d6c:	6862      	ldr	r2, [r4, #4]
   82d6e:	f022 0203 	bic.w	r2, r2, #3
   82d72:	1b53      	subs	r3, r2, r5
   82d74:	2b0f      	cmp	r3, #15
   82d76:	ddf4      	ble.n	82d62 <_malloc_r+0x9e>
   82d78:	f10c 3cff 	add.w	ip, ip, #4294967295
   82d7c:	f10c 0c01 	add.w	ip, ip, #1
   82d80:	4b9b      	ldr	r3, [pc, #620]	; (82ff0 <_malloc_r+0x32c>)
   82d82:	693c      	ldr	r4, [r7, #16]
   82d84:	f103 0e08 	add.w	lr, r3, #8
   82d88:	4574      	cmp	r4, lr
   82d8a:	f000 817e 	beq.w	8308a <_malloc_r+0x3c6>
   82d8e:	6861      	ldr	r1, [r4, #4]
   82d90:	f021 0103 	bic.w	r1, r1, #3
   82d94:	1b4a      	subs	r2, r1, r5
   82d96:	2a0f      	cmp	r2, #15
   82d98:	f300 8164 	bgt.w	83064 <_malloc_r+0x3a0>
   82d9c:	2a00      	cmp	r2, #0
   82d9e:	f8c3 e014 	str.w	lr, [r3, #20]
   82da2:	f8c3 e010 	str.w	lr, [r3, #16]
   82da6:	da69      	bge.n	82e7c <_malloc_r+0x1b8>
   82da8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   82dac:	f080 813a 	bcs.w	83024 <_malloc_r+0x360>
   82db0:	08c9      	lsrs	r1, r1, #3
   82db2:	108a      	asrs	r2, r1, #2
   82db4:	f04f 0801 	mov.w	r8, #1
   82db8:	fa08 f802 	lsl.w	r8, r8, r2
   82dbc:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   82dc0:	685a      	ldr	r2, [r3, #4]
   82dc2:	6888      	ldr	r0, [r1, #8]
   82dc4:	ea48 0202 	orr.w	r2, r8, r2
   82dc8:	60a0      	str	r0, [r4, #8]
   82dca:	60e1      	str	r1, [r4, #12]
   82dcc:	605a      	str	r2, [r3, #4]
   82dce:	608c      	str	r4, [r1, #8]
   82dd0:	60c4      	str	r4, [r0, #12]
   82dd2:	ea4f 03ac 	mov.w	r3, ip, asr #2
   82dd6:	2001      	movs	r0, #1
   82dd8:	4098      	lsls	r0, r3
   82dda:	4290      	cmp	r0, r2
   82ddc:	d85b      	bhi.n	82e96 <_malloc_r+0x1d2>
   82dde:	4202      	tst	r2, r0
   82de0:	d106      	bne.n	82df0 <_malloc_r+0x12c>
   82de2:	f02c 0c03 	bic.w	ip, ip, #3
   82de6:	0040      	lsls	r0, r0, #1
   82de8:	4202      	tst	r2, r0
   82dea:	f10c 0c04 	add.w	ip, ip, #4
   82dee:	d0fa      	beq.n	82de6 <_malloc_r+0x122>
   82df0:	eb07 08cc 	add.w	r8, r7, ip, lsl #3
   82df4:	4644      	mov	r4, r8
   82df6:	46e1      	mov	r9, ip
   82df8:	68e3      	ldr	r3, [r4, #12]
   82dfa:	429c      	cmp	r4, r3
   82dfc:	d107      	bne.n	82e0e <_malloc_r+0x14a>
   82dfe:	e146      	b.n	8308e <_malloc_r+0x3ca>
   82e00:	2a00      	cmp	r2, #0
   82e02:	f280 8157 	bge.w	830b4 <_malloc_r+0x3f0>
   82e06:	68db      	ldr	r3, [r3, #12]
   82e08:	429c      	cmp	r4, r3
   82e0a:	f000 8140 	beq.w	8308e <_malloc_r+0x3ca>
   82e0e:	6859      	ldr	r1, [r3, #4]
   82e10:	f021 0103 	bic.w	r1, r1, #3
   82e14:	1b4a      	subs	r2, r1, r5
   82e16:	2a0f      	cmp	r2, #15
   82e18:	ddf2      	ble.n	82e00 <_malloc_r+0x13c>
   82e1a:	461c      	mov	r4, r3
   82e1c:	f854 cf08 	ldr.w	ip, [r4, #8]!
   82e20:	68d9      	ldr	r1, [r3, #12]
   82e22:	f045 0901 	orr.w	r9, r5, #1
   82e26:	f042 0801 	orr.w	r8, r2, #1
   82e2a:	441d      	add	r5, r3
   82e2c:	f8c3 9004 	str.w	r9, [r3, #4]
   82e30:	4630      	mov	r0, r6
   82e32:	f8cc 100c 	str.w	r1, [ip, #12]
   82e36:	f8c1 c008 	str.w	ip, [r1, #8]
   82e3a:	617d      	str	r5, [r7, #20]
   82e3c:	613d      	str	r5, [r7, #16]
   82e3e:	f8c5 e00c 	str.w	lr, [r5, #12]
   82e42:	f8c5 e008 	str.w	lr, [r5, #8]
   82e46:	f8c5 8004 	str.w	r8, [r5, #4]
   82e4a:	50aa      	str	r2, [r5, r2]
   82e4c:	f000 fafe 	bl	8344c <__malloc_unlock>
   82e50:	e764      	b.n	82d1c <_malloc_r+0x58>
   82e52:	217e      	movs	r1, #126	; 0x7e
   82e54:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
   82e58:	e77c      	b.n	82d54 <_malloc_r+0x90>
   82e5a:	4422      	add	r2, r4
   82e5c:	6850      	ldr	r0, [r2, #4]
   82e5e:	68e3      	ldr	r3, [r4, #12]
   82e60:	68a1      	ldr	r1, [r4, #8]
   82e62:	f040 0501 	orr.w	r5, r0, #1
   82e66:	60cb      	str	r3, [r1, #12]
   82e68:	4630      	mov	r0, r6
   82e6a:	6099      	str	r1, [r3, #8]
   82e6c:	6055      	str	r5, [r2, #4]
   82e6e:	f000 faed 	bl	8344c <__malloc_unlock>
   82e72:	3408      	adds	r4, #8
   82e74:	4620      	mov	r0, r4
   82e76:	b003      	add	sp, #12
   82e78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82e7c:	4421      	add	r1, r4
   82e7e:	684b      	ldr	r3, [r1, #4]
   82e80:	4630      	mov	r0, r6
   82e82:	f043 0301 	orr.w	r3, r3, #1
   82e86:	604b      	str	r3, [r1, #4]
   82e88:	f000 fae0 	bl	8344c <__malloc_unlock>
   82e8c:	3408      	adds	r4, #8
   82e8e:	4620      	mov	r0, r4
   82e90:	b003      	add	sp, #12
   82e92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82e96:	68bc      	ldr	r4, [r7, #8]
   82e98:	6863      	ldr	r3, [r4, #4]
   82e9a:	f023 0903 	bic.w	r9, r3, #3
   82e9e:	45a9      	cmp	r9, r5
   82ea0:	d304      	bcc.n	82eac <_malloc_r+0x1e8>
   82ea2:	ebc5 0309 	rsb	r3, r5, r9
   82ea6:	2b0f      	cmp	r3, #15
   82ea8:	f300 8091 	bgt.w	82fce <_malloc_r+0x30a>
   82eac:	4b51      	ldr	r3, [pc, #324]	; (82ff4 <_malloc_r+0x330>)
   82eae:	4a52      	ldr	r2, [pc, #328]	; (82ff8 <_malloc_r+0x334>)
   82eb0:	6819      	ldr	r1, [r3, #0]
   82eb2:	6813      	ldr	r3, [r2, #0]
   82eb4:	eb05 0a01 	add.w	sl, r5, r1
   82eb8:	3301      	adds	r3, #1
   82eba:	eb04 0b09 	add.w	fp, r4, r9
   82ebe:	f000 8161 	beq.w	83184 <_malloc_r+0x4c0>
   82ec2:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
   82ec6:	f10a 0a0f 	add.w	sl, sl, #15
   82eca:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
   82ece:	f02a 0a0f 	bic.w	sl, sl, #15
   82ed2:	4630      	mov	r0, r6
   82ed4:	4651      	mov	r1, sl
   82ed6:	9201      	str	r2, [sp, #4]
   82ed8:	f000 fc9a 	bl	83810 <_sbrk_r>
   82edc:	f1b0 3fff 	cmp.w	r0, #4294967295
   82ee0:	4680      	mov	r8, r0
   82ee2:	9a01      	ldr	r2, [sp, #4]
   82ee4:	f000 8101 	beq.w	830ea <_malloc_r+0x426>
   82ee8:	4583      	cmp	fp, r0
   82eea:	f200 80fb 	bhi.w	830e4 <_malloc_r+0x420>
   82eee:	f8df c114 	ldr.w	ip, [pc, #276]	; 83004 <_malloc_r+0x340>
   82ef2:	45c3      	cmp	fp, r8
   82ef4:	f8dc 3000 	ldr.w	r3, [ip]
   82ef8:	4453      	add	r3, sl
   82efa:	f8cc 3000 	str.w	r3, [ip]
   82efe:	f000 814a 	beq.w	83196 <_malloc_r+0x4d2>
   82f02:	6812      	ldr	r2, [r2, #0]
   82f04:	493c      	ldr	r1, [pc, #240]	; (82ff8 <_malloc_r+0x334>)
   82f06:	3201      	adds	r2, #1
   82f08:	bf1b      	ittet	ne
   82f0a:	ebcb 0b08 	rsbne	fp, fp, r8
   82f0e:	445b      	addne	r3, fp
   82f10:	f8c1 8000 	streq.w	r8, [r1]
   82f14:	f8cc 3000 	strne.w	r3, [ip]
   82f18:	f018 0307 	ands.w	r3, r8, #7
   82f1c:	f000 8114 	beq.w	83148 <_malloc_r+0x484>
   82f20:	f1c3 0208 	rsb	r2, r3, #8
   82f24:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
   82f28:	4490      	add	r8, r2
   82f2a:	3308      	adds	r3, #8
   82f2c:	44c2      	add	sl, r8
   82f2e:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
   82f32:	ebca 0a03 	rsb	sl, sl, r3
   82f36:	4651      	mov	r1, sl
   82f38:	4630      	mov	r0, r6
   82f3a:	f8cd c004 	str.w	ip, [sp, #4]
   82f3e:	f000 fc67 	bl	83810 <_sbrk_r>
   82f42:	1c43      	adds	r3, r0, #1
   82f44:	f8dd c004 	ldr.w	ip, [sp, #4]
   82f48:	f000 8135 	beq.w	831b6 <_malloc_r+0x4f2>
   82f4c:	ebc8 0200 	rsb	r2, r8, r0
   82f50:	4452      	add	r2, sl
   82f52:	f042 0201 	orr.w	r2, r2, #1
   82f56:	f8dc 3000 	ldr.w	r3, [ip]
   82f5a:	42bc      	cmp	r4, r7
   82f5c:	4453      	add	r3, sl
   82f5e:	f8c7 8008 	str.w	r8, [r7, #8]
   82f62:	f8cc 3000 	str.w	r3, [ip]
   82f66:	f8c8 2004 	str.w	r2, [r8, #4]
   82f6a:	f8df a098 	ldr.w	sl, [pc, #152]	; 83004 <_malloc_r+0x340>
   82f6e:	d015      	beq.n	82f9c <_malloc_r+0x2d8>
   82f70:	f1b9 0f0f 	cmp.w	r9, #15
   82f74:	f240 80eb 	bls.w	8314e <_malloc_r+0x48a>
   82f78:	6861      	ldr	r1, [r4, #4]
   82f7a:	f1a9 020c 	sub.w	r2, r9, #12
   82f7e:	f022 0207 	bic.w	r2, r2, #7
   82f82:	f001 0101 	and.w	r1, r1, #1
   82f86:	ea42 0e01 	orr.w	lr, r2, r1
   82f8a:	2005      	movs	r0, #5
   82f8c:	18a1      	adds	r1, r4, r2
   82f8e:	2a0f      	cmp	r2, #15
   82f90:	f8c4 e004 	str.w	lr, [r4, #4]
   82f94:	6048      	str	r0, [r1, #4]
   82f96:	6088      	str	r0, [r1, #8]
   82f98:	f200 8111 	bhi.w	831be <_malloc_r+0x4fa>
   82f9c:	4a17      	ldr	r2, [pc, #92]	; (82ffc <_malloc_r+0x338>)
   82f9e:	68bc      	ldr	r4, [r7, #8]
   82fa0:	6811      	ldr	r1, [r2, #0]
   82fa2:	428b      	cmp	r3, r1
   82fa4:	bf88      	it	hi
   82fa6:	6013      	strhi	r3, [r2, #0]
   82fa8:	4a15      	ldr	r2, [pc, #84]	; (83000 <_malloc_r+0x33c>)
   82faa:	6811      	ldr	r1, [r2, #0]
   82fac:	428b      	cmp	r3, r1
   82fae:	bf88      	it	hi
   82fb0:	6013      	strhi	r3, [r2, #0]
   82fb2:	6862      	ldr	r2, [r4, #4]
   82fb4:	f022 0203 	bic.w	r2, r2, #3
   82fb8:	4295      	cmp	r5, r2
   82fba:	ebc5 0302 	rsb	r3, r5, r2
   82fbe:	d801      	bhi.n	82fc4 <_malloc_r+0x300>
   82fc0:	2b0f      	cmp	r3, #15
   82fc2:	dc04      	bgt.n	82fce <_malloc_r+0x30a>
   82fc4:	4630      	mov	r0, r6
   82fc6:	f000 fa41 	bl	8344c <__malloc_unlock>
   82fca:	2400      	movs	r4, #0
   82fcc:	e6a6      	b.n	82d1c <_malloc_r+0x58>
   82fce:	f045 0201 	orr.w	r2, r5, #1
   82fd2:	f043 0301 	orr.w	r3, r3, #1
   82fd6:	4425      	add	r5, r4
   82fd8:	6062      	str	r2, [r4, #4]
   82fda:	4630      	mov	r0, r6
   82fdc:	60bd      	str	r5, [r7, #8]
   82fde:	606b      	str	r3, [r5, #4]
   82fe0:	f000 fa34 	bl	8344c <__malloc_unlock>
   82fe4:	3408      	adds	r4, #8
   82fe6:	4620      	mov	r0, r4
   82fe8:	b003      	add	sp, #12
   82fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82fee:	bf00      	nop
   82ff0:	20070590 	.word	0x20070590
   82ff4:	20070ae0 	.word	0x20070ae0
   82ff8:	2007099c 	.word	0x2007099c
   82ffc:	20070adc 	.word	0x20070adc
   83000:	20070ad8 	.word	0x20070ad8
   83004:	20070ae4 	.word	0x20070ae4
   83008:	f1bc 0f14 	cmp.w	ip, #20
   8300c:	d961      	bls.n	830d2 <_malloc_r+0x40e>
   8300e:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
   83012:	f200 808f 	bhi.w	83134 <_malloc_r+0x470>
   83016:	ea4f 3c15 	mov.w	ip, r5, lsr #12
   8301a:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
   8301e:	ea4f 014c 	mov.w	r1, ip, lsl #1
   83022:	e697      	b.n	82d54 <_malloc_r+0x90>
   83024:	0a4b      	lsrs	r3, r1, #9
   83026:	2b04      	cmp	r3, #4
   83028:	d958      	bls.n	830dc <_malloc_r+0x418>
   8302a:	2b14      	cmp	r3, #20
   8302c:	f200 80ad 	bhi.w	8318a <_malloc_r+0x4c6>
   83030:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   83034:	0050      	lsls	r0, r2, #1
   83036:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   8303a:	6883      	ldr	r3, [r0, #8]
   8303c:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 831f8 <_malloc_r+0x534>
   83040:	4283      	cmp	r3, r0
   83042:	f000 808a 	beq.w	8315a <_malloc_r+0x496>
   83046:	685a      	ldr	r2, [r3, #4]
   83048:	f022 0203 	bic.w	r2, r2, #3
   8304c:	4291      	cmp	r1, r2
   8304e:	d202      	bcs.n	83056 <_malloc_r+0x392>
   83050:	689b      	ldr	r3, [r3, #8]
   83052:	4298      	cmp	r0, r3
   83054:	d1f7      	bne.n	83046 <_malloc_r+0x382>
   83056:	68d9      	ldr	r1, [r3, #12]
   83058:	687a      	ldr	r2, [r7, #4]
   8305a:	60e1      	str	r1, [r4, #12]
   8305c:	60a3      	str	r3, [r4, #8]
   8305e:	608c      	str	r4, [r1, #8]
   83060:	60dc      	str	r4, [r3, #12]
   83062:	e6b6      	b.n	82dd2 <_malloc_r+0x10e>
   83064:	f045 0701 	orr.w	r7, r5, #1
   83068:	f042 0101 	orr.w	r1, r2, #1
   8306c:	4425      	add	r5, r4
   8306e:	6067      	str	r7, [r4, #4]
   83070:	4630      	mov	r0, r6
   83072:	615d      	str	r5, [r3, #20]
   83074:	611d      	str	r5, [r3, #16]
   83076:	f8c5 e00c 	str.w	lr, [r5, #12]
   8307a:	f8c5 e008 	str.w	lr, [r5, #8]
   8307e:	6069      	str	r1, [r5, #4]
   83080:	50aa      	str	r2, [r5, r2]
   83082:	3408      	adds	r4, #8
   83084:	f000 f9e2 	bl	8344c <__malloc_unlock>
   83088:	e648      	b.n	82d1c <_malloc_r+0x58>
   8308a:	685a      	ldr	r2, [r3, #4]
   8308c:	e6a1      	b.n	82dd2 <_malloc_r+0x10e>
   8308e:	f109 0901 	add.w	r9, r9, #1
   83092:	f019 0f03 	tst.w	r9, #3
   83096:	f104 0408 	add.w	r4, r4, #8
   8309a:	f47f aead 	bne.w	82df8 <_malloc_r+0x134>
   8309e:	e02d      	b.n	830fc <_malloc_r+0x438>
   830a0:	f104 0308 	add.w	r3, r4, #8
   830a4:	6964      	ldr	r4, [r4, #20]
   830a6:	42a3      	cmp	r3, r4
   830a8:	bf08      	it	eq
   830aa:	f10c 0c02 	addeq.w	ip, ip, #2
   830ae:	f43f ae67 	beq.w	82d80 <_malloc_r+0xbc>
   830b2:	e623      	b.n	82cfc <_malloc_r+0x38>
   830b4:	4419      	add	r1, r3
   830b6:	6848      	ldr	r0, [r1, #4]
   830b8:	461c      	mov	r4, r3
   830ba:	f854 2f08 	ldr.w	r2, [r4, #8]!
   830be:	68db      	ldr	r3, [r3, #12]
   830c0:	f040 0501 	orr.w	r5, r0, #1
   830c4:	604d      	str	r5, [r1, #4]
   830c6:	4630      	mov	r0, r6
   830c8:	60d3      	str	r3, [r2, #12]
   830ca:	609a      	str	r2, [r3, #8]
   830cc:	f000 f9be 	bl	8344c <__malloc_unlock>
   830d0:	e624      	b.n	82d1c <_malloc_r+0x58>
   830d2:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
   830d6:	ea4f 014c 	mov.w	r1, ip, lsl #1
   830da:	e63b      	b.n	82d54 <_malloc_r+0x90>
   830dc:	098a      	lsrs	r2, r1, #6
   830de:	3238      	adds	r2, #56	; 0x38
   830e0:	0050      	lsls	r0, r2, #1
   830e2:	e7a8      	b.n	83036 <_malloc_r+0x372>
   830e4:	42bc      	cmp	r4, r7
   830e6:	f43f af02 	beq.w	82eee <_malloc_r+0x22a>
   830ea:	68bc      	ldr	r4, [r7, #8]
   830ec:	6862      	ldr	r2, [r4, #4]
   830ee:	f022 0203 	bic.w	r2, r2, #3
   830f2:	e761      	b.n	82fb8 <_malloc_r+0x2f4>
   830f4:	f8d8 8000 	ldr.w	r8, [r8]
   830f8:	4598      	cmp	r8, r3
   830fa:	d17a      	bne.n	831f2 <_malloc_r+0x52e>
   830fc:	f01c 0f03 	tst.w	ip, #3
   83100:	f1a8 0308 	sub.w	r3, r8, #8
   83104:	f10c 3cff 	add.w	ip, ip, #4294967295
   83108:	d1f4      	bne.n	830f4 <_malloc_r+0x430>
   8310a:	687b      	ldr	r3, [r7, #4]
   8310c:	ea23 0300 	bic.w	r3, r3, r0
   83110:	607b      	str	r3, [r7, #4]
   83112:	0040      	lsls	r0, r0, #1
   83114:	4298      	cmp	r0, r3
   83116:	f63f aebe 	bhi.w	82e96 <_malloc_r+0x1d2>
   8311a:	2800      	cmp	r0, #0
   8311c:	f43f aebb 	beq.w	82e96 <_malloc_r+0x1d2>
   83120:	4203      	tst	r3, r0
   83122:	46cc      	mov	ip, r9
   83124:	f47f ae64 	bne.w	82df0 <_malloc_r+0x12c>
   83128:	0040      	lsls	r0, r0, #1
   8312a:	4203      	tst	r3, r0
   8312c:	f10c 0c04 	add.w	ip, ip, #4
   83130:	d0fa      	beq.n	83128 <_malloc_r+0x464>
   83132:	e65d      	b.n	82df0 <_malloc_r+0x12c>
   83134:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
   83138:	d819      	bhi.n	8316e <_malloc_r+0x4aa>
   8313a:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
   8313e:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
   83142:	ea4f 014c 	mov.w	r1, ip, lsl #1
   83146:	e605      	b.n	82d54 <_malloc_r+0x90>
   83148:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   8314c:	e6ee      	b.n	82f2c <_malloc_r+0x268>
   8314e:	2301      	movs	r3, #1
   83150:	f8c8 3004 	str.w	r3, [r8, #4]
   83154:	4644      	mov	r4, r8
   83156:	2200      	movs	r2, #0
   83158:	e72e      	b.n	82fb8 <_malloc_r+0x2f4>
   8315a:	1092      	asrs	r2, r2, #2
   8315c:	2001      	movs	r0, #1
   8315e:	4090      	lsls	r0, r2
   83160:	f8d8 2004 	ldr.w	r2, [r8, #4]
   83164:	4619      	mov	r1, r3
   83166:	4302      	orrs	r2, r0
   83168:	f8c8 2004 	str.w	r2, [r8, #4]
   8316c:	e775      	b.n	8305a <_malloc_r+0x396>
   8316e:	f240 5354 	movw	r3, #1364	; 0x554
   83172:	459c      	cmp	ip, r3
   83174:	d81b      	bhi.n	831ae <_malloc_r+0x4ea>
   83176:	ea4f 4c95 	mov.w	ip, r5, lsr #18
   8317a:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
   8317e:	ea4f 014c 	mov.w	r1, ip, lsl #1
   83182:	e5e7      	b.n	82d54 <_malloc_r+0x90>
   83184:	f10a 0a10 	add.w	sl, sl, #16
   83188:	e6a3      	b.n	82ed2 <_malloc_r+0x20e>
   8318a:	2b54      	cmp	r3, #84	; 0x54
   8318c:	d81f      	bhi.n	831ce <_malloc_r+0x50a>
   8318e:	0b0a      	lsrs	r2, r1, #12
   83190:	326e      	adds	r2, #110	; 0x6e
   83192:	0050      	lsls	r0, r2, #1
   83194:	e74f      	b.n	83036 <_malloc_r+0x372>
   83196:	f3cb 010b 	ubfx	r1, fp, #0, #12
   8319a:	2900      	cmp	r1, #0
   8319c:	f47f aeb1 	bne.w	82f02 <_malloc_r+0x23e>
   831a0:	eb0a 0109 	add.w	r1, sl, r9
   831a4:	68ba      	ldr	r2, [r7, #8]
   831a6:	f041 0101 	orr.w	r1, r1, #1
   831aa:	6051      	str	r1, [r2, #4]
   831ac:	e6f6      	b.n	82f9c <_malloc_r+0x2d8>
   831ae:	21fc      	movs	r1, #252	; 0xfc
   831b0:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
   831b4:	e5ce      	b.n	82d54 <_malloc_r+0x90>
   831b6:	2201      	movs	r2, #1
   831b8:	f04f 0a00 	mov.w	sl, #0
   831bc:	e6cb      	b.n	82f56 <_malloc_r+0x292>
   831be:	f104 0108 	add.w	r1, r4, #8
   831c2:	4630      	mov	r0, r6
   831c4:	f7ff fa80 	bl	826c8 <_free_r>
   831c8:	f8da 3000 	ldr.w	r3, [sl]
   831cc:	e6e6      	b.n	82f9c <_malloc_r+0x2d8>
   831ce:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   831d2:	d803      	bhi.n	831dc <_malloc_r+0x518>
   831d4:	0bca      	lsrs	r2, r1, #15
   831d6:	3277      	adds	r2, #119	; 0x77
   831d8:	0050      	lsls	r0, r2, #1
   831da:	e72c      	b.n	83036 <_malloc_r+0x372>
   831dc:	f240 5254 	movw	r2, #1364	; 0x554
   831e0:	4293      	cmp	r3, r2
   831e2:	d803      	bhi.n	831ec <_malloc_r+0x528>
   831e4:	0c8a      	lsrs	r2, r1, #18
   831e6:	327c      	adds	r2, #124	; 0x7c
   831e8:	0050      	lsls	r0, r2, #1
   831ea:	e724      	b.n	83036 <_malloc_r+0x372>
   831ec:	20fc      	movs	r0, #252	; 0xfc
   831ee:	227e      	movs	r2, #126	; 0x7e
   831f0:	e721      	b.n	83036 <_malloc_r+0x372>
   831f2:	687b      	ldr	r3, [r7, #4]
   831f4:	e78d      	b.n	83112 <_malloc_r+0x44e>
   831f6:	bf00      	nop
   831f8:	20070590 	.word	0x20070590

000831fc <memchr>:
   831fc:	0783      	lsls	r3, r0, #30
   831fe:	b470      	push	{r4, r5, r6}
   83200:	b2c9      	uxtb	r1, r1
   83202:	d040      	beq.n	83286 <memchr+0x8a>
   83204:	1e54      	subs	r4, r2, #1
   83206:	b32a      	cbz	r2, 83254 <memchr+0x58>
   83208:	7803      	ldrb	r3, [r0, #0]
   8320a:	428b      	cmp	r3, r1
   8320c:	d023      	beq.n	83256 <memchr+0x5a>
   8320e:	1c43      	adds	r3, r0, #1
   83210:	e004      	b.n	8321c <memchr+0x20>
   83212:	b1fc      	cbz	r4, 83254 <memchr+0x58>
   83214:	7805      	ldrb	r5, [r0, #0]
   83216:	4614      	mov	r4, r2
   83218:	428d      	cmp	r5, r1
   8321a:	d01c      	beq.n	83256 <memchr+0x5a>
   8321c:	f013 0f03 	tst.w	r3, #3
   83220:	4618      	mov	r0, r3
   83222:	f104 32ff 	add.w	r2, r4, #4294967295
   83226:	f103 0301 	add.w	r3, r3, #1
   8322a:	d1f2      	bne.n	83212 <memchr+0x16>
   8322c:	2c03      	cmp	r4, #3
   8322e:	d814      	bhi.n	8325a <memchr+0x5e>
   83230:	1e65      	subs	r5, r4, #1
   83232:	b354      	cbz	r4, 8328a <memchr+0x8e>
   83234:	7803      	ldrb	r3, [r0, #0]
   83236:	428b      	cmp	r3, r1
   83238:	d00d      	beq.n	83256 <memchr+0x5a>
   8323a:	1c42      	adds	r2, r0, #1
   8323c:	2300      	movs	r3, #0
   8323e:	e002      	b.n	83246 <memchr+0x4a>
   83240:	7804      	ldrb	r4, [r0, #0]
   83242:	428c      	cmp	r4, r1
   83244:	d007      	beq.n	83256 <memchr+0x5a>
   83246:	42ab      	cmp	r3, r5
   83248:	4610      	mov	r0, r2
   8324a:	f103 0301 	add.w	r3, r3, #1
   8324e:	f102 0201 	add.w	r2, r2, #1
   83252:	d1f5      	bne.n	83240 <memchr+0x44>
   83254:	2000      	movs	r0, #0
   83256:	bc70      	pop	{r4, r5, r6}
   83258:	4770      	bx	lr
   8325a:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
   8325e:	4603      	mov	r3, r0
   83260:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   83264:	681a      	ldr	r2, [r3, #0]
   83266:	4618      	mov	r0, r3
   83268:	4072      	eors	r2, r6
   8326a:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
   8326e:	ea25 0202 	bic.w	r2, r5, r2
   83272:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   83276:	f103 0304 	add.w	r3, r3, #4
   8327a:	d1d9      	bne.n	83230 <memchr+0x34>
   8327c:	3c04      	subs	r4, #4
   8327e:	2c03      	cmp	r4, #3
   83280:	4618      	mov	r0, r3
   83282:	d8ef      	bhi.n	83264 <memchr+0x68>
   83284:	e7d4      	b.n	83230 <memchr+0x34>
   83286:	4614      	mov	r4, r2
   83288:	e7d0      	b.n	8322c <memchr+0x30>
   8328a:	4620      	mov	r0, r4
   8328c:	e7e3      	b.n	83256 <memchr+0x5a>
   8328e:	bf00      	nop

00083290 <memcpy>:
   83290:	4684      	mov	ip, r0
   83292:	ea41 0300 	orr.w	r3, r1, r0
   83296:	f013 0303 	ands.w	r3, r3, #3
   8329a:	d149      	bne.n	83330 <memcpy+0xa0>
   8329c:	3a40      	subs	r2, #64	; 0x40
   8329e:	d323      	bcc.n	832e8 <memcpy+0x58>
   832a0:	680b      	ldr	r3, [r1, #0]
   832a2:	6003      	str	r3, [r0, #0]
   832a4:	684b      	ldr	r3, [r1, #4]
   832a6:	6043      	str	r3, [r0, #4]
   832a8:	688b      	ldr	r3, [r1, #8]
   832aa:	6083      	str	r3, [r0, #8]
   832ac:	68cb      	ldr	r3, [r1, #12]
   832ae:	60c3      	str	r3, [r0, #12]
   832b0:	690b      	ldr	r3, [r1, #16]
   832b2:	6103      	str	r3, [r0, #16]
   832b4:	694b      	ldr	r3, [r1, #20]
   832b6:	6143      	str	r3, [r0, #20]
   832b8:	698b      	ldr	r3, [r1, #24]
   832ba:	6183      	str	r3, [r0, #24]
   832bc:	69cb      	ldr	r3, [r1, #28]
   832be:	61c3      	str	r3, [r0, #28]
   832c0:	6a0b      	ldr	r3, [r1, #32]
   832c2:	6203      	str	r3, [r0, #32]
   832c4:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   832c6:	6243      	str	r3, [r0, #36]	; 0x24
   832c8:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   832ca:	6283      	str	r3, [r0, #40]	; 0x28
   832cc:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   832ce:	62c3      	str	r3, [r0, #44]	; 0x2c
   832d0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   832d2:	6303      	str	r3, [r0, #48]	; 0x30
   832d4:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   832d6:	6343      	str	r3, [r0, #52]	; 0x34
   832d8:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   832da:	6383      	str	r3, [r0, #56]	; 0x38
   832dc:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   832de:	63c3      	str	r3, [r0, #60]	; 0x3c
   832e0:	3040      	adds	r0, #64	; 0x40
   832e2:	3140      	adds	r1, #64	; 0x40
   832e4:	3a40      	subs	r2, #64	; 0x40
   832e6:	d2db      	bcs.n	832a0 <memcpy+0x10>
   832e8:	3230      	adds	r2, #48	; 0x30
   832ea:	d30b      	bcc.n	83304 <memcpy+0x74>
   832ec:	680b      	ldr	r3, [r1, #0]
   832ee:	6003      	str	r3, [r0, #0]
   832f0:	684b      	ldr	r3, [r1, #4]
   832f2:	6043      	str	r3, [r0, #4]
   832f4:	688b      	ldr	r3, [r1, #8]
   832f6:	6083      	str	r3, [r0, #8]
   832f8:	68cb      	ldr	r3, [r1, #12]
   832fa:	60c3      	str	r3, [r0, #12]
   832fc:	3010      	adds	r0, #16
   832fe:	3110      	adds	r1, #16
   83300:	3a10      	subs	r2, #16
   83302:	d2f3      	bcs.n	832ec <memcpy+0x5c>
   83304:	320c      	adds	r2, #12
   83306:	d305      	bcc.n	83314 <memcpy+0x84>
   83308:	f851 3b04 	ldr.w	r3, [r1], #4
   8330c:	f840 3b04 	str.w	r3, [r0], #4
   83310:	3a04      	subs	r2, #4
   83312:	d2f9      	bcs.n	83308 <memcpy+0x78>
   83314:	3204      	adds	r2, #4
   83316:	d008      	beq.n	8332a <memcpy+0x9a>
   83318:	07d2      	lsls	r2, r2, #31
   8331a:	bf1c      	itt	ne
   8331c:	f811 3b01 	ldrbne.w	r3, [r1], #1
   83320:	f800 3b01 	strbne.w	r3, [r0], #1
   83324:	d301      	bcc.n	8332a <memcpy+0x9a>
   83326:	880b      	ldrh	r3, [r1, #0]
   83328:	8003      	strh	r3, [r0, #0]
   8332a:	4660      	mov	r0, ip
   8332c:	4770      	bx	lr
   8332e:	bf00      	nop
   83330:	2a08      	cmp	r2, #8
   83332:	d313      	bcc.n	8335c <memcpy+0xcc>
   83334:	078b      	lsls	r3, r1, #30
   83336:	d0b1      	beq.n	8329c <memcpy+0xc>
   83338:	f010 0303 	ands.w	r3, r0, #3
   8333c:	d0ae      	beq.n	8329c <memcpy+0xc>
   8333e:	f1c3 0304 	rsb	r3, r3, #4
   83342:	1ad2      	subs	r2, r2, r3
   83344:	07db      	lsls	r3, r3, #31
   83346:	bf1c      	itt	ne
   83348:	f811 3b01 	ldrbne.w	r3, [r1], #1
   8334c:	f800 3b01 	strbne.w	r3, [r0], #1
   83350:	d3a4      	bcc.n	8329c <memcpy+0xc>
   83352:	f831 3b02 	ldrh.w	r3, [r1], #2
   83356:	f820 3b02 	strh.w	r3, [r0], #2
   8335a:	e79f      	b.n	8329c <memcpy+0xc>
   8335c:	3a04      	subs	r2, #4
   8335e:	d3d9      	bcc.n	83314 <memcpy+0x84>
   83360:	3a01      	subs	r2, #1
   83362:	f811 3b01 	ldrb.w	r3, [r1], #1
   83366:	f800 3b01 	strb.w	r3, [r0], #1
   8336a:	d2f9      	bcs.n	83360 <memcpy+0xd0>
   8336c:	780b      	ldrb	r3, [r1, #0]
   8336e:	7003      	strb	r3, [r0, #0]
   83370:	784b      	ldrb	r3, [r1, #1]
   83372:	7043      	strb	r3, [r0, #1]
   83374:	788b      	ldrb	r3, [r1, #2]
   83376:	7083      	strb	r3, [r0, #2]
   83378:	4660      	mov	r0, ip
   8337a:	4770      	bx	lr

0008337c <memmove>:
   8337c:	4288      	cmp	r0, r1
   8337e:	b4f0      	push	{r4, r5, r6, r7}
   83380:	d910      	bls.n	833a4 <memmove+0x28>
   83382:	188c      	adds	r4, r1, r2
   83384:	42a0      	cmp	r0, r4
   83386:	d20d      	bcs.n	833a4 <memmove+0x28>
   83388:	1885      	adds	r5, r0, r2
   8338a:	1e53      	subs	r3, r2, #1
   8338c:	b142      	cbz	r2, 833a0 <memmove+0x24>
   8338e:	4621      	mov	r1, r4
   83390:	462a      	mov	r2, r5
   83392:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
   83396:	3b01      	subs	r3, #1
   83398:	f802 4d01 	strb.w	r4, [r2, #-1]!
   8339c:	1c5c      	adds	r4, r3, #1
   8339e:	d1f8      	bne.n	83392 <memmove+0x16>
   833a0:	bcf0      	pop	{r4, r5, r6, r7}
   833a2:	4770      	bx	lr
   833a4:	2a0f      	cmp	r2, #15
   833a6:	d944      	bls.n	83432 <memmove+0xb6>
   833a8:	ea40 0301 	orr.w	r3, r0, r1
   833ac:	079b      	lsls	r3, r3, #30
   833ae:	d144      	bne.n	8343a <memmove+0xbe>
   833b0:	f1a2 0710 	sub.w	r7, r2, #16
   833b4:	093f      	lsrs	r7, r7, #4
   833b6:	eb00 1607 	add.w	r6, r0, r7, lsl #4
   833ba:	3610      	adds	r6, #16
   833bc:	460c      	mov	r4, r1
   833be:	4603      	mov	r3, r0
   833c0:	6825      	ldr	r5, [r4, #0]
   833c2:	3310      	adds	r3, #16
   833c4:	f843 5c10 	str.w	r5, [r3, #-16]
   833c8:	6865      	ldr	r5, [r4, #4]
   833ca:	3410      	adds	r4, #16
   833cc:	f843 5c0c 	str.w	r5, [r3, #-12]
   833d0:	f854 5c08 	ldr.w	r5, [r4, #-8]
   833d4:	f843 5c08 	str.w	r5, [r3, #-8]
   833d8:	f854 5c04 	ldr.w	r5, [r4, #-4]
   833dc:	f843 5c04 	str.w	r5, [r3, #-4]
   833e0:	42b3      	cmp	r3, r6
   833e2:	d1ed      	bne.n	833c0 <memmove+0x44>
   833e4:	1c7b      	adds	r3, r7, #1
   833e6:	f002 0c0f 	and.w	ip, r2, #15
   833ea:	011b      	lsls	r3, r3, #4
   833ec:	f1bc 0f03 	cmp.w	ip, #3
   833f0:	4419      	add	r1, r3
   833f2:	4403      	add	r3, r0
   833f4:	d923      	bls.n	8343e <memmove+0xc2>
   833f6:	460e      	mov	r6, r1
   833f8:	461d      	mov	r5, r3
   833fa:	4664      	mov	r4, ip
   833fc:	f856 7b04 	ldr.w	r7, [r6], #4
   83400:	3c04      	subs	r4, #4
   83402:	2c03      	cmp	r4, #3
   83404:	f845 7b04 	str.w	r7, [r5], #4
   83408:	d8f8      	bhi.n	833fc <memmove+0x80>
   8340a:	f1ac 0404 	sub.w	r4, ip, #4
   8340e:	f024 0403 	bic.w	r4, r4, #3
   83412:	3404      	adds	r4, #4
   83414:	f002 0203 	and.w	r2, r2, #3
   83418:	4423      	add	r3, r4
   8341a:	4421      	add	r1, r4
   8341c:	2a00      	cmp	r2, #0
   8341e:	d0bf      	beq.n	833a0 <memmove+0x24>
   83420:	441a      	add	r2, r3
   83422:	f811 4b01 	ldrb.w	r4, [r1], #1
   83426:	f803 4b01 	strb.w	r4, [r3], #1
   8342a:	4293      	cmp	r3, r2
   8342c:	d1f9      	bne.n	83422 <memmove+0xa6>
   8342e:	bcf0      	pop	{r4, r5, r6, r7}
   83430:	4770      	bx	lr
   83432:	4603      	mov	r3, r0
   83434:	2a00      	cmp	r2, #0
   83436:	d1f3      	bne.n	83420 <memmove+0xa4>
   83438:	e7b2      	b.n	833a0 <memmove+0x24>
   8343a:	4603      	mov	r3, r0
   8343c:	e7f0      	b.n	83420 <memmove+0xa4>
   8343e:	4662      	mov	r2, ip
   83440:	2a00      	cmp	r2, #0
   83442:	d1ed      	bne.n	83420 <memmove+0xa4>
   83444:	e7ac      	b.n	833a0 <memmove+0x24>
   83446:	bf00      	nop

00083448 <__malloc_lock>:
   83448:	4770      	bx	lr
   8344a:	bf00      	nop

0008344c <__malloc_unlock>:
   8344c:	4770      	bx	lr
   8344e:	bf00      	nop

00083450 <_realloc_r>:
   83450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83454:	460c      	mov	r4, r1
   83456:	b083      	sub	sp, #12
   83458:	4690      	mov	r8, r2
   8345a:	4681      	mov	r9, r0
   8345c:	2900      	cmp	r1, #0
   8345e:	f000 80ba 	beq.w	835d6 <_realloc_r+0x186>
   83462:	f7ff fff1 	bl	83448 <__malloc_lock>
   83466:	f108 060b 	add.w	r6, r8, #11
   8346a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8346e:	2e16      	cmp	r6, #22
   83470:	f023 0503 	bic.w	r5, r3, #3
   83474:	f1a4 0708 	sub.w	r7, r4, #8
   83478:	d84b      	bhi.n	83512 <_realloc_r+0xc2>
   8347a:	2110      	movs	r1, #16
   8347c:	460e      	mov	r6, r1
   8347e:	45b0      	cmp	r8, r6
   83480:	d84c      	bhi.n	8351c <_realloc_r+0xcc>
   83482:	428d      	cmp	r5, r1
   83484:	da51      	bge.n	8352a <_realloc_r+0xda>
   83486:	f8df b384 	ldr.w	fp, [pc, #900]	; 8380c <_realloc_r+0x3bc>
   8348a:	1978      	adds	r0, r7, r5
   8348c:	f8db e008 	ldr.w	lr, [fp, #8]
   83490:	4586      	cmp	lr, r0
   83492:	f000 80a6 	beq.w	835e2 <_realloc_r+0x192>
   83496:	6842      	ldr	r2, [r0, #4]
   83498:	f022 0c01 	bic.w	ip, r2, #1
   8349c:	4484      	add	ip, r0
   8349e:	f8dc c004 	ldr.w	ip, [ip, #4]
   834a2:	f01c 0f01 	tst.w	ip, #1
   834a6:	d054      	beq.n	83552 <_realloc_r+0x102>
   834a8:	2200      	movs	r2, #0
   834aa:	4610      	mov	r0, r2
   834ac:	07db      	lsls	r3, r3, #31
   834ae:	d46f      	bmi.n	83590 <_realloc_r+0x140>
   834b0:	f854 3c08 	ldr.w	r3, [r4, #-8]
   834b4:	ebc3 0a07 	rsb	sl, r3, r7
   834b8:	f8da 3004 	ldr.w	r3, [sl, #4]
   834bc:	f023 0303 	bic.w	r3, r3, #3
   834c0:	442b      	add	r3, r5
   834c2:	2800      	cmp	r0, #0
   834c4:	d062      	beq.n	8358c <_realloc_r+0x13c>
   834c6:	4570      	cmp	r0, lr
   834c8:	f000 80e9 	beq.w	8369e <_realloc_r+0x24e>
   834cc:	eb02 0e03 	add.w	lr, r2, r3
   834d0:	458e      	cmp	lr, r1
   834d2:	db5b      	blt.n	8358c <_realloc_r+0x13c>
   834d4:	68c3      	ldr	r3, [r0, #12]
   834d6:	6882      	ldr	r2, [r0, #8]
   834d8:	46d0      	mov	r8, sl
   834da:	60d3      	str	r3, [r2, #12]
   834dc:	609a      	str	r2, [r3, #8]
   834de:	f858 1f08 	ldr.w	r1, [r8, #8]!
   834e2:	f8da 300c 	ldr.w	r3, [sl, #12]
   834e6:	1f2a      	subs	r2, r5, #4
   834e8:	2a24      	cmp	r2, #36	; 0x24
   834ea:	60cb      	str	r3, [r1, #12]
   834ec:	6099      	str	r1, [r3, #8]
   834ee:	f200 8123 	bhi.w	83738 <_realloc_r+0x2e8>
   834f2:	2a13      	cmp	r2, #19
   834f4:	f240 80b0 	bls.w	83658 <_realloc_r+0x208>
   834f8:	6823      	ldr	r3, [r4, #0]
   834fa:	2a1b      	cmp	r2, #27
   834fc:	f8ca 3008 	str.w	r3, [sl, #8]
   83500:	6863      	ldr	r3, [r4, #4]
   83502:	f8ca 300c 	str.w	r3, [sl, #12]
   83506:	f200 812b 	bhi.w	83760 <_realloc_r+0x310>
   8350a:	3408      	adds	r4, #8
   8350c:	f10a 0310 	add.w	r3, sl, #16
   83510:	e0a3      	b.n	8365a <_realloc_r+0x20a>
   83512:	f026 0607 	bic.w	r6, r6, #7
   83516:	2e00      	cmp	r6, #0
   83518:	4631      	mov	r1, r6
   8351a:	dab0      	bge.n	8347e <_realloc_r+0x2e>
   8351c:	230c      	movs	r3, #12
   8351e:	2000      	movs	r0, #0
   83520:	f8c9 3000 	str.w	r3, [r9]
   83524:	b003      	add	sp, #12
   83526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8352a:	46a0      	mov	r8, r4
   8352c:	1baa      	subs	r2, r5, r6
   8352e:	2a0f      	cmp	r2, #15
   83530:	f003 0301 	and.w	r3, r3, #1
   83534:	d81a      	bhi.n	8356c <_realloc_r+0x11c>
   83536:	432b      	orrs	r3, r5
   83538:	607b      	str	r3, [r7, #4]
   8353a:	443d      	add	r5, r7
   8353c:	686b      	ldr	r3, [r5, #4]
   8353e:	f043 0301 	orr.w	r3, r3, #1
   83542:	606b      	str	r3, [r5, #4]
   83544:	4648      	mov	r0, r9
   83546:	f7ff ff81 	bl	8344c <__malloc_unlock>
   8354a:	4640      	mov	r0, r8
   8354c:	b003      	add	sp, #12
   8354e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83552:	f022 0203 	bic.w	r2, r2, #3
   83556:	eb02 0c05 	add.w	ip, r2, r5
   8355a:	458c      	cmp	ip, r1
   8355c:	dba6      	blt.n	834ac <_realloc_r+0x5c>
   8355e:	68c2      	ldr	r2, [r0, #12]
   83560:	6881      	ldr	r1, [r0, #8]
   83562:	46a0      	mov	r8, r4
   83564:	60ca      	str	r2, [r1, #12]
   83566:	4665      	mov	r5, ip
   83568:	6091      	str	r1, [r2, #8]
   8356a:	e7df      	b.n	8352c <_realloc_r+0xdc>
   8356c:	19b9      	adds	r1, r7, r6
   8356e:	4333      	orrs	r3, r6
   83570:	f042 0001 	orr.w	r0, r2, #1
   83574:	607b      	str	r3, [r7, #4]
   83576:	440a      	add	r2, r1
   83578:	6048      	str	r0, [r1, #4]
   8357a:	6853      	ldr	r3, [r2, #4]
   8357c:	3108      	adds	r1, #8
   8357e:	f043 0301 	orr.w	r3, r3, #1
   83582:	6053      	str	r3, [r2, #4]
   83584:	4648      	mov	r0, r9
   83586:	f7ff f89f 	bl	826c8 <_free_r>
   8358a:	e7db      	b.n	83544 <_realloc_r+0xf4>
   8358c:	428b      	cmp	r3, r1
   8358e:	da33      	bge.n	835f8 <_realloc_r+0x1a8>
   83590:	4641      	mov	r1, r8
   83592:	4648      	mov	r0, r9
   83594:	f7ff fb96 	bl	82cc4 <_malloc_r>
   83598:	4680      	mov	r8, r0
   8359a:	2800      	cmp	r0, #0
   8359c:	d0d2      	beq.n	83544 <_realloc_r+0xf4>
   8359e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   835a2:	f1a0 0108 	sub.w	r1, r0, #8
   835a6:	f023 0201 	bic.w	r2, r3, #1
   835aa:	443a      	add	r2, r7
   835ac:	4291      	cmp	r1, r2
   835ae:	f000 80bc 	beq.w	8372a <_realloc_r+0x2da>
   835b2:	1f2a      	subs	r2, r5, #4
   835b4:	2a24      	cmp	r2, #36	; 0x24
   835b6:	d86e      	bhi.n	83696 <_realloc_r+0x246>
   835b8:	2a13      	cmp	r2, #19
   835ba:	d842      	bhi.n	83642 <_realloc_r+0x1f2>
   835bc:	4603      	mov	r3, r0
   835be:	4622      	mov	r2, r4
   835c0:	6811      	ldr	r1, [r2, #0]
   835c2:	6019      	str	r1, [r3, #0]
   835c4:	6851      	ldr	r1, [r2, #4]
   835c6:	6059      	str	r1, [r3, #4]
   835c8:	6892      	ldr	r2, [r2, #8]
   835ca:	609a      	str	r2, [r3, #8]
   835cc:	4621      	mov	r1, r4
   835ce:	4648      	mov	r0, r9
   835d0:	f7ff f87a 	bl	826c8 <_free_r>
   835d4:	e7b6      	b.n	83544 <_realloc_r+0xf4>
   835d6:	4611      	mov	r1, r2
   835d8:	b003      	add	sp, #12
   835da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   835de:	f7ff bb71 	b.w	82cc4 <_malloc_r>
   835e2:	f8de 2004 	ldr.w	r2, [lr, #4]
   835e6:	f106 0c10 	add.w	ip, r6, #16
   835ea:	f022 0203 	bic.w	r2, r2, #3
   835ee:	1950      	adds	r0, r2, r5
   835f0:	4560      	cmp	r0, ip
   835f2:	da3d      	bge.n	83670 <_realloc_r+0x220>
   835f4:	4670      	mov	r0, lr
   835f6:	e759      	b.n	834ac <_realloc_r+0x5c>
   835f8:	46d0      	mov	r8, sl
   835fa:	f858 0f08 	ldr.w	r0, [r8, #8]!
   835fe:	f8da 100c 	ldr.w	r1, [sl, #12]
   83602:	1f2a      	subs	r2, r5, #4
   83604:	2a24      	cmp	r2, #36	; 0x24
   83606:	60c1      	str	r1, [r0, #12]
   83608:	6088      	str	r0, [r1, #8]
   8360a:	f200 80a0 	bhi.w	8374e <_realloc_r+0x2fe>
   8360e:	2a13      	cmp	r2, #19
   83610:	f240 809b 	bls.w	8374a <_realloc_r+0x2fa>
   83614:	6821      	ldr	r1, [r4, #0]
   83616:	2a1b      	cmp	r2, #27
   83618:	f8ca 1008 	str.w	r1, [sl, #8]
   8361c:	6861      	ldr	r1, [r4, #4]
   8361e:	f8ca 100c 	str.w	r1, [sl, #12]
   83622:	f200 80b2 	bhi.w	8378a <_realloc_r+0x33a>
   83626:	3408      	adds	r4, #8
   83628:	f10a 0210 	add.w	r2, sl, #16
   8362c:	6821      	ldr	r1, [r4, #0]
   8362e:	461d      	mov	r5, r3
   83630:	6011      	str	r1, [r2, #0]
   83632:	6861      	ldr	r1, [r4, #4]
   83634:	4657      	mov	r7, sl
   83636:	6051      	str	r1, [r2, #4]
   83638:	68a3      	ldr	r3, [r4, #8]
   8363a:	6093      	str	r3, [r2, #8]
   8363c:	f8da 3004 	ldr.w	r3, [sl, #4]
   83640:	e774      	b.n	8352c <_realloc_r+0xdc>
   83642:	6823      	ldr	r3, [r4, #0]
   83644:	2a1b      	cmp	r2, #27
   83646:	6003      	str	r3, [r0, #0]
   83648:	6863      	ldr	r3, [r4, #4]
   8364a:	6043      	str	r3, [r0, #4]
   8364c:	d862      	bhi.n	83714 <_realloc_r+0x2c4>
   8364e:	f100 0308 	add.w	r3, r0, #8
   83652:	f104 0208 	add.w	r2, r4, #8
   83656:	e7b3      	b.n	835c0 <_realloc_r+0x170>
   83658:	4643      	mov	r3, r8
   8365a:	6822      	ldr	r2, [r4, #0]
   8365c:	4675      	mov	r5, lr
   8365e:	601a      	str	r2, [r3, #0]
   83660:	6862      	ldr	r2, [r4, #4]
   83662:	4657      	mov	r7, sl
   83664:	605a      	str	r2, [r3, #4]
   83666:	68a2      	ldr	r2, [r4, #8]
   83668:	609a      	str	r2, [r3, #8]
   8366a:	f8da 3004 	ldr.w	r3, [sl, #4]
   8366e:	e75d      	b.n	8352c <_realloc_r+0xdc>
   83670:	1b83      	subs	r3, r0, r6
   83672:	4437      	add	r7, r6
   83674:	f043 0301 	orr.w	r3, r3, #1
   83678:	f8cb 7008 	str.w	r7, [fp, #8]
   8367c:	607b      	str	r3, [r7, #4]
   8367e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   83682:	4648      	mov	r0, r9
   83684:	f003 0301 	and.w	r3, r3, #1
   83688:	431e      	orrs	r6, r3
   8368a:	f844 6c04 	str.w	r6, [r4, #-4]
   8368e:	f7ff fedd 	bl	8344c <__malloc_unlock>
   83692:	4620      	mov	r0, r4
   83694:	e75a      	b.n	8354c <_realloc_r+0xfc>
   83696:	4621      	mov	r1, r4
   83698:	f7ff fe70 	bl	8337c <memmove>
   8369c:	e796      	b.n	835cc <_realloc_r+0x17c>
   8369e:	eb02 0c03 	add.w	ip, r2, r3
   836a2:	f106 0210 	add.w	r2, r6, #16
   836a6:	4594      	cmp	ip, r2
   836a8:	f6ff af70 	blt.w	8358c <_realloc_r+0x13c>
   836ac:	4657      	mov	r7, sl
   836ae:	f857 1f08 	ldr.w	r1, [r7, #8]!
   836b2:	f8da 300c 	ldr.w	r3, [sl, #12]
   836b6:	1f2a      	subs	r2, r5, #4
   836b8:	2a24      	cmp	r2, #36	; 0x24
   836ba:	60cb      	str	r3, [r1, #12]
   836bc:	6099      	str	r1, [r3, #8]
   836be:	f200 8086 	bhi.w	837ce <_realloc_r+0x37e>
   836c2:	2a13      	cmp	r2, #19
   836c4:	d977      	bls.n	837b6 <_realloc_r+0x366>
   836c6:	6823      	ldr	r3, [r4, #0]
   836c8:	2a1b      	cmp	r2, #27
   836ca:	f8ca 3008 	str.w	r3, [sl, #8]
   836ce:	6863      	ldr	r3, [r4, #4]
   836d0:	f8ca 300c 	str.w	r3, [sl, #12]
   836d4:	f200 8084 	bhi.w	837e0 <_realloc_r+0x390>
   836d8:	3408      	adds	r4, #8
   836da:	f10a 0310 	add.w	r3, sl, #16
   836de:	6822      	ldr	r2, [r4, #0]
   836e0:	601a      	str	r2, [r3, #0]
   836e2:	6862      	ldr	r2, [r4, #4]
   836e4:	605a      	str	r2, [r3, #4]
   836e6:	68a2      	ldr	r2, [r4, #8]
   836e8:	609a      	str	r2, [r3, #8]
   836ea:	ebc6 020c 	rsb	r2, r6, ip
   836ee:	eb0a 0306 	add.w	r3, sl, r6
   836f2:	f042 0201 	orr.w	r2, r2, #1
   836f6:	f8cb 3008 	str.w	r3, [fp, #8]
   836fa:	605a      	str	r2, [r3, #4]
   836fc:	f8da 3004 	ldr.w	r3, [sl, #4]
   83700:	4648      	mov	r0, r9
   83702:	f003 0301 	and.w	r3, r3, #1
   83706:	431e      	orrs	r6, r3
   83708:	f8ca 6004 	str.w	r6, [sl, #4]
   8370c:	f7ff fe9e 	bl	8344c <__malloc_unlock>
   83710:	4638      	mov	r0, r7
   83712:	e71b      	b.n	8354c <_realloc_r+0xfc>
   83714:	68a3      	ldr	r3, [r4, #8]
   83716:	2a24      	cmp	r2, #36	; 0x24
   83718:	6083      	str	r3, [r0, #8]
   8371a:	68e3      	ldr	r3, [r4, #12]
   8371c:	60c3      	str	r3, [r0, #12]
   8371e:	d02b      	beq.n	83778 <_realloc_r+0x328>
   83720:	f100 0310 	add.w	r3, r0, #16
   83724:	f104 0210 	add.w	r2, r4, #16
   83728:	e74a      	b.n	835c0 <_realloc_r+0x170>
   8372a:	f850 2c04 	ldr.w	r2, [r0, #-4]
   8372e:	46a0      	mov	r8, r4
   83730:	f022 0203 	bic.w	r2, r2, #3
   83734:	4415      	add	r5, r2
   83736:	e6f9      	b.n	8352c <_realloc_r+0xdc>
   83738:	4621      	mov	r1, r4
   8373a:	4640      	mov	r0, r8
   8373c:	4675      	mov	r5, lr
   8373e:	4657      	mov	r7, sl
   83740:	f7ff fe1c 	bl	8337c <memmove>
   83744:	f8da 3004 	ldr.w	r3, [sl, #4]
   83748:	e6f0      	b.n	8352c <_realloc_r+0xdc>
   8374a:	4642      	mov	r2, r8
   8374c:	e76e      	b.n	8362c <_realloc_r+0x1dc>
   8374e:	4621      	mov	r1, r4
   83750:	4640      	mov	r0, r8
   83752:	461d      	mov	r5, r3
   83754:	4657      	mov	r7, sl
   83756:	f7ff fe11 	bl	8337c <memmove>
   8375a:	f8da 3004 	ldr.w	r3, [sl, #4]
   8375e:	e6e5      	b.n	8352c <_realloc_r+0xdc>
   83760:	68a3      	ldr	r3, [r4, #8]
   83762:	2a24      	cmp	r2, #36	; 0x24
   83764:	f8ca 3010 	str.w	r3, [sl, #16]
   83768:	68e3      	ldr	r3, [r4, #12]
   8376a:	f8ca 3014 	str.w	r3, [sl, #20]
   8376e:	d018      	beq.n	837a2 <_realloc_r+0x352>
   83770:	3410      	adds	r4, #16
   83772:	f10a 0318 	add.w	r3, sl, #24
   83776:	e770      	b.n	8365a <_realloc_r+0x20a>
   83778:	6922      	ldr	r2, [r4, #16]
   8377a:	f100 0318 	add.w	r3, r0, #24
   8377e:	6102      	str	r2, [r0, #16]
   83780:	6961      	ldr	r1, [r4, #20]
   83782:	f104 0218 	add.w	r2, r4, #24
   83786:	6141      	str	r1, [r0, #20]
   83788:	e71a      	b.n	835c0 <_realloc_r+0x170>
   8378a:	68a1      	ldr	r1, [r4, #8]
   8378c:	2a24      	cmp	r2, #36	; 0x24
   8378e:	f8ca 1010 	str.w	r1, [sl, #16]
   83792:	68e1      	ldr	r1, [r4, #12]
   83794:	f8ca 1014 	str.w	r1, [sl, #20]
   83798:	d00f      	beq.n	837ba <_realloc_r+0x36a>
   8379a:	3410      	adds	r4, #16
   8379c:	f10a 0218 	add.w	r2, sl, #24
   837a0:	e744      	b.n	8362c <_realloc_r+0x1dc>
   837a2:	6922      	ldr	r2, [r4, #16]
   837a4:	f10a 0320 	add.w	r3, sl, #32
   837a8:	f8ca 2018 	str.w	r2, [sl, #24]
   837ac:	6962      	ldr	r2, [r4, #20]
   837ae:	3418      	adds	r4, #24
   837b0:	f8ca 201c 	str.w	r2, [sl, #28]
   837b4:	e751      	b.n	8365a <_realloc_r+0x20a>
   837b6:	463b      	mov	r3, r7
   837b8:	e791      	b.n	836de <_realloc_r+0x28e>
   837ba:	6921      	ldr	r1, [r4, #16]
   837bc:	f10a 0220 	add.w	r2, sl, #32
   837c0:	f8ca 1018 	str.w	r1, [sl, #24]
   837c4:	6961      	ldr	r1, [r4, #20]
   837c6:	3418      	adds	r4, #24
   837c8:	f8ca 101c 	str.w	r1, [sl, #28]
   837cc:	e72e      	b.n	8362c <_realloc_r+0x1dc>
   837ce:	4621      	mov	r1, r4
   837d0:	4638      	mov	r0, r7
   837d2:	f8cd c004 	str.w	ip, [sp, #4]
   837d6:	f7ff fdd1 	bl	8337c <memmove>
   837da:	f8dd c004 	ldr.w	ip, [sp, #4]
   837de:	e784      	b.n	836ea <_realloc_r+0x29a>
   837e0:	68a3      	ldr	r3, [r4, #8]
   837e2:	2a24      	cmp	r2, #36	; 0x24
   837e4:	f8ca 3010 	str.w	r3, [sl, #16]
   837e8:	68e3      	ldr	r3, [r4, #12]
   837ea:	f8ca 3014 	str.w	r3, [sl, #20]
   837ee:	d003      	beq.n	837f8 <_realloc_r+0x3a8>
   837f0:	3410      	adds	r4, #16
   837f2:	f10a 0318 	add.w	r3, sl, #24
   837f6:	e772      	b.n	836de <_realloc_r+0x28e>
   837f8:	6922      	ldr	r2, [r4, #16]
   837fa:	f10a 0320 	add.w	r3, sl, #32
   837fe:	f8ca 2018 	str.w	r2, [sl, #24]
   83802:	6962      	ldr	r2, [r4, #20]
   83804:	3418      	adds	r4, #24
   83806:	f8ca 201c 	str.w	r2, [sl, #28]
   8380a:	e768      	b.n	836de <_realloc_r+0x28e>
   8380c:	20070590 	.word	0x20070590

00083810 <_sbrk_r>:
   83810:	b538      	push	{r3, r4, r5, lr}
   83812:	4c07      	ldr	r4, [pc, #28]	; (83830 <_sbrk_r+0x20>)
   83814:	2300      	movs	r3, #0
   83816:	4605      	mov	r5, r0
   83818:	4608      	mov	r0, r1
   8381a:	6023      	str	r3, [r4, #0]
   8381c:	f7fd fb1e 	bl	80e5c <_sbrk>
   83820:	1c43      	adds	r3, r0, #1
   83822:	d000      	beq.n	83826 <_sbrk_r+0x16>
   83824:	bd38      	pop	{r3, r4, r5, pc}
   83826:	6823      	ldr	r3, [r4, #0]
   83828:	2b00      	cmp	r3, #0
   8382a:	d0fb      	beq.n	83824 <_sbrk_r+0x14>
   8382c:	602b      	str	r3, [r5, #0]
   8382e:	bd38      	pop	{r3, r4, r5, pc}
   83830:	20070b24 	.word	0x20070b24

00083834 <__sread>:
   83834:	b510      	push	{r4, lr}
   83836:	460c      	mov	r4, r1
   83838:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8383c:	f000 f9c2 	bl	83bc4 <_read_r>
   83840:	2800      	cmp	r0, #0
   83842:	db03      	blt.n	8384c <__sread+0x18>
   83844:	6d23      	ldr	r3, [r4, #80]	; 0x50
   83846:	4403      	add	r3, r0
   83848:	6523      	str	r3, [r4, #80]	; 0x50
   8384a:	bd10      	pop	{r4, pc}
   8384c:	89a3      	ldrh	r3, [r4, #12]
   8384e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   83852:	81a3      	strh	r3, [r4, #12]
   83854:	bd10      	pop	{r4, pc}
   83856:	bf00      	nop

00083858 <__swrite>:
   83858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8385c:	460c      	mov	r4, r1
   8385e:	8989      	ldrh	r1, [r1, #12]
   83860:	461d      	mov	r5, r3
   83862:	05cb      	lsls	r3, r1, #23
   83864:	4616      	mov	r6, r2
   83866:	4607      	mov	r7, r0
   83868:	d506      	bpl.n	83878 <__swrite+0x20>
   8386a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8386e:	2200      	movs	r2, #0
   83870:	2302      	movs	r3, #2
   83872:	f000 f993 	bl	83b9c <_lseek_r>
   83876:	89a1      	ldrh	r1, [r4, #12]
   83878:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   8387c:	81a1      	strh	r1, [r4, #12]
   8387e:	4638      	mov	r0, r7
   83880:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   83884:	4632      	mov	r2, r6
   83886:	462b      	mov	r3, r5
   83888:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8388c:	f000 b89e 	b.w	839cc <_write_r>

00083890 <__sseek>:
   83890:	b510      	push	{r4, lr}
   83892:	460c      	mov	r4, r1
   83894:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83898:	f000 f980 	bl	83b9c <_lseek_r>
   8389c:	89a3      	ldrh	r3, [r4, #12]
   8389e:	1c42      	adds	r2, r0, #1
   838a0:	bf0e      	itee	eq
   838a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   838a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   838aa:	6520      	strne	r0, [r4, #80]	; 0x50
   838ac:	81a3      	strh	r3, [r4, #12]
   838ae:	bd10      	pop	{r4, pc}

000838b0 <__sclose>:
   838b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   838b4:	f000 b8f2 	b.w	83a9c <_close_r>

000838b8 <__swbuf_r>:
   838b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   838ba:	460d      	mov	r5, r1
   838bc:	4614      	mov	r4, r2
   838be:	4607      	mov	r7, r0
   838c0:	b110      	cbz	r0, 838c8 <__swbuf_r+0x10>
   838c2:	6b83      	ldr	r3, [r0, #56]	; 0x38
   838c4:	2b00      	cmp	r3, #0
   838c6:	d048      	beq.n	8395a <__swbuf_r+0xa2>
   838c8:	89a2      	ldrh	r2, [r4, #12]
   838ca:	69a0      	ldr	r0, [r4, #24]
   838cc:	b293      	uxth	r3, r2
   838ce:	60a0      	str	r0, [r4, #8]
   838d0:	0718      	lsls	r0, r3, #28
   838d2:	d538      	bpl.n	83946 <__swbuf_r+0x8e>
   838d4:	6926      	ldr	r6, [r4, #16]
   838d6:	2e00      	cmp	r6, #0
   838d8:	d035      	beq.n	83946 <__swbuf_r+0x8e>
   838da:	0499      	lsls	r1, r3, #18
   838dc:	b2ed      	uxtb	r5, r5
   838de:	d515      	bpl.n	8390c <__swbuf_r+0x54>
   838e0:	6823      	ldr	r3, [r4, #0]
   838e2:	6962      	ldr	r2, [r4, #20]
   838e4:	1b9e      	subs	r6, r3, r6
   838e6:	4296      	cmp	r6, r2
   838e8:	da1c      	bge.n	83924 <__swbuf_r+0x6c>
   838ea:	3601      	adds	r6, #1
   838ec:	68a2      	ldr	r2, [r4, #8]
   838ee:	1c59      	adds	r1, r3, #1
   838f0:	3a01      	subs	r2, #1
   838f2:	60a2      	str	r2, [r4, #8]
   838f4:	6021      	str	r1, [r4, #0]
   838f6:	701d      	strb	r5, [r3, #0]
   838f8:	6963      	ldr	r3, [r4, #20]
   838fa:	42b3      	cmp	r3, r6
   838fc:	d01a      	beq.n	83934 <__swbuf_r+0x7c>
   838fe:	89a3      	ldrh	r3, [r4, #12]
   83900:	07db      	lsls	r3, r3, #31
   83902:	d501      	bpl.n	83908 <__swbuf_r+0x50>
   83904:	2d0a      	cmp	r5, #10
   83906:	d015      	beq.n	83934 <__swbuf_r+0x7c>
   83908:	4628      	mov	r0, r5
   8390a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8390c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8390e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   83912:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   83916:	6663      	str	r3, [r4, #100]	; 0x64
   83918:	6823      	ldr	r3, [r4, #0]
   8391a:	81a2      	strh	r2, [r4, #12]
   8391c:	6962      	ldr	r2, [r4, #20]
   8391e:	1b9e      	subs	r6, r3, r6
   83920:	4296      	cmp	r6, r2
   83922:	dbe2      	blt.n	838ea <__swbuf_r+0x32>
   83924:	4638      	mov	r0, r7
   83926:	4621      	mov	r1, r4
   83928:	f7fe fd6e 	bl	82408 <_fflush_r>
   8392c:	b940      	cbnz	r0, 83940 <__swbuf_r+0x88>
   8392e:	6823      	ldr	r3, [r4, #0]
   83930:	2601      	movs	r6, #1
   83932:	e7db      	b.n	838ec <__swbuf_r+0x34>
   83934:	4638      	mov	r0, r7
   83936:	4621      	mov	r1, r4
   83938:	f7fe fd66 	bl	82408 <_fflush_r>
   8393c:	2800      	cmp	r0, #0
   8393e:	d0e3      	beq.n	83908 <__swbuf_r+0x50>
   83940:	f04f 30ff 	mov.w	r0, #4294967295
   83944:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83946:	4638      	mov	r0, r7
   83948:	4621      	mov	r1, r4
   8394a:	f7fe fc47 	bl	821dc <__swsetup_r>
   8394e:	2800      	cmp	r0, #0
   83950:	d1f6      	bne.n	83940 <__swbuf_r+0x88>
   83952:	89a2      	ldrh	r2, [r4, #12]
   83954:	6926      	ldr	r6, [r4, #16]
   83956:	b293      	uxth	r3, r2
   83958:	e7bf      	b.n	838da <__swbuf_r+0x22>
   8395a:	f7fe fd71 	bl	82440 <__sinit>
   8395e:	e7b3      	b.n	838c8 <__swbuf_r+0x10>

00083960 <_wcrtomb_r>:
   83960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83964:	461e      	mov	r6, r3
   83966:	b086      	sub	sp, #24
   83968:	460c      	mov	r4, r1
   8396a:	4605      	mov	r5, r0
   8396c:	4617      	mov	r7, r2
   8396e:	4b0f      	ldr	r3, [pc, #60]	; (839ac <_wcrtomb_r+0x4c>)
   83970:	b191      	cbz	r1, 83998 <_wcrtomb_r+0x38>
   83972:	f8d3 8000 	ldr.w	r8, [r3]
   83976:	f7ff f923 	bl	82bc0 <__locale_charset>
   8397a:	9600      	str	r6, [sp, #0]
   8397c:	4603      	mov	r3, r0
   8397e:	4621      	mov	r1, r4
   83980:	463a      	mov	r2, r7
   83982:	4628      	mov	r0, r5
   83984:	47c0      	blx	r8
   83986:	1c43      	adds	r3, r0, #1
   83988:	d103      	bne.n	83992 <_wcrtomb_r+0x32>
   8398a:	2200      	movs	r2, #0
   8398c:	238a      	movs	r3, #138	; 0x8a
   8398e:	6032      	str	r2, [r6, #0]
   83990:	602b      	str	r3, [r5, #0]
   83992:	b006      	add	sp, #24
   83994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83998:	681f      	ldr	r7, [r3, #0]
   8399a:	f7ff f911 	bl	82bc0 <__locale_charset>
   8399e:	9600      	str	r6, [sp, #0]
   839a0:	4603      	mov	r3, r0
   839a2:	4622      	mov	r2, r4
   839a4:	4628      	mov	r0, r5
   839a6:	a903      	add	r1, sp, #12
   839a8:	47b8      	blx	r7
   839aa:	e7ec      	b.n	83986 <_wcrtomb_r+0x26>
   839ac:	200709a0 	.word	0x200709a0

000839b0 <__ascii_wctomb>:
   839b0:	b121      	cbz	r1, 839bc <__ascii_wctomb+0xc>
   839b2:	2aff      	cmp	r2, #255	; 0xff
   839b4:	d804      	bhi.n	839c0 <__ascii_wctomb+0x10>
   839b6:	700a      	strb	r2, [r1, #0]
   839b8:	2001      	movs	r0, #1
   839ba:	4770      	bx	lr
   839bc:	4608      	mov	r0, r1
   839be:	4770      	bx	lr
   839c0:	238a      	movs	r3, #138	; 0x8a
   839c2:	6003      	str	r3, [r0, #0]
   839c4:	f04f 30ff 	mov.w	r0, #4294967295
   839c8:	4770      	bx	lr
   839ca:	bf00      	nop

000839cc <_write_r>:
   839cc:	b570      	push	{r4, r5, r6, lr}
   839ce:	4c08      	ldr	r4, [pc, #32]	; (839f0 <_write_r+0x24>)
   839d0:	4606      	mov	r6, r0
   839d2:	2500      	movs	r5, #0
   839d4:	4608      	mov	r0, r1
   839d6:	4611      	mov	r1, r2
   839d8:	461a      	mov	r2, r3
   839da:	6025      	str	r5, [r4, #0]
   839dc:	f7fc fd4c 	bl	80478 <_write>
   839e0:	1c43      	adds	r3, r0, #1
   839e2:	d000      	beq.n	839e6 <_write_r+0x1a>
   839e4:	bd70      	pop	{r4, r5, r6, pc}
   839e6:	6823      	ldr	r3, [r4, #0]
   839e8:	2b00      	cmp	r3, #0
   839ea:	d0fb      	beq.n	839e4 <_write_r+0x18>
   839ec:	6033      	str	r3, [r6, #0]
   839ee:	bd70      	pop	{r4, r5, r6, pc}
   839f0:	20070b24 	.word	0x20070b24

000839f4 <__register_exitproc>:
   839f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   839f6:	4c27      	ldr	r4, [pc, #156]	; (83a94 <__register_exitproc+0xa0>)
   839f8:	b085      	sub	sp, #20
   839fa:	6826      	ldr	r6, [r4, #0]
   839fc:	4607      	mov	r7, r0
   839fe:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   83a02:	2c00      	cmp	r4, #0
   83a04:	d040      	beq.n	83a88 <__register_exitproc+0x94>
   83a06:	6865      	ldr	r5, [r4, #4]
   83a08:	2d1f      	cmp	r5, #31
   83a0a:	dd1e      	ble.n	83a4a <__register_exitproc+0x56>
   83a0c:	4822      	ldr	r0, [pc, #136]	; (83a98 <__register_exitproc+0xa4>)
   83a0e:	b918      	cbnz	r0, 83a18 <__register_exitproc+0x24>
   83a10:	f04f 30ff 	mov.w	r0, #4294967295
   83a14:	b005      	add	sp, #20
   83a16:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83a18:	f44f 70c8 	mov.w	r0, #400	; 0x190
   83a1c:	9103      	str	r1, [sp, #12]
   83a1e:	9202      	str	r2, [sp, #8]
   83a20:	9301      	str	r3, [sp, #4]
   83a22:	f7ff f947 	bl	82cb4 <malloc>
   83a26:	9903      	ldr	r1, [sp, #12]
   83a28:	4604      	mov	r4, r0
   83a2a:	9a02      	ldr	r2, [sp, #8]
   83a2c:	9b01      	ldr	r3, [sp, #4]
   83a2e:	2800      	cmp	r0, #0
   83a30:	d0ee      	beq.n	83a10 <__register_exitproc+0x1c>
   83a32:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
   83a36:	2000      	movs	r0, #0
   83a38:	6025      	str	r5, [r4, #0]
   83a3a:	6060      	str	r0, [r4, #4]
   83a3c:	4605      	mov	r5, r0
   83a3e:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   83a42:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   83a46:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   83a4a:	b93f      	cbnz	r7, 83a5c <__register_exitproc+0x68>
   83a4c:	1c6b      	adds	r3, r5, #1
   83a4e:	2000      	movs	r0, #0
   83a50:	3502      	adds	r5, #2
   83a52:	6063      	str	r3, [r4, #4]
   83a54:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
   83a58:	b005      	add	sp, #20
   83a5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83a5c:	2601      	movs	r6, #1
   83a5e:	40ae      	lsls	r6, r5
   83a60:	eb04 0085 	add.w	r0, r4, r5, lsl #2
   83a64:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   83a68:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   83a6c:	2f02      	cmp	r7, #2
   83a6e:	ea42 0206 	orr.w	r2, r2, r6
   83a72:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   83a76:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   83a7a:	d1e7      	bne.n	83a4c <__register_exitproc+0x58>
   83a7c:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   83a80:	431e      	orrs	r6, r3
   83a82:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
   83a86:	e7e1      	b.n	83a4c <__register_exitproc+0x58>
   83a88:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   83a8c:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   83a90:	e7b9      	b.n	83a06 <__register_exitproc+0x12>
   83a92:	bf00      	nop
   83a94:	0008457c 	.word	0x0008457c
   83a98:	00082cb5 	.word	0x00082cb5

00083a9c <_close_r>:
   83a9c:	b538      	push	{r3, r4, r5, lr}
   83a9e:	4c07      	ldr	r4, [pc, #28]	; (83abc <_close_r+0x20>)
   83aa0:	2300      	movs	r3, #0
   83aa2:	4605      	mov	r5, r0
   83aa4:	4608      	mov	r0, r1
   83aa6:	6023      	str	r3, [r4, #0]
   83aa8:	f7fd f9f2 	bl	80e90 <_close>
   83aac:	1c43      	adds	r3, r0, #1
   83aae:	d000      	beq.n	83ab2 <_close_r+0x16>
   83ab0:	bd38      	pop	{r3, r4, r5, pc}
   83ab2:	6823      	ldr	r3, [r4, #0]
   83ab4:	2b00      	cmp	r3, #0
   83ab6:	d0fb      	beq.n	83ab0 <_close_r+0x14>
   83ab8:	602b      	str	r3, [r5, #0]
   83aba:	bd38      	pop	{r3, r4, r5, pc}
   83abc:	20070b24 	.word	0x20070b24

00083ac0 <_fclose_r>:
   83ac0:	b570      	push	{r4, r5, r6, lr}
   83ac2:	460c      	mov	r4, r1
   83ac4:	4605      	mov	r5, r0
   83ac6:	b131      	cbz	r1, 83ad6 <_fclose_r+0x16>
   83ac8:	b110      	cbz	r0, 83ad0 <_fclose_r+0x10>
   83aca:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83acc:	2b00      	cmp	r3, #0
   83ace:	d02f      	beq.n	83b30 <_fclose_r+0x70>
   83ad0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83ad4:	b90b      	cbnz	r3, 83ada <_fclose_r+0x1a>
   83ad6:	2000      	movs	r0, #0
   83ad8:	bd70      	pop	{r4, r5, r6, pc}
   83ada:	4628      	mov	r0, r5
   83adc:	4621      	mov	r1, r4
   83ade:	f7fe fc93 	bl	82408 <_fflush_r>
   83ae2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   83ae4:	4606      	mov	r6, r0
   83ae6:	b133      	cbz	r3, 83af6 <_fclose_r+0x36>
   83ae8:	4628      	mov	r0, r5
   83aea:	69e1      	ldr	r1, [r4, #28]
   83aec:	4798      	blx	r3
   83aee:	2800      	cmp	r0, #0
   83af0:	bfb8      	it	lt
   83af2:	f04f 36ff 	movlt.w	r6, #4294967295
   83af6:	89a3      	ldrh	r3, [r4, #12]
   83af8:	061b      	lsls	r3, r3, #24
   83afa:	d41c      	bmi.n	83b36 <_fclose_r+0x76>
   83afc:	6b21      	ldr	r1, [r4, #48]	; 0x30
   83afe:	b141      	cbz	r1, 83b12 <_fclose_r+0x52>
   83b00:	f104 0340 	add.w	r3, r4, #64	; 0x40
   83b04:	4299      	cmp	r1, r3
   83b06:	d002      	beq.n	83b0e <_fclose_r+0x4e>
   83b08:	4628      	mov	r0, r5
   83b0a:	f7fe fddd 	bl	826c8 <_free_r>
   83b0e:	2300      	movs	r3, #0
   83b10:	6323      	str	r3, [r4, #48]	; 0x30
   83b12:	6c61      	ldr	r1, [r4, #68]	; 0x44
   83b14:	b121      	cbz	r1, 83b20 <_fclose_r+0x60>
   83b16:	4628      	mov	r0, r5
   83b18:	f7fe fdd6 	bl	826c8 <_free_r>
   83b1c:	2300      	movs	r3, #0
   83b1e:	6463      	str	r3, [r4, #68]	; 0x44
   83b20:	f7fe fd08 	bl	82534 <__sfp_lock_acquire>
   83b24:	2300      	movs	r3, #0
   83b26:	81a3      	strh	r3, [r4, #12]
   83b28:	f7fe fd06 	bl	82538 <__sfp_lock_release>
   83b2c:	4630      	mov	r0, r6
   83b2e:	bd70      	pop	{r4, r5, r6, pc}
   83b30:	f7fe fc86 	bl	82440 <__sinit>
   83b34:	e7cc      	b.n	83ad0 <_fclose_r+0x10>
   83b36:	4628      	mov	r0, r5
   83b38:	6921      	ldr	r1, [r4, #16]
   83b3a:	f7fe fdc5 	bl	826c8 <_free_r>
   83b3e:	e7dd      	b.n	83afc <_fclose_r+0x3c>

00083b40 <fclose>:
   83b40:	4b02      	ldr	r3, [pc, #8]	; (83b4c <fclose+0xc>)
   83b42:	4601      	mov	r1, r0
   83b44:	6818      	ldr	r0, [r3, #0]
   83b46:	f7ff bfbb 	b.w	83ac0 <_fclose_r>
   83b4a:	bf00      	nop
   83b4c:	20070568 	.word	0x20070568

00083b50 <_fstat_r>:
   83b50:	b538      	push	{r3, r4, r5, lr}
   83b52:	4c08      	ldr	r4, [pc, #32]	; (83b74 <_fstat_r+0x24>)
   83b54:	2300      	movs	r3, #0
   83b56:	4605      	mov	r5, r0
   83b58:	4608      	mov	r0, r1
   83b5a:	4611      	mov	r1, r2
   83b5c:	6023      	str	r3, [r4, #0]
   83b5e:	f7fd f99b 	bl	80e98 <_fstat>
   83b62:	1c43      	adds	r3, r0, #1
   83b64:	d000      	beq.n	83b68 <_fstat_r+0x18>
   83b66:	bd38      	pop	{r3, r4, r5, pc}
   83b68:	6823      	ldr	r3, [r4, #0]
   83b6a:	2b00      	cmp	r3, #0
   83b6c:	d0fb      	beq.n	83b66 <_fstat_r+0x16>
   83b6e:	602b      	str	r3, [r5, #0]
   83b70:	bd38      	pop	{r3, r4, r5, pc}
   83b72:	bf00      	nop
   83b74:	20070b24 	.word	0x20070b24

00083b78 <_isatty_r>:
   83b78:	b538      	push	{r3, r4, r5, lr}
   83b7a:	4c07      	ldr	r4, [pc, #28]	; (83b98 <_isatty_r+0x20>)
   83b7c:	2300      	movs	r3, #0
   83b7e:	4605      	mov	r5, r0
   83b80:	4608      	mov	r0, r1
   83b82:	6023      	str	r3, [r4, #0]
   83b84:	f7fd f98e 	bl	80ea4 <_isatty>
   83b88:	1c43      	adds	r3, r0, #1
   83b8a:	d000      	beq.n	83b8e <_isatty_r+0x16>
   83b8c:	bd38      	pop	{r3, r4, r5, pc}
   83b8e:	6823      	ldr	r3, [r4, #0]
   83b90:	2b00      	cmp	r3, #0
   83b92:	d0fb      	beq.n	83b8c <_isatty_r+0x14>
   83b94:	602b      	str	r3, [r5, #0]
   83b96:	bd38      	pop	{r3, r4, r5, pc}
   83b98:	20070b24 	.word	0x20070b24

00083b9c <_lseek_r>:
   83b9c:	b570      	push	{r4, r5, r6, lr}
   83b9e:	4c08      	ldr	r4, [pc, #32]	; (83bc0 <_lseek_r+0x24>)
   83ba0:	4606      	mov	r6, r0
   83ba2:	2500      	movs	r5, #0
   83ba4:	4608      	mov	r0, r1
   83ba6:	4611      	mov	r1, r2
   83ba8:	461a      	mov	r2, r3
   83baa:	6025      	str	r5, [r4, #0]
   83bac:	f7fd f97c 	bl	80ea8 <_lseek>
   83bb0:	1c43      	adds	r3, r0, #1
   83bb2:	d000      	beq.n	83bb6 <_lseek_r+0x1a>
   83bb4:	bd70      	pop	{r4, r5, r6, pc}
   83bb6:	6823      	ldr	r3, [r4, #0]
   83bb8:	2b00      	cmp	r3, #0
   83bba:	d0fb      	beq.n	83bb4 <_lseek_r+0x18>
   83bbc:	6033      	str	r3, [r6, #0]
   83bbe:	bd70      	pop	{r4, r5, r6, pc}
   83bc0:	20070b24 	.word	0x20070b24

00083bc4 <_read_r>:
   83bc4:	b570      	push	{r4, r5, r6, lr}
   83bc6:	4c08      	ldr	r4, [pc, #32]	; (83be8 <_read_r+0x24>)
   83bc8:	4606      	mov	r6, r0
   83bca:	2500      	movs	r5, #0
   83bcc:	4608      	mov	r0, r1
   83bce:	4611      	mov	r1, r2
   83bd0:	461a      	mov	r2, r3
   83bd2:	6025      	str	r5, [r4, #0]
   83bd4:	f7fc fc30 	bl	80438 <_read>
   83bd8:	1c43      	adds	r3, r0, #1
   83bda:	d000      	beq.n	83bde <_read_r+0x1a>
   83bdc:	bd70      	pop	{r4, r5, r6, pc}
   83bde:	6823      	ldr	r3, [r4, #0]
   83be0:	2b00      	cmp	r3, #0
   83be2:	d0fb      	beq.n	83bdc <_read_r+0x18>
   83be4:	6033      	str	r3, [r6, #0]
   83be6:	bd70      	pop	{r4, r5, r6, pc}
   83be8:	20070b24 	.word	0x20070b24

00083bec <__aeabi_uldivmod>:
   83bec:	b94b      	cbnz	r3, 83c02 <__aeabi_uldivmod+0x16>
   83bee:	b942      	cbnz	r2, 83c02 <__aeabi_uldivmod+0x16>
   83bf0:	2900      	cmp	r1, #0
   83bf2:	bf08      	it	eq
   83bf4:	2800      	cmpeq	r0, #0
   83bf6:	d002      	beq.n	83bfe <__aeabi_uldivmod+0x12>
   83bf8:	f04f 31ff 	mov.w	r1, #4294967295
   83bfc:	4608      	mov	r0, r1
   83bfe:	f000 b83b 	b.w	83c78 <__aeabi_idiv0>
   83c02:	b082      	sub	sp, #8
   83c04:	46ec      	mov	ip, sp
   83c06:	e92d 5000 	stmdb	sp!, {ip, lr}
   83c0a:	f000 f81d 	bl	83c48 <__gnu_uldivmod_helper>
   83c0e:	f8dd e004 	ldr.w	lr, [sp, #4]
   83c12:	b002      	add	sp, #8
   83c14:	bc0c      	pop	{r2, r3}
   83c16:	4770      	bx	lr

00083c18 <__gnu_ldivmod_helper>:
   83c18:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   83c1c:	9e08      	ldr	r6, [sp, #32]
   83c1e:	4614      	mov	r4, r2
   83c20:	461d      	mov	r5, r3
   83c22:	4680      	mov	r8, r0
   83c24:	4689      	mov	r9, r1
   83c26:	f000 f829 	bl	83c7c <__divdi3>
   83c2a:	fb04 f301 	mul.w	r3, r4, r1
   83c2e:	fba4 ab00 	umull	sl, fp, r4, r0
   83c32:	fb00 3205 	mla	r2, r0, r5, r3
   83c36:	4493      	add	fp, r2
   83c38:	ebb8 080a 	subs.w	r8, r8, sl
   83c3c:	eb69 090b 	sbc.w	r9, r9, fp
   83c40:	e9c6 8900 	strd	r8, r9, [r6]
   83c44:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

00083c48 <__gnu_uldivmod_helper>:
   83c48:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   83c4c:	9e08      	ldr	r6, [sp, #32]
   83c4e:	4614      	mov	r4, r2
   83c50:	461d      	mov	r5, r3
   83c52:	4680      	mov	r8, r0
   83c54:	4689      	mov	r9, r1
   83c56:	f000 f961 	bl	83f1c <__udivdi3>
   83c5a:	fb00 f505 	mul.w	r5, r0, r5
   83c5e:	fba0 ab04 	umull	sl, fp, r0, r4
   83c62:	fb04 5401 	mla	r4, r4, r1, r5
   83c66:	44a3      	add	fp, r4
   83c68:	ebb8 080a 	subs.w	r8, r8, sl
   83c6c:	eb69 090b 	sbc.w	r9, r9, fp
   83c70:	e9c6 8900 	strd	r8, r9, [r6]
   83c74:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

00083c78 <__aeabi_idiv0>:
   83c78:	4770      	bx	lr
   83c7a:	bf00      	nop

00083c7c <__divdi3>:
   83c7c:	2900      	cmp	r1, #0
   83c7e:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83c82:	f2c0 80a1 	blt.w	83dc8 <__divdi3+0x14c>
   83c86:	2400      	movs	r4, #0
   83c88:	2b00      	cmp	r3, #0
   83c8a:	f2c0 8098 	blt.w	83dbe <__divdi3+0x142>
   83c8e:	4615      	mov	r5, r2
   83c90:	4606      	mov	r6, r0
   83c92:	460f      	mov	r7, r1
   83c94:	2b00      	cmp	r3, #0
   83c96:	d13f      	bne.n	83d18 <__divdi3+0x9c>
   83c98:	428a      	cmp	r2, r1
   83c9a:	d958      	bls.n	83d4e <__divdi3+0xd2>
   83c9c:	fab2 f382 	clz	r3, r2
   83ca0:	b14b      	cbz	r3, 83cb6 <__divdi3+0x3a>
   83ca2:	f1c3 0220 	rsb	r2, r3, #32
   83ca6:	fa01 f703 	lsl.w	r7, r1, r3
   83caa:	fa20 f202 	lsr.w	r2, r0, r2
   83cae:	409d      	lsls	r5, r3
   83cb0:	fa00 f603 	lsl.w	r6, r0, r3
   83cb4:	4317      	orrs	r7, r2
   83cb6:	0c29      	lsrs	r1, r5, #16
   83cb8:	fbb7 f2f1 	udiv	r2, r7, r1
   83cbc:	fb01 7712 	mls	r7, r1, r2, r7
   83cc0:	b2a8      	uxth	r0, r5
   83cc2:	fb00 f302 	mul.w	r3, r0, r2
   83cc6:	ea4f 4c16 	mov.w	ip, r6, lsr #16
   83cca:	ea4c 4707 	orr.w	r7, ip, r7, lsl #16
   83cce:	42bb      	cmp	r3, r7
   83cd0:	d909      	bls.n	83ce6 <__divdi3+0x6a>
   83cd2:	197f      	adds	r7, r7, r5
   83cd4:	f102 3cff 	add.w	ip, r2, #4294967295
   83cd8:	f080 8105 	bcs.w	83ee6 <__divdi3+0x26a>
   83cdc:	42bb      	cmp	r3, r7
   83cde:	f240 8102 	bls.w	83ee6 <__divdi3+0x26a>
   83ce2:	3a02      	subs	r2, #2
   83ce4:	442f      	add	r7, r5
   83ce6:	1aff      	subs	r7, r7, r3
   83ce8:	fbb7 f3f1 	udiv	r3, r7, r1
   83cec:	fb01 7113 	mls	r1, r1, r3, r7
   83cf0:	fb00 f003 	mul.w	r0, r0, r3
   83cf4:	b2b6      	uxth	r6, r6
   83cf6:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
   83cfa:	4288      	cmp	r0, r1
   83cfc:	d908      	bls.n	83d10 <__divdi3+0x94>
   83cfe:	1949      	adds	r1, r1, r5
   83d00:	f103 37ff 	add.w	r7, r3, #4294967295
   83d04:	f080 80f1 	bcs.w	83eea <__divdi3+0x26e>
   83d08:	4288      	cmp	r0, r1
   83d0a:	f240 80ee 	bls.w	83eea <__divdi3+0x26e>
   83d0e:	3b02      	subs	r3, #2
   83d10:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   83d14:	2300      	movs	r3, #0
   83d16:	e003      	b.n	83d20 <__divdi3+0xa4>
   83d18:	428b      	cmp	r3, r1
   83d1a:	d90a      	bls.n	83d32 <__divdi3+0xb6>
   83d1c:	2300      	movs	r3, #0
   83d1e:	461a      	mov	r2, r3
   83d20:	4610      	mov	r0, r2
   83d22:	4619      	mov	r1, r3
   83d24:	b114      	cbz	r4, 83d2c <__divdi3+0xb0>
   83d26:	4240      	negs	r0, r0
   83d28:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   83d2c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83d30:	4770      	bx	lr
   83d32:	fab3 f883 	clz	r8, r3
   83d36:	f1b8 0f00 	cmp.w	r8, #0
   83d3a:	f040 8088 	bne.w	83e4e <__divdi3+0x1d2>
   83d3e:	428b      	cmp	r3, r1
   83d40:	d302      	bcc.n	83d48 <__divdi3+0xcc>
   83d42:	4282      	cmp	r2, r0
   83d44:	f200 80e2 	bhi.w	83f0c <__divdi3+0x290>
   83d48:	2300      	movs	r3, #0
   83d4a:	2201      	movs	r2, #1
   83d4c:	e7e8      	b.n	83d20 <__divdi3+0xa4>
   83d4e:	b912      	cbnz	r2, 83d56 <__divdi3+0xda>
   83d50:	2301      	movs	r3, #1
   83d52:	fbb3 f5f2 	udiv	r5, r3, r2
   83d56:	fab5 f285 	clz	r2, r5
   83d5a:	2a00      	cmp	r2, #0
   83d5c:	d13a      	bne.n	83dd4 <__divdi3+0x158>
   83d5e:	1b7f      	subs	r7, r7, r5
   83d60:	0c28      	lsrs	r0, r5, #16
   83d62:	fa1f fc85 	uxth.w	ip, r5
   83d66:	2301      	movs	r3, #1
   83d68:	fbb7 f1f0 	udiv	r1, r7, r0
   83d6c:	fb00 7711 	mls	r7, r0, r1, r7
   83d70:	fb0c f201 	mul.w	r2, ip, r1
   83d74:	ea4f 4816 	mov.w	r8, r6, lsr #16
   83d78:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
   83d7c:	42ba      	cmp	r2, r7
   83d7e:	d907      	bls.n	83d90 <__divdi3+0x114>
   83d80:	197f      	adds	r7, r7, r5
   83d82:	f101 38ff 	add.w	r8, r1, #4294967295
   83d86:	d202      	bcs.n	83d8e <__divdi3+0x112>
   83d88:	42ba      	cmp	r2, r7
   83d8a:	f200 80c4 	bhi.w	83f16 <__divdi3+0x29a>
   83d8e:	4641      	mov	r1, r8
   83d90:	1abf      	subs	r7, r7, r2
   83d92:	fbb7 f2f0 	udiv	r2, r7, r0
   83d96:	fb00 7012 	mls	r0, r0, r2, r7
   83d9a:	fb0c fc02 	mul.w	ip, ip, r2
   83d9e:	b2b6      	uxth	r6, r6
   83da0:	ea46 4000 	orr.w	r0, r6, r0, lsl #16
   83da4:	4584      	cmp	ip, r0
   83da6:	d907      	bls.n	83db8 <__divdi3+0x13c>
   83da8:	1940      	adds	r0, r0, r5
   83daa:	f102 37ff 	add.w	r7, r2, #4294967295
   83dae:	d202      	bcs.n	83db6 <__divdi3+0x13a>
   83db0:	4584      	cmp	ip, r0
   83db2:	f200 80ae 	bhi.w	83f12 <__divdi3+0x296>
   83db6:	463a      	mov	r2, r7
   83db8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   83dbc:	e7b0      	b.n	83d20 <__divdi3+0xa4>
   83dbe:	43e4      	mvns	r4, r4
   83dc0:	4252      	negs	r2, r2
   83dc2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   83dc6:	e762      	b.n	83c8e <__divdi3+0x12>
   83dc8:	4240      	negs	r0, r0
   83dca:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   83dce:	f04f 34ff 	mov.w	r4, #4294967295
   83dd2:	e759      	b.n	83c88 <__divdi3+0xc>
   83dd4:	4095      	lsls	r5, r2
   83dd6:	f1c2 0920 	rsb	r9, r2, #32
   83dda:	fa27 f109 	lsr.w	r1, r7, r9
   83dde:	fa26 f909 	lsr.w	r9, r6, r9
   83de2:	4097      	lsls	r7, r2
   83de4:	0c28      	lsrs	r0, r5, #16
   83de6:	fbb1 f8f0 	udiv	r8, r1, r0
   83dea:	fb00 1118 	mls	r1, r0, r8, r1
   83dee:	fa1f fc85 	uxth.w	ip, r5
   83df2:	fb0c f308 	mul.w	r3, ip, r8
   83df6:	ea49 0907 	orr.w	r9, r9, r7
   83dfa:	ea4f 4719 	mov.w	r7, r9, lsr #16
   83dfe:	ea47 4101 	orr.w	r1, r7, r1, lsl #16
   83e02:	428b      	cmp	r3, r1
   83e04:	fa06 f602 	lsl.w	r6, r6, r2
   83e08:	d908      	bls.n	83e1c <__divdi3+0x1a0>
   83e0a:	1949      	adds	r1, r1, r5
   83e0c:	f108 32ff 	add.w	r2, r8, #4294967295
   83e10:	d27a      	bcs.n	83f08 <__divdi3+0x28c>
   83e12:	428b      	cmp	r3, r1
   83e14:	d978      	bls.n	83f08 <__divdi3+0x28c>
   83e16:	f1a8 0802 	sub.w	r8, r8, #2
   83e1a:	4429      	add	r1, r5
   83e1c:	1ac9      	subs	r1, r1, r3
   83e1e:	fbb1 f3f0 	udiv	r3, r1, r0
   83e22:	fb00 1713 	mls	r7, r0, r3, r1
   83e26:	fb0c f203 	mul.w	r2, ip, r3
   83e2a:	fa1f f989 	uxth.w	r9, r9
   83e2e:	ea49 4707 	orr.w	r7, r9, r7, lsl #16
   83e32:	42ba      	cmp	r2, r7
   83e34:	d907      	bls.n	83e46 <__divdi3+0x1ca>
   83e36:	197f      	adds	r7, r7, r5
   83e38:	f103 31ff 	add.w	r1, r3, #4294967295
   83e3c:	d260      	bcs.n	83f00 <__divdi3+0x284>
   83e3e:	42ba      	cmp	r2, r7
   83e40:	d95e      	bls.n	83f00 <__divdi3+0x284>
   83e42:	3b02      	subs	r3, #2
   83e44:	442f      	add	r7, r5
   83e46:	1abf      	subs	r7, r7, r2
   83e48:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   83e4c:	e78c      	b.n	83d68 <__divdi3+0xec>
   83e4e:	f1c8 0220 	rsb	r2, r8, #32
   83e52:	fa25 f102 	lsr.w	r1, r5, r2
   83e56:	fa03 fc08 	lsl.w	ip, r3, r8
   83e5a:	fa27 f302 	lsr.w	r3, r7, r2
   83e5e:	fa20 f202 	lsr.w	r2, r0, r2
   83e62:	fa07 f708 	lsl.w	r7, r7, r8
   83e66:	ea41 0c0c 	orr.w	ip, r1, ip
   83e6a:	ea4f 491c 	mov.w	r9, ip, lsr #16
   83e6e:	fbb3 f1f9 	udiv	r1, r3, r9
   83e72:	fb09 3311 	mls	r3, r9, r1, r3
   83e76:	fa1f fa8c 	uxth.w	sl, ip
   83e7a:	fb0a fb01 	mul.w	fp, sl, r1
   83e7e:	4317      	orrs	r7, r2
   83e80:	0c3a      	lsrs	r2, r7, #16
   83e82:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   83e86:	459b      	cmp	fp, r3
   83e88:	fa05 f008 	lsl.w	r0, r5, r8
   83e8c:	d908      	bls.n	83ea0 <__divdi3+0x224>
   83e8e:	eb13 030c 	adds.w	r3, r3, ip
   83e92:	f101 32ff 	add.w	r2, r1, #4294967295
   83e96:	d235      	bcs.n	83f04 <__divdi3+0x288>
   83e98:	459b      	cmp	fp, r3
   83e9a:	d933      	bls.n	83f04 <__divdi3+0x288>
   83e9c:	3902      	subs	r1, #2
   83e9e:	4463      	add	r3, ip
   83ea0:	ebcb 0303 	rsb	r3, fp, r3
   83ea4:	fbb3 f2f9 	udiv	r2, r3, r9
   83ea8:	fb09 3312 	mls	r3, r9, r2, r3
   83eac:	fb0a fa02 	mul.w	sl, sl, r2
   83eb0:	b2bf      	uxth	r7, r7
   83eb2:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
   83eb6:	45ba      	cmp	sl, r7
   83eb8:	d908      	bls.n	83ecc <__divdi3+0x250>
   83eba:	eb17 070c 	adds.w	r7, r7, ip
   83ebe:	f102 33ff 	add.w	r3, r2, #4294967295
   83ec2:	d21b      	bcs.n	83efc <__divdi3+0x280>
   83ec4:	45ba      	cmp	sl, r7
   83ec6:	d919      	bls.n	83efc <__divdi3+0x280>
   83ec8:	3a02      	subs	r2, #2
   83eca:	4467      	add	r7, ip
   83ecc:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
   83ed0:	fba5 0100 	umull	r0, r1, r5, r0
   83ed4:	ebca 0707 	rsb	r7, sl, r7
   83ed8:	428f      	cmp	r7, r1
   83eda:	f04f 0300 	mov.w	r3, #0
   83ede:	d30a      	bcc.n	83ef6 <__divdi3+0x27a>
   83ee0:	d005      	beq.n	83eee <__divdi3+0x272>
   83ee2:	462a      	mov	r2, r5
   83ee4:	e71c      	b.n	83d20 <__divdi3+0xa4>
   83ee6:	4662      	mov	r2, ip
   83ee8:	e6fd      	b.n	83ce6 <__divdi3+0x6a>
   83eea:	463b      	mov	r3, r7
   83eec:	e710      	b.n	83d10 <__divdi3+0x94>
   83eee:	fa06 f608 	lsl.w	r6, r6, r8
   83ef2:	4286      	cmp	r6, r0
   83ef4:	d2f5      	bcs.n	83ee2 <__divdi3+0x266>
   83ef6:	1e6a      	subs	r2, r5, #1
   83ef8:	2300      	movs	r3, #0
   83efa:	e711      	b.n	83d20 <__divdi3+0xa4>
   83efc:	461a      	mov	r2, r3
   83efe:	e7e5      	b.n	83ecc <__divdi3+0x250>
   83f00:	460b      	mov	r3, r1
   83f02:	e7a0      	b.n	83e46 <__divdi3+0x1ca>
   83f04:	4611      	mov	r1, r2
   83f06:	e7cb      	b.n	83ea0 <__divdi3+0x224>
   83f08:	4690      	mov	r8, r2
   83f0a:	e787      	b.n	83e1c <__divdi3+0x1a0>
   83f0c:	4643      	mov	r3, r8
   83f0e:	4642      	mov	r2, r8
   83f10:	e706      	b.n	83d20 <__divdi3+0xa4>
   83f12:	3a02      	subs	r2, #2
   83f14:	e750      	b.n	83db8 <__divdi3+0x13c>
   83f16:	3902      	subs	r1, #2
   83f18:	442f      	add	r7, r5
   83f1a:	e739      	b.n	83d90 <__divdi3+0x114>

00083f1c <__udivdi3>:
   83f1c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83f20:	4614      	mov	r4, r2
   83f22:	4605      	mov	r5, r0
   83f24:	460e      	mov	r6, r1
   83f26:	2b00      	cmp	r3, #0
   83f28:	d143      	bne.n	83fb2 <__udivdi3+0x96>
   83f2a:	428a      	cmp	r2, r1
   83f2c:	d953      	bls.n	83fd6 <__udivdi3+0xba>
   83f2e:	fab2 f782 	clz	r7, r2
   83f32:	b157      	cbz	r7, 83f4a <__udivdi3+0x2e>
   83f34:	f1c7 0620 	rsb	r6, r7, #32
   83f38:	fa20 f606 	lsr.w	r6, r0, r6
   83f3c:	fa01 f307 	lsl.w	r3, r1, r7
   83f40:	fa02 f407 	lsl.w	r4, r2, r7
   83f44:	fa00 f507 	lsl.w	r5, r0, r7
   83f48:	431e      	orrs	r6, r3
   83f4a:	0c21      	lsrs	r1, r4, #16
   83f4c:	fbb6 f2f1 	udiv	r2, r6, r1
   83f50:	fb01 6612 	mls	r6, r1, r2, r6
   83f54:	b2a0      	uxth	r0, r4
   83f56:	fb00 f302 	mul.w	r3, r0, r2
   83f5a:	0c2f      	lsrs	r7, r5, #16
   83f5c:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   83f60:	42b3      	cmp	r3, r6
   83f62:	d909      	bls.n	83f78 <__udivdi3+0x5c>
   83f64:	1936      	adds	r6, r6, r4
   83f66:	f102 37ff 	add.w	r7, r2, #4294967295
   83f6a:	f080 80fd 	bcs.w	84168 <__udivdi3+0x24c>
   83f6e:	42b3      	cmp	r3, r6
   83f70:	f240 80fa 	bls.w	84168 <__udivdi3+0x24c>
   83f74:	3a02      	subs	r2, #2
   83f76:	4426      	add	r6, r4
   83f78:	1af6      	subs	r6, r6, r3
   83f7a:	fbb6 f3f1 	udiv	r3, r6, r1
   83f7e:	fb01 6113 	mls	r1, r1, r3, r6
   83f82:	fb00 f003 	mul.w	r0, r0, r3
   83f86:	b2ad      	uxth	r5, r5
   83f88:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
   83f8c:	4288      	cmp	r0, r1
   83f8e:	d908      	bls.n	83fa2 <__udivdi3+0x86>
   83f90:	1909      	adds	r1, r1, r4
   83f92:	f103 36ff 	add.w	r6, r3, #4294967295
   83f96:	f080 80e9 	bcs.w	8416c <__udivdi3+0x250>
   83f9a:	4288      	cmp	r0, r1
   83f9c:	f240 80e6 	bls.w	8416c <__udivdi3+0x250>
   83fa0:	3b02      	subs	r3, #2
   83fa2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   83fa6:	2300      	movs	r3, #0
   83fa8:	4610      	mov	r0, r2
   83faa:	4619      	mov	r1, r3
   83fac:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83fb0:	4770      	bx	lr
   83fb2:	428b      	cmp	r3, r1
   83fb4:	d84c      	bhi.n	84050 <__udivdi3+0x134>
   83fb6:	fab3 f683 	clz	r6, r3
   83fba:	2e00      	cmp	r6, #0
   83fbc:	d14f      	bne.n	8405e <__udivdi3+0x142>
   83fbe:	428b      	cmp	r3, r1
   83fc0:	d302      	bcc.n	83fc8 <__udivdi3+0xac>
   83fc2:	4282      	cmp	r2, r0
   83fc4:	f200 80dd 	bhi.w	84182 <__udivdi3+0x266>
   83fc8:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83fcc:	2300      	movs	r3, #0
   83fce:	2201      	movs	r2, #1
   83fd0:	4610      	mov	r0, r2
   83fd2:	4619      	mov	r1, r3
   83fd4:	4770      	bx	lr
   83fd6:	b912      	cbnz	r2, 83fde <__udivdi3+0xc2>
   83fd8:	2401      	movs	r4, #1
   83fda:	fbb4 f4f2 	udiv	r4, r4, r2
   83fde:	fab4 f284 	clz	r2, r4
   83fe2:	2a00      	cmp	r2, #0
   83fe4:	f040 8082 	bne.w	840ec <__udivdi3+0x1d0>
   83fe8:	1b09      	subs	r1, r1, r4
   83fea:	0c26      	lsrs	r6, r4, #16
   83fec:	b2a7      	uxth	r7, r4
   83fee:	2301      	movs	r3, #1
   83ff0:	fbb1 f0f6 	udiv	r0, r1, r6
   83ff4:	fb06 1110 	mls	r1, r6, r0, r1
   83ff8:	fb07 f200 	mul.w	r2, r7, r0
   83ffc:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   84000:	ea4c 4101 	orr.w	r1, ip, r1, lsl #16
   84004:	428a      	cmp	r2, r1
   84006:	d907      	bls.n	84018 <__udivdi3+0xfc>
   84008:	1909      	adds	r1, r1, r4
   8400a:	f100 3cff 	add.w	ip, r0, #4294967295
   8400e:	d202      	bcs.n	84016 <__udivdi3+0xfa>
   84010:	428a      	cmp	r2, r1
   84012:	f200 80c8 	bhi.w	841a6 <__udivdi3+0x28a>
   84016:	4660      	mov	r0, ip
   84018:	1a89      	subs	r1, r1, r2
   8401a:	fbb1 f2f6 	udiv	r2, r1, r6
   8401e:	fb06 1112 	mls	r1, r6, r2, r1
   84022:	fb07 f702 	mul.w	r7, r7, r2
   84026:	b2ad      	uxth	r5, r5
   84028:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
   8402c:	42af      	cmp	r7, r5
   8402e:	d908      	bls.n	84042 <__udivdi3+0x126>
   84030:	192c      	adds	r4, r5, r4
   84032:	f102 31ff 	add.w	r1, r2, #4294967295
   84036:	f080 809b 	bcs.w	84170 <__udivdi3+0x254>
   8403a:	42a7      	cmp	r7, r4
   8403c:	f240 8098 	bls.w	84170 <__udivdi3+0x254>
   84040:	3a02      	subs	r2, #2
   84042:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
   84046:	4610      	mov	r0, r2
   84048:	4619      	mov	r1, r3
   8404a:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8404e:	4770      	bx	lr
   84050:	2300      	movs	r3, #0
   84052:	461a      	mov	r2, r3
   84054:	4610      	mov	r0, r2
   84056:	4619      	mov	r1, r3
   84058:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8405c:	4770      	bx	lr
   8405e:	f1c6 0520 	rsb	r5, r6, #32
   84062:	fa22 f705 	lsr.w	r7, r2, r5
   84066:	fa03 f406 	lsl.w	r4, r3, r6
   8406a:	fa21 f305 	lsr.w	r3, r1, r5
   8406e:	fa01 fb06 	lsl.w	fp, r1, r6
   84072:	fa20 f505 	lsr.w	r5, r0, r5
   84076:	433c      	orrs	r4, r7
   84078:	ea4f 4814 	mov.w	r8, r4, lsr #16
   8407c:	fbb3 fcf8 	udiv	ip, r3, r8
   84080:	fb08 331c 	mls	r3, r8, ip, r3
   84084:	fa1f f984 	uxth.w	r9, r4
   84088:	fb09 fa0c 	mul.w	sl, r9, ip
   8408c:	ea45 0b0b 	orr.w	fp, r5, fp
   84090:	ea4f 451b 	mov.w	r5, fp, lsr #16
   84094:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
   84098:	459a      	cmp	sl, r3
   8409a:	fa02 f206 	lsl.w	r2, r2, r6
   8409e:	d904      	bls.n	840aa <__udivdi3+0x18e>
   840a0:	191b      	adds	r3, r3, r4
   840a2:	f10c 35ff 	add.w	r5, ip, #4294967295
   840a6:	d36f      	bcc.n	84188 <__udivdi3+0x26c>
   840a8:	46ac      	mov	ip, r5
   840aa:	ebca 0303 	rsb	r3, sl, r3
   840ae:	fbb3 f5f8 	udiv	r5, r3, r8
   840b2:	fb08 3315 	mls	r3, r8, r5, r3
   840b6:	fb09 f905 	mul.w	r9, r9, r5
   840ba:	fa1f fb8b 	uxth.w	fp, fp
   840be:	ea4b 4703 	orr.w	r7, fp, r3, lsl #16
   840c2:	45b9      	cmp	r9, r7
   840c4:	d904      	bls.n	840d0 <__udivdi3+0x1b4>
   840c6:	193f      	adds	r7, r7, r4
   840c8:	f105 33ff 	add.w	r3, r5, #4294967295
   840cc:	d362      	bcc.n	84194 <__udivdi3+0x278>
   840ce:	461d      	mov	r5, r3
   840d0:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
   840d4:	fbac 2302 	umull	r2, r3, ip, r2
   840d8:	ebc9 0707 	rsb	r7, r9, r7
   840dc:	429f      	cmp	r7, r3
   840de:	f04f 0500 	mov.w	r5, #0
   840e2:	d34a      	bcc.n	8417a <__udivdi3+0x25e>
   840e4:	d046      	beq.n	84174 <__udivdi3+0x258>
   840e6:	4662      	mov	r2, ip
   840e8:	462b      	mov	r3, r5
   840ea:	e75d      	b.n	83fa8 <__udivdi3+0x8c>
   840ec:	4094      	lsls	r4, r2
   840ee:	f1c2 0920 	rsb	r9, r2, #32
   840f2:	fa21 fc09 	lsr.w	ip, r1, r9
   840f6:	4091      	lsls	r1, r2
   840f8:	fa20 f909 	lsr.w	r9, r0, r9
   840fc:	0c26      	lsrs	r6, r4, #16
   840fe:	fbbc f8f6 	udiv	r8, ip, r6
   84102:	fb06 cc18 	mls	ip, r6, r8, ip
   84106:	b2a7      	uxth	r7, r4
   84108:	fb07 f308 	mul.w	r3, r7, r8
   8410c:	ea49 0901 	orr.w	r9, r9, r1
   84110:	ea4f 4119 	mov.w	r1, r9, lsr #16
   84114:	ea41 4c0c 	orr.w	ip, r1, ip, lsl #16
   84118:	4563      	cmp	r3, ip
   8411a:	fa00 f502 	lsl.w	r5, r0, r2
   8411e:	d909      	bls.n	84134 <__udivdi3+0x218>
   84120:	eb1c 0c04 	adds.w	ip, ip, r4
   84124:	f108 32ff 	add.w	r2, r8, #4294967295
   84128:	d23b      	bcs.n	841a2 <__udivdi3+0x286>
   8412a:	4563      	cmp	r3, ip
   8412c:	d939      	bls.n	841a2 <__udivdi3+0x286>
   8412e:	f1a8 0802 	sub.w	r8, r8, #2
   84132:	44a4      	add	ip, r4
   84134:	ebc3 0c0c 	rsb	ip, r3, ip
   84138:	fbbc f3f6 	udiv	r3, ip, r6
   8413c:	fb06 c113 	mls	r1, r6, r3, ip
   84140:	fb07 f203 	mul.w	r2, r7, r3
   84144:	fa1f f989 	uxth.w	r9, r9
   84148:	ea49 4101 	orr.w	r1, r9, r1, lsl #16
   8414c:	428a      	cmp	r2, r1
   8414e:	d907      	bls.n	84160 <__udivdi3+0x244>
   84150:	1909      	adds	r1, r1, r4
   84152:	f103 30ff 	add.w	r0, r3, #4294967295
   84156:	d222      	bcs.n	8419e <__udivdi3+0x282>
   84158:	428a      	cmp	r2, r1
   8415a:	d920      	bls.n	8419e <__udivdi3+0x282>
   8415c:	3b02      	subs	r3, #2
   8415e:	4421      	add	r1, r4
   84160:	1a89      	subs	r1, r1, r2
   84162:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   84166:	e743      	b.n	83ff0 <__udivdi3+0xd4>
   84168:	463a      	mov	r2, r7
   8416a:	e705      	b.n	83f78 <__udivdi3+0x5c>
   8416c:	4633      	mov	r3, r6
   8416e:	e718      	b.n	83fa2 <__udivdi3+0x86>
   84170:	460a      	mov	r2, r1
   84172:	e766      	b.n	84042 <__udivdi3+0x126>
   84174:	40b0      	lsls	r0, r6
   84176:	4290      	cmp	r0, r2
   84178:	d2b5      	bcs.n	840e6 <__udivdi3+0x1ca>
   8417a:	f10c 32ff 	add.w	r2, ip, #4294967295
   8417e:	2300      	movs	r3, #0
   84180:	e712      	b.n	83fa8 <__udivdi3+0x8c>
   84182:	4633      	mov	r3, r6
   84184:	4632      	mov	r2, r6
   84186:	e70f      	b.n	83fa8 <__udivdi3+0x8c>
   84188:	459a      	cmp	sl, r3
   8418a:	d98d      	bls.n	840a8 <__udivdi3+0x18c>
   8418c:	f1ac 0c02 	sub.w	ip, ip, #2
   84190:	4423      	add	r3, r4
   84192:	e78a      	b.n	840aa <__udivdi3+0x18e>
   84194:	45b9      	cmp	r9, r7
   84196:	d99a      	bls.n	840ce <__udivdi3+0x1b2>
   84198:	3d02      	subs	r5, #2
   8419a:	4427      	add	r7, r4
   8419c:	e798      	b.n	840d0 <__udivdi3+0x1b4>
   8419e:	4603      	mov	r3, r0
   841a0:	e7de      	b.n	84160 <__udivdi3+0x244>
   841a2:	4690      	mov	r8, r2
   841a4:	e7c6      	b.n	84134 <__udivdi3+0x218>
   841a6:	3802      	subs	r0, #2
   841a8:	4421      	add	r1, r4
   841aa:	e735      	b.n	84018 <__udivdi3+0xfc>
   841ac:	5f495754 	.word	0x5f495754
   841b0:	5f444d43 	.word	0x5f444d43
   841b4:	5f4d5241 	.word	0x5f4d5241
   841b8:	54494e49 	.word	0x54494e49
   841bc:	0000000a 	.word	0x0000000a
   841c0:	5f495754 	.word	0x5f495754
   841c4:	5f444d43 	.word	0x5f444d43
   841c8:	5f4d5241 	.word	0x5f4d5241
   841cc:	5f514552 	.word	0x5f514552
   841d0:	5f584f42 	.word	0x5f584f42
   841d4:	4f464e49 	.word	0x4f464e49
   841d8:	0000000a 	.word	0x0000000a
   841dc:	5f495754 	.word	0x5f495754
   841e0:	5f444d43 	.word	0x5f444d43
   841e4:	5f4d5241 	.word	0x5f4d5241
   841e8:	5f514552 	.word	0x5f514552
   841ec:	5f4a424f 	.word	0x5f4a424f
   841f0:	4f464e49 	.word	0x4f464e49
   841f4:	0000000a 	.word	0x0000000a
   841f8:	5f495754 	.word	0x5f495754
   841fc:	5f444d43 	.word	0x5f444d43
   84200:	5f4d5241 	.word	0x5f4d5241
   84204:	5f514552 	.word	0x5f514552
   84208:	4c4c4f43 	.word	0x4c4c4f43
   8420c:	5f544345 	.word	0x5f544345
   84210:	4f464e49 	.word	0x4f464e49
   84214:	0000000a 	.word	0x0000000a
   84218:	5f495754 	.word	0x5f495754
   8421c:	5f444d43 	.word	0x5f444d43
   84220:	4b434950 	.word	0x4b434950
   84224:	535f5055 	.word	0x535f5055
   84228:	54524154 	.word	0x54524154
   8422c:	0000000a 	.word	0x0000000a
   84230:	5f495754 	.word	0x5f495754
   84234:	5f444d43 	.word	0x5f444d43
   84238:	4b434950 	.word	0x4b434950
   8423c:	535f5055 	.word	0x535f5055
   84240:	55544154 	.word	0x55544154
   84244:	00000a53 	.word	0x00000a53
   84248:	5f495754 	.word	0x5f495754
   8424c:	5f444d43 	.word	0x5f444d43
   84250:	504f5244 	.word	0x504f5244
   84254:	5f46464f 	.word	0x5f46464f
   84258:	52415453 	.word	0x52415453
   8425c:	00000a54 	.word	0x00000a54
   84260:	5f495754 	.word	0x5f495754
   84264:	5f444d43 	.word	0x5f444d43
   84268:	504f5244 	.word	0x504f5244
   8426c:	5f46464f 	.word	0x5f46464f
   84270:	54415453 	.word	0x54415453
   84274:	000a5355 	.word	0x000a5355
   84278:	5f495754 	.word	0x5f495754
   8427c:	5f444d43 	.word	0x5f444d43
   84280:	4f525245 	.word	0x4f525245
   84284:	00000a52 	.word	0x00000a52
   84288:	6f727265 	.word	0x6f727265
   8428c:	00000a72 	.word	0x00000a72
   84290:	6c696146 	.word	0x6c696146
   84294:	31313120 	.word	0x31313120
   84298:	00000000 	.word	0x00000000
   8429c:	6c696146 	.word	0x6c696146
   842a0:	32323220 	.word	0x32323220
   842a4:	00000000 	.word	0x00000000
   842a8:	6c696146 	.word	0x6c696146
   842ac:	33333320 	.word	0x33333320
   842b0:	00000000 	.word	0x00000000
   842b4:	4f525245 	.word	0x4f525245
   842b8:	69702052 	.word	0x69702052
   842bc:	70756b63 	.word	0x70756b63
   842c0:	61747320 	.word	0x61747320
   842c4:	00737574 	.word	0x00737574
   842c8:	3a746f67 	.word	0x3a746f67
   842cc:	20782520 	.word	0x20782520
   842d0:	000a7525 	.word	0x000a7525
   842d4:	6f727245 	.word	0x6f727245
   842d8:	6e6f2072 	.word	0x6e6f2072
   842dc:	6e657320 	.word	0x6e657320
   842e0:	74732064 	.word	0x74732064
   842e4:	73757461 	.word	0x73757461
   842e8:	63697020 	.word	0x63697020
   842ec:	0070756b 	.word	0x0070756b
   842f0:	444e4553 	.word	0x444e4553
   842f4:	434f5320 	.word	0x434f5320
   842f8:	5854454b 	.word	0x5854454b
   842fc:	00000059 	.word	0x00000059
   84300:	444e4553 	.word	0x444e4553
   84304:	55515320 	.word	0x55515320
   84308:	58455241 	.word	0x58455241
   8430c:	00000059 	.word	0x00000059
   84310:	444e4553 	.word	0x444e4553
   84314:	414c4720 	.word	0x414c4720
   84318:	59585353 	.word	0x59585353
   8431c:	00000000 	.word	0x00000000
   84320:	444e4553 	.word	0x444e4553
   84324:	786f4220 	.word	0x786f4220
   84328:	6c616f47 	.word	0x6c616f47
   8432c:	00007978 	.word	0x00007978
   84330:	74697257 	.word	0x74697257
   84334:	6f742065 	.word	0x6f742065
   84338:	616c7320 	.word	0x616c7320
   8433c:	00006576 	.word	0x00006576
   84340:	74697257 	.word	0x74697257
   84344:	6f742065 	.word	0x6f742065
   84348:	616c7320 	.word	0x616c7320
   8434c:	64206576 	.word	0x64206576
   84350:	00656e6f 	.word	0x00656e6f
   84354:	64616552 	.word	0x64616552
   84358:	6f726620 	.word	0x6f726620
   8435c:	6c73206d 	.word	0x6c73206d
   84360:	00657661 	.word	0x00657661
   84364:	656e6f44 	.word	0x656e6f44
   84368:	61657220 	.word	0x61657220
   8436c:	676e6964 	.word	0x676e6964
   84370:	00000000 	.word	0x00000000
   84374:	20746f67 	.word	0x20746f67
   84378:	41544144 	.word	0x41544144
   8437c:	0064253a 	.word	0x0064253a
   84380:	6f727265 	.word	0x6f727265
   84384:	6e6f2072 	.word	0x6e6f2072
   84388:	69727720 	.word	0x69727720
   8438c:	74206574 	.word	0x74206574
   84390:	6c73206f 	.word	0x6c73206f
   84394:	00657661 	.word	0x00657661
   84398:	20514552 	.word	0x20514552
   8439c:	206d7261 	.word	0x206d7261
   843a0:	6f666e69 	.word	0x6f666e69
   843a4:	00000000 	.word	0x00000000
   843a8:	496d7261 	.word	0x496d7261
   843ac:	3a6f666e 	.word	0x3a6f666e
   843b0:	786f6220 	.word	0x786f6220
   843b4:	25203a41 	.word	0x25203a41
   843b8:	6f622064 	.word	0x6f622064
   843bc:	203a4478 	.word	0x203a4478
   843c0:	6f206425 	.word	0x6f206425
   843c4:	20416a62 	.word	0x20416a62
   843c8:	6f206425 	.word	0x6f206425
   843cc:	20446a62 	.word	0x20446a62
   843d0:	63206425 	.word	0x63206425
   843d4:	203a6c6f 	.word	0x203a6c6f
   843d8:	00006425 	.word	0x00006425
   843dc:	20697774 	.word	0x20697774
   843e0:	6b636970 	.word	0x6b636970
   843e4:	00000000 	.word	0x00000000
   843e8:	6c696166 	.word	0x6c696166
   843ec:	74206465 	.word	0x74206465
   843f0:	7320746f 	.word	0x7320746f
   843f4:	74726174 	.word	0x74726174
   843f8:	63697020 	.word	0x63697020
   843fc:	2170756b 	.word	0x2170756b
   84400:	00000000 	.word	0x00000000
   84404:	72617453 	.word	0x72617453
   84408:	20646574 	.word	0x20646574
   8440c:	6b636970 	.word	0x6b636970
   84410:	00007075 	.word	0x00007075
   84414:	74206f64 	.word	0x74206f64
   84418:	73206957 	.word	0x73206957
   8441c:	75746174 	.word	0x75746174
   84420:	00000073 	.word	0x00000073
   84424:	4b434950 	.word	0x4b434950
   84428:	535f5055 	.word	0x535f5055
   8442c:	55544154 	.word	0x55544154
   84430:	49502e53 	.word	0x49502e53
   84434:	50554b43 	.word	0x50554b43
   84438:	4341425f 	.word	0x4341425f
   8443c:	5241574b 	.word	0x5241574b
   84440:	00003a44 	.word	0x00003a44
   84444:	6b636162 	.word	0x6b636162
   84448:	7525203a 	.word	0x7525203a
   8444c:	0000000a 	.word	0x0000000a
   84450:	4b434950 	.word	0x4b434950
   84454:	445f5055 	.word	0x445f5055
   84458:	00454e4f 	.word	0x00454e4f
   8445c:	4b434950 	.word	0x4b434950
   84460:	445f5055 	.word	0x445f5055
   84464:	5f454e4f 	.word	0x5f454e4f
   84468:	56495244 	.word	0x56495244
   8446c:	00003a45 	.word	0x00003a45
   84470:	4b434950 	.word	0x4b434950
   84474:	465f5055 	.word	0x465f5055
   84478:	454c4941 	.word	0x454c4941
   8447c:	00000044 	.word	0x00000044
   84480:	4b434950 	.word	0x4b434950
   84484:	535f5055 	.word	0x535f5055
   84488:	55544154 	.word	0x55544154
   8448c:	49502e53 	.word	0x49502e53
   84490:	50554b43 	.word	0x50554b43
   84494:	524f465f 	.word	0x524f465f
   84498:	44524157 	.word	0x44524157
   8449c:	0000003a 	.word	0x0000003a
   844a0:	77726f66 	.word	0x77726f66
   844a4:	3a647261 	.word	0x3a647261
   844a8:	0a752520 	.word	0x0a752520
   844ac:	00000000 	.word	0x00000000
   844b0:	4b434950 	.word	0x4b434950
   844b4:	525f5055 	.word	0x525f5055
   844b8:	494e4e55 	.word	0x494e4e55
   844bc:	0000474e 	.word	0x0000474e
   844c0:	4b434950 	.word	0x4b434950
   844c4:	495f5055 	.word	0x495f5055
   844c8:	00454c44 	.word	0x00454c44
   844cc:	6b636970 	.word	0x6b636970
   844d0:	73207075 	.word	0x73207075
   844d4:	75746174 	.word	0x75746174
   844d8:	72652073 	.word	0x72652073
   844dc:	00726f72 	.word	0x00726f72
   844e0:	49564f4d 	.word	0x49564f4d
   844e4:	4620474e 	.word	0x4620474e
   844e8:	00445752 	.word	0x00445752
   844ec:	454e4f44 	.word	0x454e4f44
   844f0:	564f4d20 	.word	0x564f4d20
   844f4:	00000045 	.word	0x00000045
   844f8:	20697774 	.word	0x20697774
   844fc:	74736574 	.word	0x74736574
   84500:	6f726420 	.word	0x6f726420
   84504:	66666f70 	.word	0x66666f70
   84508:	00000000 	.word	0x00000000
   8450c:	6f727265 	.word	0x6f727265
   84510:	74732072 	.word	0x74732072
   84514:	20747261 	.word	0x20747261
   84518:	706f7264 	.word	0x706f7264
   8451c:	0066666f 	.word	0x0066666f
   84520:	504f5244 	.word	0x504f5244
   84524:	5f46464f 	.word	0x5f46464f
   84528:	4e4e5552 	.word	0x4e4e5552
   8452c:	00474e49 	.word	0x00474e49
   84530:	504f5244 	.word	0x504f5244
   84534:	5f46464f 	.word	0x5f46464f
   84538:	4c494146 	.word	0x4c494146
   8453c:	003a4445 	.word	0x003a4445
   84540:	504f5244 	.word	0x504f5244
   84544:	5f46464f 	.word	0x5f46464f
   84548:	454e4f44 	.word	0x454e4f44
   8454c:	0000003a 	.word	0x0000003a
   84550:	706f7264 	.word	0x706f7264
   84554:	2066666f 	.word	0x2066666f
   84558:	6e6b6e75 	.word	0x6e6b6e75
   8455c:	006e776f 	.word	0x006e776f
   84560:	00006325 	.word	0x00006325
   84564:	20495754 	.word	0x20495754
   84568:	6f727265 	.word	0x6f727265
   8456c:	6e6f2072 	.word	0x6e6f2072
   84570:	6f727020 	.word	0x6f727020
   84574:	00006562 	.word	0x00006562
   84578:	00000043 	.word	0x00000043

0008457c <_global_impure_ptr>:
   8457c:	20070140 33323130 37363534 42413938     @.. 0123456789AB
   8458c:	46454443 00000000 33323130 37363534     CDEF....01234567
   8459c:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   845ac:	0000296c                                l)..

000845b0 <zeroes.6721>:
   845b0:	30303030 30303030 30303030 30303030     0000000000000000

000845c0 <blanks.6720>:
   845c0:	20202020 20202020 20202020 20202020                     

000845d0 <_init>:
   845d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   845d2:	bf00      	nop
   845d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   845d6:	bc08      	pop	{r3}
   845d8:	469e      	mov	lr, r3
   845da:	4770      	bx	lr

000845dc <__init_array_start>:
   845dc:	000822a1 	.word	0x000822a1

000845e0 <__frame_dummy_init_array_entry>:
   845e0:	00080119                                ....

000845e4 <_fini>:
   845e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   845e6:	bf00      	nop
   845e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   845ea:	bc08      	pop	{r3}
   845ec:	469e      	mov	lr, r3
   845ee:	4770      	bx	lr

000845f0 <__fini_array_start>:
   845f0:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20070000:	f3bf 8f5f 	dmb	sy
20070004:	3801      	subs	r0, #1
20070006:	d1fb      	bne.n	20070000 <portable_delay_cycles>
20070008:	4770      	bx	lr
2007000a:	bf00      	nop

2007000c <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007000c:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070010:	4a20      	ldr	r2, [pc, #128]	; (20070094 <SystemInit+0x88>)
20070012:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070014:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070018:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007001a:	4b1f      	ldr	r3, [pc, #124]	; (20070098 <SystemInit+0x8c>)
2007001c:	6a1b      	ldr	r3, [r3, #32]
2007001e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070022:	d107      	bne.n	20070034 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070024:	4a1d      	ldr	r2, [pc, #116]	; (2007009c <SystemInit+0x90>)
20070026:	4b1c      	ldr	r3, [pc, #112]	; (20070098 <SystemInit+0x8c>)
20070028:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007002a:	461a      	mov	r2, r3
2007002c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007002e:	f013 0f01 	tst.w	r3, #1
20070032:	d0fb      	beq.n	2007002c <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070034:	4a1a      	ldr	r2, [pc, #104]	; (200700a0 <SystemInit+0x94>)
20070036:	4b18      	ldr	r3, [pc, #96]	; (20070098 <SystemInit+0x8c>)
20070038:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007003a:	461a      	mov	r2, r3
2007003c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007003e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070042:	d0fb      	beq.n	2007003c <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070044:	4b14      	ldr	r3, [pc, #80]	; (20070098 <SystemInit+0x8c>)
20070046:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20070048:	f022 0203 	bic.w	r2, r2, #3
2007004c:	f042 0201 	orr.w	r2, r2, #1
20070050:	631a      	str	r2, [r3, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070052:	461a      	mov	r2, r3
20070054:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070056:	f013 0f08 	tst.w	r3, #8
2007005a:	d0fb      	beq.n	20070054 <SystemInit+0x48>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007005c:	4a11      	ldr	r2, [pc, #68]	; (200700a4 <SystemInit+0x98>)
2007005e:	4b0e      	ldr	r3, [pc, #56]	; (20070098 <SystemInit+0x8c>)
20070060:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070062:	461a      	mov	r2, r3
20070064:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070066:	f013 0f02 	tst.w	r3, #2
2007006a:	d0fb      	beq.n	20070064 <SystemInit+0x58>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007006c:	2211      	movs	r2, #17
2007006e:	4b0a      	ldr	r3, [pc, #40]	; (20070098 <SystemInit+0x8c>)
20070070:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070072:	461a      	mov	r2, r3
20070074:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070076:	f013 0f08 	tst.w	r3, #8
2007007a:	d0fb      	beq.n	20070074 <SystemInit+0x68>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007007c:	2212      	movs	r2, #18
2007007e:	4b06      	ldr	r3, [pc, #24]	; (20070098 <SystemInit+0x8c>)
20070080:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070082:	461a      	mov	r2, r3
20070084:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070086:	f013 0f08 	tst.w	r3, #8
2007008a:	d0fb      	beq.n	20070084 <SystemInit+0x78>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007008c:	4a06      	ldr	r2, [pc, #24]	; (200700a8 <SystemInit+0x9c>)
2007008e:	4b07      	ldr	r3, [pc, #28]	; (200700ac <SystemInit+0xa0>)
20070090:	601a      	str	r2, [r3, #0]
20070092:	4770      	bx	lr
20070094:	400e0a00 	.word	0x400e0a00
20070098:	400e0600 	.word	0x400e0600
2007009c:	00370809 	.word	0x00370809
200700a0:	01370809 	.word	0x01370809
200700a4:	200d3f01 	.word	0x200d3f01
200700a8:	0501bd00 	.word	0x0501bd00
200700ac:	2007013c 	.word	0x2007013c

200700b0 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700b0:	4b1b      	ldr	r3, [pc, #108]	; (20070120 <system_init_flash+0x70>)
200700b2:	4298      	cmp	r0, r3
200700b4:	d806      	bhi.n	200700c4 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700b6:	2300      	movs	r3, #0
200700b8:	4a1a      	ldr	r2, [pc, #104]	; (20070124 <system_init_flash+0x74>)
200700ba:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700bc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700c0:	6013      	str	r3, [r2, #0]
200700c2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700c4:	4b18      	ldr	r3, [pc, #96]	; (20070128 <system_init_flash+0x78>)
200700c6:	4298      	cmp	r0, r3
200700c8:	d807      	bhi.n	200700da <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700ca:	f44f 7380 	mov.w	r3, #256	; 0x100
200700ce:	4a15      	ldr	r2, [pc, #84]	; (20070124 <system_init_flash+0x74>)
200700d0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700d2:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700d6:	6013      	str	r3, [r2, #0]
200700d8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700da:	4b14      	ldr	r3, [pc, #80]	; (2007012c <system_init_flash+0x7c>)
200700dc:	4298      	cmp	r0, r3
200700de:	d807      	bhi.n	200700f0 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700e0:	f44f 7300 	mov.w	r3, #512	; 0x200
200700e4:	4a0f      	ldr	r2, [pc, #60]	; (20070124 <system_init_flash+0x74>)
200700e6:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700e8:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ec:	6013      	str	r3, [r2, #0]
200700ee:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700f0:	4b0f      	ldr	r3, [pc, #60]	; (20070130 <system_init_flash+0x80>)
200700f2:	4298      	cmp	r0, r3
200700f4:	d807      	bhi.n	20070106 <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700f6:	f44f 7340 	mov.w	r3, #768	; 0x300
200700fa:	4a0a      	ldr	r2, [pc, #40]	; (20070124 <system_init_flash+0x74>)
200700fc:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700fe:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070102:	6013      	str	r3, [r2, #0]
20070104:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
20070106:	4b0b      	ldr	r3, [pc, #44]	; (20070134 <system_init_flash+0x84>)
20070108:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007010a:	bf94      	ite	ls
2007010c:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070110:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070114:	4a03      	ldr	r2, [pc, #12]	; (20070124 <system_init_flash+0x74>)
20070116:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
20070118:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007011c:	6013      	str	r3, [r2, #0]
2007011e:	4770      	bx	lr
20070120:	0121eabf 	.word	0x0121eabf
20070124:	400e0a00 	.word	0x400e0a00
20070128:	02faf07f 	.word	0x02faf07f
2007012c:	03d08fff 	.word	0x03d08fff
20070130:	04c4b3ff 	.word	0x04c4b3ff
20070134:	055d4a7f 	.word	0x055d4a7f

20070138 <g_interrupt_enabled>:
20070138:	00000001                                ....

2007013c <SystemCoreClock>:
2007013c:	003d0900                                ..=.

20070140 <impure_data>:
20070140:	00000000 2007042c 20070494 200704fc     ....,.. ... ... 
	...
20070174:	00084578 00000000 00000000 00000000     xE..............
	...
200701e8:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200701f8:	0005deec 0000000b 00000000 00000000     ................
	...

20070568 <_impure_ptr>:
20070568:	20070140                                @.. 

2007056c <lc_ctype_charset>:
2007056c:	49435341 00000049 00000000 00000000     ASCII...........
	...

2007058c <__mb_cur_max>:
2007058c:	00000001                                ....

20070590 <__malloc_av_>:
	...
20070598:	20070590 20070590 20070598 20070598     ... ... ... ... 
200705a8:	200705a0 200705a0 200705a8 200705a8     ... ... ... ... 
200705b8:	200705b0 200705b0 200705b8 200705b8     ... ... ... ... 
200705c8:	200705c0 200705c0 200705c8 200705c8     ... ... ... ... 
200705d8:	200705d0 200705d0 200705d8 200705d8     ... ... ... ... 
200705e8:	200705e0 200705e0 200705e8 200705e8     ... ... ... ... 
200705f8:	200705f0 200705f0 200705f8 200705f8     ... ... ... ... 
20070608:	20070600 20070600 20070608 20070608     ... ... ... ... 
20070618:	20070610 20070610 20070618 20070618     ... ... ... ... 
20070628:	20070620 20070620 20070628 20070628      ..  .. (.. (.. 
20070638:	20070630 20070630 20070638 20070638     0.. 0.. 8.. 8.. 
20070648:	20070640 20070640 20070648 20070648     @.. @.. H.. H.. 
20070658:	20070650 20070650 20070658 20070658     P.. P.. X.. X.. 
20070668:	20070660 20070660 20070668 20070668     `.. `.. h.. h.. 
20070678:	20070670 20070670 20070678 20070678     p.. p.. x.. x.. 
20070688:	20070680 20070680 20070688 20070688     ... ... ... ... 
20070698:	20070690 20070690 20070698 20070698     ... ... ... ... 
200706a8:	200706a0 200706a0 200706a8 200706a8     ... ... ... ... 
200706b8:	200706b0 200706b0 200706b8 200706b8     ... ... ... ... 
200706c8:	200706c0 200706c0 200706c8 200706c8     ... ... ... ... 
200706d8:	200706d0 200706d0 200706d8 200706d8     ... ... ... ... 
200706e8:	200706e0 200706e0 200706e8 200706e8     ... ... ... ... 
200706f8:	200706f0 200706f0 200706f8 200706f8     ... ... ... ... 
20070708:	20070700 20070700 20070708 20070708     ... ... ... ... 
20070718:	20070710 20070710 20070718 20070718     ... ... ... ... 
20070728:	20070720 20070720 20070728 20070728      ..  .. (.. (.. 
20070738:	20070730 20070730 20070738 20070738     0.. 0.. 8.. 8.. 
20070748:	20070740 20070740 20070748 20070748     @.. @.. H.. H.. 
20070758:	20070750 20070750 20070758 20070758     P.. P.. X.. X.. 
20070768:	20070760 20070760 20070768 20070768     `.. `.. h.. h.. 
20070778:	20070770 20070770 20070778 20070778     p.. p.. x.. x.. 
20070788:	20070780 20070780 20070788 20070788     ... ... ... ... 
20070798:	20070790 20070790 20070798 20070798     ... ... ... ... 
200707a8:	200707a0 200707a0 200707a8 200707a8     ... ... ... ... 
200707b8:	200707b0 200707b0 200707b8 200707b8     ... ... ... ... 
200707c8:	200707c0 200707c0 200707c8 200707c8     ... ... ... ... 
200707d8:	200707d0 200707d0 200707d8 200707d8     ... ... ... ... 
200707e8:	200707e0 200707e0 200707e8 200707e8     ... ... ... ... 
200707f8:	200707f0 200707f0 200707f8 200707f8     ... ... ... ... 
20070808:	20070800 20070800 20070808 20070808     ... ... ... ... 
20070818:	20070810 20070810 20070818 20070818     ... ... ... ... 
20070828:	20070820 20070820 20070828 20070828      ..  .. (.. (.. 
20070838:	20070830 20070830 20070838 20070838     0.. 0.. 8.. 8.. 
20070848:	20070840 20070840 20070848 20070848     @.. @.. H.. H.. 
20070858:	20070850 20070850 20070858 20070858     P.. P.. X.. X.. 
20070868:	20070860 20070860 20070868 20070868     `.. `.. h.. h.. 
20070878:	20070870 20070870 20070878 20070878     p.. p.. x.. x.. 
20070888:	20070880 20070880 20070888 20070888     ... ... ... ... 
20070898:	20070890 20070890 20070898 20070898     ... ... ... ... 
200708a8:	200708a0 200708a0 200708a8 200708a8     ... ... ... ... 
200708b8:	200708b0 200708b0 200708b8 200708b8     ... ... ... ... 
200708c8:	200708c0 200708c0 200708c8 200708c8     ... ... ... ... 
200708d8:	200708d0 200708d0 200708d8 200708d8     ... ... ... ... 
200708e8:	200708e0 200708e0 200708e8 200708e8     ... ... ... ... 
200708f8:	200708f0 200708f0 200708f8 200708f8     ... ... ... ... 
20070908:	20070900 20070900 20070908 20070908     ... ... ... ... 
20070918:	20070910 20070910 20070918 20070918     ... ... ... ... 
20070928:	20070920 20070920 20070928 20070928      ..  .. (.. (.. 
20070938:	20070930 20070930 20070938 20070938     0.. 0.. 8.. 8.. 
20070948:	20070940 20070940 20070948 20070948     @.. @.. H.. H.. 
20070958:	20070950 20070950 20070958 20070958     P.. P.. X.. X.. 
20070968:	20070960 20070960 20070968 20070968     `.. `.. h.. h.. 
20070978:	20070970 20070970 20070978 20070978     p.. p.. x.. x.. 
20070988:	20070980 20070980 20070988 20070988     ... ... ... ... 

20070998 <__malloc_trim_threshold>:
20070998:	00020000                                ....

2007099c <__malloc_sbrk_base>:
2007099c:	ffffffff                                ....

200709a0 <__wctomb>:
200709a0:	000839b1                                .9..
