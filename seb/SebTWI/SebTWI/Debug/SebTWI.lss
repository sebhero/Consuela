
SebTWI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004768  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00084768  00084768  0000c768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009a4  20070000  00084770  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000188  200709a4  00085114  000109a4  2**2
                  ALLOC
  4 .stack        00002004  20070b2c  0008529c  000109a4  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  000109a4  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  000109cd  2**0
                  CONTENTS, READONLY
  7 .debug_info   0000e1f2  00000000  00000000  00010a28  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000028b1  00000000  00000000  0001ec1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00005469  00000000  00000000  000214cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000b70  00000000  00000000  00026934  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000a78  00000000  00000000  000274a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001887d  00000000  00000000  00027f1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000ffb7  00000000  00000000  00040799  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00062f3e  00000000  00000000  00050750  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000023d0  00000000  00000000  000b3690  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20072b30 	.word	0x20072b30
   80004:	00080d11 	.word	0x00080d11
   80008:	00080d0d 	.word	0x00080d0d
   8000c:	00080d0d 	.word	0x00080d0d
   80010:	00080d0d 	.word	0x00080d0d
   80014:	00080d0d 	.word	0x00080d0d
   80018:	00080d0d 	.word	0x00080d0d
	...
   8002c:	00080d0d 	.word	0x00080d0d
   80030:	00080d0d 	.word	0x00080d0d
   80034:	00000000 	.word	0x00000000
   80038:	00080d0d 	.word	0x00080d0d
   8003c:	00080d0d 	.word	0x00080d0d
   80040:	00080d0d 	.word	0x00080d0d
   80044:	00080d0d 	.word	0x00080d0d
   80048:	00080d0d 	.word	0x00080d0d
   8004c:	00080d0d 	.word	0x00080d0d
   80050:	00080d0d 	.word	0x00080d0d
   80054:	00080d0d 	.word	0x00080d0d
   80058:	00080d0d 	.word	0x00080d0d
   8005c:	00080d0d 	.word	0x00080d0d
   80060:	00080d0d 	.word	0x00080d0d
   80064:	00080d0d 	.word	0x00080d0d
   80068:	00000000 	.word	0x00000000
   8006c:	00080af5 	.word	0x00080af5
   80070:	00080b09 	.word	0x00080b09
   80074:	00080b1d 	.word	0x00080b1d
   80078:	00080b31 	.word	0x00080b31
	...
   80084:	00080f2d 	.word	0x00080f2d
   80088:	00080d0d 	.word	0x00080d0d
   8008c:	00080d0d 	.word	0x00080d0d
   80090:	00080d0d 	.word	0x00080d0d
   80094:	00080d0d 	.word	0x00080d0d
   80098:	00080d0d 	.word	0x00080d0d
   8009c:	00080d0d 	.word	0x00080d0d
   800a0:	00080d0d 	.word	0x00080d0d
   800a4:	00000000 	.word	0x00000000
   800a8:	00080d0d 	.word	0x00080d0d
   800ac:	00080d0d 	.word	0x00080d0d
   800b0:	00080d0d 	.word	0x00080d0d
   800b4:	00080d0d 	.word	0x00080d0d
   800b8:	00080d0d 	.word	0x00080d0d
   800bc:	00080d0d 	.word	0x00080d0d
   800c0:	00080d0d 	.word	0x00080d0d
   800c4:	00080d0d 	.word	0x00080d0d
   800c8:	00080d0d 	.word	0x00080d0d
   800cc:	00080d0d 	.word	0x00080d0d
   800d0:	00080d0d 	.word	0x00080d0d
   800d4:	00080d0d 	.word	0x00080d0d
   800d8:	00080d0d 	.word	0x00080d0d
   800dc:	00080d0d 	.word	0x00080d0d
   800e0:	00080d0d 	.word	0x00080d0d
   800e4:	00080d0d 	.word	0x00080d0d
   800e8:	00080d0d 	.word	0x00080d0d
   800ec:	00080d0d 	.word	0x00080d0d
   800f0:	00080d0d 	.word	0x00080d0d

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	200709a4 	.word	0x200709a4
   80110:	00000000 	.word	0x00000000
   80114:	00084770 	.word	0x00084770

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b06      	ldr	r3, [pc, #24]	; (80134 <frame_dummy+0x1c>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4806      	ldr	r0, [pc, #24]	; (80138 <frame_dummy+0x20>)
   80120:	4906      	ldr	r1, [pc, #24]	; (8013c <frame_dummy+0x24>)
   80122:	f3af 8000 	nop.w
   80126:	4806      	ldr	r0, [pc, #24]	; (80140 <frame_dummy+0x28>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b113      	cbz	r3, 80132 <frame_dummy+0x1a>
   8012c:	4b05      	ldr	r3, [pc, #20]	; (80144 <frame_dummy+0x2c>)
   8012e:	b103      	cbz	r3, 80132 <frame_dummy+0x1a>
   80130:	4798      	blx	r3
   80132:	bd08      	pop	{r3, pc}
   80134:	00000000 	.word	0x00000000
   80138:	00084770 	.word	0x00084770
   8013c:	200709a8 	.word	0x200709a8
   80140:	00084770 	.word	0x00084770
   80144:	00000000 	.word	0x00000000

00080148 <twi_comInit>:

void buildObject(uint8_t data[5], objectinfo_t *ptr_object);

void buildXY(uint8_t data[5], uint16_t *pInt, uint16_t *ypos_1);

void twi_comInit(void) {
   80148:	b500      	push	{lr}
   8014a:	b085      	sub	sp, #20
	// TWI master initialization options.
	//set that there is no data;
	theArm.hasData = 0;
   8014c:	2300      	movs	r3, #0
   8014e:	4a0b      	ldr	r2, [pc, #44]	; (8017c <twi_comInit+0x34>)
   80150:	7153      	strb	r3, [r2, #5]
	SLAVE_ADDR = SLAVE_ADDR_ARM;//twi slave address for arm
   80152:	2202      	movs	r2, #2
   80154:	490a      	ldr	r1, [pc, #40]	; (80180 <twi_comInit+0x38>)
   80156:	600a      	str	r2, [r1, #0]

	twi_master_options_t opt;
	opt.speed = TWI_SPEED;
   80158:	490a      	ldr	r1, [pc, #40]	; (80184 <twi_comInit+0x3c>)
   8015a:	9102      	str	r1, [sp, #8]
	opt.chip = SLAVE_ADDR;
   8015c:	f88d 200c 	strb.w	r2, [sp, #12]
typedef twi_packet_t twi_package_t;

static inline uint32_t twi_master_setup(twi_master_t p_twi,
		twi_master_options_t *p_opt)
{
	p_opt->master_clk = sysclk_get_cpu_hz();
   80160:	4a09      	ldr	r2, [pc, #36]	; (80188 <twi_comInit+0x40>)
   80162:	9201      	str	r2, [sp, #4]
	p_opt->smbus      = 0;
   80164:	f88d 300d 	strb.w	r3, [sp, #13]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   80168:	2017      	movs	r0, #23
   8016a:	4b08      	ldr	r3, [pc, #32]	; (8018c <twi_comInit+0x44>)
   8016c:	4798      	blx	r3
	} else {
		// Do Nothing
	}
#endif

	return (twi_master_init(p_twi, p_opt));
   8016e:	4808      	ldr	r0, [pc, #32]	; (80190 <twi_comInit+0x48>)
   80170:	a901      	add	r1, sp, #4
   80172:	4b08      	ldr	r3, [pc, #32]	; (80194 <twi_comInit+0x4c>)
   80174:	4798      	blx	r3

	// Initialize the TWI master driver.
	twi_master_setup(TWI_PORT, &opt);
}
   80176:	b005      	add	sp, #20
   80178:	f85d fb04 	ldr.w	pc, [sp], #4
   8017c:	20070b14 	.word	0x20070b14
   80180:	20070b10 	.word	0x20070b10
   80184:	000186a0 	.word	0x000186a0
   80188:	0501bd00 	.word	0x0501bd00
   8018c:	00080c2d 	.word	0x00080c2d
   80190:	40090000 	.word	0x40090000
   80194:	00080591 	.word	0x00080591

00080198 <twiSendData>:
	}
}

//Send data to Arm with TWI
//data holds the data, dataLength is how many bytes the data is.
uint8_t twiSendData(uint8_t *data, int dataLength) {
   80198:	b530      	push	{r4, r5, lr}
   8019a:	b087      	sub	sp, #28

	twi_package_t packet = {
   8019c:	2300      	movs	r3, #0
   8019e:	9301      	str	r3, [sp, #4]
   801a0:	9302      	str	r3, [sp, #8]
   801a2:	9305      	str	r3, [sp, #20]
   801a4:	9003      	str	r0, [sp, #12]
   801a6:	9104      	str	r1, [sp, #16]
   801a8:	4b0a      	ldr	r3, [pc, #40]	; (801d4 <twiSendData+0x3c>)
   801aa:	7819      	ldrb	r1, [r3, #0]
   801ac:	f88d 1014 	strb.w	r1, [sp, #20]
			.buffer       = data, // transfer data source buffer
			.length       = dataLength   // transfer data size (bytes)
	};


	if (twi_probe(TWI_PORT, SLAVE_ADDR) == TWI_SUCCESS) {
   801b0:	4809      	ldr	r0, [pc, #36]	; (801d8 <twiSendData+0x40>)
   801b2:	4b0a      	ldr	r3, [pc, #40]	; (801dc <twiSendData+0x44>)
   801b4:	4798      	blx	r3
   801b6:	b938      	cbnz	r0, 801c8 <twiSendData+0x30>
		while (twi_master_write(TWI_PORT, &packet) != TWI_SUCCESS);
   801b8:	4d07      	ldr	r5, [pc, #28]	; (801d8 <twiSendData+0x40>)
   801ba:	4c09      	ldr	r4, [pc, #36]	; (801e0 <twiSendData+0x48>)
   801bc:	4628      	mov	r0, r5
   801be:	a901      	add	r1, sp, #4
   801c0:	47a0      	blx	r4
   801c2:	2800      	cmp	r0, #0
   801c4:	d1fa      	bne.n	801bc <twiSendData+0x24>
   801c6:	e001      	b.n	801cc <twiSendData+0x34>
		return 1;
	} else {
		return 0;
   801c8:	2000      	movs	r0, #0
   801ca:	e000      	b.n	801ce <twiSendData+0x36>
	};


	if (twi_probe(TWI_PORT, SLAVE_ADDR) == TWI_SUCCESS) {
		while (twi_master_write(TWI_PORT, &packet) != TWI_SUCCESS);
		return 1;
   801cc:	2001      	movs	r0, #1
	} else {
		return 0;
	}
}
   801ce:	b007      	add	sp, #28
   801d0:	bd30      	pop	{r4, r5, pc}
   801d2:	bf00      	nop
   801d4:	20070b10 	.word	0x20070b10
   801d8:	40090000 	.word	0x40090000
   801dc:	00080745 	.word	0x00080745
   801e0:	000806a5 	.word	0x000806a5

000801e4 <twiReciveData>:

//Recive data from ARM with TWI
//recives and prints the data out on Uart.
//packageSize how many bytes expected to recive
//returns the data recived as array.
uint8_t twiReciveData(uint8_t *recv, uint8_t packageSize) {
   801e4:	b530      	push	{r4, r5, lr}
   801e6:	b087      	sub	sp, #28
	//package recived
	twi_package_t pkt_rcv = {
   801e8:	2300      	movs	r3, #0
   801ea:	9301      	str	r3, [sp, #4]
   801ec:	9302      	str	r3, [sp, #8]
   801ee:	9305      	str	r3, [sp, #20]
   801f0:	9003      	str	r0, [sp, #12]
   801f2:	9104      	str	r1, [sp, #16]
   801f4:	4b06      	ldr	r3, [pc, #24]	; (80210 <twiReciveData+0x2c>)
   801f6:	681b      	ldr	r3, [r3, #0]
   801f8:	f88d 3014 	strb.w	r3, [sp, #20]
			.length       = packageSize   // transfer data size (bytes)
	};

// 	if(twi_probe(TWI_PORT,SLAVE_ADDR)==TWI_SUCCESS)
// 	{
	while (twi_master_read(TWI_PORT, &pkt_rcv) != TWI_SUCCESS);
   801fc:	4d05      	ldr	r5, [pc, #20]	; (80214 <twiReciveData+0x30>)
   801fe:	4c06      	ldr	r4, [pc, #24]	; (80218 <twiReciveData+0x34>)
   80200:	4628      	mov	r0, r5
   80202:	a901      	add	r1, sp, #4
   80204:	47a0      	blx	r4
   80206:	2800      	cmp	r0, #0
   80208:	d1fa      	bne.n	80200 <twiReciveData+0x1c>
// 	}
// 	else{
// 		return 0;
// 	}

}
   8020a:	2001      	movs	r0, #1
   8020c:	b007      	add	sp, #28
   8020e:	bd30      	pop	{r4, r5, pc}
   80210:	20070b10 	.word	0x20070b10
   80214:	40090000 	.word	0x40090000
   80218:	000805d1 	.word	0x000805d1

0008021c <handleCmd>:


void handleCmd(uint8_t cmd) {
   8021c:	b508      	push	{r3, lr}

	switch (cmd) {
   8021e:	3802      	subs	r0, #2
   80220:	2823      	cmp	r0, #35	; 0x23
   80222:	d837      	bhi.n	80294 <handleCmd+0x78>
   80224:	e8df f000 	tbb	[pc, r0]
   80228:	361e1a16 	.word	0x361e1a16
   8022c:	36363636 	.word	0x36363636
   80230:	36363636 	.word	0x36363636
   80234:	36363636 	.word	0x36363636
   80238:	36363636 	.word	0x36363636
   8023c:	36363636 	.word	0x36363636
   80240:	36363636 	.word	0x36363636
   80244:	2a123636 	.word	0x2a123636
   80248:	32262e22 	.word	0x32262e22
		case TWI_CMD_ARM_INIT:
			printf("TWI_CMD_ARM_INIT\n");
   8024c:	4813      	ldr	r0, [pc, #76]	; (8029c <handleCmd+0x80>)
   8024e:	4b14      	ldr	r3, [pc, #80]	; (802a0 <handleCmd+0x84>)
   80250:	4798      	blx	r3
			break;
   80252:	bd08      	pop	{r3, pc}
		case TWI_CMD_ARM_REQ_BOX_INFO:
			printf("TWI_CMD_ARM_REQ_BOX_INFO\n");
   80254:	4813      	ldr	r0, [pc, #76]	; (802a4 <handleCmd+0x88>)
   80256:	4b12      	ldr	r3, [pc, #72]	; (802a0 <handleCmd+0x84>)
   80258:	4798      	blx	r3
			break;
   8025a:	bd08      	pop	{r3, pc}
		case TWI_CMD_ARM_REQ_OBJ_INFO:
			printf("TWI_CMD_ARM_REQ_OBJ_INFO\n");
   8025c:	4812      	ldr	r0, [pc, #72]	; (802a8 <handleCmd+0x8c>)
   8025e:	4b10      	ldr	r3, [pc, #64]	; (802a0 <handleCmd+0x84>)
   80260:	4798      	blx	r3
			break;
   80262:	bd08      	pop	{r3, pc}
		case TWI_CMD_ARM_REQ_COLLECT_INFO:
			printf("TWI_CMD_ARM_REQ_COLLECT_INFO\n");
   80264:	4811      	ldr	r0, [pc, #68]	; (802ac <handleCmd+0x90>)
   80266:	4b0e      	ldr	r3, [pc, #56]	; (802a0 <handleCmd+0x84>)
   80268:	4798      	blx	r3
			break;
   8026a:	bd08      	pop	{r3, pc}
		case TWI_CMD_PICKUP_START:
			printf("TWI_CMD_PICKUP_START\n");
   8026c:	4810      	ldr	r0, [pc, #64]	; (802b0 <handleCmd+0x94>)
   8026e:	4b0c      	ldr	r3, [pc, #48]	; (802a0 <handleCmd+0x84>)
   80270:	4798      	blx	r3
			break;
   80272:	bd08      	pop	{r3, pc}
		case TWI_CMD_PICKUP_STATUS:
			printf("TWI_CMD_PICKUP_STATUS\n");
   80274:	480f      	ldr	r0, [pc, #60]	; (802b4 <handleCmd+0x98>)
   80276:	4b0a      	ldr	r3, [pc, #40]	; (802a0 <handleCmd+0x84>)
   80278:	4798      	blx	r3
			break;
   8027a:	bd08      	pop	{r3, pc}
		case TWI_CMD_DROPOFF_START:
			printf("TWI_CMD_DROPOFF_START\n");
   8027c:	480e      	ldr	r0, [pc, #56]	; (802b8 <handleCmd+0x9c>)
   8027e:	4b08      	ldr	r3, [pc, #32]	; (802a0 <handleCmd+0x84>)
   80280:	4798      	blx	r3
			break;
   80282:	bd08      	pop	{r3, pc}
		case TWI_CMD_DROPOFF_STATUS:
			printf("TWI_CMD_DROPOFF_STATUS\n");
   80284:	480d      	ldr	r0, [pc, #52]	; (802bc <handleCmd+0xa0>)
   80286:	4b06      	ldr	r3, [pc, #24]	; (802a0 <handleCmd+0x84>)
   80288:	4798      	blx	r3
			break;
   8028a:	bd08      	pop	{r3, pc}
		case TWI_CMD_ERROR:
			printf("TWI_CMD_ERROR\n");
   8028c:	480c      	ldr	r0, [pc, #48]	; (802c0 <handleCmd+0xa4>)
   8028e:	4b04      	ldr	r3, [pc, #16]	; (802a0 <handleCmd+0x84>)
   80290:	4798      	blx	r3
			break;
   80292:	bd08      	pop	{r3, pc}
		default:
			printf("error\n");
   80294:	480b      	ldr	r0, [pc, #44]	; (802c4 <handleCmd+0xa8>)
   80296:	4b02      	ldr	r3, [pc, #8]	; (802a0 <handleCmd+0x84>)
   80298:	4798      	blx	r3
   8029a:	bd08      	pop	{r3, pc}
   8029c:	00084320 	.word	0x00084320
   802a0:	00081369 	.word	0x00081369
   802a4:	00084334 	.word	0x00084334
   802a8:	00084350 	.word	0x00084350
   802ac:	0008436c 	.word	0x0008436c
   802b0:	0008438c 	.word	0x0008438c
   802b4:	000843a4 	.word	0x000843a4
   802b8:	000843bc 	.word	0x000843bc
   802bc:	000843d4 	.word	0x000843d4
   802c0:	000843ec 	.word	0x000843ec
   802c4:	000843fc 	.word	0x000843fc

000802c8 <twi_pickupStart>:
	twi_set_slave_addr(TWI_PORT, SLAVE_ADDR);

}

//send command for arm to start pickup
uint8_t twi_pickupStart() {
   802c8:	b500      	push	{lr}
   802ca:	b083      	sub	sp, #12
	Object theObj=GLASS;
	uint8_t data[3] = {TWI_CMD_PICKUP_START, 0, theObj};
   802cc:	2322      	movs	r3, #34	; 0x22
   802ce:	f88d 3004 	strb.w	r3, [sp, #4]
   802d2:	2300      	movs	r3, #0
   802d4:	f88d 3005 	strb.w	r3, [sp, #5]
   802d8:	2304      	movs	r3, #4
   802da:	f88d 3006 	strb.w	r3, [sp, #6]
	//send pickup start cmd
	return twiSendData(data, 3);
   802de:	eb0d 0003 	add.w	r0, sp, r3
   802e2:	2103      	movs	r1, #3
   802e4:	4b02      	ldr	r3, [pc, #8]	; (802f0 <twi_pickupStart+0x28>)
   802e6:	4798      	blx	r3
}
   802e8:	b003      	add	sp, #12
   802ea:	f85d fb04 	ldr.w	pc, [sp], #4
   802ee:	bf00      	nop
   802f0:	00080199 	.word	0x00080199

000802f4 <twi_pickupGetStatus>:
void twi_pickupSetCm(uint8_t cm) {
	twi_move_cm = cm;
}

//set arm in send pickup status
PickupStatus twi_pickupGetStatus() {
   802f4:	b500      	push	{lr}
   802f6:	b083      	sub	sp, #12
	uint8_t data[3] = {TWI_CMD_PICKUP_STATUS, 0, 0};
   802f8:	2324      	movs	r3, #36	; 0x24
   802fa:	f88d 3004 	strb.w	r3, [sp, #4]
   802fe:	2300      	movs	r3, #0
   80300:	f88d 3005 	strb.w	r3, [sp, #5]
   80304:	f88d 3006 	strb.w	r3, [sp, #6]
	uint8_t recv[3] = {0};
   80308:	f8ad 3000 	strh.w	r3, [sp]
   8030c:	f88d 3002 	strb.w	r3, [sp, #2]
	//send pickup start cmd
	if (twiSendData(data, 3)) {
   80310:	a801      	add	r0, sp, #4
   80312:	2103      	movs	r1, #3
   80314:	4b15      	ldr	r3, [pc, #84]	; (8036c <twi_pickupGetStatus+0x78>)
   80316:	4798      	blx	r3
   80318:	b310      	cbz	r0, 80360 <twi_pickupGetStatus+0x6c>
		//get status
		twiReciveData(recv, 3);
   8031a:	4668      	mov	r0, sp
   8031c:	2103      	movs	r1, #3
   8031e:	4b14      	ldr	r3, [pc, #80]	; (80370 <twi_pickupGetStatus+0x7c>)
   80320:	4798      	blx	r3
		if (recv[0] == TWI_CMD_PICKUP_STATUS) {
   80322:	f89d 3000 	ldrb.w	r3, [sp]
   80326:	2b24      	cmp	r3, #36	; 0x24
   80328:	d10c      	bne.n	80344 <twi_pickupGetStatus+0x50>
			//printf("pickupstatus %x %u",recv[0],recv[1]);
			//vTaskDelay(pdMSTOTICKS(10));

			//when slave want to move
			if (recv[1] == PICKUP_FORWARD || recv[1] == PICKUP_BACKWARD) {
   8032a:	f89d 0001 	ldrb.w	r0, [sp, #1]
   8032e:	1ec3      	subs	r3, r0, #3
   80330:	b2db      	uxtb	r3, r3
   80332:	2b01      	cmp	r3, #1
   80334:	d817      	bhi.n	80366 <twi_pickupGetStatus+0x72>
	}
}

//set pickup status. when done driving
void twi_pickupSetMasterStatus(PickupStatus newStatus) {
	twi_masterPickupStatus = newStatus;
   80336:	4b0f      	ldr	r3, [pc, #60]	; (80374 <twi_pickupGetStatus+0x80>)
   80338:	7018      	strb	r0, [r3, #0]
	return twiSendData(data, 3);
}


void twi_pickupSetCm(uint8_t cm) {
	twi_move_cm = cm;
   8033a:	f89d 2002 	ldrb.w	r2, [sp, #2]
   8033e:	4b0e      	ldr	r3, [pc, #56]	; (80378 <twi_pickupGetStatus+0x84>)
   80340:	701a      	strb	r2, [r3, #0]
   80342:	e010      	b.n	80366 <twi_pickupGetStatus+0x72>
				twi_pickupSetMasterStatus(recv[1]);
				twi_pickupSetCm(recv[2]);
			}
			return recv[1];
		} else {
			puts("ERROR pickup status");
   80344:	480d      	ldr	r0, [pc, #52]	; (8037c <twi_pickupGetStatus+0x88>)
   80346:	4b0e      	ldr	r3, [pc, #56]	; (80380 <twi_pickupGetStatus+0x8c>)
   80348:	4798      	blx	r3
			printf("got: %x %u\n", recv[0], recv[0]);
   8034a:	f89d 2000 	ldrb.w	r2, [sp]
   8034e:	480d      	ldr	r0, [pc, #52]	; (80384 <twi_pickupGetStatus+0x90>)
   80350:	4611      	mov	r1, r2
   80352:	4b0d      	ldr	r3, [pc, #52]	; (80388 <twi_pickupGetStatus+0x94>)
   80354:	4798      	blx	r3
			//vTaskDelay(pdMSTOTICKS(10));
			handleCmd(recv[0]);
   80356:	f89d 0000 	ldrb.w	r0, [sp]
   8035a:	4b0c      	ldr	r3, [pc, #48]	; (8038c <twi_pickupGetStatus+0x98>)
   8035c:	4798      	blx	r3
   8035e:	e002      	b.n	80366 <twi_pickupGetStatus+0x72>
			//vTaskDelay(pdMSTOTICKS(10));
		}

	} else {
		puts("Error on send status pickup");
   80360:	480b      	ldr	r0, [pc, #44]	; (80390 <twi_pickupGetStatus+0x9c>)
   80362:	4b07      	ldr	r3, [pc, #28]	; (80380 <twi_pickupGetStatus+0x8c>)
   80364:	4798      	blx	r3
	}

}
   80366:	b003      	add	sp, #12
   80368:	f85d fb04 	ldr.w	pc, [sp], #4
   8036c:	00080199 	.word	0x00080199
   80370:	000801e5 	.word	0x000801e5
   80374:	20070138 	.word	0x20070138
   80378:	200709c0 	.word	0x200709c0
   8037c:	00084428 	.word	0x00084428
   80380:	00081485 	.word	0x00081485
   80384:	0008443c 	.word	0x0008443c
   80388:	00081369 	.word	0x00081369
   8038c:	0008021d 	.word	0x0008021d
   80390:	00084448 	.word	0x00084448

00080394 <twi_pickupSendMovementDone>:

//send done driving
uint8_t twi_pickupSendMovementDone() {
   80394:	b500      	push	{lr}
   80396:	b083      	sub	sp, #12
	uint8_t data[3] = {TWI_CMD_PICKUP_STATUS, PICKUP_DONE_DRIVE, 0};
   80398:	4b0a      	ldr	r3, [pc, #40]	; (803c4 <twi_pickupSendMovementDone+0x30>)
   8039a:	881a      	ldrh	r2, [r3, #0]
   8039c:	789b      	ldrb	r3, [r3, #2]
   8039e:	f8ad 2004 	strh.w	r2, [sp, #4]
   803a2:	f88d 3006 	strb.w	r3, [sp, #6]
	//send pickup start cmd
	if (twiSendData(data, 3)) {
   803a6:	a801      	add	r0, sp, #4
   803a8:	2103      	movs	r1, #3
   803aa:	4b07      	ldr	r3, [pc, #28]	; (803c8 <twi_pickupSendMovementDone+0x34>)
   803ac:	4798      	blx	r3
   803ae:	4603      	mov	r3, r0
   803b0:	b118      	cbz	r0, 803ba <twi_pickupSendMovementDone+0x26>
		twi_masterPickupStatus = PICKUP_RUNNING;
   803b2:	2205      	movs	r2, #5
   803b4:	4b05      	ldr	r3, [pc, #20]	; (803cc <twi_pickupSendMovementDone+0x38>)
   803b6:	701a      	strb	r2, [r3, #0]
		//success
		return 1;
   803b8:	2301      	movs	r3, #1
	} else {
		//failed
		return 0;
	}

}
   803ba:	4618      	mov	r0, r3
   803bc:	b003      	add	sp, #12
   803be:	f85d fb04 	ldr.w	pc, [sp], #4
   803c2:	bf00      	nop
   803c4:	0008431c 	.word	0x0008431c
   803c8:	00080199 	.word	0x00080199
   803cc:	20070138 	.word	0x20070138

000803d0 <twi_pickupSetMasterStatus>:
	}
}

//set pickup status. when done driving
void twi_pickupSetMasterStatus(PickupStatus newStatus) {
	twi_masterPickupStatus = newStatus;
   803d0:	4b01      	ldr	r3, [pc, #4]	; (803d8 <twi_pickupSetMasterStatus+0x8>)
   803d2:	7018      	strb	r0, [r3, #0]
   803d4:	4770      	bx	lr
   803d6:	bf00      	nop
   803d8:	20070138 	.word	0x20070138

000803dc <twi_pickupGetMasterStatus>:
}

//get the current pickup status
PickupStatus twi_pickupGetMasterStatus(void) {
	return twi_masterPickupStatus;
}
   803dc:	4b01      	ldr	r3, [pc, #4]	; (803e4 <twi_pickupGetMasterStatus+0x8>)
   803de:	7818      	ldrb	r0, [r3, #0]
   803e0:	4770      	bx	lr
   803e2:	bf00      	nop
   803e4:	20070138 	.word	0x20070138

000803e8 <twi_pickupGetMoveCm>:

uint8_t twi_pickupGetMoveCm(void) {
	return twi_move_cm;
}
   803e8:	4b01      	ldr	r3, [pc, #4]	; (803f0 <twi_pickupGetMoveCm+0x8>)
   803ea:	7818      	ldrb	r0, [r3, #0]
   803ec:	4770      	bx	lr
   803ee:	bf00      	nop
   803f0:	200709c0 	.word	0x200709c0

000803f4 <usart_serial_read_packet>:
 * \param len    Length of data
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
   803f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   803f8:	b083      	sub	sp, #12
   803fa:	4605      	mov	r5, r0
	while (len) {
   803fc:	4690      	mov	r8, r2
   803fe:	2a00      	cmp	r2, #0
   80400:	d047      	beq.n	80492 <usart_serial_read_packet+0x9e>
   80402:	1c4e      	adds	r6, r1, #1
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80404:	4f25      	ldr	r7, [pc, #148]	; (8049c <usart_serial_read_packet+0xa8>)
		while (usart_read(p_usart, &val));
   80406:	4c26      	ldr	r4, [pc, #152]	; (804a0 <usart_serial_read_packet+0xac>)
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80408:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 804b4 <usart_serial_read_packet+0xc0>
	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
   8040c:	f8df b094 	ldr.w	fp, [pc, #148]	; 804a4 <usart_serial_read_packet+0xb0>
   80410:	f106 39ff 	add.w	r9, r6, #4294967295
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
	uint32_t val = 0;
   80414:	2300      	movs	r3, #0
   80416:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   80418:	4b22      	ldr	r3, [pc, #136]	; (804a4 <usart_serial_read_packet+0xb0>)
   8041a:	429d      	cmp	r5, r3
   8041c:	d106      	bne.n	8042c <usart_serial_read_packet+0x38>
		while (uart_read((Uart*)p_usart, data));
   8041e:	4658      	mov	r0, fp
   80420:	4649      	mov	r1, r9
   80422:	4b21      	ldr	r3, [pc, #132]	; (804a8 <usart_serial_read_packet+0xb4>)
   80424:	4798      	blx	r3
   80426:	2800      	cmp	r0, #0
   80428:	d1f9      	bne.n	8041e <usart_serial_read_packet+0x2a>
   8042a:	e019      	b.n	80460 <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   8042c:	4b1f      	ldr	r3, [pc, #124]	; (804ac <usart_serial_read_packet+0xb8>)
   8042e:	429d      	cmp	r5, r3
   80430:	d109      	bne.n	80446 <usart_serial_read_packet+0x52>
		while (usart_read(p_usart, &val));
   80432:	4699      	mov	r9, r3
   80434:	4648      	mov	r0, r9
   80436:	a901      	add	r1, sp, #4
   80438:	47a0      	blx	r4
   8043a:	2800      	cmp	r0, #0
   8043c:	d1fa      	bne.n	80434 <usart_serial_read_packet+0x40>
		*data = (uint8_t)(val & 0xFF);
   8043e:	9b01      	ldr	r3, [sp, #4]
   80440:	f806 3c01 	strb.w	r3, [r6, #-1]
   80444:	e017      	b.n	80476 <usart_serial_read_packet+0x82>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80446:	4b1a      	ldr	r3, [pc, #104]	; (804b0 <usart_serial_read_packet+0xbc>)
   80448:	429d      	cmp	r5, r3
   8044a:	d109      	bne.n	80460 <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
   8044c:	4699      	mov	r9, r3
   8044e:	4648      	mov	r0, r9
   80450:	a901      	add	r1, sp, #4
   80452:	47a0      	blx	r4
   80454:	2800      	cmp	r0, #0
   80456:	d1fa      	bne.n	8044e <usart_serial_read_packet+0x5a>
		*data = (uint8_t)(val & 0xFF);
   80458:	9b01      	ldr	r3, [sp, #4]
   8045a:	f806 3c01 	strb.w	r3, [r6, #-1]
   8045e:	e014      	b.n	8048a <usart_serial_read_packet+0x96>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80460:	4555      	cmp	r5, sl
   80462:	d108      	bne.n	80476 <usart_serial_read_packet+0x82>
		while (usart_read(p_usart, &val));
   80464:	4650      	mov	r0, sl
   80466:	a901      	add	r1, sp, #4
   80468:	47a0      	blx	r4
   8046a:	2800      	cmp	r0, #0
   8046c:	d1fa      	bne.n	80464 <usart_serial_read_packet+0x70>
		*data = (uint8_t)(val & 0xFF);
   8046e:	9b01      	ldr	r3, [sp, #4]
   80470:	f806 3c01 	strb.w	r3, [r6, #-1]
   80474:	e009      	b.n	8048a <usart_serial_read_packet+0x96>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80476:	42bd      	cmp	r5, r7
   80478:	d107      	bne.n	8048a <usart_serial_read_packet+0x96>
		while (usart_read(p_usart, &val));
   8047a:	4638      	mov	r0, r7
   8047c:	a901      	add	r1, sp, #4
   8047e:	47a0      	blx	r4
   80480:	2800      	cmp	r0, #0
   80482:	d1fa      	bne.n	8047a <usart_serial_read_packet+0x86>
		*data = (uint8_t)(val & 0xFF);
   80484:	9b01      	ldr	r3, [sp, #4]
   80486:	f806 3c01 	strb.w	r3, [r6, #-1]
   8048a:	3601      	adds	r6, #1
   8048c:	f1b8 0801 	subs.w	r8, r8, #1
   80490:	d1be      	bne.n	80410 <usart_serial_read_packet+0x1c>
		usart_serial_getchar(usart, data);
		len--;
		data++;
	}
	return STATUS_OK;
}
   80492:	2000      	movs	r0, #0
   80494:	b003      	add	sp, #12
   80496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8049a:	bf00      	nop
   8049c:	400a4000 	.word	0x400a4000
   804a0:	00080cf5 	.word	0x00080cf5
   804a4:	400e0800 	.word	0x400e0800
   804a8:	00080ccd 	.word	0x00080ccd
   804ac:	40098000 	.word	0x40098000
   804b0:	4009c000 	.word	0x4009c000
   804b4:	400a0000 	.word	0x400a0000

000804b8 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   804b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   804bc:	460c      	mov	r4, r1
   804be:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
   804c0:	b960      	cbnz	r0, 804dc <_read+0x24>
		return -1;
	}

	for (; len > 0; --len) {
   804c2:	2a00      	cmp	r2, #0
   804c4:	dd0e      	ble.n	804e4 <_read+0x2c>
   804c6:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   804c8:	4e09      	ldr	r6, [pc, #36]	; (804f0 <_read+0x38>)
   804ca:	4d0a      	ldr	r5, [pc, #40]	; (804f4 <_read+0x3c>)
   804cc:	6830      	ldr	r0, [r6, #0]
   804ce:	4621      	mov	r1, r4
   804d0:	682b      	ldr	r3, [r5, #0]
   804d2:	4798      	blx	r3
		ptr++;
   804d4:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   804d6:	42bc      	cmp	r4, r7
   804d8:	d1f8      	bne.n	804cc <_read+0x14>
   804da:	e006      	b.n	804ea <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
   804dc:	f04f 30ff 	mov.w	r0, #4294967295
   804e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len > 0; --len) {
   804e4:	2000      	movs	r0, #0
   804e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
   804ea:	4640      	mov	r0, r8
	}
	return nChars;
}
   804ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   804f0:	20070b24 	.word	0x20070b24
   804f4:	20070b1c 	.word	0x20070b1c

000804f8 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   804f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   804fc:	460e      	mov	r6, r1
   804fe:	4615      	mov	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   80500:	3801      	subs	r0, #1
   80502:	2802      	cmp	r0, #2
   80504:	d80f      	bhi.n	80526 <_write+0x2e>
		return -1;
	}

	for (; len != 0; --len) {
   80506:	b192      	cbz	r2, 8052e <_write+0x36>
   80508:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
   8050a:	f8df 803c 	ldr.w	r8, [pc, #60]	; 80548 <_write+0x50>
   8050e:	4f0d      	ldr	r7, [pc, #52]	; (80544 <_write+0x4c>)
   80510:	f8d8 0000 	ldr.w	r0, [r8]
   80514:	5d31      	ldrb	r1, [r6, r4]
   80516:	683b      	ldr	r3, [r7, #0]
   80518:	4798      	blx	r3
   8051a:	2800      	cmp	r0, #0
   8051c:	db0a      	blt.n	80534 <_write+0x3c>
			return -1;
		}
		++nChars;
   8051e:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   80520:	42a5      	cmp	r5, r4
   80522:	d1f5      	bne.n	80510 <_write+0x18>
   80524:	e00a      	b.n	8053c <_write+0x44>
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
   80526:	f04f 30ff 	mov.w	r0, #4294967295
   8052a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len != 0; --len) {
   8052e:	2000      	movs	r0, #0
   80530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
   80534:	f04f 30ff 	mov.w	r0, #4294967295
   80538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		++nChars;
   8053c:	4620      	mov	r0, r4
	}
	return nChars;
}
   8053e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80542:	bf00      	nop
   80544:	20070b20 	.word	0x20070b20
   80548:	20070b24 	.word	0x20070b24

0008054c <twi_set_speed>:
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
   8054c:	4b0f      	ldr	r3, [pc, #60]	; (8058c <twi_set_speed+0x40>)
   8054e:	4299      	cmp	r1, r3
   80550:	d819      	bhi.n	80586 <twi_set_speed+0x3a>
		return FAIL;
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   80552:	0049      	lsls	r1, r1, #1
   80554:	fbb2 f2f1 	udiv	r2, r2, r1
   80558:	3a04      	subs	r2, #4

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   8055a:	2aff      	cmp	r2, #255	; 0xff
   8055c:	d907      	bls.n	8056e <twi_set_speed+0x22>
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
   8055e:	2300      	movs	r3, #0
	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
		/* Increase clock divider */
		ckdiv++;
   80560:	3301      	adds	r3, #1
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
   80562:	0852      	lsrs	r2, r2, #1
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   80564:	2aff      	cmp	r2, #255	; 0xff
   80566:	d903      	bls.n	80570 <twi_set_speed+0x24>
   80568:	2b07      	cmp	r3, #7
   8056a:	d1f9      	bne.n	80560 <twi_set_speed+0x14>
   8056c:	e000      	b.n	80570 <twi_set_speed+0x24>
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
   8056e:	2300      	movs	r3, #0
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   80570:	0211      	lsls	r1, r2, #8
   80572:	b289      	uxth	r1, r1
			TWI_CWGR_CKDIV(ckdiv);
   80574:	041b      	lsls	r3, r3, #16
   80576:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   8057a:	430b      	orrs	r3, r1
   8057c:	b2d2      	uxtb	r2, r2
   8057e:	431a      	orrs	r2, r3
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
   80580:	6102      	str	r2, [r0, #16]
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
			TWI_CWGR_CKDIV(ckdiv);

	return PASS;
   80582:	2000      	movs	r0, #0
   80584:	4770      	bx	lr
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
		return FAIL;
   80586:	2001      	movs	r0, #1
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
			TWI_CWGR_CKDIV(ckdiv);

	return PASS;
}
   80588:	4770      	bx	lr
   8058a:	bf00      	nop
   8058c:	00061a80 	.word	0x00061a80

00080590 <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
   80590:	b538      	push	{r3, r4, r5, lr}
   80592:	4604      	mov	r4, r0
   80594:	460d      	mov	r5, r1
	uint32_t status = TWI_SUCCESS;

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
   80596:	f04f 33ff 	mov.w	r3, #4294967295
   8059a:	6283      	str	r3, [r0, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
   8059c:	6a03      	ldr	r3, [r0, #32]
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
   8059e:	2380      	movs	r3, #128	; 0x80
   805a0:	6003      	str	r3, [r0, #0]
	p_twi->TWI_RHR;
   805a2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
   805a4:	2308      	movs	r3, #8
   805a6:	6003      	str	r3, [r0, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
   805a8:	2320      	movs	r3, #32
   805aa:	6003      	str	r3, [r0, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
   805ac:	2304      	movs	r3, #4
   805ae:	6003      	str	r3, [r0, #0]
	twi_reset(p_twi);

	twi_enable_master_mode(p_twi);

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
   805b0:	6849      	ldr	r1, [r1, #4]
   805b2:	682a      	ldr	r2, [r5, #0]
   805b4:	4b05      	ldr	r3, [pc, #20]	; (805cc <twi_master_init+0x3c>)
   805b6:	4798      	blx	r3
   805b8:	2801      	cmp	r0, #1
   805ba:	bf14      	ite	ne
   805bc:	2000      	movne	r0, #0
   805be:	2001      	moveq	r0, #1
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
	}

	if (p_opt->smbus == 1) {
   805c0:	7a6b      	ldrb	r3, [r5, #9]
   805c2:	2b01      	cmp	r3, #1
		p_twi->TWI_CR = TWI_CR_QUICK;
   805c4:	bf04      	itt	eq
   805c6:	2340      	moveq	r3, #64	; 0x40
   805c8:	6023      	streq	r3, [r4, #0]
	}

	return status;
}
   805ca:	bd38      	pop	{r3, r4, r5, pc}
   805cc:	0008054d 	.word	0x0008054d

000805d0 <twi_master_read>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twi_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
   805d0:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
   805d4:	4604      	mov	r4, r0
	uint32_t status;
	uint32_t cnt = p_packet->length;
   805d6:	68cb      	ldr	r3, [r1, #12]
	uint8_t *buffer = p_packet->buffer;
   805d8:	688e      	ldr	r6, [r1, #8]
	uint8_t stop_sent = 0;
	uint32_t timeout = TWI_TIMEOUT;;
	
	/* Check argument */
	if (cnt == 0) {
   805da:	2b00      	cmp	r3, #0
   805dc:	d049      	beq.n	80672 <twi_master_read+0xa2>
		return TWI_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
   805de:	2200      	movs	r2, #0
   805e0:	6042      	str	r2, [r0, #4]
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
   805e2:	6848      	ldr	r0, [r1, #4]
   805e4:	0200      	lsls	r0, r0, #8
   805e6:	f400 7040 	and.w	r0, r0, #768	; 0x300
		return TWI_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
   805ea:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
   805ee:	7c0d      	ldrb	r5, [r1, #16]
   805f0:	042d      	lsls	r5, r5, #16
   805f2:	f405 05fe 	and.w	r5, r5, #8323072	; 0x7f0000
   805f6:	4328      	orrs	r0, r5
   805f8:	6060      	str	r0, [r4, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
   805fa:	60e2      	str	r2, [r4, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   805fc:	684a      	ldr	r2, [r1, #4]
 */
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
   805fe:	b15a      	cbz	r2, 80618 <twi_master_read+0x48>
		return 0;

	val = addr[0];
   80600:	7808      	ldrb	r0, [r1, #0]
	if (len > 1) {
   80602:	2a01      	cmp	r2, #1
		val <<= 8;
		val |= addr[1];
   80604:	bfc4      	itt	gt
   80606:	784d      	ldrbgt	r5, [r1, #1]
   80608:	ea45 2000 	orrgt.w	r0, r5, r0, lsl #8
	}
	if (len > 2) {
   8060c:	2a02      	cmp	r2, #2
   8060e:	dd04      	ble.n	8061a <twi_master_read+0x4a>
		val <<= 8;
		val |= addr[2];
   80610:	788a      	ldrb	r2, [r1, #2]
   80612:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
   80616:	e000      	b.n	8061a <twi_master_read+0x4a>
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
		return 0;
   80618:	2000      	movs	r0, #0
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   8061a:	60e0      	str	r0, [r4, #12]

	/* Send a START condition */
	if (cnt == 1) {
   8061c:	2b01      	cmp	r3, #1
   8061e:	d104      	bne.n	8062a <twi_master_read+0x5a>
		p_twi->TWI_CR = TWI_CR_START | TWI_CR_STOP;
   80620:	2203      	movs	r2, #3
   80622:	6022      	str	r2, [r4, #0]
		stop_sent = 1;
   80624:	f04f 0c01 	mov.w	ip, #1
   80628:	e02b      	b.n	80682 <twi_master_read+0xb2>
	} else {
		p_twi->TWI_CR = TWI_CR_START;
   8062a:	2201      	movs	r2, #1
   8062c:	6022      	str	r2, [r4, #0]
		stop_sent = 0;
   8062e:	f04f 0c00 	mov.w	ip, #0
   80632:	e026      	b.n	80682 <twi_master_read+0xb2>
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
   80634:	6a21      	ldr	r1, [r4, #32]
		if (status & TWI_SR_NACK) {
   80636:	f411 7f80 	tst.w	r1, #256	; 0x100
   8063a:	d11c      	bne.n	80676 <twi_master_read+0xa6>
			return TWI_RECEIVE_NACK;
		}

		if (!timeout--) {
   8063c:	1e55      	subs	r5, r2, #1
   8063e:	b1e2      	cbz	r2, 8067a <twi_master_read+0xaa>
   80640:	462a      	mov	r2, r5
			return TWI_ERROR_TIMEOUT;
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
   80642:	2b01      	cmp	r3, #1
   80644:	d105      	bne.n	80652 <twi_master_read+0x82>
   80646:	f1bc 0f00 	cmp.w	ip, #0
   8064a:	d102      	bne.n	80652 <twi_master_read+0x82>
			p_twi->TWI_CR = TWI_CR_STOP;
   8064c:	f8c4 9000 	str.w	r9, [r4]
			stop_sent = 1;
   80650:	46c4      	mov	ip, r8
		}

		if (!(status & TWI_SR_RXRDY)) {
   80652:	f011 0f02 	tst.w	r1, #2
   80656:	d004      	beq.n	80662 <twi_master_read+0x92>
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;
   80658:	6b22      	ldr	r2, [r4, #48]	; 0x30
   8065a:	7032      	strb	r2, [r6, #0]

		cnt--;
   8065c:	3b01      	subs	r3, #1
		}

		if (!(status & TWI_SR_RXRDY)) {
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;
   8065e:	3601      	adds	r6, #1

		cnt--;
		timeout = TWI_TIMEOUT;
   80660:	463a      	mov	r2, r7
	} else {
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
   80662:	2b00      	cmp	r3, #0
   80664:	d1e6      	bne.n	80634 <twi_master_read+0x64>

		cnt--;
		timeout = TWI_TIMEOUT;
	}

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
   80666:	6a23      	ldr	r3, [r4, #32]
   80668:	f013 0f01 	tst.w	r3, #1
   8066c:	d0fb      	beq.n	80666 <twi_master_read+0x96>
	}

	p_twi->TWI_SR;
   8066e:	6a23      	ldr	r3, [r4, #32]

	return TWI_SUCCESS;
   80670:	e014      	b.n	8069c <twi_master_read+0xcc>
	uint8_t stop_sent = 0;
	uint32_t timeout = TWI_TIMEOUT;;
	
	/* Check argument */
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
   80672:	2001      	movs	r0, #1
   80674:	e012      	b.n	8069c <twi_master_read+0xcc>
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
   80676:	2005      	movs	r0, #5
   80678:	e010      	b.n	8069c <twi_master_read+0xcc>
		}

		if (!timeout--) {
			return TWI_ERROR_TIMEOUT;
   8067a:	2009      	movs	r0, #9
   8067c:	e00e      	b.n	8069c <twi_master_read+0xcc>
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
   8067e:	2005      	movs	r0, #5
   80680:	e00c      	b.n	8069c <twi_master_read+0xcc>
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
   80682:	6a21      	ldr	r1, [r4, #32]
		if (status & TWI_SR_NACK) {
   80684:	f411 7080 	ands.w	r0, r1, #256	; 0x100
   80688:	d1f9      	bne.n	8067e <twi_master_read+0xae>
			return TWI_RECEIVE_NACK;
		}

		if (!timeout--) {
   8068a:	f643 2297 	movw	r2, #14999	; 0x3a97
			return TWI_ERROR_TIMEOUT;
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
			p_twi->TWI_CR = TWI_CR_STOP;
   8068e:	f04f 0902 	mov.w	r9, #2
			stop_sent = 1;
   80692:	f04f 0801 	mov.w	r8, #1
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;

		cnt--;
		timeout = TWI_TIMEOUT;
   80696:	f643 2798 	movw	r7, #15000	; 0x3a98
   8069a:	e7d2      	b.n	80642 <twi_master_read+0x72>
	}

	p_twi->TWI_SR;

	return TWI_SUCCESS;
}
   8069c:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
   806a0:	4770      	bx	lr
   806a2:	bf00      	nop

000806a4 <twi_master_write>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
   806a4:	b470      	push	{r4, r5, r6}
   806a6:	4603      	mov	r3, r0
	uint32_t status;
	uint32_t cnt = p_packet->length;
   806a8:	68ca      	ldr	r2, [r1, #12]
	uint8_t *buffer = p_packet->buffer;
   806aa:	6888      	ldr	r0, [r1, #8]

	/* Check argument */
	if (cnt == 0) {
   806ac:	2a00      	cmp	r2, #0
   806ae:	d03f      	beq.n	80730 <twi_master_write+0x8c>
		return TWI_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
   806b0:	2400      	movs	r4, #0
   806b2:	605c      	str	r4, [r3, #4]
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
   806b4:	7c0e      	ldrb	r6, [r1, #16]
   806b6:	0436      	lsls	r6, r6, #16
   806b8:	f406 06fe 	and.w	r6, r6, #8323072	; 0x7f0000
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
   806bc:	684d      	ldr	r5, [r1, #4]
   806be:	022d      	lsls	r5, r5, #8
   806c0:	f405 7540 	and.w	r5, r5, #768	; 0x300
		return TWI_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
   806c4:	4335      	orrs	r5, r6
   806c6:	605d      	str	r5, [r3, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
   806c8:	60dc      	str	r4, [r3, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   806ca:	684c      	ldr	r4, [r1, #4]
 */
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
   806cc:	b15c      	cbz	r4, 806e6 <twi_master_write+0x42>
		return 0;

	val = addr[0];
   806ce:	780d      	ldrb	r5, [r1, #0]
	if (len > 1) {
   806d0:	2c01      	cmp	r4, #1
		val <<= 8;
		val |= addr[1];
   806d2:	bfc4      	itt	gt
   806d4:	784e      	ldrbgt	r6, [r1, #1]
   806d6:	ea46 2505 	orrgt.w	r5, r6, r5, lsl #8
	}
	if (len > 2) {
   806da:	2c02      	cmp	r4, #2
   806dc:	dd04      	ble.n	806e8 <twi_master_write+0x44>
		val <<= 8;
		val |= addr[2];
   806de:	7889      	ldrb	r1, [r1, #2]
   806e0:	ea41 2505 	orr.w	r5, r1, r5, lsl #8
   806e4:	e000      	b.n	806e8 <twi_master_write+0x44>
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
		return 0;
   806e6:	2500      	movs	r5, #0
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   806e8:	60dd      	str	r5, [r3, #12]
   806ea:	e00b      	b.n	80704 <twi_master_write+0x60>

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
   806ec:	6a19      	ldr	r1, [r3, #32]
		if (status & TWI_SR_NACK) {
   806ee:	f411 7f80 	tst.w	r1, #256	; 0x100
   806f2:	d11f      	bne.n	80734 <twi_master_write+0x90>
			return TWI_RECEIVE_NACK;
		}

		if (!(status & TWI_SR_TXRDY)) {
   806f4:	f011 0f04 	tst.w	r1, #4
   806f8:	d0f8      	beq.n	806ec <twi_master_write+0x48>
			continue;
		}
		p_twi->TWI_THR = *buffer++;
   806fa:	f810 1b01 	ldrb.w	r1, [r0], #1
   806fe:	6359      	str	r1, [r3, #52]	; 0x34
	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
   80700:	3a01      	subs	r2, #1
   80702:	d007      	beq.n	80714 <twi_master_write+0x70>
		status = p_twi->TWI_SR;
   80704:	6a19      	ldr	r1, [r3, #32]
		if (status & TWI_SR_NACK) {
   80706:	f411 7f80 	tst.w	r1, #256	; 0x100
   8070a:	d115      	bne.n	80738 <twi_master_write+0x94>
			return TWI_RECEIVE_NACK;
		}

		if (!(status & TWI_SR_TXRDY)) {
   8070c:	f011 0f04 	tst.w	r1, #4
   80710:	d1f3      	bne.n	806fa <twi_master_write+0x56>
   80712:	e7eb      	b.n	806ec <twi_master_write+0x48>

		cnt--;
	}

	while (1) {
		status = p_twi->TWI_SR;
   80714:	6a1a      	ldr	r2, [r3, #32]
		if (status & TWI_SR_NACK) {
   80716:	f412 7080 	ands.w	r0, r2, #256	; 0x100
   8071a:	d10f      	bne.n	8073c <twi_master_write+0x98>
			return TWI_RECEIVE_NACK;
		}

		if (status & TWI_SR_TXRDY) {
   8071c:	f012 0f04 	tst.w	r2, #4
   80720:	d0f8      	beq.n	80714 <twi_master_write+0x70>
			break;
		}
	}

	p_twi->TWI_CR = TWI_CR_STOP;
   80722:	2202      	movs	r2, #2
   80724:	601a      	str	r2, [r3, #0]

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
   80726:	6a1a      	ldr	r2, [r3, #32]
   80728:	f012 0f01 	tst.w	r2, #1
   8072c:	d0fb      	beq.n	80726 <twi_master_write+0x82>
   8072e:	e006      	b.n	8073e <twi_master_write+0x9a>
	uint32_t cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;

	/* Check argument */
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
   80730:	2001      	movs	r0, #1
   80732:	e004      	b.n	8073e <twi_master_write+0x9a>

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
   80734:	2005      	movs	r0, #5
   80736:	e002      	b.n	8073e <twi_master_write+0x9a>
   80738:	2005      	movs	r0, #5
   8073a:	e000      	b.n	8073e <twi_master_write+0x9a>
	}

	while (1) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
   8073c:	2005      	movs	r0, #5

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
	}

	return TWI_SUCCESS;
}
   8073e:	bc70      	pop	{r4, r5, r6}
   80740:	4770      	bx	lr
   80742:	bf00      	nop

00080744 <twi_probe>:
 * \param uc_slave_addr Address of the remote chip to search for.
 *
 * \return TWI_SUCCESS if a chip was found, error code otherwise.
 */
uint32_t twi_probe(Twi *p_twi, uint8_t uc_slave_addr)
{
   80744:	b500      	push	{lr}
   80746:	b087      	sub	sp, #28
	twi_packet_t packet;
	uint8_t data = 0;
   80748:	2300      	movs	r3, #0
   8074a:	aa06      	add	r2, sp, #24
   8074c:	f802 3d15 	strb.w	r3, [r2, #-21]!

	/* Data to send */
	packet.buffer = &data;
   80750:	9203      	str	r2, [sp, #12]
	/* Data length */
	packet.length = 1;
   80752:	2201      	movs	r2, #1
   80754:	9204      	str	r2, [sp, #16]
	/* Slave chip address */
	packet.chip = (uint32_t) uc_slave_addr;
   80756:	f88d 1014 	strb.w	r1, [sp, #20]
	/* Internal chip address */
	packet.addr[0] = 0;
   8075a:	f88d 3004 	strb.w	r3, [sp, #4]
	/* Address length */
	packet.addr_length = 0;
   8075e:	9302      	str	r3, [sp, #8]

	/* Perform a master write access */
	return (twi_master_write(p_twi, &packet));
   80760:	a901      	add	r1, sp, #4
   80762:	4b02      	ldr	r3, [pc, #8]	; (8076c <twi_probe+0x28>)
   80764:	4798      	blx	r3
}
   80766:	b007      	add	sp, #28
   80768:	f85d fb04 	ldr.w	pc, [sp], #4
   8076c:	000806a5 	.word	0x000806a5

00080770 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   80770:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   80772:	480e      	ldr	r0, [pc, #56]	; (807ac <sysclk_init+0x3c>)
   80774:	4b0e      	ldr	r3, [pc, #56]	; (807b0 <sysclk_init+0x40>)
   80776:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   80778:	2000      	movs	r0, #0
   8077a:	213e      	movs	r1, #62	; 0x3e
   8077c:	4b0d      	ldr	r3, [pc, #52]	; (807b4 <sysclk_init+0x44>)
   8077e:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   80780:	4c0d      	ldr	r4, [pc, #52]	; (807b8 <sysclk_init+0x48>)
   80782:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   80784:	2800      	cmp	r0, #0
   80786:	d0fc      	beq.n	80782 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   80788:	4b0c      	ldr	r3, [pc, #48]	; (807bc <sysclk_init+0x4c>)
   8078a:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   8078c:	4a0c      	ldr	r2, [pc, #48]	; (807c0 <sysclk_init+0x50>)
   8078e:	4b0d      	ldr	r3, [pc, #52]	; (807c4 <sysclk_init+0x54>)
   80790:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   80792:	4c0d      	ldr	r4, [pc, #52]	; (807c8 <sysclk_init+0x58>)
   80794:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   80796:	2800      	cmp	r0, #0
   80798:	d0fc      	beq.n	80794 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   8079a:	2010      	movs	r0, #16
   8079c:	4b0b      	ldr	r3, [pc, #44]	; (807cc <sysclk_init+0x5c>)
   8079e:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   807a0:	4b0b      	ldr	r3, [pc, #44]	; (807d0 <sysclk_init+0x60>)
   807a2:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   807a4:	4801      	ldr	r0, [pc, #4]	; (807ac <sysclk_init+0x3c>)
   807a6:	4b02      	ldr	r3, [pc, #8]	; (807b0 <sysclk_init+0x40>)
   807a8:	4798      	blx	r3
   807aa:	bd10      	pop	{r4, pc}
   807ac:	0501bd00 	.word	0x0501bd00
   807b0:	200700b1 	.word	0x200700b1
   807b4:	00080ba9 	.word	0x00080ba9
   807b8:	00080bfd 	.word	0x00080bfd
   807bc:	00080c0d 	.word	0x00080c0d
   807c0:	200d3f01 	.word	0x200d3f01
   807c4:	400e0600 	.word	0x400e0600
   807c8:	00080c1d 	.word	0x00080c1d
   807cc:	00080b45 	.word	0x00080b45
   807d0:	00080dc1 	.word	0x00080dc1

000807d4 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   807d4:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   807d6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   807da:	4b22      	ldr	r3, [pc, #136]	; (80864 <board_init+0x90>)
   807dc:	605a      	str	r2, [r3, #4]
   807de:	200b      	movs	r0, #11
   807e0:	4c21      	ldr	r4, [pc, #132]	; (80868 <board_init+0x94>)
   807e2:	47a0      	blx	r4
   807e4:	200c      	movs	r0, #12
   807e6:	47a0      	blx	r4
   807e8:	200d      	movs	r0, #13
   807ea:	47a0      	blx	r4
   807ec:	200e      	movs	r0, #14
   807ee:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   807f0:	203b      	movs	r0, #59	; 0x3b
   807f2:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   807f6:	4c1d      	ldr	r4, [pc, #116]	; (8086c <board_init+0x98>)
   807f8:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   807fa:	2055      	movs	r0, #85	; 0x55
   807fc:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80800:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   80802:	2056      	movs	r0, #86	; 0x56
   80804:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80808:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   8080a:	2068      	movs	r0, #104	; 0x68
   8080c:	4918      	ldr	r1, [pc, #96]	; (80870 <board_init+0x9c>)
   8080e:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   80810:	205c      	movs	r0, #92	; 0x5c
   80812:	4918      	ldr	r1, [pc, #96]	; (80874 <board_init+0xa0>)
   80814:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   80816:	4818      	ldr	r0, [pc, #96]	; (80878 <board_init+0xa4>)
   80818:	f44f 7140 	mov.w	r1, #768	; 0x300
   8081c:	4a17      	ldr	r2, [pc, #92]	; (8087c <board_init+0xa8>)
   8081e:	4b18      	ldr	r3, [pc, #96]	; (80880 <board_init+0xac>)
   80820:	4798      	blx	r3
		gpio_configure_pin(SPI1_NPCS3_GPIO, SPI1_NPCS3_FLAGS);
#   endif
#endif

#ifdef CONF_BOARD_TWI0
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
   80822:	2011      	movs	r0, #17
   80824:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80828:	47a0      	blx	r4
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
   8082a:	2012      	movs	r0, #18
   8082c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80830:	47a0      	blx	r4
#endif

#ifdef CONF_BOARD_TWI1
	gpio_configure_pin(TWI1_DATA_GPIO, TWI1_DATA_FLAGS);
   80832:	202c      	movs	r0, #44	; 0x2c
   80834:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80838:	47a0      	blx	r4
	gpio_configure_pin(TWI1_CLK_GPIO, TWI1_CLK_FLAGS);
   8083a:	202d      	movs	r0, #45	; 0x2d
   8083c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80840:	47a0      	blx	r4
#endif

#ifdef CONF_BOARD_USART_RXD
	/* Configure USART RXD pin */
	gpio_configure_pin(PIN_USART0_RXD_IDX, PIN_USART0_RXD_FLAGS);
   80842:	200a      	movs	r0, #10
   80844:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80848:	47a0      	blx	r4
#endif

#ifdef CONF_BOARD_USART_TXD
	/* Configure USART TXD pin */
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
   8084a:	200b      	movs	r0, #11
   8084c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80850:	47a0      	blx	r4
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   80852:	202b      	movs	r0, #43	; 0x2b
   80854:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80858:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   8085a:	202a      	movs	r0, #42	; 0x2a
   8085c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80860:	47a0      	blx	r4
   80862:	bd10      	pop	{r4, pc}
   80864:	400e1a50 	.word	0x400e1a50
   80868:	00080c2d 	.word	0x00080c2d
   8086c:	00080929 	.word	0x00080929
   80870:	28000079 	.word	0x28000079
   80874:	28000001 	.word	0x28000001
   80878:	400e0e00 	.word	0x400e0e00
   8087c:	08000001 	.word	0x08000001
   80880:	000809fd 	.word	0x000809fd

00080884 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   80884:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   80886:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   8088a:	d016      	beq.n	808ba <pio_set_peripheral+0x36>
   8088c:	d804      	bhi.n	80898 <pio_set_peripheral+0x14>
   8088e:	b1c1      	cbz	r1, 808c2 <pio_set_peripheral+0x3e>
   80890:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   80894:	d00a      	beq.n	808ac <pio_set_peripheral+0x28>
   80896:	e013      	b.n	808c0 <pio_set_peripheral+0x3c>
   80898:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   8089c:	d011      	beq.n	808c2 <pio_set_peripheral+0x3e>
   8089e:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   808a2:	d00e      	beq.n	808c2 <pio_set_peripheral+0x3e>
   808a4:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   808a8:	d10a      	bne.n	808c0 <pio_set_peripheral+0x3c>
   808aa:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   808ac:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   808ae:	6f01      	ldr	r1, [r0, #112]	; 0x70
   808b0:	400b      	ands	r3, r1
   808b2:	ea23 0302 	bic.w	r3, r3, r2
   808b6:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   808b8:	e002      	b.n	808c0 <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   808ba:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   808bc:	4313      	orrs	r3, r2
   808be:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   808c0:	6042      	str	r2, [r0, #4]
   808c2:	4770      	bx	lr

000808c4 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   808c4:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   808c6:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   808ca:	bf14      	ite	ne
   808cc:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   808ce:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   808d0:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   808d4:	bf14      	ite	ne
   808d6:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   808d8:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   808da:	f012 0f02 	tst.w	r2, #2
   808de:	d002      	beq.n	808e6 <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   808e0:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   808e4:	e004      	b.n	808f0 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   808e6:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   808ea:	bf18      	it	ne
   808ec:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   808f0:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   808f2:	6001      	str	r1, [r0, #0]
   808f4:	4770      	bx	lr
   808f6:	bf00      	nop

000808f8 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   808f8:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   808fa:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   808fc:	9c01      	ldr	r4, [sp, #4]
   808fe:	b10c      	cbz	r4, 80904 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   80900:	6641      	str	r1, [r0, #100]	; 0x64
   80902:	e000      	b.n	80906 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80904:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   80906:	b10b      	cbz	r3, 8090c <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   80908:	6501      	str	r1, [r0, #80]	; 0x50
   8090a:	e000      	b.n	8090e <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   8090c:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   8090e:	b10a      	cbz	r2, 80914 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   80910:	6301      	str	r1, [r0, #48]	; 0x30
   80912:	e000      	b.n	80916 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   80914:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   80916:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   80918:	6001      	str	r1, [r0, #0]
}
   8091a:	f85d 4b04 	ldr.w	r4, [sp], #4
   8091e:	4770      	bx	lr

00080920 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   80920:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   80922:	4770      	bx	lr

00080924 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   80924:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   80926:	4770      	bx	lr

00080928 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   80928:	b570      	push	{r4, r5, r6, lr}
   8092a:	b082      	sub	sp, #8
   8092c:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   8092e:	0944      	lsrs	r4, r0, #5
   80930:	f504 1400 	add.w	r4, r4, #2097152	; 0x200000
   80934:	f204 7407 	addw	r4, r4, #1799	; 0x707
   80938:	0266      	lsls	r6, r4, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   8093a:	f001 44f0 	and.w	r4, r1, #2013265920	; 0x78000000
   8093e:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   80942:	d030      	beq.n	809a6 <pio_configure_pin+0x7e>
   80944:	d806      	bhi.n	80954 <pio_configure_pin+0x2c>
   80946:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   8094a:	d00a      	beq.n	80962 <pio_configure_pin+0x3a>
   8094c:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   80950:	d018      	beq.n	80984 <pio_configure_pin+0x5c>
   80952:	e049      	b.n	809e8 <pio_configure_pin+0xc0>
   80954:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   80958:	d030      	beq.n	809bc <pio_configure_pin+0x94>
   8095a:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   8095e:	d02d      	beq.n	809bc <pio_configure_pin+0x94>
   80960:	e042      	b.n	809e8 <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   80962:	f000 001f 	and.w	r0, r0, #31
   80966:	2401      	movs	r4, #1
   80968:	4084      	lsls	r4, r0
   8096a:	4630      	mov	r0, r6
   8096c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80970:	4622      	mov	r2, r4
   80972:	4b1f      	ldr	r3, [pc, #124]	; (809f0 <pio_configure_pin+0xc8>)
   80974:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80976:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   8097a:	bf14      	ite	ne
   8097c:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8097e:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80980:	2001      	movs	r0, #1
   80982:	e032      	b.n	809ea <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   80984:	f000 001f 	and.w	r0, r0, #31
   80988:	2401      	movs	r4, #1
   8098a:	4084      	lsls	r4, r0
   8098c:	4630      	mov	r0, r6
   8098e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80992:	4622      	mov	r2, r4
   80994:	4b16      	ldr	r3, [pc, #88]	; (809f0 <pio_configure_pin+0xc8>)
   80996:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80998:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   8099c:	bf14      	ite	ne
   8099e:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   809a0:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   809a2:	2001      	movs	r0, #1
   809a4:	e021      	b.n	809ea <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   809a6:	f000 011f 	and.w	r1, r0, #31
   809aa:	2401      	movs	r4, #1
   809ac:	4630      	mov	r0, r6
   809ae:	fa04 f101 	lsl.w	r1, r4, r1
   809b2:	462a      	mov	r2, r5
   809b4:	4b0f      	ldr	r3, [pc, #60]	; (809f4 <pio_configure_pin+0xcc>)
   809b6:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   809b8:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   809ba:	e016      	b.n	809ea <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   809bc:	f000 011f 	and.w	r1, r0, #31
   809c0:	2401      	movs	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   809c2:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   809c6:	ea05 0304 	and.w	r3, r5, r4
   809ca:	9300      	str	r3, [sp, #0]
   809cc:	4630      	mov	r0, r6
   809ce:	fa04 f101 	lsl.w	r1, r4, r1
   809d2:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   809d6:	bf14      	ite	ne
   809d8:	2200      	movne	r2, #0
   809da:	2201      	moveq	r2, #1
   809dc:	f3c5 0380 	ubfx	r3, r5, #2, #1
   809e0:	4d05      	ldr	r5, [pc, #20]	; (809f8 <pio_configure_pin+0xd0>)
   809e2:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
   809e4:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   809e6:	e000      	b.n	809ea <pio_configure_pin+0xc2>

	default:
		return 0;
   809e8:	2000      	movs	r0, #0
	}

	return 1;
}
   809ea:	b002      	add	sp, #8
   809ec:	bd70      	pop	{r4, r5, r6, pc}
   809ee:	bf00      	nop
   809f0:	00080885 	.word	0x00080885
   809f4:	000808c5 	.word	0x000808c5
   809f8:	000808f9 	.word	0x000808f9

000809fc <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   809fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   809fe:	b083      	sub	sp, #12
   80a00:	4607      	mov	r7, r0
   80a02:	460e      	mov	r6, r1
   80a04:	4615      	mov	r5, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   80a06:	f002 44f0 	and.w	r4, r2, #2013265920	; 0x78000000
   80a0a:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   80a0e:	d026      	beq.n	80a5e <pio_configure_pin_group+0x62>
   80a10:	d806      	bhi.n	80a20 <pio_configure_pin_group+0x24>
   80a12:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   80a16:	d00a      	beq.n	80a2e <pio_configure_pin_group+0x32>
   80a18:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   80a1c:	d013      	beq.n	80a46 <pio_configure_pin_group+0x4a>
   80a1e:	e034      	b.n	80a8a <pio_configure_pin_group+0x8e>
   80a20:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   80a24:	d01f      	beq.n	80a66 <pio_configure_pin_group+0x6a>
   80a26:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   80a2a:	d01c      	beq.n	80a66 <pio_configure_pin_group+0x6a>
   80a2c:	e02d      	b.n	80a8a <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   80a2e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80a32:	4632      	mov	r2, r6
   80a34:	4b16      	ldr	r3, [pc, #88]	; (80a90 <pio_configure_pin_group+0x94>)
   80a36:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80a38:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80a3c:	bf14      	ite	ne
   80a3e:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80a40:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80a42:	2001      	movs	r0, #1
   80a44:	e022      	b.n	80a8c <pio_configure_pin_group+0x90>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   80a46:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80a4a:	4632      	mov	r2, r6
   80a4c:	4b10      	ldr	r3, [pc, #64]	; (80a90 <pio_configure_pin_group+0x94>)
   80a4e:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80a50:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80a54:	bf14      	ite	ne
   80a56:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80a58:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80a5a:	2001      	movs	r0, #1
   80a5c:	e016      	b.n	80a8c <pio_configure_pin_group+0x90>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   80a5e:	4b0d      	ldr	r3, [pc, #52]	; (80a94 <pio_configure_pin_group+0x98>)
   80a60:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80a62:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   80a64:	e012      	b.n	80a8c <pio_configure_pin_group+0x90>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80a66:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   80a6a:	f005 0301 	and.w	r3, r5, #1
   80a6e:	9300      	str	r3, [sp, #0]
   80a70:	4638      	mov	r0, r7
   80a72:	4631      	mov	r1, r6
   80a74:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80a78:	bf14      	ite	ne
   80a7a:	2200      	movne	r2, #0
   80a7c:	2201      	moveq	r2, #1
   80a7e:	f3c5 0380 	ubfx	r3, r5, #2, #1
   80a82:	4c05      	ldr	r4, [pc, #20]	; (80a98 <pio_configure_pin_group+0x9c>)
   80a84:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   80a86:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   80a88:	e000      	b.n	80a8c <pio_configure_pin_group+0x90>

	default:
		return 0;
   80a8a:	2000      	movs	r0, #0
	}

	return 1;
}
   80a8c:	b003      	add	sp, #12
   80a8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80a90:	00080885 	.word	0x00080885
   80a94:	000808c5 	.word	0x000808c5
   80a98:	000808f9 	.word	0x000808f9

00080a9c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   80a9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80aa0:	4604      	mov	r4, r0
   80aa2:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   80aa4:	4b10      	ldr	r3, [pc, #64]	; (80ae8 <pio_handler_process+0x4c>)
   80aa6:	4798      	blx	r3
   80aa8:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   80aaa:	4620      	mov	r0, r4
   80aac:	4b0f      	ldr	r3, [pc, #60]	; (80aec <pio_handler_process+0x50>)
   80aae:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   80ab0:	4005      	ands	r5, r0
   80ab2:	d017      	beq.n	80ae4 <pio_handler_process+0x48>
   80ab4:	4f0e      	ldr	r7, [pc, #56]	; (80af0 <pio_handler_process+0x54>)
   80ab6:	f107 040c 	add.w	r4, r7, #12
   80aba:	376c      	adds	r7, #108	; 0x6c
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   80abc:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   80ac0:	42b3      	cmp	r3, r6
   80ac2:	d10a      	bne.n	80ada <pio_handler_process+0x3e>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   80ac4:	f854 1c08 	ldr.w	r1, [r4, #-8]
   80ac8:	4229      	tst	r1, r5
   80aca:	d006      	beq.n	80ada <pio_handler_process+0x3e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   80acc:	6823      	ldr	r3, [r4, #0]
   80ace:	4630      	mov	r0, r6
   80ad0:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   80ad2:	f854 3c08 	ldr.w	r3, [r4, #-8]
   80ad6:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   80ada:	42bc      	cmp	r4, r7
   80adc:	d002      	beq.n	80ae4 <pio_handler_process+0x48>
   80ade:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   80ae0:	2d00      	cmp	r5, #0
   80ae2:	d1eb      	bne.n	80abc <pio_handler_process+0x20>
   80ae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80ae8:	00080921 	.word	0x00080921
   80aec:	00080925 	.word	0x00080925
   80af0:	200709c4 	.word	0x200709c4

00080af4 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   80af4:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   80af6:	4802      	ldr	r0, [pc, #8]	; (80b00 <PIOA_Handler+0xc>)
   80af8:	210b      	movs	r1, #11
   80afa:	4b02      	ldr	r3, [pc, #8]	; (80b04 <PIOA_Handler+0x10>)
   80afc:	4798      	blx	r3
   80afe:	bd08      	pop	{r3, pc}
   80b00:	400e0e00 	.word	0x400e0e00
   80b04:	00080a9d 	.word	0x00080a9d

00080b08 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   80b08:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   80b0a:	4802      	ldr	r0, [pc, #8]	; (80b14 <PIOB_Handler+0xc>)
   80b0c:	210c      	movs	r1, #12
   80b0e:	4b02      	ldr	r3, [pc, #8]	; (80b18 <PIOB_Handler+0x10>)
   80b10:	4798      	blx	r3
   80b12:	bd08      	pop	{r3, pc}
   80b14:	400e1000 	.word	0x400e1000
   80b18:	00080a9d 	.word	0x00080a9d

00080b1c <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   80b1c:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   80b1e:	4802      	ldr	r0, [pc, #8]	; (80b28 <PIOC_Handler+0xc>)
   80b20:	210d      	movs	r1, #13
   80b22:	4b02      	ldr	r3, [pc, #8]	; (80b2c <PIOC_Handler+0x10>)
   80b24:	4798      	blx	r3
   80b26:	bd08      	pop	{r3, pc}
   80b28:	400e1200 	.word	0x400e1200
   80b2c:	00080a9d 	.word	0x00080a9d

00080b30 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   80b30:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   80b32:	4802      	ldr	r0, [pc, #8]	; (80b3c <PIOD_Handler+0xc>)
   80b34:	210e      	movs	r1, #14
   80b36:	4b02      	ldr	r3, [pc, #8]	; (80b40 <PIOD_Handler+0x10>)
   80b38:	4798      	blx	r3
   80b3a:	bd08      	pop	{r3, pc}
   80b3c:	400e1400 	.word	0x400e1400
   80b40:	00080a9d 	.word	0x00080a9d

00080b44 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   80b44:	4b17      	ldr	r3, [pc, #92]	; (80ba4 <pmc_switch_mck_to_pllack+0x60>)
   80b46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80b48:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   80b4c:	4310      	orrs	r0, r2
   80b4e:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80b50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80b52:	f013 0f08 	tst.w	r3, #8
   80b56:	d109      	bne.n	80b6c <pmc_switch_mck_to_pllack+0x28>
   80b58:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80b5c:	4911      	ldr	r1, [pc, #68]	; (80ba4 <pmc_switch_mck_to_pllack+0x60>)
   80b5e:	e001      	b.n	80b64 <pmc_switch_mck_to_pllack+0x20>
			--ul_timeout) {
		if (ul_timeout == 0) {
   80b60:	3b01      	subs	r3, #1
   80b62:	d019      	beq.n	80b98 <pmc_switch_mck_to_pllack+0x54>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80b64:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80b66:	f012 0f08 	tst.w	r2, #8
   80b6a:	d0f9      	beq.n	80b60 <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   80b6c:	4b0d      	ldr	r3, [pc, #52]	; (80ba4 <pmc_switch_mck_to_pllack+0x60>)
   80b6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80b70:	f022 0203 	bic.w	r2, r2, #3
   80b74:	f042 0202 	orr.w	r2, r2, #2
   80b78:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80b7a:	6e98      	ldr	r0, [r3, #104]	; 0x68
   80b7c:	f010 0008 	ands.w	r0, r0, #8
   80b80:	d10c      	bne.n	80b9c <pmc_switch_mck_to_pllack+0x58>
   80b82:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80b86:	4907      	ldr	r1, [pc, #28]	; (80ba4 <pmc_switch_mck_to_pllack+0x60>)
   80b88:	e001      	b.n	80b8e <pmc_switch_mck_to_pllack+0x4a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   80b8a:	3b01      	subs	r3, #1
   80b8c:	d008      	beq.n	80ba0 <pmc_switch_mck_to_pllack+0x5c>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80b8e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80b90:	f012 0f08 	tst.w	r2, #8
   80b94:	d0f9      	beq.n	80b8a <pmc_switch_mck_to_pllack+0x46>
   80b96:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   80b98:	2001      	movs	r0, #1
   80b9a:	4770      	bx	lr
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   80b9c:	2000      	movs	r0, #0
   80b9e:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   80ba0:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   80ba2:	4770      	bx	lr
   80ba4:	400e0600 	.word	0x400e0600

00080ba8 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   80ba8:	b138      	cbz	r0, 80bba <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80baa:	4911      	ldr	r1, [pc, #68]	; (80bf0 <pmc_switch_mainck_to_xtal+0x48>)
   80bac:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   80bae:	4a11      	ldr	r2, [pc, #68]	; (80bf4 <pmc_switch_mainck_to_xtal+0x4c>)
   80bb0:	401a      	ands	r2, r3
   80bb2:	4b11      	ldr	r3, [pc, #68]	; (80bf8 <pmc_switch_mainck_to_xtal+0x50>)
   80bb4:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80bb6:	620b      	str	r3, [r1, #32]
   80bb8:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80bba:	4a0d      	ldr	r2, [pc, #52]	; (80bf0 <pmc_switch_mainck_to_xtal+0x48>)
   80bbc:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   80bbe:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   80bc2:	f023 0303 	bic.w	r3, r3, #3
   80bc6:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   80bca:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   80bce:	0209      	lsls	r1, r1, #8
   80bd0:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   80bd2:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80bd4:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   80bd6:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80bd8:	f013 0f01 	tst.w	r3, #1
   80bdc:	d0fb      	beq.n	80bd6 <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   80bde:	4a04      	ldr	r2, [pc, #16]	; (80bf0 <pmc_switch_mainck_to_xtal+0x48>)
   80be0:	6a13      	ldr	r3, [r2, #32]
   80be2:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   80be6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   80bea:	6213      	str	r3, [r2, #32]
   80bec:	4770      	bx	lr
   80bee:	bf00      	nop
   80bf0:	400e0600 	.word	0x400e0600
   80bf4:	fec8fffc 	.word	0xfec8fffc
   80bf8:	01370002 	.word	0x01370002

00080bfc <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   80bfc:	4b02      	ldr	r3, [pc, #8]	; (80c08 <pmc_osc_is_ready_mainck+0xc>)
   80bfe:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80c00:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   80c04:	4770      	bx	lr
   80c06:	bf00      	nop
   80c08:	400e0600 	.word	0x400e0600

00080c0c <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   80c0c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   80c10:	4b01      	ldr	r3, [pc, #4]	; (80c18 <pmc_disable_pllack+0xc>)
   80c12:	629a      	str	r2, [r3, #40]	; 0x28
   80c14:	4770      	bx	lr
   80c16:	bf00      	nop
   80c18:	400e0600 	.word	0x400e0600

00080c1c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   80c1c:	4b02      	ldr	r3, [pc, #8]	; (80c28 <pmc_is_locked_pllack+0xc>)
   80c1e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80c20:	f000 0002 	and.w	r0, r0, #2
   80c24:	4770      	bx	lr
   80c26:	bf00      	nop
   80c28:	400e0600 	.word	0x400e0600

00080c2c <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   80c2c:	282c      	cmp	r0, #44	; 0x2c
   80c2e:	d820      	bhi.n	80c72 <pmc_enable_periph_clk+0x46>
		return 1;
	}

	if (ul_id < 32) {
   80c30:	281f      	cmp	r0, #31
   80c32:	d80d      	bhi.n	80c50 <pmc_enable_periph_clk+0x24>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   80c34:	4b12      	ldr	r3, [pc, #72]	; (80c80 <pmc_enable_periph_clk+0x54>)
   80c36:	699a      	ldr	r2, [r3, #24]
   80c38:	2301      	movs	r3, #1
   80c3a:	4083      	lsls	r3, r0
   80c3c:	401a      	ands	r2, r3
   80c3e:	4293      	cmp	r3, r2
   80c40:	d019      	beq.n	80c76 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER0 = 1 << ul_id;
   80c42:	2301      	movs	r3, #1
   80c44:	fa03 f000 	lsl.w	r0, r3, r0
   80c48:	4b0d      	ldr	r3, [pc, #52]	; (80c80 <pmc_enable_periph_clk+0x54>)
   80c4a:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80c4c:	2000      	movs	r0, #0
   80c4e:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80c50:	4b0b      	ldr	r3, [pc, #44]	; (80c80 <pmc_enable_periph_clk+0x54>)
   80c52:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
   80c56:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80c58:	2301      	movs	r3, #1
   80c5a:	4083      	lsls	r3, r0
   80c5c:	401a      	ands	r2, r3
   80c5e:	4293      	cmp	r3, r2
   80c60:	d00b      	beq.n	80c7a <pmc_enable_periph_clk+0x4e>
			PMC->PMC_PCER1 = 1 << ul_id;
   80c62:	2301      	movs	r3, #1
   80c64:	fa03 f000 	lsl.w	r0, r3, r0
   80c68:	4b05      	ldr	r3, [pc, #20]	; (80c80 <pmc_enable_periph_clk+0x54>)
   80c6a:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   80c6e:	2000      	movs	r0, #0
   80c70:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   80c72:	2001      	movs	r0, #1
   80c74:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80c76:	2000      	movs	r0, #0
   80c78:	4770      	bx	lr
   80c7a:	2000      	movs	r0, #0
}
   80c7c:	4770      	bx	lr
   80c7e:	bf00      	nop
   80c80:	400e0600 	.word	0x400e0600

00080c84 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   80c84:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   80c86:	23ac      	movs	r3, #172	; 0xac
   80c88:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   80c8a:	680a      	ldr	r2, [r1, #0]
   80c8c:	684b      	ldr	r3, [r1, #4]
   80c8e:	fbb2 f3f3 	udiv	r3, r2, r3
   80c92:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   80c94:	1e5c      	subs	r4, r3, #1
   80c96:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   80c9a:	4294      	cmp	r4, r2
   80c9c:	d80a      	bhi.n	80cb4 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
   80c9e:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   80ca0:	688b      	ldr	r3, [r1, #8]
   80ca2:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   80ca4:	f240 2302 	movw	r3, #514	; 0x202
   80ca8:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80cac:	2350      	movs	r3, #80	; 0x50
   80cae:	6003      	str	r3, [r0, #0]

	return 0;
   80cb0:	2000      	movs	r0, #0
   80cb2:	e000      	b.n	80cb6 <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
   80cb4:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
   80cb6:	f85d 4b04 	ldr.w	r4, [sp], #4
   80cba:	4770      	bx	lr

00080cbc <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   80cbc:	6943      	ldr	r3, [r0, #20]
   80cbe:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   80cc2:	bf1a      	itte	ne
   80cc4:	61c1      	strne	r1, [r0, #28]
	return 0;
   80cc6:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
   80cc8:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
   80cca:	4770      	bx	lr

00080ccc <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   80ccc:	6943      	ldr	r3, [r0, #20]
   80cce:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   80cd2:	bf1d      	ittte	ne
   80cd4:	6983      	ldrne	r3, [r0, #24]
   80cd6:	700b      	strbne	r3, [r1, #0]
	return 0;
   80cd8:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
   80cda:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
   80cdc:	4770      	bx	lr
   80cde:	bf00      	nop

00080ce0 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   80ce0:	6943      	ldr	r3, [r0, #20]
   80ce2:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   80ce6:	bf1d      	ittte	ne
   80ce8:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   80cec:	61c1      	strne	r1, [r0, #28]
	return 0;
   80cee:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
   80cf0:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
   80cf2:	4770      	bx	lr

00080cf4 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   80cf4:	6943      	ldr	r3, [r0, #20]
   80cf6:	f013 0f01 	tst.w	r3, #1
   80cfa:	d005      	beq.n	80d08 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   80cfc:	6983      	ldr	r3, [r0, #24]
   80cfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
   80d02:	600b      	str	r3, [r1, #0]

	return 0;
   80d04:	2000      	movs	r0, #0
   80d06:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   80d08:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   80d0a:	4770      	bx	lr

00080d0c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80d0c:	e7fe      	b.n	80d0c <Dummy_Handler>
   80d0e:	bf00      	nop

00080d10 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   80d10:	b510      	push	{r4, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   80d12:	4b1e      	ldr	r3, [pc, #120]	; (80d8c <Reset_Handler+0x7c>)
   80d14:	4a1e      	ldr	r2, [pc, #120]	; (80d90 <Reset_Handler+0x80>)
   80d16:	429a      	cmp	r2, r3
   80d18:	d003      	beq.n	80d22 <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   80d1a:	4b1e      	ldr	r3, [pc, #120]	; (80d94 <Reset_Handler+0x84>)
   80d1c:	4a1b      	ldr	r2, [pc, #108]	; (80d8c <Reset_Handler+0x7c>)
   80d1e:	429a      	cmp	r2, r3
   80d20:	d304      	bcc.n	80d2c <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80d22:	4b1d      	ldr	r3, [pc, #116]	; (80d98 <Reset_Handler+0x88>)
   80d24:	4a1d      	ldr	r2, [pc, #116]	; (80d9c <Reset_Handler+0x8c>)
   80d26:	429a      	cmp	r2, r3
   80d28:	d30f      	bcc.n	80d4a <Reset_Handler+0x3a>
   80d2a:	e01a      	b.n	80d62 <Reset_Handler+0x52>
   80d2c:	4b1c      	ldr	r3, [pc, #112]	; (80da0 <Reset_Handler+0x90>)
   80d2e:	4c1d      	ldr	r4, [pc, #116]	; (80da4 <Reset_Handler+0x94>)
   80d30:	1ae4      	subs	r4, r4, r3
   80d32:	f024 0403 	bic.w	r4, r4, #3
   80d36:	3404      	adds	r4, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   80d38:	2300      	movs	r3, #0
			*pDest++ = *pSrc++;
   80d3a:	4814      	ldr	r0, [pc, #80]	; (80d8c <Reset_Handler+0x7c>)
   80d3c:	4914      	ldr	r1, [pc, #80]	; (80d90 <Reset_Handler+0x80>)
   80d3e:	585a      	ldr	r2, [r3, r1]
   80d40:	501a      	str	r2, [r3, r0]
   80d42:	3304      	adds	r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   80d44:	42a3      	cmp	r3, r4
   80d46:	d1fa      	bne.n	80d3e <Reset_Handler+0x2e>
   80d48:	e7eb      	b.n	80d22 <Reset_Handler+0x12>
   80d4a:	4b17      	ldr	r3, [pc, #92]	; (80da8 <Reset_Handler+0x98>)
   80d4c:	4917      	ldr	r1, [pc, #92]	; (80dac <Reset_Handler+0x9c>)
   80d4e:	1ac9      	subs	r1, r1, r3
   80d50:	f021 0103 	bic.w	r1, r1, #3
   80d54:	1d1a      	adds	r2, r3, #4
   80d56:	4411      	add	r1, r2
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   80d58:	2200      	movs	r2, #0
   80d5a:	f843 2f04 	str.w	r2, [r3, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80d5e:	428b      	cmp	r3, r1
   80d60:	d1fb      	bne.n	80d5a <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   80d62:	4a13      	ldr	r2, [pc, #76]	; (80db0 <Reset_Handler+0xa0>)
   80d64:	f022 4360 	bic.w	r3, r2, #3758096384	; 0xe0000000
   80d68:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   80d6c:	4911      	ldr	r1, [pc, #68]	; (80db4 <Reset_Handler+0xa4>)
   80d6e:	608b      	str	r3, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   80d70:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
   80d74:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
   80d78:	d203      	bcs.n	80d82 <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   80d7a:	688a      	ldr	r2, [r1, #8]
   80d7c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   80d80:	608a      	str	r2, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   80d82:	4b0d      	ldr	r3, [pc, #52]	; (80db8 <Reset_Handler+0xa8>)
   80d84:	4798      	blx	r3

	/* Branch to main function */
	main();
   80d86:	4b0d      	ldr	r3, [pc, #52]	; (80dbc <Reset_Handler+0xac>)
   80d88:	4798      	blx	r3
   80d8a:	e7fe      	b.n	80d8a <Reset_Handler+0x7a>
   80d8c:	20070000 	.word	0x20070000
   80d90:	00084770 	.word	0x00084770
   80d94:	200709a4 	.word	0x200709a4
   80d98:	20070b2c 	.word	0x20070b2c
   80d9c:	200709a4 	.word	0x200709a4
   80da0:	20070004 	.word	0x20070004
   80da4:	200709a7 	.word	0x200709a7
   80da8:	200709a0 	.word	0x200709a0
   80dac:	20070b27 	.word	0x20070b27
   80db0:	00080000 	.word	0x00080000
   80db4:	e000ed00 	.word	0xe000ed00
   80db8:	00081319 	.word	0x00081319
   80dbc:	000812c9 	.word	0x000812c9

00080dc0 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   80dc0:	4b3e      	ldr	r3, [pc, #248]	; (80ebc <SystemCoreClockUpdate+0xfc>)
   80dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80dc4:	f003 0303 	and.w	r3, r3, #3
   80dc8:	2b03      	cmp	r3, #3
   80dca:	d85f      	bhi.n	80e8c <SystemCoreClockUpdate+0xcc>
   80dcc:	e8df f003 	tbb	[pc, r3]
   80dd0:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   80dd4:	4b3a      	ldr	r3, [pc, #232]	; (80ec0 <SystemCoreClockUpdate+0x100>)
   80dd6:	695b      	ldr	r3, [r3, #20]
   80dd8:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   80ddc:	bf14      	ite	ne
   80dde:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   80de2:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   80de6:	4b37      	ldr	r3, [pc, #220]	; (80ec4 <SystemCoreClockUpdate+0x104>)
   80de8:	601a      	str	r2, [r3, #0]
   80dea:	e04f      	b.n	80e8c <SystemCoreClockUpdate+0xcc>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80dec:	4b33      	ldr	r3, [pc, #204]	; (80ebc <SystemCoreClockUpdate+0xfc>)
   80dee:	6a1b      	ldr	r3, [r3, #32]
   80df0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80df4:	d003      	beq.n	80dfe <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80df6:	4a34      	ldr	r2, [pc, #208]	; (80ec8 <SystemCoreClockUpdate+0x108>)
   80df8:	4b32      	ldr	r3, [pc, #200]	; (80ec4 <SystemCoreClockUpdate+0x104>)
   80dfa:	601a      	str	r2, [r3, #0]
   80dfc:	e046      	b.n	80e8c <SystemCoreClockUpdate+0xcc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80dfe:	4a33      	ldr	r2, [pc, #204]	; (80ecc <SystemCoreClockUpdate+0x10c>)
   80e00:	4b30      	ldr	r3, [pc, #192]	; (80ec4 <SystemCoreClockUpdate+0x104>)
   80e02:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80e04:	4b2d      	ldr	r3, [pc, #180]	; (80ebc <SystemCoreClockUpdate+0xfc>)
   80e06:	6a1b      	ldr	r3, [r3, #32]
   80e08:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80e0c:	2b10      	cmp	r3, #16
   80e0e:	d002      	beq.n	80e16 <SystemCoreClockUpdate+0x56>
   80e10:	2b20      	cmp	r3, #32
   80e12:	d004      	beq.n	80e1e <SystemCoreClockUpdate+0x5e>
   80e14:	e03a      	b.n	80e8c <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   80e16:	4a2e      	ldr	r2, [pc, #184]	; (80ed0 <SystemCoreClockUpdate+0x110>)
   80e18:	4b2a      	ldr	r3, [pc, #168]	; (80ec4 <SystemCoreClockUpdate+0x104>)
   80e1a:	601a      	str	r2, [r3, #0]
				break;
   80e1c:	e036      	b.n	80e8c <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   80e1e:	4a2a      	ldr	r2, [pc, #168]	; (80ec8 <SystemCoreClockUpdate+0x108>)
   80e20:	4b28      	ldr	r3, [pc, #160]	; (80ec4 <SystemCoreClockUpdate+0x104>)
   80e22:	601a      	str	r2, [r3, #0]
				break;
   80e24:	e032      	b.n	80e8c <SystemCoreClockUpdate+0xcc>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80e26:	4b25      	ldr	r3, [pc, #148]	; (80ebc <SystemCoreClockUpdate+0xfc>)
   80e28:	6a1b      	ldr	r3, [r3, #32]
   80e2a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80e2e:	d003      	beq.n	80e38 <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80e30:	4a25      	ldr	r2, [pc, #148]	; (80ec8 <SystemCoreClockUpdate+0x108>)
   80e32:	4b24      	ldr	r3, [pc, #144]	; (80ec4 <SystemCoreClockUpdate+0x104>)
   80e34:	601a      	str	r2, [r3, #0]
   80e36:	e012      	b.n	80e5e <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80e38:	4a24      	ldr	r2, [pc, #144]	; (80ecc <SystemCoreClockUpdate+0x10c>)
   80e3a:	4b22      	ldr	r3, [pc, #136]	; (80ec4 <SystemCoreClockUpdate+0x104>)
   80e3c:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80e3e:	4b1f      	ldr	r3, [pc, #124]	; (80ebc <SystemCoreClockUpdate+0xfc>)
   80e40:	6a1b      	ldr	r3, [r3, #32]
   80e42:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80e46:	2b10      	cmp	r3, #16
   80e48:	d002      	beq.n	80e50 <SystemCoreClockUpdate+0x90>
   80e4a:	2b20      	cmp	r3, #32
   80e4c:	d004      	beq.n	80e58 <SystemCoreClockUpdate+0x98>
   80e4e:	e006      	b.n	80e5e <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   80e50:	4a1f      	ldr	r2, [pc, #124]	; (80ed0 <SystemCoreClockUpdate+0x110>)
   80e52:	4b1c      	ldr	r3, [pc, #112]	; (80ec4 <SystemCoreClockUpdate+0x104>)
   80e54:	601a      	str	r2, [r3, #0]
				break;
   80e56:	e002      	b.n	80e5e <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   80e58:	4a1b      	ldr	r2, [pc, #108]	; (80ec8 <SystemCoreClockUpdate+0x108>)
   80e5a:	4b1a      	ldr	r3, [pc, #104]	; (80ec4 <SystemCoreClockUpdate+0x104>)
   80e5c:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   80e5e:	4b17      	ldr	r3, [pc, #92]	; (80ebc <SystemCoreClockUpdate+0xfc>)
   80e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80e62:	f003 0303 	and.w	r3, r3, #3
   80e66:	2b02      	cmp	r3, #2
   80e68:	d10d      	bne.n	80e86 <SystemCoreClockUpdate+0xc6>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80e6a:	4b14      	ldr	r3, [pc, #80]	; (80ebc <SystemCoreClockUpdate+0xfc>)
   80e6c:	6a98      	ldr	r0, [r3, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80e6e:	6a99      	ldr	r1, [r3, #40]	; 0x28
   80e70:	4b14      	ldr	r3, [pc, #80]	; (80ec4 <SystemCoreClockUpdate+0x104>)
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80e72:	f3c0 400a 	ubfx	r0, r0, #16, #11
   80e76:	681a      	ldr	r2, [r3, #0]
   80e78:	fb00 2202 	mla	r2, r0, r2, r2
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80e7c:	b2c9      	uxtb	r1, r1
   80e7e:	fbb2 f2f1 	udiv	r2, r2, r1
   80e82:	601a      	str	r2, [r3, #0]
   80e84:	e002      	b.n	80e8c <SystemCoreClockUpdate+0xcc>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   80e86:	4a13      	ldr	r2, [pc, #76]	; (80ed4 <SystemCoreClockUpdate+0x114>)
   80e88:	4b0e      	ldr	r3, [pc, #56]	; (80ec4 <SystemCoreClockUpdate+0x104>)
   80e8a:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   80e8c:	4b0b      	ldr	r3, [pc, #44]	; (80ebc <SystemCoreClockUpdate+0xfc>)
   80e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80e90:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80e94:	2b70      	cmp	r3, #112	; 0x70
   80e96:	d107      	bne.n	80ea8 <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
   80e98:	4b0a      	ldr	r3, [pc, #40]	; (80ec4 <SystemCoreClockUpdate+0x104>)
   80e9a:	681a      	ldr	r2, [r3, #0]
   80e9c:	490e      	ldr	r1, [pc, #56]	; (80ed8 <SystemCoreClockUpdate+0x118>)
   80e9e:	fba1 0202 	umull	r0, r2, r1, r2
   80ea2:	0852      	lsrs	r2, r2, #1
   80ea4:	601a      	str	r2, [r3, #0]
   80ea6:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   80ea8:	4b04      	ldr	r3, [pc, #16]	; (80ebc <SystemCoreClockUpdate+0xfc>)
   80eaa:	6b19      	ldr	r1, [r3, #48]	; 0x30
   80eac:	4b05      	ldr	r3, [pc, #20]	; (80ec4 <SystemCoreClockUpdate+0x104>)
   80eae:	f3c1 1102 	ubfx	r1, r1, #4, #3
   80eb2:	681a      	ldr	r2, [r3, #0]
   80eb4:	40ca      	lsrs	r2, r1
   80eb6:	601a      	str	r2, [r3, #0]
   80eb8:	4770      	bx	lr
   80eba:	bf00      	nop
   80ebc:	400e0600 	.word	0x400e0600
   80ec0:	400e1a10 	.word	0x400e1a10
   80ec4:	2007013c 	.word	0x2007013c
   80ec8:	00b71b00 	.word	0x00b71b00
   80ecc:	003d0900 	.word	0x003d0900
   80ed0:	007a1200 	.word	0x007a1200
   80ed4:	0e4e1c00 	.word	0x0e4e1c00
   80ed8:	aaaaaaab 	.word	0xaaaaaaab

00080edc <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   80edc:	4b09      	ldr	r3, [pc, #36]	; (80f04 <_sbrk+0x28>)
   80ede:	681b      	ldr	r3, [r3, #0]
   80ee0:	b913      	cbnz	r3, 80ee8 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
   80ee2:	4a09      	ldr	r2, [pc, #36]	; (80f08 <_sbrk+0x2c>)
   80ee4:	4b07      	ldr	r3, [pc, #28]	; (80f04 <_sbrk+0x28>)
   80ee6:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   80ee8:	4b06      	ldr	r3, [pc, #24]	; (80f04 <_sbrk+0x28>)
   80eea:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   80eec:	181a      	adds	r2, r3, r0
   80eee:	4907      	ldr	r1, [pc, #28]	; (80f0c <_sbrk+0x30>)
   80ef0:	4291      	cmp	r1, r2
   80ef2:	db04      	blt.n	80efe <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
   80ef4:	4610      	mov	r0, r2
   80ef6:	4a03      	ldr	r2, [pc, #12]	; (80f04 <_sbrk+0x28>)
   80ef8:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   80efa:	4618      	mov	r0, r3
   80efc:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
   80efe:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
   80f02:	4770      	bx	lr
   80f04:	20070a34 	.word	0x20070a34
   80f08:	20072b30 	.word	0x20072b30
   80f0c:	20087ffc 	.word	0x20087ffc

00080f10 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   80f10:	f04f 30ff 	mov.w	r0, #4294967295
   80f14:	4770      	bx	lr
   80f16:	bf00      	nop

00080f18 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   80f18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   80f1c:	604b      	str	r3, [r1, #4]

	return 0;
}
   80f1e:	2000      	movs	r0, #0
   80f20:	4770      	bx	lr
   80f22:	bf00      	nop

00080f24 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   80f24:	2001      	movs	r0, #1
   80f26:	4770      	bx	lr

00080f28 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   80f28:	2000      	movs	r0, #0
   80f2a:	4770      	bx	lr

00080f2c <USART0_Handler>:
#if SAMD || SAMR21 || SAML21
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
   80f2c:	b500      	push	{lr}
   80f2e:	b083      	sub	sp, #12
	uint8_t temp;
#if SAMD || SAMR21 || SAML21
	usart_serial_read_packet(&host_uart_module, &temp, 1);
#else
	usart_serial_read_packet(USART_HOST, &temp, 1);
   80f30:	4811      	ldr	r0, [pc, #68]	; (80f78 <USART0_Handler+0x4c>)
   80f32:	f10d 0107 	add.w	r1, sp, #7
   80f36:	2201      	movs	r2, #1
   80f38:	4b10      	ldr	r3, [pc, #64]	; (80f7c <USART0_Handler+0x50>)
   80f3a:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   80f3c:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   80f3e:	f3bf 8f5f 	dmb	sy
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
   80f42:	2200      	movs	r2, #0
   80f44:	4b0e      	ldr	r3, [pc, #56]	; (80f80 <USART0_Handler+0x54>)
   80f46:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
   80f48:	4b0e      	ldr	r3, [pc, #56]	; (80f84 <USART0_Handler+0x58>)
   80f4a:	781b      	ldrb	r3, [r3, #0]
   80f4c:	f89d 1007 	ldrb.w	r1, [sp, #7]
   80f50:	4a0d      	ldr	r2, [pc, #52]	; (80f88 <USART0_Handler+0x5c>)
   80f52:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
   80f54:	2b9b      	cmp	r3, #155	; 0x9b
   80f56:	d103      	bne.n	80f60 <USART0_Handler+0x34>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
   80f58:	2200      	movs	r2, #0
   80f5a:	4b0a      	ldr	r3, [pc, #40]	; (80f84 <USART0_Handler+0x58>)
   80f5c:	701a      	strb	r2, [r3, #0]
   80f5e:	e002      	b.n	80f66 <USART0_Handler+0x3a>
	} else {
		serial_rx_buf_tail++;
   80f60:	3301      	adds	r3, #1
   80f62:	4a08      	ldr	r2, [pc, #32]	; (80f84 <USART0_Handler+0x58>)
   80f64:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
   80f66:	2201      	movs	r2, #1
   80f68:	4b05      	ldr	r3, [pc, #20]	; (80f80 <USART0_Handler+0x54>)
   80f6a:	701a      	strb	r2, [r3, #0]
   80f6c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   80f70:	b662      	cpsie	i
}
   80f72:	b003      	add	sp, #12
   80f74:	f85d fb04 	ldr.w	pc, [sp], #4
   80f78:	40098000 	.word	0x40098000
   80f7c:	000803f5 	.word	0x000803f5
   80f80:	20070139 	.word	0x20070139
   80f84:	20070ad4 	.word	0x20070ad4
   80f88:	20070a38 	.word	0x20070a38

00080f8c <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   80f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
   80f8e:	b083      	sub	sp, #12
   80f90:	4604      	mov	r4, r0
   80f92:	460d      	mov	r5, r1
	uint32_t val = 0;
   80f94:	2300      	movs	r3, #0
   80f96:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   80f98:	4b1f      	ldr	r3, [pc, #124]	; (81018 <usart_serial_getchar+0x8c>)
   80f9a:	4298      	cmp	r0, r3
   80f9c:	d107      	bne.n	80fae <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
   80f9e:	461f      	mov	r7, r3
   80fa0:	4e1e      	ldr	r6, [pc, #120]	; (8101c <usart_serial_getchar+0x90>)
   80fa2:	4638      	mov	r0, r7
   80fa4:	4629      	mov	r1, r5
   80fa6:	47b0      	blx	r6
   80fa8:	2800      	cmp	r0, #0
   80faa:	d1fa      	bne.n	80fa2 <usart_serial_getchar+0x16>
   80fac:	e019      	b.n	80fe2 <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80fae:	4b1c      	ldr	r3, [pc, #112]	; (81020 <usart_serial_getchar+0x94>)
   80fb0:	4298      	cmp	r0, r3
   80fb2:	d109      	bne.n	80fc8 <usart_serial_getchar+0x3c>
		while (usart_read(p_usart, &val));
   80fb4:	461f      	mov	r7, r3
   80fb6:	4e1b      	ldr	r6, [pc, #108]	; (81024 <usart_serial_getchar+0x98>)
   80fb8:	4638      	mov	r0, r7
   80fba:	a901      	add	r1, sp, #4
   80fbc:	47b0      	blx	r6
   80fbe:	2800      	cmp	r0, #0
   80fc0:	d1fa      	bne.n	80fb8 <usart_serial_getchar+0x2c>
		*data = (uint8_t)(val & 0xFF);
   80fc2:	9b01      	ldr	r3, [sp, #4]
   80fc4:	702b      	strb	r3, [r5, #0]
   80fc6:	e019      	b.n	80ffc <usart_serial_getchar+0x70>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80fc8:	4b17      	ldr	r3, [pc, #92]	; (81028 <usart_serial_getchar+0x9c>)
   80fca:	4298      	cmp	r0, r3
   80fcc:	d109      	bne.n	80fe2 <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
   80fce:	461e      	mov	r6, r3
   80fd0:	4c14      	ldr	r4, [pc, #80]	; (81024 <usart_serial_getchar+0x98>)
   80fd2:	4630      	mov	r0, r6
   80fd4:	a901      	add	r1, sp, #4
   80fd6:	47a0      	blx	r4
   80fd8:	2800      	cmp	r0, #0
   80fda:	d1fa      	bne.n	80fd2 <usart_serial_getchar+0x46>
		*data = (uint8_t)(val & 0xFF);
   80fdc:	9b01      	ldr	r3, [sp, #4]
   80fde:	702b      	strb	r3, [r5, #0]
   80fe0:	e018      	b.n	81014 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80fe2:	4b12      	ldr	r3, [pc, #72]	; (8102c <usart_serial_getchar+0xa0>)
   80fe4:	429c      	cmp	r4, r3
   80fe6:	d109      	bne.n	80ffc <usart_serial_getchar+0x70>
		while (usart_read(p_usart, &val));
   80fe8:	461e      	mov	r6, r3
   80fea:	4c0e      	ldr	r4, [pc, #56]	; (81024 <usart_serial_getchar+0x98>)
   80fec:	4630      	mov	r0, r6
   80fee:	a901      	add	r1, sp, #4
   80ff0:	47a0      	blx	r4
   80ff2:	2800      	cmp	r0, #0
   80ff4:	d1fa      	bne.n	80fec <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
   80ff6:	9b01      	ldr	r3, [sp, #4]
   80ff8:	702b      	strb	r3, [r5, #0]
   80ffa:	e00b      	b.n	81014 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80ffc:	4b0c      	ldr	r3, [pc, #48]	; (81030 <usart_serial_getchar+0xa4>)
   80ffe:	429c      	cmp	r4, r3
   81000:	d108      	bne.n	81014 <usart_serial_getchar+0x88>
		while (usart_read(p_usart, &val));
   81002:	461e      	mov	r6, r3
   81004:	4c07      	ldr	r4, [pc, #28]	; (81024 <usart_serial_getchar+0x98>)
   81006:	4630      	mov	r0, r6
   81008:	a901      	add	r1, sp, #4
   8100a:	47a0      	blx	r4
   8100c:	2800      	cmp	r0, #0
   8100e:	d1fa      	bne.n	81006 <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
   81010:	9b01      	ldr	r3, [sp, #4]
   81012:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   81014:	b003      	add	sp, #12
   81016:	bdf0      	pop	{r4, r5, r6, r7, pc}
   81018:	400e0800 	.word	0x400e0800
   8101c:	00080ccd 	.word	0x00080ccd
   81020:	40098000 	.word	0x40098000
   81024:	00080cf5 	.word	0x00080cf5
   81028:	4009c000 	.word	0x4009c000
   8102c:	400a0000 	.word	0x400a0000
   81030:	400a4000 	.word	0x400a4000

00081034 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   81034:	b570      	push	{r4, r5, r6, lr}
   81036:	460c      	mov	r4, r1
#ifdef UART
	if (UART == (Uart*)p_usart) {
   81038:	4b21      	ldr	r3, [pc, #132]	; (810c0 <usart_serial_putchar+0x8c>)
   8103a:	4298      	cmp	r0, r3
   8103c:	d107      	bne.n	8104e <usart_serial_putchar+0x1a>
		while (uart_write((Uart*)p_usart, c)!=0);
   8103e:	461e      	mov	r6, r3
   81040:	4d20      	ldr	r5, [pc, #128]	; (810c4 <usart_serial_putchar+0x90>)
   81042:	4630      	mov	r0, r6
   81044:	4621      	mov	r1, r4
   81046:	47a8      	blx	r5
   81048:	2800      	cmp	r0, #0
   8104a:	d1fa      	bne.n	81042 <usart_serial_putchar+0xe>
   8104c:	e02b      	b.n	810a6 <usart_serial_putchar+0x72>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   8104e:	4b1e      	ldr	r3, [pc, #120]	; (810c8 <usart_serial_putchar+0x94>)
   81050:	4298      	cmp	r0, r3
   81052:	d107      	bne.n	81064 <usart_serial_putchar+0x30>
		while (usart_write(p_usart, c)!=0);
   81054:	461e      	mov	r6, r3
   81056:	4d1d      	ldr	r5, [pc, #116]	; (810cc <usart_serial_putchar+0x98>)
   81058:	4630      	mov	r0, r6
   8105a:	4621      	mov	r1, r4
   8105c:	47a8      	blx	r5
   8105e:	2800      	cmp	r0, #0
   81060:	d1fa      	bne.n	81058 <usart_serial_putchar+0x24>
   81062:	e022      	b.n	810aa <usart_serial_putchar+0x76>
		return 1;
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   81064:	4b1a      	ldr	r3, [pc, #104]	; (810d0 <usart_serial_putchar+0x9c>)
   81066:	4298      	cmp	r0, r3
   81068:	d107      	bne.n	8107a <usart_serial_putchar+0x46>
		while (usart_write(p_usart, c)!=0);
   8106a:	461e      	mov	r6, r3
   8106c:	4d17      	ldr	r5, [pc, #92]	; (810cc <usart_serial_putchar+0x98>)
   8106e:	4630      	mov	r0, r6
   81070:	4621      	mov	r1, r4
   81072:	47a8      	blx	r5
   81074:	2800      	cmp	r0, #0
   81076:	d1fa      	bne.n	8106e <usart_serial_putchar+0x3a>
   81078:	e019      	b.n	810ae <usart_serial_putchar+0x7a>
		return 1;
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   8107a:	4b16      	ldr	r3, [pc, #88]	; (810d4 <usart_serial_putchar+0xa0>)
   8107c:	4298      	cmp	r0, r3
   8107e:	d107      	bne.n	81090 <usart_serial_putchar+0x5c>
		while (usart_write(p_usart, c)!=0);
   81080:	461e      	mov	r6, r3
   81082:	4d12      	ldr	r5, [pc, #72]	; (810cc <usart_serial_putchar+0x98>)
   81084:	4630      	mov	r0, r6
   81086:	4621      	mov	r1, r4
   81088:	47a8      	blx	r5
   8108a:	2800      	cmp	r0, #0
   8108c:	d1fa      	bne.n	81084 <usart_serial_putchar+0x50>
   8108e:	e010      	b.n	810b2 <usart_serial_putchar+0x7e>
		return 1;
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   81090:	4b11      	ldr	r3, [pc, #68]	; (810d8 <usart_serial_putchar+0xa4>)
   81092:	4298      	cmp	r0, r3
   81094:	d10f      	bne.n	810b6 <usart_serial_putchar+0x82>
		while (usart_write(p_usart, c)!=0);
   81096:	461e      	mov	r6, r3
   81098:	4d0c      	ldr	r5, [pc, #48]	; (810cc <usart_serial_putchar+0x98>)
   8109a:	4630      	mov	r0, r6
   8109c:	4621      	mov	r1, r4
   8109e:	47a8      	blx	r5
   810a0:	2800      	cmp	r0, #0
   810a2:	d1fa      	bne.n	8109a <usart_serial_putchar+0x66>
   810a4:	e009      	b.n	810ba <usart_serial_putchar+0x86>
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
   810a6:	2001      	movs	r0, #1
   810a8:	bd70      	pop	{r4, r5, r6, pc}
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   810aa:	2001      	movs	r0, #1
   810ac:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   810ae:	2001      	movs	r0, #1
   810b0:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   810b2:	2001      	movs	r0, #1
   810b4:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   810b6:	2000      	movs	r0, #0
   810b8:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   810ba:	2001      	movs	r0, #1
	}
# endif
#endif /* ifdef USART */

	return 0;
}
   810bc:	bd70      	pop	{r4, r5, r6, pc}
   810be:	bf00      	nop
   810c0:	400e0800 	.word	0x400e0800
   810c4:	00080cbd 	.word	0x00080cbd
   810c8:	40098000 	.word	0x40098000
   810cc:	00080ce1 	.word	0x00080ce1
   810d0:	4009c000 	.word	0x4009c000
   810d4:	400a0000 	.word	0x400a0000
   810d8:	400a4000 	.word	0x400a4000

000810dc <twi_test_pickup>:
Object theObj=GLASS;
int superDone =0;
uint8_t startpickup=0;
uint8_t drive= 0;
void twi_test_pickup(void)
{
   810dc:	b510      	push	{r4, lr}
	
	if(superDone)
   810de:	4b3d      	ldr	r3, [pc, #244]	; (811d4 <twi_test_pickup+0xf8>)
   810e0:	681b      	ldr	r3, [r3, #0]
   810e2:	2b00      	cmp	r3, #0
   810e4:	d174      	bne.n	811d0 <twi_test_pickup+0xf4>
	{
		return;
	}
	puts("twi pick");
   810e6:	483c      	ldr	r0, [pc, #240]	; (811d8 <twi_test_pickup+0xfc>)
   810e8:	4b3c      	ldr	r3, [pc, #240]	; (811dc <twi_test_pickup+0x100>)
   810ea:	4798      	blx	r3
	if(startpickup==0)
   810ec:	4b3c      	ldr	r3, [pc, #240]	; (811e0 <twi_test_pickup+0x104>)
   810ee:	781b      	ldrb	r3, [r3, #0]
   810f0:	b97b      	cbnz	r3, 81112 <twi_test_pickup+0x36>
	{
		
		//RETURN 1 IF success
		startpickup=twi_pickupStart();
   810f2:	4b3c      	ldr	r3, [pc, #240]	; (811e4 <twi_test_pickup+0x108>)
   810f4:	4798      	blx	r3
   810f6:	4b3a      	ldr	r3, [pc, #232]	; (811e0 <twi_test_pickup+0x104>)
   810f8:	7018      	strb	r0, [r3, #0]
		if (startpickup ==0)
   810fa:	b918      	cbnz	r0, 81104 <twi_test_pickup+0x28>
		{
			puts("failed tot start pickup!");
   810fc:	483a      	ldr	r0, [pc, #232]	; (811e8 <twi_test_pickup+0x10c>)
   810fe:	4b37      	ldr	r3, [pc, #220]	; (811dc <twi_test_pickup+0x100>)
   81100:	4798      	blx	r3
   81102:	e002      	b.n	8110a <twi_test_pickup+0x2e>
		}
		else
		{
			puts("Started pickup");
   81104:	4839      	ldr	r0, [pc, #228]	; (811ec <twi_test_pickup+0x110>)
   81106:	4b35      	ldr	r3, [pc, #212]	; (811dc <twi_test_pickup+0x100>)
   81108:	4798      	blx	r3
		}
		
		delay_ms(80);
   8110a:	4839      	ldr	r0, [pc, #228]	; (811f0 <twi_test_pickup+0x114>)
   8110c:	4b39      	ldr	r3, [pc, #228]	; (811f4 <twi_test_pickup+0x118>)
   8110e:	4798      	blx	r3
   81110:	bd10      	pop	{r4, pc}
		
	}
	else{
		
		puts("do tWi status");
   81112:	4839      	ldr	r0, [pc, #228]	; (811f8 <twi_test_pickup+0x11c>)
   81114:	4b31      	ldr	r3, [pc, #196]	; (811dc <twi_test_pickup+0x100>)
   81116:	4798      	blx	r3
		
		

		
		PickupStatus pickupStatus=twi_pickupGetStatus();
   81118:	4b38      	ldr	r3, [pc, #224]	; (811fc <twi_test_pickup+0x120>)
   8111a:	4798      	blx	r3
   8111c:	4604      	mov	r4, r0
		
		switch(pickupStatus){
   8111e:	1e83      	subs	r3, r0, #2
   81120:	2b06      	cmp	r3, #6
   81122:	d836      	bhi.n	81192 <twi_test_pickup+0xb6>
   81124:	e8df f003 	tbb	[pc, r3]
   81128:	2d042314 	.word	0x2d042314
   8112c:	1b1f      	.short	0x1b1f
   8112e:	31          	.byte	0x31
   8112f:	00          	.byte	0x00
			case PICKUP_BACKWARD:
			puts("PICKUP_STATUS.PICKUP_BACKWARD:");
   81130:	4833      	ldr	r0, [pc, #204]	; (81200 <twi_test_pickup+0x124>)
   81132:	4b2a      	ldr	r3, [pc, #168]	; (811dc <twi_test_pickup+0x100>)
   81134:	4798      	blx	r3
			printf("back: %u\n",twi_pickupGetMoveCm());
   81136:	4b33      	ldr	r3, [pc, #204]	; (81204 <twi_test_pickup+0x128>)
   81138:	4798      	blx	r3
   8113a:	4601      	mov	r1, r0
   8113c:	4832      	ldr	r0, [pc, #200]	; (81208 <twi_test_pickup+0x12c>)
   8113e:	4b33      	ldr	r3, [pc, #204]	; (8120c <twi_test_pickup+0x130>)
   81140:	4798      	blx	r3
			//should be handle by driving.. to tell that its done
			twi_pickupSetMasterStatus(PICKUP_DONE_DRIVE);
   81142:	2007      	movs	r0, #7
   81144:	4b32      	ldr	r3, [pc, #200]	; (81210 <twi_test_pickup+0x134>)
   81146:	4798      	blx	r3
			delay_ms(2000);
   81148:	4832      	ldr	r0, [pc, #200]	; (81214 <twi_test_pickup+0x138>)
   8114a:	4b2a      	ldr	r3, [pc, #168]	; (811f4 <twi_test_pickup+0x118>)
   8114c:	4798      	blx	r3
			break;
   8114e:	e02a      	b.n	811a6 <twi_test_pickup+0xca>
			case PICKUP_DONE:
			puts("PICKUP_DONE");
   81150:	4831      	ldr	r0, [pc, #196]	; (81218 <twi_test_pickup+0x13c>)
   81152:	4b22      	ldr	r3, [pc, #136]	; (811dc <twi_test_pickup+0x100>)
   81154:	4798      	blx	r3
			//startpickup=0;
			superDone=1;
   81156:	2201      	movs	r2, #1
   81158:	4b1e      	ldr	r3, [pc, #120]	; (811d4 <twi_test_pickup+0xf8>)
   8115a:	601a      	str	r2, [r3, #0]
			break;
   8115c:	bd10      	pop	{r4, pc}
			case PICKUP_DONE_DRIVE:
			puts("PICKUP_DONE_DRIVE:");
   8115e:	482f      	ldr	r0, [pc, #188]	; (8121c <twi_test_pickup+0x140>)
   81160:	4b1e      	ldr	r3, [pc, #120]	; (811dc <twi_test_pickup+0x100>)
   81162:	4798      	blx	r3
				
			break;
   81164:	bd10      	pop	{r4, pc}
			case PICKUP_FAILED:
			puts("PICKUP_FAILED");
   81166:	482e      	ldr	r0, [pc, #184]	; (81220 <twi_test_pickup+0x144>)
   81168:	4b1c      	ldr	r3, [pc, #112]	; (811dc <twi_test_pickup+0x100>)
   8116a:	4798      	blx	r3
			break;
   8116c:	bd10      	pop	{r4, pc}
			case PICKUP_FORWARD:
			puts("PICKUP_STATUS.PICKUP_FORWARD:");
   8116e:	482d      	ldr	r0, [pc, #180]	; (81224 <twi_test_pickup+0x148>)
   81170:	4b1a      	ldr	r3, [pc, #104]	; (811dc <twi_test_pickup+0x100>)
   81172:	4798      	blx	r3
			printf("forward: %u\n",twi_pickupGetMoveCm());
   81174:	4b23      	ldr	r3, [pc, #140]	; (81204 <twi_test_pickup+0x128>)
   81176:	4798      	blx	r3
   81178:	4601      	mov	r1, r0
   8117a:	482b      	ldr	r0, [pc, #172]	; (81228 <twi_test_pickup+0x14c>)
   8117c:	4b23      	ldr	r3, [pc, #140]	; (8120c <twi_test_pickup+0x130>)
   8117e:	4798      	blx	r3
			//should be handle by driving.. to tell that its done
			
			
			break;
   81180:	e011      	b.n	811a6 <twi_test_pickup+0xca>
			case PICKUP_RUNNING:
			puts("PICKUP_RUNNING");
   81182:	482a      	ldr	r0, [pc, #168]	; (8122c <twi_test_pickup+0x150>)
   81184:	4b15      	ldr	r3, [pc, #84]	; (811dc <twi_test_pickup+0x100>)
   81186:	4798      	blx	r3
			break;
   81188:	bd10      	pop	{r4, pc}
			case PICKUP_IDLE:
			puts("PICKUP_IDLE");
   8118a:	4829      	ldr	r0, [pc, #164]	; (81230 <twi_test_pickup+0x154>)
   8118c:	4b13      	ldr	r3, [pc, #76]	; (811dc <twi_test_pickup+0x100>)
   8118e:	4798      	blx	r3
			break;
   81190:	bd10      	pop	{r4, pc}
			default:
			puts("pickup status error");
   81192:	4828      	ldr	r0, [pc, #160]	; (81234 <twi_test_pickup+0x158>)
   81194:	4b11      	ldr	r3, [pc, #68]	; (811dc <twi_test_pickup+0x100>)
   81196:	4798      	blx	r3
			startpickup=0;
   81198:	2200      	movs	r2, #0
   8119a:	4b11      	ldr	r3, [pc, #68]	; (811e0 <twi_test_pickup+0x104>)
   8119c:	701a      	strb	r2, [r3, #0]
			break;
		}
		//end of check slave state
		if(pickupStatus == PICKUP_BACKWARD || pickupStatus == PICKUP_FORWARD)
   8119e:	3c03      	subs	r4, #3
   811a0:	b2e4      	uxtb	r4, r4
   811a2:	2c01      	cmp	r4, #1
   811a4:	d814      	bhi.n	811d0 <twi_test_pickup+0xf4>
		{
			puts("MOVING FRWD");
   811a6:	4824      	ldr	r0, [pc, #144]	; (81238 <twi_test_pickup+0x15c>)
   811a8:	4b0c      	ldr	r3, [pc, #48]	; (811dc <twi_test_pickup+0x100>)
   811aa:	4798      	blx	r3
			delay_ms(7000);
   811ac:	4823      	ldr	r0, [pc, #140]	; (8123c <twi_test_pickup+0x160>)
   811ae:	4b11      	ldr	r3, [pc, #68]	; (811f4 <twi_test_pickup+0x118>)
   811b0:	4798      	blx	r3
			twi_pickupSetMasterStatus(PICKUP_DONE_DRIVE);
   811b2:	2007      	movs	r0, #7
   811b4:	4b16      	ldr	r3, [pc, #88]	; (81210 <twi_test_pickup+0x134>)
   811b6:	4798      	blx	r3
			
			if (twi_pickupGetMasterStatus()==PICKUP_DONE_DRIVE)
   811b8:	4b21      	ldr	r3, [pc, #132]	; (81240 <twi_test_pickup+0x164>)
   811ba:	4798      	blx	r3
   811bc:	2807      	cmp	r0, #7
   811be:	d107      	bne.n	811d0 <twi_test_pickup+0xf4>
			{
				puts("DONE MOVE");
   811c0:	4820      	ldr	r0, [pc, #128]	; (81244 <twi_test_pickup+0x168>)
   811c2:	4b06      	ldr	r3, [pc, #24]	; (811dc <twi_test_pickup+0x100>)
   811c4:	4798      	blx	r3
				//tell slave that we are done moving.
				twi_pickupSendMovementDone();
   811c6:	4b20      	ldr	r3, [pc, #128]	; (81248 <twi_test_pickup+0x16c>)
   811c8:	4798      	blx	r3
				twi_pickupSetMasterStatus(PICKUP_IDLE);
   811ca:	2008      	movs	r0, #8
   811cc:	4b10      	ldr	r3, [pc, #64]	; (81210 <twi_test_pickup+0x134>)
   811ce:	4798      	blx	r3
   811d0:	bd10      	pop	{r4, pc}
   811d2:	bf00      	nop
   811d4:	20070ad8 	.word	0x20070ad8
   811d8:	00084550 	.word	0x00084550
   811dc:	00081485 	.word	0x00081485
   811e0:	20070ad5 	.word	0x20070ad5
   811e4:	000802c9 	.word	0x000802c9
   811e8:	0008455c 	.word	0x0008455c
   811ec:	00084578 	.word	0x00084578
   811f0:	00075300 	.word	0x00075300
   811f4:	20070001 	.word	0x20070001
   811f8:	00084588 	.word	0x00084588
   811fc:	000802f5 	.word	0x000802f5
   81200:	00084598 	.word	0x00084598
   81204:	000803e9 	.word	0x000803e9
   81208:	000845b8 	.word	0x000845b8
   8120c:	00081369 	.word	0x00081369
   81210:	000803d1 	.word	0x000803d1
   81214:	00b71b00 	.word	0x00b71b00
   81218:	000845c4 	.word	0x000845c4
   8121c:	000845d0 	.word	0x000845d0
   81220:	000845e4 	.word	0x000845e4
   81224:	000845f4 	.word	0x000845f4
   81228:	00084614 	.word	0x00084614
   8122c:	00084624 	.word	0x00084624
   81230:	00084634 	.word	0x00084634
   81234:	00084640 	.word	0x00084640
   81238:	00084654 	.word	0x00084654
   8123c:	0280de80 	.word	0x0280de80
   81240:	000803dd 	.word	0x000803dd
   81244:	00084660 	.word	0x00084660
   81248:	00080395 	.word	0x00080395

0008124c <configureConsole>:
	
	 
}

void configureConsole()
{
   8124c:	b530      	push	{r4, r5, lr}
   8124e:	b085      	sub	sp, #20
   81250:	2008      	movs	r0, #8
   81252:	4d12      	ldr	r5, [pc, #72]	; (8129c <configureConsole+0x50>)
   81254:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   81256:	4c12      	ldr	r4, [pc, #72]	; (812a0 <configureConsole+0x54>)
   81258:	4b12      	ldr	r3, [pc, #72]	; (812a4 <configureConsole+0x58>)
   8125a:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   8125c:	4a12      	ldr	r2, [pc, #72]	; (812a8 <configureConsole+0x5c>)
   8125e:	4b13      	ldr	r3, [pc, #76]	; (812ac <configureConsole+0x60>)
   81260:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   81262:	4a13      	ldr	r2, [pc, #76]	; (812b0 <configureConsole+0x64>)
   81264:	4b13      	ldr	r3, [pc, #76]	; (812b4 <configureConsole+0x68>)
   81266:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   81268:	4b13      	ldr	r3, [pc, #76]	; (812b8 <configureConsole+0x6c>)
   8126a:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   8126c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   81270:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   81272:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81276:	9303      	str	r3, [sp, #12]
   81278:	2008      	movs	r0, #8
   8127a:	47a8      	blx	r5
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   8127c:	4620      	mov	r0, r4
   8127e:	a901      	add	r1, sp, #4
   81280:	4b0e      	ldr	r3, [pc, #56]	; (812bc <configureConsole+0x70>)
   81282:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   81284:	4d0e      	ldr	r5, [pc, #56]	; (812c0 <configureConsole+0x74>)
   81286:	682b      	ldr	r3, [r5, #0]
   81288:	6898      	ldr	r0, [r3, #8]
   8128a:	2100      	movs	r1, #0
   8128c:	4c0d      	ldr	r4, [pc, #52]	; (812c4 <configureConsole+0x78>)
   8128e:	47a0      	blx	r4
	setbuf(stdin, NULL);
   81290:	682b      	ldr	r3, [r5, #0]
   81292:	6858      	ldr	r0, [r3, #4]
   81294:	2100      	movs	r1, #0
   81296:	47a0      	blx	r4
		.paritytype = CONF_UART_PARITY
	};
	
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONSOLE_UART, &uart_serial_options);
}
   81298:	b005      	add	sp, #20
   8129a:	bd30      	pop	{r4, r5, pc}
   8129c:	00080c2d 	.word	0x00080c2d
   812a0:	400e0800 	.word	0x400e0800
   812a4:	20070b24 	.word	0x20070b24
   812a8:	00081035 	.word	0x00081035
   812ac:	20070b20 	.word	0x20070b20
   812b0:	00080f8d 	.word	0x00080f8d
   812b4:	20070b1c 	.word	0x20070b1c
   812b8:	0501bd00 	.word	0x0501bd00
   812bc:	00080c85 	.word	0x00080c85
   812c0:	20070568 	.word	0x20070568
   812c4:	00081495 	.word	0x00081495

000812c8 <main>:
}



int main (void)
{
   812c8:	b570      	push	{r4, r5, r6, lr}
	  /* Initialize the common clock service, board-specific initialization, and
   * interrupt vector support prior to using the TWI master interfaces.
   */
  sysclk_init();
   812ca:	4b0b      	ldr	r3, [pc, #44]	; (812f8 <main+0x30>)
   812cc:	4798      	blx	r3

	board_init();
   812ce:	4b0b      	ldr	r3, [pc, #44]	; (812fc <main+0x34>)
   812d0:	4798      	blx	r3
	
	configureConsole();
   812d2:	4b0b      	ldr	r3, [pc, #44]	; (81300 <main+0x38>)
   812d4:	4798      	blx	r3

	 // TWI master initialization options.
	 //initTwiMaster();
	 //initTwi();
	 twi_comInit();
   812d6:	4b0b      	ldr	r3, [pc, #44]	; (81304 <main+0x3c>)
   812d8:	4798      	blx	r3
	 
	 while(!superDone)
   812da:	4b0b      	ldr	r3, [pc, #44]	; (81308 <main+0x40>)
   812dc:	681b      	ldr	r3, [r3, #0]
   812de:	b94b      	cbnz	r3, 812f4 <main+0x2c>
	 {
//		twi_test_getArminfo();
		twi_test_pickup();
   812e0:	4e0a      	ldr	r6, [pc, #40]	; (8130c <main+0x44>)
//		twi_test_dropoff();
		
		delay_ms(200);
   812e2:	4d0b      	ldr	r5, [pc, #44]	; (81310 <main+0x48>)
   812e4:	4c0b      	ldr	r4, [pc, #44]	; (81314 <main+0x4c>)
	 twi_comInit();
	 
	 while(!superDone)
	 {
//		twi_test_getArminfo();
		twi_test_pickup();
   812e6:	47b0      	blx	r6
//		twi_test_dropoff();
		
		delay_ms(200);
   812e8:	4628      	mov	r0, r5
   812ea:	47a0      	blx	r4
	 // TWI master initialization options.
	 //initTwiMaster();
	 //initTwi();
	 twi_comInit();
	 
	 while(!superDone)
   812ec:	4b06      	ldr	r3, [pc, #24]	; (81308 <main+0x40>)
   812ee:	681b      	ldr	r3, [r3, #0]
   812f0:	2b00      	cmp	r3, #0
   812f2:	d0f8      	beq.n	812e6 <main+0x1e>
// 	
// 		}
	
	
	 
}
   812f4:	2000      	movs	r0, #0
   812f6:	bd70      	pop	{r4, r5, r6, pc}
   812f8:	00080771 	.word	0x00080771
   812fc:	000807d5 	.word	0x000807d5
   81300:	0008124d 	.word	0x0008124d
   81304:	00080149 	.word	0x00080149
   81308:	20070ad8 	.word	0x20070ad8
   8130c:	000810dd 	.word	0x000810dd
   81310:	00124f80 	.word	0x00124f80
   81314:	20070001 	.word	0x20070001

00081318 <__libc_init_array>:
   81318:	b570      	push	{r4, r5, r6, lr}
   8131a:	4e0f      	ldr	r6, [pc, #60]	; (81358 <__libc_init_array+0x40>)
   8131c:	4d0f      	ldr	r5, [pc, #60]	; (8135c <__libc_init_array+0x44>)
   8131e:	1b76      	subs	r6, r6, r5
   81320:	10b6      	asrs	r6, r6, #2
   81322:	d007      	beq.n	81334 <__libc_init_array+0x1c>
   81324:	3d04      	subs	r5, #4
   81326:	2400      	movs	r4, #0
   81328:	3401      	adds	r4, #1
   8132a:	f855 3f04 	ldr.w	r3, [r5, #4]!
   8132e:	4798      	blx	r3
   81330:	42a6      	cmp	r6, r4
   81332:	d1f9      	bne.n	81328 <__libc_init_array+0x10>
   81334:	4e0a      	ldr	r6, [pc, #40]	; (81360 <__libc_init_array+0x48>)
   81336:	4d0b      	ldr	r5, [pc, #44]	; (81364 <__libc_init_array+0x4c>)
   81338:	f003 fa04 	bl	84744 <_init>
   8133c:	1b76      	subs	r6, r6, r5
   8133e:	10b6      	asrs	r6, r6, #2
   81340:	d008      	beq.n	81354 <__libc_init_array+0x3c>
   81342:	3d04      	subs	r5, #4
   81344:	2400      	movs	r4, #0
   81346:	3401      	adds	r4, #1
   81348:	f855 3f04 	ldr.w	r3, [r5, #4]!
   8134c:	4798      	blx	r3
   8134e:	42a6      	cmp	r6, r4
   81350:	d1f9      	bne.n	81346 <__libc_init_array+0x2e>
   81352:	bd70      	pop	{r4, r5, r6, pc}
   81354:	bd70      	pop	{r4, r5, r6, pc}
   81356:	bf00      	nop
   81358:	00084750 	.word	0x00084750
   8135c:	00084750 	.word	0x00084750
   81360:	00084758 	.word	0x00084758
   81364:	00084750 	.word	0x00084750

00081368 <iprintf>:
   81368:	b40f      	push	{r0, r1, r2, r3}
   8136a:	b510      	push	{r4, lr}
   8136c:	4b07      	ldr	r3, [pc, #28]	; (8138c <iprintf+0x24>)
   8136e:	b082      	sub	sp, #8
   81370:	ac04      	add	r4, sp, #16
   81372:	f854 2b04 	ldr.w	r2, [r4], #4
   81376:	6818      	ldr	r0, [r3, #0]
   81378:	4623      	mov	r3, r4
   8137a:	6881      	ldr	r1, [r0, #8]
   8137c:	9401      	str	r4, [sp, #4]
   8137e:	f000 f97d 	bl	8167c <_vfiprintf_r>
   81382:	b002      	add	sp, #8
   81384:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   81388:	b004      	add	sp, #16
   8138a:	4770      	bx	lr
   8138c:	20070568 	.word	0x20070568

00081390 <memset>:
   81390:	b4f0      	push	{r4, r5, r6, r7}
   81392:	0784      	lsls	r4, r0, #30
   81394:	d043      	beq.n	8141e <memset+0x8e>
   81396:	1e54      	subs	r4, r2, #1
   81398:	2a00      	cmp	r2, #0
   8139a:	d03e      	beq.n	8141a <memset+0x8a>
   8139c:	b2cd      	uxtb	r5, r1
   8139e:	4603      	mov	r3, r0
   813a0:	e003      	b.n	813aa <memset+0x1a>
   813a2:	1e62      	subs	r2, r4, #1
   813a4:	2c00      	cmp	r4, #0
   813a6:	d038      	beq.n	8141a <memset+0x8a>
   813a8:	4614      	mov	r4, r2
   813aa:	f803 5b01 	strb.w	r5, [r3], #1
   813ae:	079a      	lsls	r2, r3, #30
   813b0:	d1f7      	bne.n	813a2 <memset+0x12>
   813b2:	2c03      	cmp	r4, #3
   813b4:	d92a      	bls.n	8140c <memset+0x7c>
   813b6:	b2cd      	uxtb	r5, r1
   813b8:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   813bc:	2c0f      	cmp	r4, #15
   813be:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   813c2:	d915      	bls.n	813f0 <memset+0x60>
   813c4:	f1a4 0710 	sub.w	r7, r4, #16
   813c8:	093f      	lsrs	r7, r7, #4
   813ca:	f103 0610 	add.w	r6, r3, #16
   813ce:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   813d2:	461a      	mov	r2, r3
   813d4:	6015      	str	r5, [r2, #0]
   813d6:	6055      	str	r5, [r2, #4]
   813d8:	6095      	str	r5, [r2, #8]
   813da:	60d5      	str	r5, [r2, #12]
   813dc:	3210      	adds	r2, #16
   813de:	42b2      	cmp	r2, r6
   813e0:	d1f8      	bne.n	813d4 <memset+0x44>
   813e2:	f004 040f 	and.w	r4, r4, #15
   813e6:	3701      	adds	r7, #1
   813e8:	2c03      	cmp	r4, #3
   813ea:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   813ee:	d90d      	bls.n	8140c <memset+0x7c>
   813f0:	461e      	mov	r6, r3
   813f2:	4622      	mov	r2, r4
   813f4:	3a04      	subs	r2, #4
   813f6:	2a03      	cmp	r2, #3
   813f8:	f846 5b04 	str.w	r5, [r6], #4
   813fc:	d8fa      	bhi.n	813f4 <memset+0x64>
   813fe:	1f22      	subs	r2, r4, #4
   81400:	f022 0203 	bic.w	r2, r2, #3
   81404:	3204      	adds	r2, #4
   81406:	4413      	add	r3, r2
   81408:	f004 0403 	and.w	r4, r4, #3
   8140c:	b12c      	cbz	r4, 8141a <memset+0x8a>
   8140e:	b2c9      	uxtb	r1, r1
   81410:	441c      	add	r4, r3
   81412:	f803 1b01 	strb.w	r1, [r3], #1
   81416:	42a3      	cmp	r3, r4
   81418:	d1fb      	bne.n	81412 <memset+0x82>
   8141a:	bcf0      	pop	{r4, r5, r6, r7}
   8141c:	4770      	bx	lr
   8141e:	4614      	mov	r4, r2
   81420:	4603      	mov	r3, r0
   81422:	e7c6      	b.n	813b2 <memset+0x22>

00081424 <_puts_r>:
   81424:	b5f0      	push	{r4, r5, r6, r7, lr}
   81426:	4604      	mov	r4, r0
   81428:	b089      	sub	sp, #36	; 0x24
   8142a:	4608      	mov	r0, r1
   8142c:	460d      	mov	r5, r1
   8142e:	f000 f8b9 	bl	815a4 <strlen>
   81432:	68a3      	ldr	r3, [r4, #8]
   81434:	2102      	movs	r1, #2
   81436:	899a      	ldrh	r2, [r3, #12]
   81438:	f8df e044 	ldr.w	lr, [pc, #68]	; 81480 <_puts_r+0x5c>
   8143c:	f100 0c01 	add.w	ip, r0, #1
   81440:	2701      	movs	r7, #1
   81442:	ae04      	add	r6, sp, #16
   81444:	9102      	str	r1, [sp, #8]
   81446:	0491      	lsls	r1, r2, #18
   81448:	9504      	str	r5, [sp, #16]
   8144a:	9005      	str	r0, [sp, #20]
   8144c:	f8cd c00c 	str.w	ip, [sp, #12]
   81450:	f8cd e018 	str.w	lr, [sp, #24]
   81454:	9707      	str	r7, [sp, #28]
   81456:	9601      	str	r6, [sp, #4]
   81458:	d406      	bmi.n	81468 <_puts_r+0x44>
   8145a:	6e59      	ldr	r1, [r3, #100]	; 0x64
   8145c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   81460:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   81464:	819a      	strh	r2, [r3, #12]
   81466:	6659      	str	r1, [r3, #100]	; 0x64
   81468:	4620      	mov	r0, r4
   8146a:	4619      	mov	r1, r3
   8146c:	aa01      	add	r2, sp, #4
   8146e:	f001 faaf 	bl	829d0 <__sfvwrite_r>
   81472:	2800      	cmp	r0, #0
   81474:	bf0c      	ite	eq
   81476:	200a      	moveq	r0, #10
   81478:	f04f 30ff 	movne.w	r0, #4294967295
   8147c:	b009      	add	sp, #36	; 0x24
   8147e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   81480:	00084368 	.word	0x00084368

00081484 <puts>:
   81484:	4b02      	ldr	r3, [pc, #8]	; (81490 <puts+0xc>)
   81486:	4601      	mov	r1, r0
   81488:	6818      	ldr	r0, [r3, #0]
   8148a:	f7ff bfcb 	b.w	81424 <_puts_r>
   8148e:	bf00      	nop
   81490:	20070568 	.word	0x20070568

00081494 <setbuf>:
   81494:	2900      	cmp	r1, #0
   81496:	bf0c      	ite	eq
   81498:	2202      	moveq	r2, #2
   8149a:	2200      	movne	r2, #0
   8149c:	f44f 6380 	mov.w	r3, #1024	; 0x400
   814a0:	f000 b800 	b.w	814a4 <setvbuf>

000814a4 <setvbuf>:
   814a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   814a8:	4d3c      	ldr	r5, [pc, #240]	; (8159c <setvbuf+0xf8>)
   814aa:	4604      	mov	r4, r0
   814ac:	682d      	ldr	r5, [r5, #0]
   814ae:	4688      	mov	r8, r1
   814b0:	4616      	mov	r6, r2
   814b2:	461f      	mov	r7, r3
   814b4:	b115      	cbz	r5, 814bc <setvbuf+0x18>
   814b6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   814b8:	2b00      	cmp	r3, #0
   814ba:	d04f      	beq.n	8155c <setvbuf+0xb8>
   814bc:	2e02      	cmp	r6, #2
   814be:	d830      	bhi.n	81522 <setvbuf+0x7e>
   814c0:	2f00      	cmp	r7, #0
   814c2:	db2e      	blt.n	81522 <setvbuf+0x7e>
   814c4:	4628      	mov	r0, r5
   814c6:	4621      	mov	r1, r4
   814c8:	f001 f856 	bl	82578 <_fflush_r>
   814cc:	89a3      	ldrh	r3, [r4, #12]
   814ce:	2200      	movs	r2, #0
   814d0:	6062      	str	r2, [r4, #4]
   814d2:	61a2      	str	r2, [r4, #24]
   814d4:	061a      	lsls	r2, r3, #24
   814d6:	d428      	bmi.n	8152a <setvbuf+0x86>
   814d8:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   814dc:	b29b      	uxth	r3, r3
   814de:	2e02      	cmp	r6, #2
   814e0:	81a3      	strh	r3, [r4, #12]
   814e2:	d02d      	beq.n	81540 <setvbuf+0x9c>
   814e4:	f1b8 0f00 	cmp.w	r8, #0
   814e8:	d03c      	beq.n	81564 <setvbuf+0xc0>
   814ea:	2e01      	cmp	r6, #1
   814ec:	d013      	beq.n	81516 <setvbuf+0x72>
   814ee:	b29b      	uxth	r3, r3
   814f0:	f003 0008 	and.w	r0, r3, #8
   814f4:	4a2a      	ldr	r2, [pc, #168]	; (815a0 <setvbuf+0xfc>)
   814f6:	b280      	uxth	r0, r0
   814f8:	63ea      	str	r2, [r5, #60]	; 0x3c
   814fa:	f8c4 8000 	str.w	r8, [r4]
   814fe:	f8c4 8010 	str.w	r8, [r4, #16]
   81502:	6167      	str	r7, [r4, #20]
   81504:	b178      	cbz	r0, 81526 <setvbuf+0x82>
   81506:	f013 0f03 	tst.w	r3, #3
   8150a:	bf18      	it	ne
   8150c:	2700      	movne	r7, #0
   8150e:	60a7      	str	r7, [r4, #8]
   81510:	2000      	movs	r0, #0
   81512:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81516:	f043 0301 	orr.w	r3, r3, #1
   8151a:	427a      	negs	r2, r7
   8151c:	81a3      	strh	r3, [r4, #12]
   8151e:	61a2      	str	r2, [r4, #24]
   81520:	e7e5      	b.n	814ee <setvbuf+0x4a>
   81522:	f04f 30ff 	mov.w	r0, #4294967295
   81526:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8152a:	4628      	mov	r0, r5
   8152c:	6921      	ldr	r1, [r4, #16]
   8152e:	f001 f983 	bl	82838 <_free_r>
   81532:	89a3      	ldrh	r3, [r4, #12]
   81534:	2e02      	cmp	r6, #2
   81536:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   8153a:	b29b      	uxth	r3, r3
   8153c:	81a3      	strh	r3, [r4, #12]
   8153e:	d1d1      	bne.n	814e4 <setvbuf+0x40>
   81540:	2000      	movs	r0, #0
   81542:	f104 0243 	add.w	r2, r4, #67	; 0x43
   81546:	f043 0302 	orr.w	r3, r3, #2
   8154a:	2500      	movs	r5, #0
   8154c:	2101      	movs	r1, #1
   8154e:	81a3      	strh	r3, [r4, #12]
   81550:	60a5      	str	r5, [r4, #8]
   81552:	6022      	str	r2, [r4, #0]
   81554:	6122      	str	r2, [r4, #16]
   81556:	6161      	str	r1, [r4, #20]
   81558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8155c:	4628      	mov	r0, r5
   8155e:	f001 f827 	bl	825b0 <__sinit>
   81562:	e7ab      	b.n	814bc <setvbuf+0x18>
   81564:	2f00      	cmp	r7, #0
   81566:	bf08      	it	eq
   81568:	f44f 6780 	moveq.w	r7, #1024	; 0x400
   8156c:	4638      	mov	r0, r7
   8156e:	f001 fc59 	bl	82e24 <malloc>
   81572:	4680      	mov	r8, r0
   81574:	b128      	cbz	r0, 81582 <setvbuf+0xde>
   81576:	89a3      	ldrh	r3, [r4, #12]
   81578:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   8157c:	b29b      	uxth	r3, r3
   8157e:	81a3      	strh	r3, [r4, #12]
   81580:	e7b3      	b.n	814ea <setvbuf+0x46>
   81582:	f44f 6080 	mov.w	r0, #1024	; 0x400
   81586:	f001 fc4d 	bl	82e24 <malloc>
   8158a:	4680      	mov	r8, r0
   8158c:	b918      	cbnz	r0, 81596 <setvbuf+0xf2>
   8158e:	89a3      	ldrh	r3, [r4, #12]
   81590:	f04f 30ff 	mov.w	r0, #4294967295
   81594:	e7d5      	b.n	81542 <setvbuf+0x9e>
   81596:	f44f 6780 	mov.w	r7, #1024	; 0x400
   8159a:	e7ec      	b.n	81576 <setvbuf+0xd2>
   8159c:	20070568 	.word	0x20070568
   815a0:	000825a5 	.word	0x000825a5

000815a4 <strlen>:
   815a4:	f020 0103 	bic.w	r1, r0, #3
   815a8:	f010 0003 	ands.w	r0, r0, #3
   815ac:	f1c0 0000 	rsb	r0, r0, #0
   815b0:	f851 3b04 	ldr.w	r3, [r1], #4
   815b4:	f100 0c04 	add.w	ip, r0, #4
   815b8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   815bc:	f06f 0200 	mvn.w	r2, #0
   815c0:	bf1c      	itt	ne
   815c2:	fa22 f20c 	lsrne.w	r2, r2, ip
   815c6:	4313      	orrne	r3, r2
   815c8:	f04f 0c01 	mov.w	ip, #1
   815cc:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   815d0:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   815d4:	eba3 020c 	sub.w	r2, r3, ip
   815d8:	ea22 0203 	bic.w	r2, r2, r3
   815dc:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   815e0:	bf04      	itt	eq
   815e2:	f851 3b04 	ldreq.w	r3, [r1], #4
   815e6:	3004      	addeq	r0, #4
   815e8:	d0f4      	beq.n	815d4 <strlen+0x30>
   815ea:	f013 0fff 	tst.w	r3, #255	; 0xff
   815ee:	bf1f      	itttt	ne
   815f0:	3001      	addne	r0, #1
   815f2:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
   815f6:	3001      	addne	r0, #1
   815f8:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
   815fc:	bf18      	it	ne
   815fe:	3001      	addne	r0, #1
   81600:	4770      	bx	lr
   81602:	bf00      	nop

00081604 <__sprint_r.part.0>:
   81604:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   81606:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8160a:	049c      	lsls	r4, r3, #18
   8160c:	460e      	mov	r6, r1
   8160e:	4680      	mov	r8, r0
   81610:	4691      	mov	r9, r2
   81612:	d52a      	bpl.n	8166a <__sprint_r.part.0+0x66>
   81614:	6893      	ldr	r3, [r2, #8]
   81616:	6812      	ldr	r2, [r2, #0]
   81618:	f102 0a08 	add.w	sl, r2, #8
   8161c:	b31b      	cbz	r3, 81666 <__sprint_r.part.0+0x62>
   8161e:	e91a 00a0 	ldmdb	sl, {r5, r7}
   81622:	08bf      	lsrs	r7, r7, #2
   81624:	d017      	beq.n	81656 <__sprint_r.part.0+0x52>
   81626:	3d04      	subs	r5, #4
   81628:	2400      	movs	r4, #0
   8162a:	e001      	b.n	81630 <__sprint_r.part.0+0x2c>
   8162c:	42a7      	cmp	r7, r4
   8162e:	d010      	beq.n	81652 <__sprint_r.part.0+0x4e>
   81630:	4640      	mov	r0, r8
   81632:	f855 1f04 	ldr.w	r1, [r5, #4]!
   81636:	4632      	mov	r2, r6
   81638:	f001 f850 	bl	826dc <_fputwc_r>
   8163c:	1c43      	adds	r3, r0, #1
   8163e:	f104 0401 	add.w	r4, r4, #1
   81642:	d1f3      	bne.n	8162c <__sprint_r.part.0+0x28>
   81644:	2300      	movs	r3, #0
   81646:	f8c9 3008 	str.w	r3, [r9, #8]
   8164a:	f8c9 3004 	str.w	r3, [r9, #4]
   8164e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   81652:	f8d9 3008 	ldr.w	r3, [r9, #8]
   81656:	eba3 0387 	sub.w	r3, r3, r7, lsl #2
   8165a:	f8c9 3008 	str.w	r3, [r9, #8]
   8165e:	f10a 0a08 	add.w	sl, sl, #8
   81662:	2b00      	cmp	r3, #0
   81664:	d1db      	bne.n	8161e <__sprint_r.part.0+0x1a>
   81666:	2000      	movs	r0, #0
   81668:	e7ec      	b.n	81644 <__sprint_r.part.0+0x40>
   8166a:	f001 f9b1 	bl	829d0 <__sfvwrite_r>
   8166e:	2300      	movs	r3, #0
   81670:	f8c9 3008 	str.w	r3, [r9, #8]
   81674:	f8c9 3004 	str.w	r3, [r9, #4]
   81678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0008167c <_vfiprintf_r>:
   8167c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81680:	b0b1      	sub	sp, #196	; 0xc4
   81682:	461c      	mov	r4, r3
   81684:	9102      	str	r1, [sp, #8]
   81686:	4690      	mov	r8, r2
   81688:	9308      	str	r3, [sp, #32]
   8168a:	9006      	str	r0, [sp, #24]
   8168c:	b118      	cbz	r0, 81696 <_vfiprintf_r+0x1a>
   8168e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   81690:	2b00      	cmp	r3, #0
   81692:	f000 80e8 	beq.w	81866 <_vfiprintf_r+0x1ea>
   81696:	9d02      	ldr	r5, [sp, #8]
   81698:	89ab      	ldrh	r3, [r5, #12]
   8169a:	b29a      	uxth	r2, r3
   8169c:	0490      	lsls	r0, r2, #18
   8169e:	d407      	bmi.n	816b0 <_vfiprintf_r+0x34>
   816a0:	6e6a      	ldr	r2, [r5, #100]	; 0x64
   816a2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   816a6:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
   816aa:	81ab      	strh	r3, [r5, #12]
   816ac:	b29a      	uxth	r2, r3
   816ae:	6669      	str	r1, [r5, #100]	; 0x64
   816b0:	0711      	lsls	r1, r2, #28
   816b2:	f140 80b7 	bpl.w	81824 <_vfiprintf_r+0x1a8>
   816b6:	f8dd b008 	ldr.w	fp, [sp, #8]
   816ba:	f8db 3010 	ldr.w	r3, [fp, #16]
   816be:	2b00      	cmp	r3, #0
   816c0:	f000 80b0 	beq.w	81824 <_vfiprintf_r+0x1a8>
   816c4:	f002 021a 	and.w	r2, r2, #26
   816c8:	2a0a      	cmp	r2, #10
   816ca:	f000 80b7 	beq.w	8183c <_vfiprintf_r+0x1c0>
   816ce:	2300      	movs	r3, #0
   816d0:	f10d 0980 	add.w	r9, sp, #128	; 0x80
   816d4:	930a      	str	r3, [sp, #40]	; 0x28
   816d6:	9315      	str	r3, [sp, #84]	; 0x54
   816d8:	9314      	str	r3, [sp, #80]	; 0x50
   816da:	9309      	str	r3, [sp, #36]	; 0x24
   816dc:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
   816e0:	464e      	mov	r6, r9
   816e2:	f898 3000 	ldrb.w	r3, [r8]
   816e6:	2b00      	cmp	r3, #0
   816e8:	f000 84c8 	beq.w	8207c <_vfiprintf_r+0xa00>
   816ec:	2b25      	cmp	r3, #37	; 0x25
   816ee:	f000 84c5 	beq.w	8207c <_vfiprintf_r+0xa00>
   816f2:	f108 0201 	add.w	r2, r8, #1
   816f6:	e001      	b.n	816fc <_vfiprintf_r+0x80>
   816f8:	2b25      	cmp	r3, #37	; 0x25
   816fa:	d004      	beq.n	81706 <_vfiprintf_r+0x8a>
   816fc:	7813      	ldrb	r3, [r2, #0]
   816fe:	4614      	mov	r4, r2
   81700:	3201      	adds	r2, #1
   81702:	2b00      	cmp	r3, #0
   81704:	d1f8      	bne.n	816f8 <_vfiprintf_r+0x7c>
   81706:	ebc8 0504 	rsb	r5, r8, r4
   8170a:	b195      	cbz	r5, 81732 <_vfiprintf_r+0xb6>
   8170c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   8170e:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81710:	3301      	adds	r3, #1
   81712:	442a      	add	r2, r5
   81714:	2b07      	cmp	r3, #7
   81716:	f8c6 8000 	str.w	r8, [r6]
   8171a:	6075      	str	r5, [r6, #4]
   8171c:	9215      	str	r2, [sp, #84]	; 0x54
   8171e:	9314      	str	r3, [sp, #80]	; 0x50
   81720:	dd7b      	ble.n	8181a <_vfiprintf_r+0x19e>
   81722:	2a00      	cmp	r2, #0
   81724:	f040 84d5 	bne.w	820d2 <_vfiprintf_r+0xa56>
   81728:	9809      	ldr	r0, [sp, #36]	; 0x24
   8172a:	9214      	str	r2, [sp, #80]	; 0x50
   8172c:	4428      	add	r0, r5
   8172e:	464e      	mov	r6, r9
   81730:	9009      	str	r0, [sp, #36]	; 0x24
   81732:	7823      	ldrb	r3, [r4, #0]
   81734:	2b00      	cmp	r3, #0
   81736:	f000 83ed 	beq.w	81f14 <_vfiprintf_r+0x898>
   8173a:	2100      	movs	r1, #0
   8173c:	f04f 0200 	mov.w	r2, #0
   81740:	f04f 3cff 	mov.w	ip, #4294967295
   81744:	7863      	ldrb	r3, [r4, #1]
   81746:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
   8174a:	9104      	str	r1, [sp, #16]
   8174c:	468a      	mov	sl, r1
   8174e:	f104 0801 	add.w	r8, r4, #1
   81752:	4608      	mov	r0, r1
   81754:	4665      	mov	r5, ip
   81756:	f108 0801 	add.w	r8, r8, #1
   8175a:	f1a3 0220 	sub.w	r2, r3, #32
   8175e:	2a58      	cmp	r2, #88	; 0x58
   81760:	f200 82d9 	bhi.w	81d16 <_vfiprintf_r+0x69a>
   81764:	e8df f012 	tbh	[pc, r2, lsl #1]
   81768:	02d702cb 	.word	0x02d702cb
   8176c:	02d202d7 	.word	0x02d202d7
   81770:	02d702d7 	.word	0x02d702d7
   81774:	02d702d7 	.word	0x02d702d7
   81778:	02d702d7 	.word	0x02d702d7
   8177c:	028f0282 	.word	0x028f0282
   81780:	008402d7 	.word	0x008402d7
   81784:	02d70293 	.word	0x02d70293
   81788:	0196012b 	.word	0x0196012b
   8178c:	01960196 	.word	0x01960196
   81790:	01960196 	.word	0x01960196
   81794:	01960196 	.word	0x01960196
   81798:	01960196 	.word	0x01960196
   8179c:	02d702d7 	.word	0x02d702d7
   817a0:	02d702d7 	.word	0x02d702d7
   817a4:	02d702d7 	.word	0x02d702d7
   817a8:	02d702d7 	.word	0x02d702d7
   817ac:	02d702d7 	.word	0x02d702d7
   817b0:	02d70130 	.word	0x02d70130
   817b4:	02d702d7 	.word	0x02d702d7
   817b8:	02d702d7 	.word	0x02d702d7
   817bc:	02d702d7 	.word	0x02d702d7
   817c0:	02d702d7 	.word	0x02d702d7
   817c4:	017b02d7 	.word	0x017b02d7
   817c8:	02d702d7 	.word	0x02d702d7
   817cc:	02d702d7 	.word	0x02d702d7
   817d0:	01a402d7 	.word	0x01a402d7
   817d4:	02d702d7 	.word	0x02d702d7
   817d8:	02d701bf 	.word	0x02d701bf
   817dc:	02d702d7 	.word	0x02d702d7
   817e0:	02d702d7 	.word	0x02d702d7
   817e4:	02d702d7 	.word	0x02d702d7
   817e8:	02d702d7 	.word	0x02d702d7
   817ec:	01e402d7 	.word	0x01e402d7
   817f0:	02d701fa 	.word	0x02d701fa
   817f4:	02d702d7 	.word	0x02d702d7
   817f8:	01fa0216 	.word	0x01fa0216
   817fc:	02d702d7 	.word	0x02d702d7
   81800:	02d7021b 	.word	0x02d7021b
   81804:	00890228 	.word	0x00890228
   81808:	027d0266 	.word	0x027d0266
   8180c:	023a02d7 	.word	0x023a02d7
   81810:	011902d7 	.word	0x011902d7
   81814:	02d702d7 	.word	0x02d702d7
   81818:	02af      	.short	0x02af
   8181a:	3608      	adds	r6, #8
   8181c:	9809      	ldr	r0, [sp, #36]	; 0x24
   8181e:	4428      	add	r0, r5
   81820:	9009      	str	r0, [sp, #36]	; 0x24
   81822:	e786      	b.n	81732 <_vfiprintf_r+0xb6>
   81824:	9806      	ldr	r0, [sp, #24]
   81826:	9902      	ldr	r1, [sp, #8]
   81828:	f000 fd90 	bl	8234c <__swsetup_r>
   8182c:	b9b0      	cbnz	r0, 8185c <_vfiprintf_r+0x1e0>
   8182e:	9d02      	ldr	r5, [sp, #8]
   81830:	89aa      	ldrh	r2, [r5, #12]
   81832:	f002 021a 	and.w	r2, r2, #26
   81836:	2a0a      	cmp	r2, #10
   81838:	f47f af49 	bne.w	816ce <_vfiprintf_r+0x52>
   8183c:	f8dd b008 	ldr.w	fp, [sp, #8]
   81840:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
   81844:	2b00      	cmp	r3, #0
   81846:	f6ff af42 	blt.w	816ce <_vfiprintf_r+0x52>
   8184a:	9806      	ldr	r0, [sp, #24]
   8184c:	4659      	mov	r1, fp
   8184e:	4642      	mov	r2, r8
   81850:	4623      	mov	r3, r4
   81852:	f000 fd3d 	bl	822d0 <__sbprintf>
   81856:	b031      	add	sp, #196	; 0xc4
   81858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8185c:	f04f 30ff 	mov.w	r0, #4294967295
   81860:	b031      	add	sp, #196	; 0xc4
   81862:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81866:	f000 fea3 	bl	825b0 <__sinit>
   8186a:	e714      	b.n	81696 <_vfiprintf_r+0x1a>
   8186c:	4240      	negs	r0, r0
   8186e:	9308      	str	r3, [sp, #32]
   81870:	f04a 0a04 	orr.w	sl, sl, #4
   81874:	f898 3000 	ldrb.w	r3, [r8]
   81878:	e76d      	b.n	81756 <_vfiprintf_r+0xda>
   8187a:	f01a 0320 	ands.w	r3, sl, #32
   8187e:	9004      	str	r0, [sp, #16]
   81880:	46ac      	mov	ip, r5
   81882:	f000 80f4 	beq.w	81a6e <_vfiprintf_r+0x3f2>
   81886:	f8dd b020 	ldr.w	fp, [sp, #32]
   8188a:	f10b 0307 	add.w	r3, fp, #7
   8188e:	f023 0307 	bic.w	r3, r3, #7
   81892:	f103 0408 	add.w	r4, r3, #8
   81896:	9408      	str	r4, [sp, #32]
   81898:	e9d3 4500 	ldrd	r4, r5, [r3]
   8189c:	2300      	movs	r3, #0
   8189e:	f04f 0000 	mov.w	r0, #0
   818a2:	2100      	movs	r1, #0
   818a4:	f88d 0047 	strb.w	r0, [sp, #71]	; 0x47
   818a8:	f8cd c014 	str.w	ip, [sp, #20]
   818ac:	9107      	str	r1, [sp, #28]
   818ae:	f1bc 0f00 	cmp.w	ip, #0
   818b2:	bfa8      	it	ge
   818b4:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
   818b8:	ea54 0205 	orrs.w	r2, r4, r5
   818bc:	f040 80ad 	bne.w	81a1a <_vfiprintf_r+0x39e>
   818c0:	f1bc 0f00 	cmp.w	ip, #0
   818c4:	f040 80a9 	bne.w	81a1a <_vfiprintf_r+0x39e>
   818c8:	2b00      	cmp	r3, #0
   818ca:	f040 83c0 	bne.w	8204e <_vfiprintf_r+0x9d2>
   818ce:	f01a 0f01 	tst.w	sl, #1
   818d2:	f000 83bc 	beq.w	8204e <_vfiprintf_r+0x9d2>
   818d6:	2330      	movs	r3, #48	; 0x30
   818d8:	af30      	add	r7, sp, #192	; 0xc0
   818da:	f807 3d41 	strb.w	r3, [r7, #-65]!
   818de:	ebc7 0409 	rsb	r4, r7, r9
   818e2:	9405      	str	r4, [sp, #20]
   818e4:	f8dd b014 	ldr.w	fp, [sp, #20]
   818e8:	9c07      	ldr	r4, [sp, #28]
   818ea:	45e3      	cmp	fp, ip
   818ec:	bfb8      	it	lt
   818ee:	46e3      	movlt	fp, ip
   818f0:	f8cd b00c 	str.w	fp, [sp, #12]
   818f4:	b11c      	cbz	r4, 818fe <_vfiprintf_r+0x282>
   818f6:	f10b 0b01 	add.w	fp, fp, #1
   818fa:	f8cd b00c 	str.w	fp, [sp, #12]
   818fe:	f01a 0502 	ands.w	r5, sl, #2
   81902:	9507      	str	r5, [sp, #28]
   81904:	d005      	beq.n	81912 <_vfiprintf_r+0x296>
   81906:	f8dd b00c 	ldr.w	fp, [sp, #12]
   8190a:	f10b 0b02 	add.w	fp, fp, #2
   8190e:	f8cd b00c 	str.w	fp, [sp, #12]
   81912:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
   81916:	930b      	str	r3, [sp, #44]	; 0x2c
   81918:	f040 821b 	bne.w	81d52 <_vfiprintf_r+0x6d6>
   8191c:	9d04      	ldr	r5, [sp, #16]
   8191e:	f8dd b00c 	ldr.w	fp, [sp, #12]
   81922:	ebcb 0405 	rsb	r4, fp, r5
   81926:	2c00      	cmp	r4, #0
   81928:	f340 8213 	ble.w	81d52 <_vfiprintf_r+0x6d6>
   8192c:	2c10      	cmp	r4, #16
   8192e:	f340 8489 	ble.w	82244 <_vfiprintf_r+0xbc8>
   81932:	4dbe      	ldr	r5, [pc, #760]	; (81c2c <_vfiprintf_r+0x5b0>)
   81934:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81936:	462b      	mov	r3, r5
   81938:	9814      	ldr	r0, [sp, #80]	; 0x50
   8193a:	4625      	mov	r5, r4
   8193c:	f04f 0b10 	mov.w	fp, #16
   81940:	4664      	mov	r4, ip
   81942:	46b4      	mov	ip, r6
   81944:	461e      	mov	r6, r3
   81946:	e006      	b.n	81956 <_vfiprintf_r+0x2da>
   81948:	1c83      	adds	r3, r0, #2
   8194a:	f10c 0c08 	add.w	ip, ip, #8
   8194e:	4608      	mov	r0, r1
   81950:	3d10      	subs	r5, #16
   81952:	2d10      	cmp	r5, #16
   81954:	dd11      	ble.n	8197a <_vfiprintf_r+0x2fe>
   81956:	1c41      	adds	r1, r0, #1
   81958:	3210      	adds	r2, #16
   8195a:	2907      	cmp	r1, #7
   8195c:	9215      	str	r2, [sp, #84]	; 0x54
   8195e:	e88c 0840 	stmia.w	ip, {r6, fp}
   81962:	9114      	str	r1, [sp, #80]	; 0x50
   81964:	ddf0      	ble.n	81948 <_vfiprintf_r+0x2cc>
   81966:	2a00      	cmp	r2, #0
   81968:	f040 81e6 	bne.w	81d38 <_vfiprintf_r+0x6bc>
   8196c:	3d10      	subs	r5, #16
   8196e:	2d10      	cmp	r5, #16
   81970:	f04f 0301 	mov.w	r3, #1
   81974:	4610      	mov	r0, r2
   81976:	46cc      	mov	ip, r9
   81978:	dced      	bgt.n	81956 <_vfiprintf_r+0x2da>
   8197a:	4631      	mov	r1, r6
   8197c:	4666      	mov	r6, ip
   8197e:	46a4      	mov	ip, r4
   81980:	462c      	mov	r4, r5
   81982:	460d      	mov	r5, r1
   81984:	4422      	add	r2, r4
   81986:	2b07      	cmp	r3, #7
   81988:	9215      	str	r2, [sp, #84]	; 0x54
   8198a:	6035      	str	r5, [r6, #0]
   8198c:	6074      	str	r4, [r6, #4]
   8198e:	9314      	str	r3, [sp, #80]	; 0x50
   81990:	f300 836d 	bgt.w	8206e <_vfiprintf_r+0x9f2>
   81994:	3608      	adds	r6, #8
   81996:	1c59      	adds	r1, r3, #1
   81998:	e1de      	b.n	81d58 <_vfiprintf_r+0x6dc>
   8199a:	f01a 0f20 	tst.w	sl, #32
   8199e:	9004      	str	r0, [sp, #16]
   819a0:	46ac      	mov	ip, r5
   819a2:	f000 808d 	beq.w	81ac0 <_vfiprintf_r+0x444>
   819a6:	9d08      	ldr	r5, [sp, #32]
   819a8:	1deb      	adds	r3, r5, #7
   819aa:	f023 0307 	bic.w	r3, r3, #7
   819ae:	f103 0b08 	add.w	fp, r3, #8
   819b2:	e9d3 4500 	ldrd	r4, r5, [r3]
   819b6:	f8cd b020 	str.w	fp, [sp, #32]
   819ba:	2301      	movs	r3, #1
   819bc:	e76f      	b.n	8189e <_vfiprintf_r+0x222>
   819be:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
   819c2:	f898 3000 	ldrb.w	r3, [r8]
   819c6:	e6c6      	b.n	81756 <_vfiprintf_r+0xda>
   819c8:	f04a 0a10 	orr.w	sl, sl, #16
   819cc:	f01a 0f20 	tst.w	sl, #32
   819d0:	9004      	str	r0, [sp, #16]
   819d2:	46ac      	mov	ip, r5
   819d4:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   819d8:	f000 80c8 	beq.w	81b6c <_vfiprintf_r+0x4f0>
   819dc:	9c08      	ldr	r4, [sp, #32]
   819de:	1de1      	adds	r1, r4, #7
   819e0:	f021 0107 	bic.w	r1, r1, #7
   819e4:	e9d1 2300 	ldrd	r2, r3, [r1]
   819e8:	3108      	adds	r1, #8
   819ea:	9108      	str	r1, [sp, #32]
   819ec:	4614      	mov	r4, r2
   819ee:	461d      	mov	r5, r3
   819f0:	2a00      	cmp	r2, #0
   819f2:	f173 0b00 	sbcs.w	fp, r3, #0
   819f6:	f2c0 83ce 	blt.w	82196 <_vfiprintf_r+0xb1a>
   819fa:	f1bc 0f00 	cmp.w	ip, #0
   819fe:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
   81a02:	bfa8      	it	ge
   81a04:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
   81a08:	ea54 0205 	orrs.w	r2, r4, r5
   81a0c:	9007      	str	r0, [sp, #28]
   81a0e:	f8cd c014 	str.w	ip, [sp, #20]
   81a12:	f04f 0301 	mov.w	r3, #1
   81a16:	f43f af53 	beq.w	818c0 <_vfiprintf_r+0x244>
   81a1a:	2b01      	cmp	r3, #1
   81a1c:	f000 8319 	beq.w	82052 <_vfiprintf_r+0x9d6>
   81a20:	2b02      	cmp	r3, #2
   81a22:	f10d 037f 	add.w	r3, sp, #127	; 0x7f
   81a26:	f040 824c 	bne.w	81ec2 <_vfiprintf_r+0x846>
   81a2a:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   81a2e:	4619      	mov	r1, r3
   81a30:	f004 000f 	and.w	r0, r4, #15
   81a34:	0922      	lsrs	r2, r4, #4
   81a36:	f81b 0000 	ldrb.w	r0, [fp, r0]
   81a3a:	ea42 7205 	orr.w	r2, r2, r5, lsl #28
   81a3e:	092b      	lsrs	r3, r5, #4
   81a40:	7008      	strb	r0, [r1, #0]
   81a42:	ea52 0003 	orrs.w	r0, r2, r3
   81a46:	460f      	mov	r7, r1
   81a48:	4614      	mov	r4, r2
   81a4a:	461d      	mov	r5, r3
   81a4c:	f101 31ff 	add.w	r1, r1, #4294967295
   81a50:	d1ee      	bne.n	81a30 <_vfiprintf_r+0x3b4>
   81a52:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   81a56:	ebc7 0309 	rsb	r3, r7, r9
   81a5a:	9305      	str	r3, [sp, #20]
   81a5c:	e742      	b.n	818e4 <_vfiprintf_r+0x268>
   81a5e:	f04a 0a10 	orr.w	sl, sl, #16
   81a62:	f01a 0320 	ands.w	r3, sl, #32
   81a66:	9004      	str	r0, [sp, #16]
   81a68:	46ac      	mov	ip, r5
   81a6a:	f47f af0c 	bne.w	81886 <_vfiprintf_r+0x20a>
   81a6e:	f01a 0210 	ands.w	r2, sl, #16
   81a72:	f040 8311 	bne.w	82098 <_vfiprintf_r+0xa1c>
   81a76:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
   81a7a:	f000 830d 	beq.w	82098 <_vfiprintf_r+0xa1c>
   81a7e:	f8dd b020 	ldr.w	fp, [sp, #32]
   81a82:	4613      	mov	r3, r2
   81a84:	f8bb 4000 	ldrh.w	r4, [fp]
   81a88:	f10b 0b04 	add.w	fp, fp, #4
   81a8c:	2500      	movs	r5, #0
   81a8e:	f8cd b020 	str.w	fp, [sp, #32]
   81a92:	e704      	b.n	8189e <_vfiprintf_r+0x222>
   81a94:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   81a98:	2000      	movs	r0, #0
   81a9a:	f818 3b01 	ldrb.w	r3, [r8], #1
   81a9e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   81aa2:	eb02 0040 	add.w	r0, r2, r0, lsl #1
   81aa6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   81aaa:	2a09      	cmp	r2, #9
   81aac:	d9f5      	bls.n	81a9a <_vfiprintf_r+0x41e>
   81aae:	e654      	b.n	8175a <_vfiprintf_r+0xde>
   81ab0:	f04a 0a10 	orr.w	sl, sl, #16
   81ab4:	f01a 0f20 	tst.w	sl, #32
   81ab8:	9004      	str	r0, [sp, #16]
   81aba:	46ac      	mov	ip, r5
   81abc:	f47f af73 	bne.w	819a6 <_vfiprintf_r+0x32a>
   81ac0:	f01a 0f10 	tst.w	sl, #16
   81ac4:	f040 82ef 	bne.w	820a6 <_vfiprintf_r+0xa2a>
   81ac8:	f01a 0f40 	tst.w	sl, #64	; 0x40
   81acc:	f000 82eb 	beq.w	820a6 <_vfiprintf_r+0xa2a>
   81ad0:	f8dd b020 	ldr.w	fp, [sp, #32]
   81ad4:	2500      	movs	r5, #0
   81ad6:	f8bb 4000 	ldrh.w	r4, [fp]
   81ada:	f10b 0b04 	add.w	fp, fp, #4
   81ade:	2301      	movs	r3, #1
   81ae0:	f8cd b020 	str.w	fp, [sp, #32]
   81ae4:	e6db      	b.n	8189e <_vfiprintf_r+0x222>
   81ae6:	46ac      	mov	ip, r5
   81ae8:	4d51      	ldr	r5, [pc, #324]	; (81c30 <_vfiprintf_r+0x5b4>)
   81aea:	f01a 0f20 	tst.w	sl, #32
   81aee:	9004      	str	r0, [sp, #16]
   81af0:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   81af4:	950a      	str	r5, [sp, #40]	; 0x28
   81af6:	f000 80f0 	beq.w	81cda <_vfiprintf_r+0x65e>
   81afa:	9d08      	ldr	r5, [sp, #32]
   81afc:	1dea      	adds	r2, r5, #7
   81afe:	f022 0207 	bic.w	r2, r2, #7
   81b02:	f102 0b08 	add.w	fp, r2, #8
   81b06:	f8cd b020 	str.w	fp, [sp, #32]
   81b0a:	e9d2 4500 	ldrd	r4, r5, [r2]
   81b0e:	f01a 0f01 	tst.w	sl, #1
   81b12:	f000 82aa 	beq.w	8206a <_vfiprintf_r+0x9ee>
   81b16:	ea54 0b05 	orrs.w	fp, r4, r5
   81b1a:	f000 82a6 	beq.w	8206a <_vfiprintf_r+0x9ee>
   81b1e:	2230      	movs	r2, #48	; 0x30
   81b20:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
   81b24:	f04a 0a02 	orr.w	sl, sl, #2
   81b28:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   81b2c:	2302      	movs	r3, #2
   81b2e:	e6b6      	b.n	8189e <_vfiprintf_r+0x222>
   81b30:	9b08      	ldr	r3, [sp, #32]
   81b32:	f8dd b020 	ldr.w	fp, [sp, #32]
   81b36:	681b      	ldr	r3, [r3, #0]
   81b38:	2401      	movs	r4, #1
   81b3a:	f04f 0500 	mov.w	r5, #0
   81b3e:	f10b 0b04 	add.w	fp, fp, #4
   81b42:	9004      	str	r0, [sp, #16]
   81b44:	9403      	str	r4, [sp, #12]
   81b46:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
   81b4a:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   81b4e:	f8cd b020 	str.w	fp, [sp, #32]
   81b52:	9405      	str	r4, [sp, #20]
   81b54:	af16      	add	r7, sp, #88	; 0x58
   81b56:	f04f 0c00 	mov.w	ip, #0
   81b5a:	e6d0      	b.n	818fe <_vfiprintf_r+0x282>
   81b5c:	f01a 0f20 	tst.w	sl, #32
   81b60:	9004      	str	r0, [sp, #16]
   81b62:	46ac      	mov	ip, r5
   81b64:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   81b68:	f47f af38 	bne.w	819dc <_vfiprintf_r+0x360>
   81b6c:	f01a 0f10 	tst.w	sl, #16
   81b70:	f040 82a7 	bne.w	820c2 <_vfiprintf_r+0xa46>
   81b74:	f01a 0f40 	tst.w	sl, #64	; 0x40
   81b78:	f000 82a3 	beq.w	820c2 <_vfiprintf_r+0xa46>
   81b7c:	f8dd b020 	ldr.w	fp, [sp, #32]
   81b80:	f9bb 4000 	ldrsh.w	r4, [fp]
   81b84:	f10b 0b04 	add.w	fp, fp, #4
   81b88:	17e5      	asrs	r5, r4, #31
   81b8a:	4622      	mov	r2, r4
   81b8c:	462b      	mov	r3, r5
   81b8e:	f8cd b020 	str.w	fp, [sp, #32]
   81b92:	e72d      	b.n	819f0 <_vfiprintf_r+0x374>
   81b94:	f04a 0a40 	orr.w	sl, sl, #64	; 0x40
   81b98:	f898 3000 	ldrb.w	r3, [r8]
   81b9c:	e5db      	b.n	81756 <_vfiprintf_r+0xda>
   81b9e:	f898 3000 	ldrb.w	r3, [r8]
   81ba2:	4642      	mov	r2, r8
   81ba4:	2b6c      	cmp	r3, #108	; 0x6c
   81ba6:	bf03      	ittte	eq
   81ba8:	f108 0801 	addeq.w	r8, r8, #1
   81bac:	f04a 0a20 	orreq.w	sl, sl, #32
   81bb0:	7853      	ldrbeq	r3, [r2, #1]
   81bb2:	f04a 0a10 	orrne.w	sl, sl, #16
   81bb6:	e5ce      	b.n	81756 <_vfiprintf_r+0xda>
   81bb8:	f01a 0f20 	tst.w	sl, #32
   81bbc:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   81bc0:	f000 82f7 	beq.w	821b2 <_vfiprintf_r+0xb36>
   81bc4:	9c08      	ldr	r4, [sp, #32]
   81bc6:	6821      	ldr	r1, [r4, #0]
   81bc8:	9c09      	ldr	r4, [sp, #36]	; 0x24
   81bca:	17e5      	asrs	r5, r4, #31
   81bcc:	462b      	mov	r3, r5
   81bce:	9d08      	ldr	r5, [sp, #32]
   81bd0:	4622      	mov	r2, r4
   81bd2:	3504      	adds	r5, #4
   81bd4:	9508      	str	r5, [sp, #32]
   81bd6:	e9c1 2300 	strd	r2, r3, [r1]
   81bda:	e582      	b.n	816e2 <_vfiprintf_r+0x66>
   81bdc:	9c08      	ldr	r4, [sp, #32]
   81bde:	46ac      	mov	ip, r5
   81be0:	6827      	ldr	r7, [r4, #0]
   81be2:	f04f 0500 	mov.w	r5, #0
   81be6:	9004      	str	r0, [sp, #16]
   81be8:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
   81bec:	3404      	adds	r4, #4
   81bee:	2f00      	cmp	r7, #0
   81bf0:	f000 8332 	beq.w	82258 <_vfiprintf_r+0xbdc>
   81bf4:	f1bc 0f00 	cmp.w	ip, #0
   81bf8:	4638      	mov	r0, r7
   81bfa:	f2c0 8307 	blt.w	8220c <_vfiprintf_r+0xb90>
   81bfe:	4662      	mov	r2, ip
   81c00:	2100      	movs	r1, #0
   81c02:	f8cd c004 	str.w	ip, [sp, #4]
   81c06:	f001 fbb1 	bl	8336c <memchr>
   81c0a:	f8dd c004 	ldr.w	ip, [sp, #4]
   81c0e:	2800      	cmp	r0, #0
   81c10:	f000 833a 	beq.w	82288 <_vfiprintf_r+0xc0c>
   81c14:	1bc0      	subs	r0, r0, r7
   81c16:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
   81c1a:	4560      	cmp	r0, ip
   81c1c:	bfa8      	it	ge
   81c1e:	4660      	movge	r0, ip
   81c20:	9005      	str	r0, [sp, #20]
   81c22:	9408      	str	r4, [sp, #32]
   81c24:	9507      	str	r5, [sp, #28]
   81c26:	f04f 0c00 	mov.w	ip, #0
   81c2a:	e65b      	b.n	818e4 <_vfiprintf_r+0x268>
   81c2c:	00084734 	.word	0x00084734
   81c30:	000846f4 	.word	0x000846f4
   81c34:	9b08      	ldr	r3, [sp, #32]
   81c36:	f8dd b020 	ldr.w	fp, [sp, #32]
   81c3a:	9004      	str	r0, [sp, #16]
   81c3c:	48b2      	ldr	r0, [pc, #712]	; (81f08 <_vfiprintf_r+0x88c>)
   81c3e:	681c      	ldr	r4, [r3, #0]
   81c40:	2230      	movs	r2, #48	; 0x30
   81c42:	2378      	movs	r3, #120	; 0x78
   81c44:	f10b 0b04 	add.w	fp, fp, #4
   81c48:	46ac      	mov	ip, r5
   81c4a:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
   81c4e:	f04a 0a02 	orr.w	sl, sl, #2
   81c52:	f8cd b020 	str.w	fp, [sp, #32]
   81c56:	2500      	movs	r5, #0
   81c58:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   81c5c:	900a      	str	r0, [sp, #40]	; 0x28
   81c5e:	2302      	movs	r3, #2
   81c60:	e61d      	b.n	8189e <_vfiprintf_r+0x222>
   81c62:	f04a 0a20 	orr.w	sl, sl, #32
   81c66:	f898 3000 	ldrb.w	r3, [r8]
   81c6a:	e574      	b.n	81756 <_vfiprintf_r+0xda>
   81c6c:	f8dd b020 	ldr.w	fp, [sp, #32]
   81c70:	f8db 0000 	ldr.w	r0, [fp]
   81c74:	f10b 0304 	add.w	r3, fp, #4
   81c78:	2800      	cmp	r0, #0
   81c7a:	f6ff adf7 	blt.w	8186c <_vfiprintf_r+0x1f0>
   81c7e:	9308      	str	r3, [sp, #32]
   81c80:	f898 3000 	ldrb.w	r3, [r8]
   81c84:	e567      	b.n	81756 <_vfiprintf_r+0xda>
   81c86:	f898 3000 	ldrb.w	r3, [r8]
   81c8a:	212b      	movs	r1, #43	; 0x2b
   81c8c:	e563      	b.n	81756 <_vfiprintf_r+0xda>
   81c8e:	f898 3000 	ldrb.w	r3, [r8]
   81c92:	f108 0401 	add.w	r4, r8, #1
   81c96:	2b2a      	cmp	r3, #42	; 0x2a
   81c98:	f000 8305 	beq.w	822a6 <_vfiprintf_r+0xc2a>
   81c9c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   81ca0:	2a09      	cmp	r2, #9
   81ca2:	bf98      	it	ls
   81ca4:	2500      	movls	r5, #0
   81ca6:	f200 82fa 	bhi.w	8229e <_vfiprintf_r+0xc22>
   81caa:	f814 3b01 	ldrb.w	r3, [r4], #1
   81cae:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   81cb2:	eb02 0545 	add.w	r5, r2, r5, lsl #1
   81cb6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   81cba:	2a09      	cmp	r2, #9
   81cbc:	d9f5      	bls.n	81caa <_vfiprintf_r+0x62e>
   81cbe:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
   81cc2:	46a0      	mov	r8, r4
   81cc4:	e549      	b.n	8175a <_vfiprintf_r+0xde>
   81cc6:	4c90      	ldr	r4, [pc, #576]	; (81f08 <_vfiprintf_r+0x88c>)
   81cc8:	f01a 0f20 	tst.w	sl, #32
   81ccc:	9004      	str	r0, [sp, #16]
   81cce:	46ac      	mov	ip, r5
   81cd0:	940a      	str	r4, [sp, #40]	; 0x28
   81cd2:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   81cd6:	f47f af10 	bne.w	81afa <_vfiprintf_r+0x47e>
   81cda:	f01a 0f10 	tst.w	sl, #16
   81cde:	f040 81ea 	bne.w	820b6 <_vfiprintf_r+0xa3a>
   81ce2:	f01a 0f40 	tst.w	sl, #64	; 0x40
   81ce6:	f000 81e6 	beq.w	820b6 <_vfiprintf_r+0xa3a>
   81cea:	f8dd b020 	ldr.w	fp, [sp, #32]
   81cee:	2500      	movs	r5, #0
   81cf0:	f8bb 4000 	ldrh.w	r4, [fp]
   81cf4:	f10b 0b04 	add.w	fp, fp, #4
   81cf8:	f8cd b020 	str.w	fp, [sp, #32]
   81cfc:	e707      	b.n	81b0e <_vfiprintf_r+0x492>
   81cfe:	f898 3000 	ldrb.w	r3, [r8]
   81d02:	2900      	cmp	r1, #0
   81d04:	f47f ad27 	bne.w	81756 <_vfiprintf_r+0xda>
   81d08:	2120      	movs	r1, #32
   81d0a:	e524      	b.n	81756 <_vfiprintf_r+0xda>
   81d0c:	f04a 0a01 	orr.w	sl, sl, #1
   81d10:	f898 3000 	ldrb.w	r3, [r8]
   81d14:	e51f      	b.n	81756 <_vfiprintf_r+0xda>
   81d16:	9004      	str	r0, [sp, #16]
   81d18:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   81d1c:	2b00      	cmp	r3, #0
   81d1e:	f000 80f9 	beq.w	81f14 <_vfiprintf_r+0x898>
   81d22:	2501      	movs	r5, #1
   81d24:	f04f 0b00 	mov.w	fp, #0
   81d28:	9503      	str	r5, [sp, #12]
   81d2a:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   81d2e:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
   81d32:	9505      	str	r5, [sp, #20]
   81d34:	af16      	add	r7, sp, #88	; 0x58
   81d36:	e70e      	b.n	81b56 <_vfiprintf_r+0x4da>
   81d38:	9806      	ldr	r0, [sp, #24]
   81d3a:	9902      	ldr	r1, [sp, #8]
   81d3c:	aa13      	add	r2, sp, #76	; 0x4c
   81d3e:	f7ff fc61 	bl	81604 <__sprint_r.part.0>
   81d42:	2800      	cmp	r0, #0
   81d44:	f040 80ed 	bne.w	81f22 <_vfiprintf_r+0x8a6>
   81d48:	9814      	ldr	r0, [sp, #80]	; 0x50
   81d4a:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81d4c:	1c43      	adds	r3, r0, #1
   81d4e:	46cc      	mov	ip, r9
   81d50:	e5fe      	b.n	81950 <_vfiprintf_r+0x2d4>
   81d52:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81d54:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81d56:	1c59      	adds	r1, r3, #1
   81d58:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
   81d5c:	b168      	cbz	r0, 81d7a <_vfiprintf_r+0x6fe>
   81d5e:	3201      	adds	r2, #1
   81d60:	f10d 0047 	add.w	r0, sp, #71	; 0x47
   81d64:	2301      	movs	r3, #1
   81d66:	2907      	cmp	r1, #7
   81d68:	9215      	str	r2, [sp, #84]	; 0x54
   81d6a:	9114      	str	r1, [sp, #80]	; 0x50
   81d6c:	e886 0009 	stmia.w	r6, {r0, r3}
   81d70:	f300 8160 	bgt.w	82034 <_vfiprintf_r+0x9b8>
   81d74:	460b      	mov	r3, r1
   81d76:	3608      	adds	r6, #8
   81d78:	3101      	adds	r1, #1
   81d7a:	9c07      	ldr	r4, [sp, #28]
   81d7c:	b164      	cbz	r4, 81d98 <_vfiprintf_r+0x71c>
   81d7e:	3202      	adds	r2, #2
   81d80:	a812      	add	r0, sp, #72	; 0x48
   81d82:	2302      	movs	r3, #2
   81d84:	2907      	cmp	r1, #7
   81d86:	9215      	str	r2, [sp, #84]	; 0x54
   81d88:	9114      	str	r1, [sp, #80]	; 0x50
   81d8a:	e886 0009 	stmia.w	r6, {r0, r3}
   81d8e:	f300 8157 	bgt.w	82040 <_vfiprintf_r+0x9c4>
   81d92:	460b      	mov	r3, r1
   81d94:	3608      	adds	r6, #8
   81d96:	3101      	adds	r1, #1
   81d98:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   81d9a:	2d80      	cmp	r5, #128	; 0x80
   81d9c:	f000 8101 	beq.w	81fa2 <_vfiprintf_r+0x926>
   81da0:	9d05      	ldr	r5, [sp, #20]
   81da2:	ebc5 040c 	rsb	r4, r5, ip
   81da6:	2c00      	cmp	r4, #0
   81da8:	dd2f      	ble.n	81e0a <_vfiprintf_r+0x78e>
   81daa:	2c10      	cmp	r4, #16
   81dac:	4d57      	ldr	r5, [pc, #348]	; (81f0c <_vfiprintf_r+0x890>)
   81dae:	dd22      	ble.n	81df6 <_vfiprintf_r+0x77a>
   81db0:	4630      	mov	r0, r6
   81db2:	f04f 0b10 	mov.w	fp, #16
   81db6:	462e      	mov	r6, r5
   81db8:	4625      	mov	r5, r4
   81dba:	9c06      	ldr	r4, [sp, #24]
   81dbc:	e006      	b.n	81dcc <_vfiprintf_r+0x750>
   81dbe:	f103 0c02 	add.w	ip, r3, #2
   81dc2:	3008      	adds	r0, #8
   81dc4:	460b      	mov	r3, r1
   81dc6:	3d10      	subs	r5, #16
   81dc8:	2d10      	cmp	r5, #16
   81dca:	dd10      	ble.n	81dee <_vfiprintf_r+0x772>
   81dcc:	1c59      	adds	r1, r3, #1
   81dce:	3210      	adds	r2, #16
   81dd0:	2907      	cmp	r1, #7
   81dd2:	9215      	str	r2, [sp, #84]	; 0x54
   81dd4:	e880 0840 	stmia.w	r0, {r6, fp}
   81dd8:	9114      	str	r1, [sp, #80]	; 0x50
   81dda:	ddf0      	ble.n	81dbe <_vfiprintf_r+0x742>
   81ddc:	2a00      	cmp	r2, #0
   81dde:	d163      	bne.n	81ea8 <_vfiprintf_r+0x82c>
   81de0:	3d10      	subs	r5, #16
   81de2:	2d10      	cmp	r5, #16
   81de4:	f04f 0c01 	mov.w	ip, #1
   81de8:	4613      	mov	r3, r2
   81dea:	4648      	mov	r0, r9
   81dec:	dcee      	bgt.n	81dcc <_vfiprintf_r+0x750>
   81dee:	462c      	mov	r4, r5
   81df0:	4661      	mov	r1, ip
   81df2:	4635      	mov	r5, r6
   81df4:	4606      	mov	r6, r0
   81df6:	4422      	add	r2, r4
   81df8:	2907      	cmp	r1, #7
   81dfa:	9215      	str	r2, [sp, #84]	; 0x54
   81dfc:	6035      	str	r5, [r6, #0]
   81dfe:	6074      	str	r4, [r6, #4]
   81e00:	9114      	str	r1, [sp, #80]	; 0x50
   81e02:	f300 80c1 	bgt.w	81f88 <_vfiprintf_r+0x90c>
   81e06:	3608      	adds	r6, #8
   81e08:	3101      	adds	r1, #1
   81e0a:	9d05      	ldr	r5, [sp, #20]
   81e0c:	2907      	cmp	r1, #7
   81e0e:	442a      	add	r2, r5
   81e10:	9215      	str	r2, [sp, #84]	; 0x54
   81e12:	6037      	str	r7, [r6, #0]
   81e14:	6075      	str	r5, [r6, #4]
   81e16:	9114      	str	r1, [sp, #80]	; 0x50
   81e18:	f340 80c1 	ble.w	81f9e <_vfiprintf_r+0x922>
   81e1c:	2a00      	cmp	r2, #0
   81e1e:	f040 8130 	bne.w	82082 <_vfiprintf_r+0xa06>
   81e22:	9214      	str	r2, [sp, #80]	; 0x50
   81e24:	464e      	mov	r6, r9
   81e26:	f01a 0f04 	tst.w	sl, #4
   81e2a:	f000 808b 	beq.w	81f44 <_vfiprintf_r+0x8c8>
   81e2e:	9d04      	ldr	r5, [sp, #16]
   81e30:	f8dd b00c 	ldr.w	fp, [sp, #12]
   81e34:	ebcb 0405 	rsb	r4, fp, r5
   81e38:	2c00      	cmp	r4, #0
   81e3a:	f340 8083 	ble.w	81f44 <_vfiprintf_r+0x8c8>
   81e3e:	2c10      	cmp	r4, #16
   81e40:	f340 821e 	ble.w	82280 <_vfiprintf_r+0xc04>
   81e44:	9914      	ldr	r1, [sp, #80]	; 0x50
   81e46:	4d32      	ldr	r5, [pc, #200]	; (81f10 <_vfiprintf_r+0x894>)
   81e48:	2710      	movs	r7, #16
   81e4a:	f8dd a018 	ldr.w	sl, [sp, #24]
   81e4e:	f8dd b008 	ldr.w	fp, [sp, #8]
   81e52:	e005      	b.n	81e60 <_vfiprintf_r+0x7e4>
   81e54:	1c88      	adds	r0, r1, #2
   81e56:	3608      	adds	r6, #8
   81e58:	4619      	mov	r1, r3
   81e5a:	3c10      	subs	r4, #16
   81e5c:	2c10      	cmp	r4, #16
   81e5e:	dd10      	ble.n	81e82 <_vfiprintf_r+0x806>
   81e60:	1c4b      	adds	r3, r1, #1
   81e62:	3210      	adds	r2, #16
   81e64:	2b07      	cmp	r3, #7
   81e66:	9215      	str	r2, [sp, #84]	; 0x54
   81e68:	e886 00a0 	stmia.w	r6, {r5, r7}
   81e6c:	9314      	str	r3, [sp, #80]	; 0x50
   81e6e:	ddf1      	ble.n	81e54 <_vfiprintf_r+0x7d8>
   81e70:	2a00      	cmp	r2, #0
   81e72:	d17d      	bne.n	81f70 <_vfiprintf_r+0x8f4>
   81e74:	3c10      	subs	r4, #16
   81e76:	2c10      	cmp	r4, #16
   81e78:	f04f 0001 	mov.w	r0, #1
   81e7c:	4611      	mov	r1, r2
   81e7e:	464e      	mov	r6, r9
   81e80:	dcee      	bgt.n	81e60 <_vfiprintf_r+0x7e4>
   81e82:	4422      	add	r2, r4
   81e84:	2807      	cmp	r0, #7
   81e86:	9215      	str	r2, [sp, #84]	; 0x54
   81e88:	6035      	str	r5, [r6, #0]
   81e8a:	6074      	str	r4, [r6, #4]
   81e8c:	9014      	str	r0, [sp, #80]	; 0x50
   81e8e:	dd59      	ble.n	81f44 <_vfiprintf_r+0x8c8>
   81e90:	2a00      	cmp	r2, #0
   81e92:	d14f      	bne.n	81f34 <_vfiprintf_r+0x8b8>
   81e94:	9c09      	ldr	r4, [sp, #36]	; 0x24
   81e96:	f8dd b00c 	ldr.w	fp, [sp, #12]
   81e9a:	9d04      	ldr	r5, [sp, #16]
   81e9c:	45ab      	cmp	fp, r5
   81e9e:	bfac      	ite	ge
   81ea0:	445c      	addge	r4, fp
   81ea2:	1964      	addlt	r4, r4, r5
   81ea4:	9409      	str	r4, [sp, #36]	; 0x24
   81ea6:	e05e      	b.n	81f66 <_vfiprintf_r+0x8ea>
   81ea8:	4620      	mov	r0, r4
   81eaa:	9902      	ldr	r1, [sp, #8]
   81eac:	aa13      	add	r2, sp, #76	; 0x4c
   81eae:	f7ff fba9 	bl	81604 <__sprint_r.part.0>
   81eb2:	2800      	cmp	r0, #0
   81eb4:	d135      	bne.n	81f22 <_vfiprintf_r+0x8a6>
   81eb6:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81eb8:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81eba:	f103 0c01 	add.w	ip, r3, #1
   81ebe:	4648      	mov	r0, r9
   81ec0:	e781      	b.n	81dc6 <_vfiprintf_r+0x74a>
   81ec2:	08e0      	lsrs	r0, r4, #3
   81ec4:	ea40 7045 	orr.w	r0, r0, r5, lsl #29
   81ec8:	f004 0207 	and.w	r2, r4, #7
   81ecc:	08e9      	lsrs	r1, r5, #3
   81ece:	3230      	adds	r2, #48	; 0x30
   81ed0:	ea50 0b01 	orrs.w	fp, r0, r1
   81ed4:	461f      	mov	r7, r3
   81ed6:	701a      	strb	r2, [r3, #0]
   81ed8:	4604      	mov	r4, r0
   81eda:	460d      	mov	r5, r1
   81edc:	f103 33ff 	add.w	r3, r3, #4294967295
   81ee0:	d1ef      	bne.n	81ec2 <_vfiprintf_r+0x846>
   81ee2:	f01a 0f01 	tst.w	sl, #1
   81ee6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   81eea:	4639      	mov	r1, r7
   81eec:	f000 80b9 	beq.w	82062 <_vfiprintf_r+0x9e6>
   81ef0:	2a30      	cmp	r2, #48	; 0x30
   81ef2:	f43f acf4 	beq.w	818de <_vfiprintf_r+0x262>
   81ef6:	461f      	mov	r7, r3
   81ef8:	ebc7 0509 	rsb	r5, r7, r9
   81efc:	2330      	movs	r3, #48	; 0x30
   81efe:	9505      	str	r5, [sp, #20]
   81f00:	f801 3c01 	strb.w	r3, [r1, #-1]
   81f04:	e4ee      	b.n	818e4 <_vfiprintf_r+0x268>
   81f06:	bf00      	nop
   81f08:	00084708 	.word	0x00084708
   81f0c:	00084724 	.word	0x00084724
   81f10:	00084734 	.word	0x00084734
   81f14:	9b15      	ldr	r3, [sp, #84]	; 0x54
   81f16:	b123      	cbz	r3, 81f22 <_vfiprintf_r+0x8a6>
   81f18:	9806      	ldr	r0, [sp, #24]
   81f1a:	9902      	ldr	r1, [sp, #8]
   81f1c:	aa13      	add	r2, sp, #76	; 0x4c
   81f1e:	f7ff fb71 	bl	81604 <__sprint_r.part.0>
   81f22:	9c02      	ldr	r4, [sp, #8]
   81f24:	89a3      	ldrh	r3, [r4, #12]
   81f26:	065b      	lsls	r3, r3, #25
   81f28:	f53f ac98 	bmi.w	8185c <_vfiprintf_r+0x1e0>
   81f2c:	9809      	ldr	r0, [sp, #36]	; 0x24
   81f2e:	b031      	add	sp, #196	; 0xc4
   81f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81f34:	9806      	ldr	r0, [sp, #24]
   81f36:	9902      	ldr	r1, [sp, #8]
   81f38:	aa13      	add	r2, sp, #76	; 0x4c
   81f3a:	f7ff fb63 	bl	81604 <__sprint_r.part.0>
   81f3e:	2800      	cmp	r0, #0
   81f40:	d1ef      	bne.n	81f22 <_vfiprintf_r+0x8a6>
   81f42:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81f44:	9c09      	ldr	r4, [sp, #36]	; 0x24
   81f46:	f8dd b00c 	ldr.w	fp, [sp, #12]
   81f4a:	9d04      	ldr	r5, [sp, #16]
   81f4c:	45ab      	cmp	fp, r5
   81f4e:	bfac      	ite	ge
   81f50:	445c      	addge	r4, fp
   81f52:	1964      	addlt	r4, r4, r5
   81f54:	9409      	str	r4, [sp, #36]	; 0x24
   81f56:	b132      	cbz	r2, 81f66 <_vfiprintf_r+0x8ea>
   81f58:	9806      	ldr	r0, [sp, #24]
   81f5a:	9902      	ldr	r1, [sp, #8]
   81f5c:	aa13      	add	r2, sp, #76	; 0x4c
   81f5e:	f7ff fb51 	bl	81604 <__sprint_r.part.0>
   81f62:	2800      	cmp	r0, #0
   81f64:	d1dd      	bne.n	81f22 <_vfiprintf_r+0x8a6>
   81f66:	2000      	movs	r0, #0
   81f68:	9014      	str	r0, [sp, #80]	; 0x50
   81f6a:	464e      	mov	r6, r9
   81f6c:	f7ff bbb9 	b.w	816e2 <_vfiprintf_r+0x66>
   81f70:	4650      	mov	r0, sl
   81f72:	4659      	mov	r1, fp
   81f74:	aa13      	add	r2, sp, #76	; 0x4c
   81f76:	f7ff fb45 	bl	81604 <__sprint_r.part.0>
   81f7a:	2800      	cmp	r0, #0
   81f7c:	d1d1      	bne.n	81f22 <_vfiprintf_r+0x8a6>
   81f7e:	9914      	ldr	r1, [sp, #80]	; 0x50
   81f80:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81f82:	1c48      	adds	r0, r1, #1
   81f84:	464e      	mov	r6, r9
   81f86:	e768      	b.n	81e5a <_vfiprintf_r+0x7de>
   81f88:	2a00      	cmp	r2, #0
   81f8a:	f040 80f7 	bne.w	8217c <_vfiprintf_r+0xb00>
   81f8e:	9c05      	ldr	r4, [sp, #20]
   81f90:	2301      	movs	r3, #1
   81f92:	9720      	str	r7, [sp, #128]	; 0x80
   81f94:	9421      	str	r4, [sp, #132]	; 0x84
   81f96:	9415      	str	r4, [sp, #84]	; 0x54
   81f98:	4622      	mov	r2, r4
   81f9a:	9314      	str	r3, [sp, #80]	; 0x50
   81f9c:	464e      	mov	r6, r9
   81f9e:	3608      	adds	r6, #8
   81fa0:	e741      	b.n	81e26 <_vfiprintf_r+0x7aa>
   81fa2:	9d04      	ldr	r5, [sp, #16]
   81fa4:	f8dd b00c 	ldr.w	fp, [sp, #12]
   81fa8:	ebcb 0405 	rsb	r4, fp, r5
   81fac:	2c00      	cmp	r4, #0
   81fae:	f77f aef7 	ble.w	81da0 <_vfiprintf_r+0x724>
   81fb2:	2c10      	cmp	r4, #16
   81fb4:	4da6      	ldr	r5, [pc, #664]	; (82250 <_vfiprintf_r+0xbd4>)
   81fb6:	f340 8170 	ble.w	8229a <_vfiprintf_r+0xc1e>
   81fba:	4629      	mov	r1, r5
   81fbc:	f04f 0b10 	mov.w	fp, #16
   81fc0:	4625      	mov	r5, r4
   81fc2:	4664      	mov	r4, ip
   81fc4:	46b4      	mov	ip, r6
   81fc6:	460e      	mov	r6, r1
   81fc8:	e006      	b.n	81fd8 <_vfiprintf_r+0x95c>
   81fca:	1c98      	adds	r0, r3, #2
   81fcc:	f10c 0c08 	add.w	ip, ip, #8
   81fd0:	460b      	mov	r3, r1
   81fd2:	3d10      	subs	r5, #16
   81fd4:	2d10      	cmp	r5, #16
   81fd6:	dd0f      	ble.n	81ff8 <_vfiprintf_r+0x97c>
   81fd8:	1c59      	adds	r1, r3, #1
   81fda:	3210      	adds	r2, #16
   81fdc:	2907      	cmp	r1, #7
   81fde:	9215      	str	r2, [sp, #84]	; 0x54
   81fe0:	e88c 0840 	stmia.w	ip, {r6, fp}
   81fe4:	9114      	str	r1, [sp, #80]	; 0x50
   81fe6:	ddf0      	ble.n	81fca <_vfiprintf_r+0x94e>
   81fe8:	b9ba      	cbnz	r2, 8201a <_vfiprintf_r+0x99e>
   81fea:	3d10      	subs	r5, #16
   81fec:	2d10      	cmp	r5, #16
   81fee:	f04f 0001 	mov.w	r0, #1
   81ff2:	4613      	mov	r3, r2
   81ff4:	46cc      	mov	ip, r9
   81ff6:	dcef      	bgt.n	81fd8 <_vfiprintf_r+0x95c>
   81ff8:	4633      	mov	r3, r6
   81ffa:	4666      	mov	r6, ip
   81ffc:	46a4      	mov	ip, r4
   81ffe:	462c      	mov	r4, r5
   82000:	461d      	mov	r5, r3
   82002:	4422      	add	r2, r4
   82004:	2807      	cmp	r0, #7
   82006:	9215      	str	r2, [sp, #84]	; 0x54
   82008:	6035      	str	r5, [r6, #0]
   8200a:	6074      	str	r4, [r6, #4]
   8200c:	9014      	str	r0, [sp, #80]	; 0x50
   8200e:	f300 80af 	bgt.w	82170 <_vfiprintf_r+0xaf4>
   82012:	3608      	adds	r6, #8
   82014:	1c41      	adds	r1, r0, #1
   82016:	4603      	mov	r3, r0
   82018:	e6c2      	b.n	81da0 <_vfiprintf_r+0x724>
   8201a:	9806      	ldr	r0, [sp, #24]
   8201c:	9902      	ldr	r1, [sp, #8]
   8201e:	aa13      	add	r2, sp, #76	; 0x4c
   82020:	f7ff faf0 	bl	81604 <__sprint_r.part.0>
   82024:	2800      	cmp	r0, #0
   82026:	f47f af7c 	bne.w	81f22 <_vfiprintf_r+0x8a6>
   8202a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   8202c:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8202e:	1c58      	adds	r0, r3, #1
   82030:	46cc      	mov	ip, r9
   82032:	e7ce      	b.n	81fd2 <_vfiprintf_r+0x956>
   82034:	2a00      	cmp	r2, #0
   82036:	d179      	bne.n	8212c <_vfiprintf_r+0xab0>
   82038:	4619      	mov	r1, r3
   8203a:	464e      	mov	r6, r9
   8203c:	4613      	mov	r3, r2
   8203e:	e69c      	b.n	81d7a <_vfiprintf_r+0x6fe>
   82040:	2a00      	cmp	r2, #0
   82042:	f040 8084 	bne.w	8214e <_vfiprintf_r+0xad2>
   82046:	2101      	movs	r1, #1
   82048:	4613      	mov	r3, r2
   8204a:	464e      	mov	r6, r9
   8204c:	e6a4      	b.n	81d98 <_vfiprintf_r+0x71c>
   8204e:	464f      	mov	r7, r9
   82050:	e448      	b.n	818e4 <_vfiprintf_r+0x268>
   82052:	2d00      	cmp	r5, #0
   82054:	bf08      	it	eq
   82056:	2c0a      	cmpeq	r4, #10
   82058:	d246      	bcs.n	820e8 <_vfiprintf_r+0xa6c>
   8205a:	3430      	adds	r4, #48	; 0x30
   8205c:	af30      	add	r7, sp, #192	; 0xc0
   8205e:	f807 4d41 	strb.w	r4, [r7, #-65]!
   82062:	ebc7 0309 	rsb	r3, r7, r9
   82066:	9305      	str	r3, [sp, #20]
   82068:	e43c      	b.n	818e4 <_vfiprintf_r+0x268>
   8206a:	2302      	movs	r3, #2
   8206c:	e417      	b.n	8189e <_vfiprintf_r+0x222>
   8206e:	2a00      	cmp	r2, #0
   82070:	f040 80af 	bne.w	821d2 <_vfiprintf_r+0xb56>
   82074:	4613      	mov	r3, r2
   82076:	2101      	movs	r1, #1
   82078:	464e      	mov	r6, r9
   8207a:	e66d      	b.n	81d58 <_vfiprintf_r+0x6dc>
   8207c:	4644      	mov	r4, r8
   8207e:	f7ff bb58 	b.w	81732 <_vfiprintf_r+0xb6>
   82082:	9806      	ldr	r0, [sp, #24]
   82084:	9902      	ldr	r1, [sp, #8]
   82086:	aa13      	add	r2, sp, #76	; 0x4c
   82088:	f7ff fabc 	bl	81604 <__sprint_r.part.0>
   8208c:	2800      	cmp	r0, #0
   8208e:	f47f af48 	bne.w	81f22 <_vfiprintf_r+0x8a6>
   82092:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82094:	464e      	mov	r6, r9
   82096:	e6c6      	b.n	81e26 <_vfiprintf_r+0x7aa>
   82098:	9d08      	ldr	r5, [sp, #32]
   8209a:	682c      	ldr	r4, [r5, #0]
   8209c:	3504      	adds	r5, #4
   8209e:	9508      	str	r5, [sp, #32]
   820a0:	2500      	movs	r5, #0
   820a2:	f7ff bbfc 	b.w	8189e <_vfiprintf_r+0x222>
   820a6:	9d08      	ldr	r5, [sp, #32]
   820a8:	2301      	movs	r3, #1
   820aa:	682c      	ldr	r4, [r5, #0]
   820ac:	3504      	adds	r5, #4
   820ae:	9508      	str	r5, [sp, #32]
   820b0:	2500      	movs	r5, #0
   820b2:	f7ff bbf4 	b.w	8189e <_vfiprintf_r+0x222>
   820b6:	9d08      	ldr	r5, [sp, #32]
   820b8:	682c      	ldr	r4, [r5, #0]
   820ba:	3504      	adds	r5, #4
   820bc:	9508      	str	r5, [sp, #32]
   820be:	2500      	movs	r5, #0
   820c0:	e525      	b.n	81b0e <_vfiprintf_r+0x492>
   820c2:	9d08      	ldr	r5, [sp, #32]
   820c4:	682c      	ldr	r4, [r5, #0]
   820c6:	3504      	adds	r5, #4
   820c8:	9508      	str	r5, [sp, #32]
   820ca:	17e5      	asrs	r5, r4, #31
   820cc:	4622      	mov	r2, r4
   820ce:	462b      	mov	r3, r5
   820d0:	e48e      	b.n	819f0 <_vfiprintf_r+0x374>
   820d2:	9806      	ldr	r0, [sp, #24]
   820d4:	9902      	ldr	r1, [sp, #8]
   820d6:	aa13      	add	r2, sp, #76	; 0x4c
   820d8:	f7ff fa94 	bl	81604 <__sprint_r.part.0>
   820dc:	2800      	cmp	r0, #0
   820de:	f47f af20 	bne.w	81f22 <_vfiprintf_r+0x8a6>
   820e2:	464e      	mov	r6, r9
   820e4:	f7ff bb9a 	b.w	8181c <_vfiprintf_r+0x1a0>
   820e8:	f10d 0b7f 	add.w	fp, sp, #127	; 0x7f
   820ec:	9603      	str	r6, [sp, #12]
   820ee:	465e      	mov	r6, fp
   820f0:	46e3      	mov	fp, ip
   820f2:	4620      	mov	r0, r4
   820f4:	4629      	mov	r1, r5
   820f6:	220a      	movs	r2, #10
   820f8:	2300      	movs	r3, #0
   820fa:	f001 fe2f 	bl	83d5c <__aeabi_uldivmod>
   820fe:	3230      	adds	r2, #48	; 0x30
   82100:	7032      	strb	r2, [r6, #0]
   82102:	4620      	mov	r0, r4
   82104:	4629      	mov	r1, r5
   82106:	220a      	movs	r2, #10
   82108:	2300      	movs	r3, #0
   8210a:	f001 fe27 	bl	83d5c <__aeabi_uldivmod>
   8210e:	4604      	mov	r4, r0
   82110:	460d      	mov	r5, r1
   82112:	ea54 0005 	orrs.w	r0, r4, r5
   82116:	4637      	mov	r7, r6
   82118:	f106 36ff 	add.w	r6, r6, #4294967295
   8211c:	d1e9      	bne.n	820f2 <_vfiprintf_r+0xa76>
   8211e:	ebc7 0309 	rsb	r3, r7, r9
   82122:	46dc      	mov	ip, fp
   82124:	9e03      	ldr	r6, [sp, #12]
   82126:	9305      	str	r3, [sp, #20]
   82128:	f7ff bbdc 	b.w	818e4 <_vfiprintf_r+0x268>
   8212c:	9806      	ldr	r0, [sp, #24]
   8212e:	9902      	ldr	r1, [sp, #8]
   82130:	aa13      	add	r2, sp, #76	; 0x4c
   82132:	f8cd c004 	str.w	ip, [sp, #4]
   82136:	f7ff fa65 	bl	81604 <__sprint_r.part.0>
   8213a:	f8dd c004 	ldr.w	ip, [sp, #4]
   8213e:	2800      	cmp	r0, #0
   82140:	f47f aeef 	bne.w	81f22 <_vfiprintf_r+0x8a6>
   82144:	9b14      	ldr	r3, [sp, #80]	; 0x50
   82146:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82148:	1c59      	adds	r1, r3, #1
   8214a:	464e      	mov	r6, r9
   8214c:	e615      	b.n	81d7a <_vfiprintf_r+0x6fe>
   8214e:	9806      	ldr	r0, [sp, #24]
   82150:	9902      	ldr	r1, [sp, #8]
   82152:	aa13      	add	r2, sp, #76	; 0x4c
   82154:	f8cd c004 	str.w	ip, [sp, #4]
   82158:	f7ff fa54 	bl	81604 <__sprint_r.part.0>
   8215c:	f8dd c004 	ldr.w	ip, [sp, #4]
   82160:	2800      	cmp	r0, #0
   82162:	f47f aede 	bne.w	81f22 <_vfiprintf_r+0x8a6>
   82166:	9b14      	ldr	r3, [sp, #80]	; 0x50
   82168:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8216a:	1c59      	adds	r1, r3, #1
   8216c:	464e      	mov	r6, r9
   8216e:	e613      	b.n	81d98 <_vfiprintf_r+0x71c>
   82170:	2a00      	cmp	r2, #0
   82172:	d156      	bne.n	82222 <_vfiprintf_r+0xba6>
   82174:	2101      	movs	r1, #1
   82176:	4613      	mov	r3, r2
   82178:	464e      	mov	r6, r9
   8217a:	e611      	b.n	81da0 <_vfiprintf_r+0x724>
   8217c:	9806      	ldr	r0, [sp, #24]
   8217e:	9902      	ldr	r1, [sp, #8]
   82180:	aa13      	add	r2, sp, #76	; 0x4c
   82182:	f7ff fa3f 	bl	81604 <__sprint_r.part.0>
   82186:	2800      	cmp	r0, #0
   82188:	f47f aecb 	bne.w	81f22 <_vfiprintf_r+0x8a6>
   8218c:	9914      	ldr	r1, [sp, #80]	; 0x50
   8218e:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82190:	3101      	adds	r1, #1
   82192:	464e      	mov	r6, r9
   82194:	e639      	b.n	81e0a <_vfiprintf_r+0x78e>
   82196:	f04f 0b2d 	mov.w	fp, #45	; 0x2d
   8219a:	4264      	negs	r4, r4
   8219c:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   821a0:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
   821a4:	f8cd b01c 	str.w	fp, [sp, #28]
   821a8:	f8cd c014 	str.w	ip, [sp, #20]
   821ac:	2301      	movs	r3, #1
   821ae:	f7ff bb7e 	b.w	818ae <_vfiprintf_r+0x232>
   821b2:	f01a 0f10 	tst.w	sl, #16
   821b6:	d11d      	bne.n	821f4 <_vfiprintf_r+0xb78>
   821b8:	f01a 0f40 	tst.w	sl, #64	; 0x40
   821bc:	d058      	beq.n	82270 <_vfiprintf_r+0xbf4>
   821be:	9d08      	ldr	r5, [sp, #32]
   821c0:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
   821c4:	682b      	ldr	r3, [r5, #0]
   821c6:	3504      	adds	r5, #4
   821c8:	9508      	str	r5, [sp, #32]
   821ca:	f8a3 b000 	strh.w	fp, [r3]
   821ce:	f7ff ba88 	b.w	816e2 <_vfiprintf_r+0x66>
   821d2:	9806      	ldr	r0, [sp, #24]
   821d4:	9902      	ldr	r1, [sp, #8]
   821d6:	aa13      	add	r2, sp, #76	; 0x4c
   821d8:	f8cd c004 	str.w	ip, [sp, #4]
   821dc:	f7ff fa12 	bl	81604 <__sprint_r.part.0>
   821e0:	f8dd c004 	ldr.w	ip, [sp, #4]
   821e4:	2800      	cmp	r0, #0
   821e6:	f47f ae9c 	bne.w	81f22 <_vfiprintf_r+0x8a6>
   821ea:	9b14      	ldr	r3, [sp, #80]	; 0x50
   821ec:	9a15      	ldr	r2, [sp, #84]	; 0x54
   821ee:	1c59      	adds	r1, r3, #1
   821f0:	464e      	mov	r6, r9
   821f2:	e5b1      	b.n	81d58 <_vfiprintf_r+0x6dc>
   821f4:	f8dd b020 	ldr.w	fp, [sp, #32]
   821f8:	9c09      	ldr	r4, [sp, #36]	; 0x24
   821fa:	f8db 3000 	ldr.w	r3, [fp]
   821fe:	f10b 0b04 	add.w	fp, fp, #4
   82202:	f8cd b020 	str.w	fp, [sp, #32]
   82206:	601c      	str	r4, [r3, #0]
   82208:	f7ff ba6b 	b.w	816e2 <_vfiprintf_r+0x66>
   8220c:	9408      	str	r4, [sp, #32]
   8220e:	f7ff f9c9 	bl	815a4 <strlen>
   82212:	f89d 4047 	ldrb.w	r4, [sp, #71]	; 0x47
   82216:	9005      	str	r0, [sp, #20]
   82218:	9407      	str	r4, [sp, #28]
   8221a:	f04f 0c00 	mov.w	ip, #0
   8221e:	f7ff bb61 	b.w	818e4 <_vfiprintf_r+0x268>
   82222:	9806      	ldr	r0, [sp, #24]
   82224:	9902      	ldr	r1, [sp, #8]
   82226:	aa13      	add	r2, sp, #76	; 0x4c
   82228:	f8cd c004 	str.w	ip, [sp, #4]
   8222c:	f7ff f9ea 	bl	81604 <__sprint_r.part.0>
   82230:	f8dd c004 	ldr.w	ip, [sp, #4]
   82234:	2800      	cmp	r0, #0
   82236:	f47f ae74 	bne.w	81f22 <_vfiprintf_r+0x8a6>
   8223a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   8223c:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8223e:	1c59      	adds	r1, r3, #1
   82240:	464e      	mov	r6, r9
   82242:	e5ad      	b.n	81da0 <_vfiprintf_r+0x724>
   82244:	9b14      	ldr	r3, [sp, #80]	; 0x50
   82246:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82248:	3301      	adds	r3, #1
   8224a:	4d02      	ldr	r5, [pc, #8]	; (82254 <_vfiprintf_r+0xbd8>)
   8224c:	f7ff bb9a 	b.w	81984 <_vfiprintf_r+0x308>
   82250:	00084724 	.word	0x00084724
   82254:	00084734 	.word	0x00084734
   82258:	f1bc 0f06 	cmp.w	ip, #6
   8225c:	bf34      	ite	cc
   8225e:	4663      	movcc	r3, ip
   82260:	2306      	movcs	r3, #6
   82262:	9408      	str	r4, [sp, #32]
   82264:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
   82268:	9305      	str	r3, [sp, #20]
   8226a:	9403      	str	r4, [sp, #12]
   8226c:	4f16      	ldr	r7, [pc, #88]	; (822c8 <_vfiprintf_r+0xc4c>)
   8226e:	e472      	b.n	81b56 <_vfiprintf_r+0x4da>
   82270:	9c08      	ldr	r4, [sp, #32]
   82272:	9d09      	ldr	r5, [sp, #36]	; 0x24
   82274:	6823      	ldr	r3, [r4, #0]
   82276:	3404      	adds	r4, #4
   82278:	9408      	str	r4, [sp, #32]
   8227a:	601d      	str	r5, [r3, #0]
   8227c:	f7ff ba31 	b.w	816e2 <_vfiprintf_r+0x66>
   82280:	9814      	ldr	r0, [sp, #80]	; 0x50
   82282:	4d12      	ldr	r5, [pc, #72]	; (822cc <_vfiprintf_r+0xc50>)
   82284:	3001      	adds	r0, #1
   82286:	e5fc      	b.n	81e82 <_vfiprintf_r+0x806>
   82288:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
   8228c:	f8cd c014 	str.w	ip, [sp, #20]
   82290:	9507      	str	r5, [sp, #28]
   82292:	9408      	str	r4, [sp, #32]
   82294:	4684      	mov	ip, r0
   82296:	f7ff bb25 	b.w	818e4 <_vfiprintf_r+0x268>
   8229a:	4608      	mov	r0, r1
   8229c:	e6b1      	b.n	82002 <_vfiprintf_r+0x986>
   8229e:	46a0      	mov	r8, r4
   822a0:	2500      	movs	r5, #0
   822a2:	f7ff ba5a 	b.w	8175a <_vfiprintf_r+0xde>
   822a6:	f8dd b020 	ldr.w	fp, [sp, #32]
   822aa:	f898 3001 	ldrb.w	r3, [r8, #1]
   822ae:	f8db 5000 	ldr.w	r5, [fp]
   822b2:	f10b 0204 	add.w	r2, fp, #4
   822b6:	2d00      	cmp	r5, #0
   822b8:	9208      	str	r2, [sp, #32]
   822ba:	46a0      	mov	r8, r4
   822bc:	f6bf aa4b 	bge.w	81756 <_vfiprintf_r+0xda>
   822c0:	f04f 35ff 	mov.w	r5, #4294967295
   822c4:	f7ff ba47 	b.w	81756 <_vfiprintf_r+0xda>
   822c8:	0008471c 	.word	0x0008471c
   822cc:	00084734 	.word	0x00084734

000822d0 <__sbprintf>:
   822d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   822d4:	6e4f      	ldr	r7, [r1, #100]	; 0x64
   822d6:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   822da:	4688      	mov	r8, r1
   822dc:	9719      	str	r7, [sp, #100]	; 0x64
   822de:	f8d8 701c 	ldr.w	r7, [r8, #28]
   822e2:	f8b1 a00c 	ldrh.w	sl, [r1, #12]
   822e6:	f8b1 900e 	ldrh.w	r9, [r1, #14]
   822ea:	9707      	str	r7, [sp, #28]
   822ec:	f8d8 7024 	ldr.w	r7, [r8, #36]	; 0x24
   822f0:	ac1a      	add	r4, sp, #104	; 0x68
   822f2:	f44f 6580 	mov.w	r5, #1024	; 0x400
   822f6:	f02a 0a02 	bic.w	sl, sl, #2
   822fa:	2600      	movs	r6, #0
   822fc:	4669      	mov	r1, sp
   822fe:	9400      	str	r4, [sp, #0]
   82300:	9404      	str	r4, [sp, #16]
   82302:	9502      	str	r5, [sp, #8]
   82304:	9505      	str	r5, [sp, #20]
   82306:	f8ad a00c 	strh.w	sl, [sp, #12]
   8230a:	f8ad 900e 	strh.w	r9, [sp, #14]
   8230e:	9709      	str	r7, [sp, #36]	; 0x24
   82310:	9606      	str	r6, [sp, #24]
   82312:	4605      	mov	r5, r0
   82314:	f7ff f9b2 	bl	8167c <_vfiprintf_r>
   82318:	1e04      	subs	r4, r0, #0
   8231a:	db07      	blt.n	8232c <__sbprintf+0x5c>
   8231c:	4628      	mov	r0, r5
   8231e:	4669      	mov	r1, sp
   82320:	f000 f92a 	bl	82578 <_fflush_r>
   82324:	42b0      	cmp	r0, r6
   82326:	bf18      	it	ne
   82328:	f04f 34ff 	movne.w	r4, #4294967295
   8232c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   82330:	065b      	lsls	r3, r3, #25
   82332:	d505      	bpl.n	82340 <__sbprintf+0x70>
   82334:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   82338:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8233c:	f8a8 300c 	strh.w	r3, [r8, #12]
   82340:	4620      	mov	r0, r4
   82342:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   82346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8234a:	bf00      	nop

0008234c <__swsetup_r>:
   8234c:	4b2f      	ldr	r3, [pc, #188]	; (8240c <__swsetup_r+0xc0>)
   8234e:	b570      	push	{r4, r5, r6, lr}
   82350:	4606      	mov	r6, r0
   82352:	6818      	ldr	r0, [r3, #0]
   82354:	460c      	mov	r4, r1
   82356:	b110      	cbz	r0, 8235e <__swsetup_r+0x12>
   82358:	6b82      	ldr	r2, [r0, #56]	; 0x38
   8235a:	2a00      	cmp	r2, #0
   8235c:	d036      	beq.n	823cc <__swsetup_r+0x80>
   8235e:	89a5      	ldrh	r5, [r4, #12]
   82360:	b2ab      	uxth	r3, r5
   82362:	0719      	lsls	r1, r3, #28
   82364:	d50c      	bpl.n	82380 <__swsetup_r+0x34>
   82366:	6922      	ldr	r2, [r4, #16]
   82368:	b1aa      	cbz	r2, 82396 <__swsetup_r+0x4a>
   8236a:	f013 0101 	ands.w	r1, r3, #1
   8236e:	d01e      	beq.n	823ae <__swsetup_r+0x62>
   82370:	6963      	ldr	r3, [r4, #20]
   82372:	2100      	movs	r1, #0
   82374:	425b      	negs	r3, r3
   82376:	61a3      	str	r3, [r4, #24]
   82378:	60a1      	str	r1, [r4, #8]
   8237a:	b1f2      	cbz	r2, 823ba <__swsetup_r+0x6e>
   8237c:	2000      	movs	r0, #0
   8237e:	bd70      	pop	{r4, r5, r6, pc}
   82380:	06da      	lsls	r2, r3, #27
   82382:	d53a      	bpl.n	823fa <__swsetup_r+0xae>
   82384:	075b      	lsls	r3, r3, #29
   82386:	d424      	bmi.n	823d2 <__swsetup_r+0x86>
   82388:	6922      	ldr	r2, [r4, #16]
   8238a:	f045 0308 	orr.w	r3, r5, #8
   8238e:	81a3      	strh	r3, [r4, #12]
   82390:	b29b      	uxth	r3, r3
   82392:	2a00      	cmp	r2, #0
   82394:	d1e9      	bne.n	8236a <__swsetup_r+0x1e>
   82396:	f403 7120 	and.w	r1, r3, #640	; 0x280
   8239a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   8239e:	d0e4      	beq.n	8236a <__swsetup_r+0x1e>
   823a0:	4630      	mov	r0, r6
   823a2:	4621      	mov	r1, r4
   823a4:	f000 fcce 	bl	82d44 <__smakebuf_r>
   823a8:	89a3      	ldrh	r3, [r4, #12]
   823aa:	6922      	ldr	r2, [r4, #16]
   823ac:	e7dd      	b.n	8236a <__swsetup_r+0x1e>
   823ae:	0798      	lsls	r0, r3, #30
   823b0:	bf58      	it	pl
   823b2:	6961      	ldrpl	r1, [r4, #20]
   823b4:	60a1      	str	r1, [r4, #8]
   823b6:	2a00      	cmp	r2, #0
   823b8:	d1e0      	bne.n	8237c <__swsetup_r+0x30>
   823ba:	89a3      	ldrh	r3, [r4, #12]
   823bc:	061a      	lsls	r2, r3, #24
   823be:	d5dd      	bpl.n	8237c <__swsetup_r+0x30>
   823c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   823c4:	81a3      	strh	r3, [r4, #12]
   823c6:	f04f 30ff 	mov.w	r0, #4294967295
   823ca:	bd70      	pop	{r4, r5, r6, pc}
   823cc:	f000 f8f0 	bl	825b0 <__sinit>
   823d0:	e7c5      	b.n	8235e <__swsetup_r+0x12>
   823d2:	6b21      	ldr	r1, [r4, #48]	; 0x30
   823d4:	b149      	cbz	r1, 823ea <__swsetup_r+0x9e>
   823d6:	f104 0340 	add.w	r3, r4, #64	; 0x40
   823da:	4299      	cmp	r1, r3
   823dc:	d003      	beq.n	823e6 <__swsetup_r+0x9a>
   823de:	4630      	mov	r0, r6
   823e0:	f000 fa2a 	bl	82838 <_free_r>
   823e4:	89a5      	ldrh	r5, [r4, #12]
   823e6:	2300      	movs	r3, #0
   823e8:	6323      	str	r3, [r4, #48]	; 0x30
   823ea:	6922      	ldr	r2, [r4, #16]
   823ec:	f025 0524 	bic.w	r5, r5, #36	; 0x24
   823f0:	2100      	movs	r1, #0
   823f2:	b2ad      	uxth	r5, r5
   823f4:	6022      	str	r2, [r4, #0]
   823f6:	6061      	str	r1, [r4, #4]
   823f8:	e7c7      	b.n	8238a <__swsetup_r+0x3e>
   823fa:	f045 0540 	orr.w	r5, r5, #64	; 0x40
   823fe:	2309      	movs	r3, #9
   82400:	6033      	str	r3, [r6, #0]
   82402:	f04f 30ff 	mov.w	r0, #4294967295
   82406:	81a5      	strh	r5, [r4, #12]
   82408:	bd70      	pop	{r4, r5, r6, pc}
   8240a:	bf00      	nop
   8240c:	20070568 	.word	0x20070568

00082410 <register_fini>:
   82410:	4b02      	ldr	r3, [pc, #8]	; (8241c <register_fini+0xc>)
   82412:	b113      	cbz	r3, 8241a <register_fini+0xa>
   82414:	4802      	ldr	r0, [pc, #8]	; (82420 <register_fini+0x10>)
   82416:	f000 b805 	b.w	82424 <atexit>
   8241a:	4770      	bx	lr
   8241c:	00000000 	.word	0x00000000
   82420:	000826ad 	.word	0x000826ad

00082424 <atexit>:
   82424:	4601      	mov	r1, r0
   82426:	2000      	movs	r0, #0
   82428:	4602      	mov	r2, r0
   8242a:	4603      	mov	r3, r0
   8242c:	f001 bb9a 	b.w	83b64 <__register_exitproc>

00082430 <__sflush_r>:
   82430:	898b      	ldrh	r3, [r1, #12]
   82432:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82436:	b29a      	uxth	r2, r3
   82438:	460d      	mov	r5, r1
   8243a:	0711      	lsls	r1, r2, #28
   8243c:	4680      	mov	r8, r0
   8243e:	d43c      	bmi.n	824ba <__sflush_r+0x8a>
   82440:	686a      	ldr	r2, [r5, #4]
   82442:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   82446:	2a00      	cmp	r2, #0
   82448:	81ab      	strh	r3, [r5, #12]
   8244a:	dd59      	ble.n	82500 <__sflush_r+0xd0>
   8244c:	6aac      	ldr	r4, [r5, #40]	; 0x28
   8244e:	2c00      	cmp	r4, #0
   82450:	d04b      	beq.n	824ea <__sflush_r+0xba>
   82452:	b29b      	uxth	r3, r3
   82454:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   82458:	2100      	movs	r1, #0
   8245a:	b292      	uxth	r2, r2
   8245c:	f8d8 6000 	ldr.w	r6, [r8]
   82460:	f8c8 1000 	str.w	r1, [r8]
   82464:	2a00      	cmp	r2, #0
   82466:	d04f      	beq.n	82508 <__sflush_r+0xd8>
   82468:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   8246a:	075f      	lsls	r7, r3, #29
   8246c:	d505      	bpl.n	8247a <__sflush_r+0x4a>
   8246e:	6869      	ldr	r1, [r5, #4]
   82470:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   82472:	1a52      	subs	r2, r2, r1
   82474:	b10b      	cbz	r3, 8247a <__sflush_r+0x4a>
   82476:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   82478:	1ad2      	subs	r2, r2, r3
   8247a:	4640      	mov	r0, r8
   8247c:	69e9      	ldr	r1, [r5, #28]
   8247e:	2300      	movs	r3, #0
   82480:	47a0      	blx	r4
   82482:	1c44      	adds	r4, r0, #1
   82484:	d04a      	beq.n	8251c <__sflush_r+0xec>
   82486:	89ab      	ldrh	r3, [r5, #12]
   82488:	692a      	ldr	r2, [r5, #16]
   8248a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   8248e:	b29b      	uxth	r3, r3
   82490:	2100      	movs	r1, #0
   82492:	602a      	str	r2, [r5, #0]
   82494:	04da      	lsls	r2, r3, #19
   82496:	81ab      	strh	r3, [r5, #12]
   82498:	6069      	str	r1, [r5, #4]
   8249a:	d44c      	bmi.n	82536 <__sflush_r+0x106>
   8249c:	6b29      	ldr	r1, [r5, #48]	; 0x30
   8249e:	f8c8 6000 	str.w	r6, [r8]
   824a2:	b311      	cbz	r1, 824ea <__sflush_r+0xba>
   824a4:	f105 0340 	add.w	r3, r5, #64	; 0x40
   824a8:	4299      	cmp	r1, r3
   824aa:	d002      	beq.n	824b2 <__sflush_r+0x82>
   824ac:	4640      	mov	r0, r8
   824ae:	f000 f9c3 	bl	82838 <_free_r>
   824b2:	2000      	movs	r0, #0
   824b4:	6328      	str	r0, [r5, #48]	; 0x30
   824b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   824ba:	692e      	ldr	r6, [r5, #16]
   824bc:	b1ae      	cbz	r6, 824ea <__sflush_r+0xba>
   824be:	0791      	lsls	r1, r2, #30
   824c0:	682c      	ldr	r4, [r5, #0]
   824c2:	bf0c      	ite	eq
   824c4:	696b      	ldreq	r3, [r5, #20]
   824c6:	2300      	movne	r3, #0
   824c8:	602e      	str	r6, [r5, #0]
   824ca:	1ba4      	subs	r4, r4, r6
   824cc:	60ab      	str	r3, [r5, #8]
   824ce:	e00a      	b.n	824e6 <__sflush_r+0xb6>
   824d0:	4632      	mov	r2, r6
   824d2:	4623      	mov	r3, r4
   824d4:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   824d6:	4640      	mov	r0, r8
   824d8:	69e9      	ldr	r1, [r5, #28]
   824da:	47b8      	blx	r7
   824dc:	2800      	cmp	r0, #0
   824de:	ebc0 0404 	rsb	r4, r0, r4
   824e2:	4406      	add	r6, r0
   824e4:	dd04      	ble.n	824f0 <__sflush_r+0xc0>
   824e6:	2c00      	cmp	r4, #0
   824e8:	dcf2      	bgt.n	824d0 <__sflush_r+0xa0>
   824ea:	2000      	movs	r0, #0
   824ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   824f0:	89ab      	ldrh	r3, [r5, #12]
   824f2:	f04f 30ff 	mov.w	r0, #4294967295
   824f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   824fa:	81ab      	strh	r3, [r5, #12]
   824fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82500:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   82502:	2a00      	cmp	r2, #0
   82504:	dca2      	bgt.n	8244c <__sflush_r+0x1c>
   82506:	e7f0      	b.n	824ea <__sflush_r+0xba>
   82508:	2301      	movs	r3, #1
   8250a:	4640      	mov	r0, r8
   8250c:	69e9      	ldr	r1, [r5, #28]
   8250e:	47a0      	blx	r4
   82510:	1c43      	adds	r3, r0, #1
   82512:	4602      	mov	r2, r0
   82514:	d01e      	beq.n	82554 <__sflush_r+0x124>
   82516:	89ab      	ldrh	r3, [r5, #12]
   82518:	6aac      	ldr	r4, [r5, #40]	; 0x28
   8251a:	e7a6      	b.n	8246a <__sflush_r+0x3a>
   8251c:	f8d8 3000 	ldr.w	r3, [r8]
   82520:	b95b      	cbnz	r3, 8253a <__sflush_r+0x10a>
   82522:	89aa      	ldrh	r2, [r5, #12]
   82524:	6929      	ldr	r1, [r5, #16]
   82526:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   8252a:	b292      	uxth	r2, r2
   8252c:	606b      	str	r3, [r5, #4]
   8252e:	04d3      	lsls	r3, r2, #19
   82530:	81aa      	strh	r2, [r5, #12]
   82532:	6029      	str	r1, [r5, #0]
   82534:	d5b2      	bpl.n	8249c <__sflush_r+0x6c>
   82536:	6528      	str	r0, [r5, #80]	; 0x50
   82538:	e7b0      	b.n	8249c <__sflush_r+0x6c>
   8253a:	2b1d      	cmp	r3, #29
   8253c:	d001      	beq.n	82542 <__sflush_r+0x112>
   8253e:	2b16      	cmp	r3, #22
   82540:	d113      	bne.n	8256a <__sflush_r+0x13a>
   82542:	89a9      	ldrh	r1, [r5, #12]
   82544:	692b      	ldr	r3, [r5, #16]
   82546:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
   8254a:	2200      	movs	r2, #0
   8254c:	81a9      	strh	r1, [r5, #12]
   8254e:	602b      	str	r3, [r5, #0]
   82550:	606a      	str	r2, [r5, #4]
   82552:	e7a3      	b.n	8249c <__sflush_r+0x6c>
   82554:	f8d8 3000 	ldr.w	r3, [r8]
   82558:	2b00      	cmp	r3, #0
   8255a:	d0dc      	beq.n	82516 <__sflush_r+0xe6>
   8255c:	2b1d      	cmp	r3, #29
   8255e:	d001      	beq.n	82564 <__sflush_r+0x134>
   82560:	2b16      	cmp	r3, #22
   82562:	d1c5      	bne.n	824f0 <__sflush_r+0xc0>
   82564:	f8c8 6000 	str.w	r6, [r8]
   82568:	e7bf      	b.n	824ea <__sflush_r+0xba>
   8256a:	89ab      	ldrh	r3, [r5, #12]
   8256c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82570:	81ab      	strh	r3, [r5, #12]
   82572:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82576:	bf00      	nop

00082578 <_fflush_r>:
   82578:	b510      	push	{r4, lr}
   8257a:	4604      	mov	r4, r0
   8257c:	b082      	sub	sp, #8
   8257e:	b108      	cbz	r0, 82584 <_fflush_r+0xc>
   82580:	6b83      	ldr	r3, [r0, #56]	; 0x38
   82582:	b153      	cbz	r3, 8259a <_fflush_r+0x22>
   82584:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   82588:	b908      	cbnz	r0, 8258e <_fflush_r+0x16>
   8258a:	b002      	add	sp, #8
   8258c:	bd10      	pop	{r4, pc}
   8258e:	4620      	mov	r0, r4
   82590:	b002      	add	sp, #8
   82592:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   82596:	f7ff bf4b 	b.w	82430 <__sflush_r>
   8259a:	9101      	str	r1, [sp, #4]
   8259c:	f000 f808 	bl	825b0 <__sinit>
   825a0:	9901      	ldr	r1, [sp, #4]
   825a2:	e7ef      	b.n	82584 <_fflush_r+0xc>

000825a4 <_cleanup_r>:
   825a4:	4901      	ldr	r1, [pc, #4]	; (825ac <_cleanup_r+0x8>)
   825a6:	f000 bb9f 	b.w	82ce8 <_fwalk>
   825aa:	bf00      	nop
   825ac:	00083cb1 	.word	0x00083cb1

000825b0 <__sinit>:
   825b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   825b4:	6b84      	ldr	r4, [r0, #56]	; 0x38
   825b6:	b083      	sub	sp, #12
   825b8:	4607      	mov	r7, r0
   825ba:	2c00      	cmp	r4, #0
   825bc:	d165      	bne.n	8268a <__sinit+0xda>
   825be:	687d      	ldr	r5, [r7, #4]
   825c0:	4833      	ldr	r0, [pc, #204]	; (82690 <__sinit+0xe0>)
   825c2:	2304      	movs	r3, #4
   825c4:	2103      	movs	r1, #3
   825c6:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   825ca:	63f8      	str	r0, [r7, #60]	; 0x3c
   825cc:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   825d0:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   825d4:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   825d8:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   825dc:	81ab      	strh	r3, [r5, #12]
   825de:	602c      	str	r4, [r5, #0]
   825e0:	606c      	str	r4, [r5, #4]
   825e2:	60ac      	str	r4, [r5, #8]
   825e4:	666c      	str	r4, [r5, #100]	; 0x64
   825e6:	81ec      	strh	r4, [r5, #14]
   825e8:	612c      	str	r4, [r5, #16]
   825ea:	616c      	str	r4, [r5, #20]
   825ec:	61ac      	str	r4, [r5, #24]
   825ee:	4621      	mov	r1, r4
   825f0:	2208      	movs	r2, #8
   825f2:	f7fe fecd 	bl	81390 <memset>
   825f6:	f8df b09c 	ldr.w	fp, [pc, #156]	; 82694 <__sinit+0xe4>
   825fa:	68be      	ldr	r6, [r7, #8]
   825fc:	f8df a098 	ldr.w	sl, [pc, #152]	; 82698 <__sinit+0xe8>
   82600:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8269c <__sinit+0xec>
   82604:	f8df 8098 	ldr.w	r8, [pc, #152]	; 826a0 <__sinit+0xf0>
   82608:	2301      	movs	r3, #1
   8260a:	2209      	movs	r2, #9
   8260c:	61ed      	str	r5, [r5, #28]
   8260e:	f8c5 b020 	str.w	fp, [r5, #32]
   82612:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   82616:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   8261a:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   8261e:	4621      	mov	r1, r4
   82620:	81f3      	strh	r3, [r6, #14]
   82622:	81b2      	strh	r2, [r6, #12]
   82624:	6034      	str	r4, [r6, #0]
   82626:	6074      	str	r4, [r6, #4]
   82628:	60b4      	str	r4, [r6, #8]
   8262a:	6674      	str	r4, [r6, #100]	; 0x64
   8262c:	6134      	str	r4, [r6, #16]
   8262e:	6174      	str	r4, [r6, #20]
   82630:	61b4      	str	r4, [r6, #24]
   82632:	2208      	movs	r2, #8
   82634:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   82638:	9301      	str	r3, [sp, #4]
   8263a:	f7fe fea9 	bl	81390 <memset>
   8263e:	68fd      	ldr	r5, [r7, #12]
   82640:	2012      	movs	r0, #18
   82642:	2202      	movs	r2, #2
   82644:	61f6      	str	r6, [r6, #28]
   82646:	f8c6 b020 	str.w	fp, [r6, #32]
   8264a:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   8264e:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   82652:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   82656:	4621      	mov	r1, r4
   82658:	81a8      	strh	r0, [r5, #12]
   8265a:	81ea      	strh	r2, [r5, #14]
   8265c:	602c      	str	r4, [r5, #0]
   8265e:	606c      	str	r4, [r5, #4]
   82660:	60ac      	str	r4, [r5, #8]
   82662:	666c      	str	r4, [r5, #100]	; 0x64
   82664:	612c      	str	r4, [r5, #16]
   82666:	616c      	str	r4, [r5, #20]
   82668:	61ac      	str	r4, [r5, #24]
   8266a:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   8266e:	2208      	movs	r2, #8
   82670:	f7fe fe8e 	bl	81390 <memset>
   82674:	9b01      	ldr	r3, [sp, #4]
   82676:	61ed      	str	r5, [r5, #28]
   82678:	f8c5 b020 	str.w	fp, [r5, #32]
   8267c:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   82680:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   82684:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   82688:	63bb      	str	r3, [r7, #56]	; 0x38
   8268a:	b003      	add	sp, #12
   8268c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82690:	000825a5 	.word	0x000825a5
   82694:	000839a5 	.word	0x000839a5
   82698:	000839c9 	.word	0x000839c9
   8269c:	00083a01 	.word	0x00083a01
   826a0:	00083a21 	.word	0x00083a21

000826a4 <__sfp_lock_acquire>:
   826a4:	4770      	bx	lr
   826a6:	bf00      	nop

000826a8 <__sfp_lock_release>:
   826a8:	4770      	bx	lr
   826aa:	bf00      	nop

000826ac <__libc_fini_array>:
   826ac:	b538      	push	{r3, r4, r5, lr}
   826ae:	4d09      	ldr	r5, [pc, #36]	; (826d4 <__libc_fini_array+0x28>)
   826b0:	4c09      	ldr	r4, [pc, #36]	; (826d8 <__libc_fini_array+0x2c>)
   826b2:	1b64      	subs	r4, r4, r5
   826b4:	10a4      	asrs	r4, r4, #2
   826b6:	bf18      	it	ne
   826b8:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
   826bc:	d005      	beq.n	826ca <__libc_fini_array+0x1e>
   826be:	3c01      	subs	r4, #1
   826c0:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   826c4:	4798      	blx	r3
   826c6:	2c00      	cmp	r4, #0
   826c8:	d1f9      	bne.n	826be <__libc_fini_array+0x12>
   826ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   826ce:	f002 b843 	b.w	84758 <_fini>
   826d2:	bf00      	nop
   826d4:	00084764 	.word	0x00084764
   826d8:	00084768 	.word	0x00084768

000826dc <_fputwc_r>:
   826dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   826e0:	8993      	ldrh	r3, [r2, #12]
   826e2:	460f      	mov	r7, r1
   826e4:	0499      	lsls	r1, r3, #18
   826e6:	b082      	sub	sp, #8
   826e8:	4614      	mov	r4, r2
   826ea:	4680      	mov	r8, r0
   826ec:	d406      	bmi.n	826fc <_fputwc_r+0x20>
   826ee:	6e52      	ldr	r2, [r2, #100]	; 0x64
   826f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   826f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   826f8:	81a3      	strh	r3, [r4, #12]
   826fa:	6662      	str	r2, [r4, #100]	; 0x64
   826fc:	f000 fb1c 	bl	82d38 <__locale_mb_cur_max>
   82700:	2801      	cmp	r0, #1
   82702:	d03e      	beq.n	82782 <_fputwc_r+0xa6>
   82704:	463a      	mov	r2, r7
   82706:	4640      	mov	r0, r8
   82708:	a901      	add	r1, sp, #4
   8270a:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   8270e:	f001 f9df 	bl	83ad0 <_wcrtomb_r>
   82712:	1c42      	adds	r2, r0, #1
   82714:	4606      	mov	r6, r0
   82716:	d02d      	beq.n	82774 <_fputwc_r+0x98>
   82718:	2800      	cmp	r0, #0
   8271a:	d03a      	beq.n	82792 <_fputwc_r+0xb6>
   8271c:	f89d 1004 	ldrb.w	r1, [sp, #4]
   82720:	2500      	movs	r5, #0
   82722:	e009      	b.n	82738 <_fputwc_r+0x5c>
   82724:	6823      	ldr	r3, [r4, #0]
   82726:	7019      	strb	r1, [r3, #0]
   82728:	6823      	ldr	r3, [r4, #0]
   8272a:	3301      	adds	r3, #1
   8272c:	6023      	str	r3, [r4, #0]
   8272e:	3501      	adds	r5, #1
   82730:	42b5      	cmp	r5, r6
   82732:	d22e      	bcs.n	82792 <_fputwc_r+0xb6>
   82734:	ab01      	add	r3, sp, #4
   82736:	5ce9      	ldrb	r1, [r5, r3]
   82738:	68a3      	ldr	r3, [r4, #8]
   8273a:	3b01      	subs	r3, #1
   8273c:	2b00      	cmp	r3, #0
   8273e:	60a3      	str	r3, [r4, #8]
   82740:	daf0      	bge.n	82724 <_fputwc_r+0x48>
   82742:	69a2      	ldr	r2, [r4, #24]
   82744:	4293      	cmp	r3, r2
   82746:	db06      	blt.n	82756 <_fputwc_r+0x7a>
   82748:	6823      	ldr	r3, [r4, #0]
   8274a:	7019      	strb	r1, [r3, #0]
   8274c:	6823      	ldr	r3, [r4, #0]
   8274e:	7819      	ldrb	r1, [r3, #0]
   82750:	3301      	adds	r3, #1
   82752:	290a      	cmp	r1, #10
   82754:	d1ea      	bne.n	8272c <_fputwc_r+0x50>
   82756:	4640      	mov	r0, r8
   82758:	4622      	mov	r2, r4
   8275a:	f001 f965 	bl	83a28 <__swbuf_r>
   8275e:	f1b0 33ff 	subs.w	r3, r0, #4294967295
   82762:	4258      	negs	r0, r3
   82764:	4158      	adcs	r0, r3
   82766:	2800      	cmp	r0, #0
   82768:	d0e1      	beq.n	8272e <_fputwc_r+0x52>
   8276a:	f04f 30ff 	mov.w	r0, #4294967295
   8276e:	b002      	add	sp, #8
   82770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82774:	89a3      	ldrh	r3, [r4, #12]
   82776:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8277a:	81a3      	strh	r3, [r4, #12]
   8277c:	b002      	add	sp, #8
   8277e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82782:	1e7b      	subs	r3, r7, #1
   82784:	2bfe      	cmp	r3, #254	; 0xfe
   82786:	d8bd      	bhi.n	82704 <_fputwc_r+0x28>
   82788:	b2f9      	uxtb	r1, r7
   8278a:	4606      	mov	r6, r0
   8278c:	f88d 1004 	strb.w	r1, [sp, #4]
   82790:	e7c6      	b.n	82720 <_fputwc_r+0x44>
   82792:	4638      	mov	r0, r7
   82794:	b002      	add	sp, #8
   82796:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8279a:	bf00      	nop

0008279c <_malloc_trim_r>:
   8279c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8279e:	4d23      	ldr	r5, [pc, #140]	; (8282c <_malloc_trim_r+0x90>)
   827a0:	460f      	mov	r7, r1
   827a2:	4604      	mov	r4, r0
   827a4:	f000 ff08 	bl	835b8 <__malloc_lock>
   827a8:	68ab      	ldr	r3, [r5, #8]
   827aa:	685e      	ldr	r6, [r3, #4]
   827ac:	f026 0603 	bic.w	r6, r6, #3
   827b0:	1bf1      	subs	r1, r6, r7
   827b2:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   827b6:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   827ba:	f021 010f 	bic.w	r1, r1, #15
   827be:	f5a1 5780 	sub.w	r7, r1, #4096	; 0x1000
   827c2:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
   827c6:	db07      	blt.n	827d8 <_malloc_trim_r+0x3c>
   827c8:	4620      	mov	r0, r4
   827ca:	2100      	movs	r1, #0
   827cc:	f001 f8d8 	bl	83980 <_sbrk_r>
   827d0:	68ab      	ldr	r3, [r5, #8]
   827d2:	4433      	add	r3, r6
   827d4:	4298      	cmp	r0, r3
   827d6:	d004      	beq.n	827e2 <_malloc_trim_r+0x46>
   827d8:	4620      	mov	r0, r4
   827da:	f000 feef 	bl	835bc <__malloc_unlock>
   827de:	2000      	movs	r0, #0
   827e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   827e2:	4620      	mov	r0, r4
   827e4:	4279      	negs	r1, r7
   827e6:	f001 f8cb 	bl	83980 <_sbrk_r>
   827ea:	3001      	adds	r0, #1
   827ec:	d00d      	beq.n	8280a <_malloc_trim_r+0x6e>
   827ee:	4b10      	ldr	r3, [pc, #64]	; (82830 <_malloc_trim_r+0x94>)
   827f0:	68aa      	ldr	r2, [r5, #8]
   827f2:	6819      	ldr	r1, [r3, #0]
   827f4:	1bf6      	subs	r6, r6, r7
   827f6:	f046 0601 	orr.w	r6, r6, #1
   827fa:	4620      	mov	r0, r4
   827fc:	1bc9      	subs	r1, r1, r7
   827fe:	6056      	str	r6, [r2, #4]
   82800:	6019      	str	r1, [r3, #0]
   82802:	f000 fedb 	bl	835bc <__malloc_unlock>
   82806:	2001      	movs	r0, #1
   82808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8280a:	4620      	mov	r0, r4
   8280c:	2100      	movs	r1, #0
   8280e:	f001 f8b7 	bl	83980 <_sbrk_r>
   82812:	68ab      	ldr	r3, [r5, #8]
   82814:	1ac2      	subs	r2, r0, r3
   82816:	2a0f      	cmp	r2, #15
   82818:	ddde      	ble.n	827d8 <_malloc_trim_r+0x3c>
   8281a:	4d06      	ldr	r5, [pc, #24]	; (82834 <_malloc_trim_r+0x98>)
   8281c:	4904      	ldr	r1, [pc, #16]	; (82830 <_malloc_trim_r+0x94>)
   8281e:	682d      	ldr	r5, [r5, #0]
   82820:	f042 0201 	orr.w	r2, r2, #1
   82824:	1b40      	subs	r0, r0, r5
   82826:	605a      	str	r2, [r3, #4]
   82828:	6008      	str	r0, [r1, #0]
   8282a:	e7d5      	b.n	827d8 <_malloc_trim_r+0x3c>
   8282c:	20070590 	.word	0x20070590
   82830:	20070ae8 	.word	0x20070ae8
   82834:	2007099c 	.word	0x2007099c

00082838 <_free_r>:
   82838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8283c:	460d      	mov	r5, r1
   8283e:	4606      	mov	r6, r0
   82840:	2900      	cmp	r1, #0
   82842:	d055      	beq.n	828f0 <_free_r+0xb8>
   82844:	f000 feb8 	bl	835b8 <__malloc_lock>
   82848:	f855 1c04 	ldr.w	r1, [r5, #-4]
   8284c:	f8df c170 	ldr.w	ip, [pc, #368]	; 829c0 <_free_r+0x188>
   82850:	f1a5 0408 	sub.w	r4, r5, #8
   82854:	f021 0301 	bic.w	r3, r1, #1
   82858:	18e2      	adds	r2, r4, r3
   8285a:	f8dc 0008 	ldr.w	r0, [ip, #8]
   8285e:	6857      	ldr	r7, [r2, #4]
   82860:	4290      	cmp	r0, r2
   82862:	f027 0703 	bic.w	r7, r7, #3
   82866:	d068      	beq.n	8293a <_free_r+0x102>
   82868:	f011 0101 	ands.w	r1, r1, #1
   8286c:	6057      	str	r7, [r2, #4]
   8286e:	d032      	beq.n	828d6 <_free_r+0x9e>
   82870:	2100      	movs	r1, #0
   82872:	19d0      	adds	r0, r2, r7
   82874:	6840      	ldr	r0, [r0, #4]
   82876:	07c0      	lsls	r0, r0, #31
   82878:	d406      	bmi.n	82888 <_free_r+0x50>
   8287a:	443b      	add	r3, r7
   8287c:	6890      	ldr	r0, [r2, #8]
   8287e:	2900      	cmp	r1, #0
   82880:	d04d      	beq.n	8291e <_free_r+0xe6>
   82882:	68d2      	ldr	r2, [r2, #12]
   82884:	60c2      	str	r2, [r0, #12]
   82886:	6090      	str	r0, [r2, #8]
   82888:	f043 0201 	orr.w	r2, r3, #1
   8288c:	6062      	str	r2, [r4, #4]
   8288e:	50e3      	str	r3, [r4, r3]
   82890:	b9e1      	cbnz	r1, 828cc <_free_r+0x94>
   82892:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   82896:	d32d      	bcc.n	828f4 <_free_r+0xbc>
   82898:	0a5a      	lsrs	r2, r3, #9
   8289a:	2a04      	cmp	r2, #4
   8289c:	d869      	bhi.n	82972 <_free_r+0x13a>
   8289e:	0998      	lsrs	r0, r3, #6
   828a0:	3038      	adds	r0, #56	; 0x38
   828a2:	0041      	lsls	r1, r0, #1
   828a4:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
   828a8:	f8dc 2008 	ldr.w	r2, [ip, #8]
   828ac:	4944      	ldr	r1, [pc, #272]	; (829c0 <_free_r+0x188>)
   828ae:	4562      	cmp	r2, ip
   828b0:	d065      	beq.n	8297e <_free_r+0x146>
   828b2:	6851      	ldr	r1, [r2, #4]
   828b4:	f021 0103 	bic.w	r1, r1, #3
   828b8:	428b      	cmp	r3, r1
   828ba:	d202      	bcs.n	828c2 <_free_r+0x8a>
   828bc:	6892      	ldr	r2, [r2, #8]
   828be:	4594      	cmp	ip, r2
   828c0:	d1f7      	bne.n	828b2 <_free_r+0x7a>
   828c2:	68d3      	ldr	r3, [r2, #12]
   828c4:	60e3      	str	r3, [r4, #12]
   828c6:	60a2      	str	r2, [r4, #8]
   828c8:	609c      	str	r4, [r3, #8]
   828ca:	60d4      	str	r4, [r2, #12]
   828cc:	4630      	mov	r0, r6
   828ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   828d2:	f000 be73 	b.w	835bc <__malloc_unlock>
   828d6:	f855 5c08 	ldr.w	r5, [r5, #-8]
   828da:	f10c 0808 	add.w	r8, ip, #8
   828de:	1b64      	subs	r4, r4, r5
   828e0:	68a0      	ldr	r0, [r4, #8]
   828e2:	442b      	add	r3, r5
   828e4:	4540      	cmp	r0, r8
   828e6:	d042      	beq.n	8296e <_free_r+0x136>
   828e8:	68e5      	ldr	r5, [r4, #12]
   828ea:	60c5      	str	r5, [r0, #12]
   828ec:	60a8      	str	r0, [r5, #8]
   828ee:	e7c0      	b.n	82872 <_free_r+0x3a>
   828f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   828f4:	08db      	lsrs	r3, r3, #3
   828f6:	109a      	asrs	r2, r3, #2
   828f8:	2001      	movs	r0, #1
   828fa:	4090      	lsls	r0, r2
   828fc:	f8dc 1004 	ldr.w	r1, [ip, #4]
   82900:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
   82904:	689a      	ldr	r2, [r3, #8]
   82906:	4301      	orrs	r1, r0
   82908:	60a2      	str	r2, [r4, #8]
   8290a:	60e3      	str	r3, [r4, #12]
   8290c:	f8cc 1004 	str.w	r1, [ip, #4]
   82910:	4630      	mov	r0, r6
   82912:	609c      	str	r4, [r3, #8]
   82914:	60d4      	str	r4, [r2, #12]
   82916:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8291a:	f000 be4f 	b.w	835bc <__malloc_unlock>
   8291e:	4d29      	ldr	r5, [pc, #164]	; (829c4 <_free_r+0x18c>)
   82920:	42a8      	cmp	r0, r5
   82922:	d1ae      	bne.n	82882 <_free_r+0x4a>
   82924:	f043 0201 	orr.w	r2, r3, #1
   82928:	f8cc 4014 	str.w	r4, [ip, #20]
   8292c:	f8cc 4010 	str.w	r4, [ip, #16]
   82930:	60e0      	str	r0, [r4, #12]
   82932:	60a0      	str	r0, [r4, #8]
   82934:	6062      	str	r2, [r4, #4]
   82936:	50e3      	str	r3, [r4, r3]
   82938:	e7c8      	b.n	828cc <_free_r+0x94>
   8293a:	441f      	add	r7, r3
   8293c:	07cb      	lsls	r3, r1, #31
   8293e:	d407      	bmi.n	82950 <_free_r+0x118>
   82940:	f855 1c08 	ldr.w	r1, [r5, #-8]
   82944:	1a64      	subs	r4, r4, r1
   82946:	68e3      	ldr	r3, [r4, #12]
   82948:	68a2      	ldr	r2, [r4, #8]
   8294a:	440f      	add	r7, r1
   8294c:	60d3      	str	r3, [r2, #12]
   8294e:	609a      	str	r2, [r3, #8]
   82950:	4b1d      	ldr	r3, [pc, #116]	; (829c8 <_free_r+0x190>)
   82952:	f047 0201 	orr.w	r2, r7, #1
   82956:	681b      	ldr	r3, [r3, #0]
   82958:	6062      	str	r2, [r4, #4]
   8295a:	429f      	cmp	r7, r3
   8295c:	f8cc 4008 	str.w	r4, [ip, #8]
   82960:	d3b4      	bcc.n	828cc <_free_r+0x94>
   82962:	4b1a      	ldr	r3, [pc, #104]	; (829cc <_free_r+0x194>)
   82964:	4630      	mov	r0, r6
   82966:	6819      	ldr	r1, [r3, #0]
   82968:	f7ff ff18 	bl	8279c <_malloc_trim_r>
   8296c:	e7ae      	b.n	828cc <_free_r+0x94>
   8296e:	2101      	movs	r1, #1
   82970:	e77f      	b.n	82872 <_free_r+0x3a>
   82972:	2a14      	cmp	r2, #20
   82974:	d80b      	bhi.n	8298e <_free_r+0x156>
   82976:	f102 005b 	add.w	r0, r2, #91	; 0x5b
   8297a:	0041      	lsls	r1, r0, #1
   8297c:	e792      	b.n	828a4 <_free_r+0x6c>
   8297e:	1080      	asrs	r0, r0, #2
   82980:	2501      	movs	r5, #1
   82982:	4085      	lsls	r5, r0
   82984:	6848      	ldr	r0, [r1, #4]
   82986:	4613      	mov	r3, r2
   82988:	4328      	orrs	r0, r5
   8298a:	6048      	str	r0, [r1, #4]
   8298c:	e79a      	b.n	828c4 <_free_r+0x8c>
   8298e:	2a54      	cmp	r2, #84	; 0x54
   82990:	d803      	bhi.n	8299a <_free_r+0x162>
   82992:	0b18      	lsrs	r0, r3, #12
   82994:	306e      	adds	r0, #110	; 0x6e
   82996:	0041      	lsls	r1, r0, #1
   82998:	e784      	b.n	828a4 <_free_r+0x6c>
   8299a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   8299e:	d803      	bhi.n	829a8 <_free_r+0x170>
   829a0:	0bd8      	lsrs	r0, r3, #15
   829a2:	3077      	adds	r0, #119	; 0x77
   829a4:	0041      	lsls	r1, r0, #1
   829a6:	e77d      	b.n	828a4 <_free_r+0x6c>
   829a8:	f240 5154 	movw	r1, #1364	; 0x554
   829ac:	428a      	cmp	r2, r1
   829ae:	d803      	bhi.n	829b8 <_free_r+0x180>
   829b0:	0c98      	lsrs	r0, r3, #18
   829b2:	307c      	adds	r0, #124	; 0x7c
   829b4:	0041      	lsls	r1, r0, #1
   829b6:	e775      	b.n	828a4 <_free_r+0x6c>
   829b8:	21fc      	movs	r1, #252	; 0xfc
   829ba:	207e      	movs	r0, #126	; 0x7e
   829bc:	e772      	b.n	828a4 <_free_r+0x6c>
   829be:	bf00      	nop
   829c0:	20070590 	.word	0x20070590
   829c4:	20070598 	.word	0x20070598
   829c8:	20070998 	.word	0x20070998
   829cc:	20070ae4 	.word	0x20070ae4

000829d0 <__sfvwrite_r>:
   829d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   829d4:	6893      	ldr	r3, [r2, #8]
   829d6:	b083      	sub	sp, #12
   829d8:	4616      	mov	r6, r2
   829da:	4681      	mov	r9, r0
   829dc:	460c      	mov	r4, r1
   829de:	b32b      	cbz	r3, 82a2c <__sfvwrite_r+0x5c>
   829e0:	898b      	ldrh	r3, [r1, #12]
   829e2:	0719      	lsls	r1, r3, #28
   829e4:	d526      	bpl.n	82a34 <__sfvwrite_r+0x64>
   829e6:	6922      	ldr	r2, [r4, #16]
   829e8:	b322      	cbz	r2, 82a34 <__sfvwrite_r+0x64>
   829ea:	f003 0202 	and.w	r2, r3, #2
   829ee:	b292      	uxth	r2, r2
   829f0:	6835      	ldr	r5, [r6, #0]
   829f2:	2a00      	cmp	r2, #0
   829f4:	d02c      	beq.n	82a50 <__sfvwrite_r+0x80>
   829f6:	f04f 0a00 	mov.w	sl, #0
   829fa:	f8df b2e8 	ldr.w	fp, [pc, #744]	; 82ce4 <__sfvwrite_r+0x314>
   829fe:	46d0      	mov	r8, sl
   82a00:	45d8      	cmp	r8, fp
   82a02:	bf34      	ite	cc
   82a04:	4643      	movcc	r3, r8
   82a06:	465b      	movcs	r3, fp
   82a08:	4652      	mov	r2, sl
   82a0a:	4648      	mov	r0, r9
   82a0c:	f1b8 0f00 	cmp.w	r8, #0
   82a10:	d04f      	beq.n	82ab2 <__sfvwrite_r+0xe2>
   82a12:	69e1      	ldr	r1, [r4, #28]
   82a14:	6a67      	ldr	r7, [r4, #36]	; 0x24
   82a16:	47b8      	blx	r7
   82a18:	2800      	cmp	r0, #0
   82a1a:	dd56      	ble.n	82aca <__sfvwrite_r+0xfa>
   82a1c:	68b3      	ldr	r3, [r6, #8]
   82a1e:	4482      	add	sl, r0
   82a20:	1a1b      	subs	r3, r3, r0
   82a22:	ebc0 0808 	rsb	r8, r0, r8
   82a26:	60b3      	str	r3, [r6, #8]
   82a28:	2b00      	cmp	r3, #0
   82a2a:	d1e9      	bne.n	82a00 <__sfvwrite_r+0x30>
   82a2c:	2000      	movs	r0, #0
   82a2e:	b003      	add	sp, #12
   82a30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82a34:	4648      	mov	r0, r9
   82a36:	4621      	mov	r1, r4
   82a38:	f7ff fc88 	bl	8234c <__swsetup_r>
   82a3c:	2800      	cmp	r0, #0
   82a3e:	f040 8148 	bne.w	82cd2 <__sfvwrite_r+0x302>
   82a42:	89a3      	ldrh	r3, [r4, #12]
   82a44:	6835      	ldr	r5, [r6, #0]
   82a46:	f003 0202 	and.w	r2, r3, #2
   82a4a:	b292      	uxth	r2, r2
   82a4c:	2a00      	cmp	r2, #0
   82a4e:	d1d2      	bne.n	829f6 <__sfvwrite_r+0x26>
   82a50:	f013 0a01 	ands.w	sl, r3, #1
   82a54:	d142      	bne.n	82adc <__sfvwrite_r+0x10c>
   82a56:	46d0      	mov	r8, sl
   82a58:	f1b8 0f00 	cmp.w	r8, #0
   82a5c:	d023      	beq.n	82aa6 <__sfvwrite_r+0xd6>
   82a5e:	059a      	lsls	r2, r3, #22
   82a60:	68a7      	ldr	r7, [r4, #8]
   82a62:	d576      	bpl.n	82b52 <__sfvwrite_r+0x182>
   82a64:	45b8      	cmp	r8, r7
   82a66:	f0c0 80a4 	bcc.w	82bb2 <__sfvwrite_r+0x1e2>
   82a6a:	f413 6f90 	tst.w	r3, #1152	; 0x480
   82a6e:	f040 80b2 	bne.w	82bd6 <__sfvwrite_r+0x206>
   82a72:	6820      	ldr	r0, [r4, #0]
   82a74:	46bb      	mov	fp, r7
   82a76:	4651      	mov	r1, sl
   82a78:	465a      	mov	r2, fp
   82a7a:	f000 fd37 	bl	834ec <memmove>
   82a7e:	68a2      	ldr	r2, [r4, #8]
   82a80:	6821      	ldr	r1, [r4, #0]
   82a82:	1bd2      	subs	r2, r2, r7
   82a84:	eb01 030b 	add.w	r3, r1, fp
   82a88:	60a2      	str	r2, [r4, #8]
   82a8a:	6023      	str	r3, [r4, #0]
   82a8c:	4642      	mov	r2, r8
   82a8e:	68b3      	ldr	r3, [r6, #8]
   82a90:	4492      	add	sl, r2
   82a92:	1a9b      	subs	r3, r3, r2
   82a94:	ebc2 0808 	rsb	r8, r2, r8
   82a98:	60b3      	str	r3, [r6, #8]
   82a9a:	2b00      	cmp	r3, #0
   82a9c:	d0c6      	beq.n	82a2c <__sfvwrite_r+0x5c>
   82a9e:	89a3      	ldrh	r3, [r4, #12]
   82aa0:	f1b8 0f00 	cmp.w	r8, #0
   82aa4:	d1db      	bne.n	82a5e <__sfvwrite_r+0x8e>
   82aa6:	f8d5 a000 	ldr.w	sl, [r5]
   82aaa:	f8d5 8004 	ldr.w	r8, [r5, #4]
   82aae:	3508      	adds	r5, #8
   82ab0:	e7d2      	b.n	82a58 <__sfvwrite_r+0x88>
   82ab2:	f8d5 a000 	ldr.w	sl, [r5]
   82ab6:	f8d5 8004 	ldr.w	r8, [r5, #4]
   82aba:	3508      	adds	r5, #8
   82abc:	e7a0      	b.n	82a00 <__sfvwrite_r+0x30>
   82abe:	4648      	mov	r0, r9
   82ac0:	4621      	mov	r1, r4
   82ac2:	f7ff fd59 	bl	82578 <_fflush_r>
   82ac6:	2800      	cmp	r0, #0
   82ac8:	d059      	beq.n	82b7e <__sfvwrite_r+0x1ae>
   82aca:	89a3      	ldrh	r3, [r4, #12]
   82acc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82ad0:	f04f 30ff 	mov.w	r0, #4294967295
   82ad4:	81a3      	strh	r3, [r4, #12]
   82ad6:	b003      	add	sp, #12
   82ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82adc:	4692      	mov	sl, r2
   82ade:	9201      	str	r2, [sp, #4]
   82ae0:	4693      	mov	fp, r2
   82ae2:	4690      	mov	r8, r2
   82ae4:	f1b8 0f00 	cmp.w	r8, #0
   82ae8:	d02b      	beq.n	82b42 <__sfvwrite_r+0x172>
   82aea:	9f01      	ldr	r7, [sp, #4]
   82aec:	2f00      	cmp	r7, #0
   82aee:	d064      	beq.n	82bba <__sfvwrite_r+0x1ea>
   82af0:	6820      	ldr	r0, [r4, #0]
   82af2:	6921      	ldr	r1, [r4, #16]
   82af4:	45c2      	cmp	sl, r8
   82af6:	bf34      	ite	cc
   82af8:	4653      	movcc	r3, sl
   82afa:	4643      	movcs	r3, r8
   82afc:	4288      	cmp	r0, r1
   82afe:	461f      	mov	r7, r3
   82b00:	f8d4 c008 	ldr.w	ip, [r4, #8]
   82b04:	6962      	ldr	r2, [r4, #20]
   82b06:	d903      	bls.n	82b10 <__sfvwrite_r+0x140>
   82b08:	4494      	add	ip, r2
   82b0a:	4563      	cmp	r3, ip
   82b0c:	f300 80ae 	bgt.w	82c6c <__sfvwrite_r+0x29c>
   82b10:	4293      	cmp	r3, r2
   82b12:	db36      	blt.n	82b82 <__sfvwrite_r+0x1b2>
   82b14:	4613      	mov	r3, r2
   82b16:	6a67      	ldr	r7, [r4, #36]	; 0x24
   82b18:	4648      	mov	r0, r9
   82b1a:	69e1      	ldr	r1, [r4, #28]
   82b1c:	465a      	mov	r2, fp
   82b1e:	47b8      	blx	r7
   82b20:	1e07      	subs	r7, r0, #0
   82b22:	ddd2      	ble.n	82aca <__sfvwrite_r+0xfa>
   82b24:	ebba 0a07 	subs.w	sl, sl, r7
   82b28:	d03a      	beq.n	82ba0 <__sfvwrite_r+0x1d0>
   82b2a:	68b3      	ldr	r3, [r6, #8]
   82b2c:	44bb      	add	fp, r7
   82b2e:	1bdb      	subs	r3, r3, r7
   82b30:	ebc7 0808 	rsb	r8, r7, r8
   82b34:	60b3      	str	r3, [r6, #8]
   82b36:	2b00      	cmp	r3, #0
   82b38:	f43f af78 	beq.w	82a2c <__sfvwrite_r+0x5c>
   82b3c:	f1b8 0f00 	cmp.w	r8, #0
   82b40:	d1d3      	bne.n	82aea <__sfvwrite_r+0x11a>
   82b42:	2700      	movs	r7, #0
   82b44:	f8d5 b000 	ldr.w	fp, [r5]
   82b48:	f8d5 8004 	ldr.w	r8, [r5, #4]
   82b4c:	9701      	str	r7, [sp, #4]
   82b4e:	3508      	adds	r5, #8
   82b50:	e7c8      	b.n	82ae4 <__sfvwrite_r+0x114>
   82b52:	6820      	ldr	r0, [r4, #0]
   82b54:	6923      	ldr	r3, [r4, #16]
   82b56:	4298      	cmp	r0, r3
   82b58:	d802      	bhi.n	82b60 <__sfvwrite_r+0x190>
   82b5a:	6963      	ldr	r3, [r4, #20]
   82b5c:	4598      	cmp	r8, r3
   82b5e:	d272      	bcs.n	82c46 <__sfvwrite_r+0x276>
   82b60:	45b8      	cmp	r8, r7
   82b62:	bf38      	it	cc
   82b64:	4647      	movcc	r7, r8
   82b66:	463a      	mov	r2, r7
   82b68:	4651      	mov	r1, sl
   82b6a:	f000 fcbf 	bl	834ec <memmove>
   82b6e:	68a3      	ldr	r3, [r4, #8]
   82b70:	6822      	ldr	r2, [r4, #0]
   82b72:	1bdb      	subs	r3, r3, r7
   82b74:	443a      	add	r2, r7
   82b76:	60a3      	str	r3, [r4, #8]
   82b78:	6022      	str	r2, [r4, #0]
   82b7a:	2b00      	cmp	r3, #0
   82b7c:	d09f      	beq.n	82abe <__sfvwrite_r+0xee>
   82b7e:	463a      	mov	r2, r7
   82b80:	e785      	b.n	82a8e <__sfvwrite_r+0xbe>
   82b82:	461a      	mov	r2, r3
   82b84:	4659      	mov	r1, fp
   82b86:	9300      	str	r3, [sp, #0]
   82b88:	f000 fcb0 	bl	834ec <memmove>
   82b8c:	9b00      	ldr	r3, [sp, #0]
   82b8e:	68a1      	ldr	r1, [r4, #8]
   82b90:	6822      	ldr	r2, [r4, #0]
   82b92:	1ac9      	subs	r1, r1, r3
   82b94:	ebba 0a07 	subs.w	sl, sl, r7
   82b98:	4413      	add	r3, r2
   82b9a:	60a1      	str	r1, [r4, #8]
   82b9c:	6023      	str	r3, [r4, #0]
   82b9e:	d1c4      	bne.n	82b2a <__sfvwrite_r+0x15a>
   82ba0:	4648      	mov	r0, r9
   82ba2:	4621      	mov	r1, r4
   82ba4:	f7ff fce8 	bl	82578 <_fflush_r>
   82ba8:	2800      	cmp	r0, #0
   82baa:	d18e      	bne.n	82aca <__sfvwrite_r+0xfa>
   82bac:	f8cd a004 	str.w	sl, [sp, #4]
   82bb0:	e7bb      	b.n	82b2a <__sfvwrite_r+0x15a>
   82bb2:	6820      	ldr	r0, [r4, #0]
   82bb4:	4647      	mov	r7, r8
   82bb6:	46c3      	mov	fp, r8
   82bb8:	e75d      	b.n	82a76 <__sfvwrite_r+0xa6>
   82bba:	4658      	mov	r0, fp
   82bbc:	210a      	movs	r1, #10
   82bbe:	4642      	mov	r2, r8
   82bc0:	f000 fbd4 	bl	8336c <memchr>
   82bc4:	2800      	cmp	r0, #0
   82bc6:	d07f      	beq.n	82cc8 <__sfvwrite_r+0x2f8>
   82bc8:	f100 0a01 	add.w	sl, r0, #1
   82bcc:	2701      	movs	r7, #1
   82bce:	ebcb 0a0a 	rsb	sl, fp, sl
   82bd2:	9701      	str	r7, [sp, #4]
   82bd4:	e78c      	b.n	82af0 <__sfvwrite_r+0x120>
   82bd6:	6822      	ldr	r2, [r4, #0]
   82bd8:	6921      	ldr	r1, [r4, #16]
   82bda:	6967      	ldr	r7, [r4, #20]
   82bdc:	ebc1 0c02 	rsb	ip, r1, r2
   82be0:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   82be4:	f10c 0201 	add.w	r2, ip, #1
   82be8:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   82bec:	4442      	add	r2, r8
   82bee:	107f      	asrs	r7, r7, #1
   82bf0:	4297      	cmp	r7, r2
   82bf2:	bf34      	ite	cc
   82bf4:	4617      	movcc	r7, r2
   82bf6:	463a      	movcs	r2, r7
   82bf8:	055b      	lsls	r3, r3, #21
   82bfa:	d54f      	bpl.n	82c9c <__sfvwrite_r+0x2cc>
   82bfc:	4611      	mov	r1, r2
   82bfe:	4648      	mov	r0, r9
   82c00:	f8cd c000 	str.w	ip, [sp]
   82c04:	f000 f916 	bl	82e34 <_malloc_r>
   82c08:	f8dd c000 	ldr.w	ip, [sp]
   82c0c:	4683      	mov	fp, r0
   82c0e:	2800      	cmp	r0, #0
   82c10:	d062      	beq.n	82cd8 <__sfvwrite_r+0x308>
   82c12:	4662      	mov	r2, ip
   82c14:	6921      	ldr	r1, [r4, #16]
   82c16:	f8cd c000 	str.w	ip, [sp]
   82c1a:	f000 fbf1 	bl	83400 <memcpy>
   82c1e:	89a2      	ldrh	r2, [r4, #12]
   82c20:	f8dd c000 	ldr.w	ip, [sp]
   82c24:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   82c28:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   82c2c:	81a2      	strh	r2, [r4, #12]
   82c2e:	eb0b 000c 	add.w	r0, fp, ip
   82c32:	ebcc 0207 	rsb	r2, ip, r7
   82c36:	f8c4 b010 	str.w	fp, [r4, #16]
   82c3a:	6167      	str	r7, [r4, #20]
   82c3c:	6020      	str	r0, [r4, #0]
   82c3e:	60a2      	str	r2, [r4, #8]
   82c40:	4647      	mov	r7, r8
   82c42:	46c3      	mov	fp, r8
   82c44:	e717      	b.n	82a76 <__sfvwrite_r+0xa6>
   82c46:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   82c4a:	4590      	cmp	r8, r2
   82c4c:	bf38      	it	cc
   82c4e:	4642      	movcc	r2, r8
   82c50:	fb92 f2f3 	sdiv	r2, r2, r3
   82c54:	fb02 f303 	mul.w	r3, r2, r3
   82c58:	6a67      	ldr	r7, [r4, #36]	; 0x24
   82c5a:	4648      	mov	r0, r9
   82c5c:	69e1      	ldr	r1, [r4, #28]
   82c5e:	4652      	mov	r2, sl
   82c60:	47b8      	blx	r7
   82c62:	2800      	cmp	r0, #0
   82c64:	f77f af31 	ble.w	82aca <__sfvwrite_r+0xfa>
   82c68:	4602      	mov	r2, r0
   82c6a:	e710      	b.n	82a8e <__sfvwrite_r+0xbe>
   82c6c:	4662      	mov	r2, ip
   82c6e:	4659      	mov	r1, fp
   82c70:	f8cd c000 	str.w	ip, [sp]
   82c74:	f000 fc3a 	bl	834ec <memmove>
   82c78:	f8dd c000 	ldr.w	ip, [sp]
   82c7c:	6823      	ldr	r3, [r4, #0]
   82c7e:	4648      	mov	r0, r9
   82c80:	4463      	add	r3, ip
   82c82:	6023      	str	r3, [r4, #0]
   82c84:	4621      	mov	r1, r4
   82c86:	f8cd c000 	str.w	ip, [sp]
   82c8a:	f7ff fc75 	bl	82578 <_fflush_r>
   82c8e:	f8dd c000 	ldr.w	ip, [sp]
   82c92:	2800      	cmp	r0, #0
   82c94:	f47f af19 	bne.w	82aca <__sfvwrite_r+0xfa>
   82c98:	4667      	mov	r7, ip
   82c9a:	e743      	b.n	82b24 <__sfvwrite_r+0x154>
   82c9c:	4648      	mov	r0, r9
   82c9e:	f8cd c000 	str.w	ip, [sp]
   82ca2:	f000 fc8d 	bl	835c0 <_realloc_r>
   82ca6:	f8dd c000 	ldr.w	ip, [sp]
   82caa:	4683      	mov	fp, r0
   82cac:	2800      	cmp	r0, #0
   82cae:	d1be      	bne.n	82c2e <__sfvwrite_r+0x25e>
   82cb0:	4648      	mov	r0, r9
   82cb2:	6921      	ldr	r1, [r4, #16]
   82cb4:	f7ff fdc0 	bl	82838 <_free_r>
   82cb8:	89a3      	ldrh	r3, [r4, #12]
   82cba:	220c      	movs	r2, #12
   82cbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   82cc0:	b29b      	uxth	r3, r3
   82cc2:	f8c9 2000 	str.w	r2, [r9]
   82cc6:	e701      	b.n	82acc <__sfvwrite_r+0xfc>
   82cc8:	2701      	movs	r7, #1
   82cca:	f108 0a01 	add.w	sl, r8, #1
   82cce:	9701      	str	r7, [sp, #4]
   82cd0:	e70e      	b.n	82af0 <__sfvwrite_r+0x120>
   82cd2:	f04f 30ff 	mov.w	r0, #4294967295
   82cd6:	e6aa      	b.n	82a2e <__sfvwrite_r+0x5e>
   82cd8:	230c      	movs	r3, #12
   82cda:	f8c9 3000 	str.w	r3, [r9]
   82cde:	89a3      	ldrh	r3, [r4, #12]
   82ce0:	e6f4      	b.n	82acc <__sfvwrite_r+0xfc>
   82ce2:	bf00      	nop
   82ce4:	7ffffc00 	.word	0x7ffffc00

00082ce8 <_fwalk>:
   82ce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82cec:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
   82cf0:	4688      	mov	r8, r1
   82cf2:	d019      	beq.n	82d28 <_fwalk+0x40>
   82cf4:	2600      	movs	r6, #0
   82cf6:	687d      	ldr	r5, [r7, #4]
   82cf8:	68bc      	ldr	r4, [r7, #8]
   82cfa:	3d01      	subs	r5, #1
   82cfc:	d40e      	bmi.n	82d1c <_fwalk+0x34>
   82cfe:	89a3      	ldrh	r3, [r4, #12]
   82d00:	3d01      	subs	r5, #1
   82d02:	2b01      	cmp	r3, #1
   82d04:	d906      	bls.n	82d14 <_fwalk+0x2c>
   82d06:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   82d0a:	4620      	mov	r0, r4
   82d0c:	3301      	adds	r3, #1
   82d0e:	d001      	beq.n	82d14 <_fwalk+0x2c>
   82d10:	47c0      	blx	r8
   82d12:	4306      	orrs	r6, r0
   82d14:	1c6b      	adds	r3, r5, #1
   82d16:	f104 0468 	add.w	r4, r4, #104	; 0x68
   82d1a:	d1f0      	bne.n	82cfe <_fwalk+0x16>
   82d1c:	683f      	ldr	r7, [r7, #0]
   82d1e:	2f00      	cmp	r7, #0
   82d20:	d1e9      	bne.n	82cf6 <_fwalk+0xe>
   82d22:	4630      	mov	r0, r6
   82d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82d28:	463e      	mov	r6, r7
   82d2a:	4630      	mov	r0, r6
   82d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00082d30 <__locale_charset>:
   82d30:	4800      	ldr	r0, [pc, #0]	; (82d34 <__locale_charset+0x4>)
   82d32:	4770      	bx	lr
   82d34:	2007056c 	.word	0x2007056c

00082d38 <__locale_mb_cur_max>:
   82d38:	4b01      	ldr	r3, [pc, #4]	; (82d40 <__locale_mb_cur_max+0x8>)
   82d3a:	6818      	ldr	r0, [r3, #0]
   82d3c:	4770      	bx	lr
   82d3e:	bf00      	nop
   82d40:	2007058c 	.word	0x2007058c

00082d44 <__smakebuf_r>:
   82d44:	b5f0      	push	{r4, r5, r6, r7, lr}
   82d46:	898b      	ldrh	r3, [r1, #12]
   82d48:	b091      	sub	sp, #68	; 0x44
   82d4a:	b29a      	uxth	r2, r3
   82d4c:	0796      	lsls	r6, r2, #30
   82d4e:	460c      	mov	r4, r1
   82d50:	4605      	mov	r5, r0
   82d52:	d437      	bmi.n	82dc4 <__smakebuf_r+0x80>
   82d54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   82d58:	2900      	cmp	r1, #0
   82d5a:	db17      	blt.n	82d8c <__smakebuf_r+0x48>
   82d5c:	aa01      	add	r2, sp, #4
   82d5e:	f000 ffaf 	bl	83cc0 <_fstat_r>
   82d62:	2800      	cmp	r0, #0
   82d64:	db10      	blt.n	82d88 <__smakebuf_r+0x44>
   82d66:	9b02      	ldr	r3, [sp, #8]
   82d68:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
   82d6c:	f5b3 5100 	subs.w	r1, r3, #8192	; 0x2000
   82d70:	424f      	negs	r7, r1
   82d72:	414f      	adcs	r7, r1
   82d74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   82d78:	d02c      	beq.n	82dd4 <__smakebuf_r+0x90>
   82d7a:	89a3      	ldrh	r3, [r4, #12]
   82d7c:	f44f 6680 	mov.w	r6, #1024	; 0x400
   82d80:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   82d84:	81a3      	strh	r3, [r4, #12]
   82d86:	e00b      	b.n	82da0 <__smakebuf_r+0x5c>
   82d88:	89a3      	ldrh	r3, [r4, #12]
   82d8a:	b29a      	uxth	r2, r3
   82d8c:	f012 0f80 	tst.w	r2, #128	; 0x80
   82d90:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   82d94:	81a3      	strh	r3, [r4, #12]
   82d96:	bf14      	ite	ne
   82d98:	2640      	movne	r6, #64	; 0x40
   82d9a:	f44f 6680 	moveq.w	r6, #1024	; 0x400
   82d9e:	2700      	movs	r7, #0
   82da0:	4628      	mov	r0, r5
   82da2:	4631      	mov	r1, r6
   82da4:	f000 f846 	bl	82e34 <_malloc_r>
   82da8:	89a3      	ldrh	r3, [r4, #12]
   82daa:	2800      	cmp	r0, #0
   82dac:	d029      	beq.n	82e02 <__smakebuf_r+0xbe>
   82dae:	4a1b      	ldr	r2, [pc, #108]	; (82e1c <__smakebuf_r+0xd8>)
   82db0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   82db4:	63ea      	str	r2, [r5, #60]	; 0x3c
   82db6:	81a3      	strh	r3, [r4, #12]
   82db8:	6020      	str	r0, [r4, #0]
   82dba:	6120      	str	r0, [r4, #16]
   82dbc:	6166      	str	r6, [r4, #20]
   82dbe:	b9a7      	cbnz	r7, 82dea <__smakebuf_r+0xa6>
   82dc0:	b011      	add	sp, #68	; 0x44
   82dc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82dc4:	f101 0343 	add.w	r3, r1, #67	; 0x43
   82dc8:	2201      	movs	r2, #1
   82dca:	600b      	str	r3, [r1, #0]
   82dcc:	610b      	str	r3, [r1, #16]
   82dce:	614a      	str	r2, [r1, #20]
   82dd0:	b011      	add	sp, #68	; 0x44
   82dd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82dd4:	4a12      	ldr	r2, [pc, #72]	; (82e20 <__smakebuf_r+0xdc>)
   82dd6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   82dd8:	4293      	cmp	r3, r2
   82dda:	d1ce      	bne.n	82d7a <__smakebuf_r+0x36>
   82ddc:	89a3      	ldrh	r3, [r4, #12]
   82dde:	f44f 6680 	mov.w	r6, #1024	; 0x400
   82de2:	4333      	orrs	r3, r6
   82de4:	81a3      	strh	r3, [r4, #12]
   82de6:	64e6      	str	r6, [r4, #76]	; 0x4c
   82de8:	e7da      	b.n	82da0 <__smakebuf_r+0x5c>
   82dea:	4628      	mov	r0, r5
   82dec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   82df0:	f000 ff7a 	bl	83ce8 <_isatty_r>
   82df4:	2800      	cmp	r0, #0
   82df6:	d0e3      	beq.n	82dc0 <__smakebuf_r+0x7c>
   82df8:	89a3      	ldrh	r3, [r4, #12]
   82dfa:	f043 0301 	orr.w	r3, r3, #1
   82dfe:	81a3      	strh	r3, [r4, #12]
   82e00:	e7de      	b.n	82dc0 <__smakebuf_r+0x7c>
   82e02:	059a      	lsls	r2, r3, #22
   82e04:	d4dc      	bmi.n	82dc0 <__smakebuf_r+0x7c>
   82e06:	f104 0243 	add.w	r2, r4, #67	; 0x43
   82e0a:	f043 0302 	orr.w	r3, r3, #2
   82e0e:	2101      	movs	r1, #1
   82e10:	81a3      	strh	r3, [r4, #12]
   82e12:	6022      	str	r2, [r4, #0]
   82e14:	6122      	str	r2, [r4, #16]
   82e16:	6161      	str	r1, [r4, #20]
   82e18:	e7d2      	b.n	82dc0 <__smakebuf_r+0x7c>
   82e1a:	bf00      	nop
   82e1c:	000825a5 	.word	0x000825a5
   82e20:	00083a01 	.word	0x00083a01

00082e24 <malloc>:
   82e24:	4b02      	ldr	r3, [pc, #8]	; (82e30 <malloc+0xc>)
   82e26:	4601      	mov	r1, r0
   82e28:	6818      	ldr	r0, [r3, #0]
   82e2a:	f000 b803 	b.w	82e34 <_malloc_r>
   82e2e:	bf00      	nop
   82e30:	20070568 	.word	0x20070568

00082e34 <_malloc_r>:
   82e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82e38:	f101 050b 	add.w	r5, r1, #11
   82e3c:	2d16      	cmp	r5, #22
   82e3e:	b083      	sub	sp, #12
   82e40:	4606      	mov	r6, r0
   82e42:	d927      	bls.n	82e94 <_malloc_r+0x60>
   82e44:	f035 0507 	bics.w	r5, r5, #7
   82e48:	d427      	bmi.n	82e9a <_malloc_r+0x66>
   82e4a:	42a9      	cmp	r1, r5
   82e4c:	d825      	bhi.n	82e9a <_malloc_r+0x66>
   82e4e:	4630      	mov	r0, r6
   82e50:	f000 fbb2 	bl	835b8 <__malloc_lock>
   82e54:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   82e58:	d226      	bcs.n	82ea8 <_malloc_r+0x74>
   82e5a:	4fc1      	ldr	r7, [pc, #772]	; (83160 <_malloc_r+0x32c>)
   82e5c:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
   82e60:	eb07 03cc 	add.w	r3, r7, ip, lsl #3
   82e64:	68dc      	ldr	r4, [r3, #12]
   82e66:	429c      	cmp	r4, r3
   82e68:	f000 81d2 	beq.w	83210 <_malloc_r+0x3dc>
   82e6c:	6863      	ldr	r3, [r4, #4]
   82e6e:	68e2      	ldr	r2, [r4, #12]
   82e70:	f023 0303 	bic.w	r3, r3, #3
   82e74:	4423      	add	r3, r4
   82e76:	6858      	ldr	r0, [r3, #4]
   82e78:	68a1      	ldr	r1, [r4, #8]
   82e7a:	f040 0501 	orr.w	r5, r0, #1
   82e7e:	60ca      	str	r2, [r1, #12]
   82e80:	4630      	mov	r0, r6
   82e82:	6091      	str	r1, [r2, #8]
   82e84:	605d      	str	r5, [r3, #4]
   82e86:	f000 fb99 	bl	835bc <__malloc_unlock>
   82e8a:	3408      	adds	r4, #8
   82e8c:	4620      	mov	r0, r4
   82e8e:	b003      	add	sp, #12
   82e90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82e94:	2510      	movs	r5, #16
   82e96:	42a9      	cmp	r1, r5
   82e98:	d9d9      	bls.n	82e4e <_malloc_r+0x1a>
   82e9a:	2400      	movs	r4, #0
   82e9c:	230c      	movs	r3, #12
   82e9e:	4620      	mov	r0, r4
   82ea0:	6033      	str	r3, [r6, #0]
   82ea2:	b003      	add	sp, #12
   82ea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82ea8:	ea5f 2c55 	movs.w	ip, r5, lsr #9
   82eac:	f000 8089 	beq.w	82fc2 <_malloc_r+0x18e>
   82eb0:	f1bc 0f04 	cmp.w	ip, #4
   82eb4:	f200 8160 	bhi.w	83178 <_malloc_r+0x344>
   82eb8:	ea4f 1c95 	mov.w	ip, r5, lsr #6
   82ebc:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
   82ec0:	ea4f 014c 	mov.w	r1, ip, lsl #1
   82ec4:	4fa6      	ldr	r7, [pc, #664]	; (83160 <_malloc_r+0x32c>)
   82ec6:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   82eca:	68cc      	ldr	r4, [r1, #12]
   82ecc:	42a1      	cmp	r1, r4
   82ece:	d105      	bne.n	82edc <_malloc_r+0xa8>
   82ed0:	e00c      	b.n	82eec <_malloc_r+0xb8>
   82ed2:	2b00      	cmp	r3, #0
   82ed4:	da79      	bge.n	82fca <_malloc_r+0x196>
   82ed6:	68e4      	ldr	r4, [r4, #12]
   82ed8:	42a1      	cmp	r1, r4
   82eda:	d007      	beq.n	82eec <_malloc_r+0xb8>
   82edc:	6862      	ldr	r2, [r4, #4]
   82ede:	f022 0203 	bic.w	r2, r2, #3
   82ee2:	1b53      	subs	r3, r2, r5
   82ee4:	2b0f      	cmp	r3, #15
   82ee6:	ddf4      	ble.n	82ed2 <_malloc_r+0x9e>
   82ee8:	f10c 3cff 	add.w	ip, ip, #4294967295
   82eec:	f10c 0c01 	add.w	ip, ip, #1
   82ef0:	4b9b      	ldr	r3, [pc, #620]	; (83160 <_malloc_r+0x32c>)
   82ef2:	693c      	ldr	r4, [r7, #16]
   82ef4:	f103 0e08 	add.w	lr, r3, #8
   82ef8:	4574      	cmp	r4, lr
   82efa:	f000 817e 	beq.w	831fa <_malloc_r+0x3c6>
   82efe:	6861      	ldr	r1, [r4, #4]
   82f00:	f021 0103 	bic.w	r1, r1, #3
   82f04:	1b4a      	subs	r2, r1, r5
   82f06:	2a0f      	cmp	r2, #15
   82f08:	f300 8164 	bgt.w	831d4 <_malloc_r+0x3a0>
   82f0c:	2a00      	cmp	r2, #0
   82f0e:	f8c3 e014 	str.w	lr, [r3, #20]
   82f12:	f8c3 e010 	str.w	lr, [r3, #16]
   82f16:	da69      	bge.n	82fec <_malloc_r+0x1b8>
   82f18:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   82f1c:	f080 813a 	bcs.w	83194 <_malloc_r+0x360>
   82f20:	08c9      	lsrs	r1, r1, #3
   82f22:	108a      	asrs	r2, r1, #2
   82f24:	f04f 0801 	mov.w	r8, #1
   82f28:	fa08 f802 	lsl.w	r8, r8, r2
   82f2c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   82f30:	685a      	ldr	r2, [r3, #4]
   82f32:	6888      	ldr	r0, [r1, #8]
   82f34:	ea48 0202 	orr.w	r2, r8, r2
   82f38:	60a0      	str	r0, [r4, #8]
   82f3a:	60e1      	str	r1, [r4, #12]
   82f3c:	605a      	str	r2, [r3, #4]
   82f3e:	608c      	str	r4, [r1, #8]
   82f40:	60c4      	str	r4, [r0, #12]
   82f42:	ea4f 03ac 	mov.w	r3, ip, asr #2
   82f46:	2001      	movs	r0, #1
   82f48:	4098      	lsls	r0, r3
   82f4a:	4290      	cmp	r0, r2
   82f4c:	d85b      	bhi.n	83006 <_malloc_r+0x1d2>
   82f4e:	4202      	tst	r2, r0
   82f50:	d106      	bne.n	82f60 <_malloc_r+0x12c>
   82f52:	f02c 0c03 	bic.w	ip, ip, #3
   82f56:	0040      	lsls	r0, r0, #1
   82f58:	4202      	tst	r2, r0
   82f5a:	f10c 0c04 	add.w	ip, ip, #4
   82f5e:	d0fa      	beq.n	82f56 <_malloc_r+0x122>
   82f60:	eb07 08cc 	add.w	r8, r7, ip, lsl #3
   82f64:	4644      	mov	r4, r8
   82f66:	46e1      	mov	r9, ip
   82f68:	68e3      	ldr	r3, [r4, #12]
   82f6a:	429c      	cmp	r4, r3
   82f6c:	d107      	bne.n	82f7e <_malloc_r+0x14a>
   82f6e:	e146      	b.n	831fe <_malloc_r+0x3ca>
   82f70:	2a00      	cmp	r2, #0
   82f72:	f280 8157 	bge.w	83224 <_malloc_r+0x3f0>
   82f76:	68db      	ldr	r3, [r3, #12]
   82f78:	429c      	cmp	r4, r3
   82f7a:	f000 8140 	beq.w	831fe <_malloc_r+0x3ca>
   82f7e:	6859      	ldr	r1, [r3, #4]
   82f80:	f021 0103 	bic.w	r1, r1, #3
   82f84:	1b4a      	subs	r2, r1, r5
   82f86:	2a0f      	cmp	r2, #15
   82f88:	ddf2      	ble.n	82f70 <_malloc_r+0x13c>
   82f8a:	461c      	mov	r4, r3
   82f8c:	f854 cf08 	ldr.w	ip, [r4, #8]!
   82f90:	68d9      	ldr	r1, [r3, #12]
   82f92:	f045 0901 	orr.w	r9, r5, #1
   82f96:	f042 0801 	orr.w	r8, r2, #1
   82f9a:	441d      	add	r5, r3
   82f9c:	f8c3 9004 	str.w	r9, [r3, #4]
   82fa0:	4630      	mov	r0, r6
   82fa2:	f8cc 100c 	str.w	r1, [ip, #12]
   82fa6:	f8c1 c008 	str.w	ip, [r1, #8]
   82faa:	617d      	str	r5, [r7, #20]
   82fac:	613d      	str	r5, [r7, #16]
   82fae:	f8c5 e00c 	str.w	lr, [r5, #12]
   82fb2:	f8c5 e008 	str.w	lr, [r5, #8]
   82fb6:	f8c5 8004 	str.w	r8, [r5, #4]
   82fba:	50aa      	str	r2, [r5, r2]
   82fbc:	f000 fafe 	bl	835bc <__malloc_unlock>
   82fc0:	e764      	b.n	82e8c <_malloc_r+0x58>
   82fc2:	217e      	movs	r1, #126	; 0x7e
   82fc4:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
   82fc8:	e77c      	b.n	82ec4 <_malloc_r+0x90>
   82fca:	4422      	add	r2, r4
   82fcc:	6850      	ldr	r0, [r2, #4]
   82fce:	68e3      	ldr	r3, [r4, #12]
   82fd0:	68a1      	ldr	r1, [r4, #8]
   82fd2:	f040 0501 	orr.w	r5, r0, #1
   82fd6:	60cb      	str	r3, [r1, #12]
   82fd8:	4630      	mov	r0, r6
   82fda:	6099      	str	r1, [r3, #8]
   82fdc:	6055      	str	r5, [r2, #4]
   82fde:	f000 faed 	bl	835bc <__malloc_unlock>
   82fe2:	3408      	adds	r4, #8
   82fe4:	4620      	mov	r0, r4
   82fe6:	b003      	add	sp, #12
   82fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82fec:	4421      	add	r1, r4
   82fee:	684b      	ldr	r3, [r1, #4]
   82ff0:	4630      	mov	r0, r6
   82ff2:	f043 0301 	orr.w	r3, r3, #1
   82ff6:	604b      	str	r3, [r1, #4]
   82ff8:	f000 fae0 	bl	835bc <__malloc_unlock>
   82ffc:	3408      	adds	r4, #8
   82ffe:	4620      	mov	r0, r4
   83000:	b003      	add	sp, #12
   83002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83006:	68bc      	ldr	r4, [r7, #8]
   83008:	6863      	ldr	r3, [r4, #4]
   8300a:	f023 0903 	bic.w	r9, r3, #3
   8300e:	45a9      	cmp	r9, r5
   83010:	d304      	bcc.n	8301c <_malloc_r+0x1e8>
   83012:	ebc5 0309 	rsb	r3, r5, r9
   83016:	2b0f      	cmp	r3, #15
   83018:	f300 8091 	bgt.w	8313e <_malloc_r+0x30a>
   8301c:	4b51      	ldr	r3, [pc, #324]	; (83164 <_malloc_r+0x330>)
   8301e:	4a52      	ldr	r2, [pc, #328]	; (83168 <_malloc_r+0x334>)
   83020:	6819      	ldr	r1, [r3, #0]
   83022:	6813      	ldr	r3, [r2, #0]
   83024:	eb05 0a01 	add.w	sl, r5, r1
   83028:	3301      	adds	r3, #1
   8302a:	eb04 0b09 	add.w	fp, r4, r9
   8302e:	f000 8161 	beq.w	832f4 <_malloc_r+0x4c0>
   83032:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
   83036:	f10a 0a0f 	add.w	sl, sl, #15
   8303a:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
   8303e:	f02a 0a0f 	bic.w	sl, sl, #15
   83042:	4630      	mov	r0, r6
   83044:	4651      	mov	r1, sl
   83046:	9201      	str	r2, [sp, #4]
   83048:	f000 fc9a 	bl	83980 <_sbrk_r>
   8304c:	f1b0 3fff 	cmp.w	r0, #4294967295
   83050:	4680      	mov	r8, r0
   83052:	9a01      	ldr	r2, [sp, #4]
   83054:	f000 8101 	beq.w	8325a <_malloc_r+0x426>
   83058:	4583      	cmp	fp, r0
   8305a:	f200 80fb 	bhi.w	83254 <_malloc_r+0x420>
   8305e:	f8df c114 	ldr.w	ip, [pc, #276]	; 83174 <_malloc_r+0x340>
   83062:	45c3      	cmp	fp, r8
   83064:	f8dc 3000 	ldr.w	r3, [ip]
   83068:	4453      	add	r3, sl
   8306a:	f8cc 3000 	str.w	r3, [ip]
   8306e:	f000 814a 	beq.w	83306 <_malloc_r+0x4d2>
   83072:	6812      	ldr	r2, [r2, #0]
   83074:	493c      	ldr	r1, [pc, #240]	; (83168 <_malloc_r+0x334>)
   83076:	3201      	adds	r2, #1
   83078:	bf1b      	ittet	ne
   8307a:	ebcb 0b08 	rsbne	fp, fp, r8
   8307e:	445b      	addne	r3, fp
   83080:	f8c1 8000 	streq.w	r8, [r1]
   83084:	f8cc 3000 	strne.w	r3, [ip]
   83088:	f018 0307 	ands.w	r3, r8, #7
   8308c:	f000 8114 	beq.w	832b8 <_malloc_r+0x484>
   83090:	f1c3 0208 	rsb	r2, r3, #8
   83094:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
   83098:	4490      	add	r8, r2
   8309a:	3308      	adds	r3, #8
   8309c:	44c2      	add	sl, r8
   8309e:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
   830a2:	ebca 0a03 	rsb	sl, sl, r3
   830a6:	4651      	mov	r1, sl
   830a8:	4630      	mov	r0, r6
   830aa:	f8cd c004 	str.w	ip, [sp, #4]
   830ae:	f000 fc67 	bl	83980 <_sbrk_r>
   830b2:	1c43      	adds	r3, r0, #1
   830b4:	f8dd c004 	ldr.w	ip, [sp, #4]
   830b8:	f000 8135 	beq.w	83326 <_malloc_r+0x4f2>
   830bc:	ebc8 0200 	rsb	r2, r8, r0
   830c0:	4452      	add	r2, sl
   830c2:	f042 0201 	orr.w	r2, r2, #1
   830c6:	f8dc 3000 	ldr.w	r3, [ip]
   830ca:	42bc      	cmp	r4, r7
   830cc:	4453      	add	r3, sl
   830ce:	f8c7 8008 	str.w	r8, [r7, #8]
   830d2:	f8cc 3000 	str.w	r3, [ip]
   830d6:	f8c8 2004 	str.w	r2, [r8, #4]
   830da:	f8df a098 	ldr.w	sl, [pc, #152]	; 83174 <_malloc_r+0x340>
   830de:	d015      	beq.n	8310c <_malloc_r+0x2d8>
   830e0:	f1b9 0f0f 	cmp.w	r9, #15
   830e4:	f240 80eb 	bls.w	832be <_malloc_r+0x48a>
   830e8:	6861      	ldr	r1, [r4, #4]
   830ea:	f1a9 020c 	sub.w	r2, r9, #12
   830ee:	f022 0207 	bic.w	r2, r2, #7
   830f2:	f001 0101 	and.w	r1, r1, #1
   830f6:	ea42 0e01 	orr.w	lr, r2, r1
   830fa:	2005      	movs	r0, #5
   830fc:	18a1      	adds	r1, r4, r2
   830fe:	2a0f      	cmp	r2, #15
   83100:	f8c4 e004 	str.w	lr, [r4, #4]
   83104:	6048      	str	r0, [r1, #4]
   83106:	6088      	str	r0, [r1, #8]
   83108:	f200 8111 	bhi.w	8332e <_malloc_r+0x4fa>
   8310c:	4a17      	ldr	r2, [pc, #92]	; (8316c <_malloc_r+0x338>)
   8310e:	68bc      	ldr	r4, [r7, #8]
   83110:	6811      	ldr	r1, [r2, #0]
   83112:	428b      	cmp	r3, r1
   83114:	bf88      	it	hi
   83116:	6013      	strhi	r3, [r2, #0]
   83118:	4a15      	ldr	r2, [pc, #84]	; (83170 <_malloc_r+0x33c>)
   8311a:	6811      	ldr	r1, [r2, #0]
   8311c:	428b      	cmp	r3, r1
   8311e:	bf88      	it	hi
   83120:	6013      	strhi	r3, [r2, #0]
   83122:	6862      	ldr	r2, [r4, #4]
   83124:	f022 0203 	bic.w	r2, r2, #3
   83128:	4295      	cmp	r5, r2
   8312a:	ebc5 0302 	rsb	r3, r5, r2
   8312e:	d801      	bhi.n	83134 <_malloc_r+0x300>
   83130:	2b0f      	cmp	r3, #15
   83132:	dc04      	bgt.n	8313e <_malloc_r+0x30a>
   83134:	4630      	mov	r0, r6
   83136:	f000 fa41 	bl	835bc <__malloc_unlock>
   8313a:	2400      	movs	r4, #0
   8313c:	e6a6      	b.n	82e8c <_malloc_r+0x58>
   8313e:	f045 0201 	orr.w	r2, r5, #1
   83142:	f043 0301 	orr.w	r3, r3, #1
   83146:	4425      	add	r5, r4
   83148:	6062      	str	r2, [r4, #4]
   8314a:	4630      	mov	r0, r6
   8314c:	60bd      	str	r5, [r7, #8]
   8314e:	606b      	str	r3, [r5, #4]
   83150:	f000 fa34 	bl	835bc <__malloc_unlock>
   83154:	3408      	adds	r4, #8
   83156:	4620      	mov	r0, r4
   83158:	b003      	add	sp, #12
   8315a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8315e:	bf00      	nop
   83160:	20070590 	.word	0x20070590
   83164:	20070ae4 	.word	0x20070ae4
   83168:	2007099c 	.word	0x2007099c
   8316c:	20070ae0 	.word	0x20070ae0
   83170:	20070adc 	.word	0x20070adc
   83174:	20070ae8 	.word	0x20070ae8
   83178:	f1bc 0f14 	cmp.w	ip, #20
   8317c:	d961      	bls.n	83242 <_malloc_r+0x40e>
   8317e:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
   83182:	f200 808f 	bhi.w	832a4 <_malloc_r+0x470>
   83186:	ea4f 3c15 	mov.w	ip, r5, lsr #12
   8318a:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
   8318e:	ea4f 014c 	mov.w	r1, ip, lsl #1
   83192:	e697      	b.n	82ec4 <_malloc_r+0x90>
   83194:	0a4b      	lsrs	r3, r1, #9
   83196:	2b04      	cmp	r3, #4
   83198:	d958      	bls.n	8324c <_malloc_r+0x418>
   8319a:	2b14      	cmp	r3, #20
   8319c:	f200 80ad 	bhi.w	832fa <_malloc_r+0x4c6>
   831a0:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   831a4:	0050      	lsls	r0, r2, #1
   831a6:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   831aa:	6883      	ldr	r3, [r0, #8]
   831ac:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 83368 <_malloc_r+0x534>
   831b0:	4283      	cmp	r3, r0
   831b2:	f000 808a 	beq.w	832ca <_malloc_r+0x496>
   831b6:	685a      	ldr	r2, [r3, #4]
   831b8:	f022 0203 	bic.w	r2, r2, #3
   831bc:	4291      	cmp	r1, r2
   831be:	d202      	bcs.n	831c6 <_malloc_r+0x392>
   831c0:	689b      	ldr	r3, [r3, #8]
   831c2:	4298      	cmp	r0, r3
   831c4:	d1f7      	bne.n	831b6 <_malloc_r+0x382>
   831c6:	68d9      	ldr	r1, [r3, #12]
   831c8:	687a      	ldr	r2, [r7, #4]
   831ca:	60e1      	str	r1, [r4, #12]
   831cc:	60a3      	str	r3, [r4, #8]
   831ce:	608c      	str	r4, [r1, #8]
   831d0:	60dc      	str	r4, [r3, #12]
   831d2:	e6b6      	b.n	82f42 <_malloc_r+0x10e>
   831d4:	f045 0701 	orr.w	r7, r5, #1
   831d8:	f042 0101 	orr.w	r1, r2, #1
   831dc:	4425      	add	r5, r4
   831de:	6067      	str	r7, [r4, #4]
   831e0:	4630      	mov	r0, r6
   831e2:	615d      	str	r5, [r3, #20]
   831e4:	611d      	str	r5, [r3, #16]
   831e6:	f8c5 e00c 	str.w	lr, [r5, #12]
   831ea:	f8c5 e008 	str.w	lr, [r5, #8]
   831ee:	6069      	str	r1, [r5, #4]
   831f0:	50aa      	str	r2, [r5, r2]
   831f2:	3408      	adds	r4, #8
   831f4:	f000 f9e2 	bl	835bc <__malloc_unlock>
   831f8:	e648      	b.n	82e8c <_malloc_r+0x58>
   831fa:	685a      	ldr	r2, [r3, #4]
   831fc:	e6a1      	b.n	82f42 <_malloc_r+0x10e>
   831fe:	f109 0901 	add.w	r9, r9, #1
   83202:	f019 0f03 	tst.w	r9, #3
   83206:	f104 0408 	add.w	r4, r4, #8
   8320a:	f47f aead 	bne.w	82f68 <_malloc_r+0x134>
   8320e:	e02d      	b.n	8326c <_malloc_r+0x438>
   83210:	f104 0308 	add.w	r3, r4, #8
   83214:	6964      	ldr	r4, [r4, #20]
   83216:	42a3      	cmp	r3, r4
   83218:	bf08      	it	eq
   8321a:	f10c 0c02 	addeq.w	ip, ip, #2
   8321e:	f43f ae67 	beq.w	82ef0 <_malloc_r+0xbc>
   83222:	e623      	b.n	82e6c <_malloc_r+0x38>
   83224:	4419      	add	r1, r3
   83226:	6848      	ldr	r0, [r1, #4]
   83228:	461c      	mov	r4, r3
   8322a:	f854 2f08 	ldr.w	r2, [r4, #8]!
   8322e:	68db      	ldr	r3, [r3, #12]
   83230:	f040 0501 	orr.w	r5, r0, #1
   83234:	604d      	str	r5, [r1, #4]
   83236:	4630      	mov	r0, r6
   83238:	60d3      	str	r3, [r2, #12]
   8323a:	609a      	str	r2, [r3, #8]
   8323c:	f000 f9be 	bl	835bc <__malloc_unlock>
   83240:	e624      	b.n	82e8c <_malloc_r+0x58>
   83242:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
   83246:	ea4f 014c 	mov.w	r1, ip, lsl #1
   8324a:	e63b      	b.n	82ec4 <_malloc_r+0x90>
   8324c:	098a      	lsrs	r2, r1, #6
   8324e:	3238      	adds	r2, #56	; 0x38
   83250:	0050      	lsls	r0, r2, #1
   83252:	e7a8      	b.n	831a6 <_malloc_r+0x372>
   83254:	42bc      	cmp	r4, r7
   83256:	f43f af02 	beq.w	8305e <_malloc_r+0x22a>
   8325a:	68bc      	ldr	r4, [r7, #8]
   8325c:	6862      	ldr	r2, [r4, #4]
   8325e:	f022 0203 	bic.w	r2, r2, #3
   83262:	e761      	b.n	83128 <_malloc_r+0x2f4>
   83264:	f8d8 8000 	ldr.w	r8, [r8]
   83268:	4598      	cmp	r8, r3
   8326a:	d17a      	bne.n	83362 <_malloc_r+0x52e>
   8326c:	f01c 0f03 	tst.w	ip, #3
   83270:	f1a8 0308 	sub.w	r3, r8, #8
   83274:	f10c 3cff 	add.w	ip, ip, #4294967295
   83278:	d1f4      	bne.n	83264 <_malloc_r+0x430>
   8327a:	687b      	ldr	r3, [r7, #4]
   8327c:	ea23 0300 	bic.w	r3, r3, r0
   83280:	607b      	str	r3, [r7, #4]
   83282:	0040      	lsls	r0, r0, #1
   83284:	4298      	cmp	r0, r3
   83286:	f63f aebe 	bhi.w	83006 <_malloc_r+0x1d2>
   8328a:	2800      	cmp	r0, #0
   8328c:	f43f aebb 	beq.w	83006 <_malloc_r+0x1d2>
   83290:	4203      	tst	r3, r0
   83292:	46cc      	mov	ip, r9
   83294:	f47f ae64 	bne.w	82f60 <_malloc_r+0x12c>
   83298:	0040      	lsls	r0, r0, #1
   8329a:	4203      	tst	r3, r0
   8329c:	f10c 0c04 	add.w	ip, ip, #4
   832a0:	d0fa      	beq.n	83298 <_malloc_r+0x464>
   832a2:	e65d      	b.n	82f60 <_malloc_r+0x12c>
   832a4:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
   832a8:	d819      	bhi.n	832de <_malloc_r+0x4aa>
   832aa:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
   832ae:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
   832b2:	ea4f 014c 	mov.w	r1, ip, lsl #1
   832b6:	e605      	b.n	82ec4 <_malloc_r+0x90>
   832b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   832bc:	e6ee      	b.n	8309c <_malloc_r+0x268>
   832be:	2301      	movs	r3, #1
   832c0:	f8c8 3004 	str.w	r3, [r8, #4]
   832c4:	4644      	mov	r4, r8
   832c6:	2200      	movs	r2, #0
   832c8:	e72e      	b.n	83128 <_malloc_r+0x2f4>
   832ca:	1092      	asrs	r2, r2, #2
   832cc:	2001      	movs	r0, #1
   832ce:	4090      	lsls	r0, r2
   832d0:	f8d8 2004 	ldr.w	r2, [r8, #4]
   832d4:	4619      	mov	r1, r3
   832d6:	4302      	orrs	r2, r0
   832d8:	f8c8 2004 	str.w	r2, [r8, #4]
   832dc:	e775      	b.n	831ca <_malloc_r+0x396>
   832de:	f240 5354 	movw	r3, #1364	; 0x554
   832e2:	459c      	cmp	ip, r3
   832e4:	d81b      	bhi.n	8331e <_malloc_r+0x4ea>
   832e6:	ea4f 4c95 	mov.w	ip, r5, lsr #18
   832ea:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
   832ee:	ea4f 014c 	mov.w	r1, ip, lsl #1
   832f2:	e5e7      	b.n	82ec4 <_malloc_r+0x90>
   832f4:	f10a 0a10 	add.w	sl, sl, #16
   832f8:	e6a3      	b.n	83042 <_malloc_r+0x20e>
   832fa:	2b54      	cmp	r3, #84	; 0x54
   832fc:	d81f      	bhi.n	8333e <_malloc_r+0x50a>
   832fe:	0b0a      	lsrs	r2, r1, #12
   83300:	326e      	adds	r2, #110	; 0x6e
   83302:	0050      	lsls	r0, r2, #1
   83304:	e74f      	b.n	831a6 <_malloc_r+0x372>
   83306:	f3cb 010b 	ubfx	r1, fp, #0, #12
   8330a:	2900      	cmp	r1, #0
   8330c:	f47f aeb1 	bne.w	83072 <_malloc_r+0x23e>
   83310:	eb0a 0109 	add.w	r1, sl, r9
   83314:	68ba      	ldr	r2, [r7, #8]
   83316:	f041 0101 	orr.w	r1, r1, #1
   8331a:	6051      	str	r1, [r2, #4]
   8331c:	e6f6      	b.n	8310c <_malloc_r+0x2d8>
   8331e:	21fc      	movs	r1, #252	; 0xfc
   83320:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
   83324:	e5ce      	b.n	82ec4 <_malloc_r+0x90>
   83326:	2201      	movs	r2, #1
   83328:	f04f 0a00 	mov.w	sl, #0
   8332c:	e6cb      	b.n	830c6 <_malloc_r+0x292>
   8332e:	f104 0108 	add.w	r1, r4, #8
   83332:	4630      	mov	r0, r6
   83334:	f7ff fa80 	bl	82838 <_free_r>
   83338:	f8da 3000 	ldr.w	r3, [sl]
   8333c:	e6e6      	b.n	8310c <_malloc_r+0x2d8>
   8333e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   83342:	d803      	bhi.n	8334c <_malloc_r+0x518>
   83344:	0bca      	lsrs	r2, r1, #15
   83346:	3277      	adds	r2, #119	; 0x77
   83348:	0050      	lsls	r0, r2, #1
   8334a:	e72c      	b.n	831a6 <_malloc_r+0x372>
   8334c:	f240 5254 	movw	r2, #1364	; 0x554
   83350:	4293      	cmp	r3, r2
   83352:	d803      	bhi.n	8335c <_malloc_r+0x528>
   83354:	0c8a      	lsrs	r2, r1, #18
   83356:	327c      	adds	r2, #124	; 0x7c
   83358:	0050      	lsls	r0, r2, #1
   8335a:	e724      	b.n	831a6 <_malloc_r+0x372>
   8335c:	20fc      	movs	r0, #252	; 0xfc
   8335e:	227e      	movs	r2, #126	; 0x7e
   83360:	e721      	b.n	831a6 <_malloc_r+0x372>
   83362:	687b      	ldr	r3, [r7, #4]
   83364:	e78d      	b.n	83282 <_malloc_r+0x44e>
   83366:	bf00      	nop
   83368:	20070590 	.word	0x20070590

0008336c <memchr>:
   8336c:	0783      	lsls	r3, r0, #30
   8336e:	b470      	push	{r4, r5, r6}
   83370:	b2c9      	uxtb	r1, r1
   83372:	d040      	beq.n	833f6 <memchr+0x8a>
   83374:	1e54      	subs	r4, r2, #1
   83376:	b32a      	cbz	r2, 833c4 <memchr+0x58>
   83378:	7803      	ldrb	r3, [r0, #0]
   8337a:	428b      	cmp	r3, r1
   8337c:	d023      	beq.n	833c6 <memchr+0x5a>
   8337e:	1c43      	adds	r3, r0, #1
   83380:	e004      	b.n	8338c <memchr+0x20>
   83382:	b1fc      	cbz	r4, 833c4 <memchr+0x58>
   83384:	7805      	ldrb	r5, [r0, #0]
   83386:	4614      	mov	r4, r2
   83388:	428d      	cmp	r5, r1
   8338a:	d01c      	beq.n	833c6 <memchr+0x5a>
   8338c:	f013 0f03 	tst.w	r3, #3
   83390:	4618      	mov	r0, r3
   83392:	f104 32ff 	add.w	r2, r4, #4294967295
   83396:	f103 0301 	add.w	r3, r3, #1
   8339a:	d1f2      	bne.n	83382 <memchr+0x16>
   8339c:	2c03      	cmp	r4, #3
   8339e:	d814      	bhi.n	833ca <memchr+0x5e>
   833a0:	1e65      	subs	r5, r4, #1
   833a2:	b354      	cbz	r4, 833fa <memchr+0x8e>
   833a4:	7803      	ldrb	r3, [r0, #0]
   833a6:	428b      	cmp	r3, r1
   833a8:	d00d      	beq.n	833c6 <memchr+0x5a>
   833aa:	1c42      	adds	r2, r0, #1
   833ac:	2300      	movs	r3, #0
   833ae:	e002      	b.n	833b6 <memchr+0x4a>
   833b0:	7804      	ldrb	r4, [r0, #0]
   833b2:	428c      	cmp	r4, r1
   833b4:	d007      	beq.n	833c6 <memchr+0x5a>
   833b6:	42ab      	cmp	r3, r5
   833b8:	4610      	mov	r0, r2
   833ba:	f103 0301 	add.w	r3, r3, #1
   833be:	f102 0201 	add.w	r2, r2, #1
   833c2:	d1f5      	bne.n	833b0 <memchr+0x44>
   833c4:	2000      	movs	r0, #0
   833c6:	bc70      	pop	{r4, r5, r6}
   833c8:	4770      	bx	lr
   833ca:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
   833ce:	4603      	mov	r3, r0
   833d0:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   833d4:	681a      	ldr	r2, [r3, #0]
   833d6:	4618      	mov	r0, r3
   833d8:	4072      	eors	r2, r6
   833da:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
   833de:	ea25 0202 	bic.w	r2, r5, r2
   833e2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   833e6:	f103 0304 	add.w	r3, r3, #4
   833ea:	d1d9      	bne.n	833a0 <memchr+0x34>
   833ec:	3c04      	subs	r4, #4
   833ee:	2c03      	cmp	r4, #3
   833f0:	4618      	mov	r0, r3
   833f2:	d8ef      	bhi.n	833d4 <memchr+0x68>
   833f4:	e7d4      	b.n	833a0 <memchr+0x34>
   833f6:	4614      	mov	r4, r2
   833f8:	e7d0      	b.n	8339c <memchr+0x30>
   833fa:	4620      	mov	r0, r4
   833fc:	e7e3      	b.n	833c6 <memchr+0x5a>
   833fe:	bf00      	nop

00083400 <memcpy>:
   83400:	4684      	mov	ip, r0
   83402:	ea41 0300 	orr.w	r3, r1, r0
   83406:	f013 0303 	ands.w	r3, r3, #3
   8340a:	d149      	bne.n	834a0 <memcpy+0xa0>
   8340c:	3a40      	subs	r2, #64	; 0x40
   8340e:	d323      	bcc.n	83458 <memcpy+0x58>
   83410:	680b      	ldr	r3, [r1, #0]
   83412:	6003      	str	r3, [r0, #0]
   83414:	684b      	ldr	r3, [r1, #4]
   83416:	6043      	str	r3, [r0, #4]
   83418:	688b      	ldr	r3, [r1, #8]
   8341a:	6083      	str	r3, [r0, #8]
   8341c:	68cb      	ldr	r3, [r1, #12]
   8341e:	60c3      	str	r3, [r0, #12]
   83420:	690b      	ldr	r3, [r1, #16]
   83422:	6103      	str	r3, [r0, #16]
   83424:	694b      	ldr	r3, [r1, #20]
   83426:	6143      	str	r3, [r0, #20]
   83428:	698b      	ldr	r3, [r1, #24]
   8342a:	6183      	str	r3, [r0, #24]
   8342c:	69cb      	ldr	r3, [r1, #28]
   8342e:	61c3      	str	r3, [r0, #28]
   83430:	6a0b      	ldr	r3, [r1, #32]
   83432:	6203      	str	r3, [r0, #32]
   83434:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   83436:	6243      	str	r3, [r0, #36]	; 0x24
   83438:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   8343a:	6283      	str	r3, [r0, #40]	; 0x28
   8343c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   8343e:	62c3      	str	r3, [r0, #44]	; 0x2c
   83440:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   83442:	6303      	str	r3, [r0, #48]	; 0x30
   83444:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   83446:	6343      	str	r3, [r0, #52]	; 0x34
   83448:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   8344a:	6383      	str	r3, [r0, #56]	; 0x38
   8344c:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   8344e:	63c3      	str	r3, [r0, #60]	; 0x3c
   83450:	3040      	adds	r0, #64	; 0x40
   83452:	3140      	adds	r1, #64	; 0x40
   83454:	3a40      	subs	r2, #64	; 0x40
   83456:	d2db      	bcs.n	83410 <memcpy+0x10>
   83458:	3230      	adds	r2, #48	; 0x30
   8345a:	d30b      	bcc.n	83474 <memcpy+0x74>
   8345c:	680b      	ldr	r3, [r1, #0]
   8345e:	6003      	str	r3, [r0, #0]
   83460:	684b      	ldr	r3, [r1, #4]
   83462:	6043      	str	r3, [r0, #4]
   83464:	688b      	ldr	r3, [r1, #8]
   83466:	6083      	str	r3, [r0, #8]
   83468:	68cb      	ldr	r3, [r1, #12]
   8346a:	60c3      	str	r3, [r0, #12]
   8346c:	3010      	adds	r0, #16
   8346e:	3110      	adds	r1, #16
   83470:	3a10      	subs	r2, #16
   83472:	d2f3      	bcs.n	8345c <memcpy+0x5c>
   83474:	320c      	adds	r2, #12
   83476:	d305      	bcc.n	83484 <memcpy+0x84>
   83478:	f851 3b04 	ldr.w	r3, [r1], #4
   8347c:	f840 3b04 	str.w	r3, [r0], #4
   83480:	3a04      	subs	r2, #4
   83482:	d2f9      	bcs.n	83478 <memcpy+0x78>
   83484:	3204      	adds	r2, #4
   83486:	d008      	beq.n	8349a <memcpy+0x9a>
   83488:	07d2      	lsls	r2, r2, #31
   8348a:	bf1c      	itt	ne
   8348c:	f811 3b01 	ldrbne.w	r3, [r1], #1
   83490:	f800 3b01 	strbne.w	r3, [r0], #1
   83494:	d301      	bcc.n	8349a <memcpy+0x9a>
   83496:	880b      	ldrh	r3, [r1, #0]
   83498:	8003      	strh	r3, [r0, #0]
   8349a:	4660      	mov	r0, ip
   8349c:	4770      	bx	lr
   8349e:	bf00      	nop
   834a0:	2a08      	cmp	r2, #8
   834a2:	d313      	bcc.n	834cc <memcpy+0xcc>
   834a4:	078b      	lsls	r3, r1, #30
   834a6:	d0b1      	beq.n	8340c <memcpy+0xc>
   834a8:	f010 0303 	ands.w	r3, r0, #3
   834ac:	d0ae      	beq.n	8340c <memcpy+0xc>
   834ae:	f1c3 0304 	rsb	r3, r3, #4
   834b2:	1ad2      	subs	r2, r2, r3
   834b4:	07db      	lsls	r3, r3, #31
   834b6:	bf1c      	itt	ne
   834b8:	f811 3b01 	ldrbne.w	r3, [r1], #1
   834bc:	f800 3b01 	strbne.w	r3, [r0], #1
   834c0:	d3a4      	bcc.n	8340c <memcpy+0xc>
   834c2:	f831 3b02 	ldrh.w	r3, [r1], #2
   834c6:	f820 3b02 	strh.w	r3, [r0], #2
   834ca:	e79f      	b.n	8340c <memcpy+0xc>
   834cc:	3a04      	subs	r2, #4
   834ce:	d3d9      	bcc.n	83484 <memcpy+0x84>
   834d0:	3a01      	subs	r2, #1
   834d2:	f811 3b01 	ldrb.w	r3, [r1], #1
   834d6:	f800 3b01 	strb.w	r3, [r0], #1
   834da:	d2f9      	bcs.n	834d0 <memcpy+0xd0>
   834dc:	780b      	ldrb	r3, [r1, #0]
   834de:	7003      	strb	r3, [r0, #0]
   834e0:	784b      	ldrb	r3, [r1, #1]
   834e2:	7043      	strb	r3, [r0, #1]
   834e4:	788b      	ldrb	r3, [r1, #2]
   834e6:	7083      	strb	r3, [r0, #2]
   834e8:	4660      	mov	r0, ip
   834ea:	4770      	bx	lr

000834ec <memmove>:
   834ec:	4288      	cmp	r0, r1
   834ee:	b4f0      	push	{r4, r5, r6, r7}
   834f0:	d910      	bls.n	83514 <memmove+0x28>
   834f2:	188c      	adds	r4, r1, r2
   834f4:	42a0      	cmp	r0, r4
   834f6:	d20d      	bcs.n	83514 <memmove+0x28>
   834f8:	1885      	adds	r5, r0, r2
   834fa:	1e53      	subs	r3, r2, #1
   834fc:	b142      	cbz	r2, 83510 <memmove+0x24>
   834fe:	4621      	mov	r1, r4
   83500:	462a      	mov	r2, r5
   83502:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
   83506:	3b01      	subs	r3, #1
   83508:	f802 4d01 	strb.w	r4, [r2, #-1]!
   8350c:	1c5c      	adds	r4, r3, #1
   8350e:	d1f8      	bne.n	83502 <memmove+0x16>
   83510:	bcf0      	pop	{r4, r5, r6, r7}
   83512:	4770      	bx	lr
   83514:	2a0f      	cmp	r2, #15
   83516:	d944      	bls.n	835a2 <memmove+0xb6>
   83518:	ea40 0301 	orr.w	r3, r0, r1
   8351c:	079b      	lsls	r3, r3, #30
   8351e:	d144      	bne.n	835aa <memmove+0xbe>
   83520:	f1a2 0710 	sub.w	r7, r2, #16
   83524:	093f      	lsrs	r7, r7, #4
   83526:	eb00 1607 	add.w	r6, r0, r7, lsl #4
   8352a:	3610      	adds	r6, #16
   8352c:	460c      	mov	r4, r1
   8352e:	4603      	mov	r3, r0
   83530:	6825      	ldr	r5, [r4, #0]
   83532:	3310      	adds	r3, #16
   83534:	f843 5c10 	str.w	r5, [r3, #-16]
   83538:	6865      	ldr	r5, [r4, #4]
   8353a:	3410      	adds	r4, #16
   8353c:	f843 5c0c 	str.w	r5, [r3, #-12]
   83540:	f854 5c08 	ldr.w	r5, [r4, #-8]
   83544:	f843 5c08 	str.w	r5, [r3, #-8]
   83548:	f854 5c04 	ldr.w	r5, [r4, #-4]
   8354c:	f843 5c04 	str.w	r5, [r3, #-4]
   83550:	42b3      	cmp	r3, r6
   83552:	d1ed      	bne.n	83530 <memmove+0x44>
   83554:	1c7b      	adds	r3, r7, #1
   83556:	f002 0c0f 	and.w	ip, r2, #15
   8355a:	011b      	lsls	r3, r3, #4
   8355c:	f1bc 0f03 	cmp.w	ip, #3
   83560:	4419      	add	r1, r3
   83562:	4403      	add	r3, r0
   83564:	d923      	bls.n	835ae <memmove+0xc2>
   83566:	460e      	mov	r6, r1
   83568:	461d      	mov	r5, r3
   8356a:	4664      	mov	r4, ip
   8356c:	f856 7b04 	ldr.w	r7, [r6], #4
   83570:	3c04      	subs	r4, #4
   83572:	2c03      	cmp	r4, #3
   83574:	f845 7b04 	str.w	r7, [r5], #4
   83578:	d8f8      	bhi.n	8356c <memmove+0x80>
   8357a:	f1ac 0404 	sub.w	r4, ip, #4
   8357e:	f024 0403 	bic.w	r4, r4, #3
   83582:	3404      	adds	r4, #4
   83584:	f002 0203 	and.w	r2, r2, #3
   83588:	4423      	add	r3, r4
   8358a:	4421      	add	r1, r4
   8358c:	2a00      	cmp	r2, #0
   8358e:	d0bf      	beq.n	83510 <memmove+0x24>
   83590:	441a      	add	r2, r3
   83592:	f811 4b01 	ldrb.w	r4, [r1], #1
   83596:	f803 4b01 	strb.w	r4, [r3], #1
   8359a:	4293      	cmp	r3, r2
   8359c:	d1f9      	bne.n	83592 <memmove+0xa6>
   8359e:	bcf0      	pop	{r4, r5, r6, r7}
   835a0:	4770      	bx	lr
   835a2:	4603      	mov	r3, r0
   835a4:	2a00      	cmp	r2, #0
   835a6:	d1f3      	bne.n	83590 <memmove+0xa4>
   835a8:	e7b2      	b.n	83510 <memmove+0x24>
   835aa:	4603      	mov	r3, r0
   835ac:	e7f0      	b.n	83590 <memmove+0xa4>
   835ae:	4662      	mov	r2, ip
   835b0:	2a00      	cmp	r2, #0
   835b2:	d1ed      	bne.n	83590 <memmove+0xa4>
   835b4:	e7ac      	b.n	83510 <memmove+0x24>
   835b6:	bf00      	nop

000835b8 <__malloc_lock>:
   835b8:	4770      	bx	lr
   835ba:	bf00      	nop

000835bc <__malloc_unlock>:
   835bc:	4770      	bx	lr
   835be:	bf00      	nop

000835c0 <_realloc_r>:
   835c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   835c4:	460c      	mov	r4, r1
   835c6:	b083      	sub	sp, #12
   835c8:	4690      	mov	r8, r2
   835ca:	4681      	mov	r9, r0
   835cc:	2900      	cmp	r1, #0
   835ce:	f000 80ba 	beq.w	83746 <_realloc_r+0x186>
   835d2:	f7ff fff1 	bl	835b8 <__malloc_lock>
   835d6:	f108 060b 	add.w	r6, r8, #11
   835da:	f854 3c04 	ldr.w	r3, [r4, #-4]
   835de:	2e16      	cmp	r6, #22
   835e0:	f023 0503 	bic.w	r5, r3, #3
   835e4:	f1a4 0708 	sub.w	r7, r4, #8
   835e8:	d84b      	bhi.n	83682 <_realloc_r+0xc2>
   835ea:	2110      	movs	r1, #16
   835ec:	460e      	mov	r6, r1
   835ee:	45b0      	cmp	r8, r6
   835f0:	d84c      	bhi.n	8368c <_realloc_r+0xcc>
   835f2:	428d      	cmp	r5, r1
   835f4:	da51      	bge.n	8369a <_realloc_r+0xda>
   835f6:	f8df b384 	ldr.w	fp, [pc, #900]	; 8397c <_realloc_r+0x3bc>
   835fa:	1978      	adds	r0, r7, r5
   835fc:	f8db e008 	ldr.w	lr, [fp, #8]
   83600:	4586      	cmp	lr, r0
   83602:	f000 80a6 	beq.w	83752 <_realloc_r+0x192>
   83606:	6842      	ldr	r2, [r0, #4]
   83608:	f022 0c01 	bic.w	ip, r2, #1
   8360c:	4484      	add	ip, r0
   8360e:	f8dc c004 	ldr.w	ip, [ip, #4]
   83612:	f01c 0f01 	tst.w	ip, #1
   83616:	d054      	beq.n	836c2 <_realloc_r+0x102>
   83618:	2200      	movs	r2, #0
   8361a:	4610      	mov	r0, r2
   8361c:	07db      	lsls	r3, r3, #31
   8361e:	d46f      	bmi.n	83700 <_realloc_r+0x140>
   83620:	f854 3c08 	ldr.w	r3, [r4, #-8]
   83624:	ebc3 0a07 	rsb	sl, r3, r7
   83628:	f8da 3004 	ldr.w	r3, [sl, #4]
   8362c:	f023 0303 	bic.w	r3, r3, #3
   83630:	442b      	add	r3, r5
   83632:	2800      	cmp	r0, #0
   83634:	d062      	beq.n	836fc <_realloc_r+0x13c>
   83636:	4570      	cmp	r0, lr
   83638:	f000 80e9 	beq.w	8380e <_realloc_r+0x24e>
   8363c:	eb02 0e03 	add.w	lr, r2, r3
   83640:	458e      	cmp	lr, r1
   83642:	db5b      	blt.n	836fc <_realloc_r+0x13c>
   83644:	68c3      	ldr	r3, [r0, #12]
   83646:	6882      	ldr	r2, [r0, #8]
   83648:	46d0      	mov	r8, sl
   8364a:	60d3      	str	r3, [r2, #12]
   8364c:	609a      	str	r2, [r3, #8]
   8364e:	f858 1f08 	ldr.w	r1, [r8, #8]!
   83652:	f8da 300c 	ldr.w	r3, [sl, #12]
   83656:	1f2a      	subs	r2, r5, #4
   83658:	2a24      	cmp	r2, #36	; 0x24
   8365a:	60cb      	str	r3, [r1, #12]
   8365c:	6099      	str	r1, [r3, #8]
   8365e:	f200 8123 	bhi.w	838a8 <_realloc_r+0x2e8>
   83662:	2a13      	cmp	r2, #19
   83664:	f240 80b0 	bls.w	837c8 <_realloc_r+0x208>
   83668:	6823      	ldr	r3, [r4, #0]
   8366a:	2a1b      	cmp	r2, #27
   8366c:	f8ca 3008 	str.w	r3, [sl, #8]
   83670:	6863      	ldr	r3, [r4, #4]
   83672:	f8ca 300c 	str.w	r3, [sl, #12]
   83676:	f200 812b 	bhi.w	838d0 <_realloc_r+0x310>
   8367a:	3408      	adds	r4, #8
   8367c:	f10a 0310 	add.w	r3, sl, #16
   83680:	e0a3      	b.n	837ca <_realloc_r+0x20a>
   83682:	f026 0607 	bic.w	r6, r6, #7
   83686:	2e00      	cmp	r6, #0
   83688:	4631      	mov	r1, r6
   8368a:	dab0      	bge.n	835ee <_realloc_r+0x2e>
   8368c:	230c      	movs	r3, #12
   8368e:	2000      	movs	r0, #0
   83690:	f8c9 3000 	str.w	r3, [r9]
   83694:	b003      	add	sp, #12
   83696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8369a:	46a0      	mov	r8, r4
   8369c:	1baa      	subs	r2, r5, r6
   8369e:	2a0f      	cmp	r2, #15
   836a0:	f003 0301 	and.w	r3, r3, #1
   836a4:	d81a      	bhi.n	836dc <_realloc_r+0x11c>
   836a6:	432b      	orrs	r3, r5
   836a8:	607b      	str	r3, [r7, #4]
   836aa:	443d      	add	r5, r7
   836ac:	686b      	ldr	r3, [r5, #4]
   836ae:	f043 0301 	orr.w	r3, r3, #1
   836b2:	606b      	str	r3, [r5, #4]
   836b4:	4648      	mov	r0, r9
   836b6:	f7ff ff81 	bl	835bc <__malloc_unlock>
   836ba:	4640      	mov	r0, r8
   836bc:	b003      	add	sp, #12
   836be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   836c2:	f022 0203 	bic.w	r2, r2, #3
   836c6:	eb02 0c05 	add.w	ip, r2, r5
   836ca:	458c      	cmp	ip, r1
   836cc:	dba6      	blt.n	8361c <_realloc_r+0x5c>
   836ce:	68c2      	ldr	r2, [r0, #12]
   836d0:	6881      	ldr	r1, [r0, #8]
   836d2:	46a0      	mov	r8, r4
   836d4:	60ca      	str	r2, [r1, #12]
   836d6:	4665      	mov	r5, ip
   836d8:	6091      	str	r1, [r2, #8]
   836da:	e7df      	b.n	8369c <_realloc_r+0xdc>
   836dc:	19b9      	adds	r1, r7, r6
   836de:	4333      	orrs	r3, r6
   836e0:	f042 0001 	orr.w	r0, r2, #1
   836e4:	607b      	str	r3, [r7, #4]
   836e6:	440a      	add	r2, r1
   836e8:	6048      	str	r0, [r1, #4]
   836ea:	6853      	ldr	r3, [r2, #4]
   836ec:	3108      	adds	r1, #8
   836ee:	f043 0301 	orr.w	r3, r3, #1
   836f2:	6053      	str	r3, [r2, #4]
   836f4:	4648      	mov	r0, r9
   836f6:	f7ff f89f 	bl	82838 <_free_r>
   836fa:	e7db      	b.n	836b4 <_realloc_r+0xf4>
   836fc:	428b      	cmp	r3, r1
   836fe:	da33      	bge.n	83768 <_realloc_r+0x1a8>
   83700:	4641      	mov	r1, r8
   83702:	4648      	mov	r0, r9
   83704:	f7ff fb96 	bl	82e34 <_malloc_r>
   83708:	4680      	mov	r8, r0
   8370a:	2800      	cmp	r0, #0
   8370c:	d0d2      	beq.n	836b4 <_realloc_r+0xf4>
   8370e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   83712:	f1a0 0108 	sub.w	r1, r0, #8
   83716:	f023 0201 	bic.w	r2, r3, #1
   8371a:	443a      	add	r2, r7
   8371c:	4291      	cmp	r1, r2
   8371e:	f000 80bc 	beq.w	8389a <_realloc_r+0x2da>
   83722:	1f2a      	subs	r2, r5, #4
   83724:	2a24      	cmp	r2, #36	; 0x24
   83726:	d86e      	bhi.n	83806 <_realloc_r+0x246>
   83728:	2a13      	cmp	r2, #19
   8372a:	d842      	bhi.n	837b2 <_realloc_r+0x1f2>
   8372c:	4603      	mov	r3, r0
   8372e:	4622      	mov	r2, r4
   83730:	6811      	ldr	r1, [r2, #0]
   83732:	6019      	str	r1, [r3, #0]
   83734:	6851      	ldr	r1, [r2, #4]
   83736:	6059      	str	r1, [r3, #4]
   83738:	6892      	ldr	r2, [r2, #8]
   8373a:	609a      	str	r2, [r3, #8]
   8373c:	4621      	mov	r1, r4
   8373e:	4648      	mov	r0, r9
   83740:	f7ff f87a 	bl	82838 <_free_r>
   83744:	e7b6      	b.n	836b4 <_realloc_r+0xf4>
   83746:	4611      	mov	r1, r2
   83748:	b003      	add	sp, #12
   8374a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8374e:	f7ff bb71 	b.w	82e34 <_malloc_r>
   83752:	f8de 2004 	ldr.w	r2, [lr, #4]
   83756:	f106 0c10 	add.w	ip, r6, #16
   8375a:	f022 0203 	bic.w	r2, r2, #3
   8375e:	1950      	adds	r0, r2, r5
   83760:	4560      	cmp	r0, ip
   83762:	da3d      	bge.n	837e0 <_realloc_r+0x220>
   83764:	4670      	mov	r0, lr
   83766:	e759      	b.n	8361c <_realloc_r+0x5c>
   83768:	46d0      	mov	r8, sl
   8376a:	f858 0f08 	ldr.w	r0, [r8, #8]!
   8376e:	f8da 100c 	ldr.w	r1, [sl, #12]
   83772:	1f2a      	subs	r2, r5, #4
   83774:	2a24      	cmp	r2, #36	; 0x24
   83776:	60c1      	str	r1, [r0, #12]
   83778:	6088      	str	r0, [r1, #8]
   8377a:	f200 80a0 	bhi.w	838be <_realloc_r+0x2fe>
   8377e:	2a13      	cmp	r2, #19
   83780:	f240 809b 	bls.w	838ba <_realloc_r+0x2fa>
   83784:	6821      	ldr	r1, [r4, #0]
   83786:	2a1b      	cmp	r2, #27
   83788:	f8ca 1008 	str.w	r1, [sl, #8]
   8378c:	6861      	ldr	r1, [r4, #4]
   8378e:	f8ca 100c 	str.w	r1, [sl, #12]
   83792:	f200 80b2 	bhi.w	838fa <_realloc_r+0x33a>
   83796:	3408      	adds	r4, #8
   83798:	f10a 0210 	add.w	r2, sl, #16
   8379c:	6821      	ldr	r1, [r4, #0]
   8379e:	461d      	mov	r5, r3
   837a0:	6011      	str	r1, [r2, #0]
   837a2:	6861      	ldr	r1, [r4, #4]
   837a4:	4657      	mov	r7, sl
   837a6:	6051      	str	r1, [r2, #4]
   837a8:	68a3      	ldr	r3, [r4, #8]
   837aa:	6093      	str	r3, [r2, #8]
   837ac:	f8da 3004 	ldr.w	r3, [sl, #4]
   837b0:	e774      	b.n	8369c <_realloc_r+0xdc>
   837b2:	6823      	ldr	r3, [r4, #0]
   837b4:	2a1b      	cmp	r2, #27
   837b6:	6003      	str	r3, [r0, #0]
   837b8:	6863      	ldr	r3, [r4, #4]
   837ba:	6043      	str	r3, [r0, #4]
   837bc:	d862      	bhi.n	83884 <_realloc_r+0x2c4>
   837be:	f100 0308 	add.w	r3, r0, #8
   837c2:	f104 0208 	add.w	r2, r4, #8
   837c6:	e7b3      	b.n	83730 <_realloc_r+0x170>
   837c8:	4643      	mov	r3, r8
   837ca:	6822      	ldr	r2, [r4, #0]
   837cc:	4675      	mov	r5, lr
   837ce:	601a      	str	r2, [r3, #0]
   837d0:	6862      	ldr	r2, [r4, #4]
   837d2:	4657      	mov	r7, sl
   837d4:	605a      	str	r2, [r3, #4]
   837d6:	68a2      	ldr	r2, [r4, #8]
   837d8:	609a      	str	r2, [r3, #8]
   837da:	f8da 3004 	ldr.w	r3, [sl, #4]
   837de:	e75d      	b.n	8369c <_realloc_r+0xdc>
   837e0:	1b83      	subs	r3, r0, r6
   837e2:	4437      	add	r7, r6
   837e4:	f043 0301 	orr.w	r3, r3, #1
   837e8:	f8cb 7008 	str.w	r7, [fp, #8]
   837ec:	607b      	str	r3, [r7, #4]
   837ee:	f854 3c04 	ldr.w	r3, [r4, #-4]
   837f2:	4648      	mov	r0, r9
   837f4:	f003 0301 	and.w	r3, r3, #1
   837f8:	431e      	orrs	r6, r3
   837fa:	f844 6c04 	str.w	r6, [r4, #-4]
   837fe:	f7ff fedd 	bl	835bc <__malloc_unlock>
   83802:	4620      	mov	r0, r4
   83804:	e75a      	b.n	836bc <_realloc_r+0xfc>
   83806:	4621      	mov	r1, r4
   83808:	f7ff fe70 	bl	834ec <memmove>
   8380c:	e796      	b.n	8373c <_realloc_r+0x17c>
   8380e:	eb02 0c03 	add.w	ip, r2, r3
   83812:	f106 0210 	add.w	r2, r6, #16
   83816:	4594      	cmp	ip, r2
   83818:	f6ff af70 	blt.w	836fc <_realloc_r+0x13c>
   8381c:	4657      	mov	r7, sl
   8381e:	f857 1f08 	ldr.w	r1, [r7, #8]!
   83822:	f8da 300c 	ldr.w	r3, [sl, #12]
   83826:	1f2a      	subs	r2, r5, #4
   83828:	2a24      	cmp	r2, #36	; 0x24
   8382a:	60cb      	str	r3, [r1, #12]
   8382c:	6099      	str	r1, [r3, #8]
   8382e:	f200 8086 	bhi.w	8393e <_realloc_r+0x37e>
   83832:	2a13      	cmp	r2, #19
   83834:	d977      	bls.n	83926 <_realloc_r+0x366>
   83836:	6823      	ldr	r3, [r4, #0]
   83838:	2a1b      	cmp	r2, #27
   8383a:	f8ca 3008 	str.w	r3, [sl, #8]
   8383e:	6863      	ldr	r3, [r4, #4]
   83840:	f8ca 300c 	str.w	r3, [sl, #12]
   83844:	f200 8084 	bhi.w	83950 <_realloc_r+0x390>
   83848:	3408      	adds	r4, #8
   8384a:	f10a 0310 	add.w	r3, sl, #16
   8384e:	6822      	ldr	r2, [r4, #0]
   83850:	601a      	str	r2, [r3, #0]
   83852:	6862      	ldr	r2, [r4, #4]
   83854:	605a      	str	r2, [r3, #4]
   83856:	68a2      	ldr	r2, [r4, #8]
   83858:	609a      	str	r2, [r3, #8]
   8385a:	ebc6 020c 	rsb	r2, r6, ip
   8385e:	eb0a 0306 	add.w	r3, sl, r6
   83862:	f042 0201 	orr.w	r2, r2, #1
   83866:	f8cb 3008 	str.w	r3, [fp, #8]
   8386a:	605a      	str	r2, [r3, #4]
   8386c:	f8da 3004 	ldr.w	r3, [sl, #4]
   83870:	4648      	mov	r0, r9
   83872:	f003 0301 	and.w	r3, r3, #1
   83876:	431e      	orrs	r6, r3
   83878:	f8ca 6004 	str.w	r6, [sl, #4]
   8387c:	f7ff fe9e 	bl	835bc <__malloc_unlock>
   83880:	4638      	mov	r0, r7
   83882:	e71b      	b.n	836bc <_realloc_r+0xfc>
   83884:	68a3      	ldr	r3, [r4, #8]
   83886:	2a24      	cmp	r2, #36	; 0x24
   83888:	6083      	str	r3, [r0, #8]
   8388a:	68e3      	ldr	r3, [r4, #12]
   8388c:	60c3      	str	r3, [r0, #12]
   8388e:	d02b      	beq.n	838e8 <_realloc_r+0x328>
   83890:	f100 0310 	add.w	r3, r0, #16
   83894:	f104 0210 	add.w	r2, r4, #16
   83898:	e74a      	b.n	83730 <_realloc_r+0x170>
   8389a:	f850 2c04 	ldr.w	r2, [r0, #-4]
   8389e:	46a0      	mov	r8, r4
   838a0:	f022 0203 	bic.w	r2, r2, #3
   838a4:	4415      	add	r5, r2
   838a6:	e6f9      	b.n	8369c <_realloc_r+0xdc>
   838a8:	4621      	mov	r1, r4
   838aa:	4640      	mov	r0, r8
   838ac:	4675      	mov	r5, lr
   838ae:	4657      	mov	r7, sl
   838b0:	f7ff fe1c 	bl	834ec <memmove>
   838b4:	f8da 3004 	ldr.w	r3, [sl, #4]
   838b8:	e6f0      	b.n	8369c <_realloc_r+0xdc>
   838ba:	4642      	mov	r2, r8
   838bc:	e76e      	b.n	8379c <_realloc_r+0x1dc>
   838be:	4621      	mov	r1, r4
   838c0:	4640      	mov	r0, r8
   838c2:	461d      	mov	r5, r3
   838c4:	4657      	mov	r7, sl
   838c6:	f7ff fe11 	bl	834ec <memmove>
   838ca:	f8da 3004 	ldr.w	r3, [sl, #4]
   838ce:	e6e5      	b.n	8369c <_realloc_r+0xdc>
   838d0:	68a3      	ldr	r3, [r4, #8]
   838d2:	2a24      	cmp	r2, #36	; 0x24
   838d4:	f8ca 3010 	str.w	r3, [sl, #16]
   838d8:	68e3      	ldr	r3, [r4, #12]
   838da:	f8ca 3014 	str.w	r3, [sl, #20]
   838de:	d018      	beq.n	83912 <_realloc_r+0x352>
   838e0:	3410      	adds	r4, #16
   838e2:	f10a 0318 	add.w	r3, sl, #24
   838e6:	e770      	b.n	837ca <_realloc_r+0x20a>
   838e8:	6922      	ldr	r2, [r4, #16]
   838ea:	f100 0318 	add.w	r3, r0, #24
   838ee:	6102      	str	r2, [r0, #16]
   838f0:	6961      	ldr	r1, [r4, #20]
   838f2:	f104 0218 	add.w	r2, r4, #24
   838f6:	6141      	str	r1, [r0, #20]
   838f8:	e71a      	b.n	83730 <_realloc_r+0x170>
   838fa:	68a1      	ldr	r1, [r4, #8]
   838fc:	2a24      	cmp	r2, #36	; 0x24
   838fe:	f8ca 1010 	str.w	r1, [sl, #16]
   83902:	68e1      	ldr	r1, [r4, #12]
   83904:	f8ca 1014 	str.w	r1, [sl, #20]
   83908:	d00f      	beq.n	8392a <_realloc_r+0x36a>
   8390a:	3410      	adds	r4, #16
   8390c:	f10a 0218 	add.w	r2, sl, #24
   83910:	e744      	b.n	8379c <_realloc_r+0x1dc>
   83912:	6922      	ldr	r2, [r4, #16]
   83914:	f10a 0320 	add.w	r3, sl, #32
   83918:	f8ca 2018 	str.w	r2, [sl, #24]
   8391c:	6962      	ldr	r2, [r4, #20]
   8391e:	3418      	adds	r4, #24
   83920:	f8ca 201c 	str.w	r2, [sl, #28]
   83924:	e751      	b.n	837ca <_realloc_r+0x20a>
   83926:	463b      	mov	r3, r7
   83928:	e791      	b.n	8384e <_realloc_r+0x28e>
   8392a:	6921      	ldr	r1, [r4, #16]
   8392c:	f10a 0220 	add.w	r2, sl, #32
   83930:	f8ca 1018 	str.w	r1, [sl, #24]
   83934:	6961      	ldr	r1, [r4, #20]
   83936:	3418      	adds	r4, #24
   83938:	f8ca 101c 	str.w	r1, [sl, #28]
   8393c:	e72e      	b.n	8379c <_realloc_r+0x1dc>
   8393e:	4621      	mov	r1, r4
   83940:	4638      	mov	r0, r7
   83942:	f8cd c004 	str.w	ip, [sp, #4]
   83946:	f7ff fdd1 	bl	834ec <memmove>
   8394a:	f8dd c004 	ldr.w	ip, [sp, #4]
   8394e:	e784      	b.n	8385a <_realloc_r+0x29a>
   83950:	68a3      	ldr	r3, [r4, #8]
   83952:	2a24      	cmp	r2, #36	; 0x24
   83954:	f8ca 3010 	str.w	r3, [sl, #16]
   83958:	68e3      	ldr	r3, [r4, #12]
   8395a:	f8ca 3014 	str.w	r3, [sl, #20]
   8395e:	d003      	beq.n	83968 <_realloc_r+0x3a8>
   83960:	3410      	adds	r4, #16
   83962:	f10a 0318 	add.w	r3, sl, #24
   83966:	e772      	b.n	8384e <_realloc_r+0x28e>
   83968:	6922      	ldr	r2, [r4, #16]
   8396a:	f10a 0320 	add.w	r3, sl, #32
   8396e:	f8ca 2018 	str.w	r2, [sl, #24]
   83972:	6962      	ldr	r2, [r4, #20]
   83974:	3418      	adds	r4, #24
   83976:	f8ca 201c 	str.w	r2, [sl, #28]
   8397a:	e768      	b.n	8384e <_realloc_r+0x28e>
   8397c:	20070590 	.word	0x20070590

00083980 <_sbrk_r>:
   83980:	b538      	push	{r3, r4, r5, lr}
   83982:	4c07      	ldr	r4, [pc, #28]	; (839a0 <_sbrk_r+0x20>)
   83984:	2300      	movs	r3, #0
   83986:	4605      	mov	r5, r0
   83988:	4608      	mov	r0, r1
   8398a:	6023      	str	r3, [r4, #0]
   8398c:	f7fd faa6 	bl	80edc <_sbrk>
   83990:	1c43      	adds	r3, r0, #1
   83992:	d000      	beq.n	83996 <_sbrk_r+0x16>
   83994:	bd38      	pop	{r3, r4, r5, pc}
   83996:	6823      	ldr	r3, [r4, #0]
   83998:	2b00      	cmp	r3, #0
   8399a:	d0fb      	beq.n	83994 <_sbrk_r+0x14>
   8399c:	602b      	str	r3, [r5, #0]
   8399e:	bd38      	pop	{r3, r4, r5, pc}
   839a0:	20070b28 	.word	0x20070b28

000839a4 <__sread>:
   839a4:	b510      	push	{r4, lr}
   839a6:	460c      	mov	r4, r1
   839a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   839ac:	f000 f9c2 	bl	83d34 <_read_r>
   839b0:	2800      	cmp	r0, #0
   839b2:	db03      	blt.n	839bc <__sread+0x18>
   839b4:	6d23      	ldr	r3, [r4, #80]	; 0x50
   839b6:	4403      	add	r3, r0
   839b8:	6523      	str	r3, [r4, #80]	; 0x50
   839ba:	bd10      	pop	{r4, pc}
   839bc:	89a3      	ldrh	r3, [r4, #12]
   839be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   839c2:	81a3      	strh	r3, [r4, #12]
   839c4:	bd10      	pop	{r4, pc}
   839c6:	bf00      	nop

000839c8 <__swrite>:
   839c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   839cc:	460c      	mov	r4, r1
   839ce:	8989      	ldrh	r1, [r1, #12]
   839d0:	461d      	mov	r5, r3
   839d2:	05cb      	lsls	r3, r1, #23
   839d4:	4616      	mov	r6, r2
   839d6:	4607      	mov	r7, r0
   839d8:	d506      	bpl.n	839e8 <__swrite+0x20>
   839da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   839de:	2200      	movs	r2, #0
   839e0:	2302      	movs	r3, #2
   839e2:	f000 f993 	bl	83d0c <_lseek_r>
   839e6:	89a1      	ldrh	r1, [r4, #12]
   839e8:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   839ec:	81a1      	strh	r1, [r4, #12]
   839ee:	4638      	mov	r0, r7
   839f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   839f4:	4632      	mov	r2, r6
   839f6:	462b      	mov	r3, r5
   839f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   839fc:	f000 b89e 	b.w	83b3c <_write_r>

00083a00 <__sseek>:
   83a00:	b510      	push	{r4, lr}
   83a02:	460c      	mov	r4, r1
   83a04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83a08:	f000 f980 	bl	83d0c <_lseek_r>
   83a0c:	89a3      	ldrh	r3, [r4, #12]
   83a0e:	1c42      	adds	r2, r0, #1
   83a10:	bf0e      	itee	eq
   83a12:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   83a16:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   83a1a:	6520      	strne	r0, [r4, #80]	; 0x50
   83a1c:	81a3      	strh	r3, [r4, #12]
   83a1e:	bd10      	pop	{r4, pc}

00083a20 <__sclose>:
   83a20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83a24:	f000 b8f2 	b.w	83c0c <_close_r>

00083a28 <__swbuf_r>:
   83a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83a2a:	460d      	mov	r5, r1
   83a2c:	4614      	mov	r4, r2
   83a2e:	4607      	mov	r7, r0
   83a30:	b110      	cbz	r0, 83a38 <__swbuf_r+0x10>
   83a32:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83a34:	2b00      	cmp	r3, #0
   83a36:	d048      	beq.n	83aca <__swbuf_r+0xa2>
   83a38:	89a2      	ldrh	r2, [r4, #12]
   83a3a:	69a0      	ldr	r0, [r4, #24]
   83a3c:	b293      	uxth	r3, r2
   83a3e:	60a0      	str	r0, [r4, #8]
   83a40:	0718      	lsls	r0, r3, #28
   83a42:	d538      	bpl.n	83ab6 <__swbuf_r+0x8e>
   83a44:	6926      	ldr	r6, [r4, #16]
   83a46:	2e00      	cmp	r6, #0
   83a48:	d035      	beq.n	83ab6 <__swbuf_r+0x8e>
   83a4a:	0499      	lsls	r1, r3, #18
   83a4c:	b2ed      	uxtb	r5, r5
   83a4e:	d515      	bpl.n	83a7c <__swbuf_r+0x54>
   83a50:	6823      	ldr	r3, [r4, #0]
   83a52:	6962      	ldr	r2, [r4, #20]
   83a54:	1b9e      	subs	r6, r3, r6
   83a56:	4296      	cmp	r6, r2
   83a58:	da1c      	bge.n	83a94 <__swbuf_r+0x6c>
   83a5a:	3601      	adds	r6, #1
   83a5c:	68a2      	ldr	r2, [r4, #8]
   83a5e:	1c59      	adds	r1, r3, #1
   83a60:	3a01      	subs	r2, #1
   83a62:	60a2      	str	r2, [r4, #8]
   83a64:	6021      	str	r1, [r4, #0]
   83a66:	701d      	strb	r5, [r3, #0]
   83a68:	6963      	ldr	r3, [r4, #20]
   83a6a:	42b3      	cmp	r3, r6
   83a6c:	d01a      	beq.n	83aa4 <__swbuf_r+0x7c>
   83a6e:	89a3      	ldrh	r3, [r4, #12]
   83a70:	07db      	lsls	r3, r3, #31
   83a72:	d501      	bpl.n	83a78 <__swbuf_r+0x50>
   83a74:	2d0a      	cmp	r5, #10
   83a76:	d015      	beq.n	83aa4 <__swbuf_r+0x7c>
   83a78:	4628      	mov	r0, r5
   83a7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83a7c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   83a7e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   83a82:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   83a86:	6663      	str	r3, [r4, #100]	; 0x64
   83a88:	6823      	ldr	r3, [r4, #0]
   83a8a:	81a2      	strh	r2, [r4, #12]
   83a8c:	6962      	ldr	r2, [r4, #20]
   83a8e:	1b9e      	subs	r6, r3, r6
   83a90:	4296      	cmp	r6, r2
   83a92:	dbe2      	blt.n	83a5a <__swbuf_r+0x32>
   83a94:	4638      	mov	r0, r7
   83a96:	4621      	mov	r1, r4
   83a98:	f7fe fd6e 	bl	82578 <_fflush_r>
   83a9c:	b940      	cbnz	r0, 83ab0 <__swbuf_r+0x88>
   83a9e:	6823      	ldr	r3, [r4, #0]
   83aa0:	2601      	movs	r6, #1
   83aa2:	e7db      	b.n	83a5c <__swbuf_r+0x34>
   83aa4:	4638      	mov	r0, r7
   83aa6:	4621      	mov	r1, r4
   83aa8:	f7fe fd66 	bl	82578 <_fflush_r>
   83aac:	2800      	cmp	r0, #0
   83aae:	d0e3      	beq.n	83a78 <__swbuf_r+0x50>
   83ab0:	f04f 30ff 	mov.w	r0, #4294967295
   83ab4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83ab6:	4638      	mov	r0, r7
   83ab8:	4621      	mov	r1, r4
   83aba:	f7fe fc47 	bl	8234c <__swsetup_r>
   83abe:	2800      	cmp	r0, #0
   83ac0:	d1f6      	bne.n	83ab0 <__swbuf_r+0x88>
   83ac2:	89a2      	ldrh	r2, [r4, #12]
   83ac4:	6926      	ldr	r6, [r4, #16]
   83ac6:	b293      	uxth	r3, r2
   83ac8:	e7bf      	b.n	83a4a <__swbuf_r+0x22>
   83aca:	f7fe fd71 	bl	825b0 <__sinit>
   83ace:	e7b3      	b.n	83a38 <__swbuf_r+0x10>

00083ad0 <_wcrtomb_r>:
   83ad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83ad4:	461e      	mov	r6, r3
   83ad6:	b086      	sub	sp, #24
   83ad8:	460c      	mov	r4, r1
   83ada:	4605      	mov	r5, r0
   83adc:	4617      	mov	r7, r2
   83ade:	4b0f      	ldr	r3, [pc, #60]	; (83b1c <_wcrtomb_r+0x4c>)
   83ae0:	b191      	cbz	r1, 83b08 <_wcrtomb_r+0x38>
   83ae2:	f8d3 8000 	ldr.w	r8, [r3]
   83ae6:	f7ff f923 	bl	82d30 <__locale_charset>
   83aea:	9600      	str	r6, [sp, #0]
   83aec:	4603      	mov	r3, r0
   83aee:	4621      	mov	r1, r4
   83af0:	463a      	mov	r2, r7
   83af2:	4628      	mov	r0, r5
   83af4:	47c0      	blx	r8
   83af6:	1c43      	adds	r3, r0, #1
   83af8:	d103      	bne.n	83b02 <_wcrtomb_r+0x32>
   83afa:	2200      	movs	r2, #0
   83afc:	238a      	movs	r3, #138	; 0x8a
   83afe:	6032      	str	r2, [r6, #0]
   83b00:	602b      	str	r3, [r5, #0]
   83b02:	b006      	add	sp, #24
   83b04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83b08:	681f      	ldr	r7, [r3, #0]
   83b0a:	f7ff f911 	bl	82d30 <__locale_charset>
   83b0e:	9600      	str	r6, [sp, #0]
   83b10:	4603      	mov	r3, r0
   83b12:	4622      	mov	r2, r4
   83b14:	4628      	mov	r0, r5
   83b16:	a903      	add	r1, sp, #12
   83b18:	47b8      	blx	r7
   83b1a:	e7ec      	b.n	83af6 <_wcrtomb_r+0x26>
   83b1c:	200709a0 	.word	0x200709a0

00083b20 <__ascii_wctomb>:
   83b20:	b121      	cbz	r1, 83b2c <__ascii_wctomb+0xc>
   83b22:	2aff      	cmp	r2, #255	; 0xff
   83b24:	d804      	bhi.n	83b30 <__ascii_wctomb+0x10>
   83b26:	700a      	strb	r2, [r1, #0]
   83b28:	2001      	movs	r0, #1
   83b2a:	4770      	bx	lr
   83b2c:	4608      	mov	r0, r1
   83b2e:	4770      	bx	lr
   83b30:	238a      	movs	r3, #138	; 0x8a
   83b32:	6003      	str	r3, [r0, #0]
   83b34:	f04f 30ff 	mov.w	r0, #4294967295
   83b38:	4770      	bx	lr
   83b3a:	bf00      	nop

00083b3c <_write_r>:
   83b3c:	b570      	push	{r4, r5, r6, lr}
   83b3e:	4c08      	ldr	r4, [pc, #32]	; (83b60 <_write_r+0x24>)
   83b40:	4606      	mov	r6, r0
   83b42:	2500      	movs	r5, #0
   83b44:	4608      	mov	r0, r1
   83b46:	4611      	mov	r1, r2
   83b48:	461a      	mov	r2, r3
   83b4a:	6025      	str	r5, [r4, #0]
   83b4c:	f7fc fcd4 	bl	804f8 <_write>
   83b50:	1c43      	adds	r3, r0, #1
   83b52:	d000      	beq.n	83b56 <_write_r+0x1a>
   83b54:	bd70      	pop	{r4, r5, r6, pc}
   83b56:	6823      	ldr	r3, [r4, #0]
   83b58:	2b00      	cmp	r3, #0
   83b5a:	d0fb      	beq.n	83b54 <_write_r+0x18>
   83b5c:	6033      	str	r3, [r6, #0]
   83b5e:	bd70      	pop	{r4, r5, r6, pc}
   83b60:	20070b28 	.word	0x20070b28

00083b64 <__register_exitproc>:
   83b64:	b5f0      	push	{r4, r5, r6, r7, lr}
   83b66:	4c27      	ldr	r4, [pc, #156]	; (83c04 <__register_exitproc+0xa0>)
   83b68:	b085      	sub	sp, #20
   83b6a:	6826      	ldr	r6, [r4, #0]
   83b6c:	4607      	mov	r7, r0
   83b6e:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   83b72:	2c00      	cmp	r4, #0
   83b74:	d040      	beq.n	83bf8 <__register_exitproc+0x94>
   83b76:	6865      	ldr	r5, [r4, #4]
   83b78:	2d1f      	cmp	r5, #31
   83b7a:	dd1e      	ble.n	83bba <__register_exitproc+0x56>
   83b7c:	4822      	ldr	r0, [pc, #136]	; (83c08 <__register_exitproc+0xa4>)
   83b7e:	b918      	cbnz	r0, 83b88 <__register_exitproc+0x24>
   83b80:	f04f 30ff 	mov.w	r0, #4294967295
   83b84:	b005      	add	sp, #20
   83b86:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83b88:	f44f 70c8 	mov.w	r0, #400	; 0x190
   83b8c:	9103      	str	r1, [sp, #12]
   83b8e:	9202      	str	r2, [sp, #8]
   83b90:	9301      	str	r3, [sp, #4]
   83b92:	f7ff f947 	bl	82e24 <malloc>
   83b96:	9903      	ldr	r1, [sp, #12]
   83b98:	4604      	mov	r4, r0
   83b9a:	9a02      	ldr	r2, [sp, #8]
   83b9c:	9b01      	ldr	r3, [sp, #4]
   83b9e:	2800      	cmp	r0, #0
   83ba0:	d0ee      	beq.n	83b80 <__register_exitproc+0x1c>
   83ba2:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
   83ba6:	2000      	movs	r0, #0
   83ba8:	6025      	str	r5, [r4, #0]
   83baa:	6060      	str	r0, [r4, #4]
   83bac:	4605      	mov	r5, r0
   83bae:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   83bb2:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   83bb6:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   83bba:	b93f      	cbnz	r7, 83bcc <__register_exitproc+0x68>
   83bbc:	1c6b      	adds	r3, r5, #1
   83bbe:	2000      	movs	r0, #0
   83bc0:	3502      	adds	r5, #2
   83bc2:	6063      	str	r3, [r4, #4]
   83bc4:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
   83bc8:	b005      	add	sp, #20
   83bca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83bcc:	2601      	movs	r6, #1
   83bce:	40ae      	lsls	r6, r5
   83bd0:	eb04 0085 	add.w	r0, r4, r5, lsl #2
   83bd4:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   83bd8:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   83bdc:	2f02      	cmp	r7, #2
   83bde:	ea42 0206 	orr.w	r2, r2, r6
   83be2:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   83be6:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   83bea:	d1e7      	bne.n	83bbc <__register_exitproc+0x58>
   83bec:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   83bf0:	431e      	orrs	r6, r3
   83bf2:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
   83bf6:	e7e1      	b.n	83bbc <__register_exitproc+0x58>
   83bf8:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   83bfc:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   83c00:	e7b9      	b.n	83b76 <__register_exitproc+0x12>
   83c02:	bf00      	nop
   83c04:	000846f0 	.word	0x000846f0
   83c08:	00082e25 	.word	0x00082e25

00083c0c <_close_r>:
   83c0c:	b538      	push	{r3, r4, r5, lr}
   83c0e:	4c07      	ldr	r4, [pc, #28]	; (83c2c <_close_r+0x20>)
   83c10:	2300      	movs	r3, #0
   83c12:	4605      	mov	r5, r0
   83c14:	4608      	mov	r0, r1
   83c16:	6023      	str	r3, [r4, #0]
   83c18:	f7fd f97a 	bl	80f10 <_close>
   83c1c:	1c43      	adds	r3, r0, #1
   83c1e:	d000      	beq.n	83c22 <_close_r+0x16>
   83c20:	bd38      	pop	{r3, r4, r5, pc}
   83c22:	6823      	ldr	r3, [r4, #0]
   83c24:	2b00      	cmp	r3, #0
   83c26:	d0fb      	beq.n	83c20 <_close_r+0x14>
   83c28:	602b      	str	r3, [r5, #0]
   83c2a:	bd38      	pop	{r3, r4, r5, pc}
   83c2c:	20070b28 	.word	0x20070b28

00083c30 <_fclose_r>:
   83c30:	b570      	push	{r4, r5, r6, lr}
   83c32:	460c      	mov	r4, r1
   83c34:	4605      	mov	r5, r0
   83c36:	b131      	cbz	r1, 83c46 <_fclose_r+0x16>
   83c38:	b110      	cbz	r0, 83c40 <_fclose_r+0x10>
   83c3a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83c3c:	2b00      	cmp	r3, #0
   83c3e:	d02f      	beq.n	83ca0 <_fclose_r+0x70>
   83c40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83c44:	b90b      	cbnz	r3, 83c4a <_fclose_r+0x1a>
   83c46:	2000      	movs	r0, #0
   83c48:	bd70      	pop	{r4, r5, r6, pc}
   83c4a:	4628      	mov	r0, r5
   83c4c:	4621      	mov	r1, r4
   83c4e:	f7fe fc93 	bl	82578 <_fflush_r>
   83c52:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   83c54:	4606      	mov	r6, r0
   83c56:	b133      	cbz	r3, 83c66 <_fclose_r+0x36>
   83c58:	4628      	mov	r0, r5
   83c5a:	69e1      	ldr	r1, [r4, #28]
   83c5c:	4798      	blx	r3
   83c5e:	2800      	cmp	r0, #0
   83c60:	bfb8      	it	lt
   83c62:	f04f 36ff 	movlt.w	r6, #4294967295
   83c66:	89a3      	ldrh	r3, [r4, #12]
   83c68:	061b      	lsls	r3, r3, #24
   83c6a:	d41c      	bmi.n	83ca6 <_fclose_r+0x76>
   83c6c:	6b21      	ldr	r1, [r4, #48]	; 0x30
   83c6e:	b141      	cbz	r1, 83c82 <_fclose_r+0x52>
   83c70:	f104 0340 	add.w	r3, r4, #64	; 0x40
   83c74:	4299      	cmp	r1, r3
   83c76:	d002      	beq.n	83c7e <_fclose_r+0x4e>
   83c78:	4628      	mov	r0, r5
   83c7a:	f7fe fddd 	bl	82838 <_free_r>
   83c7e:	2300      	movs	r3, #0
   83c80:	6323      	str	r3, [r4, #48]	; 0x30
   83c82:	6c61      	ldr	r1, [r4, #68]	; 0x44
   83c84:	b121      	cbz	r1, 83c90 <_fclose_r+0x60>
   83c86:	4628      	mov	r0, r5
   83c88:	f7fe fdd6 	bl	82838 <_free_r>
   83c8c:	2300      	movs	r3, #0
   83c8e:	6463      	str	r3, [r4, #68]	; 0x44
   83c90:	f7fe fd08 	bl	826a4 <__sfp_lock_acquire>
   83c94:	2300      	movs	r3, #0
   83c96:	81a3      	strh	r3, [r4, #12]
   83c98:	f7fe fd06 	bl	826a8 <__sfp_lock_release>
   83c9c:	4630      	mov	r0, r6
   83c9e:	bd70      	pop	{r4, r5, r6, pc}
   83ca0:	f7fe fc86 	bl	825b0 <__sinit>
   83ca4:	e7cc      	b.n	83c40 <_fclose_r+0x10>
   83ca6:	4628      	mov	r0, r5
   83ca8:	6921      	ldr	r1, [r4, #16]
   83caa:	f7fe fdc5 	bl	82838 <_free_r>
   83cae:	e7dd      	b.n	83c6c <_fclose_r+0x3c>

00083cb0 <fclose>:
   83cb0:	4b02      	ldr	r3, [pc, #8]	; (83cbc <fclose+0xc>)
   83cb2:	4601      	mov	r1, r0
   83cb4:	6818      	ldr	r0, [r3, #0]
   83cb6:	f7ff bfbb 	b.w	83c30 <_fclose_r>
   83cba:	bf00      	nop
   83cbc:	20070568 	.word	0x20070568

00083cc0 <_fstat_r>:
   83cc0:	b538      	push	{r3, r4, r5, lr}
   83cc2:	4c08      	ldr	r4, [pc, #32]	; (83ce4 <_fstat_r+0x24>)
   83cc4:	2300      	movs	r3, #0
   83cc6:	4605      	mov	r5, r0
   83cc8:	4608      	mov	r0, r1
   83cca:	4611      	mov	r1, r2
   83ccc:	6023      	str	r3, [r4, #0]
   83cce:	f7fd f923 	bl	80f18 <_fstat>
   83cd2:	1c43      	adds	r3, r0, #1
   83cd4:	d000      	beq.n	83cd8 <_fstat_r+0x18>
   83cd6:	bd38      	pop	{r3, r4, r5, pc}
   83cd8:	6823      	ldr	r3, [r4, #0]
   83cda:	2b00      	cmp	r3, #0
   83cdc:	d0fb      	beq.n	83cd6 <_fstat_r+0x16>
   83cde:	602b      	str	r3, [r5, #0]
   83ce0:	bd38      	pop	{r3, r4, r5, pc}
   83ce2:	bf00      	nop
   83ce4:	20070b28 	.word	0x20070b28

00083ce8 <_isatty_r>:
   83ce8:	b538      	push	{r3, r4, r5, lr}
   83cea:	4c07      	ldr	r4, [pc, #28]	; (83d08 <_isatty_r+0x20>)
   83cec:	2300      	movs	r3, #0
   83cee:	4605      	mov	r5, r0
   83cf0:	4608      	mov	r0, r1
   83cf2:	6023      	str	r3, [r4, #0]
   83cf4:	f7fd f916 	bl	80f24 <_isatty>
   83cf8:	1c43      	adds	r3, r0, #1
   83cfa:	d000      	beq.n	83cfe <_isatty_r+0x16>
   83cfc:	bd38      	pop	{r3, r4, r5, pc}
   83cfe:	6823      	ldr	r3, [r4, #0]
   83d00:	2b00      	cmp	r3, #0
   83d02:	d0fb      	beq.n	83cfc <_isatty_r+0x14>
   83d04:	602b      	str	r3, [r5, #0]
   83d06:	bd38      	pop	{r3, r4, r5, pc}
   83d08:	20070b28 	.word	0x20070b28

00083d0c <_lseek_r>:
   83d0c:	b570      	push	{r4, r5, r6, lr}
   83d0e:	4c08      	ldr	r4, [pc, #32]	; (83d30 <_lseek_r+0x24>)
   83d10:	4606      	mov	r6, r0
   83d12:	2500      	movs	r5, #0
   83d14:	4608      	mov	r0, r1
   83d16:	4611      	mov	r1, r2
   83d18:	461a      	mov	r2, r3
   83d1a:	6025      	str	r5, [r4, #0]
   83d1c:	f7fd f904 	bl	80f28 <_lseek>
   83d20:	1c43      	adds	r3, r0, #1
   83d22:	d000      	beq.n	83d26 <_lseek_r+0x1a>
   83d24:	bd70      	pop	{r4, r5, r6, pc}
   83d26:	6823      	ldr	r3, [r4, #0]
   83d28:	2b00      	cmp	r3, #0
   83d2a:	d0fb      	beq.n	83d24 <_lseek_r+0x18>
   83d2c:	6033      	str	r3, [r6, #0]
   83d2e:	bd70      	pop	{r4, r5, r6, pc}
   83d30:	20070b28 	.word	0x20070b28

00083d34 <_read_r>:
   83d34:	b570      	push	{r4, r5, r6, lr}
   83d36:	4c08      	ldr	r4, [pc, #32]	; (83d58 <_read_r+0x24>)
   83d38:	4606      	mov	r6, r0
   83d3a:	2500      	movs	r5, #0
   83d3c:	4608      	mov	r0, r1
   83d3e:	4611      	mov	r1, r2
   83d40:	461a      	mov	r2, r3
   83d42:	6025      	str	r5, [r4, #0]
   83d44:	f7fc fbb8 	bl	804b8 <_read>
   83d48:	1c43      	adds	r3, r0, #1
   83d4a:	d000      	beq.n	83d4e <_read_r+0x1a>
   83d4c:	bd70      	pop	{r4, r5, r6, pc}
   83d4e:	6823      	ldr	r3, [r4, #0]
   83d50:	2b00      	cmp	r3, #0
   83d52:	d0fb      	beq.n	83d4c <_read_r+0x18>
   83d54:	6033      	str	r3, [r6, #0]
   83d56:	bd70      	pop	{r4, r5, r6, pc}
   83d58:	20070b28 	.word	0x20070b28

00083d5c <__aeabi_uldivmod>:
   83d5c:	b94b      	cbnz	r3, 83d72 <__aeabi_uldivmod+0x16>
   83d5e:	b942      	cbnz	r2, 83d72 <__aeabi_uldivmod+0x16>
   83d60:	2900      	cmp	r1, #0
   83d62:	bf08      	it	eq
   83d64:	2800      	cmpeq	r0, #0
   83d66:	d002      	beq.n	83d6e <__aeabi_uldivmod+0x12>
   83d68:	f04f 31ff 	mov.w	r1, #4294967295
   83d6c:	4608      	mov	r0, r1
   83d6e:	f000 b83b 	b.w	83de8 <__aeabi_idiv0>
   83d72:	b082      	sub	sp, #8
   83d74:	46ec      	mov	ip, sp
   83d76:	e92d 5000 	stmdb	sp!, {ip, lr}
   83d7a:	f000 f81d 	bl	83db8 <__gnu_uldivmod_helper>
   83d7e:	f8dd e004 	ldr.w	lr, [sp, #4]
   83d82:	b002      	add	sp, #8
   83d84:	bc0c      	pop	{r2, r3}
   83d86:	4770      	bx	lr

00083d88 <__gnu_ldivmod_helper>:
   83d88:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   83d8c:	9e08      	ldr	r6, [sp, #32]
   83d8e:	4614      	mov	r4, r2
   83d90:	461d      	mov	r5, r3
   83d92:	4680      	mov	r8, r0
   83d94:	4689      	mov	r9, r1
   83d96:	f000 f829 	bl	83dec <__divdi3>
   83d9a:	fb04 f301 	mul.w	r3, r4, r1
   83d9e:	fba4 ab00 	umull	sl, fp, r4, r0
   83da2:	fb00 3205 	mla	r2, r0, r5, r3
   83da6:	4493      	add	fp, r2
   83da8:	ebb8 080a 	subs.w	r8, r8, sl
   83dac:	eb69 090b 	sbc.w	r9, r9, fp
   83db0:	e9c6 8900 	strd	r8, r9, [r6]
   83db4:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

00083db8 <__gnu_uldivmod_helper>:
   83db8:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   83dbc:	9e08      	ldr	r6, [sp, #32]
   83dbe:	4614      	mov	r4, r2
   83dc0:	461d      	mov	r5, r3
   83dc2:	4680      	mov	r8, r0
   83dc4:	4689      	mov	r9, r1
   83dc6:	f000 f961 	bl	8408c <__udivdi3>
   83dca:	fb00 f505 	mul.w	r5, r0, r5
   83dce:	fba0 ab04 	umull	sl, fp, r0, r4
   83dd2:	fb04 5401 	mla	r4, r4, r1, r5
   83dd6:	44a3      	add	fp, r4
   83dd8:	ebb8 080a 	subs.w	r8, r8, sl
   83ddc:	eb69 090b 	sbc.w	r9, r9, fp
   83de0:	e9c6 8900 	strd	r8, r9, [r6]
   83de4:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

00083de8 <__aeabi_idiv0>:
   83de8:	4770      	bx	lr
   83dea:	bf00      	nop

00083dec <__divdi3>:
   83dec:	2900      	cmp	r1, #0
   83dee:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83df2:	f2c0 80a1 	blt.w	83f38 <__divdi3+0x14c>
   83df6:	2400      	movs	r4, #0
   83df8:	2b00      	cmp	r3, #0
   83dfa:	f2c0 8098 	blt.w	83f2e <__divdi3+0x142>
   83dfe:	4615      	mov	r5, r2
   83e00:	4606      	mov	r6, r0
   83e02:	460f      	mov	r7, r1
   83e04:	2b00      	cmp	r3, #0
   83e06:	d13f      	bne.n	83e88 <__divdi3+0x9c>
   83e08:	428a      	cmp	r2, r1
   83e0a:	d958      	bls.n	83ebe <__divdi3+0xd2>
   83e0c:	fab2 f382 	clz	r3, r2
   83e10:	b14b      	cbz	r3, 83e26 <__divdi3+0x3a>
   83e12:	f1c3 0220 	rsb	r2, r3, #32
   83e16:	fa01 f703 	lsl.w	r7, r1, r3
   83e1a:	fa20 f202 	lsr.w	r2, r0, r2
   83e1e:	409d      	lsls	r5, r3
   83e20:	fa00 f603 	lsl.w	r6, r0, r3
   83e24:	4317      	orrs	r7, r2
   83e26:	0c29      	lsrs	r1, r5, #16
   83e28:	fbb7 f2f1 	udiv	r2, r7, r1
   83e2c:	fb01 7712 	mls	r7, r1, r2, r7
   83e30:	b2a8      	uxth	r0, r5
   83e32:	fb00 f302 	mul.w	r3, r0, r2
   83e36:	ea4f 4c16 	mov.w	ip, r6, lsr #16
   83e3a:	ea4c 4707 	orr.w	r7, ip, r7, lsl #16
   83e3e:	42bb      	cmp	r3, r7
   83e40:	d909      	bls.n	83e56 <__divdi3+0x6a>
   83e42:	197f      	adds	r7, r7, r5
   83e44:	f102 3cff 	add.w	ip, r2, #4294967295
   83e48:	f080 8105 	bcs.w	84056 <__divdi3+0x26a>
   83e4c:	42bb      	cmp	r3, r7
   83e4e:	f240 8102 	bls.w	84056 <__divdi3+0x26a>
   83e52:	3a02      	subs	r2, #2
   83e54:	442f      	add	r7, r5
   83e56:	1aff      	subs	r7, r7, r3
   83e58:	fbb7 f3f1 	udiv	r3, r7, r1
   83e5c:	fb01 7113 	mls	r1, r1, r3, r7
   83e60:	fb00 f003 	mul.w	r0, r0, r3
   83e64:	b2b6      	uxth	r6, r6
   83e66:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
   83e6a:	4288      	cmp	r0, r1
   83e6c:	d908      	bls.n	83e80 <__divdi3+0x94>
   83e6e:	1949      	adds	r1, r1, r5
   83e70:	f103 37ff 	add.w	r7, r3, #4294967295
   83e74:	f080 80f1 	bcs.w	8405a <__divdi3+0x26e>
   83e78:	4288      	cmp	r0, r1
   83e7a:	f240 80ee 	bls.w	8405a <__divdi3+0x26e>
   83e7e:	3b02      	subs	r3, #2
   83e80:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   83e84:	2300      	movs	r3, #0
   83e86:	e003      	b.n	83e90 <__divdi3+0xa4>
   83e88:	428b      	cmp	r3, r1
   83e8a:	d90a      	bls.n	83ea2 <__divdi3+0xb6>
   83e8c:	2300      	movs	r3, #0
   83e8e:	461a      	mov	r2, r3
   83e90:	4610      	mov	r0, r2
   83e92:	4619      	mov	r1, r3
   83e94:	b114      	cbz	r4, 83e9c <__divdi3+0xb0>
   83e96:	4240      	negs	r0, r0
   83e98:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   83e9c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83ea0:	4770      	bx	lr
   83ea2:	fab3 f883 	clz	r8, r3
   83ea6:	f1b8 0f00 	cmp.w	r8, #0
   83eaa:	f040 8088 	bne.w	83fbe <__divdi3+0x1d2>
   83eae:	428b      	cmp	r3, r1
   83eb0:	d302      	bcc.n	83eb8 <__divdi3+0xcc>
   83eb2:	4282      	cmp	r2, r0
   83eb4:	f200 80e2 	bhi.w	8407c <__divdi3+0x290>
   83eb8:	2300      	movs	r3, #0
   83eba:	2201      	movs	r2, #1
   83ebc:	e7e8      	b.n	83e90 <__divdi3+0xa4>
   83ebe:	b912      	cbnz	r2, 83ec6 <__divdi3+0xda>
   83ec0:	2301      	movs	r3, #1
   83ec2:	fbb3 f5f2 	udiv	r5, r3, r2
   83ec6:	fab5 f285 	clz	r2, r5
   83eca:	2a00      	cmp	r2, #0
   83ecc:	d13a      	bne.n	83f44 <__divdi3+0x158>
   83ece:	1b7f      	subs	r7, r7, r5
   83ed0:	0c28      	lsrs	r0, r5, #16
   83ed2:	fa1f fc85 	uxth.w	ip, r5
   83ed6:	2301      	movs	r3, #1
   83ed8:	fbb7 f1f0 	udiv	r1, r7, r0
   83edc:	fb00 7711 	mls	r7, r0, r1, r7
   83ee0:	fb0c f201 	mul.w	r2, ip, r1
   83ee4:	ea4f 4816 	mov.w	r8, r6, lsr #16
   83ee8:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
   83eec:	42ba      	cmp	r2, r7
   83eee:	d907      	bls.n	83f00 <__divdi3+0x114>
   83ef0:	197f      	adds	r7, r7, r5
   83ef2:	f101 38ff 	add.w	r8, r1, #4294967295
   83ef6:	d202      	bcs.n	83efe <__divdi3+0x112>
   83ef8:	42ba      	cmp	r2, r7
   83efa:	f200 80c4 	bhi.w	84086 <__divdi3+0x29a>
   83efe:	4641      	mov	r1, r8
   83f00:	1abf      	subs	r7, r7, r2
   83f02:	fbb7 f2f0 	udiv	r2, r7, r0
   83f06:	fb00 7012 	mls	r0, r0, r2, r7
   83f0a:	fb0c fc02 	mul.w	ip, ip, r2
   83f0e:	b2b6      	uxth	r6, r6
   83f10:	ea46 4000 	orr.w	r0, r6, r0, lsl #16
   83f14:	4584      	cmp	ip, r0
   83f16:	d907      	bls.n	83f28 <__divdi3+0x13c>
   83f18:	1940      	adds	r0, r0, r5
   83f1a:	f102 37ff 	add.w	r7, r2, #4294967295
   83f1e:	d202      	bcs.n	83f26 <__divdi3+0x13a>
   83f20:	4584      	cmp	ip, r0
   83f22:	f200 80ae 	bhi.w	84082 <__divdi3+0x296>
   83f26:	463a      	mov	r2, r7
   83f28:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   83f2c:	e7b0      	b.n	83e90 <__divdi3+0xa4>
   83f2e:	43e4      	mvns	r4, r4
   83f30:	4252      	negs	r2, r2
   83f32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   83f36:	e762      	b.n	83dfe <__divdi3+0x12>
   83f38:	4240      	negs	r0, r0
   83f3a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   83f3e:	f04f 34ff 	mov.w	r4, #4294967295
   83f42:	e759      	b.n	83df8 <__divdi3+0xc>
   83f44:	4095      	lsls	r5, r2
   83f46:	f1c2 0920 	rsb	r9, r2, #32
   83f4a:	fa27 f109 	lsr.w	r1, r7, r9
   83f4e:	fa26 f909 	lsr.w	r9, r6, r9
   83f52:	4097      	lsls	r7, r2
   83f54:	0c28      	lsrs	r0, r5, #16
   83f56:	fbb1 f8f0 	udiv	r8, r1, r0
   83f5a:	fb00 1118 	mls	r1, r0, r8, r1
   83f5e:	fa1f fc85 	uxth.w	ip, r5
   83f62:	fb0c f308 	mul.w	r3, ip, r8
   83f66:	ea49 0907 	orr.w	r9, r9, r7
   83f6a:	ea4f 4719 	mov.w	r7, r9, lsr #16
   83f6e:	ea47 4101 	orr.w	r1, r7, r1, lsl #16
   83f72:	428b      	cmp	r3, r1
   83f74:	fa06 f602 	lsl.w	r6, r6, r2
   83f78:	d908      	bls.n	83f8c <__divdi3+0x1a0>
   83f7a:	1949      	adds	r1, r1, r5
   83f7c:	f108 32ff 	add.w	r2, r8, #4294967295
   83f80:	d27a      	bcs.n	84078 <__divdi3+0x28c>
   83f82:	428b      	cmp	r3, r1
   83f84:	d978      	bls.n	84078 <__divdi3+0x28c>
   83f86:	f1a8 0802 	sub.w	r8, r8, #2
   83f8a:	4429      	add	r1, r5
   83f8c:	1ac9      	subs	r1, r1, r3
   83f8e:	fbb1 f3f0 	udiv	r3, r1, r0
   83f92:	fb00 1713 	mls	r7, r0, r3, r1
   83f96:	fb0c f203 	mul.w	r2, ip, r3
   83f9a:	fa1f f989 	uxth.w	r9, r9
   83f9e:	ea49 4707 	orr.w	r7, r9, r7, lsl #16
   83fa2:	42ba      	cmp	r2, r7
   83fa4:	d907      	bls.n	83fb6 <__divdi3+0x1ca>
   83fa6:	197f      	adds	r7, r7, r5
   83fa8:	f103 31ff 	add.w	r1, r3, #4294967295
   83fac:	d260      	bcs.n	84070 <__divdi3+0x284>
   83fae:	42ba      	cmp	r2, r7
   83fb0:	d95e      	bls.n	84070 <__divdi3+0x284>
   83fb2:	3b02      	subs	r3, #2
   83fb4:	442f      	add	r7, r5
   83fb6:	1abf      	subs	r7, r7, r2
   83fb8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   83fbc:	e78c      	b.n	83ed8 <__divdi3+0xec>
   83fbe:	f1c8 0220 	rsb	r2, r8, #32
   83fc2:	fa25 f102 	lsr.w	r1, r5, r2
   83fc6:	fa03 fc08 	lsl.w	ip, r3, r8
   83fca:	fa27 f302 	lsr.w	r3, r7, r2
   83fce:	fa20 f202 	lsr.w	r2, r0, r2
   83fd2:	fa07 f708 	lsl.w	r7, r7, r8
   83fd6:	ea41 0c0c 	orr.w	ip, r1, ip
   83fda:	ea4f 491c 	mov.w	r9, ip, lsr #16
   83fde:	fbb3 f1f9 	udiv	r1, r3, r9
   83fe2:	fb09 3311 	mls	r3, r9, r1, r3
   83fe6:	fa1f fa8c 	uxth.w	sl, ip
   83fea:	fb0a fb01 	mul.w	fp, sl, r1
   83fee:	4317      	orrs	r7, r2
   83ff0:	0c3a      	lsrs	r2, r7, #16
   83ff2:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   83ff6:	459b      	cmp	fp, r3
   83ff8:	fa05 f008 	lsl.w	r0, r5, r8
   83ffc:	d908      	bls.n	84010 <__divdi3+0x224>
   83ffe:	eb13 030c 	adds.w	r3, r3, ip
   84002:	f101 32ff 	add.w	r2, r1, #4294967295
   84006:	d235      	bcs.n	84074 <__divdi3+0x288>
   84008:	459b      	cmp	fp, r3
   8400a:	d933      	bls.n	84074 <__divdi3+0x288>
   8400c:	3902      	subs	r1, #2
   8400e:	4463      	add	r3, ip
   84010:	ebcb 0303 	rsb	r3, fp, r3
   84014:	fbb3 f2f9 	udiv	r2, r3, r9
   84018:	fb09 3312 	mls	r3, r9, r2, r3
   8401c:	fb0a fa02 	mul.w	sl, sl, r2
   84020:	b2bf      	uxth	r7, r7
   84022:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
   84026:	45ba      	cmp	sl, r7
   84028:	d908      	bls.n	8403c <__divdi3+0x250>
   8402a:	eb17 070c 	adds.w	r7, r7, ip
   8402e:	f102 33ff 	add.w	r3, r2, #4294967295
   84032:	d21b      	bcs.n	8406c <__divdi3+0x280>
   84034:	45ba      	cmp	sl, r7
   84036:	d919      	bls.n	8406c <__divdi3+0x280>
   84038:	3a02      	subs	r2, #2
   8403a:	4467      	add	r7, ip
   8403c:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
   84040:	fba5 0100 	umull	r0, r1, r5, r0
   84044:	ebca 0707 	rsb	r7, sl, r7
   84048:	428f      	cmp	r7, r1
   8404a:	f04f 0300 	mov.w	r3, #0
   8404e:	d30a      	bcc.n	84066 <__divdi3+0x27a>
   84050:	d005      	beq.n	8405e <__divdi3+0x272>
   84052:	462a      	mov	r2, r5
   84054:	e71c      	b.n	83e90 <__divdi3+0xa4>
   84056:	4662      	mov	r2, ip
   84058:	e6fd      	b.n	83e56 <__divdi3+0x6a>
   8405a:	463b      	mov	r3, r7
   8405c:	e710      	b.n	83e80 <__divdi3+0x94>
   8405e:	fa06 f608 	lsl.w	r6, r6, r8
   84062:	4286      	cmp	r6, r0
   84064:	d2f5      	bcs.n	84052 <__divdi3+0x266>
   84066:	1e6a      	subs	r2, r5, #1
   84068:	2300      	movs	r3, #0
   8406a:	e711      	b.n	83e90 <__divdi3+0xa4>
   8406c:	461a      	mov	r2, r3
   8406e:	e7e5      	b.n	8403c <__divdi3+0x250>
   84070:	460b      	mov	r3, r1
   84072:	e7a0      	b.n	83fb6 <__divdi3+0x1ca>
   84074:	4611      	mov	r1, r2
   84076:	e7cb      	b.n	84010 <__divdi3+0x224>
   84078:	4690      	mov	r8, r2
   8407a:	e787      	b.n	83f8c <__divdi3+0x1a0>
   8407c:	4643      	mov	r3, r8
   8407e:	4642      	mov	r2, r8
   84080:	e706      	b.n	83e90 <__divdi3+0xa4>
   84082:	3a02      	subs	r2, #2
   84084:	e750      	b.n	83f28 <__divdi3+0x13c>
   84086:	3902      	subs	r1, #2
   84088:	442f      	add	r7, r5
   8408a:	e739      	b.n	83f00 <__divdi3+0x114>

0008408c <__udivdi3>:
   8408c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   84090:	4614      	mov	r4, r2
   84092:	4605      	mov	r5, r0
   84094:	460e      	mov	r6, r1
   84096:	2b00      	cmp	r3, #0
   84098:	d143      	bne.n	84122 <__udivdi3+0x96>
   8409a:	428a      	cmp	r2, r1
   8409c:	d953      	bls.n	84146 <__udivdi3+0xba>
   8409e:	fab2 f782 	clz	r7, r2
   840a2:	b157      	cbz	r7, 840ba <__udivdi3+0x2e>
   840a4:	f1c7 0620 	rsb	r6, r7, #32
   840a8:	fa20 f606 	lsr.w	r6, r0, r6
   840ac:	fa01 f307 	lsl.w	r3, r1, r7
   840b0:	fa02 f407 	lsl.w	r4, r2, r7
   840b4:	fa00 f507 	lsl.w	r5, r0, r7
   840b8:	431e      	orrs	r6, r3
   840ba:	0c21      	lsrs	r1, r4, #16
   840bc:	fbb6 f2f1 	udiv	r2, r6, r1
   840c0:	fb01 6612 	mls	r6, r1, r2, r6
   840c4:	b2a0      	uxth	r0, r4
   840c6:	fb00 f302 	mul.w	r3, r0, r2
   840ca:	0c2f      	lsrs	r7, r5, #16
   840cc:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   840d0:	42b3      	cmp	r3, r6
   840d2:	d909      	bls.n	840e8 <__udivdi3+0x5c>
   840d4:	1936      	adds	r6, r6, r4
   840d6:	f102 37ff 	add.w	r7, r2, #4294967295
   840da:	f080 80fd 	bcs.w	842d8 <__udivdi3+0x24c>
   840de:	42b3      	cmp	r3, r6
   840e0:	f240 80fa 	bls.w	842d8 <__udivdi3+0x24c>
   840e4:	3a02      	subs	r2, #2
   840e6:	4426      	add	r6, r4
   840e8:	1af6      	subs	r6, r6, r3
   840ea:	fbb6 f3f1 	udiv	r3, r6, r1
   840ee:	fb01 6113 	mls	r1, r1, r3, r6
   840f2:	fb00 f003 	mul.w	r0, r0, r3
   840f6:	b2ad      	uxth	r5, r5
   840f8:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
   840fc:	4288      	cmp	r0, r1
   840fe:	d908      	bls.n	84112 <__udivdi3+0x86>
   84100:	1909      	adds	r1, r1, r4
   84102:	f103 36ff 	add.w	r6, r3, #4294967295
   84106:	f080 80e9 	bcs.w	842dc <__udivdi3+0x250>
   8410a:	4288      	cmp	r0, r1
   8410c:	f240 80e6 	bls.w	842dc <__udivdi3+0x250>
   84110:	3b02      	subs	r3, #2
   84112:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   84116:	2300      	movs	r3, #0
   84118:	4610      	mov	r0, r2
   8411a:	4619      	mov	r1, r3
   8411c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   84120:	4770      	bx	lr
   84122:	428b      	cmp	r3, r1
   84124:	d84c      	bhi.n	841c0 <__udivdi3+0x134>
   84126:	fab3 f683 	clz	r6, r3
   8412a:	2e00      	cmp	r6, #0
   8412c:	d14f      	bne.n	841ce <__udivdi3+0x142>
   8412e:	428b      	cmp	r3, r1
   84130:	d302      	bcc.n	84138 <__udivdi3+0xac>
   84132:	4282      	cmp	r2, r0
   84134:	f200 80dd 	bhi.w	842f2 <__udivdi3+0x266>
   84138:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8413c:	2300      	movs	r3, #0
   8413e:	2201      	movs	r2, #1
   84140:	4610      	mov	r0, r2
   84142:	4619      	mov	r1, r3
   84144:	4770      	bx	lr
   84146:	b912      	cbnz	r2, 8414e <__udivdi3+0xc2>
   84148:	2401      	movs	r4, #1
   8414a:	fbb4 f4f2 	udiv	r4, r4, r2
   8414e:	fab4 f284 	clz	r2, r4
   84152:	2a00      	cmp	r2, #0
   84154:	f040 8082 	bne.w	8425c <__udivdi3+0x1d0>
   84158:	1b09      	subs	r1, r1, r4
   8415a:	0c26      	lsrs	r6, r4, #16
   8415c:	b2a7      	uxth	r7, r4
   8415e:	2301      	movs	r3, #1
   84160:	fbb1 f0f6 	udiv	r0, r1, r6
   84164:	fb06 1110 	mls	r1, r6, r0, r1
   84168:	fb07 f200 	mul.w	r2, r7, r0
   8416c:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   84170:	ea4c 4101 	orr.w	r1, ip, r1, lsl #16
   84174:	428a      	cmp	r2, r1
   84176:	d907      	bls.n	84188 <__udivdi3+0xfc>
   84178:	1909      	adds	r1, r1, r4
   8417a:	f100 3cff 	add.w	ip, r0, #4294967295
   8417e:	d202      	bcs.n	84186 <__udivdi3+0xfa>
   84180:	428a      	cmp	r2, r1
   84182:	f200 80c8 	bhi.w	84316 <__udivdi3+0x28a>
   84186:	4660      	mov	r0, ip
   84188:	1a89      	subs	r1, r1, r2
   8418a:	fbb1 f2f6 	udiv	r2, r1, r6
   8418e:	fb06 1112 	mls	r1, r6, r2, r1
   84192:	fb07 f702 	mul.w	r7, r7, r2
   84196:	b2ad      	uxth	r5, r5
   84198:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
   8419c:	42af      	cmp	r7, r5
   8419e:	d908      	bls.n	841b2 <__udivdi3+0x126>
   841a0:	192c      	adds	r4, r5, r4
   841a2:	f102 31ff 	add.w	r1, r2, #4294967295
   841a6:	f080 809b 	bcs.w	842e0 <__udivdi3+0x254>
   841aa:	42a7      	cmp	r7, r4
   841ac:	f240 8098 	bls.w	842e0 <__udivdi3+0x254>
   841b0:	3a02      	subs	r2, #2
   841b2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
   841b6:	4610      	mov	r0, r2
   841b8:	4619      	mov	r1, r3
   841ba:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   841be:	4770      	bx	lr
   841c0:	2300      	movs	r3, #0
   841c2:	461a      	mov	r2, r3
   841c4:	4610      	mov	r0, r2
   841c6:	4619      	mov	r1, r3
   841c8:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   841cc:	4770      	bx	lr
   841ce:	f1c6 0520 	rsb	r5, r6, #32
   841d2:	fa22 f705 	lsr.w	r7, r2, r5
   841d6:	fa03 f406 	lsl.w	r4, r3, r6
   841da:	fa21 f305 	lsr.w	r3, r1, r5
   841de:	fa01 fb06 	lsl.w	fp, r1, r6
   841e2:	fa20 f505 	lsr.w	r5, r0, r5
   841e6:	433c      	orrs	r4, r7
   841e8:	ea4f 4814 	mov.w	r8, r4, lsr #16
   841ec:	fbb3 fcf8 	udiv	ip, r3, r8
   841f0:	fb08 331c 	mls	r3, r8, ip, r3
   841f4:	fa1f f984 	uxth.w	r9, r4
   841f8:	fb09 fa0c 	mul.w	sl, r9, ip
   841fc:	ea45 0b0b 	orr.w	fp, r5, fp
   84200:	ea4f 451b 	mov.w	r5, fp, lsr #16
   84204:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
   84208:	459a      	cmp	sl, r3
   8420a:	fa02 f206 	lsl.w	r2, r2, r6
   8420e:	d904      	bls.n	8421a <__udivdi3+0x18e>
   84210:	191b      	adds	r3, r3, r4
   84212:	f10c 35ff 	add.w	r5, ip, #4294967295
   84216:	d36f      	bcc.n	842f8 <__udivdi3+0x26c>
   84218:	46ac      	mov	ip, r5
   8421a:	ebca 0303 	rsb	r3, sl, r3
   8421e:	fbb3 f5f8 	udiv	r5, r3, r8
   84222:	fb08 3315 	mls	r3, r8, r5, r3
   84226:	fb09 f905 	mul.w	r9, r9, r5
   8422a:	fa1f fb8b 	uxth.w	fp, fp
   8422e:	ea4b 4703 	orr.w	r7, fp, r3, lsl #16
   84232:	45b9      	cmp	r9, r7
   84234:	d904      	bls.n	84240 <__udivdi3+0x1b4>
   84236:	193f      	adds	r7, r7, r4
   84238:	f105 33ff 	add.w	r3, r5, #4294967295
   8423c:	d362      	bcc.n	84304 <__udivdi3+0x278>
   8423e:	461d      	mov	r5, r3
   84240:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
   84244:	fbac 2302 	umull	r2, r3, ip, r2
   84248:	ebc9 0707 	rsb	r7, r9, r7
   8424c:	429f      	cmp	r7, r3
   8424e:	f04f 0500 	mov.w	r5, #0
   84252:	d34a      	bcc.n	842ea <__udivdi3+0x25e>
   84254:	d046      	beq.n	842e4 <__udivdi3+0x258>
   84256:	4662      	mov	r2, ip
   84258:	462b      	mov	r3, r5
   8425a:	e75d      	b.n	84118 <__udivdi3+0x8c>
   8425c:	4094      	lsls	r4, r2
   8425e:	f1c2 0920 	rsb	r9, r2, #32
   84262:	fa21 fc09 	lsr.w	ip, r1, r9
   84266:	4091      	lsls	r1, r2
   84268:	fa20 f909 	lsr.w	r9, r0, r9
   8426c:	0c26      	lsrs	r6, r4, #16
   8426e:	fbbc f8f6 	udiv	r8, ip, r6
   84272:	fb06 cc18 	mls	ip, r6, r8, ip
   84276:	b2a7      	uxth	r7, r4
   84278:	fb07 f308 	mul.w	r3, r7, r8
   8427c:	ea49 0901 	orr.w	r9, r9, r1
   84280:	ea4f 4119 	mov.w	r1, r9, lsr #16
   84284:	ea41 4c0c 	orr.w	ip, r1, ip, lsl #16
   84288:	4563      	cmp	r3, ip
   8428a:	fa00 f502 	lsl.w	r5, r0, r2
   8428e:	d909      	bls.n	842a4 <__udivdi3+0x218>
   84290:	eb1c 0c04 	adds.w	ip, ip, r4
   84294:	f108 32ff 	add.w	r2, r8, #4294967295
   84298:	d23b      	bcs.n	84312 <__udivdi3+0x286>
   8429a:	4563      	cmp	r3, ip
   8429c:	d939      	bls.n	84312 <__udivdi3+0x286>
   8429e:	f1a8 0802 	sub.w	r8, r8, #2
   842a2:	44a4      	add	ip, r4
   842a4:	ebc3 0c0c 	rsb	ip, r3, ip
   842a8:	fbbc f3f6 	udiv	r3, ip, r6
   842ac:	fb06 c113 	mls	r1, r6, r3, ip
   842b0:	fb07 f203 	mul.w	r2, r7, r3
   842b4:	fa1f f989 	uxth.w	r9, r9
   842b8:	ea49 4101 	orr.w	r1, r9, r1, lsl #16
   842bc:	428a      	cmp	r2, r1
   842be:	d907      	bls.n	842d0 <__udivdi3+0x244>
   842c0:	1909      	adds	r1, r1, r4
   842c2:	f103 30ff 	add.w	r0, r3, #4294967295
   842c6:	d222      	bcs.n	8430e <__udivdi3+0x282>
   842c8:	428a      	cmp	r2, r1
   842ca:	d920      	bls.n	8430e <__udivdi3+0x282>
   842cc:	3b02      	subs	r3, #2
   842ce:	4421      	add	r1, r4
   842d0:	1a89      	subs	r1, r1, r2
   842d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   842d6:	e743      	b.n	84160 <__udivdi3+0xd4>
   842d8:	463a      	mov	r2, r7
   842da:	e705      	b.n	840e8 <__udivdi3+0x5c>
   842dc:	4633      	mov	r3, r6
   842de:	e718      	b.n	84112 <__udivdi3+0x86>
   842e0:	460a      	mov	r2, r1
   842e2:	e766      	b.n	841b2 <__udivdi3+0x126>
   842e4:	40b0      	lsls	r0, r6
   842e6:	4290      	cmp	r0, r2
   842e8:	d2b5      	bcs.n	84256 <__udivdi3+0x1ca>
   842ea:	f10c 32ff 	add.w	r2, ip, #4294967295
   842ee:	2300      	movs	r3, #0
   842f0:	e712      	b.n	84118 <__udivdi3+0x8c>
   842f2:	4633      	mov	r3, r6
   842f4:	4632      	mov	r2, r6
   842f6:	e70f      	b.n	84118 <__udivdi3+0x8c>
   842f8:	459a      	cmp	sl, r3
   842fa:	d98d      	bls.n	84218 <__udivdi3+0x18c>
   842fc:	f1ac 0c02 	sub.w	ip, ip, #2
   84300:	4423      	add	r3, r4
   84302:	e78a      	b.n	8421a <__udivdi3+0x18e>
   84304:	45b9      	cmp	r9, r7
   84306:	d99a      	bls.n	8423e <__udivdi3+0x1b2>
   84308:	3d02      	subs	r5, #2
   8430a:	4427      	add	r7, r4
   8430c:	e798      	b.n	84240 <__udivdi3+0x1b4>
   8430e:	4603      	mov	r3, r0
   84310:	e7de      	b.n	842d0 <__udivdi3+0x244>
   84312:	4690      	mov	r8, r2
   84314:	e7c6      	b.n	842a4 <__udivdi3+0x218>
   84316:	3802      	subs	r0, #2
   84318:	4421      	add	r1, r4
   8431a:	e735      	b.n	84188 <__udivdi3+0xfc>
   8431c:	00000724 	.word	0x00000724
   84320:	5f495754 	.word	0x5f495754
   84324:	5f444d43 	.word	0x5f444d43
   84328:	5f4d5241 	.word	0x5f4d5241
   8432c:	54494e49 	.word	0x54494e49
   84330:	0000000a 	.word	0x0000000a
   84334:	5f495754 	.word	0x5f495754
   84338:	5f444d43 	.word	0x5f444d43
   8433c:	5f4d5241 	.word	0x5f4d5241
   84340:	5f514552 	.word	0x5f514552
   84344:	5f584f42 	.word	0x5f584f42
   84348:	4f464e49 	.word	0x4f464e49
   8434c:	0000000a 	.word	0x0000000a
   84350:	5f495754 	.word	0x5f495754
   84354:	5f444d43 	.word	0x5f444d43
   84358:	5f4d5241 	.word	0x5f4d5241
   8435c:	5f514552 	.word	0x5f514552
   84360:	5f4a424f 	.word	0x5f4a424f
   84364:	4f464e49 	.word	0x4f464e49
   84368:	0000000a 	.word	0x0000000a
   8436c:	5f495754 	.word	0x5f495754
   84370:	5f444d43 	.word	0x5f444d43
   84374:	5f4d5241 	.word	0x5f4d5241
   84378:	5f514552 	.word	0x5f514552
   8437c:	4c4c4f43 	.word	0x4c4c4f43
   84380:	5f544345 	.word	0x5f544345
   84384:	4f464e49 	.word	0x4f464e49
   84388:	0000000a 	.word	0x0000000a
   8438c:	5f495754 	.word	0x5f495754
   84390:	5f444d43 	.word	0x5f444d43
   84394:	4b434950 	.word	0x4b434950
   84398:	535f5055 	.word	0x535f5055
   8439c:	54524154 	.word	0x54524154
   843a0:	0000000a 	.word	0x0000000a
   843a4:	5f495754 	.word	0x5f495754
   843a8:	5f444d43 	.word	0x5f444d43
   843ac:	4b434950 	.word	0x4b434950
   843b0:	535f5055 	.word	0x535f5055
   843b4:	55544154 	.word	0x55544154
   843b8:	00000a53 	.word	0x00000a53
   843bc:	5f495754 	.word	0x5f495754
   843c0:	5f444d43 	.word	0x5f444d43
   843c4:	504f5244 	.word	0x504f5244
   843c8:	5f46464f 	.word	0x5f46464f
   843cc:	52415453 	.word	0x52415453
   843d0:	00000a54 	.word	0x00000a54
   843d4:	5f495754 	.word	0x5f495754
   843d8:	5f444d43 	.word	0x5f444d43
   843dc:	504f5244 	.word	0x504f5244
   843e0:	5f46464f 	.word	0x5f46464f
   843e4:	54415453 	.word	0x54415453
   843e8:	000a5355 	.word	0x000a5355
   843ec:	5f495754 	.word	0x5f495754
   843f0:	5f444d43 	.word	0x5f444d43
   843f4:	4f525245 	.word	0x4f525245
   843f8:	00000a52 	.word	0x00000a52
   843fc:	6f727265 	.word	0x6f727265
   84400:	00000a72 	.word	0x00000a72
   84404:	6c696146 	.word	0x6c696146
   84408:	31313120 	.word	0x31313120
   8440c:	00000000 	.word	0x00000000
   84410:	6c696146 	.word	0x6c696146
   84414:	32323220 	.word	0x32323220
   84418:	00000000 	.word	0x00000000
   8441c:	6c696146 	.word	0x6c696146
   84420:	33333320 	.word	0x33333320
   84424:	00000000 	.word	0x00000000
   84428:	4f525245 	.word	0x4f525245
   8442c:	69702052 	.word	0x69702052
   84430:	70756b63 	.word	0x70756b63
   84434:	61747320 	.word	0x61747320
   84438:	00737574 	.word	0x00737574
   8443c:	3a746f67 	.word	0x3a746f67
   84440:	20782520 	.word	0x20782520
   84444:	000a7525 	.word	0x000a7525
   84448:	6f727245 	.word	0x6f727245
   8444c:	6e6f2072 	.word	0x6e6f2072
   84450:	6e657320 	.word	0x6e657320
   84454:	74732064 	.word	0x74732064
   84458:	73757461 	.word	0x73757461
   8445c:	63697020 	.word	0x63697020
   84460:	0070756b 	.word	0x0070756b
   84464:	444e4553 	.word	0x444e4553
   84468:	434f5320 	.word	0x434f5320
   8446c:	5854454b 	.word	0x5854454b
   84470:	00000059 	.word	0x00000059
   84474:	444e4553 	.word	0x444e4553
   84478:	55515320 	.word	0x55515320
   8447c:	58455241 	.word	0x58455241
   84480:	00000059 	.word	0x00000059
   84484:	444e4553 	.word	0x444e4553
   84488:	414c4720 	.word	0x414c4720
   8448c:	59585353 	.word	0x59585353
   84490:	00000000 	.word	0x00000000
   84494:	444e4553 	.word	0x444e4553
   84498:	786f4220 	.word	0x786f4220
   8449c:	6c616f47 	.word	0x6c616f47
   844a0:	00007978 	.word	0x00007978
   844a4:	74697257 	.word	0x74697257
   844a8:	6f742065 	.word	0x6f742065
   844ac:	616c7320 	.word	0x616c7320
   844b0:	00006576 	.word	0x00006576
   844b4:	74697257 	.word	0x74697257
   844b8:	6f742065 	.word	0x6f742065
   844bc:	616c7320 	.word	0x616c7320
   844c0:	64206576 	.word	0x64206576
   844c4:	00656e6f 	.word	0x00656e6f
   844c8:	64616552 	.word	0x64616552
   844cc:	6f726620 	.word	0x6f726620
   844d0:	6c73206d 	.word	0x6c73206d
   844d4:	00657661 	.word	0x00657661
   844d8:	656e6f44 	.word	0x656e6f44
   844dc:	61657220 	.word	0x61657220
   844e0:	676e6964 	.word	0x676e6964
   844e4:	00000000 	.word	0x00000000
   844e8:	20746f67 	.word	0x20746f67
   844ec:	41544144 	.word	0x41544144
   844f0:	0064253a 	.word	0x0064253a
   844f4:	6f727265 	.word	0x6f727265
   844f8:	6e6f2072 	.word	0x6e6f2072
   844fc:	69727720 	.word	0x69727720
   84500:	74206574 	.word	0x74206574
   84504:	6c73206f 	.word	0x6c73206f
   84508:	00657661 	.word	0x00657661
   8450c:	20514552 	.word	0x20514552
   84510:	206d7261 	.word	0x206d7261
   84514:	6f666e69 	.word	0x6f666e69
   84518:	00000000 	.word	0x00000000
   8451c:	496d7261 	.word	0x496d7261
   84520:	3a6f666e 	.word	0x3a6f666e
   84524:	786f6220 	.word	0x786f6220
   84528:	25203a41 	.word	0x25203a41
   8452c:	6f622064 	.word	0x6f622064
   84530:	203a4478 	.word	0x203a4478
   84534:	6f206425 	.word	0x6f206425
   84538:	20416a62 	.word	0x20416a62
   8453c:	6f206425 	.word	0x6f206425
   84540:	20446a62 	.word	0x20446a62
   84544:	63206425 	.word	0x63206425
   84548:	203a6c6f 	.word	0x203a6c6f
   8454c:	00006425 	.word	0x00006425
   84550:	20697774 	.word	0x20697774
   84554:	6b636970 	.word	0x6b636970
   84558:	00000000 	.word	0x00000000
   8455c:	6c696166 	.word	0x6c696166
   84560:	74206465 	.word	0x74206465
   84564:	7320746f 	.word	0x7320746f
   84568:	74726174 	.word	0x74726174
   8456c:	63697020 	.word	0x63697020
   84570:	2170756b 	.word	0x2170756b
   84574:	00000000 	.word	0x00000000
   84578:	72617453 	.word	0x72617453
   8457c:	20646574 	.word	0x20646574
   84580:	6b636970 	.word	0x6b636970
   84584:	00007075 	.word	0x00007075
   84588:	74206f64 	.word	0x74206f64
   8458c:	73206957 	.word	0x73206957
   84590:	75746174 	.word	0x75746174
   84594:	00000073 	.word	0x00000073
   84598:	4b434950 	.word	0x4b434950
   8459c:	535f5055 	.word	0x535f5055
   845a0:	55544154 	.word	0x55544154
   845a4:	49502e53 	.word	0x49502e53
   845a8:	50554b43 	.word	0x50554b43
   845ac:	4341425f 	.word	0x4341425f
   845b0:	5241574b 	.word	0x5241574b
   845b4:	00003a44 	.word	0x00003a44
   845b8:	6b636162 	.word	0x6b636162
   845bc:	7525203a 	.word	0x7525203a
   845c0:	0000000a 	.word	0x0000000a
   845c4:	4b434950 	.word	0x4b434950
   845c8:	445f5055 	.word	0x445f5055
   845cc:	00454e4f 	.word	0x00454e4f
   845d0:	4b434950 	.word	0x4b434950
   845d4:	445f5055 	.word	0x445f5055
   845d8:	5f454e4f 	.word	0x5f454e4f
   845dc:	56495244 	.word	0x56495244
   845e0:	00003a45 	.word	0x00003a45
   845e4:	4b434950 	.word	0x4b434950
   845e8:	465f5055 	.word	0x465f5055
   845ec:	454c4941 	.word	0x454c4941
   845f0:	00000044 	.word	0x00000044
   845f4:	4b434950 	.word	0x4b434950
   845f8:	535f5055 	.word	0x535f5055
   845fc:	55544154 	.word	0x55544154
   84600:	49502e53 	.word	0x49502e53
   84604:	50554b43 	.word	0x50554b43
   84608:	524f465f 	.word	0x524f465f
   8460c:	44524157 	.word	0x44524157
   84610:	0000003a 	.word	0x0000003a
   84614:	77726f66 	.word	0x77726f66
   84618:	3a647261 	.word	0x3a647261
   8461c:	0a752520 	.word	0x0a752520
   84620:	00000000 	.word	0x00000000
   84624:	4b434950 	.word	0x4b434950
   84628:	525f5055 	.word	0x525f5055
   8462c:	494e4e55 	.word	0x494e4e55
   84630:	0000474e 	.word	0x0000474e
   84634:	4b434950 	.word	0x4b434950
   84638:	495f5055 	.word	0x495f5055
   8463c:	00454c44 	.word	0x00454c44
   84640:	6b636970 	.word	0x6b636970
   84644:	73207075 	.word	0x73207075
   84648:	75746174 	.word	0x75746174
   8464c:	72652073 	.word	0x72652073
   84650:	00726f72 	.word	0x00726f72
   84654:	49564f4d 	.word	0x49564f4d
   84658:	4620474e 	.word	0x4620474e
   8465c:	00445752 	.word	0x00445752
   84660:	454e4f44 	.word	0x454e4f44
   84664:	564f4d20 	.word	0x564f4d20
   84668:	00000045 	.word	0x00000045
   8466c:	20697774 	.word	0x20697774
   84670:	74736574 	.word	0x74736574
   84674:	6f726420 	.word	0x6f726420
   84678:	66666f70 	.word	0x66666f70
   8467c:	00000000 	.word	0x00000000
   84680:	6f727265 	.word	0x6f727265
   84684:	74732072 	.word	0x74732072
   84688:	20747261 	.word	0x20747261
   8468c:	706f7264 	.word	0x706f7264
   84690:	0066666f 	.word	0x0066666f
   84694:	504f5244 	.word	0x504f5244
   84698:	5f46464f 	.word	0x5f46464f
   8469c:	4e4e5552 	.word	0x4e4e5552
   846a0:	00474e49 	.word	0x00474e49
   846a4:	504f5244 	.word	0x504f5244
   846a8:	5f46464f 	.word	0x5f46464f
   846ac:	4c494146 	.word	0x4c494146
   846b0:	003a4445 	.word	0x003a4445
   846b4:	504f5244 	.word	0x504f5244
   846b8:	5f46464f 	.word	0x5f46464f
   846bc:	454e4f44 	.word	0x454e4f44
   846c0:	0000003a 	.word	0x0000003a
   846c4:	706f7264 	.word	0x706f7264
   846c8:	2066666f 	.word	0x2066666f
   846cc:	6e6b6e75 	.word	0x6e6b6e75
   846d0:	006e776f 	.word	0x006e776f
   846d4:	00006325 	.word	0x00006325
   846d8:	20495754 	.word	0x20495754
   846dc:	6f727265 	.word	0x6f727265
   846e0:	6e6f2072 	.word	0x6e6f2072
   846e4:	6f727020 	.word	0x6f727020
   846e8:	00006562 	.word	0x00006562
   846ec:	00000043 	.word	0x00000043

000846f0 <_global_impure_ptr>:
   846f0:	20070140 33323130 37363534 42413938     @.. 0123456789AB
   84700:	46454443 00000000 33323130 37363534     CDEF....01234567
   84710:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   84720:	0000296c                                l)..

00084724 <zeroes.6721>:
   84724:	30303030 30303030 30303030 30303030     0000000000000000

00084734 <blanks.6720>:
   84734:	20202020 20202020 20202020 20202020                     

00084744 <_init>:
   84744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84746:	bf00      	nop
   84748:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8474a:	bc08      	pop	{r3}
   8474c:	469e      	mov	lr, r3
   8474e:	4770      	bx	lr

00084750 <__init_array_start>:
   84750:	00082411 	.word	0x00082411

00084754 <__frame_dummy_init_array_entry>:
   84754:	00080119                                ....

00084758 <_fini>:
   84758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8475a:	bf00      	nop
   8475c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8475e:	bc08      	pop	{r3}
   84760:	469e      	mov	lr, r3
   84762:	4770      	bx	lr

00084764 <__fini_array_start>:
   84764:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20070000:	f3bf 8f5f 	dmb	sy
20070004:	3801      	subs	r0, #1
20070006:	d1fb      	bne.n	20070000 <portable_delay_cycles>
20070008:	4770      	bx	lr
2007000a:	bf00      	nop

2007000c <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007000c:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070010:	4a20      	ldr	r2, [pc, #128]	; (20070094 <SystemInit+0x88>)
20070012:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070014:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070018:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007001a:	4b1f      	ldr	r3, [pc, #124]	; (20070098 <SystemInit+0x8c>)
2007001c:	6a1b      	ldr	r3, [r3, #32]
2007001e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070022:	d107      	bne.n	20070034 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070024:	4a1d      	ldr	r2, [pc, #116]	; (2007009c <SystemInit+0x90>)
20070026:	4b1c      	ldr	r3, [pc, #112]	; (20070098 <SystemInit+0x8c>)
20070028:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007002a:	461a      	mov	r2, r3
2007002c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007002e:	f013 0f01 	tst.w	r3, #1
20070032:	d0fb      	beq.n	2007002c <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070034:	4a1a      	ldr	r2, [pc, #104]	; (200700a0 <SystemInit+0x94>)
20070036:	4b18      	ldr	r3, [pc, #96]	; (20070098 <SystemInit+0x8c>)
20070038:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007003a:	461a      	mov	r2, r3
2007003c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007003e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070042:	d0fb      	beq.n	2007003c <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070044:	4b14      	ldr	r3, [pc, #80]	; (20070098 <SystemInit+0x8c>)
20070046:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20070048:	f022 0203 	bic.w	r2, r2, #3
2007004c:	f042 0201 	orr.w	r2, r2, #1
20070050:	631a      	str	r2, [r3, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070052:	461a      	mov	r2, r3
20070054:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070056:	f013 0f08 	tst.w	r3, #8
2007005a:	d0fb      	beq.n	20070054 <SystemInit+0x48>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007005c:	4a11      	ldr	r2, [pc, #68]	; (200700a4 <SystemInit+0x98>)
2007005e:	4b0e      	ldr	r3, [pc, #56]	; (20070098 <SystemInit+0x8c>)
20070060:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070062:	461a      	mov	r2, r3
20070064:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070066:	f013 0f02 	tst.w	r3, #2
2007006a:	d0fb      	beq.n	20070064 <SystemInit+0x58>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007006c:	2211      	movs	r2, #17
2007006e:	4b0a      	ldr	r3, [pc, #40]	; (20070098 <SystemInit+0x8c>)
20070070:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070072:	461a      	mov	r2, r3
20070074:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070076:	f013 0f08 	tst.w	r3, #8
2007007a:	d0fb      	beq.n	20070074 <SystemInit+0x68>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007007c:	2212      	movs	r2, #18
2007007e:	4b06      	ldr	r3, [pc, #24]	; (20070098 <SystemInit+0x8c>)
20070080:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070082:	461a      	mov	r2, r3
20070084:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070086:	f013 0f08 	tst.w	r3, #8
2007008a:	d0fb      	beq.n	20070084 <SystemInit+0x78>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007008c:	4a06      	ldr	r2, [pc, #24]	; (200700a8 <SystemInit+0x9c>)
2007008e:	4b07      	ldr	r3, [pc, #28]	; (200700ac <SystemInit+0xa0>)
20070090:	601a      	str	r2, [r3, #0]
20070092:	4770      	bx	lr
20070094:	400e0a00 	.word	0x400e0a00
20070098:	400e0600 	.word	0x400e0600
2007009c:	00370809 	.word	0x00370809
200700a0:	01370809 	.word	0x01370809
200700a4:	200d3f01 	.word	0x200d3f01
200700a8:	0501bd00 	.word	0x0501bd00
200700ac:	2007013c 	.word	0x2007013c

200700b0 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700b0:	4b1b      	ldr	r3, [pc, #108]	; (20070120 <system_init_flash+0x70>)
200700b2:	4298      	cmp	r0, r3
200700b4:	d806      	bhi.n	200700c4 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700b6:	2300      	movs	r3, #0
200700b8:	4a1a      	ldr	r2, [pc, #104]	; (20070124 <system_init_flash+0x74>)
200700ba:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700bc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700c0:	6013      	str	r3, [r2, #0]
200700c2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700c4:	4b18      	ldr	r3, [pc, #96]	; (20070128 <system_init_flash+0x78>)
200700c6:	4298      	cmp	r0, r3
200700c8:	d807      	bhi.n	200700da <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700ca:	f44f 7380 	mov.w	r3, #256	; 0x100
200700ce:	4a15      	ldr	r2, [pc, #84]	; (20070124 <system_init_flash+0x74>)
200700d0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700d2:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700d6:	6013      	str	r3, [r2, #0]
200700d8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700da:	4b14      	ldr	r3, [pc, #80]	; (2007012c <system_init_flash+0x7c>)
200700dc:	4298      	cmp	r0, r3
200700de:	d807      	bhi.n	200700f0 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700e0:	f44f 7300 	mov.w	r3, #512	; 0x200
200700e4:	4a0f      	ldr	r2, [pc, #60]	; (20070124 <system_init_flash+0x74>)
200700e6:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700e8:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ec:	6013      	str	r3, [r2, #0]
200700ee:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700f0:	4b0f      	ldr	r3, [pc, #60]	; (20070130 <system_init_flash+0x80>)
200700f2:	4298      	cmp	r0, r3
200700f4:	d807      	bhi.n	20070106 <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700f6:	f44f 7340 	mov.w	r3, #768	; 0x300
200700fa:	4a0a      	ldr	r2, [pc, #40]	; (20070124 <system_init_flash+0x74>)
200700fc:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700fe:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070102:	6013      	str	r3, [r2, #0]
20070104:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
20070106:	4b0b      	ldr	r3, [pc, #44]	; (20070134 <system_init_flash+0x84>)
20070108:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007010a:	bf94      	ite	ls
2007010c:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070110:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070114:	4a03      	ldr	r2, [pc, #12]	; (20070124 <system_init_flash+0x74>)
20070116:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
20070118:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007011c:	6013      	str	r3, [r2, #0]
2007011e:	4770      	bx	lr
20070120:	0121eabf 	.word	0x0121eabf
20070124:	400e0a00 	.word	0x400e0a00
20070128:	02faf07f 	.word	0x02faf07f
2007012c:	03d08fff 	.word	0x03d08fff
20070130:	04c4b3ff 	.word	0x04c4b3ff
20070134:	055d4a7f 	.word	0x055d4a7f

20070138 <twi_masterPickupStatus>:
20070138:	00000105                                         .

20070139 <g_interrupt_enabled>:
20070139:	00000001                                         ...

2007013c <SystemCoreClock>:
2007013c:	003d0900                                ..=.

20070140 <impure_data>:
20070140:	00000000 2007042c 20070494 200704fc     ....,.. ... ... 
	...
20070174:	000846ec 00000000 00000000 00000000     .F..............
	...
200701e8:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200701f8:	0005deec 0000000b 00000000 00000000     ................
	...

20070568 <_impure_ptr>:
20070568:	20070140                                @.. 

2007056c <lc_ctype_charset>:
2007056c:	49435341 00000049 00000000 00000000     ASCII...........
	...

2007058c <__mb_cur_max>:
2007058c:	00000001                                ....

20070590 <__malloc_av_>:
	...
20070598:	20070590 20070590 20070598 20070598     ... ... ... ... 
200705a8:	200705a0 200705a0 200705a8 200705a8     ... ... ... ... 
200705b8:	200705b0 200705b0 200705b8 200705b8     ... ... ... ... 
200705c8:	200705c0 200705c0 200705c8 200705c8     ... ... ... ... 
200705d8:	200705d0 200705d0 200705d8 200705d8     ... ... ... ... 
200705e8:	200705e0 200705e0 200705e8 200705e8     ... ... ... ... 
200705f8:	200705f0 200705f0 200705f8 200705f8     ... ... ... ... 
20070608:	20070600 20070600 20070608 20070608     ... ... ... ... 
20070618:	20070610 20070610 20070618 20070618     ... ... ... ... 
20070628:	20070620 20070620 20070628 20070628      ..  .. (.. (.. 
20070638:	20070630 20070630 20070638 20070638     0.. 0.. 8.. 8.. 
20070648:	20070640 20070640 20070648 20070648     @.. @.. H.. H.. 
20070658:	20070650 20070650 20070658 20070658     P.. P.. X.. X.. 
20070668:	20070660 20070660 20070668 20070668     `.. `.. h.. h.. 
20070678:	20070670 20070670 20070678 20070678     p.. p.. x.. x.. 
20070688:	20070680 20070680 20070688 20070688     ... ... ... ... 
20070698:	20070690 20070690 20070698 20070698     ... ... ... ... 
200706a8:	200706a0 200706a0 200706a8 200706a8     ... ... ... ... 
200706b8:	200706b0 200706b0 200706b8 200706b8     ... ... ... ... 
200706c8:	200706c0 200706c0 200706c8 200706c8     ... ... ... ... 
200706d8:	200706d0 200706d0 200706d8 200706d8     ... ... ... ... 
200706e8:	200706e0 200706e0 200706e8 200706e8     ... ... ... ... 
200706f8:	200706f0 200706f0 200706f8 200706f8     ... ... ... ... 
20070708:	20070700 20070700 20070708 20070708     ... ... ... ... 
20070718:	20070710 20070710 20070718 20070718     ... ... ... ... 
20070728:	20070720 20070720 20070728 20070728      ..  .. (.. (.. 
20070738:	20070730 20070730 20070738 20070738     0.. 0.. 8.. 8.. 
20070748:	20070740 20070740 20070748 20070748     @.. @.. H.. H.. 
20070758:	20070750 20070750 20070758 20070758     P.. P.. X.. X.. 
20070768:	20070760 20070760 20070768 20070768     `.. `.. h.. h.. 
20070778:	20070770 20070770 20070778 20070778     p.. p.. x.. x.. 
20070788:	20070780 20070780 20070788 20070788     ... ... ... ... 
20070798:	20070790 20070790 20070798 20070798     ... ... ... ... 
200707a8:	200707a0 200707a0 200707a8 200707a8     ... ... ... ... 
200707b8:	200707b0 200707b0 200707b8 200707b8     ... ... ... ... 
200707c8:	200707c0 200707c0 200707c8 200707c8     ... ... ... ... 
200707d8:	200707d0 200707d0 200707d8 200707d8     ... ... ... ... 
200707e8:	200707e0 200707e0 200707e8 200707e8     ... ... ... ... 
200707f8:	200707f0 200707f0 200707f8 200707f8     ... ... ... ... 
20070808:	20070800 20070800 20070808 20070808     ... ... ... ... 
20070818:	20070810 20070810 20070818 20070818     ... ... ... ... 
20070828:	20070820 20070820 20070828 20070828      ..  .. (.. (.. 
20070838:	20070830 20070830 20070838 20070838     0.. 0.. 8.. 8.. 
20070848:	20070840 20070840 20070848 20070848     @.. @.. H.. H.. 
20070858:	20070850 20070850 20070858 20070858     P.. P.. X.. X.. 
20070868:	20070860 20070860 20070868 20070868     `.. `.. h.. h.. 
20070878:	20070870 20070870 20070878 20070878     p.. p.. x.. x.. 
20070888:	20070880 20070880 20070888 20070888     ... ... ... ... 
20070898:	20070890 20070890 20070898 20070898     ... ... ... ... 
200708a8:	200708a0 200708a0 200708a8 200708a8     ... ... ... ... 
200708b8:	200708b0 200708b0 200708b8 200708b8     ... ... ... ... 
200708c8:	200708c0 200708c0 200708c8 200708c8     ... ... ... ... 
200708d8:	200708d0 200708d0 200708d8 200708d8     ... ... ... ... 
200708e8:	200708e0 200708e0 200708e8 200708e8     ... ... ... ... 
200708f8:	200708f0 200708f0 200708f8 200708f8     ... ... ... ... 
20070908:	20070900 20070900 20070908 20070908     ... ... ... ... 
20070918:	20070910 20070910 20070918 20070918     ... ... ... ... 
20070928:	20070920 20070920 20070928 20070928      ..  .. (.. (.. 
20070938:	20070930 20070930 20070938 20070938     0.. 0.. 8.. 8.. 
20070948:	20070940 20070940 20070948 20070948     @.. @.. H.. H.. 
20070958:	20070950 20070950 20070958 20070958     P.. P.. X.. X.. 
20070968:	20070960 20070960 20070968 20070968     `.. `.. h.. h.. 
20070978:	20070970 20070970 20070978 20070978     p.. p.. x.. x.. 
20070988:	20070980 20070980 20070988 20070988     ... ... ... ... 

20070998 <__malloc_trim_threshold>:
20070998:	00020000                                ....

2007099c <__malloc_sbrk_base>:
2007099c:	ffffffff                                ....

200709a0 <__wctomb>:
200709a0:	00083b21                                !;..
