
ProjectLasaros.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000866c  00080000  00080000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0008866c  0008866c  0001066c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000a7c  20070000  00088674  00018000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000a31c  20070a80  000890f8  00018a80  2**3
                  ALLOC
  4 .stack        00002004  2007ad9c  00093414  00018a80  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00018a7c  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  00018aa5  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001b6cf  00000000  00000000  00018b00  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00004b03  00000000  00000000  000341cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000a767  00000000  00000000  00038cd2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001258  00000000  00000000  00043439  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001158  00000000  00000000  00044691  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000b3a8  00000000  00000000  000457e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001b6fe  00000000  00000000  00050b91  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0006caa4  00000000  00000000  0006c28f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000387c  00000000  00000000  000d8d34  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	2007cda0 	.word	0x2007cda0
   80004:	000828ad 	.word	0x000828ad
   80008:	000828a9 	.word	0x000828a9
   8000c:	000828a9 	.word	0x000828a9
   80010:	000828a9 	.word	0x000828a9
   80014:	000828a9 	.word	0x000828a9
   80018:	000828a9 	.word	0x000828a9
	...
   8002c:	00080f31 	.word	0x00080f31
   80030:	000828a9 	.word	0x000828a9
   80034:	00000000 	.word	0x00000000
   80038:	00080fad 	.word	0x00080fad
   8003c:	00080fe9 	.word	0x00080fe9
   80040:	000828a9 	.word	0x000828a9
   80044:	000828a9 	.word	0x000828a9
   80048:	000828a9 	.word	0x000828a9
   8004c:	000828a9 	.word	0x000828a9
   80050:	000828a9 	.word	0x000828a9
   80054:	000828a9 	.word	0x000828a9
   80058:	000828a9 	.word	0x000828a9
   8005c:	000828a9 	.word	0x000828a9
   80060:	000828a9 	.word	0x000828a9
   80064:	000828a9 	.word	0x000828a9
   80068:	00000000 	.word	0x00000000
   8006c:	00082719 	.word	0x00082719
   80070:	0008272d 	.word	0x0008272d
   80074:	00082741 	.word	0x00082741
   80078:	00082755 	.word	0x00082755
	...
   80084:	00080c85 	.word	0x00080c85
   80088:	000828a9 	.word	0x000828a9
   8008c:	000828a9 	.word	0x000828a9
   80090:	000828a9 	.word	0x000828a9
   80094:	000828a9 	.word	0x000828a9
   80098:	000828a9 	.word	0x000828a9
   8009c:	000828a9 	.word	0x000828a9
   800a0:	000828a9 	.word	0x000828a9
   800a4:	00000000 	.word	0x00000000
   800a8:	000828a9 	.word	0x000828a9
   800ac:	00080265 	.word	0x00080265
   800b0:	00080231 	.word	0x00080231
   800b4:	000828a9 	.word	0x000828a9
   800b8:	000828a9 	.word	0x000828a9
   800bc:	000828a9 	.word	0x000828a9
   800c0:	000828a9 	.word	0x000828a9
   800c4:	000828a9 	.word	0x000828a9
   800c8:	000828a9 	.word	0x000828a9
   800cc:	000828a9 	.word	0x000828a9
   800d0:	000828a9 	.word	0x000828a9
   800d4:	000828a9 	.word	0x000828a9
   800d8:	000828a9 	.word	0x000828a9
   800dc:	000828a9 	.word	0x000828a9
   800e0:	000828a9 	.word	0x000828a9
   800e4:	000828a9 	.word	0x000828a9
   800e8:	000828a9 	.word	0x000828a9
   800ec:	000828a9 	.word	0x000828a9
   800f0:	000828a9 	.word	0x000828a9

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070a80 	.word	0x20070a80
   80110:	00000000 	.word	0x00000000
   80114:	00088674 	.word	0x00088674

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b06      	ldr	r3, [pc, #24]	; (80134 <frame_dummy+0x1c>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4806      	ldr	r0, [pc, #24]	; (80138 <frame_dummy+0x20>)
   80120:	4906      	ldr	r1, [pc, #24]	; (8013c <frame_dummy+0x24>)
   80122:	f3af 8000 	nop.w
   80126:	4806      	ldr	r0, [pc, #24]	; (80140 <frame_dummy+0x28>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b113      	cbz	r3, 80132 <frame_dummy+0x1a>
   8012c:	4b05      	ldr	r3, [pc, #20]	; (80144 <frame_dummy+0x2c>)
   8012e:	b103      	cbz	r3, 80132 <frame_dummy+0x1a>
   80130:	4798      	blx	r3
   80132:	bd08      	pop	{r3, pc}
   80134:	00000000 	.word	0x00000000
   80138:	00088674 	.word	0x00088674
   8013c:	20070a84 	.word	0x20070a84
   80140:	00088674 	.word	0x00088674
   80144:	00000000 	.word	0x00000000

00080148 <stop>:
#define pulseh_timer 0
#define pulsev_timer 1

double distanceToMove;

void stop(){
   80148:	b510      	push	{r4, lr}
	pulse_set_period(pulseh_ch, 1500);
   8014a:	2000      	movs	r0, #0
   8014c:	f240 51dc 	movw	r1, #1500	; 0x5dc
   80150:	4c03      	ldr	r4, [pc, #12]	; (80160 <stop+0x18>)
   80152:	47a0      	blx	r4
	pulse_set_period(pulsev_ch, 1500);
   80154:	2001      	movs	r0, #1
   80156:	f240 51dc 	movw	r1, #1500	; 0x5dc
   8015a:	47a0      	blx	r4
   8015c:	bd10      	pop	{r4, pc}
   8015e:	bf00      	nop
   80160:	000802cd 	.word	0x000802cd
   80164:	00000000 	.word	0x00000000

00080168 <forwardDrive>:
	counterA = 0;
	counterB = 0;
}

//Sets both engines to go the same direction with the "same" speed
void forwardDrive(int distance){
   80168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8016c:	4604      	mov	r4, r0
	stop();
   8016e:	4b24      	ldr	r3, [pc, #144]	; (80200 <forwardDrive+0x98>)
   80170:	4798      	blx	r3
	
	distanceToMove = distance/1.355;
   80172:	4d24      	ldr	r5, [pc, #144]	; (80204 <forwardDrive+0x9c>)
   80174:	4e24      	ldr	r6, [pc, #144]	; (80208 <forwardDrive+0xa0>)
   80176:	4620      	mov	r0, r4
   80178:	47b0      	blx	r6
   8017a:	a31f      	add	r3, pc, #124	; (adr r3, 801f8 <forwardDrive+0x90>)
   8017c:	e9d3 2300 	ldrd	r2, r3, [r3]
   80180:	4c22      	ldr	r4, [pc, #136]	; (8020c <forwardDrive+0xa4>)
   80182:	47a0      	blx	r4
   80184:	e9c5 0100 	strd	r0, r1, [r5]
	counterA = 0;
   80188:	4f21      	ldr	r7, [pc, #132]	; (80210 <forwardDrive+0xa8>)
   8018a:	2400      	movs	r4, #0
   8018c:	603c      	str	r4, [r7, #0]
	counterB = 0;
   8018e:	4b21      	ldr	r3, [pc, #132]	; (80214 <forwardDrive+0xac>)
   80190:	601c      	str	r4, [r3, #0]
	printf("Driving");
   80192:	4821      	ldr	r0, [pc, #132]	; (80218 <forwardDrive+0xb0>)
   80194:	4b21      	ldr	r3, [pc, #132]	; (8021c <forwardDrive+0xb4>)
   80196:	4798      	blx	r3
	
	pulse_set_period(pulsev_ch, 1660);
   80198:	2001      	movs	r0, #1
   8019a:	f240 617c 	movw	r1, #1660	; 0x67c
   8019e:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8022c <forwardDrive+0xc4>
   801a2:	47c0      	blx	r8
	pulse_set_period(pulseh_ch, 1700);
   801a4:	4620      	mov	r0, r4
   801a6:	f240 61a4 	movw	r1, #1700	; 0x6a4
   801aa:	47c0      	blx	r8
	
	pulse_start(pulseh_ch);
   801ac:	4620      	mov	r0, r4
   801ae:	4c1c      	ldr	r4, [pc, #112]	; (80220 <forwardDrive+0xb8>)
   801b0:	47a0      	blx	r4
	pulse_start(pulsev_ch);
   801b2:	2001      	movs	r0, #1
   801b4:	47a0      	blx	r4

	while (counterA<distanceToMove)
   801b6:	6838      	ldr	r0, [r7, #0]
   801b8:	47b0      	blx	r6
   801ba:	e9d5 2300 	ldrd	r2, r3, [r5]
   801be:	4c19      	ldr	r4, [pc, #100]	; (80224 <forwardDrive+0xbc>)
   801c0:	47a0      	blx	r4
   801c2:	b170      	cbz	r0, 801e2 <forwardDrive+0x7a>
	{
		delay_ms(1);
   801c4:	4f18      	ldr	r7, [pc, #96]	; (80228 <forwardDrive+0xc0>)
	pulse_set_period(pulseh_ch, 1700);
	
	pulse_start(pulseh_ch);
	pulse_start(pulsev_ch);

	while (counterA<distanceToMove)
   801c6:	4e12      	ldr	r6, [pc, #72]	; (80210 <forwardDrive+0xa8>)
   801c8:	4d0f      	ldr	r5, [pc, #60]	; (80208 <forwardDrive+0xa0>)
	{
		delay_ms(1);
   801ca:	f241 7070 	movw	r0, #6000	; 0x1770
   801ce:	47b8      	blx	r7
	pulse_set_period(pulseh_ch, 1700);
	
	pulse_start(pulseh_ch);
	pulse_start(pulsev_ch);

	while (counterA<distanceToMove)
   801d0:	6830      	ldr	r0, [r6, #0]
   801d2:	47a8      	blx	r5
   801d4:	4b0b      	ldr	r3, [pc, #44]	; (80204 <forwardDrive+0x9c>)
   801d6:	e9d3 2300 	ldrd	r2, r3, [r3]
   801da:	4c12      	ldr	r4, [pc, #72]	; (80224 <forwardDrive+0xbc>)
   801dc:	47a0      	blx	r4
   801de:	2800      	cmp	r0, #0
   801e0:	d1f3      	bne.n	801ca <forwardDrive+0x62>
	{
		delay_ms(1);
	}
	stop();
   801e2:	4b07      	ldr	r3, [pc, #28]	; (80200 <forwardDrive+0x98>)
   801e4:	4798      	blx	r3
	counterA = 0;
   801e6:	2300      	movs	r3, #0
   801e8:	4a09      	ldr	r2, [pc, #36]	; (80210 <forwardDrive+0xa8>)
   801ea:	6013      	str	r3, [r2, #0]
	counterB = 0;
   801ec:	4a09      	ldr	r2, [pc, #36]	; (80214 <forwardDrive+0xac>)
   801ee:	6013      	str	r3, [r2, #0]
   801f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   801f4:	f3af 8000 	nop.w
   801f8:	7ae147ae 	.word	0x7ae147ae
   801fc:	3ff5ae14 	.word	0x3ff5ae14
   80200:	00080149 	.word	0x00080149
   80204:	2007ad68 	.word	0x2007ad68
   80208:	00083431 	.word	0x00083431
   8020c:	00083751 	.word	0x00083751
   80210:	20070a9c 	.word	0x20070a9c
   80214:	20070aa0 	.word	0x20070aa0
   80218:	00087f68 	.word	0x00087f68
   8021c:	00084041 	.word	0x00084041
   80220:	00080299 	.word	0x00080299
   80224:	000839e1 	.word	0x000839e1
   80228:	20070001 	.word	0x20070001
   8022c:	000802cd 	.word	0x000802cd

00080230 <TC1_Handler>:
	// Calculate the duration in microseconds.
	uint32_t duration = (diff ) / (((CHIP_FREQ_CPU_MAX / pulse_timers[ch_n].divider)/1000)/1000);
	return duration;
}

void TC1_Handler(void) {
   80230:	b510      	push	{r4, lr}
	tc_get_status(pulse_timers[TC1_Handler_pulse_timer_idx].tc, pulse_timers[TC1_Handler_pulse_timer_idx].tc_ch);
   80232:	4c09      	ldr	r4, [pc, #36]	; (80258 <TC1_Handler+0x28>)
   80234:	6820      	ldr	r0, [r4, #0]
   80236:	6861      	ldr	r1, [r4, #4]
   80238:	4b08      	ldr	r3, [pc, #32]	; (8025c <TC1_Handler+0x2c>)
   8023a:	4798      	blx	r3
	NVIC_DisableIRQ(pulse_timers[TC1_Handler_pulse_timer_idx].IRQn);
   8023c:	7b23      	ldrb	r3, [r4, #12]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
   8023e:	b259      	sxtb	r1, r3
   80240:	0949      	lsrs	r1, r1, #5
   80242:	f003 031f 	and.w	r3, r3, #31
   80246:	2201      	movs	r2, #1
   80248:	fa02 f303 	lsl.w	r3, r2, r3
   8024c:	3120      	adds	r1, #32
   8024e:	4a04      	ldr	r2, [pc, #16]	; (80260 <TC1_Handler+0x30>)
   80250:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
   80254:	bd10      	pop	{r4, pc}
   80256:	bf00      	nop
   80258:	200701b0 	.word	0x200701b0
   8025c:	00080dfd 	.word	0x00080dfd
   80260:	e000e100 	.word	0xe000e100

00080264 <TC0_Handler>:
}

void TC0_Handler(void) {
   80264:	b510      	push	{r4, lr}
	tc_get_status(pulse_timers[TC2_Handler_pulse_timer_idx].tc, pulse_timers[TC2_Handler_pulse_timer_idx].tc_ch);
   80266:	4c09      	ldr	r4, [pc, #36]	; (8028c <TC0_Handler+0x28>)
   80268:	6a60      	ldr	r0, [r4, #36]	; 0x24
   8026a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   8026c:	4b08      	ldr	r3, [pc, #32]	; (80290 <TC0_Handler+0x2c>)
   8026e:	4798      	blx	r3
	NVIC_DisableIRQ(pulse_timers[TC2_Handler_pulse_timer_idx].IRQn);
   80270:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   80274:	b259      	sxtb	r1, r3
   80276:	0949      	lsrs	r1, r1, #5
   80278:	f003 031f 	and.w	r3, r3, #31
   8027c:	2201      	movs	r2, #1
   8027e:	fa02 f303 	lsl.w	r3, r2, r3
   80282:	3120      	adds	r1, #32
   80284:	4a03      	ldr	r2, [pc, #12]	; (80294 <TC0_Handler+0x30>)
   80286:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
   8028a:	bd10      	pop	{r4, pc}
   8028c:	200701b0 	.word	0x200701b0
   80290:	00080dfd 	.word	0x00080dfd
   80294:	e000e100 	.word	0xe000e100

00080298 <pulse_start>:
    pulse_init_channel(1);
	pulse_timer_init_channel(0);
	pulse_timer_init_channel(1);
}

void pulse_start(uint32_t ch_n) {
   80298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8029a:	4606      	mov	r6, r0
    pwm_channel_init(pulse_channels[ch_n].pwm, &(pulse_channels[ch_n].pwm_channel));
   8029c:	4c08      	ldr	r4, [pc, #32]	; (802c0 <pulse_start+0x28>)
   8029e:	0107      	lsls	r7, r0, #4
   802a0:	1a3d      	subs	r5, r7, r0
   802a2:	00ad      	lsls	r5, r5, #2
   802a4:	1961      	adds	r1, r4, r5
   802a6:	5960      	ldr	r0, [r4, r5]
   802a8:	3104      	adds	r1, #4
   802aa:	4b06      	ldr	r3, [pc, #24]	; (802c4 <pulse_start+0x2c>)
   802ac:	4798      	blx	r3
    pwm_channel_enable(pulse_channels[ch_n].pwm, pulse_channels[ch_n].pwm_channel.channel);
   802ae:	1bbe      	subs	r6, r7, r6
   802b0:	eb04 0686 	add.w	r6, r4, r6, lsl #2
   802b4:	5960      	ldr	r0, [r4, r5]
   802b6:	6871      	ldr	r1, [r6, #4]
   802b8:	4b03      	ldr	r3, [pc, #12]	; (802c8 <pulse_start+0x30>)
   802ba:	4798      	blx	r3
   802bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   802be:	bf00      	nop
   802c0:	20070138 	.word	0x20070138
   802c4:	00080691 	.word	0x00080691
   802c8:	000807b9 	.word	0x000807b9

000802cc <pulse_set_period>:

void pulse_stop(uint32_t ch_n) {
    pwm_channel_enable(pulse_channels[ch_n].pwm, pulse_channels[ch_n].pwm_channel.channel);
}

uint32_t pulse_set_period(uint32_t ch_n, uint32_t period_us) {
   802cc:	b510      	push	{r4, lr}
   802ce:	460a      	mov	r2, r1
    if(period_us > pulse_channels[ch_n].dty_max) {
   802d0:	ebc0 1100 	rsb	r1, r0, r0, lsl #4
   802d4:	4b09      	ldr	r3, [pc, #36]	; (802fc <pulse_set_period+0x30>)
   802d6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   802da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   802dc:	4293      	cmp	r3, r2
   802de:	d30b      	bcc.n	802f8 <pulse_set_period+0x2c>
        return 1;
    }
    pwm_channel_update_duty(pulse_channels[ch_n].pwm, &(pulse_channels[ch_n].pwm_channel), period_us);
   802e0:	4b06      	ldr	r3, [pc, #24]	; (802fc <pulse_set_period+0x30>)
   802e2:	0101      	lsls	r1, r0, #4
   802e4:	1a0c      	subs	r4, r1, r0
   802e6:	eb03 0184 	add.w	r1, r3, r4, lsl #2
   802ea:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   802ee:	3104      	adds	r1, #4
   802f0:	4b03      	ldr	r3, [pc, #12]	; (80300 <pulse_set_period+0x34>)
   802f2:	4798      	blx	r3
    return 0;
   802f4:	2000      	movs	r0, #0
   802f6:	bd10      	pop	{r4, pc}
    pwm_channel_enable(pulse_channels[ch_n].pwm, pulse_channels[ch_n].pwm_channel.channel);
}

uint32_t pulse_set_period(uint32_t ch_n, uint32_t period_us) {
    if(period_us > pulse_channels[ch_n].dty_max) {
        return 1;
   802f8:	2001      	movs	r0, #1
    }
    pwm_channel_update_duty(pulse_channels[ch_n].pwm, &(pulse_channels[ch_n].pwm_channel), period_us);
    return 0;
   802fa:	bd10      	pop	{r4, pc}
   802fc:	20070138 	.word	0x20070138
   80300:	00080795 	.word	0x00080795

00080304 <TC0_init>:
static uint32_t disable_write_protect(uint32_t key){
	if(key == WPKEY_WPMR_PMC)
	{
		*p_PMC_WPMR &= 0;               // clear entire register just to be safe
		*p_PMC_WPMR |= WPKEY_WPMR_PMC;  // first write WPKEY = 0x504D43 to register
		*p_PMC_WPMR &= 0x11111100;      // then clear WPEN bit, mask upper bytes
   80304:	4b11      	ldr	r3, [pc, #68]	; (8034c <TC0_init+0x48>)
   80306:	4a12      	ldr	r2, [pc, #72]	; (80350 <TC0_init+0x4c>)
   80308:	6013      	str	r3, [r2, #0]
	}
}

static void enable_clock_TC0CH0(void){
	*p_TC_CCR &= ~(1 << CLKDIS); // clear disable bit
	*p_TC_CCR |= (1 << CLKEN);   // set enable bit
   8030a:	4a12      	ldr	r2, [pc, #72]	; (80354 <TC0_init+0x50>)
		}
	}
}

static void enable_clock_TC0CH0(void){
	*p_TC_CCR &= ~(1 << CLKDIS); // clear disable bit
   8030c:	6811      	ldr	r1, [r2, #0]
   8030e:	f021 0102 	bic.w	r1, r1, #2
	*p_TC_CCR |= (1 << CLKEN);   // set enable bit
   80312:	f041 0101 	orr.w	r1, r1, #1
   80316:	6011      	str	r1, [r2, #0]
	else if (key == WPKEY_WPMR_TC)
	{
		enable_clock_TC0CH0();    /* in order to access TC_WPMR, the Timer Counter clock of the first channel must be enabled */	
		*p_TC_WPMR &= 0;
		*p_TC_WPMR |= WPKEY_WPMR_TC;
		*p_TC_WPMR &= 0x11111100; // disable Write Protect by clearing WPEN bit, mask upper bytes
   80318:	32e4      	adds	r2, #228	; 0xe4
   8031a:	6013      	str	r3, [r2, #0]

static void enable_periph_clk(uint32_t periph_id){
	//disable_write_protect(WPKEY_WPMR_PMC);
	if(periph_id == PERIPH_ID_TCC0)
	{
		if((*p_PMC_PCSR0 & (1<<PERIPH_ID_TCC0)) != (1<<PERIPH_ID_TCC0)){  /* check status of peripheral clock corresponding to Timer Counter Channel 0 (if enabled) */
   8031c:	4b0e      	ldr	r3, [pc, #56]	; (80358 <TC0_init+0x54>)
   8031e:	681b      	ldr	r3, [r3, #0]
   80320:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
   80324:	d103      	bne.n	8032e <TC0_init+0x2a>
			*p_PMC_PCER0 = (1 << PERIPH_ID_TCC0);                         /* enable peripheral clock corresponding to Timer Counter Channel 0 */
   80326:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   8032a:	4b0c      	ldr	r3, [pc, #48]	; (8035c <TC0_init+0x58>)
   8032c:	601a      	str	r2, [r3, #0]
	*p_TC_CMR0 &= ~(1 << WAVE);
}

/* Set TCCLKS bits in TC_CMR (clock selected MCK/2 clock signal (from PMC)) */
static void select_clock(void){
	*p_TC_CMR0 &= 0x11111110;
   8032e:	4a0c      	ldr	r2, [pc, #48]	; (80360 <TC0_init+0x5c>)
   80330:	6813      	ldr	r3, [r2, #0]
   80332:	f003 3311 	and.w	r3, r3, #286331153	; 0x11111111
   80336:	f023 0301 	bic.w	r3, r3, #1
   8033a:	6013      	str	r3, [r2, #0]
/* The start and stop commands are effective only if the clock is enabled */
/* A trigger resets the counter and starts the counter clock */
/* Each channel has a software trigger, available by setting SWTRG in TC_CCR */
/* A software trigger is performed: the counter is reset and the clock is started */
static void start_clock(void){
	*p_TC_CCR |= (1 << SWTRG); 
   8033c:	4b05      	ldr	r3, [pc, #20]	; (80354 <TC0_init+0x50>)
		}
	}
}

static void enable_clock_TC0CH0(void){
	*p_TC_CCR &= ~(1 << CLKDIS); // clear disable bit
   8033e:	681a      	ldr	r2, [r3, #0]
   80340:	f022 0202 	bic.w	r2, r2, #2
/* The start and stop commands are effective only if the clock is enabled */
/* A trigger resets the counter and starts the counter clock */
/* Each channel has a software trigger, available by setting SWTRG in TC_CCR */
/* A software trigger is performed: the counter is reset and the clock is started */
static void start_clock(void){
	*p_TC_CCR |= (1 << SWTRG); 
   80344:	f042 0205 	orr.w	r2, r2, #5
   80348:	601a      	str	r2, [r3, #0]
   8034a:	4770      	bx	lr
   8034c:	00100100 	.word	0x00100100
   80350:	400e06e4 	.word	0x400e06e4
   80354:	40080000 	.word	0x40080000
   80358:	400e0618 	.word	0x400e0618
   8035c:	400e0610 	.word	0x400e0610
   80360:	40080004 	.word	0x40080004

00080364 <twi_set_speed>:
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
   80364:	4b0f      	ldr	r3, [pc, #60]	; (803a4 <twi_set_speed+0x40>)
   80366:	4299      	cmp	r1, r3
   80368:	d819      	bhi.n	8039e <twi_set_speed+0x3a>
		return FAIL;
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   8036a:	0049      	lsls	r1, r1, #1
   8036c:	fbb2 f2f1 	udiv	r2, r2, r1
   80370:	3a04      	subs	r2, #4

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   80372:	2aff      	cmp	r2, #255	; 0xff
   80374:	d907      	bls.n	80386 <twi_set_speed+0x22>
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
   80376:	2300      	movs	r3, #0
	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
		/* Increase clock divider */
		ckdiv++;
   80378:	3301      	adds	r3, #1
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
   8037a:	0852      	lsrs	r2, r2, #1
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   8037c:	2aff      	cmp	r2, #255	; 0xff
   8037e:	d903      	bls.n	80388 <twi_set_speed+0x24>
   80380:	2b07      	cmp	r3, #7
   80382:	d1f9      	bne.n	80378 <twi_set_speed+0x14>
   80384:	e000      	b.n	80388 <twi_set_speed+0x24>
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
   80386:	2300      	movs	r3, #0
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   80388:	0211      	lsls	r1, r2, #8
   8038a:	b289      	uxth	r1, r1
			TWI_CWGR_CKDIV(ckdiv);
   8038c:	041b      	lsls	r3, r3, #16
   8038e:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   80392:	430b      	orrs	r3, r1
   80394:	b2d2      	uxtb	r2, r2
   80396:	431a      	orrs	r2, r3
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
   80398:	6102      	str	r2, [r0, #16]
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
			TWI_CWGR_CKDIV(ckdiv);

	return PASS;
   8039a:	2000      	movs	r0, #0
   8039c:	4770      	bx	lr
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
		return FAIL;
   8039e:	2001      	movs	r0, #1
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
			TWI_CWGR_CKDIV(ckdiv);

	return PASS;
}
   803a0:	4770      	bx	lr
   803a2:	bf00      	nop
   803a4:	00061a80 	.word	0x00061a80

000803a8 <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
   803a8:	b538      	push	{r3, r4, r5, lr}
   803aa:	4604      	mov	r4, r0
   803ac:	460d      	mov	r5, r1
	uint32_t status = TWI_SUCCESS;

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
   803ae:	f04f 33ff 	mov.w	r3, #4294967295
   803b2:	6283      	str	r3, [r0, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
   803b4:	6a03      	ldr	r3, [r0, #32]
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
   803b6:	2380      	movs	r3, #128	; 0x80
   803b8:	6003      	str	r3, [r0, #0]
	p_twi->TWI_RHR;
   803ba:	6b03      	ldr	r3, [r0, #48]	; 0x30
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
   803bc:	2308      	movs	r3, #8
   803be:	6003      	str	r3, [r0, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
   803c0:	2320      	movs	r3, #32
   803c2:	6003      	str	r3, [r0, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
   803c4:	2304      	movs	r3, #4
   803c6:	6003      	str	r3, [r0, #0]
	twi_reset(p_twi);

	twi_enable_master_mode(p_twi);

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
   803c8:	6849      	ldr	r1, [r1, #4]
   803ca:	682a      	ldr	r2, [r5, #0]
   803cc:	4b05      	ldr	r3, [pc, #20]	; (803e4 <twi_master_init+0x3c>)
   803ce:	4798      	blx	r3
   803d0:	2801      	cmp	r0, #1
   803d2:	bf14      	ite	ne
   803d4:	2000      	movne	r0, #0
   803d6:	2001      	moveq	r0, #1
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
	}

	if (p_opt->smbus == 1) {
   803d8:	7a6b      	ldrb	r3, [r5, #9]
   803da:	2b01      	cmp	r3, #1
		p_twi->TWI_CR = TWI_CR_QUICK;
   803dc:	bf04      	itt	eq
   803de:	2340      	moveq	r3, #64	; 0x40
   803e0:	6023      	streq	r3, [r4, #0]
	}

	return status;
}
   803e2:	bd38      	pop	{r3, r4, r5, pc}
   803e4:	00080365 	.word	0x00080365

000803e8 <twi_master_read>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twi_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
   803e8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
   803ec:	4604      	mov	r4, r0
	uint32_t status;
	uint32_t cnt = p_packet->length;
   803ee:	68cb      	ldr	r3, [r1, #12]
	uint8_t *buffer = p_packet->buffer;
   803f0:	688e      	ldr	r6, [r1, #8]
	uint8_t stop_sent = 0;
	uint32_t timeout = TWI_TIMEOUT;;
	
	/* Check argument */
	if (cnt == 0) {
   803f2:	2b00      	cmp	r3, #0
   803f4:	d049      	beq.n	8048a <twi_master_read+0xa2>
		return TWI_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
   803f6:	2200      	movs	r2, #0
   803f8:	6042      	str	r2, [r0, #4]
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
   803fa:	6848      	ldr	r0, [r1, #4]
   803fc:	0200      	lsls	r0, r0, #8
   803fe:	f400 7040 	and.w	r0, r0, #768	; 0x300
		return TWI_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
   80402:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
   80406:	7c0d      	ldrb	r5, [r1, #16]
   80408:	042d      	lsls	r5, r5, #16
   8040a:	f405 05fe 	and.w	r5, r5, #8323072	; 0x7f0000
   8040e:	4328      	orrs	r0, r5
   80410:	6060      	str	r0, [r4, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
   80412:	60e2      	str	r2, [r4, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   80414:	684a      	ldr	r2, [r1, #4]
 */
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
   80416:	b15a      	cbz	r2, 80430 <twi_master_read+0x48>
		return 0;

	val = addr[0];
   80418:	7808      	ldrb	r0, [r1, #0]
	if (len > 1) {
   8041a:	2a01      	cmp	r2, #1
		val <<= 8;
		val |= addr[1];
   8041c:	bfc4      	itt	gt
   8041e:	784d      	ldrbgt	r5, [r1, #1]
   80420:	ea45 2000 	orrgt.w	r0, r5, r0, lsl #8
	}
	if (len > 2) {
   80424:	2a02      	cmp	r2, #2
   80426:	dd04      	ble.n	80432 <twi_master_read+0x4a>
		val <<= 8;
		val |= addr[2];
   80428:	788a      	ldrb	r2, [r1, #2]
   8042a:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
   8042e:	e000      	b.n	80432 <twi_master_read+0x4a>
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
		return 0;
   80430:	2000      	movs	r0, #0
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   80432:	60e0      	str	r0, [r4, #12]

	/* Send a START condition */
	if (cnt == 1) {
   80434:	2b01      	cmp	r3, #1
   80436:	d104      	bne.n	80442 <twi_master_read+0x5a>
		p_twi->TWI_CR = TWI_CR_START | TWI_CR_STOP;
   80438:	2203      	movs	r2, #3
   8043a:	6022      	str	r2, [r4, #0]
		stop_sent = 1;
   8043c:	f04f 0c01 	mov.w	ip, #1
   80440:	e02b      	b.n	8049a <twi_master_read+0xb2>
	} else {
		p_twi->TWI_CR = TWI_CR_START;
   80442:	2201      	movs	r2, #1
   80444:	6022      	str	r2, [r4, #0]
		stop_sent = 0;
   80446:	f04f 0c00 	mov.w	ip, #0
   8044a:	e026      	b.n	8049a <twi_master_read+0xb2>
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
   8044c:	6a21      	ldr	r1, [r4, #32]
		if (status & TWI_SR_NACK) {
   8044e:	f411 7f80 	tst.w	r1, #256	; 0x100
   80452:	d11c      	bne.n	8048e <twi_master_read+0xa6>
			return TWI_RECEIVE_NACK;
		}

		if (!timeout--) {
   80454:	1e55      	subs	r5, r2, #1
   80456:	b1e2      	cbz	r2, 80492 <twi_master_read+0xaa>
   80458:	462a      	mov	r2, r5
			return TWI_ERROR_TIMEOUT;
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
   8045a:	2b01      	cmp	r3, #1
   8045c:	d105      	bne.n	8046a <twi_master_read+0x82>
   8045e:	f1bc 0f00 	cmp.w	ip, #0
   80462:	d102      	bne.n	8046a <twi_master_read+0x82>
			p_twi->TWI_CR = TWI_CR_STOP;
   80464:	f8c4 9000 	str.w	r9, [r4]
			stop_sent = 1;
   80468:	46c4      	mov	ip, r8
		}

		if (!(status & TWI_SR_RXRDY)) {
   8046a:	f011 0f02 	tst.w	r1, #2
   8046e:	d004      	beq.n	8047a <twi_master_read+0x92>
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;
   80470:	6b22      	ldr	r2, [r4, #48]	; 0x30
   80472:	7032      	strb	r2, [r6, #0]

		cnt--;
   80474:	3b01      	subs	r3, #1
		}

		if (!(status & TWI_SR_RXRDY)) {
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;
   80476:	3601      	adds	r6, #1

		cnt--;
		timeout = TWI_TIMEOUT;
   80478:	463a      	mov	r2, r7
	} else {
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
   8047a:	2b00      	cmp	r3, #0
   8047c:	d1e6      	bne.n	8044c <twi_master_read+0x64>

		cnt--;
		timeout = TWI_TIMEOUT;
	}

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
   8047e:	6a23      	ldr	r3, [r4, #32]
   80480:	f013 0f01 	tst.w	r3, #1
   80484:	d0fb      	beq.n	8047e <twi_master_read+0x96>
	}

	p_twi->TWI_SR;
   80486:	6a23      	ldr	r3, [r4, #32]

	return TWI_SUCCESS;
   80488:	e014      	b.n	804b4 <twi_master_read+0xcc>
	uint8_t stop_sent = 0;
	uint32_t timeout = TWI_TIMEOUT;;
	
	/* Check argument */
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
   8048a:	2001      	movs	r0, #1
   8048c:	e012      	b.n	804b4 <twi_master_read+0xcc>
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
   8048e:	2005      	movs	r0, #5
   80490:	e010      	b.n	804b4 <twi_master_read+0xcc>
		}

		if (!timeout--) {
			return TWI_ERROR_TIMEOUT;
   80492:	2009      	movs	r0, #9
   80494:	e00e      	b.n	804b4 <twi_master_read+0xcc>
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
   80496:	2005      	movs	r0, #5
   80498:	e00c      	b.n	804b4 <twi_master_read+0xcc>
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
   8049a:	6a21      	ldr	r1, [r4, #32]
		if (status & TWI_SR_NACK) {
   8049c:	f411 7080 	ands.w	r0, r1, #256	; 0x100
   804a0:	d1f9      	bne.n	80496 <twi_master_read+0xae>
			return TWI_RECEIVE_NACK;
		}

		if (!timeout--) {
   804a2:	f643 2297 	movw	r2, #14999	; 0x3a97
			return TWI_ERROR_TIMEOUT;
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
			p_twi->TWI_CR = TWI_CR_STOP;
   804a6:	f04f 0902 	mov.w	r9, #2
			stop_sent = 1;
   804aa:	f04f 0801 	mov.w	r8, #1
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;

		cnt--;
		timeout = TWI_TIMEOUT;
   804ae:	f643 2798 	movw	r7, #15000	; 0x3a98
   804b2:	e7d2      	b.n	8045a <twi_master_read+0x72>
	}

	p_twi->TWI_SR;

	return TWI_SUCCESS;
}
   804b4:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
   804b8:	4770      	bx	lr
   804ba:	bf00      	nop

000804bc <twi_master_write>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
   804bc:	b470      	push	{r4, r5, r6}
   804be:	4603      	mov	r3, r0
	uint32_t status;
	uint32_t cnt = p_packet->length;
   804c0:	68ca      	ldr	r2, [r1, #12]
	uint8_t *buffer = p_packet->buffer;
   804c2:	6888      	ldr	r0, [r1, #8]

	/* Check argument */
	if (cnt == 0) {
   804c4:	2a00      	cmp	r2, #0
   804c6:	d03f      	beq.n	80548 <twi_master_write+0x8c>
		return TWI_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
   804c8:	2400      	movs	r4, #0
   804ca:	605c      	str	r4, [r3, #4]
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
   804cc:	7c0e      	ldrb	r6, [r1, #16]
   804ce:	0436      	lsls	r6, r6, #16
   804d0:	f406 06fe 	and.w	r6, r6, #8323072	; 0x7f0000
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
   804d4:	684d      	ldr	r5, [r1, #4]
   804d6:	022d      	lsls	r5, r5, #8
   804d8:	f405 7540 	and.w	r5, r5, #768	; 0x300
		return TWI_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
   804dc:	4335      	orrs	r5, r6
   804de:	605d      	str	r5, [r3, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
   804e0:	60dc      	str	r4, [r3, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   804e2:	684c      	ldr	r4, [r1, #4]
 */
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
   804e4:	b15c      	cbz	r4, 804fe <twi_master_write+0x42>
		return 0;

	val = addr[0];
   804e6:	780d      	ldrb	r5, [r1, #0]
	if (len > 1) {
   804e8:	2c01      	cmp	r4, #1
		val <<= 8;
		val |= addr[1];
   804ea:	bfc4      	itt	gt
   804ec:	784e      	ldrbgt	r6, [r1, #1]
   804ee:	ea46 2505 	orrgt.w	r5, r6, r5, lsl #8
	}
	if (len > 2) {
   804f2:	2c02      	cmp	r4, #2
   804f4:	dd04      	ble.n	80500 <twi_master_write+0x44>
		val <<= 8;
		val |= addr[2];
   804f6:	7889      	ldrb	r1, [r1, #2]
   804f8:	ea41 2505 	orr.w	r5, r1, r5, lsl #8
   804fc:	e000      	b.n	80500 <twi_master_write+0x44>
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
		return 0;
   804fe:	2500      	movs	r5, #0
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   80500:	60dd      	str	r5, [r3, #12]
   80502:	e00b      	b.n	8051c <twi_master_write+0x60>

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
   80504:	6a19      	ldr	r1, [r3, #32]
		if (status & TWI_SR_NACK) {
   80506:	f411 7f80 	tst.w	r1, #256	; 0x100
   8050a:	d11f      	bne.n	8054c <twi_master_write+0x90>
			return TWI_RECEIVE_NACK;
		}

		if (!(status & TWI_SR_TXRDY)) {
   8050c:	f011 0f04 	tst.w	r1, #4
   80510:	d0f8      	beq.n	80504 <twi_master_write+0x48>
			continue;
		}
		p_twi->TWI_THR = *buffer++;
   80512:	f810 1b01 	ldrb.w	r1, [r0], #1
   80516:	6359      	str	r1, [r3, #52]	; 0x34
	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
   80518:	3a01      	subs	r2, #1
   8051a:	d007      	beq.n	8052c <twi_master_write+0x70>
		status = p_twi->TWI_SR;
   8051c:	6a19      	ldr	r1, [r3, #32]
		if (status & TWI_SR_NACK) {
   8051e:	f411 7f80 	tst.w	r1, #256	; 0x100
   80522:	d115      	bne.n	80550 <twi_master_write+0x94>
			return TWI_RECEIVE_NACK;
		}

		if (!(status & TWI_SR_TXRDY)) {
   80524:	f011 0f04 	tst.w	r1, #4
   80528:	d1f3      	bne.n	80512 <twi_master_write+0x56>
   8052a:	e7eb      	b.n	80504 <twi_master_write+0x48>

		cnt--;
	}

	while (1) {
		status = p_twi->TWI_SR;
   8052c:	6a1a      	ldr	r2, [r3, #32]
		if (status & TWI_SR_NACK) {
   8052e:	f412 7080 	ands.w	r0, r2, #256	; 0x100
   80532:	d10f      	bne.n	80554 <twi_master_write+0x98>
			return TWI_RECEIVE_NACK;
		}

		if (status & TWI_SR_TXRDY) {
   80534:	f012 0f04 	tst.w	r2, #4
   80538:	d0f8      	beq.n	8052c <twi_master_write+0x70>
			break;
		}
	}

	p_twi->TWI_CR = TWI_CR_STOP;
   8053a:	2202      	movs	r2, #2
   8053c:	601a      	str	r2, [r3, #0]

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
   8053e:	6a1a      	ldr	r2, [r3, #32]
   80540:	f012 0f01 	tst.w	r2, #1
   80544:	d0fb      	beq.n	8053e <twi_master_write+0x82>
   80546:	e006      	b.n	80556 <twi_master_write+0x9a>
	uint32_t cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;

	/* Check argument */
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
   80548:	2001      	movs	r0, #1
   8054a:	e004      	b.n	80556 <twi_master_write+0x9a>

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
   8054c:	2005      	movs	r0, #5
   8054e:	e002      	b.n	80556 <twi_master_write+0x9a>
   80550:	2005      	movs	r0, #5
   80552:	e000      	b.n	80556 <twi_master_write+0x9a>
	}

	while (1) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
   80554:	2005      	movs	r0, #5

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
	}

	return TWI_SUCCESS;
}
   80556:	bc70      	pop	{r4, r5, r6}
   80558:	4770      	bx	lr
   8055a:	bf00      	nop

0008055c <twi_probe>:
 * \param uc_slave_addr Address of the remote chip to search for.
 *
 * \return TWI_SUCCESS if a chip was found, error code otherwise.
 */
uint32_t twi_probe(Twi *p_twi, uint8_t uc_slave_addr)
{
   8055c:	b500      	push	{lr}
   8055e:	b087      	sub	sp, #28
	twi_packet_t packet;
	uint8_t data = 0;
   80560:	2300      	movs	r3, #0
   80562:	aa06      	add	r2, sp, #24
   80564:	f802 3d15 	strb.w	r3, [r2, #-21]!

	/* Data to send */
	packet.buffer = &data;
   80568:	9203      	str	r2, [sp, #12]
	/* Data length */
	packet.length = 1;
   8056a:	2201      	movs	r2, #1
   8056c:	9204      	str	r2, [sp, #16]
	/* Slave chip address */
	packet.chip = (uint32_t) uc_slave_addr;
   8056e:	f88d 1014 	strb.w	r1, [sp, #20]
	/* Internal chip address */
	packet.addr[0] = 0;
   80572:	f88d 3004 	strb.w	r3, [sp, #4]
	/* Address length */
	packet.addr_length = 0;
   80576:	9302      	str	r3, [sp, #8]

	/* Perform a master write access */
	return (twi_master_write(p_twi, &packet));
   80578:	a901      	add	r1, sp, #4
   8057a:	4b02      	ldr	r3, [pc, #8]	; (80584 <twi_probe+0x28>)
   8057c:	4798      	blx	r3
}
   8057e:	b007      	add	sp, #28
   80580:	f85d fb04 	ldr.w	pc, [sp], #4
   80584:	000804bd 	.word	0x000804bd

00080588 <goToNext>:
		return 1;
	}
	return 0;
}

uint8_t goToNext(void){
   80588:	b538      	push	{r3, r4, r5, lr}
	
	if(_isDonePickup)
   8058a:	4b1f      	ldr	r3, [pc, #124]	; (80608 <goToNext+0x80>)
   8058c:	781b      	ldrb	r3, [r3, #0]
   8058e:	b1eb      	cbz	r3, 805cc <goToNext+0x44>
	{
		puts("_isDonePickup");
   80590:	481e      	ldr	r0, [pc, #120]	; (8060c <goToNext+0x84>)
   80592:	4b1f      	ldr	r3, [pc, #124]	; (80610 <goToNext+0x88>)
   80594:	4798      	blx	r3

		if(_getall)
   80596:	4b1f      	ldr	r3, [pc, #124]	; (80614 <goToNext+0x8c>)
   80598:	681b      	ldr	r3, [r3, #0]
   8059a:	b163      	cbz	r3, 805b6 <goToNext+0x2e>
		{
			//go to next
			currentObj++;
   8059c:	4a1e      	ldr	r2, [pc, #120]	; (80618 <goToNext+0x90>)
   8059e:	6813      	ldr	r3, [r2, #0]
   805a0:	3301      	adds	r3, #1
   805a2:	6013      	str	r3, [r2, #0]
			nextPos=currentObj;
   805a4:	4a1d      	ldr	r2, [pc, #116]	; (8061c <goToNext+0x94>)
   805a6:	6013      	str	r3, [r2, #0]
			//if at dropoff
			if(nextPos >=3)
   805a8:	2b02      	cmp	r3, #2
   805aa:	dd07      	ble.n	805bc <goToNext+0x34>
			{
				currentObj=3;
   805ac:	2203      	movs	r2, #3
   805ae:	4b1a      	ldr	r3, [pc, #104]	; (80618 <goToNext+0x90>)
   805b0:	601a      	str	r2, [r3, #0]
				return 2;
   805b2:	2002      	movs	r0, #2
   805b4:	bd38      	pop	{r3, r4, r5, pc}
			}
			
		}
		else{
			//go to drop off
			nextPos=3;
   805b6:	2203      	movs	r2, #3
   805b8:	4b18      	ldr	r3, [pc, #96]	; (8061c <goToNext+0x94>)
   805ba:	601a      	str	r2, [r3, #0]
		}
		_isDonePickup=0;
   805bc:	2200      	movs	r2, #0
   805be:	4b12      	ldr	r3, [pc, #72]	; (80608 <goToNext+0x80>)
   805c0:	701a      	strb	r2, [r3, #0]
		
		//--------------------------driving loop -------------------------------------
		printf("DRIVING TO OBJECT");
   805c2:	4817      	ldr	r0, [pc, #92]	; (80620 <goToNext+0x98>)
   805c4:	4b17      	ldr	r3, [pc, #92]	; (80624 <goToNext+0x9c>)
   805c6:	4798      	blx	r3
		
		//when done
		return 1;
   805c8:	2001      	movs	r0, #1
   805ca:	bd38      	pop	{r3, r4, r5, pc}
		
	}
	if(_isDoneDropoff)
   805cc:	4b16      	ldr	r3, [pc, #88]	; (80628 <goToNext+0xa0>)
   805ce:	781b      	ldrb	r3, [r3, #0]
   805d0:	b1c3      	cbz	r3, 80604 <goToNext+0x7c>
	{
		puts("_isDoneDropoff");
   805d2:	4816      	ldr	r0, [pc, #88]	; (8062c <goToNext+0xa4>)
   805d4:	4b0e      	ldr	r3, [pc, #56]	; (80610 <goToNext+0x88>)
   805d6:	4798      	blx	r3
		if(_getall == 0)
   805d8:	4b0e      	ldr	r3, [pc, #56]	; (80614 <goToNext+0x8c>)
   805da:	681b      	ldr	r3, [r3, #0]
   805dc:	b92b      	cbnz	r3, 805ea <goToNext+0x62>
		{
			//goto next
			currentObj++;
   805de:	4a0e      	ldr	r2, [pc, #56]	; (80618 <goToNext+0x90>)
   805e0:	6813      	ldr	r3, [r2, #0]
   805e2:	3301      	adds	r3, #1
   805e4:	6013      	str	r3, [r2, #0]
			nextPos=currentObj;
   805e6:	4a0d      	ldr	r2, [pc, #52]	; (8061c <goToNext+0x94>)
   805e8:	6013      	str	r3, [r2, #0]
		}
		else{
			//FINISHED!
		}
		_isDoneDropoff=0;
   805ea:	2200      	movs	r2, #0
   805ec:	4b0e      	ldr	r3, [pc, #56]	; (80628 <goToNext+0xa0>)
   805ee:	701a      	strb	r2, [r3, #0]
		
		//do driving loop
		printf("Driving to %d\n",nextPos);
   805f0:	4d0a      	ldr	r5, [pc, #40]	; (8061c <goToNext+0x94>)
   805f2:	480f      	ldr	r0, [pc, #60]	; (80630 <goToNext+0xa8>)
   805f4:	6829      	ldr	r1, [r5, #0]
   805f6:	4c0b      	ldr	r4, [pc, #44]	; (80624 <goToNext+0x9c>)
   805f8:	47a0      	blx	r4
		//returns 0;
		//delay...vTaskDelay
		printf("Arrived AT %d\n",nextPos);
   805fa:	480e      	ldr	r0, [pc, #56]	; (80634 <goToNext+0xac>)
   805fc:	6829      	ldr	r1, [r5, #0]
   805fe:	47a0      	blx	r4
		//when done
		return 2;
   80600:	2002      	movs	r0, #2
   80602:	bd38      	pop	{r3, r4, r5, pc}
	}
	return 1;
   80604:	2001      	movs	r0, #1
}
   80606:	bd38      	pop	{r3, r4, r5, pc}
   80608:	20070ab4 	.word	0x20070ab4
   8060c:	00087f70 	.word	0x00087f70
   80610:	00084271 	.word	0x00084271
   80614:	20070ab8 	.word	0x20070ab8
   80618:	20070abc 	.word	0x20070abc
   8061c:	20070ab0 	.word	0x20070ab0
   80620:	00087f80 	.word	0x00087f80
   80624:	00084041 	.word	0x00084041
   80628:	20070aac 	.word	0x20070aac
   8062c:	00087f94 	.word	0x00087f94
   80630:	00087fa4 	.word	0x00087fa4
   80634:	00087fb4 	.word	0x00087fb4

00080638 <setGetAll>:
		break;
	}
}

setGetAll(uint8_t getall)
{
   80638:	b510      	push	{r4, lr}
   8063a:	4604      	mov	r4, r0
	printf("collectAll= %d",getall);
   8063c:	4803      	ldr	r0, [pc, #12]	; (8064c <setGetAll+0x14>)
   8063e:	4621      	mov	r1, r4
   80640:	4b03      	ldr	r3, [pc, #12]	; (80650 <setGetAll+0x18>)
   80642:	4798      	blx	r3
	_getall=getall;
   80644:	4b03      	ldr	r3, [pc, #12]	; (80654 <setGetAll+0x1c>)
   80646:	601c      	str	r4, [r3, #0]
}
   80648:	bd10      	pop	{r4, pc}
   8064a:	bf00      	nop
   8064c:	00087fc4 	.word	0x00087fc4
   80650:	00084041 	.word	0x00084041
   80654:	20070ab8 	.word	0x20070ab8

00080658 <setDonePickup>:

void setDonePickup(void)
{
   80658:	b508      	push	{r3, lr}
	puts("setDonePickup\n");
   8065a:	4803      	ldr	r0, [pc, #12]	; (80668 <setDonePickup+0x10>)
   8065c:	4b03      	ldr	r3, [pc, #12]	; (8066c <setDonePickup+0x14>)
   8065e:	4798      	blx	r3
	_isDonePickup=1;
   80660:	2201      	movs	r2, #1
   80662:	4b03      	ldr	r3, [pc, #12]	; (80670 <setDonePickup+0x18>)
   80664:	701a      	strb	r2, [r3, #0]
   80666:	bd08      	pop	{r3, pc}
   80668:	00087fd4 	.word	0x00087fd4
   8066c:	00084271 	.word	0x00084271
   80670:	20070ab4 	.word	0x20070ab4

00080674 <setDoneDropoff>:
}

void setDoneDropoff(void)
{
   80674:	b508      	push	{r3, lr}
	puts("setDoneDropoff\n");
   80676:	4803      	ldr	r0, [pc, #12]	; (80684 <setDoneDropoff+0x10>)
   80678:	4b03      	ldr	r3, [pc, #12]	; (80688 <setDoneDropoff+0x14>)
   8067a:	4798      	blx	r3
	_isDoneDropoff=1;
   8067c:	2201      	movs	r2, #1
   8067e:	4b03      	ldr	r3, [pc, #12]	; (8068c <setDoneDropoff+0x18>)
   80680:	701a      	strb	r2, [r3, #0]
   80682:	bd08      	pop	{r3, pc}
   80684:	00087fe4 	.word	0x00087fe4
   80688:	00084271 	.word	0x00084271
   8068c:	20070aac 	.word	0x20070aac

00080690 <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
   80690:	b470      	push	{r4, r5, r6}
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;
   80692:	680b      	ldr	r3, [r1, #0]

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
   80694:	8a8c      	ldrh	r4, [r1, #20]
{
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   80696:	684a      	ldr	r2, [r1, #4]
   80698:	f002 020f 	and.w	r2, r2, #15
   8069c:	4314      	orrs	r4, r2
			(p_channel->polarity << 9) |
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
			(p_channel->counter_event) |
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
   8069e:	890d      	ldrh	r5, [r1, #8]
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
   806a0:	432c      	orrs	r4, r5
   806a2:	7a8a      	ldrb	r2, [r1, #10]
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
			(p_channel->counter_event) |
   806a4:	ea44 2442 	orr.w	r4, r4, r2, lsl #9
			(p_channel->b_deadtime_generator << 16) |
   806a8:	7d8a      	ldrb	r2, [r1, #22]
   806aa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
			(p_channel->b_pwmh_output_inverted << 17) |
   806ae:	7dca      	ldrb	r2, [r1, #23]
   806b0:	ea44 4442 	orr.w	r4, r4, r2, lsl #17
			(p_channel->b_pwml_output_inverted << 18) |
   806b4:	7e0a      	ldrb	r2, [r1, #24]
{
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   806b6:	ea44 4482 	orr.w	r4, r4, r2, lsl #18
   806ba:	eb00 1243 	add.w	r2, r0, r3, lsl #5
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = tmp_reg;
   806be:	f8c2 4200 	str.w	r4, [r2, #512]	; 0x200

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
   806c2:	68cc      	ldr	r4, [r1, #12]
   806c4:	f8c2 4204 	str.w	r4, [r2, #516]	; 0x204

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
   806c8:	690c      	ldr	r4, [r1, #16]
   806ca:	f8c2 420c 	str.w	r4, [r2, #524]	; 0x20c
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
   806ce:	7d8a      	ldrb	r2, [r1, #22]
   806d0:	b13a      	cbz	r2, 806e2 <pwm_channel_init+0x52>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
   806d2:	8b8c      	ldrh	r4, [r1, #28]
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
   806d4:	8b4a      	ldrh	r2, [r1, #26]
   806d6:	ea42 4404 	orr.w	r4, r2, r4, lsl #16
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
   806da:	eb00 1243 	add.w	r2, r0, r3, lsl #5
   806de:	f8c2 4218 	str.w	r4, [r2, #536]	; 0x218
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
   806e2:	6c85      	ldr	r5, [r0, #72]	; 0x48
   806e4:	f04f 1201 	mov.w	r2, #65537	; 0x10001
   806e8:	409a      	lsls	r2, r3
   806ea:	43d2      	mvns	r2, r2
   806ec:	4015      	ands	r5, r2
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
			(((p_channel->output_selection.b_override_pwml) << ch_num)
   806ee:	7fce      	ldrb	r6, [r1, #31]
   806f0:	409e      	lsls	r6, r3
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
   806f2:	7f8c      	ldrb	r4, [r1, #30]
   806f4:	409c      	lsls	r4, r3
   806f6:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   806fa:	432c      	orrs	r4, r5
			(((p_channel->output_selection.b_override_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OS = tmp_reg;
   806fc:	6484      	str	r4, [r0, #72]	; 0x48

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
   806fe:	6c44      	ldr	r4, [r0, #68]	; 0x44
   80700:	4022      	ands	r2, r4
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
			(((p_channel->output_selection.override_level_pwml) << ch_num)
   80702:	f891 5021 	ldrb.w	r5, [r1, #33]	; 0x21
   80706:	409d      	lsls	r5, r3
					<< 16);
	p_pwm->PWM_OS = tmp_reg;

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
   80708:	f891 4020 	ldrb.w	r4, [r1, #32]
   8070c:	409c      	lsls	r4, r3
   8070e:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   80712:	4322      	orrs	r2, r4
			(((p_channel->output_selection.override_level_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OOV = tmp_reg;
   80714:	6442      	str	r2, [r0, #68]	; 0x44

	/* Sync Channels Mode Register */
	uint32_t channel = (1 << ch_num);
   80716:	2201      	movs	r2, #1
   80718:	409a      	lsls	r2, r3
	if (p_channel->b_sync_ch) {
   8071a:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
   8071e:	b11c      	cbz	r4, 80728 <pwm_channel_init+0x98>
		p_pwm->PWM_SCM |= channel;
   80720:	6a04      	ldr	r4, [r0, #32]
   80722:	4314      	orrs	r4, r2
   80724:	6204      	str	r4, [r0, #32]
   80726:	e003      	b.n	80730 <pwm_channel_init+0xa0>
	} else {
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
   80728:	6a04      	ldr	r4, [r0, #32]
   8072a:	ea24 0402 	bic.w	r4, r4, r2
   8072e:	6204      	str	r4, [r0, #32]
		} else {
			p_pwm->PWM_FPV1 &= (~((0x01 << ch_num) << 16));
		}
	}
#else
	if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
   80730:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
   80734:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= (0x01 << ch_num);
   80736:	6e84      	ldr	r4, [r0, #104]	; 0x68
   80738:	bf0c      	ite	eq
   8073a:	4314      	orreq	r4, r2
	} else {
		p_pwm->PWM_FPV &= (~(0x01 << ch_num));
   8073c:	4394      	bicne	r4, r2
   8073e:	6684      	str	r4, [r0, #104]	; 0x68
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
   80740:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
   80744:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= ((0x01 << ch_num) << 16);
   80746:	6e84      	ldr	r4, [r0, #104]	; 0x68
   80748:	bf0c      	ite	eq
   8074a:	ea44 4202 	orreq.w	r2, r4, r2, lsl #16
	} else {
		p_pwm->PWM_FPV &= (~((0x01 << ch_num) << 16));
   8074e:	ea24 4202 	bicne.w	r2, r4, r2, lsl #16
   80752:	6682      	str	r2, [r0, #104]	; 0x68
	}
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
   80754:	2b03      	cmp	r3, #3
   80756:	d80c      	bhi.n	80772 <pwm_channel_init+0xe2>
		ch_num *= 8;
		fault_enable_reg = p_pwm->PWM_FPE1;
   80758:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
		ch_num *= 8;
   8075a:	00db      	lsls	r3, r3, #3
		fault_enable_reg = p_pwm->PWM_FPE1;
		fault_enable_reg &= ~(0xFF << ch_num);
   8075c:	22ff      	movs	r2, #255	; 0xff
   8075e:	409a      	lsls	r2, r3
   80760:	ea24 0202 	bic.w	r2, r4, r2
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   80764:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
   80768:	fa01 f303 	lsl.w	r3, r1, r3
   8076c:	4313      	orrs	r3, r2
		p_pwm->PWM_FPE1 = fault_enable_reg;
   8076e:	66c3      	str	r3, [r0, #108]	; 0x6c
   80770:	e00c      	b.n	8078c <pwm_channel_init+0xfc>
	} else {
		ch_num -= 4;
   80772:	3b04      	subs	r3, #4
		ch_num *= 8;
		fault_enable_reg = p_pwm->PWM_FPE2;
   80774:	6f04      	ldr	r4, [r0, #112]	; 0x70
		fault_enable_reg &= ~(0xFF << ch_num);
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
		p_pwm->PWM_FPE1 = fault_enable_reg;
	} else {
		ch_num -= 4;
		ch_num *= 8;
   80776:	00db      	lsls	r3, r3, #3
		fault_enable_reg = p_pwm->PWM_FPE2;
		fault_enable_reg &= ~(0xFF << ch_num);
   80778:	22ff      	movs	r2, #255	; 0xff
   8077a:	409a      	lsls	r2, r3
   8077c:	ea24 0202 	bic.w	r2, r4, r2
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   80780:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
   80784:	fa01 f303 	lsl.w	r3, r1, r3
   80788:	4313      	orrs	r3, r2
		p_pwm->PWM_FPE2 = fault_enable_reg;
   8078a:	6703      	str	r3, [r0, #112]	; 0x70
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR &= (~PWM_CMR_PPM);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR |= (p_channel->ul_ppm_mode & PWM_CMR_PPM);
#endif

	return 0;
}
   8078c:	2000      	movs	r0, #0
   8078e:	bc70      	pop	{r4, r5, r6}
   80790:	4770      	bx	lr
   80792:	bf00      	nop

00080794 <pwm_channel_update_duty>:
 *
 * \retval 0 if changing succeeds, otherwise fails.
 */
uint32_t pwm_channel_update_duty(Pwm *p_pwm, pwm_channel_t *p_channel,
		uint32_t ul_duty)
{
   80794:	b410      	push	{r4}
	uint32_t ch_num = p_channel->channel;
   80796:	680c      	ldr	r4, [r1, #0]

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
   80798:	690b      	ldr	r3, [r1, #16]
   8079a:	4293      	cmp	r3, r2
   8079c:	d306      	bcc.n	807ac <pwm_channel_update_duty+0x18>
		return PWM_INVALID_ARGUMENT;
	} else {
		/* Save new duty cycle value */
		p_channel->ul_duty = ul_duty;
   8079e:	60ca      	str	r2, [r1, #12]
		mode &= ~PWM_CMR_CPD;
		p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = mode;

		p_pwm->PWM_CH_NUM[ch_num].PWM_CUPD = ul_duty;
#else
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
   807a0:	eb00 1044 	add.w	r0, r0, r4, lsl #5
   807a4:	f8c0 2208 	str.w	r2, [r0, #520]	; 0x208
#endif
	}

	return 0;
   807a8:	2000      	movs	r0, #0
   807aa:	e001      	b.n	807b0 <pwm_channel_update_duty+0x1c>
{
	uint32_t ch_num = p_channel->channel;

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
		return PWM_INVALID_ARGUMENT;
   807ac:	f64f 70ff 	movw	r0, #65535	; 0xffff
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
#endif
	}

	return 0;
}
   807b0:	f85d 4b04 	ldr.w	r4, [sp], #4
   807b4:	4770      	bx	lr
   807b6:	bf00      	nop

000807b8 <pwm_channel_enable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_ENA = (1 << ul_channel);
   807b8:	2301      	movs	r3, #1
   807ba:	fa03 f101 	lsl.w	r1, r3, r1
   807be:	6041      	str	r1, [r0, #4]
   807c0:	4770      	bx	lr
   807c2:	bf00      	nop

000807c4 <twi_comInit>:

void buildObject(uint8_t data[5], objectinfo_t *ptr_object);

void buildXY(uint8_t data[5], uint16_t *pInt, uint16_t *ypos_1);

void twi_comInit(void) {
   807c4:	b500      	push	{lr}
   807c6:	b085      	sub	sp, #20
	// TWI master initialization options.
	//set that there is no data;
	theArm.hasData = 0;
   807c8:	2300      	movs	r3, #0
   807ca:	4a0b      	ldr	r2, [pc, #44]	; (807f8 <twi_comInit+0x34>)
   807cc:	7153      	strb	r3, [r2, #5]
	SLAVE_ADDR = SLAVE_ADDR_ARM;//twi slave address for arm
   807ce:	2202      	movs	r2, #2
   807d0:	490a      	ldr	r1, [pc, #40]	; (807fc <twi_comInit+0x38>)
   807d2:	600a      	str	r2, [r1, #0]

	twi_master_options_t opt;
	opt.speed = TWI_SPEED;
   807d4:	490a      	ldr	r1, [pc, #40]	; (80800 <twi_comInit+0x3c>)
   807d6:	9102      	str	r1, [sp, #8]
	opt.chip = SLAVE_ADDR;
   807d8:	f88d 200c 	strb.w	r2, [sp, #12]
typedef twi_packet_t twi_package_t;

static inline uint32_t twi_master_setup(twi_master_t p_twi,
		twi_master_options_t *p_opt)
{
	p_opt->master_clk = sysclk_get_cpu_hz();
   807dc:	4a09      	ldr	r2, [pc, #36]	; (80804 <twi_comInit+0x40>)
   807de:	9201      	str	r2, [sp, #4]
	p_opt->smbus      = 0;
   807e0:	f88d 300d 	strb.w	r3, [sp, #13]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   807e4:	2017      	movs	r0, #23
   807e6:	4b08      	ldr	r3, [pc, #32]	; (80808 <twi_comInit+0x44>)
   807e8:	4798      	blx	r3
	} else {
		// Do Nothing
	}
#endif

	return (twi_master_init(p_twi, p_opt));
   807ea:	4808      	ldr	r0, [pc, #32]	; (8080c <twi_comInit+0x48>)
   807ec:	a901      	add	r1, sp, #4
   807ee:	4b08      	ldr	r3, [pc, #32]	; (80810 <twi_comInit+0x4c>)
   807f0:	4798      	blx	r3

	// Initialize the TWI master driver.
	twi_master_setup(TWI_PORT, &opt);
}
   807f2:	b005      	add	sp, #20
   807f4:	f85d fb04 	ldr.w	pc, [sp], #4
   807f8:	2007ad74 	.word	0x2007ad74
   807fc:	2007ad70 	.word	0x2007ad70
   80800:	000186a0 	.word	0x000186a0
   80804:	0501bd00 	.word	0x0501bd00
   80808:	00082851 	.word	0x00082851
   8080c:	40090000 	.word	0x40090000
   80810:	000803a9 	.word	0x000803a9

00080814 <twiSendData>:
	//}
}

//Send data to Arm with TWI
//data holds the data, dataLength is how many bytes the data is.
uint8_t twiSendData(uint8_t *data, int dataLength) {
   80814:	b530      	push	{r4, r5, lr}
   80816:	b087      	sub	sp, #28

	twi_package_t packet = {
   80818:	2300      	movs	r3, #0
   8081a:	9301      	str	r3, [sp, #4]
   8081c:	9302      	str	r3, [sp, #8]
   8081e:	9305      	str	r3, [sp, #20]
   80820:	9003      	str	r0, [sp, #12]
   80822:	9104      	str	r1, [sp, #16]
   80824:	4b0a      	ldr	r3, [pc, #40]	; (80850 <twiSendData+0x3c>)
   80826:	7819      	ldrb	r1, [r3, #0]
   80828:	f88d 1014 	strb.w	r1, [sp, #20]
			.buffer       = data, // transfer data source buffer
			.length       = dataLength   // transfer data size (bytes)
	};


	if (twi_probe(TWI_PORT, SLAVE_ADDR) == TWI_SUCCESS) {
   8082c:	4809      	ldr	r0, [pc, #36]	; (80854 <twiSendData+0x40>)
   8082e:	4b0a      	ldr	r3, [pc, #40]	; (80858 <twiSendData+0x44>)
   80830:	4798      	blx	r3
   80832:	b938      	cbnz	r0, 80844 <twiSendData+0x30>
		while (twi_master_write(TWI_PORT, &packet) != TWI_SUCCESS);
   80834:	4d07      	ldr	r5, [pc, #28]	; (80854 <twiSendData+0x40>)
   80836:	4c09      	ldr	r4, [pc, #36]	; (8085c <twiSendData+0x48>)
   80838:	4628      	mov	r0, r5
   8083a:	a901      	add	r1, sp, #4
   8083c:	47a0      	blx	r4
   8083e:	2800      	cmp	r0, #0
   80840:	d1fa      	bne.n	80838 <twiSendData+0x24>
   80842:	e001      	b.n	80848 <twiSendData+0x34>
		return 1;
	} else {
		return 0;
   80844:	2000      	movs	r0, #0
   80846:	e000      	b.n	8084a <twiSendData+0x36>
	};


	if (twi_probe(TWI_PORT, SLAVE_ADDR) == TWI_SUCCESS) {
		while (twi_master_write(TWI_PORT, &packet) != TWI_SUCCESS);
		return 1;
   80848:	2001      	movs	r0, #1
	} else {
		return 0;
	}
}
   8084a:	b007      	add	sp, #28
   8084c:	bd30      	pop	{r4, r5, pc}
   8084e:	bf00      	nop
   80850:	2007ad70 	.word	0x2007ad70
   80854:	40090000 	.word	0x40090000
   80858:	0008055d 	.word	0x0008055d
   8085c:	000804bd 	.word	0x000804bd

00080860 <twiReciveData>:

//Recive data from ARM with TWI
//recives and prints the data out on Uart.
//packageSize how many bytes expected to recive
//returns the data recived as array.
uint8_t twiReciveData(uint8_t *recv, uint8_t packageSize) {
   80860:	b530      	push	{r4, r5, lr}
   80862:	b087      	sub	sp, #28
	//package recived
	twi_package_t pkt_rcv = {
   80864:	2300      	movs	r3, #0
   80866:	9301      	str	r3, [sp, #4]
   80868:	9302      	str	r3, [sp, #8]
   8086a:	9305      	str	r3, [sp, #20]
   8086c:	9003      	str	r0, [sp, #12]
   8086e:	9104      	str	r1, [sp, #16]
   80870:	4b06      	ldr	r3, [pc, #24]	; (8088c <twiReciveData+0x2c>)
   80872:	681b      	ldr	r3, [r3, #0]
   80874:	f88d 3014 	strb.w	r3, [sp, #20]
			.length       = packageSize   // transfer data size (bytes)
	};

// 	if(twi_probe(TWI_PORT,SLAVE_ADDR)==TWI_SUCCESS)
// 	{
	while (twi_master_read(TWI_PORT, &pkt_rcv) != TWI_SUCCESS);
   80878:	4d05      	ldr	r5, [pc, #20]	; (80890 <twiReciveData+0x30>)
   8087a:	4c06      	ldr	r4, [pc, #24]	; (80894 <twiReciveData+0x34>)
   8087c:	4628      	mov	r0, r5
   8087e:	a901      	add	r1, sp, #4
   80880:	47a0      	blx	r4
   80882:	2800      	cmp	r0, #0
   80884:	d1fa      	bne.n	8087c <twiReciveData+0x1c>
// 	}
// 	else{
// 		return 0;
// 	}

}
   80886:	2001      	movs	r0, #1
   80888:	b007      	add	sp, #28
   8088a:	bd30      	pop	{r4, r5, pc}
   8088c:	2007ad70 	.word	0x2007ad70
   80890:	40090000 	.word	0x40090000
   80894:	000803e9 	.word	0x000803e9

00080898 <handleCmd>:


void handleCmd(uint8_t cmd) {
   80898:	b508      	push	{r3, lr}

	switch (cmd) {
   8089a:	3802      	subs	r0, #2
   8089c:	2823      	cmp	r0, #35	; 0x23
   8089e:	d837      	bhi.n	80910 <handleCmd+0x78>
   808a0:	e8df f000 	tbb	[pc, r0]
   808a4:	361e1a16 	.word	0x361e1a16
   808a8:	36363636 	.word	0x36363636
   808ac:	36363636 	.word	0x36363636
   808b0:	36363636 	.word	0x36363636
   808b4:	36363636 	.word	0x36363636
   808b8:	36363636 	.word	0x36363636
   808bc:	36363636 	.word	0x36363636
   808c0:	2a123636 	.word	0x2a123636
   808c4:	32262e22 	.word	0x32262e22
		case TWI_CMD_ARM_INIT:
			printf("TWI_CMD_ARM_INIT\n");
   808c8:	4813      	ldr	r0, [pc, #76]	; (80918 <handleCmd+0x80>)
   808ca:	4b14      	ldr	r3, [pc, #80]	; (8091c <handleCmd+0x84>)
   808cc:	4798      	blx	r3
			break;
   808ce:	bd08      	pop	{r3, pc}
		case TWI_CMD_ARM_REQ_BOX_INFO:
			printf("TWI_CMD_ARM_REQ_BOX_INFO\n");
   808d0:	4813      	ldr	r0, [pc, #76]	; (80920 <handleCmd+0x88>)
   808d2:	4b12      	ldr	r3, [pc, #72]	; (8091c <handleCmd+0x84>)
   808d4:	4798      	blx	r3
			break;
   808d6:	bd08      	pop	{r3, pc}
		case TWI_CMD_ARM_REQ_OBJ_INFO:
			printf("TWI_CMD_ARM_REQ_OBJ_INFO\n");
   808d8:	4812      	ldr	r0, [pc, #72]	; (80924 <handleCmd+0x8c>)
   808da:	4b10      	ldr	r3, [pc, #64]	; (8091c <handleCmd+0x84>)
   808dc:	4798      	blx	r3
			break;
   808de:	bd08      	pop	{r3, pc}
		case TWI_CMD_ARM_REQ_COLLECT_INFO:
			printf("TWI_CMD_ARM_REQ_COLLECT_INFO\n");
   808e0:	4811      	ldr	r0, [pc, #68]	; (80928 <handleCmd+0x90>)
   808e2:	4b0e      	ldr	r3, [pc, #56]	; (8091c <handleCmd+0x84>)
   808e4:	4798      	blx	r3
			break;
   808e6:	bd08      	pop	{r3, pc}
		case TWI_CMD_PICKUP_START:
			printf("TWI_CMD_PICKUP_START\n");
   808e8:	4810      	ldr	r0, [pc, #64]	; (8092c <handleCmd+0x94>)
   808ea:	4b0c      	ldr	r3, [pc, #48]	; (8091c <handleCmd+0x84>)
   808ec:	4798      	blx	r3
			break;
   808ee:	bd08      	pop	{r3, pc}
		case TWI_CMD_PICKUP_STATUS:
			printf("TWI_CMD_PICKUP_STATUS\n");
   808f0:	480f      	ldr	r0, [pc, #60]	; (80930 <handleCmd+0x98>)
   808f2:	4b0a      	ldr	r3, [pc, #40]	; (8091c <handleCmd+0x84>)
   808f4:	4798      	blx	r3
			break;
   808f6:	bd08      	pop	{r3, pc}
		case TWI_CMD_DROPOFF_START:
			printf("TWI_CMD_DROPOFF_START\n");
   808f8:	480e      	ldr	r0, [pc, #56]	; (80934 <handleCmd+0x9c>)
   808fa:	4b08      	ldr	r3, [pc, #32]	; (8091c <handleCmd+0x84>)
   808fc:	4798      	blx	r3
			break;
   808fe:	bd08      	pop	{r3, pc}
		case TWI_CMD_DROPOFF_STATUS:
			printf("TWI_CMD_DROPOFF_STATUS\n");
   80900:	480d      	ldr	r0, [pc, #52]	; (80938 <handleCmd+0xa0>)
   80902:	4b06      	ldr	r3, [pc, #24]	; (8091c <handleCmd+0x84>)
   80904:	4798      	blx	r3
			break;
   80906:	bd08      	pop	{r3, pc}
		case TWI_CMD_ERROR:
			printf("TWI_CMD_ERROR\n");
   80908:	480c      	ldr	r0, [pc, #48]	; (8093c <handleCmd+0xa4>)
   8090a:	4b04      	ldr	r3, [pc, #16]	; (8091c <handleCmd+0x84>)
   8090c:	4798      	blx	r3
			break;
   8090e:	bd08      	pop	{r3, pc}
		default:
			printf("error\n");
   80910:	480b      	ldr	r0, [pc, #44]	; (80940 <handleCmd+0xa8>)
   80912:	4b02      	ldr	r3, [pc, #8]	; (8091c <handleCmd+0x84>)
   80914:	4798      	blx	r3
   80916:	bd08      	pop	{r3, pc}
   80918:	0008801c 	.word	0x0008801c
   8091c:	00084041 	.word	0x00084041
   80920:	00088030 	.word	0x00088030
   80924:	0008804c 	.word	0x0008804c
   80928:	00088068 	.word	0x00088068
   8092c:	00088088 	.word	0x00088088
   80930:	000880a0 	.word	0x000880a0
   80934:	000880b8 	.word	0x000880b8
   80938:	000880d0 	.word	0x000880d0
   8093c:	000880e8 	.word	0x000880e8
   80940:	000880f8 	.word	0x000880f8

00080944 <twi_getArmInfo>:
	}
}

arminfo_t twi_getArmInfo() {
   80944:	b510      	push	{r4, lr}
   80946:	b082      	sub	sp, #8
   80948:	4604      	mov	r4, r0
// 	if(theArm.hasData)
// 	{
// 		return theArm;
// 	}

	uint8_t data[3] = {0};
   8094a:	2300      	movs	r3, #0
   8094c:	f88d 3006 	strb.w	r3, [sp, #6]
	uint8_t recv[3] = {0};
   80950:	f8ad 3000 	strh.w	r3, [sp]
   80954:	f88d 3002 	strb.w	r3, [sp, #2]
	uint8_t result;


	data[0] = TWI_CMD_ARM_INIT;
   80958:	2320      	movs	r3, #32
   8095a:	f88d 3004 	strb.w	r3, [sp, #4]
	data[1] = TWI_CMD_ARM_REQ_BOX_INFO;
   8095e:	2302      	movs	r3, #2
   80960:	f88d 3005 	strb.w	r3, [sp, #5]

	//TWI_CMD_ARM_REQ_COLLECT_INFO;
	//TWI_CMD_ARM_REQ_OBJ_INFO

	result = twiSendData(data, 3);
   80964:	a801      	add	r0, sp, #4
   80966:	2103      	movs	r1, #3
   80968:	4b38      	ldr	r3, [pc, #224]	; (80a4c <twi_getArmInfo+0x108>)
   8096a:	4798      	blx	r3
	if (result) {
   8096c:	b1f0      	cbz	r0, 809ac <twi_getArmInfo+0x68>

//		vTaskDelay(pdMSTOTICKS(20));
		twiReciveData(recv, 3);
   8096e:	4668      	mov	r0, sp
   80970:	2103      	movs	r1, #3
   80972:	4b37      	ldr	r3, [pc, #220]	; (80a50 <twi_getArmInfo+0x10c>)
   80974:	4798      	blx	r3
		//printf("111 Receive successful: %u, %u, %u\n", recv[0], recv[1], recv[2]);
		//vTaskDelay(pdMSTOTICKS(10));
		theArm.boxDistance = recv[1];
   80976:	4b37      	ldr	r3, [pc, #220]	; (80a54 <twi_getArmInfo+0x110>)
   80978:	f89d 2001 	ldrb.w	r2, [sp, #1]
   8097c:	701a      	strb	r2, [r3, #0]
		theArm.boxAngle = recv[2];
   8097e:	f89d 2002 	ldrb.w	r2, [sp, #2]
   80982:	705a      	strb	r2, [r3, #1]

		//todo remove
		theArm.hasData = 1;
   80984:	2201      	movs	r2, #1
   80986:	715a      	strb	r2, [r3, #5]
	}

	//vTaskDelay(pdMSTOTICKS(60));

	//setup for next send
	data[0] = TWI_CMD_ARM_INIT;
   80988:	2320      	movs	r3, #32
   8098a:	f88d 3004 	strb.w	r3, [sp, #4]
	data[1] = TWI_CMD_ARM_REQ_OBJ_INFO;
   8098e:	2103      	movs	r1, #3
   80990:	f88d 1005 	strb.w	r1, [sp, #5]
	recv[0] = 0;
   80994:	2300      	movs	r3, #0
   80996:	f88d 3000 	strb.w	r3, [sp]
	recv[1] = 0;
   8099a:	f88d 3001 	strb.w	r3, [sp, #1]
	recv[2] = 0;
   8099e:	f88d 3002 	strb.w	r3, [sp, #2]

	result = twiSendData(data, 3);
   809a2:	a801      	add	r0, sp, #4
   809a4:	4b29      	ldr	r3, [pc, #164]	; (80a4c <twi_getArmInfo+0x108>)
   809a6:	4798      	blx	r3
	if (result) {
   809a8:	b958      	cbnz	r0, 809c2 <twi_getArmInfo+0x7e>
   809aa:	e027      	b.n	809fc <twi_getArmInfo+0xb8>
		theArm.boxAngle = recv[2];

		//todo remove
		theArm.hasData = 1;
	} else {
		puts("Fail 111");
   809ac:	482a      	ldr	r0, [pc, #168]	; (80a58 <twi_getArmInfo+0x114>)
   809ae:	4b2b      	ldr	r3, [pc, #172]	; (80a5c <twi_getArmInfo+0x118>)
   809b0:	4798      	blx	r3
		//vTaskDelay(pdMSTOTICKS(10));
		theArm.hasData = 0;
   809b2:	4b28      	ldr	r3, [pc, #160]	; (80a54 <twi_getArmInfo+0x110>)
   809b4:	2200      	movs	r2, #0
   809b6:	715a      	strb	r2, [r3, #5]
		return theArm;
   809b8:	6818      	ldr	r0, [r3, #0]
   809ba:	6020      	str	r0, [r4, #0]
   809bc:	889b      	ldrh	r3, [r3, #4]
   809be:	80a3      	strh	r3, [r4, #4]
   809c0:	e040      	b.n	80a44 <twi_getArmInfo+0x100>
	recv[2] = 0;

	result = twiSendData(data, 3);
	if (result) {
		//vTaskDelay(pdMSTOTICKS(20));
		twiReciveData(recv, 3);
   809c2:	4668      	mov	r0, sp
   809c4:	2103      	movs	r1, #3
   809c6:	4b22      	ldr	r3, [pc, #136]	; (80a50 <twi_getArmInfo+0x10c>)
   809c8:	4798      	blx	r3
// 			//printf("222 Receive successful: %u, %u, %u\n", recv[0], recv[1], recv[2]);
// 			//vTaskDelay(pdMSTOTICKS(10));
		theArm.objectDistance = recv[1];
   809ca:	4b22      	ldr	r3, [pc, #136]	; (80a54 <twi_getArmInfo+0x110>)
   809cc:	f89d 2001 	ldrb.w	r2, [sp, #1]
   809d0:	709a      	strb	r2, [r3, #2]
		theArm.objectAngle = recv[2];
   809d2:	f89d 2002 	ldrb.w	r2, [sp, #2]
   809d6:	70da      	strb	r2, [r3, #3]
		theArm.hasData = 1;
   809d8:	2201      	movs	r2, #1
   809da:	715a      	strb	r2, [r3, #5]
		return theArm;
	}


	//data[0] = TWI_CMD_ARM_INIT;
	data[1] = TWI_CMD_ARM_REQ_COLLECT_INFO;
   809dc:	2304      	movs	r3, #4
   809de:	f88d 3005 	strb.w	r3, [sp, #5]
	recv[0] = 0;
   809e2:	2300      	movs	r3, #0
   809e4:	f88d 3000 	strb.w	r3, [sp]
	recv[1] = 0;
   809e8:	f88d 3001 	strb.w	r3, [sp, #1]
	recv[2] = 0;
   809ec:	f88d 3002 	strb.w	r3, [sp, #2]


	result = twiSendData(data, 3);
   809f0:	a801      	add	r0, sp, #4
   809f2:	2103      	movs	r1, #3
   809f4:	4b15      	ldr	r3, [pc, #84]	; (80a4c <twi_getArmInfo+0x108>)
   809f6:	4798      	blx	r3
	if (result) {
   809f8:	b1d0      	cbz	r0, 80a30 <twi_getArmInfo+0xec>
   809fa:	e00a      	b.n	80a12 <twi_getArmInfo+0xce>
// 			//vTaskDelay(pdMSTOTICKS(10));
		theArm.objectDistance = recv[1];
		theArm.objectAngle = recv[2];
		theArm.hasData = 1;
	} else {
		puts("Fail 222");
   809fc:	4818      	ldr	r0, [pc, #96]	; (80a60 <twi_getArmInfo+0x11c>)
   809fe:	4b17      	ldr	r3, [pc, #92]	; (80a5c <twi_getArmInfo+0x118>)
   80a00:	4798      	blx	r3
		//vTaskDelay(pdMSTOTICKS(10));
		theArm.hasData = 0;
   80a02:	4b14      	ldr	r3, [pc, #80]	; (80a54 <twi_getArmInfo+0x110>)
   80a04:	2200      	movs	r2, #0
   80a06:	715a      	strb	r2, [r3, #5]
		return theArm;
   80a08:	6818      	ldr	r0, [r3, #0]
   80a0a:	6020      	str	r0, [r4, #0]
   80a0c:	889b      	ldrh	r3, [r3, #4]
   80a0e:	80a3      	strh	r3, [r4, #4]
   80a10:	e018      	b.n	80a44 <twi_getArmInfo+0x100>
	result = twiSendData(data, 3);
	if (result) {

		//delay_ms(20);

		twiReciveData(recv, 3);
   80a12:	4668      	mov	r0, sp
   80a14:	2103      	movs	r1, #3
   80a16:	4b0e      	ldr	r3, [pc, #56]	; (80a50 <twi_getArmInfo+0x10c>)
   80a18:	4798      	blx	r3
		//printf("333 Receive successful: %u, %u, %u\n", recv[0], recv[1], recv[2]);
		//vTaskDelay(pdMSTOTICKS(10));
		theArm.collectAll = recv[1];
   80a1a:	4b0e      	ldr	r3, [pc, #56]	; (80a54 <twi_getArmInfo+0x110>)
   80a1c:	f89d 2001 	ldrb.w	r2, [sp, #1]
   80a20:	711a      	strb	r2, [r3, #4]
		theArm.hasData = 1;
   80a22:	2201      	movs	r2, #1
   80a24:	715a      	strb	r2, [r3, #5]
		theArm.hasData = 0;
		return theArm;
	}

	//return the armInfo
	return theArm;
   80a26:	6818      	ldr	r0, [r3, #0]
   80a28:	6020      	str	r0, [r4, #0]
   80a2a:	889b      	ldrh	r3, [r3, #4]
   80a2c:	80a3      	strh	r3, [r4, #4]
   80a2e:	e009      	b.n	80a44 <twi_getArmInfo+0x100>
		//printf("333 Receive successful: %u, %u, %u\n", recv[0], recv[1], recv[2]);
		//vTaskDelay(pdMSTOTICKS(10));
		theArm.collectAll = recv[1];
		theArm.hasData = 1;
	} else {
		puts("Fail 333");
   80a30:	480c      	ldr	r0, [pc, #48]	; (80a64 <twi_getArmInfo+0x120>)
   80a32:	4b0a      	ldr	r3, [pc, #40]	; (80a5c <twi_getArmInfo+0x118>)
   80a34:	4798      	blx	r3
		//vTaskDelay(pdMSTOTICKS(10));
		theArm.hasData = 0;
   80a36:	4b07      	ldr	r3, [pc, #28]	; (80a54 <twi_getArmInfo+0x110>)
   80a38:	2200      	movs	r2, #0
   80a3a:	715a      	strb	r2, [r3, #5]
		return theArm;
   80a3c:	6818      	ldr	r0, [r3, #0]
   80a3e:	6020      	str	r0, [r4, #0]
   80a40:	889b      	ldrh	r3, [r3, #4]
   80a42:	80a3      	strh	r3, [r4, #4]
	}

	//return the armInfo
	return theArm;
}
   80a44:	4620      	mov	r0, r4
   80a46:	b002      	add	sp, #8
   80a48:	bd10      	pop	{r4, pc}
   80a4a:	bf00      	nop
   80a4c:	00080815 	.word	0x00080815
   80a50:	00080861 	.word	0x00080861
   80a54:	2007ad74 	.word	0x2007ad74
   80a58:	00088100 	.word	0x00088100
   80a5c:	00084271 	.word	0x00084271
   80a60:	0008810c 	.word	0x0008810c
   80a64:	00088118 	.word	0x00088118

00080a68 <twi_pickupStart>:
	twi_set_slave_addr(TWI_PORT, SLAVE_ADDR);

}

//send command for arm to start pickup
uint8_t twi_pickupStart() {
   80a68:	b500      	push	{lr}
   80a6a:	b083      	sub	sp, #12

	uint8_t data[3] = {TWI_CMD_PICKUP_START, 0, 0};
   80a6c:	2322      	movs	r3, #34	; 0x22
   80a6e:	f88d 3004 	strb.w	r3, [sp, #4]
   80a72:	2300      	movs	r3, #0
   80a74:	f88d 3005 	strb.w	r3, [sp, #5]
   80a78:	f88d 3006 	strb.w	r3, [sp, #6]
	//send pickup start cmd
	return twiSendData(data, 3);
   80a7c:	a801      	add	r0, sp, #4
   80a7e:	2103      	movs	r1, #3
   80a80:	4b02      	ldr	r3, [pc, #8]	; (80a8c <twi_pickupStart+0x24>)
   80a82:	4798      	blx	r3
}
   80a84:	b003      	add	sp, #12
   80a86:	f85d fb04 	ldr.w	pc, [sp], #4
   80a8a:	bf00      	nop
   80a8c:	00080815 	.word	0x00080815

00080a90 <twi_pickupGetStatus>:
void twi_pickupSetCm(uint8_t cm) {
	twi_move_cm = cm;
}

//set arm in send pickup status
PickupStatus twi_pickupGetStatus() {
   80a90:	b500      	push	{lr}
   80a92:	b083      	sub	sp, #12
	uint8_t data[3] = {TWI_CMD_PICKUP_STATUS, 0, 0};
   80a94:	2324      	movs	r3, #36	; 0x24
   80a96:	f88d 3004 	strb.w	r3, [sp, #4]
   80a9a:	2300      	movs	r3, #0
   80a9c:	f88d 3005 	strb.w	r3, [sp, #5]
   80aa0:	f88d 3006 	strb.w	r3, [sp, #6]
	uint8_t recv[3] = {0};
   80aa4:	f8ad 3000 	strh.w	r3, [sp]
   80aa8:	f88d 3002 	strb.w	r3, [sp, #2]
	//send pickup start cmd
	if (twiSendData(data, 3)) {
   80aac:	a801      	add	r0, sp, #4
   80aae:	2103      	movs	r1, #3
   80ab0:	4b15      	ldr	r3, [pc, #84]	; (80b08 <twi_pickupGetStatus+0x78>)
   80ab2:	4798      	blx	r3
   80ab4:	b310      	cbz	r0, 80afc <twi_pickupGetStatus+0x6c>
		//get status
		twiReciveData(recv, 3);
   80ab6:	4668      	mov	r0, sp
   80ab8:	2103      	movs	r1, #3
   80aba:	4b14      	ldr	r3, [pc, #80]	; (80b0c <twi_pickupGetStatus+0x7c>)
   80abc:	4798      	blx	r3
		if (recv[0] == TWI_CMD_PICKUP_STATUS) {
   80abe:	f89d 3000 	ldrb.w	r3, [sp]
   80ac2:	2b24      	cmp	r3, #36	; 0x24
   80ac4:	d10c      	bne.n	80ae0 <twi_pickupGetStatus+0x50>
			//printf("pickupstatus %x %u",recv[0],recv[1]);
			//vTaskDelay(pdMSTOTICKS(10));

			//when slave want to move
			if (recv[1] == PICKUP_FORWARD || recv[1] == PICKUP_BACKWARD) {
   80ac6:	f89d 0001 	ldrb.w	r0, [sp, #1]
   80aca:	1ec3      	subs	r3, r0, #3
   80acc:	b2db      	uxtb	r3, r3
   80ace:	2b01      	cmp	r3, #1
   80ad0:	d817      	bhi.n	80b02 <twi_pickupGetStatus+0x72>
	}
}

//set pickup status. when done driving
void twi_pickupSetMasterStatus(PickupStatus newStatus) {
	twi_masterPickupStatus = newStatus;
   80ad2:	4b0f      	ldr	r3, [pc, #60]	; (80b10 <twi_pickupGetStatus+0x80>)
   80ad4:	7018      	strb	r0, [r3, #0]
	return twiSendData(data, 3);
}


void twi_pickupSetCm(uint8_t cm) {
	twi_move_cm = cm;
   80ad6:	f89d 2002 	ldrb.w	r2, [sp, #2]
   80ada:	4b0e      	ldr	r3, [pc, #56]	; (80b14 <twi_pickupGetStatus+0x84>)
   80adc:	701a      	strb	r2, [r3, #0]
   80ade:	e010      	b.n	80b02 <twi_pickupGetStatus+0x72>
				twi_pickupSetMasterStatus(recv[1]);
				twi_pickupSetCm(recv[2]);
			}
			return recv[1];
		} else {
			puts("ERROR pickup status");
   80ae0:	480d      	ldr	r0, [pc, #52]	; (80b18 <twi_pickupGetStatus+0x88>)
   80ae2:	4b0e      	ldr	r3, [pc, #56]	; (80b1c <twi_pickupGetStatus+0x8c>)
   80ae4:	4798      	blx	r3
			printf("got: %x %u\n", recv[0], recv[0]);
   80ae6:	f89d 2000 	ldrb.w	r2, [sp]
   80aea:	480d      	ldr	r0, [pc, #52]	; (80b20 <twi_pickupGetStatus+0x90>)
   80aec:	4611      	mov	r1, r2
   80aee:	4b0d      	ldr	r3, [pc, #52]	; (80b24 <twi_pickupGetStatus+0x94>)
   80af0:	4798      	blx	r3
			//vTaskDelay(pdMSTOTICKS(10));
			handleCmd(recv[0]);
   80af2:	f89d 0000 	ldrb.w	r0, [sp]
   80af6:	4b0c      	ldr	r3, [pc, #48]	; (80b28 <twi_pickupGetStatus+0x98>)
   80af8:	4798      	blx	r3
   80afa:	e002      	b.n	80b02 <twi_pickupGetStatus+0x72>
			//vTaskDelay(pdMSTOTICKS(10));
		}

	} else {
		puts("Error on send status pickup");
   80afc:	480b      	ldr	r0, [pc, #44]	; (80b2c <twi_pickupGetStatus+0x9c>)
   80afe:	4b07      	ldr	r3, [pc, #28]	; (80b1c <twi_pickupGetStatus+0x8c>)
   80b00:	4798      	blx	r3
	}

}
   80b02:	b003      	add	sp, #12
   80b04:	f85d fb04 	ldr.w	pc, [sp], #4
   80b08:	00080815 	.word	0x00080815
   80b0c:	00080861 	.word	0x00080861
   80b10:	200701f8 	.word	0x200701f8
   80b14:	20070ac0 	.word	0x20070ac0
   80b18:	00088124 	.word	0x00088124
   80b1c:	00084271 	.word	0x00084271
   80b20:	00088138 	.word	0x00088138
   80b24:	00084041 	.word	0x00084041
   80b28:	00080899 	.word	0x00080899
   80b2c:	00088144 	.word	0x00088144

00080b30 <twi_pickupSendMovementDone>:

//send done driving
uint8_t twi_pickupSendMovementDone() {
   80b30:	b500      	push	{lr}
   80b32:	b083      	sub	sp, #12
	uint8_t data[3] = {TWI_CMD_PICKUP_STATUS, PICKUP_DONE_DRIVE, 0};
   80b34:	4b0a      	ldr	r3, [pc, #40]	; (80b60 <twi_pickupSendMovementDone+0x30>)
   80b36:	881a      	ldrh	r2, [r3, #0]
   80b38:	789b      	ldrb	r3, [r3, #2]
   80b3a:	f8ad 2004 	strh.w	r2, [sp, #4]
   80b3e:	f88d 3006 	strb.w	r3, [sp, #6]
	//send pickup start cmd
	if (twiSendData(data, 3)) {
   80b42:	a801      	add	r0, sp, #4
   80b44:	2103      	movs	r1, #3
   80b46:	4b07      	ldr	r3, [pc, #28]	; (80b64 <twi_pickupSendMovementDone+0x34>)
   80b48:	4798      	blx	r3
   80b4a:	4603      	mov	r3, r0
   80b4c:	b118      	cbz	r0, 80b56 <twi_pickupSendMovementDone+0x26>
		twi_masterPickupStatus = PICKUP_RUNNING;
   80b4e:	2205      	movs	r2, #5
   80b50:	4b05      	ldr	r3, [pc, #20]	; (80b68 <twi_pickupSendMovementDone+0x38>)
   80b52:	701a      	strb	r2, [r3, #0]
		//success
		return 1;
   80b54:	2301      	movs	r3, #1
	} else {
		//failed
		return 0;
	}

}
   80b56:	4618      	mov	r0, r3
   80b58:	b003      	add	sp, #12
   80b5a:	f85d fb04 	ldr.w	pc, [sp], #4
   80b5e:	bf00      	nop
   80b60:	00088018 	.word	0x00088018
   80b64:	00080815 	.word	0x00080815
   80b68:	200701f8 	.word	0x200701f8

00080b6c <twi_dropoffStart>:

//start dropoff
uint8_t twi_dropoffStart(void) {
   80b6c:	b500      	push	{lr}
   80b6e:	b083      	sub	sp, #12

	uint8_t data[3] = {TWI_CMD_DROPOFF_START, 0, 0};
   80b70:	2321      	movs	r3, #33	; 0x21
   80b72:	f88d 3004 	strb.w	r3, [sp, #4]
   80b76:	2300      	movs	r3, #0
   80b78:	f88d 3005 	strb.w	r3, [sp, #5]
   80b7c:	f88d 3006 	strb.w	r3, [sp, #6]
	//send pickup start cmd
	return twiSendData(data, 3);
   80b80:	a801      	add	r0, sp, #4
   80b82:	2103      	movs	r1, #3
   80b84:	4b02      	ldr	r3, [pc, #8]	; (80b90 <twi_dropoffStart+0x24>)
   80b86:	4798      	blx	r3
}
   80b88:	b003      	add	sp, #12
   80b8a:	f85d fb04 	ldr.w	pc, [sp], #4
   80b8e:	bf00      	nop
   80b90:	00080815 	.word	0x00080815

00080b94 <twi_dropoffGetStatus>:

//get the dropoff status
DropoffStatus twi_dropoffGetStatus(void) {
   80b94:	b500      	push	{lr}
   80b96:	b083      	sub	sp, #12
	uint8_t data[3] = {TWI_CMD_DROPOFF_STATUS, 0, 0};
   80b98:	2323      	movs	r3, #35	; 0x23
   80b9a:	f88d 3004 	strb.w	r3, [sp, #4]
   80b9e:	2300      	movs	r3, #0
   80ba0:	f88d 3005 	strb.w	r3, [sp, #5]
   80ba4:	f88d 3006 	strb.w	r3, [sp, #6]
	uint8_t recv[3] = {0};
   80ba8:	f8ad 3000 	strh.w	r3, [sp]
   80bac:	f88d 3002 	strb.w	r3, [sp, #2]
	//send pickup start cmd
	if (twiSendData(data, 3)) {
   80bb0:	a801      	add	r0, sp, #4
   80bb2:	2103      	movs	r1, #3
   80bb4:	4b10      	ldr	r3, [pc, #64]	; (80bf8 <twi_dropoffGetStatus+0x64>)
   80bb6:	4798      	blx	r3
   80bb8:	b1c0      	cbz	r0, 80bec <twi_dropoffGetStatus+0x58>
		//get status
		twiReciveData(recv, 3);
   80bba:	4668      	mov	r0, sp
   80bbc:	2103      	movs	r1, #3
   80bbe:	4b0f      	ldr	r3, [pc, #60]	; (80bfc <twi_dropoffGetStatus+0x68>)
   80bc0:	4798      	blx	r3
		if (recv[0] == TWI_CMD_DROPOFF_STATUS) {
   80bc2:	f89d 3000 	ldrb.w	r3, [sp]
   80bc6:	2b23      	cmp	r3, #35	; 0x23
   80bc8:	d102      	bne.n	80bd0 <twi_dropoffGetStatus+0x3c>
			//printf("pickupstatus %x %u",recv[0],recv[1]);
			//vTaskDelay(pdMSTOTICKS(10));
			//wait here for arm to finish..

			return recv[1];
   80bca:	f89d 0001 	ldrb.w	r0, [sp, #1]
   80bce:	e010      	b.n	80bf2 <twi_dropoffGetStatus+0x5e>
		} else {
			puts("ERROR pickup status");
   80bd0:	480b      	ldr	r0, [pc, #44]	; (80c00 <twi_dropoffGetStatus+0x6c>)
   80bd2:	4b0c      	ldr	r3, [pc, #48]	; (80c04 <twi_dropoffGetStatus+0x70>)
   80bd4:	4798      	blx	r3
			printf("got: %x %u\n", recv[0], recv[0]);
   80bd6:	f89d 2000 	ldrb.w	r2, [sp]
   80bda:	480b      	ldr	r0, [pc, #44]	; (80c08 <twi_dropoffGetStatus+0x74>)
   80bdc:	4611      	mov	r1, r2
   80bde:	4b0b      	ldr	r3, [pc, #44]	; (80c0c <twi_dropoffGetStatus+0x78>)
   80be0:	4798      	blx	r3
			//vTaskDelay(pdMSTOTICKS(10));
			handleCmd(recv[0]);
   80be2:	f89d 0000 	ldrb.w	r0, [sp]
   80be6:	4b0a      	ldr	r3, [pc, #40]	; (80c10 <twi_dropoffGetStatus+0x7c>)
   80be8:	4798      	blx	r3
   80bea:	e002      	b.n	80bf2 <twi_dropoffGetStatus+0x5e>
			//vTaskDelay(pdMSTOTICKS(10));
		}

	} else {
		puts("Error on send status pickup");
   80bec:	4809      	ldr	r0, [pc, #36]	; (80c14 <twi_dropoffGetStatus+0x80>)
   80bee:	4b05      	ldr	r3, [pc, #20]	; (80c04 <twi_dropoffGetStatus+0x70>)
   80bf0:	4798      	blx	r3
	}
}
   80bf2:	b003      	add	sp, #12
   80bf4:	f85d fb04 	ldr.w	pc, [sp], #4
   80bf8:	00080815 	.word	0x00080815
   80bfc:	00080861 	.word	0x00080861
   80c00:	00088124 	.word	0x00088124
   80c04:	00084271 	.word	0x00084271
   80c08:	00088138 	.word	0x00088138
   80c0c:	00084041 	.word	0x00084041
   80c10:	00080899 	.word	0x00080899
   80c14:	00088144 	.word	0x00088144

00080c18 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   80c18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80c1c:	460c      	mov	r4, r1
   80c1e:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
   80c20:	b960      	cbnz	r0, 80c3c <_read+0x24>
		return -1;
	}

	for (; len > 0; --len) {
   80c22:	2a00      	cmp	r2, #0
   80c24:	dd0e      	ble.n	80c44 <_read+0x2c>
   80c26:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   80c28:	4e09      	ldr	r6, [pc, #36]	; (80c50 <_read+0x38>)
   80c2a:	4d0a      	ldr	r5, [pc, #40]	; (80c54 <_read+0x3c>)
   80c2c:	6830      	ldr	r0, [r6, #0]
   80c2e:	4621      	mov	r1, r4
   80c30:	682b      	ldr	r3, [r5, #0]
   80c32:	4798      	blx	r3
		ptr++;
   80c34:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   80c36:	42bc      	cmp	r4, r7
   80c38:	d1f8      	bne.n	80c2c <_read+0x14>
   80c3a:	e006      	b.n	80c4a <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
   80c3c:	f04f 30ff 	mov.w	r0, #4294967295
   80c40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len > 0; --len) {
   80c44:	2000      	movs	r0, #0
   80c46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
   80c4a:	4640      	mov	r0, r8
	}
	return nChars;
}
   80c4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80c50:	2007ad84 	.word	0x2007ad84
   80c54:	2007ad7c 	.word	0x2007ad7c

00080c58 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   80c58:	6943      	ldr	r3, [r0, #20]
   80c5a:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   80c5e:	bf1d      	ittte	ne
   80c60:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   80c64:	61c1      	strne	r1, [r0, #28]
	return 0;
   80c66:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
   80c68:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
   80c6a:	4770      	bx	lr

00080c6c <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   80c6c:	6943      	ldr	r3, [r0, #20]
   80c6e:	f013 0f01 	tst.w	r3, #1
   80c72:	d005      	beq.n	80c80 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   80c74:	6983      	ldr	r3, [r0, #24]
   80c76:	f3c3 0308 	ubfx	r3, r3, #0, #9
   80c7a:	600b      	str	r3, [r1, #0]

	return 0;
   80c7c:	2000      	movs	r0, #0
   80c7e:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   80c80:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   80c82:	4770      	bx	lr

00080c84 <USART0_Handler>:
#if SAMD || SAMR21 || SAML21
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
   80c84:	b500      	push	{lr}
   80c86:	b083      	sub	sp, #12
	uint8_t temp;
#if SAMD || SAMR21 || SAML21
	usart_serial_read_packet(&host_uart_module, &temp, 1);
#else
	usart_serial_read_packet(USART_HOST, &temp, 1);
   80c88:	4811      	ldr	r0, [pc, #68]	; (80cd0 <USART0_Handler+0x4c>)
   80c8a:	f10d 0107 	add.w	r1, sp, #7
   80c8e:	2201      	movs	r2, #1
   80c90:	4b10      	ldr	r3, [pc, #64]	; (80cd4 <USART0_Handler+0x50>)
   80c92:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   80c94:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   80c96:	f3bf 8f5f 	dmb	sy
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
   80c9a:	2200      	movs	r2, #0
   80c9c:	4b0e      	ldr	r3, [pc, #56]	; (80cd8 <USART0_Handler+0x54>)
   80c9e:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
   80ca0:	4b0e      	ldr	r3, [pc, #56]	; (80cdc <USART0_Handler+0x58>)
   80ca2:	781b      	ldrb	r3, [r3, #0]
   80ca4:	f89d 1007 	ldrb.w	r1, [sp, #7]
   80ca8:	4a0d      	ldr	r2, [pc, #52]	; (80ce0 <USART0_Handler+0x5c>)
   80caa:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
   80cac:	2b9b      	cmp	r3, #155	; 0x9b
   80cae:	d103      	bne.n	80cb8 <USART0_Handler+0x34>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
   80cb0:	2200      	movs	r2, #0
   80cb2:	4b0a      	ldr	r3, [pc, #40]	; (80cdc <USART0_Handler+0x58>)
   80cb4:	701a      	strb	r2, [r3, #0]
   80cb6:	e002      	b.n	80cbe <USART0_Handler+0x3a>
	} else {
		serial_rx_buf_tail++;
   80cb8:	3301      	adds	r3, #1
   80cba:	4a08      	ldr	r2, [pc, #32]	; (80cdc <USART0_Handler+0x58>)
   80cbc:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
   80cbe:	2201      	movs	r2, #1
   80cc0:	4b05      	ldr	r3, [pc, #20]	; (80cd8 <USART0_Handler+0x54>)
   80cc2:	701a      	strb	r2, [r3, #0]
   80cc4:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   80cc8:	b662      	cpsie	i
}
   80cca:	b003      	add	sp, #12
   80ccc:	f85d fb04 	ldr.w	pc, [sp], #4
   80cd0:	40098000 	.word	0x40098000
   80cd4:	00080d39 	.word	0x00080d39
   80cd8:	20070208 	.word	0x20070208
   80cdc:	20070b60 	.word	0x20070b60
   80ce0:	20070ac4 	.word	0x20070ac4

00080ce4 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   80ce4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80ce8:	460e      	mov	r6, r1
   80cea:	4615      	mov	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   80cec:	3801      	subs	r0, #1
   80cee:	2802      	cmp	r0, #2
   80cf0:	d80f      	bhi.n	80d12 <_write+0x2e>
		return -1;
	}

	for (; len != 0; --len) {
   80cf2:	b192      	cbz	r2, 80d1a <_write+0x36>
   80cf4:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
   80cf6:	f8df 803c 	ldr.w	r8, [pc, #60]	; 80d34 <_write+0x50>
   80cfa:	4f0d      	ldr	r7, [pc, #52]	; (80d30 <_write+0x4c>)
   80cfc:	f8d8 0000 	ldr.w	r0, [r8]
   80d00:	5d31      	ldrb	r1, [r6, r4]
   80d02:	683b      	ldr	r3, [r7, #0]
   80d04:	4798      	blx	r3
   80d06:	2800      	cmp	r0, #0
   80d08:	db0a      	blt.n	80d20 <_write+0x3c>
			return -1;
		}
		++nChars;
   80d0a:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   80d0c:	42a5      	cmp	r5, r4
   80d0e:	d1f5      	bne.n	80cfc <_write+0x18>
   80d10:	e00a      	b.n	80d28 <_write+0x44>
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
   80d12:	f04f 30ff 	mov.w	r0, #4294967295
   80d16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len != 0; --len) {
   80d1a:	2000      	movs	r0, #0
   80d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
   80d20:	f04f 30ff 	mov.w	r0, #4294967295
   80d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		++nChars;
   80d28:	4620      	mov	r0, r4
	}
	return nChars;
}
   80d2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80d2e:	bf00      	nop
   80d30:	2007ad80 	.word	0x2007ad80
   80d34:	2007ad84 	.word	0x2007ad84

00080d38 <usart_serial_read_packet>:
 * \param len    Length of data
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
   80d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80d3c:	b083      	sub	sp, #12
   80d3e:	4605      	mov	r5, r0
	while (len) {
   80d40:	4690      	mov	r8, r2
   80d42:	2a00      	cmp	r2, #0
   80d44:	d047      	beq.n	80dd6 <usart_serial_read_packet+0x9e>
   80d46:	1c4e      	adds	r6, r1, #1
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80d48:	4f25      	ldr	r7, [pc, #148]	; (80de0 <usart_serial_read_packet+0xa8>)
		while (usart_read(p_usart, &val));
   80d4a:	4c26      	ldr	r4, [pc, #152]	; (80de4 <usart_serial_read_packet+0xac>)
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80d4c:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 80df8 <usart_serial_read_packet+0xc0>
	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
   80d50:	f8df b094 	ldr.w	fp, [pc, #148]	; 80de8 <usart_serial_read_packet+0xb0>
   80d54:	f106 39ff 	add.w	r9, r6, #4294967295
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
	uint32_t val = 0;
   80d58:	2300      	movs	r3, #0
   80d5a:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   80d5c:	4b22      	ldr	r3, [pc, #136]	; (80de8 <usart_serial_read_packet+0xb0>)
   80d5e:	429d      	cmp	r5, r3
   80d60:	d106      	bne.n	80d70 <usart_serial_read_packet+0x38>
		while (uart_read((Uart*)p_usart, data));
   80d62:	4658      	mov	r0, fp
   80d64:	4649      	mov	r1, r9
   80d66:	4b21      	ldr	r3, [pc, #132]	; (80dec <usart_serial_read_packet+0xb4>)
   80d68:	4798      	blx	r3
   80d6a:	2800      	cmp	r0, #0
   80d6c:	d1f9      	bne.n	80d62 <usart_serial_read_packet+0x2a>
   80d6e:	e019      	b.n	80da4 <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80d70:	4b1f      	ldr	r3, [pc, #124]	; (80df0 <usart_serial_read_packet+0xb8>)
   80d72:	429d      	cmp	r5, r3
   80d74:	d109      	bne.n	80d8a <usart_serial_read_packet+0x52>
		while (usart_read(p_usart, &val));
   80d76:	4699      	mov	r9, r3
   80d78:	4648      	mov	r0, r9
   80d7a:	a901      	add	r1, sp, #4
   80d7c:	47a0      	blx	r4
   80d7e:	2800      	cmp	r0, #0
   80d80:	d1fa      	bne.n	80d78 <usart_serial_read_packet+0x40>
		*data = (uint8_t)(val & 0xFF);
   80d82:	9b01      	ldr	r3, [sp, #4]
   80d84:	f806 3c01 	strb.w	r3, [r6, #-1]
   80d88:	e017      	b.n	80dba <usart_serial_read_packet+0x82>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80d8a:	4b1a      	ldr	r3, [pc, #104]	; (80df4 <usart_serial_read_packet+0xbc>)
   80d8c:	429d      	cmp	r5, r3
   80d8e:	d109      	bne.n	80da4 <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
   80d90:	4699      	mov	r9, r3
   80d92:	4648      	mov	r0, r9
   80d94:	a901      	add	r1, sp, #4
   80d96:	47a0      	blx	r4
   80d98:	2800      	cmp	r0, #0
   80d9a:	d1fa      	bne.n	80d92 <usart_serial_read_packet+0x5a>
		*data = (uint8_t)(val & 0xFF);
   80d9c:	9b01      	ldr	r3, [sp, #4]
   80d9e:	f806 3c01 	strb.w	r3, [r6, #-1]
   80da2:	e014      	b.n	80dce <usart_serial_read_packet+0x96>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80da4:	4555      	cmp	r5, sl
   80da6:	d108      	bne.n	80dba <usart_serial_read_packet+0x82>
		while (usart_read(p_usart, &val));
   80da8:	4650      	mov	r0, sl
   80daa:	a901      	add	r1, sp, #4
   80dac:	47a0      	blx	r4
   80dae:	2800      	cmp	r0, #0
   80db0:	d1fa      	bne.n	80da8 <usart_serial_read_packet+0x70>
		*data = (uint8_t)(val & 0xFF);
   80db2:	9b01      	ldr	r3, [sp, #4]
   80db4:	f806 3c01 	strb.w	r3, [r6, #-1]
   80db8:	e009      	b.n	80dce <usart_serial_read_packet+0x96>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80dba:	42bd      	cmp	r5, r7
   80dbc:	d107      	bne.n	80dce <usart_serial_read_packet+0x96>
		while (usart_read(p_usart, &val));
   80dbe:	4638      	mov	r0, r7
   80dc0:	a901      	add	r1, sp, #4
   80dc2:	47a0      	blx	r4
   80dc4:	2800      	cmp	r0, #0
   80dc6:	d1fa      	bne.n	80dbe <usart_serial_read_packet+0x86>
		*data = (uint8_t)(val & 0xFF);
   80dc8:	9b01      	ldr	r3, [sp, #4]
   80dca:	f806 3c01 	strb.w	r3, [r6, #-1]
   80dce:	3601      	adds	r6, #1
   80dd0:	f1b8 0801 	subs.w	r8, r8, #1
   80dd4:	d1be      	bne.n	80d54 <usart_serial_read_packet+0x1c>
		usart_serial_getchar(usart, data);
		len--;
		data++;
	}
	return STATUS_OK;
}
   80dd6:	2000      	movs	r0, #0
   80dd8:	b003      	add	sp, #12
   80dda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80dde:	bf00      	nop
   80de0:	400a4000 	.word	0x400a4000
   80de4:	00080c6d 	.word	0x00080c6d
   80de8:	400e0800 	.word	0x400e0800
   80dec:	00080e4d 	.word	0x00080e4d
   80df0:	40098000 	.word	0x40098000
   80df4:	4009c000 	.word	0x4009c000
   80df8:	400a0000 	.word	0x400a0000

00080dfc <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   80dfc:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
   80e00:	6a08      	ldr	r0, [r1, #32]
}
   80e02:	4770      	bx	lr

00080e04 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   80e04:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   80e06:	23ac      	movs	r3, #172	; 0xac
   80e08:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   80e0a:	680a      	ldr	r2, [r1, #0]
   80e0c:	684b      	ldr	r3, [r1, #4]
   80e0e:	fbb2 f3f3 	udiv	r3, r2, r3
   80e12:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   80e14:	1e5c      	subs	r4, r3, #1
   80e16:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   80e1a:	4294      	cmp	r4, r2
   80e1c:	d80a      	bhi.n	80e34 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
   80e1e:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   80e20:	688b      	ldr	r3, [r1, #8]
   80e22:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   80e24:	f240 2302 	movw	r3, #514	; 0x202
   80e28:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80e2c:	2350      	movs	r3, #80	; 0x50
   80e2e:	6003      	str	r3, [r0, #0]

	return 0;
   80e30:	2000      	movs	r0, #0
   80e32:	e000      	b.n	80e36 <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
   80e34:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
   80e36:	f85d 4b04 	ldr.w	r4, [sp], #4
   80e3a:	4770      	bx	lr

00080e3c <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   80e3c:	6943      	ldr	r3, [r0, #20]
   80e3e:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   80e42:	bf1a      	itte	ne
   80e44:	61c1      	strne	r1, [r0, #28]
	return 0;
   80e46:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
   80e48:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
   80e4a:	4770      	bx	lr

00080e4c <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   80e4c:	6943      	ldr	r3, [r0, #20]
   80e4e:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   80e52:	bf1d      	ittte	ne
   80e54:	6983      	ldrne	r3, [r0, #24]
   80e56:	700b      	strbne	r3, [r1, #0]
	return 0;
   80e58:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
   80e5a:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
   80e5c:	4770      	bx	lr
   80e5e:	bf00      	nop

00080e60 <vListInitialise>:
void vListInitialise( xList *pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
   80e60:	f100 0308 	add.w	r3, r0, #8
   80e64:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   80e66:	f04f 32ff 	mov.w	r2, #4294967295
   80e6a:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
   80e6c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
   80e6e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
   80e70:	2300      	movs	r3, #0
   80e72:	6003      	str	r3, [r0, #0]
   80e74:	4770      	bx	lr
   80e76:	bf00      	nop

00080e78 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   80e78:	2300      	movs	r3, #0
   80e7a:	6103      	str	r3, [r0, #16]
   80e7c:	4770      	bx	lr
   80e7e:	bf00      	nop

00080e80 <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
   80e80:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
   80e82:	685a      	ldr	r2, [r3, #4]
   80e84:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
   80e86:	6842      	ldr	r2, [r0, #4]
   80e88:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   80e8a:	685a      	ldr	r2, [r3, #4]
   80e8c:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
   80e8e:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
   80e90:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   80e92:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   80e94:	6803      	ldr	r3, [r0, #0]
   80e96:	3301      	adds	r3, #1
   80e98:	6003      	str	r3, [r0, #0]
   80e9a:	4770      	bx	lr

00080e9c <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
   80e9c:	b410      	push	{r4}
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
   80e9e:	680c      	ldr	r4, [r1, #0]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   80ea0:	f1b4 3fff 	cmp.w	r4, #4294967295
   80ea4:	d101      	bne.n	80eaa <vListInsert+0xe>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   80ea6:	6903      	ldr	r3, [r0, #16]
   80ea8:	e00a      	b.n	80ec0 <vListInsert+0x24>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
   80eaa:	f100 0308 	add.w	r3, r0, #8
   80eae:	68c2      	ldr	r2, [r0, #12]
   80eb0:	6812      	ldr	r2, [r2, #0]
   80eb2:	4294      	cmp	r4, r2
   80eb4:	d304      	bcc.n	80ec0 <vListInsert+0x24>
   80eb6:	685b      	ldr	r3, [r3, #4]
   80eb8:	685a      	ldr	r2, [r3, #4]
   80eba:	6812      	ldr	r2, [r2, #0]
   80ebc:	4294      	cmp	r4, r2
   80ebe:	d2fa      	bcs.n	80eb6 <vListInsert+0x1a>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   80ec0:	685a      	ldr	r2, [r3, #4]
   80ec2:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   80ec4:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
   80ec6:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
   80ec8:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   80eca:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   80ecc:	6803      	ldr	r3, [r0, #0]
   80ece:	3301      	adds	r3, #1
   80ed0:	6003      	str	r3, [r0, #0]
}
   80ed2:	f85d 4b04 	ldr.w	r4, [sp], #4
   80ed6:	4770      	bx	lr

00080ed8 <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   80ed8:	6843      	ldr	r3, [r0, #4]
   80eda:	6882      	ldr	r2, [r0, #8]
   80edc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   80ede:	6883      	ldr	r3, [r0, #8]
   80ee0:	6842      	ldr	r2, [r0, #4]
   80ee2:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
   80ee4:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   80ee6:	685a      	ldr	r2, [r3, #4]
   80ee8:	4282      	cmp	r2, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   80eea:	bf04      	itt	eq
   80eec:	6882      	ldreq	r2, [r0, #8]
   80eee:	605a      	streq	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
   80ef0:	2200      	movs	r2, #0
   80ef2:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
   80ef4:	681a      	ldr	r2, [r3, #0]
   80ef6:	3a01      	subs	r2, #1
   80ef8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   80efa:	6818      	ldr	r0, [r3, #0]
}
   80efc:	4770      	bx	lr
   80efe:	bf00      	nop

00080f00 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
   80f00:	4803      	ldr	r0, [pc, #12]	; (80f10 <prvPortStartFirstTask+0x10>)
   80f02:	6800      	ldr	r0, [r0, #0]
   80f04:	6800      	ldr	r0, [r0, #0]
   80f06:	f380 8808 	msr	MSP, r0
   80f0a:	b662      	cpsie	i
   80f0c:	df00      	svc	0
   80f0e:	bf00      	nop
   80f10:	e000ed08 	.word	0xe000ed08

00080f14 <pxPortInitialiseStack>:
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   80f14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   80f18:	f840 3c04 	str.w	r3, [r0, #-4]
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
   80f1c:	f840 1c08 	str.w	r1, [r0, #-8]
	pxTopOfStack--;
	*pxTopOfStack = 0;	/* LR */
   80f20:	2300      	movs	r3, #0
   80f22:	f840 3c0c 	str.w	r3, [r0, #-12]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
   80f26:	f840 2c20 	str.w	r2, [r0, #-32]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
   80f2a:	3840      	subs	r0, #64	; 0x40
   80f2c:	4770      	bx	lr
   80f2e:	bf00      	nop

00080f30 <SVC_Handler>:
/*-----------------------------------------------------------*/

__attribute__ (( naked )) void SVC_Handler( void )
{
	__asm volatile (
   80f30:	4b06      	ldr	r3, [pc, #24]	; (80f4c <pxCurrentTCBConst2>)
   80f32:	6819      	ldr	r1, [r3, #0]
   80f34:	6808      	ldr	r0, [r1, #0]
   80f36:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80f3a:	f380 8809 	msr	PSP, r0
   80f3e:	f04f 0000 	mov.w	r0, #0
   80f42:	f380 8811 	msr	BASEPRI, r0
   80f46:	f04e 0e0d 	orr.w	lr, lr, #13
   80f4a:	4770      	bx	lr

00080f4c <pxCurrentTCBConst2>:
   80f4c:	2007ac2c 	.word	0x2007ac2c

00080f50 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   80f50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80f54:	4b01      	ldr	r3, [pc, #4]	; (80f5c <vPortYieldFromISR+0xc>)
   80f56:	601a      	str	r2, [r3, #0]
   80f58:	4770      	bx	lr
   80f5a:	bf00      	nop
   80f5c:	e000ed04 	.word	0xe000ed04

00080f60 <ulPortSetInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
   80f60:	f3ef 8011 	mrs	r0, BASEPRI
   80f64:	f04f 01a0 	mov.w	r1, #160	; 0xa0
   80f68:	f381 8811 	msr	BASEPRI, r1
   80f6c:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
}
   80f6e:	2000      	movs	r0, #0

00080f70 <vPortEnterCritical>:
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   80f70:	b508      	push	{r3, lr}
	portDISABLE_INTERRUPTS();
   80f72:	4b03      	ldr	r3, [pc, #12]	; (80f80 <vPortEnterCritical+0x10>)
   80f74:	4798      	blx	r3
	uxCriticalNesting++;
   80f76:	4b03      	ldr	r3, [pc, #12]	; (80f84 <vPortEnterCritical+0x14>)
   80f78:	681a      	ldr	r2, [r3, #0]
   80f7a:	3201      	adds	r2, #1
   80f7c:	601a      	str	r2, [r3, #0]
   80f7e:	bd08      	pop	{r3, pc}
   80f80:	00080f61 	.word	0x00080f61
   80f84:	200701fc 	.word	0x200701fc

00080f88 <vPortClearInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
   80f88:	f380 8811 	msr	BASEPRI, r0
   80f8c:	4770      	bx	lr
   80f8e:	bf00      	nop

00080f90 <vPortExitCritical>:
	uxCriticalNesting++;
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   80f90:	b508      	push	{r3, lr}
	uxCriticalNesting--;
   80f92:	4a04      	ldr	r2, [pc, #16]	; (80fa4 <vPortExitCritical+0x14>)
   80f94:	6813      	ldr	r3, [r2, #0]
   80f96:	3b01      	subs	r3, #1
   80f98:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
   80f9a:	b913      	cbnz	r3, 80fa2 <vPortExitCritical+0x12>
	{
		portENABLE_INTERRUPTS();
   80f9c:	2000      	movs	r0, #0
   80f9e:	4b02      	ldr	r3, [pc, #8]	; (80fa8 <vPortExitCritical+0x18>)
   80fa0:	4798      	blx	r3
   80fa2:	bd08      	pop	{r3, pc}
   80fa4:	200701fc 	.word	0x200701fc
   80fa8:	00080f89 	.word	0x00080f89

00080fac <PendSV_Handler>:

__attribute__(( naked )) void PendSV_Handler( void )
{
	/* This is a naked function. */

	__asm volatile
   80fac:	f3ef 8009 	mrs	r0, PSP
   80fb0:	4b0c      	ldr	r3, [pc, #48]	; (80fe4 <pxCurrentTCBConst>)
   80fb2:	681a      	ldr	r2, [r3, #0]
   80fb4:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80fb8:	6010      	str	r0, [r2, #0]
   80fba:	e92d 4008 	stmdb	sp!, {r3, lr}
   80fbe:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   80fc2:	f380 8811 	msr	BASEPRI, r0
   80fc6:	f000 fe8b 	bl	81ce0 <vTaskSwitchContext>
   80fca:	f04f 0000 	mov.w	r0, #0
   80fce:	f380 8811 	msr	BASEPRI, r0
   80fd2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   80fd6:	6819      	ldr	r1, [r3, #0]
   80fd8:	6808      	ldr	r0, [r1, #0]
   80fda:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80fde:	f380 8809 	msr	PSP, r0
   80fe2:	4770      	bx	lr

00080fe4 <pxCurrentTCBConst>:
   80fe4:	2007ac2c 	.word	0x2007ac2c

00080fe8 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void SysTick_Handler( void )
{
   80fe8:	b508      	push	{r3, lr}
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   80fea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80fee:	4b05      	ldr	r3, [pc, #20]	; (81004 <SysTick_Handler+0x1c>)
   80ff0:	601a      	str	r2, [r3, #0]
	to generate the tick interrupt. */
	#if configUSE_TICKLESS_IDLE == 1
		portNVIC_SYSTICK_LOAD_REG = ulTimerReloadValueForOneTick;
	#endif

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
   80ff2:	4b05      	ldr	r3, [pc, #20]	; (81008 <SysTick_Handler+0x20>)
   80ff4:	4798      	blx	r3
	{
		vTaskIncrementTick();
   80ff6:	4b05      	ldr	r3, [pc, #20]	; (8100c <SysTick_Handler+0x24>)
   80ff8:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
   80ffa:	2000      	movs	r0, #0
   80ffc:	4b04      	ldr	r3, [pc, #16]	; (81010 <SysTick_Handler+0x28>)
   80ffe:	4798      	blx	r3
   81000:	bd08      	pop	{r3, pc}
   81002:	bf00      	nop
   81004:	e000ed04 	.word	0xe000ed04
   81008:	00080f61 	.word	0x00080f61
   8100c:	000819ed 	.word	0x000819ed
   81010:	00080f89 	.word	0x00080f89

00081014 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = 45UL / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;;
   81014:	4a03      	ldr	r2, [pc, #12]	; (81024 <vPortSetupTimerInterrupt+0x10>)
   81016:	4b04      	ldr	r3, [pc, #16]	; (81028 <vPortSetupTimerInterrupt+0x14>)
   81018:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
   8101a:	2207      	movs	r2, #7
   8101c:	3b04      	subs	r3, #4
   8101e:	601a      	str	r2, [r3, #0]
   81020:	4770      	bx	lr
   81022:	bf00      	nop
   81024:	0001481f 	.word	0x0001481f
   81028:	e000e014 	.word	0xe000e014

0008102c <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
   8102c:	b510      	push	{r4, lr}
	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
	See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
   8102e:	4b09      	ldr	r3, [pc, #36]	; (81054 <xPortStartScheduler+0x28>)
   81030:	681a      	ldr	r2, [r3, #0]
   81032:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
   81036:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
   81038:	681a      	ldr	r2, [r3, #0]
   8103a:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
   8103e:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
   81040:	4b05      	ldr	r3, [pc, #20]	; (81058 <xPortStartScheduler+0x2c>)
   81042:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   81044:	2400      	movs	r4, #0
   81046:	4b05      	ldr	r3, [pc, #20]	; (8105c <xPortStartScheduler+0x30>)
   81048:	601c      	str	r4, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
   8104a:	4b05      	ldr	r3, [pc, #20]	; (81060 <xPortStartScheduler+0x34>)
   8104c:	4798      	blx	r3

	/* Should not get here! */
	return 0;
}
   8104e:	4620      	mov	r0, r4
   81050:	bd10      	pop	{r4, pc}
   81052:	bf00      	nop
   81054:	e000ed20 	.word	0xe000ed20
   81058:	00081015 	.word	0x00081015
   8105c:	200701fc 	.word	0x200701fc
   81060:	00080f01 	.word	0x00080f01

00081064 <prvInsertBlockIntoFreeList>:
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
   81064:	b430      	push	{r4, r5}
xBlockLink *pxIterator;
unsigned char *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
   81066:	4a13      	ldr	r2, [pc, #76]	; (810b4 <prvInsertBlockIntoFreeList+0x50>)
   81068:	6813      	ldr	r3, [r2, #0]
   8106a:	4283      	cmp	r3, r0
   8106c:	d201      	bcs.n	81072 <prvInsertBlockIntoFreeList+0xe>
   8106e:	461a      	mov	r2, r3
   81070:	e7fa      	b.n	81068 <prvInsertBlockIntoFreeList+0x4>
   81072:	4611      	mov	r1, r2
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */	
	puc = ( unsigned char * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
   81074:	6854      	ldr	r4, [r2, #4]
   81076:	1915      	adds	r5, r2, r4
   81078:	4285      	cmp	r5, r0
   8107a:	d103      	bne.n	81084 <prvInsertBlockIntoFreeList+0x20>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
   8107c:	6868      	ldr	r0, [r5, #4]
   8107e:	4404      	add	r4, r0
   81080:	6054      	str	r4, [r2, #4]
   81082:	4610      	mov	r0, r2
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( unsigned char * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
   81084:	6842      	ldr	r2, [r0, #4]
   81086:	1884      	adds	r4, r0, r2
   81088:	42a3      	cmp	r3, r4
   8108a:	d10c      	bne.n	810a6 <prvInsertBlockIntoFreeList+0x42>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
   8108c:	4c0a      	ldr	r4, [pc, #40]	; (810b8 <prvInsertBlockIntoFreeList+0x54>)
   8108e:	6824      	ldr	r4, [r4, #0]
   81090:	429c      	cmp	r4, r3
   81092:	d006      	beq.n	810a2 <prvInsertBlockIntoFreeList+0x3e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
   81094:	685b      	ldr	r3, [r3, #4]
   81096:	441a      	add	r2, r3
   81098:	6042      	str	r2, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
   8109a:	680b      	ldr	r3, [r1, #0]
   8109c:	681b      	ldr	r3, [r3, #0]
   8109e:	6003      	str	r3, [r0, #0]
   810a0:	e002      	b.n	810a8 <prvInsertBlockIntoFreeList+0x44>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
   810a2:	6003      	str	r3, [r0, #0]
   810a4:	e000      	b.n	810a8 <prvInsertBlockIntoFreeList+0x44>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;		
   810a6:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
   810a8:	4281      	cmp	r1, r0
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
   810aa:	bf18      	it	ne
   810ac:	6008      	strne	r0, [r1, #0]
	}
}
   810ae:	bc30      	pop	{r4, r5}
   810b0:	4770      	bx	lr
   810b2:	bf00      	nop
   810b4:	2007ab6c 	.word	0x2007ab6c
   810b8:	2007ab68 	.word	0x2007ab68

000810bc <pvPortMalloc>:
/* STATIC FUNCTIONS ARE DEFINED AS MACROS TO MINIMIZE THE FUNCTION CALL DEPTH. */

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   810bc:	b538      	push	{r3, r4, r5, lr}
   810be:	4604      	mov	r4, r0
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
   810c0:	4b28      	ldr	r3, [pc, #160]	; (81164 <pvPortMalloc+0xa8>)
   810c2:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
   810c4:	4b28      	ldr	r3, [pc, #160]	; (81168 <pvPortMalloc+0xac>)
   810c6:	681b      	ldr	r3, [r3, #0]
   810c8:	b99b      	cbnz	r3, 810f2 <pvPortMalloc+0x36>
	/* Ensure the start of the heap is aligned. */
	configASSERT( ( ( ( unsigned long ) xHeap.ucHeap ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;
   810ca:	4a28      	ldr	r2, [pc, #160]	; (8116c <pvPortMalloc+0xb0>)
   810cc:	4b28      	ldr	r3, [pc, #160]	; (81170 <pvPortMalloc+0xb4>)
   810ce:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
   810d0:	2100      	movs	r1, #0
   810d2:	6051      	str	r1, [r2, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	pucHeapEnd = xHeap.ucHeap + xTotalHeapSize;
	pucHeapEnd -= heapSTRUCT_SIZE;
	pxEnd = ( void * ) pucHeapEnd;
   810d4:	f649 72f0 	movw	r2, #40944	; 0x9ff0
   810d8:	1898      	adds	r0, r3, r2
   810da:	4d23      	ldr	r5, [pc, #140]	; (81168 <pvPortMalloc+0xac>)
   810dc:	6028      	str	r0, [r5, #0]
	configASSERT( ( ( ( unsigned long ) pxEnd ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );
	pxEnd->xBlockSize = 0;
   810de:	f649 75f4 	movw	r5, #40948	; 0x9ff4
   810e2:	5159      	str	r1, [r3, r5]
	pxEnd->pxNextFreeBlock = NULL;
   810e4:	5099      	str	r1, [r3, r2]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) xHeap.ucHeap;
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
   810e6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
   810e8:	6018      	str	r0, [r3, #0]

	/* The heap now contains pxEnd. */
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
   810ea:	4b22      	ldr	r3, [pc, #136]	; (81174 <pvPortMalloc+0xb8>)
   810ec:	681a      	ldr	r2, [r3, #0]
   810ee:	3a10      	subs	r2, #16
   810f0:	601a      	str	r2, [r3, #0]
			prvHeapInit();
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
   810f2:	2c00      	cmp	r4, #0
   810f4:	d02d      	beq.n	81152 <pvPortMalloc+0x96>
		{
			xWantedSize += heapSTRUCT_SIZE;
   810f6:	f104 0210 	add.w	r2, r4, #16

			/* Ensure that blocks are always aligned to the required number of 
			bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   810fa:	f012 0f07 	tst.w	r2, #7
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   810fe:	bf1c      	itt	ne
   81100:	f022 0207 	bicne.w	r2, r2, #7
   81104:	3208      	addne	r2, #8
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < xTotalHeapSize ) )
   81106:	1e51      	subs	r1, r2, #1
   81108:	f649 73fe 	movw	r3, #40958	; 0x9ffe
   8110c:	4299      	cmp	r1, r3
   8110e:	d822      	bhi.n	81156 <pvPortMalloc+0x9a>
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
   81110:	4916      	ldr	r1, [pc, #88]	; (8116c <pvPortMalloc+0xb0>)
   81112:	680c      	ldr	r4, [r1, #0]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   81114:	6863      	ldr	r3, [r4, #4]
   81116:	429a      	cmp	r2, r3
   81118:	d904      	bls.n	81124 <pvPortMalloc+0x68>
   8111a:	6823      	ldr	r3, [r4, #0]
   8111c:	b113      	cbz	r3, 81124 <pvPortMalloc+0x68>
   8111e:	4621      	mov	r1, r4
			{
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
   81120:	461c      	mov	r4, r3
   81122:	e7f7      	b.n	81114 <pvPortMalloc+0x58>
			}

			/* If the end marker was reached then a block of adequate size was
			not found. */
			if( pxBlock != pxEnd )
   81124:	4b10      	ldr	r3, [pc, #64]	; (81168 <pvPortMalloc+0xac>)
   81126:	681b      	ldr	r3, [r3, #0]
   81128:	429c      	cmp	r4, r3
   8112a:	d016      	beq.n	8115a <pvPortMalloc+0x9e>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
   8112c:	680d      	ldr	r5, [r1, #0]
   8112e:	3510      	adds	r5, #16

				/* This block is being returned for use so must be taken out of
				the	list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
   81130:	6823      	ldr	r3, [r4, #0]
   81132:	600b      	str	r3, [r1, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
   81134:	6863      	ldr	r3, [r4, #4]
   81136:	1a9b      	subs	r3, r3, r2
   81138:	2b20      	cmp	r3, #32
   8113a:	d904      	bls.n	81146 <pvPortMalloc+0x8a>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
   8113c:	18a0      	adds	r0, r4, r2

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
   8113e:	6043      	str	r3, [r0, #4]
					pxBlock->xBlockSize = xWantedSize;
   81140:	6062      	str	r2, [r4, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
   81142:	4b0d      	ldr	r3, [pc, #52]	; (81178 <pvPortMalloc+0xbc>)
   81144:	4798      	blx	r3
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
   81146:	4b0b      	ldr	r3, [pc, #44]	; (81174 <pvPortMalloc+0xb8>)
   81148:	681a      	ldr	r2, [r3, #0]
   8114a:	6861      	ldr	r1, [r4, #4]
   8114c:	1a52      	subs	r2, r2, r1
   8114e:	601a      	str	r2, [r3, #0]
   81150:	e004      	b.n	8115c <pvPortMalloc+0xa0>
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
   81152:	2500      	movs	r5, #0
   81154:	e002      	b.n	8115c <pvPortMalloc+0xa0>
   81156:	2500      	movs	r5, #0
   81158:	e000      	b.n	8115c <pvPortMalloc+0xa0>
   8115a:	2500      	movs	r5, #0

				xFreeBytesRemaining -= pxBlock->xBlockSize;
			}
		}
	}
	xTaskResumeAll();
   8115c:	4b07      	ldr	r3, [pc, #28]	; (8117c <pvPortMalloc+0xc0>)
   8115e:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
}
   81160:	4628      	mov	r0, r5
   81162:	bd38      	pop	{r3, r4, r5, pc}
   81164:	000819bd 	.word	0x000819bd
   81168:	2007ab68 	.word	0x2007ab68
   8116c:	2007ab6c 	.word	0x2007ab6c
   81170:	20070b68 	.word	0x20070b68
   81174:	20070200 	.word	0x20070200
   81178:	00081065 	.word	0x00081065
   8117c:	00081b0d 	.word	0x00081b0d

00081180 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   81180:	b510      	push	{r4, lr}
unsigned char *puc = ( unsigned char * ) pv;
xBlockLink *pxLink;

	if( pv != NULL )
   81182:	4604      	mov	r4, r0
   81184:	b168      	cbz	r0, 811a2 <vPortFree+0x22>
		puc -= heapSTRUCT_SIZE;

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		vTaskSuspendAll();
   81186:	4b07      	ldr	r3, [pc, #28]	; (811a4 <vPortFree+0x24>)
   81188:	4798      	blx	r3
		{
			/* Add this block to the list of free blocks. */
			xFreeBytesRemaining += pxLink->xBlockSize;
   8118a:	4b07      	ldr	r3, [pc, #28]	; (811a8 <vPortFree+0x28>)
   8118c:	6819      	ldr	r1, [r3, #0]
   8118e:	f854 2c0c 	ldr.w	r2, [r4, #-12]
   81192:	440a      	add	r2, r1
   81194:	601a      	str	r2, [r3, #0]
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );			
   81196:	f1a4 0010 	sub.w	r0, r4, #16
   8119a:	4b04      	ldr	r3, [pc, #16]	; (811ac <vPortFree+0x2c>)
   8119c:	4798      	blx	r3
		}
		xTaskResumeAll();
   8119e:	4b04      	ldr	r3, [pc, #16]	; (811b0 <vPortFree+0x30>)
   811a0:	4798      	blx	r3
   811a2:	bd10      	pop	{r4, pc}
   811a4:	000819bd 	.word	0x000819bd
   811a8:	20070200 	.word	0x20070200
   811ac:	00081065 	.word	0x00081065
   811b0:	00081b0d 	.word	0x00081b0d

000811b4 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
   811b4:	b510      	push	{r4, lr}
   811b6:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
   811b8:	6c03      	ldr	r3, [r0, #64]	; 0x40
   811ba:	b93b      	cbnz	r3, 811cc <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   811bc:	6803      	ldr	r3, [r0, #0]
   811be:	bb1b      	cbnz	r3, 81208 <prvCopyDataToQueue+0x54>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   811c0:	6840      	ldr	r0, [r0, #4]
   811c2:	4b13      	ldr	r3, [pc, #76]	; (81210 <prvCopyDataToQueue+0x5c>)
   811c4:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
   811c6:	2300      	movs	r3, #0
   811c8:	6063      	str	r3, [r4, #4]
   811ca:	e01d      	b.n	81208 <prvCopyDataToQueue+0x54>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
   811cc:	b96a      	cbnz	r2, 811ea <prvCopyDataToQueue+0x36>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   811ce:	6880      	ldr	r0, [r0, #8]
   811d0:	461a      	mov	r2, r3
   811d2:	4b10      	ldr	r3, [pc, #64]	; (81214 <prvCopyDataToQueue+0x60>)
   811d4:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   811d6:	68a2      	ldr	r2, [r4, #8]
   811d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
   811da:	4413      	add	r3, r2
   811dc:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
   811de:	6862      	ldr	r2, [r4, #4]
   811e0:	4293      	cmp	r3, r2
   811e2:	d311      	bcc.n	81208 <prvCopyDataToQueue+0x54>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   811e4:	6823      	ldr	r3, [r4, #0]
   811e6:	60a3      	str	r3, [r4, #8]
   811e8:	e00e      	b.n	81208 <prvCopyDataToQueue+0x54>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   811ea:	68c0      	ldr	r0, [r0, #12]
   811ec:	461a      	mov	r2, r3
   811ee:	4b09      	ldr	r3, [pc, #36]	; (81214 <prvCopyDataToQueue+0x60>)
   811f0:	4798      	blx	r3
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
   811f2:	6c22      	ldr	r2, [r4, #64]	; 0x40
   811f4:	4252      	negs	r2, r2
   811f6:	68e3      	ldr	r3, [r4, #12]
   811f8:	4413      	add	r3, r2
   811fa:	60e3      	str	r3, [r4, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
   811fc:	6821      	ldr	r1, [r4, #0]
   811fe:	428b      	cmp	r3, r1
   81200:	d202      	bcs.n	81208 <prvCopyDataToQueue+0x54>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   81202:	6863      	ldr	r3, [r4, #4]
   81204:	441a      	add	r2, r3
   81206:	60e2      	str	r2, [r4, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
   81208:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   8120a:	3301      	adds	r3, #1
   8120c:	63a3      	str	r3, [r4, #56]	; 0x38
   8120e:	bd10      	pop	{r4, pc}
   81210:	00081ff9 	.word	0x00081ff9
   81214:	00084091 	.word	0x00084091

00081218 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
   81218:	b538      	push	{r3, r4, r5, lr}
   8121a:	4603      	mov	r3, r0
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
   8121c:	6805      	ldr	r5, [r0, #0]
   8121e:	b15d      	cbz	r5, 81238 <prvCopyDataFromQueue+0x20>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
   81220:	6c02      	ldr	r2, [r0, #64]	; 0x40
   81222:	68c4      	ldr	r4, [r0, #12]
   81224:	4414      	add	r4, r2
   81226:	60c4      	str	r4, [r0, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
   81228:	6840      	ldr	r0, [r0, #4]
   8122a:	4284      	cmp	r4, r0
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
   8122c:	bf28      	it	cs
   8122e:	60dd      	strcs	r5, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
   81230:	4608      	mov	r0, r1
   81232:	68d9      	ldr	r1, [r3, #12]
   81234:	4b01      	ldr	r3, [pc, #4]	; (8123c <prvCopyDataFromQueue+0x24>)
   81236:	4798      	blx	r3
   81238:	bd38      	pop	{r3, r4, r5, pc}
   8123a:	bf00      	nop
   8123c:	00084091 	.word	0x00084091

00081240 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
   81240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81242:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   81244:	4b1d      	ldr	r3, [pc, #116]	; (812bc <prvUnlockQueue+0x7c>)
   81246:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   81248:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   8124a:	2b00      	cmp	r3, #0
   8124c:	dd12      	ble.n	81274 <prvUnlockQueue+0x34>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   8124e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   81250:	b183      	cbz	r3, 81274 <prvUnlockQueue+0x34>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   81252:	f104 0624 	add.w	r6, r4, #36	; 0x24
   81256:	4d1a      	ldr	r5, [pc, #104]	; (812c0 <prvUnlockQueue+0x80>)
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   81258:	4f1a      	ldr	r7, [pc, #104]	; (812c4 <prvUnlockQueue+0x84>)
   8125a:	e001      	b.n	81260 <prvUnlockQueue+0x20>
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   8125c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   8125e:	b14b      	cbz	r3, 81274 <prvUnlockQueue+0x34>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   81260:	4630      	mov	r0, r6
   81262:	47a8      	blx	r5
   81264:	b100      	cbz	r0, 81268 <prvUnlockQueue+0x28>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   81266:	47b8      	blx	r7
				}

				--( pxQueue->xTxLock );
   81268:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   8126a:	3b01      	subs	r3, #1
   8126c:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   8126e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   81270:	2b00      	cmp	r3, #0
   81272:	dcf3      	bgt.n	8125c <prvUnlockQueue+0x1c>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
   81274:	f04f 33ff 	mov.w	r3, #4294967295
   81278:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
   8127a:	4b13      	ldr	r3, [pc, #76]	; (812c8 <prvUnlockQueue+0x88>)
   8127c:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   8127e:	4b0f      	ldr	r3, [pc, #60]	; (812bc <prvUnlockQueue+0x7c>)
   81280:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   81282:	6c63      	ldr	r3, [r4, #68]	; 0x44
   81284:	2b00      	cmp	r3, #0
   81286:	dd12      	ble.n	812ae <prvUnlockQueue+0x6e>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   81288:	6923      	ldr	r3, [r4, #16]
   8128a:	b183      	cbz	r3, 812ae <prvUnlockQueue+0x6e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   8128c:	f104 0610 	add.w	r6, r4, #16
   81290:	4d0b      	ldr	r5, [pc, #44]	; (812c0 <prvUnlockQueue+0x80>)
				{
					vTaskMissedYield();
   81292:	4f0c      	ldr	r7, [pc, #48]	; (812c4 <prvUnlockQueue+0x84>)
   81294:	e001      	b.n	8129a <prvUnlockQueue+0x5a>
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   81296:	6923      	ldr	r3, [r4, #16]
   81298:	b14b      	cbz	r3, 812ae <prvUnlockQueue+0x6e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   8129a:	4630      	mov	r0, r6
   8129c:	47a8      	blx	r5
   8129e:	b100      	cbz	r0, 812a2 <prvUnlockQueue+0x62>
				{
					vTaskMissedYield();
   812a0:	47b8      	blx	r7
				}

				--( pxQueue->xRxLock );
   812a2:	6c63      	ldr	r3, [r4, #68]	; 0x44
   812a4:	3b01      	subs	r3, #1
   812a6:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   812a8:	6c63      	ldr	r3, [r4, #68]	; 0x44
   812aa:	2b00      	cmp	r3, #0
   812ac:	dcf3      	bgt.n	81296 <prvUnlockQueue+0x56>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
   812ae:	f04f 33ff 	mov.w	r3, #4294967295
   812b2:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
   812b4:	4b04      	ldr	r3, [pc, #16]	; (812c8 <prvUnlockQueue+0x88>)
   812b6:	4798      	blx	r3
   812b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   812ba:	bf00      	nop
   812bc:	00080f71 	.word	0x00080f71
   812c0:	00081e15 	.word	0x00081e15
   812c4:	00081f45 	.word	0x00081f45
   812c8:	00080f91 	.word	0x00080f91

000812cc <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
   812cc:	b538      	push	{r3, r4, r5, lr}
   812ce:	460d      	mov	r5, r1
	configASSERT( pxQueue );
   812d0:	4604      	mov	r4, r0
   812d2:	b918      	cbnz	r0, 812dc <xQueueGenericReset+0x10>
   812d4:	4b16      	ldr	r3, [pc, #88]	; (81330 <xQueueGenericReset+0x64>)
   812d6:	4798      	blx	r3
   812d8:	bf00      	nop
   812da:	e7fd      	b.n	812d8 <xQueueGenericReset+0xc>

	taskENTER_CRITICAL();
   812dc:	4b15      	ldr	r3, [pc, #84]	; (81334 <xQueueGenericReset+0x68>)
   812de:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   812e0:	6823      	ldr	r3, [r4, #0]
   812e2:	6c22      	ldr	r2, [r4, #64]	; 0x40
   812e4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   812e6:	fb00 f002 	mul.w	r0, r0, r2
   812ea:	1819      	adds	r1, r3, r0
   812ec:	6061      	str	r1, [r4, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
   812ee:	2100      	movs	r1, #0
   812f0:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   812f2:	60a3      	str	r3, [r4, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
   812f4:	1a82      	subs	r2, r0, r2
   812f6:	4413      	add	r3, r2
   812f8:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
   812fa:	f04f 33ff 	mov.w	r3, #4294967295
   812fe:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
   81300:	64a3      	str	r3, [r4, #72]	; 0x48

		if( xNewQueue == pdFALSE )
   81302:	b955      	cbnz	r5, 8131a <xQueueGenericReset+0x4e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to	write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   81304:	6923      	ldr	r3, [r4, #16]
   81306:	b17b      	cbz	r3, 81328 <xQueueGenericReset+0x5c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   81308:	f104 0010 	add.w	r0, r4, #16
   8130c:	4b0a      	ldr	r3, [pc, #40]	; (81338 <xQueueGenericReset+0x6c>)
   8130e:	4798      	blx	r3
   81310:	2801      	cmp	r0, #1
   81312:	d109      	bne.n	81328 <xQueueGenericReset+0x5c>
				{
					portYIELD_WITHIN_API();
   81314:	4b09      	ldr	r3, [pc, #36]	; (8133c <xQueueGenericReset+0x70>)
   81316:	4798      	blx	r3
   81318:	e006      	b.n	81328 <xQueueGenericReset+0x5c>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   8131a:	f104 0010 	add.w	r0, r4, #16
   8131e:	4d08      	ldr	r5, [pc, #32]	; (81340 <xQueueGenericReset+0x74>)
   81320:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   81322:	f104 0024 	add.w	r0, r4, #36	; 0x24
   81326:	47a8      	blx	r5
		}
	}
	taskEXIT_CRITICAL();
   81328:	4b06      	ldr	r3, [pc, #24]	; (81344 <xQueueGenericReset+0x78>)
   8132a:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
   8132c:	2001      	movs	r0, #1
   8132e:	bd38      	pop	{r3, r4, r5, pc}
   81330:	00080f61 	.word	0x00080f61
   81334:	00080f71 	.word	0x00080f71
   81338:	00081e15 	.word	0x00081e15
   8133c:	00080f51 	.word	0x00080f51
   81340:	00080e61 	.word	0x00080e61
   81344:	00080f91 	.word	0x00080f91

00081348 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
   81348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8134a:	460d      	mov	r5, r1
   8134c:	4617      	mov	r7, r2
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
   8134e:	4606      	mov	r6, r0
   81350:	b188      	cbz	r0, 81376 <xQueueGenericCreate+0x2e>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
   81352:	2050      	movs	r0, #80	; 0x50
   81354:	4b0e      	ldr	r3, [pc, #56]	; (81390 <xQueueGenericCreate+0x48>)
   81356:	4798      	blx	r3
		if( pxNewQueue != NULL )
   81358:	4604      	mov	r4, r0
   8135a:	b160      	cbz	r0, 81376 <xQueueGenericCreate+0x2e>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
   8135c:	fb05 f006 	mul.w	r0, r5, r6

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
   81360:	3001      	adds	r0, #1
   81362:	4b0b      	ldr	r3, [pc, #44]	; (81390 <xQueueGenericCreate+0x48>)
   81364:	4798      	blx	r3
   81366:	6020      	str	r0, [r4, #0]
			if( pxNewQueue->pcHead != NULL )
   81368:	b940      	cbnz	r0, 8137c <xQueueGenericCreate+0x34>
				xReturn = pxNewQueue;
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
   8136a:	4620      	mov	r0, r4
   8136c:	4b09      	ldr	r3, [pc, #36]	; (81394 <xQueueGenericCreate+0x4c>)
   8136e:	4798      	blx	r3
   81370:	e001      	b.n	81376 <xQueueGenericCreate+0x2e>
			}
		}
	}

	configASSERT( xReturn );
   81372:	bf00      	nop
   81374:	e7fd      	b.n	81372 <xQueueGenericCreate+0x2a>
   81376:	4b08      	ldr	r3, [pc, #32]	; (81398 <xQueueGenericCreate+0x50>)
   81378:	4798      	blx	r3
   8137a:	e7fa      	b.n	81372 <xQueueGenericCreate+0x2a>
			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
			if( pxNewQueue->pcHead != NULL )
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
   8137c:	63e6      	str	r6, [r4, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
   8137e:	6425      	str	r5, [r4, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
   81380:	4620      	mov	r0, r4
   81382:	2101      	movs	r1, #1
   81384:	4b05      	ldr	r3, [pc, #20]	; (8139c <xQueueGenericCreate+0x54>)
   81386:	4798      	blx	r3
				#if ( configUSE_TRACE_FACILITY == 1 )
				{
					pxNewQueue->ucQueueType = ucQueueType;
   81388:	f884 704d 	strb.w	r7, [r4, #77]	; 0x4d
	}

	configASSERT( xReturn );

	return xReturn;
}
   8138c:	4620      	mov	r0, r4
   8138e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81390:	000810bd 	.word	0x000810bd
   81394:	00081181 	.word	0x00081181
   81398:	00080f61 	.word	0x00080f61
   8139c:	000812cd 	.word	0x000812cd

000813a0 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
   813a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   813a4:	b085      	sub	sp, #20
   813a6:	468a      	mov	sl, r1
   813a8:	9201      	str	r2, [sp, #4]
   813aa:	469b      	mov	fp, r3
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;

	configASSERT( pxQueue );
   813ac:	4604      	mov	r4, r0
   813ae:	b918      	cbnz	r0, 813b8 <xQueueGenericSend+0x18>
   813b0:	4b36      	ldr	r3, [pc, #216]	; (8148c <xQueueGenericSend+0xec>)
   813b2:	4798      	blx	r3
   813b4:	bf00      	nop
   813b6:	e7fd      	b.n	813b4 <xQueueGenericSend+0x14>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   813b8:	b909      	cbnz	r1, 813be <xQueueGenericSend+0x1e>
   813ba:	6c03      	ldr	r3, [r0, #64]	; 0x40
   813bc:	b91b      	cbnz	r3, 813c6 <xQueueGenericSend+0x26>

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
   813be:	2700      	movs	r7, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   813c0:	4e33      	ldr	r6, [pc, #204]	; (81490 <xQueueGenericSend+0xf0>)
					vTaskSetTimeOutState( &xTimeOut );
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
   813c2:	4d34      	ldr	r5, [pc, #208]	; (81494 <xQueueGenericSend+0xf4>)
   813c4:	e003      	b.n	813ce <xQueueGenericSend+0x2e>
{
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;

	configASSERT( pxQueue );
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   813c6:	4b31      	ldr	r3, [pc, #196]	; (8148c <xQueueGenericSend+0xec>)
   813c8:	4798      	blx	r3
   813ca:	bf00      	nop
   813cc:	e7fd      	b.n	813ca <xQueueGenericSend+0x2a>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   813ce:	47b0      	blx	r6
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   813d0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   813d2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   813d4:	429a      	cmp	r2, r3
   813d6:	d212      	bcs.n	813fe <xQueueGenericSend+0x5e>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   813d8:	4620      	mov	r0, r4
   813da:	4651      	mov	r1, sl
   813dc:	465a      	mov	r2, fp
   813de:	4b2e      	ldr	r3, [pc, #184]	; (81498 <xQueueGenericSend+0xf8>)
   813e0:	4798      	blx	r3

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   813e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   813e4:	b13b      	cbz	r3, 813f6 <xQueueGenericSend+0x56>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
   813e6:	f104 0024 	add.w	r0, r4, #36	; 0x24
   813ea:	4b2c      	ldr	r3, [pc, #176]	; (8149c <xQueueGenericSend+0xfc>)
   813ec:	4798      	blx	r3
   813ee:	2801      	cmp	r0, #1
   813f0:	d101      	bne.n	813f6 <xQueueGenericSend+0x56>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
   813f2:	4b2b      	ldr	r3, [pc, #172]	; (814a0 <xQueueGenericSend+0x100>)
   813f4:	4798      	blx	r3
					}
				}

				taskEXIT_CRITICAL();
   813f6:	4b27      	ldr	r3, [pc, #156]	; (81494 <xQueueGenericSend+0xf4>)
   813f8:	4798      	blx	r3

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
   813fa:	2001      	movs	r0, #1
   813fc:	e043      	b.n	81486 <xQueueGenericSend+0xe6>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   813fe:	9b01      	ldr	r3, [sp, #4]
   81400:	b91b      	cbnz	r3, 8140a <xQueueGenericSend+0x6a>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   81402:	4b24      	ldr	r3, [pc, #144]	; (81494 <xQueueGenericSend+0xf4>)
   81404:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
   81406:	2000      	movs	r0, #0
   81408:	e03d      	b.n	81486 <xQueueGenericSend+0xe6>
				}
				else if( xEntryTimeSet == pdFALSE )
   8140a:	b91f      	cbnz	r7, 81414 <xQueueGenericSend+0x74>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   8140c:	a802      	add	r0, sp, #8
   8140e:	4b25      	ldr	r3, [pc, #148]	; (814a4 <xQueueGenericSend+0x104>)
   81410:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   81412:	2701      	movs	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
   81414:	47a8      	blx	r5

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   81416:	4b24      	ldr	r3, [pc, #144]	; (814a8 <xQueueGenericSend+0x108>)
   81418:	4798      	blx	r3
		prvLockQueue( pxQueue );
   8141a:	47b0      	blx	r6
   8141c:	6c63      	ldr	r3, [r4, #68]	; 0x44
   8141e:	f1b3 3fff 	cmp.w	r3, #4294967295
   81422:	bf04      	itt	eq
   81424:	2300      	moveq	r3, #0
   81426:	6463      	streq	r3, [r4, #68]	; 0x44
   81428:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   8142a:	f1b3 3fff 	cmp.w	r3, #4294967295
   8142e:	bf04      	itt	eq
   81430:	2300      	moveq	r3, #0
   81432:	64a3      	streq	r3, [r4, #72]	; 0x48
   81434:	47a8      	blx	r5

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   81436:	a802      	add	r0, sp, #8
   81438:	a901      	add	r1, sp, #4
   8143a:	4b1c      	ldr	r3, [pc, #112]	; (814ac <xQueueGenericSend+0x10c>)
   8143c:	4798      	blx	r3
   8143e:	b9e0      	cbnz	r0, 8147a <xQueueGenericSend+0xda>

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   81440:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
   81442:	f8d4 9038 	ldr.w	r9, [r4, #56]	; 0x38
   81446:	f8d4 803c 	ldr.w	r8, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
   8144a:	47a8      	blx	r5
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   8144c:	45c1      	cmp	r9, r8
   8144e:	d10e      	bne.n	8146e <xQueueGenericSend+0xce>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   81450:	f104 0010 	add.w	r0, r4, #16
   81454:	9901      	ldr	r1, [sp, #4]
   81456:	4b16      	ldr	r3, [pc, #88]	; (814b0 <xQueueGenericSend+0x110>)
   81458:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   8145a:	4620      	mov	r0, r4
   8145c:	4b15      	ldr	r3, [pc, #84]	; (814b4 <xQueueGenericSend+0x114>)
   8145e:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   81460:	4b15      	ldr	r3, [pc, #84]	; (814b8 <xQueueGenericSend+0x118>)
   81462:	4798      	blx	r3
   81464:	2800      	cmp	r0, #0
   81466:	d1b2      	bne.n	813ce <xQueueGenericSend+0x2e>
				{
					portYIELD_WITHIN_API();
   81468:	4b0d      	ldr	r3, [pc, #52]	; (814a0 <xQueueGenericSend+0x100>)
   8146a:	4798      	blx	r3
   8146c:	e7af      	b.n	813ce <xQueueGenericSend+0x2e>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   8146e:	4620      	mov	r0, r4
   81470:	4b10      	ldr	r3, [pc, #64]	; (814b4 <xQueueGenericSend+0x114>)
   81472:	4798      	blx	r3
				( void ) xTaskResumeAll();
   81474:	4b10      	ldr	r3, [pc, #64]	; (814b8 <xQueueGenericSend+0x118>)
   81476:	4798      	blx	r3
   81478:	e7a9      	b.n	813ce <xQueueGenericSend+0x2e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   8147a:	4620      	mov	r0, r4
   8147c:	4b0d      	ldr	r3, [pc, #52]	; (814b4 <xQueueGenericSend+0x114>)
   8147e:	4798      	blx	r3
			( void ) xTaskResumeAll();
   81480:	4b0d      	ldr	r3, [pc, #52]	; (814b8 <xQueueGenericSend+0x118>)
   81482:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
   81484:	2000      	movs	r0, #0
		}
	}
}
   81486:	b005      	add	sp, #20
   81488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8148c:	00080f61 	.word	0x00080f61
   81490:	00080f71 	.word	0x00080f71
   81494:	00080f91 	.word	0x00080f91
   81498:	000811b5 	.word	0x000811b5
   8149c:	00081e15 	.word	0x00081e15
   814a0:	00080f51 	.word	0x00080f51
   814a4:	00081e99 	.word	0x00081e99
   814a8:	000819bd 	.word	0x000819bd
   814ac:	00081ec1 	.word	0x00081ec1
   814b0:	00081d71 	.word	0x00081d71
   814b4:	00081241 	.word	0x00081241
   814b8:	00081b0d 	.word	0x00081b0d

000814bc <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
   814bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   814c0:	460e      	mov	r6, r1
   814c2:	4615      	mov	r5, r2
   814c4:	4698      	mov	r8, r3
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	configASSERT( pxQueue );
   814c6:	4604      	mov	r4, r0
   814c8:	b918      	cbnz	r0, 814d2 <xQueueGenericSendFromISR+0x16>
   814ca:	4b1c      	ldr	r3, [pc, #112]	; (8153c <xQueueGenericSendFromISR+0x80>)
   814cc:	4798      	blx	r3
   814ce:	bf00      	nop
   814d0:	e7fd      	b.n	814ce <xQueueGenericSendFromISR+0x12>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   814d2:	b929      	cbnz	r1, 814e0 <xQueueGenericSendFromISR+0x24>
   814d4:	6c03      	ldr	r3, [r0, #64]	; 0x40
   814d6:	b11b      	cbz	r3, 814e0 <xQueueGenericSendFromISR+0x24>
   814d8:	4b18      	ldr	r3, [pc, #96]	; (8153c <xQueueGenericSendFromISR+0x80>)
   814da:	4798      	blx	r3
   814dc:	bf00      	nop
   814de:	e7fd      	b.n	814dc <xQueueGenericSendFromISR+0x20>
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   814e0:	4b16      	ldr	r3, [pc, #88]	; (8153c <xQueueGenericSendFromISR+0x80>)
   814e2:	4798      	blx	r3
   814e4:	4607      	mov	r7, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   814e6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   814e8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   814ea:	429a      	cmp	r2, r3
   814ec:	d218      	bcs.n	81520 <xQueueGenericSendFromISR+0x64>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   814ee:	4620      	mov	r0, r4
   814f0:	4631      	mov	r1, r6
   814f2:	4642      	mov	r2, r8
   814f4:	4b12      	ldr	r3, [pc, #72]	; (81540 <xQueueGenericSendFromISR+0x84>)
   814f6:	4798      	blx	r3

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
   814f8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   814fa:	f1b3 3fff 	cmp.w	r3, #4294967295
   814fe:	d10a      	bne.n	81516 <xQueueGenericSendFromISR+0x5a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   81500:	6a63      	ldr	r3, [r4, #36]	; 0x24
   81502:	b17b      	cbz	r3, 81524 <xQueueGenericSendFromISR+0x68>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   81504:	f104 0024 	add.w	r0, r4, #36	; 0x24
   81508:	4b0e      	ldr	r3, [pc, #56]	; (81544 <xQueueGenericSendFromISR+0x88>)
   8150a:	4798      	blx	r3
   8150c:	b160      	cbz	r0, 81528 <xQueueGenericSendFromISR+0x6c>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						if( pxHigherPriorityTaskWoken != NULL )
   8150e:	b16d      	cbz	r5, 8152c <xQueueGenericSendFromISR+0x70>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
   81510:	2401      	movs	r4, #1
   81512:	602c      	str	r4, [r5, #0]
   81514:	e00b      	b.n	8152e <xQueueGenericSendFromISR+0x72>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
   81516:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   81518:	3301      	adds	r3, #1
   8151a:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
   8151c:	2401      	movs	r4, #1
   8151e:	e006      	b.n	8152e <xQueueGenericSendFromISR+0x72>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
   81520:	2400      	movs	r4, #0
   81522:	e004      	b.n	8152e <xQueueGenericSendFromISR+0x72>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
   81524:	2401      	movs	r4, #1
   81526:	e002      	b.n	8152e <xQueueGenericSendFromISR+0x72>
   81528:	2401      	movs	r4, #1
   8152a:	e000      	b.n	8152e <xQueueGenericSendFromISR+0x72>
   8152c:	2401      	movs	r4, #1
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   8152e:	4638      	mov	r0, r7
   81530:	4b05      	ldr	r3, [pc, #20]	; (81548 <xQueueGenericSendFromISR+0x8c>)
   81532:	4798      	blx	r3

	return xReturn;
}
   81534:	4620      	mov	r0, r4
   81536:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8153a:	bf00      	nop
   8153c:	00080f61 	.word	0x00080f61
   81540:	000811b5 	.word	0x000811b5
   81544:	00081e15 	.word	0x00081e15
   81548:	00080f89 	.word	0x00080f89

0008154c <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
   8154c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81550:	b085      	sub	sp, #20
   81552:	4689      	mov	r9, r1
   81554:	9201      	str	r2, [sp, #4]
   81556:	469a      	mov	sl, r3
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;

	configASSERT( pxQueue );
   81558:	4604      	mov	r4, r0
   8155a:	b918      	cbnz	r0, 81564 <xQueueGenericReceive+0x18>
   8155c:	4b44      	ldr	r3, [pc, #272]	; (81670 <xQueueGenericReceive+0x124>)
   8155e:	4798      	blx	r3
   81560:	bf00      	nop
   81562:	e7fd      	b.n	81560 <xQueueGenericReceive+0x14>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   81564:	b909      	cbnz	r1, 8156a <xQueueGenericReceive+0x1e>
   81566:	6c03      	ldr	r3, [r0, #64]	; 0x40
   81568:	b92b      	cbnz	r3, 81576 <xQueueGenericReceive+0x2a>
	return xReturn;
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
   8156a:	2700      	movs	r7, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   8156c:	4e41      	ldr	r6, [pc, #260]	; (81674 <xQueueGenericReceive+0x128>)
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   8156e:	f8df b134 	ldr.w	fp, [pc, #308]	; 816a4 <xQueueGenericReceive+0x158>
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
   81572:	4d41      	ldr	r5, [pc, #260]	; (81678 <xQueueGenericReceive+0x12c>)
   81574:	e003      	b.n	8157e <xQueueGenericReceive+0x32>
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;

	configASSERT( pxQueue );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   81576:	4b3e      	ldr	r3, [pc, #248]	; (81670 <xQueueGenericReceive+0x124>)
   81578:	4798      	blx	r3
   8157a:	bf00      	nop
   8157c:	e7fd      	b.n	8157a <xQueueGenericReceive+0x2e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   8157e:	47b0      	blx	r6
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
   81580:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   81582:	2b00      	cmp	r3, #0
   81584:	d028      	beq.n	815d8 <xQueueGenericReceive+0x8c>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
   81586:	68e5      	ldr	r5, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
   81588:	4620      	mov	r0, r4
   8158a:	4649      	mov	r1, r9
   8158c:	4b3b      	ldr	r3, [pc, #236]	; (8167c <xQueueGenericReceive+0x130>)
   8158e:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
   81590:	f1ba 0f00 	cmp.w	sl, #0
   81594:	d112      	bne.n	815bc <xQueueGenericReceive+0x70>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
   81596:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   81598:	3b01      	subs	r3, #1
   8159a:	63a3      	str	r3, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   8159c:	6823      	ldr	r3, [r4, #0]
   8159e:	b913      	cbnz	r3, 815a6 <xQueueGenericReceive+0x5a>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
   815a0:	4b37      	ldr	r3, [pc, #220]	; (81680 <xQueueGenericReceive+0x134>)
   815a2:	4798      	blx	r3
   815a4:	6060      	str	r0, [r4, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   815a6:	6923      	ldr	r3, [r4, #16]
   815a8:	b193      	cbz	r3, 815d0 <xQueueGenericReceive+0x84>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   815aa:	f104 0010 	add.w	r0, r4, #16
   815ae:	4b35      	ldr	r3, [pc, #212]	; (81684 <xQueueGenericReceive+0x138>)
   815b0:	4798      	blx	r3
   815b2:	2801      	cmp	r0, #1
   815b4:	d10c      	bne.n	815d0 <xQueueGenericReceive+0x84>
						{
							portYIELD_WITHIN_API();
   815b6:	4b34      	ldr	r3, [pc, #208]	; (81688 <xQueueGenericReceive+0x13c>)
   815b8:	4798      	blx	r3
   815ba:	e009      	b.n	815d0 <xQueueGenericReceive+0x84>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
   815bc:	60e5      	str	r5, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   815be:	6a63      	ldr	r3, [r4, #36]	; 0x24
   815c0:	b133      	cbz	r3, 815d0 <xQueueGenericReceive+0x84>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   815c2:	f104 0024 	add.w	r0, r4, #36	; 0x24
   815c6:	4b2f      	ldr	r3, [pc, #188]	; (81684 <xQueueGenericReceive+0x138>)
   815c8:	4798      	blx	r3
   815ca:	b108      	cbz	r0, 815d0 <xQueueGenericReceive+0x84>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
   815cc:	4b2e      	ldr	r3, [pc, #184]	; (81688 <xQueueGenericReceive+0x13c>)
   815ce:	4798      	blx	r3
						}
					}
				}

				taskEXIT_CRITICAL();
   815d0:	4b29      	ldr	r3, [pc, #164]	; (81678 <xQueueGenericReceive+0x12c>)
   815d2:	4798      	blx	r3
				return pdPASS;
   815d4:	2001      	movs	r0, #1
   815d6:	e048      	b.n	8166a <xQueueGenericReceive+0x11e>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   815d8:	9b01      	ldr	r3, [sp, #4]
   815da:	b91b      	cbnz	r3, 815e4 <xQueueGenericReceive+0x98>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   815dc:	4b26      	ldr	r3, [pc, #152]	; (81678 <xQueueGenericReceive+0x12c>)
   815de:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
   815e0:	2000      	movs	r0, #0
   815e2:	e042      	b.n	8166a <xQueueGenericReceive+0x11e>
				}
				else if( xEntryTimeSet == pdFALSE )
   815e4:	b917      	cbnz	r7, 815ec <xQueueGenericReceive+0xa0>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   815e6:	a802      	add	r0, sp, #8
   815e8:	47d8      	blx	fp
					xEntryTimeSet = pdTRUE;
   815ea:	2701      	movs	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
   815ec:	47a8      	blx	r5

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   815ee:	4b27      	ldr	r3, [pc, #156]	; (8168c <xQueueGenericReceive+0x140>)
   815f0:	4798      	blx	r3
		prvLockQueue( pxQueue );
   815f2:	47b0      	blx	r6
   815f4:	6c63      	ldr	r3, [r4, #68]	; 0x44
   815f6:	f1b3 3fff 	cmp.w	r3, #4294967295
   815fa:	bf04      	itt	eq
   815fc:	2300      	moveq	r3, #0
   815fe:	6463      	streq	r3, [r4, #68]	; 0x44
   81600:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   81602:	f1b3 3fff 	cmp.w	r3, #4294967295
   81606:	bf04      	itt	eq
   81608:	2300      	moveq	r3, #0
   8160a:	64a3      	streq	r3, [r4, #72]	; 0x48
   8160c:	47a8      	blx	r5

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   8160e:	a802      	add	r0, sp, #8
   81610:	a901      	add	r1, sp, #4
   81612:	4b1f      	ldr	r3, [pc, #124]	; (81690 <xQueueGenericReceive+0x144>)
   81614:	4798      	blx	r3
   81616:	bb10      	cbnz	r0, 8165e <xQueueGenericReceive+0x112>

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   81618:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
   8161a:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
   8161e:	47a8      	blx	r5
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   81620:	f1b8 0f00 	cmp.w	r8, #0
   81624:	d115      	bne.n	81652 <xQueueGenericReceive+0x106>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   81626:	6823      	ldr	r3, [r4, #0]
   81628:	b923      	cbnz	r3, 81634 <xQueueGenericReceive+0xe8>
					{
						portENTER_CRITICAL();
   8162a:	47b0      	blx	r6
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   8162c:	6860      	ldr	r0, [r4, #4]
   8162e:	4b19      	ldr	r3, [pc, #100]	; (81694 <xQueueGenericReceive+0x148>)
   81630:	4798      	blx	r3
						}
						portEXIT_CRITICAL();
   81632:	47a8      	blx	r5
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   81634:	f104 0024 	add.w	r0, r4, #36	; 0x24
   81638:	9901      	ldr	r1, [sp, #4]
   8163a:	4b17      	ldr	r3, [pc, #92]	; (81698 <xQueueGenericReceive+0x14c>)
   8163c:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   8163e:	4620      	mov	r0, r4
   81640:	4b16      	ldr	r3, [pc, #88]	; (8169c <xQueueGenericReceive+0x150>)
   81642:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   81644:	4b16      	ldr	r3, [pc, #88]	; (816a0 <xQueueGenericReceive+0x154>)
   81646:	4798      	blx	r3
   81648:	2800      	cmp	r0, #0
   8164a:	d198      	bne.n	8157e <xQueueGenericReceive+0x32>
				{
					portYIELD_WITHIN_API();
   8164c:	4b0e      	ldr	r3, [pc, #56]	; (81688 <xQueueGenericReceive+0x13c>)
   8164e:	4798      	blx	r3
   81650:	e795      	b.n	8157e <xQueueGenericReceive+0x32>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   81652:	4620      	mov	r0, r4
   81654:	4b11      	ldr	r3, [pc, #68]	; (8169c <xQueueGenericReceive+0x150>)
   81656:	4798      	blx	r3
				( void ) xTaskResumeAll();
   81658:	4b11      	ldr	r3, [pc, #68]	; (816a0 <xQueueGenericReceive+0x154>)
   8165a:	4798      	blx	r3
   8165c:	e78f      	b.n	8157e <xQueueGenericReceive+0x32>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
   8165e:	4620      	mov	r0, r4
   81660:	4b0e      	ldr	r3, [pc, #56]	; (8169c <xQueueGenericReceive+0x150>)
   81662:	4798      	blx	r3
			( void ) xTaskResumeAll();
   81664:	4b0e      	ldr	r3, [pc, #56]	; (816a0 <xQueueGenericReceive+0x154>)
   81666:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
   81668:	2000      	movs	r0, #0
		}
	}
}
   8166a:	b005      	add	sp, #20
   8166c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81670:	00080f61 	.word	0x00080f61
   81674:	00080f71 	.word	0x00080f71
   81678:	00080f91 	.word	0x00080f91
   8167c:	00081219 	.word	0x00081219
   81680:	00081f51 	.word	0x00081f51
   81684:	00081e15 	.word	0x00081e15
   81688:	00080f51 	.word	0x00080f51
   8168c:	000819bd 	.word	0x000819bd
   81690:	00081ec1 	.word	0x00081ec1
   81694:	00081f7d 	.word	0x00081f7d
   81698:	00081d71 	.word	0x00081d71
   8169c:	00081241 	.word	0x00081241
   816a0:	00081b0d 	.word	0x00081b0d
   816a4:	00081e99 	.word	0x00081e99

000816a8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vQueueWaitForMessageRestricted( xQueueHandle pxQueue, portTickType xTicksToWait )
	{
   816a8:	b538      	push	{r3, r4, r5, lr}
   816aa:	4604      	mov	r4, r0
   816ac:	460d      	mov	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   816ae:	4b0d      	ldr	r3, [pc, #52]	; (816e4 <vQueueWaitForMessageRestricted+0x3c>)
   816b0:	4798      	blx	r3
   816b2:	6c63      	ldr	r3, [r4, #68]	; 0x44
   816b4:	f1b3 3fff 	cmp.w	r3, #4294967295
   816b8:	bf04      	itt	eq
   816ba:	2300      	moveq	r3, #0
   816bc:	6463      	streq	r3, [r4, #68]	; 0x44
   816be:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   816c0:	f1b3 3fff 	cmp.w	r3, #4294967295
   816c4:	bf04      	itt	eq
   816c6:	2300      	moveq	r3, #0
   816c8:	64a3      	streq	r3, [r4, #72]	; 0x48
   816ca:	4b07      	ldr	r3, [pc, #28]	; (816e8 <vQueueWaitForMessageRestricted+0x40>)
   816cc:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
   816ce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   816d0:	b923      	cbnz	r3, 816dc <vQueueWaitForMessageRestricted+0x34>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   816d2:	f104 0024 	add.w	r0, r4, #36	; 0x24
   816d6:	4629      	mov	r1, r5
   816d8:	4b04      	ldr	r3, [pc, #16]	; (816ec <vQueueWaitForMessageRestricted+0x44>)
   816da:	4798      	blx	r3
		}
		prvUnlockQueue( pxQueue );
   816dc:	4620      	mov	r0, r4
   816de:	4b04      	ldr	r3, [pc, #16]	; (816f0 <vQueueWaitForMessageRestricted+0x48>)
   816e0:	4798      	blx	r3
   816e2:	bd38      	pop	{r3, r4, r5, pc}
   816e4:	00080f71 	.word	0x00080f71
   816e8:	00080f91 	.word	0x00080f91
   816ec:	00081dd1 	.word	0x00081dd1
   816f0:	00081241 	.word	0x00081241

000816f4 <prvAddCurrentTaskToDelayedList>:
	#endif
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
   816f4:	b510      	push	{r4, lr}
   816f6:	4604      	mov	r4, r0
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
   816f8:	4b0e      	ldr	r3, [pc, #56]	; (81734 <prvAddCurrentTaskToDelayedList+0x40>)
   816fa:	681b      	ldr	r3, [r3, #0]
   816fc:	6058      	str	r0, [r3, #4]

	if( xTimeToWake < xTickCount )
   816fe:	4b0e      	ldr	r3, [pc, #56]	; (81738 <prvAddCurrentTaskToDelayedList+0x44>)
   81700:	681b      	ldr	r3, [r3, #0]
   81702:	4298      	cmp	r0, r3
   81704:	d207      	bcs.n	81716 <prvAddCurrentTaskToDelayedList+0x22>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   81706:	4b0d      	ldr	r3, [pc, #52]	; (8173c <prvAddCurrentTaskToDelayedList+0x48>)
   81708:	6818      	ldr	r0, [r3, #0]
   8170a:	4b0a      	ldr	r3, [pc, #40]	; (81734 <prvAddCurrentTaskToDelayedList+0x40>)
   8170c:	6819      	ldr	r1, [r3, #0]
   8170e:	3104      	adds	r1, #4
   81710:	4b0b      	ldr	r3, [pc, #44]	; (81740 <prvAddCurrentTaskToDelayedList+0x4c>)
   81712:	4798      	blx	r3
   81714:	bd10      	pop	{r4, pc}
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   81716:	4b0b      	ldr	r3, [pc, #44]	; (81744 <prvAddCurrentTaskToDelayedList+0x50>)
   81718:	6818      	ldr	r0, [r3, #0]
   8171a:	4b06      	ldr	r3, [pc, #24]	; (81734 <prvAddCurrentTaskToDelayedList+0x40>)
   8171c:	6819      	ldr	r1, [r3, #0]
   8171e:	3104      	adds	r1, #4
   81720:	4b07      	ldr	r3, [pc, #28]	; (81740 <prvAddCurrentTaskToDelayedList+0x4c>)
   81722:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
   81724:	4b08      	ldr	r3, [pc, #32]	; (81748 <prvAddCurrentTaskToDelayedList+0x54>)
   81726:	681b      	ldr	r3, [r3, #0]
   81728:	429c      	cmp	r4, r3
		{
			xNextTaskUnblockTime = xTimeToWake;
   8172a:	bf3c      	itt	cc
   8172c:	4b06      	ldrcc	r3, [pc, #24]	; (81748 <prvAddCurrentTaskToDelayedList+0x54>)
   8172e:	601c      	strcc	r4, [r3, #0]
   81730:	bd10      	pop	{r4, pc}
   81732:	bf00      	nop
   81734:	2007ac2c 	.word	0x2007ac2c
   81738:	2007ac48 	.word	0x2007ac48
   8173c:	2007ac4c 	.word	0x2007ac4c
   81740:	00080e9d 	.word	0x00080e9d
   81744:	2007ab8c 	.word	0x2007ab8c
   81748:	20070204 	.word	0x20070204

0008174c <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
   8174c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81750:	460e      	mov	r6, r1
   81752:	4617      	mov	r7, r2
   81754:	469a      	mov	sl, r3
   81756:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   81758:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
   8175c:	4681      	mov	r9, r0
   8175e:	b918      	cbnz	r0, 81768 <xTaskGenericCreate+0x1c>
   81760:	4b62      	ldr	r3, [pc, #392]	; (818ec <xTaskGenericCreate+0x1a0>)
   81762:	4798      	blx	r3
   81764:	bf00      	nop
   81766:	e7fd      	b.n	81764 <xTaskGenericCreate+0x18>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
   81768:	2d04      	cmp	r5, #4
   8176a:	d903      	bls.n	81774 <xTaskGenericCreate+0x28>
   8176c:	4b5f      	ldr	r3, [pc, #380]	; (818ec <xTaskGenericCreate+0x1a0>)
   8176e:	4798      	blx	r3
   81770:	bf00      	nop
   81772:	e7fd      	b.n	81770 <xTaskGenericCreate+0x24>
{
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
   81774:	204c      	movs	r0, #76	; 0x4c
   81776:	4b5e      	ldr	r3, [pc, #376]	; (818f0 <xTaskGenericCreate+0x1a4>)
   81778:	4798      	blx	r3

	if( pxNewTCB != NULL )
   8177a:	4604      	mov	r4, r0
   8177c:	2800      	cmp	r0, #0
   8177e:	f000 80b1 	beq.w	818e4 <xTaskGenericCreate+0x198>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   81782:	f1b8 0f00 	cmp.w	r8, #0
   81786:	f040 80a9 	bne.w	818dc <xTaskGenericCreate+0x190>
   8178a:	00b8      	lsls	r0, r7, #2
   8178c:	4b58      	ldr	r3, [pc, #352]	; (818f0 <xTaskGenericCreate+0x1a4>)
   8178e:	4798      	blx	r3
   81790:	6320      	str	r0, [r4, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
   81792:	b918      	cbnz	r0, 8179c <xTaskGenericCreate+0x50>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
   81794:	4620      	mov	r0, r4
   81796:	4b57      	ldr	r3, [pc, #348]	; (818f4 <xTaskGenericCreate+0x1a8>)
   81798:	4798      	blx	r3
   8179a:	e0a3      	b.n	818e4 <xTaskGenericCreate+0x198>
			pxNewTCB = NULL;
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
   8179c:	21a5      	movs	r1, #165	; 0xa5
   8179e:	00ba      	lsls	r2, r7, #2
   817a0:	4b55      	ldr	r3, [pc, #340]	; (818f8 <xTaskGenericCreate+0x1ac>)
   817a2:	4798      	blx	r3
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
   817a4:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
   817a8:	3f01      	subs	r7, #1
   817aa:	6b23      	ldr	r3, [r4, #48]	; 0x30
   817ac:	eb03 0387 	add.w	r3, r3, r7, lsl #2
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
   817b0:	f023 0b07 	bic.w	fp, r3, #7
{
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
   817b4:	f104 0034 	add.w	r0, r4, #52	; 0x34
   817b8:	4631      	mov	r1, r6
   817ba:	220a      	movs	r2, #10
   817bc:	4b4f      	ldr	r3, [pc, #316]	; (818fc <xTaskGenericCreate+0x1b0>)
   817be:	4798      	blx	r3
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
   817c0:	2300      	movs	r3, #0
   817c2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
   817c6:	2d04      	cmp	r5, #4
   817c8:	bf34      	ite	cc
   817ca:	462e      	movcc	r6, r5
   817cc:	2604      	movcs	r6, #4
	if( uxPriority >= configMAX_PRIORITIES )
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
	}

	pxTCB->uxPriority = uxPriority;
   817ce:	62e6      	str	r6, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
   817d0:	64a6      	str	r6, [r4, #72]	; 0x48
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
   817d2:	1d27      	adds	r7, r4, #4
   817d4:	4638      	mov	r0, r7
   817d6:	f8df 8170 	ldr.w	r8, [pc, #368]	; 81948 <xTaskGenericCreate+0x1fc>
   817da:	47c0      	blx	r8
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
   817dc:	f104 0018 	add.w	r0, r4, #24
   817e0:	47c0      	blx	r8

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
   817e2:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
   817e4:	f1c6 0605 	rsb	r6, r6, #5
   817e8:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
   817ea:	6264      	str	r4, [r4, #36]	; 0x24
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   817ec:	4658      	mov	r0, fp
   817ee:	4649      	mov	r1, r9
   817f0:	4652      	mov	r2, sl
   817f2:	4b43      	ldr	r3, [pc, #268]	; (81900 <xTaskGenericCreate+0x1b4>)
   817f4:	4798      	blx	r3
   817f6:	6020      	str	r0, [r4, #0]
		}
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   817f8:	f010 0f07 	tst.w	r0, #7
   817fc:	d003      	beq.n	81806 <xTaskGenericCreate+0xba>
   817fe:	4b3b      	ldr	r3, [pc, #236]	; (818ec <xTaskGenericCreate+0x1a0>)
   81800:	4798      	blx	r3
   81802:	bf00      	nop
   81804:	e7fd      	b.n	81802 <xTaskGenericCreate+0xb6>

		if( ( void * ) pxCreatedTask != NULL )
   81806:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   81808:	b103      	cbz	r3, 8180c <xTaskGenericCreate+0xc0>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
   8180a:	601c      	str	r4, [r3, #0]
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
   8180c:	4b3d      	ldr	r3, [pc, #244]	; (81904 <xTaskGenericCreate+0x1b8>)
   8180e:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
   81810:	4b3d      	ldr	r3, [pc, #244]	; (81908 <xTaskGenericCreate+0x1bc>)
   81812:	681a      	ldr	r2, [r3, #0]
   81814:	3201      	adds	r2, #1
   81816:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
   81818:	4b3c      	ldr	r3, [pc, #240]	; (8190c <xTaskGenericCreate+0x1c0>)
   8181a:	681b      	ldr	r3, [r3, #0]
   8181c:	bb2b      	cbnz	r3, 8186a <xTaskGenericCreate+0x11e>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
   8181e:	4b3b      	ldr	r3, [pc, #236]	; (8190c <xTaskGenericCreate+0x1c0>)
   81820:	601c      	str	r4, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
   81822:	4b39      	ldr	r3, [pc, #228]	; (81908 <xTaskGenericCreate+0x1bc>)
   81824:	681b      	ldr	r3, [r3, #0]
   81826:	2b01      	cmp	r3, #1
   81828:	d129      	bne.n	8187e <xTaskGenericCreate+0x132>
   8182a:	4e39      	ldr	r6, [pc, #228]	; (81910 <xTaskGenericCreate+0x1c4>)
   8182c:	f106 0964 	add.w	r9, r6, #100	; 0x64
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
   81830:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 81914 <xTaskGenericCreate+0x1c8>
   81834:	4630      	mov	r0, r6
   81836:	47c0      	blx	r8
   81838:	3614      	adds	r6, #20

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
   8183a:	454e      	cmp	r6, r9
   8183c:	d1fa      	bne.n	81834 <xTaskGenericCreate+0xe8>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
   8183e:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8194c <xTaskGenericCreate+0x200>
   81842:	4648      	mov	r0, r9
   81844:	4e33      	ldr	r6, [pc, #204]	; (81914 <xTaskGenericCreate+0x1c8>)
   81846:	47b0      	blx	r6
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
   81848:	f8df 8104 	ldr.w	r8, [pc, #260]	; 81950 <xTaskGenericCreate+0x204>
   8184c:	4640      	mov	r0, r8
   8184e:	47b0      	blx	r6
	vListInitialise( ( xList * ) &xPendingReadyList );
   81850:	4831      	ldr	r0, [pc, #196]	; (81918 <xTaskGenericCreate+0x1cc>)
   81852:	47b0      	blx	r6

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
   81854:	4831      	ldr	r0, [pc, #196]	; (8191c <xTaskGenericCreate+0x1d0>)
   81856:	47b0      	blx	r6
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
   81858:	4831      	ldr	r0, [pc, #196]	; (81920 <xTaskGenericCreate+0x1d4>)
   8185a:	47b0      	blx	r6
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   8185c:	4b31      	ldr	r3, [pc, #196]	; (81924 <xTaskGenericCreate+0x1d8>)
   8185e:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   81862:	4b31      	ldr	r3, [pc, #196]	; (81928 <xTaskGenericCreate+0x1dc>)
   81864:	f8c3 8000 	str.w	r8, [r3]
   81868:	e009      	b.n	8187e <xTaskGenericCreate+0x132>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
   8186a:	4b30      	ldr	r3, [pc, #192]	; (8192c <xTaskGenericCreate+0x1e0>)
   8186c:	681b      	ldr	r3, [r3, #0]
   8186e:	b933      	cbnz	r3, 8187e <xTaskGenericCreate+0x132>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
   81870:	4b26      	ldr	r3, [pc, #152]	; (8190c <xTaskGenericCreate+0x1c0>)
   81872:	681b      	ldr	r3, [r3, #0]
   81874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   81876:	429d      	cmp	r5, r3
					{
						pxCurrentTCB = pxNewTCB;
   81878:	bf24      	itt	cs
   8187a:	4b24      	ldrcs	r3, [pc, #144]	; (8190c <xTaskGenericCreate+0x1c0>)
   8187c:	601c      	strcs	r4, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
   8187e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   81880:	4a2b      	ldr	r2, [pc, #172]	; (81930 <xTaskGenericCreate+0x1e4>)
   81882:	6812      	ldr	r2, [r2, #0]
   81884:	4293      	cmp	r3, r2
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
   81886:	bf84      	itt	hi
   81888:	4a29      	ldrhi	r2, [pc, #164]	; (81930 <xTaskGenericCreate+0x1e4>)
   8188a:	6013      	strhi	r3, [r2, #0]
			}

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
   8188c:	4a29      	ldr	r2, [pc, #164]	; (81934 <xTaskGenericCreate+0x1e8>)
   8188e:	6811      	ldr	r1, [r2, #0]
   81890:	6421      	str	r1, [r4, #64]	; 0x40
			}
			#endif
			uxTaskNumber++;
   81892:	3101      	adds	r1, #1
   81894:	6011      	str	r1, [r2, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
   81896:	4a28      	ldr	r2, [pc, #160]	; (81938 <xTaskGenericCreate+0x1ec>)
   81898:	6812      	ldr	r2, [r2, #0]
   8189a:	4293      	cmp	r3, r2
   8189c:	bf84      	itt	hi
   8189e:	4a26      	ldrhi	r2, [pc, #152]	; (81938 <xTaskGenericCreate+0x1ec>)
   818a0:	6013      	strhi	r3, [r2, #0]
   818a2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   818a6:	481a      	ldr	r0, [pc, #104]	; (81910 <xTaskGenericCreate+0x1c4>)
   818a8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   818ac:	4639      	mov	r1, r7
   818ae:	4b23      	ldr	r3, [pc, #140]	; (8193c <xTaskGenericCreate+0x1f0>)
   818b0:	4798      	blx	r3

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
   818b2:	4b23      	ldr	r3, [pc, #140]	; (81940 <xTaskGenericCreate+0x1f4>)
   818b4:	4798      	blx	r3
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
   818b6:	4b1d      	ldr	r3, [pc, #116]	; (8192c <xTaskGenericCreate+0x1e0>)
   818b8:	681b      	ldr	r3, [r3, #0]
   818ba:	b14b      	cbz	r3, 818d0 <xTaskGenericCreate+0x184>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
   818bc:	4b13      	ldr	r3, [pc, #76]	; (8190c <xTaskGenericCreate+0x1c0>)
   818be:	681b      	ldr	r3, [r3, #0]
   818c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   818c2:	429d      	cmp	r5, r3
   818c4:	d907      	bls.n	818d6 <xTaskGenericCreate+0x18a>
			{
				portYIELD_WITHIN_API();
   818c6:	4b1f      	ldr	r3, [pc, #124]	; (81944 <xTaskGenericCreate+0x1f8>)
   818c8:	4798      	blx	r3
			#endif
			uxTaskNumber++;

			prvAddTaskToReadyQueue( pxNewTCB );

			xReturn = pdPASS;
   818ca:	2001      	movs	r0, #1
   818cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   818d0:	2001      	movs	r0, #1
   818d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   818d6:	2001      	movs	r0, #1
   818d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if( pxNewTCB != NULL )
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   818dc:	f8c0 8030 	str.w	r8, [r0, #48]	; 0x30
   818e0:	4640      	mov	r0, r8
   818e2:	e75b      	b.n	8179c <xTaskGenericCreate+0x50>
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   818e4:	f04f 30ff 	mov.w	r0, #4294967295
			}
		}
	}

	return xReturn;
}
   818e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   818ec:	00080f61 	.word	0x00080f61
   818f0:	000810bd 	.word	0x000810bd
   818f4:	00081181 	.word	0x00081181
   818f8:	0008417d 	.word	0x0008417d
   818fc:	000843f1 	.word	0x000843f1
   81900:	00080f15 	.word	0x00080f15
   81904:	00080f71 	.word	0x00080f71
   81908:	2007ac6c 	.word	0x2007ac6c
   8190c:	2007ac2c 	.word	0x2007ac2c
   81910:	2007abc4 	.word	0x2007abc4
   81914:	00080e61 	.word	0x00080e61
   81918:	2007ac30 	.word	0x2007ac30
   8191c:	2007ab98 	.word	0x2007ab98
   81920:	2007ab78 	.word	0x2007ab78
   81924:	2007ab8c 	.word	0x2007ab8c
   81928:	2007ac4c 	.word	0x2007ac4c
   8192c:	2007ab90 	.word	0x2007ab90
   81930:	2007ac70 	.word	0x2007ac70
   81934:	2007ac50 	.word	0x2007ac50
   81938:	2007abc0 	.word	0x2007abc0
   8193c:	00080e81 	.word	0x00080e81
   81940:	00080f91 	.word	0x00080f91
   81944:	00080f51 	.word	0x00080f51
   81948:	00080e79 	.word	0x00080e79
   8194c:	2007ac54 	.word	0x2007ac54
   81950:	2007abac 	.word	0x2007abac

00081954 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
   81954:	b510      	push	{r4, lr}
   81956:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
   81958:	2300      	movs	r3, #0
   8195a:	9300      	str	r3, [sp, #0]
   8195c:	9301      	str	r3, [sp, #4]
   8195e:	9302      	str	r3, [sp, #8]
   81960:	9303      	str	r3, [sp, #12]
   81962:	480e      	ldr	r0, [pc, #56]	; (8199c <vTaskStartScheduler+0x48>)
   81964:	490e      	ldr	r1, [pc, #56]	; (819a0 <vTaskStartScheduler+0x4c>)
   81966:	2282      	movs	r2, #130	; 0x82
   81968:	4c0e      	ldr	r4, [pc, #56]	; (819a4 <vTaskStartScheduler+0x50>)
   8196a:	47a0      	blx	r4
	}
	#endif

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   8196c:	2801      	cmp	r0, #1
   8196e:	d10e      	bne.n	8198e <vTaskStartScheduler+0x3a>
		{
			xReturn = xTimerCreateTimerTask();
   81970:	4b0d      	ldr	r3, [pc, #52]	; (819a8 <vTaskStartScheduler+0x54>)
   81972:	4798      	blx	r3
		}
	}
	#endif

	if( xReturn == pdPASS )
   81974:	2801      	cmp	r0, #1
   81976:	d10a      	bne.n	8198e <vTaskStartScheduler+0x3a>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
   81978:	4b0c      	ldr	r3, [pc, #48]	; (819ac <vTaskStartScheduler+0x58>)
   8197a:	4798      	blx	r3

		xSchedulerRunning = pdTRUE;
   8197c:	2201      	movs	r2, #1
   8197e:	4b0c      	ldr	r3, [pc, #48]	; (819b0 <vTaskStartScheduler+0x5c>)
   81980:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
   81982:	2200      	movs	r2, #0
   81984:	4b0b      	ldr	r3, [pc, #44]	; (819b4 <vTaskStartScheduler+0x60>)
   81986:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   81988:	4b0b      	ldr	r3, [pc, #44]	; (819b8 <vTaskStartScheduler+0x64>)
   8198a:	4798      	blx	r3
   8198c:	e004      	b.n	81998 <vTaskStartScheduler+0x44>
			/* Should only reach here if a task calls xTaskEndScheduler(). */
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
   8198e:	b918      	cbnz	r0, 81998 <vTaskStartScheduler+0x44>
   81990:	4b06      	ldr	r3, [pc, #24]	; (819ac <vTaskStartScheduler+0x58>)
   81992:	4798      	blx	r3
   81994:	bf00      	nop
   81996:	e7fd      	b.n	81994 <vTaskStartScheduler+0x40>
}
   81998:	b004      	add	sp, #16
   8199a:	bd10      	pop	{r4, pc}
   8199c:	00081c5d 	.word	0x00081c5d
   819a0:	000881b4 	.word	0x000881b4
   819a4:	0008174d 	.word	0x0008174d
   819a8:	000820f1 	.word	0x000820f1
   819ac:	00080f61 	.word	0x00080f61
   819b0:	2007ab90 	.word	0x2007ab90
   819b4:	2007ac48 	.word	0x2007ac48
   819b8:	0008102d 	.word	0x0008102d

000819bc <vTaskSuspendAll>:

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
   819bc:	4b02      	ldr	r3, [pc, #8]	; (819c8 <vTaskSuspendAll+0xc>)
   819be:	681a      	ldr	r2, [r3, #0]
   819c0:	3201      	adds	r2, #1
   819c2:	601a      	str	r2, [r3, #0]
   819c4:	4770      	bx	lr
   819c6:	bf00      	nop
   819c8:	2007ac28 	.word	0x2007ac28

000819cc <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
   819cc:	b510      	push	{r4, lr}
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
   819ce:	4b04      	ldr	r3, [pc, #16]	; (819e0 <xTaskGetTickCount+0x14>)
   819d0:	4798      	blx	r3
	{
		xTicks = xTickCount;
   819d2:	4b04      	ldr	r3, [pc, #16]	; (819e4 <xTaskGetTickCount+0x18>)
   819d4:	681c      	ldr	r4, [r3, #0]
	}
	taskEXIT_CRITICAL();
   819d6:	4b04      	ldr	r3, [pc, #16]	; (819e8 <xTaskGetTickCount+0x1c>)
   819d8:	4798      	blx	r3

	return xTicks;
}
   819da:	4620      	mov	r0, r4
   819dc:	bd10      	pop	{r4, pc}
   819de:	bf00      	nop
   819e0:	00080f71 	.word	0x00080f71
   819e4:	2007ac48 	.word	0x2007ac48
   819e8:	00080f91 	.word	0x00080f91

000819ec <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
   819ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   819f0:	4b3a      	ldr	r3, [pc, #232]	; (81adc <vTaskIncrementTick+0xf0>)
   819f2:	681b      	ldr	r3, [r3, #0]
   819f4:	2b00      	cmp	r3, #0
   819f6:	d16b      	bne.n	81ad0 <vTaskIncrementTick+0xe4>
	{
		++xTickCount;
   819f8:	4b39      	ldr	r3, [pc, #228]	; (81ae0 <vTaskIncrementTick+0xf4>)
   819fa:	681a      	ldr	r2, [r3, #0]
   819fc:	3201      	adds	r2, #1
   819fe:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
   81a00:	681b      	ldr	r3, [r3, #0]
   81a02:	bb03      	cbnz	r3, 81a46 <vTaskIncrementTick+0x5a>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
   81a04:	4b37      	ldr	r3, [pc, #220]	; (81ae4 <vTaskIncrementTick+0xf8>)
   81a06:	681b      	ldr	r3, [r3, #0]
   81a08:	681b      	ldr	r3, [r3, #0]
   81a0a:	b11b      	cbz	r3, 81a14 <vTaskIncrementTick+0x28>
   81a0c:	4b36      	ldr	r3, [pc, #216]	; (81ae8 <vTaskIncrementTick+0xfc>)
   81a0e:	4798      	blx	r3
   81a10:	bf00      	nop
   81a12:	e7fd      	b.n	81a10 <vTaskIncrementTick+0x24>

			pxTemp = pxDelayedTaskList;
   81a14:	4b33      	ldr	r3, [pc, #204]	; (81ae4 <vTaskIncrementTick+0xf8>)
   81a16:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
   81a18:	4a34      	ldr	r2, [pc, #208]	; (81aec <vTaskIncrementTick+0x100>)
   81a1a:	6810      	ldr	r0, [r2, #0]
   81a1c:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
   81a1e:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
   81a20:	4a33      	ldr	r2, [pc, #204]	; (81af0 <vTaskIncrementTick+0x104>)
   81a22:	6811      	ldr	r1, [r2, #0]
   81a24:	3101      	adds	r1, #1
   81a26:	6011      	str	r1, [r2, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   81a28:	681b      	ldr	r3, [r3, #0]
   81a2a:	681b      	ldr	r3, [r3, #0]
   81a2c:	b923      	cbnz	r3, 81a38 <vTaskIncrementTick+0x4c>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
   81a2e:	f04f 32ff 	mov.w	r2, #4294967295
   81a32:	4b30      	ldr	r3, [pc, #192]	; (81af4 <vTaskIncrementTick+0x108>)
   81a34:	601a      	str	r2, [r3, #0]
   81a36:	e006      	b.n	81a46 <vTaskIncrementTick+0x5a>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   81a38:	4b2a      	ldr	r3, [pc, #168]	; (81ae4 <vTaskIncrementTick+0xf8>)
   81a3a:	681b      	ldr	r3, [r3, #0]
   81a3c:	68db      	ldr	r3, [r3, #12]
   81a3e:	68db      	ldr	r3, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   81a40:	685a      	ldr	r2, [r3, #4]
   81a42:	4b2c      	ldr	r3, [pc, #176]	; (81af4 <vTaskIncrementTick+0x108>)
   81a44:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
   81a46:	4b26      	ldr	r3, [pc, #152]	; (81ae0 <vTaskIncrementTick+0xf4>)
   81a48:	681a      	ldr	r2, [r3, #0]
   81a4a:	4b2a      	ldr	r3, [pc, #168]	; (81af4 <vTaskIncrementTick+0x108>)
   81a4c:	681b      	ldr	r3, [r3, #0]
   81a4e:	429a      	cmp	r2, r3
   81a50:	d342      	bcc.n	81ad8 <vTaskIncrementTick+0xec>
   81a52:	4b24      	ldr	r3, [pc, #144]	; (81ae4 <vTaskIncrementTick+0xf8>)
   81a54:	681b      	ldr	r3, [r3, #0]
   81a56:	681b      	ldr	r3, [r3, #0]
   81a58:	b14b      	cbz	r3, 81a6e <vTaskIncrementTick+0x82>
   81a5a:	4b22      	ldr	r3, [pc, #136]	; (81ae4 <vTaskIncrementTick+0xf8>)
   81a5c:	681b      	ldr	r3, [r3, #0]
   81a5e:	68db      	ldr	r3, [r3, #12]
   81a60:	68dc      	ldr	r4, [r3, #12]
   81a62:	6863      	ldr	r3, [r4, #4]
   81a64:	4a1e      	ldr	r2, [pc, #120]	; (81ae0 <vTaskIncrementTick+0xf4>)
   81a66:	6812      	ldr	r2, [r2, #0]
   81a68:	4293      	cmp	r3, r2
   81a6a:	d913      	bls.n	81a94 <vTaskIncrementTick+0xa8>
   81a6c:	e00e      	b.n	81a8c <vTaskIncrementTick+0xa0>
   81a6e:	f04f 32ff 	mov.w	r2, #4294967295
   81a72:	4b20      	ldr	r3, [pc, #128]	; (81af4 <vTaskIncrementTick+0x108>)
   81a74:	601a      	str	r2, [r3, #0]
   81a76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81a7a:	4b1a      	ldr	r3, [pc, #104]	; (81ae4 <vTaskIncrementTick+0xf8>)
   81a7c:	681b      	ldr	r3, [r3, #0]
   81a7e:	68db      	ldr	r3, [r3, #12]
   81a80:	68dc      	ldr	r4, [r3, #12]
   81a82:	6863      	ldr	r3, [r4, #4]
   81a84:	4a16      	ldr	r2, [pc, #88]	; (81ae0 <vTaskIncrementTick+0xf4>)
   81a86:	6812      	ldr	r2, [r2, #0]
   81a88:	4293      	cmp	r3, r2
   81a8a:	d907      	bls.n	81a9c <vTaskIncrementTick+0xb0>
   81a8c:	4a19      	ldr	r2, [pc, #100]	; (81af4 <vTaskIncrementTick+0x108>)
   81a8e:	6013      	str	r3, [r2, #0]
   81a90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81a94:	4e18      	ldr	r6, [pc, #96]	; (81af8 <vTaskIncrementTick+0x10c>)
   81a96:	4f19      	ldr	r7, [pc, #100]	; (81afc <vTaskIncrementTick+0x110>)
   81a98:	f8df 806c 	ldr.w	r8, [pc, #108]	; 81b08 <vTaskIncrementTick+0x11c>
   81a9c:	1d25      	adds	r5, r4, #4
   81a9e:	4628      	mov	r0, r5
   81aa0:	47b0      	blx	r6
   81aa2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   81aa4:	b113      	cbz	r3, 81aac <vTaskIncrementTick+0xc0>
   81aa6:	f104 0018 	add.w	r0, r4, #24
   81aaa:	47b0      	blx	r6
   81aac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   81aae:	683a      	ldr	r2, [r7, #0]
   81ab0:	4293      	cmp	r3, r2
   81ab2:	bf88      	it	hi
   81ab4:	603b      	strhi	r3, [r7, #0]
   81ab6:	eb03 0083 	add.w	r0, r3, r3, lsl #2
   81aba:	eb08 0080 	add.w	r0, r8, r0, lsl #2
   81abe:	4629      	mov	r1, r5
   81ac0:	4b0f      	ldr	r3, [pc, #60]	; (81b00 <vTaskIncrementTick+0x114>)
   81ac2:	4798      	blx	r3
   81ac4:	4b07      	ldr	r3, [pc, #28]	; (81ae4 <vTaskIncrementTick+0xf8>)
   81ac6:	681b      	ldr	r3, [r3, #0]
   81ac8:	681b      	ldr	r3, [r3, #0]
   81aca:	2b00      	cmp	r3, #0
   81acc:	d1d5      	bne.n	81a7a <vTaskIncrementTick+0x8e>
   81ace:	e7ce      	b.n	81a6e <vTaskIncrementTick+0x82>
	}
	else
	{
		++uxMissedTicks;
   81ad0:	4b0c      	ldr	r3, [pc, #48]	; (81b04 <vTaskIncrementTick+0x118>)
   81ad2:	681a      	ldr	r2, [r3, #0]
   81ad4:	3201      	adds	r2, #1
   81ad6:	601a      	str	r2, [r3, #0]
   81ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81adc:	2007ac28 	.word	0x2007ac28
   81ae0:	2007ac48 	.word	0x2007ac48
   81ae4:	2007ab8c 	.word	0x2007ab8c
   81ae8:	00080f61 	.word	0x00080f61
   81aec:	2007ac4c 	.word	0x2007ac4c
   81af0:	2007ac44 	.word	0x2007ac44
   81af4:	20070204 	.word	0x20070204
   81af8:	00080ed9 	.word	0x00080ed9
   81afc:	2007abc0 	.word	0x2007abc0
   81b00:	00080e81 	.word	0x00080e81
   81b04:	2007ab74 	.word	0x2007ab74
   81b08:	2007abc4 	.word	0x2007abc4

00081b0c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE != 0  */
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
   81b0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   81b10:	4b31      	ldr	r3, [pc, #196]	; (81bd8 <xTaskResumeAll+0xcc>)
   81b12:	681b      	ldr	r3, [r3, #0]
   81b14:	b91b      	cbnz	r3, 81b1e <xTaskResumeAll+0x12>
   81b16:	4b31      	ldr	r3, [pc, #196]	; (81bdc <xTaskResumeAll+0xd0>)
   81b18:	4798      	blx	r3
   81b1a:	bf00      	nop
   81b1c:	e7fd      	b.n	81b1a <xTaskResumeAll+0xe>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   81b1e:	4b30      	ldr	r3, [pc, #192]	; (81be0 <xTaskResumeAll+0xd4>)
   81b20:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
   81b22:	4b2d      	ldr	r3, [pc, #180]	; (81bd8 <xTaskResumeAll+0xcc>)
   81b24:	681a      	ldr	r2, [r3, #0]
   81b26:	3a01      	subs	r2, #1
   81b28:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   81b2a:	681b      	ldr	r3, [r3, #0]
   81b2c:	2b00      	cmp	r3, #0
   81b2e:	d148      	bne.n	81bc2 <xTaskResumeAll+0xb6>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
   81b30:	4b2c      	ldr	r3, [pc, #176]	; (81be4 <xTaskResumeAll+0xd8>)
   81b32:	681b      	ldr	r3, [r3, #0]
   81b34:	2b00      	cmp	r3, #0
   81b36:	d046      	beq.n	81bc6 <xTaskResumeAll+0xba>
   81b38:	2500      	movs	r5, #0
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   81b3a:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 81c10 <xTaskResumeAll+0x104>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
					uxListRemove( &( pxTCB->xEventListItem ) );
   81b3e:	4f2a      	ldr	r7, [pc, #168]	; (81be8 <xTaskResumeAll+0xdc>)
					uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyQueue( pxTCB );
   81b40:	4e2a      	ldr	r6, [pc, #168]	; (81bec <xTaskResumeAll+0xe0>)
   81b42:	e01d      	b.n	81b80 <xTaskResumeAll+0x74>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
   81b44:	f8d8 300c 	ldr.w	r3, [r8, #12]
   81b48:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xEventListItem ) );
   81b4a:	f104 0018 	add.w	r0, r4, #24
   81b4e:	47b8      	blx	r7
					uxListRemove( &( pxTCB->xGenericListItem ) );
   81b50:	f104 0904 	add.w	r9, r4, #4
   81b54:	4648      	mov	r0, r9
   81b56:	47b8      	blx	r7
					prvAddTaskToReadyQueue( pxTCB );
   81b58:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   81b5a:	6832      	ldr	r2, [r6, #0]
   81b5c:	4293      	cmp	r3, r2
   81b5e:	bf88      	it	hi
   81b60:	6033      	strhi	r3, [r6, #0]
   81b62:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81b66:	4822      	ldr	r0, [pc, #136]	; (81bf0 <xTaskResumeAll+0xe4>)
   81b68:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   81b6c:	4649      	mov	r1, r9
   81b6e:	4b21      	ldr	r3, [pc, #132]	; (81bf4 <xTaskResumeAll+0xe8>)
   81b70:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   81b72:	4b21      	ldr	r3, [pc, #132]	; (81bf8 <xTaskResumeAll+0xec>)
   81b74:	681b      	ldr	r3, [r3, #0]
   81b76:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   81b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					{
						xYieldRequired = pdTRUE;
   81b7a:	429a      	cmp	r2, r3
   81b7c:	bf28      	it	cs
   81b7e:	2501      	movcs	r5, #1
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   81b80:	f8d8 3000 	ldr.w	r3, [r8]
   81b84:	2b00      	cmp	r3, #0
   81b86:	d1dd      	bne.n	81b44 <xTaskResumeAll+0x38>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   81b88:	4b1c      	ldr	r3, [pc, #112]	; (81bfc <xTaskResumeAll+0xf0>)
   81b8a:	681b      	ldr	r3, [r3, #0]
   81b8c:	b163      	cbz	r3, 81ba8 <xTaskResumeAll+0x9c>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   81b8e:	4b1b      	ldr	r3, [pc, #108]	; (81bfc <xTaskResumeAll+0xf0>)
   81b90:	681b      	ldr	r3, [r3, #0]
   81b92:	b17b      	cbz	r3, 81bb4 <xTaskResumeAll+0xa8>
					{
						vTaskIncrementTick();
   81b94:	4d1a      	ldr	r5, [pc, #104]	; (81c00 <xTaskResumeAll+0xf4>)
						--uxMissedTicks;
   81b96:	4c19      	ldr	r4, [pc, #100]	; (81bfc <xTaskResumeAll+0xf0>)
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
					{
						vTaskIncrementTick();
   81b98:	47a8      	blx	r5
						--uxMissedTicks;
   81b9a:	6823      	ldr	r3, [r4, #0]
   81b9c:	3b01      	subs	r3, #1
   81b9e:	6023      	str	r3, [r4, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   81ba0:	6823      	ldr	r3, [r4, #0]
   81ba2:	2b00      	cmp	r3, #0
   81ba4:	d1f8      	bne.n	81b98 <xTaskResumeAll+0x8c>
   81ba6:	e005      	b.n	81bb4 <xTaskResumeAll+0xa8>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
   81ba8:	2d01      	cmp	r5, #1
   81baa:	d003      	beq.n	81bb4 <xTaskResumeAll+0xa8>
   81bac:	4b15      	ldr	r3, [pc, #84]	; (81c04 <xTaskResumeAll+0xf8>)
   81bae:	681b      	ldr	r3, [r3, #0]
   81bb0:	2b01      	cmp	r3, #1
   81bb2:	d10a      	bne.n	81bca <xTaskResumeAll+0xbe>
				{
					xAlreadyYielded = pdTRUE;
					xMissedYield = pdFALSE;
   81bb4:	2200      	movs	r2, #0
   81bb6:	4b13      	ldr	r3, [pc, #76]	; (81c04 <xTaskResumeAll+0xf8>)
   81bb8:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
   81bba:	4b13      	ldr	r3, [pc, #76]	; (81c08 <xTaskResumeAll+0xfc>)
   81bbc:	4798      	blx	r3
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
				{
					xAlreadyYielded = pdTRUE;
   81bbe:	2401      	movs	r4, #1
   81bc0:	e004      	b.n	81bcc <xTaskResumeAll+0xc0>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   81bc2:	2400      	movs	r4, #0
   81bc4:	e002      	b.n	81bcc <xTaskResumeAll+0xc0>
   81bc6:	2400      	movs	r4, #0
   81bc8:	e000      	b.n	81bcc <xTaskResumeAll+0xc0>
   81bca:	2400      	movs	r4, #0
					portYIELD_WITHIN_API();
				}
			}
		}
	}
	taskEXIT_CRITICAL();
   81bcc:	4b0f      	ldr	r3, [pc, #60]	; (81c0c <xTaskResumeAll+0x100>)
   81bce:	4798      	blx	r3

	return xAlreadyYielded;
}
   81bd0:	4620      	mov	r0, r4
   81bd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   81bd6:	bf00      	nop
   81bd8:	2007ac28 	.word	0x2007ac28
   81bdc:	00080f61 	.word	0x00080f61
   81be0:	00080f71 	.word	0x00080f71
   81be4:	2007ac6c 	.word	0x2007ac6c
   81be8:	00080ed9 	.word	0x00080ed9
   81bec:	2007abc0 	.word	0x2007abc0
   81bf0:	2007abc4 	.word	0x2007abc4
   81bf4:	00080e81 	.word	0x00080e81
   81bf8:	2007ac2c 	.word	0x2007ac2c
   81bfc:	2007ab74 	.word	0x2007ab74
   81c00:	000819ed 	.word	0x000819ed
   81c04:	2007ac68 	.word	0x2007ac68
   81c08:	00080f51 	.word	0x00080f51
   81c0c:	00080f91 	.word	0x00080f91
   81c10:	2007ac30 	.word	0x2007ac30

00081c14 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
   81c14:	b510      	push	{r4, lr}
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
   81c16:	4604      	mov	r4, r0
   81c18:	b178      	cbz	r0, 81c3a <vTaskDelay+0x26>
		{
			vTaskSuspendAll();
   81c1a:	4b09      	ldr	r3, [pc, #36]	; (81c40 <vTaskDelay+0x2c>)
   81c1c:	4798      	blx	r3
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
   81c1e:	4b09      	ldr	r3, [pc, #36]	; (81c44 <vTaskDelay+0x30>)
   81c20:	681b      	ldr	r3, [r3, #0]
   81c22:	441c      	add	r4, r3

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   81c24:	4b08      	ldr	r3, [pc, #32]	; (81c48 <vTaskDelay+0x34>)
   81c26:	6818      	ldr	r0, [r3, #0]
   81c28:	3004      	adds	r0, #4
   81c2a:	4b08      	ldr	r3, [pc, #32]	; (81c4c <vTaskDelay+0x38>)
   81c2c:	4798      	blx	r3
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
   81c2e:	4620      	mov	r0, r4
   81c30:	4b07      	ldr	r3, [pc, #28]	; (81c50 <vTaskDelay+0x3c>)
   81c32:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
   81c34:	4b07      	ldr	r3, [pc, #28]	; (81c54 <vTaskDelay+0x40>)
   81c36:	4798      	blx	r3
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   81c38:	b908      	cbnz	r0, 81c3e <vTaskDelay+0x2a>
		{
			portYIELD_WITHIN_API();
   81c3a:	4b07      	ldr	r3, [pc, #28]	; (81c58 <vTaskDelay+0x44>)
   81c3c:	4798      	blx	r3
   81c3e:	bd10      	pop	{r4, pc}
   81c40:	000819bd 	.word	0x000819bd
   81c44:	2007ac48 	.word	0x2007ac48
   81c48:	2007ac2c 	.word	0x2007ac2c
   81c4c:	00080ed9 	.word	0x00080ed9
   81c50:	000816f5 	.word	0x000816f5
   81c54:	00081b0d 	.word	0x00081b0d
   81c58:	00080f51 	.word	0x00080f51

00081c5c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   81c5c:	b580      	push	{r7, lr}
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   81c5e:	4d15      	ldr	r5, [pc, #84]	; (81cb4 <prvIdleTask+0x58>)

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
   81c60:	4e15      	ldr	r6, [pc, #84]	; (81cb8 <prvIdleTask+0x5c>)
			{
				taskYIELD();
   81c62:	f8df 8078 	ldr.w	r8, [pc, #120]	; 81cdc <prvIdleTask+0x80>
   81c66:	e01c      	b.n	81ca2 <prvIdleTask+0x46>

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
   81c68:	4b14      	ldr	r3, [pc, #80]	; (81cbc <prvIdleTask+0x60>)
   81c6a:	4798      	blx	r3
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   81c6c:	4b14      	ldr	r3, [pc, #80]	; (81cc0 <prvIdleTask+0x64>)
   81c6e:	681c      	ldr	r4, [r3, #0]
			xTaskResumeAll();
   81c70:	4b14      	ldr	r3, [pc, #80]	; (81cc4 <prvIdleTask+0x68>)
   81c72:	4798      	blx	r3

			if( xListIsEmpty == pdFALSE )
   81c74:	b1ac      	cbz	r4, 81ca2 <prvIdleTask+0x46>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
   81c76:	4b14      	ldr	r3, [pc, #80]	; (81cc8 <prvIdleTask+0x6c>)
   81c78:	4798      	blx	r3
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
   81c7a:	4b11      	ldr	r3, [pc, #68]	; (81cc0 <prvIdleTask+0x64>)
   81c7c:	68db      	ldr	r3, [r3, #12]
   81c7e:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xGenericListItem ) );
   81c80:	1d20      	adds	r0, r4, #4
   81c82:	4b12      	ldr	r3, [pc, #72]	; (81ccc <prvIdleTask+0x70>)
   81c84:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
   81c86:	4b12      	ldr	r3, [pc, #72]	; (81cd0 <prvIdleTask+0x74>)
   81c88:	681a      	ldr	r2, [r3, #0]
   81c8a:	3a01      	subs	r2, #1
   81c8c:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
   81c8e:	682b      	ldr	r3, [r5, #0]
   81c90:	3b01      	subs	r3, #1
   81c92:	602b      	str	r3, [r5, #0]
				}
				taskEXIT_CRITICAL();
   81c94:	4b0f      	ldr	r3, [pc, #60]	; (81cd4 <prvIdleTask+0x78>)
   81c96:	4798      	blx	r3
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
   81c98:	6b20      	ldr	r0, [r4, #48]	; 0x30
   81c9a:	4f0f      	ldr	r7, [pc, #60]	; (81cd8 <prvIdleTask+0x7c>)
   81c9c:	47b8      	blx	r7
		vPortFree( pxTCB );
   81c9e:	4620      	mov	r0, r4
   81ca0:	47b8      	blx	r7
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   81ca2:	682b      	ldr	r3, [r5, #0]
   81ca4:	2b00      	cmp	r3, #0
   81ca6:	d1df      	bne.n	81c68 <prvIdleTask+0xc>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
   81ca8:	6833      	ldr	r3, [r6, #0]
   81caa:	2b01      	cmp	r3, #1
   81cac:	d9f9      	bls.n	81ca2 <prvIdleTask+0x46>
			{
				taskYIELD();
   81cae:	47c0      	blx	r8
   81cb0:	e7f7      	b.n	81ca2 <prvIdleTask+0x46>
   81cb2:	bf00      	nop
   81cb4:	2007ab94 	.word	0x2007ab94
   81cb8:	2007abc4 	.word	0x2007abc4
   81cbc:	000819bd 	.word	0x000819bd
   81cc0:	2007ab98 	.word	0x2007ab98
   81cc4:	00081b0d 	.word	0x00081b0d
   81cc8:	00080f71 	.word	0x00080f71
   81ccc:	00080ed9 	.word	0x00080ed9
   81cd0:	2007ac6c 	.word	0x2007ac6c
   81cd4:	00080f91 	.word	0x00080f91
   81cd8:	00081181 	.word	0x00081181
   81cdc:	00080f51 	.word	0x00080f51

00081ce0 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   81ce0:	b508      	push	{r3, lr}
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
   81ce2:	4b1d      	ldr	r3, [pc, #116]	; (81d58 <vTaskSwitchContext+0x78>)
   81ce4:	681b      	ldr	r3, [r3, #0]
   81ce6:	b95b      	cbnz	r3, 81d00 <vTaskSwitchContext+0x20>
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   81ce8:	4b1c      	ldr	r3, [pc, #112]	; (81d5c <vTaskSwitchContext+0x7c>)
   81cea:	681b      	ldr	r3, [r3, #0]
   81cec:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81cf0:	009b      	lsls	r3, r3, #2
   81cf2:	4a1b      	ldr	r2, [pc, #108]	; (81d60 <vTaskSwitchContext+0x80>)
   81cf4:	58d3      	ldr	r3, [r2, r3]
   81cf6:	b9cb      	cbnz	r3, 81d2c <vTaskSwitchContext+0x4c>
   81cf8:	4b18      	ldr	r3, [pc, #96]	; (81d5c <vTaskSwitchContext+0x7c>)
   81cfa:	681b      	ldr	r3, [r3, #0]
   81cfc:	b953      	cbnz	r3, 81d14 <vTaskSwitchContext+0x34>
   81cfe:	e005      	b.n	81d0c <vTaskSwitchContext+0x2c>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
   81d00:	2201      	movs	r2, #1
   81d02:	4b18      	ldr	r3, [pc, #96]	; (81d64 <vTaskSwitchContext+0x84>)
   81d04:	601a      	str	r2, [r3, #0]
   81d06:	bd08      	pop	{r3, pc}
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   81d08:	681a      	ldr	r2, [r3, #0]
   81d0a:	b92a      	cbnz	r2, 81d18 <vTaskSwitchContext+0x38>
   81d0c:	4b16      	ldr	r3, [pc, #88]	; (81d68 <vTaskSwitchContext+0x88>)
   81d0e:	4798      	blx	r3
   81d10:	bf00      	nop
   81d12:	e7fd      	b.n	81d10 <vTaskSwitchContext+0x30>
   81d14:	4b11      	ldr	r3, [pc, #68]	; (81d5c <vTaskSwitchContext+0x7c>)
   81d16:	4912      	ldr	r1, [pc, #72]	; (81d60 <vTaskSwitchContext+0x80>)
   81d18:	681a      	ldr	r2, [r3, #0]
   81d1a:	3a01      	subs	r2, #1
   81d1c:	601a      	str	r2, [r3, #0]
   81d1e:	681a      	ldr	r2, [r3, #0]
   81d20:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   81d24:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
   81d28:	2a00      	cmp	r2, #0
   81d2a:	d0ed      	beq.n	81d08 <vTaskSwitchContext+0x28>
   81d2c:	4b0b      	ldr	r3, [pc, #44]	; (81d5c <vTaskSwitchContext+0x7c>)
   81d2e:	681b      	ldr	r3, [r3, #0]
   81d30:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81d34:	4a0a      	ldr	r2, [pc, #40]	; (81d60 <vTaskSwitchContext+0x80>)
   81d36:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   81d3a:	685a      	ldr	r2, [r3, #4]
   81d3c:	6852      	ldr	r2, [r2, #4]
   81d3e:	605a      	str	r2, [r3, #4]
   81d40:	f103 0108 	add.w	r1, r3, #8
   81d44:	428a      	cmp	r2, r1
   81d46:	bf04      	itt	eq
   81d48:	6852      	ldreq	r2, [r2, #4]
   81d4a:	605a      	streq	r2, [r3, #4]
   81d4c:	685b      	ldr	r3, [r3, #4]
   81d4e:	68da      	ldr	r2, [r3, #12]
   81d50:	4b06      	ldr	r3, [pc, #24]	; (81d6c <vTaskSwitchContext+0x8c>)
   81d52:	601a      	str	r2, [r3, #0]
   81d54:	bd08      	pop	{r3, pc}
   81d56:	bf00      	nop
   81d58:	2007ac28 	.word	0x2007ac28
   81d5c:	2007abc0 	.word	0x2007abc0
   81d60:	2007abc4 	.word	0x2007abc4
   81d64:	2007ac68 	.word	0x2007ac68
   81d68:	00080f61 	.word	0x00080f61
   81d6c:	2007ac2c 	.word	0x2007ac2c

00081d70 <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
   81d70:	b538      	push	{r3, r4, r5, lr}
   81d72:	460c      	mov	r4, r1
portTickType xTimeToWake;

	configASSERT( pxEventList );
   81d74:	b918      	cbnz	r0, 81d7e <vTaskPlaceOnEventList+0xe>
   81d76:	4b0e      	ldr	r3, [pc, #56]	; (81db0 <vTaskPlaceOnEventList+0x40>)
   81d78:	4798      	blx	r3
   81d7a:	bf00      	nop
   81d7c:	e7fd      	b.n	81d7a <vTaskPlaceOnEventList+0xa>
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   81d7e:	4d0d      	ldr	r5, [pc, #52]	; (81db4 <vTaskPlaceOnEventList+0x44>)
   81d80:	6829      	ldr	r1, [r5, #0]
   81d82:	3118      	adds	r1, #24
   81d84:	4b0c      	ldr	r3, [pc, #48]	; (81db8 <vTaskPlaceOnEventList+0x48>)
   81d86:	4798      	blx	r3

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   81d88:	6828      	ldr	r0, [r5, #0]
   81d8a:	3004      	adds	r0, #4
   81d8c:	4b0b      	ldr	r3, [pc, #44]	; (81dbc <vTaskPlaceOnEventList+0x4c>)
   81d8e:	4798      	blx	r3
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
   81d90:	f1b4 3fff 	cmp.w	r4, #4294967295
   81d94:	d105      	bne.n	81da2 <vTaskPlaceOnEventList+0x32>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   81d96:	6829      	ldr	r1, [r5, #0]
   81d98:	4809      	ldr	r0, [pc, #36]	; (81dc0 <vTaskPlaceOnEventList+0x50>)
   81d9a:	3104      	adds	r1, #4
   81d9c:	4b09      	ldr	r3, [pc, #36]	; (81dc4 <vTaskPlaceOnEventList+0x54>)
   81d9e:	4798      	blx	r3
   81da0:	bd38      	pop	{r3, r4, r5, pc}
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
   81da2:	4b09      	ldr	r3, [pc, #36]	; (81dc8 <vTaskPlaceOnEventList+0x58>)
   81da4:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
   81da6:	4420      	add	r0, r4
   81da8:	4b08      	ldr	r3, [pc, #32]	; (81dcc <vTaskPlaceOnEventList+0x5c>)
   81daa:	4798      	blx	r3
   81dac:	bd38      	pop	{r3, r4, r5, pc}
   81dae:	bf00      	nop
   81db0:	00080f61 	.word	0x00080f61
   81db4:	2007ac2c 	.word	0x2007ac2c
   81db8:	00080e9d 	.word	0x00080e9d
   81dbc:	00080ed9 	.word	0x00080ed9
   81dc0:	2007ab78 	.word	0x2007ab78
   81dc4:	00080e81 	.word	0x00080e81
   81dc8:	2007ac48 	.word	0x2007ac48
   81dcc:	000816f5 	.word	0x000816f5

00081dd0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait )
	{
   81dd0:	b538      	push	{r3, r4, r5, lr}
   81dd2:	460d      	mov	r5, r1
	portTickType xTimeToWake;

		configASSERT( pxEventList );
   81dd4:	b918      	cbnz	r0, 81dde <vTaskPlaceOnEventListRestricted+0xe>
   81dd6:	4b09      	ldr	r3, [pc, #36]	; (81dfc <vTaskPlaceOnEventListRestricted+0x2c>)
   81dd8:	4798      	blx	r3
   81dda:	bf00      	nop
   81ddc:	e7fd      	b.n	81dda <vTaskPlaceOnEventListRestricted+0xa>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   81dde:	4c08      	ldr	r4, [pc, #32]	; (81e00 <vTaskPlaceOnEventListRestricted+0x30>)
   81de0:	6821      	ldr	r1, [r4, #0]
   81de2:	3118      	adds	r1, #24
   81de4:	4b07      	ldr	r3, [pc, #28]	; (81e04 <vTaskPlaceOnEventListRestricted+0x34>)
   81de6:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   81de8:	6820      	ldr	r0, [r4, #0]
   81dea:	3004      	adds	r0, #4
   81dec:	4b06      	ldr	r3, [pc, #24]	; (81e08 <vTaskPlaceOnEventListRestricted+0x38>)
   81dee:	4798      	blx	r3
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
   81df0:	4b06      	ldr	r3, [pc, #24]	; (81e0c <vTaskPlaceOnEventListRestricted+0x3c>)
   81df2:	6818      	ldr	r0, [r3, #0]
		
		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
   81df4:	4428      	add	r0, r5
   81df6:	4b06      	ldr	r3, [pc, #24]	; (81e10 <vTaskPlaceOnEventListRestricted+0x40>)
   81df8:	4798      	blx	r3
   81dfa:	bd38      	pop	{r3, r4, r5, pc}
   81dfc:	00080f61 	.word	0x00080f61
   81e00:	2007ac2c 	.word	0x2007ac2c
   81e04:	00080e81 	.word	0x00080e81
   81e08:	00080ed9 	.word	0x00080ed9
   81e0c:	2007ac48 	.word	0x2007ac48
   81e10:	000816f5 	.word	0x000816f5

00081e14 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
   81e14:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   81e16:	68c3      	ldr	r3, [r0, #12]
   81e18:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
   81e1a:	b91c      	cbnz	r4, 81e24 <xTaskRemoveFromEventList+0x10>
   81e1c:	4b16      	ldr	r3, [pc, #88]	; (81e78 <xTaskRemoveFromEventList+0x64>)
   81e1e:	4798      	blx	r3
   81e20:	bf00      	nop
   81e22:	e7fd      	b.n	81e20 <xTaskRemoveFromEventList+0xc>
	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   81e24:	f104 0518 	add.w	r5, r4, #24
   81e28:	4628      	mov	r0, r5
   81e2a:	4b14      	ldr	r3, [pc, #80]	; (81e7c <xTaskRemoveFromEventList+0x68>)
   81e2c:	4798      	blx	r3

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   81e2e:	4b14      	ldr	r3, [pc, #80]	; (81e80 <xTaskRemoveFromEventList+0x6c>)
   81e30:	681b      	ldr	r3, [r3, #0]
   81e32:	b99b      	cbnz	r3, 81e5c <xTaskRemoveFromEventList+0x48>
	{
		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
   81e34:	1d25      	adds	r5, r4, #4
   81e36:	4628      	mov	r0, r5
   81e38:	4b10      	ldr	r3, [pc, #64]	; (81e7c <xTaskRemoveFromEventList+0x68>)
   81e3a:	4798      	blx	r3
		prvAddTaskToReadyQueue( pxUnblockedTCB );
   81e3c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   81e3e:	4a11      	ldr	r2, [pc, #68]	; (81e84 <xTaskRemoveFromEventList+0x70>)
   81e40:	6812      	ldr	r2, [r2, #0]
   81e42:	4293      	cmp	r3, r2
   81e44:	bf84      	itt	hi
   81e46:	4a0f      	ldrhi	r2, [pc, #60]	; (81e84 <xTaskRemoveFromEventList+0x70>)
   81e48:	6013      	strhi	r3, [r2, #0]
   81e4a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81e4e:	480e      	ldr	r0, [pc, #56]	; (81e88 <xTaskRemoveFromEventList+0x74>)
   81e50:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   81e54:	4629      	mov	r1, r5
   81e56:	4b0d      	ldr	r3, [pc, #52]	; (81e8c <xTaskRemoveFromEventList+0x78>)
   81e58:	4798      	blx	r3
   81e5a:	e003      	b.n	81e64 <xTaskRemoveFromEventList+0x50>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   81e5c:	480c      	ldr	r0, [pc, #48]	; (81e90 <xTaskRemoveFromEventList+0x7c>)
   81e5e:	4629      	mov	r1, r5
   81e60:	4b0a      	ldr	r3, [pc, #40]	; (81e8c <xTaskRemoveFromEventList+0x78>)
   81e62:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
   81e64:	4b0b      	ldr	r3, [pc, #44]	; (81e94 <xTaskRemoveFromEventList+0x80>)
   81e66:	681b      	ldr	r3, [r3, #0]
   81e68:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   81e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
   81e6c:	4298      	cmp	r0, r3
   81e6e:	bf34      	ite	cc
   81e70:	2000      	movcc	r0, #0
   81e72:	2001      	movcs	r0, #1
   81e74:	bd38      	pop	{r3, r4, r5, pc}
   81e76:	bf00      	nop
   81e78:	00080f61 	.word	0x00080f61
   81e7c:	00080ed9 	.word	0x00080ed9
   81e80:	2007ac28 	.word	0x2007ac28
   81e84:	2007abc0 	.word	0x2007abc0
   81e88:	2007abc4 	.word	0x2007abc4
   81e8c:	00080e81 	.word	0x00080e81
   81e90:	2007ac30 	.word	0x2007ac30
   81e94:	2007ac2c 	.word	0x2007ac2c

00081e98 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
   81e98:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
   81e9a:	b918      	cbnz	r0, 81ea4 <vTaskSetTimeOutState+0xc>
   81e9c:	4b05      	ldr	r3, [pc, #20]	; (81eb4 <vTaskSetTimeOutState+0x1c>)
   81e9e:	4798      	blx	r3
   81ea0:	bf00      	nop
   81ea2:	e7fd      	b.n	81ea0 <vTaskSetTimeOutState+0x8>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   81ea4:	4a04      	ldr	r2, [pc, #16]	; (81eb8 <vTaskSetTimeOutState+0x20>)
   81ea6:	6812      	ldr	r2, [r2, #0]
   81ea8:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   81eaa:	4a04      	ldr	r2, [pc, #16]	; (81ebc <vTaskSetTimeOutState+0x24>)
   81eac:	6812      	ldr	r2, [r2, #0]
   81eae:	6042      	str	r2, [r0, #4]
   81eb0:	bd08      	pop	{r3, pc}
   81eb2:	bf00      	nop
   81eb4:	00080f61 	.word	0x00080f61
   81eb8:	2007ac44 	.word	0x2007ac44
   81ebc:	2007ac48 	.word	0x2007ac48

00081ec0 <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
   81ec0:	b538      	push	{r3, r4, r5, lr}
   81ec2:	460d      	mov	r5, r1
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
   81ec4:	4604      	mov	r4, r0
   81ec6:	b918      	cbnz	r0, 81ed0 <xTaskCheckForTimeOut+0x10>
   81ec8:	4b18      	ldr	r3, [pc, #96]	; (81f2c <xTaskCheckForTimeOut+0x6c>)
   81eca:	4798      	blx	r3
   81ecc:	bf00      	nop
   81ece:	e7fd      	b.n	81ecc <xTaskCheckForTimeOut+0xc>
	configASSERT( pxTicksToWait );
   81ed0:	b919      	cbnz	r1, 81eda <xTaskCheckForTimeOut+0x1a>
   81ed2:	4b16      	ldr	r3, [pc, #88]	; (81f2c <xTaskCheckForTimeOut+0x6c>)
   81ed4:	4798      	blx	r3
   81ed6:	bf00      	nop
   81ed8:	e7fd      	b.n	81ed6 <xTaskCheckForTimeOut+0x16>

	taskENTER_CRITICAL();
   81eda:	4b15      	ldr	r3, [pc, #84]	; (81f30 <xTaskCheckForTimeOut+0x70>)
   81edc:	4798      	blx	r3
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
   81ede:	682b      	ldr	r3, [r5, #0]
   81ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
   81ee4:	d019      	beq.n	81f1a <xTaskCheckForTimeOut+0x5a>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
   81ee6:	4a13      	ldr	r2, [pc, #76]	; (81f34 <xTaskCheckForTimeOut+0x74>)
   81ee8:	6811      	ldr	r1, [r2, #0]
   81eea:	6822      	ldr	r2, [r4, #0]
   81eec:	428a      	cmp	r2, r1
   81eee:	d004      	beq.n	81efa <xTaskCheckForTimeOut+0x3a>
   81ef0:	4a11      	ldr	r2, [pc, #68]	; (81f38 <xTaskCheckForTimeOut+0x78>)
   81ef2:	6811      	ldr	r1, [r2, #0]
   81ef4:	6862      	ldr	r2, [r4, #4]
   81ef6:	428a      	cmp	r2, r1
   81ef8:	d911      	bls.n	81f1e <xTaskCheckForTimeOut+0x5e>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
   81efa:	4a0f      	ldr	r2, [pc, #60]	; (81f38 <xTaskCheckForTimeOut+0x78>)
   81efc:	6811      	ldr	r1, [r2, #0]
   81efe:	6862      	ldr	r2, [r4, #4]
   81f00:	1a89      	subs	r1, r1, r2
   81f02:	428b      	cmp	r3, r1
   81f04:	d90d      	bls.n	81f22 <xTaskCheckForTimeOut+0x62>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
   81f06:	490c      	ldr	r1, [pc, #48]	; (81f38 <xTaskCheckForTimeOut+0x78>)
   81f08:	6809      	ldr	r1, [r1, #0]
   81f0a:	1a52      	subs	r2, r2, r1
   81f0c:	4413      	add	r3, r2
   81f0e:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
   81f10:	4620      	mov	r0, r4
   81f12:	4b0a      	ldr	r3, [pc, #40]	; (81f3c <xTaskCheckForTimeOut+0x7c>)
   81f14:	4798      	blx	r3
			xReturn = pdFALSE;
   81f16:	2400      	movs	r4, #0
   81f18:	e004      	b.n	81f24 <xTaskCheckForTimeOut+0x64>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
   81f1a:	2400      	movs	r4, #0
   81f1c:	e002      	b.n	81f24 <xTaskCheckForTimeOut+0x64>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
   81f1e:	2401      	movs	r4, #1
   81f20:	e000      	b.n	81f24 <xTaskCheckForTimeOut+0x64>
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
   81f22:	2401      	movs	r4, #1
		}
	}
	taskEXIT_CRITICAL();
   81f24:	4b06      	ldr	r3, [pc, #24]	; (81f40 <xTaskCheckForTimeOut+0x80>)
   81f26:	4798      	blx	r3

	return xReturn;
}
   81f28:	4620      	mov	r0, r4
   81f2a:	bd38      	pop	{r3, r4, r5, pc}
   81f2c:	00080f61 	.word	0x00080f61
   81f30:	00080f71 	.word	0x00080f71
   81f34:	2007ac44 	.word	0x2007ac44
   81f38:	2007ac48 	.word	0x2007ac48
   81f3c:	00081e99 	.word	0x00081e99
   81f40:	00080f91 	.word	0x00080f91

00081f44 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xMissedYield = pdTRUE;
   81f44:	2201      	movs	r2, #1
   81f46:	4b01      	ldr	r3, [pc, #4]	; (81f4c <vTaskMissedYield+0x8>)
   81f48:	601a      	str	r2, [r3, #0]
   81f4a:	4770      	bx	lr
   81f4c:	2007ac68 	.word	0x2007ac68

00081f50 <xTaskGetCurrentTaskHandle>:
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
   81f50:	4b01      	ldr	r3, [pc, #4]	; (81f58 <xTaskGetCurrentTaskHandle+0x8>)
   81f52:	6818      	ldr	r0, [r3, #0]

		return xReturn;
	}
   81f54:	4770      	bx	lr
   81f56:	bf00      	nop
   81f58:	2007ac2c 	.word	0x2007ac2c

00081f5c <xTaskGetSchedulerState>:

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
   81f5c:	4b05      	ldr	r3, [pc, #20]	; (81f74 <xTaskGetSchedulerState+0x18>)
   81f5e:	681b      	ldr	r3, [r3, #0]
   81f60:	b133      	cbz	r3, 81f70 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   81f62:	4b05      	ldr	r3, [pc, #20]	; (81f78 <xTaskGetSchedulerState+0x1c>)
   81f64:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
   81f66:	2b00      	cmp	r3, #0
   81f68:	bf14      	ite	ne
   81f6a:	2002      	movne	r0, #2
   81f6c:	2001      	moveq	r0, #1
   81f6e:	4770      	bx	lr
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   81f70:	2000      	movs	r0, #0
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
   81f72:	4770      	bx	lr
   81f74:	2007ab90 	.word	0x2007ab90
   81f78:	2007ac28 	.word	0x2007ac28

00081f7c <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
   81f7c:	b538      	push	{r3, r4, r5, lr}
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
   81f7e:	4604      	mov	r4, r0
   81f80:	2800      	cmp	r0, #0
   81f82:	d02e      	beq.n	81fe2 <vTaskPriorityInherit+0x66>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
   81f84:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   81f86:	4a17      	ldr	r2, [pc, #92]	; (81fe4 <vTaskPriorityInherit+0x68>)
   81f88:	6812      	ldr	r2, [r2, #0]
   81f8a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
   81f8c:	4293      	cmp	r3, r2
   81f8e:	d228      	bcs.n	81fe2 <vTaskPriorityInherit+0x66>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
   81f90:	4a14      	ldr	r2, [pc, #80]	; (81fe4 <vTaskPriorityInherit+0x68>)
   81f92:	6812      	ldr	r2, [r2, #0]
   81f94:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
   81f96:	f1c2 0205 	rsb	r2, r2, #5
   81f9a:	6182      	str	r2, [r0, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
   81f9c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81fa0:	4a11      	ldr	r2, [pc, #68]	; (81fe8 <vTaskPriorityInherit+0x6c>)
   81fa2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   81fa6:	6942      	ldr	r2, [r0, #20]
   81fa8:	429a      	cmp	r2, r3
   81faa:	d116      	bne.n	81fda <vTaskPriorityInherit+0x5e>
				{
					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   81fac:	1d05      	adds	r5, r0, #4
   81fae:	4628      	mov	r0, r5
   81fb0:	4b0e      	ldr	r3, [pc, #56]	; (81fec <vTaskPriorityInherit+0x70>)
   81fb2:	4798      	blx	r3
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   81fb4:	4b0b      	ldr	r3, [pc, #44]	; (81fe4 <vTaskPriorityInherit+0x68>)
   81fb6:	681b      	ldr	r3, [r3, #0]
   81fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   81fba:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyQueue( pxTCB );
   81fbc:	4a0c      	ldr	r2, [pc, #48]	; (81ff0 <vTaskPriorityInherit+0x74>)
   81fbe:	6812      	ldr	r2, [r2, #0]
   81fc0:	4293      	cmp	r3, r2
   81fc2:	bf84      	itt	hi
   81fc4:	4a0a      	ldrhi	r2, [pc, #40]	; (81ff0 <vTaskPriorityInherit+0x74>)
   81fc6:	6013      	strhi	r3, [r2, #0]
   81fc8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81fcc:	4806      	ldr	r0, [pc, #24]	; (81fe8 <vTaskPriorityInherit+0x6c>)
   81fce:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   81fd2:	4629      	mov	r1, r5
   81fd4:	4b07      	ldr	r3, [pc, #28]	; (81ff4 <vTaskPriorityInherit+0x78>)
   81fd6:	4798      	blx	r3
   81fd8:	bd38      	pop	{r3, r4, r5, pc}
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   81fda:	4b02      	ldr	r3, [pc, #8]	; (81fe4 <vTaskPriorityInherit+0x68>)
   81fdc:	681b      	ldr	r3, [r3, #0]
   81fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   81fe0:	62c3      	str	r3, [r0, #44]	; 0x2c
   81fe2:	bd38      	pop	{r3, r4, r5, pc}
   81fe4:	2007ac2c 	.word	0x2007ac2c
   81fe8:	2007abc4 	.word	0x2007abc4
   81fec:	00080ed9 	.word	0x00080ed9
   81ff0:	2007abc0 	.word	0x2007abc0
   81ff4:	00080e81 	.word	0x00080e81

00081ff8 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
   81ff8:	b538      	push	{r3, r4, r5, lr}
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
   81ffa:	4604      	mov	r4, r0
   81ffc:	b1d0      	cbz	r0, 82034 <vTaskPriorityDisinherit+0x3c>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   81ffe:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   82000:	6c83      	ldr	r3, [r0, #72]	; 0x48
   82002:	429a      	cmp	r2, r3
   82004:	d016      	beq.n	82034 <vTaskPriorityDisinherit+0x3c>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   82006:	1d05      	adds	r5, r0, #4
   82008:	4628      	mov	r0, r5
   8200a:	4b0b      	ldr	r3, [pc, #44]	; (82038 <vTaskPriorityDisinherit+0x40>)
   8200c:	4798      	blx	r3
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
   8200e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   82010:	62e3      	str	r3, [r4, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
   82012:	f1c3 0205 	rsb	r2, r3, #5
   82016:	61a2      	str	r2, [r4, #24]
				prvAddTaskToReadyQueue( pxTCB );
   82018:	4a08      	ldr	r2, [pc, #32]	; (8203c <vTaskPriorityDisinherit+0x44>)
   8201a:	6812      	ldr	r2, [r2, #0]
   8201c:	4293      	cmp	r3, r2
   8201e:	bf84      	itt	hi
   82020:	4a06      	ldrhi	r2, [pc, #24]	; (8203c <vTaskPriorityDisinherit+0x44>)
   82022:	6013      	strhi	r3, [r2, #0]
   82024:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   82028:	4805      	ldr	r0, [pc, #20]	; (82040 <vTaskPriorityDisinherit+0x48>)
   8202a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   8202e:	4629      	mov	r1, r5
   82030:	4b04      	ldr	r3, [pc, #16]	; (82044 <vTaskPriorityDisinherit+0x4c>)
   82032:	4798      	blx	r3
   82034:	bd38      	pop	{r3, r4, r5, pc}
   82036:	bf00      	nop
   82038:	00080ed9 	.word	0x00080ed9
   8203c:	2007abc0 	.word	0x2007abc0
   82040:	2007abc4 	.word	0x2007abc4
   82044:	00080e81 	.word	0x00080e81

00082048 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
   82048:	b510      	push	{r4, lr}
   8204a:	4604      	mov	r4, r0
portBASE_TYPE xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   8204c:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   8204e:	6120      	str	r0, [r4, #16]

	if( xNextExpiryTime <= xTimeNow )
   82050:	4291      	cmp	r1, r2
   82052:	d80a      	bhi.n	8206a <prvInsertTimerInActiveList+0x22>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
   82054:	1ad2      	subs	r2, r2, r3
   82056:	6981      	ldr	r1, [r0, #24]
   82058:	428a      	cmp	r2, r1
   8205a:	d211      	bcs.n	82080 <prvInsertTimerInActiveList+0x38>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   8205c:	4b0a      	ldr	r3, [pc, #40]	; (82088 <prvInsertTimerInActiveList+0x40>)
   8205e:	6818      	ldr	r0, [r3, #0]
   82060:	1d21      	adds	r1, r4, #4
   82062:	4b0a      	ldr	r3, [pc, #40]	; (8208c <prvInsertTimerInActiveList+0x44>)
   82064:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
   82066:	2000      	movs	r0, #0
   82068:	bd10      	pop	{r4, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   8206a:	429a      	cmp	r2, r3
   8206c:	d201      	bcs.n	82072 <prvInsertTimerInActiveList+0x2a>
   8206e:	4299      	cmp	r1, r3
   82070:	d208      	bcs.n	82084 <prvInsertTimerInActiveList+0x3c>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   82072:	4b07      	ldr	r3, [pc, #28]	; (82090 <prvInsertTimerInActiveList+0x48>)
   82074:	6818      	ldr	r0, [r3, #0]
   82076:	1d21      	adds	r1, r4, #4
   82078:	4b04      	ldr	r3, [pc, #16]	; (8208c <prvInsertTimerInActiveList+0x44>)
   8207a:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
   8207c:	2000      	movs	r0, #0
   8207e:	bd10      	pop	{r4, pc}
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   82080:	2001      	movs	r0, #1
   82082:	bd10      	pop	{r4, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   82084:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
   82086:	bd10      	pop	{r4, pc}
   82088:	2007aca8 	.word	0x2007aca8
   8208c:	00080e9d 	.word	0x00080e9d
   82090:	2007ac74 	.word	0x2007ac74

00082094 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   82094:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   82096:	4b0d      	ldr	r3, [pc, #52]	; (820cc <prvCheckForValidListAndQueue+0x38>)
   82098:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   8209a:	4b0d      	ldr	r3, [pc, #52]	; (820d0 <prvCheckForValidListAndQueue+0x3c>)
   8209c:	681b      	ldr	r3, [r3, #0]
   8209e:	b98b      	cbnz	r3, 820c4 <prvCheckForValidListAndQueue+0x30>
		{
			vListInitialise( &xActiveTimerList1 );
   820a0:	4d0c      	ldr	r5, [pc, #48]	; (820d4 <prvCheckForValidListAndQueue+0x40>)
   820a2:	4628      	mov	r0, r5
   820a4:	4e0c      	ldr	r6, [pc, #48]	; (820d8 <prvCheckForValidListAndQueue+0x44>)
   820a6:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
   820a8:	4c0c      	ldr	r4, [pc, #48]	; (820dc <prvCheckForValidListAndQueue+0x48>)
   820aa:	4620      	mov	r0, r4
   820ac:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
   820ae:	4b0c      	ldr	r3, [pc, #48]	; (820e0 <prvCheckForValidListAndQueue+0x4c>)
   820b0:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   820b2:	4b0c      	ldr	r3, [pc, #48]	; (820e4 <prvCheckForValidListAndQueue+0x50>)
   820b4:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
   820b6:	2005      	movs	r0, #5
   820b8:	210c      	movs	r1, #12
   820ba:	2200      	movs	r2, #0
   820bc:	4b0a      	ldr	r3, [pc, #40]	; (820e8 <prvCheckForValidListAndQueue+0x54>)
   820be:	4798      	blx	r3
   820c0:	4b03      	ldr	r3, [pc, #12]	; (820d0 <prvCheckForValidListAndQueue+0x3c>)
   820c2:	6018      	str	r0, [r3, #0]
		}
	}
	taskEXIT_CRITICAL();
   820c4:	4b09      	ldr	r3, [pc, #36]	; (820ec <prvCheckForValidListAndQueue+0x58>)
   820c6:	4798      	blx	r3
   820c8:	bd70      	pop	{r4, r5, r6, pc}
   820ca:	bf00      	nop
   820cc:	00080f71 	.word	0x00080f71
   820d0:	2007aca4 	.word	0x2007aca4
   820d4:	2007ac78 	.word	0x2007ac78
   820d8:	00080e61 	.word	0x00080e61
   820dc:	2007ac8c 	.word	0x2007ac8c
   820e0:	2007ac74 	.word	0x2007ac74
   820e4:	2007aca8 	.word	0x2007aca8
   820e8:	00081349 	.word	0x00081349
   820ec:	00080f91 	.word	0x00080f91

000820f0 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
   820f0:	b510      	push	{r4, lr}
   820f2:	b084      	sub	sp, #16

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   820f4:	4b0b      	ldr	r3, [pc, #44]	; (82124 <xTimerCreateTimerTask+0x34>)
   820f6:	4798      	blx	r3

	if( xTimerQueue != NULL )
   820f8:	4b0b      	ldr	r3, [pc, #44]	; (82128 <xTimerCreateTimerTask+0x38>)
   820fa:	681b      	ldr	r3, [r3, #0]
   820fc:	b163      	cbz	r3, 82118 <xTimerCreateTimerTask+0x28>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
   820fe:	2304      	movs	r3, #4
   82100:	9300      	str	r3, [sp, #0]
   82102:	2300      	movs	r3, #0
   82104:	9301      	str	r3, [sp, #4]
   82106:	9302      	str	r3, [sp, #8]
   82108:	9303      	str	r3, [sp, #12]
   8210a:	4808      	ldr	r0, [pc, #32]	; (8212c <xTimerCreateTimerTask+0x3c>)
   8210c:	4908      	ldr	r1, [pc, #32]	; (82130 <xTimerCreateTimerTask+0x40>)
   8210e:	f44f 7282 	mov.w	r2, #260	; 0x104
   82112:	4c08      	ldr	r4, [pc, #32]	; (82134 <xTimerCreateTimerTask+0x44>)
   82114:	47a0      	blx	r4
		}
		#endif
	}

	configASSERT( xReturn );
   82116:	b918      	cbnz	r0, 82120 <xTimerCreateTimerTask+0x30>
   82118:	4b07      	ldr	r3, [pc, #28]	; (82138 <xTimerCreateTimerTask+0x48>)
   8211a:	4798      	blx	r3
   8211c:	bf00      	nop
   8211e:	e7fd      	b.n	8211c <xTimerCreateTimerTask+0x2c>
	return xReturn;
}
   82120:	b004      	add	sp, #16
   82122:	bd10      	pop	{r4, pc}
   82124:	00082095 	.word	0x00082095
   82128:	2007aca4 	.word	0x2007aca4
   8212c:	00082245 	.word	0x00082245
   82130:	000881c0 	.word	0x000881c0
   82134:	0008174d 	.word	0x0008174d
   82138:	00080f61 	.word	0x00080f61

0008213c <xTimerGenericCommand>:
	return ( xTimerHandle ) pxNewTimer;
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
   8213c:	b510      	push	{r4, lr}
   8213e:	b084      	sub	sp, #16
portBASE_TYPE xReturn = pdFAIL;
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   82140:	4c0f      	ldr	r4, [pc, #60]	; (82180 <xTimerGenericCommand+0x44>)
   82142:	6824      	ldr	r4, [r4, #0]
   82144:	b1c4      	cbz	r4, 82178 <xTimerGenericCommand+0x3c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   82146:	9101      	str	r1, [sp, #4]
		xMessage.xMessageValue = xOptionalValue;
   82148:	9202      	str	r2, [sp, #8]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
   8214a:	9003      	str	r0, [sp, #12]

		if( pxHigherPriorityTaskWoken == NULL )
   8214c:	b96b      	cbnz	r3, 8216a <xTimerGenericCommand+0x2e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   8214e:	4b0d      	ldr	r3, [pc, #52]	; (82184 <xTimerGenericCommand+0x48>)
   82150:	4798      	blx	r3
   82152:	2801      	cmp	r0, #1
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
   82154:	4b0a      	ldr	r3, [pc, #40]	; (82180 <xTimerGenericCommand+0x44>)
   82156:	6818      	ldr	r0, [r3, #0]
   82158:	a901      	add	r1, sp, #4
   8215a:	bf07      	ittee	eq
   8215c:	9a06      	ldreq	r2, [sp, #24]
   8215e:	2300      	moveq	r3, #0
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   82160:	2200      	movne	r2, #0
   82162:	4613      	movne	r3, r2
   82164:	4c08      	ldr	r4, [pc, #32]	; (82188 <xTimerGenericCommand+0x4c>)
   82166:	47a0      	blx	r4
   82168:	e007      	b.n	8217a <xTimerGenericCommand+0x3e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   8216a:	4620      	mov	r0, r4
   8216c:	a901      	add	r1, sp, #4
   8216e:	461a      	mov	r2, r3
   82170:	2300      	movs	r3, #0
   82172:	4c06      	ldr	r4, [pc, #24]	; (8218c <xTimerGenericCommand+0x50>)
   82174:	47a0      	blx	r4
   82176:	e000      	b.n	8217a <xTimerGenericCommand+0x3e>
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
portBASE_TYPE xReturn = pdFAIL;
   82178:	2000      	movs	r0, #0

		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}

	return xReturn;
}
   8217a:	b004      	add	sp, #16
   8217c:	bd10      	pop	{r4, pc}
   8217e:	bf00      	nop
   82180:	2007aca4 	.word	0x2007aca4
   82184:	00081f5d 	.word	0x00081f5d
   82188:	000813a1 	.word	0x000813a1
   8218c:	000814bd 	.word	0x000814bd

00082190 <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
   82190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   82194:	b082      	sub	sp, #8
   82196:	4681      	mov	r9, r0
portTickType xTimeNow;
PRIVILEGED_DATA static portTickType xLastTime = ( portTickType ) 0U;

	xTimeNow = xTaskGetTickCount();
   82198:	4b22      	ldr	r3, [pc, #136]	; (82224 <prvSampleTimeNow+0x94>)
   8219a:	4798      	blx	r3
   8219c:	4680      	mov	r8, r0

	if( xTimeNow < xLastTime )
   8219e:	4b22      	ldr	r3, [pc, #136]	; (82228 <prvSampleTimeNow+0x98>)
   821a0:	681b      	ldr	r3, [r3, #0]
   821a2:	4298      	cmp	r0, r3
   821a4:	d234      	bcs.n	82210 <prvSampleTimeNow+0x80>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   821a6:	4e21      	ldr	r6, [pc, #132]	; (8222c <prvSampleTimeNow+0x9c>)
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
		uxListRemove( &( pxTimer->xTimerListItem ) );
   821a8:	4f21      	ldr	r7, [pc, #132]	; (82230 <prvSampleTimeNow+0xa0>)
   821aa:	e024      	b.n	821f6 <prvSampleTimeNow+0x66>
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   821ac:	68da      	ldr	r2, [r3, #12]
   821ae:	f8d2 a000 	ldr.w	sl, [r2]

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   821b2:	68db      	ldr	r3, [r3, #12]
   821b4:	68dc      	ldr	r4, [r3, #12]
		uxListRemove( &( pxTimer->xTimerListItem ) );
   821b6:	1d25      	adds	r5, r4, #4
   821b8:	4628      	mov	r0, r5
   821ba:	47b8      	blx	r7

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   821bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   821be:	4620      	mov	r0, r4
   821c0:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   821c2:	69e3      	ldr	r3, [r4, #28]
   821c4:	2b01      	cmp	r3, #1
   821c6:	d116      	bne.n	821f6 <prvSampleTimeNow+0x66>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   821c8:	69a3      	ldr	r3, [r4, #24]
   821ca:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
   821cc:	4553      	cmp	r3, sl
   821ce:	d906      	bls.n	821de <prvSampleTimeNow+0x4e>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   821d0:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   821d2:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   821d4:	6830      	ldr	r0, [r6, #0]
   821d6:	4629      	mov	r1, r5
   821d8:	4b16      	ldr	r3, [pc, #88]	; (82234 <prvSampleTimeNow+0xa4>)
   821da:	4798      	blx	r3
   821dc:	e00b      	b.n	821f6 <prvSampleTimeNow+0x66>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   821de:	2300      	movs	r3, #0
   821e0:	9300      	str	r3, [sp, #0]
   821e2:	4620      	mov	r0, r4
   821e4:	4619      	mov	r1, r3
   821e6:	4652      	mov	r2, sl
   821e8:	4c13      	ldr	r4, [pc, #76]	; (82238 <prvSampleTimeNow+0xa8>)
   821ea:	47a0      	blx	r4
				configASSERT( xResult );
   821ec:	b918      	cbnz	r0, 821f6 <prvSampleTimeNow+0x66>
   821ee:	4b13      	ldr	r3, [pc, #76]	; (8223c <prvSampleTimeNow+0xac>)
   821f0:	4798      	blx	r3
   821f2:	bf00      	nop
   821f4:	e7fd      	b.n	821f2 <prvSampleTimeNow+0x62>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   821f6:	6833      	ldr	r3, [r6, #0]
   821f8:	681a      	ldr	r2, [r3, #0]
   821fa:	2a00      	cmp	r2, #0
   821fc:	d1d6      	bne.n	821ac <prvSampleTimeNow+0x1c>
			}
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
   821fe:	4a10      	ldr	r2, [pc, #64]	; (82240 <prvSampleTimeNow+0xb0>)
   82200:	6811      	ldr	r1, [r2, #0]
   82202:	480a      	ldr	r0, [pc, #40]	; (8222c <prvSampleTimeNow+0x9c>)
   82204:	6001      	str	r1, [r0, #0]
	pxOverflowTimerList = pxTemp;
   82206:	6013      	str	r3, [r2, #0]
	xTimeNow = xTaskGetTickCount();

	if( xTimeNow < xLastTime )
	{
		prvSwitchTimerLists( xLastTime );
		*pxTimerListsWereSwitched = pdTRUE;
   82208:	2301      	movs	r3, #1
   8220a:	f8c9 3000 	str.w	r3, [r9]
   8220e:	e002      	b.n	82216 <prvSampleTimeNow+0x86>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   82210:	2300      	movs	r3, #0
   82212:	f8c9 3000 	str.w	r3, [r9]
	}

	xLastTime = xTimeNow;
   82216:	4b04      	ldr	r3, [pc, #16]	; (82228 <prvSampleTimeNow+0x98>)
   82218:	f8c3 8000 	str.w	r8, [r3]

	return xTimeNow;
}
   8221c:	4640      	mov	r0, r8
   8221e:	b002      	add	sp, #8
   82220:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   82224:	000819cd 	.word	0x000819cd
   82228:	2007aca0 	.word	0x2007aca0
   8222c:	2007ac74 	.word	0x2007ac74
   82230:	00080ed9 	.word	0x00080ed9
   82234:	00080e9d 	.word	0x00080e9d
   82238:	0008213d 	.word	0x0008213d
   8223c:	00080f61 	.word	0x00080f61
   82240:	2007aca8 	.word	0x2007aca8

00082244 <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   82244:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   82248:	b087      	sub	sp, #28
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
   8224a:	4d4d      	ldr	r5, [pc, #308]	; (82380 <prvTimerTask+0x13c>)
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
	uxListRemove( &( pxTimer->xTimerListItem ) );
   8224c:	f8df 8160 	ldr.w	r8, [pc, #352]	; 823b0 <prvTimerTask+0x16c>
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   82250:	4b4c      	ldr	r3, [pc, #304]	; (82384 <prvTimerTask+0x140>)
   82252:	681b      	ldr	r3, [r3, #0]
   82254:	681a      	ldr	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   82256:	2a00      	cmp	r2, #0
   82258:	f000 8087 	beq.w	8236a <prvTimerTask+0x126>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   8225c:	68db      	ldr	r3, [r3, #12]
   8225e:	681e      	ldr	r6, [r3, #0]
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
   82260:	4b49      	ldr	r3, [pc, #292]	; (82388 <prvTimerTask+0x144>)
   82262:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   82264:	a803      	add	r0, sp, #12
   82266:	4b49      	ldr	r3, [pc, #292]	; (8238c <prvTimerTask+0x148>)
   82268:	4798      	blx	r3
   8226a:	4607      	mov	r7, r0
		if( xTimerListsWereSwitched == pdFALSE )
   8226c:	9b03      	ldr	r3, [sp, #12]
   8226e:	2b00      	cmp	r3, #0
   82270:	d130      	bne.n	822d4 <prvTimerTask+0x90>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   82272:	4286      	cmp	r6, r0
   82274:	d824      	bhi.n	822c0 <prvTimerTask+0x7c>
			{
				xTaskResumeAll();
   82276:	4b46      	ldr	r3, [pc, #280]	; (82390 <prvTimerTask+0x14c>)
   82278:	4798      	blx	r3
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   8227a:	4b42      	ldr	r3, [pc, #264]	; (82384 <prvTimerTask+0x140>)
   8227c:	681b      	ldr	r3, [r3, #0]
   8227e:	68db      	ldr	r3, [r3, #12]
   82280:	68dc      	ldr	r4, [r3, #12]
	uxListRemove( &( pxTimer->xTimerListItem ) );
   82282:	1d20      	adds	r0, r4, #4
   82284:	47c0      	blx	r8
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   82286:	69e3      	ldr	r3, [r4, #28]
   82288:	2b01      	cmp	r3, #1
   8228a:	d114      	bne.n	822b6 <prvTimerTask+0x72>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
   8228c:	69a1      	ldr	r1, [r4, #24]
   8228e:	4620      	mov	r0, r4
   82290:	4431      	add	r1, r6
   82292:	463a      	mov	r2, r7
   82294:	4633      	mov	r3, r6
   82296:	4f3f      	ldr	r7, [pc, #252]	; (82394 <prvTimerTask+0x150>)
   82298:	47b8      	blx	r7
   8229a:	2801      	cmp	r0, #1
   8229c:	d10b      	bne.n	822b6 <prvTimerTask+0x72>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   8229e:	2300      	movs	r3, #0
   822a0:	9300      	str	r3, [sp, #0]
   822a2:	4620      	mov	r0, r4
   822a4:	4619      	mov	r1, r3
   822a6:	4632      	mov	r2, r6
   822a8:	4e3b      	ldr	r6, [pc, #236]	; (82398 <prvTimerTask+0x154>)
   822aa:	47b0      	blx	r6
			configASSERT( xResult );
   822ac:	b918      	cbnz	r0, 822b6 <prvTimerTask+0x72>
   822ae:	4b3b      	ldr	r3, [pc, #236]	; (8239c <prvTimerTask+0x158>)
   822b0:	4798      	blx	r3
   822b2:	bf00      	nop
   822b4:	e7fd      	b.n	822b2 <prvTimerTask+0x6e>
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   822b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   822b8:	4620      	mov	r0, r4
   822ba:	4798      	blx	r3
   822bc:	e00c      	b.n	822d8 <prvTimerTask+0x94>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
   822be:	2600      	movs	r6, #0
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
   822c0:	6828      	ldr	r0, [r5, #0]
   822c2:	1bf1      	subs	r1, r6, r7
   822c4:	4b36      	ldr	r3, [pc, #216]	; (823a0 <prvTimerTask+0x15c>)
   822c6:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
   822c8:	4b31      	ldr	r3, [pc, #196]	; (82390 <prvTimerTask+0x14c>)
   822ca:	4798      	blx	r3
   822cc:	b920      	cbnz	r0, 822d8 <prvTimerTask+0x94>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
   822ce:	4b35      	ldr	r3, [pc, #212]	; (823a4 <prvTimerTask+0x160>)
   822d0:	4798      	blx	r3
   822d2:	e001      	b.n	822d8 <prvTimerTask+0x94>
				}
			}
		}
		else
		{
			xTaskResumeAll();
   822d4:	4b2e      	ldr	r3, [pc, #184]	; (82390 <prvTimerTask+0x14c>)
   822d6:	4798      	blx	r3
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   822d8:	a802      	add	r0, sp, #8
   822da:	4b2c      	ldr	r3, [pc, #176]	; (8238c <prvTimerTask+0x148>)
   822dc:	4798      	blx	r3
   822de:	4607      	mov	r7, r0

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
   822e0:	4e31      	ldr	r6, [pc, #196]	; (823a8 <prvTimerTask+0x164>)
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   822e2:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 82394 <prvTimerTask+0x150>
   822e6:	e038      	b.n	8235a <prvTimerTask+0x116>
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
	{
		pxTimer = xMessage.pxTimer;
   822e8:	9c05      	ldr	r4, [sp, #20]

		/* Is the timer already in a list of active timers?  When the command
		is trmCOMMAND_PROCESS_TIMER_OVERFLOW, the timer will be NULL as the
		command is to the task rather than to an individual timer. */
		if( pxTimer != NULL )
   822ea:	b11c      	cbz	r4, 822f4 <prvTimerTask+0xb0>
		{
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
   822ec:	6961      	ldr	r1, [r4, #20]
   822ee:	b109      	cbz	r1, 822f4 <prvTimerTask+0xb0>
			{
				/* The timer is in a list, remove it. */
				uxListRemove( &( pxTimer->xTimerListItem ) );
   822f0:	1d20      	adds	r0, r4, #4
   822f2:	47c0      	blx	r8
			}
		}

		traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.xMessageValue );

		switch( xMessage.xMessageID )
   822f4:	9903      	ldr	r1, [sp, #12]
   822f6:	2902      	cmp	r1, #2
   822f8:	d01f      	beq.n	8233a <prvTimerTask+0xf6>
   822fa:	2903      	cmp	r1, #3
   822fc:	d02a      	beq.n	82354 <prvTimerTask+0x110>
   822fe:	2900      	cmp	r1, #0
   82300:	d12b      	bne.n	8235a <prvTimerTask+0x116>
		{
			case tmrCOMMAND_START :
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
   82302:	9b04      	ldr	r3, [sp, #16]
   82304:	69a1      	ldr	r1, [r4, #24]
   82306:	4620      	mov	r0, r4
   82308:	4419      	add	r1, r3
   8230a:	463a      	mov	r2, r7
   8230c:	47c8      	blx	r9
   8230e:	2801      	cmp	r0, #1
   82310:	d123      	bne.n	8235a <prvTimerTask+0x116>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   82312:	6a63      	ldr	r3, [r4, #36]	; 0x24
   82314:	4620      	mov	r0, r4
   82316:	4798      	blx	r3

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   82318:	69e3      	ldr	r3, [r4, #28]
   8231a:	2b01      	cmp	r3, #1
   8231c:	d11d      	bne.n	8235a <prvTimerTask+0x116>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   8231e:	69a2      	ldr	r2, [r4, #24]
   82320:	2300      	movs	r3, #0
   82322:	9300      	str	r3, [sp, #0]
   82324:	4620      	mov	r0, r4
   82326:	4619      	mov	r1, r3
   82328:	9c04      	ldr	r4, [sp, #16]
   8232a:	4422      	add	r2, r4
   8232c:	4c1a      	ldr	r4, [pc, #104]	; (82398 <prvTimerTask+0x154>)
   8232e:	47a0      	blx	r4
						configASSERT( xResult );
   82330:	b998      	cbnz	r0, 8235a <prvTimerTask+0x116>
   82332:	4b1a      	ldr	r3, [pc, #104]	; (8239c <prvTimerTask+0x158>)
   82334:	4798      	blx	r3
   82336:	bf00      	nop
   82338:	e7fd      	b.n	82336 <prvTimerTask+0xf2>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
   8233a:	9904      	ldr	r1, [sp, #16]
   8233c:	61a1      	str	r1, [r4, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   8233e:	b919      	cbnz	r1, 82348 <prvTimerTask+0x104>
   82340:	4b16      	ldr	r3, [pc, #88]	; (8239c <prvTimerTask+0x158>)
   82342:	4798      	blx	r3
   82344:	bf00      	nop
   82346:	e7fd      	b.n	82344 <prvTimerTask+0x100>
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   82348:	4620      	mov	r0, r4
   8234a:	4439      	add	r1, r7
   8234c:	463a      	mov	r2, r7
   8234e:	463b      	mov	r3, r7
   82350:	47c8      	blx	r9
   82352:	e002      	b.n	8235a <prvTimerTask+0x116>
				break;

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
   82354:	4620      	mov	r0, r4
   82356:	4b15      	ldr	r3, [pc, #84]	; (823ac <prvTimerTask+0x168>)
   82358:	4798      	blx	r3

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
   8235a:	6828      	ldr	r0, [r5, #0]
   8235c:	a903      	add	r1, sp, #12
   8235e:	2200      	movs	r2, #0
   82360:	4613      	mov	r3, r2
   82362:	47b0      	blx	r6
   82364:	2800      	cmp	r0, #0
   82366:	d1bf      	bne.n	822e8 <prvTimerTask+0xa4>
   82368:	e772      	b.n	82250 <prvTimerTask+0xc>
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
   8236a:	4b07      	ldr	r3, [pc, #28]	; (82388 <prvTimerTask+0x144>)
   8236c:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   8236e:	a803      	add	r0, sp, #12
   82370:	4b06      	ldr	r3, [pc, #24]	; (8238c <prvTimerTask+0x148>)
   82372:	4798      	blx	r3
   82374:	4607      	mov	r7, r0
		if( xTimerListsWereSwitched == pdFALSE )
   82376:	9b03      	ldr	r3, [sp, #12]
   82378:	2b00      	cmp	r3, #0
   8237a:	d0a0      	beq.n	822be <prvTimerTask+0x7a>
   8237c:	e7aa      	b.n	822d4 <prvTimerTask+0x90>
   8237e:	bf00      	nop
   82380:	2007aca4 	.word	0x2007aca4
   82384:	2007ac74 	.word	0x2007ac74
   82388:	000819bd 	.word	0x000819bd
   8238c:	00082191 	.word	0x00082191
   82390:	00081b0d 	.word	0x00081b0d
   82394:	00082049 	.word	0x00082049
   82398:	0008213d 	.word	0x0008213d
   8239c:	00080f61 	.word	0x00080f61
   823a0:	000816a9 	.word	0x000816a9
   823a4:	00080f51 	.word	0x00080f51
   823a8:	0008154d 	.word	0x0008154d
   823ac:	00081181 	.word	0x00081181
   823b0:	00080ed9 	.word	0x00080ed9

000823b4 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   823b4:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   823b6:	480e      	ldr	r0, [pc, #56]	; (823f0 <sysclk_init+0x3c>)
   823b8:	4b0e      	ldr	r3, [pc, #56]	; (823f4 <sysclk_init+0x40>)
   823ba:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   823bc:	2000      	movs	r0, #0
   823be:	213e      	movs	r1, #62	; 0x3e
   823c0:	4b0d      	ldr	r3, [pc, #52]	; (823f8 <sysclk_init+0x44>)
   823c2:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   823c4:	4c0d      	ldr	r4, [pc, #52]	; (823fc <sysclk_init+0x48>)
   823c6:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   823c8:	2800      	cmp	r0, #0
   823ca:	d0fc      	beq.n	823c6 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   823cc:	4b0c      	ldr	r3, [pc, #48]	; (82400 <sysclk_init+0x4c>)
   823ce:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   823d0:	4a0c      	ldr	r2, [pc, #48]	; (82404 <sysclk_init+0x50>)
   823d2:	4b0d      	ldr	r3, [pc, #52]	; (82408 <sysclk_init+0x54>)
   823d4:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   823d6:	4c0d      	ldr	r4, [pc, #52]	; (8240c <sysclk_init+0x58>)
   823d8:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   823da:	2800      	cmp	r0, #0
   823dc:	d0fc      	beq.n	823d8 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   823de:	2010      	movs	r0, #16
   823e0:	4b0b      	ldr	r3, [pc, #44]	; (82410 <sysclk_init+0x5c>)
   823e2:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   823e4:	4b0b      	ldr	r3, [pc, #44]	; (82414 <sysclk_init+0x60>)
   823e6:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   823e8:	4801      	ldr	r0, [pc, #4]	; (823f0 <sysclk_init+0x3c>)
   823ea:	4b02      	ldr	r3, [pc, #8]	; (823f4 <sysclk_init+0x40>)
   823ec:	4798      	blx	r3
   823ee:	bd10      	pop	{r4, pc}
   823f0:	0501bd00 	.word	0x0501bd00
   823f4:	200700b1 	.word	0x200700b1
   823f8:	000827cd 	.word	0x000827cd
   823fc:	00082821 	.word	0x00082821
   82400:	00082831 	.word	0x00082831
   82404:	200d3f01 	.word	0x200d3f01
   82408:	400e0600 	.word	0x400e0600
   8240c:	00082841 	.word	0x00082841
   82410:	00082769 	.word	0x00082769
   82414:	0008295d 	.word	0x0008295d

00082418 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   82418:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   8241a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8241e:	4b1a      	ldr	r3, [pc, #104]	; (82488 <board_init+0x70>)
   82420:	605a      	str	r2, [r3, #4]
   82422:	200b      	movs	r0, #11
   82424:	4c19      	ldr	r4, [pc, #100]	; (8248c <board_init+0x74>)
   82426:	47a0      	blx	r4
   82428:	200c      	movs	r0, #12
   8242a:	47a0      	blx	r4
   8242c:	200d      	movs	r0, #13
   8242e:	47a0      	blx	r4
   82430:	200e      	movs	r0, #14
   82432:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   82434:	203b      	movs	r0, #59	; 0x3b
   82436:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8243a:	4c15      	ldr	r4, [pc, #84]	; (82490 <board_init+0x78>)
   8243c:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   8243e:	2055      	movs	r0, #85	; 0x55
   82440:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   82444:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   82446:	2056      	movs	r0, #86	; 0x56
   82448:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8244c:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   8244e:	2068      	movs	r0, #104	; 0x68
   82450:	4910      	ldr	r1, [pc, #64]	; (82494 <board_init+0x7c>)
   82452:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   82454:	205c      	movs	r0, #92	; 0x5c
   82456:	4910      	ldr	r1, [pc, #64]	; (82498 <board_init+0x80>)
   82458:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   8245a:	4810      	ldr	r0, [pc, #64]	; (8249c <board_init+0x84>)
   8245c:	f44f 7140 	mov.w	r1, #768	; 0x300
   82460:	4a0f      	ldr	r2, [pc, #60]	; (824a0 <board_init+0x88>)
   82462:	4b10      	ldr	r3, [pc, #64]	; (824a4 <board_init+0x8c>)
   82464:	4798      	blx	r3
		gpio_configure_pin(SPI1_NPCS3_GPIO, SPI1_NPCS3_FLAGS);
#   endif
#endif

#ifdef CONF_BOARD_TWI0
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
   82466:	2011      	movs	r0, #17
   82468:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8246c:	47a0      	blx	r4
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
   8246e:	2012      	movs	r0, #18
   82470:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82474:	47a0      	blx	r4
#endif

#ifdef CONF_BOARD_TWI1
	gpio_configure_pin(TWI1_DATA_GPIO, TWI1_DATA_FLAGS);
   82476:	202c      	movs	r0, #44	; 0x2c
   82478:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8247c:	47a0      	blx	r4
	gpio_configure_pin(TWI1_CLK_GPIO, TWI1_CLK_FLAGS);
   8247e:	202d      	movs	r0, #45	; 0x2d
   82480:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82484:	47a0      	blx	r4
   82486:	bd10      	pop	{r4, pc}
   82488:	400e1a50 	.word	0x400e1a50
   8248c:	00082851 	.word	0x00082851
   82490:	0008254d 	.word	0x0008254d
   82494:	28000079 	.word	0x28000079
   82498:	28000001 	.word	0x28000001
   8249c:	400e0e00 	.word	0x400e0e00
   824a0:	08000001 	.word	0x08000001
   824a4:	00082621 	.word	0x00082621

000824a8 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   824a8:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   824aa:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   824ae:	d016      	beq.n	824de <pio_set_peripheral+0x36>
   824b0:	d804      	bhi.n	824bc <pio_set_peripheral+0x14>
   824b2:	b1c1      	cbz	r1, 824e6 <pio_set_peripheral+0x3e>
   824b4:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   824b8:	d00a      	beq.n	824d0 <pio_set_peripheral+0x28>
   824ba:	e013      	b.n	824e4 <pio_set_peripheral+0x3c>
   824bc:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   824c0:	d011      	beq.n	824e6 <pio_set_peripheral+0x3e>
   824c2:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   824c6:	d00e      	beq.n	824e6 <pio_set_peripheral+0x3e>
   824c8:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   824cc:	d10a      	bne.n	824e4 <pio_set_peripheral+0x3c>
   824ce:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   824d0:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   824d2:	6f01      	ldr	r1, [r0, #112]	; 0x70
   824d4:	400b      	ands	r3, r1
   824d6:	ea23 0302 	bic.w	r3, r3, r2
   824da:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   824dc:	e002      	b.n	824e4 <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   824de:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   824e0:	4313      	orrs	r3, r2
   824e2:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   824e4:	6042      	str	r2, [r0, #4]
   824e6:	4770      	bx	lr

000824e8 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   824e8:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   824ea:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   824ee:	bf14      	ite	ne
   824f0:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   824f2:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   824f4:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   824f8:	bf14      	ite	ne
   824fa:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   824fc:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   824fe:	f012 0f02 	tst.w	r2, #2
   82502:	d002      	beq.n	8250a <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   82504:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   82508:	e004      	b.n	82514 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   8250a:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   8250e:	bf18      	it	ne
   82510:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   82514:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   82516:	6001      	str	r1, [r0, #0]
   82518:	4770      	bx	lr
   8251a:	bf00      	nop

0008251c <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   8251c:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   8251e:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   82520:	9c01      	ldr	r4, [sp, #4]
   82522:	b10c      	cbz	r4, 82528 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   82524:	6641      	str	r1, [r0, #100]	; 0x64
   82526:	e000      	b.n	8252a <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   82528:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   8252a:	b10b      	cbz	r3, 82530 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   8252c:	6501      	str	r1, [r0, #80]	; 0x50
   8252e:	e000      	b.n	82532 <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   82530:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   82532:	b10a      	cbz	r2, 82538 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   82534:	6301      	str	r1, [r0, #48]	; 0x30
   82536:	e000      	b.n	8253a <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   82538:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   8253a:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   8253c:	6001      	str	r1, [r0, #0]
}
   8253e:	f85d 4b04 	ldr.w	r4, [sp], #4
   82542:	4770      	bx	lr

00082544 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   82544:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   82546:	4770      	bx	lr

00082548 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   82548:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   8254a:	4770      	bx	lr

0008254c <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   8254c:	b570      	push	{r4, r5, r6, lr}
   8254e:	b082      	sub	sp, #8
   82550:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   82552:	0944      	lsrs	r4, r0, #5
   82554:	f504 1400 	add.w	r4, r4, #2097152	; 0x200000
   82558:	f204 7407 	addw	r4, r4, #1799	; 0x707
   8255c:	0266      	lsls	r6, r4, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   8255e:	f001 44f0 	and.w	r4, r1, #2013265920	; 0x78000000
   82562:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   82566:	d030      	beq.n	825ca <pio_configure_pin+0x7e>
   82568:	d806      	bhi.n	82578 <pio_configure_pin+0x2c>
   8256a:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   8256e:	d00a      	beq.n	82586 <pio_configure_pin+0x3a>
   82570:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   82574:	d018      	beq.n	825a8 <pio_configure_pin+0x5c>
   82576:	e049      	b.n	8260c <pio_configure_pin+0xc0>
   82578:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   8257c:	d030      	beq.n	825e0 <pio_configure_pin+0x94>
   8257e:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   82582:	d02d      	beq.n	825e0 <pio_configure_pin+0x94>
   82584:	e042      	b.n	8260c <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   82586:	f000 001f 	and.w	r0, r0, #31
   8258a:	2401      	movs	r4, #1
   8258c:	4084      	lsls	r4, r0
   8258e:	4630      	mov	r0, r6
   82590:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82594:	4622      	mov	r2, r4
   82596:	4b1f      	ldr	r3, [pc, #124]	; (82614 <pio_configure_pin+0xc8>)
   82598:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8259a:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   8259e:	bf14      	ite	ne
   825a0:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   825a2:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   825a4:	2001      	movs	r0, #1
   825a6:	e032      	b.n	8260e <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   825a8:	f000 001f 	and.w	r0, r0, #31
   825ac:	2401      	movs	r4, #1
   825ae:	4084      	lsls	r4, r0
   825b0:	4630      	mov	r0, r6
   825b2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   825b6:	4622      	mov	r2, r4
   825b8:	4b16      	ldr	r3, [pc, #88]	; (82614 <pio_configure_pin+0xc8>)
   825ba:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   825bc:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   825c0:	bf14      	ite	ne
   825c2:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   825c4:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   825c6:	2001      	movs	r0, #1
   825c8:	e021      	b.n	8260e <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   825ca:	f000 011f 	and.w	r1, r0, #31
   825ce:	2401      	movs	r4, #1
   825d0:	4630      	mov	r0, r6
   825d2:	fa04 f101 	lsl.w	r1, r4, r1
   825d6:	462a      	mov	r2, r5
   825d8:	4b0f      	ldr	r3, [pc, #60]	; (82618 <pio_configure_pin+0xcc>)
   825da:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   825dc:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   825de:	e016      	b.n	8260e <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   825e0:	f000 011f 	and.w	r1, r0, #31
   825e4:	2401      	movs	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   825e6:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   825ea:	ea05 0304 	and.w	r3, r5, r4
   825ee:	9300      	str	r3, [sp, #0]
   825f0:	4630      	mov	r0, r6
   825f2:	fa04 f101 	lsl.w	r1, r4, r1
   825f6:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   825fa:	bf14      	ite	ne
   825fc:	2200      	movne	r2, #0
   825fe:	2201      	moveq	r2, #1
   82600:	f3c5 0380 	ubfx	r3, r5, #2, #1
   82604:	4d05      	ldr	r5, [pc, #20]	; (8261c <pio_configure_pin+0xd0>)
   82606:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
   82608:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   8260a:	e000      	b.n	8260e <pio_configure_pin+0xc2>

	default:
		return 0;
   8260c:	2000      	movs	r0, #0
	}

	return 1;
}
   8260e:	b002      	add	sp, #8
   82610:	bd70      	pop	{r4, r5, r6, pc}
   82612:	bf00      	nop
   82614:	000824a9 	.word	0x000824a9
   82618:	000824e9 	.word	0x000824e9
   8261c:	0008251d 	.word	0x0008251d

00082620 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   82620:	b5f0      	push	{r4, r5, r6, r7, lr}
   82622:	b083      	sub	sp, #12
   82624:	4607      	mov	r7, r0
   82626:	460e      	mov	r6, r1
   82628:	4615      	mov	r5, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   8262a:	f002 44f0 	and.w	r4, r2, #2013265920	; 0x78000000
   8262e:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   82632:	d026      	beq.n	82682 <pio_configure_pin_group+0x62>
   82634:	d806      	bhi.n	82644 <pio_configure_pin_group+0x24>
   82636:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   8263a:	d00a      	beq.n	82652 <pio_configure_pin_group+0x32>
   8263c:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   82640:	d013      	beq.n	8266a <pio_configure_pin_group+0x4a>
   82642:	e034      	b.n	826ae <pio_configure_pin_group+0x8e>
   82644:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   82648:	d01f      	beq.n	8268a <pio_configure_pin_group+0x6a>
   8264a:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   8264e:	d01c      	beq.n	8268a <pio_configure_pin_group+0x6a>
   82650:	e02d      	b.n	826ae <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   82652:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82656:	4632      	mov	r2, r6
   82658:	4b16      	ldr	r3, [pc, #88]	; (826b4 <pio_configure_pin_group+0x94>)
   8265a:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8265c:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   82660:	bf14      	ite	ne
   82662:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   82664:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   82666:	2001      	movs	r0, #1
   82668:	e022      	b.n	826b0 <pio_configure_pin_group+0x90>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   8266a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8266e:	4632      	mov	r2, r6
   82670:	4b10      	ldr	r3, [pc, #64]	; (826b4 <pio_configure_pin_group+0x94>)
   82672:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   82674:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   82678:	bf14      	ite	ne
   8267a:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8267c:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   8267e:	2001      	movs	r0, #1
   82680:	e016      	b.n	826b0 <pio_configure_pin_group+0x90>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   82682:	4b0d      	ldr	r3, [pc, #52]	; (826b8 <pio_configure_pin_group+0x98>)
   82684:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   82686:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   82688:	e012      	b.n	826b0 <pio_configure_pin_group+0x90>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   8268a:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   8268e:	f005 0301 	and.w	r3, r5, #1
   82692:	9300      	str	r3, [sp, #0]
   82694:	4638      	mov	r0, r7
   82696:	4631      	mov	r1, r6
   82698:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   8269c:	bf14      	ite	ne
   8269e:	2200      	movne	r2, #0
   826a0:	2201      	moveq	r2, #1
   826a2:	f3c5 0380 	ubfx	r3, r5, #2, #1
   826a6:	4c05      	ldr	r4, [pc, #20]	; (826bc <pio_configure_pin_group+0x9c>)
   826a8:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   826aa:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   826ac:	e000      	b.n	826b0 <pio_configure_pin_group+0x90>

	default:
		return 0;
   826ae:	2000      	movs	r0, #0
	}

	return 1;
}
   826b0:	b003      	add	sp, #12
   826b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   826b4:	000824a9 	.word	0x000824a9
   826b8:	000824e9 	.word	0x000824e9
   826bc:	0008251d 	.word	0x0008251d

000826c0 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   826c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   826c4:	4604      	mov	r4, r0
   826c6:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   826c8:	4b10      	ldr	r3, [pc, #64]	; (8270c <pio_handler_process+0x4c>)
   826ca:	4798      	blx	r3
   826cc:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   826ce:	4620      	mov	r0, r4
   826d0:	4b0f      	ldr	r3, [pc, #60]	; (82710 <pio_handler_process+0x50>)
   826d2:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   826d4:	4005      	ands	r5, r0
   826d6:	d017      	beq.n	82708 <pio_handler_process+0x48>
   826d8:	4f0e      	ldr	r7, [pc, #56]	; (82714 <pio_handler_process+0x54>)
   826da:	f107 040c 	add.w	r4, r7, #12
   826de:	376c      	adds	r7, #108	; 0x6c
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   826e0:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   826e4:	42b3      	cmp	r3, r6
   826e6:	d10a      	bne.n	826fe <pio_handler_process+0x3e>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   826e8:	f854 1c08 	ldr.w	r1, [r4, #-8]
   826ec:	4229      	tst	r1, r5
   826ee:	d006      	beq.n	826fe <pio_handler_process+0x3e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   826f0:	6823      	ldr	r3, [r4, #0]
   826f2:	4630      	mov	r0, r6
   826f4:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   826f6:	f854 3c08 	ldr.w	r3, [r4, #-8]
   826fa:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   826fe:	42bc      	cmp	r4, r7
   82700:	d002      	beq.n	82708 <pio_handler_process+0x48>
   82702:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   82704:	2d00      	cmp	r5, #0
   82706:	d1eb      	bne.n	826e0 <pio_handler_process+0x20>
   82708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8270c:	00082545 	.word	0x00082545
   82710:	00082549 	.word	0x00082549
   82714:	2007acac 	.word	0x2007acac

00082718 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   82718:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   8271a:	4802      	ldr	r0, [pc, #8]	; (82724 <PIOA_Handler+0xc>)
   8271c:	210b      	movs	r1, #11
   8271e:	4b02      	ldr	r3, [pc, #8]	; (82728 <PIOA_Handler+0x10>)
   82720:	4798      	blx	r3
   82722:	bd08      	pop	{r3, pc}
   82724:	400e0e00 	.word	0x400e0e00
   82728:	000826c1 	.word	0x000826c1

0008272c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   8272c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   8272e:	4802      	ldr	r0, [pc, #8]	; (82738 <PIOB_Handler+0xc>)
   82730:	210c      	movs	r1, #12
   82732:	4b02      	ldr	r3, [pc, #8]	; (8273c <PIOB_Handler+0x10>)
   82734:	4798      	blx	r3
   82736:	bd08      	pop	{r3, pc}
   82738:	400e1000 	.word	0x400e1000
   8273c:	000826c1 	.word	0x000826c1

00082740 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   82740:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   82742:	4802      	ldr	r0, [pc, #8]	; (8274c <PIOC_Handler+0xc>)
   82744:	210d      	movs	r1, #13
   82746:	4b02      	ldr	r3, [pc, #8]	; (82750 <PIOC_Handler+0x10>)
   82748:	4798      	blx	r3
   8274a:	bd08      	pop	{r3, pc}
   8274c:	400e1200 	.word	0x400e1200
   82750:	000826c1 	.word	0x000826c1

00082754 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   82754:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   82756:	4802      	ldr	r0, [pc, #8]	; (82760 <PIOD_Handler+0xc>)
   82758:	210e      	movs	r1, #14
   8275a:	4b02      	ldr	r3, [pc, #8]	; (82764 <PIOD_Handler+0x10>)
   8275c:	4798      	blx	r3
   8275e:	bd08      	pop	{r3, pc}
   82760:	400e1400 	.word	0x400e1400
   82764:	000826c1 	.word	0x000826c1

00082768 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   82768:	4b17      	ldr	r3, [pc, #92]	; (827c8 <pmc_switch_mck_to_pllack+0x60>)
   8276a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   8276c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   82770:	4310      	orrs	r0, r2
   82772:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82774:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82776:	f013 0f08 	tst.w	r3, #8
   8277a:	d109      	bne.n	82790 <pmc_switch_mck_to_pllack+0x28>
   8277c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   82780:	4911      	ldr	r1, [pc, #68]	; (827c8 <pmc_switch_mck_to_pllack+0x60>)
   82782:	e001      	b.n	82788 <pmc_switch_mck_to_pllack+0x20>
			--ul_timeout) {
		if (ul_timeout == 0) {
   82784:	3b01      	subs	r3, #1
   82786:	d019      	beq.n	827bc <pmc_switch_mck_to_pllack+0x54>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82788:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   8278a:	f012 0f08 	tst.w	r2, #8
   8278e:	d0f9      	beq.n	82784 <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   82790:	4b0d      	ldr	r3, [pc, #52]	; (827c8 <pmc_switch_mck_to_pllack+0x60>)
   82792:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   82794:	f022 0203 	bic.w	r2, r2, #3
   82798:	f042 0202 	orr.w	r2, r2, #2
   8279c:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8279e:	6e98      	ldr	r0, [r3, #104]	; 0x68
   827a0:	f010 0008 	ands.w	r0, r0, #8
   827a4:	d10c      	bne.n	827c0 <pmc_switch_mck_to_pllack+0x58>
   827a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
   827aa:	4907      	ldr	r1, [pc, #28]	; (827c8 <pmc_switch_mck_to_pllack+0x60>)
   827ac:	e001      	b.n	827b2 <pmc_switch_mck_to_pllack+0x4a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   827ae:	3b01      	subs	r3, #1
   827b0:	d008      	beq.n	827c4 <pmc_switch_mck_to_pllack+0x5c>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   827b2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   827b4:	f012 0f08 	tst.w	r2, #8
   827b8:	d0f9      	beq.n	827ae <pmc_switch_mck_to_pllack+0x46>
   827ba:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   827bc:	2001      	movs	r0, #1
   827be:	4770      	bx	lr
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   827c0:	2000      	movs	r0, #0
   827c2:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   827c4:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   827c6:	4770      	bx	lr
   827c8:	400e0600 	.word	0x400e0600

000827cc <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   827cc:	b138      	cbz	r0, 827de <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   827ce:	4911      	ldr	r1, [pc, #68]	; (82814 <pmc_switch_mainck_to_xtal+0x48>)
   827d0:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   827d2:	4a11      	ldr	r2, [pc, #68]	; (82818 <pmc_switch_mainck_to_xtal+0x4c>)
   827d4:	401a      	ands	r2, r3
   827d6:	4b11      	ldr	r3, [pc, #68]	; (8281c <pmc_switch_mainck_to_xtal+0x50>)
   827d8:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   827da:	620b      	str	r3, [r1, #32]
   827dc:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   827de:	4a0d      	ldr	r2, [pc, #52]	; (82814 <pmc_switch_mainck_to_xtal+0x48>)
   827e0:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   827e2:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   827e6:	f023 0303 	bic.w	r3, r3, #3
   827ea:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   827ee:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   827f2:	0209      	lsls	r1, r1, #8
   827f4:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   827f6:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   827f8:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   827fa:	6e93      	ldr	r3, [r2, #104]	; 0x68
   827fc:	f013 0f01 	tst.w	r3, #1
   82800:	d0fb      	beq.n	827fa <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   82802:	4a04      	ldr	r2, [pc, #16]	; (82814 <pmc_switch_mainck_to_xtal+0x48>)
   82804:	6a13      	ldr	r3, [r2, #32]
   82806:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   8280a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   8280e:	6213      	str	r3, [r2, #32]
   82810:	4770      	bx	lr
   82812:	bf00      	nop
   82814:	400e0600 	.word	0x400e0600
   82818:	fec8fffc 	.word	0xfec8fffc
   8281c:	01370002 	.word	0x01370002

00082820 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   82820:	4b02      	ldr	r3, [pc, #8]	; (8282c <pmc_osc_is_ready_mainck+0xc>)
   82822:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   82824:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   82828:	4770      	bx	lr
   8282a:	bf00      	nop
   8282c:	400e0600 	.word	0x400e0600

00082830 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   82830:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   82834:	4b01      	ldr	r3, [pc, #4]	; (8283c <pmc_disable_pllack+0xc>)
   82836:	629a      	str	r2, [r3, #40]	; 0x28
   82838:	4770      	bx	lr
   8283a:	bf00      	nop
   8283c:	400e0600 	.word	0x400e0600

00082840 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   82840:	4b02      	ldr	r3, [pc, #8]	; (8284c <pmc_is_locked_pllack+0xc>)
   82842:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   82844:	f000 0002 	and.w	r0, r0, #2
   82848:	4770      	bx	lr
   8284a:	bf00      	nop
   8284c:	400e0600 	.word	0x400e0600

00082850 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   82850:	282c      	cmp	r0, #44	; 0x2c
   82852:	d820      	bhi.n	82896 <pmc_enable_periph_clk+0x46>
		return 1;
	}

	if (ul_id < 32) {
   82854:	281f      	cmp	r0, #31
   82856:	d80d      	bhi.n	82874 <pmc_enable_periph_clk+0x24>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   82858:	4b12      	ldr	r3, [pc, #72]	; (828a4 <pmc_enable_periph_clk+0x54>)
   8285a:	699a      	ldr	r2, [r3, #24]
   8285c:	2301      	movs	r3, #1
   8285e:	4083      	lsls	r3, r0
   82860:	401a      	ands	r2, r3
   82862:	4293      	cmp	r3, r2
   82864:	d019      	beq.n	8289a <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER0 = 1 << ul_id;
   82866:	2301      	movs	r3, #1
   82868:	fa03 f000 	lsl.w	r0, r3, r0
   8286c:	4b0d      	ldr	r3, [pc, #52]	; (828a4 <pmc_enable_periph_clk+0x54>)
   8286e:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   82870:	2000      	movs	r0, #0
   82872:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   82874:	4b0b      	ldr	r3, [pc, #44]	; (828a4 <pmc_enable_periph_clk+0x54>)
   82876:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
   8287a:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   8287c:	2301      	movs	r3, #1
   8287e:	4083      	lsls	r3, r0
   82880:	401a      	ands	r2, r3
   82882:	4293      	cmp	r3, r2
   82884:	d00b      	beq.n	8289e <pmc_enable_periph_clk+0x4e>
			PMC->PMC_PCER1 = 1 << ul_id;
   82886:	2301      	movs	r3, #1
   82888:	fa03 f000 	lsl.w	r0, r3, r0
   8288c:	4b05      	ldr	r3, [pc, #20]	; (828a4 <pmc_enable_periph_clk+0x54>)
   8288e:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   82892:	2000      	movs	r0, #0
   82894:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   82896:	2001      	movs	r0, #1
   82898:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   8289a:	2000      	movs	r0, #0
   8289c:	4770      	bx	lr
   8289e:	2000      	movs	r0, #0
}
   828a0:	4770      	bx	lr
   828a2:	bf00      	nop
   828a4:	400e0600 	.word	0x400e0600

000828a8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   828a8:	e7fe      	b.n	828a8 <Dummy_Handler>
   828aa:	bf00      	nop

000828ac <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   828ac:	b510      	push	{r4, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   828ae:	4b1e      	ldr	r3, [pc, #120]	; (82928 <Reset_Handler+0x7c>)
   828b0:	4a1e      	ldr	r2, [pc, #120]	; (8292c <Reset_Handler+0x80>)
   828b2:	429a      	cmp	r2, r3
   828b4:	d003      	beq.n	828be <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   828b6:	4b1e      	ldr	r3, [pc, #120]	; (82930 <Reset_Handler+0x84>)
   828b8:	4a1b      	ldr	r2, [pc, #108]	; (82928 <Reset_Handler+0x7c>)
   828ba:	429a      	cmp	r2, r3
   828bc:	d304      	bcc.n	828c8 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   828be:	4b1d      	ldr	r3, [pc, #116]	; (82934 <Reset_Handler+0x88>)
   828c0:	4a1d      	ldr	r2, [pc, #116]	; (82938 <Reset_Handler+0x8c>)
   828c2:	429a      	cmp	r2, r3
   828c4:	d30f      	bcc.n	828e6 <Reset_Handler+0x3a>
   828c6:	e01a      	b.n	828fe <Reset_Handler+0x52>
   828c8:	4b1c      	ldr	r3, [pc, #112]	; (8293c <Reset_Handler+0x90>)
   828ca:	4c1d      	ldr	r4, [pc, #116]	; (82940 <Reset_Handler+0x94>)
   828cc:	1ae4      	subs	r4, r4, r3
   828ce:	f024 0403 	bic.w	r4, r4, #3
   828d2:	3404      	adds	r4, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   828d4:	2300      	movs	r3, #0
			*pDest++ = *pSrc++;
   828d6:	4814      	ldr	r0, [pc, #80]	; (82928 <Reset_Handler+0x7c>)
   828d8:	4914      	ldr	r1, [pc, #80]	; (8292c <Reset_Handler+0x80>)
   828da:	585a      	ldr	r2, [r3, r1]
   828dc:	501a      	str	r2, [r3, r0]
   828de:	3304      	adds	r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   828e0:	42a3      	cmp	r3, r4
   828e2:	d1fa      	bne.n	828da <Reset_Handler+0x2e>
   828e4:	e7eb      	b.n	828be <Reset_Handler+0x12>
   828e6:	4b17      	ldr	r3, [pc, #92]	; (82944 <Reset_Handler+0x98>)
   828e8:	4917      	ldr	r1, [pc, #92]	; (82948 <Reset_Handler+0x9c>)
   828ea:	1ac9      	subs	r1, r1, r3
   828ec:	f021 0103 	bic.w	r1, r1, #3
   828f0:	1d1a      	adds	r2, r3, #4
   828f2:	4411      	add	r1, r2
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   828f4:	2200      	movs	r2, #0
   828f6:	f843 2f04 	str.w	r2, [r3, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   828fa:	428b      	cmp	r3, r1
   828fc:	d1fb      	bne.n	828f6 <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   828fe:	4a13      	ldr	r2, [pc, #76]	; (8294c <Reset_Handler+0xa0>)
   82900:	f022 4360 	bic.w	r3, r2, #3758096384	; 0xe0000000
   82904:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   82908:	4911      	ldr	r1, [pc, #68]	; (82950 <Reset_Handler+0xa4>)
   8290a:	608b      	str	r3, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   8290c:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
   82910:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
   82914:	d203      	bcs.n	8291e <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   82916:	688a      	ldr	r2, [r1, #8]
   82918:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   8291c:	608a      	str	r2, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   8291e:	4b0d      	ldr	r3, [pc, #52]	; (82954 <Reset_Handler+0xa8>)
   82920:	4798      	blx	r3

	/* Branch to main function */
	main();
   82922:	4b0d      	ldr	r3, [pc, #52]	; (82958 <Reset_Handler+0xac>)
   82924:	4798      	blx	r3
   82926:	e7fe      	b.n	82926 <Reset_Handler+0x7a>
   82928:	20070000 	.word	0x20070000
   8292c:	00088674 	.word	0x00088674
   82930:	20070a7c 	.word	0x20070a7c
   82934:	2007ad9c 	.word	0x2007ad9c
   82938:	20070a80 	.word	0x20070a80
   8293c:	20070004 	.word	0x20070004
   82940:	20070a7f 	.word	0x20070a7f
   82944:	20070a7c 	.word	0x20070a7c
   82948:	2007ad97 	.word	0x2007ad97
   8294c:	00080000 	.word	0x00080000
   82950:	e000ed00 	.word	0xe000ed00
   82954:	00083ff1 	.word	0x00083ff1
   82958:	00082fc1 	.word	0x00082fc1

0008295c <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   8295c:	4b3e      	ldr	r3, [pc, #248]	; (82a58 <SystemCoreClockUpdate+0xfc>)
   8295e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82960:	f003 0303 	and.w	r3, r3, #3
   82964:	2b03      	cmp	r3, #3
   82966:	d85f      	bhi.n	82a28 <SystemCoreClockUpdate+0xcc>
   82968:	e8df f003 	tbb	[pc, r3]
   8296c:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   82970:	4b3a      	ldr	r3, [pc, #232]	; (82a5c <SystemCoreClockUpdate+0x100>)
   82972:	695b      	ldr	r3, [r3, #20]
   82974:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   82978:	bf14      	ite	ne
   8297a:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   8297e:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   82982:	4b37      	ldr	r3, [pc, #220]	; (82a60 <SystemCoreClockUpdate+0x104>)
   82984:	601a      	str	r2, [r3, #0]
   82986:	e04f      	b.n	82a28 <SystemCoreClockUpdate+0xcc>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   82988:	4b33      	ldr	r3, [pc, #204]	; (82a58 <SystemCoreClockUpdate+0xfc>)
   8298a:	6a1b      	ldr	r3, [r3, #32]
   8298c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   82990:	d003      	beq.n	8299a <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   82992:	4a34      	ldr	r2, [pc, #208]	; (82a64 <SystemCoreClockUpdate+0x108>)
   82994:	4b32      	ldr	r3, [pc, #200]	; (82a60 <SystemCoreClockUpdate+0x104>)
   82996:	601a      	str	r2, [r3, #0]
   82998:	e046      	b.n	82a28 <SystemCoreClockUpdate+0xcc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   8299a:	4a33      	ldr	r2, [pc, #204]	; (82a68 <SystemCoreClockUpdate+0x10c>)
   8299c:	4b30      	ldr	r3, [pc, #192]	; (82a60 <SystemCoreClockUpdate+0x104>)
   8299e:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   829a0:	4b2d      	ldr	r3, [pc, #180]	; (82a58 <SystemCoreClockUpdate+0xfc>)
   829a2:	6a1b      	ldr	r3, [r3, #32]
   829a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
   829a8:	2b10      	cmp	r3, #16
   829aa:	d002      	beq.n	829b2 <SystemCoreClockUpdate+0x56>
   829ac:	2b20      	cmp	r3, #32
   829ae:	d004      	beq.n	829ba <SystemCoreClockUpdate+0x5e>
   829b0:	e03a      	b.n	82a28 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   829b2:	4a2e      	ldr	r2, [pc, #184]	; (82a6c <SystemCoreClockUpdate+0x110>)
   829b4:	4b2a      	ldr	r3, [pc, #168]	; (82a60 <SystemCoreClockUpdate+0x104>)
   829b6:	601a      	str	r2, [r3, #0]
				break;
   829b8:	e036      	b.n	82a28 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   829ba:	4a2a      	ldr	r2, [pc, #168]	; (82a64 <SystemCoreClockUpdate+0x108>)
   829bc:	4b28      	ldr	r3, [pc, #160]	; (82a60 <SystemCoreClockUpdate+0x104>)
   829be:	601a      	str	r2, [r3, #0]
				break;
   829c0:	e032      	b.n	82a28 <SystemCoreClockUpdate+0xcc>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   829c2:	4b25      	ldr	r3, [pc, #148]	; (82a58 <SystemCoreClockUpdate+0xfc>)
   829c4:	6a1b      	ldr	r3, [r3, #32]
   829c6:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   829ca:	d003      	beq.n	829d4 <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   829cc:	4a25      	ldr	r2, [pc, #148]	; (82a64 <SystemCoreClockUpdate+0x108>)
   829ce:	4b24      	ldr	r3, [pc, #144]	; (82a60 <SystemCoreClockUpdate+0x104>)
   829d0:	601a      	str	r2, [r3, #0]
   829d2:	e012      	b.n	829fa <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   829d4:	4a24      	ldr	r2, [pc, #144]	; (82a68 <SystemCoreClockUpdate+0x10c>)
   829d6:	4b22      	ldr	r3, [pc, #136]	; (82a60 <SystemCoreClockUpdate+0x104>)
   829d8:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   829da:	4b1f      	ldr	r3, [pc, #124]	; (82a58 <SystemCoreClockUpdate+0xfc>)
   829dc:	6a1b      	ldr	r3, [r3, #32]
   829de:	f003 0370 	and.w	r3, r3, #112	; 0x70
   829e2:	2b10      	cmp	r3, #16
   829e4:	d002      	beq.n	829ec <SystemCoreClockUpdate+0x90>
   829e6:	2b20      	cmp	r3, #32
   829e8:	d004      	beq.n	829f4 <SystemCoreClockUpdate+0x98>
   829ea:	e006      	b.n	829fa <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   829ec:	4a1f      	ldr	r2, [pc, #124]	; (82a6c <SystemCoreClockUpdate+0x110>)
   829ee:	4b1c      	ldr	r3, [pc, #112]	; (82a60 <SystemCoreClockUpdate+0x104>)
   829f0:	601a      	str	r2, [r3, #0]
				break;
   829f2:	e002      	b.n	829fa <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   829f4:	4a1b      	ldr	r2, [pc, #108]	; (82a64 <SystemCoreClockUpdate+0x108>)
   829f6:	4b1a      	ldr	r3, [pc, #104]	; (82a60 <SystemCoreClockUpdate+0x104>)
   829f8:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   829fa:	4b17      	ldr	r3, [pc, #92]	; (82a58 <SystemCoreClockUpdate+0xfc>)
   829fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   829fe:	f003 0303 	and.w	r3, r3, #3
   82a02:	2b02      	cmp	r3, #2
   82a04:	d10d      	bne.n	82a22 <SystemCoreClockUpdate+0xc6>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   82a06:	4b14      	ldr	r3, [pc, #80]	; (82a58 <SystemCoreClockUpdate+0xfc>)
   82a08:	6a98      	ldr	r0, [r3, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   82a0a:	6a99      	ldr	r1, [r3, #40]	; 0x28
   82a0c:	4b14      	ldr	r3, [pc, #80]	; (82a60 <SystemCoreClockUpdate+0x104>)
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   82a0e:	f3c0 400a 	ubfx	r0, r0, #16, #11
   82a12:	681a      	ldr	r2, [r3, #0]
   82a14:	fb00 2202 	mla	r2, r0, r2, r2
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   82a18:	b2c9      	uxtb	r1, r1
   82a1a:	fbb2 f2f1 	udiv	r2, r2, r1
   82a1e:	601a      	str	r2, [r3, #0]
   82a20:	e002      	b.n	82a28 <SystemCoreClockUpdate+0xcc>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   82a22:	4a13      	ldr	r2, [pc, #76]	; (82a70 <SystemCoreClockUpdate+0x114>)
   82a24:	4b0e      	ldr	r3, [pc, #56]	; (82a60 <SystemCoreClockUpdate+0x104>)
   82a26:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   82a28:	4b0b      	ldr	r3, [pc, #44]	; (82a58 <SystemCoreClockUpdate+0xfc>)
   82a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82a2c:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82a30:	2b70      	cmp	r3, #112	; 0x70
   82a32:	d107      	bne.n	82a44 <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
   82a34:	4b0a      	ldr	r3, [pc, #40]	; (82a60 <SystemCoreClockUpdate+0x104>)
   82a36:	681a      	ldr	r2, [r3, #0]
   82a38:	490e      	ldr	r1, [pc, #56]	; (82a74 <SystemCoreClockUpdate+0x118>)
   82a3a:	fba1 0202 	umull	r0, r2, r1, r2
   82a3e:	0852      	lsrs	r2, r2, #1
   82a40:	601a      	str	r2, [r3, #0]
   82a42:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   82a44:	4b04      	ldr	r3, [pc, #16]	; (82a58 <SystemCoreClockUpdate+0xfc>)
   82a46:	6b19      	ldr	r1, [r3, #48]	; 0x30
   82a48:	4b05      	ldr	r3, [pc, #20]	; (82a60 <SystemCoreClockUpdate+0x104>)
   82a4a:	f3c1 1102 	ubfx	r1, r1, #4, #3
   82a4e:	681a      	ldr	r2, [r3, #0]
   82a50:	40ca      	lsrs	r2, r1
   82a52:	601a      	str	r2, [r3, #0]
   82a54:	4770      	bx	lr
   82a56:	bf00      	nop
   82a58:	400e0600 	.word	0x400e0600
   82a5c:	400e1a10 	.word	0x400e1a10
   82a60:	2007020c 	.word	0x2007020c
   82a64:	00b71b00 	.word	0x00b71b00
   82a68:	003d0900 	.word	0x003d0900
   82a6c:	007a1200 	.word	0x007a1200
   82a70:	0e4e1c00 	.word	0x0e4e1c00
   82a74:	aaaaaaab 	.word	0xaaaaaaab

00082a78 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   82a78:	4b09      	ldr	r3, [pc, #36]	; (82aa0 <_sbrk+0x28>)
   82a7a:	681b      	ldr	r3, [r3, #0]
   82a7c:	b913      	cbnz	r3, 82a84 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
   82a7e:	4a09      	ldr	r2, [pc, #36]	; (82aa4 <_sbrk+0x2c>)
   82a80:	4b07      	ldr	r3, [pc, #28]	; (82aa0 <_sbrk+0x28>)
   82a82:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   82a84:	4b06      	ldr	r3, [pc, #24]	; (82aa0 <_sbrk+0x28>)
   82a86:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   82a88:	181a      	adds	r2, r3, r0
   82a8a:	4907      	ldr	r1, [pc, #28]	; (82aa8 <_sbrk+0x30>)
   82a8c:	4291      	cmp	r1, r2
   82a8e:	db04      	blt.n	82a9a <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
   82a90:	4610      	mov	r0, r2
   82a92:	4a03      	ldr	r2, [pc, #12]	; (82aa0 <_sbrk+0x28>)
   82a94:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   82a96:	4618      	mov	r0, r3
   82a98:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
   82a9a:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
   82a9e:	4770      	bx	lr
   82aa0:	2007ad1c 	.word	0x2007ad1c
   82aa4:	2007cda0 	.word	0x2007cda0
   82aa8:	20087ffc 	.word	0x20087ffc

00082aac <_close>:
}

extern int _close(int file)
{
	return -1;
}
   82aac:	f04f 30ff 	mov.w	r0, #4294967295
   82ab0:	4770      	bx	lr
   82ab2:	bf00      	nop

00082ab4 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   82ab4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   82ab8:	604b      	str	r3, [r1, #4]

	return 0;
}
   82aba:	2000      	movs	r0, #0
   82abc:	4770      	bx	lr
   82abe:	bf00      	nop

00082ac0 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   82ac0:	2001      	movs	r0, #1
   82ac2:	4770      	bx	lr

00082ac4 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   82ac4:	2000      	movs	r0, #0
   82ac6:	4770      	bx	lr

00082ac8 <vDriveToObjectTask>:
static arminfo_t armInfo;
static void adjustPositionDuringPickup(void);


//handles driving the robot to next object/goalbox
void vDriveToObjectTask(void *pvParam) {
   82ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
	while (1)
	{
		if (booleanDriving == 1 && booleanUltraSensor == 0 && booleanCommunication == 0)
   82aca:	4c1d      	ldr	r4, [pc, #116]	; (82b40 <vDriveToObjectTask+0x78>)
			printf("\nGotoVal = %u", gotoVal);
			
		}
		else
		{
			vTaskDelay(pdMSTOTICKS(200));
   82acc:	4d1d      	ldr	r5, [pc, #116]	; (82b44 <vDriveToObjectTask+0x7c>)
//handles driving the robot to next object/goalbox
void vDriveToObjectTask(void *pvParam) {
	
	while (1)
	{
		if (booleanDriving == 1 && booleanUltraSensor == 0 && booleanCommunication == 0)
   82ace:	4e1e      	ldr	r6, [pc, #120]	; (82b48 <vDriveToObjectTask+0x80>)
   82ad0:	7823      	ldrb	r3, [r4, #0]
   82ad2:	2b01      	cmp	r3, #1
   82ad4:	d131      	bne.n	82b3a <vDriveToObjectTask+0x72>
   82ad6:	7833      	ldrb	r3, [r6, #0]
   82ad8:	2b00      	cmp	r3, #0
   82ada:	d12e      	bne.n	82b3a <vDriveToObjectTask+0x72>
   82adc:	4b1b      	ldr	r3, [pc, #108]	; (82b4c <vDriveToObjectTask+0x84>)
   82ade:	781b      	ldrb	r3, [r3, #0]
   82ae0:	2b00      	cmp	r3, #0
   82ae2:	d12a      	bne.n	82b3a <vDriveToObjectTask+0x72>
		{
			printf("\n>>>>>>>>>>>>DRIVING TO OBJECT<<<<<<<<<<<<\n");
   82ae4:	481a      	ldr	r0, [pc, #104]	; (82b50 <vDriveToObjectTask+0x88>)
   82ae6:	4b1b      	ldr	r3, [pc, #108]	; (82b54 <vDriveToObjectTask+0x8c>)
   82ae8:	4798      	blx	r3
			//do moving
			uint8_t gotoVal = goToNext();
   82aea:	4b1b      	ldr	r3, [pc, #108]	; (82b58 <vDriveToObjectTask+0x90>)
   82aec:	4798      	blx	r3
   82aee:	4607      	mov	r7, r0
			if(gotoVal==1)
   82af0:	2801      	cmp	r0, #1
   82af2:	d10d      	bne.n	82b10 <vDriveToObjectTask+0x48>
			{	
				booleanDriving = 0;
   82af4:	2300      	movs	r3, #0
   82af6:	7023      	strb	r3, [r4, #0]
				booleanCommunication = 0;
   82af8:	4a14      	ldr	r2, [pc, #80]	; (82b4c <vDriveToObjectTask+0x84>)
   82afa:	7013      	strb	r3, [r2, #0]
				booleanUltraSensor = 1;
   82afc:	2201      	movs	r2, #1
   82afe:	7032      	strb	r2, [r6, #0]
				booleanModifyPosition = 0;
   82b00:	4916      	ldr	r1, [pc, #88]	; (82b5c <vDriveToObjectTask+0x94>)
   82b02:	700b      	strb	r3, [r1, #0]
				current_twi_state = START_PICKUP; 
   82b04:	4b16      	ldr	r3, [pc, #88]	; (82b60 <vDriveToObjectTask+0x98>)
   82b06:	701a      	strb	r2, [r3, #0]
				puts("GOTO PICKUP FROM DRIVE");
   82b08:	4816      	ldr	r0, [pc, #88]	; (82b64 <vDriveToObjectTask+0x9c>)
   82b0a:	4b17      	ldr	r3, [pc, #92]	; (82b68 <vDriveToObjectTask+0xa0>)
   82b0c:	4798      	blx	r3
   82b0e:	e00f      	b.n	82b30 <vDriveToObjectTask+0x68>

			}
			else if(gotoVal == 2)
   82b10:	2802      	cmp	r0, #2
   82b12:	d10d      	bne.n	82b30 <vDriveToObjectTask+0x68>
			{
				booleanDriving = 0;
   82b14:	2300      	movs	r3, #0
   82b16:	7023      	strb	r3, [r4, #0]
				booleanCommunication = 0;
   82b18:	4a0c      	ldr	r2, [pc, #48]	; (82b4c <vDriveToObjectTask+0x84>)
   82b1a:	7013      	strb	r3, [r2, #0]
				booleanUltraSensor = 1;
   82b1c:	2201      	movs	r2, #1
   82b1e:	7032      	strb	r2, [r6, #0]
				booleanModifyPosition = 0;
   82b20:	4a0e      	ldr	r2, [pc, #56]	; (82b5c <vDriveToObjectTask+0x94>)
   82b22:	7013      	strb	r3, [r2, #0]
				current_twi_state = START_DROP_OFF; 
   82b24:	2203      	movs	r2, #3
   82b26:	4b0e      	ldr	r3, [pc, #56]	; (82b60 <vDriveToObjectTask+0x98>)
   82b28:	701a      	strb	r2, [r3, #0]
				puts("GOTO DROPOFF FROM DRIVE");
   82b2a:	4810      	ldr	r0, [pc, #64]	; (82b6c <vDriveToObjectTask+0xa4>)
   82b2c:	4b0e      	ldr	r3, [pc, #56]	; (82b68 <vDriveToObjectTask+0xa0>)
   82b2e:	4798      	blx	r3

			}
			printf("\nGotoVal = %u", gotoVal);
   82b30:	480f      	ldr	r0, [pc, #60]	; (82b70 <vDriveToObjectTask+0xa8>)
   82b32:	4639      	mov	r1, r7
   82b34:	4b07      	ldr	r3, [pc, #28]	; (82b54 <vDriveToObjectTask+0x8c>)
   82b36:	4798      	blx	r3
void vDriveToObjectTask(void *pvParam) {
	
	while (1)
	{
		if (booleanDriving == 1 && booleanUltraSensor == 0 && booleanCommunication == 0)
		{
   82b38:	e7ca      	b.n	82ad0 <vDriveToObjectTask+0x8>
			printf("\nGotoVal = %u", gotoVal);
			
		}
		else
		{
			vTaskDelay(pdMSTOTICKS(200));
   82b3a:	20c8      	movs	r0, #200	; 0xc8
   82b3c:	47a8      	blx	r5
   82b3e:	e7c7      	b.n	82ad0 <vDriveToObjectTask+0x8>
   82b40:	2007ad20 	.word	0x2007ad20
   82b44:	00081c15 	.word	0x00081c15
   82b48:	2007ad2d 	.word	0x2007ad2d
   82b4c:	2007ad2c 	.word	0x2007ad2c
   82b50:	000881c8 	.word	0x000881c8
   82b54:	00084041 	.word	0x00084041
   82b58:	00080589 	.word	0x00080589
   82b5c:	2007ad2e 	.word	0x2007ad2e
   82b60:	2007ad95 	.word	0x2007ad95
   82b64:	000881f4 	.word	0x000881f4
   82b68:	00084271 	.word	0x00084271
   82b6c:	0008820c 	.word	0x0008820c
   82b70:	00088224 	.word	0x00088224

00082b74 <vUltraSensorTask>:
	}
	vTaskDelete(NULL);
}

//When driving is done do Locate object
void vUltraSensorTask(void *pvParam) {
   82b74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

	while (1)
	{
		if (booleanUltraSensor == 1 && booleanCommunication == 0 && booleanDriving == 0)
   82b78:	4c18      	ldr	r4, [pc, #96]	; (82bdc <vUltraSensorTask+0x68>)
				
			}
		} 
		else
		{
			vTaskDelay(pdMSTOTICKS(100));
   82b7a:	4d19      	ldr	r5, [pc, #100]	; (82be0 <vUltraSensorTask+0x6c>)
//When driving is done do Locate object
void vUltraSensorTask(void *pvParam) {

	while (1)
	{
		if (booleanUltraSensor == 1 && booleanCommunication == 0 && booleanDriving == 0)
   82b7c:	4e19      	ldr	r6, [pc, #100]	; (82be4 <vUltraSensorTask+0x70>)
   82b7e:	7823      	ldrb	r3, [r4, #0]
   82b80:	2b01      	cmp	r3, #1
   82b82:	d127      	bne.n	82bd4 <vUltraSensorTask+0x60>
   82b84:	7833      	ldrb	r3, [r6, #0]
   82b86:	bb2b      	cbnz	r3, 82bd4 <vUltraSensorTask+0x60>
   82b88:	4b17      	ldr	r3, [pc, #92]	; (82be8 <vUltraSensorTask+0x74>)
   82b8a:	781b      	ldrb	r3, [r3, #0]
   82b8c:	bb13      	cbnz	r3, 82bd4 <vUltraSensorTask+0x60>
		{
			
			//todo del
			puts("Ultrasound found object distance\n");
   82b8e:	4817      	ldr	r0, [pc, #92]	; (82bec <vUltraSensorTask+0x78>)
   82b90:	4b17      	ldr	r3, [pc, #92]	; (82bf0 <vUltraSensorTask+0x7c>)
   82b92:	4798      	blx	r3
			printf("Distance to object: %u\n", distanceUltraSensor);
   82b94:	f8df a074 	ldr.w	sl, [pc, #116]	; 82c0c <vUltraSensorTask+0x98>
   82b98:	4816      	ldr	r0, [pc, #88]	; (82bf4 <vUltraSensorTask+0x80>)
   82b9a:	f8da 1000 	ldr.w	r1, [sl]
   82b9e:	4f16      	ldr	r7, [pc, #88]	; (82bf8 <vUltraSensorTask+0x84>)
   82ba0:	47b8      	blx	r7
			printf("Angle to object: %u\n", angleUltraSensor);
   82ba2:	4816      	ldr	r0, [pc, #88]	; (82bfc <vUltraSensorTask+0x88>)
   82ba4:	4b16      	ldr	r3, [pc, #88]	; (82c00 <vUltraSensorTask+0x8c>)
   82ba6:	6819      	ldr	r1, [r3, #0]
   82ba8:	47b8      	blx	r7
 					//printf("Detected object");
 					//booleanModifyPosition = 1;
 				//}
			//}

			booleanModifyPosition=1;
   82baa:	f8df 9064 	ldr.w	r9, [pc, #100]	; 82c10 <vUltraSensorTask+0x9c>
   82bae:	f04f 0801 	mov.w	r8, #1
   82bb2:	f889 8000 	strb.w	r8, [r9]
			if (booleanModifyPosition == 1)
			{
				
				
				forwardDrive(distanceUltraSensor);
   82bb6:	f8da 0000 	ldr.w	r0, [sl]
   82bba:	4b12      	ldr	r3, [pc, #72]	; (82c04 <vUltraSensorTask+0x90>)
   82bbc:	4798      	blx	r3
				//activate twi communication
				printf("Modifying driving\n");
   82bbe:	4812      	ldr	r0, [pc, #72]	; (82c08 <vUltraSensorTask+0x94>)
   82bc0:	47b8      	blx	r7
				booleanDriving=0;
   82bc2:	2300      	movs	r3, #0
   82bc4:	4a08      	ldr	r2, [pc, #32]	; (82be8 <vUltraSensorTask+0x74>)
   82bc6:	7013      	strb	r3, [r2, #0]
				booleanUltraSensor=0;
   82bc8:	7023      	strb	r3, [r4, #0]
				booleanModifyPosition = 0;
   82bca:	f889 3000 	strb.w	r3, [r9]
				//start pickup. goto communication
				booleanCommunication = 1;
   82bce:	f886 8000 	strb.w	r8, [r6]
   82bd2:	e7d4      	b.n	82b7e <vUltraSensorTask+0xa>
				
			}
		} 
		else
		{
			vTaskDelay(pdMSTOTICKS(100));
   82bd4:	2064      	movs	r0, #100	; 0x64
   82bd6:	47a8      	blx	r5
   82bd8:	e7d1      	b.n	82b7e <vUltraSensorTask+0xa>
   82bda:	bf00      	nop
   82bdc:	2007ad2d 	.word	0x2007ad2d
   82be0:	00081c15 	.word	0x00081c15
   82be4:	2007ad2c 	.word	0x2007ad2c
   82be8:	2007ad20 	.word	0x2007ad20
   82bec:	00088234 	.word	0x00088234
   82bf0:	00084271 	.word	0x00084271
   82bf4:	00088258 	.word	0x00088258
   82bf8:	00084041 	.word	0x00084041
   82bfc:	00088270 	.word	0x00088270
   82c00:	20070aa4 	.word	0x20070aa4
   82c04:	00080169 	.word	0x00080169
   82c08:	00088288 	.word	0x00088288
   82c0c:	20070aa8 	.word	0x20070aa8
   82c10:	2007ad2e 	.word	0x2007ad2e

00082c14 <vCommunicationTask>:
static void adjustPositionDuringPickup(){
	printf("\nAdjusting position during pickup!!!");
}
//TWI communcation
void vCommunicationTask(void *pvParam)
{
   82c14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   82c18:	b0c5      	sub	sp, #276	; 0x114
	
	while(1)
	{
		if (booleanCommunication == 1 && booleanUltraSensor == 0 && booleanDriving == 0 && booleanModifyPosition == 0)
   82c1a:	4c6e      	ldr	r4, [pc, #440]	; (82dd4 <vCommunicationTask+0x1c0>)
			}
			//end of current_twi_state
		} 
		else
		{
			vTaskDelay(pdMSTOTICKS(100));
   82c1c:	4d6e      	ldr	r5, [pc, #440]	; (82dd8 <vCommunicationTask+0x1c4>)
void vCommunicationTask(void *pvParam)
{
	
	while(1)
	{
		if (booleanCommunication == 1 && booleanUltraSensor == 0 && booleanDriving == 0 && booleanModifyPosition == 0)
   82c1e:	4e6f      	ldr	r6, [pc, #444]	; (82ddc <vCommunicationTask+0x1c8>)
   82c20:	7823      	ldrb	r3, [r4, #0]
   82c22:	2b01      	cmp	r3, #1
   82c24:	f040 80d3 	bne.w	82dce <vCommunicationTask+0x1ba>
   82c28:	7833      	ldrb	r3, [r6, #0]
   82c2a:	2b00      	cmp	r3, #0
   82c2c:	f040 80cf 	bne.w	82dce <vCommunicationTask+0x1ba>
   82c30:	4b6b      	ldr	r3, [pc, #428]	; (82de0 <vCommunicationTask+0x1cc>)
   82c32:	781b      	ldrb	r3, [r3, #0]
   82c34:	2b00      	cmp	r3, #0
   82c36:	f040 80ca 	bne.w	82dce <vCommunicationTask+0x1ba>
   82c3a:	4b6a      	ldr	r3, [pc, #424]	; (82de4 <vCommunicationTask+0x1d0>)
   82c3c:	781b      	ldrb	r3, [r3, #0]
   82c3e:	2b00      	cmp	r3, #0
   82c40:	f040 80c5 	bne.w	82dce <vCommunicationTask+0x1ba>
		{
			//check state for communication
			switch (current_twi_state)
   82c44:	4b68      	ldr	r3, [pc, #416]	; (82de8 <vCommunicationTask+0x1d4>)
   82c46:	7819      	ldrb	r1, [r3, #0]
   82c48:	2905      	cmp	r1, #5
   82c4a:	f200 80b9 	bhi.w	82dc0 <vCommunicationTask+0x1ac>
   82c4e:	e8df f011 	tbh	[pc, r1, lsl #1]
   82c52:	0006      	.short	0x0006
   82c54:	00450033 	.word	0x00450033
   82c58:	00900081 	.word	0x00900081
   82c5c:	00b3      	.short	0x00b3
			{
				case INIT_ARM:
					puts("INIT_ARM");
   82c5e:	4863      	ldr	r0, [pc, #396]	; (82dec <vCommunicationTask+0x1d8>)
   82c60:	4b63      	ldr	r3, [pc, #396]	; (82df0 <vCommunicationTask+0x1dc>)
   82c62:	4798      	blx	r3
					armInfo = twi_getArmInfo();	
   82c64:	4f63      	ldr	r7, [pc, #396]	; (82df4 <vCommunicationTask+0x1e0>)
   82c66:	a802      	add	r0, sp, #8
   82c68:	4b63      	ldr	r3, [pc, #396]	; (82df8 <vCommunicationTask+0x1e4>)
   82c6a:	4798      	blx	r3
   82c6c:	9802      	ldr	r0, [sp, #8]
   82c6e:	6038      	str	r0, [r7, #0]
   82c70:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   82c74:	80bb      	strh	r3, [r7, #4]
					if(armInfo.hasData)
   82c76:	797b      	ldrb	r3, [r7, #5]
   82c78:	b1d3      	cbz	r3, 82cb0 <vCommunicationTask+0x9c>
					{
						//todo set to 0
						booleanCommunication = 1;
   82c7a:	f04f 0801 	mov.w	r8, #1
   82c7e:	f884 8000 	strb.w	r8, [r4]
						//todo set to 1
						booleanDriving = 0;						
   82c82:	2200      	movs	r2, #0
   82c84:	4b56      	ldr	r3, [pc, #344]	; (82de0 <vCommunicationTask+0x1cc>)
   82c86:	701a      	strb	r2, [r3, #0]
						//todo remove						
						printf("init arm done\n");
   82c88:	485c      	ldr	r0, [pc, #368]	; (82dfc <vCommunicationTask+0x1e8>)
   82c8a:	f8df 9190 	ldr.w	r9, [pc, #400]	; 82e1c <vCommunicationTask+0x208>
   82c8e:	47c8      	blx	r9
						printf("arminfo: %u %u %u %u all: %u",armInfo.boxAngle, armInfo.boxDistance, armInfo.objectAngle, armInfo.objectDistance,armInfo.collectAll);
   82c90:	7879      	ldrb	r1, [r7, #1]
   82c92:	783a      	ldrb	r2, [r7, #0]
   82c94:	78fb      	ldrb	r3, [r7, #3]
   82c96:	78b8      	ldrb	r0, [r7, #2]
   82c98:	9000      	str	r0, [sp, #0]
   82c9a:	7938      	ldrb	r0, [r7, #4]
   82c9c:	9001      	str	r0, [sp, #4]
   82c9e:	4858      	ldr	r0, [pc, #352]	; (82e00 <vCommunicationTask+0x1ec>)
   82ca0:	47c8      	blx	r9
						setGetAll(armInfo.collectAll);
   82ca2:	7938      	ldrb	r0, [r7, #4]
   82ca4:	4b57      	ldr	r3, [pc, #348]	; (82e04 <vCommunicationTask+0x1f0>)
   82ca6:	4798      	blx	r3
						
						//todo del
						current_twi_state = START_PICKUP;
   82ca8:	4b4f      	ldr	r3, [pc, #316]	; (82de8 <vCommunicationTask+0x1d4>)
   82caa:	f883 8000 	strb.w	r8, [r3]
   82cae:	e7b7      	b.n	82c20 <vCommunicationTask+0xc>
					}
					else
					{
						puts("INIT ARM NO DATA");
   82cb0:	4855      	ldr	r0, [pc, #340]	; (82e08 <vCommunicationTask+0x1f4>)
   82cb2:	4b4f      	ldr	r3, [pc, #316]	; (82df0 <vCommunicationTask+0x1dc>)
   82cb4:	4798      	blx	r3
   82cb6:	e7b3      	b.n	82c20 <vCommunicationTask+0xc>
					}				
				break;
				case START_PICKUP:
					
					//start pickup after modify position
					if (twi_pickupStart() == 1)
   82cb8:	4b54      	ldr	r3, [pc, #336]	; (82e0c <vCommunicationTask+0x1f8>)
   82cba:	4798      	blx	r3
   82cbc:	2801      	cmp	r0, #1
   82cbe:	d106      	bne.n	82cce <vCommunicationTask+0xba>
					{
						puts("STARTED PICKUP");
   82cc0:	4853      	ldr	r0, [pc, #332]	; (82e10 <vCommunicationTask+0x1fc>)
   82cc2:	4b4b      	ldr	r3, [pc, #300]	; (82df0 <vCommunicationTask+0x1dc>)
   82cc4:	4798      	blx	r3
						//Could start pickup
						
						current_twi_state=GET_STATUS_PICKUP;
   82cc6:	2202      	movs	r2, #2
   82cc8:	4b47      	ldr	r3, [pc, #284]	; (82de8 <vCommunicationTask+0x1d4>)
   82cca:	701a      	strb	r2, [r3, #0]
   82ccc:	e7a8      	b.n	82c20 <vCommunicationTask+0xc>
						
					}
					else
					{
						//failed to start pickup!! try again!
						puts("FAILED TO START_PICKUP");
   82cce:	4851      	ldr	r0, [pc, #324]	; (82e14 <vCommunicationTask+0x200>)
   82cd0:	4b47      	ldr	r3, [pc, #284]	; (82df0 <vCommunicationTask+0x1dc>)
   82cd2:	4798      	blx	r3
						current_twi_state=START_PICKUP;
   82cd4:	2201      	movs	r2, #1
   82cd6:	4b44      	ldr	r3, [pc, #272]	; (82de8 <vCommunicationTask+0x1d4>)
   82cd8:	701a      	strb	r2, [r3, #0]
   82cda:	e7a1      	b.n	82c20 <vCommunicationTask+0xc>
					}
				break;
				//pick up is started, getting status
				case GET_STATUS_PICKUP:
					printf("");
   82cdc:	484e      	ldr	r0, [pc, #312]	; (82e18 <vCommunicationTask+0x204>)
   82cde:	4b4f      	ldr	r3, [pc, #316]	; (82e1c <vCommunicationTask+0x208>)
   82ce0:	4798      	blx	r3
					//get current arm status about pickup
					uint8_t status = twi_pickupGetStatus();
   82ce2:	4b4f      	ldr	r3, [pc, #316]	; (82e20 <vCommunicationTask+0x20c>)
   82ce4:	4798      	blx	r3
					
					switch(status)
   82ce6:	3802      	subs	r0, #2
   82ce8:	2805      	cmp	r0, #5
   82cea:	d899      	bhi.n	82c20 <vCommunicationTask+0xc>
   82cec:	a301      	add	r3, pc, #4	; (adr r3, 82cf4 <vCommunicationTask+0xe0>)
   82cee:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
   82cf2:	bf00      	nop
   82cf4:	00082d1d 	.word	0x00082d1d
   82cf8:	00082d3f 	.word	0x00082d3f
   82cfc:	00082d3f 	.word	0x00082d3f
   82d00:	00082c21 	.word	0x00082c21
   82d04:	00082d0d 	.word	0x00082d0d
   82d08:	00082d15 	.word	0x00082d15
					{
						case PICKUP_FAILED:
						puts("PICKUP_FAILED");
   82d0c:	4845      	ldr	r0, [pc, #276]	; (82e24 <vCommunicationTask+0x210>)
   82d0e:	4b38      	ldr	r3, [pc, #224]	; (82df0 <vCommunicationTask+0x1dc>)
   82d10:	4798      	blx	r3
						break;
   82d12:	e785      	b.n	82c20 <vCommunicationTask+0xc>
						case PICKUP_DONE_DRIVE:
						puts("PICKUP_DONE_DRIVE");
   82d14:	4844      	ldr	r0, [pc, #272]	; (82e28 <vCommunicationTask+0x214>)
   82d16:	4b36      	ldr	r3, [pc, #216]	; (82df0 <vCommunicationTask+0x1dc>)
   82d18:	4798      	blx	r3
						break;
   82d1a:	e781      	b.n	82c20 <vCommunicationTask+0xc>
							//done with pickup, continue to drive
							//stop communicating
						
							//current_twi_state = IDLE;
						
							puts("PICKUP_DONE");
   82d1c:	4843      	ldr	r0, [pc, #268]	; (82e2c <vCommunicationTask+0x218>)
   82d1e:	4b34      	ldr	r3, [pc, #208]	; (82df0 <vCommunicationTask+0x1dc>)
   82d20:	4798      	blx	r3
							//tell (set) movement that pickup is done
							setDonePickup();
   82d22:	4b43      	ldr	r3, [pc, #268]	; (82e30 <vCommunicationTask+0x21c>)
   82d24:	4798      	blx	r3
							
							//TODO UNCOMMENT
							
							booleanUltraSensor=0;
   82d26:	2300      	movs	r3, #0
   82d28:	7033      	strb	r3, [r6, #0]
							booleanModifyPosition=0;
   82d2a:	4a2e      	ldr	r2, [pc, #184]	; (82de4 <vCommunicationTask+0x1d0>)
   82d2c:	7013      	strb	r3, [r2, #0]
							//todo set to 0
							booleanCommunication=1;
   82d2e:	2201      	movs	r2, #1
   82d30:	7022      	strb	r2, [r4, #0]
							//todo set to 1
							booleanDriving=0;
   82d32:	4a2b      	ldr	r2, [pc, #172]	; (82de0 <vCommunicationTask+0x1cc>)
   82d34:	7013      	strb	r3, [r2, #0]
							
							
							//todo del
							current_twi_state=START_DROP_OFF;
   82d36:	2203      	movs	r2, #3
   82d38:	4b2b      	ldr	r3, [pc, #172]	; (82de8 <vCommunicationTask+0x1d4>)
   82d3a:	701a      	strb	r2, [r3, #0]
							
						break;						
   82d3c:	e770      	b.n	82c20 <vCommunicationTask+0xc>
						case PICKUP_FORWARD:
						case PICKUP_BACKWARD:
							puts("go forward or back");
   82d3e:	483d      	ldr	r0, [pc, #244]	; (82e34 <vCommunicationTask+0x220>)
   82d40:	4b2b      	ldr	r3, [pc, #172]	; (82df0 <vCommunicationTask+0x1dc>)
   82d42:	4798      	blx	r3
							//TODO: call function that drives forward/backwards based on cm
							printf("Driving forward/backward");
   82d44:	483c      	ldr	r0, [pc, #240]	; (82e38 <vCommunicationTask+0x224>)
   82d46:	4f35      	ldr	r7, [pc, #212]	; (82e1c <vCommunicationTask+0x208>)
   82d48:	47b8      	blx	r7
	}
	vTaskDelete(NULL);
}

static void adjustPositionDuringPickup(){
	printf("\nAdjusting position during pickup!!!");
   82d4a:	483c      	ldr	r0, [pc, #240]	; (82e3c <vCommunicationTask+0x228>)
   82d4c:	47b8      	blx	r7
							puts("go forward or back");
							//TODO: call function that drives forward/backwards based on cm
							printf("Driving forward/backward");
							//if we needed to drive during pickup, check if driving is done
							adjustPositionDuringPickup();
							twi_pickupSendMovementDone();
   82d4e:	4b3c      	ldr	r3, [pc, #240]	; (82e40 <vCommunicationTask+0x22c>)
   82d50:	4798      	blx	r3
							
						break;
   82d52:	e765      	b.n	82c20 <vCommunicationTask+0xc>
					//end of get status pickup
				break;
				
				
				case START_DROP_OFF:
					if (twi_dropoffStart() == 1)
   82d54:	4b3b      	ldr	r3, [pc, #236]	; (82e44 <vCommunicationTask+0x230>)
   82d56:	4798      	blx	r3
   82d58:	2801      	cmp	r0, #1
   82d5a:	d103      	bne.n	82d64 <vCommunicationTask+0x150>
					{
						//done starting pickup
						current_twi_state=GET_STATUS_DROP_OFF;
   82d5c:	2204      	movs	r2, #4
   82d5e:	4b22      	ldr	r3, [pc, #136]	; (82de8 <vCommunicationTask+0x1d4>)
   82d60:	701a      	strb	r2, [r3, #0]
   82d62:	e75d      	b.n	82c20 <vCommunicationTask+0xc>
					}
					else
					{
						//failed to start DROPOFF
						puts("FAILD TO START DROPOFF");
   82d64:	4838      	ldr	r0, [pc, #224]	; (82e48 <vCommunicationTask+0x234>)
   82d66:	4b22      	ldr	r3, [pc, #136]	; (82df0 <vCommunicationTask+0x1dc>)
   82d68:	4798      	blx	r3
						current_twi_state=START_DROP_OFF;
   82d6a:	2203      	movs	r2, #3
   82d6c:	4b1e      	ldr	r3, [pc, #120]	; (82de8 <vCommunicationTask+0x1d4>)
   82d6e:	701a      	strb	r2, [r3, #0]
   82d70:	e756      	b.n	82c20 <vCommunicationTask+0xc>
					}
				break;
				
				case GET_STATUS_DROP_OFF:
					//puts("STATUS DROP OFF");
					switch(twi_dropoffGetStatus())
   82d72:	4b36      	ldr	r3, [pc, #216]	; (82e4c <vCommunicationTask+0x238>)
   82d74:	4798      	blx	r3
   82d76:	3802      	subs	r0, #2
   82d78:	2803      	cmp	r0, #3
   82d7a:	f63f af51 	bhi.w	82c20 <vCommunicationTask+0xc>
   82d7e:	e8df f000 	tbb	[pc, r0]
   82d82:	0f02      	.short	0x0f02
   82d84:	1713      	.short	0x1713
					{
						case DROPOFF_DONE:
						//tell (set)drive that pickup is done.
							setDoneDropoff();
   82d86:	4b32      	ldr	r3, [pc, #200]	; (82e50 <vCommunicationTask+0x23c>)
   82d88:	4798      	blx	r3
							printf("DROPOFF_DONE\n");
   82d8a:	4832      	ldr	r0, [pc, #200]	; (82e54 <vCommunicationTask+0x240>)
   82d8c:	4b23      	ldr	r3, [pc, #140]	; (82e1c <vCommunicationTask+0x208>)
   82d8e:	4798      	blx	r3
							booleanUltraSensor=0;
   82d90:	2300      	movs	r3, #0
   82d92:	7033      	strb	r3, [r6, #0]
							booleanModifyPosition=0;
   82d94:	4a13      	ldr	r2, [pc, #76]	; (82de4 <vCommunicationTask+0x1d0>)
   82d96:	7013      	strb	r3, [r2, #0]
							booleanCommunication=0;
   82d98:	7023      	strb	r3, [r4, #0]
							
							booleanDriving=0;
   82d9a:	4a11      	ldr	r2, [pc, #68]	; (82de0 <vCommunicationTask+0x1cc>)
   82d9c:	7013      	strb	r3, [r2, #0]
						break;
   82d9e:	e73f      	b.n	82c20 <vCommunicationTask+0xc>
						case DROPOFF_RUNNING:
							printf("DROPOFF_RUNNING\n");
   82da0:	482d      	ldr	r0, [pc, #180]	; (82e58 <vCommunicationTask+0x244>)
   82da2:	4b1e      	ldr	r3, [pc, #120]	; (82e1c <vCommunicationTask+0x208>)
   82da4:	4798      	blx	r3
						break;
   82da6:	e73b      	b.n	82c20 <vCommunicationTask+0xc>
						case DROPOFF_FAILED:
							printf("DROPOFF_FAILED\n");
   82da8:	482c      	ldr	r0, [pc, #176]	; (82e5c <vCommunicationTask+0x248>)
   82daa:	4b1c      	ldr	r3, [pc, #112]	; (82e1c <vCommunicationTask+0x208>)
   82dac:	4798      	blx	r3
						break;
   82dae:	e737      	b.n	82c20 <vCommunicationTask+0xc>
						case DROPOFF_IDLE:
							printf("DROPOFF_IDLE\n");
   82db0:	482b      	ldr	r0, [pc, #172]	; (82e60 <vCommunicationTask+0x24c>)
   82db2:	4b1a      	ldr	r3, [pc, #104]	; (82e1c <vCommunicationTask+0x208>)
   82db4:	4798      	blx	r3
						break;
   82db6:	e733      	b.n	82c20 <vCommunicationTask+0xc>
					}				
				break;
				case IDLE:
					puts("IDLE");
   82db8:	482a      	ldr	r0, [pc, #168]	; (82e64 <vCommunicationTask+0x250>)
   82dba:	4b0d      	ldr	r3, [pc, #52]	; (82df0 <vCommunicationTask+0x1dc>)
   82dbc:	4798      	blx	r3
				break;
   82dbe:	e72f      	b.n	82c20 <vCommunicationTask+0xc>
				default:
					printf("failed twi switch %d\n",current_twi_state);
   82dc0:	4829      	ldr	r0, [pc, #164]	; (82e68 <vCommunicationTask+0x254>)
   82dc2:	4b16      	ldr	r3, [pc, #88]	; (82e1c <vCommunicationTask+0x208>)
   82dc4:	4798      	blx	r3
					char xx[255];
					scanf(xx);
   82dc6:	a804      	add	r0, sp, #16
   82dc8:	4b28      	ldr	r3, [pc, #160]	; (82e6c <vCommunicationTask+0x258>)
   82dca:	4798      	blx	r3
				break;
			}
			//end of current_twi_state
		} 
   82dcc:	e728      	b.n	82c20 <vCommunicationTask+0xc>
		else
		{
			vTaskDelay(pdMSTOTICKS(100));
   82dce:	2064      	movs	r0, #100	; 0x64
   82dd0:	47a8      	blx	r5
   82dd2:	e725      	b.n	82c20 <vCommunicationTask+0xc>
   82dd4:	2007ad2c 	.word	0x2007ad2c
   82dd8:	00081c15 	.word	0x00081c15
   82ddc:	2007ad2d 	.word	0x2007ad2d
   82de0:	2007ad20 	.word	0x2007ad20
   82de4:	2007ad2e 	.word	0x2007ad2e
   82de8:	2007ad95 	.word	0x2007ad95
   82dec:	0008829c 	.word	0x0008829c
   82df0:	00084271 	.word	0x00084271
   82df4:	2007ad24 	.word	0x2007ad24
   82df8:	00080945 	.word	0x00080945
   82dfc:	000882a8 	.word	0x000882a8
   82e00:	000882b8 	.word	0x000882b8
   82e04:	00080639 	.word	0x00080639
   82e08:	000882d8 	.word	0x000882d8
   82e0c:	00080a69 	.word	0x00080a69
   82e10:	000882ec 	.word	0x000882ec
   82e14:	000882fc 	.word	0x000882fc
   82e18:	000883d4 	.word	0x000883d4
   82e1c:	00084041 	.word	0x00084041
   82e20:	00080a91 	.word	0x00080a91
   82e24:	00088314 	.word	0x00088314
   82e28:	00088324 	.word	0x00088324
   82e2c:	00088338 	.word	0x00088338
   82e30:	00080659 	.word	0x00080659
   82e34:	00088344 	.word	0x00088344
   82e38:	00088358 	.word	0x00088358
   82e3c:	00088374 	.word	0x00088374
   82e40:	00080b31 	.word	0x00080b31
   82e44:	00080b6d 	.word	0x00080b6d
   82e48:	0008839c 	.word	0x0008839c
   82e4c:	00080b95 	.word	0x00080b95
   82e50:	00080675 	.word	0x00080675
   82e54:	000883b4 	.word	0x000883b4
   82e58:	000883c4 	.word	0x000883c4
   82e5c:	000883d8 	.word	0x000883d8
   82e60:	000883e8 	.word	0x000883e8
   82e64:	000881b4 	.word	0x000881b4
   82e68:	000883f8 	.word	0x000883f8
   82e6c:	00084069 	.word	0x00084069

00082e70 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   82e70:	b5f0      	push	{r4, r5, r6, r7, lr}
   82e72:	b083      	sub	sp, #12
   82e74:	4604      	mov	r4, r0
   82e76:	460d      	mov	r5, r1
	uint32_t val = 0;
   82e78:	2300      	movs	r3, #0
   82e7a:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   82e7c:	4b1f      	ldr	r3, [pc, #124]	; (82efc <usart_serial_getchar+0x8c>)
   82e7e:	4298      	cmp	r0, r3
   82e80:	d107      	bne.n	82e92 <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
   82e82:	461f      	mov	r7, r3
   82e84:	4e1e      	ldr	r6, [pc, #120]	; (82f00 <usart_serial_getchar+0x90>)
   82e86:	4638      	mov	r0, r7
   82e88:	4629      	mov	r1, r5
   82e8a:	47b0      	blx	r6
   82e8c:	2800      	cmp	r0, #0
   82e8e:	d1fa      	bne.n	82e86 <usart_serial_getchar+0x16>
   82e90:	e019      	b.n	82ec6 <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   82e92:	4b1c      	ldr	r3, [pc, #112]	; (82f04 <usart_serial_getchar+0x94>)
   82e94:	4298      	cmp	r0, r3
   82e96:	d109      	bne.n	82eac <usart_serial_getchar+0x3c>
		while (usart_read(p_usart, &val));
   82e98:	461f      	mov	r7, r3
   82e9a:	4e1b      	ldr	r6, [pc, #108]	; (82f08 <usart_serial_getchar+0x98>)
   82e9c:	4638      	mov	r0, r7
   82e9e:	a901      	add	r1, sp, #4
   82ea0:	47b0      	blx	r6
   82ea2:	2800      	cmp	r0, #0
   82ea4:	d1fa      	bne.n	82e9c <usart_serial_getchar+0x2c>
		*data = (uint8_t)(val & 0xFF);
   82ea6:	9b01      	ldr	r3, [sp, #4]
   82ea8:	702b      	strb	r3, [r5, #0]
   82eaa:	e019      	b.n	82ee0 <usart_serial_getchar+0x70>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   82eac:	4b17      	ldr	r3, [pc, #92]	; (82f0c <usart_serial_getchar+0x9c>)
   82eae:	4298      	cmp	r0, r3
   82eb0:	d109      	bne.n	82ec6 <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
   82eb2:	461e      	mov	r6, r3
   82eb4:	4c14      	ldr	r4, [pc, #80]	; (82f08 <usart_serial_getchar+0x98>)
   82eb6:	4630      	mov	r0, r6
   82eb8:	a901      	add	r1, sp, #4
   82eba:	47a0      	blx	r4
   82ebc:	2800      	cmp	r0, #0
   82ebe:	d1fa      	bne.n	82eb6 <usart_serial_getchar+0x46>
		*data = (uint8_t)(val & 0xFF);
   82ec0:	9b01      	ldr	r3, [sp, #4]
   82ec2:	702b      	strb	r3, [r5, #0]
   82ec4:	e018      	b.n	82ef8 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   82ec6:	4b12      	ldr	r3, [pc, #72]	; (82f10 <usart_serial_getchar+0xa0>)
   82ec8:	429c      	cmp	r4, r3
   82eca:	d109      	bne.n	82ee0 <usart_serial_getchar+0x70>
		while (usart_read(p_usart, &val));
   82ecc:	461e      	mov	r6, r3
   82ece:	4c0e      	ldr	r4, [pc, #56]	; (82f08 <usart_serial_getchar+0x98>)
   82ed0:	4630      	mov	r0, r6
   82ed2:	a901      	add	r1, sp, #4
   82ed4:	47a0      	blx	r4
   82ed6:	2800      	cmp	r0, #0
   82ed8:	d1fa      	bne.n	82ed0 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
   82eda:	9b01      	ldr	r3, [sp, #4]
   82edc:	702b      	strb	r3, [r5, #0]
   82ede:	e00b      	b.n	82ef8 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   82ee0:	4b0c      	ldr	r3, [pc, #48]	; (82f14 <usart_serial_getchar+0xa4>)
   82ee2:	429c      	cmp	r4, r3
   82ee4:	d108      	bne.n	82ef8 <usart_serial_getchar+0x88>
		while (usart_read(p_usart, &val));
   82ee6:	461e      	mov	r6, r3
   82ee8:	4c07      	ldr	r4, [pc, #28]	; (82f08 <usart_serial_getchar+0x98>)
   82eea:	4630      	mov	r0, r6
   82eec:	a901      	add	r1, sp, #4
   82eee:	47a0      	blx	r4
   82ef0:	2800      	cmp	r0, #0
   82ef2:	d1fa      	bne.n	82eea <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
   82ef4:	9b01      	ldr	r3, [sp, #4]
   82ef6:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   82ef8:	b003      	add	sp, #12
   82efa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82efc:	400e0800 	.word	0x400e0800
   82f00:	00080e4d 	.word	0x00080e4d
   82f04:	40098000 	.word	0x40098000
   82f08:	00080c6d 	.word	0x00080c6d
   82f0c:	4009c000 	.word	0x4009c000
   82f10:	400a0000 	.word	0x400a0000
   82f14:	400a4000 	.word	0x400a4000

00082f18 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   82f18:	b570      	push	{r4, r5, r6, lr}
   82f1a:	460c      	mov	r4, r1
#ifdef UART
	if (UART == (Uart*)p_usart) {
   82f1c:	4b21      	ldr	r3, [pc, #132]	; (82fa4 <usart_serial_putchar+0x8c>)
   82f1e:	4298      	cmp	r0, r3
   82f20:	d107      	bne.n	82f32 <usart_serial_putchar+0x1a>
		while (uart_write((Uart*)p_usart, c)!=0);
   82f22:	461e      	mov	r6, r3
   82f24:	4d20      	ldr	r5, [pc, #128]	; (82fa8 <usart_serial_putchar+0x90>)
   82f26:	4630      	mov	r0, r6
   82f28:	4621      	mov	r1, r4
   82f2a:	47a8      	blx	r5
   82f2c:	2800      	cmp	r0, #0
   82f2e:	d1fa      	bne.n	82f26 <usart_serial_putchar+0xe>
   82f30:	e02b      	b.n	82f8a <usart_serial_putchar+0x72>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   82f32:	4b1e      	ldr	r3, [pc, #120]	; (82fac <usart_serial_putchar+0x94>)
   82f34:	4298      	cmp	r0, r3
   82f36:	d107      	bne.n	82f48 <usart_serial_putchar+0x30>
		while (usart_write(p_usart, c)!=0);
   82f38:	461e      	mov	r6, r3
   82f3a:	4d1d      	ldr	r5, [pc, #116]	; (82fb0 <usart_serial_putchar+0x98>)
   82f3c:	4630      	mov	r0, r6
   82f3e:	4621      	mov	r1, r4
   82f40:	47a8      	blx	r5
   82f42:	2800      	cmp	r0, #0
   82f44:	d1fa      	bne.n	82f3c <usart_serial_putchar+0x24>
   82f46:	e022      	b.n	82f8e <usart_serial_putchar+0x76>
		return 1;
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   82f48:	4b1a      	ldr	r3, [pc, #104]	; (82fb4 <usart_serial_putchar+0x9c>)
   82f4a:	4298      	cmp	r0, r3
   82f4c:	d107      	bne.n	82f5e <usart_serial_putchar+0x46>
		while (usart_write(p_usart, c)!=0);
   82f4e:	461e      	mov	r6, r3
   82f50:	4d17      	ldr	r5, [pc, #92]	; (82fb0 <usart_serial_putchar+0x98>)
   82f52:	4630      	mov	r0, r6
   82f54:	4621      	mov	r1, r4
   82f56:	47a8      	blx	r5
   82f58:	2800      	cmp	r0, #0
   82f5a:	d1fa      	bne.n	82f52 <usart_serial_putchar+0x3a>
   82f5c:	e019      	b.n	82f92 <usart_serial_putchar+0x7a>
		return 1;
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   82f5e:	4b16      	ldr	r3, [pc, #88]	; (82fb8 <usart_serial_putchar+0xa0>)
   82f60:	4298      	cmp	r0, r3
   82f62:	d107      	bne.n	82f74 <usart_serial_putchar+0x5c>
		while (usart_write(p_usart, c)!=0);
   82f64:	461e      	mov	r6, r3
   82f66:	4d12      	ldr	r5, [pc, #72]	; (82fb0 <usart_serial_putchar+0x98>)
   82f68:	4630      	mov	r0, r6
   82f6a:	4621      	mov	r1, r4
   82f6c:	47a8      	blx	r5
   82f6e:	2800      	cmp	r0, #0
   82f70:	d1fa      	bne.n	82f68 <usart_serial_putchar+0x50>
   82f72:	e010      	b.n	82f96 <usart_serial_putchar+0x7e>
		return 1;
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   82f74:	4b11      	ldr	r3, [pc, #68]	; (82fbc <usart_serial_putchar+0xa4>)
   82f76:	4298      	cmp	r0, r3
   82f78:	d10f      	bne.n	82f9a <usart_serial_putchar+0x82>
		while (usart_write(p_usart, c)!=0);
   82f7a:	461e      	mov	r6, r3
   82f7c:	4d0c      	ldr	r5, [pc, #48]	; (82fb0 <usart_serial_putchar+0x98>)
   82f7e:	4630      	mov	r0, r6
   82f80:	4621      	mov	r1, r4
   82f82:	47a8      	blx	r5
   82f84:	2800      	cmp	r0, #0
   82f86:	d1fa      	bne.n	82f7e <usart_serial_putchar+0x66>
   82f88:	e009      	b.n	82f9e <usart_serial_putchar+0x86>
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
   82f8a:	2001      	movs	r0, #1
   82f8c:	bd70      	pop	{r4, r5, r6, pc}
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   82f8e:	2001      	movs	r0, #1
   82f90:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   82f92:	2001      	movs	r0, #1
   82f94:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   82f96:	2001      	movs	r0, #1
   82f98:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   82f9a:	2000      	movs	r0, #0
   82f9c:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   82f9e:	2001      	movs	r0, #1
	}
# endif
#endif /* ifdef USART */

	return 0;
}
   82fa0:	bd70      	pop	{r4, r5, r6, pc}
   82fa2:	bf00      	nop
   82fa4:	400e0800 	.word	0x400e0800
   82fa8:	00080e3d 	.word	0x00080e3d
   82fac:	40098000 	.word	0x40098000
   82fb0:	00080c59 	.word	0x00080c59
   82fb4:	4009c000 	.word	0x4009c000
   82fb8:	400a0000 	.word	0x400a0000
   82fbc:	400a4000 	.word	0x400a4000

00082fc0 <main>:
	printf("Console ready\n");
	printf("=============\n");
}

int main (void)
{
   82fc0:	b570      	push	{r4, r5, r6, lr}
   82fc2:	b088      	sub	sp, #32
	/* Insert system clock initialization code here (sysclk_init()). */
	sysclk_init();
   82fc4:	4b4b      	ldr	r3, [pc, #300]	; (830f4 <main+0x134>)
   82fc6:	4798      	blx	r3
	board_init();
   82fc8:	4b4b      	ldr	r3, [pc, #300]	; (830f8 <main+0x138>)
   82fca:	4798      	blx	r3
   82fcc:	2008      	movs	r0, #8
   82fce:	4c4b      	ldr	r4, [pc, #300]	; (830fc <main+0x13c>)
   82fd0:	47a0      	blx	r4
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   82fd2:	4d4b      	ldr	r5, [pc, #300]	; (83100 <main+0x140>)
   82fd4:	4b4b      	ldr	r3, [pc, #300]	; (83104 <main+0x144>)
   82fd6:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   82fd8:	4a4b      	ldr	r2, [pc, #300]	; (83108 <main+0x148>)
   82fda:	4b4c      	ldr	r3, [pc, #304]	; (8310c <main+0x14c>)
   82fdc:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   82fde:	4a4c      	ldr	r2, [pc, #304]	; (83110 <main+0x150>)
   82fe0:	4b4c      	ldr	r3, [pc, #304]	; (83114 <main+0x154>)
   82fe2:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   82fe4:	4b4c      	ldr	r3, [pc, #304]	; (83118 <main+0x158>)
   82fe6:	9305      	str	r3, [sp, #20]
	uart_settings.ul_baudrate = opt->baudrate;
   82fe8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   82fec:	9306      	str	r3, [sp, #24]
	uart_settings.ul_mode = opt->paritytype;
   82fee:	f44f 6300 	mov.w	r3, #2048	; 0x800
   82ff2:	9307      	str	r3, [sp, #28]
   82ff4:	2008      	movs	r0, #8
   82ff6:	47a0      	blx	r4
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   82ff8:	4628      	mov	r0, r5
   82ffa:	a905      	add	r1, sp, #20
   82ffc:	4b47      	ldr	r3, [pc, #284]	; (8311c <main+0x15c>)
   82ffe:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   83000:	4e47      	ldr	r6, [pc, #284]	; (83120 <main+0x160>)
   83002:	6833      	ldr	r3, [r6, #0]
   83004:	6898      	ldr	r0, [r3, #8]
   83006:	2100      	movs	r1, #0
   83008:	4d46      	ldr	r5, [pc, #280]	; (83124 <main+0x164>)
   8300a:	47a8      	blx	r5
	setbuf(stdin, NULL);
   8300c:	6833      	ldr	r3, [r6, #0]
   8300e:	6858      	ldr	r0, [r3, #4]
   83010:	2100      	movs	r1, #0
   83012:	47a8      	blx	r5

	/* Configure console UART. */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
	
	printf("Console ready\n");
   83014:	4844      	ldr	r0, [pc, #272]	; (83128 <main+0x168>)
   83016:	4d45      	ldr	r5, [pc, #276]	; (8312c <main+0x16c>)
   83018:	47a8      	blx	r5
	printf("=============\n");
   8301a:	4845      	ldr	r0, [pc, #276]	; (83130 <main+0x170>)
   8301c:	47a8      	blx	r5
{
	/* Insert system clock initialization code here (sysclk_init()). */
	sysclk_init();
	board_init();
	configure_console();
	TC0_init();
   8301e:	4b45      	ldr	r3, [pc, #276]	; (83134 <main+0x174>)
   83020:	4798      	blx	r3
	//init twi communication
	twi_comInit();
   83022:	4b45      	ldr	r3, [pc, #276]	; (83138 <main+0x178>)
   83024:	4798      	blx	r3
	
	//armInfo = twi_getArmInfo();
	
	uint32_t value = 0;
	
	current_twi_state = INIT_ARM;
   83026:	2500      	movs	r5, #0
   83028:	4b44      	ldr	r3, [pc, #272]	; (8313c <main+0x17c>)
   8302a:	701d      	strb	r5, [r3, #0]
   8302c:	200b      	movs	r0, #11
   8302e:	47a0      	blx	r4
   83030:	200c      	movs	r0, #12
   83032:	47a0      	blx	r4
   83034:	200d      	movs	r0, #13
   83036:	47a0      	blx	r4
   83038:	200e      	movs	r0, #14
   8303a:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   8303c:	4a40      	ldr	r2, [pc, #256]	; (83140 <main+0x180>)
   8303e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   83042:	6113      	str	r3, [r2, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   83044:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   83048:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   8304c:	6113      	str	r3, [r2, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   8304e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   83052:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
   83056:	6153      	str	r3, [r2, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   83058:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   8305c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   83060:	6113      	str	r3, [r2, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   83062:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   83066:	6353      	str	r3, [r2, #52]	; 0x34
	ioport_set_pin_dir(trig, IOPORT_DIR_OUTPUT);
	ioport_set_pin_dir(echo, IOPORT_DIR_INPUT);
	ioport_set_pin_dir(servo, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(servo, LOW);
	
	if(xTaskCreate(vDriveToObjectTask, "DriveToObject", 1000, NULL, 1, pxTaskDriveToObject) != pdPASS){
   83068:	2301      	movs	r3, #1
   8306a:	9300      	str	r3, [sp, #0]
   8306c:	4b35      	ldr	r3, [pc, #212]	; (83144 <main+0x184>)
   8306e:	681b      	ldr	r3, [r3, #0]
   83070:	9301      	str	r3, [sp, #4]
   83072:	9502      	str	r5, [sp, #8]
   83074:	9503      	str	r5, [sp, #12]
   83076:	4834      	ldr	r0, [pc, #208]	; (83148 <main+0x188>)
   83078:	4934      	ldr	r1, [pc, #208]	; (8314c <main+0x18c>)
   8307a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   8307e:	462b      	mov	r3, r5
   83080:	4c33      	ldr	r4, [pc, #204]	; (83150 <main+0x190>)
   83082:	47a0      	blx	r4
   83084:	2801      	cmp	r0, #1
   83086:	d002      	beq.n	8308e <main+0xce>
		printf("Failed to create DriveToObject-task");
   83088:	4832      	ldr	r0, [pc, #200]	; (83154 <main+0x194>)
   8308a:	4b28      	ldr	r3, [pc, #160]	; (8312c <main+0x16c>)
   8308c:	4798      	blx	r3
	}
	
	if(xTaskCreate(vUltraSensorTask, "UltraSensor", 1000, NULL, 1, pxTaskUltraSensor) != pdPASS){
   8308e:	2301      	movs	r3, #1
   83090:	9300      	str	r3, [sp, #0]
   83092:	4b31      	ldr	r3, [pc, #196]	; (83158 <main+0x198>)
   83094:	681b      	ldr	r3, [r3, #0]
   83096:	9301      	str	r3, [sp, #4]
   83098:	2300      	movs	r3, #0
   8309a:	9302      	str	r3, [sp, #8]
   8309c:	9303      	str	r3, [sp, #12]
   8309e:	482f      	ldr	r0, [pc, #188]	; (8315c <main+0x19c>)
   830a0:	492f      	ldr	r1, [pc, #188]	; (83160 <main+0x1a0>)
   830a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   830a6:	4c2a      	ldr	r4, [pc, #168]	; (83150 <main+0x190>)
   830a8:	47a0      	blx	r4
   830aa:	2801      	cmp	r0, #1
   830ac:	d002      	beq.n	830b4 <main+0xf4>
		printf("Failed to create UltraSensor-task");
   830ae:	482d      	ldr	r0, [pc, #180]	; (83164 <main+0x1a4>)
   830b0:	4b1e      	ldr	r3, [pc, #120]	; (8312c <main+0x16c>)
   830b2:	4798      	blx	r3
	}
	
	if(xTaskCreate(vCommunicationTask, "Communication", 1000, NULL, 1, pxTaskCommunication) != pdPASS){
   830b4:	2301      	movs	r3, #1
   830b6:	9300      	str	r3, [sp, #0]
   830b8:	4b2b      	ldr	r3, [pc, #172]	; (83168 <main+0x1a8>)
   830ba:	681b      	ldr	r3, [r3, #0]
   830bc:	9301      	str	r3, [sp, #4]
   830be:	2300      	movs	r3, #0
   830c0:	9302      	str	r3, [sp, #8]
   830c2:	9303      	str	r3, [sp, #12]
   830c4:	4829      	ldr	r0, [pc, #164]	; (8316c <main+0x1ac>)
   830c6:	492a      	ldr	r1, [pc, #168]	; (83170 <main+0x1b0>)
   830c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   830cc:	4c20      	ldr	r4, [pc, #128]	; (83150 <main+0x190>)
   830ce:	47a0      	blx	r4
   830d0:	2801      	cmp	r0, #1
   830d2:	d002      	beq.n	830da <main+0x11a>
		printf("Failed to create Communication-task");
   830d4:	4827      	ldr	r0, [pc, #156]	; (83174 <main+0x1b4>)
   830d6:	4b15      	ldr	r3, [pc, #84]	; (8312c <main+0x16c>)
   830d8:	4798      	blx	r3
	}
	
	booleanDriving = 0;
   830da:	2300      	movs	r3, #0
   830dc:	4a26      	ldr	r2, [pc, #152]	; (83178 <main+0x1b8>)
   830de:	7013      	strb	r3, [r2, #0]
	booleanUltraSensor = 0;
   830e0:	4a26      	ldr	r2, [pc, #152]	; (8317c <main+0x1bc>)
   830e2:	7013      	strb	r3, [r2, #0]
	booleanModifyPosition = 0;
   830e4:	4a26      	ldr	r2, [pc, #152]	; (83180 <main+0x1c0>)
   830e6:	7013      	strb	r3, [r2, #0]
	booleanCommunication = 1;
   830e8:	2201      	movs	r2, #1
   830ea:	4b26      	ldr	r3, [pc, #152]	; (83184 <main+0x1c4>)
   830ec:	701a      	strb	r2, [r3, #0]
	
	vTaskStartScheduler();
   830ee:	4b26      	ldr	r3, [pc, #152]	; (83188 <main+0x1c8>)
   830f0:	4798      	blx	r3
   830f2:	e7fe      	b.n	830f2 <main+0x132>
   830f4:	000823b5 	.word	0x000823b5
   830f8:	00082419 	.word	0x00082419
   830fc:	00082851 	.word	0x00082851
   83100:	400e0800 	.word	0x400e0800
   83104:	2007ad84 	.word	0x2007ad84
   83108:	00082f19 	.word	0x00082f19
   8310c:	2007ad80 	.word	0x2007ad80
   83110:	00082e71 	.word	0x00082e71
   83114:	2007ad7c 	.word	0x2007ad7c
   83118:	0501bd00 	.word	0x0501bd00
   8311c:	00080e05 	.word	0x00080e05
   83120:	20070638 	.word	0x20070638
   83124:	00084281 	.word	0x00084281
   83128:	00088410 	.word	0x00088410
   8312c:	00084041 	.word	0x00084041
   83130:	00088420 	.word	0x00088420
   83134:	00080305 	.word	0x00080305
   83138:	000807c5 	.word	0x000807c5
   8313c:	2007ad95 	.word	0x2007ad95
   83140:	400e1200 	.word	0x400e1200
   83144:	2007ad8c 	.word	0x2007ad8c
   83148:	00082ac9 	.word	0x00082ac9
   8314c:	00088430 	.word	0x00088430
   83150:	0008174d 	.word	0x0008174d
   83154:	00088440 	.word	0x00088440
   83158:	2007ad88 	.word	0x2007ad88
   8315c:	00082b75 	.word	0x00082b75
   83160:	00088464 	.word	0x00088464
   83164:	00088470 	.word	0x00088470
   83168:	2007ad90 	.word	0x2007ad90
   8316c:	00082c15 	.word	0x00082c15
   83170:	00088494 	.word	0x00088494
   83174:	000884a4 	.word	0x000884a4
   83178:	2007ad20 	.word	0x2007ad20
   8317c:	2007ad2d 	.word	0x2007ad2d
   83180:	2007ad2e 	.word	0x2007ad2e
   83184:	2007ad2c 	.word	0x2007ad2c
   83188:	00081955 	.word	0x00081955

0008318c <__aeabi_drsub>:
   8318c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   83190:	e002      	b.n	83198 <__adddf3>
   83192:	bf00      	nop

00083194 <__aeabi_dsub>:
   83194:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00083198 <__adddf3>:
   83198:	b530      	push	{r4, r5, lr}
   8319a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   8319e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   831a2:	ea94 0f05 	teq	r4, r5
   831a6:	bf08      	it	eq
   831a8:	ea90 0f02 	teqeq	r0, r2
   831ac:	bf1f      	itttt	ne
   831ae:	ea54 0c00 	orrsne.w	ip, r4, r0
   831b2:	ea55 0c02 	orrsne.w	ip, r5, r2
   831b6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   831ba:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   831be:	f000 80e2 	beq.w	83386 <__adddf3+0x1ee>
   831c2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   831c6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   831ca:	bfb8      	it	lt
   831cc:	426d      	neglt	r5, r5
   831ce:	dd0c      	ble.n	831ea <__adddf3+0x52>
   831d0:	442c      	add	r4, r5
   831d2:	ea80 0202 	eor.w	r2, r0, r2
   831d6:	ea81 0303 	eor.w	r3, r1, r3
   831da:	ea82 0000 	eor.w	r0, r2, r0
   831de:	ea83 0101 	eor.w	r1, r3, r1
   831e2:	ea80 0202 	eor.w	r2, r0, r2
   831e6:	ea81 0303 	eor.w	r3, r1, r3
   831ea:	2d36      	cmp	r5, #54	; 0x36
   831ec:	bf88      	it	hi
   831ee:	bd30      	pophi	{r4, r5, pc}
   831f0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   831f4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   831f8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   831fc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   83200:	d002      	beq.n	83208 <__adddf3+0x70>
   83202:	4240      	negs	r0, r0
   83204:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   83208:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   8320c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   83210:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   83214:	d002      	beq.n	8321c <__adddf3+0x84>
   83216:	4252      	negs	r2, r2
   83218:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   8321c:	ea94 0f05 	teq	r4, r5
   83220:	f000 80a7 	beq.w	83372 <__adddf3+0x1da>
   83224:	f1a4 0401 	sub.w	r4, r4, #1
   83228:	f1d5 0e20 	rsbs	lr, r5, #32
   8322c:	db0d      	blt.n	8324a <__adddf3+0xb2>
   8322e:	fa02 fc0e 	lsl.w	ip, r2, lr
   83232:	fa22 f205 	lsr.w	r2, r2, r5
   83236:	1880      	adds	r0, r0, r2
   83238:	f141 0100 	adc.w	r1, r1, #0
   8323c:	fa03 f20e 	lsl.w	r2, r3, lr
   83240:	1880      	adds	r0, r0, r2
   83242:	fa43 f305 	asr.w	r3, r3, r5
   83246:	4159      	adcs	r1, r3
   83248:	e00e      	b.n	83268 <__adddf3+0xd0>
   8324a:	f1a5 0520 	sub.w	r5, r5, #32
   8324e:	f10e 0e20 	add.w	lr, lr, #32
   83252:	2a01      	cmp	r2, #1
   83254:	fa03 fc0e 	lsl.w	ip, r3, lr
   83258:	bf28      	it	cs
   8325a:	f04c 0c02 	orrcs.w	ip, ip, #2
   8325e:	fa43 f305 	asr.w	r3, r3, r5
   83262:	18c0      	adds	r0, r0, r3
   83264:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   83268:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8326c:	d507      	bpl.n	8327e <__adddf3+0xe6>
   8326e:	f04f 0e00 	mov.w	lr, #0
   83272:	f1dc 0c00 	rsbs	ip, ip, #0
   83276:	eb7e 0000 	sbcs.w	r0, lr, r0
   8327a:	eb6e 0101 	sbc.w	r1, lr, r1
   8327e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   83282:	d31b      	bcc.n	832bc <__adddf3+0x124>
   83284:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   83288:	d30c      	bcc.n	832a4 <__adddf3+0x10c>
   8328a:	0849      	lsrs	r1, r1, #1
   8328c:	ea5f 0030 	movs.w	r0, r0, rrx
   83290:	ea4f 0c3c 	mov.w	ip, ip, rrx
   83294:	f104 0401 	add.w	r4, r4, #1
   83298:	ea4f 5244 	mov.w	r2, r4, lsl #21
   8329c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   832a0:	f080 809a 	bcs.w	833d8 <__adddf3+0x240>
   832a4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   832a8:	bf08      	it	eq
   832aa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   832ae:	f150 0000 	adcs.w	r0, r0, #0
   832b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   832b6:	ea41 0105 	orr.w	r1, r1, r5
   832ba:	bd30      	pop	{r4, r5, pc}
   832bc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   832c0:	4140      	adcs	r0, r0
   832c2:	eb41 0101 	adc.w	r1, r1, r1
   832c6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   832ca:	f1a4 0401 	sub.w	r4, r4, #1
   832ce:	d1e9      	bne.n	832a4 <__adddf3+0x10c>
   832d0:	f091 0f00 	teq	r1, #0
   832d4:	bf04      	itt	eq
   832d6:	4601      	moveq	r1, r0
   832d8:	2000      	moveq	r0, #0
   832da:	fab1 f381 	clz	r3, r1
   832de:	bf08      	it	eq
   832e0:	3320      	addeq	r3, #32
   832e2:	f1a3 030b 	sub.w	r3, r3, #11
   832e6:	f1b3 0220 	subs.w	r2, r3, #32
   832ea:	da0c      	bge.n	83306 <__adddf3+0x16e>
   832ec:	320c      	adds	r2, #12
   832ee:	dd08      	ble.n	83302 <__adddf3+0x16a>
   832f0:	f102 0c14 	add.w	ip, r2, #20
   832f4:	f1c2 020c 	rsb	r2, r2, #12
   832f8:	fa01 f00c 	lsl.w	r0, r1, ip
   832fc:	fa21 f102 	lsr.w	r1, r1, r2
   83300:	e00c      	b.n	8331c <__adddf3+0x184>
   83302:	f102 0214 	add.w	r2, r2, #20
   83306:	bfd8      	it	le
   83308:	f1c2 0c20 	rsble	ip, r2, #32
   8330c:	fa01 f102 	lsl.w	r1, r1, r2
   83310:	fa20 fc0c 	lsr.w	ip, r0, ip
   83314:	bfdc      	itt	le
   83316:	ea41 010c 	orrle.w	r1, r1, ip
   8331a:	4090      	lslle	r0, r2
   8331c:	1ae4      	subs	r4, r4, r3
   8331e:	bfa2      	ittt	ge
   83320:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   83324:	4329      	orrge	r1, r5
   83326:	bd30      	popge	{r4, r5, pc}
   83328:	ea6f 0404 	mvn.w	r4, r4
   8332c:	3c1f      	subs	r4, #31
   8332e:	da1c      	bge.n	8336a <__adddf3+0x1d2>
   83330:	340c      	adds	r4, #12
   83332:	dc0e      	bgt.n	83352 <__adddf3+0x1ba>
   83334:	f104 0414 	add.w	r4, r4, #20
   83338:	f1c4 0220 	rsb	r2, r4, #32
   8333c:	fa20 f004 	lsr.w	r0, r0, r4
   83340:	fa01 f302 	lsl.w	r3, r1, r2
   83344:	ea40 0003 	orr.w	r0, r0, r3
   83348:	fa21 f304 	lsr.w	r3, r1, r4
   8334c:	ea45 0103 	orr.w	r1, r5, r3
   83350:	bd30      	pop	{r4, r5, pc}
   83352:	f1c4 040c 	rsb	r4, r4, #12
   83356:	f1c4 0220 	rsb	r2, r4, #32
   8335a:	fa20 f002 	lsr.w	r0, r0, r2
   8335e:	fa01 f304 	lsl.w	r3, r1, r4
   83362:	ea40 0003 	orr.w	r0, r0, r3
   83366:	4629      	mov	r1, r5
   83368:	bd30      	pop	{r4, r5, pc}
   8336a:	fa21 f004 	lsr.w	r0, r1, r4
   8336e:	4629      	mov	r1, r5
   83370:	bd30      	pop	{r4, r5, pc}
   83372:	f094 0f00 	teq	r4, #0
   83376:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   8337a:	bf06      	itte	eq
   8337c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   83380:	3401      	addeq	r4, #1
   83382:	3d01      	subne	r5, #1
   83384:	e74e      	b.n	83224 <__adddf3+0x8c>
   83386:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8338a:	bf18      	it	ne
   8338c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   83390:	d029      	beq.n	833e6 <__adddf3+0x24e>
   83392:	ea94 0f05 	teq	r4, r5
   83396:	bf08      	it	eq
   83398:	ea90 0f02 	teqeq	r0, r2
   8339c:	d005      	beq.n	833aa <__adddf3+0x212>
   8339e:	ea54 0c00 	orrs.w	ip, r4, r0
   833a2:	bf04      	itt	eq
   833a4:	4619      	moveq	r1, r3
   833a6:	4610      	moveq	r0, r2
   833a8:	bd30      	pop	{r4, r5, pc}
   833aa:	ea91 0f03 	teq	r1, r3
   833ae:	bf1e      	ittt	ne
   833b0:	2100      	movne	r1, #0
   833b2:	2000      	movne	r0, #0
   833b4:	bd30      	popne	{r4, r5, pc}
   833b6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   833ba:	d105      	bne.n	833c8 <__adddf3+0x230>
   833bc:	0040      	lsls	r0, r0, #1
   833be:	4149      	adcs	r1, r1
   833c0:	bf28      	it	cs
   833c2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   833c6:	bd30      	pop	{r4, r5, pc}
   833c8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   833cc:	bf3c      	itt	cc
   833ce:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   833d2:	bd30      	popcc	{r4, r5, pc}
   833d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   833d8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   833dc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   833e0:	f04f 0000 	mov.w	r0, #0
   833e4:	bd30      	pop	{r4, r5, pc}
   833e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   833ea:	bf1a      	itte	ne
   833ec:	4619      	movne	r1, r3
   833ee:	4610      	movne	r0, r2
   833f0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   833f4:	bf1c      	itt	ne
   833f6:	460b      	movne	r3, r1
   833f8:	4602      	movne	r2, r0
   833fa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   833fe:	bf06      	itte	eq
   83400:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   83404:	ea91 0f03 	teqeq	r1, r3
   83408:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   8340c:	bd30      	pop	{r4, r5, pc}
   8340e:	bf00      	nop

00083410 <__aeabi_ui2d>:
   83410:	f090 0f00 	teq	r0, #0
   83414:	bf04      	itt	eq
   83416:	2100      	moveq	r1, #0
   83418:	4770      	bxeq	lr
   8341a:	b530      	push	{r4, r5, lr}
   8341c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   83420:	f104 0432 	add.w	r4, r4, #50	; 0x32
   83424:	f04f 0500 	mov.w	r5, #0
   83428:	f04f 0100 	mov.w	r1, #0
   8342c:	e750      	b.n	832d0 <__adddf3+0x138>
   8342e:	bf00      	nop

00083430 <__aeabi_i2d>:
   83430:	f090 0f00 	teq	r0, #0
   83434:	bf04      	itt	eq
   83436:	2100      	moveq	r1, #0
   83438:	4770      	bxeq	lr
   8343a:	b530      	push	{r4, r5, lr}
   8343c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   83440:	f104 0432 	add.w	r4, r4, #50	; 0x32
   83444:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   83448:	bf48      	it	mi
   8344a:	4240      	negmi	r0, r0
   8344c:	f04f 0100 	mov.w	r1, #0
   83450:	e73e      	b.n	832d0 <__adddf3+0x138>
   83452:	bf00      	nop

00083454 <__aeabi_f2d>:
   83454:	0042      	lsls	r2, r0, #1
   83456:	ea4f 01e2 	mov.w	r1, r2, asr #3
   8345a:	ea4f 0131 	mov.w	r1, r1, rrx
   8345e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   83462:	bf1f      	itttt	ne
   83464:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   83468:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   8346c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   83470:	4770      	bxne	lr
   83472:	f092 0f00 	teq	r2, #0
   83476:	bf14      	ite	ne
   83478:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   8347c:	4770      	bxeq	lr
   8347e:	b530      	push	{r4, r5, lr}
   83480:	f44f 7460 	mov.w	r4, #896	; 0x380
   83484:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   83488:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8348c:	e720      	b.n	832d0 <__adddf3+0x138>
   8348e:	bf00      	nop

00083490 <__aeabi_ul2d>:
   83490:	ea50 0201 	orrs.w	r2, r0, r1
   83494:	bf08      	it	eq
   83496:	4770      	bxeq	lr
   83498:	b530      	push	{r4, r5, lr}
   8349a:	f04f 0500 	mov.w	r5, #0
   8349e:	e00a      	b.n	834b6 <__aeabi_l2d+0x16>

000834a0 <__aeabi_l2d>:
   834a0:	ea50 0201 	orrs.w	r2, r0, r1
   834a4:	bf08      	it	eq
   834a6:	4770      	bxeq	lr
   834a8:	b530      	push	{r4, r5, lr}
   834aa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   834ae:	d502      	bpl.n	834b6 <__aeabi_l2d+0x16>
   834b0:	4240      	negs	r0, r0
   834b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   834b6:	f44f 6480 	mov.w	r4, #1024	; 0x400
   834ba:	f104 0432 	add.w	r4, r4, #50	; 0x32
   834be:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   834c2:	f43f aedc 	beq.w	8327e <__adddf3+0xe6>
   834c6:	f04f 0203 	mov.w	r2, #3
   834ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   834ce:	bf18      	it	ne
   834d0:	3203      	addne	r2, #3
   834d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   834d6:	bf18      	it	ne
   834d8:	3203      	addne	r2, #3
   834da:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   834de:	f1c2 0320 	rsb	r3, r2, #32
   834e2:	fa00 fc03 	lsl.w	ip, r0, r3
   834e6:	fa20 f002 	lsr.w	r0, r0, r2
   834ea:	fa01 fe03 	lsl.w	lr, r1, r3
   834ee:	ea40 000e 	orr.w	r0, r0, lr
   834f2:	fa21 f102 	lsr.w	r1, r1, r2
   834f6:	4414      	add	r4, r2
   834f8:	e6c1      	b.n	8327e <__adddf3+0xe6>
   834fa:	bf00      	nop

000834fc <__aeabi_dmul>:
   834fc:	b570      	push	{r4, r5, r6, lr}
   834fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
   83502:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   83506:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8350a:	bf1d      	ittte	ne
   8350c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   83510:	ea94 0f0c 	teqne	r4, ip
   83514:	ea95 0f0c 	teqne	r5, ip
   83518:	f000 f8de 	bleq	836d8 <__aeabi_dmul+0x1dc>
   8351c:	442c      	add	r4, r5
   8351e:	ea81 0603 	eor.w	r6, r1, r3
   83522:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   83526:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   8352a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   8352e:	bf18      	it	ne
   83530:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   83534:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   83538:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   8353c:	d038      	beq.n	835b0 <__aeabi_dmul+0xb4>
   8353e:	fba0 ce02 	umull	ip, lr, r0, r2
   83542:	f04f 0500 	mov.w	r5, #0
   83546:	fbe1 e502 	umlal	lr, r5, r1, r2
   8354a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   8354e:	fbe0 e503 	umlal	lr, r5, r0, r3
   83552:	f04f 0600 	mov.w	r6, #0
   83556:	fbe1 5603 	umlal	r5, r6, r1, r3
   8355a:	f09c 0f00 	teq	ip, #0
   8355e:	bf18      	it	ne
   83560:	f04e 0e01 	orrne.w	lr, lr, #1
   83564:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   83568:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   8356c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   83570:	d204      	bcs.n	8357c <__aeabi_dmul+0x80>
   83572:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   83576:	416d      	adcs	r5, r5
   83578:	eb46 0606 	adc.w	r6, r6, r6
   8357c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   83580:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   83584:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   83588:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   8358c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   83590:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   83594:	bf88      	it	hi
   83596:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8359a:	d81e      	bhi.n	835da <__aeabi_dmul+0xde>
   8359c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   835a0:	bf08      	it	eq
   835a2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   835a6:	f150 0000 	adcs.w	r0, r0, #0
   835aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   835ae:	bd70      	pop	{r4, r5, r6, pc}
   835b0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   835b4:	ea46 0101 	orr.w	r1, r6, r1
   835b8:	ea40 0002 	orr.w	r0, r0, r2
   835bc:	ea81 0103 	eor.w	r1, r1, r3
   835c0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   835c4:	bfc2      	ittt	gt
   835c6:	ebd4 050c 	rsbsgt	r5, r4, ip
   835ca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   835ce:	bd70      	popgt	{r4, r5, r6, pc}
   835d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   835d4:	f04f 0e00 	mov.w	lr, #0
   835d8:	3c01      	subs	r4, #1
   835da:	f300 80ab 	bgt.w	83734 <__aeabi_dmul+0x238>
   835de:	f114 0f36 	cmn.w	r4, #54	; 0x36
   835e2:	bfde      	ittt	le
   835e4:	2000      	movle	r0, #0
   835e6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   835ea:	bd70      	pople	{r4, r5, r6, pc}
   835ec:	f1c4 0400 	rsb	r4, r4, #0
   835f0:	3c20      	subs	r4, #32
   835f2:	da35      	bge.n	83660 <__aeabi_dmul+0x164>
   835f4:	340c      	adds	r4, #12
   835f6:	dc1b      	bgt.n	83630 <__aeabi_dmul+0x134>
   835f8:	f104 0414 	add.w	r4, r4, #20
   835fc:	f1c4 0520 	rsb	r5, r4, #32
   83600:	fa00 f305 	lsl.w	r3, r0, r5
   83604:	fa20 f004 	lsr.w	r0, r0, r4
   83608:	fa01 f205 	lsl.w	r2, r1, r5
   8360c:	ea40 0002 	orr.w	r0, r0, r2
   83610:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   83614:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   83618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   8361c:	fa21 f604 	lsr.w	r6, r1, r4
   83620:	eb42 0106 	adc.w	r1, r2, r6
   83624:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   83628:	bf08      	it	eq
   8362a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8362e:	bd70      	pop	{r4, r5, r6, pc}
   83630:	f1c4 040c 	rsb	r4, r4, #12
   83634:	f1c4 0520 	rsb	r5, r4, #32
   83638:	fa00 f304 	lsl.w	r3, r0, r4
   8363c:	fa20 f005 	lsr.w	r0, r0, r5
   83640:	fa01 f204 	lsl.w	r2, r1, r4
   83644:	ea40 0002 	orr.w	r0, r0, r2
   83648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8364c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   83650:	f141 0100 	adc.w	r1, r1, #0
   83654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   83658:	bf08      	it	eq
   8365a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8365e:	bd70      	pop	{r4, r5, r6, pc}
   83660:	f1c4 0520 	rsb	r5, r4, #32
   83664:	fa00 f205 	lsl.w	r2, r0, r5
   83668:	ea4e 0e02 	orr.w	lr, lr, r2
   8366c:	fa20 f304 	lsr.w	r3, r0, r4
   83670:	fa01 f205 	lsl.w	r2, r1, r5
   83674:	ea43 0302 	orr.w	r3, r3, r2
   83678:	fa21 f004 	lsr.w	r0, r1, r4
   8367c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   83680:	fa21 f204 	lsr.w	r2, r1, r4
   83684:	ea20 0002 	bic.w	r0, r0, r2
   83688:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   8368c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   83690:	bf08      	it	eq
   83692:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   83696:	bd70      	pop	{r4, r5, r6, pc}
   83698:	f094 0f00 	teq	r4, #0
   8369c:	d10f      	bne.n	836be <__aeabi_dmul+0x1c2>
   8369e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   836a2:	0040      	lsls	r0, r0, #1
   836a4:	eb41 0101 	adc.w	r1, r1, r1
   836a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   836ac:	bf08      	it	eq
   836ae:	3c01      	subeq	r4, #1
   836b0:	d0f7      	beq.n	836a2 <__aeabi_dmul+0x1a6>
   836b2:	ea41 0106 	orr.w	r1, r1, r6
   836b6:	f095 0f00 	teq	r5, #0
   836ba:	bf18      	it	ne
   836bc:	4770      	bxne	lr
   836be:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   836c2:	0052      	lsls	r2, r2, #1
   836c4:	eb43 0303 	adc.w	r3, r3, r3
   836c8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   836cc:	bf08      	it	eq
   836ce:	3d01      	subeq	r5, #1
   836d0:	d0f7      	beq.n	836c2 <__aeabi_dmul+0x1c6>
   836d2:	ea43 0306 	orr.w	r3, r3, r6
   836d6:	4770      	bx	lr
   836d8:	ea94 0f0c 	teq	r4, ip
   836dc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   836e0:	bf18      	it	ne
   836e2:	ea95 0f0c 	teqne	r5, ip
   836e6:	d00c      	beq.n	83702 <__aeabi_dmul+0x206>
   836e8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   836ec:	bf18      	it	ne
   836ee:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   836f2:	d1d1      	bne.n	83698 <__aeabi_dmul+0x19c>
   836f4:	ea81 0103 	eor.w	r1, r1, r3
   836f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   836fc:	f04f 0000 	mov.w	r0, #0
   83700:	bd70      	pop	{r4, r5, r6, pc}
   83702:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   83706:	bf06      	itte	eq
   83708:	4610      	moveq	r0, r2
   8370a:	4619      	moveq	r1, r3
   8370c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   83710:	d019      	beq.n	83746 <__aeabi_dmul+0x24a>
   83712:	ea94 0f0c 	teq	r4, ip
   83716:	d102      	bne.n	8371e <__aeabi_dmul+0x222>
   83718:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   8371c:	d113      	bne.n	83746 <__aeabi_dmul+0x24a>
   8371e:	ea95 0f0c 	teq	r5, ip
   83722:	d105      	bne.n	83730 <__aeabi_dmul+0x234>
   83724:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   83728:	bf1c      	itt	ne
   8372a:	4610      	movne	r0, r2
   8372c:	4619      	movne	r1, r3
   8372e:	d10a      	bne.n	83746 <__aeabi_dmul+0x24a>
   83730:	ea81 0103 	eor.w	r1, r1, r3
   83734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   83738:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8373c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   83740:	f04f 0000 	mov.w	r0, #0
   83744:	bd70      	pop	{r4, r5, r6, pc}
   83746:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8374a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   8374e:	bd70      	pop	{r4, r5, r6, pc}

00083750 <__aeabi_ddiv>:
   83750:	b570      	push	{r4, r5, r6, lr}
   83752:	f04f 0cff 	mov.w	ip, #255	; 0xff
   83756:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8375a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8375e:	bf1d      	ittte	ne
   83760:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   83764:	ea94 0f0c 	teqne	r4, ip
   83768:	ea95 0f0c 	teqne	r5, ip
   8376c:	f000 f8a7 	bleq	838be <__aeabi_ddiv+0x16e>
   83770:	eba4 0405 	sub.w	r4, r4, r5
   83774:	ea81 0e03 	eor.w	lr, r1, r3
   83778:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8377c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   83780:	f000 8088 	beq.w	83894 <__aeabi_ddiv+0x144>
   83784:	ea4f 3303 	mov.w	r3, r3, lsl #12
   83788:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   8378c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   83790:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   83794:	ea4f 2202 	mov.w	r2, r2, lsl #8
   83798:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   8379c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   837a0:	ea4f 2600 	mov.w	r6, r0, lsl #8
   837a4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   837a8:	429d      	cmp	r5, r3
   837aa:	bf08      	it	eq
   837ac:	4296      	cmpeq	r6, r2
   837ae:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   837b2:	f504 7440 	add.w	r4, r4, #768	; 0x300
   837b6:	d202      	bcs.n	837be <__aeabi_ddiv+0x6e>
   837b8:	085b      	lsrs	r3, r3, #1
   837ba:	ea4f 0232 	mov.w	r2, r2, rrx
   837be:	1ab6      	subs	r6, r6, r2
   837c0:	eb65 0503 	sbc.w	r5, r5, r3
   837c4:	085b      	lsrs	r3, r3, #1
   837c6:	ea4f 0232 	mov.w	r2, r2, rrx
   837ca:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   837ce:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   837d2:	ebb6 0e02 	subs.w	lr, r6, r2
   837d6:	eb75 0e03 	sbcs.w	lr, r5, r3
   837da:	bf22      	ittt	cs
   837dc:	1ab6      	subcs	r6, r6, r2
   837de:	4675      	movcs	r5, lr
   837e0:	ea40 000c 	orrcs.w	r0, r0, ip
   837e4:	085b      	lsrs	r3, r3, #1
   837e6:	ea4f 0232 	mov.w	r2, r2, rrx
   837ea:	ebb6 0e02 	subs.w	lr, r6, r2
   837ee:	eb75 0e03 	sbcs.w	lr, r5, r3
   837f2:	bf22      	ittt	cs
   837f4:	1ab6      	subcs	r6, r6, r2
   837f6:	4675      	movcs	r5, lr
   837f8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   837fc:	085b      	lsrs	r3, r3, #1
   837fe:	ea4f 0232 	mov.w	r2, r2, rrx
   83802:	ebb6 0e02 	subs.w	lr, r6, r2
   83806:	eb75 0e03 	sbcs.w	lr, r5, r3
   8380a:	bf22      	ittt	cs
   8380c:	1ab6      	subcs	r6, r6, r2
   8380e:	4675      	movcs	r5, lr
   83810:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   83814:	085b      	lsrs	r3, r3, #1
   83816:	ea4f 0232 	mov.w	r2, r2, rrx
   8381a:	ebb6 0e02 	subs.w	lr, r6, r2
   8381e:	eb75 0e03 	sbcs.w	lr, r5, r3
   83822:	bf22      	ittt	cs
   83824:	1ab6      	subcs	r6, r6, r2
   83826:	4675      	movcs	r5, lr
   83828:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   8382c:	ea55 0e06 	orrs.w	lr, r5, r6
   83830:	d018      	beq.n	83864 <__aeabi_ddiv+0x114>
   83832:	ea4f 1505 	mov.w	r5, r5, lsl #4
   83836:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   8383a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   8383e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   83842:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   83846:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   8384a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   8384e:	d1c0      	bne.n	837d2 <__aeabi_ddiv+0x82>
   83850:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   83854:	d10b      	bne.n	8386e <__aeabi_ddiv+0x11e>
   83856:	ea41 0100 	orr.w	r1, r1, r0
   8385a:	f04f 0000 	mov.w	r0, #0
   8385e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   83862:	e7b6      	b.n	837d2 <__aeabi_ddiv+0x82>
   83864:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   83868:	bf04      	itt	eq
   8386a:	4301      	orreq	r1, r0
   8386c:	2000      	moveq	r0, #0
   8386e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   83872:	bf88      	it	hi
   83874:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   83878:	f63f aeaf 	bhi.w	835da <__aeabi_dmul+0xde>
   8387c:	ebb5 0c03 	subs.w	ip, r5, r3
   83880:	bf04      	itt	eq
   83882:	ebb6 0c02 	subseq.w	ip, r6, r2
   83886:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8388a:	f150 0000 	adcs.w	r0, r0, #0
   8388e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   83892:	bd70      	pop	{r4, r5, r6, pc}
   83894:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   83898:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   8389c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   838a0:	bfc2      	ittt	gt
   838a2:	ebd4 050c 	rsbsgt	r5, r4, ip
   838a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   838aa:	bd70      	popgt	{r4, r5, r6, pc}
   838ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   838b0:	f04f 0e00 	mov.w	lr, #0
   838b4:	3c01      	subs	r4, #1
   838b6:	e690      	b.n	835da <__aeabi_dmul+0xde>
   838b8:	ea45 0e06 	orr.w	lr, r5, r6
   838bc:	e68d      	b.n	835da <__aeabi_dmul+0xde>
   838be:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   838c2:	ea94 0f0c 	teq	r4, ip
   838c6:	bf08      	it	eq
   838c8:	ea95 0f0c 	teqeq	r5, ip
   838cc:	f43f af3b 	beq.w	83746 <__aeabi_dmul+0x24a>
   838d0:	ea94 0f0c 	teq	r4, ip
   838d4:	d10a      	bne.n	838ec <__aeabi_ddiv+0x19c>
   838d6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   838da:	f47f af34 	bne.w	83746 <__aeabi_dmul+0x24a>
   838de:	ea95 0f0c 	teq	r5, ip
   838e2:	f47f af25 	bne.w	83730 <__aeabi_dmul+0x234>
   838e6:	4610      	mov	r0, r2
   838e8:	4619      	mov	r1, r3
   838ea:	e72c      	b.n	83746 <__aeabi_dmul+0x24a>
   838ec:	ea95 0f0c 	teq	r5, ip
   838f0:	d106      	bne.n	83900 <__aeabi_ddiv+0x1b0>
   838f2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   838f6:	f43f aefd 	beq.w	836f4 <__aeabi_dmul+0x1f8>
   838fa:	4610      	mov	r0, r2
   838fc:	4619      	mov	r1, r3
   838fe:	e722      	b.n	83746 <__aeabi_dmul+0x24a>
   83900:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   83904:	bf18      	it	ne
   83906:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8390a:	f47f aec5 	bne.w	83698 <__aeabi_dmul+0x19c>
   8390e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   83912:	f47f af0d 	bne.w	83730 <__aeabi_dmul+0x234>
   83916:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   8391a:	f47f aeeb 	bne.w	836f4 <__aeabi_dmul+0x1f8>
   8391e:	e712      	b.n	83746 <__aeabi_dmul+0x24a>

00083920 <__gedf2>:
   83920:	f04f 3cff 	mov.w	ip, #4294967295
   83924:	e006      	b.n	83934 <__cmpdf2+0x4>
   83926:	bf00      	nop

00083928 <__ledf2>:
   83928:	f04f 0c01 	mov.w	ip, #1
   8392c:	e002      	b.n	83934 <__cmpdf2+0x4>
   8392e:	bf00      	nop

00083930 <__cmpdf2>:
   83930:	f04f 0c01 	mov.w	ip, #1
   83934:	f84d cd04 	str.w	ip, [sp, #-4]!
   83938:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8393c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   83940:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   83944:	bf18      	it	ne
   83946:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   8394a:	d01b      	beq.n	83984 <__cmpdf2+0x54>
   8394c:	b001      	add	sp, #4
   8394e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   83952:	bf0c      	ite	eq
   83954:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   83958:	ea91 0f03 	teqne	r1, r3
   8395c:	bf02      	ittt	eq
   8395e:	ea90 0f02 	teqeq	r0, r2
   83962:	2000      	moveq	r0, #0
   83964:	4770      	bxeq	lr
   83966:	f110 0f00 	cmn.w	r0, #0
   8396a:	ea91 0f03 	teq	r1, r3
   8396e:	bf58      	it	pl
   83970:	4299      	cmppl	r1, r3
   83972:	bf08      	it	eq
   83974:	4290      	cmpeq	r0, r2
   83976:	bf2c      	ite	cs
   83978:	17d8      	asrcs	r0, r3, #31
   8397a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   8397e:	f040 0001 	orr.w	r0, r0, #1
   83982:	4770      	bx	lr
   83984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   83988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8398c:	d102      	bne.n	83994 <__cmpdf2+0x64>
   8398e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   83992:	d107      	bne.n	839a4 <__cmpdf2+0x74>
   83994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   83998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8399c:	d1d6      	bne.n	8394c <__cmpdf2+0x1c>
   8399e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   839a2:	d0d3      	beq.n	8394c <__cmpdf2+0x1c>
   839a4:	f85d 0b04 	ldr.w	r0, [sp], #4
   839a8:	4770      	bx	lr
   839aa:	bf00      	nop

000839ac <__aeabi_cdrcmple>:
   839ac:	4684      	mov	ip, r0
   839ae:	4610      	mov	r0, r2
   839b0:	4662      	mov	r2, ip
   839b2:	468c      	mov	ip, r1
   839b4:	4619      	mov	r1, r3
   839b6:	4663      	mov	r3, ip
   839b8:	e000      	b.n	839bc <__aeabi_cdcmpeq>
   839ba:	bf00      	nop

000839bc <__aeabi_cdcmpeq>:
   839bc:	b501      	push	{r0, lr}
   839be:	f7ff ffb7 	bl	83930 <__cmpdf2>
   839c2:	2800      	cmp	r0, #0
   839c4:	bf48      	it	mi
   839c6:	f110 0f00 	cmnmi.w	r0, #0
   839ca:	bd01      	pop	{r0, pc}

000839cc <__aeabi_dcmpeq>:
   839cc:	f84d ed08 	str.w	lr, [sp, #-8]!
   839d0:	f7ff fff4 	bl	839bc <__aeabi_cdcmpeq>
   839d4:	bf0c      	ite	eq
   839d6:	2001      	moveq	r0, #1
   839d8:	2000      	movne	r0, #0
   839da:	f85d fb08 	ldr.w	pc, [sp], #8
   839de:	bf00      	nop

000839e0 <__aeabi_dcmplt>:
   839e0:	f84d ed08 	str.w	lr, [sp, #-8]!
   839e4:	f7ff ffea 	bl	839bc <__aeabi_cdcmpeq>
   839e8:	bf34      	ite	cc
   839ea:	2001      	movcc	r0, #1
   839ec:	2000      	movcs	r0, #0
   839ee:	f85d fb08 	ldr.w	pc, [sp], #8
   839f2:	bf00      	nop

000839f4 <__aeabi_dcmple>:
   839f4:	f84d ed08 	str.w	lr, [sp, #-8]!
   839f8:	f7ff ffe0 	bl	839bc <__aeabi_cdcmpeq>
   839fc:	bf94      	ite	ls
   839fe:	2001      	movls	r0, #1
   83a00:	2000      	movhi	r0, #0
   83a02:	f85d fb08 	ldr.w	pc, [sp], #8
   83a06:	bf00      	nop

00083a08 <__aeabi_dcmpge>:
   83a08:	f84d ed08 	str.w	lr, [sp, #-8]!
   83a0c:	f7ff ffce 	bl	839ac <__aeabi_cdrcmple>
   83a10:	bf94      	ite	ls
   83a12:	2001      	movls	r0, #1
   83a14:	2000      	movhi	r0, #0
   83a16:	f85d fb08 	ldr.w	pc, [sp], #8
   83a1a:	bf00      	nop

00083a1c <__aeabi_dcmpgt>:
   83a1c:	f84d ed08 	str.w	lr, [sp, #-8]!
   83a20:	f7ff ffc4 	bl	839ac <__aeabi_cdrcmple>
   83a24:	bf34      	ite	cc
   83a26:	2001      	movcc	r0, #1
   83a28:	2000      	movcs	r0, #0
   83a2a:	f85d fb08 	ldr.w	pc, [sp], #8
   83a2e:	bf00      	nop

00083a30 <__aeabi_uldivmod>:
   83a30:	b94b      	cbnz	r3, 83a46 <__aeabi_uldivmod+0x16>
   83a32:	b942      	cbnz	r2, 83a46 <__aeabi_uldivmod+0x16>
   83a34:	2900      	cmp	r1, #0
   83a36:	bf08      	it	eq
   83a38:	2800      	cmpeq	r0, #0
   83a3a:	d002      	beq.n	83a42 <__aeabi_uldivmod+0x12>
   83a3c:	f04f 31ff 	mov.w	r1, #4294967295
   83a40:	4608      	mov	r0, r1
   83a42:	f000 b83b 	b.w	83abc <__aeabi_idiv0>
   83a46:	b082      	sub	sp, #8
   83a48:	46ec      	mov	ip, sp
   83a4a:	e92d 5000 	stmdb	sp!, {ip, lr}
   83a4e:	f000 f81d 	bl	83a8c <__gnu_uldivmod_helper>
   83a52:	f8dd e004 	ldr.w	lr, [sp, #4]
   83a56:	b002      	add	sp, #8
   83a58:	bc0c      	pop	{r2, r3}
   83a5a:	4770      	bx	lr

00083a5c <__gnu_ldivmod_helper>:
   83a5c:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   83a60:	9e08      	ldr	r6, [sp, #32]
   83a62:	4614      	mov	r4, r2
   83a64:	461d      	mov	r5, r3
   83a66:	4680      	mov	r8, r0
   83a68:	4689      	mov	r9, r1
   83a6a:	f000 f829 	bl	83ac0 <__divdi3>
   83a6e:	fb04 f301 	mul.w	r3, r4, r1
   83a72:	fba4 ab00 	umull	sl, fp, r4, r0
   83a76:	fb00 3205 	mla	r2, r0, r5, r3
   83a7a:	4493      	add	fp, r2
   83a7c:	ebb8 080a 	subs.w	r8, r8, sl
   83a80:	eb69 090b 	sbc.w	r9, r9, fp
   83a84:	e9c6 8900 	strd	r8, r9, [r6]
   83a88:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

00083a8c <__gnu_uldivmod_helper>:
   83a8c:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   83a90:	9e08      	ldr	r6, [sp, #32]
   83a92:	4614      	mov	r4, r2
   83a94:	461d      	mov	r5, r3
   83a96:	4680      	mov	r8, r0
   83a98:	4689      	mov	r9, r1
   83a9a:	f000 f961 	bl	83d60 <__udivdi3>
   83a9e:	fb00 f505 	mul.w	r5, r0, r5
   83aa2:	fba0 ab04 	umull	sl, fp, r0, r4
   83aa6:	fb04 5401 	mla	r4, r4, r1, r5
   83aaa:	44a3      	add	fp, r4
   83aac:	ebb8 080a 	subs.w	r8, r8, sl
   83ab0:	eb69 090b 	sbc.w	r9, r9, fp
   83ab4:	e9c6 8900 	strd	r8, r9, [r6]
   83ab8:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

00083abc <__aeabi_idiv0>:
   83abc:	4770      	bx	lr
   83abe:	bf00      	nop

00083ac0 <__divdi3>:
   83ac0:	2900      	cmp	r1, #0
   83ac2:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83ac6:	f2c0 80a1 	blt.w	83c0c <__divdi3+0x14c>
   83aca:	2400      	movs	r4, #0
   83acc:	2b00      	cmp	r3, #0
   83ace:	f2c0 8098 	blt.w	83c02 <__divdi3+0x142>
   83ad2:	4615      	mov	r5, r2
   83ad4:	4606      	mov	r6, r0
   83ad6:	460f      	mov	r7, r1
   83ad8:	2b00      	cmp	r3, #0
   83ada:	d13f      	bne.n	83b5c <__divdi3+0x9c>
   83adc:	428a      	cmp	r2, r1
   83ade:	d958      	bls.n	83b92 <__divdi3+0xd2>
   83ae0:	fab2 f382 	clz	r3, r2
   83ae4:	b14b      	cbz	r3, 83afa <__divdi3+0x3a>
   83ae6:	f1c3 0220 	rsb	r2, r3, #32
   83aea:	fa01 f703 	lsl.w	r7, r1, r3
   83aee:	fa20 f202 	lsr.w	r2, r0, r2
   83af2:	409d      	lsls	r5, r3
   83af4:	fa00 f603 	lsl.w	r6, r0, r3
   83af8:	4317      	orrs	r7, r2
   83afa:	0c29      	lsrs	r1, r5, #16
   83afc:	fbb7 f2f1 	udiv	r2, r7, r1
   83b00:	fb01 7712 	mls	r7, r1, r2, r7
   83b04:	b2a8      	uxth	r0, r5
   83b06:	fb00 f302 	mul.w	r3, r0, r2
   83b0a:	ea4f 4c16 	mov.w	ip, r6, lsr #16
   83b0e:	ea4c 4707 	orr.w	r7, ip, r7, lsl #16
   83b12:	42bb      	cmp	r3, r7
   83b14:	d909      	bls.n	83b2a <__divdi3+0x6a>
   83b16:	197f      	adds	r7, r7, r5
   83b18:	f102 3cff 	add.w	ip, r2, #4294967295
   83b1c:	f080 8105 	bcs.w	83d2a <__divdi3+0x26a>
   83b20:	42bb      	cmp	r3, r7
   83b22:	f240 8102 	bls.w	83d2a <__divdi3+0x26a>
   83b26:	3a02      	subs	r2, #2
   83b28:	442f      	add	r7, r5
   83b2a:	1aff      	subs	r7, r7, r3
   83b2c:	fbb7 f3f1 	udiv	r3, r7, r1
   83b30:	fb01 7113 	mls	r1, r1, r3, r7
   83b34:	fb00 f003 	mul.w	r0, r0, r3
   83b38:	b2b6      	uxth	r6, r6
   83b3a:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
   83b3e:	4288      	cmp	r0, r1
   83b40:	d908      	bls.n	83b54 <__divdi3+0x94>
   83b42:	1949      	adds	r1, r1, r5
   83b44:	f103 37ff 	add.w	r7, r3, #4294967295
   83b48:	f080 80f1 	bcs.w	83d2e <__divdi3+0x26e>
   83b4c:	4288      	cmp	r0, r1
   83b4e:	f240 80ee 	bls.w	83d2e <__divdi3+0x26e>
   83b52:	3b02      	subs	r3, #2
   83b54:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   83b58:	2300      	movs	r3, #0
   83b5a:	e003      	b.n	83b64 <__divdi3+0xa4>
   83b5c:	428b      	cmp	r3, r1
   83b5e:	d90a      	bls.n	83b76 <__divdi3+0xb6>
   83b60:	2300      	movs	r3, #0
   83b62:	461a      	mov	r2, r3
   83b64:	4610      	mov	r0, r2
   83b66:	4619      	mov	r1, r3
   83b68:	b114      	cbz	r4, 83b70 <__divdi3+0xb0>
   83b6a:	4240      	negs	r0, r0
   83b6c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   83b70:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83b74:	4770      	bx	lr
   83b76:	fab3 f883 	clz	r8, r3
   83b7a:	f1b8 0f00 	cmp.w	r8, #0
   83b7e:	f040 8088 	bne.w	83c92 <__divdi3+0x1d2>
   83b82:	428b      	cmp	r3, r1
   83b84:	d302      	bcc.n	83b8c <__divdi3+0xcc>
   83b86:	4282      	cmp	r2, r0
   83b88:	f200 80e2 	bhi.w	83d50 <__divdi3+0x290>
   83b8c:	2300      	movs	r3, #0
   83b8e:	2201      	movs	r2, #1
   83b90:	e7e8      	b.n	83b64 <__divdi3+0xa4>
   83b92:	b912      	cbnz	r2, 83b9a <__divdi3+0xda>
   83b94:	2301      	movs	r3, #1
   83b96:	fbb3 f5f2 	udiv	r5, r3, r2
   83b9a:	fab5 f285 	clz	r2, r5
   83b9e:	2a00      	cmp	r2, #0
   83ba0:	d13a      	bne.n	83c18 <__divdi3+0x158>
   83ba2:	1b7f      	subs	r7, r7, r5
   83ba4:	0c28      	lsrs	r0, r5, #16
   83ba6:	fa1f fc85 	uxth.w	ip, r5
   83baa:	2301      	movs	r3, #1
   83bac:	fbb7 f1f0 	udiv	r1, r7, r0
   83bb0:	fb00 7711 	mls	r7, r0, r1, r7
   83bb4:	fb0c f201 	mul.w	r2, ip, r1
   83bb8:	ea4f 4816 	mov.w	r8, r6, lsr #16
   83bbc:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
   83bc0:	42ba      	cmp	r2, r7
   83bc2:	d907      	bls.n	83bd4 <__divdi3+0x114>
   83bc4:	197f      	adds	r7, r7, r5
   83bc6:	f101 38ff 	add.w	r8, r1, #4294967295
   83bca:	d202      	bcs.n	83bd2 <__divdi3+0x112>
   83bcc:	42ba      	cmp	r2, r7
   83bce:	f200 80c4 	bhi.w	83d5a <__divdi3+0x29a>
   83bd2:	4641      	mov	r1, r8
   83bd4:	1abf      	subs	r7, r7, r2
   83bd6:	fbb7 f2f0 	udiv	r2, r7, r0
   83bda:	fb00 7012 	mls	r0, r0, r2, r7
   83bde:	fb0c fc02 	mul.w	ip, ip, r2
   83be2:	b2b6      	uxth	r6, r6
   83be4:	ea46 4000 	orr.w	r0, r6, r0, lsl #16
   83be8:	4584      	cmp	ip, r0
   83bea:	d907      	bls.n	83bfc <__divdi3+0x13c>
   83bec:	1940      	adds	r0, r0, r5
   83bee:	f102 37ff 	add.w	r7, r2, #4294967295
   83bf2:	d202      	bcs.n	83bfa <__divdi3+0x13a>
   83bf4:	4584      	cmp	ip, r0
   83bf6:	f200 80ae 	bhi.w	83d56 <__divdi3+0x296>
   83bfa:	463a      	mov	r2, r7
   83bfc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   83c00:	e7b0      	b.n	83b64 <__divdi3+0xa4>
   83c02:	43e4      	mvns	r4, r4
   83c04:	4252      	negs	r2, r2
   83c06:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   83c0a:	e762      	b.n	83ad2 <__divdi3+0x12>
   83c0c:	4240      	negs	r0, r0
   83c0e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   83c12:	f04f 34ff 	mov.w	r4, #4294967295
   83c16:	e759      	b.n	83acc <__divdi3+0xc>
   83c18:	4095      	lsls	r5, r2
   83c1a:	f1c2 0920 	rsb	r9, r2, #32
   83c1e:	fa27 f109 	lsr.w	r1, r7, r9
   83c22:	fa26 f909 	lsr.w	r9, r6, r9
   83c26:	4097      	lsls	r7, r2
   83c28:	0c28      	lsrs	r0, r5, #16
   83c2a:	fbb1 f8f0 	udiv	r8, r1, r0
   83c2e:	fb00 1118 	mls	r1, r0, r8, r1
   83c32:	fa1f fc85 	uxth.w	ip, r5
   83c36:	fb0c f308 	mul.w	r3, ip, r8
   83c3a:	ea49 0907 	orr.w	r9, r9, r7
   83c3e:	ea4f 4719 	mov.w	r7, r9, lsr #16
   83c42:	ea47 4101 	orr.w	r1, r7, r1, lsl #16
   83c46:	428b      	cmp	r3, r1
   83c48:	fa06 f602 	lsl.w	r6, r6, r2
   83c4c:	d908      	bls.n	83c60 <__divdi3+0x1a0>
   83c4e:	1949      	adds	r1, r1, r5
   83c50:	f108 32ff 	add.w	r2, r8, #4294967295
   83c54:	d27a      	bcs.n	83d4c <__divdi3+0x28c>
   83c56:	428b      	cmp	r3, r1
   83c58:	d978      	bls.n	83d4c <__divdi3+0x28c>
   83c5a:	f1a8 0802 	sub.w	r8, r8, #2
   83c5e:	4429      	add	r1, r5
   83c60:	1ac9      	subs	r1, r1, r3
   83c62:	fbb1 f3f0 	udiv	r3, r1, r0
   83c66:	fb00 1713 	mls	r7, r0, r3, r1
   83c6a:	fb0c f203 	mul.w	r2, ip, r3
   83c6e:	fa1f f989 	uxth.w	r9, r9
   83c72:	ea49 4707 	orr.w	r7, r9, r7, lsl #16
   83c76:	42ba      	cmp	r2, r7
   83c78:	d907      	bls.n	83c8a <__divdi3+0x1ca>
   83c7a:	197f      	adds	r7, r7, r5
   83c7c:	f103 31ff 	add.w	r1, r3, #4294967295
   83c80:	d260      	bcs.n	83d44 <__divdi3+0x284>
   83c82:	42ba      	cmp	r2, r7
   83c84:	d95e      	bls.n	83d44 <__divdi3+0x284>
   83c86:	3b02      	subs	r3, #2
   83c88:	442f      	add	r7, r5
   83c8a:	1abf      	subs	r7, r7, r2
   83c8c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   83c90:	e78c      	b.n	83bac <__divdi3+0xec>
   83c92:	f1c8 0220 	rsb	r2, r8, #32
   83c96:	fa25 f102 	lsr.w	r1, r5, r2
   83c9a:	fa03 fc08 	lsl.w	ip, r3, r8
   83c9e:	fa27 f302 	lsr.w	r3, r7, r2
   83ca2:	fa20 f202 	lsr.w	r2, r0, r2
   83ca6:	fa07 f708 	lsl.w	r7, r7, r8
   83caa:	ea41 0c0c 	orr.w	ip, r1, ip
   83cae:	ea4f 491c 	mov.w	r9, ip, lsr #16
   83cb2:	fbb3 f1f9 	udiv	r1, r3, r9
   83cb6:	fb09 3311 	mls	r3, r9, r1, r3
   83cba:	fa1f fa8c 	uxth.w	sl, ip
   83cbe:	fb0a fb01 	mul.w	fp, sl, r1
   83cc2:	4317      	orrs	r7, r2
   83cc4:	0c3a      	lsrs	r2, r7, #16
   83cc6:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   83cca:	459b      	cmp	fp, r3
   83ccc:	fa05 f008 	lsl.w	r0, r5, r8
   83cd0:	d908      	bls.n	83ce4 <__divdi3+0x224>
   83cd2:	eb13 030c 	adds.w	r3, r3, ip
   83cd6:	f101 32ff 	add.w	r2, r1, #4294967295
   83cda:	d235      	bcs.n	83d48 <__divdi3+0x288>
   83cdc:	459b      	cmp	fp, r3
   83cde:	d933      	bls.n	83d48 <__divdi3+0x288>
   83ce0:	3902      	subs	r1, #2
   83ce2:	4463      	add	r3, ip
   83ce4:	ebcb 0303 	rsb	r3, fp, r3
   83ce8:	fbb3 f2f9 	udiv	r2, r3, r9
   83cec:	fb09 3312 	mls	r3, r9, r2, r3
   83cf0:	fb0a fa02 	mul.w	sl, sl, r2
   83cf4:	b2bf      	uxth	r7, r7
   83cf6:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
   83cfa:	45ba      	cmp	sl, r7
   83cfc:	d908      	bls.n	83d10 <__divdi3+0x250>
   83cfe:	eb17 070c 	adds.w	r7, r7, ip
   83d02:	f102 33ff 	add.w	r3, r2, #4294967295
   83d06:	d21b      	bcs.n	83d40 <__divdi3+0x280>
   83d08:	45ba      	cmp	sl, r7
   83d0a:	d919      	bls.n	83d40 <__divdi3+0x280>
   83d0c:	3a02      	subs	r2, #2
   83d0e:	4467      	add	r7, ip
   83d10:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
   83d14:	fba5 0100 	umull	r0, r1, r5, r0
   83d18:	ebca 0707 	rsb	r7, sl, r7
   83d1c:	428f      	cmp	r7, r1
   83d1e:	f04f 0300 	mov.w	r3, #0
   83d22:	d30a      	bcc.n	83d3a <__divdi3+0x27a>
   83d24:	d005      	beq.n	83d32 <__divdi3+0x272>
   83d26:	462a      	mov	r2, r5
   83d28:	e71c      	b.n	83b64 <__divdi3+0xa4>
   83d2a:	4662      	mov	r2, ip
   83d2c:	e6fd      	b.n	83b2a <__divdi3+0x6a>
   83d2e:	463b      	mov	r3, r7
   83d30:	e710      	b.n	83b54 <__divdi3+0x94>
   83d32:	fa06 f608 	lsl.w	r6, r6, r8
   83d36:	4286      	cmp	r6, r0
   83d38:	d2f5      	bcs.n	83d26 <__divdi3+0x266>
   83d3a:	1e6a      	subs	r2, r5, #1
   83d3c:	2300      	movs	r3, #0
   83d3e:	e711      	b.n	83b64 <__divdi3+0xa4>
   83d40:	461a      	mov	r2, r3
   83d42:	e7e5      	b.n	83d10 <__divdi3+0x250>
   83d44:	460b      	mov	r3, r1
   83d46:	e7a0      	b.n	83c8a <__divdi3+0x1ca>
   83d48:	4611      	mov	r1, r2
   83d4a:	e7cb      	b.n	83ce4 <__divdi3+0x224>
   83d4c:	4690      	mov	r8, r2
   83d4e:	e787      	b.n	83c60 <__divdi3+0x1a0>
   83d50:	4643      	mov	r3, r8
   83d52:	4642      	mov	r2, r8
   83d54:	e706      	b.n	83b64 <__divdi3+0xa4>
   83d56:	3a02      	subs	r2, #2
   83d58:	e750      	b.n	83bfc <__divdi3+0x13c>
   83d5a:	3902      	subs	r1, #2
   83d5c:	442f      	add	r7, r5
   83d5e:	e739      	b.n	83bd4 <__divdi3+0x114>

00083d60 <__udivdi3>:
   83d60:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83d64:	4614      	mov	r4, r2
   83d66:	4605      	mov	r5, r0
   83d68:	460e      	mov	r6, r1
   83d6a:	2b00      	cmp	r3, #0
   83d6c:	d143      	bne.n	83df6 <__udivdi3+0x96>
   83d6e:	428a      	cmp	r2, r1
   83d70:	d953      	bls.n	83e1a <__udivdi3+0xba>
   83d72:	fab2 f782 	clz	r7, r2
   83d76:	b157      	cbz	r7, 83d8e <__udivdi3+0x2e>
   83d78:	f1c7 0620 	rsb	r6, r7, #32
   83d7c:	fa20 f606 	lsr.w	r6, r0, r6
   83d80:	fa01 f307 	lsl.w	r3, r1, r7
   83d84:	fa02 f407 	lsl.w	r4, r2, r7
   83d88:	fa00 f507 	lsl.w	r5, r0, r7
   83d8c:	431e      	orrs	r6, r3
   83d8e:	0c21      	lsrs	r1, r4, #16
   83d90:	fbb6 f2f1 	udiv	r2, r6, r1
   83d94:	fb01 6612 	mls	r6, r1, r2, r6
   83d98:	b2a0      	uxth	r0, r4
   83d9a:	fb00 f302 	mul.w	r3, r0, r2
   83d9e:	0c2f      	lsrs	r7, r5, #16
   83da0:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   83da4:	42b3      	cmp	r3, r6
   83da6:	d909      	bls.n	83dbc <__udivdi3+0x5c>
   83da8:	1936      	adds	r6, r6, r4
   83daa:	f102 37ff 	add.w	r7, r2, #4294967295
   83dae:	f080 80fd 	bcs.w	83fac <__udivdi3+0x24c>
   83db2:	42b3      	cmp	r3, r6
   83db4:	f240 80fa 	bls.w	83fac <__udivdi3+0x24c>
   83db8:	3a02      	subs	r2, #2
   83dba:	4426      	add	r6, r4
   83dbc:	1af6      	subs	r6, r6, r3
   83dbe:	fbb6 f3f1 	udiv	r3, r6, r1
   83dc2:	fb01 6113 	mls	r1, r1, r3, r6
   83dc6:	fb00 f003 	mul.w	r0, r0, r3
   83dca:	b2ad      	uxth	r5, r5
   83dcc:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
   83dd0:	4288      	cmp	r0, r1
   83dd2:	d908      	bls.n	83de6 <__udivdi3+0x86>
   83dd4:	1909      	adds	r1, r1, r4
   83dd6:	f103 36ff 	add.w	r6, r3, #4294967295
   83dda:	f080 80e9 	bcs.w	83fb0 <__udivdi3+0x250>
   83dde:	4288      	cmp	r0, r1
   83de0:	f240 80e6 	bls.w	83fb0 <__udivdi3+0x250>
   83de4:	3b02      	subs	r3, #2
   83de6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   83dea:	2300      	movs	r3, #0
   83dec:	4610      	mov	r0, r2
   83dee:	4619      	mov	r1, r3
   83df0:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83df4:	4770      	bx	lr
   83df6:	428b      	cmp	r3, r1
   83df8:	d84c      	bhi.n	83e94 <__udivdi3+0x134>
   83dfa:	fab3 f683 	clz	r6, r3
   83dfe:	2e00      	cmp	r6, #0
   83e00:	d14f      	bne.n	83ea2 <__udivdi3+0x142>
   83e02:	428b      	cmp	r3, r1
   83e04:	d302      	bcc.n	83e0c <__udivdi3+0xac>
   83e06:	4282      	cmp	r2, r0
   83e08:	f200 80dd 	bhi.w	83fc6 <__udivdi3+0x266>
   83e0c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83e10:	2300      	movs	r3, #0
   83e12:	2201      	movs	r2, #1
   83e14:	4610      	mov	r0, r2
   83e16:	4619      	mov	r1, r3
   83e18:	4770      	bx	lr
   83e1a:	b912      	cbnz	r2, 83e22 <__udivdi3+0xc2>
   83e1c:	2401      	movs	r4, #1
   83e1e:	fbb4 f4f2 	udiv	r4, r4, r2
   83e22:	fab4 f284 	clz	r2, r4
   83e26:	2a00      	cmp	r2, #0
   83e28:	f040 8082 	bne.w	83f30 <__udivdi3+0x1d0>
   83e2c:	1b09      	subs	r1, r1, r4
   83e2e:	0c26      	lsrs	r6, r4, #16
   83e30:	b2a7      	uxth	r7, r4
   83e32:	2301      	movs	r3, #1
   83e34:	fbb1 f0f6 	udiv	r0, r1, r6
   83e38:	fb06 1110 	mls	r1, r6, r0, r1
   83e3c:	fb07 f200 	mul.w	r2, r7, r0
   83e40:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   83e44:	ea4c 4101 	orr.w	r1, ip, r1, lsl #16
   83e48:	428a      	cmp	r2, r1
   83e4a:	d907      	bls.n	83e5c <__udivdi3+0xfc>
   83e4c:	1909      	adds	r1, r1, r4
   83e4e:	f100 3cff 	add.w	ip, r0, #4294967295
   83e52:	d202      	bcs.n	83e5a <__udivdi3+0xfa>
   83e54:	428a      	cmp	r2, r1
   83e56:	f200 80c8 	bhi.w	83fea <__udivdi3+0x28a>
   83e5a:	4660      	mov	r0, ip
   83e5c:	1a89      	subs	r1, r1, r2
   83e5e:	fbb1 f2f6 	udiv	r2, r1, r6
   83e62:	fb06 1112 	mls	r1, r6, r2, r1
   83e66:	fb07 f702 	mul.w	r7, r7, r2
   83e6a:	b2ad      	uxth	r5, r5
   83e6c:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
   83e70:	42af      	cmp	r7, r5
   83e72:	d908      	bls.n	83e86 <__udivdi3+0x126>
   83e74:	192c      	adds	r4, r5, r4
   83e76:	f102 31ff 	add.w	r1, r2, #4294967295
   83e7a:	f080 809b 	bcs.w	83fb4 <__udivdi3+0x254>
   83e7e:	42a7      	cmp	r7, r4
   83e80:	f240 8098 	bls.w	83fb4 <__udivdi3+0x254>
   83e84:	3a02      	subs	r2, #2
   83e86:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
   83e8a:	4610      	mov	r0, r2
   83e8c:	4619      	mov	r1, r3
   83e8e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83e92:	4770      	bx	lr
   83e94:	2300      	movs	r3, #0
   83e96:	461a      	mov	r2, r3
   83e98:	4610      	mov	r0, r2
   83e9a:	4619      	mov	r1, r3
   83e9c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83ea0:	4770      	bx	lr
   83ea2:	f1c6 0520 	rsb	r5, r6, #32
   83ea6:	fa22 f705 	lsr.w	r7, r2, r5
   83eaa:	fa03 f406 	lsl.w	r4, r3, r6
   83eae:	fa21 f305 	lsr.w	r3, r1, r5
   83eb2:	fa01 fb06 	lsl.w	fp, r1, r6
   83eb6:	fa20 f505 	lsr.w	r5, r0, r5
   83eba:	433c      	orrs	r4, r7
   83ebc:	ea4f 4814 	mov.w	r8, r4, lsr #16
   83ec0:	fbb3 fcf8 	udiv	ip, r3, r8
   83ec4:	fb08 331c 	mls	r3, r8, ip, r3
   83ec8:	fa1f f984 	uxth.w	r9, r4
   83ecc:	fb09 fa0c 	mul.w	sl, r9, ip
   83ed0:	ea45 0b0b 	orr.w	fp, r5, fp
   83ed4:	ea4f 451b 	mov.w	r5, fp, lsr #16
   83ed8:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
   83edc:	459a      	cmp	sl, r3
   83ede:	fa02 f206 	lsl.w	r2, r2, r6
   83ee2:	d904      	bls.n	83eee <__udivdi3+0x18e>
   83ee4:	191b      	adds	r3, r3, r4
   83ee6:	f10c 35ff 	add.w	r5, ip, #4294967295
   83eea:	d36f      	bcc.n	83fcc <__udivdi3+0x26c>
   83eec:	46ac      	mov	ip, r5
   83eee:	ebca 0303 	rsb	r3, sl, r3
   83ef2:	fbb3 f5f8 	udiv	r5, r3, r8
   83ef6:	fb08 3315 	mls	r3, r8, r5, r3
   83efa:	fb09 f905 	mul.w	r9, r9, r5
   83efe:	fa1f fb8b 	uxth.w	fp, fp
   83f02:	ea4b 4703 	orr.w	r7, fp, r3, lsl #16
   83f06:	45b9      	cmp	r9, r7
   83f08:	d904      	bls.n	83f14 <__udivdi3+0x1b4>
   83f0a:	193f      	adds	r7, r7, r4
   83f0c:	f105 33ff 	add.w	r3, r5, #4294967295
   83f10:	d362      	bcc.n	83fd8 <__udivdi3+0x278>
   83f12:	461d      	mov	r5, r3
   83f14:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
   83f18:	fbac 2302 	umull	r2, r3, ip, r2
   83f1c:	ebc9 0707 	rsb	r7, r9, r7
   83f20:	429f      	cmp	r7, r3
   83f22:	f04f 0500 	mov.w	r5, #0
   83f26:	d34a      	bcc.n	83fbe <__udivdi3+0x25e>
   83f28:	d046      	beq.n	83fb8 <__udivdi3+0x258>
   83f2a:	4662      	mov	r2, ip
   83f2c:	462b      	mov	r3, r5
   83f2e:	e75d      	b.n	83dec <__udivdi3+0x8c>
   83f30:	4094      	lsls	r4, r2
   83f32:	f1c2 0920 	rsb	r9, r2, #32
   83f36:	fa21 fc09 	lsr.w	ip, r1, r9
   83f3a:	4091      	lsls	r1, r2
   83f3c:	fa20 f909 	lsr.w	r9, r0, r9
   83f40:	0c26      	lsrs	r6, r4, #16
   83f42:	fbbc f8f6 	udiv	r8, ip, r6
   83f46:	fb06 cc18 	mls	ip, r6, r8, ip
   83f4a:	b2a7      	uxth	r7, r4
   83f4c:	fb07 f308 	mul.w	r3, r7, r8
   83f50:	ea49 0901 	orr.w	r9, r9, r1
   83f54:	ea4f 4119 	mov.w	r1, r9, lsr #16
   83f58:	ea41 4c0c 	orr.w	ip, r1, ip, lsl #16
   83f5c:	4563      	cmp	r3, ip
   83f5e:	fa00 f502 	lsl.w	r5, r0, r2
   83f62:	d909      	bls.n	83f78 <__udivdi3+0x218>
   83f64:	eb1c 0c04 	adds.w	ip, ip, r4
   83f68:	f108 32ff 	add.w	r2, r8, #4294967295
   83f6c:	d23b      	bcs.n	83fe6 <__udivdi3+0x286>
   83f6e:	4563      	cmp	r3, ip
   83f70:	d939      	bls.n	83fe6 <__udivdi3+0x286>
   83f72:	f1a8 0802 	sub.w	r8, r8, #2
   83f76:	44a4      	add	ip, r4
   83f78:	ebc3 0c0c 	rsb	ip, r3, ip
   83f7c:	fbbc f3f6 	udiv	r3, ip, r6
   83f80:	fb06 c113 	mls	r1, r6, r3, ip
   83f84:	fb07 f203 	mul.w	r2, r7, r3
   83f88:	fa1f f989 	uxth.w	r9, r9
   83f8c:	ea49 4101 	orr.w	r1, r9, r1, lsl #16
   83f90:	428a      	cmp	r2, r1
   83f92:	d907      	bls.n	83fa4 <__udivdi3+0x244>
   83f94:	1909      	adds	r1, r1, r4
   83f96:	f103 30ff 	add.w	r0, r3, #4294967295
   83f9a:	d222      	bcs.n	83fe2 <__udivdi3+0x282>
   83f9c:	428a      	cmp	r2, r1
   83f9e:	d920      	bls.n	83fe2 <__udivdi3+0x282>
   83fa0:	3b02      	subs	r3, #2
   83fa2:	4421      	add	r1, r4
   83fa4:	1a89      	subs	r1, r1, r2
   83fa6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   83faa:	e743      	b.n	83e34 <__udivdi3+0xd4>
   83fac:	463a      	mov	r2, r7
   83fae:	e705      	b.n	83dbc <__udivdi3+0x5c>
   83fb0:	4633      	mov	r3, r6
   83fb2:	e718      	b.n	83de6 <__udivdi3+0x86>
   83fb4:	460a      	mov	r2, r1
   83fb6:	e766      	b.n	83e86 <__udivdi3+0x126>
   83fb8:	40b0      	lsls	r0, r6
   83fba:	4290      	cmp	r0, r2
   83fbc:	d2b5      	bcs.n	83f2a <__udivdi3+0x1ca>
   83fbe:	f10c 32ff 	add.w	r2, ip, #4294967295
   83fc2:	2300      	movs	r3, #0
   83fc4:	e712      	b.n	83dec <__udivdi3+0x8c>
   83fc6:	4633      	mov	r3, r6
   83fc8:	4632      	mov	r2, r6
   83fca:	e70f      	b.n	83dec <__udivdi3+0x8c>
   83fcc:	459a      	cmp	sl, r3
   83fce:	d98d      	bls.n	83eec <__udivdi3+0x18c>
   83fd0:	f1ac 0c02 	sub.w	ip, ip, #2
   83fd4:	4423      	add	r3, r4
   83fd6:	e78a      	b.n	83eee <__udivdi3+0x18e>
   83fd8:	45b9      	cmp	r9, r7
   83fda:	d99a      	bls.n	83f12 <__udivdi3+0x1b2>
   83fdc:	3d02      	subs	r5, #2
   83fde:	4427      	add	r7, r4
   83fe0:	e798      	b.n	83f14 <__udivdi3+0x1b4>
   83fe2:	4603      	mov	r3, r0
   83fe4:	e7de      	b.n	83fa4 <__udivdi3+0x244>
   83fe6:	4690      	mov	r8, r2
   83fe8:	e7c6      	b.n	83f78 <__udivdi3+0x218>
   83fea:	3802      	subs	r0, #2
   83fec:	4421      	add	r1, r4
   83fee:	e735      	b.n	83e5c <__udivdi3+0xfc>

00083ff0 <__libc_init_array>:
   83ff0:	b570      	push	{r4, r5, r6, lr}
   83ff2:	4e0f      	ldr	r6, [pc, #60]	; (84030 <__libc_init_array+0x40>)
   83ff4:	4d0f      	ldr	r5, [pc, #60]	; (84034 <__libc_init_array+0x44>)
   83ff6:	1b76      	subs	r6, r6, r5
   83ff8:	10b6      	asrs	r6, r6, #2
   83ffa:	d007      	beq.n	8400c <__libc_init_array+0x1c>
   83ffc:	3d04      	subs	r5, #4
   83ffe:	2400      	movs	r4, #0
   84000:	3401      	adds	r4, #1
   84002:	f855 3f04 	ldr.w	r3, [r5, #4]!
   84006:	4798      	blx	r3
   84008:	42a6      	cmp	r6, r4
   8400a:	d1f9      	bne.n	84000 <__libc_init_array+0x10>
   8400c:	4e0a      	ldr	r6, [pc, #40]	; (84038 <__libc_init_array+0x48>)
   8400e:	4d0b      	ldr	r5, [pc, #44]	; (8403c <__libc_init_array+0x4c>)
   84010:	f004 fb1a 	bl	88648 <_init>
   84014:	1b76      	subs	r6, r6, r5
   84016:	10b6      	asrs	r6, r6, #2
   84018:	d008      	beq.n	8402c <__libc_init_array+0x3c>
   8401a:	3d04      	subs	r5, #4
   8401c:	2400      	movs	r4, #0
   8401e:	3401      	adds	r4, #1
   84020:	f855 3f04 	ldr.w	r3, [r5, #4]!
   84024:	4798      	blx	r3
   84026:	42a6      	cmp	r6, r4
   84028:	d1f9      	bne.n	8401e <__libc_init_array+0x2e>
   8402a:	bd70      	pop	{r4, r5, r6, pc}
   8402c:	bd70      	pop	{r4, r5, r6, pc}
   8402e:	bf00      	nop
   84030:	00088654 	.word	0x00088654
   84034:	00088654 	.word	0x00088654
   84038:	0008865c 	.word	0x0008865c
   8403c:	00088654 	.word	0x00088654

00084040 <iprintf>:
   84040:	b40f      	push	{r0, r1, r2, r3}
   84042:	b510      	push	{r4, lr}
   84044:	4b07      	ldr	r3, [pc, #28]	; (84064 <iprintf+0x24>)
   84046:	b082      	sub	sp, #8
   84048:	ac04      	add	r4, sp, #16
   8404a:	f854 2b04 	ldr.w	r2, [r4], #4
   8404e:	6818      	ldr	r0, [r3, #0]
   84050:	4623      	mov	r3, r4
   84052:	6881      	ldr	r1, [r0, #8]
   84054:	9401      	str	r4, [sp, #4]
   84056:	f000 fa39 	bl	844cc <_vfiprintf_r>
   8405a:	b002      	add	sp, #8
   8405c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   84060:	b004      	add	sp, #16
   84062:	4770      	bx	lr
   84064:	20070638 	.word	0x20070638

00084068 <iscanf>:
   84068:	b40f      	push	{r0, r1, r2, r3}
   8406a:	b510      	push	{r4, lr}
   8406c:	4b07      	ldr	r3, [pc, #28]	; (8408c <iscanf+0x24>)
   8406e:	b082      	sub	sp, #8
   84070:	ac04      	add	r4, sp, #16
   84072:	f854 2b04 	ldr.w	r2, [r4], #4
   84076:	6818      	ldr	r0, [r3, #0]
   84078:	4623      	mov	r3, r4
   8407a:	6841      	ldr	r1, [r0, #4]
   8407c:	9401      	str	r4, [sp, #4]
   8407e:	f001 f88d 	bl	8519c <__svfiscanf_r>
   84082:	b002      	add	sp, #8
   84084:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   84088:	b004      	add	sp, #16
   8408a:	4770      	bx	lr
   8408c:	20070638 	.word	0x20070638

00084090 <memcpy>:
   84090:	4684      	mov	ip, r0
   84092:	ea41 0300 	orr.w	r3, r1, r0
   84096:	f013 0303 	ands.w	r3, r3, #3
   8409a:	d149      	bne.n	84130 <memcpy+0xa0>
   8409c:	3a40      	subs	r2, #64	; 0x40
   8409e:	d323      	bcc.n	840e8 <memcpy+0x58>
   840a0:	680b      	ldr	r3, [r1, #0]
   840a2:	6003      	str	r3, [r0, #0]
   840a4:	684b      	ldr	r3, [r1, #4]
   840a6:	6043      	str	r3, [r0, #4]
   840a8:	688b      	ldr	r3, [r1, #8]
   840aa:	6083      	str	r3, [r0, #8]
   840ac:	68cb      	ldr	r3, [r1, #12]
   840ae:	60c3      	str	r3, [r0, #12]
   840b0:	690b      	ldr	r3, [r1, #16]
   840b2:	6103      	str	r3, [r0, #16]
   840b4:	694b      	ldr	r3, [r1, #20]
   840b6:	6143      	str	r3, [r0, #20]
   840b8:	698b      	ldr	r3, [r1, #24]
   840ba:	6183      	str	r3, [r0, #24]
   840bc:	69cb      	ldr	r3, [r1, #28]
   840be:	61c3      	str	r3, [r0, #28]
   840c0:	6a0b      	ldr	r3, [r1, #32]
   840c2:	6203      	str	r3, [r0, #32]
   840c4:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   840c6:	6243      	str	r3, [r0, #36]	; 0x24
   840c8:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   840ca:	6283      	str	r3, [r0, #40]	; 0x28
   840cc:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   840ce:	62c3      	str	r3, [r0, #44]	; 0x2c
   840d0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   840d2:	6303      	str	r3, [r0, #48]	; 0x30
   840d4:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   840d6:	6343      	str	r3, [r0, #52]	; 0x34
   840d8:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   840da:	6383      	str	r3, [r0, #56]	; 0x38
   840dc:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   840de:	63c3      	str	r3, [r0, #60]	; 0x3c
   840e0:	3040      	adds	r0, #64	; 0x40
   840e2:	3140      	adds	r1, #64	; 0x40
   840e4:	3a40      	subs	r2, #64	; 0x40
   840e6:	d2db      	bcs.n	840a0 <memcpy+0x10>
   840e8:	3230      	adds	r2, #48	; 0x30
   840ea:	d30b      	bcc.n	84104 <memcpy+0x74>
   840ec:	680b      	ldr	r3, [r1, #0]
   840ee:	6003      	str	r3, [r0, #0]
   840f0:	684b      	ldr	r3, [r1, #4]
   840f2:	6043      	str	r3, [r0, #4]
   840f4:	688b      	ldr	r3, [r1, #8]
   840f6:	6083      	str	r3, [r0, #8]
   840f8:	68cb      	ldr	r3, [r1, #12]
   840fa:	60c3      	str	r3, [r0, #12]
   840fc:	3010      	adds	r0, #16
   840fe:	3110      	adds	r1, #16
   84100:	3a10      	subs	r2, #16
   84102:	d2f3      	bcs.n	840ec <memcpy+0x5c>
   84104:	320c      	adds	r2, #12
   84106:	d305      	bcc.n	84114 <memcpy+0x84>
   84108:	f851 3b04 	ldr.w	r3, [r1], #4
   8410c:	f840 3b04 	str.w	r3, [r0], #4
   84110:	3a04      	subs	r2, #4
   84112:	d2f9      	bcs.n	84108 <memcpy+0x78>
   84114:	3204      	adds	r2, #4
   84116:	d008      	beq.n	8412a <memcpy+0x9a>
   84118:	07d2      	lsls	r2, r2, #31
   8411a:	bf1c      	itt	ne
   8411c:	f811 3b01 	ldrbne.w	r3, [r1], #1
   84120:	f800 3b01 	strbne.w	r3, [r0], #1
   84124:	d301      	bcc.n	8412a <memcpy+0x9a>
   84126:	880b      	ldrh	r3, [r1, #0]
   84128:	8003      	strh	r3, [r0, #0]
   8412a:	4660      	mov	r0, ip
   8412c:	4770      	bx	lr
   8412e:	bf00      	nop
   84130:	2a08      	cmp	r2, #8
   84132:	d313      	bcc.n	8415c <memcpy+0xcc>
   84134:	078b      	lsls	r3, r1, #30
   84136:	d0b1      	beq.n	8409c <memcpy+0xc>
   84138:	f010 0303 	ands.w	r3, r0, #3
   8413c:	d0ae      	beq.n	8409c <memcpy+0xc>
   8413e:	f1c3 0304 	rsb	r3, r3, #4
   84142:	1ad2      	subs	r2, r2, r3
   84144:	07db      	lsls	r3, r3, #31
   84146:	bf1c      	itt	ne
   84148:	f811 3b01 	ldrbne.w	r3, [r1], #1
   8414c:	f800 3b01 	strbne.w	r3, [r0], #1
   84150:	d3a4      	bcc.n	8409c <memcpy+0xc>
   84152:	f831 3b02 	ldrh.w	r3, [r1], #2
   84156:	f820 3b02 	strh.w	r3, [r0], #2
   8415a:	e79f      	b.n	8409c <memcpy+0xc>
   8415c:	3a04      	subs	r2, #4
   8415e:	d3d9      	bcc.n	84114 <memcpy+0x84>
   84160:	3a01      	subs	r2, #1
   84162:	f811 3b01 	ldrb.w	r3, [r1], #1
   84166:	f800 3b01 	strb.w	r3, [r0], #1
   8416a:	d2f9      	bcs.n	84160 <memcpy+0xd0>
   8416c:	780b      	ldrb	r3, [r1, #0]
   8416e:	7003      	strb	r3, [r0, #0]
   84170:	784b      	ldrb	r3, [r1, #1]
   84172:	7043      	strb	r3, [r0, #1]
   84174:	788b      	ldrb	r3, [r1, #2]
   84176:	7083      	strb	r3, [r0, #2]
   84178:	4660      	mov	r0, ip
   8417a:	4770      	bx	lr

0008417c <memset>:
   8417c:	b4f0      	push	{r4, r5, r6, r7}
   8417e:	0784      	lsls	r4, r0, #30
   84180:	d043      	beq.n	8420a <memset+0x8e>
   84182:	1e54      	subs	r4, r2, #1
   84184:	2a00      	cmp	r2, #0
   84186:	d03e      	beq.n	84206 <memset+0x8a>
   84188:	b2cd      	uxtb	r5, r1
   8418a:	4603      	mov	r3, r0
   8418c:	e003      	b.n	84196 <memset+0x1a>
   8418e:	1e62      	subs	r2, r4, #1
   84190:	2c00      	cmp	r4, #0
   84192:	d038      	beq.n	84206 <memset+0x8a>
   84194:	4614      	mov	r4, r2
   84196:	f803 5b01 	strb.w	r5, [r3], #1
   8419a:	079a      	lsls	r2, r3, #30
   8419c:	d1f7      	bne.n	8418e <memset+0x12>
   8419e:	2c03      	cmp	r4, #3
   841a0:	d92a      	bls.n	841f8 <memset+0x7c>
   841a2:	b2cd      	uxtb	r5, r1
   841a4:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   841a8:	2c0f      	cmp	r4, #15
   841aa:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   841ae:	d915      	bls.n	841dc <memset+0x60>
   841b0:	f1a4 0710 	sub.w	r7, r4, #16
   841b4:	093f      	lsrs	r7, r7, #4
   841b6:	f103 0610 	add.w	r6, r3, #16
   841ba:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   841be:	461a      	mov	r2, r3
   841c0:	6015      	str	r5, [r2, #0]
   841c2:	6055      	str	r5, [r2, #4]
   841c4:	6095      	str	r5, [r2, #8]
   841c6:	60d5      	str	r5, [r2, #12]
   841c8:	3210      	adds	r2, #16
   841ca:	42b2      	cmp	r2, r6
   841cc:	d1f8      	bne.n	841c0 <memset+0x44>
   841ce:	f004 040f 	and.w	r4, r4, #15
   841d2:	3701      	adds	r7, #1
   841d4:	2c03      	cmp	r4, #3
   841d6:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   841da:	d90d      	bls.n	841f8 <memset+0x7c>
   841dc:	461e      	mov	r6, r3
   841de:	4622      	mov	r2, r4
   841e0:	3a04      	subs	r2, #4
   841e2:	2a03      	cmp	r2, #3
   841e4:	f846 5b04 	str.w	r5, [r6], #4
   841e8:	d8fa      	bhi.n	841e0 <memset+0x64>
   841ea:	1f22      	subs	r2, r4, #4
   841ec:	f022 0203 	bic.w	r2, r2, #3
   841f0:	3204      	adds	r2, #4
   841f2:	4413      	add	r3, r2
   841f4:	f004 0403 	and.w	r4, r4, #3
   841f8:	b12c      	cbz	r4, 84206 <memset+0x8a>
   841fa:	b2c9      	uxtb	r1, r1
   841fc:	441c      	add	r4, r3
   841fe:	f803 1b01 	strb.w	r1, [r3], #1
   84202:	42a3      	cmp	r3, r4
   84204:	d1fb      	bne.n	841fe <memset+0x82>
   84206:	bcf0      	pop	{r4, r5, r6, r7}
   84208:	4770      	bx	lr
   8420a:	4614      	mov	r4, r2
   8420c:	4603      	mov	r3, r0
   8420e:	e7c6      	b.n	8419e <memset+0x22>

00084210 <_puts_r>:
   84210:	b5f0      	push	{r4, r5, r6, r7, lr}
   84212:	4604      	mov	r4, r0
   84214:	b089      	sub	sp, #36	; 0x24
   84216:	4608      	mov	r0, r1
   84218:	460d      	mov	r5, r1
   8421a:	f000 f8b9 	bl	84390 <strlen>
   8421e:	68a3      	ldr	r3, [r4, #8]
   84220:	2102      	movs	r1, #2
   84222:	899a      	ldrh	r2, [r3, #12]
   84224:	f8df e044 	ldr.w	lr, [pc, #68]	; 8426c <_puts_r+0x5c>
   84228:	f100 0c01 	add.w	ip, r0, #1
   8422c:	2701      	movs	r7, #1
   8422e:	ae04      	add	r6, sp, #16
   84230:	9102      	str	r1, [sp, #8]
   84232:	0491      	lsls	r1, r2, #18
   84234:	9504      	str	r5, [sp, #16]
   84236:	9005      	str	r0, [sp, #20]
   84238:	f8cd c00c 	str.w	ip, [sp, #12]
   8423c:	f8cd e018 	str.w	lr, [sp, #24]
   84240:	9707      	str	r7, [sp, #28]
   84242:	9601      	str	r6, [sp, #4]
   84244:	d406      	bmi.n	84254 <_puts_r+0x44>
   84246:	6e59      	ldr	r1, [r3, #100]	; 0x64
   84248:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   8424c:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   84250:	819a      	strh	r2, [r3, #12]
   84252:	6659      	str	r1, [r3, #100]	; 0x64
   84254:	4620      	mov	r0, r4
   84256:	4619      	mov	r1, r3
   84258:	aa01      	add	r2, sp, #4
   8425a:	f002 f887 	bl	8636c <__sfvwrite_r>
   8425e:	2800      	cmp	r0, #0
   84260:	bf0c      	ite	eq
   84262:	200a      	moveq	r0, #10
   84264:	f04f 30ff 	movne.w	r0, #4294967295
   84268:	b009      	add	sp, #36	; 0x24
   8426a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8426c:	000881b0 	.word	0x000881b0

00084270 <puts>:
   84270:	4b02      	ldr	r3, [pc, #8]	; (8427c <puts+0xc>)
   84272:	4601      	mov	r1, r0
   84274:	6818      	ldr	r0, [r3, #0]
   84276:	f7ff bfcb 	b.w	84210 <_puts_r>
   8427a:	bf00      	nop
   8427c:	20070638 	.word	0x20070638

00084280 <setbuf>:
   84280:	2900      	cmp	r1, #0
   84282:	bf0c      	ite	eq
   84284:	2202      	moveq	r2, #2
   84286:	2200      	movne	r2, #0
   84288:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8428c:	f000 b800 	b.w	84290 <setvbuf>

00084290 <setvbuf>:
   84290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84294:	4d3c      	ldr	r5, [pc, #240]	; (84388 <setvbuf+0xf8>)
   84296:	4604      	mov	r4, r0
   84298:	682d      	ldr	r5, [r5, #0]
   8429a:	4688      	mov	r8, r1
   8429c:	4616      	mov	r6, r2
   8429e:	461f      	mov	r7, r3
   842a0:	b115      	cbz	r5, 842a8 <setvbuf+0x18>
   842a2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   842a4:	2b00      	cmp	r3, #0
   842a6:	d04f      	beq.n	84348 <setvbuf+0xb8>
   842a8:	2e02      	cmp	r6, #2
   842aa:	d830      	bhi.n	8430e <setvbuf+0x7e>
   842ac:	2f00      	cmp	r7, #0
   842ae:	db2e      	blt.n	8430e <setvbuf+0x7e>
   842b0:	4628      	mov	r0, r5
   842b2:	4621      	mov	r1, r4
   842b4:	f001 fd54 	bl	85d60 <_fflush_r>
   842b8:	89a3      	ldrh	r3, [r4, #12]
   842ba:	2200      	movs	r2, #0
   842bc:	6062      	str	r2, [r4, #4]
   842be:	61a2      	str	r2, [r4, #24]
   842c0:	061a      	lsls	r2, r3, #24
   842c2:	d428      	bmi.n	84316 <setvbuf+0x86>
   842c4:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   842c8:	b29b      	uxth	r3, r3
   842ca:	2e02      	cmp	r6, #2
   842cc:	81a3      	strh	r3, [r4, #12]
   842ce:	d02d      	beq.n	8432c <setvbuf+0x9c>
   842d0:	f1b8 0f00 	cmp.w	r8, #0
   842d4:	d03c      	beq.n	84350 <setvbuf+0xc0>
   842d6:	2e01      	cmp	r6, #1
   842d8:	d013      	beq.n	84302 <setvbuf+0x72>
   842da:	b29b      	uxth	r3, r3
   842dc:	f003 0008 	and.w	r0, r3, #8
   842e0:	4a2a      	ldr	r2, [pc, #168]	; (8438c <setvbuf+0xfc>)
   842e2:	b280      	uxth	r0, r0
   842e4:	63ea      	str	r2, [r5, #60]	; 0x3c
   842e6:	f8c4 8000 	str.w	r8, [r4]
   842ea:	f8c4 8010 	str.w	r8, [r4, #16]
   842ee:	6167      	str	r7, [r4, #20]
   842f0:	b178      	cbz	r0, 84312 <setvbuf+0x82>
   842f2:	f013 0f03 	tst.w	r3, #3
   842f6:	bf18      	it	ne
   842f8:	2700      	movne	r7, #0
   842fa:	60a7      	str	r7, [r4, #8]
   842fc:	2000      	movs	r0, #0
   842fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84302:	f043 0301 	orr.w	r3, r3, #1
   84306:	427a      	negs	r2, r7
   84308:	81a3      	strh	r3, [r4, #12]
   8430a:	61a2      	str	r2, [r4, #24]
   8430c:	e7e5      	b.n	842da <setvbuf+0x4a>
   8430e:	f04f 30ff 	mov.w	r0, #4294967295
   84312:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84316:	4628      	mov	r0, r5
   84318:	6921      	ldr	r1, [r4, #16]
   8431a:	f001 ff5b 	bl	861d4 <_free_r>
   8431e:	89a3      	ldrh	r3, [r4, #12]
   84320:	2e02      	cmp	r6, #2
   84322:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   84326:	b29b      	uxth	r3, r3
   84328:	81a3      	strh	r3, [r4, #12]
   8432a:	d1d1      	bne.n	842d0 <setvbuf+0x40>
   8432c:	2000      	movs	r0, #0
   8432e:	f104 0243 	add.w	r2, r4, #67	; 0x43
   84332:	f043 0302 	orr.w	r3, r3, #2
   84336:	2500      	movs	r5, #0
   84338:	2101      	movs	r1, #1
   8433a:	81a3      	strh	r3, [r4, #12]
   8433c:	60a5      	str	r5, [r4, #8]
   8433e:	6022      	str	r2, [r4, #0]
   84340:	6122      	str	r2, [r4, #16]
   84342:	6161      	str	r1, [r4, #20]
   84344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84348:	4628      	mov	r0, r5
   8434a:	f001 fd37 	bl	85dbc <__sinit>
   8434e:	e7ab      	b.n	842a8 <setvbuf+0x18>
   84350:	2f00      	cmp	r7, #0
   84352:	bf08      	it	eq
   84354:	f44f 6780 	moveq.w	r7, #1024	; 0x400
   84358:	4638      	mov	r0, r7
   8435a:	f002 fa65 	bl	86828 <malloc>
   8435e:	4680      	mov	r8, r0
   84360:	b128      	cbz	r0, 8436e <setvbuf+0xde>
   84362:	89a3      	ldrh	r3, [r4, #12]
   84364:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   84368:	b29b      	uxth	r3, r3
   8436a:	81a3      	strh	r3, [r4, #12]
   8436c:	e7b3      	b.n	842d6 <setvbuf+0x46>
   8436e:	f44f 6080 	mov.w	r0, #1024	; 0x400
   84372:	f002 fa59 	bl	86828 <malloc>
   84376:	4680      	mov	r8, r0
   84378:	b918      	cbnz	r0, 84382 <setvbuf+0xf2>
   8437a:	89a3      	ldrh	r3, [r4, #12]
   8437c:	f04f 30ff 	mov.w	r0, #4294967295
   84380:	e7d5      	b.n	8432e <setvbuf+0x9e>
   84382:	f44f 6780 	mov.w	r7, #1024	; 0x400
   84386:	e7ec      	b.n	84362 <setvbuf+0xd2>
   84388:	20070638 	.word	0x20070638
   8438c:	00085db1 	.word	0x00085db1

00084390 <strlen>:
   84390:	f020 0103 	bic.w	r1, r0, #3
   84394:	f010 0003 	ands.w	r0, r0, #3
   84398:	f1c0 0000 	rsb	r0, r0, #0
   8439c:	f851 3b04 	ldr.w	r3, [r1], #4
   843a0:	f100 0c04 	add.w	ip, r0, #4
   843a4:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   843a8:	f06f 0200 	mvn.w	r2, #0
   843ac:	bf1c      	itt	ne
   843ae:	fa22 f20c 	lsrne.w	r2, r2, ip
   843b2:	4313      	orrne	r3, r2
   843b4:	f04f 0c01 	mov.w	ip, #1
   843b8:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   843bc:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   843c0:	eba3 020c 	sub.w	r2, r3, ip
   843c4:	ea22 0203 	bic.w	r2, r2, r3
   843c8:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   843cc:	bf04      	itt	eq
   843ce:	f851 3b04 	ldreq.w	r3, [r1], #4
   843d2:	3004      	addeq	r0, #4
   843d4:	d0f4      	beq.n	843c0 <strlen+0x30>
   843d6:	f013 0fff 	tst.w	r3, #255	; 0xff
   843da:	bf1f      	itttt	ne
   843dc:	3001      	addne	r0, #1
   843de:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
   843e2:	3001      	addne	r0, #1
   843e4:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
   843e8:	bf18      	it	ne
   843ea:	3001      	addne	r0, #1
   843ec:	4770      	bx	lr
   843ee:	bf00      	nop

000843f0 <strncpy>:
   843f0:	ea40 0301 	orr.w	r3, r0, r1
   843f4:	079b      	lsls	r3, r3, #30
   843f6:	b470      	push	{r4, r5, r6}
   843f8:	d12a      	bne.n	84450 <strncpy+0x60>
   843fa:	2a03      	cmp	r2, #3
   843fc:	d928      	bls.n	84450 <strncpy+0x60>
   843fe:	460c      	mov	r4, r1
   84400:	4603      	mov	r3, r0
   84402:	4621      	mov	r1, r4
   84404:	f854 5b04 	ldr.w	r5, [r4], #4
   84408:	f1a5 3601 	sub.w	r6, r5, #16843009	; 0x1010101
   8440c:	ea26 0605 	bic.w	r6, r6, r5
   84410:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
   84414:	d105      	bne.n	84422 <strncpy+0x32>
   84416:	3a04      	subs	r2, #4
   84418:	2a03      	cmp	r2, #3
   8441a:	f843 5b04 	str.w	r5, [r3], #4
   8441e:	4621      	mov	r1, r4
   84420:	d8ef      	bhi.n	84402 <strncpy+0x12>
   84422:	b19a      	cbz	r2, 8444c <strncpy+0x5c>
   84424:	780c      	ldrb	r4, [r1, #0]
   84426:	3a01      	subs	r2, #1
   84428:	701c      	strb	r4, [r3, #0]
   8442a:	3301      	adds	r3, #1
   8442c:	b13c      	cbz	r4, 8443e <strncpy+0x4e>
   8442e:	b16a      	cbz	r2, 8444c <strncpy+0x5c>
   84430:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   84434:	3a01      	subs	r2, #1
   84436:	f803 4b01 	strb.w	r4, [r3], #1
   8443a:	2c00      	cmp	r4, #0
   8443c:	d1f7      	bne.n	8442e <strncpy+0x3e>
   8443e:	b12a      	cbz	r2, 8444c <strncpy+0x5c>
   84440:	441a      	add	r2, r3
   84442:	2100      	movs	r1, #0
   84444:	f803 1b01 	strb.w	r1, [r3], #1
   84448:	4293      	cmp	r3, r2
   8444a:	d1fb      	bne.n	84444 <strncpy+0x54>
   8444c:	bc70      	pop	{r4, r5, r6}
   8444e:	4770      	bx	lr
   84450:	4603      	mov	r3, r0
   84452:	e7e6      	b.n	84422 <strncpy+0x32>

00084454 <__sprint_r.part.0>:
   84454:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   84456:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8445a:	049c      	lsls	r4, r3, #18
   8445c:	460e      	mov	r6, r1
   8445e:	4680      	mov	r8, r0
   84460:	4691      	mov	r9, r2
   84462:	d52a      	bpl.n	844ba <__sprint_r.part.0+0x66>
   84464:	6893      	ldr	r3, [r2, #8]
   84466:	6812      	ldr	r2, [r2, #0]
   84468:	f102 0a08 	add.w	sl, r2, #8
   8446c:	b31b      	cbz	r3, 844b6 <__sprint_r.part.0+0x62>
   8446e:	e91a 00a0 	ldmdb	sl, {r5, r7}
   84472:	08bf      	lsrs	r7, r7, #2
   84474:	d017      	beq.n	844a6 <__sprint_r.part.0+0x52>
   84476:	3d04      	subs	r5, #4
   84478:	2400      	movs	r4, #0
   8447a:	e001      	b.n	84480 <__sprint_r.part.0+0x2c>
   8447c:	42a7      	cmp	r7, r4
   8447e:	d010      	beq.n	844a2 <__sprint_r.part.0+0x4e>
   84480:	4640      	mov	r0, r8
   84482:	f855 1f04 	ldr.w	r1, [r5, #4]!
   84486:	4632      	mov	r2, r6
   84488:	f001 fd2e 	bl	85ee8 <_fputwc_r>
   8448c:	1c43      	adds	r3, r0, #1
   8448e:	f104 0401 	add.w	r4, r4, #1
   84492:	d1f3      	bne.n	8447c <__sprint_r.part.0+0x28>
   84494:	2300      	movs	r3, #0
   84496:	f8c9 3008 	str.w	r3, [r9, #8]
   8449a:	f8c9 3004 	str.w	r3, [r9, #4]
   8449e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   844a2:	f8d9 3008 	ldr.w	r3, [r9, #8]
   844a6:	eba3 0387 	sub.w	r3, r3, r7, lsl #2
   844aa:	f8c9 3008 	str.w	r3, [r9, #8]
   844ae:	f10a 0a08 	add.w	sl, sl, #8
   844b2:	2b00      	cmp	r3, #0
   844b4:	d1db      	bne.n	8446e <__sprint_r.part.0+0x1a>
   844b6:	2000      	movs	r0, #0
   844b8:	e7ec      	b.n	84494 <__sprint_r.part.0+0x40>
   844ba:	f001 ff57 	bl	8636c <__sfvwrite_r>
   844be:	2300      	movs	r3, #0
   844c0:	f8c9 3008 	str.w	r3, [r9, #8]
   844c4:	f8c9 3004 	str.w	r3, [r9, #4]
   844c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000844cc <_vfiprintf_r>:
   844cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   844d0:	b0b1      	sub	sp, #196	; 0xc4
   844d2:	461c      	mov	r4, r3
   844d4:	9102      	str	r1, [sp, #8]
   844d6:	4690      	mov	r8, r2
   844d8:	9308      	str	r3, [sp, #32]
   844da:	9006      	str	r0, [sp, #24]
   844dc:	b118      	cbz	r0, 844e6 <_vfiprintf_r+0x1a>
   844de:	6b83      	ldr	r3, [r0, #56]	; 0x38
   844e0:	2b00      	cmp	r3, #0
   844e2:	f000 80e8 	beq.w	846b6 <_vfiprintf_r+0x1ea>
   844e6:	9d02      	ldr	r5, [sp, #8]
   844e8:	89ab      	ldrh	r3, [r5, #12]
   844ea:	b29a      	uxth	r2, r3
   844ec:	0490      	lsls	r0, r2, #18
   844ee:	d407      	bmi.n	84500 <_vfiprintf_r+0x34>
   844f0:	6e6a      	ldr	r2, [r5, #100]	; 0x64
   844f2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   844f6:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
   844fa:	81ab      	strh	r3, [r5, #12]
   844fc:	b29a      	uxth	r2, r3
   844fe:	6669      	str	r1, [r5, #100]	; 0x64
   84500:	0711      	lsls	r1, r2, #28
   84502:	f140 80b7 	bpl.w	84674 <_vfiprintf_r+0x1a8>
   84506:	f8dd b008 	ldr.w	fp, [sp, #8]
   8450a:	f8db 3010 	ldr.w	r3, [fp, #16]
   8450e:	2b00      	cmp	r3, #0
   84510:	f000 80b0 	beq.w	84674 <_vfiprintf_r+0x1a8>
   84514:	f002 021a 	and.w	r2, r2, #26
   84518:	2a0a      	cmp	r2, #10
   8451a:	f000 80b7 	beq.w	8468c <_vfiprintf_r+0x1c0>
   8451e:	2300      	movs	r3, #0
   84520:	f10d 0980 	add.w	r9, sp, #128	; 0x80
   84524:	930a      	str	r3, [sp, #40]	; 0x28
   84526:	9315      	str	r3, [sp, #84]	; 0x54
   84528:	9314      	str	r3, [sp, #80]	; 0x50
   8452a:	9309      	str	r3, [sp, #36]	; 0x24
   8452c:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
   84530:	464e      	mov	r6, r9
   84532:	f898 3000 	ldrb.w	r3, [r8]
   84536:	2b00      	cmp	r3, #0
   84538:	f000 84c8 	beq.w	84ecc <_vfiprintf_r+0xa00>
   8453c:	2b25      	cmp	r3, #37	; 0x25
   8453e:	f000 84c5 	beq.w	84ecc <_vfiprintf_r+0xa00>
   84542:	f108 0201 	add.w	r2, r8, #1
   84546:	e001      	b.n	8454c <_vfiprintf_r+0x80>
   84548:	2b25      	cmp	r3, #37	; 0x25
   8454a:	d004      	beq.n	84556 <_vfiprintf_r+0x8a>
   8454c:	7813      	ldrb	r3, [r2, #0]
   8454e:	4614      	mov	r4, r2
   84550:	3201      	adds	r2, #1
   84552:	2b00      	cmp	r3, #0
   84554:	d1f8      	bne.n	84548 <_vfiprintf_r+0x7c>
   84556:	ebc8 0504 	rsb	r5, r8, r4
   8455a:	b195      	cbz	r5, 84582 <_vfiprintf_r+0xb6>
   8455c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   8455e:	9a15      	ldr	r2, [sp, #84]	; 0x54
   84560:	3301      	adds	r3, #1
   84562:	442a      	add	r2, r5
   84564:	2b07      	cmp	r3, #7
   84566:	f8c6 8000 	str.w	r8, [r6]
   8456a:	6075      	str	r5, [r6, #4]
   8456c:	9215      	str	r2, [sp, #84]	; 0x54
   8456e:	9314      	str	r3, [sp, #80]	; 0x50
   84570:	dd7b      	ble.n	8466a <_vfiprintf_r+0x19e>
   84572:	2a00      	cmp	r2, #0
   84574:	f040 84d5 	bne.w	84f22 <_vfiprintf_r+0xa56>
   84578:	9809      	ldr	r0, [sp, #36]	; 0x24
   8457a:	9214      	str	r2, [sp, #80]	; 0x50
   8457c:	4428      	add	r0, r5
   8457e:	464e      	mov	r6, r9
   84580:	9009      	str	r0, [sp, #36]	; 0x24
   84582:	7823      	ldrb	r3, [r4, #0]
   84584:	2b00      	cmp	r3, #0
   84586:	f000 83ed 	beq.w	84d64 <_vfiprintf_r+0x898>
   8458a:	2100      	movs	r1, #0
   8458c:	f04f 0200 	mov.w	r2, #0
   84590:	f04f 3cff 	mov.w	ip, #4294967295
   84594:	7863      	ldrb	r3, [r4, #1]
   84596:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
   8459a:	9104      	str	r1, [sp, #16]
   8459c:	468a      	mov	sl, r1
   8459e:	f104 0801 	add.w	r8, r4, #1
   845a2:	4608      	mov	r0, r1
   845a4:	4665      	mov	r5, ip
   845a6:	f108 0801 	add.w	r8, r8, #1
   845aa:	f1a3 0220 	sub.w	r2, r3, #32
   845ae:	2a58      	cmp	r2, #88	; 0x58
   845b0:	f200 82d9 	bhi.w	84b66 <_vfiprintf_r+0x69a>
   845b4:	e8df f012 	tbh	[pc, r2, lsl #1]
   845b8:	02d702cb 	.word	0x02d702cb
   845bc:	02d202d7 	.word	0x02d202d7
   845c0:	02d702d7 	.word	0x02d702d7
   845c4:	02d702d7 	.word	0x02d702d7
   845c8:	02d702d7 	.word	0x02d702d7
   845cc:	028f0282 	.word	0x028f0282
   845d0:	008402d7 	.word	0x008402d7
   845d4:	02d70293 	.word	0x02d70293
   845d8:	0196012b 	.word	0x0196012b
   845dc:	01960196 	.word	0x01960196
   845e0:	01960196 	.word	0x01960196
   845e4:	01960196 	.word	0x01960196
   845e8:	01960196 	.word	0x01960196
   845ec:	02d702d7 	.word	0x02d702d7
   845f0:	02d702d7 	.word	0x02d702d7
   845f4:	02d702d7 	.word	0x02d702d7
   845f8:	02d702d7 	.word	0x02d702d7
   845fc:	02d702d7 	.word	0x02d702d7
   84600:	02d70130 	.word	0x02d70130
   84604:	02d702d7 	.word	0x02d702d7
   84608:	02d702d7 	.word	0x02d702d7
   8460c:	02d702d7 	.word	0x02d702d7
   84610:	02d702d7 	.word	0x02d702d7
   84614:	017b02d7 	.word	0x017b02d7
   84618:	02d702d7 	.word	0x02d702d7
   8461c:	02d702d7 	.word	0x02d702d7
   84620:	01a402d7 	.word	0x01a402d7
   84624:	02d702d7 	.word	0x02d702d7
   84628:	02d701bf 	.word	0x02d701bf
   8462c:	02d702d7 	.word	0x02d702d7
   84630:	02d702d7 	.word	0x02d702d7
   84634:	02d702d7 	.word	0x02d702d7
   84638:	02d702d7 	.word	0x02d702d7
   8463c:	01e402d7 	.word	0x01e402d7
   84640:	02d701fa 	.word	0x02d701fa
   84644:	02d702d7 	.word	0x02d702d7
   84648:	01fa0216 	.word	0x01fa0216
   8464c:	02d702d7 	.word	0x02d702d7
   84650:	02d7021b 	.word	0x02d7021b
   84654:	00890228 	.word	0x00890228
   84658:	027d0266 	.word	0x027d0266
   8465c:	023a02d7 	.word	0x023a02d7
   84660:	011902d7 	.word	0x011902d7
   84664:	02d702d7 	.word	0x02d702d7
   84668:	02af      	.short	0x02af
   8466a:	3608      	adds	r6, #8
   8466c:	9809      	ldr	r0, [sp, #36]	; 0x24
   8466e:	4428      	add	r0, r5
   84670:	9009      	str	r0, [sp, #36]	; 0x24
   84672:	e786      	b.n	84582 <_vfiprintf_r+0xb6>
   84674:	9806      	ldr	r0, [sp, #24]
   84676:	9902      	ldr	r1, [sp, #8]
   84678:	f001 fa5c 	bl	85b34 <__swsetup_r>
   8467c:	b9b0      	cbnz	r0, 846ac <_vfiprintf_r+0x1e0>
   8467e:	9d02      	ldr	r5, [sp, #8]
   84680:	89aa      	ldrh	r2, [r5, #12]
   84682:	f002 021a 	and.w	r2, r2, #26
   84686:	2a0a      	cmp	r2, #10
   84688:	f47f af49 	bne.w	8451e <_vfiprintf_r+0x52>
   8468c:	f8dd b008 	ldr.w	fp, [sp, #8]
   84690:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
   84694:	2b00      	cmp	r3, #0
   84696:	f6ff af42 	blt.w	8451e <_vfiprintf_r+0x52>
   8469a:	9806      	ldr	r0, [sp, #24]
   8469c:	4659      	mov	r1, fp
   8469e:	4642      	mov	r2, r8
   846a0:	4623      	mov	r3, r4
   846a2:	f000 fd3d 	bl	85120 <__sbprintf>
   846a6:	b031      	add	sp, #196	; 0xc4
   846a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   846ac:	f04f 30ff 	mov.w	r0, #4294967295
   846b0:	b031      	add	sp, #196	; 0xc4
   846b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   846b6:	f001 fb81 	bl	85dbc <__sinit>
   846ba:	e714      	b.n	844e6 <_vfiprintf_r+0x1a>
   846bc:	4240      	negs	r0, r0
   846be:	9308      	str	r3, [sp, #32]
   846c0:	f04a 0a04 	orr.w	sl, sl, #4
   846c4:	f898 3000 	ldrb.w	r3, [r8]
   846c8:	e76d      	b.n	845a6 <_vfiprintf_r+0xda>
   846ca:	f01a 0320 	ands.w	r3, sl, #32
   846ce:	9004      	str	r0, [sp, #16]
   846d0:	46ac      	mov	ip, r5
   846d2:	f000 80f4 	beq.w	848be <_vfiprintf_r+0x3f2>
   846d6:	f8dd b020 	ldr.w	fp, [sp, #32]
   846da:	f10b 0307 	add.w	r3, fp, #7
   846de:	f023 0307 	bic.w	r3, r3, #7
   846e2:	f103 0408 	add.w	r4, r3, #8
   846e6:	9408      	str	r4, [sp, #32]
   846e8:	e9d3 4500 	ldrd	r4, r5, [r3]
   846ec:	2300      	movs	r3, #0
   846ee:	f04f 0000 	mov.w	r0, #0
   846f2:	2100      	movs	r1, #0
   846f4:	f88d 0047 	strb.w	r0, [sp, #71]	; 0x47
   846f8:	f8cd c014 	str.w	ip, [sp, #20]
   846fc:	9107      	str	r1, [sp, #28]
   846fe:	f1bc 0f00 	cmp.w	ip, #0
   84702:	bfa8      	it	ge
   84704:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
   84708:	ea54 0205 	orrs.w	r2, r4, r5
   8470c:	f040 80ad 	bne.w	8486a <_vfiprintf_r+0x39e>
   84710:	f1bc 0f00 	cmp.w	ip, #0
   84714:	f040 80a9 	bne.w	8486a <_vfiprintf_r+0x39e>
   84718:	2b00      	cmp	r3, #0
   8471a:	f040 83c0 	bne.w	84e9e <_vfiprintf_r+0x9d2>
   8471e:	f01a 0f01 	tst.w	sl, #1
   84722:	f000 83bc 	beq.w	84e9e <_vfiprintf_r+0x9d2>
   84726:	2330      	movs	r3, #48	; 0x30
   84728:	af30      	add	r7, sp, #192	; 0xc0
   8472a:	f807 3d41 	strb.w	r3, [r7, #-65]!
   8472e:	ebc7 0409 	rsb	r4, r7, r9
   84732:	9405      	str	r4, [sp, #20]
   84734:	f8dd b014 	ldr.w	fp, [sp, #20]
   84738:	9c07      	ldr	r4, [sp, #28]
   8473a:	45e3      	cmp	fp, ip
   8473c:	bfb8      	it	lt
   8473e:	46e3      	movlt	fp, ip
   84740:	f8cd b00c 	str.w	fp, [sp, #12]
   84744:	b11c      	cbz	r4, 8474e <_vfiprintf_r+0x282>
   84746:	f10b 0b01 	add.w	fp, fp, #1
   8474a:	f8cd b00c 	str.w	fp, [sp, #12]
   8474e:	f01a 0502 	ands.w	r5, sl, #2
   84752:	9507      	str	r5, [sp, #28]
   84754:	d005      	beq.n	84762 <_vfiprintf_r+0x296>
   84756:	f8dd b00c 	ldr.w	fp, [sp, #12]
   8475a:	f10b 0b02 	add.w	fp, fp, #2
   8475e:	f8cd b00c 	str.w	fp, [sp, #12]
   84762:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
   84766:	930b      	str	r3, [sp, #44]	; 0x2c
   84768:	f040 821b 	bne.w	84ba2 <_vfiprintf_r+0x6d6>
   8476c:	9d04      	ldr	r5, [sp, #16]
   8476e:	f8dd b00c 	ldr.w	fp, [sp, #12]
   84772:	ebcb 0405 	rsb	r4, fp, r5
   84776:	2c00      	cmp	r4, #0
   84778:	f340 8213 	ble.w	84ba2 <_vfiprintf_r+0x6d6>
   8477c:	2c10      	cmp	r4, #16
   8477e:	f340 8489 	ble.w	85094 <_vfiprintf_r+0xbc8>
   84782:	4dbe      	ldr	r5, [pc, #760]	; (84a7c <_vfiprintf_r+0x5b0>)
   84784:	9a15      	ldr	r2, [sp, #84]	; 0x54
   84786:	462b      	mov	r3, r5
   84788:	9814      	ldr	r0, [sp, #80]	; 0x50
   8478a:	4625      	mov	r5, r4
   8478c:	f04f 0b10 	mov.w	fp, #16
   84790:	4664      	mov	r4, ip
   84792:	46b4      	mov	ip, r6
   84794:	461e      	mov	r6, r3
   84796:	e006      	b.n	847a6 <_vfiprintf_r+0x2da>
   84798:	1c83      	adds	r3, r0, #2
   8479a:	f10c 0c08 	add.w	ip, ip, #8
   8479e:	4608      	mov	r0, r1
   847a0:	3d10      	subs	r5, #16
   847a2:	2d10      	cmp	r5, #16
   847a4:	dd11      	ble.n	847ca <_vfiprintf_r+0x2fe>
   847a6:	1c41      	adds	r1, r0, #1
   847a8:	3210      	adds	r2, #16
   847aa:	2907      	cmp	r1, #7
   847ac:	9215      	str	r2, [sp, #84]	; 0x54
   847ae:	e88c 0840 	stmia.w	ip, {r6, fp}
   847b2:	9114      	str	r1, [sp, #80]	; 0x50
   847b4:	ddf0      	ble.n	84798 <_vfiprintf_r+0x2cc>
   847b6:	2a00      	cmp	r2, #0
   847b8:	f040 81e6 	bne.w	84b88 <_vfiprintf_r+0x6bc>
   847bc:	3d10      	subs	r5, #16
   847be:	2d10      	cmp	r5, #16
   847c0:	f04f 0301 	mov.w	r3, #1
   847c4:	4610      	mov	r0, r2
   847c6:	46cc      	mov	ip, r9
   847c8:	dced      	bgt.n	847a6 <_vfiprintf_r+0x2da>
   847ca:	4631      	mov	r1, r6
   847cc:	4666      	mov	r6, ip
   847ce:	46a4      	mov	ip, r4
   847d0:	462c      	mov	r4, r5
   847d2:	460d      	mov	r5, r1
   847d4:	4422      	add	r2, r4
   847d6:	2b07      	cmp	r3, #7
   847d8:	9215      	str	r2, [sp, #84]	; 0x54
   847da:	6035      	str	r5, [r6, #0]
   847dc:	6074      	str	r4, [r6, #4]
   847de:	9314      	str	r3, [sp, #80]	; 0x50
   847e0:	f300 836d 	bgt.w	84ebe <_vfiprintf_r+0x9f2>
   847e4:	3608      	adds	r6, #8
   847e6:	1c59      	adds	r1, r3, #1
   847e8:	e1de      	b.n	84ba8 <_vfiprintf_r+0x6dc>
   847ea:	f01a 0f20 	tst.w	sl, #32
   847ee:	9004      	str	r0, [sp, #16]
   847f0:	46ac      	mov	ip, r5
   847f2:	f000 808d 	beq.w	84910 <_vfiprintf_r+0x444>
   847f6:	9d08      	ldr	r5, [sp, #32]
   847f8:	1deb      	adds	r3, r5, #7
   847fa:	f023 0307 	bic.w	r3, r3, #7
   847fe:	f103 0b08 	add.w	fp, r3, #8
   84802:	e9d3 4500 	ldrd	r4, r5, [r3]
   84806:	f8cd b020 	str.w	fp, [sp, #32]
   8480a:	2301      	movs	r3, #1
   8480c:	e76f      	b.n	846ee <_vfiprintf_r+0x222>
   8480e:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
   84812:	f898 3000 	ldrb.w	r3, [r8]
   84816:	e6c6      	b.n	845a6 <_vfiprintf_r+0xda>
   84818:	f04a 0a10 	orr.w	sl, sl, #16
   8481c:	f01a 0f20 	tst.w	sl, #32
   84820:	9004      	str	r0, [sp, #16]
   84822:	46ac      	mov	ip, r5
   84824:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   84828:	f000 80c8 	beq.w	849bc <_vfiprintf_r+0x4f0>
   8482c:	9c08      	ldr	r4, [sp, #32]
   8482e:	1de1      	adds	r1, r4, #7
   84830:	f021 0107 	bic.w	r1, r1, #7
   84834:	e9d1 2300 	ldrd	r2, r3, [r1]
   84838:	3108      	adds	r1, #8
   8483a:	9108      	str	r1, [sp, #32]
   8483c:	4614      	mov	r4, r2
   8483e:	461d      	mov	r5, r3
   84840:	2a00      	cmp	r2, #0
   84842:	f173 0b00 	sbcs.w	fp, r3, #0
   84846:	f2c0 83ce 	blt.w	84fe6 <_vfiprintf_r+0xb1a>
   8484a:	f1bc 0f00 	cmp.w	ip, #0
   8484e:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
   84852:	bfa8      	it	ge
   84854:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
   84858:	ea54 0205 	orrs.w	r2, r4, r5
   8485c:	9007      	str	r0, [sp, #28]
   8485e:	f8cd c014 	str.w	ip, [sp, #20]
   84862:	f04f 0301 	mov.w	r3, #1
   84866:	f43f af53 	beq.w	84710 <_vfiprintf_r+0x244>
   8486a:	2b01      	cmp	r3, #1
   8486c:	f000 8319 	beq.w	84ea2 <_vfiprintf_r+0x9d6>
   84870:	2b02      	cmp	r3, #2
   84872:	f10d 037f 	add.w	r3, sp, #127	; 0x7f
   84876:	f040 824c 	bne.w	84d12 <_vfiprintf_r+0x846>
   8487a:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   8487e:	4619      	mov	r1, r3
   84880:	f004 000f 	and.w	r0, r4, #15
   84884:	0922      	lsrs	r2, r4, #4
   84886:	f81b 0000 	ldrb.w	r0, [fp, r0]
   8488a:	ea42 7205 	orr.w	r2, r2, r5, lsl #28
   8488e:	092b      	lsrs	r3, r5, #4
   84890:	7008      	strb	r0, [r1, #0]
   84892:	ea52 0003 	orrs.w	r0, r2, r3
   84896:	460f      	mov	r7, r1
   84898:	4614      	mov	r4, r2
   8489a:	461d      	mov	r5, r3
   8489c:	f101 31ff 	add.w	r1, r1, #4294967295
   848a0:	d1ee      	bne.n	84880 <_vfiprintf_r+0x3b4>
   848a2:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   848a6:	ebc7 0309 	rsb	r3, r7, r9
   848aa:	9305      	str	r3, [sp, #20]
   848ac:	e742      	b.n	84734 <_vfiprintf_r+0x268>
   848ae:	f04a 0a10 	orr.w	sl, sl, #16
   848b2:	f01a 0320 	ands.w	r3, sl, #32
   848b6:	9004      	str	r0, [sp, #16]
   848b8:	46ac      	mov	ip, r5
   848ba:	f47f af0c 	bne.w	846d6 <_vfiprintf_r+0x20a>
   848be:	f01a 0210 	ands.w	r2, sl, #16
   848c2:	f040 8311 	bne.w	84ee8 <_vfiprintf_r+0xa1c>
   848c6:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
   848ca:	f000 830d 	beq.w	84ee8 <_vfiprintf_r+0xa1c>
   848ce:	f8dd b020 	ldr.w	fp, [sp, #32]
   848d2:	4613      	mov	r3, r2
   848d4:	f8bb 4000 	ldrh.w	r4, [fp]
   848d8:	f10b 0b04 	add.w	fp, fp, #4
   848dc:	2500      	movs	r5, #0
   848de:	f8cd b020 	str.w	fp, [sp, #32]
   848e2:	e704      	b.n	846ee <_vfiprintf_r+0x222>
   848e4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   848e8:	2000      	movs	r0, #0
   848ea:	f818 3b01 	ldrb.w	r3, [r8], #1
   848ee:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   848f2:	eb02 0040 	add.w	r0, r2, r0, lsl #1
   848f6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   848fa:	2a09      	cmp	r2, #9
   848fc:	d9f5      	bls.n	848ea <_vfiprintf_r+0x41e>
   848fe:	e654      	b.n	845aa <_vfiprintf_r+0xde>
   84900:	f04a 0a10 	orr.w	sl, sl, #16
   84904:	f01a 0f20 	tst.w	sl, #32
   84908:	9004      	str	r0, [sp, #16]
   8490a:	46ac      	mov	ip, r5
   8490c:	f47f af73 	bne.w	847f6 <_vfiprintf_r+0x32a>
   84910:	f01a 0f10 	tst.w	sl, #16
   84914:	f040 82ef 	bne.w	84ef6 <_vfiprintf_r+0xa2a>
   84918:	f01a 0f40 	tst.w	sl, #64	; 0x40
   8491c:	f000 82eb 	beq.w	84ef6 <_vfiprintf_r+0xa2a>
   84920:	f8dd b020 	ldr.w	fp, [sp, #32]
   84924:	2500      	movs	r5, #0
   84926:	f8bb 4000 	ldrh.w	r4, [fp]
   8492a:	f10b 0b04 	add.w	fp, fp, #4
   8492e:	2301      	movs	r3, #1
   84930:	f8cd b020 	str.w	fp, [sp, #32]
   84934:	e6db      	b.n	846ee <_vfiprintf_r+0x222>
   84936:	46ac      	mov	ip, r5
   84938:	4d51      	ldr	r5, [pc, #324]	; (84a80 <_vfiprintf_r+0x5b4>)
   8493a:	f01a 0f20 	tst.w	sl, #32
   8493e:	9004      	str	r0, [sp, #16]
   84940:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   84944:	950a      	str	r5, [sp, #40]	; 0x28
   84946:	f000 80f0 	beq.w	84b2a <_vfiprintf_r+0x65e>
   8494a:	9d08      	ldr	r5, [sp, #32]
   8494c:	1dea      	adds	r2, r5, #7
   8494e:	f022 0207 	bic.w	r2, r2, #7
   84952:	f102 0b08 	add.w	fp, r2, #8
   84956:	f8cd b020 	str.w	fp, [sp, #32]
   8495a:	e9d2 4500 	ldrd	r4, r5, [r2]
   8495e:	f01a 0f01 	tst.w	sl, #1
   84962:	f000 82aa 	beq.w	84eba <_vfiprintf_r+0x9ee>
   84966:	ea54 0b05 	orrs.w	fp, r4, r5
   8496a:	f000 82a6 	beq.w	84eba <_vfiprintf_r+0x9ee>
   8496e:	2230      	movs	r2, #48	; 0x30
   84970:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
   84974:	f04a 0a02 	orr.w	sl, sl, #2
   84978:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   8497c:	2302      	movs	r3, #2
   8497e:	e6b6      	b.n	846ee <_vfiprintf_r+0x222>
   84980:	9b08      	ldr	r3, [sp, #32]
   84982:	f8dd b020 	ldr.w	fp, [sp, #32]
   84986:	681b      	ldr	r3, [r3, #0]
   84988:	2401      	movs	r4, #1
   8498a:	f04f 0500 	mov.w	r5, #0
   8498e:	f10b 0b04 	add.w	fp, fp, #4
   84992:	9004      	str	r0, [sp, #16]
   84994:	9403      	str	r4, [sp, #12]
   84996:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
   8499a:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   8499e:	f8cd b020 	str.w	fp, [sp, #32]
   849a2:	9405      	str	r4, [sp, #20]
   849a4:	af16      	add	r7, sp, #88	; 0x58
   849a6:	f04f 0c00 	mov.w	ip, #0
   849aa:	e6d0      	b.n	8474e <_vfiprintf_r+0x282>
   849ac:	f01a 0f20 	tst.w	sl, #32
   849b0:	9004      	str	r0, [sp, #16]
   849b2:	46ac      	mov	ip, r5
   849b4:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   849b8:	f47f af38 	bne.w	8482c <_vfiprintf_r+0x360>
   849bc:	f01a 0f10 	tst.w	sl, #16
   849c0:	f040 82a7 	bne.w	84f12 <_vfiprintf_r+0xa46>
   849c4:	f01a 0f40 	tst.w	sl, #64	; 0x40
   849c8:	f000 82a3 	beq.w	84f12 <_vfiprintf_r+0xa46>
   849cc:	f8dd b020 	ldr.w	fp, [sp, #32]
   849d0:	f9bb 4000 	ldrsh.w	r4, [fp]
   849d4:	f10b 0b04 	add.w	fp, fp, #4
   849d8:	17e5      	asrs	r5, r4, #31
   849da:	4622      	mov	r2, r4
   849dc:	462b      	mov	r3, r5
   849de:	f8cd b020 	str.w	fp, [sp, #32]
   849e2:	e72d      	b.n	84840 <_vfiprintf_r+0x374>
   849e4:	f04a 0a40 	orr.w	sl, sl, #64	; 0x40
   849e8:	f898 3000 	ldrb.w	r3, [r8]
   849ec:	e5db      	b.n	845a6 <_vfiprintf_r+0xda>
   849ee:	f898 3000 	ldrb.w	r3, [r8]
   849f2:	4642      	mov	r2, r8
   849f4:	2b6c      	cmp	r3, #108	; 0x6c
   849f6:	bf03      	ittte	eq
   849f8:	f108 0801 	addeq.w	r8, r8, #1
   849fc:	f04a 0a20 	orreq.w	sl, sl, #32
   84a00:	7853      	ldrbeq	r3, [r2, #1]
   84a02:	f04a 0a10 	orrne.w	sl, sl, #16
   84a06:	e5ce      	b.n	845a6 <_vfiprintf_r+0xda>
   84a08:	f01a 0f20 	tst.w	sl, #32
   84a0c:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   84a10:	f000 82f7 	beq.w	85002 <_vfiprintf_r+0xb36>
   84a14:	9c08      	ldr	r4, [sp, #32]
   84a16:	6821      	ldr	r1, [r4, #0]
   84a18:	9c09      	ldr	r4, [sp, #36]	; 0x24
   84a1a:	17e5      	asrs	r5, r4, #31
   84a1c:	462b      	mov	r3, r5
   84a1e:	9d08      	ldr	r5, [sp, #32]
   84a20:	4622      	mov	r2, r4
   84a22:	3504      	adds	r5, #4
   84a24:	9508      	str	r5, [sp, #32]
   84a26:	e9c1 2300 	strd	r2, r3, [r1]
   84a2a:	e582      	b.n	84532 <_vfiprintf_r+0x66>
   84a2c:	9c08      	ldr	r4, [sp, #32]
   84a2e:	46ac      	mov	ip, r5
   84a30:	6827      	ldr	r7, [r4, #0]
   84a32:	f04f 0500 	mov.w	r5, #0
   84a36:	9004      	str	r0, [sp, #16]
   84a38:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
   84a3c:	3404      	adds	r4, #4
   84a3e:	2f00      	cmp	r7, #0
   84a40:	f000 8332 	beq.w	850a8 <_vfiprintf_r+0xbdc>
   84a44:	f1bc 0f00 	cmp.w	ip, #0
   84a48:	4638      	mov	r0, r7
   84a4a:	f2c0 8307 	blt.w	8505c <_vfiprintf_r+0xb90>
   84a4e:	4662      	mov	r2, ip
   84a50:	2100      	movs	r1, #0
   84a52:	f8cd c004 	str.w	ip, [sp, #4]
   84a56:	f002 f9cf 	bl	86df8 <memchr>
   84a5a:	f8dd c004 	ldr.w	ip, [sp, #4]
   84a5e:	2800      	cmp	r0, #0
   84a60:	f000 833a 	beq.w	850d8 <_vfiprintf_r+0xc0c>
   84a64:	1bc0      	subs	r0, r0, r7
   84a66:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
   84a6a:	4560      	cmp	r0, ip
   84a6c:	bfa8      	it	ge
   84a6e:	4660      	movge	r0, ip
   84a70:	9005      	str	r0, [sp, #20]
   84a72:	9408      	str	r4, [sp, #32]
   84a74:	9507      	str	r5, [sp, #28]
   84a76:	f04f 0c00 	mov.w	ip, #0
   84a7a:	e65b      	b.n	84734 <_vfiprintf_r+0x268>
   84a7c:	00088510 	.word	0x00088510
   84a80:	000884d0 	.word	0x000884d0
   84a84:	9b08      	ldr	r3, [sp, #32]
   84a86:	f8dd b020 	ldr.w	fp, [sp, #32]
   84a8a:	9004      	str	r0, [sp, #16]
   84a8c:	48b2      	ldr	r0, [pc, #712]	; (84d58 <_vfiprintf_r+0x88c>)
   84a8e:	681c      	ldr	r4, [r3, #0]
   84a90:	2230      	movs	r2, #48	; 0x30
   84a92:	2378      	movs	r3, #120	; 0x78
   84a94:	f10b 0b04 	add.w	fp, fp, #4
   84a98:	46ac      	mov	ip, r5
   84a9a:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
   84a9e:	f04a 0a02 	orr.w	sl, sl, #2
   84aa2:	f8cd b020 	str.w	fp, [sp, #32]
   84aa6:	2500      	movs	r5, #0
   84aa8:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   84aac:	900a      	str	r0, [sp, #40]	; 0x28
   84aae:	2302      	movs	r3, #2
   84ab0:	e61d      	b.n	846ee <_vfiprintf_r+0x222>
   84ab2:	f04a 0a20 	orr.w	sl, sl, #32
   84ab6:	f898 3000 	ldrb.w	r3, [r8]
   84aba:	e574      	b.n	845a6 <_vfiprintf_r+0xda>
   84abc:	f8dd b020 	ldr.w	fp, [sp, #32]
   84ac0:	f8db 0000 	ldr.w	r0, [fp]
   84ac4:	f10b 0304 	add.w	r3, fp, #4
   84ac8:	2800      	cmp	r0, #0
   84aca:	f6ff adf7 	blt.w	846bc <_vfiprintf_r+0x1f0>
   84ace:	9308      	str	r3, [sp, #32]
   84ad0:	f898 3000 	ldrb.w	r3, [r8]
   84ad4:	e567      	b.n	845a6 <_vfiprintf_r+0xda>
   84ad6:	f898 3000 	ldrb.w	r3, [r8]
   84ada:	212b      	movs	r1, #43	; 0x2b
   84adc:	e563      	b.n	845a6 <_vfiprintf_r+0xda>
   84ade:	f898 3000 	ldrb.w	r3, [r8]
   84ae2:	f108 0401 	add.w	r4, r8, #1
   84ae6:	2b2a      	cmp	r3, #42	; 0x2a
   84ae8:	f000 8305 	beq.w	850f6 <_vfiprintf_r+0xc2a>
   84aec:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   84af0:	2a09      	cmp	r2, #9
   84af2:	bf98      	it	ls
   84af4:	2500      	movls	r5, #0
   84af6:	f200 82fa 	bhi.w	850ee <_vfiprintf_r+0xc22>
   84afa:	f814 3b01 	ldrb.w	r3, [r4], #1
   84afe:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   84b02:	eb02 0545 	add.w	r5, r2, r5, lsl #1
   84b06:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   84b0a:	2a09      	cmp	r2, #9
   84b0c:	d9f5      	bls.n	84afa <_vfiprintf_r+0x62e>
   84b0e:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
   84b12:	46a0      	mov	r8, r4
   84b14:	e549      	b.n	845aa <_vfiprintf_r+0xde>
   84b16:	4c90      	ldr	r4, [pc, #576]	; (84d58 <_vfiprintf_r+0x88c>)
   84b18:	f01a 0f20 	tst.w	sl, #32
   84b1c:	9004      	str	r0, [sp, #16]
   84b1e:	46ac      	mov	ip, r5
   84b20:	940a      	str	r4, [sp, #40]	; 0x28
   84b22:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   84b26:	f47f af10 	bne.w	8494a <_vfiprintf_r+0x47e>
   84b2a:	f01a 0f10 	tst.w	sl, #16
   84b2e:	f040 81ea 	bne.w	84f06 <_vfiprintf_r+0xa3a>
   84b32:	f01a 0f40 	tst.w	sl, #64	; 0x40
   84b36:	f000 81e6 	beq.w	84f06 <_vfiprintf_r+0xa3a>
   84b3a:	f8dd b020 	ldr.w	fp, [sp, #32]
   84b3e:	2500      	movs	r5, #0
   84b40:	f8bb 4000 	ldrh.w	r4, [fp]
   84b44:	f10b 0b04 	add.w	fp, fp, #4
   84b48:	f8cd b020 	str.w	fp, [sp, #32]
   84b4c:	e707      	b.n	8495e <_vfiprintf_r+0x492>
   84b4e:	f898 3000 	ldrb.w	r3, [r8]
   84b52:	2900      	cmp	r1, #0
   84b54:	f47f ad27 	bne.w	845a6 <_vfiprintf_r+0xda>
   84b58:	2120      	movs	r1, #32
   84b5a:	e524      	b.n	845a6 <_vfiprintf_r+0xda>
   84b5c:	f04a 0a01 	orr.w	sl, sl, #1
   84b60:	f898 3000 	ldrb.w	r3, [r8]
   84b64:	e51f      	b.n	845a6 <_vfiprintf_r+0xda>
   84b66:	9004      	str	r0, [sp, #16]
   84b68:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   84b6c:	2b00      	cmp	r3, #0
   84b6e:	f000 80f9 	beq.w	84d64 <_vfiprintf_r+0x898>
   84b72:	2501      	movs	r5, #1
   84b74:	f04f 0b00 	mov.w	fp, #0
   84b78:	9503      	str	r5, [sp, #12]
   84b7a:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   84b7e:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
   84b82:	9505      	str	r5, [sp, #20]
   84b84:	af16      	add	r7, sp, #88	; 0x58
   84b86:	e70e      	b.n	849a6 <_vfiprintf_r+0x4da>
   84b88:	9806      	ldr	r0, [sp, #24]
   84b8a:	9902      	ldr	r1, [sp, #8]
   84b8c:	aa13      	add	r2, sp, #76	; 0x4c
   84b8e:	f7ff fc61 	bl	84454 <__sprint_r.part.0>
   84b92:	2800      	cmp	r0, #0
   84b94:	f040 80ed 	bne.w	84d72 <_vfiprintf_r+0x8a6>
   84b98:	9814      	ldr	r0, [sp, #80]	; 0x50
   84b9a:	9a15      	ldr	r2, [sp, #84]	; 0x54
   84b9c:	1c43      	adds	r3, r0, #1
   84b9e:	46cc      	mov	ip, r9
   84ba0:	e5fe      	b.n	847a0 <_vfiprintf_r+0x2d4>
   84ba2:	9b14      	ldr	r3, [sp, #80]	; 0x50
   84ba4:	9a15      	ldr	r2, [sp, #84]	; 0x54
   84ba6:	1c59      	adds	r1, r3, #1
   84ba8:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
   84bac:	b168      	cbz	r0, 84bca <_vfiprintf_r+0x6fe>
   84bae:	3201      	adds	r2, #1
   84bb0:	f10d 0047 	add.w	r0, sp, #71	; 0x47
   84bb4:	2301      	movs	r3, #1
   84bb6:	2907      	cmp	r1, #7
   84bb8:	9215      	str	r2, [sp, #84]	; 0x54
   84bba:	9114      	str	r1, [sp, #80]	; 0x50
   84bbc:	e886 0009 	stmia.w	r6, {r0, r3}
   84bc0:	f300 8160 	bgt.w	84e84 <_vfiprintf_r+0x9b8>
   84bc4:	460b      	mov	r3, r1
   84bc6:	3608      	adds	r6, #8
   84bc8:	3101      	adds	r1, #1
   84bca:	9c07      	ldr	r4, [sp, #28]
   84bcc:	b164      	cbz	r4, 84be8 <_vfiprintf_r+0x71c>
   84bce:	3202      	adds	r2, #2
   84bd0:	a812      	add	r0, sp, #72	; 0x48
   84bd2:	2302      	movs	r3, #2
   84bd4:	2907      	cmp	r1, #7
   84bd6:	9215      	str	r2, [sp, #84]	; 0x54
   84bd8:	9114      	str	r1, [sp, #80]	; 0x50
   84bda:	e886 0009 	stmia.w	r6, {r0, r3}
   84bde:	f300 8157 	bgt.w	84e90 <_vfiprintf_r+0x9c4>
   84be2:	460b      	mov	r3, r1
   84be4:	3608      	adds	r6, #8
   84be6:	3101      	adds	r1, #1
   84be8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   84bea:	2d80      	cmp	r5, #128	; 0x80
   84bec:	f000 8101 	beq.w	84df2 <_vfiprintf_r+0x926>
   84bf0:	9d05      	ldr	r5, [sp, #20]
   84bf2:	ebc5 040c 	rsb	r4, r5, ip
   84bf6:	2c00      	cmp	r4, #0
   84bf8:	dd2f      	ble.n	84c5a <_vfiprintf_r+0x78e>
   84bfa:	2c10      	cmp	r4, #16
   84bfc:	4d57      	ldr	r5, [pc, #348]	; (84d5c <_vfiprintf_r+0x890>)
   84bfe:	dd22      	ble.n	84c46 <_vfiprintf_r+0x77a>
   84c00:	4630      	mov	r0, r6
   84c02:	f04f 0b10 	mov.w	fp, #16
   84c06:	462e      	mov	r6, r5
   84c08:	4625      	mov	r5, r4
   84c0a:	9c06      	ldr	r4, [sp, #24]
   84c0c:	e006      	b.n	84c1c <_vfiprintf_r+0x750>
   84c0e:	f103 0c02 	add.w	ip, r3, #2
   84c12:	3008      	adds	r0, #8
   84c14:	460b      	mov	r3, r1
   84c16:	3d10      	subs	r5, #16
   84c18:	2d10      	cmp	r5, #16
   84c1a:	dd10      	ble.n	84c3e <_vfiprintf_r+0x772>
   84c1c:	1c59      	adds	r1, r3, #1
   84c1e:	3210      	adds	r2, #16
   84c20:	2907      	cmp	r1, #7
   84c22:	9215      	str	r2, [sp, #84]	; 0x54
   84c24:	e880 0840 	stmia.w	r0, {r6, fp}
   84c28:	9114      	str	r1, [sp, #80]	; 0x50
   84c2a:	ddf0      	ble.n	84c0e <_vfiprintf_r+0x742>
   84c2c:	2a00      	cmp	r2, #0
   84c2e:	d163      	bne.n	84cf8 <_vfiprintf_r+0x82c>
   84c30:	3d10      	subs	r5, #16
   84c32:	2d10      	cmp	r5, #16
   84c34:	f04f 0c01 	mov.w	ip, #1
   84c38:	4613      	mov	r3, r2
   84c3a:	4648      	mov	r0, r9
   84c3c:	dcee      	bgt.n	84c1c <_vfiprintf_r+0x750>
   84c3e:	462c      	mov	r4, r5
   84c40:	4661      	mov	r1, ip
   84c42:	4635      	mov	r5, r6
   84c44:	4606      	mov	r6, r0
   84c46:	4422      	add	r2, r4
   84c48:	2907      	cmp	r1, #7
   84c4a:	9215      	str	r2, [sp, #84]	; 0x54
   84c4c:	6035      	str	r5, [r6, #0]
   84c4e:	6074      	str	r4, [r6, #4]
   84c50:	9114      	str	r1, [sp, #80]	; 0x50
   84c52:	f300 80c1 	bgt.w	84dd8 <_vfiprintf_r+0x90c>
   84c56:	3608      	adds	r6, #8
   84c58:	3101      	adds	r1, #1
   84c5a:	9d05      	ldr	r5, [sp, #20]
   84c5c:	2907      	cmp	r1, #7
   84c5e:	442a      	add	r2, r5
   84c60:	9215      	str	r2, [sp, #84]	; 0x54
   84c62:	6037      	str	r7, [r6, #0]
   84c64:	6075      	str	r5, [r6, #4]
   84c66:	9114      	str	r1, [sp, #80]	; 0x50
   84c68:	f340 80c1 	ble.w	84dee <_vfiprintf_r+0x922>
   84c6c:	2a00      	cmp	r2, #0
   84c6e:	f040 8130 	bne.w	84ed2 <_vfiprintf_r+0xa06>
   84c72:	9214      	str	r2, [sp, #80]	; 0x50
   84c74:	464e      	mov	r6, r9
   84c76:	f01a 0f04 	tst.w	sl, #4
   84c7a:	f000 808b 	beq.w	84d94 <_vfiprintf_r+0x8c8>
   84c7e:	9d04      	ldr	r5, [sp, #16]
   84c80:	f8dd b00c 	ldr.w	fp, [sp, #12]
   84c84:	ebcb 0405 	rsb	r4, fp, r5
   84c88:	2c00      	cmp	r4, #0
   84c8a:	f340 8083 	ble.w	84d94 <_vfiprintf_r+0x8c8>
   84c8e:	2c10      	cmp	r4, #16
   84c90:	f340 821e 	ble.w	850d0 <_vfiprintf_r+0xc04>
   84c94:	9914      	ldr	r1, [sp, #80]	; 0x50
   84c96:	4d32      	ldr	r5, [pc, #200]	; (84d60 <_vfiprintf_r+0x894>)
   84c98:	2710      	movs	r7, #16
   84c9a:	f8dd a018 	ldr.w	sl, [sp, #24]
   84c9e:	f8dd b008 	ldr.w	fp, [sp, #8]
   84ca2:	e005      	b.n	84cb0 <_vfiprintf_r+0x7e4>
   84ca4:	1c88      	adds	r0, r1, #2
   84ca6:	3608      	adds	r6, #8
   84ca8:	4619      	mov	r1, r3
   84caa:	3c10      	subs	r4, #16
   84cac:	2c10      	cmp	r4, #16
   84cae:	dd10      	ble.n	84cd2 <_vfiprintf_r+0x806>
   84cb0:	1c4b      	adds	r3, r1, #1
   84cb2:	3210      	adds	r2, #16
   84cb4:	2b07      	cmp	r3, #7
   84cb6:	9215      	str	r2, [sp, #84]	; 0x54
   84cb8:	e886 00a0 	stmia.w	r6, {r5, r7}
   84cbc:	9314      	str	r3, [sp, #80]	; 0x50
   84cbe:	ddf1      	ble.n	84ca4 <_vfiprintf_r+0x7d8>
   84cc0:	2a00      	cmp	r2, #0
   84cc2:	d17d      	bne.n	84dc0 <_vfiprintf_r+0x8f4>
   84cc4:	3c10      	subs	r4, #16
   84cc6:	2c10      	cmp	r4, #16
   84cc8:	f04f 0001 	mov.w	r0, #1
   84ccc:	4611      	mov	r1, r2
   84cce:	464e      	mov	r6, r9
   84cd0:	dcee      	bgt.n	84cb0 <_vfiprintf_r+0x7e4>
   84cd2:	4422      	add	r2, r4
   84cd4:	2807      	cmp	r0, #7
   84cd6:	9215      	str	r2, [sp, #84]	; 0x54
   84cd8:	6035      	str	r5, [r6, #0]
   84cda:	6074      	str	r4, [r6, #4]
   84cdc:	9014      	str	r0, [sp, #80]	; 0x50
   84cde:	dd59      	ble.n	84d94 <_vfiprintf_r+0x8c8>
   84ce0:	2a00      	cmp	r2, #0
   84ce2:	d14f      	bne.n	84d84 <_vfiprintf_r+0x8b8>
   84ce4:	9c09      	ldr	r4, [sp, #36]	; 0x24
   84ce6:	f8dd b00c 	ldr.w	fp, [sp, #12]
   84cea:	9d04      	ldr	r5, [sp, #16]
   84cec:	45ab      	cmp	fp, r5
   84cee:	bfac      	ite	ge
   84cf0:	445c      	addge	r4, fp
   84cf2:	1964      	addlt	r4, r4, r5
   84cf4:	9409      	str	r4, [sp, #36]	; 0x24
   84cf6:	e05e      	b.n	84db6 <_vfiprintf_r+0x8ea>
   84cf8:	4620      	mov	r0, r4
   84cfa:	9902      	ldr	r1, [sp, #8]
   84cfc:	aa13      	add	r2, sp, #76	; 0x4c
   84cfe:	f7ff fba9 	bl	84454 <__sprint_r.part.0>
   84d02:	2800      	cmp	r0, #0
   84d04:	d135      	bne.n	84d72 <_vfiprintf_r+0x8a6>
   84d06:	9b14      	ldr	r3, [sp, #80]	; 0x50
   84d08:	9a15      	ldr	r2, [sp, #84]	; 0x54
   84d0a:	f103 0c01 	add.w	ip, r3, #1
   84d0e:	4648      	mov	r0, r9
   84d10:	e781      	b.n	84c16 <_vfiprintf_r+0x74a>
   84d12:	08e0      	lsrs	r0, r4, #3
   84d14:	ea40 7045 	orr.w	r0, r0, r5, lsl #29
   84d18:	f004 0207 	and.w	r2, r4, #7
   84d1c:	08e9      	lsrs	r1, r5, #3
   84d1e:	3230      	adds	r2, #48	; 0x30
   84d20:	ea50 0b01 	orrs.w	fp, r0, r1
   84d24:	461f      	mov	r7, r3
   84d26:	701a      	strb	r2, [r3, #0]
   84d28:	4604      	mov	r4, r0
   84d2a:	460d      	mov	r5, r1
   84d2c:	f103 33ff 	add.w	r3, r3, #4294967295
   84d30:	d1ef      	bne.n	84d12 <_vfiprintf_r+0x846>
   84d32:	f01a 0f01 	tst.w	sl, #1
   84d36:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   84d3a:	4639      	mov	r1, r7
   84d3c:	f000 80b9 	beq.w	84eb2 <_vfiprintf_r+0x9e6>
   84d40:	2a30      	cmp	r2, #48	; 0x30
   84d42:	f43f acf4 	beq.w	8472e <_vfiprintf_r+0x262>
   84d46:	461f      	mov	r7, r3
   84d48:	ebc7 0509 	rsb	r5, r7, r9
   84d4c:	2330      	movs	r3, #48	; 0x30
   84d4e:	9505      	str	r5, [sp, #20]
   84d50:	f801 3c01 	strb.w	r3, [r1, #-1]
   84d54:	e4ee      	b.n	84734 <_vfiprintf_r+0x268>
   84d56:	bf00      	nop
   84d58:	000884e4 	.word	0x000884e4
   84d5c:	00088500 	.word	0x00088500
   84d60:	00088510 	.word	0x00088510
   84d64:	9b15      	ldr	r3, [sp, #84]	; 0x54
   84d66:	b123      	cbz	r3, 84d72 <_vfiprintf_r+0x8a6>
   84d68:	9806      	ldr	r0, [sp, #24]
   84d6a:	9902      	ldr	r1, [sp, #8]
   84d6c:	aa13      	add	r2, sp, #76	; 0x4c
   84d6e:	f7ff fb71 	bl	84454 <__sprint_r.part.0>
   84d72:	9c02      	ldr	r4, [sp, #8]
   84d74:	89a3      	ldrh	r3, [r4, #12]
   84d76:	065b      	lsls	r3, r3, #25
   84d78:	f53f ac98 	bmi.w	846ac <_vfiprintf_r+0x1e0>
   84d7c:	9809      	ldr	r0, [sp, #36]	; 0x24
   84d7e:	b031      	add	sp, #196	; 0xc4
   84d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84d84:	9806      	ldr	r0, [sp, #24]
   84d86:	9902      	ldr	r1, [sp, #8]
   84d88:	aa13      	add	r2, sp, #76	; 0x4c
   84d8a:	f7ff fb63 	bl	84454 <__sprint_r.part.0>
   84d8e:	2800      	cmp	r0, #0
   84d90:	d1ef      	bne.n	84d72 <_vfiprintf_r+0x8a6>
   84d92:	9a15      	ldr	r2, [sp, #84]	; 0x54
   84d94:	9c09      	ldr	r4, [sp, #36]	; 0x24
   84d96:	f8dd b00c 	ldr.w	fp, [sp, #12]
   84d9a:	9d04      	ldr	r5, [sp, #16]
   84d9c:	45ab      	cmp	fp, r5
   84d9e:	bfac      	ite	ge
   84da0:	445c      	addge	r4, fp
   84da2:	1964      	addlt	r4, r4, r5
   84da4:	9409      	str	r4, [sp, #36]	; 0x24
   84da6:	b132      	cbz	r2, 84db6 <_vfiprintf_r+0x8ea>
   84da8:	9806      	ldr	r0, [sp, #24]
   84daa:	9902      	ldr	r1, [sp, #8]
   84dac:	aa13      	add	r2, sp, #76	; 0x4c
   84dae:	f7ff fb51 	bl	84454 <__sprint_r.part.0>
   84db2:	2800      	cmp	r0, #0
   84db4:	d1dd      	bne.n	84d72 <_vfiprintf_r+0x8a6>
   84db6:	2000      	movs	r0, #0
   84db8:	9014      	str	r0, [sp, #80]	; 0x50
   84dba:	464e      	mov	r6, r9
   84dbc:	f7ff bbb9 	b.w	84532 <_vfiprintf_r+0x66>
   84dc0:	4650      	mov	r0, sl
   84dc2:	4659      	mov	r1, fp
   84dc4:	aa13      	add	r2, sp, #76	; 0x4c
   84dc6:	f7ff fb45 	bl	84454 <__sprint_r.part.0>
   84dca:	2800      	cmp	r0, #0
   84dcc:	d1d1      	bne.n	84d72 <_vfiprintf_r+0x8a6>
   84dce:	9914      	ldr	r1, [sp, #80]	; 0x50
   84dd0:	9a15      	ldr	r2, [sp, #84]	; 0x54
   84dd2:	1c48      	adds	r0, r1, #1
   84dd4:	464e      	mov	r6, r9
   84dd6:	e768      	b.n	84caa <_vfiprintf_r+0x7de>
   84dd8:	2a00      	cmp	r2, #0
   84dda:	f040 80f7 	bne.w	84fcc <_vfiprintf_r+0xb00>
   84dde:	9c05      	ldr	r4, [sp, #20]
   84de0:	2301      	movs	r3, #1
   84de2:	9720      	str	r7, [sp, #128]	; 0x80
   84de4:	9421      	str	r4, [sp, #132]	; 0x84
   84de6:	9415      	str	r4, [sp, #84]	; 0x54
   84de8:	4622      	mov	r2, r4
   84dea:	9314      	str	r3, [sp, #80]	; 0x50
   84dec:	464e      	mov	r6, r9
   84dee:	3608      	adds	r6, #8
   84df0:	e741      	b.n	84c76 <_vfiprintf_r+0x7aa>
   84df2:	9d04      	ldr	r5, [sp, #16]
   84df4:	f8dd b00c 	ldr.w	fp, [sp, #12]
   84df8:	ebcb 0405 	rsb	r4, fp, r5
   84dfc:	2c00      	cmp	r4, #0
   84dfe:	f77f aef7 	ble.w	84bf0 <_vfiprintf_r+0x724>
   84e02:	2c10      	cmp	r4, #16
   84e04:	4da6      	ldr	r5, [pc, #664]	; (850a0 <_vfiprintf_r+0xbd4>)
   84e06:	f340 8170 	ble.w	850ea <_vfiprintf_r+0xc1e>
   84e0a:	4629      	mov	r1, r5
   84e0c:	f04f 0b10 	mov.w	fp, #16
   84e10:	4625      	mov	r5, r4
   84e12:	4664      	mov	r4, ip
   84e14:	46b4      	mov	ip, r6
   84e16:	460e      	mov	r6, r1
   84e18:	e006      	b.n	84e28 <_vfiprintf_r+0x95c>
   84e1a:	1c98      	adds	r0, r3, #2
   84e1c:	f10c 0c08 	add.w	ip, ip, #8
   84e20:	460b      	mov	r3, r1
   84e22:	3d10      	subs	r5, #16
   84e24:	2d10      	cmp	r5, #16
   84e26:	dd0f      	ble.n	84e48 <_vfiprintf_r+0x97c>
   84e28:	1c59      	adds	r1, r3, #1
   84e2a:	3210      	adds	r2, #16
   84e2c:	2907      	cmp	r1, #7
   84e2e:	9215      	str	r2, [sp, #84]	; 0x54
   84e30:	e88c 0840 	stmia.w	ip, {r6, fp}
   84e34:	9114      	str	r1, [sp, #80]	; 0x50
   84e36:	ddf0      	ble.n	84e1a <_vfiprintf_r+0x94e>
   84e38:	b9ba      	cbnz	r2, 84e6a <_vfiprintf_r+0x99e>
   84e3a:	3d10      	subs	r5, #16
   84e3c:	2d10      	cmp	r5, #16
   84e3e:	f04f 0001 	mov.w	r0, #1
   84e42:	4613      	mov	r3, r2
   84e44:	46cc      	mov	ip, r9
   84e46:	dcef      	bgt.n	84e28 <_vfiprintf_r+0x95c>
   84e48:	4633      	mov	r3, r6
   84e4a:	4666      	mov	r6, ip
   84e4c:	46a4      	mov	ip, r4
   84e4e:	462c      	mov	r4, r5
   84e50:	461d      	mov	r5, r3
   84e52:	4422      	add	r2, r4
   84e54:	2807      	cmp	r0, #7
   84e56:	9215      	str	r2, [sp, #84]	; 0x54
   84e58:	6035      	str	r5, [r6, #0]
   84e5a:	6074      	str	r4, [r6, #4]
   84e5c:	9014      	str	r0, [sp, #80]	; 0x50
   84e5e:	f300 80af 	bgt.w	84fc0 <_vfiprintf_r+0xaf4>
   84e62:	3608      	adds	r6, #8
   84e64:	1c41      	adds	r1, r0, #1
   84e66:	4603      	mov	r3, r0
   84e68:	e6c2      	b.n	84bf0 <_vfiprintf_r+0x724>
   84e6a:	9806      	ldr	r0, [sp, #24]
   84e6c:	9902      	ldr	r1, [sp, #8]
   84e6e:	aa13      	add	r2, sp, #76	; 0x4c
   84e70:	f7ff faf0 	bl	84454 <__sprint_r.part.0>
   84e74:	2800      	cmp	r0, #0
   84e76:	f47f af7c 	bne.w	84d72 <_vfiprintf_r+0x8a6>
   84e7a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   84e7c:	9a15      	ldr	r2, [sp, #84]	; 0x54
   84e7e:	1c58      	adds	r0, r3, #1
   84e80:	46cc      	mov	ip, r9
   84e82:	e7ce      	b.n	84e22 <_vfiprintf_r+0x956>
   84e84:	2a00      	cmp	r2, #0
   84e86:	d179      	bne.n	84f7c <_vfiprintf_r+0xab0>
   84e88:	4619      	mov	r1, r3
   84e8a:	464e      	mov	r6, r9
   84e8c:	4613      	mov	r3, r2
   84e8e:	e69c      	b.n	84bca <_vfiprintf_r+0x6fe>
   84e90:	2a00      	cmp	r2, #0
   84e92:	f040 8084 	bne.w	84f9e <_vfiprintf_r+0xad2>
   84e96:	2101      	movs	r1, #1
   84e98:	4613      	mov	r3, r2
   84e9a:	464e      	mov	r6, r9
   84e9c:	e6a4      	b.n	84be8 <_vfiprintf_r+0x71c>
   84e9e:	464f      	mov	r7, r9
   84ea0:	e448      	b.n	84734 <_vfiprintf_r+0x268>
   84ea2:	2d00      	cmp	r5, #0
   84ea4:	bf08      	it	eq
   84ea6:	2c0a      	cmpeq	r4, #10
   84ea8:	d246      	bcs.n	84f38 <_vfiprintf_r+0xa6c>
   84eaa:	3430      	adds	r4, #48	; 0x30
   84eac:	af30      	add	r7, sp, #192	; 0xc0
   84eae:	f807 4d41 	strb.w	r4, [r7, #-65]!
   84eb2:	ebc7 0309 	rsb	r3, r7, r9
   84eb6:	9305      	str	r3, [sp, #20]
   84eb8:	e43c      	b.n	84734 <_vfiprintf_r+0x268>
   84eba:	2302      	movs	r3, #2
   84ebc:	e417      	b.n	846ee <_vfiprintf_r+0x222>
   84ebe:	2a00      	cmp	r2, #0
   84ec0:	f040 80af 	bne.w	85022 <_vfiprintf_r+0xb56>
   84ec4:	4613      	mov	r3, r2
   84ec6:	2101      	movs	r1, #1
   84ec8:	464e      	mov	r6, r9
   84eca:	e66d      	b.n	84ba8 <_vfiprintf_r+0x6dc>
   84ecc:	4644      	mov	r4, r8
   84ece:	f7ff bb58 	b.w	84582 <_vfiprintf_r+0xb6>
   84ed2:	9806      	ldr	r0, [sp, #24]
   84ed4:	9902      	ldr	r1, [sp, #8]
   84ed6:	aa13      	add	r2, sp, #76	; 0x4c
   84ed8:	f7ff fabc 	bl	84454 <__sprint_r.part.0>
   84edc:	2800      	cmp	r0, #0
   84ede:	f47f af48 	bne.w	84d72 <_vfiprintf_r+0x8a6>
   84ee2:	9a15      	ldr	r2, [sp, #84]	; 0x54
   84ee4:	464e      	mov	r6, r9
   84ee6:	e6c6      	b.n	84c76 <_vfiprintf_r+0x7aa>
   84ee8:	9d08      	ldr	r5, [sp, #32]
   84eea:	682c      	ldr	r4, [r5, #0]
   84eec:	3504      	adds	r5, #4
   84eee:	9508      	str	r5, [sp, #32]
   84ef0:	2500      	movs	r5, #0
   84ef2:	f7ff bbfc 	b.w	846ee <_vfiprintf_r+0x222>
   84ef6:	9d08      	ldr	r5, [sp, #32]
   84ef8:	2301      	movs	r3, #1
   84efa:	682c      	ldr	r4, [r5, #0]
   84efc:	3504      	adds	r5, #4
   84efe:	9508      	str	r5, [sp, #32]
   84f00:	2500      	movs	r5, #0
   84f02:	f7ff bbf4 	b.w	846ee <_vfiprintf_r+0x222>
   84f06:	9d08      	ldr	r5, [sp, #32]
   84f08:	682c      	ldr	r4, [r5, #0]
   84f0a:	3504      	adds	r5, #4
   84f0c:	9508      	str	r5, [sp, #32]
   84f0e:	2500      	movs	r5, #0
   84f10:	e525      	b.n	8495e <_vfiprintf_r+0x492>
   84f12:	9d08      	ldr	r5, [sp, #32]
   84f14:	682c      	ldr	r4, [r5, #0]
   84f16:	3504      	adds	r5, #4
   84f18:	9508      	str	r5, [sp, #32]
   84f1a:	17e5      	asrs	r5, r4, #31
   84f1c:	4622      	mov	r2, r4
   84f1e:	462b      	mov	r3, r5
   84f20:	e48e      	b.n	84840 <_vfiprintf_r+0x374>
   84f22:	9806      	ldr	r0, [sp, #24]
   84f24:	9902      	ldr	r1, [sp, #8]
   84f26:	aa13      	add	r2, sp, #76	; 0x4c
   84f28:	f7ff fa94 	bl	84454 <__sprint_r.part.0>
   84f2c:	2800      	cmp	r0, #0
   84f2e:	f47f af20 	bne.w	84d72 <_vfiprintf_r+0x8a6>
   84f32:	464e      	mov	r6, r9
   84f34:	f7ff bb9a 	b.w	8466c <_vfiprintf_r+0x1a0>
   84f38:	f10d 0b7f 	add.w	fp, sp, #127	; 0x7f
   84f3c:	9603      	str	r6, [sp, #12]
   84f3e:	465e      	mov	r6, fp
   84f40:	46e3      	mov	fp, ip
   84f42:	4620      	mov	r0, r4
   84f44:	4629      	mov	r1, r5
   84f46:	220a      	movs	r2, #10
   84f48:	2300      	movs	r3, #0
   84f4a:	f7fe fd71 	bl	83a30 <__aeabi_uldivmod>
   84f4e:	3230      	adds	r2, #48	; 0x30
   84f50:	7032      	strb	r2, [r6, #0]
   84f52:	4620      	mov	r0, r4
   84f54:	4629      	mov	r1, r5
   84f56:	220a      	movs	r2, #10
   84f58:	2300      	movs	r3, #0
   84f5a:	f7fe fd69 	bl	83a30 <__aeabi_uldivmod>
   84f5e:	4604      	mov	r4, r0
   84f60:	460d      	mov	r5, r1
   84f62:	ea54 0005 	orrs.w	r0, r4, r5
   84f66:	4637      	mov	r7, r6
   84f68:	f106 36ff 	add.w	r6, r6, #4294967295
   84f6c:	d1e9      	bne.n	84f42 <_vfiprintf_r+0xa76>
   84f6e:	ebc7 0309 	rsb	r3, r7, r9
   84f72:	46dc      	mov	ip, fp
   84f74:	9e03      	ldr	r6, [sp, #12]
   84f76:	9305      	str	r3, [sp, #20]
   84f78:	f7ff bbdc 	b.w	84734 <_vfiprintf_r+0x268>
   84f7c:	9806      	ldr	r0, [sp, #24]
   84f7e:	9902      	ldr	r1, [sp, #8]
   84f80:	aa13      	add	r2, sp, #76	; 0x4c
   84f82:	f8cd c004 	str.w	ip, [sp, #4]
   84f86:	f7ff fa65 	bl	84454 <__sprint_r.part.0>
   84f8a:	f8dd c004 	ldr.w	ip, [sp, #4]
   84f8e:	2800      	cmp	r0, #0
   84f90:	f47f aeef 	bne.w	84d72 <_vfiprintf_r+0x8a6>
   84f94:	9b14      	ldr	r3, [sp, #80]	; 0x50
   84f96:	9a15      	ldr	r2, [sp, #84]	; 0x54
   84f98:	1c59      	adds	r1, r3, #1
   84f9a:	464e      	mov	r6, r9
   84f9c:	e615      	b.n	84bca <_vfiprintf_r+0x6fe>
   84f9e:	9806      	ldr	r0, [sp, #24]
   84fa0:	9902      	ldr	r1, [sp, #8]
   84fa2:	aa13      	add	r2, sp, #76	; 0x4c
   84fa4:	f8cd c004 	str.w	ip, [sp, #4]
   84fa8:	f7ff fa54 	bl	84454 <__sprint_r.part.0>
   84fac:	f8dd c004 	ldr.w	ip, [sp, #4]
   84fb0:	2800      	cmp	r0, #0
   84fb2:	f47f aede 	bne.w	84d72 <_vfiprintf_r+0x8a6>
   84fb6:	9b14      	ldr	r3, [sp, #80]	; 0x50
   84fb8:	9a15      	ldr	r2, [sp, #84]	; 0x54
   84fba:	1c59      	adds	r1, r3, #1
   84fbc:	464e      	mov	r6, r9
   84fbe:	e613      	b.n	84be8 <_vfiprintf_r+0x71c>
   84fc0:	2a00      	cmp	r2, #0
   84fc2:	d156      	bne.n	85072 <_vfiprintf_r+0xba6>
   84fc4:	2101      	movs	r1, #1
   84fc6:	4613      	mov	r3, r2
   84fc8:	464e      	mov	r6, r9
   84fca:	e611      	b.n	84bf0 <_vfiprintf_r+0x724>
   84fcc:	9806      	ldr	r0, [sp, #24]
   84fce:	9902      	ldr	r1, [sp, #8]
   84fd0:	aa13      	add	r2, sp, #76	; 0x4c
   84fd2:	f7ff fa3f 	bl	84454 <__sprint_r.part.0>
   84fd6:	2800      	cmp	r0, #0
   84fd8:	f47f aecb 	bne.w	84d72 <_vfiprintf_r+0x8a6>
   84fdc:	9914      	ldr	r1, [sp, #80]	; 0x50
   84fde:	9a15      	ldr	r2, [sp, #84]	; 0x54
   84fe0:	3101      	adds	r1, #1
   84fe2:	464e      	mov	r6, r9
   84fe4:	e639      	b.n	84c5a <_vfiprintf_r+0x78e>
   84fe6:	f04f 0b2d 	mov.w	fp, #45	; 0x2d
   84fea:	4264      	negs	r4, r4
   84fec:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   84ff0:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
   84ff4:	f8cd b01c 	str.w	fp, [sp, #28]
   84ff8:	f8cd c014 	str.w	ip, [sp, #20]
   84ffc:	2301      	movs	r3, #1
   84ffe:	f7ff bb7e 	b.w	846fe <_vfiprintf_r+0x232>
   85002:	f01a 0f10 	tst.w	sl, #16
   85006:	d11d      	bne.n	85044 <_vfiprintf_r+0xb78>
   85008:	f01a 0f40 	tst.w	sl, #64	; 0x40
   8500c:	d058      	beq.n	850c0 <_vfiprintf_r+0xbf4>
   8500e:	9d08      	ldr	r5, [sp, #32]
   85010:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
   85014:	682b      	ldr	r3, [r5, #0]
   85016:	3504      	adds	r5, #4
   85018:	9508      	str	r5, [sp, #32]
   8501a:	f8a3 b000 	strh.w	fp, [r3]
   8501e:	f7ff ba88 	b.w	84532 <_vfiprintf_r+0x66>
   85022:	9806      	ldr	r0, [sp, #24]
   85024:	9902      	ldr	r1, [sp, #8]
   85026:	aa13      	add	r2, sp, #76	; 0x4c
   85028:	f8cd c004 	str.w	ip, [sp, #4]
   8502c:	f7ff fa12 	bl	84454 <__sprint_r.part.0>
   85030:	f8dd c004 	ldr.w	ip, [sp, #4]
   85034:	2800      	cmp	r0, #0
   85036:	f47f ae9c 	bne.w	84d72 <_vfiprintf_r+0x8a6>
   8503a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   8503c:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8503e:	1c59      	adds	r1, r3, #1
   85040:	464e      	mov	r6, r9
   85042:	e5b1      	b.n	84ba8 <_vfiprintf_r+0x6dc>
   85044:	f8dd b020 	ldr.w	fp, [sp, #32]
   85048:	9c09      	ldr	r4, [sp, #36]	; 0x24
   8504a:	f8db 3000 	ldr.w	r3, [fp]
   8504e:	f10b 0b04 	add.w	fp, fp, #4
   85052:	f8cd b020 	str.w	fp, [sp, #32]
   85056:	601c      	str	r4, [r3, #0]
   85058:	f7ff ba6b 	b.w	84532 <_vfiprintf_r+0x66>
   8505c:	9408      	str	r4, [sp, #32]
   8505e:	f7ff f997 	bl	84390 <strlen>
   85062:	f89d 4047 	ldrb.w	r4, [sp, #71]	; 0x47
   85066:	9005      	str	r0, [sp, #20]
   85068:	9407      	str	r4, [sp, #28]
   8506a:	f04f 0c00 	mov.w	ip, #0
   8506e:	f7ff bb61 	b.w	84734 <_vfiprintf_r+0x268>
   85072:	9806      	ldr	r0, [sp, #24]
   85074:	9902      	ldr	r1, [sp, #8]
   85076:	aa13      	add	r2, sp, #76	; 0x4c
   85078:	f8cd c004 	str.w	ip, [sp, #4]
   8507c:	f7ff f9ea 	bl	84454 <__sprint_r.part.0>
   85080:	f8dd c004 	ldr.w	ip, [sp, #4]
   85084:	2800      	cmp	r0, #0
   85086:	f47f ae74 	bne.w	84d72 <_vfiprintf_r+0x8a6>
   8508a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   8508c:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8508e:	1c59      	adds	r1, r3, #1
   85090:	464e      	mov	r6, r9
   85092:	e5ad      	b.n	84bf0 <_vfiprintf_r+0x724>
   85094:	9b14      	ldr	r3, [sp, #80]	; 0x50
   85096:	9a15      	ldr	r2, [sp, #84]	; 0x54
   85098:	3301      	adds	r3, #1
   8509a:	4d02      	ldr	r5, [pc, #8]	; (850a4 <_vfiprintf_r+0xbd8>)
   8509c:	f7ff bb9a 	b.w	847d4 <_vfiprintf_r+0x308>
   850a0:	00088500 	.word	0x00088500
   850a4:	00088510 	.word	0x00088510
   850a8:	f1bc 0f06 	cmp.w	ip, #6
   850ac:	bf34      	ite	cc
   850ae:	4663      	movcc	r3, ip
   850b0:	2306      	movcs	r3, #6
   850b2:	9408      	str	r4, [sp, #32]
   850b4:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
   850b8:	9305      	str	r3, [sp, #20]
   850ba:	9403      	str	r4, [sp, #12]
   850bc:	4f16      	ldr	r7, [pc, #88]	; (85118 <_vfiprintf_r+0xc4c>)
   850be:	e472      	b.n	849a6 <_vfiprintf_r+0x4da>
   850c0:	9c08      	ldr	r4, [sp, #32]
   850c2:	9d09      	ldr	r5, [sp, #36]	; 0x24
   850c4:	6823      	ldr	r3, [r4, #0]
   850c6:	3404      	adds	r4, #4
   850c8:	9408      	str	r4, [sp, #32]
   850ca:	601d      	str	r5, [r3, #0]
   850cc:	f7ff ba31 	b.w	84532 <_vfiprintf_r+0x66>
   850d0:	9814      	ldr	r0, [sp, #80]	; 0x50
   850d2:	4d12      	ldr	r5, [pc, #72]	; (8511c <_vfiprintf_r+0xc50>)
   850d4:	3001      	adds	r0, #1
   850d6:	e5fc      	b.n	84cd2 <_vfiprintf_r+0x806>
   850d8:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
   850dc:	f8cd c014 	str.w	ip, [sp, #20]
   850e0:	9507      	str	r5, [sp, #28]
   850e2:	9408      	str	r4, [sp, #32]
   850e4:	4684      	mov	ip, r0
   850e6:	f7ff bb25 	b.w	84734 <_vfiprintf_r+0x268>
   850ea:	4608      	mov	r0, r1
   850ec:	e6b1      	b.n	84e52 <_vfiprintf_r+0x986>
   850ee:	46a0      	mov	r8, r4
   850f0:	2500      	movs	r5, #0
   850f2:	f7ff ba5a 	b.w	845aa <_vfiprintf_r+0xde>
   850f6:	f8dd b020 	ldr.w	fp, [sp, #32]
   850fa:	f898 3001 	ldrb.w	r3, [r8, #1]
   850fe:	f8db 5000 	ldr.w	r5, [fp]
   85102:	f10b 0204 	add.w	r2, fp, #4
   85106:	2d00      	cmp	r5, #0
   85108:	9208      	str	r2, [sp, #32]
   8510a:	46a0      	mov	r8, r4
   8510c:	f6bf aa4b 	bge.w	845a6 <_vfiprintf_r+0xda>
   85110:	f04f 35ff 	mov.w	r5, #4294967295
   85114:	f7ff ba47 	b.w	845a6 <_vfiprintf_r+0xda>
   85118:	000884f8 	.word	0x000884f8
   8511c:	00088510 	.word	0x00088510

00085120 <__sbprintf>:
   85120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   85124:	6e4f      	ldr	r7, [r1, #100]	; 0x64
   85126:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   8512a:	4688      	mov	r8, r1
   8512c:	9719      	str	r7, [sp, #100]	; 0x64
   8512e:	f8d8 701c 	ldr.w	r7, [r8, #28]
   85132:	f8b1 a00c 	ldrh.w	sl, [r1, #12]
   85136:	f8b1 900e 	ldrh.w	r9, [r1, #14]
   8513a:	9707      	str	r7, [sp, #28]
   8513c:	f8d8 7024 	ldr.w	r7, [r8, #36]	; 0x24
   85140:	ac1a      	add	r4, sp, #104	; 0x68
   85142:	f44f 6580 	mov.w	r5, #1024	; 0x400
   85146:	f02a 0a02 	bic.w	sl, sl, #2
   8514a:	2600      	movs	r6, #0
   8514c:	4669      	mov	r1, sp
   8514e:	9400      	str	r4, [sp, #0]
   85150:	9404      	str	r4, [sp, #16]
   85152:	9502      	str	r5, [sp, #8]
   85154:	9505      	str	r5, [sp, #20]
   85156:	f8ad a00c 	strh.w	sl, [sp, #12]
   8515a:	f8ad 900e 	strh.w	r9, [sp, #14]
   8515e:	9709      	str	r7, [sp, #36]	; 0x24
   85160:	9606      	str	r6, [sp, #24]
   85162:	4605      	mov	r5, r0
   85164:	f7ff f9b2 	bl	844cc <_vfiprintf_r>
   85168:	1e04      	subs	r4, r0, #0
   8516a:	db07      	blt.n	8517c <__sbprintf+0x5c>
   8516c:	4628      	mov	r0, r5
   8516e:	4669      	mov	r1, sp
   85170:	f000 fdf6 	bl	85d60 <_fflush_r>
   85174:	42b0      	cmp	r0, r6
   85176:	bf18      	it	ne
   85178:	f04f 34ff 	movne.w	r4, #4294967295
   8517c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   85180:	065b      	lsls	r3, r3, #25
   85182:	d505      	bpl.n	85190 <__sbprintf+0x70>
   85184:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   85188:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8518c:	f8a8 300c 	strh.w	r3, [r8, #12]
   85190:	4620      	mov	r0, r4
   85192:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   85196:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8519a:	bf00      	nop

0008519c <__svfiscanf_r>:
   8519c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   851a0:	460c      	mov	r4, r1
   851a2:	8989      	ldrh	r1, [r1, #12]
   851a4:	b0dd      	sub	sp, #372	; 0x174
   851a6:	048f      	lsls	r7, r1, #18
   851a8:	4683      	mov	fp, r0
   851aa:	9307      	str	r3, [sp, #28]
   851ac:	d406      	bmi.n	851bc <__svfiscanf_r+0x20>
   851ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
   851b0:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
   851b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   851b8:	81a1      	strh	r1, [r4, #12]
   851ba:	6663      	str	r3, [r4, #100]	; 0x64
   851bc:	4690      	mov	r8, r2
   851be:	f818 3b01 	ldrb.w	r3, [r8], #1
   851c2:	2600      	movs	r6, #0
   851c4:	9606      	str	r6, [sp, #24]
   851c6:	9609      	str	r6, [sp, #36]	; 0x24
   851c8:	4635      	mov	r5, r6
   851ca:	960a      	str	r6, [sp, #40]	; 0x28
   851cc:	4f8f      	ldr	r7, [pc, #572]	; (8540c <__svfiscanf_r+0x270>)
   851ce:	930f      	str	r3, [sp, #60]	; 0x3c
   851d0:	b32b      	cbz	r3, 8521e <__svfiscanf_r+0x82>
   851d2:	6839      	ldr	r1, [r7, #0]
   851d4:	18c8      	adds	r0, r1, r3
   851d6:	7840      	ldrb	r0, [r0, #1]
   851d8:	f000 0008 	and.w	r0, r0, #8
   851dc:	f000 09ff 	and.w	r9, r0, #255	; 0xff
   851e0:	b308      	cbz	r0, 85226 <__svfiscanf_r+0x8a>
   851e2:	6862      	ldr	r2, [r4, #4]
   851e4:	e00c      	b.n	85200 <__svfiscanf_r+0x64>
   851e6:	6823      	ldr	r3, [r4, #0]
   851e8:	683a      	ldr	r2, [r7, #0]
   851ea:	7819      	ldrb	r1, [r3, #0]
   851ec:	3301      	adds	r3, #1
   851ee:	440a      	add	r2, r1
   851f0:	7852      	ldrb	r2, [r2, #1]
   851f2:	0716      	lsls	r6, r2, #28
   851f4:	d50c      	bpl.n	85210 <__svfiscanf_r+0x74>
   851f6:	6862      	ldr	r2, [r4, #4]
   851f8:	3501      	adds	r5, #1
   851fa:	3a01      	subs	r2, #1
   851fc:	6023      	str	r3, [r4, #0]
   851fe:	6062      	str	r2, [r4, #4]
   85200:	2a00      	cmp	r2, #0
   85202:	dcf0      	bgt.n	851e6 <__svfiscanf_r+0x4a>
   85204:	4658      	mov	r0, fp
   85206:	4621      	mov	r1, r4
   85208:	f002 f894 	bl	87334 <__srefill_r>
   8520c:	2800      	cmp	r0, #0
   8520e:	d0ea      	beq.n	851e6 <__svfiscanf_r+0x4a>
   85210:	4642      	mov	r2, r8
   85212:	4690      	mov	r8, r2
   85214:	f818 3b01 	ldrb.w	r3, [r8], #1
   85218:	930f      	str	r3, [sp, #60]	; 0x3c
   8521a:	2b00      	cmp	r3, #0
   8521c:	d1d9      	bne.n	851d2 <__svfiscanf_r+0x36>
   8521e:	980a      	ldr	r0, [sp, #40]	; 0x28
   85220:	b05d      	add	sp, #372	; 0x174
   85222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85226:	2b25      	cmp	r3, #37	; 0x25
   85228:	f040 8089 	bne.w	8533e <__svfiscanf_r+0x1a2>
   8522c:	7853      	ldrb	r3, [r2, #1]
   8522e:	464e      	mov	r6, r9
   85230:	f108 0201 	add.w	r2, r8, #1
   85234:	2b78      	cmp	r3, #120	; 0x78
   85236:	f200 81a5 	bhi.w	85584 <__svfiscanf_r+0x3e8>
   8523a:	e8df f013 	tbh	[pc, r3, lsl #1]
   8523e:	0079      	.short	0x0079
   85240:	01a301a3 	.word	0x01a301a3
   85244:	01a301a3 	.word	0x01a301a3
   85248:	01a301a3 	.word	0x01a301a3
   8524c:	01a301a3 	.word	0x01a301a3
   85250:	01a301a3 	.word	0x01a301a3
   85254:	01a301a3 	.word	0x01a301a3
   85258:	01a301a3 	.word	0x01a301a3
   8525c:	01a301a3 	.word	0x01a301a3
   85260:	01a301a3 	.word	0x01a301a3
   85264:	01a301a3 	.word	0x01a301a3
   85268:	01a301a3 	.word	0x01a301a3
   8526c:	01a301a3 	.word	0x01a301a3
   85270:	01a301a3 	.word	0x01a301a3
   85274:	01a301a3 	.word	0x01a301a3
   85278:	01a301a3 	.word	0x01a301a3
   8527c:	01a301a3 	.word	0x01a301a3
   85280:	01a301a3 	.word	0x01a301a3
   85284:	01a301a3 	.word	0x01a301a3
   85288:	01a3007e 	.word	0x01a3007e
   8528c:	01a301a3 	.word	0x01a301a3
   85290:	017901a3 	.word	0x017901a3
   85294:	01a301a3 	.word	0x01a301a3
   85298:	01a301a3 	.word	0x01a301a3
   8529c:	016f01a3 	.word	0x016f01a3
   852a0:	016f016f 	.word	0x016f016f
   852a4:	016f016f 	.word	0x016f016f
   852a8:	016f016f 	.word	0x016f016f
   852ac:	016f016f 	.word	0x016f016f
   852b0:	01a3016f 	.word	0x01a3016f
   852b4:	01a301a3 	.word	0x01a301a3
   852b8:	01a301a3 	.word	0x01a301a3
   852bc:	01a301a3 	.word	0x01a301a3
   852c0:	01a301a3 	.word	0x01a301a3
   852c4:	016b01a3 	.word	0x016b01a3
   852c8:	01a301a3 	.word	0x01a301a3
   852cc:	01a301a3 	.word	0x01a301a3
   852d0:	01a301a3 	.word	0x01a301a3
   852d4:	016501a3 	.word	0x016501a3
   852d8:	01a301a3 	.word	0x01a301a3
   852dc:	01a30161 	.word	0x01a30161
   852e0:	01a301a3 	.word	0x01a301a3
   852e4:	01a301a3 	.word	0x01a301a3
   852e8:	01a301a3 	.word	0x01a301a3
   852ec:	015701a3 	.word	0x015701a3
   852f0:	01a301a3 	.word	0x01a301a3
   852f4:	01a3014c 	.word	0x01a3014c
   852f8:	01a301a3 	.word	0x01a301a3
   852fc:	01a301a3 	.word	0x01a301a3
   85300:	01a301a3 	.word	0x01a301a3
   85304:	013e0146 	.word	0x013e0146
   85308:	01a301a3 	.word	0x01a301a3
   8530c:	013801a3 	.word	0x013801a3
   85310:	01a30130 	.word	0x01a30130
   85314:	012701a3 	.word	0x012701a3
   85318:	010d01a3 	.word	0x010d01a3
   8531c:	011d0105 	.word	0x011d0105
   85320:	01a301a3 	.word	0x01a301a3
   85324:	01a300eb 	.word	0x01a300eb
   85328:	01a30093 	.word	0x01a30093
   8532c:	015701a3 	.word	0x015701a3
   85330:	f04f 30ff 	mov.w	r0, #4294967295
   85334:	b05d      	add	sp, #372	; 0x174
   85336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8533a:	9205      	str	r2, [sp, #20]
   8533c:	4690      	mov	r8, r2
   8533e:	6863      	ldr	r3, [r4, #4]
   85340:	2b00      	cmp	r3, #0
   85342:	f340 8343 	ble.w	859cc <__svfiscanf_r+0x830>
   85346:	6823      	ldr	r3, [r4, #0]
   85348:	f818 2c01 	ldrb.w	r2, [r8, #-1]
   8534c:	7819      	ldrb	r1, [r3, #0]
   8534e:	4291      	cmp	r1, r2
   85350:	f47f af65 	bne.w	8521e <__svfiscanf_r+0x82>
   85354:	6862      	ldr	r2, [r4, #4]
   85356:	3301      	adds	r3, #1
   85358:	3a01      	subs	r2, #1
   8535a:	6062      	str	r2, [r4, #4]
   8535c:	6023      	str	r3, [r4, #0]
   8535e:	3501      	adds	r5, #1
   85360:	4642      	mov	r2, r8
   85362:	e756      	b.n	85212 <__svfiscanf_r+0x76>
   85364:	492a      	ldr	r1, [pc, #168]	; (85410 <__svfiscanf_r+0x274>)
   85366:	9205      	str	r2, [sp, #20]
   85368:	220a      	movs	r2, #10
   8536a:	9106      	str	r1, [sp, #24]
   8536c:	9209      	str	r2, [sp, #36]	; 0x24
   8536e:	f04f 0803 	mov.w	r8, #3
   85372:	6863      	ldr	r3, [r4, #4]
   85374:	2b00      	cmp	r3, #0
   85376:	dd53      	ble.n	85420 <__svfiscanf_r+0x284>
   85378:	f019 0f40 	tst.w	r9, #64	; 0x40
   8537c:	d034      	beq.n	853e8 <__svfiscanf_r+0x24c>
   8537e:	f1b8 0f02 	cmp.w	r8, #2
   85382:	f000 81f0 	beq.w	85766 <__svfiscanf_r+0x5ca>
   85386:	f1b8 0f03 	cmp.w	r8, #3
   8538a:	f000 813a 	beq.w	85602 <__svfiscanf_r+0x466>
   8538e:	f1b8 0f01 	cmp.w	r8, #1
   85392:	f000 8106 	beq.w	855a2 <__svfiscanf_r+0x406>
   85396:	2e00      	cmp	r6, #0
   85398:	bf08      	it	eq
   8539a:	2601      	moveq	r6, #1
   8539c:	f019 0801 	ands.w	r8, r9, #1
   853a0:	f040 8265 	bne.w	8586e <__svfiscanf_r+0x6d2>
   853a4:	f019 0f10 	tst.w	r9, #16
   853a8:	d109      	bne.n	853be <__svfiscanf_r+0x222>
   853aa:	e2f7      	b.n	8599c <__svfiscanf_r+0x800>
   853ac:	441a      	add	r2, r3
   853ae:	6022      	str	r2, [r4, #0]
   853b0:	4498      	add	r8, r3
   853b2:	1af6      	subs	r6, r6, r3
   853b4:	f001 ffbe 	bl	87334 <__srefill_r>
   853b8:	2800      	cmp	r0, #0
   853ba:	f040 82e8 	bne.w	8598e <__svfiscanf_r+0x7f2>
   853be:	6863      	ldr	r3, [r4, #4]
   853c0:	4658      	mov	r0, fp
   853c2:	42b3      	cmp	r3, r6
   853c4:	4621      	mov	r1, r4
   853c6:	6822      	ldr	r2, [r4, #0]
   853c8:	dbf0      	blt.n	853ac <__svfiscanf_r+0x210>
   853ca:	1b9b      	subs	r3, r3, r6
   853cc:	4432      	add	r2, r6
   853ce:	6063      	str	r3, [r4, #4]
   853d0:	44b0      	add	r8, r6
   853d2:	6022      	str	r2, [r4, #0]
   853d4:	4445      	add	r5, r8
   853d6:	f8dd 8014 	ldr.w	r8, [sp, #20]
   853da:	4642      	mov	r2, r8
   853dc:	e719      	b.n	85212 <__svfiscanf_r+0x76>
   853de:	4658      	mov	r0, fp
   853e0:	4621      	mov	r1, r4
   853e2:	f001 ffa7 	bl	87334 <__srefill_r>
   853e6:	bb08      	cbnz	r0, 8542c <__svfiscanf_r+0x290>
   853e8:	6839      	ldr	r1, [r7, #0]
   853ea:	6823      	ldr	r3, [r4, #0]
   853ec:	e000      	b.n	853f0 <__svfiscanf_r+0x254>
   853ee:	6023      	str	r3, [r4, #0]
   853f0:	781a      	ldrb	r2, [r3, #0]
   853f2:	3301      	adds	r3, #1
   853f4:	440a      	add	r2, r1
   853f6:	7852      	ldrb	r2, [r2, #1]
   853f8:	0710      	lsls	r0, r2, #28
   853fa:	d5c0      	bpl.n	8537e <__svfiscanf_r+0x1e2>
   853fc:	6862      	ldr	r2, [r4, #4]
   853fe:	3501      	adds	r5, #1
   85400:	3a01      	subs	r2, #1
   85402:	2a00      	cmp	r2, #0
   85404:	6062      	str	r2, [r4, #4]
   85406:	dcf2      	bgt.n	853ee <__svfiscanf_r+0x252>
   85408:	e7e9      	b.n	853de <__svfiscanf_r+0x242>
   8540a:	bf00      	nop
   8540c:	2007063c 	.word	0x2007063c
   85410:	00087811 	.word	0x00087811
   85414:	6863      	ldr	r3, [r4, #4]
   85416:	9205      	str	r2, [sp, #20]
   85418:	2b00      	cmp	r3, #0
   8541a:	f04f 0802 	mov.w	r8, #2
   8541e:	dcab      	bgt.n	85378 <__svfiscanf_r+0x1dc>
   85420:	4658      	mov	r0, fp
   85422:	4621      	mov	r1, r4
   85424:	f001 ff86 	bl	87334 <__srefill_r>
   85428:	2800      	cmp	r0, #0
   8542a:	d0a5      	beq.n	85378 <__svfiscanf_r+0x1dc>
   8542c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   8542e:	2e00      	cmp	r6, #0
   85430:	f43f af7e 	beq.w	85330 <__svfiscanf_r+0x194>
   85434:	89a3      	ldrh	r3, [r4, #12]
   85436:	4630      	mov	r0, r6
   85438:	f013 0f40 	tst.w	r3, #64	; 0x40
   8543c:	bf18      	it	ne
   8543e:	f04f 30ff 	movne.w	r0, #4294967295
   85442:	b05d      	add	sp, #372	; 0x174
   85444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85448:	9205      	str	r2, [sp, #20]
   8544a:	4b8f      	ldr	r3, [pc, #572]	; (85688 <__svfiscanf_r+0x4ec>)
   8544c:	2008      	movs	r0, #8
   8544e:	9306      	str	r3, [sp, #24]
   85450:	9009      	str	r0, [sp, #36]	; 0x24
   85452:	f04f 0803 	mov.w	r8, #3
   85456:	e78c      	b.n	85372 <__svfiscanf_r+0x1d6>
   85458:	f019 0f10 	tst.w	r9, #16
   8545c:	9205      	str	r2, [sp, #20]
   8545e:	f040 808d 	bne.w	8557c <__svfiscanf_r+0x3e0>
   85462:	f019 0f04 	tst.w	r9, #4
   85466:	f000 82cc 	beq.w	85a02 <__svfiscanf_r+0x866>
   8546a:	9e07      	ldr	r6, [sp, #28]
   8546c:	4690      	mov	r8, r2
   8546e:	6833      	ldr	r3, [r6, #0]
   85470:	3604      	adds	r6, #4
   85472:	801d      	strh	r5, [r3, #0]
   85474:	9607      	str	r6, [sp, #28]
   85476:	e6cb      	b.n	85210 <__svfiscanf_r+0x74>
   85478:	4983      	ldr	r1, [pc, #524]	; (85688 <__svfiscanf_r+0x4ec>)
   8547a:	9205      	str	r2, [sp, #20]
   8547c:	2210      	movs	r2, #16
   8547e:	f449 7908 	orr.w	r9, r9, #544	; 0x220
   85482:	9106      	str	r1, [sp, #24]
   85484:	9209      	str	r2, [sp, #36]	; 0x24
   85486:	f04f 0803 	mov.w	r8, #3
   8548a:	e772      	b.n	85372 <__svfiscanf_r+0x1d6>
   8548c:	f898 3001 	ldrb.w	r3, [r8, #1]
   85490:	2b6c      	cmp	r3, #108	; 0x6c
   85492:	f000 82af 	beq.w	859f4 <__svfiscanf_r+0x858>
   85496:	f049 0901 	orr.w	r9, r9, #1
   8549a:	4690      	mov	r8, r2
   8549c:	e6c8      	b.n	85230 <__svfiscanf_r+0x94>
   8549e:	9205      	str	r2, [sp, #20]
   854a0:	4a7a      	ldr	r2, [pc, #488]	; (8568c <__svfiscanf_r+0x4f0>)
   854a2:	2300      	movs	r3, #0
   854a4:	9206      	str	r2, [sp, #24]
   854a6:	9309      	str	r3, [sp, #36]	; 0x24
   854a8:	f04f 0803 	mov.w	r8, #3
   854ac:	e761      	b.n	85372 <__svfiscanf_r+0x1d6>
   854ae:	f898 3001 	ldrb.w	r3, [r8, #1]
   854b2:	f049 0904 	orr.w	r9, r9, #4
   854b6:	4690      	mov	r8, r2
   854b8:	e6ba      	b.n	85230 <__svfiscanf_r+0x94>
   854ba:	9205      	str	r2, [sp, #20]
   854bc:	4973      	ldr	r1, [pc, #460]	; (8568c <__svfiscanf_r+0x4f0>)
   854be:	220a      	movs	r2, #10
   854c0:	9106      	str	r1, [sp, #24]
   854c2:	9209      	str	r2, [sp, #36]	; 0x24
   854c4:	f04f 0803 	mov.w	r8, #3
   854c8:	e753      	b.n	85372 <__svfiscanf_r+0x1d6>
   854ca:	9205      	str	r2, [sp, #20]
   854cc:	f049 0940 	orr.w	r9, r9, #64	; 0x40
   854d0:	f04f 0800 	mov.w	r8, #0
   854d4:	e74d      	b.n	85372 <__svfiscanf_r+0x1d6>
   854d6:	4611      	mov	r1, r2
   854d8:	a81c      	add	r0, sp, #112	; 0x70
   854da:	9205      	str	r2, [sp, #20]
   854dc:	f001 ffc6 	bl	8746c <__sccl>
   854e0:	f049 0940 	orr.w	r9, r9, #64	; 0x40
   854e4:	9005      	str	r0, [sp, #20]
   854e6:	f04f 0801 	mov.w	r8, #1
   854ea:	e742      	b.n	85372 <__svfiscanf_r+0x1d6>
   854ec:	4b66      	ldr	r3, [pc, #408]	; (85688 <__svfiscanf_r+0x4ec>)
   854ee:	2010      	movs	r0, #16
   854f0:	9205      	str	r2, [sp, #20]
   854f2:	f449 7900 	orr.w	r9, r9, #512	; 0x200
   854f6:	9306      	str	r3, [sp, #24]
   854f8:	9009      	str	r0, [sp, #36]	; 0x24
   854fa:	f04f 0803 	mov.w	r8, #3
   854fe:	e738      	b.n	85372 <__svfiscanf_r+0x1d6>
   85500:	9205      	str	r2, [sp, #20]
   85502:	f049 0901 	orr.w	r9, r9, #1
   85506:	e7a0      	b.n	8544a <__svfiscanf_r+0x2ae>
   85508:	f898 3001 	ldrb.w	r3, [r8, #1]
   8550c:	f049 0902 	orr.w	r9, r9, #2
   85510:	4690      	mov	r8, r2
   85512:	e68d      	b.n	85230 <__svfiscanf_r+0x94>
   85514:	9205      	str	r2, [sp, #20]
   85516:	f049 0901 	orr.w	r9, r9, #1
   8551a:	e7cf      	b.n	854bc <__svfiscanf_r+0x320>
   8551c:	eb06 0686 	add.w	r6, r6, r6, lsl #2
   85520:	eb03 0346 	add.w	r3, r3, r6, lsl #1
   85524:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   85528:	f898 3001 	ldrb.w	r3, [r8, #1]
   8552c:	4690      	mov	r8, r2
   8552e:	e67f      	b.n	85230 <__svfiscanf_r+0x94>
   85530:	f898 3001 	ldrb.w	r3, [r8, #1]
   85534:	f049 0910 	orr.w	r9, r9, #16
   85538:	4690      	mov	r8, r2
   8553a:	e679      	b.n	85230 <__svfiscanf_r+0x94>
   8553c:	a810      	add	r0, sp, #64	; 0x40
   8553e:	2100      	movs	r1, #0
   85540:	2208      	movs	r2, #8
   85542:	900b      	str	r0, [sp, #44]	; 0x2c
   85544:	f7fe fe1a 	bl	8417c <memset>
   85548:	f019 0a10 	ands.w	sl, r9, #16
   8554c:	f000 8209 	beq.w	85962 <__svfiscanf_r+0x7c6>
   85550:	f10d 093c 	add.w	r9, sp, #60	; 0x3c
   85554:	2200      	movs	r2, #0
   85556:	4690      	mov	r8, r2
   85558:	6822      	ldr	r2, [r4, #0]
   8555a:	683b      	ldr	r3, [r7, #0]
   8555c:	7812      	ldrb	r2, [r2, #0]
   8555e:	4413      	add	r3, r2
   85560:	785b      	ldrb	r3, [r3, #1]
   85562:	071b      	lsls	r3, r3, #28
   85564:	d402      	bmi.n	8556c <__svfiscanf_r+0x3d0>
   85566:	2e00      	cmp	r6, #0
   85568:	f040 827e 	bne.w	85a68 <__svfiscanf_r+0x8cc>
   8556c:	f1ba 0f00 	cmp.w	sl, #0
   85570:	d104      	bne.n	8557c <__svfiscanf_r+0x3e0>
   85572:	f8c9 a000 	str.w	sl, [r9]
   85576:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   85578:	3601      	adds	r6, #1
   8557a:	960a      	str	r6, [sp, #40]	; 0x28
   8557c:	f8dd 8014 	ldr.w	r8, [sp, #20]
   85580:	4642      	mov	r2, r8
   85582:	e646      	b.n	85212 <__svfiscanf_r+0x76>
   85584:	440b      	add	r3, r1
   85586:	785b      	ldrb	r3, [r3, #1]
   85588:	9205      	str	r2, [sp, #20]
   8558a:	f003 0303 	and.w	r3, r3, #3
   8558e:	2b01      	cmp	r3, #1
   85590:	f000 822d 	beq.w	859ee <__svfiscanf_r+0x852>
   85594:	483d      	ldr	r0, [pc, #244]	; (8568c <__svfiscanf_r+0x4f0>)
   85596:	210a      	movs	r1, #10
   85598:	9006      	str	r0, [sp, #24]
   8559a:	9109      	str	r1, [sp, #36]	; 0x24
   8559c:	f04f 0803 	mov.w	r8, #3
   855a0:	e6e7      	b.n	85372 <__svfiscanf_r+0x1d6>
   855a2:	2e00      	cmp	r6, #0
   855a4:	bf08      	it	eq
   855a6:	f04f 36ff 	moveq.w	r6, #4294967295
   855aa:	f019 0f10 	tst.w	r9, #16
   855ae:	f000 8130 	beq.w	85812 <__svfiscanf_r+0x676>
   855b2:	6823      	ldr	r3, [r4, #0]
   855b4:	f04f 0800 	mov.w	r8, #0
   855b8:	f10d 0970 	add.w	r9, sp, #112	; 0x70
   855bc:	781a      	ldrb	r2, [r3, #0]
   855be:	3301      	adds	r3, #1
   855c0:	f819 2002 	ldrb.w	r2, [r9, r2]
   855c4:	b1c2      	cbz	r2, 855f8 <__svfiscanf_r+0x45c>
   855c6:	6862      	ldr	r2, [r4, #4]
   855c8:	f108 0801 	add.w	r8, r8, #1
   855cc:	3a01      	subs	r2, #1
   855ce:	4546      	cmp	r6, r8
   855d0:	6023      	str	r3, [r4, #0]
   855d2:	6062      	str	r2, [r4, #4]
   855d4:	f43f aefe 	beq.w	853d4 <__svfiscanf_r+0x238>
   855d8:	2a00      	cmp	r2, #0
   855da:	dcef      	bgt.n	855bc <__svfiscanf_r+0x420>
   855dc:	4658      	mov	r0, fp
   855de:	4621      	mov	r1, r4
   855e0:	f001 fea8 	bl	87334 <__srefill_r>
   855e4:	2800      	cmp	r0, #0
   855e6:	f47f aef5 	bne.w	853d4 <__svfiscanf_r+0x238>
   855ea:	6823      	ldr	r3, [r4, #0]
   855ec:	781a      	ldrb	r2, [r3, #0]
   855ee:	3301      	adds	r3, #1
   855f0:	f819 2002 	ldrb.w	r2, [r9, r2]
   855f4:	2a00      	cmp	r2, #0
   855f6:	d1e6      	bne.n	855c6 <__svfiscanf_r+0x42a>
   855f8:	f1b8 0f00 	cmp.w	r8, #0
   855fc:	f47f aeea 	bne.w	853d4 <__svfiscanf_r+0x238>
   85600:	e60d      	b.n	8521e <__svfiscanf_r+0x82>
   85602:	1e73      	subs	r3, r6, #1
   85604:	2b26      	cmp	r3, #38	; 0x26
   85606:	bf8c      	ite	hi
   85608:	f1a6 0327 	subhi.w	r3, r6, #39	; 0x27
   8560c:	2300      	movls	r3, #0
   8560e:	f10d 0a48 	add.w	sl, sp, #72	; 0x48
   85612:	f04f 0000 	mov.w	r0, #0
   85616:	46ac      	mov	ip, r5
   85618:	bf88      	it	hi
   8561a:	2627      	movhi	r6, #39	; 0x27
   8561c:	9d09      	ldr	r5, [sp, #36]	; 0x24
   8561e:	f449 6958 	orr.w	r9, r9, #3456	; 0xd80
   85622:	46d0      	mov	r8, sl
   85624:	9008      	str	r0, [sp, #32]
   85626:	9309      	str	r3, [sp, #36]	; 0x24
   85628:	6820      	ldr	r0, [r4, #0]
   8562a:	7801      	ldrb	r1, [r0, #0]
   8562c:	f1a1 022b 	sub.w	r2, r1, #43	; 0x2b
   85630:	2a4d      	cmp	r2, #77	; 0x4d
   85632:	d844      	bhi.n	856be <__svfiscanf_r+0x522>
   85634:	e8df f002 	tbb	[pc, r2]
   85638:	43914391 	.word	0x43914391
   8563c:	60606643 	.word	0x60606643
   85640:	60606060 	.word	0x60606060
   85644:	438b8b60 	.word	0x438b8b60
   85648:	43434343 	.word	0x43434343
   8564c:	5b5b4343 	.word	0x5b5b4343
   85650:	5b5b5b5b 	.word	0x5b5b5b5b
   85654:	43434343 	.word	0x43434343
   85658:	43434343 	.word	0x43434343
   8565c:	43434343 	.word	0x43434343
   85660:	43434343 	.word	0x43434343
   85664:	43432c43 	.word	0x43432c43
   85668:	43434343 	.word	0x43434343
   8566c:	5b5b4343 	.word	0x5b5b4343
   85670:	5b5b5b5b 	.word	0x5b5b5b5b
   85674:	43434343 	.word	0x43434343
   85678:	43434343 	.word	0x43434343
   8567c:	43434343 	.word	0x43434343
   85680:	43434343 	.word	0x43434343
   85684:	2c43      	.short	0x2c43
   85686:	bf00      	nop
   85688:	00087811 	.word	0x00087811
   8568c:	00087561 	.word	0x00087561
   85690:	f409 62c0 	and.w	r2, r9, #1536	; 0x600
   85694:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   85698:	d111      	bne.n	856be <__svfiscanf_r+0x522>
   8569a:	f429 7900 	bic.w	r9, r9, #512	; 0x200
   8569e:	f449 69a0 	orr.w	r9, r9, #1280	; 0x500
   856a2:	2510      	movs	r5, #16
   856a4:	6862      	ldr	r2, [r4, #4]
   856a6:	f888 1000 	strb.w	r1, [r8]
   856aa:	3a01      	subs	r2, #1
   856ac:	2a00      	cmp	r2, #0
   856ae:	f108 0801 	add.w	r8, r8, #1
   856b2:	6062      	str	r2, [r4, #4]
   856b4:	dd40      	ble.n	85738 <__svfiscanf_r+0x59c>
   856b6:	3001      	adds	r0, #1
   856b8:	6020      	str	r0, [r4, #0]
   856ba:	3e01      	subs	r6, #1
   856bc:	d1b4      	bne.n	85628 <__svfiscanf_r+0x48c>
   856be:	f419 7f80 	tst.w	r9, #256	; 0x100
   856c2:	9509      	str	r5, [sp, #36]	; 0x24
   856c4:	4665      	mov	r5, ip
   856c6:	d005      	beq.n	856d4 <__svfiscanf_r+0x538>
   856c8:	45d0      	cmp	r8, sl
   856ca:	f200 8187 	bhi.w	859dc <__svfiscanf_r+0x840>
   856ce:	45d0      	cmp	r8, sl
   856d0:	f43f ada5 	beq.w	8521e <__svfiscanf_r+0x82>
   856d4:	f019 0610 	ands.w	r6, r9, #16
   856d8:	f000 8115 	beq.w	85906 <__svfiscanf_r+0x76a>
   856dc:	9e08      	ldr	r6, [sp, #32]
   856de:	ebca 0308 	rsb	r3, sl, r8
   856e2:	f8dd 8014 	ldr.w	r8, [sp, #20]
   856e6:	4433      	add	r3, r6
   856e8:	441d      	add	r5, r3
   856ea:	4642      	mov	r2, r8
   856ec:	e591      	b.n	85212 <__svfiscanf_r+0x76>
   856ee:	2d0a      	cmp	r5, #10
   856f0:	dde5      	ble.n	856be <__svfiscanf_r+0x522>
   856f2:	f429 6938 	bic.w	r9, r9, #2944	; 0xb80
   856f6:	e7d5      	b.n	856a4 <__svfiscanf_r+0x508>
   856f8:	4aa7      	ldr	r2, [pc, #668]	; (85998 <__svfiscanf_r+0x7fc>)
   856fa:	f429 6938 	bic.w	r9, r9, #2944	; 0xb80
   856fe:	f932 5015 	ldrsh.w	r5, [r2, r5, lsl #1]
   85702:	e7cf      	b.n	856a4 <__svfiscanf_r+0x508>
   85704:	f419 6f00 	tst.w	r9, #2048	; 0x800
   85708:	d0cc      	beq.n	856a4 <__svfiscanf_r+0x508>
   8570a:	b915      	cbnz	r5, 85712 <__svfiscanf_r+0x576>
   8570c:	f449 7900 	orr.w	r9, r9, #512	; 0x200
   85710:	2508      	movs	r5, #8
   85712:	f419 6f80 	tst.w	r9, #1024	; 0x400
   85716:	f040 810a 	bne.w	8592e <__svfiscanf_r+0x792>
   8571a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   8571c:	f429 7960 	bic.w	r9, r9, #896	; 0x380
   85720:	b112      	cbz	r2, 85728 <__svfiscanf_r+0x58c>
   85722:	3a01      	subs	r2, #1
   85724:	9209      	str	r2, [sp, #36]	; 0x24
   85726:	3601      	adds	r6, #1
   85728:	6862      	ldr	r2, [r4, #4]
   8572a:	9b08      	ldr	r3, [sp, #32]
   8572c:	3a01      	subs	r2, #1
   8572e:	3301      	adds	r3, #1
   85730:	2a00      	cmp	r2, #0
   85732:	9308      	str	r3, [sp, #32]
   85734:	6062      	str	r2, [r4, #4]
   85736:	dcbe      	bgt.n	856b6 <__svfiscanf_r+0x51a>
   85738:	4658      	mov	r0, fp
   8573a:	4621      	mov	r1, r4
   8573c:	f8cd c010 	str.w	ip, [sp, #16]
   85740:	f001 fdf8 	bl	87334 <__srefill_r>
   85744:	f8dd c010 	ldr.w	ip, [sp, #16]
   85748:	2800      	cmp	r0, #0
   8574a:	d0b6      	beq.n	856ba <__svfiscanf_r+0x51e>
   8574c:	e7b7      	b.n	856be <__svfiscanf_r+0x522>
   8574e:	4b92      	ldr	r3, [pc, #584]	; (85998 <__svfiscanf_r+0x7fc>)
   85750:	f933 5015 	ldrsh.w	r5, [r3, r5, lsl #1]
   85754:	2d08      	cmp	r5, #8
   85756:	dccc      	bgt.n	856f2 <__svfiscanf_r+0x556>
   85758:	e7b1      	b.n	856be <__svfiscanf_r+0x522>
   8575a:	f019 0f80 	tst.w	r9, #128	; 0x80
   8575e:	d0ae      	beq.n	856be <__svfiscanf_r+0x522>
   85760:	f029 0980 	bic.w	r9, r9, #128	; 0x80
   85764:	e79e      	b.n	856a4 <__svfiscanf_r+0x508>
   85766:	2e00      	cmp	r6, #0
   85768:	bf08      	it	eq
   8576a:	f04f 36ff 	moveq.w	r6, #4294967295
   8576e:	f019 0801 	ands.w	r8, r9, #1
   85772:	f47f aee3 	bne.w	8553c <__svfiscanf_r+0x3a0>
   85776:	f019 0f10 	tst.w	r9, #16
   8577a:	d135      	bne.n	857e8 <__svfiscanf_r+0x64c>
   8577c:	9807      	ldr	r0, [sp, #28]
   8577e:	f8d0 8000 	ldr.w	r8, [r0]
   85782:	f100 0904 	add.w	r9, r0, #4
   85786:	46c2      	mov	sl, r8
   85788:	6823      	ldr	r3, [r4, #0]
   8578a:	683a      	ldr	r2, [r7, #0]
   8578c:	7818      	ldrb	r0, [r3, #0]
   8578e:	1c59      	adds	r1, r3, #1
   85790:	4402      	add	r2, r0
   85792:	7852      	ldrb	r2, [r2, #1]
   85794:	0712      	lsls	r2, r2, #28
   85796:	d411      	bmi.n	857bc <__svfiscanf_r+0x620>
   85798:	6862      	ldr	r2, [r4, #4]
   8579a:	6021      	str	r1, [r4, #0]
   8579c:	3a01      	subs	r2, #1
   8579e:	6062      	str	r2, [r4, #4]
   857a0:	781b      	ldrb	r3, [r3, #0]
   857a2:	3e01      	subs	r6, #1
   857a4:	f80a 3b01 	strb.w	r3, [sl], #1
   857a8:	d008      	beq.n	857bc <__svfiscanf_r+0x620>
   857aa:	6863      	ldr	r3, [r4, #4]
   857ac:	2b00      	cmp	r3, #0
   857ae:	dceb      	bgt.n	85788 <__svfiscanf_r+0x5ec>
   857b0:	4658      	mov	r0, fp
   857b2:	4621      	mov	r1, r4
   857b4:	f001 fdbe 	bl	87334 <__srefill_r>
   857b8:	2800      	cmp	r0, #0
   857ba:	d0e5      	beq.n	85788 <__svfiscanf_r+0x5ec>
   857bc:	ebc8 080a 	rsb	r8, r8, sl
   857c0:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   857c2:	4445      	add	r5, r8
   857c4:	f8dd 8014 	ldr.w	r8, [sp, #20]
   857c8:	2300      	movs	r3, #0
   857ca:	3601      	adds	r6, #1
   857cc:	960a      	str	r6, [sp, #40]	; 0x28
   857ce:	f8cd 901c 	str.w	r9, [sp, #28]
   857d2:	f88a 3000 	strb.w	r3, [sl]
   857d6:	4642      	mov	r2, r8
   857d8:	e51b      	b.n	85212 <__svfiscanf_r+0x76>
   857da:	4658      	mov	r0, fp
   857dc:	4621      	mov	r1, r4
   857de:	f001 fda9 	bl	87334 <__srefill_r>
   857e2:	2800      	cmp	r0, #0
   857e4:	f47f adf6 	bne.w	853d4 <__svfiscanf_r+0x238>
   857e8:	6839      	ldr	r1, [r7, #0]
   857ea:	6823      	ldr	r3, [r4, #0]
   857ec:	781a      	ldrb	r2, [r3, #0]
   857ee:	3301      	adds	r3, #1
   857f0:	440a      	add	r2, r1
   857f2:	7852      	ldrb	r2, [r2, #1]
   857f4:	0710      	lsls	r0, r2, #28
   857f6:	f53f aded 	bmi.w	853d4 <__svfiscanf_r+0x238>
   857fa:	6862      	ldr	r2, [r4, #4]
   857fc:	f108 0801 	add.w	r8, r8, #1
   85800:	3a01      	subs	r2, #1
   85802:	4546      	cmp	r6, r8
   85804:	6023      	str	r3, [r4, #0]
   85806:	6062      	str	r2, [r4, #4]
   85808:	f43f ade4 	beq.w	853d4 <__svfiscanf_r+0x238>
   8580c:	2a00      	cmp	r2, #0
   8580e:	dced      	bgt.n	857ec <__svfiscanf_r+0x650>
   85810:	e7e3      	b.n	857da <__svfiscanf_r+0x63e>
   85812:	9807      	ldr	r0, [sp, #28]
   85814:	f10d 0970 	add.w	r9, sp, #112	; 0x70
   85818:	f8d0 8000 	ldr.w	r8, [r0]
   8581c:	1d02      	adds	r2, r0, #4
   8581e:	9207      	str	r2, [sp, #28]
   85820:	46c2      	mov	sl, r8
   85822:	6823      	ldr	r3, [r4, #0]
   85824:	781a      	ldrb	r2, [r3, #0]
   85826:	1c59      	adds	r1, r3, #1
   85828:	f819 2002 	ldrb.w	r2, [r9, r2]
   8582c:	b1a2      	cbz	r2, 85858 <__svfiscanf_r+0x6bc>
   8582e:	6862      	ldr	r2, [r4, #4]
   85830:	6021      	str	r1, [r4, #0]
   85832:	3a01      	subs	r2, #1
   85834:	6062      	str	r2, [r4, #4]
   85836:	781b      	ldrb	r3, [r3, #0]
   85838:	3e01      	subs	r6, #1
   8583a:	f80a 3b01 	strb.w	r3, [sl], #1
   8583e:	d00b      	beq.n	85858 <__svfiscanf_r+0x6bc>
   85840:	6863      	ldr	r3, [r4, #4]
   85842:	2b00      	cmp	r3, #0
   85844:	dced      	bgt.n	85822 <__svfiscanf_r+0x686>
   85846:	4658      	mov	r0, fp
   85848:	4621      	mov	r1, r4
   8584a:	f001 fd73 	bl	87334 <__srefill_r>
   8584e:	2800      	cmp	r0, #0
   85850:	d0e7      	beq.n	85822 <__svfiscanf_r+0x686>
   85852:	45d0      	cmp	r8, sl
   85854:	f43f adea 	beq.w	8542c <__svfiscanf_r+0x290>
   85858:	ebba 0808 	subs.w	r8, sl, r8
   8585c:	f43f acdf 	beq.w	8521e <__svfiscanf_r+0x82>
   85860:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   85862:	2300      	movs	r3, #0
   85864:	3601      	adds	r6, #1
   85866:	960a      	str	r6, [sp, #40]	; 0x28
   85868:	f88a 3000 	strb.w	r3, [sl]
   8586c:	e5b2      	b.n	853d4 <__svfiscanf_r+0x238>
   8586e:	aa10      	add	r2, sp, #64	; 0x40
   85870:	920b      	str	r2, [sp, #44]	; 0x2c
   85872:	4610      	mov	r0, r2
   85874:	2100      	movs	r1, #0
   85876:	2208      	movs	r2, #8
   85878:	f7fe fc80 	bl	8417c <memset>
   8587c:	f019 0310 	ands.w	r3, r9, #16
   85880:	930d      	str	r3, [sp, #52]	; 0x34
   85882:	d074      	beq.n	8596e <__svfiscanf_r+0x7d2>
   85884:	f04f 0900 	mov.w	r9, #0
   85888:	f04f 0a00 	mov.w	sl, #0
   8588c:	9508      	str	r5, [sp, #32]
   8588e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   85890:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
   85894:	f10d 0848 	add.w	r8, sp, #72	; 0x48
   85898:	46d3      	mov	fp, sl
   8589a:	f000 ff4f 	bl	8673c <__locale_mb_cur_max>
   8589e:	4558      	cmp	r0, fp
   858a0:	f43f adc4 	beq.w	8542c <__svfiscanf_r+0x290>
   858a4:	6823      	ldr	r3, [r4, #0]
   858a6:	6861      	ldr	r1, [r4, #4]
   858a8:	f813 eb01 	ldrb.w	lr, [r3], #1
   858ac:	980b      	ldr	r0, [sp, #44]	; 0x2c
   858ae:	3901      	subs	r1, #1
   858b0:	f10b 0a01 	add.w	sl, fp, #1
   858b4:	6023      	str	r3, [r4, #0]
   858b6:	4642      	mov	r2, r8
   858b8:	9000      	str	r0, [sp, #0]
   858ba:	4653      	mov	r3, sl
   858bc:	6061      	str	r1, [r4, #4]
   858be:	980c      	ldr	r0, [sp, #48]	; 0x30
   858c0:	4649      	mov	r1, r9
   858c2:	f808 e00b 	strb.w	lr, [r8, fp]
   858c6:	f001 fa53 	bl	86d70 <_mbrtowc_r>
   858ca:	1c41      	adds	r1, r0, #1
   858cc:	f43f adae 	beq.w	8542c <__svfiscanf_r+0x290>
   858d0:	2800      	cmp	r0, #0
   858d2:	d155      	bne.n	85980 <__svfiscanf_r+0x7e4>
   858d4:	b90d      	cbnz	r5, 858da <__svfiscanf_r+0x73e>
   858d6:	f8c9 5000 	str.w	r5, [r9]
   858da:	9908      	ldr	r1, [sp, #32]
   858dc:	3e01      	subs	r6, #1
   858de:	4451      	add	r1, sl
   858e0:	9108      	str	r1, [sp, #32]
   858e2:	2d00      	cmp	r5, #0
   858e4:	d150      	bne.n	85988 <__svfiscanf_r+0x7ec>
   858e6:	f109 0904 	add.w	r9, r9, #4
   858ea:	46ab      	mov	fp, r5
   858ec:	6863      	ldr	r3, [r4, #4]
   858ee:	2b00      	cmp	r3, #0
   858f0:	dd29      	ble.n	85946 <__svfiscanf_r+0x7aa>
   858f2:	2e00      	cmp	r6, #0
   858f4:	d1d1      	bne.n	8589a <__svfiscanf_r+0x6fe>
   858f6:	9d08      	ldr	r5, [sp, #32]
   858f8:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   858fc:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   858fe:	2e00      	cmp	r6, #0
   85900:	f43f ae39 	beq.w	85576 <__svfiscanf_r+0x3da>
   85904:	e63a      	b.n	8557c <__svfiscanf_r+0x3e0>
   85906:	4632      	mov	r2, r6
   85908:	f888 6000 	strb.w	r6, [r8]
   8590c:	4658      	mov	r0, fp
   8590e:	4651      	mov	r1, sl
   85910:	9b09      	ldr	r3, [sp, #36]	; 0x24
   85912:	9e06      	ldr	r6, [sp, #24]
   85914:	47b0      	blx	r6
   85916:	f019 0f20 	tst.w	r9, #32
   8591a:	d00b      	beq.n	85934 <__svfiscanf_r+0x798>
   8591c:	9e07      	ldr	r6, [sp, #28]
   8591e:	6833      	ldr	r3, [r6, #0]
   85920:	3604      	adds	r6, #4
   85922:	9607      	str	r6, [sp, #28]
   85924:	6018      	str	r0, [r3, #0]
   85926:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   85928:	3601      	adds	r6, #1
   8592a:	960a      	str	r6, [sp, #40]	; 0x28
   8592c:	e6d6      	b.n	856dc <__svfiscanf_r+0x540>
   8592e:	f429 69b0 	bic.w	r9, r9, #1408	; 0x580
   85932:	e6b7      	b.n	856a4 <__svfiscanf_r+0x508>
   85934:	f019 0f04 	tst.w	r9, #4
   85938:	d07e      	beq.n	85a38 <__svfiscanf_r+0x89c>
   8593a:	9e07      	ldr	r6, [sp, #28]
   8593c:	6833      	ldr	r3, [r6, #0]
   8593e:	3604      	adds	r6, #4
   85940:	9607      	str	r6, [sp, #28]
   85942:	8018      	strh	r0, [r3, #0]
   85944:	e7ef      	b.n	85926 <__svfiscanf_r+0x78a>
   85946:	980c      	ldr	r0, [sp, #48]	; 0x30
   85948:	4621      	mov	r1, r4
   8594a:	f001 fcf3 	bl	87334 <__srefill_r>
   8594e:	2800      	cmp	r0, #0
   85950:	d0cf      	beq.n	858f2 <__svfiscanf_r+0x756>
   85952:	46da      	mov	sl, fp
   85954:	9d08      	ldr	r5, [sp, #32]
   85956:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   8595a:	f1ba 0f00 	cmp.w	sl, #0
   8595e:	d0cd      	beq.n	858fc <__svfiscanf_r+0x760>
   85960:	e564      	b.n	8542c <__svfiscanf_r+0x290>
   85962:	9907      	ldr	r1, [sp, #28]
   85964:	f8d1 9000 	ldr.w	r9, [r1]
   85968:	3104      	adds	r1, #4
   8596a:	9107      	str	r1, [sp, #28]
   8596c:	e5f2      	b.n	85554 <__svfiscanf_r+0x3b8>
   8596e:	f8dd e01c 	ldr.w	lr, [sp, #28]
   85972:	f8de 9000 	ldr.w	r9, [lr]
   85976:	f10e 0e04 	add.w	lr, lr, #4
   8597a:	f8cd e01c 	str.w	lr, [sp, #28]
   8597e:	e783      	b.n	85888 <__svfiscanf_r+0x6ec>
   85980:	3002      	adds	r0, #2
   85982:	d1aa      	bne.n	858da <__svfiscanf_r+0x73e>
   85984:	46d3      	mov	fp, sl
   85986:	e7b1      	b.n	858ec <__svfiscanf_r+0x750>
   85988:	f04f 0b00 	mov.w	fp, #0
   8598c:	e7ae      	b.n	858ec <__svfiscanf_r+0x750>
   8598e:	f1b8 0f00 	cmp.w	r8, #0
   85992:	f47f ad1f 	bne.w	853d4 <__svfiscanf_r+0x238>
   85996:	e549      	b.n	8542c <__svfiscanf_r+0x290>
   85998:	00088520 	.word	0x00088520
   8599c:	f8dd e01c 	ldr.w	lr, [sp, #28]
   859a0:	4633      	mov	r3, r6
   859a2:	f8de 1000 	ldr.w	r1, [lr]
   859a6:	4658      	mov	r0, fp
   859a8:	9400      	str	r4, [sp, #0]
   859aa:	2201      	movs	r2, #1
   859ac:	f000 fafc 	bl	85fa8 <_fread_r>
   859b0:	9e07      	ldr	r6, [sp, #28]
   859b2:	1d33      	adds	r3, r6, #4
   859b4:	2800      	cmp	r0, #0
   859b6:	f43f ad39 	beq.w	8542c <__svfiscanf_r+0x290>
   859ba:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   859bc:	f8dd 8014 	ldr.w	r8, [sp, #20]
   859c0:	3601      	adds	r6, #1
   859c2:	4405      	add	r5, r0
   859c4:	960a      	str	r6, [sp, #40]	; 0x28
   859c6:	9307      	str	r3, [sp, #28]
   859c8:	4642      	mov	r2, r8
   859ca:	e422      	b.n	85212 <__svfiscanf_r+0x76>
   859cc:	4658      	mov	r0, fp
   859ce:	4621      	mov	r1, r4
   859d0:	f001 fcb0 	bl	87334 <__srefill_r>
   859d4:	2800      	cmp	r0, #0
   859d6:	f43f acb6 	beq.w	85346 <__svfiscanf_r+0x1aa>
   859da:	e527      	b.n	8542c <__svfiscanf_r+0x290>
   859dc:	f818 1c01 	ldrb.w	r1, [r8, #-1]
   859e0:	4658      	mov	r0, fp
   859e2:	4622      	mov	r2, r4
   859e4:	f002 f8b2 	bl	87b4c <_ungetc_r>
   859e8:	f108 38ff 	add.w	r8, r8, #4294967295
   859ec:	e66f      	b.n	856ce <__svfiscanf_r+0x532>
   859ee:	f049 0901 	orr.w	r9, r9, #1
   859f2:	e5cf      	b.n	85594 <__svfiscanf_r+0x3f8>
   859f4:	f898 3002 	ldrb.w	r3, [r8, #2]
   859f8:	f049 0902 	orr.w	r9, r9, #2
   859fc:	f108 0802 	add.w	r8, r8, #2
   85a00:	e416      	b.n	85230 <__svfiscanf_r+0x94>
   85a02:	f019 0f01 	tst.w	r9, #1
   85a06:	d10e      	bne.n	85a26 <__svfiscanf_r+0x88a>
   85a08:	f019 0f02 	tst.w	r9, #2
   85a0c:	d00b      	beq.n	85a26 <__svfiscanf_r+0x88a>
   85a0e:	9e07      	ldr	r6, [sp, #28]
   85a10:	462a      	mov	r2, r5
   85a12:	6831      	ldr	r1, [r6, #0]
   85a14:	17eb      	asrs	r3, r5, #31
   85a16:	3604      	adds	r6, #4
   85a18:	f8dd 8014 	ldr.w	r8, [sp, #20]
   85a1c:	9607      	str	r6, [sp, #28]
   85a1e:	e9c1 2300 	strd	r2, r3, [r1]
   85a22:	f7ff bbf5 	b.w	85210 <__svfiscanf_r+0x74>
   85a26:	9e07      	ldr	r6, [sp, #28]
   85a28:	f8dd 8014 	ldr.w	r8, [sp, #20]
   85a2c:	6833      	ldr	r3, [r6, #0]
   85a2e:	3604      	adds	r6, #4
   85a30:	601d      	str	r5, [r3, #0]
   85a32:	9607      	str	r6, [sp, #28]
   85a34:	f7ff bbec 	b.w	85210 <__svfiscanf_r+0x74>
   85a38:	f019 0201 	ands.w	r2, r9, #1
   85a3c:	f47f af6e 	bne.w	8591c <__svfiscanf_r+0x780>
   85a40:	f019 0f02 	tst.w	r9, #2
   85a44:	f43f af6a 	beq.w	8591c <__svfiscanf_r+0x780>
   85a48:	4b39      	ldr	r3, [pc, #228]	; (85b30 <__svfiscanf_r+0x994>)
   85a4a:	9e06      	ldr	r6, [sp, #24]
   85a4c:	4658      	mov	r0, fp
   85a4e:	429e      	cmp	r6, r3
   85a50:	4651      	mov	r1, sl
   85a52:	9b09      	ldr	r3, [sp, #36]	; 0x24
   85a54:	d065      	beq.n	85b22 <__svfiscanf_r+0x986>
   85a56:	f001 fe0d 	bl	87674 <_strtoll_r>
   85a5a:	9e07      	ldr	r6, [sp, #28]
   85a5c:	6833      	ldr	r3, [r6, #0]
   85a5e:	3604      	adds	r6, #4
   85a60:	9607      	str	r6, [sp, #28]
   85a62:	e9c3 0100 	strd	r0, r1, [r3]
   85a66:	e75e      	b.n	85926 <__svfiscanf_r+0x78a>
   85a68:	f000 fe68 	bl	8673c <__locale_mb_cur_max>
   85a6c:	4540      	cmp	r0, r8
   85a6e:	f43f acdd 	beq.w	8542c <__svfiscanf_r+0x290>
   85a72:	6823      	ldr	r3, [r4, #0]
   85a74:	6861      	ldr	r1, [r4, #4]
   85a76:	f813 2b01 	ldrb.w	r2, [r3], #1
   85a7a:	f108 0c01 	add.w	ip, r8, #1
   85a7e:	6023      	str	r3, [r4, #0]
   85a80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   85a82:	f10d 0e48 	add.w	lr, sp, #72	; 0x48
   85a86:	3901      	subs	r1, #1
   85a88:	9300      	str	r3, [sp, #0]
   85a8a:	4658      	mov	r0, fp
   85a8c:	6061      	str	r1, [r4, #4]
   85a8e:	f80e 2008 	strb.w	r2, [lr, r8]
   85a92:	4663      	mov	r3, ip
   85a94:	4672      	mov	r2, lr
   85a96:	4649      	mov	r1, r9
   85a98:	f8cd c010 	str.w	ip, [sp, #16]
   85a9c:	f001 f968 	bl	86d70 <_mbrtowc_r>
   85aa0:	1c42      	adds	r2, r0, #1
   85aa2:	f8dd c010 	ldr.w	ip, [sp, #16]
   85aa6:	f43f acc1 	beq.w	8542c <__svfiscanf_r+0x290>
   85aaa:	b198      	cbz	r0, 85ad4 <__svfiscanf_r+0x938>
   85aac:	3002      	adds	r0, #2
   85aae:	bf08      	it	eq
   85ab0:	46e0      	moveq	r8, ip
   85ab2:	d139      	bne.n	85b28 <__svfiscanf_r+0x98c>
   85ab4:	6863      	ldr	r3, [r4, #4]
   85ab6:	2b00      	cmp	r3, #0
   85ab8:	f73f ad4e 	bgt.w	85558 <__svfiscanf_r+0x3bc>
   85abc:	4658      	mov	r0, fp
   85abe:	4621      	mov	r1, r4
   85ac0:	f001 fc38 	bl	87334 <__srefill_r>
   85ac4:	2800      	cmp	r0, #0
   85ac6:	f43f ad47 	beq.w	85558 <__svfiscanf_r+0x3bc>
   85aca:	4642      	mov	r2, r8
   85acc:	2a00      	cmp	r2, #0
   85ace:	f47f acad 	bne.w	8542c <__svfiscanf_r+0x290>
   85ad2:	e54b      	b.n	8556c <__svfiscanf_r+0x3d0>
   85ad4:	f8c9 0000 	str.w	r0, [r9]
   85ad8:	f8cd c010 	str.w	ip, [sp, #16]
   85adc:	f000 fe1c 	bl	86718 <iswspace>
   85ae0:	f8dd c010 	ldr.w	ip, [sp, #16]
   85ae4:	b190      	cbz	r0, 85b0c <__svfiscanf_r+0x970>
   85ae6:	46e0      	mov	r8, ip
   85ae8:	f1bc 0f00 	cmp.w	ip, #0
   85aec:	f43f ad3e 	beq.w	8556c <__svfiscanf_r+0x3d0>
   85af0:	ae12      	add	r6, sp, #72	; 0x48
   85af2:	4466      	add	r6, ip
   85af4:	f108 38ff 	add.w	r8, r8, #4294967295
   85af8:	4658      	mov	r0, fp
   85afa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
   85afe:	4622      	mov	r2, r4
   85b00:	f002 f824 	bl	87b4c <_ungetc_r>
   85b04:	f1b8 0f00 	cmp.w	r8, #0
   85b08:	d1f4      	bne.n	85af4 <__svfiscanf_r+0x958>
   85b0a:	e52f      	b.n	8556c <__svfiscanf_r+0x3d0>
   85b0c:	4465      	add	r5, ip
   85b0e:	3e01      	subs	r6, #1
   85b10:	f1ba 0f00 	cmp.w	sl, #0
   85b14:	d103      	bne.n	85b1e <__svfiscanf_r+0x982>
   85b16:	f109 0904 	add.w	r9, r9, #4
   85b1a:	46d0      	mov	r8, sl
   85b1c:	e7ca      	b.n	85ab4 <__svfiscanf_r+0x918>
   85b1e:	4680      	mov	r8, r0
   85b20:	e7c8      	b.n	85ab4 <__svfiscanf_r+0x918>
   85b22:	f001 ff0d 	bl	87940 <_strtoull_r>
   85b26:	e798      	b.n	85a5a <__svfiscanf_r+0x8be>
   85b28:	f8d9 0000 	ldr.w	r0, [r9]
   85b2c:	e7d4      	b.n	85ad8 <__svfiscanf_r+0x93c>
   85b2e:	bf00      	nop
   85b30:	00087811 	.word	0x00087811

00085b34 <__swsetup_r>:
   85b34:	4b2f      	ldr	r3, [pc, #188]	; (85bf4 <__swsetup_r+0xc0>)
   85b36:	b570      	push	{r4, r5, r6, lr}
   85b38:	4606      	mov	r6, r0
   85b3a:	6818      	ldr	r0, [r3, #0]
   85b3c:	460c      	mov	r4, r1
   85b3e:	b110      	cbz	r0, 85b46 <__swsetup_r+0x12>
   85b40:	6b82      	ldr	r2, [r0, #56]	; 0x38
   85b42:	2a00      	cmp	r2, #0
   85b44:	d036      	beq.n	85bb4 <__swsetup_r+0x80>
   85b46:	89a5      	ldrh	r5, [r4, #12]
   85b48:	b2ab      	uxth	r3, r5
   85b4a:	0719      	lsls	r1, r3, #28
   85b4c:	d50c      	bpl.n	85b68 <__swsetup_r+0x34>
   85b4e:	6922      	ldr	r2, [r4, #16]
   85b50:	b1aa      	cbz	r2, 85b7e <__swsetup_r+0x4a>
   85b52:	f013 0101 	ands.w	r1, r3, #1
   85b56:	d01e      	beq.n	85b96 <__swsetup_r+0x62>
   85b58:	6963      	ldr	r3, [r4, #20]
   85b5a:	2100      	movs	r1, #0
   85b5c:	425b      	negs	r3, r3
   85b5e:	61a3      	str	r3, [r4, #24]
   85b60:	60a1      	str	r1, [r4, #8]
   85b62:	b1f2      	cbz	r2, 85ba2 <__swsetup_r+0x6e>
   85b64:	2000      	movs	r0, #0
   85b66:	bd70      	pop	{r4, r5, r6, pc}
   85b68:	06da      	lsls	r2, r3, #27
   85b6a:	d53a      	bpl.n	85be2 <__swsetup_r+0xae>
   85b6c:	075b      	lsls	r3, r3, #29
   85b6e:	d424      	bmi.n	85bba <__swsetup_r+0x86>
   85b70:	6922      	ldr	r2, [r4, #16]
   85b72:	f045 0308 	orr.w	r3, r5, #8
   85b76:	81a3      	strh	r3, [r4, #12]
   85b78:	b29b      	uxth	r3, r3
   85b7a:	2a00      	cmp	r2, #0
   85b7c:	d1e9      	bne.n	85b52 <__swsetup_r+0x1e>
   85b7e:	f403 7120 	and.w	r1, r3, #640	; 0x280
   85b82:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   85b86:	d0e4      	beq.n	85b52 <__swsetup_r+0x1e>
   85b88:	4630      	mov	r0, r6
   85b8a:	4621      	mov	r1, r4
   85b8c:	f000 fddc 	bl	86748 <__smakebuf_r>
   85b90:	89a3      	ldrh	r3, [r4, #12]
   85b92:	6922      	ldr	r2, [r4, #16]
   85b94:	e7dd      	b.n	85b52 <__swsetup_r+0x1e>
   85b96:	0798      	lsls	r0, r3, #30
   85b98:	bf58      	it	pl
   85b9a:	6961      	ldrpl	r1, [r4, #20]
   85b9c:	60a1      	str	r1, [r4, #8]
   85b9e:	2a00      	cmp	r2, #0
   85ba0:	d1e0      	bne.n	85b64 <__swsetup_r+0x30>
   85ba2:	89a3      	ldrh	r3, [r4, #12]
   85ba4:	061a      	lsls	r2, r3, #24
   85ba6:	d5dd      	bpl.n	85b64 <__swsetup_r+0x30>
   85ba8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   85bac:	81a3      	strh	r3, [r4, #12]
   85bae:	f04f 30ff 	mov.w	r0, #4294967295
   85bb2:	bd70      	pop	{r4, r5, r6, pc}
   85bb4:	f000 f902 	bl	85dbc <__sinit>
   85bb8:	e7c5      	b.n	85b46 <__swsetup_r+0x12>
   85bba:	6b21      	ldr	r1, [r4, #48]	; 0x30
   85bbc:	b149      	cbz	r1, 85bd2 <__swsetup_r+0x9e>
   85bbe:	f104 0340 	add.w	r3, r4, #64	; 0x40
   85bc2:	4299      	cmp	r1, r3
   85bc4:	d003      	beq.n	85bce <__swsetup_r+0x9a>
   85bc6:	4630      	mov	r0, r6
   85bc8:	f000 fb04 	bl	861d4 <_free_r>
   85bcc:	89a5      	ldrh	r5, [r4, #12]
   85bce:	2300      	movs	r3, #0
   85bd0:	6323      	str	r3, [r4, #48]	; 0x30
   85bd2:	6922      	ldr	r2, [r4, #16]
   85bd4:	f025 0524 	bic.w	r5, r5, #36	; 0x24
   85bd8:	2100      	movs	r1, #0
   85bda:	b2ad      	uxth	r5, r5
   85bdc:	6022      	str	r2, [r4, #0]
   85bde:	6061      	str	r1, [r4, #4]
   85be0:	e7c7      	b.n	85b72 <__swsetup_r+0x3e>
   85be2:	f045 0540 	orr.w	r5, r5, #64	; 0x40
   85be6:	2309      	movs	r3, #9
   85be8:	6033      	str	r3, [r6, #0]
   85bea:	f04f 30ff 	mov.w	r0, #4294967295
   85bee:	81a5      	strh	r5, [r4, #12]
   85bf0:	bd70      	pop	{r4, r5, r6, pc}
   85bf2:	bf00      	nop
   85bf4:	20070638 	.word	0x20070638

00085bf8 <register_fini>:
   85bf8:	4b02      	ldr	r3, [pc, #8]	; (85c04 <register_fini+0xc>)
   85bfa:	b113      	cbz	r3, 85c02 <register_fini+0xa>
   85bfc:	4802      	ldr	r0, [pc, #8]	; (85c08 <register_fini+0x10>)
   85bfe:	f000 b805 	b.w	85c0c <atexit>
   85c02:	4770      	bx	lr
   85c04:	00000000 	.word	0x00000000
   85c08:	00085eb9 	.word	0x00085eb9

00085c0c <atexit>:
   85c0c:	4601      	mov	r1, r0
   85c0e:	2000      	movs	r0, #0
   85c10:	4602      	mov	r2, r0
   85c12:	4603      	mov	r3, r0
   85c14:	f002 b8a2 	b.w	87d5c <__register_exitproc>

00085c18 <__sflush_r>:
   85c18:	898b      	ldrh	r3, [r1, #12]
   85c1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   85c1e:	b29a      	uxth	r2, r3
   85c20:	460d      	mov	r5, r1
   85c22:	0711      	lsls	r1, r2, #28
   85c24:	4680      	mov	r8, r0
   85c26:	d43c      	bmi.n	85ca2 <__sflush_r+0x8a>
   85c28:	686a      	ldr	r2, [r5, #4]
   85c2a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   85c2e:	2a00      	cmp	r2, #0
   85c30:	81ab      	strh	r3, [r5, #12]
   85c32:	dd59      	ble.n	85ce8 <__sflush_r+0xd0>
   85c34:	6aac      	ldr	r4, [r5, #40]	; 0x28
   85c36:	2c00      	cmp	r4, #0
   85c38:	d04b      	beq.n	85cd2 <__sflush_r+0xba>
   85c3a:	b29b      	uxth	r3, r3
   85c3c:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   85c40:	2100      	movs	r1, #0
   85c42:	b292      	uxth	r2, r2
   85c44:	f8d8 6000 	ldr.w	r6, [r8]
   85c48:	f8c8 1000 	str.w	r1, [r8]
   85c4c:	2a00      	cmp	r2, #0
   85c4e:	d04f      	beq.n	85cf0 <__sflush_r+0xd8>
   85c50:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   85c52:	075f      	lsls	r7, r3, #29
   85c54:	d505      	bpl.n	85c62 <__sflush_r+0x4a>
   85c56:	6869      	ldr	r1, [r5, #4]
   85c58:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   85c5a:	1a52      	subs	r2, r2, r1
   85c5c:	b10b      	cbz	r3, 85c62 <__sflush_r+0x4a>
   85c5e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   85c60:	1ad2      	subs	r2, r2, r3
   85c62:	4640      	mov	r0, r8
   85c64:	69e9      	ldr	r1, [r5, #28]
   85c66:	2300      	movs	r3, #0
   85c68:	47a0      	blx	r4
   85c6a:	1c44      	adds	r4, r0, #1
   85c6c:	d04a      	beq.n	85d04 <__sflush_r+0xec>
   85c6e:	89ab      	ldrh	r3, [r5, #12]
   85c70:	692a      	ldr	r2, [r5, #16]
   85c72:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   85c76:	b29b      	uxth	r3, r3
   85c78:	2100      	movs	r1, #0
   85c7a:	602a      	str	r2, [r5, #0]
   85c7c:	04da      	lsls	r2, r3, #19
   85c7e:	81ab      	strh	r3, [r5, #12]
   85c80:	6069      	str	r1, [r5, #4]
   85c82:	d44c      	bmi.n	85d1e <__sflush_r+0x106>
   85c84:	6b29      	ldr	r1, [r5, #48]	; 0x30
   85c86:	f8c8 6000 	str.w	r6, [r8]
   85c8a:	b311      	cbz	r1, 85cd2 <__sflush_r+0xba>
   85c8c:	f105 0340 	add.w	r3, r5, #64	; 0x40
   85c90:	4299      	cmp	r1, r3
   85c92:	d002      	beq.n	85c9a <__sflush_r+0x82>
   85c94:	4640      	mov	r0, r8
   85c96:	f000 fa9d 	bl	861d4 <_free_r>
   85c9a:	2000      	movs	r0, #0
   85c9c:	6328      	str	r0, [r5, #48]	; 0x30
   85c9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85ca2:	692e      	ldr	r6, [r5, #16]
   85ca4:	b1ae      	cbz	r6, 85cd2 <__sflush_r+0xba>
   85ca6:	0791      	lsls	r1, r2, #30
   85ca8:	682c      	ldr	r4, [r5, #0]
   85caa:	bf0c      	ite	eq
   85cac:	696b      	ldreq	r3, [r5, #20]
   85cae:	2300      	movne	r3, #0
   85cb0:	602e      	str	r6, [r5, #0]
   85cb2:	1ba4      	subs	r4, r4, r6
   85cb4:	60ab      	str	r3, [r5, #8]
   85cb6:	e00a      	b.n	85cce <__sflush_r+0xb6>
   85cb8:	4632      	mov	r2, r6
   85cba:	4623      	mov	r3, r4
   85cbc:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   85cbe:	4640      	mov	r0, r8
   85cc0:	69e9      	ldr	r1, [r5, #28]
   85cc2:	47b8      	blx	r7
   85cc4:	2800      	cmp	r0, #0
   85cc6:	ebc0 0404 	rsb	r4, r0, r4
   85cca:	4406      	add	r6, r0
   85ccc:	dd04      	ble.n	85cd8 <__sflush_r+0xc0>
   85cce:	2c00      	cmp	r4, #0
   85cd0:	dcf2      	bgt.n	85cb8 <__sflush_r+0xa0>
   85cd2:	2000      	movs	r0, #0
   85cd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85cd8:	89ab      	ldrh	r3, [r5, #12]
   85cda:	f04f 30ff 	mov.w	r0, #4294967295
   85cde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   85ce2:	81ab      	strh	r3, [r5, #12]
   85ce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85ce8:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   85cea:	2a00      	cmp	r2, #0
   85cec:	dca2      	bgt.n	85c34 <__sflush_r+0x1c>
   85cee:	e7f0      	b.n	85cd2 <__sflush_r+0xba>
   85cf0:	2301      	movs	r3, #1
   85cf2:	4640      	mov	r0, r8
   85cf4:	69e9      	ldr	r1, [r5, #28]
   85cf6:	47a0      	blx	r4
   85cf8:	1c43      	adds	r3, r0, #1
   85cfa:	4602      	mov	r2, r0
   85cfc:	d01e      	beq.n	85d3c <__sflush_r+0x124>
   85cfe:	89ab      	ldrh	r3, [r5, #12]
   85d00:	6aac      	ldr	r4, [r5, #40]	; 0x28
   85d02:	e7a6      	b.n	85c52 <__sflush_r+0x3a>
   85d04:	f8d8 3000 	ldr.w	r3, [r8]
   85d08:	b95b      	cbnz	r3, 85d22 <__sflush_r+0x10a>
   85d0a:	89aa      	ldrh	r2, [r5, #12]
   85d0c:	6929      	ldr	r1, [r5, #16]
   85d0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   85d12:	b292      	uxth	r2, r2
   85d14:	606b      	str	r3, [r5, #4]
   85d16:	04d3      	lsls	r3, r2, #19
   85d18:	81aa      	strh	r2, [r5, #12]
   85d1a:	6029      	str	r1, [r5, #0]
   85d1c:	d5b2      	bpl.n	85c84 <__sflush_r+0x6c>
   85d1e:	6528      	str	r0, [r5, #80]	; 0x50
   85d20:	e7b0      	b.n	85c84 <__sflush_r+0x6c>
   85d22:	2b1d      	cmp	r3, #29
   85d24:	d001      	beq.n	85d2a <__sflush_r+0x112>
   85d26:	2b16      	cmp	r3, #22
   85d28:	d113      	bne.n	85d52 <__sflush_r+0x13a>
   85d2a:	89a9      	ldrh	r1, [r5, #12]
   85d2c:	692b      	ldr	r3, [r5, #16]
   85d2e:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
   85d32:	2200      	movs	r2, #0
   85d34:	81a9      	strh	r1, [r5, #12]
   85d36:	602b      	str	r3, [r5, #0]
   85d38:	606a      	str	r2, [r5, #4]
   85d3a:	e7a3      	b.n	85c84 <__sflush_r+0x6c>
   85d3c:	f8d8 3000 	ldr.w	r3, [r8]
   85d40:	2b00      	cmp	r3, #0
   85d42:	d0dc      	beq.n	85cfe <__sflush_r+0xe6>
   85d44:	2b1d      	cmp	r3, #29
   85d46:	d001      	beq.n	85d4c <__sflush_r+0x134>
   85d48:	2b16      	cmp	r3, #22
   85d4a:	d1c5      	bne.n	85cd8 <__sflush_r+0xc0>
   85d4c:	f8c8 6000 	str.w	r6, [r8]
   85d50:	e7bf      	b.n	85cd2 <__sflush_r+0xba>
   85d52:	89ab      	ldrh	r3, [r5, #12]
   85d54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   85d58:	81ab      	strh	r3, [r5, #12]
   85d5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85d5e:	bf00      	nop

00085d60 <_fflush_r>:
   85d60:	b510      	push	{r4, lr}
   85d62:	4604      	mov	r4, r0
   85d64:	b082      	sub	sp, #8
   85d66:	b108      	cbz	r0, 85d6c <_fflush_r+0xc>
   85d68:	6b83      	ldr	r3, [r0, #56]	; 0x38
   85d6a:	b153      	cbz	r3, 85d82 <_fflush_r+0x22>
   85d6c:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   85d70:	b908      	cbnz	r0, 85d76 <_fflush_r+0x16>
   85d72:	b002      	add	sp, #8
   85d74:	bd10      	pop	{r4, pc}
   85d76:	4620      	mov	r0, r4
   85d78:	b002      	add	sp, #8
   85d7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   85d7e:	f7ff bf4b 	b.w	85c18 <__sflush_r>
   85d82:	9101      	str	r1, [sp, #4]
   85d84:	f000 f81a 	bl	85dbc <__sinit>
   85d88:	9901      	ldr	r1, [sp, #4]
   85d8a:	e7ef      	b.n	85d6c <_fflush_r+0xc>

00085d8c <fflush>:
   85d8c:	b120      	cbz	r0, 85d98 <fflush+0xc>
   85d8e:	4b05      	ldr	r3, [pc, #20]	; (85da4 <fflush+0x18>)
   85d90:	4601      	mov	r1, r0
   85d92:	6818      	ldr	r0, [r3, #0]
   85d94:	f7ff bfe4 	b.w	85d60 <_fflush_r>
   85d98:	4b03      	ldr	r3, [pc, #12]	; (85da8 <fflush+0x1c>)
   85d9a:	4904      	ldr	r1, [pc, #16]	; (85dac <fflush+0x20>)
   85d9c:	6818      	ldr	r0, [r3, #0]
   85d9e:	f000 bc95 	b.w	866cc <_fwalk_reent>
   85da2:	bf00      	nop
   85da4:	20070638 	.word	0x20070638
   85da8:	000884cc 	.word	0x000884cc
   85dac:	00085d61 	.word	0x00085d61

00085db0 <_cleanup_r>:
   85db0:	4901      	ldr	r1, [pc, #4]	; (85db8 <_cleanup_r+0x8>)
   85db2:	f000 bc67 	b.w	86684 <_fwalk>
   85db6:	bf00      	nop
   85db8:	00087ea9 	.word	0x00087ea9

00085dbc <__sinit>:
   85dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85dc0:	6b84      	ldr	r4, [r0, #56]	; 0x38
   85dc2:	b083      	sub	sp, #12
   85dc4:	4607      	mov	r7, r0
   85dc6:	2c00      	cmp	r4, #0
   85dc8:	d165      	bne.n	85e96 <__sinit+0xda>
   85dca:	687d      	ldr	r5, [r7, #4]
   85dcc:	4833      	ldr	r0, [pc, #204]	; (85e9c <__sinit+0xe0>)
   85dce:	2304      	movs	r3, #4
   85dd0:	2103      	movs	r1, #3
   85dd2:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   85dd6:	63f8      	str	r0, [r7, #60]	; 0x3c
   85dd8:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   85ddc:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   85de0:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   85de4:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   85de8:	81ab      	strh	r3, [r5, #12]
   85dea:	602c      	str	r4, [r5, #0]
   85dec:	606c      	str	r4, [r5, #4]
   85dee:	60ac      	str	r4, [r5, #8]
   85df0:	666c      	str	r4, [r5, #100]	; 0x64
   85df2:	81ec      	strh	r4, [r5, #14]
   85df4:	612c      	str	r4, [r5, #16]
   85df6:	616c      	str	r4, [r5, #20]
   85df8:	61ac      	str	r4, [r5, #24]
   85dfa:	4621      	mov	r1, r4
   85dfc:	2208      	movs	r2, #8
   85dfe:	f7fe f9bd 	bl	8417c <memset>
   85e02:	f8df b09c 	ldr.w	fp, [pc, #156]	; 85ea0 <__sinit+0xe4>
   85e06:	68be      	ldr	r6, [r7, #8]
   85e08:	f8df a098 	ldr.w	sl, [pc, #152]	; 85ea4 <__sinit+0xe8>
   85e0c:	f8df 9098 	ldr.w	r9, [pc, #152]	; 85ea8 <__sinit+0xec>
   85e10:	f8df 8098 	ldr.w	r8, [pc, #152]	; 85eac <__sinit+0xf0>
   85e14:	2301      	movs	r3, #1
   85e16:	2209      	movs	r2, #9
   85e18:	61ed      	str	r5, [r5, #28]
   85e1a:	f8c5 b020 	str.w	fp, [r5, #32]
   85e1e:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   85e22:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   85e26:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   85e2a:	4621      	mov	r1, r4
   85e2c:	81f3      	strh	r3, [r6, #14]
   85e2e:	81b2      	strh	r2, [r6, #12]
   85e30:	6034      	str	r4, [r6, #0]
   85e32:	6074      	str	r4, [r6, #4]
   85e34:	60b4      	str	r4, [r6, #8]
   85e36:	6674      	str	r4, [r6, #100]	; 0x64
   85e38:	6134      	str	r4, [r6, #16]
   85e3a:	6174      	str	r4, [r6, #20]
   85e3c:	61b4      	str	r4, [r6, #24]
   85e3e:	2208      	movs	r2, #8
   85e40:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   85e44:	9301      	str	r3, [sp, #4]
   85e46:	f7fe f999 	bl	8417c <memset>
   85e4a:	68fd      	ldr	r5, [r7, #12]
   85e4c:	2012      	movs	r0, #18
   85e4e:	2202      	movs	r2, #2
   85e50:	61f6      	str	r6, [r6, #28]
   85e52:	f8c6 b020 	str.w	fp, [r6, #32]
   85e56:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   85e5a:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   85e5e:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   85e62:	4621      	mov	r1, r4
   85e64:	81a8      	strh	r0, [r5, #12]
   85e66:	81ea      	strh	r2, [r5, #14]
   85e68:	602c      	str	r4, [r5, #0]
   85e6a:	606c      	str	r4, [r5, #4]
   85e6c:	60ac      	str	r4, [r5, #8]
   85e6e:	666c      	str	r4, [r5, #100]	; 0x64
   85e70:	612c      	str	r4, [r5, #16]
   85e72:	616c      	str	r4, [r5, #20]
   85e74:	61ac      	str	r4, [r5, #24]
   85e76:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   85e7a:	2208      	movs	r2, #8
   85e7c:	f7fe f97e 	bl	8417c <memset>
   85e80:	9b01      	ldr	r3, [sp, #4]
   85e82:	61ed      	str	r5, [r5, #28]
   85e84:	f8c5 b020 	str.w	fp, [r5, #32]
   85e88:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   85e8c:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   85e90:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   85e94:	63bb      	str	r3, [r7, #56]	; 0x38
   85e96:	b003      	add	sp, #12
   85e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85e9c:	00085db1 	.word	0x00085db1
   85ea0:	000874dd 	.word	0x000874dd
   85ea4:	00087501 	.word	0x00087501
   85ea8:	00087539 	.word	0x00087539
   85eac:	00087559 	.word	0x00087559

00085eb0 <__sfp_lock_acquire>:
   85eb0:	4770      	bx	lr
   85eb2:	bf00      	nop

00085eb4 <__sfp_lock_release>:
   85eb4:	4770      	bx	lr
   85eb6:	bf00      	nop

00085eb8 <__libc_fini_array>:
   85eb8:	b538      	push	{r3, r4, r5, lr}
   85eba:	4d09      	ldr	r5, [pc, #36]	; (85ee0 <__libc_fini_array+0x28>)
   85ebc:	4c09      	ldr	r4, [pc, #36]	; (85ee4 <__libc_fini_array+0x2c>)
   85ebe:	1b64      	subs	r4, r4, r5
   85ec0:	10a4      	asrs	r4, r4, #2
   85ec2:	bf18      	it	ne
   85ec4:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
   85ec8:	d005      	beq.n	85ed6 <__libc_fini_array+0x1e>
   85eca:	3c01      	subs	r4, #1
   85ecc:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   85ed0:	4798      	blx	r3
   85ed2:	2c00      	cmp	r4, #0
   85ed4:	d1f9      	bne.n	85eca <__libc_fini_array+0x12>
   85ed6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   85eda:	f002 bbbf 	b.w	8865c <_fini>
   85ede:	bf00      	nop
   85ee0:	00088668 	.word	0x00088668
   85ee4:	0008866c 	.word	0x0008866c

00085ee8 <_fputwc_r>:
   85ee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   85eec:	8993      	ldrh	r3, [r2, #12]
   85eee:	460f      	mov	r7, r1
   85ef0:	0499      	lsls	r1, r3, #18
   85ef2:	b082      	sub	sp, #8
   85ef4:	4614      	mov	r4, r2
   85ef6:	4680      	mov	r8, r0
   85ef8:	d406      	bmi.n	85f08 <_fputwc_r+0x20>
   85efa:	6e52      	ldr	r2, [r2, #100]	; 0x64
   85efc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   85f00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   85f04:	81a3      	strh	r3, [r4, #12]
   85f06:	6662      	str	r2, [r4, #100]	; 0x64
   85f08:	f000 fc18 	bl	8673c <__locale_mb_cur_max>
   85f0c:	2801      	cmp	r0, #1
   85f0e:	d03e      	beq.n	85f8e <_fputwc_r+0xa6>
   85f10:	463a      	mov	r2, r7
   85f12:	4640      	mov	r0, r8
   85f14:	a901      	add	r1, sp, #4
   85f16:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   85f1a:	f001 fed5 	bl	87cc8 <_wcrtomb_r>
   85f1e:	1c42      	adds	r2, r0, #1
   85f20:	4606      	mov	r6, r0
   85f22:	d02d      	beq.n	85f80 <_fputwc_r+0x98>
   85f24:	2800      	cmp	r0, #0
   85f26:	d03a      	beq.n	85f9e <_fputwc_r+0xb6>
   85f28:	f89d 1004 	ldrb.w	r1, [sp, #4]
   85f2c:	2500      	movs	r5, #0
   85f2e:	e009      	b.n	85f44 <_fputwc_r+0x5c>
   85f30:	6823      	ldr	r3, [r4, #0]
   85f32:	7019      	strb	r1, [r3, #0]
   85f34:	6823      	ldr	r3, [r4, #0]
   85f36:	3301      	adds	r3, #1
   85f38:	6023      	str	r3, [r4, #0]
   85f3a:	3501      	adds	r5, #1
   85f3c:	42b5      	cmp	r5, r6
   85f3e:	d22e      	bcs.n	85f9e <_fputwc_r+0xb6>
   85f40:	ab01      	add	r3, sp, #4
   85f42:	5ce9      	ldrb	r1, [r5, r3]
   85f44:	68a3      	ldr	r3, [r4, #8]
   85f46:	3b01      	subs	r3, #1
   85f48:	2b00      	cmp	r3, #0
   85f4a:	60a3      	str	r3, [r4, #8]
   85f4c:	daf0      	bge.n	85f30 <_fputwc_r+0x48>
   85f4e:	69a2      	ldr	r2, [r4, #24]
   85f50:	4293      	cmp	r3, r2
   85f52:	db06      	blt.n	85f62 <_fputwc_r+0x7a>
   85f54:	6823      	ldr	r3, [r4, #0]
   85f56:	7019      	strb	r1, [r3, #0]
   85f58:	6823      	ldr	r3, [r4, #0]
   85f5a:	7819      	ldrb	r1, [r3, #0]
   85f5c:	3301      	adds	r3, #1
   85f5e:	290a      	cmp	r1, #10
   85f60:	d1ea      	bne.n	85f38 <_fputwc_r+0x50>
   85f62:	4640      	mov	r0, r8
   85f64:	4622      	mov	r2, r4
   85f66:	f001 fe5b 	bl	87c20 <__swbuf_r>
   85f6a:	f1b0 33ff 	subs.w	r3, r0, #4294967295
   85f6e:	4258      	negs	r0, r3
   85f70:	4158      	adcs	r0, r3
   85f72:	2800      	cmp	r0, #0
   85f74:	d0e1      	beq.n	85f3a <_fputwc_r+0x52>
   85f76:	f04f 30ff 	mov.w	r0, #4294967295
   85f7a:	b002      	add	sp, #8
   85f7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85f80:	89a3      	ldrh	r3, [r4, #12]
   85f82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   85f86:	81a3      	strh	r3, [r4, #12]
   85f88:	b002      	add	sp, #8
   85f8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85f8e:	1e7b      	subs	r3, r7, #1
   85f90:	2bfe      	cmp	r3, #254	; 0xfe
   85f92:	d8bd      	bhi.n	85f10 <_fputwc_r+0x28>
   85f94:	b2f9      	uxtb	r1, r7
   85f96:	4606      	mov	r6, r0
   85f98:	f88d 1004 	strb.w	r1, [sp, #4]
   85f9c:	e7c6      	b.n	85f2c <_fputwc_r+0x44>
   85f9e:	4638      	mov	r0, r7
   85fa0:	b002      	add	sp, #8
   85fa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85fa6:	bf00      	nop

00085fa8 <_fread_r>:
   85fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85fac:	fb02 f503 	mul.w	r5, r2, r3
   85fb0:	b085      	sub	sp, #20
   85fb2:	4690      	mov	r8, r2
   85fb4:	9301      	str	r3, [sp, #4]
   85fb6:	4689      	mov	r9, r1
   85fb8:	4604      	mov	r4, r0
   85fba:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
   85fbe:	2d00      	cmp	r5, #0
   85fc0:	d046      	beq.n	86050 <_fread_r+0xa8>
   85fc2:	b118      	cbz	r0, 85fcc <_fread_r+0x24>
   85fc4:	6b82      	ldr	r2, [r0, #56]	; 0x38
   85fc6:	2a00      	cmp	r2, #0
   85fc8:	f000 80a7 	beq.w	8611a <_fread_r+0x172>
   85fcc:	f8bb 200c 	ldrh.w	r2, [fp, #12]
   85fd0:	b291      	uxth	r1, r2
   85fd2:	0488      	lsls	r0, r1, #18
   85fd4:	d40a      	bmi.n	85fec <_fread_r+0x44>
   85fd6:	f8db 1064 	ldr.w	r1, [fp, #100]	; 0x64
   85fda:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   85fde:	f421 5000 	bic.w	r0, r1, #8192	; 0x2000
   85fe2:	f8ab 200c 	strh.w	r2, [fp, #12]
   85fe6:	b291      	uxth	r1, r2
   85fe8:	f8cb 0064 	str.w	r0, [fp, #100]	; 0x64
   85fec:	f8db 7004 	ldr.w	r7, [fp, #4]
   85ff0:	2f00      	cmp	r7, #0
   85ff2:	db38      	blt.n	86066 <_fread_r+0xbe>
   85ff4:	078b      	lsls	r3, r1, #30
   85ff6:	46ba      	mov	sl, r7
   85ff8:	d43c      	bmi.n	86074 <_fread_r+0xcc>
   85ffa:	46aa      	mov	sl, r5
   85ffc:	e010      	b.n	86020 <_fread_r+0x78>
   85ffe:	f7fe f847 	bl	84090 <memcpy>
   86002:	f8db 2000 	ldr.w	r2, [fp]
   86006:	4620      	mov	r0, r4
   86008:	443a      	add	r2, r7
   8600a:	f8cb 2000 	str.w	r2, [fp]
   8600e:	4659      	mov	r1, fp
   86010:	44b9      	add	r9, r7
   86012:	ebc7 0a0a 	rsb	sl, r7, sl
   86016:	f001 f98d 	bl	87334 <__srefill_r>
   8601a:	b9e8      	cbnz	r0, 86058 <_fread_r+0xb0>
   8601c:	f8db 7004 	ldr.w	r7, [fp, #4]
   86020:	45ba      	cmp	sl, r7
   86022:	463a      	mov	r2, r7
   86024:	4648      	mov	r0, r9
   86026:	f8db 1000 	ldr.w	r1, [fp]
   8602a:	d8e8      	bhi.n	85ffe <_fread_r+0x56>
   8602c:	4652      	mov	r2, sl
   8602e:	f7fe f82f 	bl	84090 <memcpy>
   86032:	f8db 1004 	ldr.w	r1, [fp, #4]
   86036:	f8db 2000 	ldr.w	r2, [fp]
   8603a:	ebca 0101 	rsb	r1, sl, r1
   8603e:	4452      	add	r2, sl
   86040:	9801      	ldr	r0, [sp, #4]
   86042:	f8cb 1004 	str.w	r1, [fp, #4]
   86046:	f8cb 2000 	str.w	r2, [fp]
   8604a:	b005      	add	sp, #20
   8604c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86050:	4628      	mov	r0, r5
   86052:	b005      	add	sp, #20
   86054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86058:	ebca 0505 	rsb	r5, sl, r5
   8605c:	fbb5 f0f8 	udiv	r0, r5, r8
   86060:	b005      	add	sp, #20
   86062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86066:	2200      	movs	r2, #0
   86068:	078b      	lsls	r3, r1, #30
   8606a:	4692      	mov	sl, r2
   8606c:	f8cb 2004 	str.w	r2, [fp, #4]
   86070:	4617      	mov	r7, r2
   86072:	d5c2      	bpl.n	85ffa <_fread_r+0x52>
   86074:	45aa      	cmp	sl, r5
   86076:	bf28      	it	cs
   86078:	46aa      	movcs	sl, r5
   8607a:	4652      	mov	r2, sl
   8607c:	f8db 1000 	ldr.w	r1, [fp]
   86080:	4648      	mov	r0, r9
   86082:	f7fe f805 	bl	84090 <memcpy>
   86086:	f8db 7000 	ldr.w	r7, [fp]
   8608a:	f8db 2004 	ldr.w	r2, [fp, #4]
   8608e:	f8db 1030 	ldr.w	r1, [fp, #48]	; 0x30
   86092:	4457      	add	r7, sl
   86094:	ebca 0202 	rsb	r2, sl, r2
   86098:	9702      	str	r7, [sp, #8]
   8609a:	f8cb 7000 	str.w	r7, [fp]
   8609e:	eb09 060a 	add.w	r6, r9, sl
   860a2:	f8cb 2004 	str.w	r2, [fp, #4]
   860a6:	ebca 0705 	rsb	r7, sl, r5
   860aa:	2900      	cmp	r1, #0
   860ac:	d03e      	beq.n	8612c <_fread_r+0x184>
   860ae:	2f00      	cmp	r7, #0
   860b0:	d03e      	beq.n	86130 <_fread_r+0x188>
   860b2:	f10b 0040 	add.w	r0, fp, #64	; 0x40
   860b6:	4281      	cmp	r1, r0
   860b8:	d005      	beq.n	860c6 <_fread_r+0x11e>
   860ba:	4620      	mov	r0, r4
   860bc:	f000 f88a 	bl	861d4 <_free_r>
   860c0:	f8db 3000 	ldr.w	r3, [fp]
   860c4:	9302      	str	r3, [sp, #8]
   860c6:	2100      	movs	r1, #0
   860c8:	f8cb 1030 	str.w	r1, [fp, #48]	; 0x30
   860cc:	f8db 3010 	ldr.w	r3, [fp, #16]
   860d0:	f8db a014 	ldr.w	sl, [fp, #20]
   860d4:	9303      	str	r3, [sp, #12]
   860d6:	f04f 0900 	mov.w	r9, #0
   860da:	e000      	b.n	860de <_fread_r+0x136>
   860dc:	b347      	cbz	r7, 86130 <_fread_r+0x188>
   860de:	f8cb 6010 	str.w	r6, [fp, #16]
   860e2:	f8cb 7014 	str.w	r7, [fp, #20]
   860e6:	f8cb 6000 	str.w	r6, [fp]
   860ea:	4659      	mov	r1, fp
   860ec:	4620      	mov	r0, r4
   860ee:	f001 f921 	bl	87334 <__srefill_r>
   860f2:	9b03      	ldr	r3, [sp, #12]
   860f4:	f8db 1004 	ldr.w	r1, [fp, #4]
   860f8:	f8cb 3010 	str.w	r3, [fp, #16]
   860fc:	9b02      	ldr	r3, [sp, #8]
   860fe:	f8cb a014 	str.w	sl, [fp, #20]
   86102:	f8cb 3000 	str.w	r3, [fp]
   86106:	1a7f      	subs	r7, r7, r1
   86108:	440e      	add	r6, r1
   8610a:	f8cb 9004 	str.w	r9, [fp, #4]
   8610e:	2800      	cmp	r0, #0
   86110:	d0e4      	beq.n	860dc <_fread_r+0x134>
   86112:	1bed      	subs	r5, r5, r7
   86114:	fbb5 f0f8 	udiv	r0, r5, r8
   86118:	e797      	b.n	8604a <_fread_r+0xa2>
   8611a:	f7ff fe4f 	bl	85dbc <__sinit>
   8611e:	f8bb 200c 	ldrh.w	r2, [fp, #12]
   86122:	b291      	uxth	r1, r2
   86124:	0488      	lsls	r0, r1, #18
   86126:	f53f af61 	bmi.w	85fec <_fread_r+0x44>
   8612a:	e754      	b.n	85fd6 <_fread_r+0x2e>
   8612c:	2f00      	cmp	r7, #0
   8612e:	d1cd      	bne.n	860cc <_fread_r+0x124>
   86130:	9801      	ldr	r0, [sp, #4]
   86132:	b005      	add	sp, #20
   86134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00086138 <_malloc_trim_r>:
   86138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8613a:	4d23      	ldr	r5, [pc, #140]	; (861c8 <_malloc_trim_r+0x90>)
   8613c:	460f      	mov	r7, r1
   8613e:	4604      	mov	r4, r0
   86140:	f000 ff0a 	bl	86f58 <__malloc_lock>
   86144:	68ab      	ldr	r3, [r5, #8]
   86146:	685e      	ldr	r6, [r3, #4]
   86148:	f026 0603 	bic.w	r6, r6, #3
   8614c:	1bf1      	subs	r1, r6, r7
   8614e:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   86152:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   86156:	f021 010f 	bic.w	r1, r1, #15
   8615a:	f5a1 5780 	sub.w	r7, r1, #4096	; 0x1000
   8615e:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
   86162:	db07      	blt.n	86174 <_malloc_trim_r+0x3c>
   86164:	4620      	mov	r0, r4
   86166:	2100      	movs	r1, #0
   86168:	f001 f96e 	bl	87448 <_sbrk_r>
   8616c:	68ab      	ldr	r3, [r5, #8]
   8616e:	4433      	add	r3, r6
   86170:	4298      	cmp	r0, r3
   86172:	d004      	beq.n	8617e <_malloc_trim_r+0x46>
   86174:	4620      	mov	r0, r4
   86176:	f000 fef1 	bl	86f5c <__malloc_unlock>
   8617a:	2000      	movs	r0, #0
   8617c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8617e:	4620      	mov	r0, r4
   86180:	4279      	negs	r1, r7
   86182:	f001 f961 	bl	87448 <_sbrk_r>
   86186:	3001      	adds	r0, #1
   86188:	d00d      	beq.n	861a6 <_malloc_trim_r+0x6e>
   8618a:	4b10      	ldr	r3, [pc, #64]	; (861cc <_malloc_trim_r+0x94>)
   8618c:	68aa      	ldr	r2, [r5, #8]
   8618e:	6819      	ldr	r1, [r3, #0]
   86190:	1bf6      	subs	r6, r6, r7
   86192:	f046 0601 	orr.w	r6, r6, #1
   86196:	4620      	mov	r0, r4
   86198:	1bc9      	subs	r1, r1, r7
   8619a:	6056      	str	r6, [r2, #4]
   8619c:	6019      	str	r1, [r3, #0]
   8619e:	f000 fedd 	bl	86f5c <__malloc_unlock>
   861a2:	2001      	movs	r0, #1
   861a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   861a6:	4620      	mov	r0, r4
   861a8:	2100      	movs	r1, #0
   861aa:	f001 f94d 	bl	87448 <_sbrk_r>
   861ae:	68ab      	ldr	r3, [r5, #8]
   861b0:	1ac2      	subs	r2, r0, r3
   861b2:	2a0f      	cmp	r2, #15
   861b4:	ddde      	ble.n	86174 <_malloc_trim_r+0x3c>
   861b6:	4d06      	ldr	r5, [pc, #24]	; (861d0 <_malloc_trim_r+0x98>)
   861b8:	4904      	ldr	r1, [pc, #16]	; (861cc <_malloc_trim_r+0x94>)
   861ba:	682d      	ldr	r5, [r5, #0]
   861bc:	f042 0201 	orr.w	r2, r2, #1
   861c0:	1b40      	subs	r0, r0, r5
   861c2:	605a      	str	r2, [r3, #4]
   861c4:	6008      	str	r0, [r1, #0]
   861c6:	e7d5      	b.n	86174 <_malloc_trim_r+0x3c>
   861c8:	20070664 	.word	0x20070664
   861cc:	2007ad3c 	.word	0x2007ad3c
   861d0:	20070a70 	.word	0x20070a70

000861d4 <_free_r>:
   861d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   861d8:	460d      	mov	r5, r1
   861da:	4606      	mov	r6, r0
   861dc:	2900      	cmp	r1, #0
   861de:	d055      	beq.n	8628c <_free_r+0xb8>
   861e0:	f000 feba 	bl	86f58 <__malloc_lock>
   861e4:	f855 1c04 	ldr.w	r1, [r5, #-4]
   861e8:	f8df c170 	ldr.w	ip, [pc, #368]	; 8635c <_free_r+0x188>
   861ec:	f1a5 0408 	sub.w	r4, r5, #8
   861f0:	f021 0301 	bic.w	r3, r1, #1
   861f4:	18e2      	adds	r2, r4, r3
   861f6:	f8dc 0008 	ldr.w	r0, [ip, #8]
   861fa:	6857      	ldr	r7, [r2, #4]
   861fc:	4290      	cmp	r0, r2
   861fe:	f027 0703 	bic.w	r7, r7, #3
   86202:	d068      	beq.n	862d6 <_free_r+0x102>
   86204:	f011 0101 	ands.w	r1, r1, #1
   86208:	6057      	str	r7, [r2, #4]
   8620a:	d032      	beq.n	86272 <_free_r+0x9e>
   8620c:	2100      	movs	r1, #0
   8620e:	19d0      	adds	r0, r2, r7
   86210:	6840      	ldr	r0, [r0, #4]
   86212:	07c0      	lsls	r0, r0, #31
   86214:	d406      	bmi.n	86224 <_free_r+0x50>
   86216:	443b      	add	r3, r7
   86218:	6890      	ldr	r0, [r2, #8]
   8621a:	2900      	cmp	r1, #0
   8621c:	d04d      	beq.n	862ba <_free_r+0xe6>
   8621e:	68d2      	ldr	r2, [r2, #12]
   86220:	60c2      	str	r2, [r0, #12]
   86222:	6090      	str	r0, [r2, #8]
   86224:	f043 0201 	orr.w	r2, r3, #1
   86228:	6062      	str	r2, [r4, #4]
   8622a:	50e3      	str	r3, [r4, r3]
   8622c:	b9e1      	cbnz	r1, 86268 <_free_r+0x94>
   8622e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   86232:	d32d      	bcc.n	86290 <_free_r+0xbc>
   86234:	0a5a      	lsrs	r2, r3, #9
   86236:	2a04      	cmp	r2, #4
   86238:	d869      	bhi.n	8630e <_free_r+0x13a>
   8623a:	0998      	lsrs	r0, r3, #6
   8623c:	3038      	adds	r0, #56	; 0x38
   8623e:	0041      	lsls	r1, r0, #1
   86240:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
   86244:	f8dc 2008 	ldr.w	r2, [ip, #8]
   86248:	4944      	ldr	r1, [pc, #272]	; (8635c <_free_r+0x188>)
   8624a:	4562      	cmp	r2, ip
   8624c:	d065      	beq.n	8631a <_free_r+0x146>
   8624e:	6851      	ldr	r1, [r2, #4]
   86250:	f021 0103 	bic.w	r1, r1, #3
   86254:	428b      	cmp	r3, r1
   86256:	d202      	bcs.n	8625e <_free_r+0x8a>
   86258:	6892      	ldr	r2, [r2, #8]
   8625a:	4594      	cmp	ip, r2
   8625c:	d1f7      	bne.n	8624e <_free_r+0x7a>
   8625e:	68d3      	ldr	r3, [r2, #12]
   86260:	60e3      	str	r3, [r4, #12]
   86262:	60a2      	str	r2, [r4, #8]
   86264:	609c      	str	r4, [r3, #8]
   86266:	60d4      	str	r4, [r2, #12]
   86268:	4630      	mov	r0, r6
   8626a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8626e:	f000 be75 	b.w	86f5c <__malloc_unlock>
   86272:	f855 5c08 	ldr.w	r5, [r5, #-8]
   86276:	f10c 0808 	add.w	r8, ip, #8
   8627a:	1b64      	subs	r4, r4, r5
   8627c:	68a0      	ldr	r0, [r4, #8]
   8627e:	442b      	add	r3, r5
   86280:	4540      	cmp	r0, r8
   86282:	d042      	beq.n	8630a <_free_r+0x136>
   86284:	68e5      	ldr	r5, [r4, #12]
   86286:	60c5      	str	r5, [r0, #12]
   86288:	60a8      	str	r0, [r5, #8]
   8628a:	e7c0      	b.n	8620e <_free_r+0x3a>
   8628c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   86290:	08db      	lsrs	r3, r3, #3
   86292:	109a      	asrs	r2, r3, #2
   86294:	2001      	movs	r0, #1
   86296:	4090      	lsls	r0, r2
   86298:	f8dc 1004 	ldr.w	r1, [ip, #4]
   8629c:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
   862a0:	689a      	ldr	r2, [r3, #8]
   862a2:	4301      	orrs	r1, r0
   862a4:	60a2      	str	r2, [r4, #8]
   862a6:	60e3      	str	r3, [r4, #12]
   862a8:	f8cc 1004 	str.w	r1, [ip, #4]
   862ac:	4630      	mov	r0, r6
   862ae:	609c      	str	r4, [r3, #8]
   862b0:	60d4      	str	r4, [r2, #12]
   862b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   862b6:	f000 be51 	b.w	86f5c <__malloc_unlock>
   862ba:	4d29      	ldr	r5, [pc, #164]	; (86360 <_free_r+0x18c>)
   862bc:	42a8      	cmp	r0, r5
   862be:	d1ae      	bne.n	8621e <_free_r+0x4a>
   862c0:	f043 0201 	orr.w	r2, r3, #1
   862c4:	f8cc 4014 	str.w	r4, [ip, #20]
   862c8:	f8cc 4010 	str.w	r4, [ip, #16]
   862cc:	60e0      	str	r0, [r4, #12]
   862ce:	60a0      	str	r0, [r4, #8]
   862d0:	6062      	str	r2, [r4, #4]
   862d2:	50e3      	str	r3, [r4, r3]
   862d4:	e7c8      	b.n	86268 <_free_r+0x94>
   862d6:	441f      	add	r7, r3
   862d8:	07cb      	lsls	r3, r1, #31
   862da:	d407      	bmi.n	862ec <_free_r+0x118>
   862dc:	f855 1c08 	ldr.w	r1, [r5, #-8]
   862e0:	1a64      	subs	r4, r4, r1
   862e2:	68e3      	ldr	r3, [r4, #12]
   862e4:	68a2      	ldr	r2, [r4, #8]
   862e6:	440f      	add	r7, r1
   862e8:	60d3      	str	r3, [r2, #12]
   862ea:	609a      	str	r2, [r3, #8]
   862ec:	4b1d      	ldr	r3, [pc, #116]	; (86364 <_free_r+0x190>)
   862ee:	f047 0201 	orr.w	r2, r7, #1
   862f2:	681b      	ldr	r3, [r3, #0]
   862f4:	6062      	str	r2, [r4, #4]
   862f6:	429f      	cmp	r7, r3
   862f8:	f8cc 4008 	str.w	r4, [ip, #8]
   862fc:	d3b4      	bcc.n	86268 <_free_r+0x94>
   862fe:	4b1a      	ldr	r3, [pc, #104]	; (86368 <_free_r+0x194>)
   86300:	4630      	mov	r0, r6
   86302:	6819      	ldr	r1, [r3, #0]
   86304:	f7ff ff18 	bl	86138 <_malloc_trim_r>
   86308:	e7ae      	b.n	86268 <_free_r+0x94>
   8630a:	2101      	movs	r1, #1
   8630c:	e77f      	b.n	8620e <_free_r+0x3a>
   8630e:	2a14      	cmp	r2, #20
   86310:	d80b      	bhi.n	8632a <_free_r+0x156>
   86312:	f102 005b 	add.w	r0, r2, #91	; 0x5b
   86316:	0041      	lsls	r1, r0, #1
   86318:	e792      	b.n	86240 <_free_r+0x6c>
   8631a:	1080      	asrs	r0, r0, #2
   8631c:	2501      	movs	r5, #1
   8631e:	4085      	lsls	r5, r0
   86320:	6848      	ldr	r0, [r1, #4]
   86322:	4613      	mov	r3, r2
   86324:	4328      	orrs	r0, r5
   86326:	6048      	str	r0, [r1, #4]
   86328:	e79a      	b.n	86260 <_free_r+0x8c>
   8632a:	2a54      	cmp	r2, #84	; 0x54
   8632c:	d803      	bhi.n	86336 <_free_r+0x162>
   8632e:	0b18      	lsrs	r0, r3, #12
   86330:	306e      	adds	r0, #110	; 0x6e
   86332:	0041      	lsls	r1, r0, #1
   86334:	e784      	b.n	86240 <_free_r+0x6c>
   86336:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   8633a:	d803      	bhi.n	86344 <_free_r+0x170>
   8633c:	0bd8      	lsrs	r0, r3, #15
   8633e:	3077      	adds	r0, #119	; 0x77
   86340:	0041      	lsls	r1, r0, #1
   86342:	e77d      	b.n	86240 <_free_r+0x6c>
   86344:	f240 5154 	movw	r1, #1364	; 0x554
   86348:	428a      	cmp	r2, r1
   8634a:	d803      	bhi.n	86354 <_free_r+0x180>
   8634c:	0c98      	lsrs	r0, r3, #18
   8634e:	307c      	adds	r0, #124	; 0x7c
   86350:	0041      	lsls	r1, r0, #1
   86352:	e775      	b.n	86240 <_free_r+0x6c>
   86354:	21fc      	movs	r1, #252	; 0xfc
   86356:	207e      	movs	r0, #126	; 0x7e
   86358:	e772      	b.n	86240 <_free_r+0x6c>
   8635a:	bf00      	nop
   8635c:	20070664 	.word	0x20070664
   86360:	2007066c 	.word	0x2007066c
   86364:	20070a6c 	.word	0x20070a6c
   86368:	2007ad38 	.word	0x2007ad38

0008636c <__sfvwrite_r>:
   8636c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   86370:	6893      	ldr	r3, [r2, #8]
   86372:	b083      	sub	sp, #12
   86374:	4616      	mov	r6, r2
   86376:	4681      	mov	r9, r0
   86378:	460c      	mov	r4, r1
   8637a:	b32b      	cbz	r3, 863c8 <__sfvwrite_r+0x5c>
   8637c:	898b      	ldrh	r3, [r1, #12]
   8637e:	0719      	lsls	r1, r3, #28
   86380:	d526      	bpl.n	863d0 <__sfvwrite_r+0x64>
   86382:	6922      	ldr	r2, [r4, #16]
   86384:	b322      	cbz	r2, 863d0 <__sfvwrite_r+0x64>
   86386:	f003 0202 	and.w	r2, r3, #2
   8638a:	b292      	uxth	r2, r2
   8638c:	6835      	ldr	r5, [r6, #0]
   8638e:	2a00      	cmp	r2, #0
   86390:	d02c      	beq.n	863ec <__sfvwrite_r+0x80>
   86392:	f04f 0a00 	mov.w	sl, #0
   86396:	f8df b2e8 	ldr.w	fp, [pc, #744]	; 86680 <__sfvwrite_r+0x314>
   8639a:	46d0      	mov	r8, sl
   8639c:	45d8      	cmp	r8, fp
   8639e:	bf34      	ite	cc
   863a0:	4643      	movcc	r3, r8
   863a2:	465b      	movcs	r3, fp
   863a4:	4652      	mov	r2, sl
   863a6:	4648      	mov	r0, r9
   863a8:	f1b8 0f00 	cmp.w	r8, #0
   863ac:	d04f      	beq.n	8644e <__sfvwrite_r+0xe2>
   863ae:	69e1      	ldr	r1, [r4, #28]
   863b0:	6a67      	ldr	r7, [r4, #36]	; 0x24
   863b2:	47b8      	blx	r7
   863b4:	2800      	cmp	r0, #0
   863b6:	dd56      	ble.n	86466 <__sfvwrite_r+0xfa>
   863b8:	68b3      	ldr	r3, [r6, #8]
   863ba:	4482      	add	sl, r0
   863bc:	1a1b      	subs	r3, r3, r0
   863be:	ebc0 0808 	rsb	r8, r0, r8
   863c2:	60b3      	str	r3, [r6, #8]
   863c4:	2b00      	cmp	r3, #0
   863c6:	d1e9      	bne.n	8639c <__sfvwrite_r+0x30>
   863c8:	2000      	movs	r0, #0
   863ca:	b003      	add	sp, #12
   863cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   863d0:	4648      	mov	r0, r9
   863d2:	4621      	mov	r1, r4
   863d4:	f7ff fbae 	bl	85b34 <__swsetup_r>
   863d8:	2800      	cmp	r0, #0
   863da:	f040 8148 	bne.w	8666e <__sfvwrite_r+0x302>
   863de:	89a3      	ldrh	r3, [r4, #12]
   863e0:	6835      	ldr	r5, [r6, #0]
   863e2:	f003 0202 	and.w	r2, r3, #2
   863e6:	b292      	uxth	r2, r2
   863e8:	2a00      	cmp	r2, #0
   863ea:	d1d2      	bne.n	86392 <__sfvwrite_r+0x26>
   863ec:	f013 0a01 	ands.w	sl, r3, #1
   863f0:	d142      	bne.n	86478 <__sfvwrite_r+0x10c>
   863f2:	46d0      	mov	r8, sl
   863f4:	f1b8 0f00 	cmp.w	r8, #0
   863f8:	d023      	beq.n	86442 <__sfvwrite_r+0xd6>
   863fa:	059a      	lsls	r2, r3, #22
   863fc:	68a7      	ldr	r7, [r4, #8]
   863fe:	d576      	bpl.n	864ee <__sfvwrite_r+0x182>
   86400:	45b8      	cmp	r8, r7
   86402:	f0c0 80a4 	bcc.w	8654e <__sfvwrite_r+0x1e2>
   86406:	f413 6f90 	tst.w	r3, #1152	; 0x480
   8640a:	f040 80b2 	bne.w	86572 <__sfvwrite_r+0x206>
   8640e:	6820      	ldr	r0, [r4, #0]
   86410:	46bb      	mov	fp, r7
   86412:	4651      	mov	r1, sl
   86414:	465a      	mov	r2, fp
   86416:	f000 fd39 	bl	86e8c <memmove>
   8641a:	68a2      	ldr	r2, [r4, #8]
   8641c:	6821      	ldr	r1, [r4, #0]
   8641e:	1bd2      	subs	r2, r2, r7
   86420:	eb01 030b 	add.w	r3, r1, fp
   86424:	60a2      	str	r2, [r4, #8]
   86426:	6023      	str	r3, [r4, #0]
   86428:	4642      	mov	r2, r8
   8642a:	68b3      	ldr	r3, [r6, #8]
   8642c:	4492      	add	sl, r2
   8642e:	1a9b      	subs	r3, r3, r2
   86430:	ebc2 0808 	rsb	r8, r2, r8
   86434:	60b3      	str	r3, [r6, #8]
   86436:	2b00      	cmp	r3, #0
   86438:	d0c6      	beq.n	863c8 <__sfvwrite_r+0x5c>
   8643a:	89a3      	ldrh	r3, [r4, #12]
   8643c:	f1b8 0f00 	cmp.w	r8, #0
   86440:	d1db      	bne.n	863fa <__sfvwrite_r+0x8e>
   86442:	f8d5 a000 	ldr.w	sl, [r5]
   86446:	f8d5 8004 	ldr.w	r8, [r5, #4]
   8644a:	3508      	adds	r5, #8
   8644c:	e7d2      	b.n	863f4 <__sfvwrite_r+0x88>
   8644e:	f8d5 a000 	ldr.w	sl, [r5]
   86452:	f8d5 8004 	ldr.w	r8, [r5, #4]
   86456:	3508      	adds	r5, #8
   86458:	e7a0      	b.n	8639c <__sfvwrite_r+0x30>
   8645a:	4648      	mov	r0, r9
   8645c:	4621      	mov	r1, r4
   8645e:	f7ff fc7f 	bl	85d60 <_fflush_r>
   86462:	2800      	cmp	r0, #0
   86464:	d059      	beq.n	8651a <__sfvwrite_r+0x1ae>
   86466:	89a3      	ldrh	r3, [r4, #12]
   86468:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8646c:	f04f 30ff 	mov.w	r0, #4294967295
   86470:	81a3      	strh	r3, [r4, #12]
   86472:	b003      	add	sp, #12
   86474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86478:	4692      	mov	sl, r2
   8647a:	9201      	str	r2, [sp, #4]
   8647c:	4693      	mov	fp, r2
   8647e:	4690      	mov	r8, r2
   86480:	f1b8 0f00 	cmp.w	r8, #0
   86484:	d02b      	beq.n	864de <__sfvwrite_r+0x172>
   86486:	9f01      	ldr	r7, [sp, #4]
   86488:	2f00      	cmp	r7, #0
   8648a:	d064      	beq.n	86556 <__sfvwrite_r+0x1ea>
   8648c:	6820      	ldr	r0, [r4, #0]
   8648e:	6921      	ldr	r1, [r4, #16]
   86490:	45c2      	cmp	sl, r8
   86492:	bf34      	ite	cc
   86494:	4653      	movcc	r3, sl
   86496:	4643      	movcs	r3, r8
   86498:	4288      	cmp	r0, r1
   8649a:	461f      	mov	r7, r3
   8649c:	f8d4 c008 	ldr.w	ip, [r4, #8]
   864a0:	6962      	ldr	r2, [r4, #20]
   864a2:	d903      	bls.n	864ac <__sfvwrite_r+0x140>
   864a4:	4494      	add	ip, r2
   864a6:	4563      	cmp	r3, ip
   864a8:	f300 80ae 	bgt.w	86608 <__sfvwrite_r+0x29c>
   864ac:	4293      	cmp	r3, r2
   864ae:	db36      	blt.n	8651e <__sfvwrite_r+0x1b2>
   864b0:	4613      	mov	r3, r2
   864b2:	6a67      	ldr	r7, [r4, #36]	; 0x24
   864b4:	4648      	mov	r0, r9
   864b6:	69e1      	ldr	r1, [r4, #28]
   864b8:	465a      	mov	r2, fp
   864ba:	47b8      	blx	r7
   864bc:	1e07      	subs	r7, r0, #0
   864be:	ddd2      	ble.n	86466 <__sfvwrite_r+0xfa>
   864c0:	ebba 0a07 	subs.w	sl, sl, r7
   864c4:	d03a      	beq.n	8653c <__sfvwrite_r+0x1d0>
   864c6:	68b3      	ldr	r3, [r6, #8]
   864c8:	44bb      	add	fp, r7
   864ca:	1bdb      	subs	r3, r3, r7
   864cc:	ebc7 0808 	rsb	r8, r7, r8
   864d0:	60b3      	str	r3, [r6, #8]
   864d2:	2b00      	cmp	r3, #0
   864d4:	f43f af78 	beq.w	863c8 <__sfvwrite_r+0x5c>
   864d8:	f1b8 0f00 	cmp.w	r8, #0
   864dc:	d1d3      	bne.n	86486 <__sfvwrite_r+0x11a>
   864de:	2700      	movs	r7, #0
   864e0:	f8d5 b000 	ldr.w	fp, [r5]
   864e4:	f8d5 8004 	ldr.w	r8, [r5, #4]
   864e8:	9701      	str	r7, [sp, #4]
   864ea:	3508      	adds	r5, #8
   864ec:	e7c8      	b.n	86480 <__sfvwrite_r+0x114>
   864ee:	6820      	ldr	r0, [r4, #0]
   864f0:	6923      	ldr	r3, [r4, #16]
   864f2:	4298      	cmp	r0, r3
   864f4:	d802      	bhi.n	864fc <__sfvwrite_r+0x190>
   864f6:	6963      	ldr	r3, [r4, #20]
   864f8:	4598      	cmp	r8, r3
   864fa:	d272      	bcs.n	865e2 <__sfvwrite_r+0x276>
   864fc:	45b8      	cmp	r8, r7
   864fe:	bf38      	it	cc
   86500:	4647      	movcc	r7, r8
   86502:	463a      	mov	r2, r7
   86504:	4651      	mov	r1, sl
   86506:	f000 fcc1 	bl	86e8c <memmove>
   8650a:	68a3      	ldr	r3, [r4, #8]
   8650c:	6822      	ldr	r2, [r4, #0]
   8650e:	1bdb      	subs	r3, r3, r7
   86510:	443a      	add	r2, r7
   86512:	60a3      	str	r3, [r4, #8]
   86514:	6022      	str	r2, [r4, #0]
   86516:	2b00      	cmp	r3, #0
   86518:	d09f      	beq.n	8645a <__sfvwrite_r+0xee>
   8651a:	463a      	mov	r2, r7
   8651c:	e785      	b.n	8642a <__sfvwrite_r+0xbe>
   8651e:	461a      	mov	r2, r3
   86520:	4659      	mov	r1, fp
   86522:	9300      	str	r3, [sp, #0]
   86524:	f000 fcb2 	bl	86e8c <memmove>
   86528:	9b00      	ldr	r3, [sp, #0]
   8652a:	68a1      	ldr	r1, [r4, #8]
   8652c:	6822      	ldr	r2, [r4, #0]
   8652e:	1ac9      	subs	r1, r1, r3
   86530:	ebba 0a07 	subs.w	sl, sl, r7
   86534:	4413      	add	r3, r2
   86536:	60a1      	str	r1, [r4, #8]
   86538:	6023      	str	r3, [r4, #0]
   8653a:	d1c4      	bne.n	864c6 <__sfvwrite_r+0x15a>
   8653c:	4648      	mov	r0, r9
   8653e:	4621      	mov	r1, r4
   86540:	f7ff fc0e 	bl	85d60 <_fflush_r>
   86544:	2800      	cmp	r0, #0
   86546:	d18e      	bne.n	86466 <__sfvwrite_r+0xfa>
   86548:	f8cd a004 	str.w	sl, [sp, #4]
   8654c:	e7bb      	b.n	864c6 <__sfvwrite_r+0x15a>
   8654e:	6820      	ldr	r0, [r4, #0]
   86550:	4647      	mov	r7, r8
   86552:	46c3      	mov	fp, r8
   86554:	e75d      	b.n	86412 <__sfvwrite_r+0xa6>
   86556:	4658      	mov	r0, fp
   86558:	210a      	movs	r1, #10
   8655a:	4642      	mov	r2, r8
   8655c:	f000 fc4c 	bl	86df8 <memchr>
   86560:	2800      	cmp	r0, #0
   86562:	d07f      	beq.n	86664 <__sfvwrite_r+0x2f8>
   86564:	f100 0a01 	add.w	sl, r0, #1
   86568:	2701      	movs	r7, #1
   8656a:	ebcb 0a0a 	rsb	sl, fp, sl
   8656e:	9701      	str	r7, [sp, #4]
   86570:	e78c      	b.n	8648c <__sfvwrite_r+0x120>
   86572:	6822      	ldr	r2, [r4, #0]
   86574:	6921      	ldr	r1, [r4, #16]
   86576:	6967      	ldr	r7, [r4, #20]
   86578:	ebc1 0c02 	rsb	ip, r1, r2
   8657c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   86580:	f10c 0201 	add.w	r2, ip, #1
   86584:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   86588:	4442      	add	r2, r8
   8658a:	107f      	asrs	r7, r7, #1
   8658c:	4297      	cmp	r7, r2
   8658e:	bf34      	ite	cc
   86590:	4617      	movcc	r7, r2
   86592:	463a      	movcs	r2, r7
   86594:	055b      	lsls	r3, r3, #21
   86596:	d54f      	bpl.n	86638 <__sfvwrite_r+0x2cc>
   86598:	4611      	mov	r1, r2
   8659a:	4648      	mov	r0, r9
   8659c:	f8cd c000 	str.w	ip, [sp]
   865a0:	f000 f94a 	bl	86838 <_malloc_r>
   865a4:	f8dd c000 	ldr.w	ip, [sp]
   865a8:	4683      	mov	fp, r0
   865aa:	2800      	cmp	r0, #0
   865ac:	d062      	beq.n	86674 <__sfvwrite_r+0x308>
   865ae:	4662      	mov	r2, ip
   865b0:	6921      	ldr	r1, [r4, #16]
   865b2:	f8cd c000 	str.w	ip, [sp]
   865b6:	f7fd fd6b 	bl	84090 <memcpy>
   865ba:	89a2      	ldrh	r2, [r4, #12]
   865bc:	f8dd c000 	ldr.w	ip, [sp]
   865c0:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   865c4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   865c8:	81a2      	strh	r2, [r4, #12]
   865ca:	eb0b 000c 	add.w	r0, fp, ip
   865ce:	ebcc 0207 	rsb	r2, ip, r7
   865d2:	f8c4 b010 	str.w	fp, [r4, #16]
   865d6:	6167      	str	r7, [r4, #20]
   865d8:	6020      	str	r0, [r4, #0]
   865da:	60a2      	str	r2, [r4, #8]
   865dc:	4647      	mov	r7, r8
   865de:	46c3      	mov	fp, r8
   865e0:	e717      	b.n	86412 <__sfvwrite_r+0xa6>
   865e2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   865e6:	4590      	cmp	r8, r2
   865e8:	bf38      	it	cc
   865ea:	4642      	movcc	r2, r8
   865ec:	fb92 f2f3 	sdiv	r2, r2, r3
   865f0:	fb02 f303 	mul.w	r3, r2, r3
   865f4:	6a67      	ldr	r7, [r4, #36]	; 0x24
   865f6:	4648      	mov	r0, r9
   865f8:	69e1      	ldr	r1, [r4, #28]
   865fa:	4652      	mov	r2, sl
   865fc:	47b8      	blx	r7
   865fe:	2800      	cmp	r0, #0
   86600:	f77f af31 	ble.w	86466 <__sfvwrite_r+0xfa>
   86604:	4602      	mov	r2, r0
   86606:	e710      	b.n	8642a <__sfvwrite_r+0xbe>
   86608:	4662      	mov	r2, ip
   8660a:	4659      	mov	r1, fp
   8660c:	f8cd c000 	str.w	ip, [sp]
   86610:	f000 fc3c 	bl	86e8c <memmove>
   86614:	f8dd c000 	ldr.w	ip, [sp]
   86618:	6823      	ldr	r3, [r4, #0]
   8661a:	4648      	mov	r0, r9
   8661c:	4463      	add	r3, ip
   8661e:	6023      	str	r3, [r4, #0]
   86620:	4621      	mov	r1, r4
   86622:	f8cd c000 	str.w	ip, [sp]
   86626:	f7ff fb9b 	bl	85d60 <_fflush_r>
   8662a:	f8dd c000 	ldr.w	ip, [sp]
   8662e:	2800      	cmp	r0, #0
   86630:	f47f af19 	bne.w	86466 <__sfvwrite_r+0xfa>
   86634:	4667      	mov	r7, ip
   86636:	e743      	b.n	864c0 <__sfvwrite_r+0x154>
   86638:	4648      	mov	r0, r9
   8663a:	f8cd c000 	str.w	ip, [sp]
   8663e:	f000 fc8f 	bl	86f60 <_realloc_r>
   86642:	f8dd c000 	ldr.w	ip, [sp]
   86646:	4683      	mov	fp, r0
   86648:	2800      	cmp	r0, #0
   8664a:	d1be      	bne.n	865ca <__sfvwrite_r+0x25e>
   8664c:	4648      	mov	r0, r9
   8664e:	6921      	ldr	r1, [r4, #16]
   86650:	f7ff fdc0 	bl	861d4 <_free_r>
   86654:	89a3      	ldrh	r3, [r4, #12]
   86656:	220c      	movs	r2, #12
   86658:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   8665c:	b29b      	uxth	r3, r3
   8665e:	f8c9 2000 	str.w	r2, [r9]
   86662:	e701      	b.n	86468 <__sfvwrite_r+0xfc>
   86664:	2701      	movs	r7, #1
   86666:	f108 0a01 	add.w	sl, r8, #1
   8666a:	9701      	str	r7, [sp, #4]
   8666c:	e70e      	b.n	8648c <__sfvwrite_r+0x120>
   8666e:	f04f 30ff 	mov.w	r0, #4294967295
   86672:	e6aa      	b.n	863ca <__sfvwrite_r+0x5e>
   86674:	230c      	movs	r3, #12
   86676:	f8c9 3000 	str.w	r3, [r9]
   8667a:	89a3      	ldrh	r3, [r4, #12]
   8667c:	e6f4      	b.n	86468 <__sfvwrite_r+0xfc>
   8667e:	bf00      	nop
   86680:	7ffffc00 	.word	0x7ffffc00

00086684 <_fwalk>:
   86684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   86688:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
   8668c:	4688      	mov	r8, r1
   8668e:	d019      	beq.n	866c4 <_fwalk+0x40>
   86690:	2600      	movs	r6, #0
   86692:	687d      	ldr	r5, [r7, #4]
   86694:	68bc      	ldr	r4, [r7, #8]
   86696:	3d01      	subs	r5, #1
   86698:	d40e      	bmi.n	866b8 <_fwalk+0x34>
   8669a:	89a3      	ldrh	r3, [r4, #12]
   8669c:	3d01      	subs	r5, #1
   8669e:	2b01      	cmp	r3, #1
   866a0:	d906      	bls.n	866b0 <_fwalk+0x2c>
   866a2:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   866a6:	4620      	mov	r0, r4
   866a8:	3301      	adds	r3, #1
   866aa:	d001      	beq.n	866b0 <_fwalk+0x2c>
   866ac:	47c0      	blx	r8
   866ae:	4306      	orrs	r6, r0
   866b0:	1c6b      	adds	r3, r5, #1
   866b2:	f104 0468 	add.w	r4, r4, #104	; 0x68
   866b6:	d1f0      	bne.n	8669a <_fwalk+0x16>
   866b8:	683f      	ldr	r7, [r7, #0]
   866ba:	2f00      	cmp	r7, #0
   866bc:	d1e9      	bne.n	86692 <_fwalk+0xe>
   866be:	4630      	mov	r0, r6
   866c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   866c4:	463e      	mov	r6, r7
   866c6:	4630      	mov	r0, r6
   866c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000866cc <_fwalk_reent>:
   866cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   866d0:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   866d4:	4680      	mov	r8, r0
   866d6:	4689      	mov	r9, r1
   866d8:	d01a      	beq.n	86710 <_fwalk_reent+0x44>
   866da:	2700      	movs	r7, #0
   866dc:	6875      	ldr	r5, [r6, #4]
   866de:	68b4      	ldr	r4, [r6, #8]
   866e0:	3d01      	subs	r5, #1
   866e2:	d40f      	bmi.n	86704 <_fwalk_reent+0x38>
   866e4:	89a3      	ldrh	r3, [r4, #12]
   866e6:	3d01      	subs	r5, #1
   866e8:	2b01      	cmp	r3, #1
   866ea:	d907      	bls.n	866fc <_fwalk_reent+0x30>
   866ec:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   866f0:	4621      	mov	r1, r4
   866f2:	3301      	adds	r3, #1
   866f4:	4640      	mov	r0, r8
   866f6:	d001      	beq.n	866fc <_fwalk_reent+0x30>
   866f8:	47c8      	blx	r9
   866fa:	4307      	orrs	r7, r0
   866fc:	1c6b      	adds	r3, r5, #1
   866fe:	f104 0468 	add.w	r4, r4, #104	; 0x68
   86702:	d1ef      	bne.n	866e4 <_fwalk_reent+0x18>
   86704:	6836      	ldr	r6, [r6, #0]
   86706:	2e00      	cmp	r6, #0
   86708:	d1e8      	bne.n	866dc <_fwalk_reent+0x10>
   8670a:	4638      	mov	r0, r7
   8670c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   86710:	4637      	mov	r7, r6
   86712:	4638      	mov	r0, r7
   86714:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00086718 <iswspace>:
   86718:	28ff      	cmp	r0, #255	; 0xff
   8671a:	d807      	bhi.n	8672c <iswspace+0x14>
   8671c:	4b04      	ldr	r3, [pc, #16]	; (86730 <iswspace+0x18>)
   8671e:	681b      	ldr	r3, [r3, #0]
   86720:	4418      	add	r0, r3
   86722:	7840      	ldrb	r0, [r0, #1]
   86724:	f000 0008 	and.w	r0, r0, #8
   86728:	b2c0      	uxtb	r0, r0
   8672a:	4770      	bx	lr
   8672c:	2000      	movs	r0, #0
   8672e:	4770      	bx	lr
   86730:	2007063c 	.word	0x2007063c

00086734 <__locale_charset>:
   86734:	4800      	ldr	r0, [pc, #0]	; (86738 <__locale_charset+0x4>)
   86736:	4770      	bx	lr
   86738:	20070640 	.word	0x20070640

0008673c <__locale_mb_cur_max>:
   8673c:	4b01      	ldr	r3, [pc, #4]	; (86744 <__locale_mb_cur_max+0x8>)
   8673e:	6818      	ldr	r0, [r3, #0]
   86740:	4770      	bx	lr
   86742:	bf00      	nop
   86744:	20070660 	.word	0x20070660

00086748 <__smakebuf_r>:
   86748:	b5f0      	push	{r4, r5, r6, r7, lr}
   8674a:	898b      	ldrh	r3, [r1, #12]
   8674c:	b091      	sub	sp, #68	; 0x44
   8674e:	b29a      	uxth	r2, r3
   86750:	0796      	lsls	r6, r2, #30
   86752:	460c      	mov	r4, r1
   86754:	4605      	mov	r5, r0
   86756:	d437      	bmi.n	867c8 <__smakebuf_r+0x80>
   86758:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8675c:	2900      	cmp	r1, #0
   8675e:	db17      	blt.n	86790 <__smakebuf_r+0x48>
   86760:	aa01      	add	r2, sp, #4
   86762:	f001 fba9 	bl	87eb8 <_fstat_r>
   86766:	2800      	cmp	r0, #0
   86768:	db10      	blt.n	8678c <__smakebuf_r+0x44>
   8676a:	9b02      	ldr	r3, [sp, #8]
   8676c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
   86770:	f5b3 5100 	subs.w	r1, r3, #8192	; 0x2000
   86774:	424f      	negs	r7, r1
   86776:	414f      	adcs	r7, r1
   86778:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   8677c:	d02c      	beq.n	867d8 <__smakebuf_r+0x90>
   8677e:	89a3      	ldrh	r3, [r4, #12]
   86780:	f44f 6680 	mov.w	r6, #1024	; 0x400
   86784:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   86788:	81a3      	strh	r3, [r4, #12]
   8678a:	e00b      	b.n	867a4 <__smakebuf_r+0x5c>
   8678c:	89a3      	ldrh	r3, [r4, #12]
   8678e:	b29a      	uxth	r2, r3
   86790:	f012 0f80 	tst.w	r2, #128	; 0x80
   86794:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   86798:	81a3      	strh	r3, [r4, #12]
   8679a:	bf14      	ite	ne
   8679c:	2640      	movne	r6, #64	; 0x40
   8679e:	f44f 6680 	moveq.w	r6, #1024	; 0x400
   867a2:	2700      	movs	r7, #0
   867a4:	4628      	mov	r0, r5
   867a6:	4631      	mov	r1, r6
   867a8:	f000 f846 	bl	86838 <_malloc_r>
   867ac:	89a3      	ldrh	r3, [r4, #12]
   867ae:	2800      	cmp	r0, #0
   867b0:	d029      	beq.n	86806 <__smakebuf_r+0xbe>
   867b2:	4a1b      	ldr	r2, [pc, #108]	; (86820 <__smakebuf_r+0xd8>)
   867b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   867b8:	63ea      	str	r2, [r5, #60]	; 0x3c
   867ba:	81a3      	strh	r3, [r4, #12]
   867bc:	6020      	str	r0, [r4, #0]
   867be:	6120      	str	r0, [r4, #16]
   867c0:	6166      	str	r6, [r4, #20]
   867c2:	b9a7      	cbnz	r7, 867ee <__smakebuf_r+0xa6>
   867c4:	b011      	add	sp, #68	; 0x44
   867c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   867c8:	f101 0343 	add.w	r3, r1, #67	; 0x43
   867cc:	2201      	movs	r2, #1
   867ce:	600b      	str	r3, [r1, #0]
   867d0:	610b      	str	r3, [r1, #16]
   867d2:	614a      	str	r2, [r1, #20]
   867d4:	b011      	add	sp, #68	; 0x44
   867d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   867d8:	4a12      	ldr	r2, [pc, #72]	; (86824 <__smakebuf_r+0xdc>)
   867da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   867dc:	4293      	cmp	r3, r2
   867de:	d1ce      	bne.n	8677e <__smakebuf_r+0x36>
   867e0:	89a3      	ldrh	r3, [r4, #12]
   867e2:	f44f 6680 	mov.w	r6, #1024	; 0x400
   867e6:	4333      	orrs	r3, r6
   867e8:	81a3      	strh	r3, [r4, #12]
   867ea:	64e6      	str	r6, [r4, #76]	; 0x4c
   867ec:	e7da      	b.n	867a4 <__smakebuf_r+0x5c>
   867ee:	4628      	mov	r0, r5
   867f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   867f4:	f001 fb74 	bl	87ee0 <_isatty_r>
   867f8:	2800      	cmp	r0, #0
   867fa:	d0e3      	beq.n	867c4 <__smakebuf_r+0x7c>
   867fc:	89a3      	ldrh	r3, [r4, #12]
   867fe:	f043 0301 	orr.w	r3, r3, #1
   86802:	81a3      	strh	r3, [r4, #12]
   86804:	e7de      	b.n	867c4 <__smakebuf_r+0x7c>
   86806:	059a      	lsls	r2, r3, #22
   86808:	d4dc      	bmi.n	867c4 <__smakebuf_r+0x7c>
   8680a:	f104 0243 	add.w	r2, r4, #67	; 0x43
   8680e:	f043 0302 	orr.w	r3, r3, #2
   86812:	2101      	movs	r1, #1
   86814:	81a3      	strh	r3, [r4, #12]
   86816:	6022      	str	r2, [r4, #0]
   86818:	6122      	str	r2, [r4, #16]
   8681a:	6161      	str	r1, [r4, #20]
   8681c:	e7d2      	b.n	867c4 <__smakebuf_r+0x7c>
   8681e:	bf00      	nop
   86820:	00085db1 	.word	0x00085db1
   86824:	00087539 	.word	0x00087539

00086828 <malloc>:
   86828:	4b02      	ldr	r3, [pc, #8]	; (86834 <malloc+0xc>)
   8682a:	4601      	mov	r1, r0
   8682c:	6818      	ldr	r0, [r3, #0]
   8682e:	f000 b803 	b.w	86838 <_malloc_r>
   86832:	bf00      	nop
   86834:	20070638 	.word	0x20070638

00086838 <_malloc_r>:
   86838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8683c:	f101 050b 	add.w	r5, r1, #11
   86840:	2d16      	cmp	r5, #22
   86842:	b083      	sub	sp, #12
   86844:	4606      	mov	r6, r0
   86846:	d927      	bls.n	86898 <_malloc_r+0x60>
   86848:	f035 0507 	bics.w	r5, r5, #7
   8684c:	d427      	bmi.n	8689e <_malloc_r+0x66>
   8684e:	42a9      	cmp	r1, r5
   86850:	d825      	bhi.n	8689e <_malloc_r+0x66>
   86852:	4630      	mov	r0, r6
   86854:	f000 fb80 	bl	86f58 <__malloc_lock>
   86858:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   8685c:	d226      	bcs.n	868ac <_malloc_r+0x74>
   8685e:	4fc1      	ldr	r7, [pc, #772]	; (86b64 <_malloc_r+0x32c>)
   86860:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
   86864:	eb07 03cc 	add.w	r3, r7, ip, lsl #3
   86868:	68dc      	ldr	r4, [r3, #12]
   8686a:	429c      	cmp	r4, r3
   8686c:	f000 81d2 	beq.w	86c14 <_malloc_r+0x3dc>
   86870:	6863      	ldr	r3, [r4, #4]
   86872:	68e2      	ldr	r2, [r4, #12]
   86874:	f023 0303 	bic.w	r3, r3, #3
   86878:	4423      	add	r3, r4
   8687a:	6858      	ldr	r0, [r3, #4]
   8687c:	68a1      	ldr	r1, [r4, #8]
   8687e:	f040 0501 	orr.w	r5, r0, #1
   86882:	60ca      	str	r2, [r1, #12]
   86884:	4630      	mov	r0, r6
   86886:	6091      	str	r1, [r2, #8]
   86888:	605d      	str	r5, [r3, #4]
   8688a:	f000 fb67 	bl	86f5c <__malloc_unlock>
   8688e:	3408      	adds	r4, #8
   86890:	4620      	mov	r0, r4
   86892:	b003      	add	sp, #12
   86894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86898:	2510      	movs	r5, #16
   8689a:	42a9      	cmp	r1, r5
   8689c:	d9d9      	bls.n	86852 <_malloc_r+0x1a>
   8689e:	2400      	movs	r4, #0
   868a0:	230c      	movs	r3, #12
   868a2:	4620      	mov	r0, r4
   868a4:	6033      	str	r3, [r6, #0]
   868a6:	b003      	add	sp, #12
   868a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   868ac:	ea5f 2c55 	movs.w	ip, r5, lsr #9
   868b0:	f000 8089 	beq.w	869c6 <_malloc_r+0x18e>
   868b4:	f1bc 0f04 	cmp.w	ip, #4
   868b8:	f200 8160 	bhi.w	86b7c <_malloc_r+0x344>
   868bc:	ea4f 1c95 	mov.w	ip, r5, lsr #6
   868c0:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
   868c4:	ea4f 014c 	mov.w	r1, ip, lsl #1
   868c8:	4fa6      	ldr	r7, [pc, #664]	; (86b64 <_malloc_r+0x32c>)
   868ca:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   868ce:	68cc      	ldr	r4, [r1, #12]
   868d0:	42a1      	cmp	r1, r4
   868d2:	d105      	bne.n	868e0 <_malloc_r+0xa8>
   868d4:	e00c      	b.n	868f0 <_malloc_r+0xb8>
   868d6:	2b00      	cmp	r3, #0
   868d8:	da79      	bge.n	869ce <_malloc_r+0x196>
   868da:	68e4      	ldr	r4, [r4, #12]
   868dc:	42a1      	cmp	r1, r4
   868de:	d007      	beq.n	868f0 <_malloc_r+0xb8>
   868e0:	6862      	ldr	r2, [r4, #4]
   868e2:	f022 0203 	bic.w	r2, r2, #3
   868e6:	1b53      	subs	r3, r2, r5
   868e8:	2b0f      	cmp	r3, #15
   868ea:	ddf4      	ble.n	868d6 <_malloc_r+0x9e>
   868ec:	f10c 3cff 	add.w	ip, ip, #4294967295
   868f0:	f10c 0c01 	add.w	ip, ip, #1
   868f4:	4b9b      	ldr	r3, [pc, #620]	; (86b64 <_malloc_r+0x32c>)
   868f6:	693c      	ldr	r4, [r7, #16]
   868f8:	f103 0e08 	add.w	lr, r3, #8
   868fc:	4574      	cmp	r4, lr
   868fe:	f000 817e 	beq.w	86bfe <_malloc_r+0x3c6>
   86902:	6861      	ldr	r1, [r4, #4]
   86904:	f021 0103 	bic.w	r1, r1, #3
   86908:	1b4a      	subs	r2, r1, r5
   8690a:	2a0f      	cmp	r2, #15
   8690c:	f300 8164 	bgt.w	86bd8 <_malloc_r+0x3a0>
   86910:	2a00      	cmp	r2, #0
   86912:	f8c3 e014 	str.w	lr, [r3, #20]
   86916:	f8c3 e010 	str.w	lr, [r3, #16]
   8691a:	da69      	bge.n	869f0 <_malloc_r+0x1b8>
   8691c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   86920:	f080 813a 	bcs.w	86b98 <_malloc_r+0x360>
   86924:	08c9      	lsrs	r1, r1, #3
   86926:	108a      	asrs	r2, r1, #2
   86928:	f04f 0801 	mov.w	r8, #1
   8692c:	fa08 f802 	lsl.w	r8, r8, r2
   86930:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   86934:	685a      	ldr	r2, [r3, #4]
   86936:	6888      	ldr	r0, [r1, #8]
   86938:	ea48 0202 	orr.w	r2, r8, r2
   8693c:	60a0      	str	r0, [r4, #8]
   8693e:	60e1      	str	r1, [r4, #12]
   86940:	605a      	str	r2, [r3, #4]
   86942:	608c      	str	r4, [r1, #8]
   86944:	60c4      	str	r4, [r0, #12]
   86946:	ea4f 03ac 	mov.w	r3, ip, asr #2
   8694a:	2001      	movs	r0, #1
   8694c:	4098      	lsls	r0, r3
   8694e:	4290      	cmp	r0, r2
   86950:	d85b      	bhi.n	86a0a <_malloc_r+0x1d2>
   86952:	4202      	tst	r2, r0
   86954:	d106      	bne.n	86964 <_malloc_r+0x12c>
   86956:	f02c 0c03 	bic.w	ip, ip, #3
   8695a:	0040      	lsls	r0, r0, #1
   8695c:	4202      	tst	r2, r0
   8695e:	f10c 0c04 	add.w	ip, ip, #4
   86962:	d0fa      	beq.n	8695a <_malloc_r+0x122>
   86964:	eb07 08cc 	add.w	r8, r7, ip, lsl #3
   86968:	4644      	mov	r4, r8
   8696a:	46e1      	mov	r9, ip
   8696c:	68e3      	ldr	r3, [r4, #12]
   8696e:	429c      	cmp	r4, r3
   86970:	d107      	bne.n	86982 <_malloc_r+0x14a>
   86972:	e146      	b.n	86c02 <_malloc_r+0x3ca>
   86974:	2a00      	cmp	r2, #0
   86976:	f280 8157 	bge.w	86c28 <_malloc_r+0x3f0>
   8697a:	68db      	ldr	r3, [r3, #12]
   8697c:	429c      	cmp	r4, r3
   8697e:	f000 8140 	beq.w	86c02 <_malloc_r+0x3ca>
   86982:	6859      	ldr	r1, [r3, #4]
   86984:	f021 0103 	bic.w	r1, r1, #3
   86988:	1b4a      	subs	r2, r1, r5
   8698a:	2a0f      	cmp	r2, #15
   8698c:	ddf2      	ble.n	86974 <_malloc_r+0x13c>
   8698e:	461c      	mov	r4, r3
   86990:	f854 cf08 	ldr.w	ip, [r4, #8]!
   86994:	68d9      	ldr	r1, [r3, #12]
   86996:	f045 0901 	orr.w	r9, r5, #1
   8699a:	f042 0801 	orr.w	r8, r2, #1
   8699e:	441d      	add	r5, r3
   869a0:	f8c3 9004 	str.w	r9, [r3, #4]
   869a4:	4630      	mov	r0, r6
   869a6:	f8cc 100c 	str.w	r1, [ip, #12]
   869aa:	f8c1 c008 	str.w	ip, [r1, #8]
   869ae:	617d      	str	r5, [r7, #20]
   869b0:	613d      	str	r5, [r7, #16]
   869b2:	f8c5 e00c 	str.w	lr, [r5, #12]
   869b6:	f8c5 e008 	str.w	lr, [r5, #8]
   869ba:	f8c5 8004 	str.w	r8, [r5, #4]
   869be:	50aa      	str	r2, [r5, r2]
   869c0:	f000 facc 	bl	86f5c <__malloc_unlock>
   869c4:	e764      	b.n	86890 <_malloc_r+0x58>
   869c6:	217e      	movs	r1, #126	; 0x7e
   869c8:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
   869cc:	e77c      	b.n	868c8 <_malloc_r+0x90>
   869ce:	4422      	add	r2, r4
   869d0:	6850      	ldr	r0, [r2, #4]
   869d2:	68e3      	ldr	r3, [r4, #12]
   869d4:	68a1      	ldr	r1, [r4, #8]
   869d6:	f040 0501 	orr.w	r5, r0, #1
   869da:	60cb      	str	r3, [r1, #12]
   869dc:	4630      	mov	r0, r6
   869de:	6099      	str	r1, [r3, #8]
   869e0:	6055      	str	r5, [r2, #4]
   869e2:	f000 fabb 	bl	86f5c <__malloc_unlock>
   869e6:	3408      	adds	r4, #8
   869e8:	4620      	mov	r0, r4
   869ea:	b003      	add	sp, #12
   869ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   869f0:	4421      	add	r1, r4
   869f2:	684b      	ldr	r3, [r1, #4]
   869f4:	4630      	mov	r0, r6
   869f6:	f043 0301 	orr.w	r3, r3, #1
   869fa:	604b      	str	r3, [r1, #4]
   869fc:	f000 faae 	bl	86f5c <__malloc_unlock>
   86a00:	3408      	adds	r4, #8
   86a02:	4620      	mov	r0, r4
   86a04:	b003      	add	sp, #12
   86a06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86a0a:	68bc      	ldr	r4, [r7, #8]
   86a0c:	6863      	ldr	r3, [r4, #4]
   86a0e:	f023 0903 	bic.w	r9, r3, #3
   86a12:	45a9      	cmp	r9, r5
   86a14:	d304      	bcc.n	86a20 <_malloc_r+0x1e8>
   86a16:	ebc5 0309 	rsb	r3, r5, r9
   86a1a:	2b0f      	cmp	r3, #15
   86a1c:	f300 8091 	bgt.w	86b42 <_malloc_r+0x30a>
   86a20:	4b51      	ldr	r3, [pc, #324]	; (86b68 <_malloc_r+0x330>)
   86a22:	4a52      	ldr	r2, [pc, #328]	; (86b6c <_malloc_r+0x334>)
   86a24:	6819      	ldr	r1, [r3, #0]
   86a26:	6813      	ldr	r3, [r2, #0]
   86a28:	eb05 0a01 	add.w	sl, r5, r1
   86a2c:	3301      	adds	r3, #1
   86a2e:	eb04 0b09 	add.w	fp, r4, r9
   86a32:	f000 8161 	beq.w	86cf8 <_malloc_r+0x4c0>
   86a36:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
   86a3a:	f10a 0a0f 	add.w	sl, sl, #15
   86a3e:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
   86a42:	f02a 0a0f 	bic.w	sl, sl, #15
   86a46:	4630      	mov	r0, r6
   86a48:	4651      	mov	r1, sl
   86a4a:	9201      	str	r2, [sp, #4]
   86a4c:	f000 fcfc 	bl	87448 <_sbrk_r>
   86a50:	f1b0 3fff 	cmp.w	r0, #4294967295
   86a54:	4680      	mov	r8, r0
   86a56:	9a01      	ldr	r2, [sp, #4]
   86a58:	f000 8101 	beq.w	86c5e <_malloc_r+0x426>
   86a5c:	4583      	cmp	fp, r0
   86a5e:	f200 80fb 	bhi.w	86c58 <_malloc_r+0x420>
   86a62:	f8df c114 	ldr.w	ip, [pc, #276]	; 86b78 <_malloc_r+0x340>
   86a66:	45c3      	cmp	fp, r8
   86a68:	f8dc 3000 	ldr.w	r3, [ip]
   86a6c:	4453      	add	r3, sl
   86a6e:	f8cc 3000 	str.w	r3, [ip]
   86a72:	f000 814a 	beq.w	86d0a <_malloc_r+0x4d2>
   86a76:	6812      	ldr	r2, [r2, #0]
   86a78:	493c      	ldr	r1, [pc, #240]	; (86b6c <_malloc_r+0x334>)
   86a7a:	3201      	adds	r2, #1
   86a7c:	bf1b      	ittet	ne
   86a7e:	ebcb 0b08 	rsbne	fp, fp, r8
   86a82:	445b      	addne	r3, fp
   86a84:	f8c1 8000 	streq.w	r8, [r1]
   86a88:	f8cc 3000 	strne.w	r3, [ip]
   86a8c:	f018 0307 	ands.w	r3, r8, #7
   86a90:	f000 8114 	beq.w	86cbc <_malloc_r+0x484>
   86a94:	f1c3 0208 	rsb	r2, r3, #8
   86a98:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
   86a9c:	4490      	add	r8, r2
   86a9e:	3308      	adds	r3, #8
   86aa0:	44c2      	add	sl, r8
   86aa2:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
   86aa6:	ebca 0a03 	rsb	sl, sl, r3
   86aaa:	4651      	mov	r1, sl
   86aac:	4630      	mov	r0, r6
   86aae:	f8cd c004 	str.w	ip, [sp, #4]
   86ab2:	f000 fcc9 	bl	87448 <_sbrk_r>
   86ab6:	1c43      	adds	r3, r0, #1
   86ab8:	f8dd c004 	ldr.w	ip, [sp, #4]
   86abc:	f000 8135 	beq.w	86d2a <_malloc_r+0x4f2>
   86ac0:	ebc8 0200 	rsb	r2, r8, r0
   86ac4:	4452      	add	r2, sl
   86ac6:	f042 0201 	orr.w	r2, r2, #1
   86aca:	f8dc 3000 	ldr.w	r3, [ip]
   86ace:	42bc      	cmp	r4, r7
   86ad0:	4453      	add	r3, sl
   86ad2:	f8c7 8008 	str.w	r8, [r7, #8]
   86ad6:	f8cc 3000 	str.w	r3, [ip]
   86ada:	f8c8 2004 	str.w	r2, [r8, #4]
   86ade:	f8df a098 	ldr.w	sl, [pc, #152]	; 86b78 <_malloc_r+0x340>
   86ae2:	d015      	beq.n	86b10 <_malloc_r+0x2d8>
   86ae4:	f1b9 0f0f 	cmp.w	r9, #15
   86ae8:	f240 80eb 	bls.w	86cc2 <_malloc_r+0x48a>
   86aec:	6861      	ldr	r1, [r4, #4]
   86aee:	f1a9 020c 	sub.w	r2, r9, #12
   86af2:	f022 0207 	bic.w	r2, r2, #7
   86af6:	f001 0101 	and.w	r1, r1, #1
   86afa:	ea42 0e01 	orr.w	lr, r2, r1
   86afe:	2005      	movs	r0, #5
   86b00:	18a1      	adds	r1, r4, r2
   86b02:	2a0f      	cmp	r2, #15
   86b04:	f8c4 e004 	str.w	lr, [r4, #4]
   86b08:	6048      	str	r0, [r1, #4]
   86b0a:	6088      	str	r0, [r1, #8]
   86b0c:	f200 8111 	bhi.w	86d32 <_malloc_r+0x4fa>
   86b10:	4a17      	ldr	r2, [pc, #92]	; (86b70 <_malloc_r+0x338>)
   86b12:	68bc      	ldr	r4, [r7, #8]
   86b14:	6811      	ldr	r1, [r2, #0]
   86b16:	428b      	cmp	r3, r1
   86b18:	bf88      	it	hi
   86b1a:	6013      	strhi	r3, [r2, #0]
   86b1c:	4a15      	ldr	r2, [pc, #84]	; (86b74 <_malloc_r+0x33c>)
   86b1e:	6811      	ldr	r1, [r2, #0]
   86b20:	428b      	cmp	r3, r1
   86b22:	bf88      	it	hi
   86b24:	6013      	strhi	r3, [r2, #0]
   86b26:	6862      	ldr	r2, [r4, #4]
   86b28:	f022 0203 	bic.w	r2, r2, #3
   86b2c:	4295      	cmp	r5, r2
   86b2e:	ebc5 0302 	rsb	r3, r5, r2
   86b32:	d801      	bhi.n	86b38 <_malloc_r+0x300>
   86b34:	2b0f      	cmp	r3, #15
   86b36:	dc04      	bgt.n	86b42 <_malloc_r+0x30a>
   86b38:	4630      	mov	r0, r6
   86b3a:	f000 fa0f 	bl	86f5c <__malloc_unlock>
   86b3e:	2400      	movs	r4, #0
   86b40:	e6a6      	b.n	86890 <_malloc_r+0x58>
   86b42:	f045 0201 	orr.w	r2, r5, #1
   86b46:	f043 0301 	orr.w	r3, r3, #1
   86b4a:	4425      	add	r5, r4
   86b4c:	6062      	str	r2, [r4, #4]
   86b4e:	4630      	mov	r0, r6
   86b50:	60bd      	str	r5, [r7, #8]
   86b52:	606b      	str	r3, [r5, #4]
   86b54:	f000 fa02 	bl	86f5c <__malloc_unlock>
   86b58:	3408      	adds	r4, #8
   86b5a:	4620      	mov	r0, r4
   86b5c:	b003      	add	sp, #12
   86b5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86b62:	bf00      	nop
   86b64:	20070664 	.word	0x20070664
   86b68:	2007ad38 	.word	0x2007ad38
   86b6c:	20070a70 	.word	0x20070a70
   86b70:	2007ad34 	.word	0x2007ad34
   86b74:	2007ad30 	.word	0x2007ad30
   86b78:	2007ad3c 	.word	0x2007ad3c
   86b7c:	f1bc 0f14 	cmp.w	ip, #20
   86b80:	d961      	bls.n	86c46 <_malloc_r+0x40e>
   86b82:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
   86b86:	f200 808f 	bhi.w	86ca8 <_malloc_r+0x470>
   86b8a:	ea4f 3c15 	mov.w	ip, r5, lsr #12
   86b8e:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
   86b92:	ea4f 014c 	mov.w	r1, ip, lsl #1
   86b96:	e697      	b.n	868c8 <_malloc_r+0x90>
   86b98:	0a4b      	lsrs	r3, r1, #9
   86b9a:	2b04      	cmp	r3, #4
   86b9c:	d958      	bls.n	86c50 <_malloc_r+0x418>
   86b9e:	2b14      	cmp	r3, #20
   86ba0:	f200 80ad 	bhi.w	86cfe <_malloc_r+0x4c6>
   86ba4:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   86ba8:	0050      	lsls	r0, r2, #1
   86baa:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   86bae:	6883      	ldr	r3, [r0, #8]
   86bb0:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 86d6c <_malloc_r+0x534>
   86bb4:	4283      	cmp	r3, r0
   86bb6:	f000 808a 	beq.w	86cce <_malloc_r+0x496>
   86bba:	685a      	ldr	r2, [r3, #4]
   86bbc:	f022 0203 	bic.w	r2, r2, #3
   86bc0:	4291      	cmp	r1, r2
   86bc2:	d202      	bcs.n	86bca <_malloc_r+0x392>
   86bc4:	689b      	ldr	r3, [r3, #8]
   86bc6:	4298      	cmp	r0, r3
   86bc8:	d1f7      	bne.n	86bba <_malloc_r+0x382>
   86bca:	68d9      	ldr	r1, [r3, #12]
   86bcc:	687a      	ldr	r2, [r7, #4]
   86bce:	60e1      	str	r1, [r4, #12]
   86bd0:	60a3      	str	r3, [r4, #8]
   86bd2:	608c      	str	r4, [r1, #8]
   86bd4:	60dc      	str	r4, [r3, #12]
   86bd6:	e6b6      	b.n	86946 <_malloc_r+0x10e>
   86bd8:	f045 0701 	orr.w	r7, r5, #1
   86bdc:	f042 0101 	orr.w	r1, r2, #1
   86be0:	4425      	add	r5, r4
   86be2:	6067      	str	r7, [r4, #4]
   86be4:	4630      	mov	r0, r6
   86be6:	615d      	str	r5, [r3, #20]
   86be8:	611d      	str	r5, [r3, #16]
   86bea:	f8c5 e00c 	str.w	lr, [r5, #12]
   86bee:	f8c5 e008 	str.w	lr, [r5, #8]
   86bf2:	6069      	str	r1, [r5, #4]
   86bf4:	50aa      	str	r2, [r5, r2]
   86bf6:	3408      	adds	r4, #8
   86bf8:	f000 f9b0 	bl	86f5c <__malloc_unlock>
   86bfc:	e648      	b.n	86890 <_malloc_r+0x58>
   86bfe:	685a      	ldr	r2, [r3, #4]
   86c00:	e6a1      	b.n	86946 <_malloc_r+0x10e>
   86c02:	f109 0901 	add.w	r9, r9, #1
   86c06:	f019 0f03 	tst.w	r9, #3
   86c0a:	f104 0408 	add.w	r4, r4, #8
   86c0e:	f47f aead 	bne.w	8696c <_malloc_r+0x134>
   86c12:	e02d      	b.n	86c70 <_malloc_r+0x438>
   86c14:	f104 0308 	add.w	r3, r4, #8
   86c18:	6964      	ldr	r4, [r4, #20]
   86c1a:	42a3      	cmp	r3, r4
   86c1c:	bf08      	it	eq
   86c1e:	f10c 0c02 	addeq.w	ip, ip, #2
   86c22:	f43f ae67 	beq.w	868f4 <_malloc_r+0xbc>
   86c26:	e623      	b.n	86870 <_malloc_r+0x38>
   86c28:	4419      	add	r1, r3
   86c2a:	6848      	ldr	r0, [r1, #4]
   86c2c:	461c      	mov	r4, r3
   86c2e:	f854 2f08 	ldr.w	r2, [r4, #8]!
   86c32:	68db      	ldr	r3, [r3, #12]
   86c34:	f040 0501 	orr.w	r5, r0, #1
   86c38:	604d      	str	r5, [r1, #4]
   86c3a:	4630      	mov	r0, r6
   86c3c:	60d3      	str	r3, [r2, #12]
   86c3e:	609a      	str	r2, [r3, #8]
   86c40:	f000 f98c 	bl	86f5c <__malloc_unlock>
   86c44:	e624      	b.n	86890 <_malloc_r+0x58>
   86c46:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
   86c4a:	ea4f 014c 	mov.w	r1, ip, lsl #1
   86c4e:	e63b      	b.n	868c8 <_malloc_r+0x90>
   86c50:	098a      	lsrs	r2, r1, #6
   86c52:	3238      	adds	r2, #56	; 0x38
   86c54:	0050      	lsls	r0, r2, #1
   86c56:	e7a8      	b.n	86baa <_malloc_r+0x372>
   86c58:	42bc      	cmp	r4, r7
   86c5a:	f43f af02 	beq.w	86a62 <_malloc_r+0x22a>
   86c5e:	68bc      	ldr	r4, [r7, #8]
   86c60:	6862      	ldr	r2, [r4, #4]
   86c62:	f022 0203 	bic.w	r2, r2, #3
   86c66:	e761      	b.n	86b2c <_malloc_r+0x2f4>
   86c68:	f8d8 8000 	ldr.w	r8, [r8]
   86c6c:	4598      	cmp	r8, r3
   86c6e:	d17a      	bne.n	86d66 <_malloc_r+0x52e>
   86c70:	f01c 0f03 	tst.w	ip, #3
   86c74:	f1a8 0308 	sub.w	r3, r8, #8
   86c78:	f10c 3cff 	add.w	ip, ip, #4294967295
   86c7c:	d1f4      	bne.n	86c68 <_malloc_r+0x430>
   86c7e:	687b      	ldr	r3, [r7, #4]
   86c80:	ea23 0300 	bic.w	r3, r3, r0
   86c84:	607b      	str	r3, [r7, #4]
   86c86:	0040      	lsls	r0, r0, #1
   86c88:	4298      	cmp	r0, r3
   86c8a:	f63f aebe 	bhi.w	86a0a <_malloc_r+0x1d2>
   86c8e:	2800      	cmp	r0, #0
   86c90:	f43f aebb 	beq.w	86a0a <_malloc_r+0x1d2>
   86c94:	4203      	tst	r3, r0
   86c96:	46cc      	mov	ip, r9
   86c98:	f47f ae64 	bne.w	86964 <_malloc_r+0x12c>
   86c9c:	0040      	lsls	r0, r0, #1
   86c9e:	4203      	tst	r3, r0
   86ca0:	f10c 0c04 	add.w	ip, ip, #4
   86ca4:	d0fa      	beq.n	86c9c <_malloc_r+0x464>
   86ca6:	e65d      	b.n	86964 <_malloc_r+0x12c>
   86ca8:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
   86cac:	d819      	bhi.n	86ce2 <_malloc_r+0x4aa>
   86cae:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
   86cb2:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
   86cb6:	ea4f 014c 	mov.w	r1, ip, lsl #1
   86cba:	e605      	b.n	868c8 <_malloc_r+0x90>
   86cbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   86cc0:	e6ee      	b.n	86aa0 <_malloc_r+0x268>
   86cc2:	2301      	movs	r3, #1
   86cc4:	f8c8 3004 	str.w	r3, [r8, #4]
   86cc8:	4644      	mov	r4, r8
   86cca:	2200      	movs	r2, #0
   86ccc:	e72e      	b.n	86b2c <_malloc_r+0x2f4>
   86cce:	1092      	asrs	r2, r2, #2
   86cd0:	2001      	movs	r0, #1
   86cd2:	4090      	lsls	r0, r2
   86cd4:	f8d8 2004 	ldr.w	r2, [r8, #4]
   86cd8:	4619      	mov	r1, r3
   86cda:	4302      	orrs	r2, r0
   86cdc:	f8c8 2004 	str.w	r2, [r8, #4]
   86ce0:	e775      	b.n	86bce <_malloc_r+0x396>
   86ce2:	f240 5354 	movw	r3, #1364	; 0x554
   86ce6:	459c      	cmp	ip, r3
   86ce8:	d81b      	bhi.n	86d22 <_malloc_r+0x4ea>
   86cea:	ea4f 4c95 	mov.w	ip, r5, lsr #18
   86cee:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
   86cf2:	ea4f 014c 	mov.w	r1, ip, lsl #1
   86cf6:	e5e7      	b.n	868c8 <_malloc_r+0x90>
   86cf8:	f10a 0a10 	add.w	sl, sl, #16
   86cfc:	e6a3      	b.n	86a46 <_malloc_r+0x20e>
   86cfe:	2b54      	cmp	r3, #84	; 0x54
   86d00:	d81f      	bhi.n	86d42 <_malloc_r+0x50a>
   86d02:	0b0a      	lsrs	r2, r1, #12
   86d04:	326e      	adds	r2, #110	; 0x6e
   86d06:	0050      	lsls	r0, r2, #1
   86d08:	e74f      	b.n	86baa <_malloc_r+0x372>
   86d0a:	f3cb 010b 	ubfx	r1, fp, #0, #12
   86d0e:	2900      	cmp	r1, #0
   86d10:	f47f aeb1 	bne.w	86a76 <_malloc_r+0x23e>
   86d14:	eb0a 0109 	add.w	r1, sl, r9
   86d18:	68ba      	ldr	r2, [r7, #8]
   86d1a:	f041 0101 	orr.w	r1, r1, #1
   86d1e:	6051      	str	r1, [r2, #4]
   86d20:	e6f6      	b.n	86b10 <_malloc_r+0x2d8>
   86d22:	21fc      	movs	r1, #252	; 0xfc
   86d24:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
   86d28:	e5ce      	b.n	868c8 <_malloc_r+0x90>
   86d2a:	2201      	movs	r2, #1
   86d2c:	f04f 0a00 	mov.w	sl, #0
   86d30:	e6cb      	b.n	86aca <_malloc_r+0x292>
   86d32:	f104 0108 	add.w	r1, r4, #8
   86d36:	4630      	mov	r0, r6
   86d38:	f7ff fa4c 	bl	861d4 <_free_r>
   86d3c:	f8da 3000 	ldr.w	r3, [sl]
   86d40:	e6e6      	b.n	86b10 <_malloc_r+0x2d8>
   86d42:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   86d46:	d803      	bhi.n	86d50 <_malloc_r+0x518>
   86d48:	0bca      	lsrs	r2, r1, #15
   86d4a:	3277      	adds	r2, #119	; 0x77
   86d4c:	0050      	lsls	r0, r2, #1
   86d4e:	e72c      	b.n	86baa <_malloc_r+0x372>
   86d50:	f240 5254 	movw	r2, #1364	; 0x554
   86d54:	4293      	cmp	r3, r2
   86d56:	d803      	bhi.n	86d60 <_malloc_r+0x528>
   86d58:	0c8a      	lsrs	r2, r1, #18
   86d5a:	327c      	adds	r2, #124	; 0x7c
   86d5c:	0050      	lsls	r0, r2, #1
   86d5e:	e724      	b.n	86baa <_malloc_r+0x372>
   86d60:	20fc      	movs	r0, #252	; 0xfc
   86d62:	227e      	movs	r2, #126	; 0x7e
   86d64:	e721      	b.n	86baa <_malloc_r+0x372>
   86d66:	687b      	ldr	r3, [r7, #4]
   86d68:	e78d      	b.n	86c86 <_malloc_r+0x44e>
   86d6a:	bf00      	nop
   86d6c:	20070664 	.word	0x20070664

00086d70 <_mbrtowc_r>:
   86d70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   86d74:	b083      	sub	sp, #12
   86d76:	461f      	mov	r7, r3
   86d78:	4614      	mov	r4, r2
   86d7a:	4605      	mov	r5, r0
   86d7c:	4688      	mov	r8, r1
   86d7e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   86d80:	4b10      	ldr	r3, [pc, #64]	; (86dc4 <_mbrtowc_r+0x54>)
   86d82:	b19a      	cbz	r2, 86dac <_mbrtowc_r+0x3c>
   86d84:	f8d3 9000 	ldr.w	r9, [r3]
   86d88:	f7ff fcd4 	bl	86734 <__locale_charset>
   86d8c:	4641      	mov	r1, r8
   86d8e:	e88d 0041 	stmia.w	sp, {r0, r6}
   86d92:	4622      	mov	r2, r4
   86d94:	463b      	mov	r3, r7
   86d96:	4628      	mov	r0, r5
   86d98:	47c8      	blx	r9
   86d9a:	1c43      	adds	r3, r0, #1
   86d9c:	d103      	bne.n	86da6 <_mbrtowc_r+0x36>
   86d9e:	2200      	movs	r2, #0
   86da0:	238a      	movs	r3, #138	; 0x8a
   86da2:	6032      	str	r2, [r6, #0]
   86da4:	602b      	str	r3, [r5, #0]
   86da6:	b003      	add	sp, #12
   86da8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   86dac:	681f      	ldr	r7, [r3, #0]
   86dae:	f7ff fcc1 	bl	86734 <__locale_charset>
   86db2:	4621      	mov	r1, r4
   86db4:	e88d 0041 	stmia.w	sp, {r0, r6}
   86db8:	4a03      	ldr	r2, [pc, #12]	; (86dc8 <_mbrtowc_r+0x58>)
   86dba:	4628      	mov	r0, r5
   86dbc:	2301      	movs	r3, #1
   86dbe:	47b8      	blx	r7
   86dc0:	e7eb      	b.n	86d9a <_mbrtowc_r+0x2a>
   86dc2:	bf00      	nop
   86dc4:	20070a74 	.word	0x20070a74
   86dc8:	000883d4 	.word	0x000883d4

00086dcc <__ascii_mbtowc>:
   86dcc:	b082      	sub	sp, #8
   86dce:	b149      	cbz	r1, 86de4 <__ascii_mbtowc+0x18>
   86dd0:	b15a      	cbz	r2, 86dea <__ascii_mbtowc+0x1e>
   86dd2:	b16b      	cbz	r3, 86df0 <__ascii_mbtowc+0x24>
   86dd4:	7813      	ldrb	r3, [r2, #0]
   86dd6:	600b      	str	r3, [r1, #0]
   86dd8:	7810      	ldrb	r0, [r2, #0]
   86dda:	3000      	adds	r0, #0
   86ddc:	bf18      	it	ne
   86dde:	2001      	movne	r0, #1
   86de0:	b002      	add	sp, #8
   86de2:	4770      	bx	lr
   86de4:	a901      	add	r1, sp, #4
   86de6:	2a00      	cmp	r2, #0
   86de8:	d1f3      	bne.n	86dd2 <__ascii_mbtowc+0x6>
   86dea:	4610      	mov	r0, r2
   86dec:	b002      	add	sp, #8
   86dee:	4770      	bx	lr
   86df0:	f06f 0001 	mvn.w	r0, #1
   86df4:	e7f4      	b.n	86de0 <__ascii_mbtowc+0x14>
   86df6:	bf00      	nop

00086df8 <memchr>:
   86df8:	0783      	lsls	r3, r0, #30
   86dfa:	b470      	push	{r4, r5, r6}
   86dfc:	b2c9      	uxtb	r1, r1
   86dfe:	d040      	beq.n	86e82 <memchr+0x8a>
   86e00:	1e54      	subs	r4, r2, #1
   86e02:	b32a      	cbz	r2, 86e50 <memchr+0x58>
   86e04:	7803      	ldrb	r3, [r0, #0]
   86e06:	428b      	cmp	r3, r1
   86e08:	d023      	beq.n	86e52 <memchr+0x5a>
   86e0a:	1c43      	adds	r3, r0, #1
   86e0c:	e004      	b.n	86e18 <memchr+0x20>
   86e0e:	b1fc      	cbz	r4, 86e50 <memchr+0x58>
   86e10:	7805      	ldrb	r5, [r0, #0]
   86e12:	4614      	mov	r4, r2
   86e14:	428d      	cmp	r5, r1
   86e16:	d01c      	beq.n	86e52 <memchr+0x5a>
   86e18:	f013 0f03 	tst.w	r3, #3
   86e1c:	4618      	mov	r0, r3
   86e1e:	f104 32ff 	add.w	r2, r4, #4294967295
   86e22:	f103 0301 	add.w	r3, r3, #1
   86e26:	d1f2      	bne.n	86e0e <memchr+0x16>
   86e28:	2c03      	cmp	r4, #3
   86e2a:	d814      	bhi.n	86e56 <memchr+0x5e>
   86e2c:	1e65      	subs	r5, r4, #1
   86e2e:	b354      	cbz	r4, 86e86 <memchr+0x8e>
   86e30:	7803      	ldrb	r3, [r0, #0]
   86e32:	428b      	cmp	r3, r1
   86e34:	d00d      	beq.n	86e52 <memchr+0x5a>
   86e36:	1c42      	adds	r2, r0, #1
   86e38:	2300      	movs	r3, #0
   86e3a:	e002      	b.n	86e42 <memchr+0x4a>
   86e3c:	7804      	ldrb	r4, [r0, #0]
   86e3e:	428c      	cmp	r4, r1
   86e40:	d007      	beq.n	86e52 <memchr+0x5a>
   86e42:	42ab      	cmp	r3, r5
   86e44:	4610      	mov	r0, r2
   86e46:	f103 0301 	add.w	r3, r3, #1
   86e4a:	f102 0201 	add.w	r2, r2, #1
   86e4e:	d1f5      	bne.n	86e3c <memchr+0x44>
   86e50:	2000      	movs	r0, #0
   86e52:	bc70      	pop	{r4, r5, r6}
   86e54:	4770      	bx	lr
   86e56:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
   86e5a:	4603      	mov	r3, r0
   86e5c:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   86e60:	681a      	ldr	r2, [r3, #0]
   86e62:	4618      	mov	r0, r3
   86e64:	4072      	eors	r2, r6
   86e66:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
   86e6a:	ea25 0202 	bic.w	r2, r5, r2
   86e6e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   86e72:	f103 0304 	add.w	r3, r3, #4
   86e76:	d1d9      	bne.n	86e2c <memchr+0x34>
   86e78:	3c04      	subs	r4, #4
   86e7a:	2c03      	cmp	r4, #3
   86e7c:	4618      	mov	r0, r3
   86e7e:	d8ef      	bhi.n	86e60 <memchr+0x68>
   86e80:	e7d4      	b.n	86e2c <memchr+0x34>
   86e82:	4614      	mov	r4, r2
   86e84:	e7d0      	b.n	86e28 <memchr+0x30>
   86e86:	4620      	mov	r0, r4
   86e88:	e7e3      	b.n	86e52 <memchr+0x5a>
   86e8a:	bf00      	nop

00086e8c <memmove>:
   86e8c:	4288      	cmp	r0, r1
   86e8e:	b4f0      	push	{r4, r5, r6, r7}
   86e90:	d910      	bls.n	86eb4 <memmove+0x28>
   86e92:	188c      	adds	r4, r1, r2
   86e94:	42a0      	cmp	r0, r4
   86e96:	d20d      	bcs.n	86eb4 <memmove+0x28>
   86e98:	1885      	adds	r5, r0, r2
   86e9a:	1e53      	subs	r3, r2, #1
   86e9c:	b142      	cbz	r2, 86eb0 <memmove+0x24>
   86e9e:	4621      	mov	r1, r4
   86ea0:	462a      	mov	r2, r5
   86ea2:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
   86ea6:	3b01      	subs	r3, #1
   86ea8:	f802 4d01 	strb.w	r4, [r2, #-1]!
   86eac:	1c5c      	adds	r4, r3, #1
   86eae:	d1f8      	bne.n	86ea2 <memmove+0x16>
   86eb0:	bcf0      	pop	{r4, r5, r6, r7}
   86eb2:	4770      	bx	lr
   86eb4:	2a0f      	cmp	r2, #15
   86eb6:	d944      	bls.n	86f42 <memmove+0xb6>
   86eb8:	ea40 0301 	orr.w	r3, r0, r1
   86ebc:	079b      	lsls	r3, r3, #30
   86ebe:	d144      	bne.n	86f4a <memmove+0xbe>
   86ec0:	f1a2 0710 	sub.w	r7, r2, #16
   86ec4:	093f      	lsrs	r7, r7, #4
   86ec6:	eb00 1607 	add.w	r6, r0, r7, lsl #4
   86eca:	3610      	adds	r6, #16
   86ecc:	460c      	mov	r4, r1
   86ece:	4603      	mov	r3, r0
   86ed0:	6825      	ldr	r5, [r4, #0]
   86ed2:	3310      	adds	r3, #16
   86ed4:	f843 5c10 	str.w	r5, [r3, #-16]
   86ed8:	6865      	ldr	r5, [r4, #4]
   86eda:	3410      	adds	r4, #16
   86edc:	f843 5c0c 	str.w	r5, [r3, #-12]
   86ee0:	f854 5c08 	ldr.w	r5, [r4, #-8]
   86ee4:	f843 5c08 	str.w	r5, [r3, #-8]
   86ee8:	f854 5c04 	ldr.w	r5, [r4, #-4]
   86eec:	f843 5c04 	str.w	r5, [r3, #-4]
   86ef0:	42b3      	cmp	r3, r6
   86ef2:	d1ed      	bne.n	86ed0 <memmove+0x44>
   86ef4:	1c7b      	adds	r3, r7, #1
   86ef6:	f002 0c0f 	and.w	ip, r2, #15
   86efa:	011b      	lsls	r3, r3, #4
   86efc:	f1bc 0f03 	cmp.w	ip, #3
   86f00:	4419      	add	r1, r3
   86f02:	4403      	add	r3, r0
   86f04:	d923      	bls.n	86f4e <memmove+0xc2>
   86f06:	460e      	mov	r6, r1
   86f08:	461d      	mov	r5, r3
   86f0a:	4664      	mov	r4, ip
   86f0c:	f856 7b04 	ldr.w	r7, [r6], #4
   86f10:	3c04      	subs	r4, #4
   86f12:	2c03      	cmp	r4, #3
   86f14:	f845 7b04 	str.w	r7, [r5], #4
   86f18:	d8f8      	bhi.n	86f0c <memmove+0x80>
   86f1a:	f1ac 0404 	sub.w	r4, ip, #4
   86f1e:	f024 0403 	bic.w	r4, r4, #3
   86f22:	3404      	adds	r4, #4
   86f24:	f002 0203 	and.w	r2, r2, #3
   86f28:	4423      	add	r3, r4
   86f2a:	4421      	add	r1, r4
   86f2c:	2a00      	cmp	r2, #0
   86f2e:	d0bf      	beq.n	86eb0 <memmove+0x24>
   86f30:	441a      	add	r2, r3
   86f32:	f811 4b01 	ldrb.w	r4, [r1], #1
   86f36:	f803 4b01 	strb.w	r4, [r3], #1
   86f3a:	4293      	cmp	r3, r2
   86f3c:	d1f9      	bne.n	86f32 <memmove+0xa6>
   86f3e:	bcf0      	pop	{r4, r5, r6, r7}
   86f40:	4770      	bx	lr
   86f42:	4603      	mov	r3, r0
   86f44:	2a00      	cmp	r2, #0
   86f46:	d1f3      	bne.n	86f30 <memmove+0xa4>
   86f48:	e7b2      	b.n	86eb0 <memmove+0x24>
   86f4a:	4603      	mov	r3, r0
   86f4c:	e7f0      	b.n	86f30 <memmove+0xa4>
   86f4e:	4662      	mov	r2, ip
   86f50:	2a00      	cmp	r2, #0
   86f52:	d1ed      	bne.n	86f30 <memmove+0xa4>
   86f54:	e7ac      	b.n	86eb0 <memmove+0x24>
   86f56:	bf00      	nop

00086f58 <__malloc_lock>:
   86f58:	4770      	bx	lr
   86f5a:	bf00      	nop

00086f5c <__malloc_unlock>:
   86f5c:	4770      	bx	lr
   86f5e:	bf00      	nop

00086f60 <_realloc_r>:
   86f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   86f64:	460c      	mov	r4, r1
   86f66:	b083      	sub	sp, #12
   86f68:	4690      	mov	r8, r2
   86f6a:	4681      	mov	r9, r0
   86f6c:	2900      	cmp	r1, #0
   86f6e:	f000 80ba 	beq.w	870e6 <_realloc_r+0x186>
   86f72:	f7ff fff1 	bl	86f58 <__malloc_lock>
   86f76:	f108 060b 	add.w	r6, r8, #11
   86f7a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   86f7e:	2e16      	cmp	r6, #22
   86f80:	f023 0503 	bic.w	r5, r3, #3
   86f84:	f1a4 0708 	sub.w	r7, r4, #8
   86f88:	d84b      	bhi.n	87022 <_realloc_r+0xc2>
   86f8a:	2110      	movs	r1, #16
   86f8c:	460e      	mov	r6, r1
   86f8e:	45b0      	cmp	r8, r6
   86f90:	d84c      	bhi.n	8702c <_realloc_r+0xcc>
   86f92:	428d      	cmp	r5, r1
   86f94:	da51      	bge.n	8703a <_realloc_r+0xda>
   86f96:	f8df b384 	ldr.w	fp, [pc, #900]	; 8731c <_realloc_r+0x3bc>
   86f9a:	1978      	adds	r0, r7, r5
   86f9c:	f8db e008 	ldr.w	lr, [fp, #8]
   86fa0:	4586      	cmp	lr, r0
   86fa2:	f000 80a6 	beq.w	870f2 <_realloc_r+0x192>
   86fa6:	6842      	ldr	r2, [r0, #4]
   86fa8:	f022 0c01 	bic.w	ip, r2, #1
   86fac:	4484      	add	ip, r0
   86fae:	f8dc c004 	ldr.w	ip, [ip, #4]
   86fb2:	f01c 0f01 	tst.w	ip, #1
   86fb6:	d054      	beq.n	87062 <_realloc_r+0x102>
   86fb8:	2200      	movs	r2, #0
   86fba:	4610      	mov	r0, r2
   86fbc:	07db      	lsls	r3, r3, #31
   86fbe:	d46f      	bmi.n	870a0 <_realloc_r+0x140>
   86fc0:	f854 3c08 	ldr.w	r3, [r4, #-8]
   86fc4:	ebc3 0a07 	rsb	sl, r3, r7
   86fc8:	f8da 3004 	ldr.w	r3, [sl, #4]
   86fcc:	f023 0303 	bic.w	r3, r3, #3
   86fd0:	442b      	add	r3, r5
   86fd2:	2800      	cmp	r0, #0
   86fd4:	d062      	beq.n	8709c <_realloc_r+0x13c>
   86fd6:	4570      	cmp	r0, lr
   86fd8:	f000 80e9 	beq.w	871ae <_realloc_r+0x24e>
   86fdc:	eb02 0e03 	add.w	lr, r2, r3
   86fe0:	458e      	cmp	lr, r1
   86fe2:	db5b      	blt.n	8709c <_realloc_r+0x13c>
   86fe4:	68c3      	ldr	r3, [r0, #12]
   86fe6:	6882      	ldr	r2, [r0, #8]
   86fe8:	46d0      	mov	r8, sl
   86fea:	60d3      	str	r3, [r2, #12]
   86fec:	609a      	str	r2, [r3, #8]
   86fee:	f858 1f08 	ldr.w	r1, [r8, #8]!
   86ff2:	f8da 300c 	ldr.w	r3, [sl, #12]
   86ff6:	1f2a      	subs	r2, r5, #4
   86ff8:	2a24      	cmp	r2, #36	; 0x24
   86ffa:	60cb      	str	r3, [r1, #12]
   86ffc:	6099      	str	r1, [r3, #8]
   86ffe:	f200 8123 	bhi.w	87248 <_realloc_r+0x2e8>
   87002:	2a13      	cmp	r2, #19
   87004:	f240 80b0 	bls.w	87168 <_realloc_r+0x208>
   87008:	6823      	ldr	r3, [r4, #0]
   8700a:	2a1b      	cmp	r2, #27
   8700c:	f8ca 3008 	str.w	r3, [sl, #8]
   87010:	6863      	ldr	r3, [r4, #4]
   87012:	f8ca 300c 	str.w	r3, [sl, #12]
   87016:	f200 812b 	bhi.w	87270 <_realloc_r+0x310>
   8701a:	3408      	adds	r4, #8
   8701c:	f10a 0310 	add.w	r3, sl, #16
   87020:	e0a3      	b.n	8716a <_realloc_r+0x20a>
   87022:	f026 0607 	bic.w	r6, r6, #7
   87026:	2e00      	cmp	r6, #0
   87028:	4631      	mov	r1, r6
   8702a:	dab0      	bge.n	86f8e <_realloc_r+0x2e>
   8702c:	230c      	movs	r3, #12
   8702e:	2000      	movs	r0, #0
   87030:	f8c9 3000 	str.w	r3, [r9]
   87034:	b003      	add	sp, #12
   87036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8703a:	46a0      	mov	r8, r4
   8703c:	1baa      	subs	r2, r5, r6
   8703e:	2a0f      	cmp	r2, #15
   87040:	f003 0301 	and.w	r3, r3, #1
   87044:	d81a      	bhi.n	8707c <_realloc_r+0x11c>
   87046:	432b      	orrs	r3, r5
   87048:	607b      	str	r3, [r7, #4]
   8704a:	443d      	add	r5, r7
   8704c:	686b      	ldr	r3, [r5, #4]
   8704e:	f043 0301 	orr.w	r3, r3, #1
   87052:	606b      	str	r3, [r5, #4]
   87054:	4648      	mov	r0, r9
   87056:	f7ff ff81 	bl	86f5c <__malloc_unlock>
   8705a:	4640      	mov	r0, r8
   8705c:	b003      	add	sp, #12
   8705e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87062:	f022 0203 	bic.w	r2, r2, #3
   87066:	eb02 0c05 	add.w	ip, r2, r5
   8706a:	458c      	cmp	ip, r1
   8706c:	dba6      	blt.n	86fbc <_realloc_r+0x5c>
   8706e:	68c2      	ldr	r2, [r0, #12]
   87070:	6881      	ldr	r1, [r0, #8]
   87072:	46a0      	mov	r8, r4
   87074:	60ca      	str	r2, [r1, #12]
   87076:	4665      	mov	r5, ip
   87078:	6091      	str	r1, [r2, #8]
   8707a:	e7df      	b.n	8703c <_realloc_r+0xdc>
   8707c:	19b9      	adds	r1, r7, r6
   8707e:	4333      	orrs	r3, r6
   87080:	f042 0001 	orr.w	r0, r2, #1
   87084:	607b      	str	r3, [r7, #4]
   87086:	440a      	add	r2, r1
   87088:	6048      	str	r0, [r1, #4]
   8708a:	6853      	ldr	r3, [r2, #4]
   8708c:	3108      	adds	r1, #8
   8708e:	f043 0301 	orr.w	r3, r3, #1
   87092:	6053      	str	r3, [r2, #4]
   87094:	4648      	mov	r0, r9
   87096:	f7ff f89d 	bl	861d4 <_free_r>
   8709a:	e7db      	b.n	87054 <_realloc_r+0xf4>
   8709c:	428b      	cmp	r3, r1
   8709e:	da33      	bge.n	87108 <_realloc_r+0x1a8>
   870a0:	4641      	mov	r1, r8
   870a2:	4648      	mov	r0, r9
   870a4:	f7ff fbc8 	bl	86838 <_malloc_r>
   870a8:	4680      	mov	r8, r0
   870aa:	2800      	cmp	r0, #0
   870ac:	d0d2      	beq.n	87054 <_realloc_r+0xf4>
   870ae:	f854 3c04 	ldr.w	r3, [r4, #-4]
   870b2:	f1a0 0108 	sub.w	r1, r0, #8
   870b6:	f023 0201 	bic.w	r2, r3, #1
   870ba:	443a      	add	r2, r7
   870bc:	4291      	cmp	r1, r2
   870be:	f000 80bc 	beq.w	8723a <_realloc_r+0x2da>
   870c2:	1f2a      	subs	r2, r5, #4
   870c4:	2a24      	cmp	r2, #36	; 0x24
   870c6:	d86e      	bhi.n	871a6 <_realloc_r+0x246>
   870c8:	2a13      	cmp	r2, #19
   870ca:	d842      	bhi.n	87152 <_realloc_r+0x1f2>
   870cc:	4603      	mov	r3, r0
   870ce:	4622      	mov	r2, r4
   870d0:	6811      	ldr	r1, [r2, #0]
   870d2:	6019      	str	r1, [r3, #0]
   870d4:	6851      	ldr	r1, [r2, #4]
   870d6:	6059      	str	r1, [r3, #4]
   870d8:	6892      	ldr	r2, [r2, #8]
   870da:	609a      	str	r2, [r3, #8]
   870dc:	4621      	mov	r1, r4
   870de:	4648      	mov	r0, r9
   870e0:	f7ff f878 	bl	861d4 <_free_r>
   870e4:	e7b6      	b.n	87054 <_realloc_r+0xf4>
   870e6:	4611      	mov	r1, r2
   870e8:	b003      	add	sp, #12
   870ea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   870ee:	f7ff bba3 	b.w	86838 <_malloc_r>
   870f2:	f8de 2004 	ldr.w	r2, [lr, #4]
   870f6:	f106 0c10 	add.w	ip, r6, #16
   870fa:	f022 0203 	bic.w	r2, r2, #3
   870fe:	1950      	adds	r0, r2, r5
   87100:	4560      	cmp	r0, ip
   87102:	da3d      	bge.n	87180 <_realloc_r+0x220>
   87104:	4670      	mov	r0, lr
   87106:	e759      	b.n	86fbc <_realloc_r+0x5c>
   87108:	46d0      	mov	r8, sl
   8710a:	f858 0f08 	ldr.w	r0, [r8, #8]!
   8710e:	f8da 100c 	ldr.w	r1, [sl, #12]
   87112:	1f2a      	subs	r2, r5, #4
   87114:	2a24      	cmp	r2, #36	; 0x24
   87116:	60c1      	str	r1, [r0, #12]
   87118:	6088      	str	r0, [r1, #8]
   8711a:	f200 80a0 	bhi.w	8725e <_realloc_r+0x2fe>
   8711e:	2a13      	cmp	r2, #19
   87120:	f240 809b 	bls.w	8725a <_realloc_r+0x2fa>
   87124:	6821      	ldr	r1, [r4, #0]
   87126:	2a1b      	cmp	r2, #27
   87128:	f8ca 1008 	str.w	r1, [sl, #8]
   8712c:	6861      	ldr	r1, [r4, #4]
   8712e:	f8ca 100c 	str.w	r1, [sl, #12]
   87132:	f200 80b2 	bhi.w	8729a <_realloc_r+0x33a>
   87136:	3408      	adds	r4, #8
   87138:	f10a 0210 	add.w	r2, sl, #16
   8713c:	6821      	ldr	r1, [r4, #0]
   8713e:	461d      	mov	r5, r3
   87140:	6011      	str	r1, [r2, #0]
   87142:	6861      	ldr	r1, [r4, #4]
   87144:	4657      	mov	r7, sl
   87146:	6051      	str	r1, [r2, #4]
   87148:	68a3      	ldr	r3, [r4, #8]
   8714a:	6093      	str	r3, [r2, #8]
   8714c:	f8da 3004 	ldr.w	r3, [sl, #4]
   87150:	e774      	b.n	8703c <_realloc_r+0xdc>
   87152:	6823      	ldr	r3, [r4, #0]
   87154:	2a1b      	cmp	r2, #27
   87156:	6003      	str	r3, [r0, #0]
   87158:	6863      	ldr	r3, [r4, #4]
   8715a:	6043      	str	r3, [r0, #4]
   8715c:	d862      	bhi.n	87224 <_realloc_r+0x2c4>
   8715e:	f100 0308 	add.w	r3, r0, #8
   87162:	f104 0208 	add.w	r2, r4, #8
   87166:	e7b3      	b.n	870d0 <_realloc_r+0x170>
   87168:	4643      	mov	r3, r8
   8716a:	6822      	ldr	r2, [r4, #0]
   8716c:	4675      	mov	r5, lr
   8716e:	601a      	str	r2, [r3, #0]
   87170:	6862      	ldr	r2, [r4, #4]
   87172:	4657      	mov	r7, sl
   87174:	605a      	str	r2, [r3, #4]
   87176:	68a2      	ldr	r2, [r4, #8]
   87178:	609a      	str	r2, [r3, #8]
   8717a:	f8da 3004 	ldr.w	r3, [sl, #4]
   8717e:	e75d      	b.n	8703c <_realloc_r+0xdc>
   87180:	1b83      	subs	r3, r0, r6
   87182:	4437      	add	r7, r6
   87184:	f043 0301 	orr.w	r3, r3, #1
   87188:	f8cb 7008 	str.w	r7, [fp, #8]
   8718c:	607b      	str	r3, [r7, #4]
   8718e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   87192:	4648      	mov	r0, r9
   87194:	f003 0301 	and.w	r3, r3, #1
   87198:	431e      	orrs	r6, r3
   8719a:	f844 6c04 	str.w	r6, [r4, #-4]
   8719e:	f7ff fedd 	bl	86f5c <__malloc_unlock>
   871a2:	4620      	mov	r0, r4
   871a4:	e75a      	b.n	8705c <_realloc_r+0xfc>
   871a6:	4621      	mov	r1, r4
   871a8:	f7ff fe70 	bl	86e8c <memmove>
   871ac:	e796      	b.n	870dc <_realloc_r+0x17c>
   871ae:	eb02 0c03 	add.w	ip, r2, r3
   871b2:	f106 0210 	add.w	r2, r6, #16
   871b6:	4594      	cmp	ip, r2
   871b8:	f6ff af70 	blt.w	8709c <_realloc_r+0x13c>
   871bc:	4657      	mov	r7, sl
   871be:	f857 1f08 	ldr.w	r1, [r7, #8]!
   871c2:	f8da 300c 	ldr.w	r3, [sl, #12]
   871c6:	1f2a      	subs	r2, r5, #4
   871c8:	2a24      	cmp	r2, #36	; 0x24
   871ca:	60cb      	str	r3, [r1, #12]
   871cc:	6099      	str	r1, [r3, #8]
   871ce:	f200 8086 	bhi.w	872de <_realloc_r+0x37e>
   871d2:	2a13      	cmp	r2, #19
   871d4:	d977      	bls.n	872c6 <_realloc_r+0x366>
   871d6:	6823      	ldr	r3, [r4, #0]
   871d8:	2a1b      	cmp	r2, #27
   871da:	f8ca 3008 	str.w	r3, [sl, #8]
   871de:	6863      	ldr	r3, [r4, #4]
   871e0:	f8ca 300c 	str.w	r3, [sl, #12]
   871e4:	f200 8084 	bhi.w	872f0 <_realloc_r+0x390>
   871e8:	3408      	adds	r4, #8
   871ea:	f10a 0310 	add.w	r3, sl, #16
   871ee:	6822      	ldr	r2, [r4, #0]
   871f0:	601a      	str	r2, [r3, #0]
   871f2:	6862      	ldr	r2, [r4, #4]
   871f4:	605a      	str	r2, [r3, #4]
   871f6:	68a2      	ldr	r2, [r4, #8]
   871f8:	609a      	str	r2, [r3, #8]
   871fa:	ebc6 020c 	rsb	r2, r6, ip
   871fe:	eb0a 0306 	add.w	r3, sl, r6
   87202:	f042 0201 	orr.w	r2, r2, #1
   87206:	f8cb 3008 	str.w	r3, [fp, #8]
   8720a:	605a      	str	r2, [r3, #4]
   8720c:	f8da 3004 	ldr.w	r3, [sl, #4]
   87210:	4648      	mov	r0, r9
   87212:	f003 0301 	and.w	r3, r3, #1
   87216:	431e      	orrs	r6, r3
   87218:	f8ca 6004 	str.w	r6, [sl, #4]
   8721c:	f7ff fe9e 	bl	86f5c <__malloc_unlock>
   87220:	4638      	mov	r0, r7
   87222:	e71b      	b.n	8705c <_realloc_r+0xfc>
   87224:	68a3      	ldr	r3, [r4, #8]
   87226:	2a24      	cmp	r2, #36	; 0x24
   87228:	6083      	str	r3, [r0, #8]
   8722a:	68e3      	ldr	r3, [r4, #12]
   8722c:	60c3      	str	r3, [r0, #12]
   8722e:	d02b      	beq.n	87288 <_realloc_r+0x328>
   87230:	f100 0310 	add.w	r3, r0, #16
   87234:	f104 0210 	add.w	r2, r4, #16
   87238:	e74a      	b.n	870d0 <_realloc_r+0x170>
   8723a:	f850 2c04 	ldr.w	r2, [r0, #-4]
   8723e:	46a0      	mov	r8, r4
   87240:	f022 0203 	bic.w	r2, r2, #3
   87244:	4415      	add	r5, r2
   87246:	e6f9      	b.n	8703c <_realloc_r+0xdc>
   87248:	4621      	mov	r1, r4
   8724a:	4640      	mov	r0, r8
   8724c:	4675      	mov	r5, lr
   8724e:	4657      	mov	r7, sl
   87250:	f7ff fe1c 	bl	86e8c <memmove>
   87254:	f8da 3004 	ldr.w	r3, [sl, #4]
   87258:	e6f0      	b.n	8703c <_realloc_r+0xdc>
   8725a:	4642      	mov	r2, r8
   8725c:	e76e      	b.n	8713c <_realloc_r+0x1dc>
   8725e:	4621      	mov	r1, r4
   87260:	4640      	mov	r0, r8
   87262:	461d      	mov	r5, r3
   87264:	4657      	mov	r7, sl
   87266:	f7ff fe11 	bl	86e8c <memmove>
   8726a:	f8da 3004 	ldr.w	r3, [sl, #4]
   8726e:	e6e5      	b.n	8703c <_realloc_r+0xdc>
   87270:	68a3      	ldr	r3, [r4, #8]
   87272:	2a24      	cmp	r2, #36	; 0x24
   87274:	f8ca 3010 	str.w	r3, [sl, #16]
   87278:	68e3      	ldr	r3, [r4, #12]
   8727a:	f8ca 3014 	str.w	r3, [sl, #20]
   8727e:	d018      	beq.n	872b2 <_realloc_r+0x352>
   87280:	3410      	adds	r4, #16
   87282:	f10a 0318 	add.w	r3, sl, #24
   87286:	e770      	b.n	8716a <_realloc_r+0x20a>
   87288:	6922      	ldr	r2, [r4, #16]
   8728a:	f100 0318 	add.w	r3, r0, #24
   8728e:	6102      	str	r2, [r0, #16]
   87290:	6961      	ldr	r1, [r4, #20]
   87292:	f104 0218 	add.w	r2, r4, #24
   87296:	6141      	str	r1, [r0, #20]
   87298:	e71a      	b.n	870d0 <_realloc_r+0x170>
   8729a:	68a1      	ldr	r1, [r4, #8]
   8729c:	2a24      	cmp	r2, #36	; 0x24
   8729e:	f8ca 1010 	str.w	r1, [sl, #16]
   872a2:	68e1      	ldr	r1, [r4, #12]
   872a4:	f8ca 1014 	str.w	r1, [sl, #20]
   872a8:	d00f      	beq.n	872ca <_realloc_r+0x36a>
   872aa:	3410      	adds	r4, #16
   872ac:	f10a 0218 	add.w	r2, sl, #24
   872b0:	e744      	b.n	8713c <_realloc_r+0x1dc>
   872b2:	6922      	ldr	r2, [r4, #16]
   872b4:	f10a 0320 	add.w	r3, sl, #32
   872b8:	f8ca 2018 	str.w	r2, [sl, #24]
   872bc:	6962      	ldr	r2, [r4, #20]
   872be:	3418      	adds	r4, #24
   872c0:	f8ca 201c 	str.w	r2, [sl, #28]
   872c4:	e751      	b.n	8716a <_realloc_r+0x20a>
   872c6:	463b      	mov	r3, r7
   872c8:	e791      	b.n	871ee <_realloc_r+0x28e>
   872ca:	6921      	ldr	r1, [r4, #16]
   872cc:	f10a 0220 	add.w	r2, sl, #32
   872d0:	f8ca 1018 	str.w	r1, [sl, #24]
   872d4:	6961      	ldr	r1, [r4, #20]
   872d6:	3418      	adds	r4, #24
   872d8:	f8ca 101c 	str.w	r1, [sl, #28]
   872dc:	e72e      	b.n	8713c <_realloc_r+0x1dc>
   872de:	4621      	mov	r1, r4
   872e0:	4638      	mov	r0, r7
   872e2:	f8cd c004 	str.w	ip, [sp, #4]
   872e6:	f7ff fdd1 	bl	86e8c <memmove>
   872ea:	f8dd c004 	ldr.w	ip, [sp, #4]
   872ee:	e784      	b.n	871fa <_realloc_r+0x29a>
   872f0:	68a3      	ldr	r3, [r4, #8]
   872f2:	2a24      	cmp	r2, #36	; 0x24
   872f4:	f8ca 3010 	str.w	r3, [sl, #16]
   872f8:	68e3      	ldr	r3, [r4, #12]
   872fa:	f8ca 3014 	str.w	r3, [sl, #20]
   872fe:	d003      	beq.n	87308 <_realloc_r+0x3a8>
   87300:	3410      	adds	r4, #16
   87302:	f10a 0318 	add.w	r3, sl, #24
   87306:	e772      	b.n	871ee <_realloc_r+0x28e>
   87308:	6922      	ldr	r2, [r4, #16]
   8730a:	f10a 0320 	add.w	r3, sl, #32
   8730e:	f8ca 2018 	str.w	r2, [sl, #24]
   87312:	6962      	ldr	r2, [r4, #20]
   87314:	3418      	adds	r4, #24
   87316:	f8ca 201c 	str.w	r2, [sl, #28]
   8731a:	e768      	b.n	871ee <_realloc_r+0x28e>
   8731c:	20070664 	.word	0x20070664

00087320 <lflush>:
   87320:	8983      	ldrh	r3, [r0, #12]
   87322:	f003 0309 	and.w	r3, r3, #9
   87326:	2b09      	cmp	r3, #9
   87328:	d001      	beq.n	8732e <lflush+0xe>
   8732a:	2000      	movs	r0, #0
   8732c:	4770      	bx	lr
   8732e:	f7fe bd2d 	b.w	85d8c <fflush>
   87332:	bf00      	nop

00087334 <__srefill_r>:
   87334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   87336:	460c      	mov	r4, r1
   87338:	4605      	mov	r5, r0
   8733a:	b110      	cbz	r0, 87342 <__srefill_r+0xe>
   8733c:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8733e:	2b00      	cmp	r3, #0
   87340:	d045      	beq.n	873ce <__srefill_r+0x9a>
   87342:	89a2      	ldrh	r2, [r4, #12]
   87344:	b293      	uxth	r3, r2
   87346:	0499      	lsls	r1, r3, #18
   87348:	d407      	bmi.n	8735a <__srefill_r+0x26>
   8734a:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8734c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   87350:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   87354:	6663      	str	r3, [r4, #100]	; 0x64
   87356:	81a2      	strh	r2, [r4, #12]
   87358:	b293      	uxth	r3, r2
   8735a:	2100      	movs	r1, #0
   8735c:	069f      	lsls	r7, r3, #26
   8735e:	6061      	str	r1, [r4, #4]
   87360:	d432      	bmi.n	873c8 <__srefill_r+0x94>
   87362:	075e      	lsls	r6, r3, #29
   87364:	d521      	bpl.n	873aa <__srefill_r+0x76>
   87366:	6b21      	ldr	r1, [r4, #48]	; 0x30
   87368:	b161      	cbz	r1, 87384 <__srefill_r+0x50>
   8736a:	f104 0340 	add.w	r3, r4, #64	; 0x40
   8736e:	4299      	cmp	r1, r3
   87370:	d002      	beq.n	87378 <__srefill_r+0x44>
   87372:	4628      	mov	r0, r5
   87374:	f7fe ff2e 	bl	861d4 <_free_r>
   87378:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   8737a:	2000      	movs	r0, #0
   8737c:	6063      	str	r3, [r4, #4]
   8737e:	6320      	str	r0, [r4, #48]	; 0x30
   87380:	2b00      	cmp	r3, #0
   87382:	d13f      	bne.n	87404 <__srefill_r+0xd0>
   87384:	6923      	ldr	r3, [r4, #16]
   87386:	2b00      	cmp	r3, #0
   87388:	d04c      	beq.n	87424 <__srefill_r+0xf0>
   8738a:	89a6      	ldrh	r6, [r4, #12]
   8738c:	b2b7      	uxth	r7, r6
   8738e:	07bb      	lsls	r3, r7, #30
   87390:	d120      	bne.n	873d4 <__srefill_r+0xa0>
   87392:	6922      	ldr	r2, [r4, #16]
   87394:	4628      	mov	r0, r5
   87396:	6022      	str	r2, [r4, #0]
   87398:	6a25      	ldr	r5, [r4, #32]
   8739a:	69e1      	ldr	r1, [r4, #28]
   8739c:	6963      	ldr	r3, [r4, #20]
   8739e:	47a8      	blx	r5
   873a0:	2800      	cmp	r0, #0
   873a2:	6060      	str	r0, [r4, #4]
   873a4:	dd09      	ble.n	873ba <__srefill_r+0x86>
   873a6:	2000      	movs	r0, #0
   873a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   873aa:	06d8      	lsls	r0, r3, #27
   873ac:	d53f      	bpl.n	8742e <__srefill_r+0xfa>
   873ae:	0719      	lsls	r1, r3, #28
   873b0:	d42b      	bmi.n	8740a <__srefill_r+0xd6>
   873b2:	f042 0204 	orr.w	r2, r2, #4
   873b6:	81a2      	strh	r2, [r4, #12]
   873b8:	e7e4      	b.n	87384 <__srefill_r+0x50>
   873ba:	d01c      	beq.n	873f6 <__srefill_r+0xc2>
   873bc:	89a2      	ldrh	r2, [r4, #12]
   873be:	2300      	movs	r3, #0
   873c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   873c4:	81a2      	strh	r2, [r4, #12]
   873c6:	6063      	str	r3, [r4, #4]
   873c8:	f04f 30ff 	mov.w	r0, #4294967295
   873cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   873ce:	f7fe fcf5 	bl	85dbc <__sinit>
   873d2:	e7b6      	b.n	87342 <__srefill_r+0xe>
   873d4:	4a1a      	ldr	r2, [pc, #104]	; (87440 <__srefill_r+0x10c>)
   873d6:	2301      	movs	r3, #1
   873d8:	6810      	ldr	r0, [r2, #0]
   873da:	81a3      	strh	r3, [r4, #12]
   873dc:	4919      	ldr	r1, [pc, #100]	; (87444 <__srefill_r+0x110>)
   873de:	f007 0709 	and.w	r7, r7, #9
   873e2:	f7ff f94f 	bl	86684 <_fwalk>
   873e6:	2f09      	cmp	r7, #9
   873e8:	81a6      	strh	r6, [r4, #12]
   873ea:	d1d2      	bne.n	87392 <__srefill_r+0x5e>
   873ec:	4628      	mov	r0, r5
   873ee:	4621      	mov	r1, r4
   873f0:	f7fe fc12 	bl	85c18 <__sflush_r>
   873f4:	e7cd      	b.n	87392 <__srefill_r+0x5e>
   873f6:	89a3      	ldrh	r3, [r4, #12]
   873f8:	f04f 30ff 	mov.w	r0, #4294967295
   873fc:	f043 0320 	orr.w	r3, r3, #32
   87400:	81a3      	strh	r3, [r4, #12]
   87402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   87404:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   87406:	6023      	str	r3, [r4, #0]
   87408:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8740a:	4628      	mov	r0, r5
   8740c:	4621      	mov	r1, r4
   8740e:	f7fe fca7 	bl	85d60 <_fflush_r>
   87412:	2800      	cmp	r0, #0
   87414:	d1d8      	bne.n	873c8 <__srefill_r+0x94>
   87416:	89a2      	ldrh	r2, [r4, #12]
   87418:	60a0      	str	r0, [r4, #8]
   8741a:	f022 0208 	bic.w	r2, r2, #8
   8741e:	61a0      	str	r0, [r4, #24]
   87420:	b292      	uxth	r2, r2
   87422:	e7c6      	b.n	873b2 <__srefill_r+0x7e>
   87424:	4628      	mov	r0, r5
   87426:	4621      	mov	r1, r4
   87428:	f7ff f98e 	bl	86748 <__smakebuf_r>
   8742c:	e7ad      	b.n	8738a <__srefill_r+0x56>
   8742e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   87432:	2309      	movs	r3, #9
   87434:	602b      	str	r3, [r5, #0]
   87436:	f04f 30ff 	mov.w	r0, #4294967295
   8743a:	81a2      	strh	r2, [r4, #12]
   8743c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8743e:	bf00      	nop
   87440:	000884cc 	.word	0x000884cc
   87444:	00087321 	.word	0x00087321

00087448 <_sbrk_r>:
   87448:	b538      	push	{r3, r4, r5, lr}
   8744a:	4c07      	ldr	r4, [pc, #28]	; (87468 <_sbrk_r+0x20>)
   8744c:	2300      	movs	r3, #0
   8744e:	4605      	mov	r5, r0
   87450:	4608      	mov	r0, r1
   87452:	6023      	str	r3, [r4, #0]
   87454:	f7fb fb10 	bl	82a78 <_sbrk>
   87458:	1c43      	adds	r3, r0, #1
   8745a:	d000      	beq.n	8745e <_sbrk_r+0x16>
   8745c:	bd38      	pop	{r3, r4, r5, pc}
   8745e:	6823      	ldr	r3, [r4, #0]
   87460:	2b00      	cmp	r3, #0
   87462:	d0fb      	beq.n	8745c <_sbrk_r+0x14>
   87464:	602b      	str	r3, [r5, #0]
   87466:	bd38      	pop	{r3, r4, r5, pc}
   87468:	2007ad98 	.word	0x2007ad98

0008746c <__sccl>:
   8746c:	b470      	push	{r4, r5, r6}
   8746e:	780c      	ldrb	r4, [r1, #0]
   87470:	2c5e      	cmp	r4, #94	; 0x5e
   87472:	d02e      	beq.n	874d2 <__sccl+0x66>
   87474:	2200      	movs	r2, #0
   87476:	1c4d      	adds	r5, r1, #1
   87478:	4616      	mov	r6, r2
   8747a:	2300      	movs	r3, #0
   8747c:	54c2      	strb	r2, [r0, r3]
   8747e:	3301      	adds	r3, #1
   87480:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   87484:	d1fa      	bne.n	8747c <__sccl+0x10>
   87486:	b184      	cbz	r4, 874aa <__sccl+0x3e>
   87488:	f086 0201 	eor.w	r2, r6, #1
   8748c:	5502      	strb	r2, [r0, r4]
   8748e:	1c6e      	adds	r6, r5, #1
   87490:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   87494:	2b2d      	cmp	r3, #45	; 0x2d
   87496:	d00e      	beq.n	874b6 <__sccl+0x4a>
   87498:	2b5d      	cmp	r3, #93	; 0x5d
   8749a:	d009      	beq.n	874b0 <__sccl+0x44>
   8749c:	b113      	cbz	r3, 874a4 <__sccl+0x38>
   8749e:	461c      	mov	r4, r3
   874a0:	4635      	mov	r5, r6
   874a2:	e7f3      	b.n	8748c <__sccl+0x20>
   874a4:	4628      	mov	r0, r5
   874a6:	bc70      	pop	{r4, r5, r6}
   874a8:	4770      	bx	lr
   874aa:	1e68      	subs	r0, r5, #1
   874ac:	bc70      	pop	{r4, r5, r6}
   874ae:	4770      	bx	lr
   874b0:	4630      	mov	r0, r6
   874b2:	bc70      	pop	{r4, r5, r6}
   874b4:	4770      	bx	lr
   874b6:	7869      	ldrb	r1, [r5, #1]
   874b8:	295d      	cmp	r1, #93	; 0x5d
   874ba:	d0f0      	beq.n	8749e <__sccl+0x32>
   874bc:	428c      	cmp	r4, r1
   874be:	dcee      	bgt.n	8749e <__sccl+0x32>
   874c0:	3502      	adds	r5, #2
   874c2:	1903      	adds	r3, r0, r4
   874c4:	3401      	adds	r4, #1
   874c6:	42a1      	cmp	r1, r4
   874c8:	f803 2f01 	strb.w	r2, [r3, #1]!
   874cc:	dcfa      	bgt.n	874c4 <__sccl+0x58>
   874ce:	3602      	adds	r6, #2
   874d0:	e7de      	b.n	87490 <__sccl+0x24>
   874d2:	2201      	movs	r2, #1
   874d4:	784c      	ldrb	r4, [r1, #1]
   874d6:	4616      	mov	r6, r2
   874d8:	1c8d      	adds	r5, r1, #2
   874da:	e7ce      	b.n	8747a <__sccl+0xe>

000874dc <__sread>:
   874dc:	b510      	push	{r4, lr}
   874de:	460c      	mov	r4, r1
   874e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   874e4:	f000 fd22 	bl	87f2c <_read_r>
   874e8:	2800      	cmp	r0, #0
   874ea:	db03      	blt.n	874f4 <__sread+0x18>
   874ec:	6d23      	ldr	r3, [r4, #80]	; 0x50
   874ee:	4403      	add	r3, r0
   874f0:	6523      	str	r3, [r4, #80]	; 0x50
   874f2:	bd10      	pop	{r4, pc}
   874f4:	89a3      	ldrh	r3, [r4, #12]
   874f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   874fa:	81a3      	strh	r3, [r4, #12]
   874fc:	bd10      	pop	{r4, pc}
   874fe:	bf00      	nop

00087500 <__swrite>:
   87500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   87504:	460c      	mov	r4, r1
   87506:	8989      	ldrh	r1, [r1, #12]
   87508:	461d      	mov	r5, r3
   8750a:	05cb      	lsls	r3, r1, #23
   8750c:	4616      	mov	r6, r2
   8750e:	4607      	mov	r7, r0
   87510:	d506      	bpl.n	87520 <__swrite+0x20>
   87512:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   87516:	2200      	movs	r2, #0
   87518:	2302      	movs	r3, #2
   8751a:	f000 fcf3 	bl	87f04 <_lseek_r>
   8751e:	89a1      	ldrh	r1, [r4, #12]
   87520:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   87524:	81a1      	strh	r1, [r4, #12]
   87526:	4638      	mov	r0, r7
   87528:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8752c:	4632      	mov	r2, r6
   8752e:	462b      	mov	r3, r5
   87530:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   87534:	f000 bbfe 	b.w	87d34 <_write_r>

00087538 <__sseek>:
   87538:	b510      	push	{r4, lr}
   8753a:	460c      	mov	r4, r1
   8753c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   87540:	f000 fce0 	bl	87f04 <_lseek_r>
   87544:	89a3      	ldrh	r3, [r4, #12]
   87546:	1c42      	adds	r2, r0, #1
   87548:	bf0e      	itee	eq
   8754a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   8754e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   87552:	6520      	strne	r0, [r4, #80]	; 0x50
   87554:	81a3      	strh	r3, [r4, #12]
   87556:	bd10      	pop	{r4, pc}

00087558 <__sclose>:
   87558:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8755c:	f000 bc52 	b.w	87e04 <_close_r>

00087560 <_strtol_r>:
   87560:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   87564:	4c42      	ldr	r4, [pc, #264]	; (87670 <_strtol_r+0x110>)
   87566:	b082      	sub	sp, #8
   87568:	f8d4 c000 	ldr.w	ip, [r4]
   8756c:	9001      	str	r0, [sp, #4]
   8756e:	460e      	mov	r6, r1
   87570:	e000      	b.n	87574 <_strtol_r+0x14>
   87572:	4626      	mov	r6, r4
   87574:	4634      	mov	r4, r6
   87576:	f814 5b01 	ldrb.w	r5, [r4], #1
   8757a:	eb0c 0005 	add.w	r0, ip, r5
   8757e:	7840      	ldrb	r0, [r0, #1]
   87580:	f000 0008 	and.w	r0, r0, #8
   87584:	f000 0aff 	and.w	sl, r0, #255	; 0xff
   87588:	2800      	cmp	r0, #0
   8758a:	d1f2      	bne.n	87572 <_strtol_r+0x12>
   8758c:	2d2d      	cmp	r5, #45	; 0x2d
   8758e:	d05b      	beq.n	87648 <_strtol_r+0xe8>
   87590:	2d2b      	cmp	r5, #43	; 0x2b
   87592:	bf04      	itt	eq
   87594:	7875      	ldrbeq	r5, [r6, #1]
   87596:	1cb4      	addeq	r4, r6, #2
   87598:	f033 0010 	bics.w	r0, r3, #16
   8759c:	d03c      	beq.n	87618 <_strtol_r+0xb8>
   8759e:	4699      	mov	r9, r3
   875a0:	f1ba 0f00 	cmp.w	sl, #0
   875a4:	bf0c      	ite	eq
   875a6:	f06f 4b00 	mvneq.w	fp, #2147483648	; 0x80000000
   875aa:	f04f 4b00 	movne.w	fp, #2147483648	; 0x80000000
   875ae:	fbbb f8f9 	udiv	r8, fp, r9
   875b2:	2700      	movs	r7, #0
   875b4:	fb09 bb18 	mls	fp, r9, r8, fp
   875b8:	4638      	mov	r0, r7
   875ba:	e00c      	b.n	875d6 <_strtol_r+0x76>
   875bc:	3d30      	subs	r5, #48	; 0x30
   875be:	42ab      	cmp	r3, r5
   875c0:	dd19      	ble.n	875f6 <_strtol_r+0x96>
   875c2:	1c7e      	adds	r6, r7, #1
   875c4:	d005      	beq.n	875d2 <_strtol_r+0x72>
   875c6:	4540      	cmp	r0, r8
   875c8:	d823      	bhi.n	87612 <_strtol_r+0xb2>
   875ca:	d020      	beq.n	8760e <_strtol_r+0xae>
   875cc:	fb09 5000 	mla	r0, r9, r0, r5
   875d0:	2701      	movs	r7, #1
   875d2:	f814 5b01 	ldrb.w	r5, [r4], #1
   875d6:	eb0c 0605 	add.w	r6, ip, r5
   875da:	7876      	ldrb	r6, [r6, #1]
   875dc:	f016 0f04 	tst.w	r6, #4
   875e0:	d1ec      	bne.n	875bc <_strtol_r+0x5c>
   875e2:	f016 0603 	ands.w	r6, r6, #3
   875e6:	d006      	beq.n	875f6 <_strtol_r+0x96>
   875e8:	2e01      	cmp	r6, #1
   875ea:	bf14      	ite	ne
   875ec:	2657      	movne	r6, #87	; 0x57
   875ee:	2637      	moveq	r6, #55	; 0x37
   875f0:	1bad      	subs	r5, r5, r6
   875f2:	42ab      	cmp	r3, r5
   875f4:	dce5      	bgt.n	875c2 <_strtol_r+0x62>
   875f6:	1c7b      	adds	r3, r7, #1
   875f8:	d015      	beq.n	87626 <_strtol_r+0xc6>
   875fa:	f1ba 0f00 	cmp.w	sl, #0
   875fe:	d121      	bne.n	87644 <_strtol_r+0xe4>
   87600:	b10a      	cbz	r2, 87606 <_strtol_r+0xa6>
   87602:	b9ef      	cbnz	r7, 87640 <_strtol_r+0xe0>
   87604:	6011      	str	r1, [r2, #0]
   87606:	b002      	add	sp, #8
   87608:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8760c:	4770      	bx	lr
   8760e:	455d      	cmp	r5, fp
   87610:	dddc      	ble.n	875cc <_strtol_r+0x6c>
   87612:	f04f 37ff 	mov.w	r7, #4294967295
   87616:	e7dc      	b.n	875d2 <_strtol_r+0x72>
   87618:	2d30      	cmp	r5, #48	; 0x30
   8761a:	d01a      	beq.n	87652 <_strtol_r+0xf2>
   8761c:	2b00      	cmp	r3, #0
   8761e:	d1be      	bne.n	8759e <_strtol_r+0x3e>
   87620:	230a      	movs	r3, #10
   87622:	4699      	mov	r9, r3
   87624:	e7bc      	b.n	875a0 <_strtol_r+0x40>
   87626:	9901      	ldr	r1, [sp, #4]
   87628:	f1ba 0f00 	cmp.w	sl, #0
   8762c:	f04f 0322 	mov.w	r3, #34	; 0x22
   87630:	bf0c      	ite	eq
   87632:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   87636:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   8763a:	600b      	str	r3, [r1, #0]
   8763c:	2a00      	cmp	r2, #0
   8763e:	d0e2      	beq.n	87606 <_strtol_r+0xa6>
   87640:	1e61      	subs	r1, r4, #1
   87642:	e7df      	b.n	87604 <_strtol_r+0xa4>
   87644:	4240      	negs	r0, r0
   87646:	e7db      	b.n	87600 <_strtol_r+0xa0>
   87648:	1cb4      	adds	r4, r6, #2
   8764a:	7875      	ldrb	r5, [r6, #1]
   8764c:	f04f 0a01 	mov.w	sl, #1
   87650:	e7a2      	b.n	87598 <_strtol_r+0x38>
   87652:	7820      	ldrb	r0, [r4, #0]
   87654:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   87658:	2858      	cmp	r0, #88	; 0x58
   8765a:	d003      	beq.n	87664 <_strtol_r+0x104>
   8765c:	2b00      	cmp	r3, #0
   8765e:	d19e      	bne.n	8759e <_strtol_r+0x3e>
   87660:	2308      	movs	r3, #8
   87662:	e79c      	b.n	8759e <_strtol_r+0x3e>
   87664:	2310      	movs	r3, #16
   87666:	7865      	ldrb	r5, [r4, #1]
   87668:	4699      	mov	r9, r3
   8766a:	3402      	adds	r4, #2
   8766c:	e798      	b.n	875a0 <_strtol_r+0x40>
   8766e:	bf00      	nop
   87670:	2007063c 	.word	0x2007063c

00087674 <_strtoll_r>:
   87674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   87678:	4c64      	ldr	r4, [pc, #400]	; (8780c <_strtoll_r+0x198>)
   8767a:	b087      	sub	sp, #28
   8767c:	4694      	mov	ip, r2
   8767e:	9104      	str	r1, [sp, #16]
   87680:	f8d4 8000 	ldr.w	r8, [r4]
   87684:	9005      	str	r0, [sp, #20]
   87686:	4699      	mov	r9, r3
   87688:	460a      	mov	r2, r1
   8768a:	e000      	b.n	8768e <_strtoll_r+0x1a>
   8768c:	4632      	mov	r2, r6
   8768e:	4616      	mov	r6, r2
   87690:	f816 7b01 	ldrb.w	r7, [r6], #1
   87694:	eb08 0307 	add.w	r3, r8, r7
   87698:	785b      	ldrb	r3, [r3, #1]
   8769a:	f003 0308 	and.w	r3, r3, #8
   8769e:	f003 01ff 	and.w	r1, r3, #255	; 0xff
   876a2:	2b00      	cmp	r3, #0
   876a4:	d1f2      	bne.n	8768c <_strtoll_r+0x18>
   876a6:	2f2d      	cmp	r7, #45	; 0x2d
   876a8:	f000 808d 	beq.w	877c6 <_strtoll_r+0x152>
   876ac:	2f2b      	cmp	r7, #43	; 0x2b
   876ae:	bf08      	it	eq
   876b0:	7857      	ldrbeq	r7, [r2, #1]
   876b2:	9102      	str	r1, [sp, #8]
   876b4:	bf08      	it	eq
   876b6:	1c96      	addeq	r6, r2, #2
   876b8:	f039 0110 	bics.w	r1, r9, #16
   876bc:	d05e      	beq.n	8777c <_strtoll_r+0x108>
   876be:	46ca      	mov	sl, r9
   876c0:	ea4f 7be9 	mov.w	fp, r9, asr #31
   876c4:	9c02      	ldr	r4, [sp, #8]
   876c6:	2c00      	cmp	r4, #0
   876c8:	d066      	beq.n	87798 <_strtoll_r+0x124>
   876ca:	2400      	movs	r4, #0
   876cc:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
   876d0:	4620      	mov	r0, r4
   876d2:	4629      	mov	r1, r5
   876d4:	4652      	mov	r2, sl
   876d6:	465b      	mov	r3, fp
   876d8:	f8cd c004 	str.w	ip, [sp, #4]
   876dc:	f7fc f9a8 	bl	83a30 <__aeabi_uldivmod>
   876e0:	4620      	mov	r0, r4
   876e2:	9203      	str	r2, [sp, #12]
   876e4:	465b      	mov	r3, fp
   876e6:	4652      	mov	r2, sl
   876e8:	4629      	mov	r1, r5
   876ea:	f7fc f9a1 	bl	83a30 <__aeabi_uldivmod>
   876ee:	2400      	movs	r4, #0
   876f0:	2200      	movs	r2, #0
   876f2:	2300      	movs	r3, #0
   876f4:	f8dd c004 	ldr.w	ip, [sp, #4]
   876f8:	e019      	b.n	8772e <_strtoll_r+0xba>
   876fa:	3f30      	subs	r7, #48	; 0x30
   876fc:	45b9      	cmp	r9, r7
   876fe:	dd26      	ble.n	8774e <_strtoll_r+0xda>
   87700:	1c65      	adds	r5, r4, #1
   87702:	d012      	beq.n	8772a <_strtoll_r+0xb6>
   87704:	4299      	cmp	r1, r3
   87706:	bf08      	it	eq
   87708:	4290      	cmpeq	r0, r2
   8770a:	d334      	bcc.n	87776 <_strtoll_r+0x102>
   8770c:	428b      	cmp	r3, r1
   8770e:	bf08      	it	eq
   87710:	4282      	cmpeq	r2, r0
   87712:	d02d      	beq.n	87770 <_strtoll_r+0xfc>
   87714:	fb02 f40b 	mul.w	r4, r2, fp
   87718:	fb0a 4403 	mla	r4, sl, r3, r4
   8771c:	fba2 230a 	umull	r2, r3, r2, sl
   87720:	4423      	add	r3, r4
   87722:	19d2      	adds	r2, r2, r7
   87724:	eb43 73e7 	adc.w	r3, r3, r7, asr #31
   87728:	2401      	movs	r4, #1
   8772a:	f816 7b01 	ldrb.w	r7, [r6], #1
   8772e:	eb08 0507 	add.w	r5, r8, r7
   87732:	786d      	ldrb	r5, [r5, #1]
   87734:	f015 0f04 	tst.w	r5, #4
   87738:	d1df      	bne.n	876fa <_strtoll_r+0x86>
   8773a:	f015 0503 	ands.w	r5, r5, #3
   8773e:	d006      	beq.n	8774e <_strtoll_r+0xda>
   87740:	2d01      	cmp	r5, #1
   87742:	bf14      	ite	ne
   87744:	2557      	movne	r5, #87	; 0x57
   87746:	2537      	moveq	r5, #55	; 0x37
   87748:	1b7f      	subs	r7, r7, r5
   8774a:	45b9      	cmp	r9, r7
   8774c:	dcd8      	bgt.n	87700 <_strtoll_r+0x8c>
   8774e:	1c61      	adds	r1, r4, #1
   87750:	d027      	beq.n	877a2 <_strtoll_r+0x12e>
   87752:	9902      	ldr	r1, [sp, #8]
   87754:	2900      	cmp	r1, #0
   87756:	d132      	bne.n	877be <_strtoll_r+0x14a>
   87758:	4610      	mov	r0, r2
   8775a:	4619      	mov	r1, r3
   8775c:	f1bc 0f00 	cmp.w	ip, #0
   87760:	d003      	beq.n	8776a <_strtoll_r+0xf6>
   87762:	bb54      	cbnz	r4, 877ba <_strtoll_r+0x146>
   87764:	9e04      	ldr	r6, [sp, #16]
   87766:	f8cc 6000 	str.w	r6, [ip]
   8776a:	b007      	add	sp, #28
   8776c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87770:	9c03      	ldr	r4, [sp, #12]
   87772:	42a7      	cmp	r7, r4
   87774:	ddce      	ble.n	87714 <_strtoll_r+0xa0>
   87776:	f04f 34ff 	mov.w	r4, #4294967295
   8777a:	e7d6      	b.n	8772a <_strtoll_r+0xb6>
   8777c:	2f30      	cmp	r7, #48	; 0x30
   8777e:	d027      	beq.n	877d0 <_strtoll_r+0x15c>
   87780:	f1b9 0f00 	cmp.w	r9, #0
   87784:	d19b      	bne.n	876be <_strtoll_r+0x4a>
   87786:	9c02      	ldr	r4, [sp, #8]
   87788:	f04f 0a0a 	mov.w	sl, #10
   8778c:	f04f 0b00 	mov.w	fp, #0
   87790:	f04f 090a 	mov.w	r9, #10
   87794:	2c00      	cmp	r4, #0
   87796:	d198      	bne.n	876ca <_strtoll_r+0x56>
   87798:	f04f 34ff 	mov.w	r4, #4294967295
   8779c:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   877a0:	e796      	b.n	876d0 <_strtoll_r+0x5c>
   877a2:	9c02      	ldr	r4, [sp, #8]
   877a4:	bb24      	cbnz	r4, 877f0 <_strtoll_r+0x17c>
   877a6:	f04f 30ff 	mov.w	r0, #4294967295
   877aa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   877ae:	9c05      	ldr	r4, [sp, #20]
   877b0:	2322      	movs	r3, #34	; 0x22
   877b2:	6023      	str	r3, [r4, #0]
   877b4:	f1bc 0f00 	cmp.w	ip, #0
   877b8:	d0d7      	beq.n	8776a <_strtoll_r+0xf6>
   877ba:	3e01      	subs	r6, #1
   877bc:	e7d3      	b.n	87766 <_strtoll_r+0xf2>
   877be:	4252      	negs	r2, r2
   877c0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   877c4:	e7c8      	b.n	87758 <_strtoll_r+0xe4>
   877c6:	2401      	movs	r4, #1
   877c8:	1c96      	adds	r6, r2, #2
   877ca:	7857      	ldrb	r7, [r2, #1]
   877cc:	9402      	str	r4, [sp, #8]
   877ce:	e773      	b.n	876b8 <_strtoll_r+0x44>
   877d0:	7833      	ldrb	r3, [r6, #0]
   877d2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   877d6:	2b58      	cmp	r3, #88	; 0x58
   877d8:	d00e      	beq.n	877f8 <_strtoll_r+0x184>
   877da:	f1b9 0f00 	cmp.w	r9, #0
   877de:	f47f af6e 	bne.w	876be <_strtoll_r+0x4a>
   877e2:	f04f 0a08 	mov.w	sl, #8
   877e6:	f04f 0b00 	mov.w	fp, #0
   877ea:	f04f 0908 	mov.w	r9, #8
   877ee:	e769      	b.n	876c4 <_strtoll_r+0x50>
   877f0:	2000      	movs	r0, #0
   877f2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   877f6:	e7da      	b.n	877ae <_strtoll_r+0x13a>
   877f8:	7877      	ldrb	r7, [r6, #1]
   877fa:	f04f 0a10 	mov.w	sl, #16
   877fe:	f04f 0b00 	mov.w	fp, #0
   87802:	3602      	adds	r6, #2
   87804:	f04f 0910 	mov.w	r9, #16
   87808:	e75c      	b.n	876c4 <_strtoll_r+0x50>
   8780a:	bf00      	nop
   8780c:	2007063c 	.word	0x2007063c

00087810 <_strtoul_r>:
   87810:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   87814:	4c48      	ldr	r4, [pc, #288]	; (87938 <_strtoul_r+0x128>)
   87816:	b082      	sub	sp, #8
   87818:	f8d4 c000 	ldr.w	ip, [r4]
   8781c:	9001      	str	r0, [sp, #4]
   8781e:	460e      	mov	r6, r1
   87820:	e000      	b.n	87824 <_strtoul_r+0x14>
   87822:	4626      	mov	r6, r4
   87824:	4634      	mov	r4, r6
   87826:	f814 5b01 	ldrb.w	r5, [r4], #1
   8782a:	eb0c 0005 	add.w	r0, ip, r5
   8782e:	7840      	ldrb	r0, [r0, #1]
   87830:	f000 0008 	and.w	r0, r0, #8
   87834:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   87838:	2800      	cmp	r0, #0
   8783a:	d1f2      	bne.n	87822 <_strtoul_r+0x12>
   8783c:	2d2d      	cmp	r5, #45	; 0x2d
   8783e:	d056      	beq.n	878ee <_strtoul_r+0xde>
   87840:	2d2b      	cmp	r5, #43	; 0x2b
   87842:	bf08      	it	eq
   87844:	7875      	ldrbeq	r5, [r6, #1]
   87846:	46ba      	mov	sl, r7
   87848:	bf08      	it	eq
   8784a:	1cb4      	addeq	r4, r6, #2
   8784c:	f033 0010 	bics.w	r0, r3, #16
   87850:	d039      	beq.n	878c6 <_strtoul_r+0xb6>
   87852:	f04f 38ff 	mov.w	r8, #4294967295
   87856:	fbb8 f8f3 	udiv	r8, r8, r3
   8785a:	fb03 fb08 	mul.w	fp, r3, r8
   8785e:	4699      	mov	r9, r3
   87860:	ea6f 0b0b 	mvn.w	fp, fp
   87864:	2700      	movs	r7, #0
   87866:	4638      	mov	r0, r7
   87868:	e00c      	b.n	87884 <_strtoul_r+0x74>
   8786a:	3d30      	subs	r5, #48	; 0x30
   8786c:	42ab      	cmp	r3, r5
   8786e:	dd19      	ble.n	878a4 <_strtoul_r+0x94>
   87870:	2f00      	cmp	r7, #0
   87872:	db25      	blt.n	878c0 <_strtoul_r+0xb0>
   87874:	4540      	cmp	r0, r8
   87876:	d823      	bhi.n	878c0 <_strtoul_r+0xb0>
   87878:	d020      	beq.n	878bc <_strtoul_r+0xac>
   8787a:	fb09 5000 	mla	r0, r9, r0, r5
   8787e:	2701      	movs	r7, #1
   87880:	f814 5b01 	ldrb.w	r5, [r4], #1
   87884:	eb0c 0605 	add.w	r6, ip, r5
   87888:	7876      	ldrb	r6, [r6, #1]
   8788a:	f016 0f04 	tst.w	r6, #4
   8788e:	d1ec      	bne.n	8786a <_strtoul_r+0x5a>
   87890:	f016 0603 	ands.w	r6, r6, #3
   87894:	d006      	beq.n	878a4 <_strtoul_r+0x94>
   87896:	2e01      	cmp	r6, #1
   87898:	bf14      	ite	ne
   8789a:	2657      	movne	r6, #87	; 0x57
   8789c:	2637      	moveq	r6, #55	; 0x37
   8789e:	1bad      	subs	r5, r5, r6
   878a0:	42ab      	cmp	r3, r5
   878a2:	dce5      	bgt.n	87870 <_strtoul_r+0x60>
   878a4:	2f00      	cmp	r7, #0
   878a6:	db1c      	blt.n	878e2 <_strtoul_r+0xd2>
   878a8:	f1ba 0f00 	cmp.w	sl, #0
   878ac:	d117      	bne.n	878de <_strtoul_r+0xce>
   878ae:	b10a      	cbz	r2, 878b4 <_strtoul_r+0xa4>
   878b0:	b99f      	cbnz	r7, 878da <_strtoul_r+0xca>
   878b2:	6011      	str	r1, [r2, #0]
   878b4:	b002      	add	sp, #8
   878b6:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   878ba:	4770      	bx	lr
   878bc:	455d      	cmp	r5, fp
   878be:	dddc      	ble.n	8787a <_strtoul_r+0x6a>
   878c0:	f04f 37ff 	mov.w	r7, #4294967295
   878c4:	e7dc      	b.n	87880 <_strtoul_r+0x70>
   878c6:	2d30      	cmp	r5, #48	; 0x30
   878c8:	d016      	beq.n	878f8 <_strtoul_r+0xe8>
   878ca:	bb5b      	cbnz	r3, 87924 <_strtoul_r+0x114>
   878cc:	230a      	movs	r3, #10
   878ce:	4699      	mov	r9, r3
   878d0:	f04f 0b05 	mov.w	fp, #5
   878d4:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8793c <_strtoul_r+0x12c>
   878d8:	e7c4      	b.n	87864 <_strtoul_r+0x54>
   878da:	1e61      	subs	r1, r4, #1
   878dc:	e7e9      	b.n	878b2 <_strtoul_r+0xa2>
   878de:	4240      	negs	r0, r0
   878e0:	e7e5      	b.n	878ae <_strtoul_r+0x9e>
   878e2:	9801      	ldr	r0, [sp, #4]
   878e4:	2322      	movs	r3, #34	; 0x22
   878e6:	6003      	str	r3, [r0, #0]
   878e8:	f04f 30ff 	mov.w	r0, #4294967295
   878ec:	e7df      	b.n	878ae <_strtoul_r+0x9e>
   878ee:	1cb4      	adds	r4, r6, #2
   878f0:	7875      	ldrb	r5, [r6, #1]
   878f2:	f04f 0a01 	mov.w	sl, #1
   878f6:	e7a9      	b.n	8784c <_strtoul_r+0x3c>
   878f8:	7820      	ldrb	r0, [r4, #0]
   878fa:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   878fe:	2858      	cmp	r0, #88	; 0x58
   87900:	d007      	beq.n	87912 <_strtoul_r+0x102>
   87902:	b97b      	cbnz	r3, 87924 <_strtoul_r+0x114>
   87904:	2308      	movs	r3, #8
   87906:	4699      	mov	r9, r3
   87908:	f04f 0b07 	mov.w	fp, #7
   8790c:	f06f 4860 	mvn.w	r8, #3758096384	; 0xe0000000
   87910:	e7a8      	b.n	87864 <_strtoul_r+0x54>
   87912:	2310      	movs	r3, #16
   87914:	7865      	ldrb	r5, [r4, #1]
   87916:	4699      	mov	r9, r3
   87918:	f04f 0b0f 	mov.w	fp, #15
   8791c:	3402      	adds	r4, #2
   8791e:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
   87922:	e79f      	b.n	87864 <_strtoul_r+0x54>
   87924:	f04f 38ff 	mov.w	r8, #4294967295
   87928:	fbb8 f8f3 	udiv	r8, r8, r3
   8792c:	fb03 fb08 	mul.w	fp, r3, r8
   87930:	4699      	mov	r9, r3
   87932:	ea6f 0b0b 	mvn.w	fp, fp
   87936:	e795      	b.n	87864 <_strtoul_r+0x54>
   87938:	2007063c 	.word	0x2007063c
   8793c:	19999999 	.word	0x19999999

00087940 <_strtoull_r>:
   87940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   87944:	4c60      	ldr	r4, [pc, #384]	; (87ac8 <_strtoull_r+0x188>)
   87946:	b085      	sub	sp, #20
   87948:	9200      	str	r2, [sp, #0]
   8794a:	9101      	str	r1, [sp, #4]
   8794c:	f8d4 8000 	ldr.w	r8, [r4]
   87950:	9003      	str	r0, [sp, #12]
   87952:	4699      	mov	r9, r3
   87954:	460a      	mov	r2, r1
   87956:	e000      	b.n	8795a <_strtoull_r+0x1a>
   87958:	4632      	mov	r2, r6
   8795a:	4616      	mov	r6, r2
   8795c:	f816 7b01 	ldrb.w	r7, [r6], #1
   87960:	eb08 0307 	add.w	r3, r8, r7
   87964:	785b      	ldrb	r3, [r3, #1]
   87966:	f003 0308 	and.w	r3, r3, #8
   8796a:	f003 01ff 	and.w	r1, r3, #255	; 0xff
   8796e:	2b00      	cmp	r3, #0
   87970:	d1f2      	bne.n	87958 <_strtoull_r+0x18>
   87972:	2f2d      	cmp	r7, #45	; 0x2d
   87974:	d07d      	beq.n	87a72 <_strtoull_r+0x132>
   87976:	2f2b      	cmp	r7, #43	; 0x2b
   87978:	bf08      	it	eq
   8797a:	7857      	ldrbeq	r7, [r2, #1]
   8797c:	9102      	str	r1, [sp, #8]
   8797e:	bf08      	it	eq
   87980:	1c96      	addeq	r6, r2, #2
   87982:	f039 0210 	bics.w	r2, r9, #16
   87986:	d055      	beq.n	87a34 <_strtoull_r+0xf4>
   87988:	ea4f 7be9 	mov.w	fp, r9, asr #31
   8798c:	464a      	mov	r2, r9
   8798e:	465b      	mov	r3, fp
   87990:	f04f 30ff 	mov.w	r0, #4294967295
   87994:	f04f 31ff 	mov.w	r1, #4294967295
   87998:	f7fc f84a 	bl	83a30 <__aeabi_uldivmod>
   8799c:	464a      	mov	r2, r9
   8799e:	4604      	mov	r4, r0
   879a0:	460d      	mov	r5, r1
   879a2:	465b      	mov	r3, fp
   879a4:	f04f 30ff 	mov.w	r0, #4294967295
   879a8:	f04f 31ff 	mov.w	r1, #4294967295
   879ac:	f7fc f840 	bl	83a30 <__aeabi_uldivmod>
   879b0:	46ca      	mov	sl, r9
   879b2:	4694      	mov	ip, r2
   879b4:	2300      	movs	r3, #0
   879b6:	2000      	movs	r0, #0
   879b8:	2100      	movs	r1, #0
   879ba:	e019      	b.n	879f0 <_strtoull_r+0xb0>
   879bc:	3f30      	subs	r7, #48	; 0x30
   879be:	45b9      	cmp	r9, r7
   879c0:	dd26      	ble.n	87a10 <_strtoull_r+0xd0>
   879c2:	2b00      	cmp	r3, #0
   879c4:	db33      	blt.n	87a2e <_strtoull_r+0xee>
   879c6:	428d      	cmp	r5, r1
   879c8:	bf08      	it	eq
   879ca:	4284      	cmpeq	r4, r0
   879cc:	d32f      	bcc.n	87a2e <_strtoull_r+0xee>
   879ce:	42a9      	cmp	r1, r5
   879d0:	bf08      	it	eq
   879d2:	42a0      	cmpeq	r0, r4
   879d4:	d029      	beq.n	87a2a <_strtoull_r+0xea>
   879d6:	fb00 f30b 	mul.w	r3, r0, fp
   879da:	fb0a 3301 	mla	r3, sl, r1, r3
   879de:	fba0 010a 	umull	r0, r1, r0, sl
   879e2:	4419      	add	r1, r3
   879e4:	19c0      	adds	r0, r0, r7
   879e6:	eb41 71e7 	adc.w	r1, r1, r7, asr #31
   879ea:	2301      	movs	r3, #1
   879ec:	f816 7b01 	ldrb.w	r7, [r6], #1
   879f0:	eb08 0207 	add.w	r2, r8, r7
   879f4:	7852      	ldrb	r2, [r2, #1]
   879f6:	f012 0f04 	tst.w	r2, #4
   879fa:	d1df      	bne.n	879bc <_strtoull_r+0x7c>
   879fc:	f012 0203 	ands.w	r2, r2, #3
   87a00:	d006      	beq.n	87a10 <_strtoull_r+0xd0>
   87a02:	2a01      	cmp	r2, #1
   87a04:	bf14      	ite	ne
   87a06:	2257      	movne	r2, #87	; 0x57
   87a08:	2237      	moveq	r2, #55	; 0x37
   87a0a:	1abf      	subs	r7, r7, r2
   87a0c:	45b9      	cmp	r9, r7
   87a0e:	dcd8      	bgt.n	879c2 <_strtoull_r+0x82>
   87a10:	2b00      	cmp	r3, #0
   87a12:	db26      	blt.n	87a62 <_strtoull_r+0x122>
   87a14:	9a02      	ldr	r2, [sp, #8]
   87a16:	bb02      	cbnz	r2, 87a5a <_strtoull_r+0x11a>
   87a18:	9a00      	ldr	r2, [sp, #0]
   87a1a:	b11a      	cbz	r2, 87a24 <_strtoull_r+0xe4>
   87a1c:	b9db      	cbnz	r3, 87a56 <_strtoull_r+0x116>
   87a1e:	9e01      	ldr	r6, [sp, #4]
   87a20:	9b00      	ldr	r3, [sp, #0]
   87a22:	601e      	str	r6, [r3, #0]
   87a24:	b005      	add	sp, #20
   87a26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87a2a:	4567      	cmp	r7, ip
   87a2c:	ddd3      	ble.n	879d6 <_strtoull_r+0x96>
   87a2e:	f04f 33ff 	mov.w	r3, #4294967295
   87a32:	e7db      	b.n	879ec <_strtoull_r+0xac>
   87a34:	2f30      	cmp	r7, #48	; 0x30
   87a36:	d021      	beq.n	87a7c <_strtoull_r+0x13c>
   87a38:	f1b9 0f00 	cmp.w	r9, #0
   87a3c:	d1a4      	bne.n	87988 <_strtoull_r+0x48>
   87a3e:	f04f 0c05 	mov.w	ip, #5
   87a42:	f04f 3499 	mov.w	r4, #2576980377	; 0x99999999
   87a46:	4d21      	ldr	r5, [pc, #132]	; (87acc <_strtoull_r+0x18c>)
   87a48:	f04f 0a0a 	mov.w	sl, #10
   87a4c:	f04f 0b00 	mov.w	fp, #0
   87a50:	f04f 090a 	mov.w	r9, #10
   87a54:	e7ae      	b.n	879b4 <_strtoull_r+0x74>
   87a56:	3e01      	subs	r6, #1
   87a58:	e7e2      	b.n	87a20 <_strtoull_r+0xe0>
   87a5a:	4240      	negs	r0, r0
   87a5c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   87a60:	e7da      	b.n	87a18 <_strtoull_r+0xd8>
   87a62:	9903      	ldr	r1, [sp, #12]
   87a64:	2222      	movs	r2, #34	; 0x22
   87a66:	600a      	str	r2, [r1, #0]
   87a68:	f04f 30ff 	mov.w	r0, #4294967295
   87a6c:	f04f 31ff 	mov.w	r1, #4294967295
   87a70:	e7d2      	b.n	87a18 <_strtoull_r+0xd8>
   87a72:	2101      	movs	r1, #1
   87a74:	1c96      	adds	r6, r2, #2
   87a76:	7857      	ldrb	r7, [r2, #1]
   87a78:	9102      	str	r1, [sp, #8]
   87a7a:	e782      	b.n	87982 <_strtoull_r+0x42>
   87a7c:	7833      	ldrb	r3, [r6, #0]
   87a7e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   87a82:	2b58      	cmp	r3, #88	; 0x58
   87a84:	d010      	beq.n	87aa8 <_strtoull_r+0x168>
   87a86:	f1b9 0f00 	cmp.w	r9, #0
   87a8a:	f47f af7d 	bne.w	87988 <_strtoull_r+0x48>
   87a8e:	f04f 0c07 	mov.w	ip, #7
   87a92:	f04f 34ff 	mov.w	r4, #4294967295
   87a96:	f06f 4560 	mvn.w	r5, #3758096384	; 0xe0000000
   87a9a:	f04f 0a08 	mov.w	sl, #8
   87a9e:	f04f 0b00 	mov.w	fp, #0
   87aa2:	f04f 0908 	mov.w	r9, #8
   87aa6:	e785      	b.n	879b4 <_strtoull_r+0x74>
   87aa8:	7877      	ldrb	r7, [r6, #1]
   87aaa:	f04f 0c0f 	mov.w	ip, #15
   87aae:	3602      	adds	r6, #2
   87ab0:	f04f 34ff 	mov.w	r4, #4294967295
   87ab4:	f06f 4570 	mvn.w	r5, #4026531840	; 0xf0000000
   87ab8:	f04f 0a10 	mov.w	sl, #16
   87abc:	f04f 0b00 	mov.w	fp, #0
   87ac0:	f04f 0910 	mov.w	r9, #16
   87ac4:	e776      	b.n	879b4 <_strtoull_r+0x74>
   87ac6:	bf00      	nop
   87ac8:	2007063c 	.word	0x2007063c
   87acc:	19999999 	.word	0x19999999

00087ad0 <__submore>:
   87ad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   87ad4:	460c      	mov	r4, r1
   87ad6:	6b09      	ldr	r1, [r1, #48]	; 0x30
   87ad8:	f104 0340 	add.w	r3, r4, #64	; 0x40
   87adc:	4299      	cmp	r1, r3
   87ade:	d014      	beq.n	87b0a <__submore+0x3a>
   87ae0:	6b66      	ldr	r6, [r4, #52]	; 0x34
   87ae2:	0077      	lsls	r7, r6, #1
   87ae4:	463a      	mov	r2, r7
   87ae6:	f7ff fa3b 	bl	86f60 <_realloc_r>
   87aea:	4605      	mov	r5, r0
   87aec:	b348      	cbz	r0, 87b42 <__submore+0x72>
   87aee:	eb00 0806 	add.w	r8, r0, r6
   87af2:	4632      	mov	r2, r6
   87af4:	4640      	mov	r0, r8
   87af6:	4629      	mov	r1, r5
   87af8:	f7fc faca 	bl	84090 <memcpy>
   87afc:	f8c4 8000 	str.w	r8, [r4]
   87b00:	6325      	str	r5, [r4, #48]	; 0x30
   87b02:	6367      	str	r7, [r4, #52]	; 0x34
   87b04:	2000      	movs	r0, #0
   87b06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   87b0a:	f44f 6180 	mov.w	r1, #1024	; 0x400
   87b0e:	f7fe fe93 	bl	86838 <_malloc_r>
   87b12:	4603      	mov	r3, r0
   87b14:	b1a8      	cbz	r0, 87b42 <__submore+0x72>
   87b16:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
   87b1a:	f44f 6180 	mov.w	r1, #1024	; 0x400
   87b1e:	6320      	str	r0, [r4, #48]	; 0x30
   87b20:	6361      	str	r1, [r4, #52]	; 0x34
   87b22:	f880 23ff 	strb.w	r2, [r0, #1023]	; 0x3ff
   87b26:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
   87b2a:	f200 32fd 	addw	r2, r0, #1021	; 0x3fd
   87b2e:	f880 13fe 	strb.w	r1, [r0, #1022]	; 0x3fe
   87b32:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
   87b36:	2000      	movs	r0, #0
   87b38:	f883 13fd 	strb.w	r1, [r3, #1021]	; 0x3fd
   87b3c:	6022      	str	r2, [r4, #0]
   87b3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   87b42:	f04f 30ff 	mov.w	r0, #4294967295
   87b46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   87b4a:	bf00      	nop

00087b4c <_ungetc_r>:
   87b4c:	b570      	push	{r4, r5, r6, lr}
   87b4e:	460e      	mov	r6, r1
   87b50:	3101      	adds	r1, #1
   87b52:	4614      	mov	r4, r2
   87b54:	4605      	mov	r5, r0
   87b56:	d031      	beq.n	87bbc <_ungetc_r+0x70>
   87b58:	b110      	cbz	r0, 87b60 <_ungetc_r+0x14>
   87b5a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   87b5c:	2b00      	cmp	r3, #0
   87b5e:	d030      	beq.n	87bc2 <_ungetc_r+0x76>
   87b60:	89a3      	ldrh	r3, [r4, #12]
   87b62:	049a      	lsls	r2, r3, #18
   87b64:	d405      	bmi.n	87b72 <_ungetc_r+0x26>
   87b66:	6e62      	ldr	r2, [r4, #100]	; 0x64
   87b68:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   87b6c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   87b70:	6662      	str	r2, [r4, #100]	; 0x64
   87b72:	f023 0320 	bic.w	r3, r3, #32
   87b76:	b29b      	uxth	r3, r3
   87b78:	b29a      	uxth	r2, r3
   87b7a:	0750      	lsls	r0, r2, #29
   87b7c:	81a3      	strh	r3, [r4, #12]
   87b7e:	d406      	bmi.n	87b8e <_ungetc_r+0x42>
   87b80:	06d1      	lsls	r1, r2, #27
   87b82:	d51b      	bpl.n	87bbc <_ungetc_r+0x70>
   87b84:	0712      	lsls	r2, r2, #28
   87b86:	d438      	bmi.n	87bfa <_ungetc_r+0xae>
   87b88:	f043 0304 	orr.w	r3, r3, #4
   87b8c:	81a3      	strh	r3, [r4, #12]
   87b8e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   87b90:	b2f6      	uxtb	r6, r6
   87b92:	b1cb      	cbz	r3, 87bc8 <_ungetc_r+0x7c>
   87b94:	6862      	ldr	r2, [r4, #4]
   87b96:	6b63      	ldr	r3, [r4, #52]	; 0x34
   87b98:	429a      	cmp	r2, r3
   87b9a:	da09      	bge.n	87bb0 <_ungetc_r+0x64>
   87b9c:	6823      	ldr	r3, [r4, #0]
   87b9e:	4630      	mov	r0, r6
   87ba0:	1e5a      	subs	r2, r3, #1
   87ba2:	6022      	str	r2, [r4, #0]
   87ba4:	f803 6c01 	strb.w	r6, [r3, #-1]
   87ba8:	6863      	ldr	r3, [r4, #4]
   87baa:	3301      	adds	r3, #1
   87bac:	6063      	str	r3, [r4, #4]
   87bae:	bd70      	pop	{r4, r5, r6, pc}
   87bb0:	4628      	mov	r0, r5
   87bb2:	4621      	mov	r1, r4
   87bb4:	f7ff ff8c 	bl	87ad0 <__submore>
   87bb8:	2800      	cmp	r0, #0
   87bba:	d0ef      	beq.n	87b9c <_ungetc_r+0x50>
   87bbc:	f04f 30ff 	mov.w	r0, #4294967295
   87bc0:	bd70      	pop	{r4, r5, r6, pc}
   87bc2:	f7fe f8fb 	bl	85dbc <__sinit>
   87bc6:	e7cb      	b.n	87b60 <_ungetc_r+0x14>
   87bc8:	6923      	ldr	r3, [r4, #16]
   87bca:	6822      	ldr	r2, [r4, #0]
   87bcc:	b12b      	cbz	r3, 87bda <_ungetc_r+0x8e>
   87bce:	4293      	cmp	r3, r2
   87bd0:	d203      	bcs.n	87bda <_ungetc_r+0x8e>
   87bd2:	f812 0c01 	ldrb.w	r0, [r2, #-1]
   87bd6:	42b0      	cmp	r0, r6
   87bd8:	d01c      	beq.n	87c14 <_ungetc_r+0xc8>
   87bda:	6861      	ldr	r1, [r4, #4]
   87bdc:	4623      	mov	r3, r4
   87bde:	f104 0540 	add.w	r5, r4, #64	; 0x40
   87be2:	2003      	movs	r0, #3
   87be4:	63a2      	str	r2, [r4, #56]	; 0x38
   87be6:	6360      	str	r0, [r4, #52]	; 0x34
   87be8:	63e1      	str	r1, [r4, #60]	; 0x3c
   87bea:	6325      	str	r5, [r4, #48]	; 0x30
   87bec:	2201      	movs	r2, #1
   87bee:	f803 6f42 	strb.w	r6, [r3, #66]!
   87bf2:	6023      	str	r3, [r4, #0]
   87bf4:	4630      	mov	r0, r6
   87bf6:	6062      	str	r2, [r4, #4]
   87bf8:	bd70      	pop	{r4, r5, r6, pc}
   87bfa:	4628      	mov	r0, r5
   87bfc:	4621      	mov	r1, r4
   87bfe:	f7fe f8af 	bl	85d60 <_fflush_r>
   87c02:	2800      	cmp	r0, #0
   87c04:	d1da      	bne.n	87bbc <_ungetc_r+0x70>
   87c06:	89a3      	ldrh	r3, [r4, #12]
   87c08:	60a0      	str	r0, [r4, #8]
   87c0a:	f023 0308 	bic.w	r3, r3, #8
   87c0e:	61a0      	str	r0, [r4, #24]
   87c10:	b29b      	uxth	r3, r3
   87c12:	e7b9      	b.n	87b88 <_ungetc_r+0x3c>
   87c14:	6863      	ldr	r3, [r4, #4]
   87c16:	3a01      	subs	r2, #1
   87c18:	3301      	adds	r3, #1
   87c1a:	e884 000c 	stmia.w	r4, {r2, r3}
   87c1e:	bd70      	pop	{r4, r5, r6, pc}

00087c20 <__swbuf_r>:
   87c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   87c22:	460d      	mov	r5, r1
   87c24:	4614      	mov	r4, r2
   87c26:	4607      	mov	r7, r0
   87c28:	b110      	cbz	r0, 87c30 <__swbuf_r+0x10>
   87c2a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   87c2c:	2b00      	cmp	r3, #0
   87c2e:	d048      	beq.n	87cc2 <__swbuf_r+0xa2>
   87c30:	89a2      	ldrh	r2, [r4, #12]
   87c32:	69a0      	ldr	r0, [r4, #24]
   87c34:	b293      	uxth	r3, r2
   87c36:	60a0      	str	r0, [r4, #8]
   87c38:	0718      	lsls	r0, r3, #28
   87c3a:	d538      	bpl.n	87cae <__swbuf_r+0x8e>
   87c3c:	6926      	ldr	r6, [r4, #16]
   87c3e:	2e00      	cmp	r6, #0
   87c40:	d035      	beq.n	87cae <__swbuf_r+0x8e>
   87c42:	0499      	lsls	r1, r3, #18
   87c44:	b2ed      	uxtb	r5, r5
   87c46:	d515      	bpl.n	87c74 <__swbuf_r+0x54>
   87c48:	6823      	ldr	r3, [r4, #0]
   87c4a:	6962      	ldr	r2, [r4, #20]
   87c4c:	1b9e      	subs	r6, r3, r6
   87c4e:	4296      	cmp	r6, r2
   87c50:	da1c      	bge.n	87c8c <__swbuf_r+0x6c>
   87c52:	3601      	adds	r6, #1
   87c54:	68a2      	ldr	r2, [r4, #8]
   87c56:	1c59      	adds	r1, r3, #1
   87c58:	3a01      	subs	r2, #1
   87c5a:	60a2      	str	r2, [r4, #8]
   87c5c:	6021      	str	r1, [r4, #0]
   87c5e:	701d      	strb	r5, [r3, #0]
   87c60:	6963      	ldr	r3, [r4, #20]
   87c62:	42b3      	cmp	r3, r6
   87c64:	d01a      	beq.n	87c9c <__swbuf_r+0x7c>
   87c66:	89a3      	ldrh	r3, [r4, #12]
   87c68:	07db      	lsls	r3, r3, #31
   87c6a:	d501      	bpl.n	87c70 <__swbuf_r+0x50>
   87c6c:	2d0a      	cmp	r5, #10
   87c6e:	d015      	beq.n	87c9c <__swbuf_r+0x7c>
   87c70:	4628      	mov	r0, r5
   87c72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   87c74:	6e63      	ldr	r3, [r4, #100]	; 0x64
   87c76:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   87c7a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   87c7e:	6663      	str	r3, [r4, #100]	; 0x64
   87c80:	6823      	ldr	r3, [r4, #0]
   87c82:	81a2      	strh	r2, [r4, #12]
   87c84:	6962      	ldr	r2, [r4, #20]
   87c86:	1b9e      	subs	r6, r3, r6
   87c88:	4296      	cmp	r6, r2
   87c8a:	dbe2      	blt.n	87c52 <__swbuf_r+0x32>
   87c8c:	4638      	mov	r0, r7
   87c8e:	4621      	mov	r1, r4
   87c90:	f7fe f866 	bl	85d60 <_fflush_r>
   87c94:	b940      	cbnz	r0, 87ca8 <__swbuf_r+0x88>
   87c96:	6823      	ldr	r3, [r4, #0]
   87c98:	2601      	movs	r6, #1
   87c9a:	e7db      	b.n	87c54 <__swbuf_r+0x34>
   87c9c:	4638      	mov	r0, r7
   87c9e:	4621      	mov	r1, r4
   87ca0:	f7fe f85e 	bl	85d60 <_fflush_r>
   87ca4:	2800      	cmp	r0, #0
   87ca6:	d0e3      	beq.n	87c70 <__swbuf_r+0x50>
   87ca8:	f04f 30ff 	mov.w	r0, #4294967295
   87cac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   87cae:	4638      	mov	r0, r7
   87cb0:	4621      	mov	r1, r4
   87cb2:	f7fd ff3f 	bl	85b34 <__swsetup_r>
   87cb6:	2800      	cmp	r0, #0
   87cb8:	d1f6      	bne.n	87ca8 <__swbuf_r+0x88>
   87cba:	89a2      	ldrh	r2, [r4, #12]
   87cbc:	6926      	ldr	r6, [r4, #16]
   87cbe:	b293      	uxth	r3, r2
   87cc0:	e7bf      	b.n	87c42 <__swbuf_r+0x22>
   87cc2:	f7fe f87b 	bl	85dbc <__sinit>
   87cc6:	e7b3      	b.n	87c30 <__swbuf_r+0x10>

00087cc8 <_wcrtomb_r>:
   87cc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   87ccc:	461e      	mov	r6, r3
   87cce:	b086      	sub	sp, #24
   87cd0:	460c      	mov	r4, r1
   87cd2:	4605      	mov	r5, r0
   87cd4:	4617      	mov	r7, r2
   87cd6:	4b0f      	ldr	r3, [pc, #60]	; (87d14 <_wcrtomb_r+0x4c>)
   87cd8:	b191      	cbz	r1, 87d00 <_wcrtomb_r+0x38>
   87cda:	f8d3 8000 	ldr.w	r8, [r3]
   87cde:	f7fe fd29 	bl	86734 <__locale_charset>
   87ce2:	9600      	str	r6, [sp, #0]
   87ce4:	4603      	mov	r3, r0
   87ce6:	4621      	mov	r1, r4
   87ce8:	463a      	mov	r2, r7
   87cea:	4628      	mov	r0, r5
   87cec:	47c0      	blx	r8
   87cee:	1c43      	adds	r3, r0, #1
   87cf0:	d103      	bne.n	87cfa <_wcrtomb_r+0x32>
   87cf2:	2200      	movs	r2, #0
   87cf4:	238a      	movs	r3, #138	; 0x8a
   87cf6:	6032      	str	r2, [r6, #0]
   87cf8:	602b      	str	r3, [r5, #0]
   87cfa:	b006      	add	sp, #24
   87cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   87d00:	681f      	ldr	r7, [r3, #0]
   87d02:	f7fe fd17 	bl	86734 <__locale_charset>
   87d06:	9600      	str	r6, [sp, #0]
   87d08:	4603      	mov	r3, r0
   87d0a:	4622      	mov	r2, r4
   87d0c:	4628      	mov	r0, r5
   87d0e:	a903      	add	r1, sp, #12
   87d10:	47b8      	blx	r7
   87d12:	e7ec      	b.n	87cee <_wcrtomb_r+0x26>
   87d14:	20070a78 	.word	0x20070a78

00087d18 <__ascii_wctomb>:
   87d18:	b121      	cbz	r1, 87d24 <__ascii_wctomb+0xc>
   87d1a:	2aff      	cmp	r2, #255	; 0xff
   87d1c:	d804      	bhi.n	87d28 <__ascii_wctomb+0x10>
   87d1e:	700a      	strb	r2, [r1, #0]
   87d20:	2001      	movs	r0, #1
   87d22:	4770      	bx	lr
   87d24:	4608      	mov	r0, r1
   87d26:	4770      	bx	lr
   87d28:	238a      	movs	r3, #138	; 0x8a
   87d2a:	6003      	str	r3, [r0, #0]
   87d2c:	f04f 30ff 	mov.w	r0, #4294967295
   87d30:	4770      	bx	lr
   87d32:	bf00      	nop

00087d34 <_write_r>:
   87d34:	b570      	push	{r4, r5, r6, lr}
   87d36:	4c08      	ldr	r4, [pc, #32]	; (87d58 <_write_r+0x24>)
   87d38:	4606      	mov	r6, r0
   87d3a:	2500      	movs	r5, #0
   87d3c:	4608      	mov	r0, r1
   87d3e:	4611      	mov	r1, r2
   87d40:	461a      	mov	r2, r3
   87d42:	6025      	str	r5, [r4, #0]
   87d44:	f7f8 ffce 	bl	80ce4 <_write>
   87d48:	1c43      	adds	r3, r0, #1
   87d4a:	d000      	beq.n	87d4e <_write_r+0x1a>
   87d4c:	bd70      	pop	{r4, r5, r6, pc}
   87d4e:	6823      	ldr	r3, [r4, #0]
   87d50:	2b00      	cmp	r3, #0
   87d52:	d0fb      	beq.n	87d4c <_write_r+0x18>
   87d54:	6033      	str	r3, [r6, #0]
   87d56:	bd70      	pop	{r4, r5, r6, pc}
   87d58:	2007ad98 	.word	0x2007ad98

00087d5c <__register_exitproc>:
   87d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
   87d5e:	4c27      	ldr	r4, [pc, #156]	; (87dfc <__register_exitproc+0xa0>)
   87d60:	b085      	sub	sp, #20
   87d62:	6826      	ldr	r6, [r4, #0]
   87d64:	4607      	mov	r7, r0
   87d66:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   87d6a:	2c00      	cmp	r4, #0
   87d6c:	d040      	beq.n	87df0 <__register_exitproc+0x94>
   87d6e:	6865      	ldr	r5, [r4, #4]
   87d70:	2d1f      	cmp	r5, #31
   87d72:	dd1e      	ble.n	87db2 <__register_exitproc+0x56>
   87d74:	4822      	ldr	r0, [pc, #136]	; (87e00 <__register_exitproc+0xa4>)
   87d76:	b918      	cbnz	r0, 87d80 <__register_exitproc+0x24>
   87d78:	f04f 30ff 	mov.w	r0, #4294967295
   87d7c:	b005      	add	sp, #20
   87d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   87d80:	f44f 70c8 	mov.w	r0, #400	; 0x190
   87d84:	9103      	str	r1, [sp, #12]
   87d86:	9202      	str	r2, [sp, #8]
   87d88:	9301      	str	r3, [sp, #4]
   87d8a:	f7fe fd4d 	bl	86828 <malloc>
   87d8e:	9903      	ldr	r1, [sp, #12]
   87d90:	4604      	mov	r4, r0
   87d92:	9a02      	ldr	r2, [sp, #8]
   87d94:	9b01      	ldr	r3, [sp, #4]
   87d96:	2800      	cmp	r0, #0
   87d98:	d0ee      	beq.n	87d78 <__register_exitproc+0x1c>
   87d9a:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
   87d9e:	2000      	movs	r0, #0
   87da0:	6025      	str	r5, [r4, #0]
   87da2:	6060      	str	r0, [r4, #4]
   87da4:	4605      	mov	r5, r0
   87da6:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   87daa:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   87dae:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   87db2:	b93f      	cbnz	r7, 87dc4 <__register_exitproc+0x68>
   87db4:	1c6b      	adds	r3, r5, #1
   87db6:	2000      	movs	r0, #0
   87db8:	3502      	adds	r5, #2
   87dba:	6063      	str	r3, [r4, #4]
   87dbc:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
   87dc0:	b005      	add	sp, #20
   87dc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   87dc4:	2601      	movs	r6, #1
   87dc6:	40ae      	lsls	r6, r5
   87dc8:	eb04 0085 	add.w	r0, r4, r5, lsl #2
   87dcc:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   87dd0:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   87dd4:	2f02      	cmp	r7, #2
   87dd6:	ea42 0206 	orr.w	r2, r2, r6
   87dda:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   87dde:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   87de2:	d1e7      	bne.n	87db4 <__register_exitproc+0x58>
   87de4:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   87de8:	431e      	orrs	r6, r3
   87dea:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
   87dee:	e7e1      	b.n	87db4 <__register_exitproc+0x58>
   87df0:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   87df4:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   87df8:	e7b9      	b.n	87d6e <__register_exitproc+0x12>
   87dfa:	bf00      	nop
   87dfc:	000884cc 	.word	0x000884cc
   87e00:	00086829 	.word	0x00086829

00087e04 <_close_r>:
   87e04:	b538      	push	{r3, r4, r5, lr}
   87e06:	4c07      	ldr	r4, [pc, #28]	; (87e24 <_close_r+0x20>)
   87e08:	2300      	movs	r3, #0
   87e0a:	4605      	mov	r5, r0
   87e0c:	4608      	mov	r0, r1
   87e0e:	6023      	str	r3, [r4, #0]
   87e10:	f7fa fe4c 	bl	82aac <_close>
   87e14:	1c43      	adds	r3, r0, #1
   87e16:	d000      	beq.n	87e1a <_close_r+0x16>
   87e18:	bd38      	pop	{r3, r4, r5, pc}
   87e1a:	6823      	ldr	r3, [r4, #0]
   87e1c:	2b00      	cmp	r3, #0
   87e1e:	d0fb      	beq.n	87e18 <_close_r+0x14>
   87e20:	602b      	str	r3, [r5, #0]
   87e22:	bd38      	pop	{r3, r4, r5, pc}
   87e24:	2007ad98 	.word	0x2007ad98

00087e28 <_fclose_r>:
   87e28:	b570      	push	{r4, r5, r6, lr}
   87e2a:	460c      	mov	r4, r1
   87e2c:	4605      	mov	r5, r0
   87e2e:	b131      	cbz	r1, 87e3e <_fclose_r+0x16>
   87e30:	b110      	cbz	r0, 87e38 <_fclose_r+0x10>
   87e32:	6b83      	ldr	r3, [r0, #56]	; 0x38
   87e34:	2b00      	cmp	r3, #0
   87e36:	d02f      	beq.n	87e98 <_fclose_r+0x70>
   87e38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   87e3c:	b90b      	cbnz	r3, 87e42 <_fclose_r+0x1a>
   87e3e:	2000      	movs	r0, #0
   87e40:	bd70      	pop	{r4, r5, r6, pc}
   87e42:	4628      	mov	r0, r5
   87e44:	4621      	mov	r1, r4
   87e46:	f7fd ff8b 	bl	85d60 <_fflush_r>
   87e4a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   87e4c:	4606      	mov	r6, r0
   87e4e:	b133      	cbz	r3, 87e5e <_fclose_r+0x36>
   87e50:	4628      	mov	r0, r5
   87e52:	69e1      	ldr	r1, [r4, #28]
   87e54:	4798      	blx	r3
   87e56:	2800      	cmp	r0, #0
   87e58:	bfb8      	it	lt
   87e5a:	f04f 36ff 	movlt.w	r6, #4294967295
   87e5e:	89a3      	ldrh	r3, [r4, #12]
   87e60:	061b      	lsls	r3, r3, #24
   87e62:	d41c      	bmi.n	87e9e <_fclose_r+0x76>
   87e64:	6b21      	ldr	r1, [r4, #48]	; 0x30
   87e66:	b141      	cbz	r1, 87e7a <_fclose_r+0x52>
   87e68:	f104 0340 	add.w	r3, r4, #64	; 0x40
   87e6c:	4299      	cmp	r1, r3
   87e6e:	d002      	beq.n	87e76 <_fclose_r+0x4e>
   87e70:	4628      	mov	r0, r5
   87e72:	f7fe f9af 	bl	861d4 <_free_r>
   87e76:	2300      	movs	r3, #0
   87e78:	6323      	str	r3, [r4, #48]	; 0x30
   87e7a:	6c61      	ldr	r1, [r4, #68]	; 0x44
   87e7c:	b121      	cbz	r1, 87e88 <_fclose_r+0x60>
   87e7e:	4628      	mov	r0, r5
   87e80:	f7fe f9a8 	bl	861d4 <_free_r>
   87e84:	2300      	movs	r3, #0
   87e86:	6463      	str	r3, [r4, #68]	; 0x44
   87e88:	f7fe f812 	bl	85eb0 <__sfp_lock_acquire>
   87e8c:	2300      	movs	r3, #0
   87e8e:	81a3      	strh	r3, [r4, #12]
   87e90:	f7fe f810 	bl	85eb4 <__sfp_lock_release>
   87e94:	4630      	mov	r0, r6
   87e96:	bd70      	pop	{r4, r5, r6, pc}
   87e98:	f7fd ff90 	bl	85dbc <__sinit>
   87e9c:	e7cc      	b.n	87e38 <_fclose_r+0x10>
   87e9e:	4628      	mov	r0, r5
   87ea0:	6921      	ldr	r1, [r4, #16]
   87ea2:	f7fe f997 	bl	861d4 <_free_r>
   87ea6:	e7dd      	b.n	87e64 <_fclose_r+0x3c>

00087ea8 <fclose>:
   87ea8:	4b02      	ldr	r3, [pc, #8]	; (87eb4 <fclose+0xc>)
   87eaa:	4601      	mov	r1, r0
   87eac:	6818      	ldr	r0, [r3, #0]
   87eae:	f7ff bfbb 	b.w	87e28 <_fclose_r>
   87eb2:	bf00      	nop
   87eb4:	20070638 	.word	0x20070638

00087eb8 <_fstat_r>:
   87eb8:	b538      	push	{r3, r4, r5, lr}
   87eba:	4c08      	ldr	r4, [pc, #32]	; (87edc <_fstat_r+0x24>)
   87ebc:	2300      	movs	r3, #0
   87ebe:	4605      	mov	r5, r0
   87ec0:	4608      	mov	r0, r1
   87ec2:	4611      	mov	r1, r2
   87ec4:	6023      	str	r3, [r4, #0]
   87ec6:	f7fa fdf5 	bl	82ab4 <_fstat>
   87eca:	1c43      	adds	r3, r0, #1
   87ecc:	d000      	beq.n	87ed0 <_fstat_r+0x18>
   87ece:	bd38      	pop	{r3, r4, r5, pc}
   87ed0:	6823      	ldr	r3, [r4, #0]
   87ed2:	2b00      	cmp	r3, #0
   87ed4:	d0fb      	beq.n	87ece <_fstat_r+0x16>
   87ed6:	602b      	str	r3, [r5, #0]
   87ed8:	bd38      	pop	{r3, r4, r5, pc}
   87eda:	bf00      	nop
   87edc:	2007ad98 	.word	0x2007ad98

00087ee0 <_isatty_r>:
   87ee0:	b538      	push	{r3, r4, r5, lr}
   87ee2:	4c07      	ldr	r4, [pc, #28]	; (87f00 <_isatty_r+0x20>)
   87ee4:	2300      	movs	r3, #0
   87ee6:	4605      	mov	r5, r0
   87ee8:	4608      	mov	r0, r1
   87eea:	6023      	str	r3, [r4, #0]
   87eec:	f7fa fde8 	bl	82ac0 <_isatty>
   87ef0:	1c43      	adds	r3, r0, #1
   87ef2:	d000      	beq.n	87ef6 <_isatty_r+0x16>
   87ef4:	bd38      	pop	{r3, r4, r5, pc}
   87ef6:	6823      	ldr	r3, [r4, #0]
   87ef8:	2b00      	cmp	r3, #0
   87efa:	d0fb      	beq.n	87ef4 <_isatty_r+0x14>
   87efc:	602b      	str	r3, [r5, #0]
   87efe:	bd38      	pop	{r3, r4, r5, pc}
   87f00:	2007ad98 	.word	0x2007ad98

00087f04 <_lseek_r>:
   87f04:	b570      	push	{r4, r5, r6, lr}
   87f06:	4c08      	ldr	r4, [pc, #32]	; (87f28 <_lseek_r+0x24>)
   87f08:	4606      	mov	r6, r0
   87f0a:	2500      	movs	r5, #0
   87f0c:	4608      	mov	r0, r1
   87f0e:	4611      	mov	r1, r2
   87f10:	461a      	mov	r2, r3
   87f12:	6025      	str	r5, [r4, #0]
   87f14:	f7fa fdd6 	bl	82ac4 <_lseek>
   87f18:	1c43      	adds	r3, r0, #1
   87f1a:	d000      	beq.n	87f1e <_lseek_r+0x1a>
   87f1c:	bd70      	pop	{r4, r5, r6, pc}
   87f1e:	6823      	ldr	r3, [r4, #0]
   87f20:	2b00      	cmp	r3, #0
   87f22:	d0fb      	beq.n	87f1c <_lseek_r+0x18>
   87f24:	6033      	str	r3, [r6, #0]
   87f26:	bd70      	pop	{r4, r5, r6, pc}
   87f28:	2007ad98 	.word	0x2007ad98

00087f2c <_read_r>:
   87f2c:	b570      	push	{r4, r5, r6, lr}
   87f2e:	4c08      	ldr	r4, [pc, #32]	; (87f50 <_read_r+0x24>)
   87f30:	4606      	mov	r6, r0
   87f32:	2500      	movs	r5, #0
   87f34:	4608      	mov	r0, r1
   87f36:	4611      	mov	r1, r2
   87f38:	461a      	mov	r2, r3
   87f3a:	6025      	str	r5, [r4, #0]
   87f3c:	f7f8 fe6c 	bl	80c18 <_read>
   87f40:	1c43      	adds	r3, r0, #1
   87f42:	d000      	beq.n	87f46 <_read_r+0x1a>
   87f44:	bd70      	pop	{r4, r5, r6, pc}
   87f46:	6823      	ldr	r3, [r4, #0]
   87f48:	2b00      	cmp	r3, #0
   87f4a:	d0fb      	beq.n	87f44 <_read_r+0x18>
   87f4c:	6033      	str	r3, [r6, #0]
   87f4e:	bd70      	pop	{r4, r5, r6, pc}
   87f50:	2007ad98 	.word	0x2007ad98
   87f54:	69736e49 	.word	0x69736e49
   87f58:	72206564 	.word	0x72206564
   87f5c:	7461746f 	.word	0x7461746f
   87f60:	66654c65 	.word	0x66654c65
   87f64:	00000074 	.word	0x00000074
   87f68:	76697244 	.word	0x76697244
   87f6c:	00676e69 	.word	0x00676e69
   87f70:	4473695f 	.word	0x4473695f
   87f74:	50656e6f 	.word	0x50656e6f
   87f78:	756b6369 	.word	0x756b6369
   87f7c:	00000070 	.word	0x00000070
   87f80:	56495244 	.word	0x56495244
   87f84:	20474e49 	.word	0x20474e49
   87f88:	4f204f54 	.word	0x4f204f54
   87f8c:	43454a42 	.word	0x43454a42
   87f90:	00000054 	.word	0x00000054
   87f94:	4473695f 	.word	0x4473695f
   87f98:	44656e6f 	.word	0x44656e6f
   87f9c:	6f706f72 	.word	0x6f706f72
   87fa0:	00006666 	.word	0x00006666
   87fa4:	76697244 	.word	0x76697244
   87fa8:	20676e69 	.word	0x20676e69
   87fac:	25206f74 	.word	0x25206f74
   87fb0:	00000a64 	.word	0x00000a64
   87fb4:	69727241 	.word	0x69727241
   87fb8:	20646576 	.word	0x20646576
   87fbc:	25205441 	.word	0x25205441
   87fc0:	00000a64 	.word	0x00000a64
   87fc4:	6c6c6f63 	.word	0x6c6c6f63
   87fc8:	41746365 	.word	0x41746365
   87fcc:	203d6c6c 	.word	0x203d6c6c
   87fd0:	00006425 	.word	0x00006425
   87fd4:	44746573 	.word	0x44746573
   87fd8:	50656e6f 	.word	0x50656e6f
   87fdc:	756b6369 	.word	0x756b6369
   87fe0:	00000a70 	.word	0x00000a70
   87fe4:	44746573 	.word	0x44746573
   87fe8:	44656e6f 	.word	0x44656e6f
   87fec:	6f706f72 	.word	0x6f706f72
   87ff0:	000a6666 	.word	0x000a6666
   87ff4:	6b636f53 	.word	0x6b636f53
   87ff8:	00000000 	.word	0x00000000
   87ffc:	73616c47 	.word	0x73616c47
   88000:	00000073 	.word	0x00000073
   88004:	65627543 	.word	0x65627543
   88008:	00000000 	.word	0x00000000
   8800c:	706f7244 	.word	0x706f7244
   88010:	66666f20 	.word	0x66666f20
   88014:	00000000 	.word	0x00000000
   88018:	00000724 	.word	0x00000724
   8801c:	5f495754 	.word	0x5f495754
   88020:	5f444d43 	.word	0x5f444d43
   88024:	5f4d5241 	.word	0x5f4d5241
   88028:	54494e49 	.word	0x54494e49
   8802c:	0000000a 	.word	0x0000000a
   88030:	5f495754 	.word	0x5f495754
   88034:	5f444d43 	.word	0x5f444d43
   88038:	5f4d5241 	.word	0x5f4d5241
   8803c:	5f514552 	.word	0x5f514552
   88040:	5f584f42 	.word	0x5f584f42
   88044:	4f464e49 	.word	0x4f464e49
   88048:	0000000a 	.word	0x0000000a
   8804c:	5f495754 	.word	0x5f495754
   88050:	5f444d43 	.word	0x5f444d43
   88054:	5f4d5241 	.word	0x5f4d5241
   88058:	5f514552 	.word	0x5f514552
   8805c:	5f4a424f 	.word	0x5f4a424f
   88060:	4f464e49 	.word	0x4f464e49
   88064:	0000000a 	.word	0x0000000a
   88068:	5f495754 	.word	0x5f495754
   8806c:	5f444d43 	.word	0x5f444d43
   88070:	5f4d5241 	.word	0x5f4d5241
   88074:	5f514552 	.word	0x5f514552
   88078:	4c4c4f43 	.word	0x4c4c4f43
   8807c:	5f544345 	.word	0x5f544345
   88080:	4f464e49 	.word	0x4f464e49
   88084:	0000000a 	.word	0x0000000a
   88088:	5f495754 	.word	0x5f495754
   8808c:	5f444d43 	.word	0x5f444d43
   88090:	4b434950 	.word	0x4b434950
   88094:	535f5055 	.word	0x535f5055
   88098:	54524154 	.word	0x54524154
   8809c:	0000000a 	.word	0x0000000a
   880a0:	5f495754 	.word	0x5f495754
   880a4:	5f444d43 	.word	0x5f444d43
   880a8:	4b434950 	.word	0x4b434950
   880ac:	535f5055 	.word	0x535f5055
   880b0:	55544154 	.word	0x55544154
   880b4:	00000a53 	.word	0x00000a53
   880b8:	5f495754 	.word	0x5f495754
   880bc:	5f444d43 	.word	0x5f444d43
   880c0:	504f5244 	.word	0x504f5244
   880c4:	5f46464f 	.word	0x5f46464f
   880c8:	52415453 	.word	0x52415453
   880cc:	00000a54 	.word	0x00000a54
   880d0:	5f495754 	.word	0x5f495754
   880d4:	5f444d43 	.word	0x5f444d43
   880d8:	504f5244 	.word	0x504f5244
   880dc:	5f46464f 	.word	0x5f46464f
   880e0:	54415453 	.word	0x54415453
   880e4:	000a5355 	.word	0x000a5355
   880e8:	5f495754 	.word	0x5f495754
   880ec:	5f444d43 	.word	0x5f444d43
   880f0:	4f525245 	.word	0x4f525245
   880f4:	00000a52 	.word	0x00000a52
   880f8:	6f727265 	.word	0x6f727265
   880fc:	00000a72 	.word	0x00000a72
   88100:	6c696146 	.word	0x6c696146
   88104:	31313120 	.word	0x31313120
   88108:	00000000 	.word	0x00000000
   8810c:	6c696146 	.word	0x6c696146
   88110:	32323220 	.word	0x32323220
   88114:	00000000 	.word	0x00000000
   88118:	6c696146 	.word	0x6c696146
   8811c:	33333320 	.word	0x33333320
   88120:	00000000 	.word	0x00000000
   88124:	4f525245 	.word	0x4f525245
   88128:	69702052 	.word	0x69702052
   8812c:	70756b63 	.word	0x70756b63
   88130:	61747320 	.word	0x61747320
   88134:	00737574 	.word	0x00737574
   88138:	3a746f67 	.word	0x3a746f67
   8813c:	20782520 	.word	0x20782520
   88140:	000a7525 	.word	0x000a7525
   88144:	6f727245 	.word	0x6f727245
   88148:	6e6f2072 	.word	0x6e6f2072
   8814c:	6e657320 	.word	0x6e657320
   88150:	74732064 	.word	0x74732064
   88154:	73757461 	.word	0x73757461
   88158:	63697020 	.word	0x63697020
   8815c:	0070756b 	.word	0x0070756b
   88160:	444e4553 	.word	0x444e4553
   88164:	434f5320 	.word	0x434f5320
   88168:	5854454b 	.word	0x5854454b
   8816c:	00000059 	.word	0x00000059
   88170:	444e4553 	.word	0x444e4553
   88174:	55515320 	.word	0x55515320
   88178:	58455241 	.word	0x58455241
   8817c:	00000059 	.word	0x00000059
   88180:	444e4553 	.word	0x444e4553
   88184:	414c4720 	.word	0x414c4720
   88188:	59585353 	.word	0x59585353
   8818c:	00000000 	.word	0x00000000
   88190:	444e4553 	.word	0x444e4553
   88194:	786f4220 	.word	0x786f4220
   88198:	6c616f47 	.word	0x6c616f47
   8819c:	00007978 	.word	0x00007978
   881a0:	09097325 	.word	0x09097325
   881a4:	25096325 	.word	0x25096325
   881a8:	75250975 	.word	0x75250975
   881ac:	0d752509 	.word	0x0d752509
   881b0:	0000000a 	.word	0x0000000a
   881b4:	454c4449 	.word	0x454c4449
   881b8:	00000000 	.word	0x00000000
   881bc:	00000a0d 	.word	0x00000a0d
   881c0:	20726d54 	.word	0x20726d54
   881c4:	00637653 	.word	0x00637653
   881c8:	3e3e3e0a 	.word	0x3e3e3e0a
   881cc:	3e3e3e3e 	.word	0x3e3e3e3e
   881d0:	3e3e3e3e 	.word	0x3e3e3e3e
   881d4:	4952443e 	.word	0x4952443e
   881d8:	474e4956 	.word	0x474e4956
   881dc:	204f5420 	.word	0x204f5420
   881e0:	454a424f 	.word	0x454a424f
   881e4:	3c3c5443 	.word	0x3c3c5443
   881e8:	3c3c3c3c 	.word	0x3c3c3c3c
   881ec:	3c3c3c3c 	.word	0x3c3c3c3c
   881f0:	000a3c3c 	.word	0x000a3c3c
   881f4:	4f544f47 	.word	0x4f544f47
   881f8:	43495020 	.word	0x43495020
   881fc:	2050554b 	.word	0x2050554b
   88200:	4d4f5246 	.word	0x4d4f5246
   88204:	49524420 	.word	0x49524420
   88208:	00004556 	.word	0x00004556
   8820c:	4f544f47 	.word	0x4f544f47
   88210:	4f524420 	.word	0x4f524420
   88214:	46464f50 	.word	0x46464f50
   88218:	4f524620 	.word	0x4f524620
   8821c:	5244204d 	.word	0x5244204d
   88220:	00455649 	.word	0x00455649
   88224:	746f470a 	.word	0x746f470a
   88228:	6c61566f 	.word	0x6c61566f
   8822c:	25203d20 	.word	0x25203d20
   88230:	00000075 	.word	0x00000075
   88234:	72746c55 	.word	0x72746c55
   88238:	756f7361 	.word	0x756f7361
   8823c:	6620646e 	.word	0x6620646e
   88240:	646e756f 	.word	0x646e756f
   88244:	6a626f20 	.word	0x6a626f20
   88248:	20746365 	.word	0x20746365
   8824c:	74736964 	.word	0x74736964
   88250:	65636e61 	.word	0x65636e61
   88254:	0000000a 	.word	0x0000000a
   88258:	74736944 	.word	0x74736944
   8825c:	65636e61 	.word	0x65636e61
   88260:	206f7420 	.word	0x206f7420
   88264:	656a626f 	.word	0x656a626f
   88268:	203a7463 	.word	0x203a7463
   8826c:	000a7525 	.word	0x000a7525
   88270:	6c676e41 	.word	0x6c676e41
   88274:	6f742065 	.word	0x6f742065
   88278:	6a626f20 	.word	0x6a626f20
   8827c:	3a746365 	.word	0x3a746365
   88280:	0a752520 	.word	0x0a752520
   88284:	00000000 	.word	0x00000000
   88288:	69646f4d 	.word	0x69646f4d
   8828c:	6e697966 	.word	0x6e697966
   88290:	72642067 	.word	0x72642067
   88294:	6e697669 	.word	0x6e697669
   88298:	00000a67 	.word	0x00000a67
   8829c:	54494e49 	.word	0x54494e49
   882a0:	4d52415f 	.word	0x4d52415f
   882a4:	00000000 	.word	0x00000000
   882a8:	74696e69 	.word	0x74696e69
   882ac:	6d726120 	.word	0x6d726120
   882b0:	6e6f6420 	.word	0x6e6f6420
   882b4:	00000a65 	.word	0x00000a65
   882b8:	696d7261 	.word	0x696d7261
   882bc:	3a6f666e 	.word	0x3a6f666e
   882c0:	20752520 	.word	0x20752520
   882c4:	25207525 	.word	0x25207525
   882c8:	75252075 	.word	0x75252075
   882cc:	6c6c6120 	.word	0x6c6c6120
   882d0:	7525203a 	.word	0x7525203a
   882d4:	00000000 	.word	0x00000000
   882d8:	54494e49 	.word	0x54494e49
   882dc:	4d524120 	.word	0x4d524120
   882e0:	204f4e20 	.word	0x204f4e20
   882e4:	41544144 	.word	0x41544144
   882e8:	00000000 	.word	0x00000000
   882ec:	52415453 	.word	0x52415453
   882f0:	20444554 	.word	0x20444554
   882f4:	4b434950 	.word	0x4b434950
   882f8:	00005055 	.word	0x00005055
   882fc:	4c494146 	.word	0x4c494146
   88300:	54204445 	.word	0x54204445
   88304:	5453204f 	.word	0x5453204f
   88308:	5f545241 	.word	0x5f545241
   8830c:	4b434950 	.word	0x4b434950
   88310:	00005055 	.word	0x00005055
   88314:	4b434950 	.word	0x4b434950
   88318:	465f5055 	.word	0x465f5055
   8831c:	454c4941 	.word	0x454c4941
   88320:	00000044 	.word	0x00000044
   88324:	4b434950 	.word	0x4b434950
   88328:	445f5055 	.word	0x445f5055
   8832c:	5f454e4f 	.word	0x5f454e4f
   88330:	56495244 	.word	0x56495244
   88334:	00000045 	.word	0x00000045
   88338:	4b434950 	.word	0x4b434950
   8833c:	445f5055 	.word	0x445f5055
   88340:	00454e4f 	.word	0x00454e4f
   88344:	66206f67 	.word	0x66206f67
   88348:	6177726f 	.word	0x6177726f
   8834c:	6f206472 	.word	0x6f206472
   88350:	61622072 	.word	0x61622072
   88354:	00006b63 	.word	0x00006b63
   88358:	76697244 	.word	0x76697244
   8835c:	20676e69 	.word	0x20676e69
   88360:	77726f66 	.word	0x77726f66
   88364:	2f647261 	.word	0x2f647261
   88368:	6b636162 	.word	0x6b636162
   8836c:	64726177 	.word	0x64726177
   88370:	00000000 	.word	0x00000000
   88374:	6a64410a 	.word	0x6a64410a
   88378:	69747375 	.word	0x69747375
   8837c:	7020676e 	.word	0x7020676e
   88380:	7469736f 	.word	0x7469736f
   88384:	206e6f69 	.word	0x206e6f69
   88388:	69727564 	.word	0x69727564
   8838c:	7020676e 	.word	0x7020676e
   88390:	756b6369 	.word	0x756b6369
   88394:	21212170 	.word	0x21212170
   88398:	00000000 	.word	0x00000000
   8839c:	4c494146 	.word	0x4c494146
   883a0:	4f542044 	.word	0x4f542044
   883a4:	41545320 	.word	0x41545320
   883a8:	44205452 	.word	0x44205452
   883ac:	4f504f52 	.word	0x4f504f52
   883b0:	00004646 	.word	0x00004646
   883b4:	504f5244 	.word	0x504f5244
   883b8:	5f46464f 	.word	0x5f46464f
   883bc:	454e4f44 	.word	0x454e4f44
   883c0:	0000000a 	.word	0x0000000a
   883c4:	504f5244 	.word	0x504f5244
   883c8:	5f46464f 	.word	0x5f46464f
   883cc:	4e4e5552 	.word	0x4e4e5552
   883d0:	0a474e49 	.word	0x0a474e49
   883d4:	00000000 	.word	0x00000000
   883d8:	504f5244 	.word	0x504f5244
   883dc:	5f46464f 	.word	0x5f46464f
   883e0:	4c494146 	.word	0x4c494146
   883e4:	000a4445 	.word	0x000a4445
   883e8:	504f5244 	.word	0x504f5244
   883ec:	5f46464f 	.word	0x5f46464f
   883f0:	454c4449 	.word	0x454c4449
   883f4:	0000000a 	.word	0x0000000a
   883f8:	6c696166 	.word	0x6c696166
   883fc:	74206465 	.word	0x74206465
   88400:	73206977 	.word	0x73206977
   88404:	63746977 	.word	0x63746977
   88408:	64252068 	.word	0x64252068
   8840c:	0000000a 	.word	0x0000000a
   88410:	736e6f43 	.word	0x736e6f43
   88414:	20656c6f 	.word	0x20656c6f
   88418:	64616572 	.word	0x64616572
   8841c:	00000a79 	.word	0x00000a79
   88420:	3d3d3d3d 	.word	0x3d3d3d3d
   88424:	3d3d3d3d 	.word	0x3d3d3d3d
   88428:	3d3d3d3d 	.word	0x3d3d3d3d
   8842c:	00000a3d 	.word	0x00000a3d
   88430:	76697244 	.word	0x76697244
   88434:	4f6f5465 	.word	0x4f6f5465
   88438:	63656a62 	.word	0x63656a62
   8843c:	00000074 	.word	0x00000074
   88440:	6c696146 	.word	0x6c696146
   88444:	74206465 	.word	0x74206465
   88448:	7263206f 	.word	0x7263206f
   8844c:	65746165 	.word	0x65746165
   88450:	69724420 	.word	0x69724420
   88454:	6f546576 	.word	0x6f546576
   88458:	656a624f 	.word	0x656a624f
   8845c:	742d7463 	.word	0x742d7463
   88460:	006b7361 	.word	0x006b7361
   88464:	72746c55 	.word	0x72746c55
   88468:	6e655361 	.word	0x6e655361
   8846c:	00726f73 	.word	0x00726f73
   88470:	6c696146 	.word	0x6c696146
   88474:	74206465 	.word	0x74206465
   88478:	7263206f 	.word	0x7263206f
   8847c:	65746165 	.word	0x65746165
   88480:	746c5520 	.word	0x746c5520
   88484:	65536172 	.word	0x65536172
   88488:	726f736e 	.word	0x726f736e
   8848c:	7361742d 	.word	0x7361742d
   88490:	0000006b 	.word	0x0000006b
   88494:	6d6d6f43 	.word	0x6d6d6f43
   88498:	63696e75 	.word	0x63696e75
   8849c:	6f697461 	.word	0x6f697461
   884a0:	0000006e 	.word	0x0000006e
   884a4:	6c696146 	.word	0x6c696146
   884a8:	74206465 	.word	0x74206465
   884ac:	7263206f 	.word	0x7263206f
   884b0:	65746165 	.word	0x65746165
   884b4:	6d6f4320 	.word	0x6d6f4320
   884b8:	696e756d 	.word	0x696e756d
   884bc:	69746163 	.word	0x69746163
   884c0:	742d6e6f 	.word	0x742d6e6f
   884c4:	006b7361 	.word	0x006b7361
   884c8:	00000043 	.word	0x00000043

000884cc <_global_impure_ptr>:
   884cc:	20070210 33323130 37363534 42413938     ... 0123456789AB
   884dc:	46454443 00000000 33323130 37363534     CDEF....01234567
   884ec:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   884fc:	0000296c                                l)..

00088500 <zeroes.6721>:
   88500:	30303030 30303030 30303030 30303030     0000000000000000

00088510 <blanks.6720>:
   88510:	20202020 20202020 20202020 20202020                     

00088520 <basefix.6187>:
   88520:	0001000a 00030002 00050004 00070006     ................
   88530:	00090008 000b000a 000d000c 000f000e     ................
   88540:	00000010                                ....

00088544 <_ctype_>:
   88544:	20202000 20202020 28282020 20282828     .         ((((( 
   88554:	20202020 20202020 20202020 20202020                     
   88564:	10108820 10101010 10101010 10101010      ...............
   88574:	04040410 04040404 10040404 10101010     ................
   88584:	41411010 41414141 01010101 01010101     ..AAAAAA........
   88594:	01010101 01010101 01010101 10101010     ................
   885a4:	42421010 42424242 02020202 02020202     ..BBBBBB........
   885b4:	02020202 02020202 02020202 10101010     ................
   885c4:	00000020 00000000 00000000 00000000      ...............
	...

00088648 <_init>:
   88648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8864a:	bf00      	nop
   8864c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8864e:	bc08      	pop	{r3}
   88650:	469e      	mov	lr, r3
   88652:	4770      	bx	lr

00088654 <__init_array_start>:
   88654:	00085bf9 	.word	0x00085bf9

00088658 <__frame_dummy_init_array_entry>:
   88658:	00080119                                ....

0008865c <_fini>:
   8865c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8865e:	bf00      	nop
   88660:	bcf8      	pop	{r3, r4, r5, r6, r7}
   88662:	bc08      	pop	{r3}
   88664:	469e      	mov	lr, r3
   88666:	4770      	bx	lr

00088668 <__fini_array_start>:
   88668:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20070000:	f3bf 8f5f 	dmb	sy
20070004:	3801      	subs	r0, #1
20070006:	d1fb      	bne.n	20070000 <portable_delay_cycles>
20070008:	4770      	bx	lr
2007000a:	bf00      	nop

2007000c <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007000c:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070010:	4a20      	ldr	r2, [pc, #128]	; (20070094 <SystemInit+0x88>)
20070012:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070014:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070018:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007001a:	4b1f      	ldr	r3, [pc, #124]	; (20070098 <SystemInit+0x8c>)
2007001c:	6a1b      	ldr	r3, [r3, #32]
2007001e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070022:	d107      	bne.n	20070034 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070024:	4a1d      	ldr	r2, [pc, #116]	; (2007009c <SystemInit+0x90>)
20070026:	4b1c      	ldr	r3, [pc, #112]	; (20070098 <SystemInit+0x8c>)
20070028:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007002a:	461a      	mov	r2, r3
2007002c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007002e:	f013 0f01 	tst.w	r3, #1
20070032:	d0fb      	beq.n	2007002c <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070034:	4a1a      	ldr	r2, [pc, #104]	; (200700a0 <SystemInit+0x94>)
20070036:	4b18      	ldr	r3, [pc, #96]	; (20070098 <SystemInit+0x8c>)
20070038:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007003a:	461a      	mov	r2, r3
2007003c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007003e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070042:	d0fb      	beq.n	2007003c <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070044:	4b14      	ldr	r3, [pc, #80]	; (20070098 <SystemInit+0x8c>)
20070046:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20070048:	f022 0203 	bic.w	r2, r2, #3
2007004c:	f042 0201 	orr.w	r2, r2, #1
20070050:	631a      	str	r2, [r3, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070052:	461a      	mov	r2, r3
20070054:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070056:	f013 0f08 	tst.w	r3, #8
2007005a:	d0fb      	beq.n	20070054 <SystemInit+0x48>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007005c:	4a11      	ldr	r2, [pc, #68]	; (200700a4 <SystemInit+0x98>)
2007005e:	4b0e      	ldr	r3, [pc, #56]	; (20070098 <SystemInit+0x8c>)
20070060:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070062:	461a      	mov	r2, r3
20070064:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070066:	f013 0f02 	tst.w	r3, #2
2007006a:	d0fb      	beq.n	20070064 <SystemInit+0x58>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007006c:	2211      	movs	r2, #17
2007006e:	4b0a      	ldr	r3, [pc, #40]	; (20070098 <SystemInit+0x8c>)
20070070:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070072:	461a      	mov	r2, r3
20070074:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070076:	f013 0f08 	tst.w	r3, #8
2007007a:	d0fb      	beq.n	20070074 <SystemInit+0x68>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007007c:	2212      	movs	r2, #18
2007007e:	4b06      	ldr	r3, [pc, #24]	; (20070098 <SystemInit+0x8c>)
20070080:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070082:	461a      	mov	r2, r3
20070084:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070086:	f013 0f08 	tst.w	r3, #8
2007008a:	d0fb      	beq.n	20070084 <SystemInit+0x78>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007008c:	4a06      	ldr	r2, [pc, #24]	; (200700a8 <SystemInit+0x9c>)
2007008e:	4b07      	ldr	r3, [pc, #28]	; (200700ac <SystemInit+0xa0>)
20070090:	601a      	str	r2, [r3, #0]
20070092:	4770      	bx	lr
20070094:	400e0a00 	.word	0x400e0a00
20070098:	400e0600 	.word	0x400e0600
2007009c:	00370809 	.word	0x00370809
200700a0:	01370809 	.word	0x01370809
200700a4:	200d3f01 	.word	0x200d3f01
200700a8:	0501bd00 	.word	0x0501bd00
200700ac:	2007020c 	.word	0x2007020c

200700b0 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700b0:	4b1b      	ldr	r3, [pc, #108]	; (20070120 <system_init_flash+0x70>)
200700b2:	4298      	cmp	r0, r3
200700b4:	d806      	bhi.n	200700c4 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700b6:	2300      	movs	r3, #0
200700b8:	4a1a      	ldr	r2, [pc, #104]	; (20070124 <system_init_flash+0x74>)
200700ba:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700bc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700c0:	6013      	str	r3, [r2, #0]
200700c2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700c4:	4b18      	ldr	r3, [pc, #96]	; (20070128 <system_init_flash+0x78>)
200700c6:	4298      	cmp	r0, r3
200700c8:	d807      	bhi.n	200700da <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700ca:	f44f 7380 	mov.w	r3, #256	; 0x100
200700ce:	4a15      	ldr	r2, [pc, #84]	; (20070124 <system_init_flash+0x74>)
200700d0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700d2:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700d6:	6013      	str	r3, [r2, #0]
200700d8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700da:	4b14      	ldr	r3, [pc, #80]	; (2007012c <system_init_flash+0x7c>)
200700dc:	4298      	cmp	r0, r3
200700de:	d807      	bhi.n	200700f0 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700e0:	f44f 7300 	mov.w	r3, #512	; 0x200
200700e4:	4a0f      	ldr	r2, [pc, #60]	; (20070124 <system_init_flash+0x74>)
200700e6:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700e8:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ec:	6013      	str	r3, [r2, #0]
200700ee:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700f0:	4b0f      	ldr	r3, [pc, #60]	; (20070130 <system_init_flash+0x80>)
200700f2:	4298      	cmp	r0, r3
200700f4:	d807      	bhi.n	20070106 <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700f6:	f44f 7340 	mov.w	r3, #768	; 0x300
200700fa:	4a0a      	ldr	r2, [pc, #40]	; (20070124 <system_init_flash+0x74>)
200700fc:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700fe:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070102:	6013      	str	r3, [r2, #0]
20070104:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
20070106:	4b0b      	ldr	r3, [pc, #44]	; (20070134 <system_init_flash+0x84>)
20070108:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007010a:	bf94      	ite	ls
2007010c:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070110:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070114:	4a03      	ldr	r2, [pc, #12]	; (20070124 <system_init_flash+0x74>)
20070116:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
20070118:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007011c:	6013      	str	r3, [r2, #0]
2007011e:	4770      	bx	lr
20070120:	0121eabf 	.word	0x0121eabf
20070124:	400e0a00 	.word	0x400e0a00
20070128:	02faf07f 	.word	0x02faf07f
2007012c:	03d08fff 	.word	0x03d08fff
20070130:	04c4b3ff 	.word	0x04c4b3ff
20070134:	055d4a7f 	.word	0x055d4a7f

20070138 <pulse_channels>:
20070138:	40094000 00000000 0000000b 00010000     .@.@............
20070148:	00000000 0000c350 00000000 00000000     ....P...........
	...
20070164:	00000024 00000043 00000001 000007d0     $...C...........
20070174:	40094000 00000001 0000000b 00010000     .@.@............
20070184:	00000000 0000c350 00000000 00000000     ....P...........
	...
200701a0:	00000024 00000045 00000001 000007d0     $...E...........

200701b0 <pulse_timers>:
200701b0:	40080000 00000001 0000001c 0000001c     ...@............
200701c0:	00090600 00000002 00000000 00000008     ................
200701d0:	00000002 40080000 00000000 0000001b     .......@........
200701e0:	0000001b 00090600 00000039 00000001     ........9.......
200701f0:	00000008 00000002                       ........

200701f8 <twi_masterPickupStatus>:
200701f8:	00000005                                ....

200701fc <uxCriticalNesting>:
200701fc:	aaaaaaaa                                ....

20070200 <xFreeBytesRemaining>:
20070200:	0000a000                                ....

20070204 <xNextTaskUnblockTime>:
20070204:	ffffffff                                ....

20070208 <g_interrupt_enabled>:
20070208:	00000001                                ....

2007020c <SystemCoreClock>:
2007020c:	003d0900                                ..=.

20070210 <impure_data>:
20070210:	00000000 200704fc 20070564 200705cc     ....... d.. ... 
	...
20070244:	000884c8 00000000 00000000 00000000     ................
	...
200702b8:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200702c8:	0005deec 0000000b 00000000 00000000     ................
	...

20070638 <_impure_ptr>:
20070638:	20070210                                ... 

2007063c <__ctype_ptr__>:
2007063c:	00088544                                D...

20070640 <lc_ctype_charset>:
20070640:	49435341 00000049 00000000 00000000     ASCII...........
	...

20070660 <__mb_cur_max>:
20070660:	00000001                                ....

20070664 <__malloc_av_>:
	...
2007066c:	20070664 20070664 2007066c 2007066c     d.. d.. l.. l.. 
2007067c:	20070674 20070674 2007067c 2007067c     t.. t.. |.. |.. 
2007068c:	20070684 20070684 2007068c 2007068c     ... ... ... ... 
2007069c:	20070694 20070694 2007069c 2007069c     ... ... ... ... 
200706ac:	200706a4 200706a4 200706ac 200706ac     ... ... ... ... 
200706bc:	200706b4 200706b4 200706bc 200706bc     ... ... ... ... 
200706cc:	200706c4 200706c4 200706cc 200706cc     ... ... ... ... 
200706dc:	200706d4 200706d4 200706dc 200706dc     ... ... ... ... 
200706ec:	200706e4 200706e4 200706ec 200706ec     ... ... ... ... 
200706fc:	200706f4 200706f4 200706fc 200706fc     ... ... ... ... 
2007070c:	20070704 20070704 2007070c 2007070c     ... ... ... ... 
2007071c:	20070714 20070714 2007071c 2007071c     ... ... ... ... 
2007072c:	20070724 20070724 2007072c 2007072c     $.. $.. ,.. ,.. 
2007073c:	20070734 20070734 2007073c 2007073c     4.. 4.. <.. <.. 
2007074c:	20070744 20070744 2007074c 2007074c     D.. D.. L.. L.. 
2007075c:	20070754 20070754 2007075c 2007075c     T.. T.. \.. \.. 
2007076c:	20070764 20070764 2007076c 2007076c     d.. d.. l.. l.. 
2007077c:	20070774 20070774 2007077c 2007077c     t.. t.. |.. |.. 
2007078c:	20070784 20070784 2007078c 2007078c     ... ... ... ... 
2007079c:	20070794 20070794 2007079c 2007079c     ... ... ... ... 
200707ac:	200707a4 200707a4 200707ac 200707ac     ... ... ... ... 
200707bc:	200707b4 200707b4 200707bc 200707bc     ... ... ... ... 
200707cc:	200707c4 200707c4 200707cc 200707cc     ... ... ... ... 
200707dc:	200707d4 200707d4 200707dc 200707dc     ... ... ... ... 
200707ec:	200707e4 200707e4 200707ec 200707ec     ... ... ... ... 
200707fc:	200707f4 200707f4 200707fc 200707fc     ... ... ... ... 
2007080c:	20070804 20070804 2007080c 2007080c     ... ... ... ... 
2007081c:	20070814 20070814 2007081c 2007081c     ... ... ... ... 
2007082c:	20070824 20070824 2007082c 2007082c     $.. $.. ,.. ,.. 
2007083c:	20070834 20070834 2007083c 2007083c     4.. 4.. <.. <.. 
2007084c:	20070844 20070844 2007084c 2007084c     D.. D.. L.. L.. 
2007085c:	20070854 20070854 2007085c 2007085c     T.. T.. \.. \.. 
2007086c:	20070864 20070864 2007086c 2007086c     d.. d.. l.. l.. 
2007087c:	20070874 20070874 2007087c 2007087c     t.. t.. |.. |.. 
2007088c:	20070884 20070884 2007088c 2007088c     ... ... ... ... 
2007089c:	20070894 20070894 2007089c 2007089c     ... ... ... ... 
200708ac:	200708a4 200708a4 200708ac 200708ac     ... ... ... ... 
200708bc:	200708b4 200708b4 200708bc 200708bc     ... ... ... ... 
200708cc:	200708c4 200708c4 200708cc 200708cc     ... ... ... ... 
200708dc:	200708d4 200708d4 200708dc 200708dc     ... ... ... ... 
200708ec:	200708e4 200708e4 200708ec 200708ec     ... ... ... ... 
200708fc:	200708f4 200708f4 200708fc 200708fc     ... ... ... ... 
2007090c:	20070904 20070904 2007090c 2007090c     ... ... ... ... 
2007091c:	20070914 20070914 2007091c 2007091c     ... ... ... ... 
2007092c:	20070924 20070924 2007092c 2007092c     $.. $.. ,.. ,.. 
2007093c:	20070934 20070934 2007093c 2007093c     4.. 4.. <.. <.. 
2007094c:	20070944 20070944 2007094c 2007094c     D.. D.. L.. L.. 
2007095c:	20070954 20070954 2007095c 2007095c     T.. T.. \.. \.. 
2007096c:	20070964 20070964 2007096c 2007096c     d.. d.. l.. l.. 
2007097c:	20070974 20070974 2007097c 2007097c     t.. t.. |.. |.. 
2007098c:	20070984 20070984 2007098c 2007098c     ... ... ... ... 
2007099c:	20070994 20070994 2007099c 2007099c     ... ... ... ... 
200709ac:	200709a4 200709a4 200709ac 200709ac     ... ... ... ... 
200709bc:	200709b4 200709b4 200709bc 200709bc     ... ... ... ... 
200709cc:	200709c4 200709c4 200709cc 200709cc     ... ... ... ... 
200709dc:	200709d4 200709d4 200709dc 200709dc     ... ... ... ... 
200709ec:	200709e4 200709e4 200709ec 200709ec     ... ... ... ... 
200709fc:	200709f4 200709f4 200709fc 200709fc     ... ... ... ... 
20070a0c:	20070a04 20070a04 20070a0c 20070a0c     ... ... ... ... 
20070a1c:	20070a14 20070a14 20070a1c 20070a1c     ... ... ... ... 
20070a2c:	20070a24 20070a24 20070a2c 20070a2c     $.. $.. ,.. ,.. 
20070a3c:	20070a34 20070a34 20070a3c 20070a3c     4.. 4.. <.. <.. 
20070a4c:	20070a44 20070a44 20070a4c 20070a4c     D.. D.. L.. L.. 
20070a5c:	20070a54 20070a54 20070a5c 20070a5c     T.. T.. \.. \.. 

20070a6c <__malloc_trim_threshold>:
20070a6c:	00020000                                ....

20070a70 <__malloc_sbrk_base>:
20070a70:	ffffffff                                ....

20070a74 <__mbtowc>:
20070a74:	00086dcd                                .m..

20070a78 <__wctomb>:
20070a78:	00087d19                                .}..
