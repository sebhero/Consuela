
bin/rfid.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000320  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  00000374  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000054  00000000  00000000  00000a40  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .comment      00000011  00000000  00000000  00000a94  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  00000aa5  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000aeb  00000000  00000000  00000b05  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000469  00000000  00000000  000015f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003bd  00000000  00000000  00001a59  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000124  00000000  00000000  00001e18  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001b1  00000000  00000000  00001f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000058a  00000000  00000000  000020ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00002677  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	20 c0       	rjmp	.+64     	; 0x44 <__bad_interrupt>
   4:	1f c0       	rjmp	.+62     	; 0x44 <__bad_interrupt>
   6:	1e c0       	rjmp	.+60     	; 0x44 <__bad_interrupt>
   8:	1d c0       	rjmp	.+58     	; 0x44 <__bad_interrupt>
   a:	1c c0       	rjmp	.+56     	; 0x44 <__bad_interrupt>
   c:	1b c0       	rjmp	.+54     	; 0x44 <__bad_interrupt>
   e:	1a c0       	rjmp	.+52     	; 0x44 <__bad_interrupt>
  10:	19 c0       	rjmp	.+50     	; 0x44 <__bad_interrupt>
  12:	18 c0       	rjmp	.+48     	; 0x44 <__bad_interrupt>
  14:	17 c0       	rjmp	.+46     	; 0x44 <__bad_interrupt>
  16:	16 c0       	rjmp	.+44     	; 0x44 <__bad_interrupt>
  18:	15 c0       	rjmp	.+42     	; 0x44 <__bad_interrupt>
  1a:	14 c0       	rjmp	.+40     	; 0x44 <__bad_interrupt>
  1c:	13 c0       	rjmp	.+38     	; 0x44 <__bad_interrupt>
  1e:	12 c0       	rjmp	.+36     	; 0x44 <__bad_interrupt>
  20:	11 c0       	rjmp	.+34     	; 0x44 <__bad_interrupt>
  22:	10 c0       	rjmp	.+32     	; 0x44 <__bad_interrupt>
  24:	0f c0       	rjmp	.+30     	; 0x44 <__bad_interrupt>
  26:	0e c0       	rjmp	.+28     	; 0x44 <__bad_interrupt>
  28:	0d c0       	rjmp	.+26     	; 0x44 <__bad_interrupt>
  2a:	0c c0       	rjmp	.+24     	; 0x44 <__bad_interrupt>
  2c:	0b c0       	rjmp	.+22     	; 0x44 <__bad_interrupt>
  2e:	0a c0       	rjmp	.+20     	; 0x44 <__bad_interrupt>
  30:	09 c0       	rjmp	.+18     	; 0x44 <__bad_interrupt>
  32:	08 c0       	rjmp	.+16     	; 0x44 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61
  40:	2b d1       	rcall	.+598    	; 0x298 <main>
  42:	6c c1       	rjmp	.+728    	; 0x31c <_exit>

00000044 <__bad_interrupt>:
  44:	dd cf       	rjmp	.-70     	; 0x0 <__vectors>

00000046 <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=(~(0x0f<<LCD_DATA_POS));
  46:	8a b1       	in	r24, 0x0a	; 10
  48:	80 7f       	andi	r24, 0xF0	; 240
  4a:	8a b9       	out	0x0a, r24	; 10

	//change LCD mode
	SET_RW();		//Read mode
  4c:	5e 9a       	sbi	0x0b, 6	; 11
	CLEAR_RS();		//Read status
  4e:	5d 98       	cbi	0x0b, 5	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  50:	00 c0       	rjmp	.+0      	; 0x52 <LCDBusyLoop+0xc>
  52:	00 c0       	rjmp	.+0      	; 0x54 <LCDBusyLoop+0xe>

	
	do
	{

		SET_E();
  54:	5c 9a       	sbi	0x0b, 4	; 11
  56:	00 c0       	rjmp	.+0      	; 0x58 <LCDBusyLoop+0x12>
  58:	00 c0       	rjmp	.+0      	; 0x5a <LCDBusyLoop+0x14>

		//Wait tDA for data to become available
		_delay_us(0.5);

		status=(LCD_DATA_PIN>>LCD_DATA_POS);
  5a:	89 b1       	in	r24, 0x09	; 9
		status=status<<4;
  5c:	82 95       	swap	r24
  5e:	80 7f       	andi	r24, 0xF0	; 240
  60:	00 c0       	rjmp	.+0      	; 0x62 <LCDBusyLoop+0x1c>
  62:	00 c0       	rjmp	.+0      	; 0x64 <LCDBusyLoop+0x1e>

		_delay_us(0.5);

		//Pull E low
		CLEAR_E();
  64:	5c 98       	cbi	0x0b, 4	; 11
  66:	92 e0       	ldi	r25, 0x02	; 2
  68:	9a 95       	dec	r25
  6a:	f1 f7       	brne	.-4      	; 0x68 <LCDBusyLoop+0x22>
  6c:	00 c0       	rjmp	.+0      	; 0x6e <LCDBusyLoop+0x28>
		_delay_us(1);	//tEL

		SET_E();
  6e:	5c 9a       	sbi	0x0b, 4	; 11
  70:	00 c0       	rjmp	.+0      	; 0x72 <LCDBusyLoop+0x2c>
  72:	00 c0       	rjmp	.+0      	; 0x74 <LCDBusyLoop+0x2e>
		_delay_us(0.5);

		temp=(LCD_DATA_PIN>>LCD_DATA_POS);
  74:	99 b1       	in	r25, 0x09	; 9
  76:	00 c0       	rjmp	.+0      	; 0x78 <LCDBusyLoop+0x32>
  78:	00 c0       	rjmp	.+0      	; 0x7a <LCDBusyLoop+0x34>
		status=status|temp;

		busy=status & 0b10000000;

		_delay_us(0.5);
		CLEAR_E();
  7a:	5c 98       	cbi	0x0b, 4	; 11
  7c:	92 e0       	ldi	r25, 0x02	; 2
  7e:	9a 95       	dec	r25
  80:	f1 f7       	brne	.-4      	; 0x7e <LCDBusyLoop+0x38>
  82:	00 c0       	rjmp	.+0      	; 0x84 <LCDBusyLoop+0x3e>
		_delay_us(1);	//tEL
	}while(busy);
  84:	87 fd       	sbrc	r24, 7
  86:	e6 cf       	rjmp	.-52     	; 0x54 <LCDBusyLoop+0xe>

	CLEAR_RW();		//write mode
  88:	5e 98       	cbi	0x0b, 6	; 11
	//Change Port to output
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
  8a:	8a b1       	in	r24, 0x0a	; 10
  8c:	8f 60       	ori	r24, 0x0F	; 15
  8e:	8a b9       	out	0x0a, r24	; 10
  90:	08 95       	ret

00000092 <LCDByte>:
//NOTE: THIS FUNCTION RETURS ONLY WHEN LCD HAS PROCESSED THE COMMAND

uint8_t hn,ln;			//Nibbles
uint8_t temp;

hn=c>>4;
  92:	28 2f       	mov	r18, r24
  94:	22 95       	swap	r18
  96:	2f 70       	andi	r18, 0x0F	; 15
ln=(c & 0x0F);
  98:	8f 70       	andi	r24, 0x0F	; 15

if(isdata==0)
  9a:	61 11       	cpse	r22, r1
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <LCDByte+0x10>
	CLEAR_RS();
  9e:	5d 98       	cbi	0x0b, 5	; 11
  a0:	01 c0       	rjmp	.+2      	; 0xa4 <LCDByte+0x12>
else
	SET_RS();
  a2:	5d 9a       	sbi	0x0b, 5	; 11
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <LCDByte+0x14>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <LCDByte+0x16>

_delay_us(0.500);		//tAS

SET_E();
  a8:	5c 9a       	sbi	0x0b, 4	; 11

//Send high nibble

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((hn<<LCD_DATA_POS));
  aa:	9b b1       	in	r25, 0x0b	; 11
  ac:	90 7f       	andi	r25, 0xF0	; 240
  ae:	92 2b       	or	r25, r18
LCD_DATA_PORT=temp;
  b0:	9b b9       	out	0x0b, r25	; 11
  b2:	92 e0       	ldi	r25, 0x02	; 2
  b4:	9a 95       	dec	r25
  b6:	f1 f7       	brne	.-4      	; 0xb4 <LCDByte+0x22>
  b8:	00 c0       	rjmp	.+0      	; 0xba <LCDByte+0x28>

_delay_us(1);			//tEH

//Now data lines are stable pull E low for transmission

CLEAR_E();
  ba:	5c 98       	cbi	0x0b, 4	; 11
  bc:	92 e0       	ldi	r25, 0x02	; 2
  be:	9a 95       	dec	r25
  c0:	f1 f7       	brne	.-4      	; 0xbe <LCDByte+0x2c>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <LCDByte+0x32>

_delay_us(1);

//Send the lower nibble
SET_E();
  c4:	5c 9a       	sbi	0x0b, 4	; 11

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((ln<<LCD_DATA_POS));
  c6:	9b b1       	in	r25, 0x0b	; 11
  c8:	90 7f       	andi	r25, 0xF0	; 240
  ca:	98 2b       	or	r25, r24

LCD_DATA_PORT=temp;
  cc:	9b b9       	out	0x0b, r25	; 11
  ce:	82 e0       	ldi	r24, 0x02	; 2
  d0:	8a 95       	dec	r24
  d2:	f1 f7       	brne	.-4      	; 0xd0 <LCDByte+0x3e>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <LCDByte+0x44>

_delay_us(1);			//tEH

//SEND

CLEAR_E();
  d6:	5c 98       	cbi	0x0b, 4	; 11
  d8:	92 e0       	ldi	r25, 0x02	; 2
  da:	9a 95       	dec	r25
  dc:	f1 f7       	brne	.-4      	; 0xda <LCDByte+0x48>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <LCDByte+0x4e>

_delay_us(1);			//tEL

LCDBusyLoop();
  e0:	b2 cf       	rjmp	.-156    	; 0x46 <LCDBusyLoop>

000000e2 <LCDInit>:
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);

}

void LCDInit(uint8_t style)
{
  e2:	cf 93       	push	r28
  e4:	df 93       	push	r29
  e6:	1f 92       	push	r1
  e8:	cd b7       	in	r28, 0x3d	; 61
  ea:	de b7       	in	r29, 0x3e	; 62
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ec:	ef e5       	ldi	r30, 0x5F	; 95
  ee:	fa ee       	ldi	r31, 0xEA	; 234
  f0:	31 97       	sbiw	r30, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <LCDInit+0xe>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <LCDInit+0x14>
  f6:	00 00       	nop
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
  f8:	9a b1       	in	r25, 0x0a	; 10
  fa:	9f 60       	ori	r25, 0x0F	; 15
  fc:	9a b9       	out	0x0a, r25	; 10
	LCD_E_DDR|=(1<<LCD_E_POS);
  fe:	54 9a       	sbi	0x0a, 4	; 10
	LCD_RS_DDR|=(1<<LCD_RS_POS);
 100:	55 9a       	sbi	0x0a, 5	; 10
	LCD_RW_DDR|=(1<<LCD_RW_POS);
 102:	56 9a       	sbi	0x0a, 6	; 10

	LCD_DATA_PORT&=(~(0x0F<<LCD_DATA_POS));
 104:	9b b1       	in	r25, 0x0b	; 11
 106:	90 7f       	andi	r25, 0xF0	; 240
 108:	9b b9       	out	0x0b, r25	; 11
	CLEAR_E();
 10a:	5c 98       	cbi	0x0b, 4	; 11
	CLEAR_RW();
 10c:	5e 98       	cbi	0x0b, 6	; 11
	CLEAR_RS();
 10e:	5d 98       	cbi	0x0b, 5	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 110:	00 c0       	rjmp	.+0      	; 0x112 <LCDInit+0x30>
 112:	00 00       	nop

	//Set 4-bit mode
	_delay_us(0.3);	//tAS

	SET_E();
 114:	5c 9a       	sbi	0x0b, 4	; 11
	LCD_DATA_PORT|=((0b00000010)<<LCD_DATA_POS); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
 116:	59 9a       	sbi	0x0b, 1	; 11
 118:	f2 e0       	ldi	r31, 0x02	; 2
 11a:	fa 95       	dec	r31
 11c:	f1 f7       	brne	.-4      	; 0x11a <LCDInit+0x38>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <LCDInit+0x3e>
	_delay_us(1);
	CLEAR_E();
 120:	5c 98       	cbi	0x0b, 4	; 11
 122:	92 e0       	ldi	r25, 0x02	; 2
 124:	9a 95       	dec	r25
 126:	f1 f7       	brne	.-4      	; 0x124 <LCDInit+0x42>
 128:	00 c0       	rjmp	.+0      	; 0x12a <LCDInit+0x48>
	_delay_us(1);
	
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
 12a:	89 83       	std	Y+1, r24	; 0x01
 12c:	8c df       	rcall	.-232    	; 0x46 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
 12e:	60 e0       	ldi	r22, 0x00	; 0
 130:	89 81       	ldd	r24, Y+1	; 0x01
 132:	8c 60       	ori	r24, 0x0C	; 12
 134:	ae df       	rcall	.-164    	; 0x92 <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
 136:	60 e0       	ldi	r22, 0x00	; 0
 138:	88 e2       	ldi	r24, 0x28	; 40
 13a:	ab df       	rcall	.-170    	; 0x92 <LCDByte>
	}

	#endif

	x|=0b10000000;
  	LCDCmd(x);
 13c:	60 e0       	ldi	r22, 0x00	; 0
 13e:	80 e8       	ldi	r24, 0x80	; 128
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format

	
	LCDGotoXY(0,0);

}
 140:	0f 90       	pop	r0
 142:	df 91       	pop	r29
 144:	cf 91       	pop	r28
	}

	#endif

	x|=0b10000000;
  	LCDCmd(x);
 146:	a5 cf       	rjmp	.-182    	; 0x92 <LCDByte>

00000148 <LCDWriteString>:
	
	LCDGotoXY(0,0);

}
void LCDWriteString(const char *msg)
{
 148:	0f 93       	push	r16
 14a:	1f 93       	push	r17
 14c:	cf 93       	push	r28
 14e:	df 93       	push	r29
 150:	ec 01       	movw	r28, r24
		
	In the same way you can insert any syblom numbered 0-7 	


	*****************************************************************/
 while(*msg!='\0')
 152:	16 c0       	rjmp	.+44     	; 0x180 <LCDWriteString+0x38>
 {
 	//Custom Char Support
	if(*msg=='%')
 154:	85 32       	cpi	r24, 0x25	; 37
 156:	79 f4       	brne	.+30     	; 0x176 <LCDWriteString+0x2e>
	{
		msg++;
 158:	8e 01       	movw	r16, r28
 15a:	0f 5f       	subi	r16, 0xFF	; 255
 15c:	1f 4f       	sbci	r17, 0xFF	; 255
		int8_t cc=*msg-'0';
 15e:	89 81       	ldd	r24, Y+1	; 0x01
 160:	80 53       	subi	r24, 0x30	; 48

		if(cc>=0 && cc<=7)
		{
			LCDData(cc);
 162:	61 e0       	ldi	r22, 0x01	; 1
	if(*msg=='%')
	{
		msg++;
		int8_t cc=*msg-'0';

		if(cc>=0 && cc<=7)
 164:	88 30       	cpi	r24, 0x08	; 8
 166:	08 f4       	brcc	.+2      	; 0x16a <LCDWriteString+0x22>
 168:	04 c0       	rjmp	.+8      	; 0x172 <LCDWriteString+0x2a>
		{
			LCDData(cc);
		}
		else
		{
			LCDData('%');
 16a:	85 e2       	ldi	r24, 0x25	; 37
 16c:	92 df       	rcall	.-220    	; 0x92 <LCDByte>
			LCDData(*msg);
 16e:	61 e0       	ldi	r22, 0x01	; 1
 170:	89 81       	ldd	r24, Y+1	; 0x01
 172:	8f df       	rcall	.-226    	; 0x92 <LCDByte>
 174:	03 c0       	rjmp	.+6      	; 0x17c <LCDWriteString+0x34>
		}
	}
	else
	{
		LCDData(*msg);
 176:	61 e0       	ldi	r22, 0x01	; 1
 178:	8c df       	rcall	.-232    	; 0x92 <LCDByte>
 17a:	8e 01       	movw	r16, r28
	}
	msg++;
 17c:	e8 01       	movw	r28, r16
 17e:	21 96       	adiw	r28, 0x01	; 1
		
	In the same way you can insert any syblom numbered 0-7 	


	*****************************************************************/
 while(*msg!='\0')
 180:	88 81       	ld	r24, Y
 182:	81 11       	cpse	r24, r1
 184:	e7 cf       	rjmp	.-50     	; 0x154 <LCDWriteString+0xc>
	{
		LCDData(*msg);
	}
	msg++;
 }
}
 186:	df 91       	pop	r29
 188:	cf 91       	pop	r28
 18a:	1f 91       	pop	r17
 18c:	0f 91       	pop	r16
 18e:	08 95       	ret

00000190 <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
 190:	0f 93       	push	r16
 192:	1f 93       	push	r17
 194:	cf 93       	push	r28
 196:	df 93       	push	r29
 198:	00 d0       	rcall	.+0      	; 0x19a <LCDWriteInt+0xa>
 19a:	00 d0       	rcall	.+0      	; 0x19c <LCDWriteInt+0xc>
 19c:	1f 92       	push	r1
 19e:	cd b7       	in	r28, 0x3d	; 61
 1a0:	de b7       	in	r29, 0x3e	; 62
 1a2:	9b 01       	movw	r18, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
 1a4:	fe 01       	movw	r30, r28
 1a6:	31 96       	adiw	r30, 0x01	; 1
 1a8:	45 e0       	ldi	r20, 0x05	; 5
 1aa:	df 01       	movw	r26, r30
 1ac:	1d 92       	st	X+, r1
 1ae:	4a 95       	dec	r20
 1b0:	e9 f7       	brne	.-6      	; 0x1ac <LCDWriteInt+0x1c>
 1b2:	fe 01       	movw	r30, r28
 1b4:	36 96       	adiw	r30, 0x06	; 6
	int i=4,j=0;
	while(val)
	{
	str[i]=val%10;
 1b6:	0a e0       	ldi	r16, 0x0A	; 10
 1b8:	10 e0       	ldi	r17, 0x00	; 0

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 1ba:	04 c0       	rjmp	.+8      	; 0x1c4 <LCDWriteInt+0x34>
	{
	str[i]=val%10;
 1bc:	b8 01       	movw	r22, r16
 1be:	87 d0       	rcall	.+270    	; 0x2ce <__divmodhi4>
 1c0:	82 93       	st	-Z, r24
	val=val/10;
 1c2:	cb 01       	movw	r24, r22

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 1c4:	00 97       	sbiw	r24, 0x00	; 0
 1c6:	d1 f7       	brne	.-12     	; 0x1bc <LCDWriteInt+0x2c>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
 1c8:	2f 3f       	cpi	r18, 0xFF	; 255
 1ca:	bf ef       	ldi	r27, 0xFF	; 255
 1cc:	3b 07       	cpc	r19, r27
 1ce:	51 f4       	brne	.+20     	; 0x1e4 <LCDWriteInt+0x54>
 1d0:	fe 01       	movw	r30, r28
 1d2:	31 96       	adiw	r30, 0x01	; 1
	}
	msg++;
 }
}

void LCDWriteInt(int val,unsigned int field_length)
 1d4:	cf 01       	movw	r24, r30
 1d6:	8f 01       	movw	r16, r30
 1d8:	08 1b       	sub	r16, r24
 1da:	19 0b       	sbc	r17, r25
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
		while(str[j]==0) j++;
 1dc:	21 91       	ld	r18, Z+
 1de:	22 23       	and	r18, r18
 1e0:	d1 f3       	breq	.-12     	; 0x1d6 <LCDWriteInt+0x46>
 1e2:	11 c0       	rjmp	.+34     	; 0x206 <LCDWriteInt+0x76>
	else
		j=5-field_length;
 1e4:	05 e0       	ldi	r16, 0x05	; 5
 1e6:	10 e0       	ldi	r17, 0x00	; 0
 1e8:	02 1b       	sub	r16, r18
 1ea:	13 0b       	sbc	r17, r19
 1ec:	0c c0       	rjmp	.+24     	; 0x206 <LCDWriteInt+0x76>
	}
	msg++;
 }
}

void LCDWriteInt(int val,unsigned int field_length)
 1ee:	e1 e0       	ldi	r30, 0x01	; 1
 1f0:	f0 e0       	ldi	r31, 0x00	; 0
 1f2:	ec 0f       	add	r30, r28
 1f4:	fd 1f       	adc	r31, r29
 1f6:	e0 0f       	add	r30, r16
 1f8:	f1 1f       	adc	r31, r17
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
 1fa:	80 81       	ld	r24, Z
 1fc:	61 e0       	ldi	r22, 0x01	; 1
 1fe:	80 5d       	subi	r24, 0xD0	; 208
 200:	48 df       	rcall	.-368    	; 0x92 <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
 202:	0f 5f       	subi	r16, 0xFF	; 255
 204:	1f 4f       	sbci	r17, 0xFF	; 255
 206:	05 30       	cpi	r16, 0x05	; 5
 208:	11 05       	cpc	r17, r1
 20a:	8c f3       	brlt	.-30     	; 0x1ee <LCDWriteInt+0x5e>
	{
	LCDData(48+str[i]);
	}
}
 20c:	0f 90       	pop	r0
 20e:	0f 90       	pop	r0
 210:	0f 90       	pop	r0
 212:	0f 90       	pop	r0
 214:	0f 90       	pop	r0
 216:	df 91       	pop	r29
 218:	cf 91       	pop	r28
 21a:	1f 91       	pop	r17
 21c:	0f 91       	pop	r16
 21e:	08 95       	ret

00000220 <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 	if(x>=20) return;
 220:	84 31       	cpi	r24, 0x14	; 20
 222:	70 f4       	brcc	.+28     	; 0x240 <LCDGotoXY+0x20>

	#ifdef LCD_TYPE_204
	
	switch(y)
 224:	62 30       	cpi	r22, 0x02	; 2
 226:	31 f0       	breq	.+12     	; 0x234 <LCDGotoXY+0x14>
 228:	63 30       	cpi	r22, 0x03	; 3
 22a:	31 f0       	breq	.+12     	; 0x238 <LCDGotoXY+0x18>
 22c:	61 30       	cpi	r22, 0x01	; 1
 22e:	29 f4       	brne	.+10     	; 0x23a <LCDGotoXY+0x1a>
	{
		case 0:
			break;
		case 1:
			x|=0b01000000;
 230:	80 64       	ori	r24, 0x40	; 64
 232:	03 c0       	rjmp	.+6      	; 0x23a <LCDGotoXY+0x1a>
			break;
		case 2:
			x+=0x14;
 234:	8c 5e       	subi	r24, 0xEC	; 236
 236:	01 c0       	rjmp	.+2      	; 0x23a <LCDGotoXY+0x1a>
			break;
		case 3:
			x+=0x54;
 238:	8c 5a       	subi	r24, 0xAC	; 172
	}

	#endif

	x|=0b10000000;
  	LCDCmd(x);
 23a:	60 e0       	ldi	r22, 0x00	; 0
 23c:	80 68       	ori	r24, 0x80	; 128
 23e:	29 cf       	rjmp	.-430    	; 0x92 <LCDByte>
 240:	08 95       	ret

00000242 <LCDHexDumpXY>:
}



void LCDHexDumpXY(uint8_t x, uint8_t y,uint8_t d)
{
 242:	cf 93       	push	r28
 244:	c4 2f       	mov	r28, r20
	LCDGotoXY(x,y);
 246:	ec df       	rcall	.-40     	; 0x220 <LCDGotoXY>
	uint8_t byte = '0';
	(((d>>4)&0x0F)<=9) ? (byte='0'+((d>>4)&0x0F)) : (byte='A'+ ((d>>4)&0x0F)-0x0A);
 248:	9c 2f       	mov	r25, r28
 24a:	92 95       	swap	r25
 24c:	9f 70       	andi	r25, 0x0F	; 15
 24e:	29 2f       	mov	r18, r25
 250:	30 e0       	ldi	r19, 0x00	; 0
 252:	89 2f       	mov	r24, r25
 254:	2a 30       	cpi	r18, 0x0A	; 10
 256:	31 05       	cpc	r19, r1
 258:	14 f4       	brge	.+4      	; 0x25e <LCDHexDumpXY+0x1c>
 25a:	80 5d       	subi	r24, 0xD0	; 208
 25c:	01 c0       	rjmp	.+2      	; 0x260 <LCDHexDumpXY+0x1e>
 25e:	89 5c       	subi	r24, 0xC9	; 201
	LCDByte(byte,1);
 260:	61 e0       	ldi	r22, 0x01	; 1
 262:	17 df       	rcall	.-466    	; 0x92 <LCDByte>
	LCDBusyLoop();
 264:	f0 de       	rcall	.-544    	; 0x46 <LCDBusyLoop>
	
	((d&0x0F)<=9) ? (byte='0'+ (d&0x0F)) : (byte='A'+ (d&0x0F)-0x0A);
 266:	8c 2f       	mov	r24, r28
 268:	8f 70       	andi	r24, 0x0F	; 15
 26a:	28 2f       	mov	r18, r24
 26c:	30 e0       	ldi	r19, 0x00	; 0
 26e:	2a 30       	cpi	r18, 0x0A	; 10
 270:	31 05       	cpc	r19, r1
 272:	14 f4       	brge	.+4      	; 0x278 <LCDHexDumpXY+0x36>
 274:	80 5d       	subi	r24, 0xD0	; 208
 276:	01 c0       	rjmp	.+2      	; 0x27a <LCDHexDumpXY+0x38>
 278:	89 5c       	subi	r24, 0xC9	; 201
	LCDByte(byte,1);
 27a:	61 e0       	ldi	r22, 0x01	; 1
 27c:	0a df       	rcall	.-492    	; 0x92 <LCDByte>
	LCDBusyLoop();
}
 27e:	cf 91       	pop	r28
	LCDByte(byte,1);
	LCDBusyLoop();
	
	((d&0x0F)<=9) ? (byte='0'+ (d&0x0F)) : (byte='A'+ (d&0x0F)-0x0A);
	LCDByte(byte,1);
	LCDBusyLoop();
 280:	e2 ce       	rjmp	.-572    	; 0x46 <LCDBusyLoop>

00000282 <spi_init>:
#include <spi.h>

#if SPI_CONFIG_AS_MASTER
void spi_init()
{
	SPI_DDR = (1<<SPI_MOSI)|(1<<SPI_SCK)|(1<<SPI_SS);
 282:	8c e2       	ldi	r24, 0x2C	; 44
 284:	84 b9       	out	0x04, r24	; 4
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);//prescaler 16
 286:	81 e5       	ldi	r24, 0x51	; 81
 288:	8c bd       	out	0x2c, r24	; 44
 28a:	08 95       	ret

0000028c <spi_transmit>:
}


uint8_t spi_transmit(uint8_t data)
{
	SPDR = data;
 28c:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
 28e:	0d b4       	in	r0, 0x2d	; 45
 290:	07 fe       	sbrs	r0, 7
 292:	fd cf       	rjmp	.-6      	; 0x28e <spi_transmit+0x2>
	
	return SPDR;
 294:	8e b5       	in	r24, 0x2e	; 46
}
 296:	08 95       	ret

00000298 <main>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 298:	2f e7       	ldi	r18, 0x7F	; 127
 29a:	88 e3       	ldi	r24, 0x38	; 56
 29c:	91 e0       	ldi	r25, 0x01	; 1
 29e:	21 50       	subi	r18, 0x01	; 1
 2a0:	80 40       	sbci	r24, 0x00	; 0
 2a2:	90 40       	sbci	r25, 0x00	; 0
 2a4:	e1 f7       	brne	.-8      	; 0x29e <main+0x6>
 2a6:	00 c0       	rjmp	.+0      	; 0x2a8 <main+0x10>
 2a8:	00 00       	nop
int main()
{
	uint8_t data=0;
	_delay_ms(50);
	
	spi_init();
 2aa:	eb df       	rcall	.-42     	; 0x282 <spi_init>
#include <util/delay.h>
#include <spi.h>

int main()
{
	uint8_t data=0;
 2ac:	80 e0       	ldi	r24, 0x00	; 0
	
	spi_init();
	
	while(1)
	{
		ENABLE_CHIP();		
 2ae:	2a 98       	cbi	0x05, 2	; 5
		spi_transmit(data++);
 2b0:	c8 2f       	mov	r28, r24
 2b2:	cf 5f       	subi	r28, 0xFF	; 255
 2b4:	eb df       	rcall	.-42     	; 0x28c <spi_transmit>
		DISABLE_CHIP();
 2b6:	2a 9a       	sbi	0x05, 2	; 5
 2b8:	2f ef       	ldi	r18, 0xFF	; 255
 2ba:	89 e6       	ldi	r24, 0x69	; 105
 2bc:	98 e1       	ldi	r25, 0x18	; 24
 2be:	21 50       	subi	r18, 0x01	; 1
 2c0:	80 40       	sbci	r24, 0x00	; 0
 2c2:	90 40       	sbci	r25, 0x00	; 0
 2c4:	e1 f7       	brne	.-8      	; 0x2be <main+0x26>
 2c6:	00 c0       	rjmp	.+0      	; 0x2c8 <main+0x30>
 2c8:	00 00       	nop
	spi_init();
	
	while(1)
	{
		ENABLE_CHIP();		
		spi_transmit(data++);
 2ca:	8c 2f       	mov	r24, r28
 2cc:	f0 cf       	rjmp	.-32     	; 0x2ae <main+0x16>

000002ce <__divmodhi4>:
 2ce:	97 fb       	bst	r25, 7
 2d0:	07 2e       	mov	r0, r23
 2d2:	16 f4       	brtc	.+4      	; 0x2d8 <__divmodhi4+0xa>
 2d4:	00 94       	com	r0
 2d6:	06 d0       	rcall	.+12     	; 0x2e4 <__divmodhi4_neg1>
 2d8:	77 fd       	sbrc	r23, 7
 2da:	08 d0       	rcall	.+16     	; 0x2ec <__divmodhi4_neg2>
 2dc:	0b d0       	rcall	.+22     	; 0x2f4 <__udivmodhi4>
 2de:	07 fc       	sbrc	r0, 7
 2e0:	05 d0       	rcall	.+10     	; 0x2ec <__divmodhi4_neg2>
 2e2:	3e f4       	brtc	.+14     	; 0x2f2 <__divmodhi4_exit>

000002e4 <__divmodhi4_neg1>:
 2e4:	90 95       	com	r25
 2e6:	81 95       	neg	r24
 2e8:	9f 4f       	sbci	r25, 0xFF	; 255
 2ea:	08 95       	ret

000002ec <__divmodhi4_neg2>:
 2ec:	70 95       	com	r23
 2ee:	61 95       	neg	r22
 2f0:	7f 4f       	sbci	r23, 0xFF	; 255

000002f2 <__divmodhi4_exit>:
 2f2:	08 95       	ret

000002f4 <__udivmodhi4>:
 2f4:	aa 1b       	sub	r26, r26
 2f6:	bb 1b       	sub	r27, r27
 2f8:	51 e1       	ldi	r21, 0x11	; 17
 2fa:	07 c0       	rjmp	.+14     	; 0x30a <__udivmodhi4_ep>

000002fc <__udivmodhi4_loop>:
 2fc:	aa 1f       	adc	r26, r26
 2fe:	bb 1f       	adc	r27, r27
 300:	a6 17       	cp	r26, r22
 302:	b7 07       	cpc	r27, r23
 304:	10 f0       	brcs	.+4      	; 0x30a <__udivmodhi4_ep>
 306:	a6 1b       	sub	r26, r22
 308:	b7 0b       	sbc	r27, r23

0000030a <__udivmodhi4_ep>:
 30a:	88 1f       	adc	r24, r24
 30c:	99 1f       	adc	r25, r25
 30e:	5a 95       	dec	r21
 310:	a9 f7       	brne	.-22     	; 0x2fc <__udivmodhi4_loop>
 312:	80 95       	com	r24
 314:	90 95       	com	r25
 316:	bc 01       	movw	r22, r24
 318:	cd 01       	movw	r24, r26
 31a:	08 95       	ret

0000031c <_exit>:
 31c:	f8 94       	cli

0000031e <__stop_program>:
 31e:	ff cf       	rjmp	.-2      	; 0x31e <__stop_program>
