
bin/rfid.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b8  00800100  00000828  0000089c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000828  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  00000954  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000054  00000000  00000000  00001020  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00001074  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00001085  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001608  00000000  00000000  0000110d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000652  00000000  00000000  00002715  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000575  00000000  00000000  00002d67  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000027c  00000000  00000000  000032dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002ce  00000000  00000000  00003558  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bdb  00000000  00000000  00003826  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00004401  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	2b c0       	rjmp	.+86     	; 0x5a <__bad_interrupt>
   4:	2a c0       	rjmp	.+84     	; 0x5a <__bad_interrupt>
   6:	29 c0       	rjmp	.+82     	; 0x5a <__bad_interrupt>
   8:	28 c0       	rjmp	.+80     	; 0x5a <__bad_interrupt>
   a:	27 c0       	rjmp	.+78     	; 0x5a <__bad_interrupt>
   c:	26 c0       	rjmp	.+76     	; 0x5a <__bad_interrupt>
   e:	25 c0       	rjmp	.+74     	; 0x5a <__bad_interrupt>
  10:	24 c0       	rjmp	.+72     	; 0x5a <__bad_interrupt>
  12:	23 c0       	rjmp	.+70     	; 0x5a <__bad_interrupt>
  14:	22 c0       	rjmp	.+68     	; 0x5a <__bad_interrupt>
  16:	21 c0       	rjmp	.+66     	; 0x5a <__bad_interrupt>
  18:	20 c0       	rjmp	.+64     	; 0x5a <__bad_interrupt>
  1a:	1f c0       	rjmp	.+62     	; 0x5a <__bad_interrupt>
  1c:	1e c0       	rjmp	.+60     	; 0x5a <__bad_interrupt>
  1e:	1d c0       	rjmp	.+58     	; 0x5a <__bad_interrupt>
  20:	1c c0       	rjmp	.+56     	; 0x5a <__bad_interrupt>
  22:	1b c0       	rjmp	.+54     	; 0x5a <__bad_interrupt>
  24:	1a c0       	rjmp	.+52     	; 0x5a <__bad_interrupt>
  26:	19 c0       	rjmp	.+50     	; 0x5a <__bad_interrupt>
  28:	18 c0       	rjmp	.+48     	; 0x5a <__bad_interrupt>
  2a:	17 c0       	rjmp	.+46     	; 0x5a <__bad_interrupt>
  2c:	16 c0       	rjmp	.+44     	; 0x5a <__bad_interrupt>
  2e:	15 c0       	rjmp	.+42     	; 0x5a <__bad_interrupt>
  30:	14 c0       	rjmp	.+40     	; 0x5a <__bad_interrupt>
  32:	13 c0       	rjmp	.+38     	; 0x5a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	e8 e2       	ldi	r30, 0x28	; 40
  48:	f8 e0       	ldi	r31, 0x08	; 8
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	a8 3b       	cpi	r26, 0xB8	; 184
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>
  56:	f4 d2       	rcall	.+1512   	; 0x640 <main>
  58:	e5 c3       	rjmp	.+1994   	; 0x824 <_exit>

0000005a <__bad_interrupt>:
  5a:	d2 cf       	rjmp	.-92     	; 0x0 <__vectors>

0000005c <gate_action>:
	}
}

void gate_action()
{
	LCDWriteStringXY(0,1,"Opening Gate ...");
  5c:	61 e0       	ldi	r22, 0x01	; 1
  5e:	80 e0       	ldi	r24, 0x00	; 0
  60:	2b d1       	rcall	.+598    	; 0x2b8 <LCDGotoXY>
  62:	80 e1       	ldi	r24, 0x10	; 16
  64:	91 e0       	ldi	r25, 0x01	; 1
  66:	bc d0       	rcall	.+376    	; 0x1e0 <LCDWriteString>
	MOTOR_ROTATE_CW();
  68:	80 e1       	ldi	r24, 0x10	; 16
  6a:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  6c:	2f ef       	ldi	r18, 0xFF	; 255
  6e:	84 e3       	ldi	r24, 0x34	; 52
  70:	9c e0       	ldi	r25, 0x0C	; 12
  72:	21 50       	subi	r18, 0x01	; 1
  74:	80 40       	sbci	r24, 0x00	; 0
  76:	90 40       	sbci	r25, 0x00	; 0
  78:	e1 f7       	brne	.-8      	; 0x72 <gate_action+0x16>
  7a:	00 c0       	rjmp	.+0      	; 0x7c <gate_action+0x20>
  7c:	00 00       	nop
	_delay_ms(500);
	MOTOR_OFF();
  7e:	18 b8       	out	0x08, r1	; 8
  80:	2f ef       	ldi	r18, 0xFF	; 255
  82:	87 ea       	ldi	r24, 0xA7	; 167
  84:	91 e6       	ldi	r25, 0x61	; 97
  86:	21 50       	subi	r18, 0x01	; 1
  88:	80 40       	sbci	r24, 0x00	; 0
  8a:	90 40       	sbci	r25, 0x00	; 0
  8c:	e1 f7       	brne	.-8      	; 0x86 <gate_action+0x2a>
  8e:	00 c0       	rjmp	.+0      	; 0x90 <gate_action+0x34>
  90:	00 00       	nop
	_delay_ms(4000);
	LCDWriteStringXY(0,1,"Closing Gate ...");
  92:	61 e0       	ldi	r22, 0x01	; 1
  94:	80 e0       	ldi	r24, 0x00	; 0
  96:	10 d1       	rcall	.+544    	; 0x2b8 <LCDGotoXY>
  98:	81 e2       	ldi	r24, 0x21	; 33
  9a:	91 e0       	ldi	r25, 0x01	; 1
  9c:	a1 d0       	rcall	.+322    	; 0x1e0 <LCDWriteString>
	MOTOR_ROTATE_CCW();
  9e:	80 e2       	ldi	r24, 0x20	; 32
  a0:	88 b9       	out	0x08, r24	; 8
  a2:	2f ef       	ldi	r18, 0xFF	; 255
  a4:	84 e3       	ldi	r24, 0x34	; 52
  a6:	9c e0       	ldi	r25, 0x0C	; 12
  a8:	21 50       	subi	r18, 0x01	; 1
  aa:	80 40       	sbci	r24, 0x00	; 0
  ac:	90 40       	sbci	r25, 0x00	; 0
  ae:	e1 f7       	brne	.-8      	; 0xa8 <gate_action+0x4c>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <gate_action+0x56>
  b2:	00 00       	nop
	_delay_ms(500);
	MOTOR_OFF();
  b4:	18 b8       	out	0x08, r1	; 8
	
	LCDClear();
  b6:	60 e0       	ldi	r22, 0x00	; 0
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	2f d0       	rcall	.+94     	; 0x11a <LCDByte>
	LCDWriteStringXY(1,0,"Show Your Card");
  bc:	60 e0       	ldi	r22, 0x00	; 0
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	fb d0       	rcall	.+502    	; 0x2b8 <LCDGotoXY>
  c2:	82 e3       	ldi	r24, 0x32	; 50
  c4:	91 e0       	ldi	r25, 0x01	; 1
  c6:	8c c0       	rjmp	.+280    	; 0x1e0 <LCDWriteString>

000000c8 <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=(~(0x0f<<LCD_DATA_POS));
  c8:	8a b1       	in	r24, 0x0a	; 10
  ca:	87 78       	andi	r24, 0x87	; 135
  cc:	8a b9       	out	0x0a, r24	; 10

	//change LCD mode
	SET_RW();		//Read mode
  ce:	59 9a       	sbi	0x0b, 1	; 11
	CLEAR_RS();		//Read status
  d0:	58 98       	cbi	0x0b, 0	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <LCDBusyLoop+0xc>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <LCDBusyLoop+0xe>

	
	do
	{

		SET_E();
  d6:	5a 9a       	sbi	0x0b, 2	; 11
  d8:	00 c0       	rjmp	.+0      	; 0xda <LCDBusyLoop+0x12>
  da:	00 c0       	rjmp	.+0      	; 0xdc <LCDBusyLoop+0x14>

		//Wait tDA for data to become available
		_delay_us(0.5);

		status=(LCD_DATA_PIN>>LCD_DATA_POS);
  dc:	89 b1       	in	r24, 0x09	; 9
  de:	86 95       	lsr	r24
  e0:	86 95       	lsr	r24
  e2:	86 95       	lsr	r24
		status=status<<4;
  e4:	82 95       	swap	r24
  e6:	80 7f       	andi	r24, 0xF0	; 240
  e8:	00 c0       	rjmp	.+0      	; 0xea <LCDBusyLoop+0x22>
  ea:	00 c0       	rjmp	.+0      	; 0xec <LCDBusyLoop+0x24>

		_delay_us(0.5);

		//Pull E low
		CLEAR_E();
  ec:	5a 98       	cbi	0x0b, 2	; 11
  ee:	92 e0       	ldi	r25, 0x02	; 2
  f0:	9a 95       	dec	r25
  f2:	f1 f7       	brne	.-4      	; 0xf0 <LCDBusyLoop+0x28>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <LCDBusyLoop+0x2e>
		_delay_us(1);	//tEL

		SET_E();
  f6:	5a 9a       	sbi	0x0b, 2	; 11
  f8:	00 c0       	rjmp	.+0      	; 0xfa <LCDBusyLoop+0x32>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <LCDBusyLoop+0x34>
		_delay_us(0.5);

		temp=(LCD_DATA_PIN>>LCD_DATA_POS);
  fc:	99 b1       	in	r25, 0x09	; 9
  fe:	00 c0       	rjmp	.+0      	; 0x100 <LCDBusyLoop+0x38>
 100:	00 c0       	rjmp	.+0      	; 0x102 <LCDBusyLoop+0x3a>
		status=status|temp;

		busy=status & 0b10000000;

		_delay_us(0.5);
		CLEAR_E();
 102:	5a 98       	cbi	0x0b, 2	; 11
 104:	92 e0       	ldi	r25, 0x02	; 2
 106:	9a 95       	dec	r25
 108:	f1 f7       	brne	.-4      	; 0x106 <LCDBusyLoop+0x3e>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <LCDBusyLoop+0x44>
		_delay_us(1);	//tEL
	}while(busy);
 10c:	87 fd       	sbrc	r24, 7
 10e:	e3 cf       	rjmp	.-58     	; 0xd6 <LCDBusyLoop+0xe>

	CLEAR_RW();		//write mode
 110:	59 98       	cbi	0x0b, 1	; 11
	//Change Port to output
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
 112:	8a b1       	in	r24, 0x0a	; 10
 114:	88 67       	ori	r24, 0x78	; 120
 116:	8a b9       	out	0x0a, r24	; 10
 118:	08 95       	ret

0000011a <LCDByte>:
//NOTE: THIS FUNCTION RETURS ONLY WHEN LCD HAS PROCESSED THE COMMAND

uint8_t hn,ln;			//Nibbles
uint8_t temp;

hn=c>>4;
 11a:	28 2f       	mov	r18, r24
 11c:	22 95       	swap	r18
 11e:	2f 70       	andi	r18, 0x0F	; 15
ln=(c & 0x0F);
 120:	8f 70       	andi	r24, 0x0F	; 15

if(isdata==0)
 122:	61 11       	cpse	r22, r1
 124:	02 c0       	rjmp	.+4      	; 0x12a <LCDByte+0x10>
	CLEAR_RS();
 126:	58 98       	cbi	0x0b, 0	; 11
 128:	01 c0       	rjmp	.+2      	; 0x12c <LCDByte+0x12>
else
	SET_RS();
 12a:	58 9a       	sbi	0x0b, 0	; 11
 12c:	00 c0       	rjmp	.+0      	; 0x12e <LCDByte+0x14>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <LCDByte+0x16>

_delay_us(0.500);		//tAS

SET_E();
 130:	5a 9a       	sbi	0x0b, 2	; 11

//Send high nibble

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((hn<<LCD_DATA_POS));
 132:	9b b1       	in	r25, 0x0b	; 11
 134:	48 e0       	ldi	r20, 0x08	; 8
 136:	24 9f       	mul	r18, r20
 138:	90 01       	movw	r18, r0
 13a:	11 24       	eor	r1, r1
 13c:	97 78       	andi	r25, 0x87	; 135
 13e:	92 2b       	or	r25, r18
LCD_DATA_PORT=temp;
 140:	9b b9       	out	0x0b, r25	; 11
 142:	92 e0       	ldi	r25, 0x02	; 2
 144:	9a 95       	dec	r25
 146:	f1 f7       	brne	.-4      	; 0x144 <LCDByte+0x2a>
 148:	00 c0       	rjmp	.+0      	; 0x14a <LCDByte+0x30>

_delay_us(1);			//tEH

//Now data lines are stable pull E low for transmission

CLEAR_E();
 14a:	5a 98       	cbi	0x0b, 2	; 11
 14c:	32 e0       	ldi	r19, 0x02	; 2
 14e:	3a 95       	dec	r19
 150:	f1 f7       	brne	.-4      	; 0x14e <LCDByte+0x34>
 152:	00 c0       	rjmp	.+0      	; 0x154 <LCDByte+0x3a>

_delay_us(1);

//Send the lower nibble
SET_E();
 154:	5a 9a       	sbi	0x0b, 2	; 11

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((ln<<LCD_DATA_POS));
 156:	2b b1       	in	r18, 0x0b	; 11
 158:	48 e0       	ldi	r20, 0x08	; 8
 15a:	84 9f       	mul	r24, r20
 15c:	c0 01       	movw	r24, r0
 15e:	11 24       	eor	r1, r1
 160:	27 78       	andi	r18, 0x87	; 135
 162:	28 2b       	or	r18, r24

LCD_DATA_PORT=temp;
 164:	2b b9       	out	0x0b, r18	; 11
 166:	82 e0       	ldi	r24, 0x02	; 2
 168:	8a 95       	dec	r24
 16a:	f1 f7       	brne	.-4      	; 0x168 <LCDByte+0x4e>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <LCDByte+0x54>

_delay_us(1);			//tEH

//SEND

CLEAR_E();
 16e:	5a 98       	cbi	0x0b, 2	; 11
 170:	92 e0       	ldi	r25, 0x02	; 2
 172:	9a 95       	dec	r25
 174:	f1 f7       	brne	.-4      	; 0x172 <LCDByte+0x58>
 176:	00 c0       	rjmp	.+0      	; 0x178 <LCDByte+0x5e>

_delay_us(1);			//tEL

LCDBusyLoop();
 178:	a7 cf       	rjmp	.-178    	; 0xc8 <LCDBusyLoop>

0000017a <LCDInit>:
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);

}

void LCDInit(uint8_t style)
{
 17a:	cf 93       	push	r28
 17c:	df 93       	push	r29
 17e:	1f 92       	push	r1
 180:	cd b7       	in	r28, 0x3d	; 61
 182:	de b7       	in	r29, 0x3e	; 62
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 184:	ef e5       	ldi	r30, 0x5F	; 95
 186:	fa ee       	ldi	r31, 0xEA	; 234
 188:	31 97       	sbiw	r30, 0x01	; 1
 18a:	f1 f7       	brne	.-4      	; 0x188 <LCDInit+0xe>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <LCDInit+0x14>
 18e:	00 00       	nop
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
 190:	9a b1       	in	r25, 0x0a	; 10
 192:	98 67       	ori	r25, 0x78	; 120
 194:	9a b9       	out	0x0a, r25	; 10
	LCD_E_DDR|=(1<<LCD_E_POS);
 196:	52 9a       	sbi	0x0a, 2	; 10
	LCD_RS_DDR|=(1<<LCD_RS_POS);
 198:	50 9a       	sbi	0x0a, 0	; 10
	LCD_RW_DDR|=(1<<LCD_RW_POS);
 19a:	51 9a       	sbi	0x0a, 1	; 10

	LCD_DATA_PORT&=(~(0x0F<<LCD_DATA_POS));
 19c:	9b b1       	in	r25, 0x0b	; 11
 19e:	97 78       	andi	r25, 0x87	; 135
 1a0:	9b b9       	out	0x0b, r25	; 11
	CLEAR_E();
 1a2:	5a 98       	cbi	0x0b, 2	; 11
	CLEAR_RW();
 1a4:	59 98       	cbi	0x0b, 1	; 11
	CLEAR_RS();
 1a6:	58 98       	cbi	0x0b, 0	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <LCDInit+0x30>
 1aa:	00 00       	nop

	//Set 4-bit mode
	_delay_us(0.3);	//tAS

	SET_E();
 1ac:	5a 9a       	sbi	0x0b, 2	; 11
	LCD_DATA_PORT|=((0b00000010)<<LCD_DATA_POS); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
 1ae:	5c 9a       	sbi	0x0b, 4	; 11
 1b0:	f2 e0       	ldi	r31, 0x02	; 2
 1b2:	fa 95       	dec	r31
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <LCDInit+0x38>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <LCDInit+0x3e>
	_delay_us(1);
	CLEAR_E();
 1b8:	5a 98       	cbi	0x0b, 2	; 11
 1ba:	92 e0       	ldi	r25, 0x02	; 2
 1bc:	9a 95       	dec	r25
 1be:	f1 f7       	brne	.-4      	; 0x1bc <LCDInit+0x42>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <LCDInit+0x48>
	_delay_us(1);
	
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
 1c2:	89 83       	std	Y+1, r24	; 0x01
 1c4:	81 df       	rcall	.-254    	; 0xc8 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
 1c6:	60 e0       	ldi	r22, 0x00	; 0
 1c8:	89 81       	ldd	r24, Y+1	; 0x01
 1ca:	8c 60       	ori	r24, 0x0C	; 12
 1cc:	a6 df       	rcall	.-180    	; 0x11a <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
 1ce:	60 e0       	ldi	r22, 0x00	; 0
 1d0:	88 e2       	ldi	r24, 0x28	; 40
 1d2:	a3 df       	rcall	.-186    	; 0x11a <LCDByte>
	}

	#endif

	x|=0b10000000;
  	LCDCmd(x);
 1d4:	60 e0       	ldi	r22, 0x00	; 0
 1d6:	80 e8       	ldi	r24, 0x80	; 128
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format

	
	LCDGotoXY(0,0);

}
 1d8:	0f 90       	pop	r0
 1da:	df 91       	pop	r29
 1dc:	cf 91       	pop	r28
	}

	#endif

	x|=0b10000000;
  	LCDCmd(x);
 1de:	9d cf       	rjmp	.-198    	; 0x11a <LCDByte>

000001e0 <LCDWriteString>:
	
	LCDGotoXY(0,0);

}
void LCDWriteString(const char *msg)
{
 1e0:	0f 93       	push	r16
 1e2:	1f 93       	push	r17
 1e4:	cf 93       	push	r28
 1e6:	df 93       	push	r29
 1e8:	ec 01       	movw	r28, r24
		
	In the same way you can insert any syblom numbered 0-7 	


	*****************************************************************/
 while(*msg!='\0')
 1ea:	16 c0       	rjmp	.+44     	; 0x218 <LCDWriteString+0x38>
 {
 	//Custom Char Support
	if(*msg=='%')
 1ec:	85 32       	cpi	r24, 0x25	; 37
 1ee:	79 f4       	brne	.+30     	; 0x20e <LCDWriteString+0x2e>
	{
		msg++;
 1f0:	8e 01       	movw	r16, r28
 1f2:	0f 5f       	subi	r16, 0xFF	; 255
 1f4:	1f 4f       	sbci	r17, 0xFF	; 255
		int8_t cc=*msg-'0';
 1f6:	89 81       	ldd	r24, Y+1	; 0x01
 1f8:	80 53       	subi	r24, 0x30	; 48

		if(cc>=0 && cc<=7)
		{
			LCDData(cc);
 1fa:	61 e0       	ldi	r22, 0x01	; 1
	if(*msg=='%')
	{
		msg++;
		int8_t cc=*msg-'0';

		if(cc>=0 && cc<=7)
 1fc:	88 30       	cpi	r24, 0x08	; 8
 1fe:	08 f4       	brcc	.+2      	; 0x202 <LCDWriteString+0x22>
 200:	04 c0       	rjmp	.+8      	; 0x20a <LCDWriteString+0x2a>
		{
			LCDData(cc);
		}
		else
		{
			LCDData('%');
 202:	85 e2       	ldi	r24, 0x25	; 37
 204:	8a df       	rcall	.-236    	; 0x11a <LCDByte>
			LCDData(*msg);
 206:	61 e0       	ldi	r22, 0x01	; 1
 208:	89 81       	ldd	r24, Y+1	; 0x01
 20a:	87 df       	rcall	.-242    	; 0x11a <LCDByte>
 20c:	03 c0       	rjmp	.+6      	; 0x214 <LCDWriteString+0x34>
		}
	}
	else
	{
		LCDData(*msg);
 20e:	61 e0       	ldi	r22, 0x01	; 1
 210:	84 df       	rcall	.-248    	; 0x11a <LCDByte>
 212:	8e 01       	movw	r16, r28
	}
	msg++;
 214:	e8 01       	movw	r28, r16
 216:	21 96       	adiw	r28, 0x01	; 1
		
	In the same way you can insert any syblom numbered 0-7 	


	*****************************************************************/
 while(*msg!='\0')
 218:	88 81       	ld	r24, Y
 21a:	81 11       	cpse	r24, r1
 21c:	e7 cf       	rjmp	.-50     	; 0x1ec <LCDWriteString+0xc>
	{
		LCDData(*msg);
	}
	msg++;
 }
}
 21e:	df 91       	pop	r29
 220:	cf 91       	pop	r28
 222:	1f 91       	pop	r17
 224:	0f 91       	pop	r16
 226:	08 95       	ret

00000228 <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
 228:	0f 93       	push	r16
 22a:	1f 93       	push	r17
 22c:	cf 93       	push	r28
 22e:	df 93       	push	r29
 230:	00 d0       	rcall	.+0      	; 0x232 <LCDWriteInt+0xa>
 232:	00 d0       	rcall	.+0      	; 0x234 <LCDWriteInt+0xc>
 234:	1f 92       	push	r1
 236:	cd b7       	in	r28, 0x3d	; 61
 238:	de b7       	in	r29, 0x3e	; 62
 23a:	9b 01       	movw	r18, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
 23c:	fe 01       	movw	r30, r28
 23e:	31 96       	adiw	r30, 0x01	; 1
 240:	45 e0       	ldi	r20, 0x05	; 5
 242:	df 01       	movw	r26, r30
 244:	1d 92       	st	X+, r1
 246:	4a 95       	dec	r20
 248:	e9 f7       	brne	.-6      	; 0x244 <LCDWriteInt+0x1c>
 24a:	fe 01       	movw	r30, r28
 24c:	36 96       	adiw	r30, 0x06	; 6
	int i=4,j=0;
	while(val)
	{
	str[i]=val%10;
 24e:	0a e0       	ldi	r16, 0x0A	; 10
 250:	10 e0       	ldi	r17, 0x00	; 0

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 252:	04 c0       	rjmp	.+8      	; 0x25c <LCDWriteInt+0x34>
	{
	str[i]=val%10;
 254:	b8 01       	movw	r22, r16
 256:	bf d2       	rcall	.+1406   	; 0x7d6 <__divmodhi4>
 258:	82 93       	st	-Z, r24
	val=val/10;
 25a:	cb 01       	movw	r24, r22

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 25c:	00 97       	sbiw	r24, 0x00	; 0
 25e:	d1 f7       	brne	.-12     	; 0x254 <LCDWriteInt+0x2c>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
 260:	2f 3f       	cpi	r18, 0xFF	; 255
 262:	bf ef       	ldi	r27, 0xFF	; 255
 264:	3b 07       	cpc	r19, r27
 266:	51 f4       	brne	.+20     	; 0x27c <LCDWriteInt+0x54>
 268:	fe 01       	movw	r30, r28
 26a:	31 96       	adiw	r30, 0x01	; 1
	}
	msg++;
 }
}

void LCDWriteInt(int val,unsigned int field_length)
 26c:	cf 01       	movw	r24, r30
 26e:	8f 01       	movw	r16, r30
 270:	08 1b       	sub	r16, r24
 272:	19 0b       	sbc	r17, r25
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
		while(str[j]==0) j++;
 274:	21 91       	ld	r18, Z+
 276:	22 23       	and	r18, r18
 278:	d1 f3       	breq	.-12     	; 0x26e <LCDWriteInt+0x46>
 27a:	11 c0       	rjmp	.+34     	; 0x29e <LCDWriteInt+0x76>
	else
		j=5-field_length;
 27c:	05 e0       	ldi	r16, 0x05	; 5
 27e:	10 e0       	ldi	r17, 0x00	; 0
 280:	02 1b       	sub	r16, r18
 282:	13 0b       	sbc	r17, r19
 284:	0c c0       	rjmp	.+24     	; 0x29e <LCDWriteInt+0x76>
	}
	msg++;
 }
}

void LCDWriteInt(int val,unsigned int field_length)
 286:	e1 e0       	ldi	r30, 0x01	; 1
 288:	f0 e0       	ldi	r31, 0x00	; 0
 28a:	ec 0f       	add	r30, r28
 28c:	fd 1f       	adc	r31, r29
 28e:	e0 0f       	add	r30, r16
 290:	f1 1f       	adc	r31, r17
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
 292:	80 81       	ld	r24, Z
 294:	61 e0       	ldi	r22, 0x01	; 1
 296:	80 5d       	subi	r24, 0xD0	; 208
 298:	40 df       	rcall	.-384    	; 0x11a <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
 29a:	0f 5f       	subi	r16, 0xFF	; 255
 29c:	1f 4f       	sbci	r17, 0xFF	; 255
 29e:	05 30       	cpi	r16, 0x05	; 5
 2a0:	11 05       	cpc	r17, r1
 2a2:	8c f3       	brlt	.-30     	; 0x286 <LCDWriteInt+0x5e>
	{
	LCDData(48+str[i]);
	}
}
 2a4:	0f 90       	pop	r0
 2a6:	0f 90       	pop	r0
 2a8:	0f 90       	pop	r0
 2aa:	0f 90       	pop	r0
 2ac:	0f 90       	pop	r0
 2ae:	df 91       	pop	r29
 2b0:	cf 91       	pop	r28
 2b2:	1f 91       	pop	r17
 2b4:	0f 91       	pop	r16
 2b6:	08 95       	ret

000002b8 <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 	if(x>=20) return;
 2b8:	84 31       	cpi	r24, 0x14	; 20
 2ba:	70 f4       	brcc	.+28     	; 0x2d8 <LCDGotoXY+0x20>

	#ifdef LCD_TYPE_204
	
	switch(y)
 2bc:	62 30       	cpi	r22, 0x02	; 2
 2be:	31 f0       	breq	.+12     	; 0x2cc <LCDGotoXY+0x14>
 2c0:	63 30       	cpi	r22, 0x03	; 3
 2c2:	31 f0       	breq	.+12     	; 0x2d0 <LCDGotoXY+0x18>
 2c4:	61 30       	cpi	r22, 0x01	; 1
 2c6:	29 f4       	brne	.+10     	; 0x2d2 <LCDGotoXY+0x1a>
	{
		case 0:
			break;
		case 1:
			x|=0b01000000;
 2c8:	80 64       	ori	r24, 0x40	; 64
 2ca:	03 c0       	rjmp	.+6      	; 0x2d2 <LCDGotoXY+0x1a>
			break;
		case 2:
			x+=0x14;
 2cc:	8c 5e       	subi	r24, 0xEC	; 236
 2ce:	01 c0       	rjmp	.+2      	; 0x2d2 <LCDGotoXY+0x1a>
			break;
		case 3:
			x+=0x54;
 2d0:	8c 5a       	subi	r24, 0xAC	; 172
	}

	#endif

	x|=0b10000000;
  	LCDCmd(x);
 2d2:	60 e0       	ldi	r22, 0x00	; 0
 2d4:	80 68       	ori	r24, 0x80	; 128
 2d6:	21 cf       	rjmp	.-446    	; 0x11a <LCDByte>
 2d8:	08 95       	ret

000002da <LCDHexDumpXY>:
}



void LCDHexDumpXY(uint8_t x, uint8_t y,uint8_t d)
{
 2da:	cf 93       	push	r28
 2dc:	c4 2f       	mov	r28, r20
	LCDGotoXY(x,y);
 2de:	ec df       	rcall	.-40     	; 0x2b8 <LCDGotoXY>
	uint8_t byte = '0';
	(((d>>4)&0x0F)<=9) ? (byte='0'+((d>>4)&0x0F)) : (byte='A'+ ((d>>4)&0x0F)-0x0A);
 2e0:	9c 2f       	mov	r25, r28
 2e2:	92 95       	swap	r25
 2e4:	9f 70       	andi	r25, 0x0F	; 15
 2e6:	29 2f       	mov	r18, r25
 2e8:	30 e0       	ldi	r19, 0x00	; 0
 2ea:	89 2f       	mov	r24, r25
 2ec:	2a 30       	cpi	r18, 0x0A	; 10
 2ee:	31 05       	cpc	r19, r1
 2f0:	14 f4       	brge	.+4      	; 0x2f6 <LCDHexDumpXY+0x1c>
 2f2:	80 5d       	subi	r24, 0xD0	; 208
 2f4:	01 c0       	rjmp	.+2      	; 0x2f8 <LCDHexDumpXY+0x1e>
 2f6:	89 5c       	subi	r24, 0xC9	; 201
	LCDByte(byte,1);
 2f8:	61 e0       	ldi	r22, 0x01	; 1
 2fa:	0f df       	rcall	.-482    	; 0x11a <LCDByte>
	LCDBusyLoop();
 2fc:	e5 de       	rcall	.-566    	; 0xc8 <LCDBusyLoop>
	
	((d&0x0F)<=9) ? (byte='0'+ (d&0x0F)) : (byte='A'+ (d&0x0F)-0x0A);
 2fe:	8c 2f       	mov	r24, r28
 300:	8f 70       	andi	r24, 0x0F	; 15
 302:	28 2f       	mov	r18, r24
 304:	30 e0       	ldi	r19, 0x00	; 0
 306:	2a 30       	cpi	r18, 0x0A	; 10
 308:	31 05       	cpc	r19, r1
 30a:	14 f4       	brge	.+4      	; 0x310 <__stack+0x11>
 30c:	80 5d       	subi	r24, 0xD0	; 208
 30e:	01 c0       	rjmp	.+2      	; 0x312 <__stack+0x13>
 310:	89 5c       	subi	r24, 0xC9	; 201
	LCDByte(byte,1);
 312:	61 e0       	ldi	r22, 0x01	; 1
 314:	02 df       	rcall	.-508    	; 0x11a <LCDByte>
	LCDBusyLoop();
}
 316:	cf 91       	pop	r28
	LCDByte(byte,1);
	LCDBusyLoop();
	
	((d&0x0F)<=9) ? (byte='0'+ (d&0x0F)) : (byte='A'+ (d&0x0F)-0x0A);
	LCDByte(byte,1);
	LCDBusyLoop();
 318:	d7 ce       	rjmp	.-594    	; 0xc8 <LCDBusyLoop>

0000031a <mfrc522_write>:
		mfrc522_write(TxControlReg,byte|0x03);
	}
}

void mfrc522_write(uint8_t reg, uint8_t data)
{
 31a:	cf 93       	push	r28
 31c:	df 93       	push	r29
 31e:	1f 92       	push	r1
 320:	cd b7       	in	r28, 0x3d	; 61
 322:	de b7       	in	r29, 0x3e	; 62
	ENABLE_CHIP();
 324:	2a 98       	cbi	0x05, 2	; 5
	spi_transmit((reg<<1)&0x7E);
 326:	88 0f       	add	r24, r24
 328:	8e 77       	andi	r24, 0x7E	; 126
 32a:	69 83       	std	Y+1, r22	; 0x01
 32c:	83 d1       	rcall	.+774    	; 0x634 <spi_transmit>
	spi_transmit(data);
 32e:	69 81       	ldd	r22, Y+1	; 0x01
 330:	86 2f       	mov	r24, r22
 332:	80 d1       	rcall	.+768    	; 0x634 <spi_transmit>
	DISABLE_CHIP();
 334:	2a 9a       	sbi	0x05, 2	; 5
}
 336:	0f 90       	pop	r0
 338:	df 91       	pop	r29
 33a:	cf 91       	pop	r28
 33c:	08 95       	ret

0000033e <mfrc522_read>:

uint8_t mfrc522_read(uint8_t reg)
{
	uint8_t data;	
	ENABLE_CHIP();
 33e:	2a 98       	cbi	0x05, 2	; 5
	spi_transmit(((reg<<1)&0x7E)|0x80);
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	88 0f       	add	r24, r24
 344:	99 1f       	adc	r25, r25
 346:	8e 77       	andi	r24, 0x7E	; 126
 348:	99 27       	eor	r25, r25
 34a:	80 68       	ori	r24, 0x80	; 128
 34c:	73 d1       	rcall	.+742    	; 0x634 <spi_transmit>
	data = spi_transmit(0x00);
 34e:	80 e0       	ldi	r24, 0x00	; 0
 350:	71 d1       	rcall	.+738    	; 0x634 <spi_transmit>
	DISABLE_CHIP();
 352:	2a 9a       	sbi	0x05, 2	; 5
	return data;
}
 354:	08 95       	ret

00000356 <mfrc522_reset>:

void mfrc522_reset()
{
	mfrc522_write(CommandReg,SoftReset_CMD);
 356:	6f e0       	ldi	r22, 0x0F	; 15
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	df cf       	rjmp	.-66     	; 0x31a <mfrc522_write>

0000035c <mfrc522_init>:
#endif

void mfrc522_init()
{
	uint8_t byte;
	mfrc522_reset();
 35c:	fc df       	rcall	.-8      	; 0x356 <mfrc522_reset>
	
	mfrc522_write(TModeReg, 0x8D);
 35e:	6d e8       	ldi	r22, 0x8D	; 141
 360:	8a e2       	ldi	r24, 0x2A	; 42
 362:	db df       	rcall	.-74     	; 0x31a <mfrc522_write>
    mfrc522_write(TPrescalerReg, 0x3E);
 364:	6e e3       	ldi	r22, 0x3E	; 62
 366:	8b e2       	ldi	r24, 0x2B	; 43
 368:	d8 df       	rcall	.-80     	; 0x31a <mfrc522_write>
    mfrc522_write(TReloadReg_1, 30);   
 36a:	6e e1       	ldi	r22, 0x1E	; 30
 36c:	8c e2       	ldi	r24, 0x2C	; 44
 36e:	d5 df       	rcall	.-86     	; 0x31a <mfrc522_write>
    mfrc522_write(TReloadReg_2, 0);	
 370:	60 e0       	ldi	r22, 0x00	; 0
 372:	8d e2       	ldi	r24, 0x2D	; 45
 374:	d2 df       	rcall	.-92     	; 0x31a <mfrc522_write>
	mfrc522_write(TxASKReg, 0x40);	
 376:	60 e4       	ldi	r22, 0x40	; 64
 378:	85 e1       	ldi	r24, 0x15	; 21
 37a:	cf df       	rcall	.-98     	; 0x31a <mfrc522_write>
	mfrc522_write(ModeReg, 0x3D);
 37c:	6d e3       	ldi	r22, 0x3D	; 61
 37e:	81 e1       	ldi	r24, 0x11	; 17
 380:	cc df       	rcall	.-104    	; 0x31a <mfrc522_write>
	
	byte = mfrc522_read(TxControlReg);
 382:	84 e1       	ldi	r24, 0x14	; 20
 384:	dc df       	rcall	.-72     	; 0x33e <mfrc522_read>
	if(!(byte&0x03))
 386:	98 2f       	mov	r25, r24
 388:	93 70       	andi	r25, 0x03	; 3
 38a:	21 f4       	brne	.+8      	; 0x394 <mfrc522_init+0x38>
	{
		mfrc522_write(TxControlReg,byte|0x03);
 38c:	68 2f       	mov	r22, r24
 38e:	63 60       	ori	r22, 0x03	; 3
 390:	84 e1       	ldi	r24, 0x14	; 20
 392:	c3 cf       	rjmp	.-122    	; 0x31a <mfrc522_write>
 394:	08 95       	ret

00000396 <mfrc522_to_card>:
   
	return status;
}

uint8_t mfrc522_to_card(uint8_t cmd, uint8_t *send_data, uint8_t send_data_len, uint8_t *back_data, uint32_t *back_data_len)
{
 396:	2f 92       	push	r2
 398:	3f 92       	push	r3
 39a:	4f 92       	push	r4
 39c:	5f 92       	push	r5
 39e:	7f 92       	push	r7
 3a0:	8f 92       	push	r8
 3a2:	9f 92       	push	r9
 3a4:	af 92       	push	r10
 3a6:	bf 92       	push	r11
 3a8:	cf 92       	push	r12
 3aa:	df 92       	push	r13
 3ac:	ef 92       	push	r14
 3ae:	ff 92       	push	r15
 3b0:	0f 93       	push	r16
 3b2:	1f 93       	push	r17
 3b4:	cf 93       	push	r28
 3b6:	df 93       	push	r29
 3b8:	00 d0       	rcall	.+0      	; 0x3ba <mfrc522_to_card+0x24>
 3ba:	1f 92       	push	r1
 3bc:	cd b7       	in	r28, 0x3d	; 61
 3be:	de b7       	in	r29, 0x3e	; 62
 3c0:	88 2e       	mov	r8, r24
 3c2:	f6 2e       	mov	r15, r22
 3c4:	24 2e       	mov	r2, r20
 3c6:	72 2e       	mov	r7, r18
 3c8:	93 2e       	mov	r9, r19
 3ca:	1b 83       	std	Y+3, r17	; 0x03
 3cc:	0a 83       	std	Y+2, r16	; 0x02
 3ce:	8c 50       	subi	r24, 0x0C	; 12
 3d0:	83 30       	cpi	r24, 0x03	; 3
 3d2:	50 f4       	brcc	.+20     	; 0x3e8 <mfrc522_to_card+0x52>
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	fc 01       	movw	r30, r24
 3d8:	e6 5f       	subi	r30, 0xF6	; 246
 3da:	fe 4f       	sbci	r31, 0xFE	; 254
 3dc:	10 81       	ld	r17, Z
 3de:	fc 01       	movw	r30, r24
 3e0:	e3 5f       	subi	r30, 0xF3	; 243
 3e2:	fe 4f       	sbci	r31, 0xFE	; 254
 3e4:	00 81       	ld	r16, Z
 3e6:	02 c0       	rjmp	.+4      	; 0x3ec <mfrc522_to_card+0x56>
 3e8:	00 e0       	ldi	r16, 0x00	; 0
 3ea:	10 e0       	ldi	r17, 0x00	; 0
		default:
			break;
    }
   
    //mfrc522_write(ComIEnReg, irqEn|0x80);	//Interrupt request
    n=mfrc522_read(ComIrqReg);
 3ec:	84 e0       	ldi	r24, 0x04	; 4
 3ee:	79 83       	std	Y+1, r23	; 0x01
 3f0:	a6 df       	rcall	.-180    	; 0x33e <mfrc522_read>
    mfrc522_write(ComIrqReg,n&(~0x80));//clear all interrupt bits
 3f2:	68 2f       	mov	r22, r24
 3f4:	6f 77       	andi	r22, 0x7F	; 127
 3f6:	84 e0       	ldi	r24, 0x04	; 4
 3f8:	90 df       	rcall	.-224    	; 0x31a <mfrc522_write>
    n=mfrc522_read(FIFOLevelReg);
 3fa:	8a e0       	ldi	r24, 0x0A	; 10
 3fc:	a0 df       	rcall	.-192    	; 0x33e <mfrc522_read>
    mfrc522_write(FIFOLevelReg,n|0x80);//flush FIFO data
 3fe:	68 2f       	mov	r22, r24
 400:	60 68       	ori	r22, 0x80	; 128
 402:	8a e0       	ldi	r24, 0x0A	; 10
 404:	8a df       	rcall	.-236    	; 0x31a <mfrc522_write>
    
	mfrc522_write(CommandReg, Idle_CMD);	//NO action; Cancel the current cmd???
 406:	60 e0       	ldi	r22, 0x00	; 0
 408:	81 e0       	ldi	r24, 0x01	; 1
 40a:	87 df       	rcall	.-242    	; 0x31a <mfrc522_write>
 40c:	af 2c       	mov	r10, r15
 40e:	79 81       	ldd	r23, Y+1	; 0x01
 410:	b7 2e       	mov	r11, r23

	//Writing data to the FIFO
    for (i=0; i<send_data_len; i++)
 412:	c1 2c       	mov	r12, r1
 414:	d1 2c       	mov	r13, r1
 416:	76 01       	movw	r14, r12
 418:	31 2c       	mov	r3, r1
 41a:	41 2c       	mov	r4, r1
 41c:	51 2c       	mov	r5, r1
 41e:	0a c0       	rjmp	.+20     	; 0x434 <mfrc522_to_card+0x9e>
    {   
		mfrc522_write(FIFODataReg, send_data[i]);    
 420:	f5 01       	movw	r30, r10
 422:	61 91       	ld	r22, Z+
 424:	5f 01       	movw	r10, r30
 426:	89 e0       	ldi	r24, 0x09	; 9
 428:	78 df       	rcall	.-272    	; 0x31a <mfrc522_write>
    mfrc522_write(FIFOLevelReg,n|0x80);//flush FIFO data
    
	mfrc522_write(CommandReg, Idle_CMD);	//NO action; Cancel the current cmd???

	//Writing data to the FIFO
    for (i=0; i<send_data_len; i++)
 42a:	ff ef       	ldi	r31, 0xFF	; 255
 42c:	cf 1a       	sub	r12, r31
 42e:	df 0a       	sbc	r13, r31
 430:	ef 0a       	sbc	r14, r31
 432:	ff 0a       	sbc	r15, r31
 434:	c2 14       	cp	r12, r2
 436:	d3 04       	cpc	r13, r3
 438:	e4 04       	cpc	r14, r4
 43a:	f5 04       	cpc	r15, r5
 43c:	88 f3       	brcs	.-30     	; 0x420 <mfrc522_to_card+0x8a>
    {   
		mfrc522_write(FIFODataReg, send_data[i]);    
	}

	//Execute the cmd
	mfrc522_write(CommandReg, cmd);
 43e:	68 2d       	mov	r22, r8
 440:	81 e0       	ldi	r24, 0x01	; 1
 442:	6b df       	rcall	.-298    	; 0x31a <mfrc522_write>
    if (cmd == Transceive_CMD)
 444:	8c e0       	ldi	r24, 0x0C	; 12
 446:	88 12       	cpse	r8, r24
 448:	06 c0       	rjmp	.+12     	; 0x456 <mfrc522_to_card+0xc0>
    {    
		n=mfrc522_read(BitFramingReg);
 44a:	8d e0       	ldi	r24, 0x0D	; 13
 44c:	78 df       	rcall	.-272    	; 0x33e <mfrc522_read>
		mfrc522_write(BitFramingReg,n|0x80);  
 44e:	68 2f       	mov	r22, r24
 450:	60 68       	ori	r22, 0x80	; 128
 452:	8d e0       	ldi	r24, 0x0D	; 13
 454:	62 df       	rcall	.-316    	; 0x31a <mfrc522_write>
    mfrc522_write(FIFOLevelReg,n|0x80);//flush FIFO data
    
	mfrc522_write(CommandReg, Idle_CMD);	//NO action; Cancel the current cmd???

	//Writing data to the FIFO
    for (i=0; i<send_data_len; i++)
 456:	70 ed       	ldi	r23, 0xD0	; 208
 458:	c7 2e       	mov	r12, r23
 45a:	77 e0       	ldi	r23, 0x07	; 7
 45c:	d7 2e       	mov	r13, r23
 45e:	e1 2c       	mov	r14, r1
 460:	f1 2c       	mov	r15, r1
	i = 2000;	//i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
    do 
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = mfrc522_read(ComIrqReg);
 462:	84 e0       	ldi	r24, 0x04	; 4
 464:	6c df       	rcall	.-296    	; 0x33e <mfrc522_read>
 466:	b8 2e       	mov	r11, r24
        i--;
 468:	e1 e0       	ldi	r30, 0x01	; 1
 46a:	ce 1a       	sub	r12, r30
 46c:	d1 08       	sbc	r13, r1
 46e:	e1 08       	sbc	r14, r1
 470:	f1 08       	sbc	r15, r1
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 472:	21 f0       	breq	.+8      	; 0x47c <mfrc522_to_card+0xe6>
 474:	80 fd       	sbrc	r24, 0
 476:	02 c0       	rjmp	.+4      	; 0x47c <mfrc522_to_card+0xe6>
 478:	80 23       	and	r24, r16
 47a:	99 f3       	breq	.-26     	; 0x462 <mfrc522_to_card+0xcc>

	tmp=mfrc522_read(BitFramingReg);
 47c:	8d e0       	ldi	r24, 0x0D	; 13
 47e:	5f df       	rcall	.-322    	; 0x33e <mfrc522_read>
	mfrc522_write(BitFramingReg,tmp&(~0x80));
 480:	68 2f       	mov	r22, r24
 482:	6f 77       	andi	r22, 0x7F	; 127
 484:	8d e0       	ldi	r24, 0x0D	; 13
 486:	49 df       	rcall	.-366    	; 0x31a <mfrc522_write>
	
    if (i != 0)
 488:	cd 28       	or	r12, r13
 48a:	ce 28       	or	r12, r14
 48c:	cf 28       	or	r12, r15
 48e:	11 f4       	brne	.+4      	; 0x494 <mfrc522_to_card+0xfe>
	return status;
}

uint8_t mfrc522_to_card(uint8_t cmd, uint8_t *send_data, uint8_t send_data_len, uint8_t *back_data, uint32_t *back_data_len)
{
	uint8_t status = ERROR;
 490:	13 e0       	ldi	r17, 0x03	; 3
 492:	51 c0       	rjmp	.+162    	; 0x536 <mfrc522_to_card+0x1a0>
	tmp=mfrc522_read(BitFramingReg);
	mfrc522_write(BitFramingReg,tmp&(~0x80));
	
    if (i != 0)
    {    
        if(!(mfrc522_read(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
 494:	86 e0       	ldi	r24, 0x06	; 6
 496:	53 df       	rcall	.-346    	; 0x33e <mfrc522_read>
 498:	8b 71       	andi	r24, 0x1B	; 27
 49a:	d1 f7       	brne	.-12     	; 0x490 <mfrc522_to_card+0xfa>
        {
            status = CARD_FOUND;
            if (n & irqEn & 0x01)
 49c:	11 70       	andi	r17, 0x01	; 1
 49e:	1b 21       	and	r17, r11
 4a0:	11 f4       	brne	.+4      	; 0x4a6 <mfrc522_to_card+0x110>
	
    if (i != 0)
    {    
        if(!(mfrc522_read(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
        {
            status = CARD_FOUND;
 4a2:	11 e0       	ldi	r17, 0x01	; 1
 4a4:	01 c0       	rjmp	.+2      	; 0x4a8 <mfrc522_to_card+0x112>
            if (n & irqEn & 0x01)
            {   
				status = CARD_NOT_FOUND;			//??   
 4a6:	12 e0       	ldi	r17, 0x02	; 2
			}

            if (cmd == Transceive_CMD)
 4a8:	fc e0       	ldi	r31, 0x0C	; 12
 4aa:	8f 12       	cpse	r8, r31
 4ac:	44 c0       	rjmp	.+136    	; 0x536 <mfrc522_to_card+0x1a0>
            {
               	n = mfrc522_read(FIFOLevelReg);
 4ae:	8a e0       	ldi	r24, 0x0A	; 10
 4b0:	46 df       	rcall	.-372    	; 0x33e <mfrc522_read>
 4b2:	08 2f       	mov	r16, r24
              	lastBits = mfrc522_read(ControlReg) & 0x07;
 4b4:	8c e0       	ldi	r24, 0x0C	; 12
 4b6:	43 df       	rcall	.-378    	; 0x33e <mfrc522_read>
 4b8:	87 70       	andi	r24, 0x07	; 7
 4ba:	20 2f       	mov	r18, r16
 4bc:	30 e0       	ldi	r19, 0x00	; 0
                if (lastBits)
                {   
					*back_data_len = (n-1)*8 + lastBits;   
 4be:	a9 01       	movw	r20, r18

            if (cmd == Transceive_CMD)
            {
               	n = mfrc522_read(FIFOLevelReg);
              	lastBits = mfrc522_read(ControlReg) & 0x07;
                if (lastBits)
 4c0:	51 f0       	breq	.+20     	; 0x4d6 <mfrc522_to_card+0x140>
                {   
					*back_data_len = (n-1)*8 + lastBits;   
 4c2:	41 50       	subi	r20, 0x01	; 1
 4c4:	51 09       	sbc	r21, r1
 4c6:	63 e0       	ldi	r22, 0x03	; 3
 4c8:	44 0f       	add	r20, r20
 4ca:	55 1f       	adc	r21, r21
 4cc:	6a 95       	dec	r22
 4ce:	e1 f7       	brne	.-8      	; 0x4c8 <mfrc522_to_card+0x132>
 4d0:	48 0f       	add	r20, r24
 4d2:	51 1d       	adc	r21, r1
 4d4:	05 c0       	rjmp	.+10     	; 0x4e0 <mfrc522_to_card+0x14a>
				}
                else
                {   
					*back_data_len = n*8;   
 4d6:	33 e0       	ldi	r19, 0x03	; 3
 4d8:	44 0f       	add	r20, r20
 4da:	55 1f       	adc	r21, r21
 4dc:	3a 95       	dec	r19
 4de:	e1 f7       	brne	.-8      	; 0x4d8 <mfrc522_to_card+0x142>
 4e0:	66 27       	eor	r22, r22
 4e2:	57 fd       	sbrc	r21, 7
 4e4:	60 95       	com	r22
 4e6:	76 2f       	mov	r23, r22
 4e8:	ea 81       	ldd	r30, Y+2	; 0x02
 4ea:	fb 81       	ldd	r31, Y+3	; 0x03
 4ec:	40 83       	st	Z, r20
 4ee:	51 83       	std	Z+1, r21	; 0x01
 4f0:	62 83       	std	Z+2, r22	; 0x02
 4f2:	73 83       	std	Z+3, r23	; 0x03
				}

                if (n == 0)
 4f4:	00 23       	and	r16, r16
 4f6:	19 f0       	breq	.+6      	; 0x4fe <mfrc522_to_card+0x168>
                {   
					n = 1;    
				}
                if (n > MAX_LEN)
 4f8:	01 31       	cpi	r16, 0x11	; 17
 4fa:	18 f4       	brcc	.+6      	; 0x502 <mfrc522_to_card+0x16c>
 4fc:	03 c0       	rjmp	.+6      	; 0x504 <mfrc522_to_card+0x16e>
					*back_data_len = n*8;   
				}

                if (n == 0)
                {   
					n = 1;    
 4fe:	01 e0       	ldi	r16, 0x01	; 1
 500:	01 c0       	rjmp	.+2      	; 0x504 <mfrc522_to_card+0x16e>
				}
                if (n > MAX_LEN)
                {   
					n = MAX_LEN;   
 502:	00 e1       	ldi	r16, 0x10	; 16
 504:	47 2c       	mov	r4, r7
 506:	59 2c       	mov	r5, r9
				}
				
				//Reading the received data in FIFO
                for (i=0; i<n; i++)
 508:	c1 2c       	mov	r12, r1
 50a:	d1 2c       	mov	r13, r1
 50c:	76 01       	movw	r14, r12
 50e:	80 2e       	mov	r8, r16
 510:	91 2c       	mov	r9, r1
 512:	a1 2c       	mov	r10, r1
 514:	b1 2c       	mov	r11, r1
 516:	0a c0       	rjmp	.+20     	; 0x52c <mfrc522_to_card+0x196>
                {   
					back_data[i] = mfrc522_read(FIFODataReg);    
 518:	89 e0       	ldi	r24, 0x09	; 9
 51a:	11 df       	rcall	.-478    	; 0x33e <mfrc522_read>
 51c:	f2 01       	movw	r30, r4
 51e:	81 93       	st	Z+, r24
 520:	2f 01       	movw	r4, r30
                {   
					n = MAX_LEN;   
				}
				
				//Reading the received data in FIFO
                for (i=0; i<n; i++)
 522:	ff ef       	ldi	r31, 0xFF	; 255
 524:	cf 1a       	sub	r12, r31
 526:	df 0a       	sbc	r13, r31
 528:	ef 0a       	sbc	r14, r31
 52a:	ff 0a       	sbc	r15, r31
 52c:	c8 14       	cp	r12, r8
 52e:	d9 04       	cpc	r13, r9
 530:	ea 04       	cpc	r14, r10
 532:	fb 04       	cpc	r15, r11
 534:	88 f3       	brcs	.-30     	; 0x518 <mfrc522_to_card+0x182>
	
    //SetBitMask(ControlReg,0x80);           //timer stops
    //mfrc522_write(cmdReg, PCD_IDLE); 

    return status;
}
 536:	81 2f       	mov	r24, r17
 538:	0f 90       	pop	r0
 53a:	0f 90       	pop	r0
 53c:	0f 90       	pop	r0
 53e:	df 91       	pop	r29
 540:	cf 91       	pop	r28
 542:	1f 91       	pop	r17
 544:	0f 91       	pop	r16
 546:	ff 90       	pop	r15
 548:	ef 90       	pop	r14
 54a:	df 90       	pop	r13
 54c:	cf 90       	pop	r12
 54e:	bf 90       	pop	r11
 550:	af 90       	pop	r10
 552:	9f 90       	pop	r9
 554:	8f 90       	pop	r8
 556:	7f 90       	pop	r7
 558:	5f 90       	pop	r5
 55a:	4f 90       	pop	r4
 55c:	3f 90       	pop	r3
 55e:	2f 90       	pop	r2
 560:	08 95       	ret

00000562 <mfrc522_request>:
{
	mfrc522_write(CommandReg,SoftReset_CMD);
}

uint8_t	mfrc522_request(uint8_t req_mode, uint8_t * tag_type)
{
 562:	ef 92       	push	r14
 564:	ff 92       	push	r15
 566:	0f 93       	push	r16
 568:	1f 93       	push	r17
 56a:	cf 93       	push	r28
 56c:	df 93       	push	r29
 56e:	00 d0       	rcall	.+0      	; 0x570 <mfrc522_request+0xe>
 570:	00 d0       	rcall	.+0      	; 0x572 <mfrc522_request+0x10>
 572:	cd b7       	in	r28, 0x3d	; 61
 574:	de b7       	in	r29, 0x3e	; 62
 576:	18 2f       	mov	r17, r24
 578:	7b 01       	movw	r14, r22
	uint8_t  status;  
	uint32_t backBits;//The received data bits

	mfrc522_write(BitFramingReg, 0x07);//TxLastBists = BitFramingReg[2..0]	???
 57a:	67 e0       	ldi	r22, 0x07	; 7
 57c:	8d e0       	ldi	r24, 0x0D	; 13
 57e:	cd de       	rcall	.-614    	; 0x31a <mfrc522_write>
	
	tag_type[0] = req_mode;
 580:	f7 01       	movw	r30, r14
 582:	10 83       	st	Z, r17
	status = mfrc522_to_card(Transceive_CMD, tag_type, 1, tag_type, &backBits);
 584:	8e 01       	movw	r16, r28
 586:	0f 5f       	subi	r16, 0xFF	; 255
 588:	1f 4f       	sbci	r17, 0xFF	; 255
 58a:	97 01       	movw	r18, r14
 58c:	41 e0       	ldi	r20, 0x01	; 1
 58e:	b7 01       	movw	r22, r14
 590:	8c e0       	ldi	r24, 0x0C	; 12
 592:	01 df       	rcall	.-510    	; 0x396 <mfrc522_to_card>

	if ((status != CARD_FOUND) || (backBits != 0x10))
 594:	81 30       	cpi	r24, 0x01	; 1
 596:	51 f4       	brne	.+20     	; 0x5ac <mfrc522_request+0x4a>
 598:	49 81       	ldd	r20, Y+1	; 0x01
 59a:	5a 81       	ldd	r21, Y+2	; 0x02
 59c:	6b 81       	ldd	r22, Y+3	; 0x03
 59e:	7c 81       	ldd	r23, Y+4	; 0x04
 5a0:	40 31       	cpi	r20, 0x10	; 16
 5a2:	51 05       	cpc	r21, r1
 5a4:	61 05       	cpc	r22, r1
 5a6:	71 05       	cpc	r23, r1
 5a8:	09 f4       	brne	.+2      	; 0x5ac <mfrc522_request+0x4a>
 5aa:	01 c0       	rjmp	.+2      	; 0x5ae <mfrc522_request+0x4c>
	{    
		status = ERROR;
 5ac:	83 e0       	ldi	r24, 0x03	; 3
	}
   
	return status;
}
 5ae:	0f 90       	pop	r0
 5b0:	0f 90       	pop	r0
 5b2:	0f 90       	pop	r0
 5b4:	0f 90       	pop	r0
 5b6:	df 91       	pop	r29
 5b8:	cf 91       	pop	r28
 5ba:	1f 91       	pop	r17
 5bc:	0f 91       	pop	r16
 5be:	ff 90       	pop	r15
 5c0:	ef 90       	pop	r14
 5c2:	08 95       	ret

000005c4 <mfrc522_get_card_serial>:
    return status;
}


uint8_t mfrc522_get_card_serial(uint8_t * serial_out)
{
 5c4:	ef 92       	push	r14
 5c6:	ff 92       	push	r15
 5c8:	0f 93       	push	r16
 5ca:	1f 93       	push	r17
 5cc:	cf 93       	push	r28
 5ce:	df 93       	push	r29
 5d0:	00 d0       	rcall	.+0      	; 0x5d2 <mfrc522_get_card_serial+0xe>
 5d2:	00 d0       	rcall	.+0      	; 0x5d4 <mfrc522_get_card_serial+0x10>
 5d4:	cd b7       	in	r28, 0x3d	; 61
 5d6:	de b7       	in	r29, 0x3e	; 62
 5d8:	7c 01       	movw	r14, r24
	uint8_t status;
    uint8_t i;
	uint8_t serNumCheck=0;
    uint32_t unLen;
    
	mfrc522_write(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 5da:	60 e0       	ldi	r22, 0x00	; 0
 5dc:	8d e0       	ldi	r24, 0x0D	; 13
 5de:	9d de       	rcall	.-710    	; 0x31a <mfrc522_write>
 
    serial_out[0] = PICC_ANTICOLL;
 5e0:	83 e9       	ldi	r24, 0x93	; 147
 5e2:	f7 01       	movw	r30, r14
 5e4:	80 83       	st	Z, r24
    serial_out[1] = 0x20;
 5e6:	80 e2       	ldi	r24, 0x20	; 32
 5e8:	81 83       	std	Z+1, r24	; 0x01
    status = mfrc522_to_card(Transceive_CMD, serial_out, 2, serial_out, &unLen);
 5ea:	8e 01       	movw	r16, r28
 5ec:	0f 5f       	subi	r16, 0xFF	; 255
 5ee:	1f 4f       	sbci	r17, 0xFF	; 255
 5f0:	97 01       	movw	r18, r14
 5f2:	42 e0       	ldi	r20, 0x02	; 2
 5f4:	b7 01       	movw	r22, r14
 5f6:	8c e0       	ldi	r24, 0x0C	; 12
 5f8:	ce de       	rcall	.-612    	; 0x396 <mfrc522_to_card>

    if (status == CARD_FOUND)
 5fa:	81 30       	cpi	r24, 0x01	; 1
 5fc:	59 f4       	brne	.+22     	; 0x614 <mfrc522_get_card_serial+0x50>
 5fe:	f7 01       	movw	r30, r14
 600:	24 e0       	ldi	r18, 0x04	; 4
 602:	90 e0       	ldi	r25, 0x00	; 0
	{
		//Check card serial number
		for (i=0; i<4; i++)
		{   
		 	serNumCheck ^= serial_out[i];
 604:	31 91       	ld	r19, Z+
 606:	93 27       	eor	r25, r19
 608:	21 50       	subi	r18, 0x01	; 1
    status = mfrc522_to_card(Transceive_CMD, serial_out, 2, serial_out, &unLen);

    if (status == CARD_FOUND)
	{
		//Check card serial number
		for (i=0; i<4; i++)
 60a:	e1 f7       	brne	.-8      	; 0x604 <mfrc522_get_card_serial+0x40>
		{   
		 	serNumCheck ^= serial_out[i];
		}
		if (serNumCheck != serial_out[i])
 60c:	f7 01       	movw	r30, r14
 60e:	24 81       	ldd	r18, Z+4	; 0x04
 610:	92 13       	cpse	r25, r18
		{   
			status = ERROR;    
 612:	83 e0       	ldi	r24, 0x03	; 3
		}
    }
    return status;
}
 614:	0f 90       	pop	r0
 616:	0f 90       	pop	r0
 618:	0f 90       	pop	r0
 61a:	0f 90       	pop	r0
 61c:	df 91       	pop	r29
 61e:	cf 91       	pop	r28
 620:	1f 91       	pop	r17
 622:	0f 91       	pop	r16
 624:	ff 90       	pop	r15
 626:	ef 90       	pop	r14
 628:	08 95       	ret

0000062a <spi_init>:
#include <spi.h>

#if SPI_CONFIG_AS_MASTER
void spi_init()
{
	SPI_DDR = (1<<SPI_MOSI)|(1<<SPI_SCK)|(1<<SPI_SS);
 62a:	8c e2       	ldi	r24, 0x2C	; 44
 62c:	84 b9       	out	0x04, r24	; 4
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);//prescaler 16
 62e:	81 e5       	ldi	r24, 0x51	; 81
 630:	8c bd       	out	0x2c, r24	; 44
 632:	08 95       	ret

00000634 <spi_transmit>:
}


uint8_t spi_transmit(uint8_t data)
{
	SPDR = data;
 634:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
 636:	0d b4       	in	r0, 0x2d	; 45
 638:	07 fe       	sbrs	r0, 7
 63a:	fd cf       	rjmp	.-6      	; 0x636 <spi_transmit+0x2>
	
	return SPDR;
 63c:	8e b5       	in	r24, 0x2e	; 46
}
 63e:	08 95       	ret

00000640 <main>:
#define WHITE 	3

void gate_action();

int main()
{
 640:	cf 93       	push	r28
 642:	df 93       	push	r29
 644:	cd b7       	in	r28, 0x3d	; 61
 646:	de b7       	in	r29, 0x3e	; 62
 648:	6a 97       	sbiw	r28, 0x1a	; 26
 64a:	0f b6       	in	r0, 0x3f	; 63
 64c:	f8 94       	cli
 64e:	de bf       	out	0x3e, r29	; 62
 650:	0f be       	out	0x3f, r0	; 63
 652:	cd bf       	out	0x3d, r28	; 61
	uint8_t byte;
	uint8_t str[MAX_LEN];
	uint8_t person_recognised = 0;
	uint8_t Blue[5]  ={0x3d,0x21,0xe4,0xd3,0x2b};
 654:	85 e0       	ldi	r24, 0x05	; 5
 656:	e0 e0       	ldi	r30, 0x00	; 0
 658:	f1 e0       	ldi	r31, 0x01	; 1
 65a:	de 01       	movw	r26, r28
 65c:	56 96       	adiw	r26, 0x16	; 22
 65e:	01 90       	ld	r0, Z+
 660:	0d 92       	st	X+, r0
 662:	8a 95       	dec	r24
 664:	e1 f7       	brne	.-8      	; 0x65e <main+0x1e>
	uint8_t White[5] ={0x0e,0x65,0xe2,0x13,0x9a};
 666:	85 e0       	ldi	r24, 0x05	; 5
 668:	e5 e0       	ldi	r30, 0x05	; 5
 66a:	f1 e0       	ldi	r31, 0x01	; 1
 66c:	de 01       	movw	r26, r28
 66e:	51 96       	adiw	r26, 0x11	; 17
 670:	01 90       	ld	r0, Z+
 672:	0d 92       	st	X+, r0
 674:	8a 95       	dec	r24
 676:	e1 f7       	brne	.-8      	; 0x670 <main+0x30>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 678:	2f e7       	ldi	r18, 0x7F	; 127
 67a:	88 e3       	ldi	r24, 0x38	; 56
 67c:	91 e0       	ldi	r25, 0x01	; 1
 67e:	21 50       	subi	r18, 0x01	; 1
 680:	80 40       	sbci	r24, 0x00	; 0
 682:	90 40       	sbci	r25, 0x00	; 0
 684:	e1 f7       	brne	.-8      	; 0x67e <main+0x3e>
 686:	00 c0       	rjmp	.+0      	; 0x688 <main+0x48>
 688:	00 00       	nop
	
	_delay_ms(50);
	LCDInit(LS_BLINK);
 68a:	81 e0       	ldi	r24, 0x01	; 1
 68c:	76 dd       	rcall	.-1300   	; 0x17a <LCDInit>
	LCDWriteStringXY(2,0,"RFID Reader");
 68e:	60 e0       	ldi	r22, 0x00	; 0
 690:	82 e0       	ldi	r24, 0x02	; 2
 692:	12 de       	rcall	.-988    	; 0x2b8 <LCDGotoXY>
 694:	81 e4       	ldi	r24, 0x41	; 65
 696:	91 e0       	ldi	r25, 0x01	; 1
 698:	a3 dd       	rcall	.-1210   	; 0x1e0 <LCDWriteString>
	LCDWriteStringXY(5,1,VERSION_STR);
 69a:	61 e0       	ldi	r22, 0x01	; 1
 69c:	85 e0       	ldi	r24, 0x05	; 5
 69e:	0c de       	rcall	.-1000   	; 0x2b8 <LCDGotoXY>
 6a0:	8d e4       	ldi	r24, 0x4D	; 77
 6a2:	91 e0       	ldi	r25, 0x01	; 1
 6a4:	9d dd       	rcall	.-1222   	; 0x1e0 <LCDWriteString>
	
	
	MOTOR_PORT_INIT();
 6a6:	80 e3       	ldi	r24, 0x30	; 48
 6a8:	87 b9       	out	0x07, r24	; 7
	spi_init();
 6aa:	bf df       	rcall	.-130    	; 0x62a <spi_init>
	mfrc522_init();
 6ac:	57 de       	rcall	.-850    	; 0x35c <mfrc522_init>
 6ae:	af ef       	ldi	r26, 0xFF	; 255
 6b0:	be e9       	ldi	r27, 0x9E	; 158
 6b2:	24 e2       	ldi	r18, 0x24	; 36
 6b4:	a1 50       	subi	r26, 0x01	; 1
 6b6:	b0 40       	sbci	r27, 0x00	; 0
 6b8:	20 40       	sbci	r18, 0x00	; 0
 6ba:	e1 f7       	brne	.-8      	; 0x6b4 <main+0x74>
 6bc:	00 c0       	rjmp	.+0      	; 0x6be <main+0x7e>
 6be:	00 00       	nop
	_delay_ms(1500);
	LCDClear();
 6c0:	60 e0       	ldi	r22, 0x00	; 0
 6c2:	81 e0       	ldi	r24, 0x01	; 1
 6c4:	2a dd       	rcall	.-1452   	; 0x11a <LCDByte>
	
	//init reader
	
	
	//check version of the reader
	byte = mfrc522_read(VersionReg);
 6c6:	87 e3       	ldi	r24, 0x37	; 55
 6c8:	3a de       	rcall	.-908    	; 0x33e <mfrc522_read>
	if(byte == 0x92)
 6ca:	82 39       	cpi	r24, 0x92	; 146
 6cc:	31 f4       	brne	.+12     	; 0x6da <main+0x9a>
	{
		LCDWriteStringXY(2,0,"MIFARE RC522v2");
 6ce:	60 e0       	ldi	r22, 0x00	; 0
 6d0:	82 e0       	ldi	r24, 0x02	; 2
 6d2:	f2 dd       	rcall	.-1052   	; 0x2b8 <LCDGotoXY>
 6d4:	83 e5       	ldi	r24, 0x53	; 83
 6d6:	91 e0       	ldi	r25, 0x01	; 1
 6d8:	08 c0       	rjmp	.+16     	; 0x6ea <main+0xaa>
		LCDWriteStringXY(4,1,"Detected");
	}else if(byte == 0x91 || byte==0x90)
 6da:	80 59       	subi	r24, 0x90	; 144
	{
		LCDWriteStringXY(2,0,"MIFARE RC522v1");
 6dc:	60 e0       	ldi	r22, 0x00	; 0
	byte = mfrc522_read(VersionReg);
	if(byte == 0x92)
	{
		LCDWriteStringXY(2,0,"MIFARE RC522v2");
		LCDWriteStringXY(4,1,"Detected");
	}else if(byte == 0x91 || byte==0x90)
 6de:	82 30       	cpi	r24, 0x02	; 2
 6e0:	58 f4       	brcc	.+22     	; 0x6f8 <main+0xb8>
	{
		LCDWriteStringXY(2,0,"MIFARE RC522v1");
 6e2:	82 e0       	ldi	r24, 0x02	; 2
 6e4:	e9 dd       	rcall	.-1070   	; 0x2b8 <LCDGotoXY>
 6e6:	8b e6       	ldi	r24, 0x6B	; 107
 6e8:	91 e0       	ldi	r25, 0x01	; 1
 6ea:	7a dd       	rcall	.-1292   	; 0x1e0 <LCDWriteString>
		LCDWriteStringXY(4,1,"Detected");
 6ec:	61 e0       	ldi	r22, 0x01	; 1
 6ee:	84 e0       	ldi	r24, 0x04	; 4
 6f0:	e3 dd       	rcall	.-1082   	; 0x2b8 <LCDGotoXY>
 6f2:	82 e6       	ldi	r24, 0x62	; 98
 6f4:	91 e0       	ldi	r25, 0x01	; 1
 6f6:	04 c0       	rjmp	.+8      	; 0x700 <main+0xc0>
	}else
	{
		LCDWriteStringXY(0,0,"No reader found");
 6f8:	80 e0       	ldi	r24, 0x00	; 0
 6fa:	de dd       	rcall	.-1092   	; 0x2b8 <LCDGotoXY>
 6fc:	8a e7       	ldi	r24, 0x7A	; 122
 6fe:	91 e0       	ldi	r25, 0x01	; 1
 700:	6f dd       	rcall	.-1314   	; 0x1e0 <LCDWriteString>
 702:	8f ef       	ldi	r24, 0xFF	; 255
 704:	9e e9       	ldi	r25, 0x9E	; 158
 706:	a4 e2       	ldi	r26, 0x24	; 36
 708:	81 50       	subi	r24, 0x01	; 1
 70a:	90 40       	sbci	r25, 0x00	; 0
 70c:	a0 40       	sbci	r26, 0x00	; 0
 70e:	e1 f7       	brne	.-8      	; 0x708 <main+0xc8>
 710:	00 c0       	rjmp	.+0      	; 0x712 <main+0xd2>
 712:	00 00       	nop
	}
	
	_delay_ms(1500);
	LCDClear();
 714:	60 e0       	ldi	r22, 0x00	; 0
 716:	81 e0       	ldi	r24, 0x01	; 1
 718:	00 dd       	rcall	.-1536   	; 0x11a <LCDByte>
	
	LCDClear();
 71a:	60 e0       	ldi	r22, 0x00	; 0
 71c:	81 e0       	ldi	r24, 0x01	; 1
 71e:	fd dc       	rcall	.-1542   	; 0x11a <LCDByte>
	LCDWriteStringXY(1,0,"Show Your Card");
 720:	60 e0       	ldi	r22, 0x00	; 0
 722:	81 e0       	ldi	r24, 0x01	; 1
 724:	c9 dd       	rcall	.-1134   	; 0x2b8 <LCDGotoXY>
 726:	82 e3       	ldi	r24, 0x32	; 50
 728:	91 e0       	ldi	r25, 0x01	; 1
 72a:	5a dd       	rcall	.-1356   	; 0x1e0 <LCDWriteString>
 72c:	8e 01       	movw	r16, r28
 72e:	0a 5e       	subi	r16, 0xEA	; 234
 730:	1f 4f       	sbci	r17, 0xFF	; 255
#define BLUE 	2
#define WHITE 	3

void gate_action();

int main()
 732:	7e 01       	movw	r14, r28
 734:	bb e1       	ldi	r27, 0x1B	; 27
 736:	eb 0e       	add	r14, r27
 738:	f1 1c       	adc	r15, r1
	LCDClear();
	LCDWriteStringXY(1,0,"Show Your Card");
	
	while(1){
		
		byte = mfrc522_request(PICC_REQALL,str);
 73a:	be 01       	movw	r22, r28
 73c:	6f 5f       	subi	r22, 0xFF	; 255
 73e:	7f 4f       	sbci	r23, 0xFF	; 255
 740:	82 e5       	ldi	r24, 0x52	; 82
 742:	0f df       	rcall	.-482    	; 0x562 <mfrc522_request>
		
		if(byte == CARD_FOUND)
 744:	81 30       	cpi	r24, 0x01	; 1
 746:	c9 f7       	brne	.-14     	; 0x73a <main+0xfa>
		{
			byte = mfrc522_get_card_serial(str);
 748:	ce 01       	movw	r24, r28
 74a:	01 96       	adiw	r24, 0x01	; 1
 74c:	3b df       	rcall	.-394    	; 0x5c4 <mfrc522_get_card_serial>
			if(byte == CARD_FOUND)
 74e:	81 30       	cpi	r24, 0x01	; 1
 750:	d9 f4       	brne	.+54     	; 0x788 <main+0x148>
 752:	f8 01       	movw	r30, r16
 754:	ae 01       	movw	r20, r28
 756:	4f 5f       	subi	r20, 0xFF	; 255
 758:	5f 4f       	sbci	r21, 0xFF	; 255
#define BLUE 	2
#define WHITE 	3

void gate_action();

int main()
 75a:	ca 01       	movw	r24, r20
			if(byte == CARD_FOUND)
			{
				person_recognised = 1;
				for(byte=0;byte<5;byte++)
				{
					if(Blue[byte] != str[byte])
 75c:	31 91       	ld	r19, Z+
 75e:	dc 01       	movw	r26, r24
 760:	2d 91       	ld	r18, X+
 762:	cd 01       	movw	r24, r26
 764:	32 13       	cpse	r19, r18
 766:	04 c0       	rjmp	.+8      	; 0x770 <main+0x130>
		{
			byte = mfrc522_get_card_serial(str);
			if(byte == CARD_FOUND)
			{
				person_recognised = 1;
				for(byte=0;byte<5;byte++)
 768:	ee 15       	cp	r30, r14
 76a:	ff 05       	cpc	r31, r15
 76c:	b9 f7       	brne	.-18     	; 0x75c <main+0x11c>
 76e:	15 c0       	rjmp	.+42     	; 0x79a <main+0x15a>
 770:	fe 01       	movw	r30, r28
 772:	71 96       	adiw	r30, 0x11	; 17
					person_recognised = BLUE;
				else
				{
					for(byte=0;byte<5;byte++)
					{
						if(White[byte] != str[byte])
 774:	91 91       	ld	r25, Z+
 776:	da 01       	movw	r26, r20
 778:	8d 91       	ld	r24, X+
 77a:	ad 01       	movw	r20, r26
 77c:	98 13       	cpse	r25, r24
 77e:	21 c0       	rjmp	.+66     	; 0x7c2 <main+0x182>
				}
				if(byte == 5)
					person_recognised = BLUE;
				else
				{
					for(byte=0;byte<5;byte++)
 780:	e0 17       	cp	r30, r16
 782:	f1 07       	cpc	r31, r17
 784:	b9 f7       	brne	.-18     	; 0x774 <main+0x134>
 786:	12 c0       	rjmp	.+36     	; 0x7ac <main+0x16c>
					}
				}
			}
			else
			{
				LCDClear();
 788:	60 e0       	ldi	r22, 0x00	; 0
 78a:	81 e0       	ldi	r24, 0x01	; 1
 78c:	c6 dc       	rcall	.-1652   	; 0x11a <LCDByte>
				LCDWriteStringXY(5,0,"Error");
 78e:	60 e0       	ldi	r22, 0x00	; 0
 790:	85 e0       	ldi	r24, 0x05	; 5
 792:	92 dd       	rcall	.-1244   	; 0x2b8 <LCDGotoXY>
 794:	8a e8       	ldi	r24, 0x8A	; 138
 796:	91 e0       	ldi	r25, 0x01	; 1
 798:	1c c0       	rjmp	.+56     	; 0x7d2 <main+0x192>
				}
				switch(person_recognised)
				{
					case BLUE : 
					{
						LCDClear();
 79a:	60 e0       	ldi	r22, 0x00	; 0
 79c:	81 e0       	ldi	r24, 0x01	; 1
 79e:	bd dc       	rcall	.-1670   	; 0x11a <LCDByte>
						LCDWriteStringXY(3,0,"Hello Blue");						
 7a0:	60 e0       	ldi	r22, 0x00	; 0
 7a2:	83 e0       	ldi	r24, 0x03	; 3
 7a4:	89 dd       	rcall	.-1262   	; 0x2b8 <LCDGotoXY>
 7a6:	80 e9       	ldi	r24, 0x90	; 144
 7a8:	91 e0       	ldi	r25, 0x01	; 1
 7aa:	08 c0       	rjmp	.+16     	; 0x7bc <main+0x17c>
						gate_action();
						break;
					}
					case WHITE : 
					{
						LCDClear();
 7ac:	60 e0       	ldi	r22, 0x00	; 0
 7ae:	81 e0       	ldi	r24, 0x01	; 1
 7b0:	b4 dc       	rcall	.-1688   	; 0x11a <LCDByte>
						LCDWriteStringXY(3,0,"Hello White");
 7b2:	60 e0       	ldi	r22, 0x00	; 0
 7b4:	83 e0       	ldi	r24, 0x03	; 3
 7b6:	80 dd       	rcall	.-1280   	; 0x2b8 <LCDGotoXY>
 7b8:	8b e9       	ldi	r24, 0x9B	; 155
 7ba:	91 e0       	ldi	r25, 0x01	; 1
 7bc:	11 dd       	rcall	.-1502   	; 0x1e0 <LCDWriteString>
						gate_action();
 7be:	4e dc       	rcall	.-1892   	; 0x5c <gate_action>
						break;
 7c0:	bc cf       	rjmp	.-136    	; 0x73a <main+0xfa>
					}
					default :
					{
						LCDClear();
 7c2:	60 e0       	ldi	r22, 0x00	; 0
 7c4:	81 e0       	ldi	r24, 0x01	; 1
 7c6:	a9 dc       	rcall	.-1710   	; 0x11a <LCDByte>
						LCDWriteStringXY(0,0,"Not Recognised !");
 7c8:	60 e0       	ldi	r22, 0x00	; 0
 7ca:	80 e0       	ldi	r24, 0x00	; 0
 7cc:	75 dd       	rcall	.-1302   	; 0x2b8 <LCDGotoXY>
 7ce:	87 ea       	ldi	r24, 0xA7	; 167
 7d0:	91 e0       	ldi	r25, 0x01	; 1
 7d2:	06 dd       	rcall	.-1524   	; 0x1e0 <LCDWriteString>
						break;
 7d4:	b2 cf       	rjmp	.-156    	; 0x73a <main+0xfa>

000007d6 <__divmodhi4>:
 7d6:	97 fb       	bst	r25, 7
 7d8:	07 2e       	mov	r0, r23
 7da:	16 f4       	brtc	.+4      	; 0x7e0 <__divmodhi4+0xa>
 7dc:	00 94       	com	r0
 7de:	06 d0       	rcall	.+12     	; 0x7ec <__divmodhi4_neg1>
 7e0:	77 fd       	sbrc	r23, 7
 7e2:	08 d0       	rcall	.+16     	; 0x7f4 <__divmodhi4_neg2>
 7e4:	0b d0       	rcall	.+22     	; 0x7fc <__udivmodhi4>
 7e6:	07 fc       	sbrc	r0, 7
 7e8:	05 d0       	rcall	.+10     	; 0x7f4 <__divmodhi4_neg2>
 7ea:	3e f4       	brtc	.+14     	; 0x7fa <__divmodhi4_exit>

000007ec <__divmodhi4_neg1>:
 7ec:	90 95       	com	r25
 7ee:	81 95       	neg	r24
 7f0:	9f 4f       	sbci	r25, 0xFF	; 255
 7f2:	08 95       	ret

000007f4 <__divmodhi4_neg2>:
 7f4:	70 95       	com	r23
 7f6:	61 95       	neg	r22
 7f8:	7f 4f       	sbci	r23, 0xFF	; 255

000007fa <__divmodhi4_exit>:
 7fa:	08 95       	ret

000007fc <__udivmodhi4>:
 7fc:	aa 1b       	sub	r26, r26
 7fe:	bb 1b       	sub	r27, r27
 800:	51 e1       	ldi	r21, 0x11	; 17
 802:	07 c0       	rjmp	.+14     	; 0x812 <__udivmodhi4_ep>

00000804 <__udivmodhi4_loop>:
 804:	aa 1f       	adc	r26, r26
 806:	bb 1f       	adc	r27, r27
 808:	a6 17       	cp	r26, r22
 80a:	b7 07       	cpc	r27, r23
 80c:	10 f0       	brcs	.+4      	; 0x812 <__udivmodhi4_ep>
 80e:	a6 1b       	sub	r26, r22
 810:	b7 0b       	sbc	r27, r23

00000812 <__udivmodhi4_ep>:
 812:	88 1f       	adc	r24, r24
 814:	99 1f       	adc	r25, r25
 816:	5a 95       	dec	r21
 818:	a9 f7       	brne	.-22     	; 0x804 <__udivmodhi4_loop>
 81a:	80 95       	com	r24
 81c:	90 95       	com	r25
 81e:	bc 01       	movw	r22, r24
 820:	cd 01       	movw	r24, r26
 822:	08 95       	ret

00000824 <_exit>:
 824:	f8 94       	cli

00000826 <__stop_program>:
 826:	ff cf       	rjmp	.-2      	; 0x826 <__stop_program>
